
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f658  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e60  0801f718  0801f718  00020718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021578  08021578  0002341c  2**0
                  CONTENTS
  4 .ARM          00000008  08021578  08021578  00022578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021580  08021580  0002341c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021580  08021580  00022580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021584  08021584  00022584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000041c  20000000  08021588  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034a4  2000041c  080219a4  0002341c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200038c0  080219a4  000238c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002341c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000318f6  00000000  00000000  00023444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008fdd  00000000  00000000  00054d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027f0  00000000  00000000  0005dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d6d  00000000  00000000  00060508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022383  00000000  00000000  00062275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f23e  00000000  00000000  000845f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3ae  00000000  00000000  000c3836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00162be4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a264  00000000  00000000  00162c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016cefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0016cf69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016f4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000041c 	.word	0x2000041c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801f700 	.word	0x0801f700

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000420 	.word	0x20000420
 8000104:	0801f700 	.word	0x0801f700

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08020824 	.word	0x08020824
 8000e0c:	08020864 	.word	0x08020864
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080208a0 	.word	0x080208a0
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f009 fcde 	bl	800d024 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f009 fd35 	bl	800d0f4 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f009 fce8 	bl	800d080 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000438 	.word	0x20000438

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f009 fc64 	bl	800d024 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f009 fc93 	bl	800d09c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f009 fc77 	bl	800d080 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000988 	.word	0x20000988

080037b0 <setCharges>:
void setCharges(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037b4:	f002 faf2 	bl	8005d9c <ReadBatteryVoltage>
 80037b8:	1c02      	adds	r2, r0, #0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <setCharges+0x20>)
 80037bc:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037be:	f002 fb4f 	bl	8005e60 <ReadSolarVoltage>
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <setCharges+0x24>)
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000568 	.word	0x20000568
 80037d4:	2000056c 	.word	0x2000056c

080037d8 <checkEEprom>:
bool checkEEprom(){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <checkEEprom+0x5c>)
 80037e0:	4815      	ldr	r0, [pc, #84]	@ (8003838 <checkEEprom+0x60>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	0019      	movs	r1, r3
 80037e6:	f7ff ff87 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00e      	b.n	8003810 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <checkEEprom+0x5c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <checkEEprom+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <checkEEprom+0x64>)
 8003804:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	3201      	adds	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b0b      	cmp	r3, #11
 8003816:	d9ec      	bls.n	80037f2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <checkEEprom+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <checkEEprom+0x68>)
 8003824:	701a      	strb	r2, [r3, #0]
  return test;
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <checkEEprom+0x68>)
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	20000998 	.word	0x20000998
 8003838:	0808000c 	.word	0x0808000c
 800383c:	200009a4 	.word	0x200009a4
 8003840:	200009a8 	.word	0x200009a8

08003844 <checkName>:
bool checkName(){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <checkName+0x5c>)
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <checkName+0x60>)
 800384e:	221e      	movs	r2, #30
 8003850:	0019      	movs	r1, r3
 8003852:	f7ff ff51 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00e      	b.n	800387c <checkName+0x38>
    configSum += nameConfig[i];
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <checkName+0x5c>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	001a      	movs	r2, r3
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <checkName+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <checkName+0x64>)
 8003870:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	3201      	adds	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d9ec      	bls.n	800385e <checkName+0x1a>
  }
  test = (configSum != 0);
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <checkName+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	4193      	sbcs	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <checkName+0x68>)
 8003890:	701a      	strb	r2, [r3, #0]
  return test;
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <checkName+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	200009ac 	.word	0x200009ac
 80038a4:	08080090 	.word	0x08080090
 80038a8:	200009cc 	.word	0x200009cc
 80038ac:	200009d0 	.word	0x200009d0

080038b0 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <ESP_GetHT+0x20>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <ESP_GetHT+0x24>)
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	20000560 	.word	0x20000560
 80038d4:	20000564 	.word	0x20000564

080038d8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	1dbb      	adds	r3, r7, #6
 80038e4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <setMeasurement+0x2c>)
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <setMeasurement+0x30>)
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setMeasurement+0x34>)
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000560 	.word	0x20000560
 8003908:	20000564 	.word	0x20000564
 800390c:	20000570 	.word	0x20000570

08003910 <setMic>:
void setMic(float dB){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <setMic+0x18>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000574 	.word	0x20000574

0800392c <SetConfigMode>:

void SetConfigMode(){
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <SetConfigMode+0x10>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000547 	.word	0x20000547

08003940 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003944:	f008 fb98 	bl	800c078 <HAL_GetUIDw0>
 8003948:	0002      	movs	r2, r0
 800394a:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <ESP_GetUID+0x28>)
 800394c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800394e:	f008 fb9d 	bl	800c08c <HAL_GetUIDw1>
 8003952:	0002      	movs	r2, r0
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <ESP_GetUID+0x28>)
 8003956:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003958:	f008 fba2 	bl	800c0a0 <HAL_GetUIDw2>
 800395c:	0002      	movs	r2, r0
 800395e:	4b02      	ldr	r3, [pc, #8]	@ (8003968 <ESP_GetUID+0x28>)
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	2000054c 	.word	0x2000054c

0800396c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003974:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <ESP_Init+0x2c>)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <ESP_Init+0x30>)
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003980:	f7ff ffde 	bl	8003940 <ESP_GetUID>
  beurs = checkEEprom();
 8003984:	f7ff ff28 	bl	80037d8 <checkEEprom>
 8003988:	0003      	movs	r3, r0
 800398a:	001a      	movs	r2, r3
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <ESP_Init+0x34>)
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	2000043c 	.word	0x2000043c
 800399c:	20000028 	.word	0x20000028
 80039a0:	2000054a 	.word	0x2000054a

080039a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039a4:	b5b0      	push	{r4, r5, r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	000a      	movs	r2, r1
 80039ae:	1cbb      	adds	r3, r7, #2
 80039b0:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s", command);
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <ESP_Send+0x54>)
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f018 fdad 	bl	801c518 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <ESP_Send+0x58>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	250f      	movs	r5, #15
 80039c4:	197c      	adds	r4, r7, r5
 80039c6:	1cbb      	adds	r3, r7, #2
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0019      	movs	r1, r3
 80039ce:	f010 f829 	bl	8013a24 <HAL_UART_Transmit_DMA>
 80039d2:	0003      	movs	r3, r0
 80039d4:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 80039de:	4a08      	ldr	r2, [pc, #32]	@ (8003a00 <ESP_Send+0x5c>)
 80039e0:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <ESP_Send+0x60>)
 80039e2:	0019      	movs	r1, r3
 80039e4:	2001      	movs	r0, #1
 80039e6:	f007 ff7d 	bl	800b8e4 <CreateLine>
    return false;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <ESP_Send+0x4c>
  }
  return true;
 80039ee:	2301      	movs	r3, #1
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}
 80039f8:	0801f718 	.word	0x0801f718
 80039fc:	2000043c 	.word	0x2000043c
 8003a00:	0801f728 	.word	0x0801f728
 8003a04:	0801f748 	.word	0x0801f748

08003a08 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	000a      	movs	r2, r1
 8003a12:	1cbb      	adds	r3, r7, #2
 8003a14:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a1c:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <ESP_Receive+0x60>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	250f      	movs	r5, #15
 8003a22:	197c      	adds	r4, r7, r5
 8003a24:	1cbb      	adds	r3, r7, #2
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	f010 f88a 	bl	8013b44 <HAL_UART_Receive_DMA>
 8003a30:	0003      	movs	r3, r0
 8003a32:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a34:	197b      	adds	r3, r7, r5
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <ESP_Receive+0x60>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2284      	movs	r2, #132	@ 0x84
 8003a42:	589b      	ldr	r3, [r3, r2]
 8003a44:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <ESP_Receive+0x64>)
 8003a46:	490a      	ldr	r1, [pc, #40]	@ (8003a70 <ESP_Receive+0x68>)
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f007 ff4b 	bl	800b8e4 <CreateLine>
    RxComplete = true;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
    return false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <ESP_Receive+0x52>
  }
  return true;
 8003a58:	2301      	movs	r3, #1
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bdb0      	pop	{r4, r5, r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	20000440 	.word	0x20000440
 8003a68:	2000043c 	.word	0x2000043c
 8003a6c:	0801f74c 	.word	0x0801f74c
 8003a70:	0801f748 	.word	0x0801f748

08003a74 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <HAL_UART_ErrorCallback+0x2c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d107      	bne.n	8003a96 <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2284      	movs	r2, #132	@ 0x84
 8003a8a:	589b      	ldr	r3, [r3, r2]
 8003a8c:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <HAL_UART_ErrorCallback+0x30>)
 8003a8e:	4906      	ldr	r1, [pc, #24]	@ (8003aa8 <HAL_UART_ErrorCallback+0x34>)
 8003a90:	2003      	movs	r0, #3
 8003a92:	f007 ff27 	bl	800b8e4 <CreateLine>
  }
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	2000043c 	.word	0x2000043c
 8003aa4:	0801f77c 	.word	0x0801f77c
 8003aa8:	0801f7a8 	.word	0x0801f7a8

08003aac <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e010      	b.n	8003ade <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1898      	adds	r0, r3, r2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	001a      	movs	r2, r3
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <uint8ArrayToString+0x44>)
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f018 fd30 	bl	801c538 <siprintf>
  for (int i = 0; i < 12; i++)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	ddeb      	ble.n	8003abc <uint8ArrayToString+0x10>
  }
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	0801f7ac 	.word	0x0801f7ac

08003af4 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af6:	b089      	sub	sp, #36	@ 0x24
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	0002      	movs	r2, r0
 8003afc:	1dfb      	adds	r3, r7, #7
 8003afe:	701a      	strb	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b00:	4bb9      	ldr	r3, [pc, #740]	@ (8003de8 <CreateMessage+0x2f4>)
 8003b02:	48ba      	ldr	r0, [pc, #744]	@ (8003dec <CreateMessage+0x2f8>)
 8003b04:	220c      	movs	r2, #12
 8003b06:	0019      	movs	r1, r3
 8003b08:	f7ff fdf6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b0c:	4bb8      	ldr	r3, [pc, #736]	@ (8003df0 <CreateMessage+0x2fc>)
 8003b0e:	48b9      	ldr	r0, [pc, #740]	@ (8003df4 <CreateMessage+0x300>)
 8003b10:	220c      	movs	r2, #12
 8003b12:	0019      	movs	r1, r3
 8003b14:	f7ff fdf0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b18:	4bb7      	ldr	r3, [pc, #732]	@ (8003df8 <CreateMessage+0x304>)
 8003b1a:	48b8      	ldr	r0, [pc, #736]	@ (8003dfc <CreateMessage+0x308>)
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7ff fdea 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b24:	4bb6      	ldr	r3, [pc, #728]	@ (8003e00 <CreateMessage+0x30c>)
 8003b26:	48b7      	ldr	r0, [pc, #732]	@ (8003e04 <CreateMessage+0x310>)
 8003b28:	220c      	movs	r2, #12
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7ff fde4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b30:	4bb5      	ldr	r3, [pc, #724]	@ (8003e08 <CreateMessage+0x314>)
 8003b32:	48b6      	ldr	r0, [pc, #728]	@ (8003e0c <CreateMessage+0x318>)
 8003b34:	220c      	movs	r2, #12
 8003b36:	0019      	movs	r1, r3
 8003b38:	f7ff fdde 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b3c:	4bb4      	ldr	r3, [pc, #720]	@ (8003e10 <CreateMessage+0x31c>)
 8003b3e:	48b5      	ldr	r0, [pc, #724]	@ (8003e14 <CreateMessage+0x320>)
 8003b40:	220c      	movs	r2, #12
 8003b42:	0019      	movs	r1, r3
 8003b44:	f7ff fdd8 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b48:	f7ff fe7c 	bl	8003844 <checkName>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d006      	beq.n	8003b5e <CreateMessage+0x6a>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b50:	4bb1      	ldr	r3, [pc, #708]	@ (8003e18 <CreateMessage+0x324>)
 8003b52:	48b2      	ldr	r0, [pc, #712]	@ (8003e1c <CreateMessage+0x328>)
 8003b54:	221e      	movs	r2, #30
 8003b56:	0019      	movs	r1, r3
 8003b58:	f7ff fdce 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003b5c:	e005      	b.n	8003b6a <CreateMessage+0x76>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b5e:	4bae      	ldr	r3, [pc, #696]	@ (8003e18 <CreateMessage+0x324>)
 8003b60:	4aaf      	ldr	r2, [pc, #700]	@ (8003e20 <CreateMessage+0x32c>)
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	6019      	str	r1, [r3, #0]
 8003b66:	7912      	ldrb	r2, [r2, #4]
 8003b68:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b6a:	f7ff fe21 	bl	80037b0 <setCharges>

  memset(message, '\0', 1024);
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	00da      	lsls	r2, r3, #3
 8003b72:	4bac      	ldr	r3, [pc, #688]	@ (8003e24 <CreateMessage+0x330>)
 8003b74:	2100      	movs	r1, #0
 8003b76:	0018      	movs	r0, r3
 8003b78:	f018 fd82 	bl	801c680 <memset>
  uint16_t index = 0;
 8003b7c:	260e      	movs	r6, #14
 8003b7e:	19bb      	adds	r3, r7, r6
 8003b80:	2200      	movs	r2, #0
 8003b82:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b84:	19bb      	adds	r3, r7, r6
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	4ba6      	ldr	r3, [pc, #664]	@ (8003e24 <CreateMessage+0x330>)
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	4aa6      	ldr	r2, [pc, #664]	@ (8003e28 <CreateMessage+0x334>)
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f018 fcd1 	bl	801c538 <siprintf>
  index = strlen(message);
 8003b96:	4ba3      	ldr	r3, [pc, #652]	@ (8003e24 <CreateMessage+0x330>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc fae7 	bl	800016c <strlen>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	19bb      	adds	r3, r7, r6
 8003ba2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003ba4:	4a90      	ldr	r2, [pc, #576]	@ (8003de8 <CreateMessage+0x2f4>)
 8003ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8003e2c <CreateMessage+0x338>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff ff7e 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003bb0:	19bb      	adds	r3, r7, r6
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8003e24 <CreateMessage+0x330>)
 8003bb6:	18d4      	adds	r4, r2, r3
 8003bb8:	4b9d      	ldr	r3, [pc, #628]	@ (8003e30 <CreateMessage+0x33c>)
 8003bba:	689d      	ldr	r5, [r3, #8]
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e34 <CreateMessage+0x340>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1c18      	adds	r0, r3, #0
 8003bc2:	f7ff fc4f 	bl	8003464 <__aeabi_f2d>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	000b      	movs	r3, r1
 8003bca:	4893      	ldr	r0, [pc, #588]	@ (8003e18 <CreateMessage+0x324>)
 8003bcc:	499a      	ldr	r1, [pc, #616]	@ (8003e38 <CreateMessage+0x344>)
 8003bce:	9202      	str	r2, [sp, #8]
 8003bd0:	9303      	str	r3, [sp, #12]
 8003bd2:	4b96      	ldr	r3, [pc, #600]	@ (8003e2c <CreateMessage+0x338>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	002a      	movs	r2, r5
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f018 fcac 	bl	801c538 <siprintf>
  index = strlen(message);
 8003be0:	4b90      	ldr	r3, [pc, #576]	@ (8003e24 <CreateMessage+0x330>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7fc fac2 	bl	800016c <strlen>
 8003be8:	0002      	movs	r2, r0
 8003bea:	19bb      	adds	r3, r7, r6
 8003bec:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003bee:	4a80      	ldr	r2, [pc, #512]	@ (8003df0 <CreateMessage+0x2fc>)
 8003bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8003e2c <CreateMessage+0x338>)
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff ff59 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003bfa:	19bb      	adds	r3, r7, r6
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	4b89      	ldr	r3, [pc, #548]	@ (8003e24 <CreateMessage+0x330>)
 8003c00:	18d4      	adds	r4, r2, r3
 8003c02:	4b8b      	ldr	r3, [pc, #556]	@ (8003e30 <CreateMessage+0x33c>)
 8003c04:	689d      	ldr	r5, [r3, #8]
 8003c06:	4b8d      	ldr	r3, [pc, #564]	@ (8003e3c <CreateMessage+0x348>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1c18      	adds	r0, r3, #0
 8003c0c:	f7ff fc2a 	bl	8003464 <__aeabi_f2d>
 8003c10:	0002      	movs	r2, r0
 8003c12:	000b      	movs	r3, r1
 8003c14:	4880      	ldr	r0, [pc, #512]	@ (8003e18 <CreateMessage+0x324>)
 8003c16:	498a      	ldr	r1, [pc, #552]	@ (8003e40 <CreateMessage+0x34c>)
 8003c18:	9202      	str	r2, [sp, #8]
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	4b83      	ldr	r3, [pc, #524]	@ (8003e2c <CreateMessage+0x338>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	0003      	movs	r3, r0
 8003c22:	002a      	movs	r2, r5
 8003c24:	0020      	movs	r0, r4
 8003c26:	f018 fc87 	bl	801c538 <siprintf>
  index = strlen(message);
 8003c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003e24 <CreateMessage+0x330>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fc fa9d 	bl	800016c <strlen>
 8003c32:	0002      	movs	r2, r0
 8003c34:	19bb      	adds	r3, r7, r6
 8003c36:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c38:	4a6f      	ldr	r2, [pc, #444]	@ (8003df8 <CreateMessage+0x304>)
 8003c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <CreateMessage+0x338>)
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff ff34 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c44:	19bb      	adds	r3, r7, r6
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	4b76      	ldr	r3, [pc, #472]	@ (8003e24 <CreateMessage+0x330>)
 8003c4a:	18d4      	adds	r4, r2, r3
 8003c4c:	4b78      	ldr	r3, [pc, #480]	@ (8003e30 <CreateMessage+0x33c>)
 8003c4e:	689d      	ldr	r5, [r3, #8]
 8003c50:	4b7c      	ldr	r3, [pc, #496]	@ (8003e44 <CreateMessage+0x350>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c18      	adds	r0, r3, #0
 8003c56:	f7ff fc05 	bl	8003464 <__aeabi_f2d>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	000b      	movs	r3, r1
 8003c5e:	486e      	ldr	r0, [pc, #440]	@ (8003e18 <CreateMessage+0x324>)
 8003c60:	4979      	ldr	r1, [pc, #484]	@ (8003e48 <CreateMessage+0x354>)
 8003c62:	9202      	str	r2, [sp, #8]
 8003c64:	9303      	str	r3, [sp, #12]
 8003c66:	4b71      	ldr	r3, [pc, #452]	@ (8003e2c <CreateMessage+0x338>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	002a      	movs	r2, r5
 8003c6e:	0020      	movs	r0, r4
 8003c70:	f018 fc62 	bl	801c538 <siprintf>
  index = strlen(message);
 8003c74:	4b6b      	ldr	r3, [pc, #428]	@ (8003e24 <CreateMessage+0x330>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fc fa78 	bl	800016c <strlen>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	19bb      	adds	r3, r7, r6
 8003c80:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c82:	4a5f      	ldr	r2, [pc, #380]	@ (8003e00 <CreateMessage+0x30c>)
 8003c84:	4b69      	ldr	r3, [pc, #420]	@ (8003e2c <CreateMessage+0x338>)
 8003c86:	0011      	movs	r1, r2
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff ff0f 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c8e:	19bb      	adds	r3, r7, r6
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	4b64      	ldr	r3, [pc, #400]	@ (8003e24 <CreateMessage+0x330>)
 8003c94:	18d0      	adds	r0, r2, r3
 8003c96:	4b66      	ldr	r3, [pc, #408]	@ (8003e30 <CreateMessage+0x33c>)
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003e4c <CreateMessage+0x358>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	4c5e      	ldr	r4, [pc, #376]	@ (8003e18 <CreateMessage+0x324>)
 8003ca0:	496b      	ldr	r1, [pc, #428]	@ (8003e50 <CreateMessage+0x35c>)
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <CreateMessage+0x338>)
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	0023      	movs	r3, r4
 8003caa:	f018 fc45 	bl	801c538 <siprintf>
  index = strlen(message);
 8003cae:	4b5d      	ldr	r3, [pc, #372]	@ (8003e24 <CreateMessage+0x330>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fc fa5b 	bl	800016c <strlen>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	19bb      	adds	r3, r7, r6
 8003cba:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4053      	eors	r3, r2
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04a      	beq.n	8003d60 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003cca:	4a4f      	ldr	r2, [pc, #316]	@ (8003e08 <CreateMessage+0x314>)
 8003ccc:	4b57      	ldr	r3, [pc, #348]	@ (8003e2c <CreateMessage+0x338>)
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff feeb 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003cd6:	19bb      	adds	r3, r7, r6
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	4b52      	ldr	r3, [pc, #328]	@ (8003e24 <CreateMessage+0x330>)
 8003cdc:	18d4      	adds	r4, r2, r3
 8003cde:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <CreateMessage+0x33c>)
 8003ce0:	689d      	ldr	r5, [r3, #8]
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e54 <CreateMessage+0x360>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c18      	adds	r0, r3, #0
 8003ce8:	f7ff fbbc 	bl	8003464 <__aeabi_f2d>
 8003cec:	0002      	movs	r2, r0
 8003cee:	000b      	movs	r3, r1
 8003cf0:	4849      	ldr	r0, [pc, #292]	@ (8003e18 <CreateMessage+0x324>)
 8003cf2:	4959      	ldr	r1, [pc, #356]	@ (8003e58 <CreateMessage+0x364>)
 8003cf4:	9202      	str	r2, [sp, #8]
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <CreateMessage+0x338>)
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	002a      	movs	r2, r5
 8003d00:	0020      	movs	r0, r4
 8003d02:	f018 fc19 	bl	801c538 <siprintf>
    index = strlen(message);
 8003d06:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <CreateMessage+0x330>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fc fa2f 	bl	800016c <strlen>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	19bb      	adds	r3, r7, r6
 8003d12:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d14:	4a3e      	ldr	r2, [pc, #248]	@ (8003e10 <CreateMessage+0x31c>)
 8003d16:	4b45      	ldr	r3, [pc, #276]	@ (8003e2c <CreateMessage+0x338>)
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7ff fec6 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d20:	19bb      	adds	r3, r7, r6
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	4b3f      	ldr	r3, [pc, #252]	@ (8003e24 <CreateMessage+0x330>)
 8003d26:	18d4      	adds	r4, r2, r3
 8003d28:	4b41      	ldr	r3, [pc, #260]	@ (8003e30 <CreateMessage+0x33c>)
 8003d2a:	689d      	ldr	r5, [r3, #8]
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <CreateMessage+0x368>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	1c18      	adds	r0, r3, #0
 8003d32:	f7ff fb97 	bl	8003464 <__aeabi_f2d>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	4837      	ldr	r0, [pc, #220]	@ (8003e18 <CreateMessage+0x324>)
 8003d3c:	4948      	ldr	r1, [pc, #288]	@ (8003e60 <CreateMessage+0x36c>)
 8003d3e:	9202      	str	r2, [sp, #8]
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	4b3a      	ldr	r3, [pc, #232]	@ (8003e2c <CreateMessage+0x338>)
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	0003      	movs	r3, r0
 8003d48:	002a      	movs	r2, r5
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f018 fbf4 	bl	801c538 <siprintf>
    index = strlen(message);
 8003d50:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <CreateMessage+0x330>)
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fc fa0a 	bl	800016c <strlen>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	19bb      	adds	r3, r7, r6
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e025      	b.n	8003dac <CreateMessage+0x2b8>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <CreateMessage+0x314>)
 8003d62:	4b32      	ldr	r3, [pc, #200]	@ (8003e2c <CreateMessage+0x338>)
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fea0 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d6c:	260e      	movs	r6, #14
 8003d6e:	19bb      	adds	r3, r7, r6
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	4b2c      	ldr	r3, [pc, #176]	@ (8003e24 <CreateMessage+0x330>)
 8003d74:	18d4      	adds	r4, r2, r3
 8003d76:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <CreateMessage+0x33c>)
 8003d78:	689d      	ldr	r5, [r3, #8]
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <CreateMessage+0x360>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f7ff fb70 	bl	8003464 <__aeabi_f2d>
 8003d84:	0002      	movs	r2, r0
 8003d86:	000b      	movs	r3, r1
 8003d88:	4823      	ldr	r0, [pc, #140]	@ (8003e18 <CreateMessage+0x324>)
 8003d8a:	4936      	ldr	r1, [pc, #216]	@ (8003e64 <CreateMessage+0x370>)
 8003d8c:	9202      	str	r2, [sp, #8]
 8003d8e:	9303      	str	r3, [sp, #12]
 8003d90:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <CreateMessage+0x338>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	0003      	movs	r3, r0
 8003d96:	002a      	movs	r2, r5
 8003d98:	0020      	movs	r0, r4
 8003d9a:	f018 fbcd 	bl	801c538 <siprintf>
    index = strlen(message);
 8003d9e:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <CreateMessage+0x330>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fc f9e3 	bl	800016c <strlen>
 8003da6:	0002      	movs	r2, r0
 8003da8:	19bb      	adds	r3, r7, r6
 8003daa:	801a      	strh	r2, [r3, #0]
  }

  Debug("Length of datagram: %d", index);
 8003dac:	240e      	movs	r4, #14
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e68 <CreateMessage+0x374>)
 8003db4:	492d      	ldr	r1, [pc, #180]	@ (8003e6c <CreateMessage+0x378>)
 8003db6:	2003      	movs	r0, #3
 8003db8:	f007 fd94 	bl	800b8e4 <CreateLine>
  index = sprintf(&message[index], "]");
 8003dbc:	193b      	adds	r3, r7, r4
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	4b18      	ldr	r3, [pc, #96]	@ (8003e24 <CreateMessage+0x330>)
 8003dc2:	18d3      	adds	r3, r2, r3
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e70 <CreateMessage+0x37c>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f018 fbb5 	bl	801c538 <siprintf>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	193b      	adds	r3, r7, r4
 8003dd2:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <CreateMessage+0x330>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fc f9c8 	bl	800016c <strlen>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	b29b      	uxth	r3, r3
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b005      	add	sp, #20
 8003de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de8:	200009d4 	.word	0x200009d4
 8003dec:	0808000c 	.word	0x0808000c
 8003df0:	200009e0 	.word	0x200009e0
 8003df4:	08080018 	.word	0x08080018
 8003df8:	200009ec 	.word	0x200009ec
 8003dfc:	08080048 	.word	0x08080048
 8003e00:	200009f8 	.word	0x200009f8
 8003e04:	08080030 	.word	0x08080030
 8003e08:	20000a04 	.word	0x20000a04
 8003e0c:	0808006c 	.word	0x0808006c
 8003e10:	20000a10 	.word	0x20000a10
 8003e14:	08080078 	.word	0x08080078
 8003e18:	20000a1c 	.word	0x20000a1c
 8003e1c:	08080090 	.word	0x08080090
 8003e20:	08020904 	.word	0x08020904
 8003e24:	20000578 	.word	0x20000578
 8003e28:	0801f7b4 	.word	0x0801f7b4
 8003e2c:	20000a3c 	.word	0x20000a3c
 8003e30:	2000054c 	.word	0x2000054c
 8003e34:	20000560 	.word	0x20000560
 8003e38:	0801f7b8 	.word	0x0801f7b8
 8003e3c:	20000564 	.word	0x20000564
 8003e40:	0801f80c 	.word	0x0801f80c
 8003e44:	20000574 	.word	0x20000574
 8003e48:	0801f864 	.word	0x0801f864
 8003e4c:	20000570 	.word	0x20000570
 8003e50:	0801f8c0 	.word	0x0801f8c0
 8003e54:	20000568 	.word	0x20000568
 8003e58:	0801f914 	.word	0x0801f914
 8003e5c:	2000056c 	.word	0x2000056c
 8003e60:	0801f974 	.word	0x0801f974
 8003e64:	0801f9d0 	.word	0x0801f9d0
 8003e68:	0801fa28 	.word	0x0801fa28
 8003e6c:	0801f7a8 	.word	0x0801f7a8
 8003e70:	0801fa40 	.word	0x0801fa40

08003e74 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e78:	2064      	movs	r0, #100	@ 0x64
 8003e7a:	f008 f8d9 	bl	800c030 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ed4 <StartProg+0x60>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	2101      	movs	r1, #1
 8003e84:	0018      	movs	r0, r3
 8003e86:	f009 fb28 	bl	800d4da <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e8a:	2064      	movs	r0, #100	@ 0x64
 8003e8c:	f008 f8d0 	bl	800c030 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e90:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <StartProg+0x60>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	2102      	movs	r1, #2
 8003e96:	0018      	movs	r0, r3
 8003e98:	f009 fb1f 	bl	800d4da <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e9c:	23fa      	movs	r3, #250	@ 0xfa
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f008 f8c5 	bl	800c030 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <StartProg+0x60>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	2101      	movs	r1, #1
 8003eac:	0018      	movs	r0, r3
 8003eae:	f009 fb14 	bl	800d4da <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003eb2:	23fa      	movs	r3, #250	@ 0xfa
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f008 f8ba 	bl	800c030 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <StartProg+0x60>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f009 fb09 	bl	800d4da <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ec8:	2028      	movs	r0, #40	@ 0x28
 8003eca:	f008 f8b1 	bl	800c030 <HAL_Delay>
}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	50001c00 	.word	0x50001c00

08003ed8 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	b0d9      	sub	sp, #356	@ 0x164
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	0008      	movs	r0, r1
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	4ba1      	ldr	r3, [pc, #644]	@ (800416c <ParseBuffer+0x294>)
 8003ee6:	24b0      	movs	r4, #176	@ 0xb0
 8003ee8:	0064      	lsls	r4, r4, #1
 8003eea:	191b      	adds	r3, r3, r4
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	1c02      	adds	r2, r0, #0
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	4b9f      	ldr	r3, [pc, #636]	@ (8004170 <ParseBuffer+0x298>)
 8003ef4:	191b      	adds	r3, r3, r4
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	1c0a      	adds	r2, r1, #0
 8003efa:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	005a      	lsls	r2, r3, #1
 8003f00:	2348      	movs	r3, #72	@ 0x48
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2100      	movs	r1, #0
 8003f06:	0018      	movs	r0, r3
 8003f08:	f018 fbba 	bl	801c680 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003f0c:	2360      	movs	r3, #96	@ 0x60
 8003f0e:	33ff      	adds	r3, #255	@ 0xff
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2203      	movs	r2, #3
 8003f14:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003f16:	23ae      	movs	r3, #174	@ 0xae
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e013      	b.n	8003f4a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8003f22:	20ae      	movs	r0, #174	@ 0xae
 8003f24:	0040      	lsls	r0, r0, #1
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	18d2      	adds	r2, r2, r3
 8003f2e:	183b      	adds	r3, r7, r0
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	7811      	ldrb	r1, [r2, #0]
 8003f34:	4a8f      	ldr	r2, [pc, #572]	@ (8004174 <ParseBuffer+0x29c>)
 8003f36:	24b0      	movs	r4, #176	@ 0xb0
 8003f38:	0064      	lsls	r4, r4, #1
 8003f3a:	1912      	adds	r2, r2, r4
 8003f3c:	19d2      	adds	r2, r2, r7
 8003f3e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003f40:	183b      	adds	r3, r7, r0
 8003f42:	881a      	ldrh	r2, [r3, #0]
 8003f44:	183b      	adds	r3, r7, r0
 8003f46:	3201      	adds	r2, #1
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	23ae      	movs	r3, #174	@ 0xae
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	18fa      	adds	r2, r7, r3
 8003f50:	4b86      	ldr	r3, [pc, #536]	@ (800416c <ParseBuffer+0x294>)
 8003f52:	24b0      	movs	r4, #176	@ 0xb0
 8003f54:	0064      	lsls	r4, r4, #1
 8003f56:	191b      	adds	r3, r3, r4
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	8812      	ldrh	r2, [r2, #0]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3df      	bcc.n	8003f22 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8003f62:	4b82      	ldr	r3, [pc, #520]	@ (800416c <ParseBuffer+0x294>)
 8003f64:	191b      	adds	r3, r3, r4
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	4a82      	ldr	r2, [pc, #520]	@ (8004174 <ParseBuffer+0x29c>)
 8003f6c:	1912      	adds	r2, r2, r4
 8003f6e:	19d2      	adds	r2, r2, r7
 8003f70:	2100      	movs	r1, #0
 8003f72:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8003f74:	2648      	movs	r6, #72	@ 0x48
 8003f76:	19ba      	adds	r2, r7, r6
 8003f78:	4b7f      	ldr	r3, [pc, #508]	@ (8004178 <ParseBuffer+0x2a0>)
 8003f7a:	0011      	movs	r1, r2
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f018 facb 	bl	801c518 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  char * ParsePoint = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	22ac      	movs	r2, #172	@ 0xac
 8003f86:	0052      	lsls	r2, r2, #1
 8003f88:	18b9      	adds	r1, r7, r2
 8003f8a:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f8c:	4b7b      	ldr	r3, [pc, #492]	@ (800417c <ParseBuffer+0x2a4>)
 8003f8e:	0025      	movs	r5, r4
 8003f90:	195b      	adds	r3, r3, r5
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	4a7a      	ldr	r2, [pc, #488]	@ (8004180 <ParseBuffer+0x2a8>)
 8003f96:	8811      	ldrh	r1, [r2, #0]
 8003f98:	8019      	strh	r1, [r3, #0]
 8003f9a:	7892      	ldrb	r2, [r2, #2]
 8003f9c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f9e:	4b79      	ldr	r3, [pc, #484]	@ (8004184 <ParseBuffer+0x2ac>)
 8003fa0:	195b      	adds	r3, r3, r5
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	4a78      	ldr	r2, [pc, #480]	@ (8004188 <ParseBuffer+0x2b0>)
 8003fa6:	6811      	ldr	r1, [r2, #0]
 8003fa8:	6019      	str	r1, [r3, #0]
 8003faa:	8892      	ldrh	r2, [r2, #4]
 8003fac:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8003fae:	4b77      	ldr	r3, [pc, #476]	@ (800418c <ParseBuffer+0x2b4>)
 8003fb0:	195b      	adds	r3, r3, r5
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	4a76      	ldr	r2, [pc, #472]	@ (8004190 <ParseBuffer+0x2b8>)
 8003fb6:	6811      	ldr	r1, [r2, #0]
 8003fb8:	6019      	str	r1, [r3, #0]
 8003fba:	7912      	ldrb	r2, [r2, #4]
 8003fbc:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003fbe:	4b75      	ldr	r3, [pc, #468]	@ (8004194 <ParseBuffer+0x2bc>)
 8003fc0:	195b      	adds	r3, r3, r5
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	4a74      	ldr	r2, [pc, #464]	@ (8004198 <ParseBuffer+0x2c0>)
 8003fc6:	6811      	ldr	r1, [r2, #0]
 8003fc8:	6019      	str	r1, [r3, #0]
 8003fca:	8892      	ldrh	r2, [r2, #4]
 8003fcc:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003fce:	4b73      	ldr	r3, [pc, #460]	@ (800419c <ParseBuffer+0x2c4>)
 8003fd0:	195b      	adds	r3, r3, r5
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	223e      	movs	r2, #62	@ 0x3e
 8003fd6:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003fd8:	4b71      	ldr	r3, [pc, #452]	@ (80041a0 <ParseBuffer+0x2c8>)
 8003fda:	195b      	adds	r3, r3, r5
 8003fdc:	19db      	adds	r3, r3, r7
 8003fde:	4a71      	ldr	r2, [pc, #452]	@ (80041a4 <ParseBuffer+0x2cc>)
 8003fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8003fe4:	8811      	ldrh	r1, [r2, #0]
 8003fe6:	8019      	strh	r1, [r3, #0]
 8003fe8:	7892      	ldrb	r2, [r2, #2]
 8003fea:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8003fec:	4b6e      	ldr	r3, [pc, #440]	@ (80041a8 <ParseBuffer+0x2d0>)
 8003fee:	195b      	adds	r3, r3, r5
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80041ac <ParseBuffer+0x2d4>)
 8003ff4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ff6:	c313      	stmia	r3!, {r0, r1, r4}
 8003ff8:	8812      	ldrh	r2, [r2, #0]
 8003ffa:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8004170 <ParseBuffer+0x298>)
 8003ffe:	195b      	adds	r3, r3, r5
 8004000:	19db      	adds	r3, r3, r7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 8004008:	2344      	movs	r3, #68	@ 0x44
 800400a:	18fa      	adds	r2, r7, r3
 800400c:	19bb      	adds	r3, r7, r6
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f018 fb70 	bl	801c6f6 <strstr>
 8004016:	0003      	movs	r3, r0
 8004018:	22ac      	movs	r2, #172	@ 0xac
 800401a:	0052      	lsls	r2, r2, #1
 800401c:	18ba      	adds	r2, r7, r2
 800401e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004020:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <ParseBuffer+0x298>)
 8004022:	22b0      	movs	r2, #176	@ 0xb0
 8004024:	0052      	lsls	r2, r2, #1
 8004026:	189b      	adds	r3, r3, r2
 8004028:	19db      	adds	r3, r3, r7
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10c      	bne.n	800404a <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004030:	232c      	movs	r3, #44	@ 0x2c
 8004032:	18fa      	adds	r2, r7, r3
 8004034:	2348      	movs	r3, #72	@ 0x48
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f018 fb5b 	bl	801c6f6 <strstr>
 8004040:	0003      	movs	r3, r0
 8004042:	22ac      	movs	r2, #172	@ 0xac
 8004044:	0052      	lsls	r2, r2, #1
 8004046:	18ba      	adds	r2, r7, r2
 8004048:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800404a:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <ParseBuffer+0x298>)
 800404c:	22b0      	movs	r2, #176	@ 0xb0
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	189b      	adds	r3, r3, r2
 8004052:	19db      	adds	r3, r3, r7
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d10c      	bne.n	8004074 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800405a:	2328      	movs	r3, #40	@ 0x28
 800405c:	18fa      	adds	r2, r7, r3
 800405e:	2348      	movs	r3, #72	@ 0x48
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f018 fb46 	bl	801c6f6 <strstr>
 800406a:	0003      	movs	r3, r0
 800406c:	22ac      	movs	r2, #172	@ 0xac
 800406e:	0052      	lsls	r2, r2, #1
 8004070:	18ba      	adds	r2, r7, r2
 8004072:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004074:	4b3e      	ldr	r3, [pc, #248]	@ (8004170 <ParseBuffer+0x298>)
 8004076:	22b0      	movs	r2, #176	@ 0xb0
 8004078:	0052      	lsls	r2, r2, #1
 800407a:	189b      	adds	r3, r3, r2
 800407c:	19db      	adds	r3, r3, r7
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d10c      	bne.n	800409e <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 8004084:	2308      	movs	r3, #8
 8004086:	18fa      	adds	r2, r7, r3
 8004088:	2348      	movs	r3, #72	@ 0x48
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f018 fb31 	bl	801c6f6 <strstr>
 8004094:	0003      	movs	r3, r0
 8004096:	22ac      	movs	r2, #172	@ 0xac
 8004098:	0052      	lsls	r2, r2, #1
 800409a:	18ba      	adds	r2, r7, r2
 800409c:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800409e:	233c      	movs	r3, #60	@ 0x3c
 80040a0:	18fa      	adds	r2, r7, r3
 80040a2:	2448      	movs	r4, #72	@ 0x48
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	0011      	movs	r1, r2
 80040a8:	0018      	movs	r0, r3
 80040aa:	f018 fb24 	bl	801c6f6 <strstr>
 80040ae:	0003      	movs	r3, r0
 80040b0:	22aa      	movs	r2, #170	@ 0xaa
 80040b2:	0052      	lsls	r2, r2, #1
 80040b4:	18ba      	adds	r2, r7, r2
 80040b6:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80040b8:	2318      	movs	r3, #24
 80040ba:	18fa      	adds	r2, r7, r3
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f018 fb18 	bl	801c6f6 <strstr>
 80040c6:	0003      	movs	r3, r0
 80040c8:	22a8      	movs	r2, #168	@ 0xa8
 80040ca:	0052      	lsls	r2, r2, #1
 80040cc:	18ba      	adds	r2, r7, r2
 80040ce:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80040d0:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <ParseBuffer+0x2d8>)
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f018 fb0d 	bl	801c6f6 <strstr>
 80040dc:	0003      	movs	r3, r0
 80040de:	22a6      	movs	r2, #166	@ 0xa6
 80040e0:	0052      	lsls	r2, r2, #1
 80040e2:	18ba      	adds	r2, r7, r2
 80040e4:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80040e6:	2334      	movs	r3, #52	@ 0x34
 80040e8:	18fa      	adds	r2, r7, r3
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f018 fb01 	bl	801c6f6 <strstr>
 80040f4:	0003      	movs	r3, r0
 80040f6:	22a4      	movs	r2, #164	@ 0xa4
 80040f8:	0052      	lsls	r2, r2, #1
 80040fa:	18ba      	adds	r2, r7, r2
 80040fc:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80040fe:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <ParseBuffer+0x294>)
 8004100:	21b0      	movs	r1, #176	@ 0xb0
 8004102:	0049      	lsls	r1, r1, #1
 8004104:	185b      	adds	r3, r3, r1
 8004106:	19db      	adds	r3, r3, r7
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d800      	bhi.n	8004110 <ParseBuffer+0x238>
 800410e:	e0be      	b.n	800428e <ParseBuffer+0x3b6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004110:	22ac      	movs	r2, #172	@ 0xac
 8004112:	0052      	lsls	r2, r2, #1
 8004114:	18bb      	adds	r3, r7, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d051      	beq.n	80041c0 <ParseBuffer+0x2e8>
 800411c:	18bb      	adds	r3, r7, r2
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b4f      	cmp	r3, #79	@ 0x4f
 8004124:	d14c      	bne.n	80041c0 <ParseBuffer+0x2e8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004126:	2360      	movs	r3, #96	@ 0x60
 8004128:	33ff      	adds	r3, #255	@ 0xff
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004130:	4b20      	ldr	r3, [pc, #128]	@ (80041b4 <ParseBuffer+0x2dc>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b12      	cmp	r3, #18
 8004136:	d143      	bne.n	80041c0 <ParseBuffer+0x2e8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <ParseBuffer+0x294>)
 800413a:	185b      	adds	r3, r3, r1
 800413c:	19db      	adds	r3, r3, r7
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2b2b      	cmp	r3, #43	@ 0x2b
 8004142:	d10b      	bne.n	800415c <ParseBuffer+0x284>
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <ParseBuffer+0x29c>)
 8004146:	185b      	adds	r3, r3, r1
 8004148:	19db      	adds	r3, r3, r7
 800414a:	2221      	movs	r2, #33	@ 0x21
 800414c:	5c9b      	ldrb	r3, [r3, r2]
 800414e:	2b32      	cmp	r3, #50	@ 0x32
 8004150:	d104      	bne.n	800415c <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004152:	193b      	adds	r3, r7, r4
 8004154:	0018      	movs	r0, r3
 8004156:	f002 f8a1 	bl	800629c <ParseTime>
 800415a:	e031      	b.n	80041c0 <ParseBuffer+0x2e8>
        }
        else {
          Error("Error getting time");
 800415c:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <ParseBuffer+0x2e0>)
 800415e:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <ParseBuffer+0x2e4>)
 8004160:	0019      	movs	r1, r3
 8004162:	2001      	movs	r0, #1
 8004164:	f007 fbbe 	bl	800b8e4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8004168:	2306      	movs	r3, #6
 800416a:	e094      	b.n	8004296 <ParseBuffer+0x3be>
 800416c:	fffffea2 	.word	0xfffffea2
 8004170:	fffffea1 	.word	0xfffffea1
 8004174:	fffffee8 	.word	0xfffffee8
 8004178:	0801fa44 	.word	0x0801fa44
 800417c:	fffffee4 	.word	0xfffffee4
 8004180:	0801fa70 	.word	0x0801fa70
 8004184:	fffffedc 	.word	0xfffffedc
 8004188:	0801fa74 	.word	0x0801fa74
 800418c:	fffffed4 	.word	0xfffffed4
 8004190:	0801fa7c 	.word	0x0801fa7c
 8004194:	fffffecc 	.word	0xfffffecc
 8004198:	0801fa84 	.word	0x0801fa84
 800419c:	fffffec8 	.word	0xfffffec8
 80041a0:	fffffeb8 	.word	0xfffffeb8
 80041a4:	0801fa8c 	.word	0x0801fa8c
 80041a8:	fffffea8 	.word	0xfffffea8
 80041ac:	0801fa9c 	.word	0x0801fa9c
 80041b0:	080208e0 	.word	0x080208e0
 80041b4:	20000992 	.word	0x20000992
 80041b8:	0801fa5c 	.word	0x0801fa5c
 80041bc:	0801f748 	.word	0x0801f748
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80041c0:	22ac      	movs	r2, #172	@ 0xac
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <ParseBuffer+0x308>
 80041cc:	18bb      	adds	r3, r7, r2
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b72      	cmp	r3, #114	@ 0x72
 80041d4:	d104      	bne.n	80041e0 <ParseBuffer+0x308>
      status = RECEIVE_STATUS_READY;
 80041d6:	2360      	movs	r3, #96	@ 0x60
 80041d8:	33ff      	adds	r3, #255	@ 0xff
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2202      	movs	r2, #2
 80041de:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80041e0:	22ac      	movs	r2, #172	@ 0xac
 80041e2:	0052      	lsls	r2, r2, #1
 80041e4:	18bb      	adds	r3, r7, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <ParseBuffer+0x328>
 80041ec:	18bb      	adds	r3, r7, r2
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80041f4:	d104      	bne.n	8004200 <ParseBuffer+0x328>
      status = RECEIVE_STATUS_START;
 80041f6:	2360      	movs	r3, #96	@ 0x60
 80041f8:	33ff      	adds	r3, #255	@ 0xff
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2205      	movs	r2, #5
 80041fe:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004200:	22ac      	movs	r2, #172	@ 0xac
 8004202:	0052      	lsls	r2, r2, #1
 8004204:	18bb      	adds	r3, r7, r2
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <ParseBuffer+0x348>
 800420c:	18bb      	adds	r3, r7, r2
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b2b      	cmp	r3, #43	@ 0x2b
 8004214:	d104      	bne.n	8004220 <ParseBuffer+0x348>
      status = RECEIVE_STATUS_TIME;
 8004216:	2360      	movs	r3, #96	@ 0x60
 8004218:	33ff      	adds	r3, #255	@ 0xff
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	220b      	movs	r2, #11
 800421e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004220:	22aa      	movs	r2, #170	@ 0xaa
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	18bb      	adds	r3, r7, r2
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <ParseBuffer+0x35e>
 800422c:	18bb      	adds	r3, r7, r2
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b45      	cmp	r3, #69	@ 0x45
 8004234:	d00a      	beq.n	800424c <ParseBuffer+0x374>
 8004236:	22a4      	movs	r2, #164	@ 0xa4
 8004238:	0052      	lsls	r2, r2, #1
 800423a:	18bb      	adds	r3, r7, r2
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <ParseBuffer+0x37e>
 8004242:	18bb      	adds	r3, r7, r2
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b46      	cmp	r3, #70	@ 0x46
 800424a:	d104      	bne.n	8004256 <ParseBuffer+0x37e>
      status = RECEIVE_STATUS_ERROR;
 800424c:	2360      	movs	r3, #96	@ 0x60
 800424e:	33ff      	adds	r3, #255	@ 0xff
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004256:	22a8      	movs	r2, #168	@ 0xa8
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	18bb      	adds	r3, r7, r2
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <ParseBuffer+0x39a>
 8004262:	18bb      	adds	r3, r7, r2
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b57      	cmp	r3, #87	@ 0x57
 800426a:	d102      	bne.n	8004272 <ParseBuffer+0x39a>
      ConnectionMade = true;
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <ParseBuffer+0x3c8>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 8004272:	22a6      	movs	r2, #166	@ 0xa6
 8004274:	0052      	lsls	r2, r2, #1
 8004276:	18bb      	adds	r3, r7, r2
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <ParseBuffer+0x3b6>
 800427e:	18bb      	adds	r3, r7, r2
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b32      	cmp	r3, #50	@ 0x32
 8004286:	d102      	bne.n	800428e <ParseBuffer+0x3b6>
      beurs = true;
 8004288:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <ParseBuffer+0x3cc>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800428e:	2360      	movs	r3, #96	@ 0x60
 8004290:	33ff      	adds	r3, #255	@ 0xff
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]

}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b059      	add	sp, #356	@ 0x164
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	20000548 	.word	0x20000548
 80042a4:	2000054a 	.word	0x2000054a

080042a8 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <PollAwake+0x34>)
 80042b0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7fb ff59 	bl	800016c <strlen>
 80042ba:	0003      	movs	r3, r0
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7ff fb6e 	bl	80039a4 <ESP_Send>
 80042c8:	1e03      	subs	r3, r0, #0
 80042ca:	d001      	beq.n	80042d0 <PollAwake+0x28>
    return true;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <PollAwake+0x2a>
  }
  else{
    return false;
 80042d0:	2300      	movs	r3, #0
  }
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	0801faac 	.word	0x0801faac

080042e0 <RFPower>:
bool RFPower(){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80042e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <RFPower+0x34>)
 80042e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7fb ff3d 	bl	800016c <strlen>
 80042f2:	0003      	movs	r3, r0
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff fb52 	bl	80039a4 <ESP_Send>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d001      	beq.n	8004308 <RFPower+0x28>
    return true;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <RFPower+0x2a>
  }
  else{
    return false;
 8004308:	2300      	movs	r3, #0
  }
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	0801fab4 	.word	0x0801fab4

08004318 <CheckRFPower>:
bool CheckRFPower(){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <CheckRFPower+0x34>)
 8004320:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7fb ff21 	bl	800016c <strlen>
 800432a:	0003      	movs	r3, r0
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0011      	movs	r1, r2
 8004332:	0018      	movs	r0, r3
 8004334:	f7ff fb36 	bl	80039a4 <ESP_Send>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d001      	beq.n	8004340 <CheckRFPower+0x28>
    return true;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004340:	2300      	movs	r3, #0
  }
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b002      	add	sp, #8
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	0801fac4 	.word	0x0801fac4

08004350 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <ATRestore+0x34>)
 8004358:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0018      	movs	r0, r3
 800435e:	f7fb ff05 	bl	800016c <strlen>
 8004362:	0003      	movs	r3, r0
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0011      	movs	r1, r2
 800436a:	0018      	movs	r0, r3
 800436c:	f7ff fb1a 	bl	80039a4 <ESP_Send>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d001      	beq.n	8004378 <ATRestore+0x28>
    return true;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <ATRestore+0x2a>
  }
  else{
    return false;
 8004378:	2300      	movs	r3, #0
  }
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	0801fad4 	.word	0x0801fad4

08004388 <CWINIT>:
bool CWINIT(){
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <CWINIT+0x34>)
 8004390:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f7fb fee9 	bl	800016c <strlen>
 800439a:	0003      	movs	r3, r0
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0011      	movs	r1, r2
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fafe 	bl	80039a4 <ESP_Send>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d001      	beq.n	80043b0 <CWINIT+0x28>
    return true;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <CWINIT+0x2a>
  }
  else{
    return false;
 80043b0:	2300      	movs	r3, #0
  }
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b002      	add	sp, #8
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	0801fae4 	.word	0x0801fae4

080043c0 <CWMODE1>:
bool CWMODE1(){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80043c6:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <CWMODE1+0x34>)
 80043c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fb fecd 	bl	800016c <strlen>
 80043d2:	0003      	movs	r3, r0
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff fae2 	bl	80039a4 <ESP_Send>
 80043e0:	1e03      	subs	r3, r0, #0
 80043e2:	d001      	beq.n	80043e8 <CWMODE1+0x28>
    return true;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <CWMODE1+0x2a>
  }
  else{
    return false;
 80043e8:	2300      	movs	r3, #0
  }
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	0801faf4 	.word	0x0801faf4

080043f8 <CWMODE2>:
bool CWMODE2(){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80043fe:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <CWMODE2+0x34>)
 8004400:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0018      	movs	r0, r3
 8004406:	f7fb feb1 	bl	800016c <strlen>
 800440a:	0003      	movs	r3, r0
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff fac6 	bl	80039a4 <ESP_Send>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d001      	beq.n	8004420 <CWMODE2+0x28>
    return true;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004420:	2300      	movs	r3, #0
  }
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b002      	add	sp, #8
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	0801fb04 	.word	0x0801fb04

08004430 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <CWAUTOCONN+0x34>)
 8004438:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f7fb fe95 	bl	800016c <strlen>
 8004442:	0003      	movs	r3, r0
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0011      	movs	r1, r2
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff faaa 	bl	80039a4 <ESP_Send>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d001      	beq.n	8004458 <CWAUTOCONN+0x28>
    return true;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004458:	2300      	movs	r3, #0
  }
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b002      	add	sp, #8
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	0801fb14 	.word	0x0801fb14

08004468 <CWJAP>:
bool CWJAP(){
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	46c6      	mov	lr, r8
 800446c:	b500      	push	{lr}
 800446e:	b0a2      	sub	sp, #136	@ 0x88
 8004470:	af00      	add	r7, sp, #0
 8004472:	466b      	mov	r3, sp
 8004474:	4698      	mov	r8, r3
  beursTest = true;
 8004476:	4b39      	ldr	r3, [pc, #228]	@ (800455c <CWJAP+0xf4>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 800447c:	2618      	movs	r6, #24
 800447e:	19bb      	adds	r3, r7, r6
 8004480:	2264      	movs	r2, #100	@ 0x64
 8004482:	2100      	movs	r1, #0
 8004484:	0018      	movs	r0, r3
 8004486:	f018 f8fb 	bl	801c680 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800448a:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <CWJAP+0xf8>)
 800448c:	4a35      	ldr	r2, [pc, #212]	@ (8004564 <CWJAP+0xfc>)
 800448e:	4936      	ldr	r1, [pc, #216]	@ (8004568 <CWJAP+0x100>)
 8004490:	19b8      	adds	r0, r7, r6
 8004492:	f018 f851 	bl	801c538 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004496:	19bb      	adds	r3, r7, r6
 8004498:	0018      	movs	r0, r3
 800449a:	f7fb fe67 	bl	800016c <strlen>
 800449e:	0002      	movs	r2, r0
 80044a0:	216f      	movs	r1, #111	@ 0x6f
 80044a2:	0030      	movs	r0, r6
 80044a4:	180b      	adds	r3, r1, r0
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80044aa:	180b      	adds	r3, r1, r0
 80044ac:	19db      	adds	r3, r3, r7
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	2180      	movs	r1, #128	@ 0x80
 80044b6:	1879      	adds	r1, r7, r1
 80044b8:	600a      	str	r2, [r1, #0]
 80044ba:	001a      	movs	r2, r3
 80044bc:	60ba      	str	r2, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	60fa      	str	r2, [r7, #12]
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	0002      	movs	r2, r0
 80044c8:	0f52      	lsrs	r2, r2, #29
 80044ca:	000e      	movs	r6, r1
 80044cc:	00f6      	lsls	r6, r6, #3
 80044ce:	617e      	str	r6, [r7, #20]
 80044d0:	697e      	ldr	r6, [r7, #20]
 80044d2:	4316      	orrs	r6, r2
 80044d4:	617e      	str	r6, [r7, #20]
 80044d6:	0002      	movs	r2, r0
 80044d8:	00d2      	lsls	r2, r2, #3
 80044da:	613a      	str	r2, [r7, #16]
 80044dc:	001a      	movs	r2, r3
 80044de:	603a      	str	r2, [r7, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	0002      	movs	r2, r0
 80044ea:	0f52      	lsrs	r2, r2, #29
 80044ec:	000e      	movs	r6, r1
 80044ee:	00f5      	lsls	r5, r6, #3
 80044f0:	4315      	orrs	r5, r2
 80044f2:	0002      	movs	r2, r0
 80044f4:	00d4      	lsls	r4, r2, #3
 80044f6:	3307      	adds	r3, #7
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	466a      	mov	r2, sp
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	469d      	mov	sp, r3
 8004502:	466b      	mov	r3, sp
 8004504:	3300      	adds	r3, #0
 8004506:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004508:	246f      	movs	r4, #111	@ 0x6f
 800450a:	2518      	movs	r5, #24
 800450c:	1963      	adds	r3, r4, r5
 800450e:	19db      	adds	r3, r3, r7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	001a      	movs	r2, r3
 8004516:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004518:	2100      	movs	r1, #0
 800451a:	0018      	movs	r0, r3
 800451c:	f018 f8b0 	bl	801c680 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004520:	1963      	adds	r3, r4, r5
 8004522:	19db      	adds	r3, r3, r7
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	1979      	adds	r1, r7, r5
 8004528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800452a:	0018      	movs	r0, r3
 800452c:	f018 f8cf 	bl	801c6ce <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004530:	1963      	adds	r3, r4, r5
 8004532:	19db      	adds	r3, r3, r7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b29a      	uxth	r2, r3
 8004538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800453a:	0011      	movs	r1, r2
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fa31 	bl	80039a4 <ESP_Send>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d001      	beq.n	800454a <CWJAP+0xe2>
    return true;
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <CWJAP+0xe4>
  }
  else{
    return false;
 800454a:	2300      	movs	r3, #0
 800454c:	46c5      	mov	sp, r8
  }
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b022      	add	sp, #136	@ 0x88
 8004554:	bc80      	pop	{r7}
 8004556:	46b8      	mov	r8, r7
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	20000549 	.word	0x20000549
 8004560:	080208ec 	.word	0x080208ec
 8004564:	080208e0 	.word	0x080208e0
 8004568:	0801fb28 	.word	0x0801fb28

0800456c <CWMODE3>:
bool CWMODE3(){
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <CWMODE3+0x34>)
 8004574:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fb fdf7 	bl	800016c <strlen>
 800457e:	0003      	movs	r3, r0
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0011      	movs	r1, r2
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff fa0c 	bl	80039a4 <ESP_Send>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d001      	beq.n	8004594 <CWMODE3+0x28>
    return true;
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004594:	2300      	movs	r3, #0
  }
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	0801fb40 	.word	0x0801fb40

080045a4 <CWSTATE>:
bool CWSTATE(){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <CWSTATE+0x34>)
 80045ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7fb fddb 	bl	800016c <strlen>
 80045b6:	0003      	movs	r3, r0
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0011      	movs	r1, r2
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff f9f0 	bl	80039a4 <ESP_Send>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <CWSTATE+0x28>
    return true;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <CWSTATE+0x2a>
  }
  else{
    return false;
 80045cc:	2300      	movs	r3, #0
  }
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	0801fb50 	.word	0x0801fb50

080045dc <CWSAP>:
bool CWSAP(){
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <CWSAP+0x34>)
 80045e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fb fdbf 	bl	800016c <strlen>
 80045ee:	0003      	movs	r3, r0
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0011      	movs	r1, r2
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff f9d4 	bl	80039a4 <ESP_Send>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d001      	beq.n	8004604 <CWSAP+0x28>
    return true;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <CWSAP+0x2a>
  }
  else{
    return false;
 8004604:	2300      	movs	r3, #0
  }
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b002      	add	sp, #8
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	0801fb60 	.word	0x0801fb60

08004614 <CIPMUX>:
bool CIPMUX(){
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <CIPMUX+0x34>)
 800461c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f7fb fda3 	bl	800016c <strlen>
 8004626:	0003      	movs	r3, r0
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f7ff f9b8 	bl	80039a4 <ESP_Send>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <CIPMUX+0x28>
    return true;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <CIPMUX+0x2a>
  }
  else{
    return false;
 800463c:	2300      	movs	r3, #0
  }
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	0801fb84 	.word	0x0801fb84

0800464c <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <WEBSERVER+0x34>)
 8004654:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f7fb fd87 	bl	800016c <strlen>
 800465e:	0003      	movs	r3, r0
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0011      	movs	r1, r2
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff f99c 	bl	80039a4 <ESP_Send>
 800466c:	1e03      	subs	r3, r0, #0
 800466e:	d001      	beq.n	8004674 <WEBSERVER+0x28>
    return true;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	0801fb94 	.word	0x0801fb94

08004684 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b0c5      	sub	sp, #276	@ 0x114
 8004688:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	2100      	movs	r1, #0
 8004692:	0018      	movs	r0, r3
 8004694:	f017 fff4 	bl	801c680 <memset>
  uint16_t length = CreateMessage(beurs);
 8004698:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <HTTPCPOST+0xa0>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	1dfc      	adds	r4, r7, #7
 800469e:	34ff      	adds	r4, #255	@ 0xff
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff fa27 	bl	8003af4 <CreateMessage>
 80046a6:	0003      	movs	r3, r0
 80046a8:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80046aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004724 <HTTPCPOST+0xa0>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	33ff      	adds	r3, #255	@ 0xff
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <HTTPCPOST+0xa4>)
 80046ba:	491c      	ldr	r1, [pc, #112]	@ (800472c <HTTPCPOST+0xa8>)
 80046bc:	1d38      	adds	r0, r7, #4
 80046be:	f017 ff3b 	bl	801c538 <siprintf>
 80046c2:	e016      	b.n	80046f2 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80046c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <HTTPCPOST+0xac>)
 80046c6:	481b      	ldr	r0, [pc, #108]	@ (8004734 <HTTPCPOST+0xb0>)
 80046c8:	220c      	movs	r2, #12
 80046ca:	0019      	movs	r1, r3
 80046cc:	f7ff f814 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80046d0:	4a17      	ldr	r2, [pc, #92]	@ (8004730 <HTTPCPOST+0xac>)
 80046d2:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HTTPCPOST+0xb4>)
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff f9e8 	bl	8003aac <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	33ff      	adds	r3, #255	@ 0xff
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	4c15      	ldr	r4, [pc, #84]	@ (8004738 <HTTPCPOST+0xb4>)
 80046e4:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HTTPCPOST+0xb8>)
 80046e6:	4916      	ldr	r1, [pc, #88]	@ (8004740 <HTTPCPOST+0xbc>)
 80046e8:	1d38      	adds	r0, r7, #4
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	0023      	movs	r3, r4
 80046ee:	f017 ff23 	bl	801c538 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd39 	bl	800016c <strlen>
 80046fa:	0002      	movs	r2, r0
 80046fc:	1d7b      	adds	r3, r7, #5
 80046fe:	33ff      	adds	r3, #255	@ 0xff
 8004700:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004702:	1d7b      	adds	r3, r7, #5
 8004704:	33ff      	adds	r3, #255	@ 0xff
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff f949 	bl	80039a4 <ESP_Send>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d001      	beq.n	800471a <HTTPCPOST+0x96>
    return true;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HTTPCPOST+0x98>
  }
  else{
    return false;
 800471a:	2300      	movs	r3, #0
  }
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b043      	add	sp, #268	@ 0x10c
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	2000054a 	.word	0x2000054a
 8004728:	0802090c 	.word	0x0802090c
 800472c:	0801fbac 	.word	0x0801fbac
 8004730:	20000a58 	.word	0x20000a58
 8004734:	08080000 	.word	0x08080000
 8004738:	20000a64 	.word	0x20000a64
 800473c:	08020948 	.word	0x08020948
 8004740:	0801fbe4 	.word	0x0801fbe4

08004744 <SENDDATA>:
bool SENDDATA(){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <SENDDATA+0x34>)
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd0d 	bl	800016c <strlen>
 8004752:	0002      	movs	r2, r0
 8004754:	1dbb      	adds	r3, r7, #6
 8004756:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004758:	1dbb      	adds	r3, r7, #6
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <SENDDATA+0x34>)
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f7ff f91f 	bl	80039a4 <ESP_Send>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <SENDDATA+0x2a>
    return true;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <SENDDATA+0x2c>
  }
  else{
    return false;
 800476e:	2300      	movs	r3, #0
  }
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b002      	add	sp, #8
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000578 	.word	0x20000578

0800477c <SLEEP>:
bool SLEEP(){
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <SLEEP+0x34>)
 8004784:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	0018      	movs	r0, r3
 800478a:	f7fb fcef 	bl	800016c <strlen>
 800478e:	0003      	movs	r3, r0
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f7ff f904 	bl	80039a4 <ESP_Send>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d001      	beq.n	80047a4 <SLEEP+0x28>
    return true;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <SLEEP+0x2a>
  }
  else{
    return false;
 80047a4:	2300      	movs	r3, #0
  }
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	0801fc24 	.word	0x0801fc24

080047b4 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <CIPSNTPCFG+0x3c>)
 80047bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fb fcd3 	bl	800016c <strlen>
 80047c6:	0003      	movs	r3, r0
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0011      	movs	r1, r2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff f8e8 	bl	80039a4 <ESP_Send>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d006      	beq.n	80047e6 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 80047d8:	23fa      	movs	r3, #250	@ 0xfa
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	0018      	movs	r0, r3
 80047de:	f007 fc27 	bl	800c030 <HAL_Delay>
    return true;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 80047e6:	2300      	movs	r3, #0
  }
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0801fc34 	.word	0x0801fc34

080047f4 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <CIPSNTPTIME+0x34>)
 80047fc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f7fb fcb3 	bl	800016c <strlen>
 8004806:	0003      	movs	r3, r0
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f8c8 	bl	80039a4 <ESP_Send>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <CIPSNTPTIME+0x28>
    return true;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 800481c:	2300      	movs	r3, #0
  }
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	0801fc84 	.word	0x0801fc84

0800482c <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <CIPSNTPINTV+0x34>)
 8004834:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fb fc97 	bl	800016c <strlen>
 800483e:	0003      	movs	r3, r0
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0011      	movs	r1, r2
 8004846:	0018      	movs	r0, r3
 8004848:	f7ff f8ac 	bl	80039a4 <ESP_Send>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d001      	beq.n	8004854 <CIPSNTPINTV+0x28>
    return true;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004854:	2300      	movs	r3, #0
  }
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	0801fc98 	.word	0x0801fc98

08004864 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af02      	add	r7, sp, #8
 800486a:	0002      	movs	r2, r0
 800486c:	1dfb      	adds	r3, r7, #7
 800486e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004870:	4b73      	ldr	r3, [pc, #460]	@ (8004a40 <DMA_ProcessBuffer+0x1dc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	b29a      	uxth	r2, r3
 8004878:	200e      	movs	r0, #14
 800487a:	183b      	adds	r3, r7, r0
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	0049      	lsls	r1, r1, #1
 8004880:	1a8a      	subs	r2, r1, r2
 8004882:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004884:	230d      	movs	r3, #13
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2203      	movs	r2, #3
 800488a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 800488c:	183b      	adds	r3, r7, r0
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004898:	183b      	adds	r3, r7, r0
 800489a:	2280      	movs	r2, #128	@ 0x80
 800489c:	0052      	lsls	r2, r2, #1
 800489e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 80048a0:	4b68      	ldr	r3, [pc, #416]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	001a      	movs	r2, r3
 80048a8:	230e      	movs	r3, #14
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d131      	bne.n	8004916 <DMA_ProcessBuffer+0xb2>
      if(retry > 30){
 80048b2:	4b65      	ldr	r3, [pc, #404]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b1e      	cmp	r3, #30
 80048b8:	d91b      	bls.n	80048f2 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80048ba:	4b63      	ldr	r3, [pc, #396]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80048c0:	4b62      	ldr	r3, [pc, #392]	@ (8004a4c <DMA_ProcessBuffer+0x1e8>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <DMA_ProcessBuffer+0x74>
 80048c8:	4b61      	ldr	r3, [pc, #388]	@ (8004a50 <DMA_ProcessBuffer+0x1ec>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 80048d0:	230d      	movs	r3, #13
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2207      	movs	r2, #7
 80048d6:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80048d8:	4b5c      	ldr	r3, [pc, #368]	@ (8004a4c <DMA_ProcessBuffer+0x1e8>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d103      	bne.n	80048e8 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 80048e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a54 <DMA_ProcessBuffer+0x1f0>)
 80048e2:	220b      	movs	r2, #11
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e016      	b.n	8004916 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80048e8:	230d      	movs	r3, #13
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	2206      	movs	r2, #6
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e011      	b.n	8004916 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 80048f2:	4b55      	ldr	r3, [pc, #340]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048fc:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 80048fe:	f007 fb8d 	bl	800c01c <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	33f5      	adds	r3, #245	@ 0xf5
 8004906:	33ff      	adds	r3, #255	@ 0xff
 8004908:	001a      	movs	r2, r3
 800490a:	4b53      	ldr	r3, [pc, #332]	@ (8004a58 <DMA_ProcessBuffer+0x1f4>)
 800490c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 800490e:	230d      	movs	r3, #13
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2204      	movs	r2, #4
 8004914:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004916:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	001a      	movs	r2, r3
 800491e:	210e      	movs	r1, #14
 8004920:	187b      	adds	r3, r7, r1
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <DMA_ProcessBuffer+0xc6>
 8004928:	e082      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 800492a:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004930:	4b4a      	ldr	r3, [pc, #296]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4b43      	ldr	r3, [pc, #268]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	429a      	cmp	r2, r3
 800493e:	d109      	bne.n	8004954 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004940:	187b      	adds	r3, r7, r1
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b45      	ldr	r3, [pc, #276]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004948:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800494a:	230d      	movs	r3, #13
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	220a      	movs	r2, #10
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e06d      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004954:	4b41      	ldr	r3, [pc, #260]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	001a      	movs	r2, r3
 800495c:	210e      	movs	r1, #14
 800495e:	187b      	adds	r3, r7, r1
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004966:	187b      	adds	r3, r7, r1
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 800496e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004970:	230d      	movs	r3, #13
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	220a      	movs	r2, #10
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e05a      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 800497a:	4b32      	ldr	r3, [pc, #200]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	001a      	movs	r2, r3
 8004982:	210e      	movs	r1, #14
 8004984:	187b      	adds	r3, r7, r1
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	4293      	cmp	r3, r2
 800498a:	d917      	bls.n	80049bc <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800498c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	001a      	movs	r2, r3
 8004994:	4b32      	ldr	r3, [pc, #200]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 8004996:	18d0      	adds	r0, r2, r3
 8004998:	4b2a      	ldr	r3, [pc, #168]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	001a      	movs	r2, r3
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	b299      	uxth	r1, r3
 80049a8:	230d      	movs	r3, #13
 80049aa:	18fc      	adds	r4, r7, r3
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	001a      	movs	r2, r3
 80049b2:	f7ff fa91 	bl	8003ed8 <ParseBuffer>
 80049b6:	0003      	movs	r3, r0
 80049b8:	7023      	strb	r3, [r4, #0]
 80049ba:	e026      	b.n	8004a0a <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80049bc:	4b21      	ldr	r3, [pc, #132]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	001a      	movs	r2, r3
 80049c4:	4b26      	ldr	r3, [pc, #152]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 80049c6:	18d0      	adds	r0, r2, r3
 80049c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	001a      	movs	r2, r3
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	b299      	uxth	r1, r3
 80049d8:	250d      	movs	r5, #13
 80049da:	197c      	adds	r4, r7, r5
 80049dc:	1dfb      	adds	r3, r7, #7
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	001a      	movs	r2, r3
 80049e2:	f7ff fa79 	bl	8003ed8 <ParseBuffer>
 80049e6:	0003      	movs	r3, r0
 80049e8:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80049ea:	210e      	movs	r1, #14
 80049ec:	187b      	adds	r3, r7, r1
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80049f4:	197c      	adds	r4, r7, r5
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	8819      	ldrh	r1, [r3, #0]
 80049fe:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff fa69 	bl	8003ed8 <ParseBuffer>
 8004a06:	0003      	movs	r3, r0
 8004a08:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	0018      	movs	r0, r3
 8004a12:	240e      	movs	r4, #14
 8004a14:	193b      	adds	r3, r7, r4
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <DMA_ProcessBuffer+0x200>)
 8004a1a:	4913      	ldr	r1, [pc, #76]	@ (8004a68 <DMA_ProcessBuffer+0x204>)
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	0003      	movs	r3, r0
 8004a20:	2003      	movs	r0, #3
 8004a22:	f006 ff5f 	bl	800b8e4 <CreateLine>
          OldPos = pos;
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004a2e:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004a30:	230d      	movs	r3, #13
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	20002410 	.word	0x20002410
 8004a44:	20000a7d 	.word	0x20000a7d
 8004a48:	20000990 	.word	0x20000990
 8004a4c:	20000992 	.word	0x20000992
 8004a50:	20000000 	.word	0x20000000
 8004a54:	20000028 	.word	0x20000028
 8004a58:	20000984 	.word	0x20000984
 8004a5c:	20000a7e 	.word	0x20000a7e
 8004a60:	20000444 	.word	0x20000444
 8004a64:	0801fcb0 	.word	0x0801fcb0
 8004a68:	0801f7a8 	.word	0x0801f7a8

08004a6c <clearDMABuffer>:

void clearDMABuffer(){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004a70:	2380      	movs	r3, #128	@ 0x80
 8004a72:	005a      	lsls	r2, r3, #1
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <clearDMABuffer+0x18>)
 8004a76:	2100      	movs	r1, #0
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f017 fe01 	bl	801c680 <memset>
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000444 	.word	0x20000444

08004a88 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	0002      	movs	r2, r0
 8004a90:	1dfb      	adds	r3, r7, #7
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	1dbb      	adds	r3, r7, #6
 8004a96:	1c0a      	adds	r2, r1, #0
 8004a98:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004a9a:	210f      	movs	r1, #15
 8004a9c:	187b      	adds	r3, r7, r1
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004aa2:	1dbb      	adds	r3, r7, #6
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	1dfa      	adds	r2, r7, #7
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	4251      	negs	r1, r2
 8004ab2:	414a      	adcs	r2, r1
 8004ab4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004ab6:	1dbb      	adds	r3, r7, #6
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004abe:	230f      	movs	r3, #15
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	1dfa      	adds	r2, r7, #7
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	3a02      	subs	r2, #2
 8004ac8:	4251      	negs	r1, r2
 8004aca:	414a      	adcs	r2, r1
 8004acc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004ace:	1dbb      	adds	r3, r7, #6
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	1dfa      	adds	r2, r7, #7
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	3a05      	subs	r2, #5
 8004ae0:	4251      	negs	r1, r2
 8004ae2:	414a      	adcs	r2, r1
 8004ae4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d107      	bne.n	8004afe <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004aee:	230f      	movs	r3, #15
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	1dfa      	adds	r2, r7, #7
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	3a0b      	subs	r2, #11
 8004af8:	4251      	negs	r1, r2
 8004afa:	414a      	adcs	r2, r1
 8004afc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004afe:	230f      	movs	r3, #15
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	781b      	ldrb	r3, [r3, #0]
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b004      	add	sp, #16
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <AT_Send>:

bool AT_Send(AT_Commands state){
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	0002      	movs	r2, r0
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004b18:	230f      	movs	r3, #15
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004b20:	1dfb      	adds	r3, r7, #7
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b13      	cmp	r3, #19
 8004b26:	d900      	bls.n	8004b2a <AT_Send+0x1e>
 8004b28:	e18a      	b.n	8004e40 <AT_Send+0x334>
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	4bc8      	ldr	r3, [pc, #800]	@ (8004e50 <AT_Send+0x344>)
 8004b2e:	18d3      	adds	r3, r2, r3
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004b34:	4bc7      	ldr	r3, [pc, #796]	@ (8004e54 <AT_Send+0x348>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f006 fe7d 	bl	800b838 <TimestampIsReached>
 8004b3e:	1e03      	subs	r3, r0, #0
 8004b40:	d100      	bne.n	8004b44 <AT_Send+0x38>
 8004b42:	e17c      	b.n	8004e3e <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004b44:	230f      	movs	r3, #15
 8004b46:	18fc      	adds	r4, r7, r3
 8004b48:	f7ff fbae 	bl	80042a8 <PollAwake>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004b50:	f007 fa64 	bl	800c01c <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	3332      	adds	r3, #50	@ 0x32
 8004b58:	001a      	movs	r2, r3
 8004b5a:	4bbe      	ldr	r3, [pc, #760]	@ (8004e54 <AT_Send+0x348>)
 8004b5c:	601a      	str	r2, [r3, #0]
  }
  break;
 8004b5e:	e16e      	b.n	8004e3e <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004b60:	4abd      	ldr	r2, [pc, #756]	@ (8004e58 <AT_Send+0x34c>)
 8004b62:	4bbe      	ldr	r3, [pc, #760]	@ (8004e5c <AT_Send+0x350>)
 8004b64:	0019      	movs	r1, r3
 8004b66:	2003      	movs	r0, #3
 8004b68:	f006 febc 	bl	800b8e4 <CreateLine>
    ATCommandSend = RFPower();
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fc      	adds	r4, r7, r3
 8004b70:	f7ff fbb6 	bl	80042e0 <RFPower>
 8004b74:	0003      	movs	r3, r0
 8004b76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b78:	f007 fa50 	bl	800c01c <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	330a      	adds	r3, #10
 8004b80:	001a      	movs	r2, r3
 8004b82:	4bb4      	ldr	r3, [pc, #720]	@ (8004e54 <AT_Send+0x348>)
 8004b84:	601a      	str	r2, [r3, #0]
    break;
 8004b86:	e15b      	b.n	8004e40 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004b88:	4ab5      	ldr	r2, [pc, #724]	@ (8004e60 <AT_Send+0x354>)
 8004b8a:	4bb4      	ldr	r3, [pc, #720]	@ (8004e5c <AT_Send+0x350>)
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	2003      	movs	r0, #3
 8004b90:	f006 fea8 	bl	800b8e4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004b94:	230f      	movs	r3, #15
 8004b96:	18fc      	adds	r4, r7, r3
 8004b98:	f7ff fbbe 	bl	8004318 <CheckRFPower>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ba0:	f007 fa3c 	bl	800c01c <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	330a      	adds	r3, #10
 8004ba8:	001a      	movs	r2, r3
 8004baa:	4baa      	ldr	r3, [pc, #680]	@ (8004e54 <AT_Send+0x348>)
 8004bac:	601a      	str	r2, [r3, #0]
    break;
 8004bae:	e147      	b.n	8004e40 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004bb0:	4aac      	ldr	r2, [pc, #688]	@ (8004e64 <AT_Send+0x358>)
 8004bb2:	4baa      	ldr	r3, [pc, #680]	@ (8004e5c <AT_Send+0x350>)
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	f006 fe94 	bl	800b8e4 <CreateLine>
    ATCommandSend = ATRestore();
 8004bbc:	230f      	movs	r3, #15
 8004bbe:	18fc      	adds	r4, r7, r3
 8004bc0:	f7ff fbc6 	bl	8004350 <ATRestore>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004bc8:	f007 fa28 	bl	800c01c <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	3332      	adds	r3, #50	@ 0x32
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8004e54 <AT_Send+0x348>)
 8004bd4:	601a      	str	r2, [r3, #0]
    break;
 8004bd6:	e133      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004bd8:	4aa3      	ldr	r2, [pc, #652]	@ (8004e68 <AT_Send+0x35c>)
 8004bda:	4ba0      	ldr	r3, [pc, #640]	@ (8004e5c <AT_Send+0x350>)
 8004bdc:	0019      	movs	r1, r3
 8004bde:	2003      	movs	r0, #3
 8004be0:	f006 fe80 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWINIT();
 8004be4:	230f      	movs	r3, #15
 8004be6:	18fc      	adds	r4, r7, r3
 8004be8:	f7ff fbce 	bl	8004388 <CWINIT>
 8004bec:	0003      	movs	r3, r0
 8004bee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004bf0:	f007 fa14 	bl	800c01c <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	33f5      	adds	r3, #245	@ 0xf5
 8004bf8:	33ff      	adds	r3, #255	@ 0xff
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	4b95      	ldr	r3, [pc, #596]	@ (8004e54 <AT_Send+0x348>)
 8004bfe:	601a      	str	r2, [r3, #0]
    break;
 8004c00:	e11e      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004c02:	4a9a      	ldr	r2, [pc, #616]	@ (8004e6c <AT_Send+0x360>)
 8004c04:	4b95      	ldr	r3, [pc, #596]	@ (8004e5c <AT_Send+0x350>)
 8004c06:	0019      	movs	r1, r3
 8004c08:	2003      	movs	r0, #3
 8004c0a:	f006 fe6b 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWSTATE();
 8004c0e:	230f      	movs	r3, #15
 8004c10:	18fc      	adds	r4, r7, r3
 8004c12:	f7ff fcc7 	bl	80045a4 <CWSTATE>
 8004c16:	0003      	movs	r3, r0
 8004c18:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004c1a:	f007 f9ff 	bl	800c01c <HAL_GetTick>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	33f5      	adds	r3, #245	@ 0xf5
 8004c22:	33ff      	adds	r3, #255	@ 0xff
 8004c24:	001a      	movs	r2, r3
 8004c26:	4b8b      	ldr	r3, [pc, #556]	@ (8004e54 <AT_Send+0x348>)
 8004c28:	601a      	str	r2, [r3, #0]
    break;
 8004c2a:	e109      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004c2c:	4a90      	ldr	r2, [pc, #576]	@ (8004e70 <AT_Send+0x364>)
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e5c <AT_Send+0x350>)
 8004c30:	0019      	movs	r1, r3
 8004c32:	2003      	movs	r0, #3
 8004c34:	f006 fe56 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWMODE1();
 8004c38:	230f      	movs	r3, #15
 8004c3a:	18fc      	adds	r4, r7, r3
 8004c3c:	f7ff fbc0 	bl	80043c0 <CWMODE1>
 8004c40:	0003      	movs	r3, r0
 8004c42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c44:	f007 f9ea 	bl	800c01c <HAL_GetTick>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	330a      	adds	r3, #10
 8004c4c:	001a      	movs	r2, r3
 8004c4e:	4b81      	ldr	r3, [pc, #516]	@ (8004e54 <AT_Send+0x348>)
 8004c50:	601a      	str	r2, [r3, #0]
    break;
 8004c52:	e0f5      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004c54:	4a86      	ldr	r2, [pc, #536]	@ (8004e70 <AT_Send+0x364>)
 8004c56:	4b81      	ldr	r3, [pc, #516]	@ (8004e5c <AT_Send+0x350>)
 8004c58:	0019      	movs	r1, r3
 8004c5a:	2003      	movs	r0, #3
 8004c5c:	f006 fe42 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWMODE2();
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fc      	adds	r4, r7, r3
 8004c64:	f7ff fbc8 	bl	80043f8 <CWMODE2>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c6c:	f007 f9d6 	bl	800c01c <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	330a      	adds	r3, #10
 8004c74:	001a      	movs	r2, r3
 8004c76:	4b77      	ldr	r3, [pc, #476]	@ (8004e54 <AT_Send+0x348>)
 8004c78:	601a      	str	r2, [r3, #0]
    break;
 8004c7a:	e0e1      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e74 <AT_Send+0x368>)
 8004c7e:	4b77      	ldr	r3, [pc, #476]	@ (8004e5c <AT_Send+0x350>)
 8004c80:	0019      	movs	r1, r3
 8004c82:	2003      	movs	r0, #3
 8004c84:	f006 fe2e 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004c88:	230f      	movs	r3, #15
 8004c8a:	18fc      	adds	r4, r7, r3
 8004c8c:	f7ff fbd0 	bl	8004430 <CWAUTOCONN>
 8004c90:	0003      	movs	r3, r0
 8004c92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c94:	f007 f9c2 	bl	800c01c <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	330a      	adds	r3, #10
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <AT_Send+0x348>)
 8004ca0:	601a      	str	r2, [r3, #0]
    break;
 8004ca2:	e0cd      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004ca4:	4a74      	ldr	r2, [pc, #464]	@ (8004e78 <AT_Send+0x36c>)
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e5c <AT_Send+0x350>)
 8004ca8:	0019      	movs	r1, r3
 8004caa:	2003      	movs	r0, #3
 8004cac:	f006 fe1a 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWJAP();
 8004cb0:	230f      	movs	r3, #15
 8004cb2:	18fc      	adds	r4, r7, r3
 8004cb4:	f7ff fbd8 	bl	8004468 <CWJAP>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004cbc:	f007 f9ae 	bl	800c01c <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	3332      	adds	r3, #50	@ 0x32
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	4b63      	ldr	r3, [pc, #396]	@ (8004e54 <AT_Send+0x348>)
 8004cc8:	601a      	str	r2, [r3, #0]
    break;
 8004cca:	e0b9      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8004e7c <AT_Send+0x370>)
 8004cce:	4b63      	ldr	r3, [pc, #396]	@ (8004e5c <AT_Send+0x350>)
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	f006 fe06 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWMODE3();
 8004cd8:	230f      	movs	r3, #15
 8004cda:	18fc      	adds	r4, r7, r3
 8004cdc:	f7ff fc46 	bl	800456c <CWMODE3>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ce4:	f007 f99a 	bl	800c01c <HAL_GetTick>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	330a      	adds	r3, #10
 8004cec:	001a      	movs	r2, r3
 8004cee:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <AT_Send+0x348>)
 8004cf0:	601a      	str	r2, [r3, #0]
    break;
 8004cf2:	e0a5      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004cf4:	4a62      	ldr	r2, [pc, #392]	@ (8004e80 <AT_Send+0x374>)
 8004cf6:	4b59      	ldr	r3, [pc, #356]	@ (8004e5c <AT_Send+0x350>)
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f006 fdf2 	bl	800b8e4 <CreateLine>
    ATCommandSend = CWSAP();
 8004d00:	230f      	movs	r3, #15
 8004d02:	18fc      	adds	r4, r7, r3
 8004d04:	f7ff fc6a 	bl	80045dc <CWSAP>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d0c:	f007 f986 	bl	800c01c <HAL_GetTick>
 8004d10:	0003      	movs	r3, r0
 8004d12:	330a      	adds	r3, #10
 8004d14:	001a      	movs	r2, r3
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <AT_Send+0x348>)
 8004d18:	601a      	str	r2, [r3, #0]
    break;
 8004d1a:	e091      	b.n	8004e40 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fc      	adds	r4, r7, r3
 8004d20:	f7ff fc78 	bl	8004614 <CIPMUX>
 8004d24:	0003      	movs	r3, r0
 8004d26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d28:	f007 f978 	bl	800c01c <HAL_GetTick>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	330a      	adds	r3, #10
 8004d30:	001a      	movs	r2, r3
 8004d32:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <AT_Send+0x348>)
 8004d34:	601a      	str	r2, [r3, #0]
    break;
 8004d36:	e083      	b.n	8004e40 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fc      	adds	r4, r7, r3
 8004d3c:	f7ff fc86 	bl	800464c <WEBSERVER>
 8004d40:	0003      	movs	r3, r0
 8004d42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d44:	f007 f96a 	bl	800c01c <HAL_GetTick>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	330a      	adds	r3, #10
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <AT_Send+0x348>)
 8004d50:	601a      	str	r2, [r3, #0]
    break;
 8004d52:	e075      	b.n	8004e40 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004d54:	230f      	movs	r3, #15
 8004d56:	18fc      	adds	r4, r7, r3
 8004d58:	f7ff fc94 	bl	8004684 <HTTPCPOST>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d60:	f007 f95c 	bl	800c01c <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	33f5      	adds	r3, #245	@ 0xf5
 8004d68:	33ff      	adds	r3, #255	@ 0xff
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <AT_Send+0x348>)
 8004d6e:	601a      	str	r2, [r3, #0]
    break;
 8004d70:	e066      	b.n	8004e40 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004d72:	4a44      	ldr	r2, [pc, #272]	@ (8004e84 <AT_Send+0x378>)
 8004d74:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <AT_Send+0x350>)
 8004d76:	0019      	movs	r1, r3
 8004d78:	2003      	movs	r0, #3
 8004d7a:	f006 fdb3 	bl	800b8e4 <CreateLine>
    ATCommandSend = SENDDATA();
 8004d7e:	230f      	movs	r3, #15
 8004d80:	18fc      	adds	r4, r7, r3
 8004d82:	f7ff fcdf 	bl	8004744 <SENDDATA>
 8004d86:	0003      	movs	r3, r0
 8004d88:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004d8a:	f007 f947 	bl	800c01c <HAL_GetTick>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	33f5      	adds	r3, #245	@ 0xf5
 8004d92:	33ff      	adds	r3, #255	@ 0xff
 8004d94:	001a      	movs	r2, r3
 8004d96:	4b2f      	ldr	r3, [pc, #188]	@ (8004e54 <AT_Send+0x348>)
 8004d98:	601a      	str	r2, [r3, #0]
    break;
 8004d9a:	e051      	b.n	8004e40 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e88 <AT_Send+0x37c>)
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <AT_Send+0x350>)
 8004da0:	0019      	movs	r1, r3
 8004da2:	2003      	movs	r0, #3
 8004da4:	f006 fd9e 	bl	800b8e4 <CreateLine>
    ATCommandSend = SLEEP();
 8004da8:	230f      	movs	r3, #15
 8004daa:	18fc      	adds	r4, r7, r3
 8004dac:	f7ff fce6 	bl	800477c <SLEEP>
 8004db0:	0003      	movs	r3, r0
 8004db2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004db4:	f007 f932 	bl	800c01c <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	330a      	adds	r3, #10
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <AT_Send+0x348>)
 8004dc0:	601a      	str	r2, [r3, #0]
    break;
 8004dc2:	e03d      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004dc4:	4a31      	ldr	r2, [pc, #196]	@ (8004e8c <AT_Send+0x380>)
 8004dc6:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <AT_Send+0x350>)
 8004dc8:	0019      	movs	r1, r3
 8004dca:	2003      	movs	r0, #3
 8004dcc:	f006 fd8a 	bl	800b8e4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	18fc      	adds	r4, r7, r3
 8004dd4:	f7ff fcee 	bl	80047b4 <CIPSNTPCFG>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ddc:	f007 f91e 	bl	800c01c <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	330a      	adds	r3, #10
 8004de4:	001a      	movs	r2, r3
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <AT_Send+0x348>)
 8004de8:	601a      	str	r2, [r3, #0]
    break;
 8004dea:	e029      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004dec:	4a28      	ldr	r2, [pc, #160]	@ (8004e90 <AT_Send+0x384>)
 8004dee:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <AT_Send+0x350>)
 8004df0:	0019      	movs	r1, r3
 8004df2:	2003      	movs	r0, #3
 8004df4:	f006 fd76 	bl	800b8e4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004df8:	230f      	movs	r3, #15
 8004dfa:	18fc      	adds	r4, r7, r3
 8004dfc:	f7ff fcfa 	bl	80047f4 <CIPSNTPTIME>
 8004e00:	0003      	movs	r3, r0
 8004e02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e04:	f007 f90a 	bl	800c01c <HAL_GetTick>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	33f5      	adds	r3, #245	@ 0xf5
 8004e0c:	33ff      	adds	r3, #255	@ 0xff
 8004e0e:	001a      	movs	r2, r3
 8004e10:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <AT_Send+0x348>)
 8004e12:	601a      	str	r2, [r3, #0]
    break;
 8004e14:	e014      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004e16:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <AT_Send+0x388>)
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <AT_Send+0x350>)
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	2003      	movs	r0, #3
 8004e1e:	f006 fd61 	bl	800b8e4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004e22:	230f      	movs	r3, #15
 8004e24:	18fc      	adds	r4, r7, r3
 8004e26:	f7ff fd01 	bl	800482c <CIPSNTPINTV>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e2e:	f007 f8f5 	bl	800c01c <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	330a      	adds	r3, #10
 8004e36:	001a      	movs	r2, r3
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <AT_Send+0x348>)
 8004e3a:	601a      	str	r2, [r3, #0]
    break;
 8004e3c:	e000      	b.n	8004e40 <AT_Send+0x334>
  break;
 8004e3e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004e40:	230f      	movs	r3, #15
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	781b      	ldrb	r3, [r3, #0]
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b005      	add	sp, #20
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	08020970 	.word	0x08020970
 8004e54:	20000984 	.word	0x20000984
 8004e58:	0801fcd8 	.word	0x0801fcd8
 8004e5c:	0801f7a8 	.word	0x0801f7a8
 8004e60:	0801fcec 	.word	0x0801fcec
 8004e64:	0801fd00 	.word	0x0801fd00
 8004e68:	0801fd10 	.word	0x0801fd10
 8004e6c:	0801fd24 	.word	0x0801fd24
 8004e70:	0801fd3c 	.word	0x0801fd3c
 8004e74:	0801fd54 	.word	0x0801fd54
 8004e78:	0801fd6c 	.word	0x0801fd6c
 8004e7c:	0801fd80 	.word	0x0801fd80
 8004e80:	0801fd9c 	.word	0x0801fd9c
 8004e84:	0801fdb8 	.word	0x0801fdb8
 8004e88:	0801fdc8 	.word	0x0801fdc8
 8004e8c:	0801fdec 	.word	0x0801fdec
 8004e90:	0801fe00 	.word	0x0801fe00
 8004e94:	0801fe18 	.word	0x0801fe18

08004e98 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004e9e:	1dfb      	adds	r3, r7, #7
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d900      	bls.n	8004eae <ESP_WakeTest+0x16>
 8004eac:	e0d6      	b.n	800505c <ESP_WakeTest+0x1c4>
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	4b78      	ldr	r3, [pc, #480]	@ (8005094 <ESP_WakeTest+0x1fc>)
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004eb8:	4b77      	ldr	r3, [pc, #476]	@ (8005098 <ESP_WakeTest+0x200>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4053      	eors	r3, r2
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d036      	beq.n	8004f34 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ec6:	2380      	movs	r3, #128	@ 0x80
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	4874      	ldr	r0, [pc, #464]	@ (800509c <ESP_WakeTest+0x204>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	0019      	movs	r1, r3
 8004ed0:	f008 fb03 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004ed4:	2032      	movs	r0, #50	@ 0x32
 8004ed6:	f007 f8ab 	bl	800c030 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004eda:	2380      	movs	r3, #128	@ 0x80
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	486f      	ldr	r0, [pc, #444]	@ (800509c <ESP_WakeTest+0x204>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	f008 faf9 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ee8:	200a      	movs	r0, #10
 8004eea:	f007 f8a1 	bl	800c030 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004eee:	4b6c      	ldr	r3, [pc, #432]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f008 faf0 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004efa:	200a      	movs	r0, #10
 8004efc:	f007 f898 	bl	800c030 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004f00:	4b67      	ldr	r3, [pc, #412]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	2102      	movs	r1, #2
 8004f06:	0018      	movs	r0, r3
 8004f08:	f008 fae7 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f007 f88f 	bl	800c030 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004f12:	4b63      	ldr	r3, [pc, #396]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	2101      	movs	r1, #1
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f008 fade 	bl	800d4da <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004f1e:	f007 f87d 	bl	800c01c <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	22af      	movs	r2, #175	@ 0xaf
 8004f26:	0092      	lsls	r2, r2, #2
 8004f28:	189a      	adds	r2, r3, r2
 8004f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f2c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005098 <ESP_WakeTest+0x200>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	005a      	lsls	r2, r3, #1
 8004f38:	4b5b      	ldr	r3, [pc, #364]	@ (80050a8 <ESP_WakeTest+0x210>)
 8004f3a:	0011      	movs	r1, r2
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fe fd63 	bl	8003a08 <ESP_Receive>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d100      	bne.n	8004f48 <ESP_WakeTest+0xb0>
 8004f46:	e099      	b.n	800507c <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8004f48:	4b51      	ldr	r3, [pc, #324]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004f4e:	e095      	b.n	800507c <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f50:	4b54      	ldr	r3, [pc, #336]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f006 fc6f 	bl	800b838 <TimestampIsReached>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d100      	bne.n	8004f60 <ESP_WakeTest+0xc8>
 8004f5e:	e08f      	b.n	8005080 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8004f60:	4b52      	ldr	r3, [pc, #328]	@ (80050ac <ESP_WakeTest+0x214>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	1dfc      	adds	r4, r7, #7
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7ff fdd0 	bl	8004b0c <AT_Send>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004f70:	1dfb      	adds	r3, r7, #7
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d100      	bne.n	8004f7a <ESP_WakeTest+0xe2>
 8004f78:	e082      	b.n	8005080 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8004f7a:	4b45      	ldr	r3, [pc, #276]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f80:	e07e      	b.n	8005080 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f82:	4b48      	ldr	r3, [pc, #288]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f006 fc56 	bl	800b838 <TimestampIsReached>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d100      	bne.n	8004f92 <ESP_WakeTest+0xfa>
 8004f90:	e078      	b.n	8005084 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f92:	4b47      	ldr	r3, [pc, #284]	@ (80050b0 <ESP_WakeTest+0x218>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff fc64 	bl	8004864 <DMA_ProcessBuffer>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	4b44      	ldr	r3, [pc, #272]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fa2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004fa4:	4b43      	ldr	r3, [pc, #268]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	4b41      	ldr	r3, [pc, #260]	@ (80050b0 <ESP_WakeTest+0x218>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	1dbc      	adds	r4, r7, #6
 8004fae:	0019      	movs	r1, r3
 8004fb0:	0010      	movs	r0, r2
 8004fb2:	f7ff fd69 	bl	8004a88 <ATCompare>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004fba:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8004fc2:	4b33      	ldr	r3, [pc, #204]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b07      	cmp	r3, #7
 8004fce:	d104      	bne.n	8004fda <ESP_WakeTest+0x142>
          StartProg();
 8004fd0:	f7fe ff50 	bl	8003e74 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004fda:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d109      	bne.n	8004ff6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004fe2:	f007 f81b 	bl	800c01c <HAL_GetTick>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	3332      	adds	r3, #50	@ 0x32
 8004fea:	001a      	movs	r2, r3
 8004fec:	4b2d      	ldr	r3, [pc, #180]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004fee:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004ff0:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004ff6:	1dbb      	adds	r3, r7, #6
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d042      	beq.n	8005084 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8005000:	2203      	movs	r2, #3
 8005002:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005004:	e03e      	b.n	8005084 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005006:	4b2c      	ldr	r3, [pc, #176]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005008:	22fa      	movs	r2, #250	@ 0xfa
 800500a:	0112      	lsls	r2, r2, #4
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800500e:	4b2a      	ldr	r3, [pc, #168]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005010:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <ESP_WakeTest+0x224>)
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005014:	4b28      	ldr	r3, [pc, #160]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005016:	22fa      	movs	r2, #250	@ 0xfa
 8005018:	0112      	lsls	r2, r2, #4
 800501a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800501c:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <ESP_WakeTest+0x1f8>)
 800501e:	2204      	movs	r2, #4
 8005020:	701a      	strb	r2, [r3, #0]

      break;
 8005022:	e030      	b.n	8005086 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005024:	4b26      	ldr	r3, [pc, #152]	@ (80050c0 <ESP_WakeTest+0x228>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800502a:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <ESP_WakeTest+0x200>)
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005030:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <ESP_WakeTest+0x208>)
 8005032:	2200      	movs	r2, #0
 8005034:	2101      	movs	r1, #1
 8005036:	0018      	movs	r0, r3
 8005038:	f008 fa4f 	bl	800d4da <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	4816      	ldr	r0, [pc, #88]	@ (800509c <ESP_WakeTest+0x204>)
 8005042:	2200      	movs	r2, #0
 8005044:	0019      	movs	r1, r3
 8005046:	f008 fa48 	bl	800d4da <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <ESP_WakeTest+0x208>)
 800504c:	2200      	movs	r2, #0
 800504e:	2102      	movs	r1, #2
 8005050:	0018      	movs	r0, r3
 8005052:	f008 fa42 	bl	800d4da <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005056:	f002 ff03 	bl	8007e60 <SetESPMeasurementDone>
      break;
 800505a:	e014      	b.n	8005086 <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 800505c:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <ESP_WakeTest+0x1f8>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
      break;
 8005062:	e010      	b.n	8005086 <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8005064:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005066:	22fa      	movs	r2, #250	@ 0xfa
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <ESP_WakeTest+0x220>)
 800506e:	22fa      	movs	r2, #250	@ 0xfa
 8005070:	0112      	lsls	r2, r2, #4
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005074:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005076:	2200      	movs	r2, #0
 8005078:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 800507a:	e004      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	e002      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	e000      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 8005084:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	46bd      	mov	sp, r7
 800508a:	b003      	add	sp, #12
 800508c:	bd90      	pop	{r4, r7, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	20000994 	.word	0x20000994
 8005094:	080209c0 	.word	0x080209c0
 8005098:	20000544 	.word	0x20000544
 800509c:	50000800 	.word	0x50000800
 80050a0:	50001c00 	.word	0x50001c00
 80050a4:	20000984 	.word	0x20000984
 80050a8:	20000444 	.word	0x20000444
 80050ac:	20000992 	.word	0x20000992
 80050b0:	20000991 	.word	0x20000991
 80050b4:	20000029 	.word	0x20000029
 80050b8:	40000400 	.word	0x40000400
 80050bc:	00000bb8 	.word	0x00000bb8
 80050c0:	20000000 	.word	0x20000000

080050c4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80050c4:	b5b0      	push	{r4, r5, r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80050ca:	1dfb      	adds	r3, r7, #7
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 80050d0:	4bda      	ldr	r3, [pc, #872]	@ (800543c <ESP_Upkeep+0x378>)
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	4bda      	ldr	r3, [pc, #872]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d01f      	beq.n	800511c <ESP_Upkeep+0x58>
    oldEspState = EspState;
 80050dc:	4bd7      	ldr	r3, [pc, #860]	@ (800543c <ESP_Upkeep+0x378>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	4bd7      	ldr	r3, [pc, #860]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050e2:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80050e4:	4bd6      	ldr	r3, [pc, #856]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d103      	bne.n	80050f4 <ESP_Upkeep+0x30>
 80050ec:	4bd5      	ldr	r3, [pc, #852]	@ (8005444 <ESP_Upkeep+0x380>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b0e      	cmp	r3, #14
 80050f2:	d013      	beq.n	800511c <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80050f4:	4bd2      	ldr	r3, [pc, #840]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	001d      	movs	r5, r3
 80050fa:	4bd2      	ldr	r3, [pc, #840]	@ (8005444 <ESP_Upkeep+0x380>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	0018      	movs	r0, r3
 8005100:	4bd1      	ldr	r3, [pc, #836]	@ (8005448 <ESP_Upkeep+0x384>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	001c      	movs	r4, r3
 8005106:	4bd1      	ldr	r3, [pc, #836]	@ (800544c <ESP_Upkeep+0x388>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4ad1      	ldr	r2, [pc, #836]	@ (8005450 <ESP_Upkeep+0x38c>)
 800510c:	49d1      	ldr	r1, [pc, #836]	@ (8005454 <ESP_Upkeep+0x390>)
 800510e:	9302      	str	r3, [sp, #8]
 8005110:	9401      	str	r4, [sp, #4]
 8005112:	9000      	str	r0, [sp, #0]
 8005114:	002b      	movs	r3, r5
 8005116:	2003      	movs	r0, #3
 8005118:	f006 fbe4 	bl	800b8e4 <CreateLine>
    }
  }

  switch (EspState) {
 800511c:	4bc7      	ldr	r3, [pc, #796]	@ (800543c <ESP_Upkeep+0x378>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b0f      	cmp	r3, #15
 8005122:	d900      	bls.n	8005126 <ESP_Upkeep+0x62>
 8005124:	e355      	b.n	80057d2 <ESP_Upkeep+0x70e>
 8005126:	009a      	lsls	r2, r3, #2
 8005128:	4bcb      	ldr	r3, [pc, #812]	@ (8005458 <ESP_Upkeep+0x394>)
 800512a:	18d3      	adds	r3, r2, r3
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005130:	4bc2      	ldr	r3, [pc, #776]	@ (800543c <ESP_Upkeep+0x378>)
 8005132:	2201      	movs	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
      break;
 8005136:	f000 fba4 	bl	8005882 <ESP_Upkeep+0x7be>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 800513a:	4bc8      	ldr	r3, [pc, #800]	@ (800545c <ESP_Upkeep+0x398>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	4053      	eors	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d036      	beq.n	80051b6 <ESP_Upkeep+0xf2>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005148:	2380      	movs	r3, #128	@ 0x80
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	48c4      	ldr	r0, [pc, #784]	@ (8005460 <ESP_Upkeep+0x39c>)
 800514e:	2200      	movs	r2, #0
 8005150:	0019      	movs	r1, r3
 8005152:	f008 f9c2 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005156:	2001      	movs	r0, #1
 8005158:	f006 ff6a 	bl	800c030 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	48bf      	ldr	r0, [pc, #764]	@ (8005460 <ESP_Upkeep+0x39c>)
 8005162:	2201      	movs	r2, #1
 8005164:	0019      	movs	r1, r3
 8005166:	f008 f9b8 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800516a:	2001      	movs	r0, #1
 800516c:	f006 ff60 	bl	800c030 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005170:	4bbc      	ldr	r3, [pc, #752]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005172:	2200      	movs	r2, #0
 8005174:	2101      	movs	r1, #1
 8005176:	0018      	movs	r0, r3
 8005178:	f008 f9af 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800517c:	2001      	movs	r0, #1
 800517e:	f006 ff57 	bl	800c030 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005182:	4bb8      	ldr	r3, [pc, #736]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005184:	2201      	movs	r2, #1
 8005186:	2102      	movs	r1, #2
 8005188:	0018      	movs	r0, r3
 800518a:	f008 f9a6 	bl	800d4da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800518e:	2001      	movs	r0, #1
 8005190:	f006 ff4e 	bl	800c030 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005194:	4bb3      	ldr	r3, [pc, #716]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005196:	2201      	movs	r2, #1
 8005198:	2101      	movs	r1, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f008 f99d 	bl	800d4da <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80051a0:	f006 ff3c 	bl	800c01c <HAL_GetTick>
 80051a4:	0003      	movs	r3, r0
 80051a6:	22af      	movs	r2, #175	@ 0xaf
 80051a8:	0092      	lsls	r2, r2, #2
 80051aa:	189a      	adds	r2, r3, r2
 80051ac:	4bae      	ldr	r3, [pc, #696]	@ (8005468 <ESP_Upkeep+0x3a4>)
 80051ae:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80051b0:	4baa      	ldr	r3, [pc, #680]	@ (800545c <ESP_Upkeep+0x398>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	005a      	lsls	r2, r3, #1
 80051ba:	4bac      	ldr	r3, [pc, #688]	@ (800546c <ESP_Upkeep+0x3a8>)
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f7fe fc22 	bl	8003a08 <ESP_Receive>
 80051c4:	1e03      	subs	r3, r0, #0
 80051c6:	d100      	bne.n	80051ca <ESP_Upkeep+0x106>
 80051c8:	e30f      	b.n	80057ea <ESP_Upkeep+0x726>
        EspState = ESP_STATE_WAIT_AWAKE;
 80051ca:	4b9c      	ldr	r3, [pc, #624]	@ (800543c <ESP_Upkeep+0x378>)
 80051cc:	220f      	movs	r2, #15
 80051ce:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80051d0:	f006 ff24 	bl	800c01c <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	22fa      	movs	r2, #250	@ 0xfa
 80051d8:	00d2      	lsls	r2, r2, #3
 80051da:	189a      	adds	r2, r3, r2
 80051dc:	4ba4      	ldr	r3, [pc, #656]	@ (8005470 <ESP_Upkeep+0x3ac>)
 80051de:	601a      	str	r2, [r3, #0]
      }
      break;
 80051e0:	e303      	b.n	80057ea <ESP_Upkeep+0x726>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7ff fb3e 	bl	8004864 <DMA_ProcessBuffer>
 80051e8:	0003      	movs	r3, r0
 80051ea:	001a      	movs	r2, r3
 80051ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005474 <ESP_Upkeep+0x3b0>)
 80051ee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80051f0:	4ba0      	ldr	r3, [pc, #640]	@ (8005474 <ESP_Upkeep+0x3b0>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	1dbc      	adds	r4, r7, #6
 80051f6:	2101      	movs	r1, #1
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7ff fc45 	bl	8004a88 <ATCompare>
 80051fe:	0003      	movs	r3, r0
 8005200:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005202:	1dbb      	adds	r3, r7, #6
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <ESP_Upkeep+0x156>
 800520a:	4b99      	ldr	r3, [pc, #612]	@ (8005470 <ESP_Upkeep+0x3ac>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	0018      	movs	r0, r3
 8005210:	f006 fb12 	bl	800b838 <TimestampIsReached>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d100      	bne.n	800521a <ESP_Upkeep+0x156>
 8005218:	e2e9      	b.n	80057ee <ESP_Upkeep+0x72a>
          EspState = ESP_STATE_MODE_SELECT;
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <ESP_Upkeep+0x378>)
 800521c:	220b      	movs	r2, #11
 800521e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005220:	e2e5      	b.n	80057ee <ESP_Upkeep+0x72a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005222:	4b95      	ldr	r3, [pc, #596]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005224:	2209      	movs	r2, #9
 8005226:	2114      	movs	r1, #20
 8005228:	0018      	movs	r0, r3
 800522a:	f017 fa29 	bl	801c680 <memset>
      if(!InitIsDone || WifiReset){
 800522e:	4b93      	ldr	r3, [pc, #588]	@ (800547c <ESP_Upkeep+0x3b8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	4053      	eors	r3, r2
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <ESP_Upkeep+0x180>
 800523c:	4b90      	ldr	r3, [pc, #576]	@ (8005480 <ESP_Upkeep+0x3bc>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01a      	beq.n	800527a <ESP_Upkeep+0x1b6>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005244:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005246:	4a8f      	ldr	r2, [pc, #572]	@ (8005484 <ESP_Upkeep+0x3c0>)
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	6019      	str	r1, [r3, #0]
 800524c:	8891      	ldrh	r1, [r2, #4]
 800524e:	8099      	strh	r1, [r3, #4]
 8005250:	7992      	ldrb	r2, [r2, #6]
 8005252:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005254:	4b79      	ldr	r3, [pc, #484]	@ (800543c <ESP_Upkeep+0x378>)
 8005256:	2204      	movs	r2, #4
 8005258:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800525a:	4b8b      	ldr	r3, [pc, #556]	@ (8005488 <ESP_Upkeep+0x3c4>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005260:	4b79      	ldr	r3, [pc, #484]	@ (8005448 <ESP_Upkeep+0x384>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005266:	4b88      	ldr	r3, [pc, #544]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	001a      	movs	r2, r3
 800526c:	4b82      	ldr	r3, [pc, #520]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800526e:	5c9a      	ldrb	r2, [r3, r2]
 8005270:	4b74      	ldr	r3, [pc, #464]	@ (8005444 <ESP_Upkeep+0x380>)
 8005272:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005274:	4b75      	ldr	r3, [pc, #468]	@ (800544c <ESP_Upkeep+0x388>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800527a:	4b80      	ldr	r3, [pc, #512]	@ (800547c <ESP_Upkeep+0x3b8>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01f      	beq.n	80052c2 <ESP_Upkeep+0x1fe>
 8005282:	4b82      	ldr	r3, [pc, #520]	@ (800548c <ESP_Upkeep+0x3c8>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	4053      	eors	r3, r2
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <ESP_Upkeep+0x1fe>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005290:	4b79      	ldr	r3, [pc, #484]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005292:	4a7f      	ldr	r2, [pc, #508]	@ (8005490 <ESP_Upkeep+0x3cc>)
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	6019      	str	r1, [r3, #0]
 8005298:	8892      	ldrh	r2, [r2, #4]
 800529a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800529c:	4b67      	ldr	r3, [pc, #412]	@ (800543c <ESP_Upkeep+0x378>)
 800529e:	2204      	movs	r2, #4
 80052a0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052a2:	4b79      	ldr	r3, [pc, #484]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80052a8:	4b67      	ldr	r3, [pc, #412]	@ (8005448 <ESP_Upkeep+0x384>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80052ae:	4b76      	ldr	r3, [pc, #472]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	001a      	movs	r2, r3
 80052b4:	4b70      	ldr	r3, [pc, #448]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80052b6:	5c9a      	ldrb	r2, [r3, r2]
 80052b8:	4b62      	ldr	r3, [pc, #392]	@ (8005444 <ESP_Upkeep+0x380>)
 80052ba:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80052bc:	4b63      	ldr	r3, [pc, #396]	@ (800544c <ESP_Upkeep+0x388>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80052c2:	4b6e      	ldr	r3, [pc, #440]	@ (800547c <ESP_Upkeep+0x3b8>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d021      	beq.n	800530e <ESP_Upkeep+0x24a>
 80052ca:	4b70      	ldr	r3, [pc, #448]	@ (800548c <ESP_Upkeep+0x3c8>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01d      	beq.n	800530e <ESP_Upkeep+0x24a>
 80052d2:	4b70      	ldr	r3, [pc, #448]	@ (8005494 <ESP_Upkeep+0x3d0>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2201      	movs	r2, #1
 80052d8:	4053      	eors	r3, r2
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d016      	beq.n	800530e <ESP_Upkeep+0x24a>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80052e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005498 <ESP_Upkeep+0x3d4>)
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	4b64      	ldr	r3, [pc, #400]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80052e6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80052e8:	4b54      	ldr	r3, [pc, #336]	@ (800543c <ESP_Upkeep+0x378>)
 80052ea:	2204      	movs	r2, #4
 80052ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052ee:	4b66      	ldr	r3, [pc, #408]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80052f4:	4b54      	ldr	r3, [pc, #336]	@ (8005448 <ESP_Upkeep+0x384>)
 80052f6:	2204      	movs	r2, #4
 80052f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80052fa:	4b63      	ldr	r3, [pc, #396]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	001a      	movs	r2, r3
 8005300:	4b5d      	ldr	r3, [pc, #372]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005302:	5c9a      	ldrb	r2, [r3, r2]
 8005304:	4b4f      	ldr	r3, [pc, #316]	@ (8005444 <ESP_Upkeep+0x380>)
 8005306:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <ESP_Upkeep+0x388>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800530e:	4b5b      	ldr	r3, [pc, #364]	@ (800547c <ESP_Upkeep+0x3b8>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d02e      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 8005316:	4b5d      	ldr	r3, [pc, #372]	@ (800548c <ESP_Upkeep+0x3c8>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 800531e:	4b5d      	ldr	r3, [pc, #372]	@ (8005494 <ESP_Upkeep+0x3d0>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d026      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 8005326:	4b5d      	ldr	r3, [pc, #372]	@ (800549c <ESP_Upkeep+0x3d8>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4053      	eors	r3, r2
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01f      	beq.n	8005374 <ESP_Upkeep+0x2b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005334:	4b50      	ldr	r3, [pc, #320]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005336:	4a5a      	ldr	r2, [pc, #360]	@ (80054a0 <ESP_Upkeep+0x3dc>)
 8005338:	8811      	ldrh	r1, [r2, #0]
 800533a:	8019      	strh	r1, [r3, #0]
 800533c:	7892      	ldrb	r2, [r2, #2]
 800533e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005340:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <ESP_Upkeep+0x378>)
 8005342:	2204      	movs	r2, #4
 8005344:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005346:	4b50      	ldr	r3, [pc, #320]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800534c:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <ESP_Upkeep+0x384>)
 800534e:	2202      	movs	r2, #2
 8005350:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005352:	f006 fe63 	bl	800c01c <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	4b52      	ldr	r3, [pc, #328]	@ (80054a4 <ESP_Upkeep+0x3e0>)
 800535a:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800535c:	f005 fc32 	bl	800abc4 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005360:	4b49      	ldr	r3, [pc, #292]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	001a      	movs	r2, r3
 8005366:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005368:	5c9a      	ldrb	r2, [r3, r2]
 800536a:	4b36      	ldr	r3, [pc, #216]	@ (8005444 <ESP_Upkeep+0x380>)
 800536c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800536e:	4b37      	ldr	r3, [pc, #220]	@ (800544c <ESP_Upkeep+0x388>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005374:	4b4c      	ldr	r3, [pc, #304]	@ (80054a8 <ESP_Upkeep+0x3e4>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01a      	beq.n	80053b2 <ESP_Upkeep+0x2ee>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800537c:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800537e:	4a4b      	ldr	r2, [pc, #300]	@ (80054ac <ESP_Upkeep+0x3e8>)
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	6019      	str	r1, [r3, #0]
 8005384:	7912      	ldrb	r2, [r2, #4]
 8005386:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005388:	4b2c      	ldr	r3, [pc, #176]	@ (800543c <ESP_Upkeep+0x378>)
 800538a:	2204      	movs	r2, #4
 800538c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800538e:	4b3e      	ldr	r3, [pc, #248]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005394:	4b2c      	ldr	r3, [pc, #176]	@ (8005448 <ESP_Upkeep+0x384>)
 8005396:	2203      	movs	r2, #3
 8005398:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800539a:	f005 fc13 	bl	800abc4 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800539e:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	001a      	movs	r2, r3
 80053a4:	4b34      	ldr	r3, [pc, #208]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80053a6:	5c9a      	ldrb	r2, [r3, r2]
 80053a8:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <ESP_Upkeep+0x380>)
 80053aa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053ac:	4b27      	ldr	r3, [pc, #156]	@ (800544c <ESP_Upkeep+0x388>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80053b2:	4b32      	ldr	r3, [pc, #200]	@ (800547c <ESP_Upkeep+0x3b8>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d100      	bne.n	80053bc <ESP_Upkeep+0x2f8>
 80053ba:	e21a      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053bc:	4b33      	ldr	r3, [pc, #204]	@ (800548c <ESP_Upkeep+0x3c8>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d100      	bne.n	80053c6 <ESP_Upkeep+0x302>
 80053c4:	e215      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053c6:	4b33      	ldr	r3, [pc, #204]	@ (8005494 <ESP_Upkeep+0x3d0>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d100      	bne.n	80053d0 <ESP_Upkeep+0x30c>
 80053ce:	e210      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053d0:	4b32      	ldr	r3, [pc, #200]	@ (800549c <ESP_Upkeep+0x3d8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d100      	bne.n	80053da <ESP_Upkeep+0x316>
 80053d8:	e20b      	b.n	80057f2 <ESP_Upkeep+0x72e>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80053da:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <ESP_Upkeep+0x3ec>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b26      	ldr	r3, [pc, #152]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80053e0:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80053e2:	4b16      	ldr	r3, [pc, #88]	@ (800543c <ESP_Upkeep+0x378>)
 80053e4:	2204      	movs	r2, #4
 80053e6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053e8:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80053ee:	4b16      	ldr	r3, [pc, #88]	@ (8005448 <ESP_Upkeep+0x384>)
 80053f0:	2205      	movs	r2, #5
 80053f2:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80053f4:	f006 fe12 	bl	800c01c <HAL_GetTick>
 80053f8:	0002      	movs	r2, r0
 80053fa:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <ESP_Upkeep+0x3e0>)
 80053fc:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80053fe:	f005 fbe1 	bl	800abc4 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005402:	4b21      	ldr	r3, [pc, #132]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	001a      	movs	r2, r3
 8005408:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800540a:	5c9a      	ldrb	r2, [r3, r2]
 800540c:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <ESP_Upkeep+0x380>)
 800540e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005410:	4b0e      	ldr	r3, [pc, #56]	@ (800544c <ESP_Upkeep+0x388>)
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005416:	e1ec      	b.n	80057f2 <ESP_Upkeep+0x72e>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <ESP_Upkeep+0x380>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	1dfc      	adds	r4, r7, #7
 800541e:	0018      	movs	r0, r3
 8005420:	f7ff fb74 	bl	8004b0c <AT_Send>
 8005424:	0003      	movs	r3, r0
 8005426:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005428:	1dfb      	adds	r3, r7, #7
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d100      	bne.n	8005432 <ESP_Upkeep+0x36e>
 8005430:	e1e1      	b.n	80057f6 <ESP_Upkeep+0x732>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005432:	4b02      	ldr	r3, [pc, #8]	@ (800543c <ESP_Upkeep+0x378>)
 8005434:	2203      	movs	r2, #3
 8005436:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005438:	e1dd      	b.n	80057f6 <ESP_Upkeep+0x732>
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	20000028 	.word	0x20000028
 8005440:	20000002 	.word	0x20000002
 8005444:	20000992 	.word	0x20000992
 8005448:	20000993 	.word	0x20000993
 800544c:	20000991 	.word	0x20000991
 8005450:	0801fe38 	.word	0x0801fe38
 8005454:	0801f7a8 	.word	0x0801f7a8
 8005458:	080209d8 	.word	0x080209d8
 800545c:	20000544 	.word	0x20000544
 8005460:	50000800 	.word	0x50000800
 8005464:	50001c00 	.word	0x50001c00
 8005468:	20000984 	.word	0x20000984
 800546c:	20000444 	.word	0x20000444
 8005470:	20000a80 	.word	0x20000a80
 8005474:	2000002a 	.word	0x2000002a
 8005478:	20000978 	.word	0x20000978
 800547c:	20000545 	.word	0x20000545
 8005480:	20000546 	.word	0x20000546
 8005484:	20000004 	.word	0x20000004
 8005488:	20000982 	.word	0x20000982
 800548c:	20000548 	.word	0x20000548
 8005490:	20000014 	.word	0x20000014
 8005494:	20000549 	.word	0x20000549
 8005498:	20000010 	.word	0x20000010
 800549c:	20000001 	.word	0x20000001
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	20000558 	.word	0x20000558
 80054a8:	20000547 	.word	0x20000547
 80054ac:	2000001c 	.word	0x2000001c
 80054b0:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80054b4:	4bd3      	ldr	r3, [pc, #844]	@ (8005804 <ESP_Upkeep+0x740>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f006 f9bd 	bl	800b838 <TimestampIsReached>
 80054be:	1e03      	subs	r3, r0, #0
 80054c0:	d100      	bne.n	80054c4 <ESP_Upkeep+0x400>
 80054c2:	e19a      	b.n	80057fa <ESP_Upkeep+0x736>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80054c4:	4bd0      	ldr	r3, [pc, #832]	@ (8005808 <ESP_Upkeep+0x744>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff f9cb 	bl	8004864 <DMA_ProcessBuffer>
 80054ce:	0003      	movs	r3, r0
 80054d0:	001a      	movs	r2, r3
 80054d2:	4bce      	ldr	r3, [pc, #824]	@ (800580c <ESP_Upkeep+0x748>)
 80054d4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80054d6:	4bcd      	ldr	r3, [pc, #820]	@ (800580c <ESP_Upkeep+0x748>)
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	4bcb      	ldr	r3, [pc, #812]	@ (8005808 <ESP_Upkeep+0x744>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	1d7c      	adds	r4, r7, #5
 80054e0:	0019      	movs	r1, r3
 80054e2:	0010      	movs	r0, r2
 80054e4:	f7ff fad0 	bl	8004a88 <ATCompare>
 80054e8:	0003      	movs	r3, r0
 80054ea:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80054ec:	4bc7      	ldr	r3, [pc, #796]	@ (800580c <ESP_Upkeep+0x748>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10f      	bne.n	8005514 <ESP_Upkeep+0x450>
          if(ATCommand == AT_SENDDATA){
 80054f4:	4bc6      	ldr	r3, [pc, #792]	@ (8005810 <ESP_Upkeep+0x74c>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	d108      	bne.n	800550e <ESP_Upkeep+0x44a>
            ATCommand = AT_HTTPCPOST;
 80054fc:	4bc4      	ldr	r3, [pc, #784]	@ (8005810 <ESP_Upkeep+0x74c>)
 80054fe:	220e      	movs	r2, #14
 8005500:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005502:	4bc1      	ldr	r3, [pc, #772]	@ (8005808 <ESP_Upkeep+0x744>)
 8005504:	2202      	movs	r2, #2
 8005506:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005508:	4bc2      	ldr	r3, [pc, #776]	@ (8005814 <ESP_Upkeep+0x750>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800550e:	4bc2      	ldr	r3, [pc, #776]	@ (8005818 <ESP_Upkeep+0x754>)
 8005510:	2204      	movs	r2, #4
 8005512:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005514:	4bbd      	ldr	r3, [pc, #756]	@ (800580c <ESP_Upkeep+0x748>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d106      	bne.n	800552a <ESP_Upkeep+0x466>
          ESPTimeStamp = HAL_GetTick() + 10;
 800551c:	f006 fd7e 	bl	800c01c <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	330a      	adds	r3, #10
 8005524:	001a      	movs	r2, r3
 8005526:	4bb7      	ldr	r3, [pc, #732]	@ (8005804 <ESP_Upkeep+0x740>)
 8005528:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800552a:	4bb8      	ldr	r3, [pc, #736]	@ (800580c <ESP_Upkeep+0x748>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b0a      	cmp	r3, #10
 8005530:	d106      	bne.n	8005540 <ESP_Upkeep+0x47c>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005532:	f006 fd73 	bl	800c01c <HAL_GetTick>
 8005536:	0003      	movs	r3, r0
 8005538:	330a      	adds	r3, #10
 800553a:	001a      	movs	r2, r3
 800553c:	4bb1      	ldr	r3, [pc, #708]	@ (8005804 <ESP_Upkeep+0x740>)
 800553e:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005540:	4bb2      	ldr	r3, [pc, #712]	@ (800580c <ESP_Upkeep+0x748>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b06      	cmp	r3, #6
 8005546:	d116      	bne.n	8005576 <ESP_Upkeep+0x4b2>
          if(ATCommand != AT_SENDDATA){
 8005548:	4bb1      	ldr	r3, [pc, #708]	@ (8005810 <ESP_Upkeep+0x74c>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d003      	beq.n	8005558 <ESP_Upkeep+0x494>
            EspState = ESP_STATE_SEND;
 8005550:	4bb1      	ldr	r3, [pc, #708]	@ (8005818 <ESP_Upkeep+0x754>)
 8005552:	2204      	movs	r2, #4
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e00e      	b.n	8005576 <ESP_Upkeep+0x4b2>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005558:	4bad      	ldr	r3, [pc, #692]	@ (8005810 <ESP_Upkeep+0x74c>)
 800555a:	220e      	movs	r2, #14
 800555c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800555e:	4bad      	ldr	r3, [pc, #692]	@ (8005814 <ESP_Upkeep+0x750>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4bab      	ldr	r3, [pc, #684]	@ (8005814 <ESP_Upkeep+0x750>)
 8005568:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800556a:	4ba7      	ldr	r3, [pc, #668]	@ (8005808 <ESP_Upkeep+0x744>)
 800556c:	2202      	movs	r2, #2
 800556e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005570:	4ba9      	ldr	r3, [pc, #676]	@ (8005818 <ESP_Upkeep+0x754>)
 8005572:	2204      	movs	r2, #4
 8005574:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005576:	1d7b      	adds	r3, r7, #5
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d100      	bne.n	8005580 <ESP_Upkeep+0x4bc>
 800557e:	e13c      	b.n	80057fa <ESP_Upkeep+0x736>
          EspState = ESP_STATE_NEXT_AT;
 8005580:	4ba5      	ldr	r3, [pc, #660]	@ (8005818 <ESP_Upkeep+0x754>)
 8005582:	2205      	movs	r2, #5
 8005584:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005586:	e138      	b.n	80057fa <ESP_Upkeep+0x736>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005588:	4ba2      	ldr	r3, [pc, #648]	@ (8005814 <ESP_Upkeep+0x750>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4ba0      	ldr	r3, [pc, #640]	@ (8005814 <ESP_Upkeep+0x750>)
 8005592:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005594:	4b9f      	ldr	r3, [pc, #636]	@ (8005814 <ESP_Upkeep+0x750>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	001a      	movs	r2, r3
 800559a:	4ba0      	ldr	r3, [pc, #640]	@ (800581c <ESP_Upkeep+0x758>)
 800559c:	5c9a      	ldrb	r2, [r3, r2]
 800559e:	4b9c      	ldr	r3, [pc, #624]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055a0:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80055a2:	4b9b      	ldr	r3, [pc, #620]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d102      	bne.n	80055b0 <ESP_Upkeep+0x4ec>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80055aa:	4b97      	ldr	r3, [pc, #604]	@ (8005808 <ESP_Upkeep+0x744>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80055b0:	4b97      	ldr	r3, [pc, #604]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b0e      	cmp	r3, #14
 80055b6:	d102      	bne.n	80055be <ESP_Upkeep+0x4fa>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80055b8:	4b93      	ldr	r3, [pc, #588]	@ (8005808 <ESP_Upkeep+0x744>)
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80055be:	4b94      	ldr	r3, [pc, #592]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b0e      	cmp	r3, #14
 80055c4:	d006      	beq.n	80055d4 <ESP_Upkeep+0x510>
 80055c6:	4b92      	ldr	r3, [pc, #584]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d002      	beq.n	80055d4 <ESP_Upkeep+0x510>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005808 <ESP_Upkeep+0x744>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80055d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b11      	cmp	r3, #17
 80055da:	d102      	bne.n	80055e2 <ESP_Upkeep+0x51e>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80055dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005808 <ESP_Upkeep+0x744>)
 80055de:	2205      	movs	r2, #5
 80055e0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80055e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005818 <ESP_Upkeep+0x754>)
 80055e4:	2204      	movs	r2, #4
 80055e6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80055e8:	4b89      	ldr	r3, [pc, #548]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b14      	cmp	r3, #20
 80055ee:	d000      	beq.n	80055f2 <ESP_Upkeep+0x52e>
 80055f0:	e105      	b.n	80057fe <ESP_Upkeep+0x73a>
        if(Mode == AT_MODE_SEND){
 80055f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005820 <ESP_Upkeep+0x75c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d11d      	bne.n	8005636 <ESP_Upkeep+0x572>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80055fa:	f006 fd0f 	bl	800c01c <HAL_GetTick>
 80055fe:	0003      	movs	r3, r0
 8005600:	4a88      	ldr	r2, [pc, #544]	@ (8005824 <ESP_Upkeep+0x760>)
 8005602:	189a      	adds	r2, r3, r2
 8005604:	4b7f      	ldr	r3, [pc, #508]	@ (8005804 <ESP_Upkeep+0x740>)
 8005606:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005608:	f005 faf4 	bl	800abf4 <ResetESPIndicator>
          clearDMABuffer();
 800560c:	f7ff fa2e 	bl	8004a6c <clearDMABuffer>
          stop = HAL_GetTick();
 8005610:	f006 fd04 	bl	800c01c <HAL_GetTick>
 8005614:	0002      	movs	r2, r0
 8005616:	4b84      	ldr	r3, [pc, #528]	@ (8005828 <ESP_Upkeep+0x764>)
 8005618:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 800561a:	4b83      	ldr	r3, [pc, #524]	@ (8005828 <ESP_Upkeep+0x764>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b83      	ldr	r3, [pc, #524]	@ (800582c <ESP_Upkeep+0x768>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a82      	ldr	r2, [pc, #520]	@ (8005830 <ESP_Upkeep+0x76c>)
 8005626:	4983      	ldr	r1, [pc, #524]	@ (8005834 <ESP_Upkeep+0x770>)
 8005628:	2003      	movs	r0, #3
 800562a:	f006 f95b 	bl	800b8e4 <CreateLine>
          EspState = ESP_STATE_DEINIT;
 800562e:	4b7a      	ldr	r3, [pc, #488]	@ (8005818 <ESP_Upkeep+0x754>)
 8005630:	220d      	movs	r2, #13
 8005632:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005634:	e0e3      	b.n	80057fe <ESP_Upkeep+0x73a>
        else if (Mode == AT_MODE_GETTIME) {
 8005636:	4b7a      	ldr	r3, [pc, #488]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b05      	cmp	r3, #5
 800563c:	d12e      	bne.n	800569c <ESP_Upkeep+0x5d8>
            setTime = false;
 800563e:	4b7e      	ldr	r3, [pc, #504]	@ (8005838 <ESP_Upkeep+0x774>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 8005644:	f006 fcea 	bl	800c01c <HAL_GetTick>
 8005648:	0003      	movs	r3, r0
 800564a:	4a7c      	ldr	r2, [pc, #496]	@ (800583c <ESP_Upkeep+0x778>)
 800564c:	189a      	adds	r2, r3, r2
 800564e:	4b7c      	ldr	r3, [pc, #496]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005650:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005652:	4b7b      	ldr	r3, [pc, #492]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7b      	ldr	r2, [pc, #492]	@ (8005844 <ESP_Upkeep+0x780>)
 8005658:	4976      	ldr	r1, [pc, #472]	@ (8005834 <ESP_Upkeep+0x770>)
 800565a:	2003      	movs	r0, #3
 800565c:	f006 f942 	bl	800b8e4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005660:	4b79      	ldr	r3, [pc, #484]	@ (8005848 <ESP_Upkeep+0x784>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b67      	ldr	r3, [pc, #412]	@ (8005804 <ESP_Upkeep+0x740>)
 8005666:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005668:	f005 fac4 	bl	800abf4 <ResetESPIndicator>
            clearDMABuffer();
 800566c:	f7ff f9fe 	bl	8004a6c <clearDMABuffer>
            stop = HAL_GetTick();
 8005670:	f006 fcd4 	bl	800c01c <HAL_GetTick>
 8005674:	0002      	movs	r2, r0
 8005676:	4b6c      	ldr	r3, [pc, #432]	@ (8005828 <ESP_Upkeep+0x764>)
 8005678:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 800567a:	4b6b      	ldr	r3, [pc, #428]	@ (8005828 <ESP_Upkeep+0x764>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b6b      	ldr	r3, [pc, #428]	@ (800582c <ESP_Upkeep+0x768>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	4a71      	ldr	r2, [pc, #452]	@ (800584c <ESP_Upkeep+0x788>)
 8005686:	496b      	ldr	r1, [pc, #428]	@ (8005834 <ESP_Upkeep+0x770>)
 8005688:	2003      	movs	r0, #3
 800568a:	f006 f92b 	bl	800b8e4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800568e:	4b62      	ldr	r3, [pc, #392]	@ (8005818 <ESP_Upkeep+0x754>)
 8005690:	220d      	movs	r2, #13
 8005692:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005694:	4b62      	ldr	r3, [pc, #392]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005696:	2202      	movs	r2, #2
 8005698:	701a      	strb	r2, [r3, #0]
    break;
 800569a:	e0b0      	b.n	80057fe <ESP_Upkeep+0x73a>
          EspState = ESP_STATE_RESET;
 800569c:	4b5e      	ldr	r3, [pc, #376]	@ (8005818 <ESP_Upkeep+0x754>)
 800569e:	2209      	movs	r2, #9
 80056a0:	701a      	strb	r2, [r3, #0]
    break;
 80056a2:	e0ac      	b.n	80057fe <ESP_Upkeep+0x73a>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80056a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <ESP_Upkeep+0x78c>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80056aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005854 <ESP_Upkeep+0x790>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	0018      	movs	r0, r3
 80056b2:	f007 ff12 	bl	800d4da <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80056b6:	2001      	movs	r0, #1
 80056b8:	f006 fcba 	bl	800c030 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80056bc:	2380      	movs	r3, #128	@ 0x80
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	4865      	ldr	r0, [pc, #404]	@ (8005858 <ESP_Upkeep+0x794>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	0019      	movs	r1, r3
 80056c6:	f007 ff08 	bl	800d4da <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80056ca:	2001      	movs	r0, #1
 80056cc:	f006 fcb0 	bl	800c030 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80056d0:	4b60      	ldr	r3, [pc, #384]	@ (8005854 <ESP_Upkeep+0x790>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	2102      	movs	r1, #2
 80056d6:	0018      	movs	r0, r3
 80056d8:	f007 feff 	bl	800d4da <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80056dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005818 <ESP_Upkeep+0x754>)
 80056de:	2209      	movs	r2, #9
 80056e0:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80056e2:	2001      	movs	r0, #1
 80056e4:	f006 fca4 	bl	800c030 <HAL_Delay>
      break;
 80056e8:	e0cb      	b.n	8005882 <ESP_Upkeep+0x7be>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80056ea:	4b46      	ldr	r3, [pc, #280]	@ (8005804 <ESP_Upkeep+0x740>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0018      	movs	r0, r3
 80056f0:	f006 f8a2 	bl	800b838 <TimestampIsReached>
 80056f4:	1e03      	subs	r3, r0, #0
 80056f6:	d103      	bne.n	8005700 <ESP_Upkeep+0x63c>
 80056f8:	4b58      	ldr	r3, [pc, #352]	@ (800585c <ESP_Upkeep+0x798>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02f      	beq.n	8005760 <ESP_Upkeep+0x69c>
        if(Mode == AT_MODE_INIT){
 8005700:	4b47      	ldr	r3, [pc, #284]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <ESP_Upkeep+0x650>
          InitIsDone = true;
 8005708:	4b55      	ldr	r3, [pc, #340]	@ (8005860 <ESP_Upkeep+0x79c>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800570e:	4b42      	ldr	r3, [pc, #264]	@ (8005818 <ESP_Upkeep+0x754>)
 8005710:	220b      	movs	r2, #11
 8005712:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005714:	4b42      	ldr	r3, [pc, #264]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <ESP_Upkeep+0x66a>
          ConnectionMade = true;
 800571c:	4b51      	ldr	r3, [pc, #324]	@ (8005864 <ESP_Upkeep+0x7a0>)
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005722:	4b51      	ldr	r3, [pc, #324]	@ (8005868 <ESP_Upkeep+0x7a4>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <ESP_Upkeep+0x754>)
 800572a:	220b      	movs	r2, #11
 800572c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800572e:	4b3c      	ldr	r3, [pc, #240]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d102      	bne.n	800573c <ESP_Upkeep+0x678>
          EspState = ESP_STATE_INIT;
 8005736:	4b38      	ldr	r3, [pc, #224]	@ (8005818 <ESP_Upkeep+0x754>)
 8005738:	2202      	movs	r2, #2
 800573a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800573c:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <ESP_Upkeep+0x75c>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d102      	bne.n	800574a <ESP_Upkeep+0x686>
          EspState = ESP_STATE_CONFIG;
 8005744:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <ESP_Upkeep+0x754>)
 8005746:	220e      	movs	r2, #14
 8005748:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 800574a:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <ESP_Upkeep+0x75c>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d127      	bne.n	80057a2 <ESP_Upkeep+0x6de>
          EspState = ESP_STATE_MODE_SELECT;
 8005752:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <ESP_Upkeep+0x754>)
 8005754:	220b      	movs	r2, #11
 8005756:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005758:	4b44      	ldr	r3, [pc, #272]	@ (800586c <ESP_Upkeep+0x7a8>)
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 800575e:	e020      	b.n	80057a2 <ESP_Upkeep+0x6de>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005760:	4b37      	ldr	r3, [pc, #220]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	0018      	movs	r0, r3
 8005766:	f006 f867 	bl	800b838 <TimestampIsReached>
 800576a:	1e03      	subs	r3, r0, #0
 800576c:	d100      	bne.n	8005770 <ESP_Upkeep+0x6ac>
 800576e:	e087      	b.n	8005880 <ESP_Upkeep+0x7bc>
        if(Mode == AT_MODE_SEND ) {
 8005770:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d000      	beq.n	800577a <ESP_Upkeep+0x6b6>
 8005778:	e082      	b.n	8005880 <ESP_Upkeep+0x7bc>
            Mode = AT_MODE_GETTIME;
 800577a:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <ESP_Upkeep+0x75c>)
 800577c:	2205      	movs	r2, #5
 800577e:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005780:	4b25      	ldr	r3, [pc, #148]	@ (8005818 <ESP_Upkeep+0x754>)
 8005782:	2202      	movs	r2, #2
 8005784:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005786:	4b1f      	ldr	r3, [pc, #124]	@ (8005804 <ESP_Upkeep+0x740>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b2f      	ldr	r3, [pc, #188]	@ (8005848 <ESP_Upkeep+0x784>)
 800578c:	601a      	str	r2, [r3, #0]
         setTime = true;
 800578e:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <ESP_Upkeep+0x774>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005794:	4a36      	ldr	r2, [pc, #216]	@ (8005870 <ESP_Upkeep+0x7ac>)
 8005796:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <ESP_Upkeep+0x770>)
 8005798:	0019      	movs	r1, r3
 800579a:	2003      	movs	r0, #3
 800579c:	f006 f8a2 	bl	800b8e4 <CreateLine>
        }
      }
      break;
 80057a0:	e06e      	b.n	8005880 <ESP_Upkeep+0x7bc>
 80057a2:	e06d      	b.n	8005880 <ESP_Upkeep+0x7bc>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 80057a4:	4a33      	ldr	r2, [pc, #204]	@ (8005874 <ESP_Upkeep+0x7b0>)
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <ESP_Upkeep+0x770>)
 80057a8:	0019      	movs	r1, r3
 80057aa:	2003      	movs	r0, #3
 80057ac:	f006 f89a 	bl	800b8e4 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 80057b0:	f013 fe4e 	bl	8019450 <GetUsbRxPointer>
 80057b4:	0003      	movs	r3, r0
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f8de 	bl	8005978 <Process_PC_Config>
      break;
 80057bc:	e061      	b.n	8005882 <ESP_Upkeep+0x7be>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80057be:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <ESP_Upkeep+0x7b4>)
 80057c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005834 <ESP_Upkeep+0x770>)
 80057c2:	0019      	movs	r1, r3
 80057c4:	2003      	movs	r0, #3
 80057c6:	f006 f88d 	bl	800b8e4 <CreateLine>
      EspState = ESP_STATE_INIT;
 80057ca:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <ESP_Upkeep+0x754>)
 80057cc:	2202      	movs	r2, #2
 80057ce:	701a      	strb	r2, [r3, #0]
      break;
 80057d0:	e057      	b.n	8005882 <ESP_Upkeep+0x7be>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 80057d2:	4a2a      	ldr	r2, [pc, #168]	@ (800587c <ESP_Upkeep+0x7b8>)
 80057d4:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <ESP_Upkeep+0x770>)
 80057d6:	0019      	movs	r1, r3
 80057d8:	2003      	movs	r0, #3
 80057da:	f006 f883 	bl	800b8e4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <ESP_Upkeep+0x754>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	701a      	strb	r2, [r3, #0]
      break;
 80057e4:	e04d      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	e04b      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	e049      	b.n	8005882 <ESP_Upkeep+0x7be>
        break;
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	e047      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	e045      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	e043      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057fa:	46c0      	nop			@ (mov r8, r8)
 80057fc:	e041      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	e03f      	b.n	8005882 <ESP_Upkeep+0x7be>
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	20000984 	.word	0x20000984
 8005808:	20000991 	.word	0x20000991
 800580c:	2000002a 	.word	0x2000002a
 8005810:	20000992 	.word	0x20000992
 8005814:	20000982 	.word	0x20000982
 8005818:	20000028 	.word	0x20000028
 800581c:	20000978 	.word	0x20000978
 8005820:	20000993 	.word	0x20000993
 8005824:	000493e0 	.word	0x000493e0
 8005828:	2000055c 	.word	0x2000055c
 800582c:	20000558 	.word	0x20000558
 8005830:	0801fe64 	.word	0x0801fe64
 8005834:	0801f7a8 	.word	0x0801f7a8
 8005838:	20000001 	.word	0x20000001
 800583c:	002c4020 	.word	0x002c4020
 8005840:	20000988 	.word	0x20000988
 8005844:	0801fe7c 	.word	0x0801fe7c
 8005848:	2000098c 	.word	0x2000098c
 800584c:	0801fec0 	.word	0x0801fec0
 8005850:	20000544 	.word	0x20000544
 8005854:	50001c00 	.word	0x50001c00
 8005858:	50000800 	.word	0x50000800
 800585c:	20000547 	.word	0x20000547
 8005860:	20000545 	.word	0x20000545
 8005864:	20000548 	.word	0x20000548
 8005868:	2000054a 	.word	0x2000054a
 800586c:	20000549 	.word	0x20000549
 8005870:	0801fee0 	.word	0x0801fee0
 8005874:	0801fef0 	.word	0x0801fef0
 8005878:	0801ff08 	.word	0x0801ff08
 800587c:	0801ff1c 	.word	0x0801ff1c
      break;
 8005880:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005882:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <ESP_Upkeep+0x7cc>)
 8005884:	781b      	ldrb	r3, [r3, #0]
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bdb0      	pop	{r4, r5, r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	20000028 	.word	0x20000028

08005894 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <I2CSensors_Init+0x30>)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80058a2:	4a09      	ldr	r2, [pc, #36]	@ (80058c8 <I2CSensors_Init+0x34>)
 80058a4:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <I2CSensors_Init+0x38>)
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f001 fa71 	bl	8006d90 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80058ae:	4a06      	ldr	r2, [pc, #24]	@ (80058c8 <I2CSensors_Init+0x34>)
 80058b0:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <I2CSensors_Init+0x38>)
 80058b2:	0011      	movs	r1, r2
 80058b4:	0018      	movs	r0, r3
 80058b6:	f001 f8db 	bl	8006a70 <Gas_Init>
}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	20000a84 	.word	0x20000a84
 80058c8:	08005925 	.word	0x08005925
 80058cc:	080058d1 	.word	0x080058d1

080058d0 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80058d0:	b5b0      	push	{r4, r5, r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6039      	str	r1, [r7, #0]
 80058d8:	0011      	movs	r1, r2
 80058da:	1dfb      	adds	r3, r7, #7
 80058dc:	1c02      	adds	r2, r0, #0
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	1dbb      	adds	r3, r7, #6
 80058e2:	1c0a      	adds	r2, r1, #0
 80058e4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80058e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <ReadI2C+0x50>)
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	1dfb      	adds	r3, r7, #7
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	18db      	adds	r3, r3, r3
 80058f2:	b299      	uxth	r1, r3
 80058f4:	1dbb      	adds	r3, r7, #6
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	250f      	movs	r5, #15
 80058fc:	197c      	adds	r4, r7, r5
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	f007 ffa4 	bl	800d84c <HAL_I2C_Master_Receive_DMA>
 8005904:	0003      	movs	r3, r0
 8005906:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005908:	197b      	adds	r3, r7, r5
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <ReadI2C+0x44>
        return false;
 8005910:	2300      	movs	r3, #0
 8005912:	e000      	b.n	8005916 <ReadI2C+0x46>
    }
    return true;
 8005914:	2301      	movs	r3, #1
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bdb0      	pop	{r4, r5, r7, pc}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	20000a84 	.word	0x20000a84

08005924 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6039      	str	r1, [r7, #0]
 800592c:	0011      	movs	r1, r2
 800592e:	1dfb      	adds	r3, r7, #7
 8005930:	1c02      	adds	r2, r0, #0
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	1dbb      	adds	r3, r7, #6
 8005936:	1c0a      	adds	r2, r1, #0
 8005938:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800593a:	4b0e      	ldr	r3, [pc, #56]	@ (8005974 <WriteI2C+0x50>)
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	18db      	adds	r3, r3, r3
 8005946:	b299      	uxth	r1, r3
 8005948:	1dbb      	adds	r3, r7, #6
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	250f      	movs	r5, #15
 8005950:	197c      	adds	r4, r7, r5
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	f007 fe74 	bl	800d640 <HAL_I2C_Master_Transmit_DMA>
 8005958:	0003      	movs	r3, r0
 800595a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800595c:	197b      	adds	r3, r7, r5
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <WriteI2C+0x44>
        return false;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <WriteI2C+0x46>
    }
    return true;
 8005968:	2301      	movs	r3, #1
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bdb0      	pop	{r4, r5, r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	20000a84 	.word	0x20000a84

08005978 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b0c3      	sub	sp, #268	@ 0x10c
 800597c:	af3e      	add	r7, sp, #248	@ 0xf8
 800597e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005980:	f013 fd86 	bl	8019490 <GetUsbRxDataSize>
 8005984:	0003      	movs	r3, r0
 8005986:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d971      	bls.n	8005a72 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2123      	movs	r1, #35	@ 0x23
 8005992:	0018      	movs	r0, r3
 8005994:	f016 fe7c 	bl	801c690 <strchr>
 8005998:	0003      	movs	r3, r0
 800599a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d065      	beq.n	8005a6e <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	785a      	ldrb	r2, [r3, #1]
 80059a6:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <Process_PC_Config+0x100>)
 80059a8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	789a      	ldrb	r2, [r3, #2]
 80059ae:	4b32      	ldr	r3, [pc, #200]	@ (8005a78 <Process_PC_Config+0x100>)
 80059b0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <Process_PC_Config+0x100>)
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	3305      	adds	r3, #5
 80059b8:	001a      	movs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4293      	cmp	r3, r2
 80059be:	d351      	bcc.n	8005a64 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1cd9      	adds	r1, r3, #3
 80059c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005a78 <Process_PC_Config+0x100>)
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	001a      	movs	r2, r3
 80059ca:	4b2c      	ldr	r3, [pc, #176]	@ (8005a7c <Process_PC_Config+0x104>)
 80059cc:	0018      	movs	r0, r3
 80059ce:	f016 ff33 	bl	801c838 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80059d2:	4b29      	ldr	r3, [pc, #164]	@ (8005a78 <Process_PC_Config+0x100>)
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	3303      	adds	r3, #3
 80059d8:	001a      	movs	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <Process_PC_Config+0x100>)
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	3304      	adds	r3, #4
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	18cb      	adds	r3, r1, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	b299      	uxth	r1, r3
 80059f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <Process_PC_Config+0x100>)
 80059fa:	2381      	movs	r3, #129	@ 0x81
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005a00:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a02:	2381      	movs	r3, #129	@ 0x81
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	5ad4      	ldrh	r4, [r2, r3]
 8005a08:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	0011      	movs	r1, r2
 8005a14:	0018      	movs	r0, r3
 8005a16:	f000 f975 	bl	8005d04 <CRC16_ARC>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d007      	beq.n	8005a30 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005a20:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a22:	785a      	ldrb	r2, [r3, #1]
 8005a24:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <Process_PC_Config+0x104>)
 8005a26:	0019      	movs	r1, r3
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f000 f919 	bl	8005c60 <Create_Message>
 8005a2e:	e016      	b.n	8005a5e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005a30:	4c11      	ldr	r4, [pc, #68]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a32:	466b      	mov	r3, sp
 8005a34:	0018      	movs	r0, r3
 8005a36:	0023      	movs	r3, r4
 8005a38:	3310      	adds	r3, #16
 8005a3a:	22f4      	movs	r2, #244	@ 0xf4
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	f016 fefb 	bl	801c838 <memcpy>
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	68a2      	ldr	r2, [r4, #8]
 8005a48:	68e3      	ldr	r3, [r4, #12]
 8005a4a:	f000 f819 	bl	8005a80 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a50:	7818      	ldrb	r0, [r3, #0]
 8005a52:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a54:	785a      	ldrb	r2, [r3, #1]
 8005a56:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <Process_PC_Config+0x104>)
 8005a58:	0019      	movs	r1, r3
 8005a5a:	f000 f901 	bl	8005c60 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005a5e:	f013 fcff 	bl	8019460 <ResetUsbRxDataSize>
                return;
 8005a62:	e006      	b.n	8005a72 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f013 fd1c 	bl	80194a4 <GetUsbRxNextChunk>
 8005a6c:	e001      	b.n	8005a72 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005a6e:	f013 fcf7 	bl	8019460 <ResetUsbRxDataSize>
        }
    }
}
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b005      	add	sp, #20
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	20000a88 	.word	0x20000a88
 8005a7c:	20000a8a 	.word	0x20000a8a

08005a80 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005a80:	b084      	sub	sp, #16
 8005a82:	b5b0      	push	{r4, r5, r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	2518      	movs	r5, #24
 8005a8a:	197c      	adds	r4, r7, r5
 8005a8c:	6020      	str	r0, [r4, #0]
 8005a8e:	6061      	str	r1, [r4, #4]
 8005a90:	60a2      	str	r2, [r4, #8]
 8005a92:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005a94:	197b      	adds	r3, r7, r5
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2bfe      	cmp	r3, #254	@ 0xfe
 8005a9a:	d100      	bne.n	8005a9e <ProcessCmd+0x1e>
 8005a9c:	e09c      	b.n	8005bd8 <ProcessCmd+0x158>
 8005a9e:	dd00      	ble.n	8005aa2 <ProcessCmd+0x22>
 8005aa0:	e0bc      	b.n	8005c1c <ProcessCmd+0x19c>
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	dc0a      	bgt.n	8005abc <ProcessCmd+0x3c>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	da00      	bge.n	8005aac <ProcessCmd+0x2c>
 8005aaa:	e0b7      	b.n	8005c1c <ProcessCmd+0x19c>
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	d900      	bls.n	8005ab2 <ProcessCmd+0x32>
 8005ab0:	e0b4      	b.n	8005c1c <ProcessCmd+0x19c>
 8005ab2:	009a      	lsls	r2, r3, #2
 8005ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c2c <ProcessCmd+0x1ac>)
 8005ab6:	18d3      	adds	r3, r2, r3
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	469f      	mov	pc, r3
 8005abc:	2bfd      	cmp	r3, #253	@ 0xfd
 8005abe:	d100      	bne.n	8005ac2 <ProcessCmd+0x42>
 8005ac0:	e084      	b.n	8005bcc <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005ac2:	e0ab      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ac4:	2118      	movs	r1, #24
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	001a      	movs	r2, r3
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	1c99      	adds	r1, r3, #2
 8005ad0:	4857      	ldr	r0, [pc, #348]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	f7fd fdf4 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ad8:	e0a0      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ada:	2118      	movs	r1, #24
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	001a      	movs	r2, r3
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	1c99      	adds	r1, r3, #2
 8005ae6:	4853      	ldr	r0, [pc, #332]	@ (8005c34 <ProcessCmd+0x1b4>)
 8005ae8:	230c      	movs	r3, #12
 8005aea:	f7fd fde9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005aee:	e095      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005af0:	2118      	movs	r1, #24
 8005af2:	187b      	adds	r3, r7, r1
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	001a      	movs	r2, r3
 8005af8:	187b      	adds	r3, r7, r1
 8005afa:	1c99      	adds	r1, r3, #2
 8005afc:	484e      	ldr	r0, [pc, #312]	@ (8005c38 <ProcessCmd+0x1b8>)
 8005afe:	230c      	movs	r3, #12
 8005b00:	f7fd fdde 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b04:	e08a      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b06:	2118      	movs	r1, #24
 8005b08:	187b      	adds	r3, r7, r1
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	187b      	adds	r3, r7, r1
 8005b10:	1c99      	adds	r1, r3, #2
 8005b12:	484a      	ldr	r0, [pc, #296]	@ (8005c3c <ProcessCmd+0x1bc>)
 8005b14:	230c      	movs	r3, #12
 8005b16:	f7fd fdd3 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b1a:	e07f      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b1c:	2118      	movs	r1, #24
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	001a      	movs	r2, r3
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	1c99      	adds	r1, r3, #2
 8005b28:	4845      	ldr	r0, [pc, #276]	@ (8005c40 <ProcessCmd+0x1c0>)
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f7fd fdc8 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b30:	e074      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b32:	2118      	movs	r1, #24
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	001a      	movs	r2, r3
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	1c99      	adds	r1, r3, #2
 8005b3e:	4841      	ldr	r0, [pc, #260]	@ (8005c44 <ProcessCmd+0x1c4>)
 8005b40:	230c      	movs	r3, #12
 8005b42:	f7fd fdbd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b46:	e069      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b48:	2118      	movs	r1, #24
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	001a      	movs	r2, r3
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	1c99      	adds	r1, r3, #2
 8005b54:	483c      	ldr	r0, [pc, #240]	@ (8005c48 <ProcessCmd+0x1c8>)
 8005b56:	230c      	movs	r3, #12
 8005b58:	f7fd fdb2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b5c:	e05e      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005b5e:	2118      	movs	r1, #24
 8005b60:	187b      	adds	r3, r7, r1
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	001a      	movs	r2, r3
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	1c99      	adds	r1, r3, #2
 8005b6a:	4838      	ldr	r0, [pc, #224]	@ (8005c4c <ProcessCmd+0x1cc>)
 8005b6c:	231e      	movs	r3, #30
 8005b6e:	f7fd fda7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b72:	e053      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b74:	2118      	movs	r1, #24
 8005b76:	187b      	adds	r3, r7, r1
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	187b      	adds	r3, r7, r1
 8005b7e:	1c99      	adds	r1, r3, #2
 8005b80:	4833      	ldr	r0, [pc, #204]	@ (8005c50 <ProcessCmd+0x1d0>)
 8005b82:	230c      	movs	r3, #12
 8005b84:	f7fd fd9c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b88:	e048      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b8a:	2118      	movs	r1, #24
 8005b8c:	187b      	adds	r3, r7, r1
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	001a      	movs	r2, r3
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	1c99      	adds	r1, r3, #2
 8005b96:	482f      	ldr	r0, [pc, #188]	@ (8005c54 <ProcessCmd+0x1d4>)
 8005b98:	230c      	movs	r3, #12
 8005b9a:	f7fd fd91 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b9e:	e03d      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ba0:	2118      	movs	r1, #24
 8005ba2:	187b      	adds	r3, r7, r1
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	187b      	adds	r3, r7, r1
 8005baa:	1c99      	adds	r1, r3, #2
 8005bac:	482a      	ldr	r0, [pc, #168]	@ (8005c58 <ProcessCmd+0x1d8>)
 8005bae:	230c      	movs	r3, #12
 8005bb0:	f7fd fd86 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005bb4:	e032      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005bb6:	2118      	movs	r1, #24
 8005bb8:	187b      	adds	r3, r7, r1
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	1c99      	adds	r1, r3, #2
 8005bc2:	4826      	ldr	r0, [pc, #152]	@ (8005c5c <ProcessCmd+0x1dc>)
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	f7fd fd7b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005bca:	e027      	b.n	8005c1c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005bcc:	4b18      	ldr	r3, [pc, #96]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005bce:	21ba      	movs	r1, #186	@ 0xba
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7fd fdba 	bl	800374a <ClearEEprom>
        break;
 8005bd6:	e021      	b.n	8005c1c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005bd8:	2118      	movs	r1, #24
 8005bda:	187b      	adds	r3, r7, r1
 8005bdc:	789b      	ldrb	r3, [r3, #2]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	b21a      	sxth	r2, r3
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	78db      	ldrb	r3, [r3, #3]
 8005be6:	b21b      	sxth	r3, r3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	b21a      	sxth	r2, r3
 8005bec:	1dbb      	adds	r3, r7, #6
 8005bee:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005bf0:	1dbb      	adds	r3, r7, #6
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	23c0      	movs	r3, #192	@ 0xc0
 8005bf6:	015b      	lsls	r3, r3, #5
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d207      	bcs.n	8005c0c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005bfc:	1dbb      	adds	r3, r7, #6
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	4a0b      	ldr	r2, [pc, #44]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005c02:	0019      	movs	r1, r3
 8005c04:	0010      	movs	r0, r2
 8005c06:	f7fd fda0 	bl	800374a <ClearEEprom>
            break;
 8005c0a:	e006      	b.n	8005c1a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005c0c:	23c0      	movs	r3, #192	@ 0xc0
 8005c0e:	015b      	lsls	r3, r3, #5
 8005c10:	4a07      	ldr	r2, [pc, #28]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005c12:	0019      	movs	r1, r3
 8005c14:	0010      	movs	r0, r2
 8005c16:	f7fd fd98 	bl	800374a <ClearEEprom>
            break;
 8005c1a:	46c0      	nop			@ (mov r8, r8)
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bcb0      	pop	{r4, r5, r7}
 8005c24:	bc08      	pop	{r3}
 8005c26:	b004      	add	sp, #16
 8005c28:	4718      	bx	r3
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	08020a18 	.word	0x08020a18
 8005c30:	08080000 	.word	0x08080000
 8005c34:	0808000c 	.word	0x0808000c
 8005c38:	08080018 	.word	0x08080018
 8005c3c:	08080024 	.word	0x08080024
 8005c40:	08080030 	.word	0x08080030
 8005c44:	0808003c 	.word	0x0808003c
 8005c48:	08080048 	.word	0x08080048
 8005c4c:	08080090 	.word	0x08080090
 8005c50:	08080078 	.word	0x08080078
 8005c54:	0808006c 	.word	0x0808006c
 8005c58:	08080060 	.word	0x08080060
 8005c5c:	08080054 	.word	0x08080054

08005c60 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6039      	str	r1, [r7, #0]
 8005c68:	0011      	movs	r1, r2
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	1c02      	adds	r2, r0, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	1c0a      	adds	r2, r1, #0
 8005c74:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005c76:	2223      	movs	r2, #35	@ 0x23
 8005c78:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <Create_Message+0x9c>)
 8005c7a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cfc <Create_Message+0x9c>)
 8005c7e:	1dfa      	adds	r2, r7, #7
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005c84:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <Create_Message+0x9c>)
 8005c86:	1dba      	adds	r2, r7, #6
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005c8c:	1dbb      	adds	r3, r7, #6
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <Create_Message+0xa0>)
 8005c94:	0018      	movs	r0, r3
 8005c96:	f016 fdcf 	bl	801c838 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005c9a:	1dbb      	adds	r3, r7, #6
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	250e      	movs	r5, #14
 8005ca2:	197b      	adds	r3, r7, r5
 8005ca4:	3203      	adds	r2, #3
 8005ca6:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005ca8:	260c      	movs	r6, #12
 8005caa:	19bc      	adds	r4, r7, r6
 8005cac:	197b      	adds	r3, r7, r5
 8005cae:	881a      	ldrh	r2, [r3, #0]
 8005cb0:	4b12      	ldr	r3, [pc, #72]	@ (8005cfc <Create_Message+0x9c>)
 8005cb2:	0011      	movs	r1, r2
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f825 	bl	8005d04 <CRC16_ARC>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005cbe:	0030      	movs	r0, r6
 8005cc0:	183b      	adds	r3, r7, r0
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	197b      	adds	r3, r7, r5
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b2d1      	uxtb	r1, r2
 8005cce:	4a0b      	ldr	r2, [pc, #44]	@ (8005cfc <Create_Message+0x9c>)
 8005cd0:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005cd2:	197b      	adds	r3, r7, r5
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	183a      	adds	r2, r7, r0
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	b2d1      	uxtb	r1, r2
 8005cde:	4a07      	ldr	r2, [pc, #28]	@ (8005cfc <Create_Message+0x9c>)
 8005ce0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005ce2:	197b      	adds	r3, r7, r5
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	4b04      	ldr	r3, [pc, #16]	@ (8005cfc <Create_Message+0x9c>)
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f013 fb74 	bl	80193dc <CDC_Transmit_FS>
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b005      	add	sp, #20
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfc:	20000b8c 	.word	0x20000b8c
 8005d00:	20000b8f 	.word	0x20000b8f

08005d04 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	000a      	movs	r2, r1
 8005d0e:	1cbb      	adds	r3, r7, #2
 8005d10:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005d12:	2316      	movs	r3, #22
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	2200      	movs	r2, #0
 8005d18:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e02e      	b.n	8005d7e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	18d3      	adds	r3, r2, r3
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	0019      	movs	r1, r3
 8005d2a:	2216      	movs	r2, #22
 8005d2c:	18bb      	adds	r3, r7, r2
 8005d2e:	18ba      	adds	r2, r7, r2
 8005d30:	8812      	ldrh	r2, [r2, #0]
 8005d32:	404a      	eors	r2, r1
 8005d34:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e01a      	b.n	8005d72 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005d3c:	2116      	movs	r1, #22
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	2201      	movs	r2, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	187a      	adds	r2, r7, r1
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	0852      	lsrs	r2, r2, #1
 8005d50:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005d52:	187b      	adds	r3, r7, r1
 8005d54:	187a      	adds	r2, r7, r1
 8005d56:	8812      	ldrh	r2, [r2, #0]
 8005d58:	490f      	ldr	r1, [pc, #60]	@ (8005d98 <CRC16_ARC+0x94>)
 8005d5a:	404a      	eors	r2, r1
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e005      	b.n	8005d6c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005d60:	2216      	movs	r2, #22
 8005d62:	18bb      	adds	r3, r7, r2
 8005d64:	18ba      	adds	r2, r7, r2
 8005d66:	8812      	ldrh	r2, [r2, #0]
 8005d68:	0852      	lsrs	r2, r2, #1
 8005d6a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	dde1      	ble.n	8005d3c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	1cbb      	adds	r3, r7, #2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	dbcb      	blt.n	8005d20 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005d88:	2316      	movs	r3, #22
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	881b      	ldrh	r3, [r3, #0]
}
 8005d8e:	0018      	movs	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b006      	add	sp, #24
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	ffffa001 	.word	0xffffa001

08005d9c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005da0:	4b26      	ldr	r3, [pc, #152]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005da2:	4a27      	ldr	r2, [pc, #156]	@ (8005e40 <ReadBatteryVoltage+0xa4>)
 8005da4:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005da6:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005da8:	2280      	movs	r2, #128	@ 0x80
 8005daa:	0152      	lsls	r2, r2, #5
 8005dac:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005dae:	4a23      	ldr	r2, [pc, #140]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005db0:	4b24      	ldr	r3, [pc, #144]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f006 fbed 	bl	800c594 <HAL_ADC_ConfigChannel>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d001      	beq.n	8005dc2 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005dbe:	f001 fc1f 	bl	8007600 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005dc2:	4b20      	ldr	r3, [pc, #128]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f006 fae9 	bl	800c39c <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005dca:	4b1e      	ldr	r3, [pc, #120]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dcc:	2101      	movs	r1, #1
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f006 fb38 	bl	800c444 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f006 fbd0 	bl	800c57c <HAL_ADC_GetValue>
 8005ddc:	0002      	movs	r2, r0
 8005dde:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <ReadBatteryVoltage+0xac>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4353      	muls	r3, r2
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	4919      	ldr	r1, [pc, #100]	@ (8005e4c <ReadBatteryVoltage+0xb0>)
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7fa f9db 	bl	80001a4 <__udivsi3>
 8005dee:	0003      	movs	r3, r0
 8005df0:	001a      	movs	r2, r3
 8005df2:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <ReadBatteryVoltage+0xb4>)
 8005df4:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005df6:	4b16      	ldr	r3, [pc, #88]	@ (8005e50 <ReadBatteryVoltage+0xb4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fb fc34 	bl	8001668 <__aeabi_ui2f>
 8005e00:	1c03      	adds	r3, r0, #0
 8005e02:	4914      	ldr	r1, [pc, #80]	@ (8005e54 <ReadBatteryVoltage+0xb8>)
 8005e04:	1c18      	adds	r0, r3, #0
 8005e06:	f7fa fee5 	bl	8000bd4 <__aeabi_fdiv>
 8005e0a:	1c03      	adds	r3, r0, #0
 8005e0c:	1c1a      	adds	r2, r3, #0
 8005e0e:	4b12      	ldr	r3, [pc, #72]	@ (8005e58 <ReadBatteryVoltage+0xbc>)
 8005e10:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005e12:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e14:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <ReadBatteryVoltage+0xa4>)
 8005e16:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005e18:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e1a:	4a10      	ldr	r2, [pc, #64]	@ (8005e5c <ReadBatteryVoltage+0xc0>)
 8005e1c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e1e:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e20:	4b08      	ldr	r3, [pc, #32]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005e22:	0011      	movs	r1, r2
 8005e24:	0018      	movs	r0, r3
 8005e26:	f006 fbb5 	bl	800c594 <HAL_ADC_ConfigChannel>
 8005e2a:	1e03      	subs	r3, r0, #0
 8005e2c:	d001      	beq.n	8005e32 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005e2e:	f001 fbe7 	bl	8007600 <Error_Handler>
   }
   return trueValue;
 8005e32:	4b09      	ldr	r3, [pc, #36]	@ (8005e58 <ReadBatteryVoltage+0xbc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 }
 8005e36:	1c18      	adds	r0, r3, #0
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000c94 	.word	0x20000c94
 8005e40:	38004000 	.word	0x38004000
 8005e44:	20000cbc 	.word	0x20000cbc
 8005e48:	2000002c 	.word	0x2000002c
 8005e4c:	00000fff 	.word	0x00000fff
 8005e50:	20000c9c 	.word	0x20000c9c
 8005e54:	447a0000 	.word	0x447a0000
 8005e58:	20000ca0 	.word	0x20000ca0
 8005e5c:	00001001 	.word	0x00001001

08005e60 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005e64:	4b27      	ldr	r3, [pc, #156]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e66:	4a28      	ldr	r2, [pc, #160]	@ (8005f08 <ReadSolarVoltage+0xa8>)
 8005e68:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005e6a:	4b26      	ldr	r3, [pc, #152]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e6c:	2280      	movs	r2, #128	@ 0x80
 8005e6e:	0152      	lsls	r2, r2, #5
 8005e70:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e72:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e74:	4b25      	ldr	r3, [pc, #148]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f006 fb8b 	bl	800c594 <HAL_ADC_ConfigChannel>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d001      	beq.n	8005e86 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005e82:	f001 fbbd 	bl	8007600 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005e86:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f006 fa87 	bl	800c39c <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e90:	2101      	movs	r1, #1
 8005e92:	0018      	movs	r0, r3
 8005e94:	f006 fad6 	bl	800c444 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005e98:	4b1c      	ldr	r3, [pc, #112]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f006 fb6e 	bl	800c57c <HAL_ADC_GetValue>
 8005ea0:	0002      	movs	r2, r0
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <ReadSolarVoltage+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	435a      	muls	r2, r3
 8005ea8:	0013      	movs	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	189b      	adds	r3, r3, r2
 8005eae:	4919      	ldr	r1, [pc, #100]	@ (8005f14 <ReadSolarVoltage+0xb4>)
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7fa f977 	bl	80001a4 <__udivsi3>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	001a      	movs	r2, r3
 8005eba:	4b17      	ldr	r3, [pc, #92]	@ (8005f18 <ReadSolarVoltage+0xb8>)
 8005ebc:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	@ (8005f18 <ReadSolarVoltage+0xb8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fb fbd0 	bl	8001668 <__aeabi_ui2f>
 8005ec8:	1c03      	adds	r3, r0, #0
 8005eca:	4914      	ldr	r1, [pc, #80]	@ (8005f1c <ReadSolarVoltage+0xbc>)
 8005ecc:	1c18      	adds	r0, r3, #0
 8005ece:	f7fa fe81 	bl	8000bd4 <__aeabi_fdiv>
 8005ed2:	1c03      	adds	r3, r0, #0
 8005ed4:	1c1a      	adds	r2, r3, #0
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <ReadSolarVoltage+0xc0>)
 8005ed8:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005eda:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005edc:	4a0a      	ldr	r2, [pc, #40]	@ (8005f08 <ReadSolarVoltage+0xa8>)
 8005ede:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005ee0:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005ee2:	4a10      	ldr	r2, [pc, #64]	@ (8005f24 <ReadSolarVoltage+0xc4>)
 8005ee4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005ee6:	4a07      	ldr	r2, [pc, #28]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005ee8:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f006 fb51 	bl	800c594 <HAL_ADC_ConfigChannel>
 8005ef2:	1e03      	subs	r3, r0, #0
 8005ef4:	d001      	beq.n	8005efa <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005ef6:	f001 fb83 	bl	8007600 <Error_Handler>
   }
   return trueValue;
 8005efa:	4b09      	ldr	r3, [pc, #36]	@ (8005f20 <ReadSolarVoltage+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 }
 8005efe:	1c18      	adds	r0, r3, #0
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000c94 	.word	0x20000c94
 8005f08:	3c008000 	.word	0x3c008000
 8005f0c:	20000cbc 	.word	0x20000cbc
 8005f10:	2000002c 	.word	0x2000002c
 8005f14:	00000fff 	.word	0x00000fff
 8005f18:	20000ca4 	.word	0x20000ca4
 8005f1c:	447a0000 	.word	0x447a0000
 8005f20:	20000ca8 	.word	0x20000ca8
 8005f24:	00001001 	.word	0x00001001

08005f28 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005f2c:	23a0      	movs	r3, #160	@ 0xa0
 8005f2e:	05db      	lsls	r3, r3, #23
 8005f30:	2180      	movs	r1, #128	@ 0x80
 8005f32:	0018      	movs	r0, r3
 8005f34:	f007 fab4 	bl	800d4a0 <HAL_GPIO_ReadPin>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	1e5a      	subs	r2, r3, #1
 8005f3c:	4193      	sbcs	r3, r2
 8005f3e:	b2db      	uxtb	r3, r3
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005f46:	b580      	push	{r7, lr}
 8005f48:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	23a0      	movs	r3, #160	@ 0xa0
 8005f50:	05db      	lsls	r3, r3, #23
 8005f52:	0011      	movs	r1, r2
 8005f54:	0018      	movs	r0, r3
 8005f56:	f007 faa3 	bl	800d4a0 <HAL_GPIO_ReadPin>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	4193      	sbcs	r3, r2
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <UserButton_Pressed+0x1c>)
 8005f6e:	2104      	movs	r1, #4
 8005f70:	0018      	movs	r0, r3
 8005f72:	f007 fa95 	bl	800d4a0 <HAL_GPIO_ReadPin>
 8005f76:	0003      	movs	r3, r0
 8005f78:	425a      	negs	r2, r3
 8005f7a:	4153      	adcs	r3, r2
 8005f7c:	b2db      	uxtb	r3, r3
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	50000c00 	.word	0x50000c00

08005f88 <showTime>:
uint8_t year;
uint8_t myUptimeminute = 0;
uint8_t myUptimehour = 0;
uint16_t myUptimeday = 0;

void showTime() {
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	46ce      	mov	lr, r9
 8005f8c:	4647      	mov	r7, r8
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af06      	add	r7, sp, #24
  RTC_GetTime(&lasthour, &lastminute, &lastsecond, &weekday, &day, &month, &year);
 8005f94:	4c1c      	ldr	r4, [pc, #112]	@ (8006008 <showTime+0x80>)
 8005f96:	4a1d      	ldr	r2, [pc, #116]	@ (800600c <showTime+0x84>)
 8005f98:	491d      	ldr	r1, [pc, #116]	@ (8006010 <showTime+0x88>)
 8005f9a:	481e      	ldr	r0, [pc, #120]	@ (8006014 <showTime+0x8c>)
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <showTime+0x90>)
 8005f9e:	9302      	str	r3, [sp, #8]
 8005fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800601c <showTime+0x94>)
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8006020 <showTime+0x98>)
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	0023      	movs	r3, r4
 8005faa:	f000 fabd 	bl	8006528 <RTC_GetTime>
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n", year, month, day, lasthour, lastminute, lastsecond, myUptimeday, myUptimehour, myUptimeminute);
 8005fae:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <showTime+0x90>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	469c      	mov	ip, r3
 8005fb4:	4b19      	ldr	r3, [pc, #100]	@ (800601c <showTime+0x94>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	4698      	mov	r8, r3
 8005fba:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <showTime+0x98>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	4699      	mov	r9, r3
 8005fc0:	4b14      	ldr	r3, [pc, #80]	@ (8006014 <showTime+0x8c>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	001a      	movs	r2, r3
 8005fc6:	4b12      	ldr	r3, [pc, #72]	@ (8006010 <showTime+0x88>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	0019      	movs	r1, r3
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <showTime+0x84>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	001c      	movs	r4, r3
 8005fd2:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <showTime+0x9c>)
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	001d      	movs	r5, r3
 8005fd8:	4b13      	ldr	r3, [pc, #76]	@ (8006028 <showTime+0xa0>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	001e      	movs	r6, r3
 8005fde:	4b13      	ldr	r3, [pc, #76]	@ (800602c <showTime+0xa4>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	4813      	ldr	r0, [pc, #76]	@ (8006030 <showTime+0xa8>)
 8005fe4:	9305      	str	r3, [sp, #20]
 8005fe6:	9604      	str	r6, [sp, #16]
 8005fe8:	9503      	str	r5, [sp, #12]
 8005fea:	9402      	str	r4, [sp, #8]
 8005fec:	9101      	str	r1, [sp, #4]
 8005fee:	9200      	str	r2, [sp, #0]
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	4642      	mov	r2, r8
 8005ff4:	4661      	mov	r1, ip
 8005ff6:	f016 fa8f 	bl	801c518 <iprintf>
}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b001      	add	sp, #4
 8006000:	bcc0      	pop	{r6, r7}
 8006002:	46b9      	mov	r9, r7
 8006004:	46b0      	mov	r8, r6
 8006006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006008:	20000cb4 	.word	0x20000cb4
 800600c:	20000cb3 	.word	0x20000cb3
 8006010:	20000cb2 	.word	0x20000cb2
 8006014:	20000cb1 	.word	0x20000cb1
 8006018:	20000cb7 	.word	0x20000cb7
 800601c:	20000cb6 	.word	0x20000cb6
 8006020:	20000cb5 	.word	0x20000cb5
 8006024:	20000cba 	.word	0x20000cba
 8006028:	20000cb9 	.word	0x20000cb9
 800602c:	20000cb8 	.word	0x20000cb8
 8006030:	0801ff80 	.word	0x0801ff80

08006034 <setiMinute>:

void setiMinute() {
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b085      	sub	sp, #20
 8006038:	af04      	add	r7, sp, #16
  RTC_GetTime(&lasthour, &lastminute, &lastsecond, &weekday, &day, &month, &year);
 800603a:	4c0e      	ldr	r4, [pc, #56]	@ (8006074 <setiMinute+0x40>)
 800603c:	4a0e      	ldr	r2, [pc, #56]	@ (8006078 <setiMinute+0x44>)
 800603e:	490f      	ldr	r1, [pc, #60]	@ (800607c <setiMinute+0x48>)
 8006040:	480f      	ldr	r0, [pc, #60]	@ (8006080 <setiMinute+0x4c>)
 8006042:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <setiMinute+0x50>)
 8006044:	9302      	str	r3, [sp, #8]
 8006046:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <setiMinute+0x54>)
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	4b10      	ldr	r3, [pc, #64]	@ (800608c <setiMinute+0x58>)
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	0023      	movs	r3, r4
 8006050:	f000 fa6a 	bl	8006528 <RTC_GetTime>
  iMinute = lastminute;
 8006054:	4b09      	ldr	r3, [pc, #36]	@ (800607c <setiMinute+0x48>)
 8006056:	781a      	ldrb	r2, [r3, #0]
 8006058:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <setiMinute+0x5c>)
 800605a:	701a      	strb	r2, [r3, #0]
  Debug("iMInute set to: %d", iMinute);
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <setiMinute+0x5c>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	4a0c      	ldr	r2, [pc, #48]	@ (8006094 <setiMinute+0x60>)
 8006062:	490d      	ldr	r1, [pc, #52]	@ (8006098 <setiMinute+0x64>)
 8006064:	2003      	movs	r0, #3
 8006066:	f005 fc3d 	bl	800b8e4 <CreateLine>
}
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b001      	add	sp, #4
 8006070:	bd90      	pop	{r4, r7, pc}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	20000cb4 	.word	0x20000cb4
 8006078:	20000cb3 	.word	0x20000cb3
 800607c:	20000cb2 	.word	0x20000cb2
 8006080:	20000cb1 	.word	0x20000cb1
 8006084:	20000cb7 	.word	0x20000cb7
 8006088:	20000cb6 	.word	0x20000cb6
 800608c:	20000cb5 	.word	0x20000cb5
 8006090:	20000cb0 	.word	0x20000cb0
 8006094:	0801ffd4 	.word	0x0801ffd4
 8006098:	0801ffe8 	.word	0x0801ffe8

0800609c <UpdateSystemUptime>:

void UpdateSystemUptime() {
 800609c:	b590      	push	{r4, r7, lr}
 800609e:	b085      	sub	sp, #20
 80060a0:	af04      	add	r7, sp, #16
  RTC_GetTime(&lasthour, &lastminute, &lastsecond, &weekday, &day, &month, &year);
 80060a2:	4c25      	ldr	r4, [pc, #148]	@ (8006138 <UpdateSystemUptime+0x9c>)
 80060a4:	4a25      	ldr	r2, [pc, #148]	@ (800613c <UpdateSystemUptime+0xa0>)
 80060a6:	4926      	ldr	r1, [pc, #152]	@ (8006140 <UpdateSystemUptime+0xa4>)
 80060a8:	4826      	ldr	r0, [pc, #152]	@ (8006144 <UpdateSystemUptime+0xa8>)
 80060aa:	4b27      	ldr	r3, [pc, #156]	@ (8006148 <UpdateSystemUptime+0xac>)
 80060ac:	9302      	str	r3, [sp, #8]
 80060ae:	4b27      	ldr	r3, [pc, #156]	@ (800614c <UpdateSystemUptime+0xb0>)
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <UpdateSystemUptime+0xb4>)
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	0023      	movs	r3, r4
 80060b8:	f000 fa36 	bl	8006528 <RTC_GetTime>
  if (iMinute != lastminute) {
 80060bc:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <UpdateSystemUptime+0xb8>)
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006140 <UpdateSystemUptime+0xa4>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d009      	beq.n	80060dc <UpdateSystemUptime+0x40>
    iMinute = lastminute;
 80060c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006140 <UpdateSystemUptime+0xa4>)
 80060ca:	781a      	ldrb	r2, [r3, #0]
 80060cc:	4b21      	ldr	r3, [pc, #132]	@ (8006154 <UpdateSystemUptime+0xb8>)
 80060ce:	701a      	strb	r2, [r3, #0]
    myUptimeminute++;
 80060d0:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <UpdateSystemUptime+0xbc>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006158 <UpdateSystemUptime+0xbc>)
 80060da:	701a      	strb	r2, [r3, #0]
  }
  if (myUptimeminute == 60) {
 80060dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006158 <UpdateSystemUptime+0xbc>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b3c      	cmp	r3, #60	@ 0x3c
 80060e2:	d115      	bne.n	8006110 <UpdateSystemUptime+0x74>
    myUptimeminute = 0;
 80060e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006158 <UpdateSystemUptime+0xbc>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
    myUptimehour++;
 80060ea:	4b1c      	ldr	r3, [pc, #112]	@ (800615c <UpdateSystemUptime+0xc0>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	4b1a      	ldr	r3, [pc, #104]	@ (800615c <UpdateSystemUptime+0xc0>)
 80060f4:	701a      	strb	r2, [r3, #0]
    if (myUptimehour == 24) {
 80060f6:	4b19      	ldr	r3, [pc, #100]	@ (800615c <UpdateSystemUptime+0xc0>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b18      	cmp	r3, #24
 80060fc:	d108      	bne.n	8006110 <UpdateSystemUptime+0x74>
      myUptimehour = 0;
 80060fe:	4b17      	ldr	r3, [pc, #92]	@ (800615c <UpdateSystemUptime+0xc0>)
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
      myUptimeday++;
 8006104:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <UpdateSystemUptime+0xc4>)
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	4b14      	ldr	r3, [pc, #80]	@ (8006160 <UpdateSystemUptime+0xc4>)
 800610e:	801a      	strh	r2, [r3, #0]
    }
  }
  Debug("System uptime is: %dd %02dh:%02dm", myUptimeday, myUptimehour, myUptimeminute);
 8006110:	4b13      	ldr	r3, [pc, #76]	@ (8006160 <UpdateSystemUptime+0xc4>)
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	001c      	movs	r4, r3
 8006116:	4b11      	ldr	r3, [pc, #68]	@ (800615c <UpdateSystemUptime+0xc0>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	0018      	movs	r0, r3
 800611c:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <UpdateSystemUptime+0xbc>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	4a10      	ldr	r2, [pc, #64]	@ (8006164 <UpdateSystemUptime+0xc8>)
 8006122:	4911      	ldr	r1, [pc, #68]	@ (8006168 <UpdateSystemUptime+0xcc>)
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	9000      	str	r0, [sp, #0]
 8006128:	0023      	movs	r3, r4
 800612a:	2003      	movs	r0, #3
 800612c:	f005 fbda 	bl	800b8e4 <CreateLine>
}
 8006130:	46c0      	nop			@ (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b001      	add	sp, #4
 8006136:	bd90      	pop	{r4, r7, pc}
 8006138:	20000cb4 	.word	0x20000cb4
 800613c:	20000cb3 	.word	0x20000cb3
 8006140:	20000cb2 	.word	0x20000cb2
 8006144:	20000cb1 	.word	0x20000cb1
 8006148:	20000cb7 	.word	0x20000cb7
 800614c:	20000cb6 	.word	0x20000cb6
 8006150:	20000cb5 	.word	0x20000cb5
 8006154:	20000cb0 	.word	0x20000cb0
 8006158:	20000cb8 	.word	0x20000cb8
 800615c:	20000cb9 	.word	0x20000cb9
 8006160:	20000cba 	.word	0x20000cba
 8006164:	0801ffec 	.word	0x0801ffec
 8006168:	0801ffe8 	.word	0x0801ffe8

0800616c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	0008      	movs	r0, r1
 8006176:	0011      	movs	r1, r2
 8006178:	1cfb      	adds	r3, r7, #3
 800617a:	1c02      	adds	r2, r0, #0
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	1cbb      	adds	r3, r7, #2
 8006180:	1c0a      	adds	r2, r1, #0
 8006182:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006184:	230e      	movs	r3, #14
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800618c:	230f      	movs	r3, #15
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	1cfa      	adds	r2, r7, #3
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e015      	b.n	80061c4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006198:	200f      	movs	r0, #15
 800619a:	183b      	adds	r3, r7, r0
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	18d2      	adds	r2, r2, r3
 80061a2:	240e      	movs	r4, #14
 80061a4:	193b      	adds	r3, r7, r4
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	7811      	ldrb	r1, [r2, #0]
 80061aa:	2208      	movs	r2, #8
 80061ac:	18ba      	adds	r2, r7, r2
 80061ae:	54d1      	strb	r1, [r2, r3]
    pos++;
 80061b0:	193b      	adds	r3, r7, r4
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	193b      	adds	r3, r7, r4
 80061b6:	3201      	adds	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80061ba:	183b      	adds	r3, r7, r0
 80061bc:	781a      	ldrb	r2, [r3, #0]
 80061be:	183b      	adds	r3, r7, r0
 80061c0:	3201      	adds	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	200f      	movs	r0, #15
 80061c6:	183a      	adds	r2, r7, r0
 80061c8:	1cbb      	adds	r3, r7, #2
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d9e2      	bls.n	8006198 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80061d2:	230e      	movs	r3, #14
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2208      	movs	r2, #8
 80061da:	18ba      	adds	r2, r7, r2
 80061dc:	2100      	movs	r1, #0
 80061de:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80061e0:	1cfb      	adds	r3, r7, #3
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b13      	cmp	r3, #19
 80061e6:	d849      	bhi.n	800627c <aBuff2int+0x110>
    if (start == 17) { //month
 80061e8:	1cfb      	adds	r3, r7, #3
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b11      	cmp	r3, #17
 80061ee:	d122      	bne.n	8006236 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80061f0:	183b      	adds	r3, r7, r0
 80061f2:	2200      	movs	r2, #0
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e018      	b.n	800622a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80061f8:	240f      	movs	r4, #15
 80061fa:	193b      	adds	r3, r7, r4
 80061fc:	781a      	ldrb	r2, [r3, #0]
 80061fe:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <aBuff2int+0x128>)
 8006200:	0092      	lsls	r2, r2, #2
 8006202:	58d2      	ldr	r2, [r2, r3]
 8006204:	2308      	movs	r3, #8
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	0011      	movs	r1, r2
 800620a:	0018      	movs	r0, r3
 800620c:	f7f9 ffa4 	bl	8000158 <strcmp>
 8006210:	1e03      	subs	r3, r0, #0
 8006212:	d104      	bne.n	800621e <aBuff2int+0xb2>
          return i+1;
 8006214:	193b      	adds	r3, r7, r4
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	b2db      	uxtb	r3, r3
 800621c:	e035      	b.n	800628a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800621e:	210f      	movs	r1, #15
 8006220:	187b      	adds	r3, r7, r1
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	187b      	adds	r3, r7, r1
 8006226:	3201      	adds	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	230f      	movs	r3, #15
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b0b      	cmp	r3, #11
 8006232:	d9e1      	bls.n	80061f8 <aBuff2int+0x8c>
 8006234:	e022      	b.n	800627c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006236:	230f      	movs	r3, #15
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e018      	b.n	8006272 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006240:	240f      	movs	r4, #15
 8006242:	193b      	adds	r3, r7, r4
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	4b14      	ldr	r3, [pc, #80]	@ (8006298 <aBuff2int+0x12c>)
 8006248:	0092      	lsls	r2, r2, #2
 800624a:	58d2      	ldr	r2, [r2, r3]
 800624c:	2308      	movs	r3, #8
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	0011      	movs	r1, r2
 8006252:	0018      	movs	r0, r3
 8006254:	f7f9 ff80 	bl	8000158 <strcmp>
 8006258:	1e03      	subs	r3, r0, #0
 800625a:	d104      	bne.n	8006266 <aBuff2int+0xfa>
          return i+1;
 800625c:	193b      	adds	r3, r7, r4
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e011      	b.n	800628a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006266:	210f      	movs	r1, #15
 8006268:	187b      	adds	r3, r7, r1
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	187b      	adds	r3, r7, r1
 800626e:	3201      	adds	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	230f      	movs	r3, #15
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b06      	cmp	r3, #6
 800627a:	d9e1      	bls.n	8006240 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800627c:	2308      	movs	r3, #8
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	0018      	movs	r0, r3
 8006282:	f014 fd6e 	bl	801ad62 <atoi>
 8006286:	0003      	movs	r3, r0
 8006288:	b2db      	uxtb	r3, r3
}
 800628a:	0018      	movs	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	b005      	add	sp, #20
 8006290:	bd90      	pop	{r4, r7, pc}
 8006292:	46c0      	nop			@ (mov r8, r8)
 8006294:	2000004c 	.word	0x2000004c
 8006298:	20000030 	.word	0x20000030

0800629c <ParseTime>:

void ParseTime(char* buffer) {
 800629c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629e:	46c6      	mov	lr, r8
 80062a0:	b500      	push	{lr}
 80062a2:	b08a      	sub	sp, #40	@ 0x28
 80062a4:	af06      	add	r7, sp, #24
 80062a6:	6078      	str	r0, [r7, #4]
  RTC_GetTime(&lasthour, &lastminute, &lastsecond, &weekday, &day, &month, &year);
 80062a8:	4c52      	ldr	r4, [pc, #328]	@ (80063f4 <ParseTime+0x158>)
 80062aa:	4a53      	ldr	r2, [pc, #332]	@ (80063f8 <ParseTime+0x15c>)
 80062ac:	4953      	ldr	r1, [pc, #332]	@ (80063fc <ParseTime+0x160>)
 80062ae:	4854      	ldr	r0, [pc, #336]	@ (8006400 <ParseTime+0x164>)
 80062b0:	4b54      	ldr	r3, [pc, #336]	@ (8006404 <ParseTime+0x168>)
 80062b2:	9302      	str	r3, [sp, #8]
 80062b4:	4b54      	ldr	r3, [pc, #336]	@ (8006408 <ParseTime+0x16c>)
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	4b54      	ldr	r3, [pc, #336]	@ (800640c <ParseTime+0x170>)
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	0023      	movs	r3, r4
 80062be:	f000 f933 	bl	8006528 <RTC_GetTime>
  Debug("Current time is: %02dh:%02dm:%02ds", lasthour, lastminute, lastsecond);
 80062c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006400 <ParseTime+0x164>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	001c      	movs	r4, r3
 80062c8:	4b4c      	ldr	r3, [pc, #304]	@ (80063fc <ParseTime+0x160>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	0018      	movs	r0, r3
 80062ce:	4b4a      	ldr	r3, [pc, #296]	@ (80063f8 <ParseTime+0x15c>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	4a4f      	ldr	r2, [pc, #316]	@ (8006410 <ParseTime+0x174>)
 80062d4:	494f      	ldr	r1, [pc, #316]	@ (8006414 <ParseTime+0x178>)
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	9000      	str	r0, [sp, #0]
 80062da:	0023      	movs	r3, r4
 80062dc:	2003      	movs	r0, #3
 80062de:	f005 fb01 	bl	800b8e4 <CreateLine>
  uint8_t year, month, day, weekday, hours, minutes, seconds;
  hours = aBuff2int(buffer, 24, 25);
 80062e2:	250f      	movs	r5, #15
 80062e4:	197c      	adds	r4, r7, r5
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2219      	movs	r2, #25
 80062ea:	2118      	movs	r1, #24
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7ff ff3d 	bl	800616c <aBuff2int>
 80062f2:	0003      	movs	r3, r0
 80062f4:	7023      	strb	r3, [r4, #0]
  minutes = aBuff2int(buffer, 27, 28);
 80062f6:	260e      	movs	r6, #14
 80062f8:	19bc      	adds	r4, r7, r6
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	221c      	movs	r2, #28
 80062fe:	211b      	movs	r1, #27
 8006300:	0018      	movs	r0, r3
 8006302:	f7ff ff33 	bl	800616c <aBuff2int>
 8006306:	0003      	movs	r3, r0
 8006308:	7023      	strb	r3, [r4, #0]
  seconds = aBuff2int(buffer, 30, 31);
 800630a:	230d      	movs	r3, #13
 800630c:	18fc      	adds	r4, r7, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	221f      	movs	r2, #31
 8006312:	211e      	movs	r1, #30
 8006314:	0018      	movs	r0, r3
 8006316:	f7ff ff29 	bl	800616c <aBuff2int>
 800631a:	0003      	movs	r3, r0
 800631c:	7023      	strb	r3, [r4, #0]
  RTC_SetTime(hours, minutes, seconds);
 800631e:	230d      	movs	r3, #13
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	19bb      	adds	r3, r7, r6
 8006326:	7819      	ldrb	r1, [r3, #0]
 8006328:	197b      	adds	r3, r7, r5
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	0018      	movs	r0, r3
 800632e:	f000 f875 	bl	800641c <RTC_SetTime>
  year = aBuff2int(buffer, 35, 36);
 8006332:	220c      	movs	r2, #12
 8006334:	18bc      	adds	r4, r7, r2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	@ 0x24
 800633a:	2123      	movs	r1, #35	@ 0x23
 800633c:	0018      	movs	r0, r3
 800633e:	f7ff ff15 	bl	800616c <aBuff2int>
 8006342:	0003      	movs	r3, r0
 8006344:	7023      	strb	r3, [r4, #0]
  month = aBuff2int(buffer, 17, 19);
 8006346:	210b      	movs	r1, #11
 8006348:	187c      	adds	r4, r7, r1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2213      	movs	r2, #19
 800634e:	2111      	movs	r1, #17
 8006350:	0018      	movs	r0, r3
 8006352:	f7ff ff0b 	bl	800616c <aBuff2int>
 8006356:	0003      	movs	r3, r0
 8006358:	7023      	strb	r3, [r4, #0]
  day = aBuff2int(buffer, 21,22);
 800635a:	200a      	movs	r0, #10
 800635c:	183c      	adds	r4, r7, r0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2216      	movs	r2, #22
 8006362:	2115      	movs	r1, #21
 8006364:	0018      	movs	r0, r3
 8006366:	f7ff ff01 	bl	800616c <aBuff2int>
 800636a:	0003      	movs	r3, r0
 800636c:	7023      	strb	r3, [r4, #0]
  weekday = aBuff2int(buffer, 13, 15);
 800636e:	2409      	movs	r4, #9
 8006370:	193c      	adds	r4, r7, r4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	220f      	movs	r2, #15
 8006376:	210d      	movs	r1, #13
 8006378:	0018      	movs	r0, r3
 800637a:	f7ff fef7 	bl	800616c <aBuff2int>
 800637e:	0003      	movs	r3, r0
 8006380:	7023      	strb	r3, [r4, #0]
  RTC_SetDate(weekday, day, month, year);
 8006382:	220c      	movs	r2, #12
 8006384:	18bb      	adds	r3, r7, r2
 8006386:	781c      	ldrb	r4, [r3, #0]
 8006388:	210b      	movs	r1, #11
 800638a:	187b      	adds	r3, r7, r1
 800638c:	781a      	ldrb	r2, [r3, #0]
 800638e:	200a      	movs	r0, #10
 8006390:	183b      	adds	r3, r7, r0
 8006392:	7819      	ldrb	r1, [r3, #0]
 8006394:	2309      	movs	r3, #9
 8006396:	18fb      	adds	r3, r7, r3
 8006398:	7818      	ldrb	r0, [r3, #0]
 800639a:	0023      	movs	r3, r4
 800639c:	f000 f884 	bl	80064a8 <RTC_SetDate>
  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
 80063a0:	2409      	movs	r4, #9
 80063a2:	193b      	adds	r3, r7, r4
 80063a4:	781c      	ldrb	r4, [r3, #0]
 80063a6:	46a0      	mov	r8, r4
 80063a8:	220c      	movs	r2, #12
 80063aa:	18bb      	adds	r3, r7, r2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	210b      	movs	r1, #11
 80063b0:	187a      	adds	r2, r7, r1
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	200a      	movs	r0, #10
 80063b6:	1839      	adds	r1, r7, r0
 80063b8:	7809      	ldrb	r1, [r1, #0]
 80063ba:	1978      	adds	r0, r7, r5
 80063bc:	7800      	ldrb	r0, [r0, #0]
 80063be:	19bc      	adds	r4, r7, r6
 80063c0:	7824      	ldrb	r4, [r4, #0]
 80063c2:	250d      	movs	r5, #13
 80063c4:	197d      	adds	r5, r7, r5
 80063c6:	782d      	ldrb	r5, [r5, #0]
 80063c8:	4e13      	ldr	r6, [pc, #76]	@ (8006418 <ParseTime+0x17c>)
 80063ca:	46b4      	mov	ip, r6
 80063cc:	4e11      	ldr	r6, [pc, #68]	@ (8006414 <ParseTime+0x178>)
 80063ce:	9505      	str	r5, [sp, #20]
 80063d0:	9404      	str	r4, [sp, #16]
 80063d2:	9003      	str	r0, [sp, #12]
 80063d4:	9102      	str	r1, [sp, #8]
 80063d6:	9201      	str	r2, [sp, #4]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	4643      	mov	r3, r8
 80063dc:	4662      	mov	r2, ip
 80063de:	0031      	movs	r1, r6
 80063e0:	2003      	movs	r0, #3
 80063e2:	f005 fa7f 	bl	800b8e4 <CreateLine>
}
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b004      	add	sp, #16
 80063ec:	bc80      	pop	{r7}
 80063ee:	46b8      	mov	r8, r7
 80063f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	20000cb4 	.word	0x20000cb4
 80063f8:	20000cb3 	.word	0x20000cb3
 80063fc:	20000cb2 	.word	0x20000cb2
 8006400:	20000cb1 	.word	0x20000cb1
 8006404:	20000cb7 	.word	0x20000cb7
 8006408:	20000cb6 	.word	0x20000cb6
 800640c:	20000cb5 	.word	0x20000cb5
 8006410:	08020010 	.word	0x08020010
 8006414:	0801ffe8 	.word	0x0801ffe8
 8006418:	08020034 	.word	0x08020034

0800641c <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 800641c:	b590      	push	{r4, r7, lr}
 800641e:	b089      	sub	sp, #36	@ 0x24
 8006420:	af00      	add	r7, sp, #0
 8006422:	0004      	movs	r4, r0
 8006424:	0008      	movs	r0, r1
 8006426:	0011      	movs	r1, r2
 8006428:	1dfb      	adds	r3, r7, #7
 800642a:	1c22      	adds	r2, r4, #0
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	1dbb      	adds	r3, r7, #6
 8006430:	1c02      	adds	r2, r0, #0
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	1d7b      	adds	r3, r7, #5
 8006436:	1c0a      	adds	r2, r1, #0
 8006438:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 800643a:	240c      	movs	r4, #12
 800643c:	193b      	adds	r3, r7, r4
 800643e:	0018      	movs	r0, r3
 8006440:	2314      	movs	r3, #20
 8006442:	001a      	movs	r2, r3
 8006444:	2100      	movs	r1, #0
 8006446:	f016 f91b 	bl	801c680 <memset>

    sTime.Hours = hours;
 800644a:	0021      	movs	r1, r4
 800644c:	187b      	adds	r3, r7, r1
 800644e:	1dfa      	adds	r2, r7, #7
 8006450:	7812      	ldrb	r2, [r2, #0]
 8006452:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 8006454:	187b      	adds	r3, r7, r1
 8006456:	1dba      	adds	r2, r7, #6
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 800645c:	187b      	adds	r3, r7, r1
 800645e:	1d7a      	adds	r2, r7, #5
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 8006464:	187b      	adds	r3, r7, r1
 8006466:	2200      	movs	r2, #0
 8006468:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800646a:	187b      	adds	r3, r7, r1
 800646c:	2200      	movs	r2, #0
 800646e:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006470:	187b      	adds	r3, r7, r1
 8006472:	2200      	movs	r2, #0
 8006474:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006476:	4b09      	ldr	r3, [pc, #36]	@ (800649c <RTC_SetTime+0x80>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	1879      	adds	r1, r7, r1
 800647c:	2200      	movs	r2, #0
 800647e:	0018      	movs	r0, r3
 8006480:	f00c f9ba 	bl	80127f8 <HAL_RTC_SetTime>
 8006484:	1e03      	subs	r3, r0, #0
 8006486:	d005      	beq.n	8006494 <RTC_SetTime+0x78>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006488:	4a05      	ldr	r2, [pc, #20]	@ (80064a0 <RTC_SetTime+0x84>)
 800648a:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <RTC_SetTime+0x88>)
 800648c:	0019      	movs	r1, r3
 800648e:	2001      	movs	r0, #1
 8006490:	f005 fa28 	bl	800b8e4 <CreateLine>
    }
}
 8006494:	46c0      	nop			@ (mov r8, r8)
 8006496:	46bd      	mov	sp, r7
 8006498:	b009      	add	sp, #36	@ 0x24
 800649a:	bd90      	pop	{r4, r7, pc}
 800649c:	20000cac 	.word	0x20000cac
 80064a0:	0802009c 	.word	0x0802009c
 80064a4:	080200b8 	.word	0x080200b8

080064a8 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(uint8_t weekday, uint8_t day, uint8_t month, uint8_t year) {
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	0005      	movs	r5, r0
 80064b0:	000c      	movs	r4, r1
 80064b2:	0010      	movs	r0, r2
 80064b4:	0019      	movs	r1, r3
 80064b6:	1dfb      	adds	r3, r7, #7
 80064b8:	1c2a      	adds	r2, r5, #0
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	1dbb      	adds	r3, r7, #6
 80064be:	1c22      	adds	r2, r4, #0
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	1d7b      	adds	r3, r7, #5
 80064c4:	1c02      	adds	r2, r0, #0
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	1d3b      	adds	r3, r7, #4
 80064ca:	1c0a      	adds	r2, r1, #0
 80064cc:	701a      	strb	r2, [r3, #0]
    RTC_DateTypeDef sDate = {0};
 80064ce:	210c      	movs	r1, #12
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]

    sDate.WeekDay = weekday;
 80064d6:	187b      	adds	r3, r7, r1
 80064d8:	1dfa      	adds	r2, r7, #7
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	701a      	strb	r2, [r3, #0]
    sDate.Date = day;
 80064de:	187b      	adds	r3, r7, r1
 80064e0:	1dba      	adds	r2, r7, #6
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	709a      	strb	r2, [r3, #2]
    sDate.Month = month;
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	1d7a      	adds	r2, r7, #5
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	705a      	strb	r2, [r3, #1]
    sDate.Year = year;  // Jaartal zonder eeuw (bv. 2024 -> 24)
 80064ee:	187b      	adds	r3, r7, r1
 80064f0:	1d3a      	adds	r2, r7, #4
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(RealTime_Handle, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80064f6:	4b09      	ldr	r3, [pc, #36]	@ (800651c <RTC_SetDate+0x74>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	1879      	adds	r1, r7, r1
 80064fc:	2200      	movs	r2, #0
 80064fe:	0018      	movs	r0, r3
 8006500:	f00c fa82 	bl	8012a08 <HAL_RTC_SetDate>
 8006504:	1e03      	subs	r3, r0, #0
 8006506:	d005      	beq.n	8006514 <RTC_SetDate+0x6c>
        // Foutafhandeling
      Error("Error setting date to RTC");
 8006508:	4a05      	ldr	r2, [pc, #20]	@ (8006520 <RTC_SetDate+0x78>)
 800650a:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <RTC_SetDate+0x7c>)
 800650c:	0019      	movs	r1, r3
 800650e:	2001      	movs	r0, #1
 8006510:	f005 f9e8 	bl	800b8e4 <CreateLine>
    }
}
 8006514:	46c0      	nop			@ (mov r8, r8)
 8006516:	46bd      	mov	sp, r7
 8006518:	b004      	add	sp, #16
 800651a:	bdb0      	pop	{r4, r5, r7, pc}
 800651c:	20000cac 	.word	0x20000cac
 8006520:	080200bc 	.word	0x080200bc
 8006524:	080200b8 	.word	0x080200b8

08006528 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds, uint8_t *weekday, uint8_t *day, uint8_t *month, uint8_t *year) {
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b08b      	sub	sp, #44	@ 0x2c
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef gTime = {0};
 8006536:	2414      	movs	r4, #20
 8006538:	193b      	adds	r3, r7, r4
 800653a:	0018      	movs	r0, r3
 800653c:	2314      	movs	r3, #20
 800653e:	001a      	movs	r2, r3
 8006540:	2100      	movs	r1, #0
 8006542:	f016 f89d 	bl	801c680 <memset>
    RTC_DateTypeDef gDate = {0};
 8006546:	2310      	movs	r3, #16
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]

    if (HAL_RTC_GetTime(RealTime_Handle, &gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800654e:	4b20      	ldr	r3, [pc, #128]	@ (80065d0 <RTC_GetTime+0xa8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	1939      	adds	r1, r7, r4
 8006554:	2200      	movs	r2, #0
 8006556:	0018      	movs	r0, r3
 8006558:	f00c f9f8 	bl	801294c <HAL_RTC_GetTime>
 800655c:	1e03      	subs	r3, r0, #0
 800655e:	d005      	beq.n	800656c <RTC_GetTime+0x44>
      Error("Error getting time from RTC");
 8006560:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <RTC_GetTime+0xac>)
 8006562:	4b1d      	ldr	r3, [pc, #116]	@ (80065d8 <RTC_GetTime+0xb0>)
 8006564:	0019      	movs	r1, r3
 8006566:	2001      	movs	r0, #1
 8006568:	f005 f9bc 	bl	800b8e4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, &gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800656c:	4b18      	ldr	r3, [pc, #96]	@ (80065d0 <RTC_GetTime+0xa8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2210      	movs	r2, #16
 8006572:	18b9      	adds	r1, r7, r2
 8006574:	2200      	movs	r2, #0
 8006576:	0018      	movs	r0, r3
 8006578:	f00c fada 	bl	8012b30 <HAL_RTC_GetDate>
 800657c:	1e03      	subs	r3, r0, #0
 800657e:	d005      	beq.n	800658c <RTC_GetTime+0x64>
      Error("Error getting date from RTC");
 8006580:	4a16      	ldr	r2, [pc, #88]	@ (80065dc <RTC_GetTime+0xb4>)
 8006582:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <RTC_GetTime+0xb0>)
 8006584:	0019      	movs	r1, r3
 8006586:	2001      	movs	r0, #1
 8006588:	f005 f9ac 	bl	800b8e4 <CreateLine>
    }
    *hours = gTime.Hours;
 800658c:	2114      	movs	r1, #20
 800658e:	187b      	adds	r3, r7, r1
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	701a      	strb	r2, [r3, #0]
    *minutes = gTime.Minutes;
 8006596:	187b      	adds	r3, r7, r1
 8006598:	785a      	ldrb	r2, [r3, #1]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	701a      	strb	r2, [r3, #0]
    *seconds = gTime.Seconds;
 800659e:	187b      	adds	r3, r7, r1
 80065a0:	789a      	ldrb	r2, [r3, #2]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	701a      	strb	r2, [r3, #0]
    *weekday = gDate.WeekDay;
 80065a6:	2110      	movs	r1, #16
 80065a8:	187b      	adds	r3, r7, r1
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	701a      	strb	r2, [r3, #0]
    *day = gDate.Date;
 80065b0:	187b      	adds	r3, r7, r1
 80065b2:	789a      	ldrb	r2, [r3, #2]
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	701a      	strb	r2, [r3, #0]
    *month = gDate.Month;
 80065b8:	187b      	adds	r3, r7, r1
 80065ba:	785a      	ldrb	r2, [r3, #1]
 80065bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065be:	701a      	strb	r2, [r3, #0]
    *year = gDate.Year;
 80065c0:	187b      	adds	r3, r7, r1
 80065c2:	78da      	ldrb	r2, [r3, #3]
 80065c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c6:	701a      	strb	r2, [r3, #0]
}
 80065c8:	46c0      	nop			@ (mov r8, r8)
 80065ca:	46bd      	mov	sp, r7
 80065cc:	b00b      	add	sp, #44	@ 0x2c
 80065ce:	bd90      	pop	{r4, r7, pc}
 80065d0:	20000cac 	.word	0x20000cac
 80065d4:	080200d8 	.word	0x080200d8
 80065d8:	080200b8 	.word	0x080200b8
 80065dc:	080200f4 	.word	0x080200f4

080065e0 <InitClock>:

    // Instellen op Stop mode met low-power regulator
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
}

void InitClock(RTC_HandleTypeDef* h_hrtc){
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 80065e8:	4b03      	ldr	r3, [pc, #12]	@ (80065f8 <InitClock+0x18>)
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]
//  RTC_SetTime(RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
}
 80065ee:	46c0      	nop			@ (mov r8, r8)
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	20000cac 	.word	0x20000cac

080065fc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006602:	003b      	movs	r3, r7
 8006604:	0018      	movs	r0, r3
 8006606:	2308      	movs	r3, #8
 8006608:	001a      	movs	r2, r3
 800660a:	2100      	movs	r1, #0
 800660c:	f016 f838 	bl	801c680 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006610:	4b30      	ldr	r3, [pc, #192]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006612:	4a31      	ldr	r2, [pc, #196]	@ (80066d8 <MX_ADC_Init+0xdc>)
 8006614:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006616:	4b2f      	ldr	r3, [pc, #188]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006618:	2200      	movs	r2, #0
 800661a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800661c:	4b2d      	ldr	r3, [pc, #180]	@ (80066d4 <MX_ADC_Init+0xd8>)
 800661e:	22c0      	movs	r2, #192	@ 0xc0
 8006620:	0612      	lsls	r2, r2, #24
 8006622:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006624:	4b2b      	ldr	r3, [pc, #172]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006626:	2200      	movs	r2, #0
 8006628:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800662a:	4b2a      	ldr	r3, [pc, #168]	@ (80066d4 <MX_ADC_Init+0xd8>)
 800662c:	2200      	movs	r2, #0
 800662e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006630:	4b28      	ldr	r3, [pc, #160]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006632:	2201      	movs	r2, #1
 8006634:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006636:	4b27      	ldr	r3, [pc, #156]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006638:	2200      	movs	r2, #0
 800663a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800663c:	4b25      	ldr	r3, [pc, #148]	@ (80066d4 <MX_ADC_Init+0xd8>)
 800663e:	2220      	movs	r2, #32
 8006640:	2100      	movs	r1, #0
 8006642:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006644:	4b23      	ldr	r3, [pc, #140]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006646:	2221      	movs	r2, #33	@ 0x21
 8006648:	2101      	movs	r1, #1
 800664a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800664c:	4b21      	ldr	r3, [pc, #132]	@ (80066d4 <MX_ADC_Init+0xd8>)
 800664e:	2200      	movs	r2, #0
 8006650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006652:	4b20      	ldr	r3, [pc, #128]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006654:	22c2      	movs	r2, #194	@ 0xc2
 8006656:	32ff      	adds	r2, #255	@ 0xff
 8006658:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800665a:	4b1e      	ldr	r3, [pc, #120]	@ (80066d4 <MX_ADC_Init+0xd8>)
 800665c:	222c      	movs	r2, #44	@ 0x2c
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006662:	4b1c      	ldr	r3, [pc, #112]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006664:	2204      	movs	r2, #4
 8006666:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006668:	4b1a      	ldr	r3, [pc, #104]	@ (80066d4 <MX_ADC_Init+0xd8>)
 800666a:	2200      	movs	r2, #0
 800666c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800666e:	4b19      	ldr	r3, [pc, #100]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006670:	2200      	movs	r2, #0
 8006672:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006674:	4b17      	ldr	r3, [pc, #92]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006676:	2200      	movs	r2, #0
 8006678:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800667a:	4b16      	ldr	r3, [pc, #88]	@ (80066d4 <MX_ADC_Init+0xd8>)
 800667c:	2200      	movs	r2, #0
 800667e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006680:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <MX_ADC_Init+0xd8>)
 8006682:	0018      	movs	r0, r3
 8006684:	f005 fd16 	bl	800c0b4 <HAL_ADC_Init>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d001      	beq.n	8006690 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800668c:	f000 ffb8 	bl	8007600 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006690:	003b      	movs	r3, r7
 8006692:	4a12      	ldr	r2, [pc, #72]	@ (80066dc <MX_ADC_Init+0xe0>)
 8006694:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006696:	003b      	movs	r3, r7
 8006698:	2280      	movs	r2, #128	@ 0x80
 800669a:	0152      	lsls	r2, r2, #5
 800669c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800669e:	003a      	movs	r2, r7
 80066a0:	4b0c      	ldr	r3, [pc, #48]	@ (80066d4 <MX_ADC_Init+0xd8>)
 80066a2:	0011      	movs	r1, r2
 80066a4:	0018      	movs	r0, r3
 80066a6:	f005 ff75 	bl	800c594 <HAL_ADC_ConfigChannel>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d001      	beq.n	80066b2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80066ae:	f000 ffa7 	bl	8007600 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80066b2:	003b      	movs	r3, r7
 80066b4:	4a0a      	ldr	r2, [pc, #40]	@ (80066e0 <MX_ADC_Init+0xe4>)
 80066b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80066b8:	003a      	movs	r2, r7
 80066ba:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <MX_ADC_Init+0xd8>)
 80066bc:	0011      	movs	r1, r2
 80066be:	0018      	movs	r0, r3
 80066c0:	f005 ff68 	bl	800c594 <HAL_ADC_ConfigChannel>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80066c8:	f000 ff9a 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80066cc:	46c0      	nop			@ (mov r8, r8)
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b002      	add	sp, #8
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000cbc 	.word	0x20000cbc
 80066d8:	40012400 	.word	0x40012400
 80066dc:	38004000 	.word	0x38004000
 80066e0:	3c008000 	.word	0x3c008000

080066e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b089      	sub	sp, #36	@ 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066ec:	240c      	movs	r4, #12
 80066ee:	193b      	adds	r3, r7, r4
 80066f0:	0018      	movs	r0, r3
 80066f2:	2314      	movs	r3, #20
 80066f4:	001a      	movs	r2, r3
 80066f6:	2100      	movs	r1, #0
 80066f8:	f015 ffc2 	bl	801c680 <memset>
  if(adcHandle->Instance==ADC1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a14      	ldr	r2, [pc, #80]	@ (8006754 <HAL_ADC_MspInit+0x70>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d121      	bne.n	800674a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006706:	4b14      	ldr	r3, [pc, #80]	@ (8006758 <HAL_ADC_MspInit+0x74>)
 8006708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800670a:	4b13      	ldr	r3, [pc, #76]	@ (8006758 <HAL_ADC_MspInit+0x74>)
 800670c:	2180      	movs	r1, #128	@ 0x80
 800670e:	0089      	lsls	r1, r1, #2
 8006710:	430a      	orrs	r2, r1
 8006712:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006714:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <HAL_ADC_MspInit+0x74>)
 8006716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006718:	4b0f      	ldr	r3, [pc, #60]	@ (8006758 <HAL_ADC_MspInit+0x74>)
 800671a:	2104      	movs	r1, #4
 800671c:	430a      	orrs	r2, r1
 800671e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006720:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <HAL_ADC_MspInit+0x74>)
 8006722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006724:	2204      	movs	r2, #4
 8006726:	4013      	ands	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800672c:	193b      	adds	r3, r7, r4
 800672e:	2230      	movs	r2, #48	@ 0x30
 8006730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006732:	193b      	adds	r3, r7, r4
 8006734:	2203      	movs	r2, #3
 8006736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	193b      	adds	r3, r7, r4
 800673a:	2200      	movs	r2, #0
 800673c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800673e:	193b      	adds	r3, r7, r4
 8006740:	4a06      	ldr	r2, [pc, #24]	@ (800675c <HAL_ADC_MspInit+0x78>)
 8006742:	0019      	movs	r1, r3
 8006744:	0010      	movs	r0, r2
 8006746:	f006 fd2d 	bl	800d1a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	46bd      	mov	sp, r7
 800674e:	b009      	add	sp, #36	@ 0x24
 8006750:	bd90      	pop	{r4, r7, pc}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	40012400 	.word	0x40012400
 8006758:	40021000 	.word	0x40021000
 800675c:	50000800 	.word	0x50000800

08006760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006766:	4b10      	ldr	r3, [pc, #64]	@ (80067a8 <MX_DMA_Init+0x48>)
 8006768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800676a:	4b0f      	ldr	r3, [pc, #60]	@ (80067a8 <MX_DMA_Init+0x48>)
 800676c:	2101      	movs	r1, #1
 800676e:	430a      	orrs	r2, r1
 8006770:	631a      	str	r2, [r3, #48]	@ 0x30
 8006772:	4b0d      	ldr	r3, [pc, #52]	@ (80067a8 <MX_DMA_Init+0x48>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006776:	2201      	movs	r2, #1
 8006778:	4013      	ands	r3, r2
 800677a:	607b      	str	r3, [r7, #4]
 800677c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800677e:	2200      	movs	r2, #0
 8006780:	2100      	movs	r1, #0
 8006782:	200a      	movs	r0, #10
 8006784:	f006 f8c0 	bl	800c908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006788:	200a      	movs	r0, #10
 800678a:	f006 f8d2 	bl	800c932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800678e:	2200      	movs	r2, #0
 8006790:	2103      	movs	r1, #3
 8006792:	200b      	movs	r0, #11
 8006794:	f006 f8b8 	bl	800c908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006798:	200b      	movs	r0, #11
 800679a:	f006 f8ca 	bl	800c932 <HAL_NVIC_EnableIRQ>

}
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b002      	add	sp, #8
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	46c0      	nop			@ (mov r8, r8)
 80067a8:	40021000 	.word	0x40021000

080067ac <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80067bc:	d901      	bls.n	80067c2 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80067be:	237f      	movs	r3, #127	@ 0x7f
 80067c0:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80067c2:	2017      	movs	r0, #23
 80067c4:	183b      	adds	r3, r7, r0
 80067c6:	490d      	ldr	r1, [pc, #52]	@ (80067fc <accessLUT10log10+0x50>)
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	188a      	adds	r2, r1, r2
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80067d0:	0001      	movs	r1, r0
 80067d2:	187b      	adds	r3, r7, r1
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2206      	movs	r2, #6
 80067d8:	4113      	asrs	r3, r2
 80067da:	001a      	movs	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80067e0:	187b      	adds	r3, r7, r1
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2106      	movs	r1, #6
 80067ea:	408b      	lsls	r3, r1
 80067ec:	1ad2      	subs	r2, r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	601a      	str	r2, [r3, #0]
}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b006      	add	sp, #24
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			@ (mov r8, r8)
 80067fc:	08020a4c 	.word	0x08020a4c

08006800 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006800:	b5b0      	push	{r4, r5, r7, lr}
 8006802:	b090      	sub	sp, #64	@ 0x40
 8006804:	af00      	add	r7, sp, #0
 8006806:	6138      	str	r0, [r7, #16]
 8006808:	6179      	str	r1, [r7, #20]
 800680a:	60fa      	str	r2, [r7, #12]
 800680c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800680e:	2308      	movs	r3, #8
 8006810:	001a      	movs	r2, r3
 8006812:	3a20      	subs	r2, #32
 8006814:	2a00      	cmp	r2, #0
 8006816:	db03      	blt.n	8006820 <efficient10log10+0x20>
 8006818:	2101      	movs	r1, #1
 800681a:	4091      	lsls	r1, r2
 800681c:	000d      	movs	r5, r1
 800681e:	e008      	b.n	8006832 <efficient10log10+0x32>
 8006820:	2220      	movs	r2, #32
 8006822:	1ad2      	subs	r2, r2, r3
 8006824:	2101      	movs	r1, #1
 8006826:	40d1      	lsrs	r1, r2
 8006828:	000a      	movs	r2, r1
 800682a:	2100      	movs	r1, #0
 800682c:	4099      	lsls	r1, r3
 800682e:	000d      	movs	r5, r1
 8006830:	4315      	orrs	r5, r2
 8006832:	2201      	movs	r2, #1
 8006834:	409a      	lsls	r2, r3
 8006836:	0014      	movs	r4, r2
 8006838:	2201      	movs	r2, #1
 800683a:	4252      	negs	r2, r2
 800683c:	17d3      	asrs	r3, r2, #31
 800683e:	1912      	adds	r2, r2, r4
 8006840:	416b      	adcs	r3, r5
 8006842:	633a      	str	r2, [r7, #48]	@ 0x30
 8006844:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8006846:	2336      	movs	r3, #54	@ 0x36
 8006848:	2208      	movs	r2, #8
 800684a:	189b      	adds	r3, r3, r2
 800684c:	19db      	adds	r3, r3, r7
 800684e:	2200      	movs	r2, #0
 8006850:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006852:	e017      	b.n	8006884 <efficient10log10+0x84>
    {
        P = P >> 1;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	0852      	lsrs	r2, r2, #1
 800685c:	603a      	str	r2, [r7, #0]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	431a      	orrs	r2, r3
 8006862:	603a      	str	r2, [r7, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	687c      	ldr	r4, [r7, #4]
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	617c      	str	r4, [r7, #20]
        bShift++;
 8006872:	2136      	movs	r1, #54	@ 0x36
 8006874:	2008      	movs	r0, #8
 8006876:	180b      	adds	r3, r1, r0
 8006878:	19db      	adds	r3, r3, r7
 800687a:	881a      	ldrh	r2, [r3, #0]
 800687c:	180b      	adds	r3, r1, r0
 800687e:	19db      	adds	r3, r3, r7
 8006880:	3201      	adds	r2, #1
 8006882:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006888:	429a      	cmp	r2, r3
 800688a:	d8e3      	bhi.n	8006854 <efficient10log10+0x54>
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006890:	429a      	cmp	r2, r3
 8006892:	d103      	bne.n	800689c <efficient10log10+0x9c>
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	429a      	cmp	r2, r3
 800689a:	d8db      	bhi.n	8006854 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	2308      	movs	r3, #8
 80068a0:	3b01      	subs	r3, #1
 80068a2:	2101      	movs	r1, #1
 80068a4:	4099      	lsls	r1, r3
 80068a6:	000b      	movs	r3, r1
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80068b4:	231c      	movs	r3, #28
 80068b6:	2408      	movs	r4, #8
 80068b8:	191b      	adds	r3, r3, r4
 80068ba:	19da      	adds	r2, r3, r7
 80068bc:	2320      	movs	r3, #32
 80068be:	191b      	adds	r3, r3, r4
 80068c0:	19d9      	adds	r1, r3, r7
 80068c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff ff71 	bl	80067ac <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80068ca:	2215      	movs	r2, #21
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80068d0:	2036      	movs	r0, #54	@ 0x36
 80068d2:	1902      	adds	r2, r0, r4
 80068d4:	19d2      	adds	r2, r2, r7
 80068d6:	8812      	ldrh	r2, [r2, #0]
 80068d8:	2103      	movs	r1, #3
 80068da:	434a      	muls	r2, r1
 80068dc:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80068de:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80068e0:	0021      	movs	r1, r4
 80068e2:	1843      	adds	r3, r0, r1
 80068e4:	19db      	adds	r3, r3, r7
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	2201      	movs	r2, #1
 80068ea:	4353      	muls	r3, r2
 80068ec:	2203      	movs	r2, #3
 80068ee:	4113      	asrs	r3, r2
 80068f0:	001a      	movs	r2, r3
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80068f6:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80068f8:	2314      	movs	r3, #20
 80068fa:	185b      	adds	r3, r3, r1
 80068fc:	19da      	adds	r2, r3, r7
 80068fe:	2318      	movs	r3, #24
 8006900:	185b      	adds	r3, r3, r1
 8006902:	19db      	adds	r3, r3, r7
 8006904:	0011      	movs	r1, r2
 8006906:	0018      	movs	r0, r3
 8006908:	f000 f80a 	bl	8006920 <correctIntFracNumber>
    integerPart[0] = intPart;
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	601a      	str	r2, [r3, #0]
}
 8006918:	46c0      	nop			@ (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b010      	add	sp, #64	@ 0x40
 800691e:	bdb0      	pop	{r4, r5, r7, pc}

08006920 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800692a:	e00a      	b.n	8006942 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3b0a      	subs	r3, #10
 800693c:	001a      	movs	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b09      	cmp	r3, #9
 8006948:	dcf0      	bgt.n	800692c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800694a:	e00a      	b.n	8006962 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	1e5a      	subs	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	330a      	adds	r3, #10
 800695c:	001a      	movs	r2, r3
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3309      	adds	r3, #9
 8006968:	dbf0      	blt.n	800694c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	da0f      	bge.n	8006992 <correctIntFracNumber+0x72>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dd0b      	ble.n	8006992 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3b0a      	subs	r3, #10
 800698a:	001a      	movs	r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006990:	e012      	b.n	80069b8 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	dd0e      	ble.n	80069b8 <correctIntFracNumber+0x98>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	da0a      	bge.n	80069b8 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	1e5a      	subs	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330a      	adds	r3, #10
 80069b2:	001a      	movs	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	601a      	str	r2, [r3, #0]
}
 80069b8:	46c0      	nop			@ (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80069ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <Gadget_Init+0x40>)
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f001 f9f7 	bl	8007dc4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	0018      	movs	r0, r3
 80069de:	f000 fe69 	bl	80076b4 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	0018      	movs	r0, r3
 80069e6:	f7fc ffc1 	bl	800396c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 80069ea:	4a06      	ldr	r2, [pc, #24]	@ (8006a04 <Gadget_Init+0x44>)
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <Gadget_Init+0x48>)
 80069ee:	0019      	movs	r1, r3
 80069f0:	2003      	movs	r0, #3
 80069f2:	f004 ff77 	bl	800b8e4 <CreateLine>
}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b004      	add	sp, #16
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			@ (mov r8, r8)
 8006a00:	2000007c 	.word	0x2000007c
 8006a04:	08020140 	.word	0x08020140
 8006a08:	08020154 	.word	0x08020154

08006a0c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  Meas_Test();
 8006a10:	f000 ff88 	bl	8007924 <Meas_Test>
}
 8006a14:	46c0      	nop			@ (mov r8, r8)
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <UpkeepGadget>:

bool UpkeepGadget() {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8006a22:	f001 f93f 	bl	8007ca4 <Meas_Upkeep>
 8006a26:	0003      	movs	r3, r0
 8006a28:	001a      	movs	r2, r3
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <UpkeepGadget+0x4c>)
 8006a2c:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8006a2e:	f001 f81f 	bl	8007a70 <Mic_Upkeep>
 8006a32:	0003      	movs	r3, r0
 8006a34:	001a      	movs	r2, r3
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <UpkeepGadget+0x50>)
 8006a38:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a68 <UpkeepGadget+0x4c>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d103      	bne.n	8006a4a <UpkeepGadget+0x2e>
 8006a42:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <UpkeepGadget+0x50>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d001      	beq.n	8006a4e <UpkeepGadget+0x32>
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	e000      	b.n	8006a50 <UpkeepGadget+0x34>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	1dfb      	adds	r3, r7, #7
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	2101      	movs	r1, #1
 8006a58:	400a      	ands	r2, r1
 8006a5a:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006a5c:	1dfb      	adds	r3, r7, #7
 8006a5e:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006a60:	0018      	movs	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b002      	add	sp, #8
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000d18 	.word	0x20000d18
 8006a6c:	20000d19 	.word	0x20000d19

08006a70 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0011      	movs	r1, r2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f002 fb17 	bl	80090b4 <SGP_Init>
}
 8006a86:	46c0      	nop			@ (mov r8, r8)
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	b002      	add	sp, #8
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006a92:	f002 fb29 	bl	80090e8 <SGP_StartMeasurement>
}
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f002 fb8e 	bl	80091c8 <SGP_GetMeasurementValues>
 8006aac:	0003      	movs	r3, r0
}
 8006aae:	0018      	movs	r0, r3
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b002      	add	sp, #8
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8006aba:	f002 fd9b 	bl	80095f4 <SGP_DeviceConnected>
 8006abe:	0003      	movs	r3, r0
}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b08b      	sub	sp, #44	@ 0x2c
 8006acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ace:	2414      	movs	r4, #20
 8006ad0:	193b      	adds	r3, r7, r4
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	2314      	movs	r3, #20
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	2100      	movs	r1, #0
 8006ada:	f015 fdd1 	bl	801c680 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ade:	4b7c      	ldr	r3, [pc, #496]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006ae4:	2104      	movs	r1, #4
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006aea:	4b79      	ldr	r3, [pc, #484]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aee:	2204      	movs	r2, #4
 8006af0:	4013      	ands	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006af6:	4b76      	ldr	r3, [pc, #472]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afa:	4b75      	ldr	r3, [pc, #468]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006afc:	2180      	movs	r1, #128	@ 0x80
 8006afe:	430a      	orrs	r2, r1
 8006b00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b02:	4b73      	ldr	r3, [pc, #460]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	2280      	movs	r2, #128	@ 0x80
 8006b08:	4013      	ands	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b0e:	4b70      	ldr	r3, [pc, #448]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b12:	4b6f      	ldr	r3, [pc, #444]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b14:	2101      	movs	r1, #1
 8006b16:	430a      	orrs	r2, r1
 8006b18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4013      	ands	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b26:	4b6a      	ldr	r3, [pc, #424]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	4b69      	ldr	r3, [pc, #420]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b32:	4b67      	ldr	r3, [pc, #412]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	2202      	movs	r2, #2
 8006b38:	4013      	ands	r3, r2
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b3e:	4b64      	ldr	r3, [pc, #400]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b42:	4b63      	ldr	r3, [pc, #396]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b44:	2108      	movs	r1, #8
 8006b46:	430a      	orrs	r2, r1
 8006b48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b4a:	4b61      	ldr	r3, [pc, #388]	@ (8006cd0 <MX_GPIO_Init+0x208>)
 8006b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4e:	2208      	movs	r2, #8
 8006b50:	4013      	ands	r3, r2
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006b56:	4b5f      	ldr	r3, [pc, #380]	@ (8006cd4 <MX_GPIO_Init+0x20c>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f006 fcbc 	bl	800d4da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006b62:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd4 <MX_GPIO_Init+0x20c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	2102      	movs	r1, #2
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f006 fcb6 	bl	800d4da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006b6e:	495a      	ldr	r1, [pc, #360]	@ (8006cd8 <MX_GPIO_Init+0x210>)
 8006b70:	4b5a      	ldr	r3, [pc, #360]	@ (8006cdc <MX_GPIO_Init+0x214>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	0018      	movs	r0, r3
 8006b76:	f006 fcb0 	bl	800d4da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006b7a:	2380      	movs	r3, #128	@ 0x80
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	4858      	ldr	r0, [pc, #352]	@ (8006ce0 <MX_GPIO_Init+0x218>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	0019      	movs	r1, r3
 8006b84:	f006 fca9 	bl	800d4da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006b88:	2380      	movs	r3, #128	@ 0x80
 8006b8a:	015b      	lsls	r3, r3, #5
 8006b8c:	4854      	ldr	r0, [pc, #336]	@ (8006ce0 <MX_GPIO_Init+0x218>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	0019      	movs	r1, r3
 8006b92:	f006 fca2 	bl	800d4da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8006b96:	193b      	adds	r3, r7, r4
 8006b98:	4a52      	ldr	r2, [pc, #328]	@ (8006ce4 <MX_GPIO_Init+0x21c>)
 8006b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b9c:	193b      	adds	r3, r7, r4
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba2:	193b      	adds	r3, r7, r4
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ba8:	193b      	adds	r3, r7, r4
 8006baa:	4a4d      	ldr	r2, [pc, #308]	@ (8006ce0 <MX_GPIO_Init+0x218>)
 8006bac:	0019      	movs	r1, r3
 8006bae:	0010      	movs	r0, r2
 8006bb0:	f006 faf8 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006bb4:	193b      	adds	r3, r7, r4
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bba:	193b      	adds	r3, r7, r4
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc0:	193b      	adds	r3, r7, r4
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc6:	193b      	adds	r3, r7, r4
 8006bc8:	2200      	movs	r2, #0
 8006bca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006bcc:	193b      	adds	r3, r7, r4
 8006bce:	4a41      	ldr	r2, [pc, #260]	@ (8006cd4 <MX_GPIO_Init+0x20c>)
 8006bd0:	0019      	movs	r1, r3
 8006bd2:	0010      	movs	r0, r2
 8006bd4:	f006 fae6 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006bd8:	193b      	adds	r3, r7, r4
 8006bda:	2270      	movs	r2, #112	@ 0x70
 8006bdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bde:	193b      	adds	r3, r7, r4
 8006be0:	2203      	movs	r2, #3
 8006be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be4:	193b      	adds	r3, r7, r4
 8006be6:	2200      	movs	r2, #0
 8006be8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bea:	193a      	adds	r2, r7, r4
 8006bec:	23a0      	movs	r3, #160	@ 0xa0
 8006bee:	05db      	lsls	r3, r3, #23
 8006bf0:	0011      	movs	r1, r2
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f006 fad6 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8006bf8:	193b      	adds	r3, r7, r4
 8006bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8006ce8 <MX_GPIO_Init+0x220>)
 8006bfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bfe:	193b      	adds	r3, r7, r4
 8006c00:	2200      	movs	r2, #0
 8006c02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c04:	193b      	adds	r3, r7, r4
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c0a:	193a      	adds	r2, r7, r4
 8006c0c:	23a0      	movs	r3, #160	@ 0xa0
 8006c0e:	05db      	lsls	r3, r3, #23
 8006c10:	0011      	movs	r1, r2
 8006c12:	0018      	movs	r0, r3
 8006c14:	f006 fac6 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8006c18:	193b      	adds	r3, r7, r4
 8006c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8006cd8 <MX_GPIO_Init+0x210>)
 8006c1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c1e:	193b      	adds	r3, r7, r4
 8006c20:	2201      	movs	r2, #1
 8006c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c24:	193b      	adds	r3, r7, r4
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c2a:	193b      	adds	r3, r7, r4
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c30:	193b      	adds	r3, r7, r4
 8006c32:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <MX_GPIO_Init+0x214>)
 8006c34:	0019      	movs	r1, r3
 8006c36:	0010      	movs	r0, r2
 8006c38:	f006 fab4 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8006c3c:	193b      	adds	r3, r7, r4
 8006c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8006cec <MX_GPIO_Init+0x224>)
 8006c40:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c42:	193b      	adds	r3, r7, r4
 8006c44:	2203      	movs	r2, #3
 8006c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c48:	193b      	adds	r3, r7, r4
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c4e:	193b      	adds	r3, r7, r4
 8006c50:	4a22      	ldr	r2, [pc, #136]	@ (8006cdc <MX_GPIO_Init+0x214>)
 8006c52:	0019      	movs	r1, r3
 8006c54:	0010      	movs	r0, r2
 8006c56:	f006 faa5 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006c5a:	0021      	movs	r1, r4
 8006c5c:	187b      	adds	r3, r7, r1
 8006c5e:	2280      	movs	r2, #128	@ 0x80
 8006c60:	0092      	lsls	r2, r2, #2
 8006c62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c64:	000c      	movs	r4, r1
 8006c66:	193b      	adds	r3, r7, r4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c6c:	193b      	adds	r3, r7, r4
 8006c6e:	2200      	movs	r2, #0
 8006c70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006c72:	193b      	adds	r3, r7, r4
 8006c74:	4a1a      	ldr	r2, [pc, #104]	@ (8006ce0 <MX_GPIO_Init+0x218>)
 8006c76:	0019      	movs	r1, r3
 8006c78:	0010      	movs	r0, r2
 8006c7a:	f006 fa93 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006c7e:	0021      	movs	r1, r4
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	22c0      	movs	r2, #192	@ 0xc0
 8006c84:	0152      	lsls	r2, r2, #5
 8006c86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c88:	000c      	movs	r4, r1
 8006c8a:	193b      	adds	r3, r7, r4
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c90:	193b      	adds	r3, r7, r4
 8006c92:	2200      	movs	r2, #0
 8006c94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c96:	193b      	adds	r3, r7, r4
 8006c98:	2200      	movs	r2, #0
 8006c9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c9c:	193b      	adds	r3, r7, r4
 8006c9e:	4a10      	ldr	r2, [pc, #64]	@ (8006ce0 <MX_GPIO_Init+0x218>)
 8006ca0:	0019      	movs	r1, r3
 8006ca2:	0010      	movs	r0, r2
 8006ca4:	f006 fa7e 	bl	800d1a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006ca8:	0021      	movs	r1, r4
 8006caa:	187b      	adds	r3, r7, r1
 8006cac:	2204      	movs	r2, #4
 8006cae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cb0:	187b      	adds	r3, r7, r1
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cb6:	187b      	adds	r3, r7, r1
 8006cb8:	2201      	movs	r2, #1
 8006cba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006cbc:	187b      	adds	r3, r7, r1
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf0 <MX_GPIO_Init+0x228>)
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	0010      	movs	r0, r2
 8006cc4:	f006 fa6e 	bl	800d1a4 <HAL_GPIO_Init>

}
 8006cc8:	46c0      	nop			@ (mov r8, r8)
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b00b      	add	sp, #44	@ 0x2c
 8006cce:	bd90      	pop	{r4, r7, pc}
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	50001c00 	.word	0x50001c00
 8006cd8:	00000301 	.word	0x00000301
 8006cdc:	50000400 	.word	0x50000400
 8006ce0:	50000800 	.word	0x50000800
 8006ce4:	0000200c 	.word	0x0000200c
 8006ce8:	00008180 	.word	0x00008180
 8006cec:	0000403e 	.word	0x0000403e
 8006cf0:	50000c00 	.word	0x50000c00

08006cf4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2100      	movs	r1, #0
 8006d02:	0018      	movs	r0, r3
 8006d04:	f00c f9d0 	bl	80130a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2108      	movs	r1, #8
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f00c f9cb 	bl	80130a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	210c      	movs	r1, #12
 8006d16:	0018      	movs	r0, r3
 8006d18:	f00c f9c6 	bl	80130a8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006d1c:	2380      	movs	r3, #128	@ 0x80
 8006d1e:	05db      	lsls	r3, r3, #23
 8006d20:	22fa      	movs	r2, #250	@ 0xfa
 8006d22:	0112      	lsls	r2, r2, #4
 8006d24:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006d26:	2380      	movs	r3, #128	@ 0x80
 8006d28:	05db      	lsls	r3, r3, #23
 8006d2a:	22fa      	movs	r2, #250	@ 0xfa
 8006d2c:	0112      	lsls	r2, r2, #4
 8006d2e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006d30:	2380      	movs	r3, #128	@ 0x80
 8006d32:	05db      	lsls	r3, r3, #23
 8006d34:	22fa      	movs	r2, #250	@ 0xfa
 8006d36:	0112      	lsls	r2, r2, #4
 8006d38:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006d3a:	2380      	movs	r3, #128	@ 0x80
 8006d3c:	05db      	lsls	r3, r3, #23
 8006d3e:	22fa      	movs	r2, #250	@ 0xfa
 8006d40:	0112      	lsls	r2, r2, #4
 8006d42:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2100      	movs	r1, #0
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f00c f9ad 	bl	80130a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2104      	movs	r1, #4
 8006d52:	0018      	movs	r0, r3
 8006d54:	f00c f9a8 	bl	80130a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2108      	movs	r1, #8
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f00c f9a3 	bl	80130a8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006d62:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <GPIO_InitPWMLEDs+0x98>)
 8006d64:	22fa      	movs	r2, #250	@ 0xfa
 8006d66:	0112      	lsls	r2, r2, #4
 8006d68:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006d6a:	4b08      	ldr	r3, [pc, #32]	@ (8006d8c <GPIO_InitPWMLEDs+0x98>)
 8006d6c:	22fa      	movs	r2, #250	@ 0xfa
 8006d6e:	0112      	lsls	r2, r2, #4
 8006d70:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006d72:	4b06      	ldr	r3, [pc, #24]	@ (8006d8c <GPIO_InitPWMLEDs+0x98>)
 8006d74:	22fa      	movs	r2, #250	@ 0xfa
 8006d76:	0112      	lsls	r2, r2, #4
 8006d78:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006d7a:	4b04      	ldr	r3, [pc, #16]	@ (8006d8c <GPIO_InitPWMLEDs+0x98>)
 8006d7c:	22fa      	movs	r2, #250	@ 0xfa
 8006d7e:	0112      	lsls	r2, r2, #4
 8006d80:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b002      	add	sp, #8
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	40000400 	.word	0x40000400

08006d90 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0011      	movs	r1, r2
 8006da0:	0018      	movs	r0, r3
 8006da2:	f004 feff 	bl	800bba4 <HIDS_Init>
}
 8006da6:	46c0      	nop			@ (mov r8, r8)
 8006da8:	46bd      	mov	sp, r7
 8006daa:	b002      	add	sp, #8
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006dae:	b580      	push	{r7, lr}
 8006db0:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006db2:	f004 ff19 	bl	800bbe8 <HIDS_StartMeasurement>
}
 8006db6:	46c0      	nop			@ (mov r8, r8)
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	0011      	movs	r1, r2
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f004 fff1 	bl	800bdb4 <HIDS_GetMeasurementValues>
 8006dd2:	0003      	movs	r3, r0
}
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b002      	add	sp, #8
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006de0:	f004 ff8c 	bl	800bcfc <HIDS_DeviceConnected>
 8006de4:	0003      	movs	r3, r0
}
 8006de6:	0018      	movs	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006df0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006df2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e64 <MX_I2C1_Init+0x78>)
 8006df4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006df6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006df8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e68 <MX_I2C1_Init+0x7c>)
 8006dfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006dfc:	4b18      	ldr	r3, [pc, #96]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e02:	4b17      	ldr	r3, [pc, #92]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e08:	4b15      	ldr	r3, [pc, #84]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006e0e:	4b14      	ldr	r3, [pc, #80]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e14:	4b12      	ldr	r3, [pc, #72]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e1a:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e20:	4b0f      	ldr	r3, [pc, #60]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e26:	4b0e      	ldr	r3, [pc, #56]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f006 fb73 	bl	800d514 <HAL_I2C_Init>
 8006e2e:	1e03      	subs	r3, r0, #0
 8006e30:	d001      	beq.n	8006e36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006e32:	f000 fbe5 	bl	8007600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e36:	4b0a      	ldr	r3, [pc, #40]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e38:	2100      	movs	r1, #0
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f008 fae2 	bl	800f404 <HAL_I2CEx_ConfigAnalogFilter>
 8006e40:	1e03      	subs	r3, r0, #0
 8006e42:	d001      	beq.n	8006e48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006e44:	f000 fbdc 	bl	8007600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006e48:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <MX_I2C1_Init+0x74>)
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f008 fb25 	bl	800f49c <HAL_I2CEx_ConfigDigitalFilter>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d001      	beq.n	8006e5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006e56:	f000 fbd3 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000d1c 	.word	0x20000d1c
 8006e64:	40005400 	.word	0x40005400
 8006e68:	00503d58 	.word	0x00503d58

08006e6c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e72:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee4 <MX_I2C2_Init+0x78>)
 8006e74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006e76:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e78:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee8 <MX_I2C2_Init+0x7c>)
 8006e7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006e7c:	4b18      	ldr	r3, [pc, #96]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e82:	4b17      	ldr	r3, [pc, #92]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e88:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006e8e:	4b14      	ldr	r3, [pc, #80]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e94:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e9a:	4b11      	ldr	r3, [pc, #68]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f006 fb33 	bl	800d514 <HAL_I2C_Init>
 8006eae:	1e03      	subs	r3, r0, #0
 8006eb0:	d001      	beq.n	8006eb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006eb2:	f000 fba5 	bl	8007600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006eb8:	2100      	movs	r1, #0
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f008 faa2 	bl	800f404 <HAL_I2CEx_ConfigAnalogFilter>
 8006ec0:	1e03      	subs	r3, r0, #0
 8006ec2:	d001      	beq.n	8006ec8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006ec4:	f000 fb9c 	bl	8007600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006ec8:	4b05      	ldr	r3, [pc, #20]	@ (8006ee0 <MX_I2C2_Init+0x74>)
 8006eca:	2100      	movs	r1, #0
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f008 fae5 	bl	800f49c <HAL_I2CEx_ConfigDigitalFilter>
 8006ed2:	1e03      	subs	r3, r0, #0
 8006ed4:	d001      	beq.n	8006eda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006ed6:	f000 fb93 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006eda:	46c0      	nop			@ (mov r8, r8)
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000d70 	.word	0x20000d70
 8006ee4:	40005800 	.word	0x40005800
 8006ee8:	00503d58 	.word	0x00503d58

08006eec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006eec:	b590      	push	{r4, r7, lr}
 8006eee:	b08b      	sub	sp, #44	@ 0x2c
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ef4:	2414      	movs	r4, #20
 8006ef6:	193b      	adds	r3, r7, r4
 8006ef8:	0018      	movs	r0, r3
 8006efa:	2314      	movs	r3, #20
 8006efc:	001a      	movs	r2, r3
 8006efe:	2100      	movs	r1, #0
 8006f00:	f015 fbbe 	bl	801c680 <memset>
  if(i2cHandle->Instance==I2C1)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a5d      	ldr	r2, [pc, #372]	@ (8007080 <HAL_I2C_MspInit+0x194>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d000      	beq.n	8006f10 <HAL_I2C_MspInit+0x24>
 8006f0e:	e083      	b.n	8007018 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f10:	4b5c      	ldr	r3, [pc, #368]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8006f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f14:	4b5b      	ldr	r3, [pc, #364]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8006f16:	2102      	movs	r1, #2
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006f1c:	4b59      	ldr	r3, [pc, #356]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f20:	2202      	movs	r2, #2
 8006f22:	4013      	ands	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f28:	0021      	movs	r1, r4
 8006f2a:	187b      	adds	r3, r7, r1
 8006f2c:	22c0      	movs	r2, #192	@ 0xc0
 8006f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f30:	187b      	adds	r3, r7, r1
 8006f32:	2212      	movs	r2, #18
 8006f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f36:	187b      	adds	r3, r7, r1
 8006f38:	2200      	movs	r2, #0
 8006f3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f3c:	187b      	adds	r3, r7, r1
 8006f3e:	2203      	movs	r2, #3
 8006f40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006f42:	187b      	adds	r3, r7, r1
 8006f44:	2201      	movs	r2, #1
 8006f46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f48:	187b      	adds	r3, r7, r1
 8006f4a:	4a4f      	ldr	r2, [pc, #316]	@ (8007088 <HAL_I2C_MspInit+0x19c>)
 8006f4c:	0019      	movs	r1, r3
 8006f4e:	0010      	movs	r0, r2
 8006f50:	f006 f928 	bl	800d1a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006f54:	4b4b      	ldr	r3, [pc, #300]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8006f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f58:	4b4a      	ldr	r3, [pc, #296]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8006f5a:	2180      	movs	r1, #128	@ 0x80
 8006f5c:	0389      	lsls	r1, r1, #14
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006f62:	4b4a      	ldr	r3, [pc, #296]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f64:	4a4a      	ldr	r2, [pc, #296]	@ (8007090 <HAL_I2C_MspInit+0x1a4>)
 8006f66:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006f68:	4b48      	ldr	r3, [pc, #288]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f6a:	2206      	movs	r2, #6
 8006f6c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f6e:	4b47      	ldr	r3, [pc, #284]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f74:	4b45      	ldr	r3, [pc, #276]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f7a:	4b44      	ldr	r3, [pc, #272]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f7c:	2280      	movs	r2, #128	@ 0x80
 8006f7e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f80:	4b42      	ldr	r3, [pc, #264]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f86:	4b41      	ldr	r3, [pc, #260]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006f8c:	4b3f      	ldr	r3, [pc, #252]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f92:	4b3e      	ldr	r3, [pc, #248]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006f98:	4b3c      	ldr	r3, [pc, #240]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f005 fce6 	bl	800c96c <HAL_DMA_Init>
 8006fa0:	1e03      	subs	r3, r0, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006fa4:	f000 fb2c 	bl	8007600 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a38      	ldr	r2, [pc, #224]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006fac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006fae:	4b37      	ldr	r3, [pc, #220]	@ (800708c <HAL_I2C_MspInit+0x1a0>)
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006fb4:	4b37      	ldr	r3, [pc, #220]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fb6:	4a38      	ldr	r2, [pc, #224]	@ (8007098 <HAL_I2C_MspInit+0x1ac>)
 8006fb8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006fba:	4b36      	ldr	r3, [pc, #216]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fbc:	2206      	movs	r2, #6
 8006fbe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fc0:	4b34      	ldr	r3, [pc, #208]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fc6:	4b33      	ldr	r3, [pc, #204]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fcc:	4b31      	ldr	r3, [pc, #196]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fce:	2280      	movs	r2, #128	@ 0x80
 8006fd0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fd2:	4b30      	ldr	r3, [pc, #192]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006fde:	4b2d      	ldr	r3, [pc, #180]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006fea:	4b2a      	ldr	r3, [pc, #168]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006fec:	0018      	movs	r0, r3
 8006fee:	f005 fcbd 	bl	800c96c <HAL_DMA_Init>
 8006ff2:	1e03      	subs	r3, r0, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006ff6:	f000 fb03 	bl	8007600 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a25      	ldr	r2, [pc, #148]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8006ffe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007000:	4b24      	ldr	r3, [pc, #144]	@ (8007094 <HAL_I2C_MspInit+0x1a8>)
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007006:	2200      	movs	r2, #0
 8007008:	2100      	movs	r1, #0
 800700a:	2017      	movs	r0, #23
 800700c:	f005 fc7c 	bl	800c908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007010:	2017      	movs	r0, #23
 8007012:	f005 fc8e 	bl	800c932 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007016:	e02e      	b.n	8007076 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1f      	ldr	r2, [pc, #124]	@ (800709c <HAL_I2C_MspInit+0x1b0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d129      	bne.n	8007076 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007022:	4b18      	ldr	r3, [pc, #96]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8007024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007026:	4b17      	ldr	r3, [pc, #92]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8007028:	2102      	movs	r1, #2
 800702a:	430a      	orrs	r2, r1
 800702c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800702e:	4b15      	ldr	r3, [pc, #84]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	2202      	movs	r2, #2
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800703a:	2114      	movs	r1, #20
 800703c:	187b      	adds	r3, r7, r1
 800703e:	22c0      	movs	r2, #192	@ 0xc0
 8007040:	0112      	lsls	r2, r2, #4
 8007042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007044:	187b      	adds	r3, r7, r1
 8007046:	2212      	movs	r2, #18
 8007048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704a:	187b      	adds	r3, r7, r1
 800704c:	2200      	movs	r2, #0
 800704e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007050:	187b      	adds	r3, r7, r1
 8007052:	2203      	movs	r2, #3
 8007054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007056:	187b      	adds	r3, r7, r1
 8007058:	2206      	movs	r2, #6
 800705a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800705c:	187b      	adds	r3, r7, r1
 800705e:	4a0a      	ldr	r2, [pc, #40]	@ (8007088 <HAL_I2C_MspInit+0x19c>)
 8007060:	0019      	movs	r1, r3
 8007062:	0010      	movs	r0, r2
 8007064:	f006 f89e 	bl	800d1a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007068:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 800706a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800706c:	4b05      	ldr	r3, [pc, #20]	@ (8007084 <HAL_I2C_MspInit+0x198>)
 800706e:	2180      	movs	r1, #128	@ 0x80
 8007070:	03c9      	lsls	r1, r1, #15
 8007072:	430a      	orrs	r2, r1
 8007074:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	46bd      	mov	sp, r7
 800707a:	b00b      	add	sp, #44	@ 0x2c
 800707c:	bd90      	pop	{r4, r7, pc}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	40005400 	.word	0x40005400
 8007084:	40021000 	.word	0x40021000
 8007088:	50000400 	.word	0x50000400
 800708c:	20000dc4 	.word	0x20000dc4
 8007090:	40020030 	.word	0x40020030
 8007094:	20000e0c 	.word	0x20000e0c
 8007098:	4002001c 	.word	0x4002001c
 800709c:	40005800 	.word	0x40005800

080070a0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80070a4:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070a6:	4a11      	ldr	r2, [pc, #68]	@ (80070ec <MX_I2S2_Init+0x4c>)
 80070a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80070aa:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070ac:	22c0      	movs	r2, #192	@ 0xc0
 80070ae:	0092      	lsls	r2, r2, #2
 80070b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80070b2:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80070b8:	4b0b      	ldr	r3, [pc, #44]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070ba:	2203      	movs	r2, #3
 80070bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80070be:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80070c4:	4b08      	ldr	r3, [pc, #32]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070c6:	22fa      	movs	r2, #250	@ 0xfa
 80070c8:	0192      	lsls	r2, r2, #6
 80070ca:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80070d2:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <MX_I2S2_Init+0x48>)
 80070d4:	0018      	movs	r0, r3
 80070d6:	f008 fa2d 	bl	800f534 <HAL_I2S_Init>
 80070da:	1e03      	subs	r3, r0, #0
 80070dc:	d001      	beq.n	80070e2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80070de:	f000 fa8f 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80070e2:	46c0      	nop			@ (mov r8, r8)
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000e54 	.word	0x20000e54
 80070ec:	40003800 	.word	0x40003800

080070f0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b089      	sub	sp, #36	@ 0x24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070f8:	240c      	movs	r4, #12
 80070fa:	193b      	adds	r3, r7, r4
 80070fc:	0018      	movs	r0, r3
 80070fe:	2314      	movs	r3, #20
 8007100:	001a      	movs	r2, r3
 8007102:	2100      	movs	r1, #0
 8007104:	f015 fabc 	bl	801c680 <memset>
  if(i2sHandle->Instance==SPI2)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2d      	ldr	r2, [pc, #180]	@ (80071c4 <HAL_I2S_MspInit+0xd4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d154      	bne.n	80071bc <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007112:	4b2d      	ldr	r3, [pc, #180]	@ (80071c8 <HAL_I2S_MspInit+0xd8>)
 8007114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007116:	4b2c      	ldr	r3, [pc, #176]	@ (80071c8 <HAL_I2S_MspInit+0xd8>)
 8007118:	2180      	movs	r1, #128	@ 0x80
 800711a:	01c9      	lsls	r1, r1, #7
 800711c:	430a      	orrs	r2, r1
 800711e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007120:	4b29      	ldr	r3, [pc, #164]	@ (80071c8 <HAL_I2S_MspInit+0xd8>)
 8007122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007124:	4b28      	ldr	r3, [pc, #160]	@ (80071c8 <HAL_I2S_MspInit+0xd8>)
 8007126:	2102      	movs	r1, #2
 8007128:	430a      	orrs	r2, r1
 800712a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800712c:	4b26      	ldr	r3, [pc, #152]	@ (80071c8 <HAL_I2S_MspInit+0xd8>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	2202      	movs	r2, #2
 8007132:	4013      	ands	r3, r2
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007138:	193b      	adds	r3, r7, r4
 800713a:	22b0      	movs	r2, #176	@ 0xb0
 800713c:	0212      	lsls	r2, r2, #8
 800713e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007140:	0021      	movs	r1, r4
 8007142:	187b      	adds	r3, r7, r1
 8007144:	2202      	movs	r2, #2
 8007146:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007148:	187b      	adds	r3, r7, r1
 800714a:	2200      	movs	r2, #0
 800714c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800714e:	187b      	adds	r3, r7, r1
 8007150:	2200      	movs	r2, #0
 8007152:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007154:	187b      	adds	r3, r7, r1
 8007156:	2200      	movs	r2, #0
 8007158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800715a:	187b      	adds	r3, r7, r1
 800715c:	4a1b      	ldr	r2, [pc, #108]	@ (80071cc <HAL_I2S_MspInit+0xdc>)
 800715e:	0019      	movs	r1, r3
 8007160:	0010      	movs	r0, r2
 8007162:	f006 f81f 	bl	800d1a4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007166:	4b1a      	ldr	r3, [pc, #104]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 8007168:	4a1a      	ldr	r2, [pc, #104]	@ (80071d4 <HAL_I2S_MspInit+0xe4>)
 800716a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800716c:	4b18      	ldr	r3, [pc, #96]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 800716e:	2202      	movs	r2, #2
 8007170:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007172:	4b17      	ldr	r3, [pc, #92]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 8007174:	2200      	movs	r2, #0
 8007176:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007178:	4b15      	ldr	r3, [pc, #84]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 800717a:	2200      	movs	r2, #0
 800717c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800717e:	4b14      	ldr	r3, [pc, #80]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 8007180:	2280      	movs	r2, #128	@ 0x80
 8007182:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007184:	4b12      	ldr	r3, [pc, #72]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 8007186:	2280      	movs	r2, #128	@ 0x80
 8007188:	0052      	lsls	r2, r2, #1
 800718a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800718c:	4b10      	ldr	r3, [pc, #64]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 800718e:	2280      	movs	r2, #128	@ 0x80
 8007190:	00d2      	lsls	r2, r2, #3
 8007192:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007194:	4b0e      	ldr	r3, [pc, #56]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 8007196:	2220      	movs	r2, #32
 8007198:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 800719c:	2200      	movs	r2, #0
 800719e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80071a0:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 80071a2:	0018      	movs	r0, r3
 80071a4:	f005 fbe2 	bl	800c96c <HAL_DMA_Init>
 80071a8:	1e03      	subs	r3, r0, #0
 80071aa:	d001      	beq.n	80071b0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80071ac:	f000 fa28 	bl	8007600 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a07      	ldr	r2, [pc, #28]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 80071b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80071b6:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <HAL_I2S_MspInit+0xe0>)
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80071bc:	46c0      	nop			@ (mov r8, r8)
 80071be:	46bd      	mov	sp, r7
 80071c0:	b009      	add	sp, #36	@ 0x24
 80071c2:	bd90      	pop	{r4, r7, pc}
 80071c4:	40003800 	.word	0x40003800
 80071c8:	40021000 	.word	0x40021000
 80071cc:	50000400 	.word	0x50000400
 80071d0:	20000e90 	.word	0x20000e90
 80071d4:	40020044 	.word	0x40020044

080071d8 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  testDone = true;
 80071dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007258 <SetTestDone+0x80>)
 80071de:	2201      	movs	r2, #1
 80071e0:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 80071e2:	23fa      	movs	r3, #250	@ 0xfa
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	0018      	movs	r0, r3
 80071e8:	f004 ff22 	bl	800c030 <HAL_Delay>
  SetDBLED(false, false, true);
 80071ec:	2201      	movs	r2, #1
 80071ee:	2100      	movs	r1, #0
 80071f0:	2000      	movs	r0, #0
 80071f2:	f003 fc0d 	bl	800aa10 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80071f6:	4a19      	ldr	r2, [pc, #100]	@ (800725c <SetTestDone+0x84>)
 80071f8:	23fa      	movs	r3, #250	@ 0xfa
 80071fa:	0119      	lsls	r1, r3, #4
 80071fc:	23fa      	movs	r3, #250	@ 0xfa
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	0018      	movs	r0, r3
 8007202:	f003 fbd1 	bl	800a9a8 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007206:	4a15      	ldr	r2, [pc, #84]	@ (800725c <SetTestDone+0x84>)
 8007208:	23fa      	movs	r3, #250	@ 0xfa
 800720a:	0119      	lsls	r1, r3, #4
 800720c:	23fa      	movs	r3, #250	@ 0xfa
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	0018      	movs	r0, r3
 8007212:	f003 fc47 	bl	800aaa4 <SetVocLED>
  HAL_Delay(1000);
 8007216:	23fa      	movs	r3, #250	@ 0xfa
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	0018      	movs	r0, r3
 800721c:	f004 ff08 	bl	800c030 <HAL_Delay>
  SetDBLED(false, false, false);
 8007220:	2200      	movs	r2, #0
 8007222:	2100      	movs	r1, #0
 8007224:	2000      	movs	r0, #0
 8007226:	f003 fbf3 	bl	800aa10 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 800722a:	23fa      	movs	r3, #250	@ 0xfa
 800722c:	011a      	lsls	r2, r3, #4
 800722e:	23fa      	movs	r3, #250	@ 0xfa
 8007230:	0119      	lsls	r1, r3, #4
 8007232:	23fa      	movs	r3, #250	@ 0xfa
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	0018      	movs	r0, r3
 8007238:	f003 fbb6 	bl	800a9a8 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 800723c:	23fa      	movs	r3, #250	@ 0xfa
 800723e:	011a      	lsls	r2, r3, #4
 8007240:	23fa      	movs	r3, #250	@ 0xfa
 8007242:	0119      	lsls	r1, r3, #4
 8007244:	23fa      	movs	r3, #250	@ 0xfa
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	0018      	movs	r0, r3
 800724a:	f003 fc2b 	bl	800aaa4 <SetVocLED>
  InitDone();
 800724e:	f003 fb55 	bl	800a8fc <InitDone>
}
 8007252:	46c0      	nop			@ (mov r8, r8)
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000ed8 	.word	0x20000ed8
 800725c:	00000bb8 	.word	0x00000bb8

08007260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007264:	f004 fe74 	bl	800bf50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007268:	f000 f8f8 	bl	800745c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800726c:	f7ff fc2c 	bl	8006ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 8007270:	f7ff fa76 	bl	8006760 <MX_DMA_Init>
  MX_I2C1_Init();
 8007274:	f7ff fdba 	bl	8006dec <MX_I2C1_Init>
  MX_I2S2_Init();
 8007278:	f7ff ff12 	bl	80070a0 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800727c:	f004 f940 	bl	800b500 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007280:	f7ff fdf4 	bl	8006e6c <MX_I2C2_Init>
  MX_TIM2_Init();
 8007284:	f003 ff34 	bl	800b0f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007288:	f003 ffa6 	bl	800b1d8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800728c:	f004 f96c 	bl	800b568 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007290:	f7ff f9b4 	bl	80065fc <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007294:	f012 f802 	bl	801929c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007298:	f000 ff60 	bl	800815c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800729c:	f004 f8fa 	bl	800b494 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80072a0:	f004 f818 	bl	800b2d4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80072a4:	4a54      	ldr	r2, [pc, #336]	@ (80073f8 <main+0x198>)
 80072a6:	4b55      	ldr	r3, [pc, #340]	@ (80073fc <main+0x19c>)
 80072a8:	0011      	movs	r1, r2
 80072aa:	0018      	movs	r0, r3
 80072ac:	f7ff fd22 	bl	8006cf4 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80072b0:	f7fe fe5a 	bl	8005f68 <UserButton_Pressed>
 80072b4:	1e03      	subs	r3, r0, #0
 80072b6:	d004      	beq.n	80072c2 <main+0x62>
    EnableESPProg();
 80072b8:	f012 f8c0 	bl	801943c <EnableESPProg>
    ESP_Programming = true;
 80072bc:	4b50      	ldr	r3, [pc, #320]	@ (8007400 <main+0x1a0>)
 80072be:	2201      	movs	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 80072c2:	2003      	movs	r0, #3
 80072c4:	f004 fb78 	bl	800b9b8 <SetVerboseLevel>
  BinaryReleaseInfo();
 80072c8:	f004 fb8e 	bl	800b9e8 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80072cc:	494d      	ldr	r1, [pc, #308]	@ (8007404 <main+0x1a4>)
 80072ce:	4b4e      	ldr	r3, [pc, #312]	@ (8007408 <main+0x1a8>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	0018      	movs	r0, r3
 80072d4:	f00c fb48 	bl	8013968 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 80072d8:	4b4c      	ldr	r3, [pc, #304]	@ (800740c <main+0x1ac>)
 80072da:	0018      	movs	r0, r3
 80072dc:	f7ff f980 	bl	80065e0 <InitClock>
  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 80072e0:	4a4b      	ldr	r2, [pc, #300]	@ (8007410 <main+0x1b0>)
 80072e2:	494c      	ldr	r1, [pc, #304]	@ (8007414 <main+0x1b4>)
 80072e4:	484c      	ldr	r0, [pc, #304]	@ (8007418 <main+0x1b8>)
 80072e6:	230b      	movs	r3, #11
 80072e8:	f002 fc7e 	bl	8009be8 <soundInit>
 80072ec:	0003      	movs	r3, r0
 80072ee:	001a      	movs	r2, r3
 80072f0:	2301      	movs	r3, #1
 80072f2:	4053      	eors	r3, r2
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 80072fa:	4a48      	ldr	r2, [pc, #288]	@ (800741c <main+0x1bc>)
 80072fc:	4b48      	ldr	r3, [pc, #288]	@ (8007420 <main+0x1c0>)
 80072fe:	21d7      	movs	r1, #215	@ 0xd7
 8007300:	0018      	movs	r0, r3
 8007302:	f004 fba3 	bl	800ba4c <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8007306:	4b47      	ldr	r3, [pc, #284]	@ (8007424 <main+0x1c4>)
 8007308:	4a47      	ldr	r2, [pc, #284]	@ (8007428 <main+0x1c8>)
 800730a:	4942      	ldr	r1, [pc, #264]	@ (8007414 <main+0x1b4>)
 800730c:	4847      	ldr	r0, [pc, #284]	@ (800742c <main+0x1cc>)
 800730e:	f7ff fb57 	bl	80069c0 <Gadget_Init>
  setiMinute();
 8007312:	f7fe fe8f 	bl	8006034 <setiMinute>
  Debug("Clock init done");
 8007316:	4a46      	ldr	r2, [pc, #280]	@ (8007430 <main+0x1d0>)
 8007318:	4b46      	ldr	r3, [pc, #280]	@ (8007434 <main+0x1d4>)
 800731a:	0019      	movs	r1, r3
 800731c:	2003      	movs	r0, #3
 800731e:	f004 fae1 	bl	800b8e4 <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007322:	4b45      	ldr	r3, [pc, #276]	@ (8007438 <main+0x1d8>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d019      	beq.n	800735e <main+0xfe>
 800732a:	4b35      	ldr	r3, [pc, #212]	@ (8007400 <main+0x1a0>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2201      	movs	r2, #1
 8007330:	4053      	eors	r3, r2
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <main+0xfe>
 8007338:	4b40      	ldr	r3, [pc, #256]	@ (800743c <main+0x1dc>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	4053      	eors	r3, r2
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <main+0xfe>
      MeasurementBusy = UpkeepGadget();
 8007346:	f7ff fb69 	bl	8006a1c <UpkeepGadget>
 800734a:	0003      	movs	r3, r0
 800734c:	001a      	movs	r2, r3
 800734e:	4b3c      	ldr	r3, [pc, #240]	@ (8007440 <main+0x1e0>)
 8007350:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007352:	f7fd feb7 	bl	80050c4 <ESP_Upkeep>
 8007356:	0003      	movs	r3, r0
 8007358:	001a      	movs	r2, r3
 800735a:	4b3a      	ldr	r3, [pc, #232]	@ (8007444 <main+0x1e4>)
 800735c:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800735e:	4b36      	ldr	r3, [pc, #216]	@ (8007438 <main+0x1d8>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2201      	movs	r2, #1
 8007364:	4053      	eors	r3, r2
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00f      	beq.n	800738c <main+0x12c>
 800736c:	4b24      	ldr	r3, [pc, #144]	@ (8007400 <main+0x1a0>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2201      	movs	r2, #1
 8007372:	4053      	eors	r3, r2
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <main+0x12c>
 800737a:	4b30      	ldr	r3, [pc, #192]	@ (800743c <main+0x1dc>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2201      	movs	r2, #1
 8007380:	4053      	eors	r3, r2
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <main+0x12c>
      Gadget_Test();
 8007388:	f7ff fb40 	bl	8006a0c <Gadget_Test>
    }
    Status_Upkeep();
 800738c:	f003 fd5a 	bl	800ae44 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8007390:	4b2d      	ldr	r3, [pc, #180]	@ (8007448 <main+0x1e8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	0018      	movs	r0, r3
 8007396:	f004 fa4f 	bl	800b838 <TimestampIsReached>
 800739a:	1e03      	subs	r3, r0, #0
 800739c:	d00c      	beq.n	80073b8 <main+0x158>
      charge = Battery_Upkeep();
 800739e:	f003 fd58 	bl	800ae52 <Battery_Upkeep>
 80073a2:	0003      	movs	r3, r0
 80073a4:	001a      	movs	r2, r3
 80073a6:	4b29      	ldr	r3, [pc, #164]	@ (800744c <main+0x1ec>)
 80073a8:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 80073aa:	f004 fe37 	bl	800c01c <HAL_GetTick>
 80073ae:	0003      	movs	r3, r0
 80073b0:	4a27      	ldr	r2, [pc, #156]	@ (8007450 <main+0x1f0>)
 80073b2:	189a      	adds	r2, r3, r2
 80073b4:	4b24      	ldr	r3, [pc, #144]	@ (8007448 <main+0x1e8>)
 80073b6:	601a      	str	r2, [r3, #0]
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 80073b8:	4b24      	ldr	r3, [pc, #144]	@ (800744c <main+0x1ec>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d107      	bne.n	80073d0 <main+0x170>
 80073c0:	4b20      	ldr	r3, [pc, #128]	@ (8007444 <main+0x1e4>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d103      	bne.n	80073d0 <main+0x170>
      batteryEmpty = true;
 80073c8:	4b1c      	ldr	r3, [pc, #112]	@ (800743c <main+0x1dc>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <main+0x176>
    }
    else{
      batteryEmpty = false;
 80073d0:	4b1a      	ldr	r3, [pc, #104]	@ (800743c <main+0x1dc>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
    }
    if(charge == BATTERY_FULL){

    }

    if(TimestampIsReached(timeReadTimer)){
 80073d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007454 <main+0x1f4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	0018      	movs	r0, r3
 80073dc:	f004 fa2c 	bl	800b838 <TimestampIsReached>
 80073e0:	1e03      	subs	r3, r0, #0
 80073e2:	d09e      	beq.n	8007322 <main+0xc2>
      UpdateSystemUptime();
 80073e4:	f7fe fe5a 	bl	800609c <UpdateSystemUptime>
      timeReadTimer  = HAL_GetTick() + 30000;
 80073e8:	f004 fe18 	bl	800c01c <HAL_GetTick>
 80073ec:	0003      	movs	r3, r0
 80073ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007458 <main+0x1f8>)
 80073f0:	189a      	adds	r2, r3, r2
 80073f2:	4b18      	ldr	r3, [pc, #96]	@ (8007454 <main+0x1f4>)
 80073f4:	601a      	str	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 80073f6:	e794      	b.n	8007322 <main+0xc2>
 80073f8:	20002168 	.word	0x20002168
 80073fc:	20002128 	.word	0x20002128
 8007400:	20000ed9 	.word	0x20000ed9
 8007404:	20000ee8 	.word	0x20000ee8
 8007408:	200022a0 	.word	0x200022a0
 800740c:	20001198 	.word	0x20001198
 8007410:	200021a8 	.word	0x200021a8
 8007414:	20000e54 	.word	0x20000e54
 8007418:	20000e90 	.word	0x20000e90
 800741c:	08020158 	.word	0x08020158
 8007420:	08020acc 	.word	0x08020acc
 8007424:	20000cbc 	.word	0x20000cbc
 8007428:	20002358 	.word	0x20002358
 800742c:	20000d1c 	.word	0x20000d1c
 8007430:	0802016c 	.word	0x0802016c
 8007434:	0802017c 	.word	0x0802017c
 8007438:	20000ed8 	.word	0x20000ed8
 800743c:	20000eda 	.word	0x20000eda
 8007440:	20000edb 	.word	0x20000edb
 8007444:	20000ee5 	.word	0x20000ee5
 8007448:	20000edc 	.word	0x20000edc
 800744c:	20000ee4 	.word	0x20000ee4
 8007450:	0000ea60 	.word	0x0000ea60
 8007454:	20000ee0 	.word	0x20000ee0
 8007458:	00007530 	.word	0x00007530

0800745c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b09d      	sub	sp, #116	@ 0x74
 8007460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007462:	2438      	movs	r4, #56	@ 0x38
 8007464:	193b      	adds	r3, r7, r4
 8007466:	0018      	movs	r0, r3
 8007468:	2338      	movs	r3, #56	@ 0x38
 800746a:	001a      	movs	r2, r3
 800746c:	2100      	movs	r1, #0
 800746e:	f015 f907 	bl	801c680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007472:	2324      	movs	r3, #36	@ 0x24
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	0018      	movs	r0, r3
 8007478:	2314      	movs	r3, #20
 800747a:	001a      	movs	r2, r3
 800747c:	2100      	movs	r1, #0
 800747e:	f015 f8ff 	bl	801c680 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007482:	003b      	movs	r3, r7
 8007484:	0018      	movs	r0, r3
 8007486:	2324      	movs	r3, #36	@ 0x24
 8007488:	001a      	movs	r2, r3
 800748a:	2100      	movs	r1, #0
 800748c:	f015 f8f8 	bl	801c680 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007490:	4b34      	ldr	r3, [pc, #208]	@ (8007564 <SystemClock_Config+0x108>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a34      	ldr	r2, [pc, #208]	@ (8007568 <SystemClock_Config+0x10c>)
 8007496:	401a      	ands	r2, r3
 8007498:	4b32      	ldr	r3, [pc, #200]	@ (8007564 <SystemClock_Config+0x108>)
 800749a:	2180      	movs	r1, #128	@ 0x80
 800749c:	0109      	lsls	r1, r1, #4
 800749e:	430a      	orrs	r2, r1
 80074a0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80074a2:	f00a f9ab 	bl	80117fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80074a6:	4b31      	ldr	r3, [pc, #196]	@ (800756c <SystemClock_Config+0x110>)
 80074a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007568 <SystemClock_Config+0x10c>)
 80074ac:	401a      	ands	r2, r3
 80074ae:	4b2f      	ldr	r3, [pc, #188]	@ (800756c <SystemClock_Config+0x110>)
 80074b0:	2180      	movs	r1, #128	@ 0x80
 80074b2:	0149      	lsls	r1, r1, #5
 80074b4:	430a      	orrs	r2, r1
 80074b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80074b8:	193b      	adds	r3, r7, r4
 80074ba:	2226      	movs	r2, #38	@ 0x26
 80074bc:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80074be:	193b      	adds	r3, r7, r4
 80074c0:	2280      	movs	r2, #128	@ 0x80
 80074c2:	0052      	lsls	r2, r2, #1
 80074c4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80074c6:	0021      	movs	r1, r4
 80074c8:	187b      	adds	r3, r7, r1
 80074ca:	2201      	movs	r2, #1
 80074cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80074ce:	187b      	adds	r3, r7, r1
 80074d0:	2210      	movs	r2, #16
 80074d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80074d4:	187b      	adds	r3, r7, r1
 80074d6:	2201      	movs	r2, #1
 80074d8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80074da:	187b      	adds	r3, r7, r1
 80074dc:	2200      	movs	r2, #0
 80074de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80074e0:	187b      	adds	r3, r7, r1
 80074e2:	0018      	movs	r0, r3
 80074e4:	f00a f998 	bl	8011818 <HAL_RCC_OscConfig>
 80074e8:	1e03      	subs	r3, r0, #0
 80074ea:	d001      	beq.n	80074f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80074ec:	f000 f888 	bl	8007600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80074f0:	2124      	movs	r1, #36	@ 0x24
 80074f2:	187b      	adds	r3, r7, r1
 80074f4:	220f      	movs	r2, #15
 80074f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	2201      	movs	r2, #1
 80074fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	2200      	movs	r2, #0
 8007502:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007504:	187b      	adds	r3, r7, r1
 8007506:	2200      	movs	r2, #0
 8007508:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800750a:	187b      	adds	r3, r7, r1
 800750c:	2200      	movs	r2, #0
 800750e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007510:	187b      	adds	r3, r7, r1
 8007512:	2100      	movs	r1, #0
 8007514:	0018      	movs	r0, r3
 8007516:	f00a fd53 	bl	8011fc0 <HAL_RCC_ClockConfig>
 800751a:	1e03      	subs	r3, r0, #0
 800751c:	d001      	beq.n	8007522 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800751e:	f000 f86f 	bl	8007600 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007522:	003b      	movs	r3, r7
 8007524:	226d      	movs	r2, #109	@ 0x6d
 8007526:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007528:	003b      	movs	r3, r7
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800752e:	003b      	movs	r3, r7
 8007530:	2200      	movs	r2, #0
 8007532:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007534:	003b      	movs	r3, r7
 8007536:	2200      	movs	r2, #0
 8007538:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800753a:	003b      	movs	r3, r7
 800753c:	2280      	movs	r2, #128	@ 0x80
 800753e:	0252      	lsls	r2, r2, #9
 8007540:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007542:	003b      	movs	r3, r7
 8007544:	2280      	movs	r2, #128	@ 0x80
 8007546:	04d2      	lsls	r2, r2, #19
 8007548:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800754a:	003b      	movs	r3, r7
 800754c:	0018      	movs	r0, r3
 800754e:	f00a ff5b 	bl	8012408 <HAL_RCCEx_PeriphCLKConfig>
 8007552:	1e03      	subs	r3, r0, #0
 8007554:	d001      	beq.n	800755a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8007556:	f000 f853 	bl	8007600 <Error_Handler>
  }
}
 800755a:	46c0      	nop			@ (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	b01d      	add	sp, #116	@ 0x74
 8007560:	bd90      	pop	{r4, r7, pc}
 8007562:	46c0      	nop			@ (mov r8, r8)
 8007564:	40007000 	.word	0x40007000
 8007568:	ffffe7ff 	.word	0xffffe7ff
 800756c:	40021000 	.word	0x40021000

08007570 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	000a      	movs	r2, r1
 800757a:	1cbb      	adds	r3, r7, #2
 800757c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 800757e:	4c06      	ldr	r4, [pc, #24]	@ (8007598 <printString+0x28>)
 8007580:	1cbb      	adds	r3, r7, #2
 8007582:	881a      	ldrh	r2, [r3, #0]
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	4805      	ldr	r0, [pc, #20]	@ (800759c <printString+0x2c>)
 8007588:	0023      	movs	r3, r4
 800758a:	f00c f94d 	bl	8013828 <HAL_UART_Transmit>
}
 800758e:	46c0      	nop			@ (mov r8, r8)
 8007590:	46bd      	mov	sp, r7
 8007592:	b003      	add	sp, #12
 8007594:	bd90      	pop	{r4, r7, pc}
 8007596:	46c0      	nop			@ (mov r8, r8)
 8007598:	0000ffff 	.word	0x0000ffff
 800759c:	200022a0 	.word	0x200022a0

080075a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80075a8:	4911      	ldr	r1, [pc, #68]	@ (80075f0 <HAL_UART_RxCpltCallback+0x50>)
 80075aa:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <HAL_UART_RxCpltCallback+0x54>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	0018      	movs	r0, r3
 80075b0:	f00c f9da 	bl	8013968 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 80075b4:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <HAL_UART_RxCpltCallback+0x50>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80075ba:	d002      	beq.n	80075c2 <HAL_UART_RxCpltCallback+0x22>
 80075bc:	2b74      	cmp	r3, #116	@ 0x74
 80075be:	d003      	beq.n	80075c8 <HAL_UART_RxCpltCallback+0x28>
 80075c0:	e005      	b.n	80075ce <HAL_UART_RxCpltCallback+0x2e>

  case (uint8_t)'?':
    showTime();
 80075c2:	f7fe fce1 	bl	8005f88 <showTime>
    break;
 80075c6:	e009      	b.n	80075dc <HAL_UART_RxCpltCallback+0x3c>
  case (uint8_t)'t':
    forceNTPupdate();
 80075c8:	f7fc f8e8 	bl	800379c <forceNTPupdate>
  break;
 80075cc:	e006      	b.n	80075dc <HAL_UART_RxCpltCallback+0x3c>
  default:
     Error("Error unknown request from Serial UART1\r\n");
 80075ce:	4a0a      	ldr	r2, [pc, #40]	@ (80075f8 <HAL_UART_RxCpltCallback+0x58>)
 80075d0:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <HAL_UART_RxCpltCallback+0x5c>)
 80075d2:	0019      	movs	r1, r3
 80075d4:	2001      	movs	r0, #1
 80075d6:	f004 f985 	bl	800b8e4 <CreateLine>
  break;
 80075da:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80075dc:	4904      	ldr	r1, [pc, #16]	@ (80075f0 <HAL_UART_RxCpltCallback+0x50>)
 80075de:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <HAL_UART_RxCpltCallback+0x54>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	0018      	movs	r0, r3
 80075e4:	f00c f9c0 	bl	8013968 <HAL_UART_Receive_IT>
}
 80075e8:	46c0      	nop			@ (mov r8, r8)
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b002      	add	sp, #8
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000ee8 	.word	0x20000ee8
 80075f4:	200022a0 	.word	0x200022a0
 80075f8:	08020180 	.word	0x08020180
 80075fc:	080201ac 	.word	0x080201ac

08007600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007604:	b672      	cpsid	i
}
 8007606:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007608:	46c0      	nop			@ (mov r8, r8)
 800760a:	e7fd      	b.n	8007608 <Error_Handler+0x8>

0800760c <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007610:	f7ff fbcd 	bl	8006dae <HT_StartMeasurement>
}
 8007614:	46c0      	nop			@ (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007620:	4a04      	ldr	r2, [pc, #16]	@ (8007634 <HT_IsMeasurementDoneWrapper+0x18>)
 8007622:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HT_IsMeasurementDoneWrapper+0x1c>)
 8007624:	0011      	movs	r1, r2
 8007626:	0018      	movs	r0, r3
 8007628:	f7ff fbc8 	bl	8006dbc <HT_GetMeasurementValues>
 800762c:	0003      	movs	r3, r0
}
 800762e:	0018      	movs	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000efc 	.word	0x20000efc
 8007638:	20000ef8 	.word	0x20000ef8

0800763c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007640:	f7ff fa25 	bl	8006a8e <Gas_StartMeasurement>
}
 8007644:	46c0      	nop			@ (mov r8, r8)
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8007650:	4b03      	ldr	r3, [pc, #12]	@ (8007660 <VOC_IsMeasurementDoneWrapper+0x14>)
 8007652:	0018      	movs	r0, r3
 8007654:	f7ff fa22 	bl	8006a9c <Gas_GetMeasurementValues>
 8007658:	0003      	movs	r3, r0
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20000f00 	.word	0x20000f00

08007664 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
}
 8007668:	46c0      	nop			@ (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800766e:	b580      	push	{r7, lr}
 8007670:	af00      	add	r7, sp, #0
  return true;
 8007672:	2301      	movs	r3, #1
}
 8007674:	0018      	movs	r0, r3
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 800767a:	b580      	push	{r7, lr}
 800767c:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 800767e:	f000 fd1b 	bl	80080b8 <MIC_TestMeasurementDone>
 8007682:	0003      	movs	r3, r0
}
 8007684:	0018      	movs	r0, r3
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <testInit>:

void testInit(){
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8007690:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <testInit+0x24>)
 8007692:	2200      	movs	r2, #0
 8007694:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007696:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <testInit+0x24>)
 8007698:	2200      	movs	r2, #0
 800769a:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 800769c:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <testInit+0x24>)
 800769e:	2200      	movs	r2, #0
 80076a0:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80076a2:	4b03      	ldr	r3, [pc, #12]	@ (80076b0 <testInit+0x24>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	705a      	strb	r2, [r3, #1]
}
 80076a8:	46c0      	nop			@ (mov r8, r8)
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	20000f3c 	.word	0x20000f3c

080076b4 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b092      	sub	sp, #72	@ 0x48
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 80076c0:	f7ff ffe4 	bl	800768c <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80076c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007880 <Meas_Init+0x1cc>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <Meas_Init+0x20>
 80076cc:	4b6c      	ldr	r3, [pc, #432]	@ (8007880 <Meas_Init+0x1cc>)
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d068      	beq.n	80077a6 <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0018      	movs	r0, r3
 80076d8:	f7fe f8dc 	bl	8005894 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80076dc:	f7ff fb7e 	bl	8006ddc <HT_DeviceConnected>
 80076e0:	0003      	movs	r3, r0
 80076e2:	001a      	movs	r2, r3
 80076e4:	2301      	movs	r3, #1
 80076e6:	4053      	eors	r3, r2
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 80076ee:	4a65      	ldr	r2, [pc, #404]	@ (8007884 <Meas_Init+0x1d0>)
 80076f0:	4b65      	ldr	r3, [pc, #404]	@ (8007888 <Meas_Init+0x1d4>)
 80076f2:	0019      	movs	r1, r3
 80076f4:	2001      	movs	r0, #1
 80076f6:	f004 f8f5 	bl	800b8e4 <CreateLine>
       MeasTest.HT_Tested = false;
 80076fa:	4b64      	ldr	r3, [pc, #400]	@ (800788c <Meas_Init+0x1d8>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8007700:	4b5f      	ldr	r3, [pc, #380]	@ (8007880 <Meas_Init+0x1cc>)
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
 8007706:	e008      	b.n	800771a <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8007708:	4b60      	ldr	r3, [pc, #384]	@ (800788c <Meas_Init+0x1d8>)
 800770a:	2201      	movs	r2, #1
 800770c:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 800770e:	4a60      	ldr	r2, [pc, #384]	@ (8007890 <Meas_Init+0x1dc>)
 8007710:	4b60      	ldr	r3, [pc, #384]	@ (8007894 <Meas_Init+0x1e0>)
 8007712:	0019      	movs	r1, r3
 8007714:	2003      	movs	r0, #3
 8007716:	f004 f8e5 	bl	800b8e4 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 800771a:	f7ff f9cc 	bl	8006ab6 <Gas_DeviceConnected>
 800771e:	0003      	movs	r3, r0
 8007720:	001a      	movs	r2, r3
 8007722:	2301      	movs	r3, #1
 8007724:	4053      	eors	r3, r2
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00c      	beq.n	8007746 <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 800772c:	4b57      	ldr	r3, [pc, #348]	@ (800788c <Meas_Init+0x1d8>)
 800772e:	2200      	movs	r2, #0
 8007730:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8007732:	4a59      	ldr	r2, [pc, #356]	@ (8007898 <Meas_Init+0x1e4>)
 8007734:	4b54      	ldr	r3, [pc, #336]	@ (8007888 <Meas_Init+0x1d4>)
 8007736:	0019      	movs	r1, r3
 8007738:	2001      	movs	r0, #1
 800773a:	f004 f8d3 	bl	800b8e4 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 800773e:	4b50      	ldr	r3, [pc, #320]	@ (8007880 <Meas_Init+0x1cc>)
 8007740:	2200      	movs	r2, #0
 8007742:	705a      	strb	r2, [r3, #1]
 8007744:	e008      	b.n	8007758 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8007746:	4b51      	ldr	r3, [pc, #324]	@ (800788c <Meas_Init+0x1d8>)
 8007748:	2201      	movs	r2, #1
 800774a:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 800774c:	4a53      	ldr	r2, [pc, #332]	@ (800789c <Meas_Init+0x1e8>)
 800774e:	4b51      	ldr	r3, [pc, #324]	@ (8007894 <Meas_Init+0x1e0>)
 8007750:	0019      	movs	r1, r3
 8007752:	2003      	movs	r0, #3
 8007754:	f004 f8c6 	bl	800b8e4 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8007758:	4b4c      	ldr	r3, [pc, #304]	@ (800788c <Meas_Init+0x1d8>)
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <Meas_Init+0xc0>
 8007760:	4b4a      	ldr	r3, [pc, #296]	@ (800788c <Meas_Init+0x1d8>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8007768:	2200      	movs	r2, #0
 800776a:	2101      	movs	r1, #1
 800776c:	2000      	movs	r0, #0
 800776e:	f003 f94f 	bl	800aa10 <SetDBLED>
 8007772:	e018      	b.n	80077a6 <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8007774:	2200      	movs	r2, #0
 8007776:	2100      	movs	r1, #0
 8007778:	2001      	movs	r0, #1
 800777a:	f003 f949 	bl	800aa10 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800777e:	4b48      	ldr	r3, [pc, #288]	@ (80078a0 <Meas_Init+0x1ec>)
 8007780:	2200      	movs	r2, #0
 8007782:	2101      	movs	r1, #1
 8007784:	0018      	movs	r0, r3
 8007786:	f005 fea8 	bl	800d4da <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800778a:	2380      	movs	r3, #128	@ 0x80
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4844      	ldr	r0, [pc, #272]	@ (80078a0 <Meas_Init+0x1ec>)
 8007790:	2201      	movs	r2, #1
 8007792:	0019      	movs	r1, r3
 8007794:	f005 fea1 	bl	800d4da <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007798:	2380      	movs	r3, #128	@ 0x80
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4840      	ldr	r0, [pc, #256]	@ (80078a0 <Meas_Init+0x1ec>)
 800779e:	2201      	movs	r2, #1
 80077a0:	0019      	movs	r1, r3
 80077a2:	f005 fe9a 	bl	800d4da <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80077a6:	4b36      	ldr	r3, [pc, #216]	@ (8007880 <Meas_Init+0x1cc>)
 80077a8:	78db      	ldrb	r3, [r3, #3]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d008      	beq.n	80077c0 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 80077ae:	4a3d      	ldr	r2, [pc, #244]	@ (80078a4 <Meas_Init+0x1f0>)
 80077b0:	4b3d      	ldr	r3, [pc, #244]	@ (80078a8 <Meas_Init+0x1f4>)
 80077b2:	0019      	movs	r1, r3
 80077b4:	2002      	movs	r0, #2
 80077b6:	f004 f895 	bl	800b8e4 <CreateLine>
          enableMicrophone(true);
 80077ba:	2001      	movs	r0, #1
 80077bc:	f002 fa7c 	bl	8009cb8 <enableMicrophone>

  }
  uint8_t offset = 0;
 80077c0:	2547      	movs	r5, #71	@ 0x47
 80077c2:	197b      	adds	r3, r7, r5
 80077c4:	2200      	movs	r2, #0
 80077c6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80077c8:	197b      	adds	r3, r7, r5
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	197a      	adds	r2, r7, r5
 80077ce:	1c59      	adds	r1, r3, #1
 80077d0:	7011      	strb	r1, [r2, #0]
 80077d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007880 <Meas_Init+0x1cc>)
 80077d4:	7814      	ldrb	r4, [r2, #0]
 80077d6:	4a35      	ldr	r2, [pc, #212]	@ (80078ac <Meas_Init+0x1f8>)
 80077d8:	0119      	lsls	r1, r3, #4
 80077da:	4835      	ldr	r0, [pc, #212]	@ (80078b0 <Meas_Init+0x1fc>)
 80077dc:	5088      	str	r0, [r1, r2]
 80077de:	4933      	ldr	r1, [pc, #204]	@ (80078ac <Meas_Init+0x1f8>)
 80077e0:	011a      	lsls	r2, r3, #4
 80077e2:	188a      	adds	r2, r1, r2
 80077e4:	3204      	adds	r2, #4
 80077e6:	4933      	ldr	r1, [pc, #204]	@ (80078b4 <Meas_Init+0x200>)
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	4930      	ldr	r1, [pc, #192]	@ (80078ac <Meas_Init+0x1f8>)
 80077ec:	011a      	lsls	r2, r3, #4
 80077ee:	188a      	adds	r2, r1, r2
 80077f0:	3208      	adds	r2, #8
 80077f2:	4931      	ldr	r1, [pc, #196]	@ (80078b8 <Meas_Init+0x204>)
 80077f4:	6011      	str	r1, [r2, #0]
 80077f6:	4a2d      	ldr	r2, [pc, #180]	@ (80078ac <Meas_Init+0x1f8>)
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	18d3      	adds	r3, r2, r3
 80077fc:	330c      	adds	r3, #12
 80077fe:	1c22      	adds	r2, r4, #0
 8007800:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8007802:	197b      	adds	r3, r7, r5
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	197a      	adds	r2, r7, r5
 8007808:	1c59      	adds	r1, r3, #1
 800780a:	7011      	strb	r1, [r2, #0]
 800780c:	4a1c      	ldr	r2, [pc, #112]	@ (8007880 <Meas_Init+0x1cc>)
 800780e:	7854      	ldrb	r4, [r2, #1]
 8007810:	4a26      	ldr	r2, [pc, #152]	@ (80078ac <Meas_Init+0x1f8>)
 8007812:	0119      	lsls	r1, r3, #4
 8007814:	4829      	ldr	r0, [pc, #164]	@ (80078bc <Meas_Init+0x208>)
 8007816:	5088      	str	r0, [r1, r2]
 8007818:	4924      	ldr	r1, [pc, #144]	@ (80078ac <Meas_Init+0x1f8>)
 800781a:	011a      	lsls	r2, r3, #4
 800781c:	188a      	adds	r2, r1, r2
 800781e:	3204      	adds	r2, #4
 8007820:	4927      	ldr	r1, [pc, #156]	@ (80078c0 <Meas_Init+0x20c>)
 8007822:	6011      	str	r1, [r2, #0]
 8007824:	4921      	ldr	r1, [pc, #132]	@ (80078ac <Meas_Init+0x1f8>)
 8007826:	011a      	lsls	r2, r3, #4
 8007828:	188a      	adds	r2, r1, r2
 800782a:	3208      	adds	r2, #8
 800782c:	4925      	ldr	r1, [pc, #148]	@ (80078c4 <Meas_Init+0x210>)
 800782e:	6011      	str	r1, [r2, #0]
 8007830:	4a1e      	ldr	r2, [pc, #120]	@ (80078ac <Meas_Init+0x1f8>)
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	18d3      	adds	r3, r2, r3
 8007836:	330c      	adds	r3, #12
 8007838:	1c22      	adds	r2, r4, #0
 800783a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 800783c:	197b      	adds	r3, r7, r5
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	197a      	adds	r2, r7, r5
 8007842:	1c59      	adds	r1, r3, #1
 8007844:	7011      	strb	r1, [r2, #0]
 8007846:	4a0e      	ldr	r2, [pc, #56]	@ (8007880 <Meas_Init+0x1cc>)
 8007848:	7894      	ldrb	r4, [r2, #2]
 800784a:	4a18      	ldr	r2, [pc, #96]	@ (80078ac <Meas_Init+0x1f8>)
 800784c:	0119      	lsls	r1, r3, #4
 800784e:	481e      	ldr	r0, [pc, #120]	@ (80078c8 <Meas_Init+0x214>)
 8007850:	5088      	str	r0, [r1, r2]
 8007852:	4916      	ldr	r1, [pc, #88]	@ (80078ac <Meas_Init+0x1f8>)
 8007854:	011a      	lsls	r2, r3, #4
 8007856:	188a      	adds	r2, r1, r2
 8007858:	3204      	adds	r2, #4
 800785a:	491c      	ldr	r1, [pc, #112]	@ (80078cc <Meas_Init+0x218>)
 800785c:	6011      	str	r1, [r2, #0]
 800785e:	4913      	ldr	r1, [pc, #76]	@ (80078ac <Meas_Init+0x1f8>)
 8007860:	011a      	lsls	r2, r3, #4
 8007862:	188a      	adds	r2, r1, r2
 8007864:	3208      	adds	r2, #8
 8007866:	491a      	ldr	r1, [pc, #104]	@ (80078d0 <Meas_Init+0x21c>)
 8007868:	6011      	str	r1, [r2, #0]
 800786a:	4a10      	ldr	r2, [pc, #64]	@ (80078ac <Meas_Init+0x1f8>)
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	18d3      	adds	r3, r2, r3
 8007870:	330c      	adds	r3, #12
 8007872:	1c22      	adds	r2, r4, #0
 8007874:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	46bd      	mov	sp, r7
 800787a:	b012      	add	sp, #72	@ 0x48
 800787c:	bdb0      	pop	{r4, r5, r7, pc}
 800787e:	46c0      	nop			@ (mov r8, r8)
 8007880:	20000f38 	.word	0x20000f38
 8007884:	080201b0 	.word	0x080201b0
 8007888:	080201e0 	.word	0x080201e0
 800788c:	20000f3c 	.word	0x20000f3c
 8007890:	080201e4 	.word	0x080201e4
 8007894:	08020210 	.word	0x08020210
 8007898:	08020214 	.word	0x08020214
 800789c:	08020230 	.word	0x08020230
 80078a0:	50000400 	.word	0x50000400
 80078a4:	08020248 	.word	0x08020248
 80078a8:	0802026c 	.word	0x0802026c
 80078ac:	20000f08 	.word	0x20000f08
 80078b0:	0800760d 	.word	0x0800760d
 80078b4:	0800761d 	.word	0x0800761d
 80078b8:	20000f04 	.word	0x20000f04
 80078bc:	0800763d 	.word	0x0800763d
 80078c0:	0800764d 	.word	0x0800764d
 80078c4:	20000f05 	.word	0x20000f05
 80078c8:	08007665 	.word	0x08007665
 80078cc:	0800766f 	.word	0x0800766f
 80078d0:	20000f06 	.word	0x20000f06

080078d4 <StartMeasurements>:

void StartMeasurements(void) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80078d8:	4b10      	ldr	r3, [pc, #64]	@ (800791c <StartMeasurements+0x48>)
 80078da:	2200      	movs	r2, #0
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e015      	b.n	800790c <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80078e0:	4b0e      	ldr	r3, [pc, #56]	@ (800791c <StartMeasurements+0x48>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007920 <StartMeasurements+0x4c>)
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	18d3      	adds	r3, r2, r3
 80078ea:	330c      	adds	r3, #12
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d006      	beq.n	8007900 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80078f2:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <StartMeasurements+0x48>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	001a      	movs	r2, r3
 80078f8:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <StartMeasurements+0x4c>)
 80078fa:	0112      	lsls	r2, r2, #4
 80078fc:	58d3      	ldr	r3, [r2, r3]
 80078fe:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <StartMeasurements+0x48>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	4b04      	ldr	r3, [pc, #16]	@ (800791c <StartMeasurements+0x48>)
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	4b03      	ldr	r3, [pc, #12]	@ (800791c <StartMeasurements+0x48>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d9e5      	bls.n	80078e0 <StartMeasurements+0xc>
    }
  }
}
 8007914:	46c0      	nop			@ (mov r8, r8)
 8007916:	46c0      	nop			@ (mov r8, r8)
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000f40 	.word	0x20000f40
 8007920:	20000f08 	.word	0x20000f08

08007924 <Meas_Test>:

void Meas_Test(){
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007928:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <Meas_Test+0x94>)
 800792a:	78db      	ldrb	r3, [r3, #3]
 800792c:	2201      	movs	r2, #1
 800792e:	4053      	eors	r3, r2
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <Meas_Test+0x16>
    ESP_WakeTest();
 8007936:	f7fd faaf 	bl	8004e98 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 800793a:	4b1f      	ldr	r3, [pc, #124]	@ (80079b8 <Meas_Test+0x94>)
 800793c:	789b      	ldrb	r3, [r3, #2]
 800793e:	2201      	movs	r2, #1
 8007940:	4053      	eors	r3, r2
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01b      	beq.n	8007980 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007948:	f7ff fe97 	bl	800767a <MIC_IsTestMeasurementDoneWrapper>
 800794c:	1e03      	subs	r3, r0, #0
 800794e:	d00b      	beq.n	8007968 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8007950:	4b19      	ldr	r3, [pc, #100]	@ (80079b8 <Meas_Test+0x94>)
 8007952:	2201      	movs	r2, #1
 8007954:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007956:	23fa      	movs	r3, #250	@ 0xfa
 8007958:	011a      	lsls	r2, r3, #4
 800795a:	4918      	ldr	r1, [pc, #96]	@ (80079bc <Meas_Test+0x98>)
 800795c:	23fa      	movs	r3, #250	@ 0xfa
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	0018      	movs	r0, r3
 8007962:	f003 f821 	bl	800a9a8 <SetStatusLED>
 8007966:	e00b      	b.n	8007980 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007968:	f002 f982 	bl	8009c70 <micSettlingComplete>
 800796c:	1e03      	subs	r3, r0, #0
 800796e:	d007      	beq.n	8007980 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007970:	23fa      	movs	r3, #250	@ 0xfa
 8007972:	011a      	lsls	r2, r3, #4
 8007974:	23fa      	movs	r3, #250	@ 0xfa
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	4810      	ldr	r0, [pc, #64]	@ (80079bc <Meas_Test+0x98>)
 800797a:	0019      	movs	r1, r3
 800797c:	f003 f814 	bl	800a9a8 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8007980:	4b0d      	ldr	r3, [pc, #52]	@ (80079b8 <Meas_Test+0x94>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d013      	beq.n	80079b0 <Meas_Test+0x8c>
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <Meas_Test+0x94>)
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00f      	beq.n	80079b0 <Meas_Test+0x8c>
 8007990:	4b09      	ldr	r3, [pc, #36]	@ (80079b8 <Meas_Test+0x94>)
 8007992:	78db      	ldrb	r3, [r3, #3]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <Meas_Test+0x8c>
 8007998:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <Meas_Test+0x94>)
 800799a:	789b      	ldrb	r3, [r3, #2]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <Meas_Test+0x8c>
    Info("Test completed");
 80079a0:	4a07      	ldr	r2, [pc, #28]	@ (80079c0 <Meas_Test+0x9c>)
 80079a2:	4b08      	ldr	r3, [pc, #32]	@ (80079c4 <Meas_Test+0xa0>)
 80079a4:	0019      	movs	r1, r3
 80079a6:	2002      	movs	r0, #2
 80079a8:	f003 ff9c 	bl	800b8e4 <CreateLine>
    SetTestDone();
 80079ac:	f7ff fc14 	bl	80071d8 <SetTestDone>
  }
}
 80079b0:	46c0      	nop			@ (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			@ (mov r8, r8)
 80079b8:	20000f3c 	.word	0x20000f3c
 80079bc:	00000bb8 	.word	0x00000bb8
 80079c0:	08020270 	.word	0x08020270
 80079c4:	0802026c 	.word	0x0802026c

080079c8 <ResetMeasurements>:
void ResetMeasurements(void) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80079cc:	4b0b      	ldr	r3, [pc, #44]	@ (80079fc <ResetMeasurements+0x34>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <ResetMeasurements+0x34>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80079d8:	4b08      	ldr	r3, [pc, #32]	@ (80079fc <ResetMeasurements+0x34>)
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80079de:	4b07      	ldr	r3, [pc, #28]	@ (80079fc <ResetMeasurements+0x34>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 80079e4:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <ResetMeasurements+0x34>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 80079ea:	4b04      	ldr	r3, [pc, #16]	@ (80079fc <ResetMeasurements+0x34>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 80079f0:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <ResetMeasurements+0x34>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	73da      	strb	r2, [r3, #15]
}
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000ef8 	.word	0x20000ef8

08007a00 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007a04:	4b18      	ldr	r3, [pc, #96]	@ (8007a68 <MeasurementsCompleted+0x68>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	e024      	b.n	8007a56 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007a0c:	4b16      	ldr	r3, [pc, #88]	@ (8007a68 <MeasurementsCompleted+0x68>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	4a16      	ldr	r2, [pc, #88]	@ (8007a6c <MeasurementsCompleted+0x6c>)
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	18d3      	adds	r3, r2, r3
 8007a16:	330c      	adds	r3, #12
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d015      	beq.n	8007a4a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8007a1e:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <MeasurementsCompleted+0x68>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	4a12      	ldr	r2, [pc, #72]	@ (8007a6c <MeasurementsCompleted+0x6c>)
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	18d3      	adds	r3, r2, r3
 8007a28:	3304      	adds	r3, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4798      	blx	r3
 8007a2e:	1e03      	subs	r3, r0, #0
 8007a30:	d009      	beq.n	8007a46 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8007a32:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <MeasurementsCompleted+0x68>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4a0d      	ldr	r2, [pc, #52]	@ (8007a6c <MeasurementsCompleted+0x6c>)
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	18d3      	adds	r3, r2, r3
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2201      	movs	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e001      	b.n	8007a4a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e00a      	b.n	8007a60 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007a4a:	4b07      	ldr	r3, [pc, #28]	@ (8007a68 <MeasurementsCompleted+0x68>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	4b05      	ldr	r3, [pc, #20]	@ (8007a68 <MeasurementsCompleted+0x68>)
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	4b04      	ldr	r3, [pc, #16]	@ (8007a68 <MeasurementsCompleted+0x68>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d9d6      	bls.n	8007a0c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8007a5e:	2301      	movs	r3, #1
}
 8007a60:	0018      	movs	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	20000f40 	.word	0x20000f40
 8007a6c:	20000f08 	.word	0x20000f08

08007a70 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8007a70:	b590      	push	{r4, r7, lr}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8007a76:	4b7d      	ldr	r3, [pc, #500]	@ (8007c6c <Mic_Upkeep+0x1fc>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d100      	bne.n	8007a80 <Mic_Upkeep+0x10>
 8007a7e:	e0c0      	b.n	8007c02 <Mic_Upkeep+0x192>
 8007a80:	dd00      	ble.n	8007a84 <Mic_Upkeep+0x14>
 8007a82:	e0dd      	b.n	8007c40 <Mic_Upkeep+0x1d0>
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d037      	beq.n	8007af8 <Mic_Upkeep+0x88>
 8007a88:	dd00      	ble.n	8007a8c <Mic_Upkeep+0x1c>
 8007a8a:	e0d9      	b.n	8007c40 <Mic_Upkeep+0x1d0>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <Mic_Upkeep+0x26>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d014      	beq.n	8007abe <Mic_Upkeep+0x4e>
 8007a94:	e0d4      	b.n	8007c40 <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007a96:	2001      	movs	r0, #1
 8007a98:	f002 f90e 	bl	8009cb8 <enableMicrophone>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4053      	eors	r3, r2
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8007aaa:	4a71      	ldr	r2, [pc, #452]	@ (8007c70 <Mic_Upkeep+0x200>)
 8007aac:	4b71      	ldr	r3, [pc, #452]	@ (8007c74 <Mic_Upkeep+0x204>)
 8007aae:	21d4      	movs	r1, #212	@ 0xd4
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f003 ffcb 	bl	800ba4c <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8007ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8007c6c <Mic_Upkeep+0x1fc>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 8007abc:	e0cf      	b.n	8007c5e <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 8007abe:	f002 f8d7 	bl	8009c70 <micSettlingComplete>
 8007ac2:	1e03      	subs	r3, r0, #0
 8007ac4:	d105      	bne.n	8007ad2 <Mic_Upkeep+0x62>
 8007ac6:	4b6c      	ldr	r3, [pc, #432]	@ (8007c78 <Mic_Upkeep+0x208>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d100      	bne.n	8007ad2 <Mic_Upkeep+0x62>
 8007ad0:	e0c0      	b.n	8007c54 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 8007ad2:	f002 f95b 	bl	8009d8c <startSPLcalculation>
 8007ad6:	0003      	movs	r3, r0
 8007ad8:	001a      	movs	r2, r3
 8007ada:	2301      	movs	r3, #1
 8007adc:	4053      	eors	r3, r2
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 8007ae4:	4a62      	ldr	r2, [pc, #392]	@ (8007c70 <Mic_Upkeep+0x200>)
 8007ae6:	4b63      	ldr	r3, [pc, #396]	@ (8007c74 <Mic_Upkeep+0x204>)
 8007ae8:	21e0      	movs	r1, #224	@ 0xe0
 8007aea:	0018      	movs	r0, r3
 8007aec:	f003 ffae 	bl	800ba4c <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8007af0:	4b5e      	ldr	r3, [pc, #376]	@ (8007c6c <Mic_Upkeep+0x1fc>)
 8007af2:	2202      	movs	r2, #2
 8007af4:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 8007af6:	e0ad      	b.n	8007c54 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 8007af8:	4b60      	ldr	r3, [pc, #384]	@ (8007c7c <Mic_Upkeep+0x20c>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	2101      	movs	r1, #1
 8007afe:	0018      	movs	r0, r3
 8007b00:	f001 ff98 	bl	8009a34 <getSoundData>
 8007b04:	1e03      	subs	r3, r0, #0
 8007b06:	d100      	bne.n	8007b0a <Mic_Upkeep+0x9a>
 8007b08:	e0a6      	b.n	8007c58 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 8007b0a:	f002 f891 	bl	8009c30 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8007c7c <Mic_Upkeep+0x20c>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007b14:	4b59      	ldr	r3, [pc, #356]	@ (8007c7c <Mic_Upkeep+0x20c>)
 8007b16:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007b18:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007b1a:	4b58      	ldr	r3, [pc, #352]	@ (8007c7c <Mic_Upkeep+0x20c>)
 8007b1c:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007b1e:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8007b20:	4b56      	ldr	r3, [pc, #344]	@ (8007c7c <Mic_Upkeep+0x20c>)
 8007b22:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007b24:	4856      	ldr	r0, [pc, #344]	@ (8007c80 <Mic_Upkeep+0x210>)
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	0023      	movs	r3, r4
 8007b2a:	f000 faf5 	bl	8008118 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8007b2e:	4b53      	ldr	r3, [pc, #332]	@ (8007c7c <Mic_Upkeep+0x20c>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	001a      	movs	r2, r3
 8007b34:	4b51      	ldr	r3, [pc, #324]	@ (8007c7c <Mic_Upkeep+0x20c>)
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	4952      	ldr	r1, [pc, #328]	@ (8007c84 <Mic_Upkeep+0x214>)
 8007b3a:	0038      	movs	r0, r7
 8007b3c:	f014 fcfc 	bl	801c538 <siprintf>

      dBValue = atof(dBbuffer);
 8007b40:	003b      	movs	r3, r7
 8007b42:	0018      	movs	r0, r3
 8007b44:	f013 f908 	bl	801ad58 <atof>
 8007b48:	0002      	movs	r2, r0
 8007b4a:	000b      	movs	r3, r1
 8007b4c:	0010      	movs	r0, r2
 8007b4e:	0019      	movs	r1, r3
 8007b50:	f7fb fcd0 	bl	80034f4 <__aeabi_d2f>
 8007b54:	1c02      	adds	r2, r0, #0
 8007b56:	4b4c      	ldr	r3, [pc, #304]	@ (8007c88 <Mic_Upkeep+0x218>)
 8007b58:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8007b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8007c88 <Mic_Upkeep+0x218>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	494b      	ldr	r1, [pc, #300]	@ (8007c8c <Mic_Upkeep+0x21c>)
 8007b60:	1c18      	adds	r0, r3, #0
 8007b62:	f7f9 fa1d 	bl	8000fa0 <__aeabi_fmul>
 8007b66:	1c03      	adds	r3, r0, #0
 8007b68:	1c18      	adds	r0, r3, #0
 8007b6a:	f7fb fc7b 	bl	8003464 <__aeabi_f2d>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4b47      	ldr	r3, [pc, #284]	@ (8007c90 <Mic_Upkeep+0x220>)
 8007b72:	f7f9 fdbb 	bl	80016ec <__aeabi_dadd>
 8007b76:	0002      	movs	r2, r0
 8007b78:	000b      	movs	r3, r1
 8007b7a:	0010      	movs	r0, r2
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	f7fb fbe3 	bl	8003348 <__aeabi_d2iz>
 8007b82:	0003      	movs	r3, r0
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7fb fc1b 	bl	80033c0 <__aeabi_i2d>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4b41      	ldr	r3, [pc, #260]	@ (8007c94 <Mic_Upkeep+0x224>)
 8007b8e:	f7fa f911 	bl	8001db4 <__aeabi_ddiv>
 8007b92:	0002      	movs	r2, r0
 8007b94:	000b      	movs	r3, r1
 8007b96:	0010      	movs	r0, r2
 8007b98:	0019      	movs	r1, r3
 8007b9a:	f7fb fcab 	bl	80034f4 <__aeabi_d2f>
 8007b9e:	1c02      	adds	r2, r0, #0
 8007ba0:	4b39      	ldr	r3, [pc, #228]	@ (8007c88 <Mic_Upkeep+0x218>)
 8007ba2:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8007ba4:	f000 f966 	bl	8007e74 <MIC_Print>
      if (!startSPLcalculation()) {
 8007ba8:	f002 f8f0 	bl	8009d8c <startSPLcalculation>
 8007bac:	0003      	movs	r3, r0
 8007bae:	001a      	movs	r2, r3
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4053      	eors	r3, r2
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 8007bba:	4a2d      	ldr	r2, [pc, #180]	@ (8007c70 <Mic_Upkeep+0x200>)
 8007bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8007c74 <Mic_Upkeep+0x204>)
 8007bbe:	21f9      	movs	r1, #249	@ 0xf9
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f003 ff43 	bl	800ba4c <errorHandler>
      }
      if (!enableMicrophone(false))
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f002 f876 	bl	8009cb8 <enableMicrophone>
 8007bcc:	0003      	movs	r3, r0
 8007bce:	001a      	movs	r2, r3
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4053      	eors	r3, r2
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007bda:	4a25      	ldr	r2, [pc, #148]	@ (8007c70 <Mic_Upkeep+0x200>)
 8007bdc:	4b25      	ldr	r3, [pc, #148]	@ (8007c74 <Mic_Upkeep+0x204>)
 8007bde:	21fd      	movs	r1, #253	@ 0xfd
 8007be0:	0018      	movs	r0, r3
 8007be2:	f003 ff33 	bl	800ba4c <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 8007be6:	f004 fa19 	bl	800c01c <HAL_GetTick>
 8007bea:	0003      	movs	r3, r0
 8007bec:	22fa      	movs	r2, #250	@ 0xfa
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	189a      	adds	r2, r3, r2
 8007bf2:	4b29      	ldr	r3, [pc, #164]	@ (8007c98 <Mic_Upkeep+0x228>)
 8007bf4:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8007bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8007c6c <Mic_Upkeep+0x1fc>)
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8007bfc:	f002 ffcc 	bl	800ab98 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 8007c00:	e02a      	b.n	8007c58 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007c02:	4b25      	ldr	r3, [pc, #148]	@ (8007c98 <Mic_Upkeep+0x228>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	0018      	movs	r0, r3
 8007c08:	f003 fe16 	bl	800b838 <TimestampIsReached>
 8007c0c:	1e03      	subs	r3, r0, #0
 8007c0e:	d025      	beq.n	8007c5c <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 8007c10:	2001      	movs	r0, #1
 8007c12:	f002 f851 	bl	8009cb8 <enableMicrophone>
 8007c16:	0003      	movs	r3, r0
 8007c18:	001a      	movs	r2, r3
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4053      	eors	r3, r2
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007c24:	4a12      	ldr	r2, [pc, #72]	@ (8007c70 <Mic_Upkeep+0x200>)
 8007c26:	230c      	movs	r3, #12
 8007c28:	33ff      	adds	r3, #255	@ 0xff
 8007c2a:	0019      	movs	r1, r3
 8007c2c:	4b11      	ldr	r3, [pc, #68]	@ (8007c74 <Mic_Upkeep+0x204>)
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f003 ff0c 	bl	800ba4c <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007c34:	4b0d      	ldr	r3, [pc, #52]	@ (8007c6c <Mic_Upkeep+0x1fc>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007c3a:	f002 ff95 	bl	800ab68 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 8007c3e:	e00d      	b.n	8007c5c <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 8007c40:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <Mic_Upkeep+0x22c>)
 8007c42:	4b17      	ldr	r3, [pc, #92]	@ (8007ca0 <Mic_Upkeep+0x230>)
 8007c44:	0019      	movs	r1, r3
 8007c46:	2003      	movs	r0, #3
 8007c48:	f003 fe4c 	bl	800b8e4 <CreateLine>
    MicState = MIC_STATE_INIT;
 8007c4c:	4b07      	ldr	r3, [pc, #28]	@ (8007c6c <Mic_Upkeep+0x1fc>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 8007c52:	e004      	b.n	8007c5e <Mic_Upkeep+0x1ee>
    break;
 8007c54:	46c0      	nop			@ (mov r8, r8)
 8007c56:	e002      	b.n	8007c5e <Mic_Upkeep+0x1ee>
    break;
 8007c58:	46c0      	nop			@ (mov r8, r8)
 8007c5a:	e000      	b.n	8007c5e <Mic_Upkeep+0x1ee>
    break;
 8007c5c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007c5e:	4b03      	ldr	r3, [pc, #12]	@ (8007c6c <Mic_Upkeep+0x1fc>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
}
 8007c62:	0018      	movs	r0, r3
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b003      	add	sp, #12
 8007c68:	bd90      	pop	{r4, r7, pc}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	20000f5e 	.word	0x20000f5e
 8007c70:	08020280 	.word	0x08020280
 8007c74:	08020af0 	.word	0x08020af0
 8007c78:	20001280 	.word	0x20001280
 8007c7c:	20000f4c 	.word	0x20000f4c
 8007c80:	0802029c 	.word	0x0802029c
 8007c84:	080202c8 	.word	0x080202c8
 8007c88:	20000f90 	.word	0x20000f90
 8007c8c:	42c80000 	.word	0x42c80000
 8007c90:	3fe00000 	.word	0x3fe00000
 8007c94:	40590000 	.word	0x40590000
 8007c98:	20000f48 	.word	0x20000f48
 8007c9c:	080202d0 	.word	0x080202d0
 8007ca0:	08020210 	.word	0x08020210

08007ca4 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007ca4:	b5b0      	push	{r4, r5, r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007caa:	4b3c      	ldr	r3, [pc, #240]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b06      	cmp	r3, #6
 8007cb0:	d868      	bhi.n	8007d84 <Meas_Upkeep+0xe0>
 8007cb2:	009a      	lsls	r2, r3, #2
 8007cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8007da0 <Meas_Upkeep+0xfc>)
 8007cb6:	18d3      	adds	r3, r2, r3
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007cbc:	4a39      	ldr	r2, [pc, #228]	@ (8007da4 <Meas_Upkeep+0x100>)
 8007cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8007da8 <Meas_Upkeep+0x104>)
 8007cc0:	0019      	movs	r1, r3
 8007cc2:	2003      	movs	r0, #3
 8007cc4:	f003 fe0e 	bl	800b8e4 <CreateLine>
    break;
 8007cc8:	e063      	b.n	8007d92 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007cca:	f7ff fe7d 	bl	80079c8 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8007cce:	4b33      	ldr	r3, [pc, #204]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
    break;
 8007cd4:	e05d      	b.n	8007d92 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8007cd6:	f7ff fdfd 	bl	80078d4 <StartMeasurements>
    SetMeasurementIndicator();
 8007cda:	f002 ff17 	bl	800ab0c <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8007cde:	4b2f      	ldr	r3, [pc, #188]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	701a      	strb	r2, [r3, #0]
   break;
 8007ce4:	e055      	b.n	8007d92 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8007ce6:	f7ff fe8b 	bl	8007a00 <MeasurementsCompleted>
 8007cea:	1e03      	subs	r3, r0, #0
 8007cec:	d04e      	beq.n	8007d8c <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007cee:	4b2b      	ldr	r3, [pc, #172]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007cf4:	e04a      	b.n	8007d8c <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8007cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8007dac <Meas_Upkeep+0x108>)
 8007cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8007da8 <Meas_Upkeep+0x104>)
 8007cfa:	0019      	movs	r1, r3
 8007cfc:	2003      	movs	r0, #3
 8007cfe:	f003 fdf1 	bl	800b8e4 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007d02:	4b2b      	ldr	r3, [pc, #172]	@ (8007db0 <Meas_Upkeep+0x10c>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	4a2b      	ldr	r2, [pc, #172]	@ (8007db4 <Meas_Upkeep+0x110>)
 8007d08:	4927      	ldr	r1, [pc, #156]	@ (8007da8 <Meas_Upkeep+0x104>)
 8007d0a:	2003      	movs	r0, #3
 8007d0c:	f003 fdea 	bl	800b8e4 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007d10:	4b27      	ldr	r3, [pc, #156]	@ (8007db0 <Meas_Upkeep+0x10c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1c18      	adds	r0, r3, #0
 8007d16:	f7fb fba5 	bl	8003464 <__aeabi_f2d>
 8007d1a:	0004      	movs	r4, r0
 8007d1c:	000d      	movs	r5, r1
 8007d1e:	4b24      	ldr	r3, [pc, #144]	@ (8007db0 <Meas_Upkeep+0x10c>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	1c18      	adds	r0, r3, #0
 8007d24:	f7fb fb9e 	bl	8003464 <__aeabi_f2d>
 8007d28:	0002      	movs	r2, r0
 8007d2a:	000b      	movs	r3, r1
 8007d2c:	4822      	ldr	r0, [pc, #136]	@ (8007db8 <Meas_Upkeep+0x114>)
 8007d2e:	491e      	ldr	r1, [pc, #120]	@ (8007da8 <Meas_Upkeep+0x104>)
 8007d30:	9202      	str	r2, [sp, #8]
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	9400      	str	r4, [sp, #0]
 8007d36:	9501      	str	r5, [sp, #4]
 8007d38:	0002      	movs	r2, r0
 8007d3a:	2003      	movs	r0, #3
 8007d3c:	f003 fdd2 	bl	800b8e4 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007d40:	4b1b      	ldr	r3, [pc, #108]	@ (8007db0 <Meas_Upkeep+0x10c>)
 8007d42:	6858      	ldr	r0, [r3, #4]
 8007d44:	4b1a      	ldr	r3, [pc, #104]	@ (8007db0 <Meas_Upkeep+0x10c>)
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <Meas_Upkeep+0x10c>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	001a      	movs	r2, r3
 8007d50:	f7fb fdc2 	bl	80038d8 <setMeasurement>
    ResetMeasurementIndicator();
 8007d54:	f002 fef2 	bl	800ab3c <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007d58:	f004 f960 	bl	800c01c <HAL_GetTick>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	4a17      	ldr	r2, [pc, #92]	@ (8007dbc <Meas_Upkeep+0x118>)
 8007d60:	189a      	adds	r2, r3, r2
 8007d62:	4b17      	ldr	r3, [pc, #92]	@ (8007dc0 <Meas_Upkeep+0x11c>)
 8007d64:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007d66:	4b0d      	ldr	r3, [pc, #52]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007d68:	2206      	movs	r2, #6
 8007d6a:	701a      	strb	r2, [r3, #0]
    break;
 8007d6c:	e011      	b.n	8007d92 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007d6e:	4b14      	ldr	r3, [pc, #80]	@ (8007dc0 <Meas_Upkeep+0x11c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	0018      	movs	r0, r3
 8007d74:	f003 fd60 	bl	800b838 <TimestampIsReached>
 8007d78:	1e03      	subs	r3, r0, #0
 8007d7a:	d009      	beq.n	8007d90 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007d7c:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007d82:	e005      	b.n	8007d90 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007d84:	4b05      	ldr	r3, [pc, #20]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
    break;
 8007d8a:	e002      	b.n	8007d92 <Meas_Upkeep+0xee>
    break;
 8007d8c:	46c0      	nop			@ (mov r8, r8)
 8007d8e:	e000      	b.n	8007d92 <Meas_Upkeep+0xee>
    break;
 8007d90:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007d92:	4b02      	ldr	r3, [pc, #8]	@ (8007d9c <Meas_Upkeep+0xf8>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
}
 8007d96:	0018      	movs	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d9c:	20000f5f 	.word	0x20000f5f
 8007da0:	08020ad4 	.word	0x08020ad4
 8007da4:	080202f0 	.word	0x080202f0
 8007da8:	08020210 	.word	0x08020210
 8007dac:	08020310 	.word	0x08020310
 8007db0:	20000ef8 	.word	0x20000ef8
 8007db4:	08020324 	.word	0x08020324
 8007db8:	0802033c 	.word	0x0802033c
 8007dbc:	00002710 	.word	0x00002710
 8007dc0:	20000f44 	.word	0x20000f44

08007dc4 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007dc4:	b590      	push	{r4, r7, lr}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	1d3b      	adds	r3, r7, #4
 8007dcc:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007dce:	240f      	movs	r4, #15
 8007dd0:	193b      	adds	r3, r7, r4
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007dd6:	4b20      	ldr	r3, [pc, #128]	@ (8007e58 <Meas_SetEnabledSensors+0x94>)
 8007dd8:	1d3a      	adds	r2, r7, #4
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007dde:	193b      	adds	r3, r7, r4
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	193a      	adds	r2, r7, r4
 8007de4:	1c59      	adds	r1, r3, #1
 8007de6:	7011      	strb	r1, [r2, #0]
 8007de8:	0018      	movs	r0, r3
 8007dea:	1d3b      	adds	r3, r7, #4
 8007dec:	7819      	ldrb	r1, [r3, #0]
 8007dee:	4a1b      	ldr	r2, [pc, #108]	@ (8007e5c <Meas_SetEnabledSensors+0x98>)
 8007df0:	0103      	lsls	r3, r0, #4
 8007df2:	18d3      	adds	r3, r2, r3
 8007df4:	330c      	adds	r3, #12
 8007df6:	1c0a      	adds	r2, r1, #0
 8007df8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007dfa:	193b      	adds	r3, r7, r4
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	193a      	adds	r2, r7, r4
 8007e00:	1c59      	adds	r1, r3, #1
 8007e02:	7011      	strb	r1, [r2, #0]
 8007e04:	0018      	movs	r0, r3
 8007e06:	1d3b      	adds	r3, r7, #4
 8007e08:	7859      	ldrb	r1, [r3, #1]
 8007e0a:	4a14      	ldr	r2, [pc, #80]	@ (8007e5c <Meas_SetEnabledSensors+0x98>)
 8007e0c:	0103      	lsls	r3, r0, #4
 8007e0e:	18d3      	adds	r3, r2, r3
 8007e10:	330c      	adds	r3, #12
 8007e12:	1c0a      	adds	r2, r1, #0
 8007e14:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007e16:	193b      	adds	r3, r7, r4
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	193a      	adds	r2, r7, r4
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	7011      	strb	r1, [r2, #0]
 8007e20:	0018      	movs	r0, r3
 8007e22:	1d3b      	adds	r3, r7, #4
 8007e24:	7899      	ldrb	r1, [r3, #2]
 8007e26:	4a0d      	ldr	r2, [pc, #52]	@ (8007e5c <Meas_SetEnabledSensors+0x98>)
 8007e28:	0103      	lsls	r3, r0, #4
 8007e2a:	18d3      	adds	r3, r2, r3
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	1c0a      	adds	r2, r1, #0
 8007e30:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007e32:	193b      	adds	r3, r7, r4
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	193a      	adds	r2, r7, r4
 8007e38:	1c59      	adds	r1, r3, #1
 8007e3a:	7011      	strb	r1, [r2, #0]
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	78d9      	ldrb	r1, [r3, #3]
 8007e42:	4a06      	ldr	r2, [pc, #24]	@ (8007e5c <Meas_SetEnabledSensors+0x98>)
 8007e44:	0103      	lsls	r3, r0, #4
 8007e46:	18d3      	adds	r3, r2, r3
 8007e48:	330c      	adds	r3, #12
 8007e4a:	1c0a      	adds	r2, r1, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
}
 8007e4e:	46c0      	nop			@ (mov r8, r8)
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b005      	add	sp, #20
 8007e54:	bd90      	pop	{r4, r7, pc}
 8007e56:	46c0      	nop			@ (mov r8, r8)
 8007e58:	20000f38 	.word	0x20000f38
 8007e5c:	20000f08 	.word	0x20000f08

08007e60 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007e64:	4b02      	ldr	r3, [pc, #8]	@ (8007e70 <SetESPMeasurementDone+0x10>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	70da      	strb	r2, [r3, #3]
}
 8007e6a:	46c0      	nop			@ (mov r8, r8)
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20000f3c 	.word	0x20000f3c

08007e74 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007e7a:	4b81      	ldr	r3, [pc, #516]	@ (8008080 <MIC_Print+0x20c>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b81      	ldr	r3, [pc, #516]	@ (8008084 <MIC_Print+0x210>)
 8007e80:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007e82:	4b81      	ldr	r3, [pc, #516]	@ (8008088 <MIC_Print+0x214>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d80e      	bhi.n	8007ea8 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8008088 <MIC_Print+0x214>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	001a      	movs	r2, r3
 8007e90:	4b7c      	ldr	r3, [pc, #496]	@ (8008084 <MIC_Print+0x210>)
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	4b7d      	ldr	r3, [pc, #500]	@ (800808c <MIC_Print+0x218>)
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008088 <MIC_Print+0x214>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	4b79      	ldr	r3, [pc, #484]	@ (8008088 <MIC_Print+0x214>)
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e013      	b.n	8007ed0 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007ea8:	4b77      	ldr	r3, [pc, #476]	@ (8008088 <MIC_Print+0x214>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007eae:	4b76      	ldr	r3, [pc, #472]	@ (8008088 <MIC_Print+0x214>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	001a      	movs	r2, r3
 8007eb4:	4b73      	ldr	r3, [pc, #460]	@ (8008084 <MIC_Print+0x210>)
 8007eb6:	6819      	ldr	r1, [r3, #0]
 8007eb8:	4b74      	ldr	r3, [pc, #464]	@ (800808c <MIC_Print+0x218>)
 8007eba:	0092      	lsls	r2, r2, #2
 8007ebc:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007ebe:	4b72      	ldr	r3, [pc, #456]	@ (8008088 <MIC_Print+0x214>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	4b70      	ldr	r3, [pc, #448]	@ (8008088 <MIC_Print+0x214>)
 8007ec8:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007eca:	4b71      	ldr	r3, [pc, #452]	@ (8008090 <MIC_Print+0x21c>)
 8007ecc:	2201      	movs	r2, #1
 8007ece:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8007ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8008090 <MIC_Print+0x21c>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	4053      	eors	r3, r2
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 8007ede:	4b69      	ldr	r3, [pc, #420]	@ (8008084 <MIC_Print+0x210>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	1c18      	adds	r0, r3, #0
 8007ee4:	f7fb fd14 	bl	8003910 <setMic>
 8007ee8:	e02d      	b.n	8007f46 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8007eea:	4b6a      	ldr	r3, [pc, #424]	@ (8008094 <MIC_Print+0x220>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007ef0:	1dfb      	adds	r3, r7, #7
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e013      	b.n	8007f20 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8007ef8:	1dfb      	adds	r3, r7, #7
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	4b63      	ldr	r3, [pc, #396]	@ (800808c <MIC_Print+0x218>)
 8007efe:	0092      	lsls	r2, r2, #2
 8007f00:	58d2      	ldr	r2, [r2, r3]
 8007f02:	4b64      	ldr	r3, [pc, #400]	@ (8008094 <MIC_Print+0x220>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	1c19      	adds	r1, r3, #0
 8007f08:	1c10      	adds	r0, r2, #0
 8007f0a:	f7f8 fcd9 	bl	80008c0 <__aeabi_fadd>
 8007f0e:	1c03      	adds	r3, r0, #0
 8007f10:	1c1a      	adds	r2, r3, #0
 8007f12:	4b60      	ldr	r3, [pc, #384]	@ (8008094 <MIC_Print+0x220>)
 8007f14:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007f16:	1dfb      	adds	r3, r7, #7
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	1dfb      	adds	r3, r7, #7
 8007f1c:	3201      	adds	r2, #1
 8007f1e:	701a      	strb	r2, [r3, #0]
 8007f20:	1dfb      	adds	r3, r7, #7
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b09      	cmp	r3, #9
 8007f26:	d9e7      	bls.n	8007ef8 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8007f28:	4b5a      	ldr	r3, [pc, #360]	@ (8008094 <MIC_Print+0x220>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	495a      	ldr	r1, [pc, #360]	@ (8008098 <MIC_Print+0x224>)
 8007f2e:	1c18      	adds	r0, r3, #0
 8007f30:	f7f8 fe50 	bl	8000bd4 <__aeabi_fdiv>
 8007f34:	1c03      	adds	r3, r0, #0
 8007f36:	1c1a      	adds	r2, r3, #0
 8007f38:	4b56      	ldr	r3, [pc, #344]	@ (8008094 <MIC_Print+0x220>)
 8007f3a:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007f3c:	4b55      	ldr	r3, [pc, #340]	@ (8008094 <MIC_Print+0x220>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	1c18      	adds	r0, r3, #0
 8007f42:	f7fb fce5 	bl	8003910 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8007f46:	4b4f      	ldr	r3, [pc, #316]	@ (8008084 <MIC_Print+0x210>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4954      	ldr	r1, [pc, #336]	@ (800809c <MIC_Print+0x228>)
 8007f4c:	1c18      	adds	r0, r3, #0
 8007f4e:	f7f8 fb0d 	bl	800056c <__aeabi_fcmpge>
 8007f52:	1e03      	subs	r3, r0, #0
 8007f54:	d004      	beq.n	8007f60 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8007f56:	2201      	movs	r2, #1
 8007f58:	2101      	movs	r1, #1
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f002 fd58 	bl	800aa10 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8007f60:	4b48      	ldr	r3, [pc, #288]	@ (8008084 <MIC_Print+0x210>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	494d      	ldr	r1, [pc, #308]	@ (800809c <MIC_Print+0x228>)
 8007f66:	1c18      	adds	r0, r3, #0
 8007f68:	f7f8 fae2 	bl	8000530 <__aeabi_fcmplt>
 8007f6c:	1e03      	subs	r3, r0, #0
 8007f6e:	d00c      	beq.n	8007f8a <MIC_Print+0x116>
 8007f70:	4b44      	ldr	r3, [pc, #272]	@ (8008084 <MIC_Print+0x210>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	494a      	ldr	r1, [pc, #296]	@ (80080a0 <MIC_Print+0x22c>)
 8007f76:	1c18      	adds	r0, r3, #0
 8007f78:	f7f8 faf8 	bl	800056c <__aeabi_fcmpge>
 8007f7c:	1e03      	subs	r3, r0, #0
 8007f7e:	d004      	beq.n	8007f8a <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8007f80:	2200      	movs	r2, #0
 8007f82:	2100      	movs	r1, #0
 8007f84:	2001      	movs	r0, #1
 8007f86:	f002 fd43 	bl	800aa10 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 8007f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8008084 <MIC_Print+0x210>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4944      	ldr	r1, [pc, #272]	@ (80080a0 <MIC_Print+0x22c>)
 8007f90:	1c18      	adds	r0, r3, #0
 8007f92:	f7f8 facd 	bl	8000530 <__aeabi_fcmplt>
 8007f96:	1e03      	subs	r3, r0, #0
 8007f98:	d00c      	beq.n	8007fb4 <MIC_Print+0x140>
 8007f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8008084 <MIC_Print+0x210>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4941      	ldr	r1, [pc, #260]	@ (80080a4 <MIC_Print+0x230>)
 8007fa0:	1c18      	adds	r0, r3, #0
 8007fa2:	f7f8 fae3 	bl	800056c <__aeabi_fcmpge>
 8007fa6:	1e03      	subs	r3, r0, #0
 8007fa8:	d004      	beq.n	8007fb4 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 8007faa:	2200      	movs	r2, #0
 8007fac:	2101      	movs	r1, #1
 8007fae:	2001      	movs	r0, #1
 8007fb0:	f002 fd2e 	bl	800aa10 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 8007fb4:	4b33      	ldr	r3, [pc, #204]	@ (8008084 <MIC_Print+0x210>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	493a      	ldr	r1, [pc, #232]	@ (80080a4 <MIC_Print+0x230>)
 8007fba:	1c18      	adds	r0, r3, #0
 8007fbc:	f7f8 fab8 	bl	8000530 <__aeabi_fcmplt>
 8007fc0:	1e03      	subs	r3, r0, #0
 8007fc2:	d00c      	beq.n	8007fde <MIC_Print+0x16a>
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8008084 <MIC_Print+0x210>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4937      	ldr	r1, [pc, #220]	@ (80080a8 <MIC_Print+0x234>)
 8007fca:	1c18      	adds	r0, r3, #0
 8007fcc:	f7f8 face 	bl	800056c <__aeabi_fcmpge>
 8007fd0:	1e03      	subs	r3, r0, #0
 8007fd2:	d004      	beq.n	8007fde <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	2000      	movs	r0, #0
 8007fda:	f002 fd19 	bl	800aa10 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 8007fde:	4b29      	ldr	r3, [pc, #164]	@ (8008084 <MIC_Print+0x210>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4931      	ldr	r1, [pc, #196]	@ (80080a8 <MIC_Print+0x234>)
 8007fe4:	1c18      	adds	r0, r3, #0
 8007fe6:	f7f8 faa3 	bl	8000530 <__aeabi_fcmplt>
 8007fea:	1e03      	subs	r3, r0, #0
 8007fec:	d00c      	beq.n	8008008 <MIC_Print+0x194>
 8007fee:	4b25      	ldr	r3, [pc, #148]	@ (8008084 <MIC_Print+0x210>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	492e      	ldr	r1, [pc, #184]	@ (80080ac <MIC_Print+0x238>)
 8007ff4:	1c18      	adds	r0, r3, #0
 8007ff6:	f7f8 fab9 	bl	800056c <__aeabi_fcmpge>
 8007ffa:	1e03      	subs	r3, r0, #0
 8007ffc:	d004      	beq.n	8008008 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 8007ffe:	2201      	movs	r2, #1
 8008000:	2100      	movs	r1, #0
 8008002:	2000      	movs	r0, #0
 8008004:	f002 fd04 	bl	800aa10 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8008008:	4b1e      	ldr	r3, [pc, #120]	@ (8008084 <MIC_Print+0x210>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4927      	ldr	r1, [pc, #156]	@ (80080ac <MIC_Print+0x238>)
 800800e:	1c18      	adds	r0, r3, #0
 8008010:	f7f8 fa8e 	bl	8000530 <__aeabi_fcmplt>
 8008014:	1e03      	subs	r3, r0, #0
 8008016:	d00c      	beq.n	8008032 <MIC_Print+0x1be>
 8008018:	4b1a      	ldr	r3, [pc, #104]	@ (8008084 <MIC_Print+0x210>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4924      	ldr	r1, [pc, #144]	@ (80080b0 <MIC_Print+0x23c>)
 800801e:	1c18      	adds	r0, r3, #0
 8008020:	f7f8 faa4 	bl	800056c <__aeabi_fcmpge>
 8008024:	1e03      	subs	r3, r0, #0
 8008026:	d004      	beq.n	8008032 <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8008028:	2201      	movs	r2, #1
 800802a:	2101      	movs	r1, #1
 800802c:	2000      	movs	r0, #0
 800802e:	f002 fcef 	bl	800aa10 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 8008032:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <MIC_Print+0x210>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	491e      	ldr	r1, [pc, #120]	@ (80080b0 <MIC_Print+0x23c>)
 8008038:	1c18      	adds	r0, r3, #0
 800803a:	f7f8 fa79 	bl	8000530 <__aeabi_fcmplt>
 800803e:	1e03      	subs	r3, r0, #0
 8008040:	d00c      	beq.n	800805c <MIC_Print+0x1e8>
 8008042:	4b10      	ldr	r3, [pc, #64]	@ (8008084 <MIC_Print+0x210>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	491b      	ldr	r1, [pc, #108]	@ (80080b4 <MIC_Print+0x240>)
 8008048:	1c18      	adds	r0, r3, #0
 800804a:	f7f8 fa8f 	bl	800056c <__aeabi_fcmpge>
 800804e:	1e03      	subs	r3, r0, #0
 8008050:	d004      	beq.n	800805c <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 8008052:	2201      	movs	r2, #1
 8008054:	2100      	movs	r1, #0
 8008056:	2001      	movs	r0, #1
 8008058:	f002 fcda 	bl	800aa10 <SetDBLED>
  }
  if(dBc < 35){//off
 800805c:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <MIC_Print+0x210>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4914      	ldr	r1, [pc, #80]	@ (80080b4 <MIC_Print+0x240>)
 8008062:	1c18      	adds	r0, r3, #0
 8008064:	f7f8 fa64 	bl	8000530 <__aeabi_fcmplt>
 8008068:	1e03      	subs	r3, r0, #0
 800806a:	d100      	bne.n	800806e <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 800806c:	e004      	b.n	8008078 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 800806e:	2200      	movs	r2, #0
 8008070:	2100      	movs	r1, #0
 8008072:	2000      	movs	r0, #0
 8008074:	f002 fccc 	bl	800aa10 <SetDBLED>
}
 8008078:	46c0      	nop			@ (mov r8, r8)
 800807a:	46bd      	mov	sp, r7
 800807c:	b002      	add	sp, #8
 800807e:	bd80      	pop	{r7, pc}
 8008080:	20000f90 	.word	0x20000f90
 8008084:	20000f60 	.word	0x20000f60
 8008088:	20000f94 	.word	0x20000f94
 800808c:	20000f64 	.word	0x20000f64
 8008090:	20000f95 	.word	0x20000f95
 8008094:	20000f8c 	.word	0x20000f8c
 8008098:	41200000 	.word	0x41200000
 800809c:	42b40000 	.word	0x42b40000
 80080a0:	42a00000 	.word	0x42a00000
 80080a4:	428c0000 	.word	0x428c0000
 80080a8:	42700000 	.word	0x42700000
 80080ac:	42480000 	.word	0x42480000
 80080b0:	42200000 	.word	0x42200000
 80080b4:	420c0000 	.word	0x420c0000

080080b8 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80080be:	4b11      	ldr	r3, [pc, #68]	@ (8008104 <MIC_TestMeasurementDone+0x4c>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	4a10      	ldr	r2, [pc, #64]	@ (8008108 <MIC_TestMeasurementDone+0x50>)
 80080c6:	4911      	ldr	r1, [pc, #68]	@ (800810c <MIC_TestMeasurementDone+0x54>)
 80080c8:	2002      	movs	r0, #2
 80080ca:	f003 fc0b 	bl	800b8e4 <CreateLine>
  if(DataReady) {
 80080ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <MIC_TestMeasurementDone+0x4c>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d010      	beq.n	80080fa <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 80080d8:	1dfb      	adds	r3, r7, #7
 80080da:	4a0d      	ldr	r2, [pc, #52]	@ (8008110 <MIC_TestMeasurementDone+0x58>)
 80080dc:	7812      	ldrb	r2, [r2, #0]
 80080de:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80080e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008110 <MIC_TestMeasurementDone+0x58>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	4a0b      	ldr	r2, [pc, #44]	@ (8008114 <MIC_TestMeasurementDone+0x5c>)
 80080e8:	4908      	ldr	r1, [pc, #32]	@ (800810c <MIC_TestMeasurementDone+0x54>)
 80080ea:	2002      	movs	r0, #2
 80080ec:	f003 fbfa 	bl	800b8e4 <CreateLine>
    ResetMICIndicator();
 80080f0:	f002 fd52 	bl	800ab98 <ResetMICIndicator>
    return Check;
 80080f4:	1dfb      	adds	r3, r7, #7
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	e000      	b.n	80080fc <MIC_TestMeasurementDone+0x44>
  }
  return false;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	0018      	movs	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	b002      	add	sp, #8
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20001280 	.word	0x20001280
 8008108:	08020370 	.word	0x08020370
 800810c:	0802039c 	.word	0x0802039c
 8008110:	20001281 	.word	0x20001281
 8008114:	080203a0 	.word	0x080203a0

08008118 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008118:	b40f      	push	{r0, r1, r2, r3}
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008120:	2314      	movs	r3, #20
 8008122:	18fb      	adds	r3, r7, r3
 8008124:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	2180      	movs	r1, #128	@ 0x80
 800812c:	0089      	lsls	r1, r1, #2
 800812e:	480a      	ldr	r0, [pc, #40]	@ (8008158 <print+0x40>)
 8008130:	f014 fa9a 	bl	801c668 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008134:	4b08      	ldr	r3, [pc, #32]	@ (8008158 <print+0x40>)
 8008136:	0018      	movs	r0, r3
 8008138:	f7f8 f818 	bl	800016c <strlen>
 800813c:	0003      	movs	r3, r0
 800813e:	b29a      	uxth	r2, r3
 8008140:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <print+0x40>)
 8008142:	0011      	movs	r1, r2
 8008144:	0018      	movs	r0, r3
 8008146:	f7ff fa13 	bl	8007570 <printString>
}
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	46bd      	mov	sp, r7
 800814e:	b002      	add	sp, #8
 8008150:	bc80      	pop	{r7}
 8008152:	bc08      	pop	{r3}
 8008154:	b004      	add	sp, #16
 8008156:	4718      	bx	r3
 8008158:	20000f98 	.word	0x20000f98

0800815c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	0018      	movs	r0, r3
 8008166:	2314      	movs	r3, #20
 8008168:	001a      	movs	r2, r3
 800816a:	2100      	movs	r1, #0
 800816c:	f014 fa88 	bl	801c680 <memset>
  RTC_DateTypeDef sDate = {0};
 8008170:	003b      	movs	r3, r7
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008176:	4b2e      	ldr	r3, [pc, #184]	@ (8008230 <MX_RTC_Init+0xd4>)
 8008178:	4a2e      	ldr	r2, [pc, #184]	@ (8008234 <MX_RTC_Init+0xd8>)
 800817a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800817c:	4b2c      	ldr	r3, [pc, #176]	@ (8008230 <MX_RTC_Init+0xd4>)
 800817e:	2200      	movs	r2, #0
 8008180:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008182:	4b2b      	ldr	r3, [pc, #172]	@ (8008230 <MX_RTC_Init+0xd4>)
 8008184:	227f      	movs	r2, #127	@ 0x7f
 8008186:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008188:	4b29      	ldr	r3, [pc, #164]	@ (8008230 <MX_RTC_Init+0xd4>)
 800818a:	22ff      	movs	r2, #255	@ 0xff
 800818c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800818e:	4b28      	ldr	r3, [pc, #160]	@ (8008230 <MX_RTC_Init+0xd4>)
 8008190:	2200      	movs	r2, #0
 8008192:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008194:	4b26      	ldr	r3, [pc, #152]	@ (8008230 <MX_RTC_Init+0xd4>)
 8008196:	2200      	movs	r2, #0
 8008198:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800819a:	4b25      	ldr	r3, [pc, #148]	@ (8008230 <MX_RTC_Init+0xd4>)
 800819c:	2200      	movs	r2, #0
 800819e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80081a0:	4b23      	ldr	r3, [pc, #140]	@ (8008230 <MX_RTC_Init+0xd4>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80081a6:	4b22      	ldr	r3, [pc, #136]	@ (8008230 <MX_RTC_Init+0xd4>)
 80081a8:	0018      	movs	r0, r3
 80081aa:	f00a fa89 	bl	80126c0 <HAL_RTC_Init>
 80081ae:	1e03      	subs	r3, r0, #0
 80081b0:	d001      	beq.n	80081b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80081b2:	f7ff fa25 	bl	8007600 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80081b6:	1d3b      	adds	r3, r7, #4
 80081b8:	220d      	movs	r2, #13
 80081ba:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80081bc:	1d3b      	adds	r3, r7, #4
 80081be:	2200      	movs	r2, #0
 80081c0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80081c2:	1d3b      	adds	r3, r7, #4
 80081c4:	2200      	movs	r2, #0
 80081c6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80081c8:	1d3b      	adds	r3, r7, #4
 80081ca:	2200      	movs	r2, #0
 80081cc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80081ce:	1d3b      	adds	r3, r7, #4
 80081d0:	2200      	movs	r2, #0
 80081d2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80081d4:	1d39      	adds	r1, r7, #4
 80081d6:	4b16      	ldr	r3, [pc, #88]	@ (8008230 <MX_RTC_Init+0xd4>)
 80081d8:	2200      	movs	r2, #0
 80081da:	0018      	movs	r0, r3
 80081dc:	f00a fb0c 	bl	80127f8 <HAL_RTC_SetTime>
 80081e0:	1e03      	subs	r3, r0, #0
 80081e2:	d001      	beq.n	80081e8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80081e4:	f7ff fa0c 	bl	8007600 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80081e8:	003b      	movs	r3, r7
 80081ea:	2206      	movs	r2, #6
 80081ec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80081ee:	003b      	movs	r3, r7
 80081f0:	2211      	movs	r2, #17
 80081f2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 80081f4:	003b      	movs	r3, r7
 80081f6:	2217      	movs	r2, #23
 80081f8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 80081fa:	003b      	movs	r3, r7
 80081fc:	2218      	movs	r2, #24
 80081fe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008200:	0039      	movs	r1, r7
 8008202:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <MX_RTC_Init+0xd4>)
 8008204:	2200      	movs	r2, #0
 8008206:	0018      	movs	r0, r3
 8008208:	f00a fbfe 	bl	8012a08 <HAL_RTC_SetDate>
 800820c:	1e03      	subs	r3, r0, #0
 800820e:	d001      	beq.n	8008214 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008210:	f7ff f9f6 	bl	8007600 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008214:	4b06      	ldr	r3, [pc, #24]	@ (8008230 <MX_RTC_Init+0xd4>)
 8008216:	2200      	movs	r2, #0
 8008218:	2100      	movs	r1, #0
 800821a:	0018      	movs	r0, r3
 800821c:	f00a fdae 	bl	8012d7c <HAL_RTCEx_SetWakeUpTimer>
 8008220:	1e03      	subs	r3, r0, #0
 8008222:	d001      	beq.n	8008228 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008224:	f7ff f9ec 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008228:	46c0      	nop			@ (mov r8, r8)
 800822a:	46bd      	mov	sp, r7
 800822c:	b006      	add	sp, #24
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20001198 	.word	0x20001198
 8008234:	40002800 	.word	0x40002800

08008238 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a06      	ldr	r2, [pc, #24]	@ (8008260 <HAL_RTC_MspInit+0x28>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d106      	bne.n	8008258 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800824a:	4b06      	ldr	r3, [pc, #24]	@ (8008264 <HAL_RTC_MspInit+0x2c>)
 800824c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800824e:	4b05      	ldr	r3, [pc, #20]	@ (8008264 <HAL_RTC_MspInit+0x2c>)
 8008250:	2180      	movs	r1, #128	@ 0x80
 8008252:	02c9      	lsls	r1, r1, #11
 8008254:	430a      	orrs	r2, r1
 8008256:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008258:	46c0      	nop			@ (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	b002      	add	sp, #8
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40002800 	.word	0x40002800
 8008264:	40021000 	.word	0x40021000

08008268 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d113      	bne.n	80082ae <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	22fe      	movs	r2, #254	@ 0xfe
 800828a:	0592      	lsls	r2, r2, #22
 800828c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a1a      	ldr	r2, [pc, #104]	@ (80082fc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8008292:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a1a      	ldr	r2, [pc, #104]	@ (8008300 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8008298:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a19      	ldr	r2, [pc, #100]	@ (8008304 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800829e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a19      	ldr	r2, [pc, #100]	@ (8008308 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80082a4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4a18      	ldr	r2, [pc, #96]	@ (800830c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80082aa:	61da      	str	r2, [r3, #28]
 80082ac:	e011      	b.n	80082d2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4a17      	ldr	r2, [pc, #92]	@ (8008310 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80082b2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4a17      	ldr	r2, [pc, #92]	@ (8008314 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80082b8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a16      	ldr	r2, [pc, #88]	@ (8008318 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80082be:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a16      	ldr	r2, [pc, #88]	@ (800831c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80082c4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4a15      	ldr	r2, [pc, #84]	@ (8008320 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80082ca:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4a15      	ldr	r2, [pc, #84]	@ (8008324 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80082d0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4a14      	ldr	r2, [pc, #80]	@ (8008328 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80082d6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a14      	ldr	r2, [pc, #80]	@ (800832c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80082dc:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a12      	ldr	r2, [pc, #72]	@ (800832c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80082e2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4a12      	ldr	r2, [pc, #72]	@ (8008330 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80082e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 f831 	bl	8008354 <GasIndexAlgorithm_reset>
}
 80082f2:	46c0      	nop			@ (mov r8, r8)
 80082f4:	46bd      	mov	sp, r7
 80082f6:	b004      	add	sp, #16
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	46c0      	nop			@ (mov r8, r8)
 80082fc:	00002710 	.word	0x00002710
 8008300:	44340000 	.word	0x44340000
 8008304:	46859800 	.word	0x46859800
 8008308:	46a05000 	.word	0x46a05000
 800830c:	41f00000 	.word	0x41f00000
 8008310:	42c80000 	.word	0x42c80000
 8008314:	00004e20 	.word	0x00004e20
 8008318:	43340000 	.word	0x43340000
 800831c:	4528c000 	.word	0x4528c000
 8008320:	45a32000 	.word	0x45a32000
 8008324:	43aa0000 	.word	0x43aa0000
 8008328:	43660000 	.word	0x43660000
 800832c:	41400000 	.word	0x41400000
 8008330:	42480000 	.word	0x42480000

08008334 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800833e:	22fe      	movs	r2, #254	@ 0xfe
 8008340:	0592      	lsls	r2, r2, #22
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	0018      	movs	r0, r3
 8008348:	f7ff ff8e 	bl	8008268 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800834c:	46c0      	nop			@ (mov r8, r8)
 800834e:	46bd      	mov	sp, r7
 8008350:	b002      	add	sp, #8
 8008352:	bd80      	pop	{r7, pc}

08008354 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	0018      	movs	r0, r3
 8008372:	f000 f805 	bl	8008380 <GasIndexAlgorithm__init_instances>
}
 8008376:	46c0      	nop			@ (mov r8, r8)
 8008378:	46bd      	mov	sp, r7
 800837a:	b002      	add	sp, #8
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8008380:	b590      	push	{r4, r7, lr}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	0018      	movs	r0, r3
 800838c:	f000 f8e8 	bl	8008560 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	0018      	movs	r0, r3
 8008394:	f000 f9a6 	bl	80086e4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8008398:	1c04      	adds	r4, r0, #0
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	0018      	movs	r0, r3
 800839e:	f000 f9ab 	bl	80086f8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80083a2:	1c02      	adds	r2, r0, #0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	1c21      	adds	r1, r4, #0
 80083a8:	0018      	movs	r0, r3
 80083aa:	f000 fc3b 	bl	8008c24 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d107      	bne.n	80083c6 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80083b6:	23fe      	movs	r3, #254	@ 0xfe
 80083b8:	059b      	lsls	r3, r3, #22
 80083ba:	4a0a      	ldr	r2, [pc, #40]	@ (80083e4 <GasIndexAlgorithm__init_instances+0x64>)
 80083bc:	490a      	ldr	r1, [pc, #40]	@ (80083e8 <GasIndexAlgorithm__init_instances+0x68>)
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fc86 	bl	8008cd0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80083c4:	e005      	b.n	80083d2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80083c6:	4b09      	ldr	r3, [pc, #36]	@ (80083ec <GasIndexAlgorithm__init_instances+0x6c>)
 80083c8:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <GasIndexAlgorithm__init_instances+0x70>)
 80083ca:	490a      	ldr	r1, [pc, #40]	@ (80083f4 <GasIndexAlgorithm__init_instances+0x74>)
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fc7f 	bl	8008cd0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	0018      	movs	r0, r3
 80083d6:	f000 fd35 	bl	8008e44 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80083da:	46c0      	nop			@ (mov r8, r8)
 80083dc:	46bd      	mov	sp, r7
 80083de:	b003      	add	sp, #12
 80083e0:	bd90      	pop	{r4, r7, pc}
 80083e2:	46c0      	nop			@ (mov r8, r8)
 80083e4:	bc257a78 	.word	0xbc257a78
 80083e8:	44198000 	.word	0x44198000
 80083ec:	42c80000 	.word	0x42c80000
 80083f0:	bbd4fdf4 	.word	0xbbd4fdf4
 80083f4:	43550000 	.word	0x43550000

080083f8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80083f8:	b590      	push	{r4, r7, lr}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008408:	4952      	ldr	r1, [pc, #328]	@ (8008554 <GasIndexAlgorithm_process+0x15c>)
 800840a:	1c18      	adds	r0, r3, #0
 800840c:	f7f8 f89a 	bl	8000544 <__aeabi_fcmple>
 8008410:	1e03      	subs	r3, r0, #0
 8008412:	d00c      	beq.n	800842e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	1c19      	adds	r1, r3, #0
 800841e:	1c10      	adds	r0, r2, #0
 8008420:	f7f8 fa4e 	bl	80008c0 <__aeabi_fadd>
 8008424:	1c03      	adds	r3, r0, #0
 8008426:	1c1a      	adds	r2, r3, #0
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30
 800842c:	e080      	b.n	8008530 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	dd25      	ble.n	8008480 <GasIndexAlgorithm_process+0x88>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4a48      	ldr	r2, [pc, #288]	@ (8008558 <GasIndexAlgorithm_process+0x160>)
 8008438:	4293      	cmp	r3, r2
 800843a:	dc21      	bgt.n	8008480 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	dc04      	bgt.n	8008450 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	e00d      	b.n	800846c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4a41      	ldr	r2, [pc, #260]	@ (800855c <GasIndexAlgorithm_process+0x164>)
 8008456:	4694      	mov	ip, r2
 8008458:	4463      	add	r3, ip
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	429a      	cmp	r2, r3
 800845e:	dd05      	ble.n	800846c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	4a3d      	ldr	r2, [pc, #244]	@ (800855c <GasIndexAlgorithm_process+0x164>)
 8008466:	4694      	mov	ip, r2
 8008468:	4463      	add	r3, ip
 800846a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	0018      	movs	r0, r3
 8008476:	f7f9 f8ab 	bl	80015d0 <__aeabi_i2f>
 800847a:	1c02      	adds	r2, r0, #0
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	0018      	movs	r0, r3
 800848c:	f000 f945 	bl	800871a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8008490:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8008492:	d014      	beq.n	80084be <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	1c11      	adds	r1, r2, #0
 800849c:	0018      	movs	r0, r3
 800849e:	f000 fbd1 	bl	8008c44 <GasIndexAlgorithm__mox_model__process>
 80084a2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	1c11      	adds	r1, r2, #0
 80084b0:	0018      	movs	r0, r3
 80084b2:	f000 fc25 	bl	8008d00 <GasIndexAlgorithm__sigmoid_scaled__process>
 80084b6:	1c02      	adds	r2, r0, #0
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80084bc:	e003      	b.n	80084c6 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1c11      	adds	r1, r2, #0
 80084ce:	0018      	movs	r0, r3
 80084d0:	f000 fcec 	bl	8008eac <GasIndexAlgorithm__adaptive_lowpass__process>
 80084d4:	1c02      	adds	r2, r0, #0
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084de:	21fc      	movs	r1, #252	@ 0xfc
 80084e0:	0589      	lsls	r1, r1, #22
 80084e2:	1c18      	adds	r0, r3, #0
 80084e4:	f7f8 f824 	bl	8000530 <__aeabi_fcmplt>
 80084e8:	1e03      	subs	r3, r0, #0
 80084ea:	d003      	beq.n	80084f4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	22fc      	movs	r2, #252	@ 0xfc
 80084f0:	0592      	lsls	r2, r2, #22
 80084f2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f8:	2100      	movs	r1, #0
 80084fa:	1c18      	adds	r0, r3, #0
 80084fc:	f7f8 f82c 	bl	8000558 <__aeabi_fcmpgt>
 8008500:	1e03      	subs	r3, r0, #0
 8008502:	d015      	beq.n	8008530 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	1c11      	adds	r1, r2, #0
 800850c:	0018      	movs	r0, r3
 800850e:	f000 fa4f 	bl	80089b0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	0018      	movs	r0, r3
 8008516:	f000 f8e5 	bl	80086e4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800851a:	1c04      	adds	r4, r0, #0
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	0018      	movs	r0, r3
 8008520:	f000 f8ea 	bl	80086f8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8008524:	1c02      	adds	r2, r0, #0
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	1c21      	adds	r1, r4, #0
 800852a:	0018      	movs	r0, r3
 800852c:	f000 fb7a 	bl	8008c24 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008534:	21fc      	movs	r1, #252	@ 0xfc
 8008536:	0589      	lsls	r1, r1, #22
 8008538:	1c18      	adds	r0, r3, #0
 800853a:	f7f8 f9c1 	bl	80008c0 <__aeabi_fadd>
 800853e:	1c03      	adds	r3, r0, #0
 8008540:	1c18      	adds	r0, r3, #0
 8008542:	f7f9 f825 	bl	8001590 <__aeabi_f2iz>
 8008546:	0002      	movs	r2, r0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	601a      	str	r2, [r3, #0]
    return;
 800854c:	46c0      	nop			@ (mov r8, r8)
}
 800854e:	46bd      	mov	sp, r7
 8008550:	b005      	add	sp, #20
 8008552:	bd90      	pop	{r4, r7, pc}
 8008554:	42340000 	.word	0x42340000
 8008558:	0000fde7 	.word	0x0000fde7
 800855c:	00007fff 	.word	0x00007fff

08008560 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008560:	b5b0      	push	{r4, r5, r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	223c      	movs	r2, #60	@ 0x3c
 800856c:	2100      	movs	r1, #0
 800856e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4952      	ldr	r1, [pc, #328]	@ (80086d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800858a:	1c18      	adds	r0, r3, #0
 800858c:	f7f8 fb22 	bl	8000bd4 <__aeabi_fdiv>
 8008590:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8008592:	2188      	movs	r1, #136	@ 0x88
 8008594:	05c9      	lsls	r1, r1, #23
 8008596:	1c18      	adds	r0, r3, #0
 8008598:	f7f8 fd02 	bl	8000fa0 <__aeabi_fmul>
 800859c:	1c03      	adds	r3, r0, #0
 800859e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	494a      	ldr	r1, [pc, #296]	@ (80086d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80085aa:	1c18      	adds	r0, r3, #0
 80085ac:	f7f8 fb12 	bl	8000bd4 <__aeabi_fdiv>
 80085b0:	1c03      	adds	r3, r0, #0
 80085b2:	1c19      	adds	r1, r3, #0
 80085b4:	1c20      	adds	r0, r4, #0
 80085b6:	f7f8 f983 	bl	80008c0 <__aeabi_fadd>
 80085ba:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80085bc:	1c19      	adds	r1, r3, #0
 80085be:	1c28      	adds	r0, r5, #0
 80085c0:	f7f8 fb08 	bl	8000bd4 <__aeabi_fdiv>
 80085c4:	1c03      	adds	r3, r0, #0
 80085c6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	4940      	ldr	r1, [pc, #256]	@ (80086d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80085d2:	1c18      	adds	r0, r3, #0
 80085d4:	f7f8 fafe 	bl	8000bd4 <__aeabi_fdiv>
 80085d8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80085da:	2185      	movs	r1, #133	@ 0x85
 80085dc:	05c9      	lsls	r1, r1, #23
 80085de:	1c18      	adds	r0, r3, #0
 80085e0:	f7f8 fcde 	bl	8000fa0 <__aeabi_fmul>
 80085e4:	1c03      	adds	r3, r0, #0
 80085e6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4938      	ldr	r1, [pc, #224]	@ (80086d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80085f2:	1c18      	adds	r0, r3, #0
 80085f4:	f7f8 faee 	bl	8000bd4 <__aeabi_fdiv>
 80085f8:	1c03      	adds	r3, r0, #0
 80085fa:	1c19      	adds	r1, r3, #0
 80085fc:	1c20      	adds	r0, r4, #0
 80085fe:	f7f8 f95f 	bl	80008c0 <__aeabi_fadd>
 8008602:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8008604:	1c19      	adds	r1, r3, #0
 8008606:	1c28      	adds	r0, r5, #0
 8008608:	f7f8 fae4 	bl	8000bd4 <__aeabi_fdiv>
 800860c:	1c03      	adds	r3, r0, #0
 800860e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d118      	bne.n	800864e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8008620:	2188      	movs	r1, #136	@ 0x88
 8008622:	05c9      	lsls	r1, r1, #23
 8008624:	1c18      	adds	r0, r3, #0
 8008626:	f7f8 fcbb 	bl	8000fa0 <__aeabi_fmul>
 800862a:	1c03      	adds	r3, r0, #0
 800862c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8008632:	4929      	ldr	r1, [pc, #164]	@ (80086d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8008634:	1c18      	adds	r0, r3, #0
 8008636:	f7f8 f943 	bl	80008c0 <__aeabi_fadd>
 800863a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800863c:	1c19      	adds	r1, r3, #0
 800863e:	1c20      	adds	r0, r4, #0
 8008640:	f7f8 fac8 	bl	8000bd4 <__aeabi_fdiv>
 8008644:	1c03      	adds	r3, r0, #0
 8008646:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	655a      	str	r2, [r3, #84]	@ 0x54
 800864c:	e017      	b.n	800867e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8008652:	2188      	movs	r1, #136	@ 0x88
 8008654:	05c9      	lsls	r1, r1, #23
 8008656:	1c18      	adds	r0, r3, #0
 8008658:	f7f8 fca2 	bl	8000fa0 <__aeabi_fmul>
 800865c:	1c03      	adds	r3, r0, #0
 800865e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8008664:	491d      	ldr	r1, [pc, #116]	@ (80086dc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8008666:	1c18      	adds	r0, r3, #0
 8008668:	f7f8 f92a 	bl	80008c0 <__aeabi_fadd>
 800866c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800866e:	1c19      	adds	r1, r3, #0
 8008670:	1c20      	adds	r0, r4, #0
 8008672:	f7f8 faaf 	bl	8000bd4 <__aeabi_fdiv>
 8008676:	1c03      	adds	r3, r0, #0
 8008678:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8008682:	2185      	movs	r1, #133	@ 0x85
 8008684:	05c9      	lsls	r1, r1, #23
 8008686:	1c18      	adds	r0, r3, #0
 8008688:	f7f8 fc8a 	bl	8000fa0 <__aeabi_fmul>
 800868c:	1c03      	adds	r3, r0, #0
 800868e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	4912      	ldr	r1, [pc, #72]	@ (80086e0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8008696:	1c18      	adds	r0, r3, #0
 8008698:	f7f8 f912 	bl	80008c0 <__aeabi_fadd>
 800869c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800869e:	1c19      	adds	r1, r3, #0
 80086a0:	1c20      	adds	r0, r4, #0
 80086a2:	f7f8 fa97 	bl	8000bd4 <__aeabi_fdiv>
 80086a6:	1c03      	adds	r3, r0, #0
 80086a8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80086cc:	46c0      	nop			@ (mov r8, r8)
 80086ce:	46bd      	mov	sp, r7
 80086d0:	b002      	add	sp, #8
 80086d2:	bdb0      	pop	{r4, r5, r7, pc}
 80086d4:	45610000 	.word	0x45610000
 80086d8:	44960000 	.word	0x44960000
 80086dc:	41a00000 	.word	0x41a00000
 80086e0:	451c4000 	.word	0x451c4000

080086e4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80086f0:	1c18      	adds	r0, r3, #0
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b002      	add	sp, #8
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8008708:	1c19      	adds	r1, r3, #0
 800870a:	1c10      	adds	r0, r2, #0
 800870c:	f7f8 f8d8 	bl	80008c0 <__aeabi_fadd>
 8008710:	1c03      	adds	r3, r0, #0
}
 8008712:	1c18      	adds	r0, r3, #0
 8008714:	46bd      	mov	sp, r7
 8008716:	b002      	add	sp, #8
 8008718:	bd80      	pop	{r7, pc}

0800871a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	223c      	movs	r2, #60	@ 0x3c
 8008726:	5c9b      	ldrb	r3, [r3, r2]
}
 8008728:	0018      	movs	r0, r3
 800872a:	46bd      	mov	sp, r7
 800872c:	b002      	add	sp, #8
 800872e:	bd80      	pop	{r7, pc}

08008730 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8008730:	b5b0      	push	{r4, r5, r7, lr}
 8008732:	b08c      	sub	sp, #48	@ 0x30
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800873c:	1c19      	adds	r1, r3, #0
 800873e:	4895      	ldr	r0, [pc, #596]	@ (8008994 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8008740:	f7f8 fd6c 	bl	800121c <__aeabi_fsub>
 8008744:	1c03      	adds	r3, r0, #0
 8008746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800874c:	1c19      	adds	r1, r3, #0
 800874e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008750:	f7f7 ff02 	bl	8000558 <__aeabi_fcmpgt>
 8008754:	1e03      	subs	r3, r0, #0
 8008756:	d00b      	beq.n	8008770 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8008760:	1c19      	adds	r1, r3, #0
 8008762:	1c10      	adds	r0, r2, #0
 8008764:	f7f8 f8ac 	bl	80008c0 <__aeabi_fadd>
 8008768:	1c03      	adds	r3, r0, #0
 800876a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008774:	1c19      	adds	r1, r3, #0
 8008776:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008778:	f7f7 feee 	bl	8000558 <__aeabi_fcmpgt>
 800877c:	1e03      	subs	r3, r0, #0
 800877e:	d00b      	beq.n	8008798 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8008788:	1c19      	adds	r1, r3, #0
 800878a:	1c10      	adds	r0, r2, #0
 800878c:	f7f8 f898 	bl	80008c0 <__aeabi_fadd>
 8008790:	1c03      	adds	r3, r0, #0
 8008792:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6959      	ldr	r1, [r3, #20]
 800879c:	4a7e      	ldr	r2, [pc, #504]	@ (8008998 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	0018      	movs	r0, r3
 80087a2:	f000 f9f1 	bl	8008b88 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	1c11      	adds	r1, r2, #0
 80087ae:	0018      	movs	r0, r3
 80087b0:	f000 f9fa 	bl	8008ba8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80087b4:	1c03      	adds	r3, r0, #0
 80087b6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80087c4:	1c19      	adds	r1, r3, #0
 80087c6:	1c10      	adds	r0, r2, #0
 80087c8:	f7f8 fd28 	bl	800121c <__aeabi_fsub>
 80087cc:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80087ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d0:	1c18      	adds	r0, r3, #0
 80087d2:	f7f8 fbe5 	bl	8000fa0 <__aeabi_fmul>
 80087d6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80087d8:	1c19      	adds	r1, r3, #0
 80087da:	1c20      	adds	r0, r4, #0
 80087dc:	f7f8 f870 	bl	80008c0 <__aeabi_fadd>
 80087e0:	1c03      	adds	r3, r0, #0
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80087ec:	1c19      	adds	r1, r3, #0
 80087ee:	486b      	ldr	r0, [pc, #428]	@ (800899c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80087f0:	f7f8 fd14 	bl	800121c <__aeabi_fsub>
 80087f4:	1c03      	adds	r3, r0, #0
 80087f6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	1c11      	adds	r1, r2, #0
 8008800:	0018      	movs	r0, r3
 8008802:	f000 f9d1 	bl	8008ba8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008806:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008808:	1c19      	adds	r1, r3, #0
 800880a:	1c28      	adds	r0, r5, #0
 800880c:	f7f8 fbc8 	bl	8000fa0 <__aeabi_fmul>
 8008810:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8008812:	1c19      	adds	r1, r3, #0
 8008814:	1c20      	adds	r0, r4, #0
 8008816:	f7f8 f853 	bl	80008c0 <__aeabi_fadd>
 800881a:	1c03      	adds	r3, r0, #0
 800881c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800881e:	4a60      	ldr	r2, [pc, #384]	@ (80089a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8008820:	6a39      	ldr	r1, [r7, #32]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	0018      	movs	r0, r3
 8008826:	f000 f9af 	bl	8008b88 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	1c11      	adds	r1, r2, #0
 8008832:	0018      	movs	r0, r3
 8008834:	f000 f9b8 	bl	8008ba8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008838:	1c03      	adds	r3, r0, #0
 800883a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800883c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800883e:	69f8      	ldr	r0, [r7, #28]
 8008840:	f7f8 fbae 	bl	8000fa0 <__aeabi_fmul>
 8008844:	1c03      	adds	r3, r0, #0
 8008846:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6999      	ldr	r1, [r3, #24]
 8008850:	4a51      	ldr	r2, [pc, #324]	@ (8008998 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	0018      	movs	r0, r3
 8008856:	f000 f997 	bl	8008b88 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	1c11      	adds	r1, r2, #0
 8008862:	0018      	movs	r0, r3
 8008864:	f000 f9a0 	bl	8008ba8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008868:	1c03      	adds	r3, r0, #0
 800886a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8008878:	1c19      	adds	r1, r3, #0
 800887a:	1c10      	adds	r0, r2, #0
 800887c:	f7f8 fcce 	bl	800121c <__aeabi_fsub>
 8008880:	1c03      	adds	r3, r0, #0
 8008882:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8008884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008886:	69b8      	ldr	r0, [r7, #24]
 8008888:	f7f8 fcc8 	bl	800121c <__aeabi_fsub>
 800888c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800888e:	1c19      	adds	r1, r3, #0
 8008890:	1c28      	adds	r0, r5, #0
 8008892:	f7f8 fb85 	bl	8000fa0 <__aeabi_fmul>
 8008896:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8008898:	1c19      	adds	r1, r3, #0
 800889a:	1c20      	adds	r0, r4, #0
 800889c:	f7f8 f810 	bl	80008c0 <__aeabi_fadd>
 80088a0:	1c03      	adds	r3, r0, #0
 80088a2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80088ac:	1c19      	adds	r1, r3, #0
 80088ae:	483b      	ldr	r0, [pc, #236]	@ (800899c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80088b0:	f7f8 fcb4 	bl	800121c <__aeabi_fsub>
 80088b4:	1c03      	adds	r3, r0, #0
 80088b6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	1c11      	adds	r1, r2, #0
 80088c0:	0018      	movs	r0, r3
 80088c2:	f000 f971 	bl	8008ba8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80088c6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80088c8:	1c19      	adds	r1, r3, #0
 80088ca:	1c28      	adds	r0, r5, #0
 80088cc:	f7f8 fb68 	bl	8000fa0 <__aeabi_fmul>
 80088d0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80088d2:	1c19      	adds	r1, r3, #0
 80088d4:	1c20      	adds	r0, r4, #0
 80088d6:	f7f7 fff3 	bl	80008c0 <__aeabi_fadd>
 80088da:	1c03      	adds	r3, r0, #0
 80088dc:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80088de:	4a30      	ldr	r2, [pc, #192]	@ (80089a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80088e0:	6939      	ldr	r1, [r7, #16]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	0018      	movs	r0, r3
 80088e6:	f000 f94f 	bl	8008b88 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	1c11      	adds	r1, r2, #0
 80088f2:	0018      	movs	r0, r3
 80088f4:	f000 f958 	bl	8008ba8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80088f8:	1c03      	adds	r3, r0, #0
 80088fa:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80088fc:	6979      	ldr	r1, [r7, #20]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7f8 fb4e 	bl	8000fa0 <__aeabi_fmul>
 8008904:	1c03      	adds	r3, r0, #0
 8008906:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	4923      	ldr	r1, [pc, #140]	@ (80089a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8008916:	1c18      	adds	r0, r3, #0
 8008918:	f7f8 f95c 	bl	8000bd4 <__aeabi_fdiv>
 800891c:	1c03      	adds	r3, r0, #0
 800891e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8008920:	69f9      	ldr	r1, [r7, #28]
 8008922:	20fe      	movs	r0, #254	@ 0xfe
 8008924:	0580      	lsls	r0, r0, #22
 8008926:	f7f8 fc79 	bl	800121c <__aeabi_fsub>
 800892a:	1c03      	adds	r3, r0, #0
 800892c:	491e      	ldr	r1, [pc, #120]	@ (80089a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800892e:	1c18      	adds	r0, r3, #0
 8008930:	f7f8 fb36 	bl	8000fa0 <__aeabi_fmul>
 8008934:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8008936:	491d      	ldr	r1, [pc, #116]	@ (80089ac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8008938:	1c18      	adds	r0, r3, #0
 800893a:	f7f8 fc6f 	bl	800121c <__aeabi_fsub>
 800893e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8008940:	1c19      	adds	r1, r3, #0
 8008942:	1c28      	adds	r0, r5, #0
 8008944:	f7f8 fb2c 	bl	8000fa0 <__aeabi_fmul>
 8008948:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800894a:	1c19      	adds	r1, r3, #0
 800894c:	1c20      	adds	r0, r4, #0
 800894e:	f7f7 ffb7 	bl	80008c0 <__aeabi_fadd>
 8008952:	1c03      	adds	r3, r0, #0
 8008954:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800895e:	2100      	movs	r1, #0
 8008960:	1c18      	adds	r0, r3, #0
 8008962:	f7f7 fde5 	bl	8000530 <__aeabi_fcmplt>
 8008966:	1e03      	subs	r3, r0, #0
 8008968:	d002      	beq.n	8008970 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8008978:	1c19      	adds	r1, r3, #0
 800897a:	1c10      	adds	r0, r2, #0
 800897c:	f7f7 fdec 	bl	8000558 <__aeabi_fcmpgt>
 8008980:	1e03      	subs	r3, r0, #0
 8008982:	d100      	bne.n	8008986 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8008984:	e002      	b.n	800898c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800898c:	46c0      	nop			@ (mov r8, r8)
 800898e:	46bd      	mov	sp, r7
 8008990:	b00c      	add	sp, #48	@ 0x30
 8008992:	bdb0      	pop	{r4, r5, r7, pc}
 8008994:	46fffe00 	.word	0x46fffe00
 8008998:	3c23d70a 	.word	0x3c23d70a
 800899c:	43ff0000 	.word	0x43ff0000
 80089a0:	3db851ec 	.word	0x3db851ec
 80089a4:	42700000 	.word	0x42700000
 80089a8:	3fa66666 	.word	0x3fa66666
 80089ac:	3e99999a 	.word	0x3e99999a

080089b0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80089b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	223c      	movs	r2, #60	@ 0x3c
 80089be:	5c9b      	ldrb	r3, [r3, r2]
 80089c0:	2201      	movs	r2, #1
 80089c2:	4053      	eors	r3, r2
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	223c      	movs	r2, #60	@ 0x3c
 80089ce:	2101      	movs	r1, #1
 80089d0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80089de:	e0c8      	b.n	8008b72 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e4:	4965      	ldr	r1, [pc, #404]	@ (8008b7c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80089e6:	1c18      	adds	r0, r3, #0
 80089e8:	f7f7 fdc0 	bl	800056c <__aeabi_fcmpge>
 80089ec:	1e03      	subs	r3, r0, #0
 80089ee:	d107      	bne.n	8008a00 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80089f4:	4962      	ldr	r1, [pc, #392]	@ (8008b80 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80089f6:	1c18      	adds	r0, r3, #0
 80089f8:	f7f7 fda4 	bl	8000544 <__aeabi_fcmple>
 80089fc:	1e03      	subs	r3, r0, #0
 80089fe:	d00e      	beq.n	8008a1e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008a08:	1c19      	adds	r1, r3, #0
 8008a0a:	1c10      	adds	r0, r2, #0
 8008a0c:	f7f7 ff58 	bl	80008c0 <__aeabi_fadd>
 8008a10:	1c03      	adds	r3, r0, #0
 8008a12:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a22:	1c19      	adds	r1, r3, #0
 8008a24:	6838      	ldr	r0, [r7, #0]
 8008a26:	f7f8 fbf9 	bl	800121c <__aeabi_fsub>
 8008a2a:	1c03      	adds	r3, r0, #0
 8008a2c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	0018      	movs	r0, r3
 8008a32:	f7ff fe7d 	bl	8008730 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3a:	1c19      	adds	r1, r3, #0
 8008a3c:	6838      	ldr	r0, [r7, #0]
 8008a3e:	f7f8 fbed 	bl	800121c <__aeabi_fsub>
 8008a42:	1c03      	adds	r3, r0, #0
 8008a44:	2185      	movs	r1, #133	@ 0x85
 8008a46:	05c9      	lsls	r1, r1, #23
 8008a48:	1c18      	adds	r0, r3, #0
 8008a4a:	f7f8 f8c3 	bl	8000bd4 <__aeabi_fdiv>
 8008a4e:	1c03      	adds	r3, r0, #0
 8008a50:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8008a52:	2100      	movs	r1, #0
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f7f7 fd6b 	bl	8000530 <__aeabi_fcmplt>
 8008a5a:	1e03      	subs	r3, r0, #0
 8008a5c:	d008      	beq.n	8008a70 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a62:	68f9      	ldr	r1, [r7, #12]
 8008a64:	1c18      	adds	r0, r3, #0
 8008a66:	f7f8 fbd9 	bl	800121c <__aeabi_fsub>
 8008a6a:	1c03      	adds	r3, r0, #0
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	e007      	b.n	8008a80 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a74:	1c19      	adds	r1, r3, #0
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7f7 ff22 	bl	80008c0 <__aeabi_fadd>
 8008a7c:	1c03      	adds	r3, r0, #0
 8008a7e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8008a80:	23fe      	movs	r3, #254	@ 0xfe
 8008a82:	059b      	lsls	r3, r3, #22
 8008a84:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8008a86:	493f      	ldr	r1, [pc, #252]	@ (8008b84 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8008a88:	6978      	ldr	r0, [r7, #20]
 8008a8a:	f7f7 fd65 	bl	8000558 <__aeabi_fcmpgt>
 8008a8e:	1e03      	subs	r3, r0, #0
 8008a90:	d010      	beq.n	8008ab4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8008a92:	493c      	ldr	r1, [pc, #240]	@ (8008b84 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8008a94:	6978      	ldr	r0, [r7, #20]
 8008a96:	f7f8 f89d 	bl	8000bd4 <__aeabi_fdiv>
 8008a9a:	1c03      	adds	r3, r0, #0
 8008a9c:	1c1c      	adds	r4, r3, #0
 8008a9e:	4939      	ldr	r1, [pc, #228]	@ (8008b84 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8008aa0:	6978      	ldr	r0, [r7, #20]
 8008aa2:	f7f8 f897 	bl	8000bd4 <__aeabi_fdiv>
 8008aa6:	1c03      	adds	r3, r0, #0
 8008aa8:	1c19      	adds	r1, r3, #0
 8008aaa:	1c20      	adds	r0, r4, #0
 8008aac:	f7f8 fa78 	bl	8000fa0 <__aeabi_fmul>
 8008ab0:	1c03      	adds	r3, r0, #0
 8008ab2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8008ab8:	1c19      	adds	r1, r3, #0
 8008aba:	2085      	movs	r0, #133	@ 0x85
 8008abc:	05c0      	lsls	r0, r0, #23
 8008abe:	f7f8 fbad 	bl	800121c <__aeabi_fsub>
 8008ac2:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8008ac4:	6939      	ldr	r1, [r7, #16]
 8008ac6:	1c18      	adds	r0, r3, #0
 8008ac8:	f7f8 fa6a 	bl	8000fa0 <__aeabi_fmul>
 8008acc:	1c03      	adds	r3, r0, #0
 8008ace:	1c18      	adds	r0, r3, #0
 8008ad0:	f016 fc42 	bl	801f358 <sqrtf>
 8008ad4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8008ade:	2185      	movs	r1, #133	@ 0x85
 8008ae0:	05c9      	lsls	r1, r1, #23
 8008ae2:	6938      	ldr	r0, [r7, #16]
 8008ae4:	f7f8 fa5c 	bl	8000fa0 <__aeabi_fmul>
 8008ae8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8008aea:	1c19      	adds	r1, r3, #0
 8008aec:	1c28      	adds	r0, r5, #0
 8008aee:	f7f8 f871 	bl	8000bd4 <__aeabi_fdiv>
 8008af2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8008af4:	1c19      	adds	r1, r3, #0
 8008af6:	1c20      	adds	r0, r4, #0
 8008af8:	f7f8 fa52 	bl	8000fa0 <__aeabi_fmul>
 8008afc:	1c03      	adds	r3, r0, #0
 8008afe:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	1c18      	adds	r0, r3, #0
 8008b08:	f7f8 fa4a 	bl	8000fa0 <__aeabi_fmul>
 8008b0c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8008b0e:	6939      	ldr	r1, [r7, #16]
 8008b10:	1c18      	adds	r0, r3, #0
 8008b12:	f7f8 f85f 	bl	8000bd4 <__aeabi_fdiv>
 8008b16:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	1c18      	adds	r0, r3, #0
 8008b1c:	f7f8 fa40 	bl	8000fa0 <__aeabi_fmul>
 8008b20:	1c03      	adds	r3, r0, #0
             sqrtf(
 8008b22:	1c19      	adds	r1, r3, #0
 8008b24:	1c20      	adds	r0, r4, #0
 8008b26:	f7f7 fecb 	bl	80008c0 <__aeabi_fadd>
 8008b2a:	1c03      	adds	r3, r0, #0
 8008b2c:	1c18      	adds	r0, r3, #0
 8008b2e:	f016 fc13 	bl	801f358 <sqrtf>
 8008b32:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8008b34:	1c19      	adds	r1, r3, #0
 8008b36:	1c30      	adds	r0, r6, #0
 8008b38:	f7f8 fa32 	bl	8000fa0 <__aeabi_fmul>
 8008b3c:	1c03      	adds	r3, r0, #0
 8008b3e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b4c:	68f9      	ldr	r1, [r7, #12]
 8008b4e:	1c18      	adds	r0, r3, #0
 8008b50:	f7f8 fa26 	bl	8000fa0 <__aeabi_fmul>
 8008b54:	1c03      	adds	r3, r0, #0
 8008b56:	2182      	movs	r1, #130	@ 0x82
 8008b58:	05c9      	lsls	r1, r1, #23
 8008b5a:	1c18      	adds	r0, r3, #0
 8008b5c:	f7f8 f83a 	bl	8000bd4 <__aeabi_fdiv>
 8008b60:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8008b62:	1c19      	adds	r1, r3, #0
 8008b64:	1c20      	adds	r0, r4, #0
 8008b66:	f7f7 feab 	bl	80008c0 <__aeabi_fadd>
 8008b6a:	1c03      	adds	r3, r0, #0
 8008b6c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008b72:	46c0      	nop			@ (mov r8, r8)
 8008b74:	46bd      	mov	sp, r7
 8008b76:	b007      	add	sp, #28
 8008b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	42c80000 	.word	0x42c80000
 8008b80:	c2c80000 	.word	0xc2c80000
 8008b84:	44b40000 	.word	0x44b40000

08008b88 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ba0:	46c0      	nop			@ (mov r8, r8)
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	b004      	add	sp, #16
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8008ba8:	b590      	push	{r4, r7, lr}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bba:	1c19      	adds	r1, r3, #0
 8008bbc:	6838      	ldr	r0, [r7, #0]
 8008bbe:	f7f8 fb2d 	bl	800121c <__aeabi_fsub>
 8008bc2:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8008bc4:	1c19      	adds	r1, r3, #0
 8008bc6:	1c20      	adds	r0, r4, #0
 8008bc8:	f7f8 f9ea 	bl	8000fa0 <__aeabi_fmul>
 8008bcc:	1c03      	adds	r3, r0, #0
 8008bce:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8008bd0:	4912      	ldr	r1, [pc, #72]	@ (8008c1c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7f7 fcac 	bl	8000530 <__aeabi_fcmplt>
 8008bd8:	1e03      	subs	r3, r0, #0
 8008bda:	d002      	beq.n	8008be2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8008bdc:	23fe      	movs	r3, #254	@ 0xfe
 8008bde:	059b      	lsls	r3, r3, #22
 8008be0:	e018      	b.n	8008c14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8008be2:	490f      	ldr	r1, [pc, #60]	@ (8008c20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7f7 fcb7 	bl	8000558 <__aeabi_fcmpgt>
 8008bea:	1e03      	subs	r3, r0, #0
 8008bec:	d001      	beq.n	8008bf2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e010      	b.n	8008c14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1c18      	adds	r0, r3, #0
 8008bf6:	f016 fb87 	bl	801f308 <expf>
 8008bfa:	1c03      	adds	r3, r0, #0
 8008bfc:	21fe      	movs	r1, #254	@ 0xfe
 8008bfe:	0589      	lsls	r1, r1, #22
 8008c00:	1c18      	adds	r0, r3, #0
 8008c02:	f7f7 fe5d 	bl	80008c0 <__aeabi_fadd>
 8008c06:	1c03      	adds	r3, r0, #0
 8008c08:	1c19      	adds	r1, r3, #0
 8008c0a:	20fe      	movs	r0, #254	@ 0xfe
 8008c0c:	0580      	lsls	r0, r0, #22
 8008c0e:	f7f7 ffe1 	bl	8000bd4 <__aeabi_fdiv>
 8008c12:	1c03      	adds	r3, r0, #0
    }
}
 8008c14:	1c18      	adds	r0, r3, #0
 8008c16:	46bd      	mov	sp, r7
 8008c18:	b005      	add	sp, #20
 8008c1a:	bd90      	pop	{r4, r7, pc}
 8008c1c:	c2480000 	.word	0xc2480000
 8008c20:	42480000 	.word	0x42480000

08008c24 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008c3c:	46c0      	nop			@ (mov r8, r8)
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	b004      	add	sp, #16
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d114      	bne.n	8008c80 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c5a:	1c19      	adds	r1, r3, #0
 8008c5c:	6838      	ldr	r0, [r7, #0]
 8008c5e:	f7f8 fadd 	bl	800121c <__aeabi_fsub>
 8008c62:	1c03      	adds	r3, r0, #0
 8008c64:	4918      	ldr	r1, [pc, #96]	@ (8008cc8 <GasIndexAlgorithm__mox_model__process+0x84>)
 8008c66:	1c18      	adds	r0, r3, #0
 8008c68:	f7f7 ffb4 	bl	8000bd4 <__aeabi_fdiv>
 8008c6c:	1c03      	adds	r3, r0, #0
 8008c6e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8008c74:	1c19      	adds	r1, r3, #0
 8008c76:	1c10      	adds	r0, r2, #0
 8008c78:	f7f8 f992 	bl	8000fa0 <__aeabi_fmul>
 8008c7c:	1c03      	adds	r3, r0, #0
 8008c7e:	e01f      	b.n	8008cc0 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c84:	1c19      	adds	r1, r3, #0
 8008c86:	6838      	ldr	r0, [r7, #0]
 8008c88:	f7f8 fac8 	bl	800121c <__aeabi_fsub>
 8008c8c:	1c03      	adds	r3, r0, #0
 8008c8e:	1c1a      	adds	r2, r3, #0
 8008c90:	2380      	movs	r3, #128	@ 0x80
 8008c92:	061b      	lsls	r3, r3, #24
 8008c94:	4053      	eors	r3, r2
 8008c96:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c9c:	490b      	ldr	r1, [pc, #44]	@ (8008ccc <GasIndexAlgorithm__mox_model__process+0x88>)
 8008c9e:	1c18      	adds	r0, r3, #0
 8008ca0:	f7f7 fe0e 	bl	80008c0 <__aeabi_fadd>
 8008ca4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008ca6:	1c19      	adds	r1, r3, #0
 8008ca8:	1c20      	adds	r0, r4, #0
 8008caa:	f7f7 ff93 	bl	8000bd4 <__aeabi_fdiv>
 8008cae:	1c03      	adds	r3, r0, #0
 8008cb0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8008cb6:	1c19      	adds	r1, r3, #0
 8008cb8:	1c10      	adds	r0, r2, #0
 8008cba:	f7f8 f971 	bl	8000fa0 <__aeabi_fmul>
 8008cbe:	1c03      	adds	r3, r0, #0
    }
}
 8008cc0:	1c18      	adds	r0, r3, #0
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	b003      	add	sp, #12
 8008cc6:	bd90      	pop	{r4, r7, pc}
 8008cc8:	44fa0000 	.word	0x44fa0000
 8008ccc:	435c0000 	.word	0x435c0000

08008cd0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2180      	movs	r1, #128	@ 0x80
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2184      	movs	r1, #132	@ 0x84
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2188      	movs	r1, #136	@ 0x88
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	505a      	str	r2, [r3, r1]
}
 8008cf6:	46c0      	nop			@ (mov r8, r8)
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	b004      	add	sp, #16
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2280      	movs	r2, #128	@ 0x80
 8008d0e:	589c      	ldr	r4, [r3, r2]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2284      	movs	r2, #132	@ 0x84
 8008d14:	589b      	ldr	r3, [r3, r2]
 8008d16:	1c19      	adds	r1, r3, #0
 8008d18:	6838      	ldr	r0, [r7, #0]
 8008d1a:	f7f8 fa7f 	bl	800121c <__aeabi_fsub>
 8008d1e:	1c03      	adds	r3, r0, #0
 8008d20:	1c19      	adds	r1, r3, #0
 8008d22:	1c20      	adds	r0, r4, #0
 8008d24:	f7f8 f93c 	bl	8000fa0 <__aeabi_fmul>
 8008d28:	1c03      	adds	r3, r0, #0
 8008d2a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8008d2c:	4940      	ldr	r1, [pc, #256]	@ (8008e30 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8008d2e:	68b8      	ldr	r0, [r7, #8]
 8008d30:	f7f7 fbfe 	bl	8000530 <__aeabi_fcmplt>
 8008d34:	1e03      	subs	r3, r0, #0
 8008d36:	d001      	beq.n	8008d3c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8008d38:	4b3e      	ldr	r3, [pc, #248]	@ (8008e34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008d3a:	e075      	b.n	8008e28 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8008d3c:	493e      	ldr	r1, [pc, #248]	@ (8008e38 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8008d3e:	68b8      	ldr	r0, [r7, #8]
 8008d40:	f7f7 fc0a 	bl	8000558 <__aeabi_fcmpgt>
 8008d44:	1e03      	subs	r3, r0, #0
 8008d46:	d001      	beq.n	8008d4c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e06d      	b.n	8008e28 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6838      	ldr	r0, [r7, #0]
 8008d50:	f7f7 fc0c 	bl	800056c <__aeabi_fcmpge>
 8008d54:	1e03      	subs	r3, r0, #0
 8008d56:	d047      	beq.n	8008de8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2288      	movs	r2, #136	@ 0x88
 8008d5c:	589b      	ldr	r3, [r3, r2]
 8008d5e:	21fe      	movs	r1, #254	@ 0xfe
 8008d60:	0589      	lsls	r1, r1, #22
 8008d62:	1c18      	adds	r0, r3, #0
 8008d64:	f7f7 fbde 	bl	8000524 <__aeabi_fcmpeq>
 8008d68:	1e03      	subs	r3, r0, #0
 8008d6a:	d00e      	beq.n	8008d8a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	1c19      	adds	r1, r3, #0
 8008d72:	20fe      	movs	r0, #254	@ 0xfe
 8008d74:	0580      	lsls	r0, r0, #22
 8008d76:	f7f8 fa51 	bl	800121c <__aeabi_fsub>
 8008d7a:	1c03      	adds	r3, r0, #0
 8008d7c:	492f      	ldr	r1, [pc, #188]	@ (8008e3c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8008d7e:	1c18      	adds	r0, r3, #0
 8008d80:	f7f8 f90e 	bl	8000fa0 <__aeabi_fmul>
 8008d84:	1c03      	adds	r3, r0, #0
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	e012      	b.n	8008db0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	492c      	ldr	r1, [pc, #176]	@ (8008e40 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8008d90:	1c18      	adds	r0, r3, #0
 8008d92:	f7f8 f905 	bl	8000fa0 <__aeabi_fmul>
 8008d96:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008d98:	1c19      	adds	r1, r3, #0
 8008d9a:	4826      	ldr	r0, [pc, #152]	@ (8008e34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008d9c:	f7f8 fa3e 	bl	800121c <__aeabi_fsub>
 8008da0:	1c03      	adds	r3, r0, #0
 8008da2:	2181      	movs	r1, #129	@ 0x81
 8008da4:	05c9      	lsls	r1, r1, #23
 8008da6:	1c18      	adds	r0, r3, #0
 8008da8:	f7f7 ff14 	bl	8000bd4 <__aeabi_fdiv>
 8008dac:	1c03      	adds	r3, r0, #0
 8008dae:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008db0:	4920      	ldr	r1, [pc, #128]	@ (8008e34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7f7 fd84 	bl	80008c0 <__aeabi_fadd>
 8008db8:	1c03      	adds	r3, r0, #0
 8008dba:	1c1c      	adds	r4, r3, #0
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	1c18      	adds	r0, r3, #0
 8008dc0:	f016 faa2 	bl	801f308 <expf>
 8008dc4:	1c03      	adds	r3, r0, #0
 8008dc6:	21fe      	movs	r1, #254	@ 0xfe
 8008dc8:	0589      	lsls	r1, r1, #22
 8008dca:	1c18      	adds	r0, r3, #0
 8008dcc:	f7f7 fd78 	bl	80008c0 <__aeabi_fadd>
 8008dd0:	1c03      	adds	r3, r0, #0
 8008dd2:	1c19      	adds	r1, r3, #0
 8008dd4:	1c20      	adds	r0, r4, #0
 8008dd6:	f7f7 fefd 	bl	8000bd4 <__aeabi_fdiv>
 8008dda:	1c03      	adds	r3, r0, #0
 8008ddc:	68f9      	ldr	r1, [r7, #12]
 8008dde:	1c18      	adds	r0, r3, #0
 8008de0:	f7f8 fa1c 	bl	800121c <__aeabi_fsub>
 8008de4:	1c03      	adds	r3, r0, #0
 8008de6:	e01f      	b.n	8008e28 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2188      	movs	r1, #136	@ 0x88
 8008df0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008df2:	1c19      	adds	r1, r3, #0
 8008df4:	1c10      	adds	r0, r2, #0
 8008df6:	f7f7 feed 	bl	8000bd4 <__aeabi_fdiv>
 8008dfa:	1c03      	adds	r3, r0, #0
 8008dfc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	1c18      	adds	r0, r3, #0
 8008e02:	f016 fa81 	bl	801f308 <expf>
 8008e06:	1c03      	adds	r3, r0, #0
 8008e08:	21fe      	movs	r1, #254	@ 0xfe
 8008e0a:	0589      	lsls	r1, r1, #22
 8008e0c:	1c18      	adds	r0, r3, #0
 8008e0e:	f7f7 fd57 	bl	80008c0 <__aeabi_fadd>
 8008e12:	1c03      	adds	r3, r0, #0
 8008e14:	1c19      	adds	r1, r3, #0
 8008e16:	4807      	ldr	r0, [pc, #28]	@ (8008e34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008e18:	f7f7 fedc 	bl	8000bd4 <__aeabi_fdiv>
 8008e1c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008e1e:	1c19      	adds	r1, r3, #0
 8008e20:	1c20      	adds	r0, r4, #0
 8008e22:	f7f8 f8bd 	bl	8000fa0 <__aeabi_fmul>
 8008e26:	1c03      	adds	r3, r0, #0
        }
    }
}
 8008e28:	1c18      	adds	r0, r3, #0
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b005      	add	sp, #20
 8008e2e:	bd90      	pop	{r4, r7, pc}
 8008e30:	c2480000 	.word	0xc2480000
 8008e34:	43fa0000 	.word	0x43fa0000
 8008e38:	42480000 	.word	0x42480000
 8008e3c:	3f8041ab 	.word	0x3f8041ab
 8008e40:	40a00000 	.word	0x40a00000

08008e44 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4913      	ldr	r1, [pc, #76]	@ (8008ea4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8008e56:	1c18      	adds	r0, r3, #0
 8008e58:	f7f7 fd32 	bl	80008c0 <__aeabi_fadd>
 8008e5c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008e5e:	1c19      	adds	r1, r3, #0
 8008e60:	1c20      	adds	r0, r4, #0
 8008e62:	f7f7 feb7 	bl	8000bd4 <__aeabi_fdiv>
 8008e66:	1c03      	adds	r3, r0, #0
 8008e68:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	228c      	movs	r2, #140	@ 0x8c
 8008e6e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	490b      	ldr	r1, [pc, #44]	@ (8008ea8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8008e7a:	1c18      	adds	r0, r3, #0
 8008e7c:	f7f7 fd20 	bl	80008c0 <__aeabi_fadd>
 8008e80:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008e82:	1c19      	adds	r1, r3, #0
 8008e84:	1c20      	adds	r0, r4, #0
 8008e86:	f7f7 fea5 	bl	8000bd4 <__aeabi_fdiv>
 8008e8a:	1c03      	adds	r3, r0, #0
 8008e8c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2290      	movs	r2, #144	@ 0x90
 8008e92:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2294      	movs	r2, #148	@ 0x94
 8008e98:	2100      	movs	r1, #0
 8008e9a:	5499      	strb	r1, [r3, r2]
}
 8008e9c:	46c0      	nop			@ (mov r8, r8)
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	b003      	add	sp, #12
 8008ea2:	bd90      	pop	{r4, r7, pc}
 8008ea4:	41a00000 	.word	0x41a00000
 8008ea8:	43fa0000 	.word	0x43fa0000

08008eac <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2294      	movs	r2, #148	@ 0x94
 8008eba:	5c9b      	ldrb	r3, [r3, r2]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	4053      	eors	r3, r2
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00f      	beq.n	8008ee6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2198      	movs	r1, #152	@ 0x98
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	219c      	movs	r1, #156	@ 0x9c
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	21a0      	movs	r1, #160	@ 0xa0
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2294      	movs	r2, #148	@ 0x94
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	228c      	movs	r2, #140	@ 0x8c
 8008eea:	589b      	ldr	r3, [r3, r2]
 8008eec:	1c19      	adds	r1, r3, #0
 8008eee:	20fe      	movs	r0, #254	@ 0xfe
 8008ef0:	0580      	lsls	r0, r0, #22
 8008ef2:	f7f8 f993 	bl	800121c <__aeabi_fsub>
 8008ef6:	1c03      	adds	r3, r0, #0
 8008ef8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2298      	movs	r2, #152	@ 0x98
 8008efe:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008f00:	1c19      	adds	r1, r3, #0
 8008f02:	f7f8 f84d 	bl	8000fa0 <__aeabi_fmul>
 8008f06:	1c03      	adds	r3, r0, #0
 8008f08:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	228c      	movs	r2, #140	@ 0x8c
 8008f0e:	589b      	ldr	r3, [r3, r2]
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	1c18      	adds	r0, r3, #0
 8008f14:	f7f8 f844 	bl	8000fa0 <__aeabi_fmul>
 8008f18:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8008f1a:	1c19      	adds	r1, r3, #0
 8008f1c:	1c20      	adds	r0, r4, #0
 8008f1e:	f7f7 fccf 	bl	80008c0 <__aeabi_fadd>
 8008f22:	1c03      	adds	r3, r0, #0
 8008f24:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2298      	movs	r2, #152	@ 0x98
 8008f2a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2290      	movs	r2, #144	@ 0x90
 8008f30:	589b      	ldr	r3, [r3, r2]
 8008f32:	1c19      	adds	r1, r3, #0
 8008f34:	20fe      	movs	r0, #254	@ 0xfe
 8008f36:	0580      	lsls	r0, r0, #22
 8008f38:	f7f8 f970 	bl	800121c <__aeabi_fsub>
 8008f3c:	1c03      	adds	r3, r0, #0
 8008f3e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	229c      	movs	r2, #156	@ 0x9c
 8008f44:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008f46:	1c19      	adds	r1, r3, #0
 8008f48:	f7f8 f82a 	bl	8000fa0 <__aeabi_fmul>
 8008f4c:	1c03      	adds	r3, r0, #0
 8008f4e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2290      	movs	r2, #144	@ 0x90
 8008f54:	589b      	ldr	r3, [r3, r2]
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	1c18      	adds	r0, r3, #0
 8008f5a:	f7f8 f821 	bl	8000fa0 <__aeabi_fmul>
 8008f5e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008f60:	1c19      	adds	r1, r3, #0
 8008f62:	1c20      	adds	r0, r4, #0
 8008f64:	f7f7 fcac 	bl	80008c0 <__aeabi_fadd>
 8008f68:	1c03      	adds	r3, r0, #0
 8008f6a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	229c      	movs	r2, #156	@ 0x9c
 8008f70:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2298      	movs	r2, #152	@ 0x98
 8008f76:	589a      	ldr	r2, [r3, r2]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	219c      	movs	r1, #156	@ 0x9c
 8008f7c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8008f7e:	1c19      	adds	r1, r3, #0
 8008f80:	1c10      	adds	r0, r2, #0
 8008f82:	f7f8 f94b 	bl	800121c <__aeabi_fsub>
 8008f86:	1c03      	adds	r3, r0, #0
 8008f88:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	6978      	ldr	r0, [r7, #20]
 8008f8e:	f7f7 facf 	bl	8000530 <__aeabi_fcmplt>
 8008f92:	1e03      	subs	r3, r0, #0
 8008f94:	d004      	beq.n	8008fa0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2280      	movs	r2, #128	@ 0x80
 8008f9a:	0612      	lsls	r2, r2, #24
 8008f9c:	4053      	eors	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008fa0:	4923      	ldr	r1, [pc, #140]	@ (8009030 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008fa2:	6978      	ldr	r0, [r7, #20]
 8008fa4:	f7f7 fffc 	bl	8000fa0 <__aeabi_fmul>
 8008fa8:	1c03      	adds	r3, r0, #0
 8008faa:	1c18      	adds	r0, r3, #0
 8008fac:	f016 f9ac 	bl	801f308 <expf>
 8008fb0:	1c03      	adds	r3, r0, #0
 8008fb2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008fb4:	491f      	ldr	r1, [pc, #124]	@ (8009034 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008fb6:	6938      	ldr	r0, [r7, #16]
 8008fb8:	f7f7 fff2 	bl	8000fa0 <__aeabi_fmul>
 8008fbc:	1c03      	adds	r3, r0, #0
 8008fbe:	491e      	ldr	r1, [pc, #120]	@ (8009038 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008fc0:	1c18      	adds	r0, r3, #0
 8008fc2:	f7f7 fc7d 	bl	80008c0 <__aeabi_fadd>
 8008fc6:	1c03      	adds	r3, r0, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685c      	ldr	r4, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	1c18      	adds	r0, r3, #0
 8008fd6:	f7f7 fc73 	bl	80008c0 <__aeabi_fadd>
 8008fda:	1c03      	adds	r3, r0, #0
 8008fdc:	1c19      	adds	r1, r3, #0
 8008fde:	1c20      	adds	r0, r4, #0
 8008fe0:	f7f7 fdf8 	bl	8000bd4 <__aeabi_fdiv>
 8008fe4:	1c03      	adds	r3, r0, #0
 8008fe6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008fe8:	68b9      	ldr	r1, [r7, #8]
 8008fea:	20fe      	movs	r0, #254	@ 0xfe
 8008fec:	0580      	lsls	r0, r0, #22
 8008fee:	f7f8 f915 	bl	800121c <__aeabi_fsub>
 8008ff2:	1c03      	adds	r3, r0, #0
 8008ff4:	1c18      	adds	r0, r3, #0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	22a0      	movs	r2, #160	@ 0xa0
 8008ffa:	589b      	ldr	r3, [r3, r2]
 8008ffc:	1c19      	adds	r1, r3, #0
 8008ffe:	f7f7 ffcf 	bl	8000fa0 <__aeabi_fmul>
 8009002:	1c03      	adds	r3, r0, #0
 8009004:	1c1c      	adds	r4, r3, #0
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	68b8      	ldr	r0, [r7, #8]
 800900a:	f7f7 ffc9 	bl	8000fa0 <__aeabi_fmul>
 800900e:	1c03      	adds	r3, r0, #0
 8009010:	1c19      	adds	r1, r3, #0
 8009012:	1c20      	adds	r0, r4, #0
 8009014:	f7f7 fc54 	bl	80008c0 <__aeabi_fadd>
 8009018:	1c03      	adds	r3, r0, #0
 800901a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	22a0      	movs	r2, #160	@ 0xa0
 8009020:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	22a0      	movs	r2, #160	@ 0xa0
 8009026:	589b      	ldr	r3, [r3, r2]
}
 8009028:	1c18      	adds	r0, r3, #0
 800902a:	46bd      	mov	sp, r7
 800902c:	b007      	add	sp, #28
 800902e:	bd90      	pop	{r4, r7, pc}
 8009030:	be4ccccd 	.word	0xbe4ccccd
 8009034:	43f00000 	.word	0x43f00000
 8009038:	41a00000 	.word	0x41a00000

0800903c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800903c:	b590      	push	{r4, r7, lr}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6039      	str	r1, [r7, #0]
 8009044:	0011      	movs	r1, r2
 8009046:	1dfb      	adds	r3, r7, #7
 8009048:	1c02      	adds	r2, r0, #0
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	1dbb      	adds	r3, r7, #6
 800904e:	1c0a      	adds	r2, r1, #0
 8009050:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8009052:	4b08      	ldr	r3, [pc, #32]	@ (8009074 <ReadRegister+0x38>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d008      	beq.n	800906c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800905a:	4b06      	ldr	r3, [pc, #24]	@ (8009074 <ReadRegister+0x38>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1dba      	adds	r2, r7, #6
 8009060:	7814      	ldrb	r4, [r2, #0]
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	1dfa      	adds	r2, r7, #7
 8009066:	7810      	ldrb	r0, [r2, #0]
 8009068:	0022      	movs	r2, r4
 800906a:	4798      	blx	r3
  }
}
 800906c:	46c0      	nop			@ (mov r8, r8)
 800906e:	46bd      	mov	sp, r7
 8009070:	b003      	add	sp, #12
 8009072:	bd90      	pop	{r4, r7, pc}
 8009074:	200011bc 	.word	0x200011bc

08009078 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8009078:	b590      	push	{r4, r7, lr}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6039      	str	r1, [r7, #0]
 8009080:	0011      	movs	r1, r2
 8009082:	1dfb      	adds	r3, r7, #7
 8009084:	1c02      	adds	r2, r0, #0
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	1dbb      	adds	r3, r7, #6
 800908a:	1c0a      	adds	r2, r1, #0
 800908c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800908e:	4b08      	ldr	r3, [pc, #32]	@ (80090b0 <WriteRegister+0x38>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d008      	beq.n	80090a8 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8009096:	4b06      	ldr	r3, [pc, #24]	@ (80090b0 <WriteRegister+0x38>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	1dba      	adds	r2, r7, #6
 800909c:	7814      	ldrb	r4, [r2, #0]
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	1dfa      	adds	r2, r7, #7
 80090a2:	7810      	ldrb	r0, [r2, #0]
 80090a4:	0022      	movs	r2, r4
 80090a6:	4798      	blx	r3
  }
}
 80090a8:	46c0      	nop			@ (mov r8, r8)
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b003      	add	sp, #12
 80090ae:	bd90      	pop	{r4, r7, pc}
 80090b0:	200011c0 	.word	0x200011c0

080090b4 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80090be:	4b07      	ldr	r3, [pc, #28]	@ (80090dc <SGP_Init+0x28>)
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80090c4:	4b06      	ldr	r3, [pc, #24]	@ (80090e0 <SGP_Init+0x2c>)
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80090ca:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <SGP_Init+0x30>)
 80090cc:	2100      	movs	r1, #0
 80090ce:	0018      	movs	r0, r3
 80090d0:	f7ff f930 	bl	8008334 <GasIndexAlgorithm_init>
}
 80090d4:	46c0      	nop			@ (mov r8, r8)
 80090d6:	46bd      	mov	sp, r7
 80090d8:	b002      	add	sp, #8
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	200011bc 	.word	0x200011bc
 80090e0:	200011c0 	.word	0x200011c0
 80090e4:	200011d0 	.word	0x200011d0

080090e8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80090ec:	4b13      	ldr	r3, [pc, #76]	@ (800913c <SGP_StartMeasurement+0x54>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00d      	beq.n	8009110 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80090f4:	4b12      	ldr	r3, [pc, #72]	@ (8009140 <SGP_StartMeasurement+0x58>)
 80090f6:	2208      	movs	r2, #8
 80090f8:	0019      	movs	r1, r3
 80090fa:	2059      	movs	r0, #89	@ 0x59
 80090fc:	f7ff ffbc 	bl	8009078 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8009100:	f002 fc6a 	bl	800b9d8 <GetCurrentHalTicks>
 8009104:	0003      	movs	r3, r0
 8009106:	331e      	adds	r3, #30
 8009108:	001a      	movs	r2, r3
 800910a:	4b0e      	ldr	r3, [pc, #56]	@ (8009144 <SGP_StartMeasurement+0x5c>)
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e00c      	b.n	800912a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8009110:	4b0d      	ldr	r3, [pc, #52]	@ (8009148 <SGP_StartMeasurement+0x60>)
 8009112:	2208      	movs	r2, #8
 8009114:	0019      	movs	r1, r3
 8009116:	2059      	movs	r0, #89	@ 0x59
 8009118:	f7ff ffae 	bl	8009078 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800911c:	f002 fc5c 	bl	800b9d8 <GetCurrentHalTicks>
 8009120:	0003      	movs	r3, r0
 8009122:	33aa      	adds	r3, #170	@ 0xaa
 8009124:	001a      	movs	r2, r3
 8009126:	4b09      	ldr	r3, [pc, #36]	@ (800914c <SGP_StartMeasurement+0x64>)
 8009128:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800912a:	4b09      	ldr	r3, [pc, #36]	@ (8009150 <SGP_StartMeasurement+0x68>)
 800912c:	2200      	movs	r2, #0
 800912e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8009130:	4b08      	ldr	r3, [pc, #32]	@ (8009154 <SGP_StartMeasurement+0x6c>)
 8009132:	2200      	movs	r2, #0
 8009134:	701a      	strb	r2, [r3, #0]
}
 8009136:	46c0      	nop			@ (mov r8, r8)
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20001278 	.word	0x20001278
 8009140:	20000090 	.word	0x20000090
 8009144:	200000a4 	.word	0x200000a4
 8009148:	20000088 	.word	0x20000088
 800914c:	2000009c 	.word	0x2000009c
 8009150:	200011ce 	.word	0x200011ce
 8009154:	200011cf 	.word	0x200011cf

08009158 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
 800915c:	4b04      	ldr	r3, [pc, #16]	@ (8009170 <SGP_HeatedUp+0x18>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	0018      	movs	r0, r3
 8009162:	f002 fb69 	bl	800b838 <TimestampIsReached>
 8009166:	0003      	movs	r3, r0
 8009168:	0018      	movs	r0, r3
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	46c0      	nop			@ (mov r8, r8)
 8009170:	2000009c 	.word	0x2000009c

08009174 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8009178:	4b04      	ldr	r3, [pc, #16]	@ (800918c <SGP_MeasurementReady+0x18>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	0018      	movs	r0, r3
 800917e:	f002 fb5b 	bl	800b838 <TimestampIsReached>
 8009182:	0003      	movs	r3, r0
}
 8009184:	0018      	movs	r0, r3
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	46c0      	nop			@ (mov r8, r8)
 800918c:	200000a4 	.word	0x200000a4

08009190 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8009194:	4b04      	ldr	r3, [pc, #16]	@ (80091a8 <SGP_MeasurementDone+0x18>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	0018      	movs	r0, r3
 800919a:	f002 fb4d 	bl	800b838 <TimestampIsReached>
 800919e:	0003      	movs	r3, r0
}
 80091a0:	0018      	movs	r0, r3
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	46c0      	nop			@ (mov r8, r8)
 80091a8:	200000a0 	.word	0x200000a0

080091ac <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80091b0:	4b04      	ldr	r3, [pc, #16]	@ (80091c4 <SGP_TurnHeaterOff+0x18>)
 80091b2:	2202      	movs	r2, #2
 80091b4:	0019      	movs	r1, r3
 80091b6:	2059      	movs	r0, #89	@ 0x59
 80091b8:	f7ff ff5e 	bl	8009078 <WriteRegister>
}
 80091bc:	46c0      	nop			@ (mov r8, r8)
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	46c0      	nop			@ (mov r8, r8)
 80091c4:	20000080 	.word	0x20000080

080091c8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80091c8:	b5b0      	push	{r4, r5, r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80091d0:	f7ff ffc2 	bl	8009158 <SGP_HeatedUp>
 80091d4:	1e03      	subs	r3, r0, #0
 80091d6:	d038      	beq.n	800924a <SGP_GetMeasurementValues+0x82>
 80091d8:	4bd5      	ldr	r3, [pc, #852]	@ (8009530 <SGP_GetMeasurementValues+0x368>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2201      	movs	r2, #1
 80091de:	4053      	eors	r3, r2
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d031      	beq.n	800924a <SGP_GetMeasurementValues+0x82>
 80091e6:	4bd3      	ldr	r3, [pc, #844]	@ (8009534 <SGP_GetMeasurementValues+0x36c>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2201      	movs	r2, #1
 80091ec:	4053      	eors	r3, r2
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d02a      	beq.n	800924a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80091f4:	4ad0      	ldr	r2, [pc, #832]	@ (8009538 <SGP_GetMeasurementValues+0x370>)
 80091f6:	4bd1      	ldr	r3, [pc, #836]	@ (800953c <SGP_GetMeasurementValues+0x374>)
 80091f8:	0019      	movs	r1, r3
 80091fa:	2003      	movs	r0, #3
 80091fc:	f002 fb72 	bl	800b8e4 <CreateLine>
    HeatUpIsDone = true;
 8009200:	4bcb      	ldr	r3, [pc, #812]	@ (8009530 <SGP_GetMeasurementValues+0x368>)
 8009202:	2201      	movs	r2, #1
 8009204:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8009206:	4bce      	ldr	r3, [pc, #824]	@ (8009540 <SGP_GetMeasurementValues+0x378>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00d      	beq.n	800922a <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800920e:	4bcd      	ldr	r3, [pc, #820]	@ (8009544 <SGP_GetMeasurementValues+0x37c>)
 8009210:	2208      	movs	r2, #8
 8009212:	0019      	movs	r1, r3
 8009214:	2059      	movs	r0, #89	@ 0x59
 8009216:	f7ff ff2f 	bl	8009078 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800921a:	f002 fbdd 	bl	800b9d8 <GetCurrentHalTicks>
 800921e:	0003      	movs	r3, r0
 8009220:	331e      	adds	r3, #30
 8009222:	001a      	movs	r2, r3
 8009224:	4bc8      	ldr	r3, [pc, #800]	@ (8009548 <SGP_GetMeasurementValues+0x380>)
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	e00c      	b.n	8009244 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800922a:	4bc8      	ldr	r3, [pc, #800]	@ (800954c <SGP_GetMeasurementValues+0x384>)
 800922c:	2208      	movs	r2, #8
 800922e:	0019      	movs	r1, r3
 8009230:	2059      	movs	r0, #89	@ 0x59
 8009232:	f7ff ff21 	bl	8009078 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8009236:	f002 fbcf 	bl	800b9d8 <GetCurrentHalTicks>
 800923a:	0003      	movs	r3, r0
 800923c:	331e      	adds	r3, #30
 800923e:	001a      	movs	r2, r3
 8009240:	4bc1      	ldr	r3, [pc, #772]	@ (8009548 <SGP_GetMeasurementValues+0x380>)
 8009242:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8009244:	4bbb      	ldr	r3, [pc, #748]	@ (8009534 <SGP_GetMeasurementValues+0x36c>)
 8009246:	2201      	movs	r2, #1
 8009248:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800924a:	4bb9      	ldr	r3, [pc, #740]	@ (8009530 <SGP_GetMeasurementValues+0x368>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d100      	bne.n	8009254 <SGP_GetMeasurementValues+0x8c>
 8009252:	e1a9      	b.n	80095a8 <SGP_GetMeasurementValues+0x3e0>
 8009254:	f7ff ff8e 	bl	8009174 <SGP_MeasurementReady>
 8009258:	1e03      	subs	r3, r0, #0
 800925a:	d100      	bne.n	800925e <SGP_GetMeasurementValues+0x96>
 800925c:	e1a4      	b.n	80095a8 <SGP_GetMeasurementValues+0x3e0>
 800925e:	4bbc      	ldr	r3, [pc, #752]	@ (8009550 <SGP_GetMeasurementValues+0x388>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2201      	movs	r2, #1
 8009264:	4053      	eors	r3, r2
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d100      	bne.n	800926e <SGP_GetMeasurementValues+0xa6>
 800926c:	e19c      	b.n	80095a8 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800926e:	4bb9      	ldr	r3, [pc, #740]	@ (8009554 <SGP_GetMeasurementValues+0x38c>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	4ab8      	ldr	r2, [pc, #736]	@ (8009558 <SGP_GetMeasurementValues+0x390>)
 8009276:	49b1      	ldr	r1, [pc, #708]	@ (800953c <SGP_GetMeasurementValues+0x374>)
 8009278:	2003      	movs	r0, #3
 800927a:	f002 fb33 	bl	800b8e4 <CreateLine>
    MeasurementIsReady = true;
 800927e:	4bb4      	ldr	r3, [pc, #720]	@ (8009550 <SGP_GetMeasurementValues+0x388>)
 8009280:	2201      	movs	r2, #1
 8009282:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8009284:	4bb5      	ldr	r3, [pc, #724]	@ (800955c <SGP_GetMeasurementValues+0x394>)
 8009286:	2203      	movs	r2, #3
 8009288:	0019      	movs	r1, r3
 800928a:	2059      	movs	r0, #89	@ 0x59
 800928c:	f7ff fed6 	bl	800903c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8009290:	4bb2      	ldr	r3, [pc, #712]	@ (800955c <SGP_GetMeasurementValues+0x394>)
 8009292:	2203      	movs	r2, #3
 8009294:	2103      	movs	r1, #3
 8009296:	0018      	movs	r0, r3
 8009298:	f000 f9ec 	bl	8009674 <CheckCRC>
 800929c:	0003      	movs	r3, r0
 800929e:	001a      	movs	r2, r3
 80092a0:	2301      	movs	r3, #1
 80092a2:	4053      	eors	r3, r2
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d02a      	beq.n	8009300 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 80092aa:	4aad      	ldr	r2, [pc, #692]	@ (8009560 <SGP_GetMeasurementValues+0x398>)
 80092ac:	4bad      	ldr	r3, [pc, #692]	@ (8009564 <SGP_GetMeasurementValues+0x39c>)
 80092ae:	0019      	movs	r1, r3
 80092b0:	2001      	movs	r0, #1
 80092b2:	f002 fb17 	bl	800b8e4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80092b6:	4aac      	ldr	r2, [pc, #688]	@ (8009568 <SGP_GetMeasurementValues+0x3a0>)
 80092b8:	4bac      	ldr	r3, [pc, #688]	@ (800956c <SGP_GetMeasurementValues+0x3a4>)
 80092ba:	0019      	movs	r1, r3
 80092bc:	2002      	movs	r0, #2
 80092be:	f002 fb11 	bl	800b8e4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80092c2:	230f      	movs	r3, #15
 80092c4:	18fb      	adds	r3, r7, r3
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
 80092ca:	e012      	b.n	80092f2 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80092cc:	240f      	movs	r4, #15
 80092ce:	193b      	adds	r3, r7, r4
 80092d0:	7818      	ldrb	r0, [r3, #0]
 80092d2:	193b      	adds	r3, r7, r4
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	4aa1      	ldr	r2, [pc, #644]	@ (800955c <SGP_GetMeasurementValues+0x394>)
 80092d8:	5cd3      	ldrb	r3, [r2, r3]
 80092da:	4aa5      	ldr	r2, [pc, #660]	@ (8009570 <SGP_GetMeasurementValues+0x3a8>)
 80092dc:	4997      	ldr	r1, [pc, #604]	@ (800953c <SGP_GetMeasurementValues+0x374>)
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	0003      	movs	r3, r0
 80092e2:	2003      	movs	r0, #3
 80092e4:	f002 fafe 	bl	800b8e4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80092e8:	193b      	adds	r3, r7, r4
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	193b      	adds	r3, r7, r4
 80092ee:	3201      	adds	r2, #1
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	230f      	movs	r3, #15
 80092f4:	18fb      	adds	r3, r7, r3
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d9e7      	bls.n	80092cc <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80092fc:	2300      	movs	r3, #0
 80092fe:	e16b      	b.n	80095d8 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8009300:	f002 fb6a 	bl	800b9d8 <GetCurrentHalTicks>
 8009304:	0003      	movs	r3, r0
 8009306:	22fa      	movs	r2, #250	@ 0xfa
 8009308:	0092      	lsls	r2, r2, #2
 800930a:	189a      	adds	r2, r3, r2
 800930c:	4b99      	ldr	r3, [pc, #612]	@ (8009574 <SGP_GetMeasurementValues+0x3ac>)
 800930e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8009310:	f7ff ff4c 	bl	80091ac <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8009314:	4b8f      	ldr	r3, [pc, #572]	@ (8009554 <SGP_GetMeasurementValues+0x38c>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	b2da      	uxtb	r2, r3
 800931c:	4b8d      	ldr	r3, [pc, #564]	@ (8009554 <SGP_GetMeasurementValues+0x38c>)
 800931e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8009320:	4b8c      	ldr	r3, [pc, #560]	@ (8009554 <SGP_GetMeasurementValues+0x38c>)
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	4b94      	ldr	r3, [pc, #592]	@ (8009578 <SGP_GetMeasurementValues+0x3b0>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d200      	bcs.n	800932e <SGP_GetMeasurementValues+0x166>
 800932c:	e13c      	b.n	80095a8 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800932e:	4b8b      	ldr	r3, [pc, #556]	@ (800955c <SGP_GetMeasurementValues+0x394>)
 8009330:	785b      	ldrb	r3, [r3, #1]
 8009332:	021b      	lsls	r3, r3, #8
 8009334:	b21a      	sxth	r2, r3
 8009336:	4b89      	ldr	r3, [pc, #548]	@ (800955c <SGP_GetMeasurementValues+0x394>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	b21b      	sxth	r3, r3
 800933c:	4313      	orrs	r3, r2
 800933e:	b21a      	sxth	r2, r3
 8009340:	240c      	movs	r4, #12
 8009342:	193b      	adds	r3, r7, r4
 8009344:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8009346:	193b      	adds	r3, r7, r4
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	4a8c      	ldr	r2, [pc, #560]	@ (800957c <SGP_GetMeasurementValues+0x3b4>)
 800934c:	497b      	ldr	r1, [pc, #492]	@ (800953c <SGP_GetMeasurementValues+0x374>)
 800934e:	2003      	movs	r0, #3
 8009350:	f002 fac8 	bl	800b8e4 <CreateLine>
      int32_t tempVocIndex = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8009358:	193b      	adds	r3, r7, r4
 800935a:	8819      	ldrh	r1, [r3, #0]
 800935c:	2308      	movs	r3, #8
 800935e:	18fa      	adds	r2, r7, r3
 8009360:	4b87      	ldr	r3, [pc, #540]	@ (8009580 <SGP_GetMeasurementValues+0x3b8>)
 8009362:	0018      	movs	r0, r3
 8009364:	f7ff f848 	bl	80083f8 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	4a86      	ldr	r2, [pc, #536]	@ (8009584 <SGP_GetMeasurementValues+0x3bc>)
 800936c:	4973      	ldr	r1, [pc, #460]	@ (800953c <SGP_GetMeasurementValues+0x374>)
 800936e:	2003      	movs	r0, #3
 8009370:	f002 fab8 	bl	800b8e4 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	dd5a      	ble.n	8009438 <SGP_GetMeasurementValues+0x270>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b64      	cmp	r3, #100	@ 0x64
 8009388:	dc56      	bgt.n	8009438 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	0018      	movs	r0, r3
 8009390:	f7fa f816 	bl	80033c0 <__aeabi_i2d>
 8009394:	2200      	movs	r2, #0
 8009396:	4b7c      	ldr	r3, [pc, #496]	@ (8009588 <SGP_GetMeasurementValues+0x3c0>)
 8009398:	f7f8 fd0c 	bl	8001db4 <__aeabi_ddiv>
 800939c:	0002      	movs	r2, r0
 800939e:	000b      	movs	r3, r1
 80093a0:	2000      	movs	r0, #0
 80093a2:	497a      	ldr	r1, [pc, #488]	@ (800958c <SGP_GetMeasurementValues+0x3c4>)
 80093a4:	f7f9 fc12 	bl	8002bcc <__aeabi_dsub>
 80093a8:	0002      	movs	r2, r0
 80093aa:	000b      	movs	r3, r1
 80093ac:	0014      	movs	r4, r2
 80093ae:	001d      	movs	r5, r3
 80093b0:	4b77      	ldr	r3, [pc, #476]	@ (8009590 <SGP_GetMeasurementValues+0x3c8>)
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	0018      	movs	r0, r3
 80093b6:	f7fa f803 	bl	80033c0 <__aeabi_i2d>
 80093ba:	0002      	movs	r2, r0
 80093bc:	000b      	movs	r3, r1
 80093be:	0020      	movs	r0, r4
 80093c0:	0029      	movs	r1, r5
 80093c2:	f7f9 f93b 	bl	800263c <__aeabi_dmul>
 80093c6:	0002      	movs	r2, r0
 80093c8:	000b      	movs	r3, r1
 80093ca:	0010      	movs	r0, r2
 80093cc:	0019      	movs	r1, r3
 80093ce:	f7f7 f93d 	bl	800064c <__aeabi_d2uiz>
 80093d2:	0003      	movs	r3, r0
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	4b6f      	ldr	r3, [pc, #444]	@ (8009594 <SGP_GetMeasurementValues+0x3cc>)
 80093d8:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	0018      	movs	r0, r3
 80093e0:	f7f9 ffee 	bl	80033c0 <__aeabi_i2d>
 80093e4:	2200      	movs	r2, #0
 80093e6:	4b68      	ldr	r3, [pc, #416]	@ (8009588 <SGP_GetMeasurementValues+0x3c0>)
 80093e8:	f7f8 fce4 	bl	8001db4 <__aeabi_ddiv>
 80093ec:	0002      	movs	r2, r0
 80093ee:	000b      	movs	r3, r1
 80093f0:	0014      	movs	r4, r2
 80093f2:	001d      	movs	r5, r3
 80093f4:	4b66      	ldr	r3, [pc, #408]	@ (8009590 <SGP_GetMeasurementValues+0x3c8>)
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7f9 ffe1 	bl	80033c0 <__aeabi_i2d>
 80093fe:	0002      	movs	r2, r0
 8009400:	000b      	movs	r3, r1
 8009402:	0020      	movs	r0, r4
 8009404:	0029      	movs	r1, r5
 8009406:	f7f9 f919 	bl	800263c <__aeabi_dmul>
 800940a:	0002      	movs	r2, r0
 800940c:	000b      	movs	r3, r1
 800940e:	0010      	movs	r0, r2
 8009410:	0019      	movs	r1, r3
 8009412:	f7f7 f91b 	bl	800064c <__aeabi_d2uiz>
 8009416:	0003      	movs	r3, r0
 8009418:	b29a      	uxth	r2, r3
 800941a:	4b5f      	ldr	r3, [pc, #380]	@ (8009598 <SGP_GetMeasurementValues+0x3d0>)
 800941c:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800941e:	4b5c      	ldr	r3, [pc, #368]	@ (8009590 <SGP_GetMeasurementValues+0x3c8>)
 8009420:	881a      	ldrh	r2, [r3, #0]
 8009422:	4b5e      	ldr	r3, [pc, #376]	@ (800959c <SGP_GetMeasurementValues+0x3d4>)
 8009424:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 8009426:	4b5d      	ldr	r3, [pc, #372]	@ (800959c <SGP_GetMeasurementValues+0x3d4>)
 8009428:	8818      	ldrh	r0, [r3, #0]
 800942a:	4b5a      	ldr	r3, [pc, #360]	@ (8009594 <SGP_GetMeasurementValues+0x3cc>)
 800942c:	8819      	ldrh	r1, [r3, #0]
 800942e:	4b5a      	ldr	r3, [pc, #360]	@ (8009598 <SGP_GetMeasurementValues+0x3d0>)
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	001a      	movs	r2, r3
 8009434:	f001 fb36 	bl	800aaa4 <SetVocLED>
      }
      if(*vocIndex > 100){
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b64      	cmp	r3, #100	@ 0x64
 800943e:	dd66      	ble.n	800950e <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	0018      	movs	r0, r3
 8009446:	f7f9 ffbb 	bl	80033c0 <__aeabi_i2d>
 800944a:	2200      	movs	r2, #0
 800944c:	4b4e      	ldr	r3, [pc, #312]	@ (8009588 <SGP_GetMeasurementValues+0x3c0>)
 800944e:	f7f9 fbbd 	bl	8002bcc <__aeabi_dsub>
 8009452:	0002      	movs	r2, r0
 8009454:	000b      	movs	r3, r1
 8009456:	0010      	movs	r0, r2
 8009458:	0019      	movs	r1, r3
 800945a:	2200      	movs	r2, #0
 800945c:	4b50      	ldr	r3, [pc, #320]	@ (80095a0 <SGP_GetMeasurementValues+0x3d8>)
 800945e:	f7f8 fca9 	bl	8001db4 <__aeabi_ddiv>
 8009462:	0002      	movs	r2, r0
 8009464:	000b      	movs	r3, r1
 8009466:	0014      	movs	r4, r2
 8009468:	001d      	movs	r5, r3
 800946a:	4b49      	ldr	r3, [pc, #292]	@ (8009590 <SGP_GetMeasurementValues+0x3c8>)
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	0018      	movs	r0, r3
 8009470:	f7f9 ffa6 	bl	80033c0 <__aeabi_i2d>
 8009474:	0002      	movs	r2, r0
 8009476:	000b      	movs	r3, r1
 8009478:	0020      	movs	r0, r4
 800947a:	0029      	movs	r1, r5
 800947c:	f7f9 f8de 	bl	800263c <__aeabi_dmul>
 8009480:	0002      	movs	r2, r0
 8009482:	000b      	movs	r3, r1
 8009484:	0010      	movs	r0, r2
 8009486:	0019      	movs	r1, r3
 8009488:	f7f7 f8e0 	bl	800064c <__aeabi_d2uiz>
 800948c:	0003      	movs	r3, r0
 800948e:	b29a      	uxth	r2, r3
 8009490:	4b40      	ldr	r3, [pc, #256]	@ (8009594 <SGP_GetMeasurementValues+0x3cc>)
 8009492:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	0018      	movs	r0, r3
 800949a:	f7f9 ff91 	bl	80033c0 <__aeabi_i2d>
 800949e:	2200      	movs	r2, #0
 80094a0:	4b39      	ldr	r3, [pc, #228]	@ (8009588 <SGP_GetMeasurementValues+0x3c0>)
 80094a2:	f7f9 fb93 	bl	8002bcc <__aeabi_dsub>
 80094a6:	0002      	movs	r2, r0
 80094a8:	000b      	movs	r3, r1
 80094aa:	0010      	movs	r0, r2
 80094ac:	0019      	movs	r1, r3
 80094ae:	2200      	movs	r2, #0
 80094b0:	4b3b      	ldr	r3, [pc, #236]	@ (80095a0 <SGP_GetMeasurementValues+0x3d8>)
 80094b2:	f7f8 fc7f 	bl	8001db4 <__aeabi_ddiv>
 80094b6:	0002      	movs	r2, r0
 80094b8:	000b      	movs	r3, r1
 80094ba:	2000      	movs	r0, #0
 80094bc:	4933      	ldr	r1, [pc, #204]	@ (800958c <SGP_GetMeasurementValues+0x3c4>)
 80094be:	f7f9 fb85 	bl	8002bcc <__aeabi_dsub>
 80094c2:	0002      	movs	r2, r0
 80094c4:	000b      	movs	r3, r1
 80094c6:	0014      	movs	r4, r2
 80094c8:	001d      	movs	r5, r3
 80094ca:	4b31      	ldr	r3, [pc, #196]	@ (8009590 <SGP_GetMeasurementValues+0x3c8>)
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	0018      	movs	r0, r3
 80094d0:	f7f9 ff76 	bl	80033c0 <__aeabi_i2d>
 80094d4:	0002      	movs	r2, r0
 80094d6:	000b      	movs	r3, r1
 80094d8:	0020      	movs	r0, r4
 80094da:	0029      	movs	r1, r5
 80094dc:	f7f9 f8ae 	bl	800263c <__aeabi_dmul>
 80094e0:	0002      	movs	r2, r0
 80094e2:	000b      	movs	r3, r1
 80094e4:	0010      	movs	r0, r2
 80094e6:	0019      	movs	r1, r3
 80094e8:	f7f7 f8b0 	bl	800064c <__aeabi_d2uiz>
 80094ec:	0003      	movs	r3, r0
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	4b2a      	ldr	r3, [pc, #168]	@ (800959c <SGP_GetMeasurementValues+0x3d4>)
 80094f2:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80094f4:	4b26      	ldr	r3, [pc, #152]	@ (8009590 <SGP_GetMeasurementValues+0x3c8>)
 80094f6:	881a      	ldrh	r2, [r3, #0]
 80094f8:	4b27      	ldr	r3, [pc, #156]	@ (8009598 <SGP_GetMeasurementValues+0x3d0>)
 80094fa:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 80094fc:	4b27      	ldr	r3, [pc, #156]	@ (800959c <SGP_GetMeasurementValues+0x3d4>)
 80094fe:	8818      	ldrh	r0, [r3, #0]
 8009500:	4b24      	ldr	r3, [pc, #144]	@ (8009594 <SGP_GetMeasurementValues+0x3cc>)
 8009502:	8819      	ldrh	r1, [r3, #0]
 8009504:	4b24      	ldr	r3, [pc, #144]	@ (8009598 <SGP_GetMeasurementValues+0x3d0>)
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	001a      	movs	r2, r3
 800950a:	f001 facb 	bl	800aaa4 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800950e:	4b11      	ldr	r3, [pc, #68]	@ (8009554 <SGP_GetMeasurementValues+0x38c>)
 8009510:	2200      	movs	r2, #0
 8009512:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8009514:	4a23      	ldr	r2, [pc, #140]	@ (80095a4 <SGP_GetMeasurementValues+0x3dc>)
 8009516:	4b09      	ldr	r3, [pc, #36]	@ (800953c <SGP_GetMeasurementValues+0x374>)
 8009518:	0019      	movs	r1, r3
 800951a:	2003      	movs	r0, #3
 800951c:	f002 f9e2 	bl	800b8e4 <CreateLine>
      HT_MeasurementReceived = false;
 8009520:	4b07      	ldr	r3, [pc, #28]	@ (8009540 <SGP_GetMeasurementValues+0x378>)
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8009526:	4b03      	ldr	r3, [pc, #12]	@ (8009534 <SGP_GetMeasurementValues+0x36c>)
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800952c:	2301      	movs	r3, #1
 800952e:	e053      	b.n	80095d8 <SGP_GetMeasurementValues+0x410>
 8009530:	200011ce 	.word	0x200011ce
 8009534:	20001279 	.word	0x20001279
 8009538:	080203b8 	.word	0x080203b8
 800953c:	080203e4 	.word	0x080203e4
 8009540:	20001278 	.word	0x20001278
 8009544:	20000090 	.word	0x20000090
 8009548:	200000a4 	.word	0x200000a4
 800954c:	20000088 	.word	0x20000088
 8009550:	200011cf 	.word	0x200011cf
 8009554:	200011cd 	.word	0x200011cd
 8009558:	080203e8 	.word	0x080203e8
 800955c:	200011c4 	.word	0x200011c4
 8009560:	08020418 	.word	0x08020418
 8009564:	0802043c 	.word	0x0802043c
 8009568:	08020440 	.word	0x08020440
 800956c:	08020460 	.word	0x08020460
 8009570:	08020464 	.word	0x08020464
 8009574:	200000a0 	.word	0x200000a0
 8009578:	20000098 	.word	0x20000098
 800957c:	08020484 	.word	0x08020484
 8009580:	200011d0 	.word	0x200011d0
 8009584:	08020498 	.word	0x08020498
 8009588:	40590000 	.word	0x40590000
 800958c:	3ff00000 	.word	0x3ff00000
 8009590:	200000a8 	.word	0x200000a8
 8009594:	2000127e 	.word	0x2000127e
 8009598:	2000127c 	.word	0x2000127c
 800959c:	2000127a 	.word	0x2000127a
 80095a0:	40790000 	.word	0x40790000
 80095a4:	080204ac 	.word	0x080204ac
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80095a8:	f7ff fdf2 	bl	8009190 <SGP_MeasurementDone>
 80095ac:	1e03      	subs	r3, r0, #0
 80095ae:	d012      	beq.n	80095d6 <SGP_GetMeasurementValues+0x40e>
 80095b0:	4b0b      	ldr	r3, [pc, #44]	@ (80095e0 <SGP_GetMeasurementValues+0x418>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00e      	beq.n	80095d6 <SGP_GetMeasurementValues+0x40e>
 80095b8:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <SGP_GetMeasurementValues+0x41c>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80095c0:	4a09      	ldr	r2, [pc, #36]	@ (80095e8 <SGP_GetMeasurementValues+0x420>)
 80095c2:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <SGP_GetMeasurementValues+0x424>)
 80095c4:	0019      	movs	r1, r3
 80095c6:	2003      	movs	r0, #3
 80095c8:	f002 f98c 	bl	800b8e4 <CreateLine>
    SGP_StartMeasurement();
 80095cc:	f7ff fd8c 	bl	80090e8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80095d0:	4b07      	ldr	r3, [pc, #28]	@ (80095f0 <SGP_GetMeasurementValues+0x428>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	0018      	movs	r0, r3
 80095da:	46bd      	mov	sp, r7
 80095dc:	b004      	add	sp, #16
 80095de:	bdb0      	pop	{r4, r5, r7, pc}
 80095e0:	200011ce 	.word	0x200011ce
 80095e4:	200011cf 	.word	0x200011cf
 80095e8:	080204d0 	.word	0x080204d0
 80095ec:	080203e4 	.word	0x080203e4
 80095f0:	20001279 	.word	0x20001279

080095f4 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80095fa:	4b1a      	ldr	r3, [pc, #104]	@ (8009664 <SGP_DeviceConnected+0x70>)
 80095fc:	2202      	movs	r2, #2
 80095fe:	0019      	movs	r1, r3
 8009600:	2059      	movs	r0, #89	@ 0x59
 8009602:	f7ff fd39 	bl	8009078 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8009606:	2001      	movs	r0, #1
 8009608:	f002 fd12 	bl	800c030 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800960c:	4b16      	ldr	r3, [pc, #88]	@ (8009668 <SGP_DeviceConnected+0x74>)
 800960e:	2209      	movs	r2, #9
 8009610:	0019      	movs	r1, r3
 8009612:	2059      	movs	r0, #89	@ 0x59
 8009614:	f7ff fd12 	bl	800903c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8009618:	1dfb      	adds	r3, r7, #7
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	e011      	b.n	8009644 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8009620:	1dfb      	adds	r3, r7, #7
 8009622:	7818      	ldrb	r0, [r3, #0]
 8009624:	1dfb      	adds	r3, r7, #7
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	4a0f      	ldr	r2, [pc, #60]	@ (8009668 <SGP_DeviceConnected+0x74>)
 800962a:	5cd3      	ldrb	r3, [r2, r3]
 800962c:	4a0f      	ldr	r2, [pc, #60]	@ (800966c <SGP_DeviceConnected+0x78>)
 800962e:	4910      	ldr	r1, [pc, #64]	@ (8009670 <SGP_DeviceConnected+0x7c>)
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	0003      	movs	r3, r0
 8009634:	2002      	movs	r0, #2
 8009636:	f002 f955 	bl	800b8e4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800963a:	1dfb      	adds	r3, r7, #7
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	1dfb      	adds	r3, r7, #7
 8009640:	3201      	adds	r2, #1
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	1dfb      	adds	r3, r7, #7
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b08      	cmp	r3, #8
 800964a:	d9e9      	bls.n	8009620 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800964c:	4b06      	ldr	r3, [pc, #24]	@ (8009668 <SGP_DeviceConnected+0x74>)
 800964e:	2203      	movs	r2, #3
 8009650:	2109      	movs	r1, #9
 8009652:	0018      	movs	r0, r3
 8009654:	f000 f80e 	bl	8009674 <CheckCRC>
 8009658:	0003      	movs	r3, r0
}
 800965a:	0018      	movs	r0, r3
 800965c:	46bd      	mov	sp, r7
 800965e:	b002      	add	sp, #8
 8009660:	bd80      	pop	{r7, pc}
 8009662:	46c0      	nop			@ (mov r8, r8)
 8009664:	20000084 	.word	0x20000084
 8009668:	200011c4 	.word	0x200011c4
 800966c:	080204f0 	.word	0x080204f0
 8009670:	08020460 	.word	0x08020460

08009674 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8009674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009676:	b08f      	sub	sp, #60	@ 0x3c
 8009678:	af00      	add	r7, sp, #0
 800967a:	6278      	str	r0, [r7, #36]	@ 0x24
 800967c:	0008      	movs	r0, r1
 800967e:	0011      	movs	r1, r2
 8009680:	2323      	movs	r3, #35	@ 0x23
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	1c02      	adds	r2, r0, #0
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	2322      	movs	r3, #34	@ 0x22
 800968a:	18fb      	adds	r3, r7, r3
 800968c:	1c0a      	adds	r2, r1, #0
 800968e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8009690:	2317      	movs	r3, #23
 8009692:	2220      	movs	r2, #32
 8009694:	189b      	adds	r3, r3, r2
 8009696:	19db      	adds	r3, r3, r7
 8009698:	2200      	movs	r2, #0
 800969a:	701a      	strb	r2, [r3, #0]
 800969c:	e09f      	b.n	80097de <CheckCRC+0x16a>
 800969e:	466b      	mov	r3, sp
 80096a0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80096a2:	2322      	movs	r3, #34	@ 0x22
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	001a      	movs	r2, r3
 80096aa:	3a01      	subs	r2, #1
 80096ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80096ae:	60bb      	str	r3, [r7, #8]
 80096b0:	2200      	movs	r2, #0
 80096b2:	60fa      	str	r2, [r7, #12]
 80096b4:	68b8      	ldr	r0, [r7, #8]
 80096b6:	68f9      	ldr	r1, [r7, #12]
 80096b8:	0002      	movs	r2, r0
 80096ba:	0f52      	lsrs	r2, r2, #29
 80096bc:	000c      	movs	r4, r1
 80096be:	00e4      	lsls	r4, r4, #3
 80096c0:	61fc      	str	r4, [r7, #28]
 80096c2:	69fc      	ldr	r4, [r7, #28]
 80096c4:	4314      	orrs	r4, r2
 80096c6:	61fc      	str	r4, [r7, #28]
 80096c8:	0002      	movs	r2, r0
 80096ca:	00d2      	lsls	r2, r2, #3
 80096cc:	61ba      	str	r2, [r7, #24]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	2200      	movs	r2, #0
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	6838      	ldr	r0, [r7, #0]
 80096d6:	6879      	ldr	r1, [r7, #4]
 80096d8:	0002      	movs	r2, r0
 80096da:	0f52      	lsrs	r2, r2, #29
 80096dc:	000c      	movs	r4, r1
 80096de:	00e4      	lsls	r4, r4, #3
 80096e0:	617c      	str	r4, [r7, #20]
 80096e2:	697c      	ldr	r4, [r7, #20]
 80096e4:	4314      	orrs	r4, r2
 80096e6:	617c      	str	r4, [r7, #20]
 80096e8:	0002      	movs	r2, r0
 80096ea:	00d2      	lsls	r2, r2, #3
 80096ec:	613a      	str	r2, [r7, #16]
 80096ee:	3307      	adds	r3, #7
 80096f0:	08db      	lsrs	r3, r3, #3
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	466a      	mov	r2, sp
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	469d      	mov	sp, r3
 80096fa:	466b      	mov	r3, sp
 80096fc:	3300      	adds	r3, #0
 80096fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8009700:	2316      	movs	r3, #22
 8009702:	2220      	movs	r2, #32
 8009704:	189b      	adds	r3, r3, r2
 8009706:	19db      	adds	r3, r3, r7
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e01e      	b.n	800974c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800970e:	2317      	movs	r3, #23
 8009710:	2220      	movs	r2, #32
 8009712:	189b      	adds	r3, r3, r2
 8009714:	19db      	adds	r3, r3, r7
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	2116      	movs	r1, #22
 800971a:	2320      	movs	r3, #32
 800971c:	18cb      	adds	r3, r1, r3
 800971e:	19db      	adds	r3, r3, r7
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	18d3      	adds	r3, r2, r3
 8009724:	001a      	movs	r2, r3
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	189a      	adds	r2, r3, r2
 800972a:	0008      	movs	r0, r1
 800972c:	2320      	movs	r3, #32
 800972e:	18cb      	adds	r3, r1, r3
 8009730:	19db      	adds	r3, r3, r7
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	7811      	ldrb	r1, [r2, #0]
 8009736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009738:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800973a:	2320      	movs	r3, #32
 800973c:	18c3      	adds	r3, r0, r3
 800973e:	19db      	adds	r3, r3, r7
 8009740:	781a      	ldrb	r2, [r3, #0]
 8009742:	2320      	movs	r3, #32
 8009744:	18c3      	adds	r3, r0, r3
 8009746:	19db      	adds	r3, r3, r7
 8009748:	3201      	adds	r2, #1
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	2316      	movs	r3, #22
 800974e:	2220      	movs	r2, #32
 8009750:	189b      	adds	r3, r3, r2
 8009752:	19da      	adds	r2, r3, r7
 8009754:	2322      	movs	r3, #34	@ 0x22
 8009756:	18fb      	adds	r3, r7, r3
 8009758:	7812      	ldrb	r2, [r2, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d3d6      	bcc.n	800970e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8009760:	2417      	movs	r4, #23
 8009762:	2320      	movs	r3, #32
 8009764:	18e3      	adds	r3, r4, r3
 8009766:	19db      	adds	r3, r3, r7
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	2322      	movs	r3, #34	@ 0x22
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	18d3      	adds	r3, r2, r3
 8009772:	3b01      	subs	r3, #1
 8009774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009776:	18d2      	adds	r2, r2, r3
 8009778:	250b      	movs	r5, #11
 800977a:	2320      	movs	r3, #32
 800977c:	18eb      	adds	r3, r5, r3
 800977e:	19db      	adds	r3, r3, r7
 8009780:	7812      	ldrb	r2, [r2, #0]
 8009782:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8009784:	2322      	movs	r3, #34	@ 0x22
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	3b01      	subs	r3, #1
 800978c:	b2da      	uxtb	r2, r3
 800978e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009790:	0011      	movs	r1, r2
 8009792:	0018      	movs	r0, r3
 8009794:	f000 f838 	bl	8009808 <CalculateCRC>
 8009798:	0003      	movs	r3, r0
 800979a:	001a      	movs	r2, r3
 800979c:	2320      	movs	r3, #32
 800979e:	18eb      	adds	r3, r5, r3
 80097a0:	19db      	adds	r3, r3, r7
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00c      	beq.n	80097c2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80097a8:	2320      	movs	r3, #32
 80097aa:	18e3      	adds	r3, r4, r3
 80097ac:	19db      	adds	r3, r3, r7
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	4a13      	ldr	r2, [pc, #76]	@ (8009800 <CheckCRC+0x18c>)
 80097b4:	4913      	ldr	r1, [pc, #76]	@ (8009804 <CheckCRC+0x190>)
 80097b6:	2001      	movs	r0, #1
 80097b8:	f002 f894 	bl	800b8e4 <CreateLine>
      return false;
 80097bc:	2300      	movs	r3, #0
 80097be:	46b5      	mov	sp, r6
 80097c0:	e019      	b.n	80097f6 <CheckCRC+0x182>
 80097c2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80097c4:	2217      	movs	r2, #23
 80097c6:	2320      	movs	r3, #32
 80097c8:	18d3      	adds	r3, r2, r3
 80097ca:	19db      	adds	r3, r3, r7
 80097cc:	2120      	movs	r1, #32
 80097ce:	1852      	adds	r2, r2, r1
 80097d0:	19d1      	adds	r1, r2, r7
 80097d2:	2222      	movs	r2, #34	@ 0x22
 80097d4:	18ba      	adds	r2, r7, r2
 80097d6:	7809      	ldrb	r1, [r1, #0]
 80097d8:	7812      	ldrb	r2, [r2, #0]
 80097da:	188a      	adds	r2, r1, r2
 80097dc:	701a      	strb	r2, [r3, #0]
 80097de:	2317      	movs	r3, #23
 80097e0:	2220      	movs	r2, #32
 80097e2:	189b      	adds	r3, r3, r2
 80097e4:	19da      	adds	r2, r3, r7
 80097e6:	2323      	movs	r3, #35	@ 0x23
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d200      	bcs.n	80097f4 <CheckCRC+0x180>
 80097f2:	e754      	b.n	800969e <CheckCRC+0x2a>
    }
  }
  return true;
 80097f4:	2301      	movs	r3, #1
}
 80097f6:	0018      	movs	r0, r3
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b00f      	add	sp, #60	@ 0x3c
 80097fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097fe:	46c0      	nop			@ (mov r8, r8)
 8009800:	08020510 	.word	0x08020510
 8009804:	0802043c 	.word	0x0802043c

08009808 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	000a      	movs	r2, r1
 8009812:	1cfb      	adds	r3, r7, #3
 8009814:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8009816:	230f      	movs	r3, #15
 8009818:	18fb      	adds	r3, r7, r3
 800981a:	22ff      	movs	r2, #255	@ 0xff
 800981c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800981e:	230e      	movs	r3, #14
 8009820:	18fb      	adds	r3, r7, r3
 8009822:	2200      	movs	r2, #0
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	e037      	b.n	8009898 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009828:	230e      	movs	r3, #14
 800982a:	18fb      	adds	r3, r7, r3
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	18d3      	adds	r3, r2, r3
 8009832:	7819      	ldrb	r1, [r3, #0]
 8009834:	220f      	movs	r2, #15
 8009836:	18bb      	adds	r3, r7, r2
 8009838:	18ba      	adds	r2, r7, r2
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	404a      	eors	r2, r1
 800983e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009840:	230d      	movs	r3, #13
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
 8009848:	e01b      	b.n	8009882 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800984a:	210f      	movs	r1, #15
 800984c:	187b      	adds	r3, r7, r1
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	b25b      	sxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	da09      	bge.n	800986a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8009856:	187b      	adds	r3, r7, r1
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	b25b      	sxtb	r3, r3
 800985e:	2231      	movs	r2, #49	@ 0x31
 8009860:	4053      	eors	r3, r2
 8009862:	b25a      	sxtb	r2, r3
 8009864:	187b      	adds	r3, r7, r1
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e005      	b.n	8009876 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800986a:	230f      	movs	r3, #15
 800986c:	18fa      	adds	r2, r7, r3
 800986e:	18fb      	adds	r3, r7, r3
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	18db      	adds	r3, r3, r3
 8009874:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009876:	210d      	movs	r1, #13
 8009878:	187b      	adds	r3, r7, r1
 800987a:	781a      	ldrb	r2, [r3, #0]
 800987c:	187b      	adds	r3, r7, r1
 800987e:	3201      	adds	r2, #1
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	230d      	movs	r3, #13
 8009884:	18fb      	adds	r3, r7, r3
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b07      	cmp	r3, #7
 800988a:	d9de      	bls.n	800984a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800988c:	210e      	movs	r1, #14
 800988e:	187b      	adds	r3, r7, r1
 8009890:	781a      	ldrb	r2, [r3, #0]
 8009892:	187b      	adds	r3, r7, r1
 8009894:	3201      	adds	r2, #1
 8009896:	701a      	strb	r2, [r3, #0]
 8009898:	230e      	movs	r3, #14
 800989a:	18fa      	adds	r2, r7, r3
 800989c:	1cfb      	adds	r3, r7, #3
 800989e:	7812      	ldrb	r2, [r2, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d3c0      	bcc.n	8009828 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80098a6:	230f      	movs	r3, #15
 80098a8:	18fb      	adds	r3, r7, r3
 80098aa:	781b      	ldrb	r3, [r3, #0]
}
 80098ac:	0018      	movs	r0, r3
 80098ae:	46bd      	mov	sp, r7
 80098b0:	b004      	add	sp, #16
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4936      	ldr	r1, [pc, #216]	@ (800999c <SGP_GetHT+0xe8>)
 80098c4:	1c18      	adds	r0, r3, #0
 80098c6:	f7f6 fffb 	bl	80008c0 <__aeabi_fadd>
 80098ca:	1c03      	adds	r3, r0, #0
 80098cc:	4934      	ldr	r1, [pc, #208]	@ (80099a0 <SGP_GetHT+0xec>)
 80098ce:	1c18      	adds	r0, r3, #0
 80098d0:	f7f7 f980 	bl	8000bd4 <__aeabi_fdiv>
 80098d4:	1c03      	adds	r3, r0, #0
 80098d6:	4933      	ldr	r1, [pc, #204]	@ (80099a4 <SGP_GetHT+0xf0>)
 80098d8:	1c18      	adds	r0, r3, #0
 80098da:	f7f7 fb61 	bl	8000fa0 <__aeabi_fmul>
 80098de:	1c03      	adds	r3, r0, #0
 80098e0:	1c18      	adds	r0, r3, #0
 80098e2:	f7f6 fe9b 	bl	800061c <__aeabi_f2uiz>
 80098e6:	0003      	movs	r3, r0
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	4b2f      	ldr	r3, [pc, #188]	@ (80099a8 <SGP_GetHT+0xf4>)
 80098ec:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	492e      	ldr	r1, [pc, #184]	@ (80099ac <SGP_GetHT+0xf8>)
 80098f4:	1c18      	adds	r0, r3, #0
 80098f6:	f7f7 f96d 	bl	8000bd4 <__aeabi_fdiv>
 80098fa:	1c03      	adds	r3, r0, #0
 80098fc:	4929      	ldr	r1, [pc, #164]	@ (80099a4 <SGP_GetHT+0xf0>)
 80098fe:	1c18      	adds	r0, r3, #0
 8009900:	f7f7 fb4e 	bl	8000fa0 <__aeabi_fmul>
 8009904:	1c03      	adds	r3, r0, #0
 8009906:	1c18      	adds	r0, r3, #0
 8009908:	f7f6 fe88 	bl	800061c <__aeabi_f2uiz>
 800990c:	0003      	movs	r3, r0
 800990e:	b29a      	uxth	r2, r3
 8009910:	4b27      	ldr	r3, [pc, #156]	@ (80099b0 <SGP_GetHT+0xfc>)
 8009912:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8009914:	4b26      	ldr	r3, [pc, #152]	@ (80099b0 <SGP_GetHT+0xfc>)
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	0a1b      	lsrs	r3, r3, #8
 800991a:	b29b      	uxth	r3, r3
 800991c:	b2da      	uxtb	r2, r3
 800991e:	4b25      	ldr	r3, [pc, #148]	@ (80099b4 <SGP_GetHT+0x100>)
 8009920:	709a      	strb	r2, [r3, #2]
 8009922:	4b24      	ldr	r3, [pc, #144]	@ (80099b4 <SGP_GetHT+0x100>)
 8009924:	789a      	ldrb	r2, [r3, #2]
 8009926:	210c      	movs	r1, #12
 8009928:	187b      	adds	r3, r7, r1
 800992a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800992c:	4b20      	ldr	r3, [pc, #128]	@ (80099b0 <SGP_GetHT+0xfc>)
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b2da      	uxtb	r2, r3
 8009932:	4b20      	ldr	r3, [pc, #128]	@ (80099b4 <SGP_GetHT+0x100>)
 8009934:	70da      	strb	r2, [r3, #3]
 8009936:	4b1f      	ldr	r3, [pc, #124]	@ (80099b4 <SGP_GetHT+0x100>)
 8009938:	78da      	ldrb	r2, [r3, #3]
 800993a:	187b      	adds	r3, r7, r1
 800993c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800993e:	187b      	adds	r3, r7, r1
 8009940:	2102      	movs	r1, #2
 8009942:	0018      	movs	r0, r3
 8009944:	f7ff ff60 	bl	8009808 <CalculateCRC>
 8009948:	0003      	movs	r3, r0
 800994a:	001a      	movs	r2, r3
 800994c:	4b19      	ldr	r3, [pc, #100]	@ (80099b4 <SGP_GetHT+0x100>)
 800994e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8009950:	4b15      	ldr	r3, [pc, #84]	@ (80099a8 <SGP_GetHT+0xf4>)
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	0a1b      	lsrs	r3, r3, #8
 8009956:	b29b      	uxth	r3, r3
 8009958:	b2da      	uxtb	r2, r3
 800995a:	4b16      	ldr	r3, [pc, #88]	@ (80099b4 <SGP_GetHT+0x100>)
 800995c:	715a      	strb	r2, [r3, #5]
 800995e:	4b15      	ldr	r3, [pc, #84]	@ (80099b4 <SGP_GetHT+0x100>)
 8009960:	795a      	ldrb	r2, [r3, #5]
 8009962:	2108      	movs	r1, #8
 8009964:	187b      	adds	r3, r7, r1
 8009966:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8009968:	4b0f      	ldr	r3, [pc, #60]	@ (80099a8 <SGP_GetHT+0xf4>)
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b2da      	uxtb	r2, r3
 800996e:	4b11      	ldr	r3, [pc, #68]	@ (80099b4 <SGP_GetHT+0x100>)
 8009970:	719a      	strb	r2, [r3, #6]
 8009972:	4b10      	ldr	r3, [pc, #64]	@ (80099b4 <SGP_GetHT+0x100>)
 8009974:	799a      	ldrb	r2, [r3, #6]
 8009976:	187b      	adds	r3, r7, r1
 8009978:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800997a:	187b      	adds	r3, r7, r1
 800997c:	2102      	movs	r1, #2
 800997e:	0018      	movs	r0, r3
 8009980:	f7ff ff42 	bl	8009808 <CalculateCRC>
 8009984:	0003      	movs	r3, r0
 8009986:	001a      	movs	r2, r3
 8009988:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <SGP_GetHT+0x100>)
 800998a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800998c:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <SGP_GetHT+0x104>)
 800998e:	2201      	movs	r2, #1
 8009990:	701a      	strb	r2, [r3, #0]
}
 8009992:	46c0      	nop			@ (mov r8, r8)
 8009994:	46bd      	mov	sp, r7
 8009996:	b004      	add	sp, #16
 8009998:	bd80      	pop	{r7, pc}
 800999a:	46c0      	nop			@ (mov r8, r8)
 800999c:	42340000 	.word	0x42340000
 80099a0:	432f0000 	.word	0x432f0000
 80099a4:	477fff00 	.word	0x477fff00
 80099a8:	20001276 	.word	0x20001276
 80099ac:	42c80000 	.word	0x42c80000
 80099b0:	20001274 	.word	0x20001274
 80099b4:	20000090 	.word	0x20000090
 80099b8:	20001278 	.word	0x20001278

080099bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	0002      	movs	r2, r0
 80099c4:	1dfb      	adds	r3, r7, #7
 80099c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80099c8:	1dfb      	adds	r3, r7, #7
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80099ce:	d809      	bhi.n	80099e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099d0:	1dfb      	adds	r3, r7, #7
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	001a      	movs	r2, r3
 80099d6:	231f      	movs	r3, #31
 80099d8:	401a      	ands	r2, r3
 80099da:	4b04      	ldr	r3, [pc, #16]	@ (80099ec <__NVIC_EnableIRQ+0x30>)
 80099dc:	2101      	movs	r1, #1
 80099de:	4091      	lsls	r1, r2
 80099e0:	000a      	movs	r2, r1
 80099e2:	601a      	str	r2, [r3, #0]
  }
}
 80099e4:	46c0      	nop			@ (mov r8, r8)
 80099e6:	46bd      	mov	sp, r7
 80099e8:	b002      	add	sp, #8
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	e000e100 	.word	0xe000e100

080099f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	0002      	movs	r2, r0
 80099f8:	1dfb      	adds	r3, r7, #7
 80099fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80099fc:	1dfb      	adds	r3, r7, #7
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a02:	d810      	bhi.n	8009a26 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a04:	1dfb      	adds	r3, r7, #7
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	001a      	movs	r2, r3
 8009a0a:	231f      	movs	r3, #31
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	4908      	ldr	r1, [pc, #32]	@ (8009a30 <__NVIC_DisableIRQ+0x40>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	409a      	lsls	r2, r3
 8009a14:	0013      	movs	r3, r2
 8009a16:	2280      	movs	r2, #128	@ 0x80
 8009a18:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009a1a:	f3bf 8f4f 	dsb	sy
}
 8009a1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8009a20:	f3bf 8f6f 	isb	sy
}
 8009a24:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8009a26:	46c0      	nop			@ (mov r8, r8)
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	b002      	add	sp, #8
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	46c0      	nop			@ (mov r8, r8)
 8009a30:	e000e100 	.word	0xe000e100

08009a34 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8009a34:	b5b0      	push	{r4, r5, r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	0008      	movs	r0, r1
 8009a3e:	0011      	movs	r1, r2
 8009a40:	1cfb      	adds	r3, r7, #3
 8009a42:	1c02      	adds	r2, r0, #0
 8009a44:	701a      	strb	r2, [r3, #0]
 8009a46:	1cbb      	adds	r3, r7, #2
 8009a48:	1c0a      	adds	r2, r1, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8009a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8009bbc <getSoundData+0x188>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2201      	movs	r2, #1
 8009a54:	4053      	eors	r3, r2
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d107      	bne.n	8009a6c <getSoundData+0x38>
 8009a5c:	4b58      	ldr	r3, [pc, #352]	@ (8009bc0 <getSoundData+0x18c>)
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2201      	movs	r2, #1
 8009a64:	4053      	eors	r3, r2
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <getSoundData+0x3c>
    {
        return false;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	e0a0      	b.n	8009bb2 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8009a70:	4b54      	ldr	r3, [pc, #336]	@ (8009bc4 <getSoundData+0x190>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d005      	beq.n	8009a86 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009a7a:	4b53      	ldr	r3, [pc, #332]	@ (8009bc8 <getSoundData+0x194>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b25b      	sxtb	r3, r3
 8009a80:	0018      	movs	r0, r3
 8009a82:	f7ff ffb5 	bl	80099f0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8009a86:	f3bf 8f4f 	dsb	sy
}
 8009a8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8009a8c:	f3bf 8f6f 	isb	sy
}
 8009a90:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8009a92:	1cfb      	adds	r3, r7, #3
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d04c      	beq.n	8009b34 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8009a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8009bcc <getSoundData+0x198>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d11b      	bne.n	8009ada <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]
 8009ab2:	e00e      	b.n	8009ad2 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	18d3      	adds	r3, r2, r3
 8009aba:	3302      	adds	r3, #2
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	18d3      	adds	r3, r2, r3
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	2200      	movs	r2, #0
 8009aca:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b05      	cmp	r3, #5
 8009ad6:	d9ed      	bls.n	8009ab4 <getSoundData+0x80>
 8009ad8:	e02c      	b.n	8009b34 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	1c59      	adds	r1, r3, #1
 8009ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8009bd0 <getSoundData+0x19c>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8009bd4 <getSoundData+0x1a0>)
 8009ae6:	681c      	ldr	r4, [r3, #0]
 8009ae8:	4b38      	ldr	r3, [pc, #224]	@ (8009bcc <getSoundData+0x198>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	0023      	movs	r3, r4
 8009af0:	f000 fde8 	bl	800a6c4 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	e019      	b.n	8009b2e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	18d3      	adds	r3, r2, r3
 8009b00:	1c98      	adds	r0, r3, #2
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	3308      	adds	r3, #8
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8009b0a:	4b33      	ldr	r3, [pc, #204]	@ (8009bd8 <getSoundData+0x1a4>)
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	0092      	lsls	r2, r2, #2
 8009b10:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8009b12:	4b32      	ldr	r3, [pc, #200]	@ (8009bdc <getSoundData+0x1a8>)
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	0092      	lsls	r2, r2, #2
 8009b18:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009bcc <getSoundData+0x198>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	0013      	movs	r3, r2
 8009b22:	0022      	movs	r2, r4
 8009b24:	f000 fdce 	bl	800a6c4 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	d9e2      	bls.n	8009afa <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8009b34:	1cbb      	adds	r3, r7, #2
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d028      	beq.n	8009b8e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8009b3c:	240e      	movs	r4, #14
 8009b3e:	193b      	adds	r3, r7, r4
 8009b40:	2200      	movs	r2, #0
 8009b42:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8009b44:	250d      	movs	r5, #13
 8009b46:	197b      	adds	r3, r7, r5
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8009b4c:	4b24      	ldr	r3, [pc, #144]	@ (8009be0 <getSoundData+0x1ac>)
 8009b4e:	6818      	ldr	r0, [r3, #0]
 8009b50:	4924      	ldr	r1, [pc, #144]	@ (8009be4 <getSoundData+0x1b0>)
 8009b52:	197b      	adds	r3, r7, r5
 8009b54:	193a      	adds	r2, r7, r4
 8009b56:	f000 fe59 	bl	800a80c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8009b5a:	193b      	adds	r3, r7, r4
 8009b5c:	881a      	ldrh	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	21ff      	movs	r1, #255	@ 0xff
 8009b62:	4011      	ands	r1, r2
 8009b64:	000c      	movs	r4, r1
 8009b66:	7b99      	ldrb	r1, [r3, #14]
 8009b68:	2000      	movs	r0, #0
 8009b6a:	4001      	ands	r1, r0
 8009b6c:	1c08      	adds	r0, r1, #0
 8009b6e:	1c21      	adds	r1, r4, #0
 8009b70:	4301      	orrs	r1, r0
 8009b72:	7399      	strb	r1, [r3, #14]
 8009b74:	0a12      	lsrs	r2, r2, #8
 8009b76:	b290      	uxth	r0, r2
 8009b78:	7bda      	ldrb	r2, [r3, #15]
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	400a      	ands	r2, r1
 8009b7e:	1c11      	adds	r1, r2, #0
 8009b80:	1c02      	adds	r2, r0, #0
 8009b82:	430a      	orrs	r2, r1
 8009b84:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8009b86:	197b      	adds	r3, r7, r5
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8009b8e:	f000 f86f 	bl	8009c70 <micSettlingComplete>
 8009b92:	0003      	movs	r3, r0
 8009b94:	001a      	movs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8009b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc4 <getSoundData+0x190>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009ba4:	4b08      	ldr	r3, [pc, #32]	@ (8009bc8 <getSoundData+0x194>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	b25b      	sxtb	r3, r3
 8009baa:	0018      	movs	r0, r3
 8009bac:	f7ff ff06 	bl	80099bc <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8009bb0:	2301      	movs	r3, #1
}
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b006      	add	sp, #24
 8009bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8009bba:	46c0      	nop			@ (mov r8, r8)
 8009bbc:	20001281 	.word	0x20001281
 8009bc0:	20001284 	.word	0x20001284
 8009bc4:	20001283 	.word	0x20001283
 8009bc8:	20001cd4 	.word	0x20001cd4
 8009bcc:	20001d10 	.word	0x20001d10
 8009bd0:	20001cd8 	.word	0x20001cd8
 8009bd4:	20001cdc 	.word	0x20001cdc
 8009bd8:	20001ce0 	.word	0x20001ce0
 8009bdc:	20001cf8 	.word	0x20001cf8
 8009be0:	2000128c 	.word	0x2000128c
 8009be4:	3b5c7333 	.word	0x3b5c7333

08009be8 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	001a      	movs	r2, r3
 8009bf6:	1cfb      	adds	r3, r7, #3
 8009bf8:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8009bfa:	4b09      	ldr	r3, [pc, #36]	@ (8009c20 <soundInit+0x38>)
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8009c00:	4b08      	ldr	r3, [pc, #32]	@ (8009c24 <soundInit+0x3c>)
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8009c06:	4b08      	ldr	r3, [pc, #32]	@ (8009c28 <soundInit+0x40>)
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8009c0c:	4b07      	ldr	r3, [pc, #28]	@ (8009c2c <soundInit+0x44>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	569a      	ldrsb	r2, [r3, r2]
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <soundInit+0x44>)
 8009c14:	701a      	strb	r2, [r3, #0]

    return true;
 8009c16:	2301      	movs	r3, #1
}
 8009c18:	0018      	movs	r0, r3
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	b004      	add	sp, #16
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20001ccc 	.word	0x20001ccc
 8009c24:	20001cc8 	.word	0x20001cc8
 8009c28:	20001cd0 	.word	0x20001cd0
 8009c2c:	20001cd4 	.word	0x20001cd4

08009c30 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8009c34:	4b02      	ldr	r3, [pc, #8]	@ (8009c40 <clearMaximumAmplitude+0x10>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
}
 8009c3a:	46c0      	nop			@ (mov r8, r8)
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	2000128c 	.word	0x2000128c

08009c44 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8009c48:	4b08      	ldr	r3, [pc, #32]	@ (8009c6c <startMicSettlingPeriod+0x28>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8009c52:	4b06      	ldr	r3, [pc, #24]	@ (8009c6c <startMicSettlingPeriod+0x28>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	0018      	movs	r0, r3
 8009c58:	f009 f97e 	bl	8012f58 <HAL_TIM_Base_Start>
 8009c5c:	1e03      	subs	r3, r0, #0
 8009c5e:	d001      	beq.n	8009c64 <startMicSettlingPeriod+0x20>
    {
        return false;
 8009c60:	2300      	movs	r3, #0
 8009c62:	e000      	b.n	8009c66 <startMicSettlingPeriod+0x22>
    }
    return true;
 8009c64:	2301      	movs	r3, #1
}
 8009c66:	0018      	movs	r0, r3
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20001cc8 	.word	0x20001cc8

08009c70 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8009c76:	4b0e      	ldr	r3, [pc, #56]	@ (8009cb0 <micSettlingComplete+0x40>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	401a      	ands	r2, r3
 8009c82:	1dfb      	adds	r3, r7, #7
 8009c84:	3a01      	subs	r2, #1
 8009c86:	4251      	negs	r1, r2
 8009c88:	414a      	adcs	r2, r1
 8009c8a:	701a      	strb	r2, [r3, #0]
    if (complete)
 8009c8c:	1dfb      	adds	r3, r7, #7
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8009c94:	4b06      	ldr	r3, [pc, #24]	@ (8009cb0 <micSettlingComplete+0x40>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f009 f9a7 	bl	8012fec <HAL_TIM_Base_Stop>
      DataReady = true;
 8009c9e:	4b05      	ldr	r3, [pc, #20]	@ (8009cb4 <micSettlingComplete+0x44>)
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8009ca4:	1dfb      	adds	r3, r7, #7
 8009ca6:	781b      	ldrb	r3, [r3, #0]
}
 8009ca8:	0018      	movs	r0, r3
 8009caa:	46bd      	mov	sp, r7
 8009cac:	b002      	add	sp, #8
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20001cc8 	.word	0x20001cc8
 8009cb4:	20001280 	.word	0x20001280

08009cb8 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	0002      	movs	r2, r0
 8009cc0:	1dfb      	adds	r3, r7, #7
 8009cc2:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8009cc4:	4b29      	ldr	r3, [pc, #164]	@ (8009d6c <enableMicrophone+0xb4>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	1dfa      	adds	r2, r7, #7
 8009ccc:	7812      	ldrb	r2, [r2, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d101      	bne.n	8009cd6 <enableMicrophone+0x1e>
    {
        return true;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e045      	b.n	8009d62 <enableMicrophone+0xaa>
    }
    if (bEnable)
 8009cd6:	1dfb      	adds	r3, r7, #7
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d025      	beq.n	8009d2a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8009cde:	f7ff ffb1 	bl	8009c44 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8009ce2:	4b23      	ldr	r3, [pc, #140]	@ (8009d70 <enableMicrophone+0xb8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2280      	movs	r2, #128	@ 0x80
 8009ce8:	0092      	lsls	r2, r2, #2
 8009cea:	4922      	ldr	r1, [pc, #136]	@ (8009d74 <enableMicrophone+0xbc>)
 8009cec:	0018      	movs	r0, r3
 8009cee:	f005 fd13 	bl	800f718 <HAL_I2S_Receive_DMA>
 8009cf2:	1e03      	subs	r3, r0, #0
 8009cf4:	d001      	beq.n	8009cfa <enableMicrophone+0x42>
        {
            return false;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e033      	b.n	8009d62 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8009cfa:	f7ff ff99 	bl	8009c30 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8009cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8009d78 <enableMicrophone+0xc0>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009d04:	4b1d      	ldr	r3, [pc, #116]	@ (8009d7c <enableMicrophone+0xc4>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	b25b      	sxtb	r3, r3
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7ff fe56 	bl	80099bc <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8009d10:	4b1b      	ldr	r3, [pc, #108]	@ (8009d80 <enableMicrophone+0xc8>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8009d16:	4b15      	ldr	r3, [pc, #84]	@ (8009d6c <enableMicrophone+0xb4>)
 8009d18:	2201      	movs	r2, #1
 8009d1a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009d1c:	4b19      	ldr	r3, [pc, #100]	@ (8009d84 <enableMicrophone+0xcc>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009d22:	4b19      	ldr	r3, [pc, #100]	@ (8009d88 <enableMicrophone+0xd0>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	701a      	strb	r2, [r3, #0]
 8009d28:	e01a      	b.n	8009d60 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009d2a:	4b14      	ldr	r3, [pc, #80]	@ (8009d7c <enableMicrophone+0xc4>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b25b      	sxtb	r3, r3
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7ff fe5d 	bl	80099f0 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8009d36:	4b12      	ldr	r3, [pc, #72]	@ (8009d80 <enableMicrophone+0xc8>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009d3c:	4b11      	ldr	r3, [pc, #68]	@ (8009d84 <enableMicrophone+0xcc>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009d42:	4b11      	ldr	r3, [pc, #68]	@ (8009d88 <enableMicrophone+0xd0>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8009d48:	4b09      	ldr	r3, [pc, #36]	@ (8009d70 <enableMicrophone+0xb8>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f005 fda5 	bl	800f89c <HAL_I2S_DMAStop>
 8009d52:	1e03      	subs	r3, r0, #0
 8009d54:	d001      	beq.n	8009d5a <enableMicrophone+0xa2>
        {
            return false;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e003      	b.n	8009d62 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8009d5a:	4b04      	ldr	r3, [pc, #16]	@ (8009d6c <enableMicrophone+0xb4>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8009d60:	2301      	movs	r3, #1
}
 8009d62:	0018      	movs	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	b002      	add	sp, #8
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	46c0      	nop			@ (mov r8, r8)
 8009d6c:	20001281 	.word	0x20001281
 8009d70:	20001ccc 	.word	0x20001ccc
 8009d74:	200012c8 	.word	0x200012c8
 8009d78:	20001288 	.word	0x20001288
 8009d7c:	20001cd4 	.word	0x20001cd4
 8009d80:	20001283 	.word	0x20001283
 8009d84:	20001282 	.word	0x20001282
 8009d88:	20001284 	.word	0x20001284

08009d8c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8009d90:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <startSPLcalculation+0x38>)
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2201      	movs	r2, #1
 8009d98:	4053      	eors	r3, r2
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <startSPLcalculation+0x18>
    {
        return false;
 8009da0:	2300      	movs	r3, #0
 8009da2:	e00c      	b.n	8009dbe <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8009da4:	4b08      	ldr	r3, [pc, #32]	@ (8009dc8 <startSPLcalculation+0x3c>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <startSPLcalculation+0x26>
    {
        return true;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e005      	b.n	8009dbe <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8009db2:	f000 fb63 	bl	800a47c <resetSPLstate>
    SPLcalcEnabled = true;
 8009db6:	4b04      	ldr	r3, [pc, #16]	@ (8009dc8 <startSPLcalculation+0x3c>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	701a      	strb	r2, [r3, #0]
    return true;
 8009dbc:	2301      	movs	r3, #1
}
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20001281 	.word	0x20001281
 8009dc8:	20001282 	.word	0x20001282

08009dcc <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009dd4:	4b05      	ldr	r3, [pc, #20]	@ (8009dec <HAL_I2S_RxHalfCpltCallback+0x20>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d102      	bne.n	8009de4 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8009dde:	2000      	movs	r0, #0
 8009de0:	f000 f81a 	bl	8009e18 <processHalfDMAbuffer>
  }
}
 8009de4:	46c0      	nop			@ (mov r8, r8)
 8009de6:	46bd      	mov	sp, r7
 8009de8:	b002      	add	sp, #8
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20001ccc 	.word	0x20001ccc

08009df0 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009df8:	4b06      	ldr	r3, [pc, #24]	@ (8009e14 <HAL_I2S_RxCpltCallback+0x24>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d104      	bne.n	8009e0c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8009e02:	2380      	movs	r3, #128	@ 0x80
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	0018      	movs	r0, r3
 8009e08:	f000 f806 	bl	8009e18 <processHalfDMAbuffer>
  }
}
 8009e0c:	46c0      	nop			@ (mov r8, r8)
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	b002      	add	sp, #8
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	20001ccc 	.word	0x20001ccc

08009e18 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	005a      	lsls	r2, r3, #1
 8009e24:	4b15      	ldr	r3, [pc, #84]	@ (8009e7c <processHalfDMAbuffer+0x64>)
 8009e26:	18d3      	adds	r3, r2, r3
 8009e28:	4a15      	ldr	r2, [pc, #84]	@ (8009e80 <processHalfDMAbuffer+0x68>)
 8009e2a:	2180      	movs	r1, #128	@ 0x80
 8009e2c:	0089      	lsls	r1, r1, #2
 8009e2e:	0018      	movs	r0, r3
 8009e30:	f000 fd35 	bl	800a89e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8009e34:	4b13      	ldr	r3, [pc, #76]	@ (8009e84 <processHalfDMAbuffer+0x6c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	425a      	negs	r2, r3
 8009e3a:	4153      	adcs	r3, r2
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	4b11      	ldr	r3, [pc, #68]	@ (8009e84 <processHalfDMAbuffer+0x6c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2109      	movs	r1, #9
 8009e44:	4299      	cmp	r1, r3
 8009e46:	419b      	sbcs	r3, r3
 8009e48:	425b      	negs	r3, r3
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	480c      	ldr	r0, [pc, #48]	@ (8009e80 <processHalfDMAbuffer+0x68>)
 8009e4e:	2180      	movs	r1, #128	@ 0x80
 8009e50:	f000 fb46 	bl	800a4e0 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8009e54:	4b0b      	ldr	r3, [pc, #44]	@ (8009e84 <processHalfDMAbuffer+0x6c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b09      	cmp	r3, #9
 8009e5a:	d804      	bhi.n	8009e66 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8009e5c:	4b09      	ldr	r3, [pc, #36]	@ (8009e84 <processHalfDMAbuffer+0x6c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	4b08      	ldr	r3, [pc, #32]	@ (8009e84 <processHalfDMAbuffer+0x6c>)
 8009e64:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8009e66:	4b08      	ldr	r3, [pc, #32]	@ (8009e88 <processHalfDMAbuffer+0x70>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8009e70:	f000 f826 	bl	8009ec0 <calculateSPLQ31>
    }
}
 8009e74:	46c0      	nop			@ (mov r8, r8)
 8009e76:	46bd      	mov	sp, r7
 8009e78:	b002      	add	sp, #8
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	200012c8 	.word	0x200012c8
 8009e80:	20001ac8 	.word	0x20001ac8
 8009e84:	20001288 	.word	0x20001288
 8009e88:	20001282 	.word	0x20001282

08009e8c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009e94:	4b07      	ldr	r3, [pc, #28]	@ (8009eb4 <HAL_I2S_ErrorCallback+0x28>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d106      	bne.n	8009eac <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8009e9e:	4a06      	ldr	r2, [pc, #24]	@ (8009eb8 <HAL_I2S_ErrorCallback+0x2c>)
 8009ea0:	239f      	movs	r3, #159	@ 0x9f
 8009ea2:	0059      	lsls	r1, r3, #1
 8009ea4:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <HAL_I2S_ErrorCallback+0x30>)
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f001 fdd0 	bl	800ba4c <errorHandler>
  }
}
 8009eac:	46c0      	nop			@ (mov r8, r8)
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	b002      	add	sp, #8
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20001ccc 	.word	0x20001ccc
 8009eb8:	080205b8 	.word	0x080205b8
 8009ebc:	08020bcc 	.word	0x08020bcc

08009ec0 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8009ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec2:	b0b3      	sub	sp, #204	@ 0xcc
 8009ec4:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8009ec6:	4ae2      	ldr	r2, [pc, #904]	@ (800a250 <calculateSPLQ31+0x390>)
 8009ec8:	2338      	movs	r3, #56	@ 0x38
 8009eca:	2030      	movs	r0, #48	@ 0x30
 8009ecc:	181b      	adds	r3, r3, r0
 8009ece:	19d9      	adds	r1, r3, r7
 8009ed0:	2334      	movs	r3, #52	@ 0x34
 8009ed2:	181b      	adds	r3, r3, r0
 8009ed4:	19d8      	adds	r0, r3, r7
 8009ed6:	2380      	movs	r3, #128	@ 0x80
 8009ed8:	f000 fc36 	bl	800a748 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8009edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da00      	bge.n	8009ee4 <calculateSPLQ31+0x24>
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	105b      	asrs	r3, r3, #1
 8009ee6:	001a      	movs	r2, r3
 8009ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da00      	bge.n	8009ef0 <calculateSPLQ31+0x30>
 8009eee:	3301      	adds	r3, #1
 8009ef0:	105b      	asrs	r3, r3, #1
 8009ef2:	18d3      	adds	r3, r2, r3
 8009ef4:	2188      	movs	r1, #136	@ 0x88
 8009ef6:	187a      	adds	r2, r7, r1
 8009ef8:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8009efa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009efc:	187b      	adds	r3, r7, r1
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	3304      	adds	r3, #4
 8009f04:	2284      	movs	r2, #132	@ 0x84
 8009f06:	18b9      	adds	r1, r7, r2
 8009f08:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8009f0a:	18bb      	adds	r3, r7, r2
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4ad1      	ldr	r2, [pc, #836]	@ (800a254 <calculateSPLQ31+0x394>)
 8009f10:	0019      	movs	r1, r3
 8009f12:	0010      	movs	r0, r2
 8009f14:	f000 fc58 	bl	800a7c8 <getPo2factor>
 8009f18:	0003      	movs	r3, r0
 8009f1a:	2280      	movs	r2, #128	@ 0x80
 8009f1c:	18ba      	adds	r2, r7, r2
 8009f1e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	2284      	movs	r2, #132	@ 0x84
 8009f24:	2130      	movs	r1, #48	@ 0x30
 8009f26:	1852      	adds	r2, r2, r1
 8009f28:	19d2      	adds	r2, r2, r7
 8009f2a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	2280      	movs	r2, #128	@ 0x80
 8009f30:	1852      	adds	r2, r2, r1
 8009f32:	19d2      	adds	r2, r2, r7
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	e032      	b.n	8009f9e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8009f38:	4ac5      	ldr	r2, [pc, #788]	@ (800a250 <calculateSPLQ31+0x390>)
 8009f3a:	2680      	movs	r6, #128	@ 0x80
 8009f3c:	2330      	movs	r3, #48	@ 0x30
 8009f3e:	18f1      	adds	r1, r6, r3
 8009f40:	19cb      	adds	r3, r1, r7
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	589a      	ldr	r2, [r3, r2]
 8009f48:	2188      	movs	r1, #136	@ 0x88
 8009f4a:	1879      	adds	r1, r7, r1
 8009f4c:	680b      	ldr	r3, [r1, #0]
 8009f4e:	1ad2      	subs	r2, r2, r3
 8009f50:	2180      	movs	r1, #128	@ 0x80
 8009f52:	1879      	adds	r1, r7, r1
 8009f54:	680b      	ldr	r3, [r1, #0]
 8009f56:	409a      	lsls	r2, r3
 8009f58:	0011      	movs	r1, r2
 8009f5a:	4abf      	ldr	r2, [pc, #764]	@ (800a258 <calculateSPLQ31+0x398>)
 8009f5c:	2084      	movs	r0, #132	@ 0x84
 8009f5e:	2330      	movs	r3, #48	@ 0x30
 8009f60:	18c3      	adds	r3, r0, r3
 8009f62:	19db      	adds	r3, r3, r7
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8009f6a:	2230      	movs	r2, #48	@ 0x30
 8009f6c:	1883      	adds	r3, r0, r2
 8009f6e:	19db      	adds	r3, r3, r7
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	49b8      	ldr	r1, [pc, #736]	@ (800a258 <calculateSPLQ31+0x398>)
 8009f76:	009a      	lsls	r2, r3, #2
 8009f78:	2300      	movs	r3, #0
 8009f7a:	5053      	str	r3, [r2, r1]
        count += 2;
 8009f7c:	2230      	movs	r2, #48	@ 0x30
 8009f7e:	1883      	adds	r3, r0, r2
 8009f80:	19db      	adds	r3, r3, r7
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3302      	adds	r3, #2
 8009f86:	0011      	movs	r1, r2
 8009f88:	1882      	adds	r2, r0, r2
 8009f8a:	19d2      	adds	r2, r2, r7
 8009f8c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009f8e:	000a      	movs	r2, r1
 8009f90:	18b3      	adds	r3, r6, r2
 8009f92:	19db      	adds	r3, r3, r7
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3301      	adds	r3, #1
 8009f98:	18b2      	adds	r2, r6, r2
 8009f9a:	19d2      	adds	r2, r2, r7
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	2380      	movs	r3, #128	@ 0x80
 8009fa0:	2630      	movs	r6, #48	@ 0x30
 8009fa2:	199b      	adds	r3, r3, r6
 8009fa4:	19db      	adds	r3, r3, r7
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8009faa:	d9c5      	bls.n	8009f38 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8009fac:	4bab      	ldr	r3, [pc, #684]	@ (800a25c <calculateSPLQ31+0x39c>)
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	49a9      	ldr	r1, [pc, #676]	@ (800a258 <calculateSPLQ31+0x398>)
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f010 f895 	bl	801a0e4 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8009fba:	4aa9      	ldr	r2, [pc, #676]	@ (800a260 <calculateSPLQ31+0x3a0>)
 8009fbc:	2338      	movs	r3, #56	@ 0x38
 8009fbe:	199b      	adds	r3, r3, r6
 8009fc0:	19d9      	adds	r1, r3, r7
 8009fc2:	2334      	movs	r3, #52	@ 0x34
 8009fc4:	199b      	adds	r3, r3, r6
 8009fc6:	19d8      	adds	r0, r3, r7
 8009fc8:	237e      	movs	r3, #126	@ 0x7e
 8009fca:	f000 fbbd 	bl	800a748 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8009fce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009fd0:	2380      	movs	r3, #128	@ 0x80
 8009fd2:	061b      	lsls	r3, r3, #24
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d101      	bne.n	8009fdc <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8009fd8:	4b9e      	ldr	r3, [pc, #632]	@ (800a254 <calculateSPLQ31+0x394>)
 8009fda:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8009fdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009fde:	2380      	movs	r3, #128	@ 0x80
 8009fe0:	061b      	lsls	r3, r3, #24
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d101      	bne.n	8009fea <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8009fe6:	4b9b      	ldr	r3, [pc, #620]	@ (800a254 <calculateSPLQ31+0x394>)
 8009fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8009fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fec:	17da      	asrs	r2, r3, #31
 8009fee:	189b      	adds	r3, r3, r2
 8009ff0:	4053      	eors	r3, r2
 8009ff2:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8009ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ff6:	17da      	asrs	r2, r3, #31
 8009ff8:	189b      	adds	r3, r3, r2
 8009ffa:	4053      	eors	r3, r2
 8009ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8009ffe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a002:	429a      	cmp	r2, r3
 800a004:	dd01      	ble.n	800a00a <calculateSPLQ31+0x14a>
    {
        max = min;
 800a006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a008:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800a00a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a00c:	3304      	adds	r3, #4
 800a00e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800a010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a012:	4a90      	ldr	r2, [pc, #576]	@ (800a254 <calculateSPLQ31+0x394>)
 800a014:	0019      	movs	r1, r3
 800a016:	0010      	movs	r0, r2
 800a018:	f000 fbd6 	bl	800a7c8 <getPo2factor>
 800a01c:	0003      	movs	r3, r0
 800a01e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800a020:	2302      	movs	r3, #2
 800a022:	22ac      	movs	r2, #172	@ 0xac
 800a024:	18ba      	adds	r2, r7, r2
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	e012      	b.n	800a050 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800a02a:	4a8b      	ldr	r2, [pc, #556]	@ (800a258 <calculateSPLQ31+0x398>)
 800a02c:	20ac      	movs	r0, #172	@ 0xac
 800a02e:	183b      	adds	r3, r7, r0
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	589a      	ldr	r2, [r3, r2]
 800a036:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a038:	409a      	lsls	r2, r3
 800a03a:	0011      	movs	r1, r2
 800a03c:	4a86      	ldr	r2, [pc, #536]	@ (800a258 <calculateSPLQ31+0x398>)
 800a03e:	183b      	adds	r3, r7, r0
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800a046:	183b      	adds	r3, r7, r0
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3301      	adds	r3, #1
 800a04c:	183a      	adds	r2, r7, r0
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	23ac      	movs	r3, #172	@ 0xac
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b7f      	cmp	r3, #127	@ 0x7f
 800a058:	d9e7      	bls.n	800a02a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800a05a:	4b7d      	ldr	r3, [pc, #500]	@ (800a250 <calculateSPLQ31+0x390>)
 800a05c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800a05e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a060:	4b7d      	ldr	r3, [pc, #500]	@ (800a258 <calculateSPLQ31+0x398>)
 800a062:	2240      	movs	r2, #64	@ 0x40
 800a064:	0018      	movs	r0, r3
 800a066:	f010 fde7 	bl	801ac38 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800a06a:	2330      	movs	r3, #48	@ 0x30
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	0018      	movs	r0, r3
 800a070:	2330      	movs	r3, #48	@ 0x30
 800a072:	001a      	movs	r2, r3
 800a074:	2100      	movs	r1, #0
 800a076:	f012 fb03 	bl	801c680 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800a07a:	2200      	movs	r2, #0
 800a07c:	2300      	movs	r3, #0
 800a07e:	21a0      	movs	r1, #160	@ 0xa0
 800a080:	1879      	adds	r1, r7, r1
 800a082:	600a      	str	r2, [r1, #0]
 800a084:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800a086:	2301      	movs	r3, #1
 800a088:	229c      	movs	r2, #156	@ 0x9c
 800a08a:	18ba      	adds	r2, r7, r2
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	e05b      	b.n	800a148 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800a090:	269c      	movs	r6, #156	@ 0x9c
 800a092:	19bb      	adds	r3, r7, r6
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	009a      	lsls	r2, r3, #2
 800a098:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a09a:	189b      	adds	r3, r3, r2
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	17db      	asrs	r3, r3, #31
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	4b6f      	ldr	r3, [pc, #444]	@ (800a264 <calculateSPLQ31+0x3a4>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	19bb      	adds	r3, r7, r6
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	18d3      	adds	r3, r2, r3
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	60bb      	str	r3, [r7, #8]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6938      	ldr	r0, [r7, #16]
 800a0be:	6979      	ldr	r1, [r7, #20]
 800a0c0:	f7f6 fa7e 	bl	80005c0 <__aeabi_lmul>
 800a0c4:	0002      	movs	r2, r0
 800a0c6:	000b      	movs	r3, r1
 800a0c8:	0010      	movs	r0, r2
 800a0ca:	0019      	movs	r1, r3
 800a0cc:	23a0      	movs	r3, #160	@ 0xa0
 800a0ce:	18fa      	adds	r2, r7, r3
 800a0d0:	6853      	ldr	r3, [r2, #4]
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	1812      	adds	r2, r2, r0
 800a0d6:	414b      	adcs	r3, r1
 800a0d8:	21a0      	movs	r1, #160	@ 0xa0
 800a0da:	1879      	adds	r1, r7, r1
 800a0dc:	600a      	str	r2, [r1, #0]
 800a0de:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800a0e0:	4b61      	ldr	r3, [pc, #388]	@ (800a268 <calculateSPLQ31+0x3a8>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	19bb      	adds	r3, r7, r6
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	18d3      	adds	r3, r2, r3
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b06      	cmp	r3, #6
 800a0ee:	d025      	beq.n	800a13c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800a0f0:	4b5d      	ldr	r3, [pc, #372]	@ (800a268 <calculateSPLQ31+0x3a8>)
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	19bb      	adds	r3, r7, r6
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	18d3      	adds	r3, r2, r3
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	2230      	movs	r2, #48	@ 0x30
 800a0fe:	18ba      	adds	r2, r7, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	18d3      	adds	r3, r2, r3
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	6859      	ldr	r1, [r3, #4]
 800a108:	19bb      	adds	r3, r7, r6
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	009a      	lsls	r2, r3, #2
 800a10e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a110:	189b      	adds	r3, r3, r2
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	603b      	str	r3, [r7, #0]
 800a116:	17db      	asrs	r3, r3, #31
 800a118:	607b      	str	r3, [r7, #4]
 800a11a:	4b53      	ldr	r3, [pc, #332]	@ (800a268 <calculateSPLQ31+0x3a8>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	19be      	adds	r6, r7, r6
 800a120:	6833      	ldr	r3, [r6, #0]
 800a122:	18d3      	adds	r3, r2, r3
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	001e      	movs	r6, r3
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	1880      	adds	r0, r0, r2
 800a12e:	4159      	adcs	r1, r3
 800a130:	2330      	movs	r3, #48	@ 0x30
 800a132:	18fa      	adds	r2, r7, r3
 800a134:	00f3      	lsls	r3, r6, #3
 800a136:	18d3      	adds	r3, r2, r3
 800a138:	6018      	str	r0, [r3, #0]
 800a13a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800a13c:	229c      	movs	r2, #156	@ 0x9c
 800a13e:	18bb      	adds	r3, r7, r2
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3301      	adds	r3, #1
 800a144:	18ba      	adds	r2, r7, r2
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	239c      	movs	r3, #156	@ 0x9c
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a150:	d99e      	bls.n	800a090 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800a152:	2380      	movs	r3, #128	@ 0x80
 800a154:	18fb      	adds	r3, r7, r3
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	001a      	movs	r2, r3
 800a15c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	18d3      	adds	r3, r2, r3
 800a162:	3b22      	subs	r3, #34	@ 0x22
 800a164:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800a166:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a168:	17da      	asrs	r2, r3, #31
 800a16a:	189b      	adds	r3, r3, r2
 800a16c:	4053      	eors	r3, r2
 800a16e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800a170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a172:	2b00      	cmp	r3, #0
 800a174:	da62      	bge.n	800a23c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800a176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a178:	3b20      	subs	r3, #32
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	db05      	blt.n	800a18a <calculateSPLQ31+0x2ca>
 800a17e:	22a0      	movs	r2, #160	@ 0xa0
 800a180:	18ba      	adds	r2, r7, r2
 800a182:	6812      	ldr	r2, [r2, #0]
 800a184:	409a      	lsls	r2, r3
 800a186:	627a      	str	r2, [r7, #36]	@ 0x24
 800a188:	e010      	b.n	800a1ac <calculateSPLQ31+0x2ec>
 800a18a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a18c:	2220      	movs	r2, #32
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	22a0      	movs	r2, #160	@ 0xa0
 800a192:	18ba      	adds	r2, r7, r2
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	40da      	lsrs	r2, r3
 800a198:	0013      	movs	r3, r2
 800a19a:	22a4      	movs	r2, #164	@ 0xa4
 800a19c:	18ba      	adds	r2, r7, r2
 800a19e:	6811      	ldr	r1, [r2, #0]
 800a1a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1a2:	4091      	lsls	r1, r2
 800a1a4:	6279      	str	r1, [r7, #36]	@ 0x24
 800a1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800a1ac:	21a0      	movs	r1, #160	@ 0xa0
 800a1ae:	187b      	adds	r3, r7, r1
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b4:	409a      	lsls	r2, r3
 800a1b6:	623a      	str	r2, [r7, #32]
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800a1bc:	187a      	adds	r2, r7, r1
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2298      	movs	r2, #152	@ 0x98
 800a1c6:	18ba      	adds	r2, r7, r2
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	e031      	b.n	800a230 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800a1cc:	2330      	movs	r3, #48	@ 0x30
 800a1ce:	18fa      	adds	r2, r7, r3
 800a1d0:	2398      	movs	r3, #152	@ 0x98
 800a1d2:	18fb      	adds	r3, r7, r3
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	18d3      	adds	r3, r2, r3
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a1e0:	3920      	subs	r1, #32
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	db03      	blt.n	800a1ee <calculateSPLQ31+0x32e>
 800a1e6:	0010      	movs	r0, r2
 800a1e8:	4088      	lsls	r0, r1
 800a1ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a1ec:	e00c      	b.n	800a208 <calculateSPLQ31+0x348>
 800a1ee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a1f0:	2020      	movs	r0, #32
 800a1f2:	1a41      	subs	r1, r0, r1
 800a1f4:	0010      	movs	r0, r2
 800a1f6:	40c8      	lsrs	r0, r1
 800a1f8:	0001      	movs	r1, r0
 800a1fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1fc:	001c      	movs	r4, r3
 800a1fe:	4084      	lsls	r4, r0
 800a200:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800a202:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a204:	4308      	orrs	r0, r1
 800a206:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a208:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a20a:	0013      	movs	r3, r2
 800a20c:	408b      	lsls	r3, r1
 800a20e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a210:	2330      	movs	r3, #48	@ 0x30
 800a212:	18fa      	adds	r2, r7, r3
 800a214:	2098      	movs	r0, #152	@ 0x98
 800a216:	183b      	adds	r3, r7, r0
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	18d3      	adds	r3, r2, r3
 800a21e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a222:	6019      	str	r1, [r3, #0]
 800a224:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a226:	183b      	adds	r3, r7, r0
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	183a      	adds	r2, r7, r0
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	2398      	movs	r3, #152	@ 0x98
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b05      	cmp	r3, #5
 800a238:	d9c8      	bls.n	800a1cc <calculateSPLQ31+0x30c>
 800a23a:	e06b      	b.n	800a314 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800a23c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a23e:	3b20      	subs	r3, #32
 800a240:	2b00      	cmp	r3, #0
 800a242:	db13      	blt.n	800a26c <calculateSPLQ31+0x3ac>
 800a244:	22a4      	movs	r2, #164	@ 0xa4
 800a246:	18ba      	adds	r2, r7, r2
 800a248:	6812      	ldr	r2, [r2, #0]
 800a24a:	40da      	lsrs	r2, r3
 800a24c:	61ba      	str	r2, [r7, #24]
 800a24e:	e01e      	b.n	800a28e <calculateSPLQ31+0x3ce>
 800a250:	20001ac8 	.word	0x20001ac8
 800a254:	7fffffff 	.word	0x7fffffff
 800a258:	20001d14 	.word	0x20001d14
 800a25c:	200000ac 	.word	0x200000ac
 800a260:	20001d1c 	.word	0x20001d1c
 800a264:	200000b0 	.word	0x200000b0
 800a268:	200000bc 	.word	0x200000bc
 800a26c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a26e:	2220      	movs	r2, #32
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	22a4      	movs	r2, #164	@ 0xa4
 800a274:	18ba      	adds	r2, r7, r2
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	409a      	lsls	r2, r3
 800a27a:	0013      	movs	r3, r2
 800a27c:	22a0      	movs	r2, #160	@ 0xa0
 800a27e:	18ba      	adds	r2, r7, r2
 800a280:	6811      	ldr	r1, [r2, #0]
 800a282:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a284:	40d1      	lsrs	r1, r2
 800a286:	61b9      	str	r1, [r7, #24]
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	431a      	orrs	r2, r3
 800a28c:	61ba      	str	r2, [r7, #24]
 800a28e:	23a4      	movs	r3, #164	@ 0xa4
 800a290:	18fb      	adds	r3, r7, r3
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a296:	40da      	lsrs	r2, r3
 800a298:	61fa      	str	r2, [r7, #28]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	21a0      	movs	r1, #160	@ 0xa0
 800a2a0:	1879      	adds	r1, r7, r1
 800a2a2:	600a      	str	r2, [r1, #0]
 800a2a4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	2294      	movs	r2, #148	@ 0x94
 800a2aa:	18ba      	adds	r2, r7, r2
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	e02c      	b.n	800a30a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800a2b0:	2330      	movs	r3, #48	@ 0x30
 800a2b2:	18fa      	adds	r2, r7, r3
 800a2b4:	2394      	movs	r3, #148	@ 0x94
 800a2b6:	18fb      	adds	r3, r7, r3
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	00db      	lsls	r3, r3, #3
 800a2bc:	18d3      	adds	r3, r2, r3
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a2c4:	3920      	subs	r1, #32
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	db03      	blt.n	800a2d2 <calculateSPLQ31+0x412>
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	40c8      	lsrs	r0, r1
 800a2ce:	0004      	movs	r4, r0
 800a2d0:	e00a      	b.n	800a2e8 <calculateSPLQ31+0x428>
 800a2d2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a2d4:	2020      	movs	r0, #32
 800a2d6:	1a41      	subs	r1, r0, r1
 800a2d8:	0018      	movs	r0, r3
 800a2da:	4088      	lsls	r0, r1
 800a2dc:	0001      	movs	r1, r0
 800a2de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a2e0:	0016      	movs	r6, r2
 800a2e2:	40c6      	lsrs	r6, r0
 800a2e4:	0034      	movs	r4, r6
 800a2e6:	430c      	orrs	r4, r1
 800a2e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a2ea:	40cb      	lsrs	r3, r1
 800a2ec:	001d      	movs	r5, r3
 800a2ee:	2330      	movs	r3, #48	@ 0x30
 800a2f0:	18fa      	adds	r2, r7, r3
 800a2f2:	2194      	movs	r1, #148	@ 0x94
 800a2f4:	187b      	adds	r3, r7, r1
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	18d3      	adds	r3, r2, r3
 800a2fc:	601c      	str	r4, [r3, #0]
 800a2fe:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a300:	187b      	adds	r3, r7, r1
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	187a      	adds	r2, r7, r1
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	2394      	movs	r3, #148	@ 0x94
 800a30c:	18fb      	adds	r3, r7, r3
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b05      	cmp	r3, #5
 800a312:	d9cd      	bls.n	800a2b0 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800a314:	230f      	movs	r3, #15
 800a316:	425d      	negs	r5, r3
 800a318:	2305      	movs	r3, #5
 800a31a:	425e      	negs	r6, r3
 800a31c:	4b4a      	ldr	r3, [pc, #296]	@ (800a448 <calculateSPLQ31+0x588>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b4a      	ldr	r3, [pc, #296]	@ (800a44c <calculateSPLQ31+0x58c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	21a0      	movs	r1, #160	@ 0xa0
 800a32a:	1879      	adds	r1, r7, r1
 800a32c:	6808      	ldr	r0, [r1, #0]
 800a32e:	6849      	ldr	r1, [r1, #4]
 800a330:	4c47      	ldr	r4, [pc, #284]	@ (800a450 <calculateSPLQ31+0x590>)
 800a332:	9403      	str	r4, [sp, #12]
 800a334:	4c47      	ldr	r4, [pc, #284]	@ (800a454 <calculateSPLQ31+0x594>)
 800a336:	9402      	str	r4, [sp, #8]
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	9200      	str	r2, [sp, #0]
 800a33c:	0033      	movs	r3, r6
 800a33e:	002a      	movs	r2, r5
 800a340:	f000 fa86 	bl	800a850 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a344:	2300      	movs	r3, #0
 800a346:	2290      	movs	r2, #144	@ 0x90
 800a348:	18ba      	adds	r2, r7, r2
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	e026      	b.n	800a39c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a34e:	2330      	movs	r3, #48	@ 0x30
 800a350:	18fa      	adds	r2, r7, r3
 800a352:	2490      	movs	r4, #144	@ 0x90
 800a354:	193b      	adds	r3, r7, r4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	18d3      	adds	r3, r2, r3
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	6859      	ldr	r1, [r3, #4]
 800a360:	230f      	movs	r3, #15
 800a362:	425d      	negs	r5, r3
 800a364:	2305      	movs	r3, #5
 800a366:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800a368:	193b      	adds	r3, r7, r4
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	009a      	lsls	r2, r3, #2
 800a36e:	4b3a      	ldr	r3, [pc, #232]	@ (800a458 <calculateSPLQ31+0x598>)
 800a370:	18d3      	adds	r3, r2, r3
 800a372:	193a      	adds	r2, r7, r4
 800a374:	6812      	ldr	r2, [r2, #0]
 800a376:	0094      	lsls	r4, r2, #2
 800a378:	4a38      	ldr	r2, [pc, #224]	@ (800a45c <calculateSPLQ31+0x59c>)
 800a37a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a37c:	9203      	str	r2, [sp, #12]
 800a37e:	9302      	str	r3, [sp, #8]
 800a380:	2300      	movs	r3, #0
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	2300      	movs	r3, #0
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	0033      	movs	r3, r6
 800a38a:	002a      	movs	r2, r5
 800a38c:	f000 fa60 	bl	800a850 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a390:	2490      	movs	r4, #144	@ 0x90
 800a392:	193b      	adds	r3, r7, r4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3301      	adds	r3, #1
 800a398:	193a      	adds	r2, r7, r4
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	2390      	movs	r3, #144	@ 0x90
 800a39e:	18fb      	adds	r3, r7, r3
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d9d3      	bls.n	800a34e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800a3a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a454 <calculateSPLQ31+0x594>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b2d      	ldr	r3, [pc, #180]	@ (800a460 <calculateSPLQ31+0x5a0>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	18d2      	adds	r2, r2, r3
 800a3b0:	4b2b      	ldr	r3, [pc, #172]	@ (800a460 <calculateSPLQ31+0x5a0>)
 800a3b2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800a3b4:	4b26      	ldr	r3, [pc, #152]	@ (800a450 <calculateSPLQ31+0x590>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	4b2a      	ldr	r3, [pc, #168]	@ (800a464 <calculateSPLQ31+0x5a4>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	18d2      	adds	r2, r2, r3
 800a3be:	4b29      	ldr	r3, [pc, #164]	@ (800a464 <calculateSPLQ31+0x5a4>)
 800a3c0:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	228c      	movs	r2, #140	@ 0x8c
 800a3c6:	18ba      	adds	r2, r7, r2
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	e025      	b.n	800a418 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800a3cc:	4b22      	ldr	r3, [pc, #136]	@ (800a458 <calculateSPLQ31+0x598>)
 800a3ce:	208c      	movs	r0, #140	@ 0x8c
 800a3d0:	183a      	adds	r2, r7, r0
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	0092      	lsls	r2, r2, #2
 800a3d6:	58d2      	ldr	r2, [r2, r3]
 800a3d8:	4b23      	ldr	r3, [pc, #140]	@ (800a468 <calculateSPLQ31+0x5a8>)
 800a3da:	1839      	adds	r1, r7, r0
 800a3dc:	6809      	ldr	r1, [r1, #0]
 800a3de:	0089      	lsls	r1, r1, #2
 800a3e0:	58cb      	ldr	r3, [r1, r3]
 800a3e2:	18d1      	adds	r1, r2, r3
 800a3e4:	4b20      	ldr	r3, [pc, #128]	@ (800a468 <calculateSPLQ31+0x5a8>)
 800a3e6:	183a      	adds	r2, r7, r0
 800a3e8:	6812      	ldr	r2, [r2, #0]
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800a3ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a45c <calculateSPLQ31+0x59c>)
 800a3f0:	183a      	adds	r2, r7, r0
 800a3f2:	6812      	ldr	r2, [r2, #0]
 800a3f4:	0092      	lsls	r2, r2, #2
 800a3f6:	58d2      	ldr	r2, [r2, r3]
 800a3f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a46c <calculateSPLQ31+0x5ac>)
 800a3fa:	1839      	adds	r1, r7, r0
 800a3fc:	6809      	ldr	r1, [r1, #0]
 800a3fe:	0089      	lsls	r1, r1, #2
 800a400:	58cb      	ldr	r3, [r1, r3]
 800a402:	18d1      	adds	r1, r2, r3
 800a404:	4b19      	ldr	r3, [pc, #100]	@ (800a46c <calculateSPLQ31+0x5ac>)
 800a406:	183a      	adds	r2, r7, r0
 800a408:	6812      	ldr	r2, [r2, #0]
 800a40a:	0092      	lsls	r2, r2, #2
 800a40c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a40e:	183b      	adds	r3, r7, r0
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3301      	adds	r3, #1
 800a414:	183a      	adds	r2, r7, r0
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	238c      	movs	r3, #140	@ 0x8c
 800a41a:	18fb      	adds	r3, r7, r3
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b05      	cmp	r3, #5
 800a420:	d9d4      	bls.n	800a3cc <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <calculateSPLQ31+0x5b0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	4b11      	ldr	r3, [pc, #68]	@ (800a470 <calculateSPLQ31+0x5b0>)
 800a42a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800a42c:	4b10      	ldr	r3, [pc, #64]	@ (800a470 <calculateSPLQ31+0x5b0>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b0f      	cmp	r3, #15
 800a432:	d905      	bls.n	800a440 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800a434:	4b0f      	ldr	r3, [pc, #60]	@ (800a474 <calculateSPLQ31+0x5b4>)
 800a436:	2201      	movs	r2, #1
 800a438:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800a43a:	4b0f      	ldr	r3, [pc, #60]	@ (800a478 <calculateSPLQ31+0x5b8>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	701a      	strb	r2, [r3, #0]
    }
}
 800a440:	46c0      	nop			@ (mov r8, r8)
 800a442:	46bd      	mov	sp, r7
 800a444:	b02f      	add	sp, #188	@ 0xbc
 800a446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a448:	200000b4 	.word	0x200000b4
 800a44c:	200000b8 	.word	0x200000b8
 800a450:	20001294 	.word	0x20001294
 800a454:	20001290 	.word	0x20001290
 800a458:	20001298 	.word	0x20001298
 800a45c:	200012b0 	.word	0x200012b0
 800a460:	20001cd8 	.word	0x20001cd8
 800a464:	20001cdc 	.word	0x20001cdc
 800a468:	20001ce0 	.word	0x20001ce0
 800a46c:	20001cf8 	.word	0x20001cf8
 800a470:	20001d10 	.word	0x20001d10
 800a474:	20001284 	.word	0x20001284
 800a478:	20001282 	.word	0x20001282

0800a47c <resetSPLstate>:

static void resetSPLstate(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800a482:	4b11      	ldr	r3, [pc, #68]	@ (800a4c8 <resetSPLstate+0x4c>)
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800a488:	4b10      	ldr	r3, [pc, #64]	@ (800a4cc <resetSPLstate+0x50>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800a48e:	4b10      	ldr	r3, [pc, #64]	@ (800a4d0 <resetSPLstate+0x54>)
 800a490:	2200      	movs	r2, #0
 800a492:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a494:	2300      	movs	r3, #0
 800a496:	607b      	str	r3, [r7, #4]
 800a498:	e00c      	b.n	800a4b4 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800a49a:	4b0e      	ldr	r3, [pc, #56]	@ (800a4d4 <resetSPLstate+0x58>)
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	0092      	lsls	r2, r2, #2
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800a4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d8 <resetSPLstate+0x5c>)
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	607b      	str	r3, [r7, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	d9ef      	bls.n	800a49a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800a4ba:	4b08      	ldr	r3, [pc, #32]	@ (800a4dc <resetSPLstate+0x60>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	701a      	strb	r2, [r3, #0]
}
 800a4c0:	46c0      	nop			@ (mov r8, r8)
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	b002      	add	sp, #8
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20001cd8 	.word	0x20001cd8
 800a4cc:	20001cdc 	.word	0x20001cdc
 800a4d0:	20001d10 	.word	0x20001d10
 800a4d4:	20001ce0 	.word	0x20001ce0
 800a4d8:	20001cf8 	.word	0x20001cf8
 800a4dc:	20001284 	.word	0x20001284

0800a4e0 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800a4e0:	b5b0      	push	{r4, r5, r7, lr}
 800a4e2:	b090      	sub	sp, #64	@ 0x40
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	0019      	movs	r1, r3
 800a4ec:	1dfb      	adds	r3, r7, #7
 800a4ee:	701a      	strb	r2, [r3, #0]
 800a4f0:	1dbb      	adds	r3, r7, #6
 800a4f2:	1c0a      	adds	r2, r1, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800a4f6:	1dfb      	adds	r3, r7, #7
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800a4fe:	4b3b      	ldr	r3, [pc, #236]	@ (800a5ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800a504:	4b3a      	ldr	r3, [pc, #232]	@ (800a5f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800a506:	2200      	movs	r2, #0
 800a508:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800a512:	2305      	movs	r3, #5
 800a514:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800a516:	2300      	movs	r3, #0
 800a518:	637b      	str	r3, [r7, #52]	@ 0x34
 800a51a:	e040      	b.n	800a59e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800a51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	18d3      	adds	r3, r2, r3
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	409a      	lsls	r2, r3
 800a52a:	0013      	movs	r3, r2
 800a52c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800a52e:	4b30      	ldr	r3, [pc, #192]	@ (800a5f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	425a      	negs	r2, r3
 800a534:	4b2e      	ldr	r3, [pc, #184]	@ (800a5f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800a536:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800a538:	2418      	movs	r4, #24
 800a53a:	193a      	adds	r2, r7, r4
 800a53c:	492c      	ldr	r1, [pc, #176]	@ (800a5f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800a53e:	231c      	movs	r3, #28
 800a540:	18f8      	adds	r0, r7, r3
 800a542:	2301      	movs	r3, #1
 800a544:	f010 fbd0 	bl	801ace8 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800a548:	2514      	movs	r5, #20
 800a54a:	197a      	adds	r2, r7, r5
 800a54c:	1939      	adds	r1, r7, r4
 800a54e:	4829      	ldr	r0, [pc, #164]	@ (800a5f4 <getFilteredMaxAmplitudeQ31+0x114>)
 800a550:	2301      	movs	r3, #1
 800a552:	f010 fb97 	bl	801ac84 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800a556:	2410      	movs	r4, #16
 800a558:	193a      	adds	r2, r7, r4
 800a55a:	4924      	ldr	r1, [pc, #144]	@ (800a5ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800a55c:	4826      	ldr	r0, [pc, #152]	@ (800a5f8 <getFilteredMaxAmplitudeQ31+0x118>)
 800a55e:	2301      	movs	r3, #1
 800a560:	f010 fb90 	bl	801ac84 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800a564:	4a21      	ldr	r2, [pc, #132]	@ (800a5ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800a566:	1939      	adds	r1, r7, r4
 800a568:	1978      	adds	r0, r7, r5
 800a56a:	2301      	movs	r3, #1
 800a56c:	f010 fbbc 	bl	801ace8 <arm_add_q31>

        lastData = fx;
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	4b1f      	ldr	r3, [pc, #124]	@ (800a5f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800a574:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800a576:	4b1d      	ldr	r3, [pc, #116]	@ (800a5ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a57c:	429a      	cmp	r2, r3
 800a57e:	da03      	bge.n	800a588 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800a580:	4b1a      	ldr	r3, [pc, #104]	@ (800a5ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a586:	e007      	b.n	800a598 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800a588:	4b18      	ldr	r3, [pc, #96]	@ (800a5ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a58e:	429a      	cmp	r2, r3
 800a590:	dd02      	ble.n	800a598 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800a592:	4b16      	ldr	r3, [pc, #88]	@ (800a5ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800a598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59a:	3301      	adds	r3, #1
 800a59c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a59e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d3ba      	bcc.n	800a51c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a8:	17da      	asrs	r2, r3, #31
 800a5aa:	189b      	adds	r3, r3, r2
 800a5ac:	4053      	eors	r3, r2
 800a5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800a5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800a5b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d200      	bcs.n	800a5be <getFilteredMaxAmplitudeQ31+0xde>
 800a5bc:	0013      	movs	r3, r2
 800a5be:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800a5c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	40da      	lsrs	r2, r3
 800a5c6:	0013      	movs	r3, r2
 800a5c8:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800a5ca:	1dbb      	adds	r3, r7, #6
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d007      	beq.n	800a5e2 <getFilteredMaxAmplitudeQ31+0x102>
 800a5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5fc <getFilteredMaxAmplitudeQ31+0x11c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6a3a      	ldr	r2, [r7, #32]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d902      	bls.n	800a5e2 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800a5dc:	4b07      	ldr	r3, [pc, #28]	@ (800a5fc <getFilteredMaxAmplitudeQ31+0x11c>)
 800a5de:	6a3a      	ldr	r2, [r7, #32]
 800a5e0:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
}
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	b010      	add	sp, #64	@ 0x40
 800a5ea:	bdb0      	pop	{r4, r5, r7, pc}
 800a5ec:	20002114 	.word	0x20002114
 800a5f0:	20002118 	.word	0x20002118
 800a5f4:	08020bc4 	.word	0x08020bc4
 800a5f8:	08020bc8 	.word	0x08020bc8
 800a5fc:	2000128c 	.word	0x2000128c

0800a600 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800a60c:	4913      	ldr	r1, [pc, #76]	@ (800a65c <floatToIntAndFrac2dp+0x5c>)
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7f6 fcc6 	bl	8000fa0 <__aeabi_fmul>
 800a614:	1c03      	adds	r3, r0, #0
 800a616:	1c18      	adds	r0, r3, #0
 800a618:	f014 ff3c 	bl	801f494 <roundf>
 800a61c:	1c03      	adds	r3, r0, #0
 800a61e:	1c18      	adds	r0, r3, #0
 800a620:	f7f5 fffc 	bl	800061c <__aeabi_f2uiz>
 800a624:	0003      	movs	r3, r0
 800a626:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2164      	movs	r1, #100	@ 0x64
 800a62c:	0018      	movs	r0, r3
 800a62e:	f7f5 fdb9 	bl	80001a4 <__udivsi3>
 800a632:	0003      	movs	r3, r0
 800a634:	001a      	movs	r2, r3
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2164      	movs	r1, #100	@ 0x64
 800a646:	434b      	muls	r3, r1
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	701a      	strb	r2, [r3, #0]
}
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	46bd      	mov	sp, r7
 800a656:	b006      	add	sp, #24
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	46c0      	nop			@ (mov r8, r8)
 800a65c:	42c80000 	.word	0x42c80000

0800a660 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800a66c:	4914      	ldr	r1, [pc, #80]	@ (800a6c0 <floatToIntAndFrac1dp+0x60>)
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7f6 fc96 	bl	8000fa0 <__aeabi_fmul>
 800a674:	1c03      	adds	r3, r0, #0
 800a676:	1c18      	adds	r0, r3, #0
 800a678:	f014 ff0c 	bl	801f494 <roundf>
 800a67c:	1c03      	adds	r3, r0, #0
 800a67e:	1c18      	adds	r0, r3, #0
 800a680:	f7f5 ffcc 	bl	800061c <__aeabi_f2uiz>
 800a684:	0003      	movs	r3, r0
 800a686:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	210a      	movs	r1, #10
 800a68c:	0018      	movs	r0, r3
 800a68e:	f7f5 fd89 	bl	80001a4 <__udivsi3>
 800a692:	0003      	movs	r3, r0
 800a694:	001a      	movs	r2, r3
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	1c19      	adds	r1, r3, #0
 800a6a6:	0089      	lsls	r1, r1, #2
 800a6a8:	18cb      	adds	r3, r1, r3
 800a6aa:	18db      	adds	r3, r3, r3
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	701a      	strb	r2, [r3, #0]
}
 800a6b6:	46c0      	nop			@ (mov r8, r8)
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	b006      	add	sp, #24
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	46c0      	nop			@ (mov r8, r8)
 800a6c0:	41200000 	.word	0x41200000

0800a6c4 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800a6c4:	b590      	push	{r4, r7, lr}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7f6 ff7c 	bl	80015d0 <__aeabi_i2f>
 800a6d8:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a6da:	6838      	ldr	r0, [r7, #0]
 800a6dc:	f7f6 ff78 	bl	80015d0 <__aeabi_i2f>
 800a6e0:	1c03      	adds	r3, r0, #0
 800a6e2:	4918      	ldr	r1, [pc, #96]	@ (800a744 <sumToIntAverage+0x80>)
 800a6e4:	1c18      	adds	r0, r3, #0
 800a6e6:	f7f6 fa75 	bl	8000bd4 <__aeabi_fdiv>
 800a6ea:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a6ec:	1c19      	adds	r1, r3, #0
 800a6ee:	1c20      	adds	r0, r4, #0
 800a6f0:	f7f6 f8e6 	bl	80008c0 <__aeabi_fadd>
 800a6f4:	1c03      	adds	r3, r0, #0
 800a6f6:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a6f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6fa:	f7f6 ffb5 	bl	8001668 <__aeabi_ui2f>
 800a6fe:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a700:	1c19      	adds	r1, r3, #0
 800a702:	1c20      	adds	r0, r4, #0
 800a704:	f7f6 fa66 	bl	8000bd4 <__aeabi_fdiv>
 800a708:	1c03      	adds	r3, r0, #0
 800a70a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	2310      	movs	r3, #16
 800a714:	18f9      	adds	r1, r7, r3
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	1c18      	adds	r0, r3, #0
 800a71a:	f7ff ffa1 	bl	800a660 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2bff      	cmp	r3, #255	@ 0xff
 800a722:	d906      	bls.n	800a732 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	22ff      	movs	r2, #255	@ 0xff
 800a728:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2209      	movs	r2, #9
 800a72e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800a730:	e003      	b.n	800a73a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	b2da      	uxtb	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	701a      	strb	r2, [r3, #0]
}
 800a73a:	46c0      	nop			@ (mov r8, r8)
 800a73c:	46bd      	mov	sp, r7
 800a73e:	b007      	add	sp, #28
 800a740:	bd90      	pop	{r4, r7, pc}
 800a742:	46c0      	nop			@ (mov r8, r8)
 800a744:	41200000 	.word	0x41200000

0800a748 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
 800a754:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2280      	movs	r2, #128	@ 0x80
 800a75a:	0612      	lsls	r2, r2, #24
 800a75c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4a18      	ldr	r2, [pc, #96]	@ (800a7c4 <findMinMax+0x7c>)
 800a762:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e022      	b.n	800a7b0 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	18d3      	adds	r3, r2, r3
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	da06      	bge.n	800a78a <findMinMax+0x42>
        {
            min[0] = array[i];
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	18d3      	adds	r3, r2, r3
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	18d3      	adds	r3, r2, r3
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	dd06      	ble.n	800a7aa <findMinMax+0x62>
        {
            max[0] = array[i];
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	18d3      	adds	r3, r2, r3
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d3d8      	bcc.n	800a76a <findMinMax+0x22>
        }
    }
}
 800a7b8:	46c0      	nop			@ (mov r8, r8)
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	b006      	add	sp, #24
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	46c0      	nop			@ (mov r8, r8)
 800a7c4:	7fffffff 	.word	0x7fffffff

0800a7c8 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d302      	bcc.n	800a7e4 <getPo2factor+0x1c>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d107      	bne.n	800a7f4 <getPo2factor+0x2c>
    {
        return 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	e00d      	b.n	800a804 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	607b      	str	r3, [r7, #4]
        bitShift++;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d2f5      	bcs.n	800a7e8 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	0018      	movs	r0, r3
 800a806:	46bd      	mov	sp, r7
 800a808:	b004      	add	sp, #16
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7f6 ff24 	bl	8001668 <__aeabi_ui2f>
 800a820:	1c03      	adds	r3, r0, #0
 800a822:	1c19      	adds	r1, r3, #0
 800a824:	68b8      	ldr	r0, [r7, #8]
 800a826:	f7f6 fbbb 	bl	8000fa0 <__aeabi_fmul>
 800a82a:	1c03      	adds	r3, r0, #0
 800a82c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	2310      	movs	r3, #16
 800a836:	18f9      	adds	r1, r7, r3
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	1c18      	adds	r0, r3, #0
 800a83c:	f7ff fee0 	bl	800a600 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	b29a      	uxth	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	801a      	strh	r2, [r3, #0]
}
 800a848:	46c0      	nop			@ (mov r8, r8)
 800a84a:	46bd      	mov	sp, r7
 800a84c:	b006      	add	sp, #24
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	60b8      	str	r0, [r7, #8]
 800a858:	60f9      	str	r1, [r7, #12]
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a860:	6a3a      	ldr	r2, [r7, #32]
 800a862:	68b8      	ldr	r0, [r7, #8]
 800a864:	68f9      	ldr	r1, [r7, #12]
 800a866:	f7fb ffcb 	bl	8006800 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800a86a:	6a3b      	ldr	r3, [r7, #32]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	18d2      	adds	r2, r2, r3
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	18d2      	adds	r2, r2, r3
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	18d2      	adds	r2, r2, r3
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	18d2      	adds	r2, r2, r3
 800a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a888:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800a88a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	0011      	movs	r1, r2
 800a890:	0018      	movs	r0, r3
 800a892:	f7fc f845 	bl	8006920 <correctIntFracNumber>
}
 800a896:	46c0      	nop			@ (mov r8, r8)
 800a898:	46bd      	mov	sp, r7
 800a89a:	b004      	add	sp, #16
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b086      	sub	sp, #24
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	e019      	b.n	800a8e8 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	18d3      	adds	r3, r2, r3
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	3201      	adds	r2, #1
 800a8c4:	0052      	lsls	r2, r2, #1
 800a8c6:	68f9      	ldr	r1, [r7, #12]
 800a8c8:	188a      	adds	r2, r1, r2
 800a8ca:	8812      	ldrh	r2, [r2, #0]
 800a8cc:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a8ce:	0019      	movs	r1, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a8d8:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a8da:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d3e1      	bcc.n	800a8b4 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800a8f0:	46c0      	nop			@ (mov r8, r8)
 800a8f2:	46c0      	nop			@ (mov r8, r8)
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	b006      	add	sp, #24
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  init = false;
 800a900:	4b02      	ldr	r3, [pc, #8]	@ (800a90c <InitDone+0x10>)
 800a902:	2200      	movs	r2, #0
 800a904:	701a      	strb	r2, [r3, #0]
}
 800a906:	46c0      	nop			@ (mov r8, r8)
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	200000c0 	.word	0x200000c0

0800a910 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800a916:	f7fb fa41 	bl	8005d9c <ReadBatteryVoltage>
 800a91a:	1c03      	adds	r3, r0, #0
 800a91c:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800a91e:	491f      	ldr	r1, [pc, #124]	@ (800a99c <batteryChargeCheck+0x8c>)
 800a920:	6838      	ldr	r0, [r7, #0]
 800a922:	f7f5 fe05 	bl	8000530 <__aeabi_fcmplt>
 800a926:	1e03      	subs	r3, r0, #0
 800a928:	d002      	beq.n	800a930 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800a92a:	1dfb      	adds	r3, r7, #7
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800a930:	6838      	ldr	r0, [r7, #0]
 800a932:	f7f8 fd97 	bl	8003464 <__aeabi_f2d>
 800a936:	4a1a      	ldr	r2, [pc, #104]	@ (800a9a0 <batteryChargeCheck+0x90>)
 800a938:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a4 <batteryChargeCheck+0x94>)
 800a93a:	f7f5 fdbf 	bl	80004bc <__aeabi_dcmplt>
 800a93e:	1e03      	subs	r3, r0, #0
 800a940:	d008      	beq.n	800a954 <batteryChargeCheck+0x44>
 800a942:	4916      	ldr	r1, [pc, #88]	@ (800a99c <batteryChargeCheck+0x8c>)
 800a944:	6838      	ldr	r0, [r7, #0]
 800a946:	f7f5 fe11 	bl	800056c <__aeabi_fcmpge>
 800a94a:	1e03      	subs	r3, r0, #0
 800a94c:	d002      	beq.n	800a954 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800a94e:	1dfb      	adds	r3, r7, #7
 800a950:	2202      	movs	r2, #2
 800a952:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800a954:	2181      	movs	r1, #129	@ 0x81
 800a956:	05c9      	lsls	r1, r1, #23
 800a958:	6838      	ldr	r0, [r7, #0]
 800a95a:	f7f5 fde9 	bl	8000530 <__aeabi_fcmplt>
 800a95e:	1e03      	subs	r3, r0, #0
 800a960:	d00b      	beq.n	800a97a <batteryChargeCheck+0x6a>
 800a962:	6838      	ldr	r0, [r7, #0]
 800a964:	f7f8 fd7e 	bl	8003464 <__aeabi_f2d>
 800a968:	4a0d      	ldr	r2, [pc, #52]	@ (800a9a0 <batteryChargeCheck+0x90>)
 800a96a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a4 <batteryChargeCheck+0x94>)
 800a96c:	f7f5 fdc4 	bl	80004f8 <__aeabi_dcmpge>
 800a970:	1e03      	subs	r3, r0, #0
 800a972:	d002      	beq.n	800a97a <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800a974:	1dfb      	adds	r3, r7, #7
 800a976:	2203      	movs	r2, #3
 800a978:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800a97a:	2181      	movs	r1, #129	@ 0x81
 800a97c:	05c9      	lsls	r1, r1, #23
 800a97e:	6838      	ldr	r0, [r7, #0]
 800a980:	f7f5 fdf4 	bl	800056c <__aeabi_fcmpge>
 800a984:	1e03      	subs	r3, r0, #0
 800a986:	d002      	beq.n	800a98e <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800a988:	1dfb      	adds	r3, r7, #7
 800a98a:	2204      	movs	r2, #4
 800a98c:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800a98e:	1dfb      	adds	r3, r7, #7
 800a990:	781b      	ldrb	r3, [r3, #0]
}
 800a992:	0018      	movs	r0, r3
 800a994:	46bd      	mov	sp, r7
 800a996:	b002      	add	sp, #8
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	46c0      	nop			@ (mov r8, r8)
 800a99c:	40600000 	.word	0x40600000
 800a9a0:	9999999a 	.word	0x9999999a
 800a9a4:	400d9999 	.word	0x400d9999

0800a9a8 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800a9a8:	b590      	push	{r4, r7, lr}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	0004      	movs	r4, r0
 800a9b0:	0008      	movs	r0, r1
 800a9b2:	0011      	movs	r1, r2
 800a9b4:	1dbb      	adds	r3, r7, #6
 800a9b6:	1c22      	adds	r2, r4, #0
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	1d3b      	adds	r3, r7, #4
 800a9bc:	1c02      	adds	r2, r0, #0
 800a9be:	801a      	strh	r2, [r3, #0]
 800a9c0:	1cbb      	adds	r3, r7, #2
 800a9c2:	1c0a      	adds	r2, r1, #0
 800a9c4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <SetStatusLED+0x5c>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d107      	bne.n	800a9de <SetStatusLED+0x36>
 800a9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800aa08 <SetStatusLED+0x60>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d103      	bne.n	800a9de <SetStatusLED+0x36>
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa0c <SetStatusLED+0x64>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00e      	beq.n	800a9fc <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800a9de:	2380      	movs	r3, #128	@ 0x80
 800a9e0:	05db      	lsls	r3, r3, #23
 800a9e2:	1dba      	adds	r2, r7, #6
 800a9e4:	8812      	ldrh	r2, [r2, #0]
 800a9e6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800a9e8:	2380      	movs	r3, #128	@ 0x80
 800a9ea:	05db      	lsls	r3, r3, #23
 800a9ec:	1d3a      	adds	r2, r7, #4
 800a9ee:	8812      	ldrh	r2, [r2, #0]
 800a9f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800a9f2:	2380      	movs	r3, #128	@ 0x80
 800a9f4:	05db      	lsls	r3, r3, #23
 800a9f6:	1cba      	adds	r2, r7, #2
 800a9f8:	8812      	ldrh	r2, [r2, #0]
 800a9fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a9fc:	46c0      	nop			@ (mov r8, r8)
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	b003      	add	sp, #12
 800aa02:	bd90      	pop	{r4, r7, pc}
 800aa04:	2000211d 	.word	0x2000211d
 800aa08:	200000c0 	.word	0x200000c0
 800aa0c:	2000211e 	.word	0x2000211e

0800aa10 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	0004      	movs	r4, r0
 800aa18:	0008      	movs	r0, r1
 800aa1a:	0011      	movs	r1, r2
 800aa1c:	1dfb      	adds	r3, r7, #7
 800aa1e:	1c22      	adds	r2, r4, #0
 800aa20:	701a      	strb	r2, [r3, #0]
 800aa22:	1dbb      	adds	r3, r7, #6
 800aa24:	1c02      	adds	r2, r0, #0
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	1d7b      	adds	r3, r7, #5
 800aa2a:	1c0a      	adds	r2, r1, #0
 800aa2c:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800aa2e:	4b19      	ldr	r3, [pc, #100]	@ (800aa94 <SetDBLED+0x84>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <SetDBLED+0x36>
 800aa36:	4b18      	ldr	r3, [pc, #96]	@ (800aa98 <SetDBLED+0x88>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d103      	bne.n	800aa46 <SetDBLED+0x36>
 800aa3e:	4b17      	ldr	r3, [pc, #92]	@ (800aa9c <SetDBLED+0x8c>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d022      	beq.n	800aa8c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800aa46:	1dfb      	adds	r3, r7, #7
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	4053      	eors	r3, r2
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	001a      	movs	r2, r3
 800aa52:	4b13      	ldr	r3, [pc, #76]	@ (800aaa0 <SetDBLED+0x90>)
 800aa54:	2101      	movs	r1, #1
 800aa56:	0018      	movs	r0, r3
 800aa58:	f002 fd3f 	bl	800d4da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800aa5c:	1dbb      	adds	r3, r7, #6
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2201      	movs	r2, #1
 800aa62:	4053      	eors	r3, r2
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	001a      	movs	r2, r3
 800aa68:	2380      	movs	r3, #128	@ 0x80
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	480c      	ldr	r0, [pc, #48]	@ (800aaa0 <SetDBLED+0x90>)
 800aa6e:	0019      	movs	r1, r3
 800aa70:	f002 fd33 	bl	800d4da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800aa74:	1d7b      	adds	r3, r7, #5
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	4053      	eors	r3, r2
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	001a      	movs	r2, r3
 800aa80:	2380      	movs	r3, #128	@ 0x80
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4806      	ldr	r0, [pc, #24]	@ (800aaa0 <SetDBLED+0x90>)
 800aa86:	0019      	movs	r1, r3
 800aa88:	f002 fd27 	bl	800d4da <HAL_GPIO_WritePin>
  }
}
 800aa8c:	46c0      	nop			@ (mov r8, r8)
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	b003      	add	sp, #12
 800aa92:	bd90      	pop	{r4, r7, pc}
 800aa94:	2000211d 	.word	0x2000211d
 800aa98:	200000c0 	.word	0x200000c0
 800aa9c:	2000211e 	.word	0x2000211e
 800aaa0:	50000400 	.word	0x50000400

0800aaa4 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800aaa4:	b590      	push	{r4, r7, lr}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	0004      	movs	r4, r0
 800aaac:	0008      	movs	r0, r1
 800aaae:	0011      	movs	r1, r2
 800aab0:	1dbb      	adds	r3, r7, #6
 800aab2:	1c22      	adds	r2, r4, #0
 800aab4:	801a      	strh	r2, [r3, #0]
 800aab6:	1d3b      	adds	r3, r7, #4
 800aab8:	1c02      	adds	r2, r0, #0
 800aaba:	801a      	strh	r2, [r3, #0]
 800aabc:	1cbb      	adds	r3, r7, #2
 800aabe:	1c0a      	adds	r2, r1, #0
 800aac0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800aac2:	4b0e      	ldr	r3, [pc, #56]	@ (800aafc <SetVocLED+0x58>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d107      	bne.n	800aada <SetVocLED+0x36>
 800aaca:	4b0d      	ldr	r3, [pc, #52]	@ (800ab00 <SetVocLED+0x5c>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d103      	bne.n	800aada <SetVocLED+0x36>
 800aad2:	4b0c      	ldr	r3, [pc, #48]	@ (800ab04 <SetVocLED+0x60>)
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800aada:	4b0b      	ldr	r3, [pc, #44]	@ (800ab08 <SetVocLED+0x64>)
 800aadc:	1dba      	adds	r2, r7, #6
 800aade:	8812      	ldrh	r2, [r2, #0]
 800aae0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800aae2:	4b09      	ldr	r3, [pc, #36]	@ (800ab08 <SetVocLED+0x64>)
 800aae4:	1d3a      	adds	r2, r7, #4
 800aae6:	8812      	ldrh	r2, [r2, #0]
 800aae8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800aaea:	4b07      	ldr	r3, [pc, #28]	@ (800ab08 <SetVocLED+0x64>)
 800aaec:	1cba      	adds	r2, r7, #2
 800aaee:	8812      	ldrh	r2, [r2, #0]
 800aaf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800aaf2:	46c0      	nop			@ (mov r8, r8)
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	b003      	add	sp, #12
 800aaf8:	bd90      	pop	{r4, r7, pc}
 800aafa:	46c0      	nop			@ (mov r8, r8)
 800aafc:	2000211d 	.word	0x2000211d
 800ab00:	200000c0 	.word	0x200000c0
 800ab04:	2000211e 	.word	0x2000211e
 800ab08:	40000400 	.word	0x40000400

0800ab0c <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ab10:	4b07      	ldr	r3, [pc, #28]	@ (800ab30 <SetMeasurementIndicator+0x24>)
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d103      	bne.n	800ab20 <SetMeasurementIndicator+0x14>
 800ab18:	4b06      	ldr	r3, [pc, #24]	@ (800ab34 <SetMeasurementIndicator+0x28>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800ab20:	2380      	movs	r3, #128	@ 0x80
 800ab22:	05db      	lsls	r3, r3, #23
 800ab24:	4a04      	ldr	r2, [pc, #16]	@ (800ab38 <SetMeasurementIndicator+0x2c>)
 800ab26:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ab28:	46c0      	nop			@ (mov r8, r8)
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	46c0      	nop			@ (mov r8, r8)
 800ab30:	2000211d 	.word	0x2000211d
 800ab34:	2000211e 	.word	0x2000211e
 800ab38:	00000bb8 	.word	0x00000bb8

0800ab3c <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ab40:	4b07      	ldr	r3, [pc, #28]	@ (800ab60 <ResetMeasurementIndicator+0x24>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d103      	bne.n	800ab50 <ResetMeasurementIndicator+0x14>
 800ab48:	4b06      	ldr	r3, [pc, #24]	@ (800ab64 <ResetMeasurementIndicator+0x28>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d004      	beq.n	800ab5a <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800ab50:	2380      	movs	r3, #128	@ 0x80
 800ab52:	05db      	lsls	r3, r3, #23
 800ab54:	22fa      	movs	r2, #250	@ 0xfa
 800ab56:	0112      	lsls	r2, r2, #4
 800ab58:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ab5a:	46c0      	nop			@ (mov r8, r8)
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	2000211d 	.word	0x2000211d
 800ab64:	2000211e 	.word	0x2000211e

0800ab68 <SetMICIndicator>:
void SetMICIndicator(){
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ab6c:	4b07      	ldr	r3, [pc, #28]	@ (800ab8c <SetMICIndicator+0x24>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <SetMICIndicator+0x14>
 800ab74:	4b06      	ldr	r3, [pc, #24]	@ (800ab90 <SetMICIndicator+0x28>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800ab7c:	2380      	movs	r3, #128	@ 0x80
 800ab7e:	05db      	lsls	r3, r3, #23
 800ab80:	4a04      	ldr	r2, [pc, #16]	@ (800ab94 <SetMICIndicator+0x2c>)
 800ab82:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800ab84:	46c0      	nop			@ (mov r8, r8)
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	46c0      	nop			@ (mov r8, r8)
 800ab8c:	2000211d 	.word	0x2000211d
 800ab90:	2000211e 	.word	0x2000211e
 800ab94:	00000bb8 	.word	0x00000bb8

0800ab98 <ResetMICIndicator>:
void ResetMICIndicator(){
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ab9c:	4b07      	ldr	r3, [pc, #28]	@ (800abbc <ResetMICIndicator+0x24>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d103      	bne.n	800abac <ResetMICIndicator+0x14>
 800aba4:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <ResetMICIndicator+0x28>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800abac:	2380      	movs	r3, #128	@ 0x80
 800abae:	05db      	lsls	r3, r3, #23
 800abb0:	22fa      	movs	r2, #250	@ 0xfa
 800abb2:	0112      	lsls	r2, r2, #4
 800abb4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800abb6:	46c0      	nop			@ (mov r8, r8)
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	2000211d 	.word	0x2000211d
 800abc0:	2000211e 	.word	0x2000211e

0800abc4 <SetESPIndicator>:
void SetESPIndicator(){
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800abc8:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <SetESPIndicator+0x24>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d103      	bne.n	800abd8 <SetESPIndicator+0x14>
 800abd0:	4b06      	ldr	r3, [pc, #24]	@ (800abec <SetESPIndicator+0x28>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800abd8:	2380      	movs	r3, #128	@ 0x80
 800abda:	05db      	lsls	r3, r3, #23
 800abdc:	4a04      	ldr	r2, [pc, #16]	@ (800abf0 <SetESPIndicator+0x2c>)
 800abde:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800abe0:	46c0      	nop			@ (mov r8, r8)
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	46c0      	nop			@ (mov r8, r8)
 800abe8:	2000211d 	.word	0x2000211d
 800abec:	2000211e 	.word	0x2000211e
 800abf0:	00000bb8 	.word	0x00000bb8

0800abf4 <ResetESPIndicator>:
void ResetESPIndicator(){
 800abf4:	b580      	push	{r7, lr}
 800abf6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800abf8:	4b07      	ldr	r3, [pc, #28]	@ (800ac18 <ResetESPIndicator+0x24>)
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d103      	bne.n	800ac08 <ResetESPIndicator+0x14>
 800ac00:	4b06      	ldr	r3, [pc, #24]	@ (800ac1c <ResetESPIndicator+0x28>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800ac08:	2380      	movs	r3, #128	@ 0x80
 800ac0a:	05db      	lsls	r3, r3, #23
 800ac0c:	22fa      	movs	r2, #250	@ 0xfa
 800ac0e:	0112      	lsls	r2, r2, #4
 800ac10:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ac12:	46c0      	nop			@ (mov r8, r8)
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	2000211d 	.word	0x2000211d
 800ac1c:	2000211e 	.word	0x2000211e

0800ac20 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800ac24:	23fa      	movs	r3, #250	@ 0xfa
 800ac26:	011a      	lsls	r2, r3, #4
 800ac28:	23fa      	movs	r3, #250	@ 0xfa
 800ac2a:	0119      	lsls	r1, r3, #4
 800ac2c:	23fa      	movs	r3, #250	@ 0xfa
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	0018      	movs	r0, r3
 800ac32:	f7ff feb9 	bl	800a9a8 <SetStatusLED>
  SetDBLED(false,false,false);
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	f7ff fee8 	bl	800aa10 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800ac40:	23fa      	movs	r3, #250	@ 0xfa
 800ac42:	011a      	lsls	r2, r3, #4
 800ac44:	23fa      	movs	r3, #250	@ 0xfa
 800ac46:	0119      	lsls	r1, r3, #4
 800ac48:	23fa      	movs	r3, #250	@ 0xfa
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f7ff ff29 	bl	800aaa4 <SetVocLED>
return;
 800ac52:	46c0      	nop			@ (mov r8, r8)
}
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <powerCheck>:

Battery_Status powerCheck(){
 800ac58:	b590      	push	{r4, r7, lr}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800ac5e:	f7fb f963 	bl	8005f28 <Check_USB_PowerOn>
 800ac62:	0003      	movs	r3, r0
 800ac64:	001a      	movs	r2, r3
 800ac66:	2301      	movs	r3, #1
 800ac68:	4053      	eors	r3, r2
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d005      	beq.n	800ac7c <powerCheck+0x24>
    status = batteryChargeCheck();
 800ac70:	1dfc      	adds	r4, r7, #7
 800ac72:	f7ff fe4d 	bl	800a910 <batteryChargeCheck>
 800ac76:	0003      	movs	r3, r0
 800ac78:	7023      	strb	r3, [r4, #0]
 800ac7a:	e002      	b.n	800ac82 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800ac7c:	1dfb      	adds	r3, r7, #7
 800ac7e:	2201      	movs	r2, #1
 800ac80:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ac82:	1dfb      	adds	r3, r7, #7
 800ac84:	781b      	ldrb	r3, [r3, #0]
}
 800ac86:	0018      	movs	r0, r3
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	b003      	add	sp, #12
 800ac8c:	bd90      	pop	{r4, r7, pc}
	...

0800ac90 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	0002      	movs	r2, r0
 800ac98:	1dfb      	adds	r3, r7, #7
 800ac9a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800ac9c:	1dfb      	adds	r3, r7, #7
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d105      	bne.n	800acb0 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800aca4:	4a18      	ldr	r2, [pc, #96]	@ (800ad08 <powerDisplay+0x78>)
 800aca6:	4b19      	ldr	r3, [pc, #100]	@ (800ad0c <powerDisplay+0x7c>)
 800aca8:	0019      	movs	r1, r3
 800acaa:	2003      	movs	r0, #3
 800acac:	f000 fe1a 	bl	800b8e4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800acb0:	1dfb      	adds	r3, r7, #7
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d105      	bne.n	800acc4 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800acb8:	4a15      	ldr	r2, [pc, #84]	@ (800ad10 <powerDisplay+0x80>)
 800acba:	4b14      	ldr	r3, [pc, #80]	@ (800ad0c <powerDisplay+0x7c>)
 800acbc:	0019      	movs	r1, r3
 800acbe:	2003      	movs	r0, #3
 800acc0:	f000 fe10 	bl	800b8e4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800acc4:	1dfb      	adds	r3, r7, #7
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b03      	cmp	r3, #3
 800acca:	d105      	bne.n	800acd8 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800accc:	4a11      	ldr	r2, [pc, #68]	@ (800ad14 <powerDisplay+0x84>)
 800acce:	4b0f      	ldr	r3, [pc, #60]	@ (800ad0c <powerDisplay+0x7c>)
 800acd0:	0019      	movs	r1, r3
 800acd2:	2003      	movs	r0, #3
 800acd4:	f000 fe06 	bl	800b8e4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800acd8:	1dfb      	adds	r3, r7, #7
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d105      	bne.n	800acec <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800ace0:	4a0d      	ldr	r2, [pc, #52]	@ (800ad18 <powerDisplay+0x88>)
 800ace2:	4b0a      	ldr	r3, [pc, #40]	@ (800ad0c <powerDisplay+0x7c>)
 800ace4:	0019      	movs	r1, r3
 800ace6:	2003      	movs	r0, #3
 800ace8:	f000 fdfc 	bl	800b8e4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800acec:	1dfb      	adds	r3, r7, #7
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d105      	bne.n	800ad00 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800acf4:	4a09      	ldr	r2, [pc, #36]	@ (800ad1c <powerDisplay+0x8c>)
 800acf6:	4b05      	ldr	r3, [pc, #20]	@ (800ad0c <powerDisplay+0x7c>)
 800acf8:	0019      	movs	r1, r3
 800acfa:	2003      	movs	r0, #3
 800acfc:	f000 fdf2 	bl	800b8e4 <CreateLine>
  }
}
 800ad00:	46c0      	nop			@ (mov r8, r8)
 800ad02:	46bd      	mov	sp, r7
 800ad04:	b002      	add	sp, #8
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	080205d8 	.word	0x080205d8
 800ad0c:	080205e8 	.word	0x080205e8
 800ad10:	080205ec 	.word	0x080205ec
 800ad14:	08020604 	.word	0x08020604
 800ad18:	08020624 	.word	0x08020624
 800ad1c:	0802063c 	.word	0x0802063c

0800ad20 <configCheck>:

void configCheck(){
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800ad24:	f7fb f90f 	bl	8005f46 <BootButton_Pressed>
 800ad28:	1e03      	subs	r3, r0, #0
 800ad2a:	d007      	beq.n	800ad3c <configCheck+0x1c>
 800ad2c:	f7fb f91c 	bl	8005f68 <UserButton_Pressed>
 800ad30:	1e03      	subs	r3, r0, #0
 800ad32:	d003      	beq.n	800ad3c <configCheck+0x1c>
    configSet = true;
 800ad34:	4b3d      	ldr	r3, [pc, #244]	@ (800ae2c <configCheck+0x10c>)
 800ad36:	2201      	movs	r2, #1
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	e00a      	b.n	800ad52 <configCheck+0x32>
  }
  else{
    configSet = false;
 800ad3c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae2c <configCheck+0x10c>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800ad42:	f001 f96b 	bl	800c01c <HAL_GetTick>
 800ad46:	0003      	movs	r3, r0
 800ad48:	22fa      	movs	r2, #250	@ 0xfa
 800ad4a:	00d2      	lsls	r2, r2, #3
 800ad4c:	189a      	adds	r2, r3, r2
 800ad4e:	4b38      	ldr	r3, [pc, #224]	@ (800ae30 <configCheck+0x110>)
 800ad50:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800ad52:	4b36      	ldr	r3, [pc, #216]	@ (800ae2c <configCheck+0x10c>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00d      	beq.n	800ad76 <configCheck+0x56>
 800ad5a:	4b35      	ldr	r3, [pc, #212]	@ (800ae30 <configCheck+0x110>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f000 fd6a 	bl	800b838 <TimestampIsReached>
 800ad64:	1e03      	subs	r3, r0, #0
 800ad66:	d006      	beq.n	800ad76 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800ad68:	f7f8 fde0 	bl	800392c <SetConfigMode>
    SetDBLED(true, true, true);
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	2101      	movs	r1, #1
 800ad70:	2001      	movs	r0, #1
 800ad72:	f7ff fe4d 	bl	800aa10 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800ad76:	f7fb f8e6 	bl	8005f46 <BootButton_Pressed>
 800ad7a:	0003      	movs	r3, r0
 800ad7c:	001a      	movs	r2, r3
 800ad7e:	2301      	movs	r3, #1
 800ad80:	4053      	eors	r3, r2
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d01d      	beq.n	800adc4 <configCheck+0xa4>
 800ad88:	f7fb f8ee 	bl	8005f68 <UserButton_Pressed>
 800ad8c:	1e03      	subs	r3, r0, #0
 800ad8e:	d019      	beq.n	800adc4 <configCheck+0xa4>
 800ad90:	4b28      	ldr	r3, [pc, #160]	@ (800ae34 <configCheck+0x114>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	2201      	movs	r2, #1
 800ad96:	4053      	eors	r3, r2
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d012      	beq.n	800adc4 <configCheck+0xa4>
    SetLEDsOff();
 800ad9e:	f7ff ff3f 	bl	800ac20 <SetLEDsOff>
    userToggle = !userToggle;
 800ada2:	4b25      	ldr	r3, [pc, #148]	@ (800ae38 <configCheck+0x118>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	1e5a      	subs	r2, r3, #1
 800ada8:	4193      	sbcs	r3, r2
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2201      	movs	r2, #1
 800adae:	4053      	eors	r3, r2
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	1c1a      	adds	r2, r3, #0
 800adb4:	2301      	movs	r3, #1
 800adb6:	4013      	ands	r3, r2
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4b1f      	ldr	r3, [pc, #124]	@ (800ae38 <configCheck+0x118>)
 800adbc:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800adbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ae34 <configCheck+0x114>)
 800adc0:	2201      	movs	r2, #1
 800adc2:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800adc4:	f7fb f8bf 	bl	8005f46 <BootButton_Pressed>
 800adc8:	0003      	movs	r3, r0
 800adca:	001a      	movs	r2, r3
 800adcc:	2301      	movs	r3, #1
 800adce:	4053      	eors	r3, r2
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00b      	beq.n	800adee <configCheck+0xce>
 800add6:	f7fb f8c7 	bl	8005f68 <UserButton_Pressed>
 800adda:	0003      	movs	r3, r0
 800addc:	001a      	movs	r2, r3
 800adde:	2301      	movs	r3, #1
 800ade0:	4053      	eors	r3, r2
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <configCheck+0xce>
    buttonHeld = false;
 800ade8:	4b12      	ldr	r3, [pc, #72]	@ (800ae34 <configCheck+0x114>)
 800adea:	2200      	movs	r2, #0
 800adec:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800adee:	f7fb f89b 	bl	8005f28 <Check_USB_PowerOn>
 800adf2:	1e03      	subs	r3, r0, #0
 800adf4:	d003      	beq.n	800adfe <configCheck+0xde>
    usbPluggedIn = true;
 800adf6:	4b11      	ldr	r3, [pc, #68]	@ (800ae3c <configCheck+0x11c>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800adfc:	e012      	b.n	800ae24 <configCheck+0x104>
    if(!userToggle && !init){
 800adfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ae38 <configCheck+0x118>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2201      	movs	r2, #1
 800ae04:	4053      	eors	r3, r2
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d008      	beq.n	800ae1e <configCheck+0xfe>
 800ae0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ae40 <configCheck+0x120>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	2201      	movs	r2, #1
 800ae12:	4053      	eors	r3, r2
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <configCheck+0xfe>
      SetLEDsOff();
 800ae1a:	f7ff ff01 	bl	800ac20 <SetLEDsOff>
    usbPluggedIn = false;
 800ae1e:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <configCheck+0x11c>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
}
 800ae24:	46c0      	nop			@ (mov r8, r8)
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	46c0      	nop			@ (mov r8, r8)
 800ae2c:	2000211c 	.word	0x2000211c
 800ae30:	20002120 	.word	0x20002120
 800ae34:	2000211f 	.word	0x2000211f
 800ae38:	2000211e 	.word	0x2000211e
 800ae3c:	2000211d 	.word	0x2000211d
 800ae40:	200000c0 	.word	0x200000c0

0800ae44 <Status_Upkeep>:
  RTC_SetWakeUpTimer(sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
  configCheck();
 800ae48:	f7ff ff6a 	bl	800ad20 <configCheck>
}
 800ae4c:	46c0      	nop			@ (mov r8, r8)
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800ae52:	b590      	push	{r4, r7, lr}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800ae58:	1dfc      	adds	r4, r7, #7
 800ae5a:	f7ff fefd 	bl	800ac58 <powerCheck>
 800ae5e:	0003      	movs	r3, r0
 800ae60:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800ae62:	1dfb      	adds	r3, r7, #7
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	0018      	movs	r0, r3
 800ae68:	f7ff ff12 	bl	800ac90 <powerDisplay>
  return status;
 800ae6c:	1dfb      	adds	r3, r7, #7
 800ae6e:	781b      	ldrb	r3, [r3, #0]

}
 800ae70:	0018      	movs	r0, r3
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b003      	add	sp, #12
 800ae76:	bd90      	pop	{r4, r7, pc}

0800ae78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae7c:	4b07      	ldr	r3, [pc, #28]	@ (800ae9c <HAL_MspInit+0x24>)
 800ae7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae80:	4b06      	ldr	r3, [pc, #24]	@ (800ae9c <HAL_MspInit+0x24>)
 800ae82:	2101      	movs	r1, #1
 800ae84:	430a      	orrs	r2, r1
 800ae86:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae88:	4b04      	ldr	r3, [pc, #16]	@ (800ae9c <HAL_MspInit+0x24>)
 800ae8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae8c:	4b03      	ldr	r3, [pc, #12]	@ (800ae9c <HAL_MspInit+0x24>)
 800ae8e:	2180      	movs	r1, #128	@ 0x80
 800ae90:	0549      	lsls	r1, r1, #21
 800ae92:	430a      	orrs	r2, r1
 800ae94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae96:	46c0      	nop			@ (mov r8, r8)
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	40021000 	.word	0x40021000

0800aea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800aea4:	46c0      	nop			@ (mov r8, r8)
 800aea6:	e7fd      	b.n	800aea4 <NMI_Handler+0x4>

0800aea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aeac:	46c0      	nop			@ (mov r8, r8)
 800aeae:	e7fd      	b.n	800aeac <HardFault_Handler+0x4>

0800aeb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800aeb4:	46c0      	nop			@ (mov r8, r8)
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800aebe:	46c0      	nop			@ (mov r8, r8)
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800aec8:	f001 f896 	bl	800bff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800aecc:	46c0      	nop			@ (mov r8, r8)
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800aed8:	4b05      	ldr	r3, [pc, #20]	@ (800aef0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800aeda:	0018      	movs	r0, r3
 800aedc:	f001 feab 	bl	800cc36 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800aee0:	4b04      	ldr	r3, [pc, #16]	@ (800aef4 <DMA1_Channel2_3_IRQHandler+0x20>)
 800aee2:	0018      	movs	r0, r3
 800aee4:	f001 fea7 	bl	800cc36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800aee8:	46c0      	nop			@ (mov r8, r8)
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	46c0      	nop			@ (mov r8, r8)
 800aef0:	20000e0c 	.word	0x20000e0c
 800aef4:	20000dc4 	.word	0x20000dc4

0800aef8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800aefc:	4b07      	ldr	r3, [pc, #28]	@ (800af1c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800aefe:	0018      	movs	r0, r3
 800af00:	f001 fe99 	bl	800cc36 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800af04:	4b06      	ldr	r3, [pc, #24]	@ (800af20 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800af06:	0018      	movs	r0, r3
 800af08:	f001 fe95 	bl	800cc36 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800af0c:	4b05      	ldr	r3, [pc, #20]	@ (800af24 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800af0e:	0018      	movs	r0, r3
 800af10:	f001 fe91 	bl	800cc36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800af14:	46c0      	nop			@ (mov r8, r8)
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	46c0      	nop			@ (mov r8, r8)
 800af1c:	20000e90 	.word	0x20000e90
 800af20:	20002410 	.word	0x20002410
 800af24:	20002458 	.word	0x20002458

0800af28 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800af2c:	4b03      	ldr	r3, [pc, #12]	@ (800af3c <USART4_5_IRQHandler+0x14>)
 800af2e:	0018      	movs	r0, r3
 800af30:	f008 fe66 	bl	8013c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800af34:	46c0      	nop			@ (mov r8, r8)
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	46c0      	nop			@ (mov r8, r8)
 800af3c:	20002358 	.word	0x20002358

0800af40 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800af44:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <I2C1_IRQHandler+0x2c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	23e0      	movs	r3, #224	@ 0xe0
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	4013      	ands	r3, r2
 800af50:	d004      	beq.n	800af5c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800af52:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <I2C1_IRQHandler+0x2c>)
 800af54:	0018      	movs	r0, r3
 800af56:	f002 fd99 	bl	800da8c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800af5a:	e003      	b.n	800af64 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800af5c:	4b03      	ldr	r3, [pc, #12]	@ (800af6c <I2C1_IRQHandler+0x2c>)
 800af5e:	0018      	movs	r0, r3
 800af60:	f002 fd7a 	bl	800da58 <HAL_I2C_EV_IRQHandler>
}
 800af64:	46c0      	nop			@ (mov r8, r8)
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	46c0      	nop			@ (mov r8, r8)
 800af6c:	20000d1c 	.word	0x20000d1c

0800af70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800af74:	4b03      	ldr	r3, [pc, #12]	@ (800af84 <USART1_IRQHandler+0x14>)
 800af76:	0018      	movs	r0, r3
 800af78:	f008 fe42 	bl	8013c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800af7c:	46c0      	nop			@ (mov r8, r8)
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	46c0      	nop			@ (mov r8, r8)
 800af84:	200022a0 	.word	0x200022a0

0800af88 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800af8c:	4b03      	ldr	r3, [pc, #12]	@ (800af9c <USB_IRQHandler+0x14>)
 800af8e:	0018      	movs	r0, r3
 800af90:	f004 ff08 	bl	800fda4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800af94:	46c0      	nop			@ (mov r8, r8)
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	46c0      	nop			@ (mov r8, r8)
 800af9c:	20003260 	.word	0x20003260

0800afa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  return 1;
 800afa4:	2301      	movs	r3, #1
}
 800afa6:	0018      	movs	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <_kill>:

int _kill(int pid, int sig)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800afb6:	f011 fc07 	bl	801c7c8 <__errno>
 800afba:	0003      	movs	r3, r0
 800afbc:	2216      	movs	r2, #22
 800afbe:	601a      	str	r2, [r3, #0]
  return -1;
 800afc0:	2301      	movs	r3, #1
 800afc2:	425b      	negs	r3, r3
}
 800afc4:	0018      	movs	r0, r3
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b002      	add	sp, #8
 800afca:	bd80      	pop	{r7, pc}

0800afcc <_exit>:

void _exit (int status)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800afd4:	2301      	movs	r3, #1
 800afd6:	425a      	negs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	0011      	movs	r1, r2
 800afdc:	0018      	movs	r0, r3
 800afde:	f7ff ffe5 	bl	800afac <_kill>
  while (1) {}    /* Make sure we hang here */
 800afe2:	46c0      	nop			@ (mov r8, r8)
 800afe4:	e7fd      	b.n	800afe2 <_exit+0x16>

0800afe6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]
 800aff6:	e00a      	b.n	800b00e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800aff8:	e000      	b.n	800affc <_read+0x16>
 800affa:	bf00      	nop
 800affc:	0001      	movs	r1, r0
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	60ba      	str	r2, [r7, #8]
 800b004:	b2ca      	uxtb	r2, r1
 800b006:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	3301      	adds	r3, #1
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	dbf0      	blt.n	800aff8 <_read+0x12>
  }

  return len;
 800b016:	687b      	ldr	r3, [r7, #4]
}
 800b018:	0018      	movs	r0, r3
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b006      	add	sp, #24
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <_close>:
  }
  return len;
}

int _close(int file)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b028:	2301      	movs	r3, #1
 800b02a:	425b      	negs	r3, r3
}
 800b02c:	0018      	movs	r0, r3
 800b02e:	46bd      	mov	sp, r7
 800b030:	b002      	add	sp, #8
 800b032:	bd80      	pop	{r7, pc}

0800b034 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2280      	movs	r2, #128	@ 0x80
 800b042:	0192      	lsls	r2, r2, #6
 800b044:	605a      	str	r2, [r3, #4]
  return 0;
 800b046:	2300      	movs	r3, #0
}
 800b048:	0018      	movs	r0, r3
 800b04a:	46bd      	mov	sp, r7
 800b04c:	b002      	add	sp, #8
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <_isatty>:

int _isatty(int file)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b058:	2301      	movs	r3, #1
}
 800b05a:	0018      	movs	r0, r3
 800b05c:	46bd      	mov	sp, r7
 800b05e:	b002      	add	sp, #8
 800b060:	bd80      	pop	{r7, pc}

0800b062 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	0018      	movs	r0, r3
 800b072:	46bd      	mov	sp, r7
 800b074:	b004      	add	sp, #16
 800b076:	bd80      	pop	{r7, pc}

0800b078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b080:	4a14      	ldr	r2, [pc, #80]	@ (800b0d4 <_sbrk+0x5c>)
 800b082:	4b15      	ldr	r3, [pc, #84]	@ (800b0d8 <_sbrk+0x60>)
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b08c:	4b13      	ldr	r3, [pc, #76]	@ (800b0dc <_sbrk+0x64>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b094:	4b11      	ldr	r3, [pc, #68]	@ (800b0dc <_sbrk+0x64>)
 800b096:	4a12      	ldr	r2, [pc, #72]	@ (800b0e0 <_sbrk+0x68>)
 800b098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b09a:	4b10      	ldr	r3, [pc, #64]	@ (800b0dc <_sbrk+0x64>)
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	18d3      	adds	r3, r2, r3
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d207      	bcs.n	800b0b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b0a8:	f011 fb8e 	bl	801c7c8 <__errno>
 800b0ac:	0003      	movs	r3, r0
 800b0ae:	220c      	movs	r2, #12
 800b0b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	e009      	b.n	800b0cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b0b8:	4b08      	ldr	r3, [pc, #32]	@ (800b0dc <_sbrk+0x64>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b0be:	4b07      	ldr	r3, [pc, #28]	@ (800b0dc <_sbrk+0x64>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	18d2      	adds	r2, r2, r3
 800b0c6:	4b05      	ldr	r3, [pc, #20]	@ (800b0dc <_sbrk+0x64>)
 800b0c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
}
 800b0cc:	0018      	movs	r0, r3
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	b006      	add	sp, #24
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20005000 	.word	0x20005000
 800b0d8:	00000400 	.word	0x00000400
 800b0dc:	20002124 	.word	0x20002124
 800b0e0:	200038c0 	.word	0x200038c0

0800b0e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b0e8:	46c0      	nop			@ (mov r8, r8)
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0f6:	2310      	movs	r3, #16
 800b0f8:	18fb      	adds	r3, r7, r3
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	2308      	movs	r3, #8
 800b0fe:	001a      	movs	r2, r3
 800b100:	2100      	movs	r1, #0
 800b102:	f011 fabd 	bl	801c680 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b106:	003b      	movs	r3, r7
 800b108:	0018      	movs	r0, r3
 800b10a:	2310      	movs	r3, #16
 800b10c:	001a      	movs	r2, r3
 800b10e:	2100      	movs	r1, #0
 800b110:	f011 fab6 	bl	801c680 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b114:	4b2e      	ldr	r3, [pc, #184]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b116:	2280      	movs	r2, #128	@ 0x80
 800b118:	05d2      	lsls	r2, r2, #23
 800b11a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b11c:	4b2c      	ldr	r3, [pc, #176]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b11e:	2200      	movs	r2, #0
 800b120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b122:	4b2b      	ldr	r3, [pc, #172]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b124:	2200      	movs	r2, #0
 800b126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800b128:	4b29      	ldr	r3, [pc, #164]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b12a:	4a2a      	ldr	r2, [pc, #168]	@ (800b1d4 <MX_TIM2_Init+0xe4>)
 800b12c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b12e:	4b28      	ldr	r3, [pc, #160]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b130:	2200      	movs	r2, #0
 800b132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b134:	4b26      	ldr	r3, [pc, #152]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b136:	2200      	movs	r2, #0
 800b138:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b13a:	4b25      	ldr	r3, [pc, #148]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b13c:	0018      	movs	r0, r3
 800b13e:	f007 ff73 	bl	8013028 <HAL_TIM_PWM_Init>
 800b142:	1e03      	subs	r3, r0, #0
 800b144:	d001      	beq.n	800b14a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800b146:	f7fc fa5b 	bl	8007600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b14a:	2110      	movs	r1, #16
 800b14c:	187b      	adds	r3, r7, r1
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b152:	187b      	adds	r3, r7, r1
 800b154:	2200      	movs	r2, #0
 800b156:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b158:	187a      	adds	r2, r7, r1
 800b15a:	4b1d      	ldr	r3, [pc, #116]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b15c:	0011      	movs	r1, r2
 800b15e:	0018      	movs	r0, r3
 800b160:	f008 fa80 	bl	8013664 <HAL_TIMEx_MasterConfigSynchronization>
 800b164:	1e03      	subs	r3, r0, #0
 800b166:	d001      	beq.n	800b16c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800b168:	f7fc fa4a 	bl	8007600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b16c:	003b      	movs	r3, r7
 800b16e:	2260      	movs	r2, #96	@ 0x60
 800b170:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800b172:	003b      	movs	r3, r7
 800b174:	2200      	movs	r2, #0
 800b176:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b178:	003b      	movs	r3, r7
 800b17a:	2200      	movs	r2, #0
 800b17c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b17e:	003b      	movs	r3, r7
 800b180:	2200      	movs	r2, #0
 800b182:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b184:	0039      	movs	r1, r7
 800b186:	4b12      	ldr	r3, [pc, #72]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b188:	2200      	movs	r2, #0
 800b18a:	0018      	movs	r0, r3
 800b18c:	f008 f81e 	bl	80131cc <HAL_TIM_PWM_ConfigChannel>
 800b190:	1e03      	subs	r3, r0, #0
 800b192:	d001      	beq.n	800b198 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800b194:	f7fc fa34 	bl	8007600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b198:	0039      	movs	r1, r7
 800b19a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b19c:	2208      	movs	r2, #8
 800b19e:	0018      	movs	r0, r3
 800b1a0:	f008 f814 	bl	80131cc <HAL_TIM_PWM_ConfigChannel>
 800b1a4:	1e03      	subs	r3, r0, #0
 800b1a6:	d001      	beq.n	800b1ac <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800b1a8:	f7fc fa2a 	bl	8007600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b1ac:	0039      	movs	r1, r7
 800b1ae:	4b08      	ldr	r3, [pc, #32]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b1b0:	220c      	movs	r2, #12
 800b1b2:	0018      	movs	r0, r3
 800b1b4:	f008 f80a 	bl	80131cc <HAL_TIM_PWM_ConfigChannel>
 800b1b8:	1e03      	subs	r3, r0, #0
 800b1ba:	d001      	beq.n	800b1c0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800b1bc:	f7fc fa20 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b1c0:	4b03      	ldr	r3, [pc, #12]	@ (800b1d0 <MX_TIM2_Init+0xe0>)
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	f000 f8fe 	bl	800b3c4 <HAL_TIM_MspPostInit>

}
 800b1c8:	46c0      	nop			@ (mov r8, r8)
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	b006      	add	sp, #24
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	20002128 	.word	0x20002128
 800b1d4:	0000ffff 	.word	0x0000ffff

0800b1d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1de:	2310      	movs	r3, #16
 800b1e0:	18fb      	adds	r3, r7, r3
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	2308      	movs	r3, #8
 800b1e6:	001a      	movs	r2, r3
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	f011 fa49 	bl	801c680 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b1ee:	003b      	movs	r3, r7
 800b1f0:	0018      	movs	r0, r3
 800b1f2:	2310      	movs	r3, #16
 800b1f4:	001a      	movs	r2, r3
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	f011 fa42 	bl	801c680 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b1fc:	4b32      	ldr	r3, [pc, #200]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b1fe:	4a33      	ldr	r2, [pc, #204]	@ (800b2cc <MX_TIM3_Init+0xf4>)
 800b200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b202:	4b31      	ldr	r3, [pc, #196]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b204:	2200      	movs	r2, #0
 800b206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b208:	4b2f      	ldr	r3, [pc, #188]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b20e:	4b2e      	ldr	r3, [pc, #184]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b210:	4a2f      	ldr	r2, [pc, #188]	@ (800b2d0 <MX_TIM3_Init+0xf8>)
 800b212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b214:	4b2c      	ldr	r3, [pc, #176]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b216:	2200      	movs	r2, #0
 800b218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b21a:	4b2b      	ldr	r3, [pc, #172]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b220:	4b29      	ldr	r3, [pc, #164]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b222:	0018      	movs	r0, r3
 800b224:	f007 ff00 	bl	8013028 <HAL_TIM_PWM_Init>
 800b228:	1e03      	subs	r3, r0, #0
 800b22a:	d001      	beq.n	800b230 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800b22c:	f7fc f9e8 	bl	8007600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b230:	2110      	movs	r1, #16
 800b232:	187b      	adds	r3, r7, r1
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b238:	187b      	adds	r3, r7, r1
 800b23a:	2200      	movs	r2, #0
 800b23c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b23e:	187a      	adds	r2, r7, r1
 800b240:	4b21      	ldr	r3, [pc, #132]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b242:	0011      	movs	r1, r2
 800b244:	0018      	movs	r0, r3
 800b246:	f008 fa0d 	bl	8013664 <HAL_TIMEx_MasterConfigSynchronization>
 800b24a:	1e03      	subs	r3, r0, #0
 800b24c:	d001      	beq.n	800b252 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800b24e:	f7fc f9d7 	bl	8007600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b252:	003b      	movs	r3, r7
 800b254:	2260      	movs	r2, #96	@ 0x60
 800b256:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800b258:	003b      	movs	r3, r7
 800b25a:	2200      	movs	r2, #0
 800b25c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b25e:	003b      	movs	r3, r7
 800b260:	2200      	movs	r2, #0
 800b262:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b264:	003b      	movs	r3, r7
 800b266:	2200      	movs	r2, #0
 800b268:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b26a:	0039      	movs	r1, r7
 800b26c:	4b16      	ldr	r3, [pc, #88]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b26e:	2200      	movs	r2, #0
 800b270:	0018      	movs	r0, r3
 800b272:	f007 ffab 	bl	80131cc <HAL_TIM_PWM_ConfigChannel>
 800b276:	1e03      	subs	r3, r0, #0
 800b278:	d001      	beq.n	800b27e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800b27a:	f7fc f9c1 	bl	8007600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800b27e:	4b12      	ldr	r3, [pc, #72]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b280:	2104      	movs	r1, #4
 800b282:	0018      	movs	r0, r3
 800b284:	f008 fa4c 	bl	8013720 <HAL_TIMEx_RemapConfig>
 800b288:	1e03      	subs	r3, r0, #0
 800b28a:	d001      	beq.n	800b290 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800b28c:	f7fc f9b8 	bl	8007600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b290:	0039      	movs	r1, r7
 800b292:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b294:	2204      	movs	r2, #4
 800b296:	0018      	movs	r0, r3
 800b298:	f007 ff98 	bl	80131cc <HAL_TIM_PWM_ConfigChannel>
 800b29c:	1e03      	subs	r3, r0, #0
 800b29e:	d001      	beq.n	800b2a4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800b2a0:	f7fc f9ae 	bl	8007600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b2a4:	0039      	movs	r1, r7
 800b2a6:	4b08      	ldr	r3, [pc, #32]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b2a8:	2208      	movs	r2, #8
 800b2aa:	0018      	movs	r0, r3
 800b2ac:	f007 ff8e 	bl	80131cc <HAL_TIM_PWM_ConfigChannel>
 800b2b0:	1e03      	subs	r3, r0, #0
 800b2b2:	d001      	beq.n	800b2b8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800b2b4:	f7fc f9a4 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b2b8:	4b03      	ldr	r3, [pc, #12]	@ (800b2c8 <MX_TIM3_Init+0xf0>)
 800b2ba:	0018      	movs	r0, r3
 800b2bc:	f000 f882 	bl	800b3c4 <HAL_TIM_MspPostInit>

}
 800b2c0:	46c0      	nop			@ (mov r8, r8)
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	b006      	add	sp, #24
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	20002168 	.word	0x20002168
 800b2cc:	40000400 	.word	0x40000400
 800b2d0:	0000ffff 	.word	0x0000ffff

0800b2d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2da:	003b      	movs	r3, r7
 800b2dc:	0018      	movs	r0, r3
 800b2de:	2308      	movs	r3, #8
 800b2e0:	001a      	movs	r2, r3
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	f011 f9cc 	bl	801c680 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b2e8:	4b15      	ldr	r3, [pc, #84]	@ (800b340 <MX_TIM6_Init+0x6c>)
 800b2ea:	4a16      	ldr	r2, [pc, #88]	@ (800b344 <MX_TIM6_Init+0x70>)
 800b2ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800b2ee:	4b14      	ldr	r3, [pc, #80]	@ (800b340 <MX_TIM6_Init+0x6c>)
 800b2f0:	220a      	movs	r2, #10
 800b2f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2f4:	4b12      	ldr	r3, [pc, #72]	@ (800b340 <MX_TIM6_Init+0x6c>)
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800b2fa:	4b11      	ldr	r3, [pc, #68]	@ (800b340 <MX_TIM6_Init+0x6c>)
 800b2fc:	4a12      	ldr	r2, [pc, #72]	@ (800b348 <MX_TIM6_Init+0x74>)
 800b2fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b300:	4b0f      	ldr	r3, [pc, #60]	@ (800b340 <MX_TIM6_Init+0x6c>)
 800b302:	2200      	movs	r2, #0
 800b304:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b306:	4b0e      	ldr	r3, [pc, #56]	@ (800b340 <MX_TIM6_Init+0x6c>)
 800b308:	0018      	movs	r0, r3
 800b30a:	f007 fde5 	bl	8012ed8 <HAL_TIM_Base_Init>
 800b30e:	1e03      	subs	r3, r0, #0
 800b310:	d001      	beq.n	800b316 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800b312:	f7fc f975 	bl	8007600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b316:	003b      	movs	r3, r7
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b31c:	003b      	movs	r3, r7
 800b31e:	2200      	movs	r2, #0
 800b320:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b322:	003a      	movs	r2, r7
 800b324:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <MX_TIM6_Init+0x6c>)
 800b326:	0011      	movs	r1, r2
 800b328:	0018      	movs	r0, r3
 800b32a:	f008 f99b 	bl	8013664 <HAL_TIMEx_MasterConfigSynchronization>
 800b32e:	1e03      	subs	r3, r0, #0
 800b330:	d001      	beq.n	800b336 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800b332:	f7fc f965 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	46bd      	mov	sp, r7
 800b33a:	b002      	add	sp, #8
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	200021a8 	.word	0x200021a8
 800b344:	40001000 	.word	0x40001000
 800b348:	0000ffff 	.word	0x0000ffff

0800b34c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	2380      	movs	r3, #128	@ 0x80
 800b35a:	05db      	lsls	r3, r3, #23
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d106      	bne.n	800b36e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b360:	4b0a      	ldr	r3, [pc, #40]	@ (800b38c <HAL_TIM_PWM_MspInit+0x40>)
 800b362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b364:	4b09      	ldr	r3, [pc, #36]	@ (800b38c <HAL_TIM_PWM_MspInit+0x40>)
 800b366:	2101      	movs	r1, #1
 800b368:	430a      	orrs	r2, r1
 800b36a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b36c:	e00a      	b.n	800b384 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a07      	ldr	r2, [pc, #28]	@ (800b390 <HAL_TIM_PWM_MspInit+0x44>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d105      	bne.n	800b384 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b378:	4b04      	ldr	r3, [pc, #16]	@ (800b38c <HAL_TIM_PWM_MspInit+0x40>)
 800b37a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b37c:	4b03      	ldr	r3, [pc, #12]	@ (800b38c <HAL_TIM_PWM_MspInit+0x40>)
 800b37e:	2102      	movs	r1, #2
 800b380:	430a      	orrs	r2, r1
 800b382:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b384:	46c0      	nop			@ (mov r8, r8)
 800b386:	46bd      	mov	sp, r7
 800b388:	b002      	add	sp, #8
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	40021000 	.word	0x40021000
 800b390:	40000400 	.word	0x40000400

0800b394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a06      	ldr	r2, [pc, #24]	@ (800b3bc <HAL_TIM_Base_MspInit+0x28>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d105      	bne.n	800b3b2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b3a6:	4b06      	ldr	r3, [pc, #24]	@ (800b3c0 <HAL_TIM_Base_MspInit+0x2c>)
 800b3a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3aa:	4b05      	ldr	r3, [pc, #20]	@ (800b3c0 <HAL_TIM_Base_MspInit+0x2c>)
 800b3ac:	2110      	movs	r1, #16
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b3b2:	46c0      	nop			@ (mov r8, r8)
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b002      	add	sp, #8
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	46c0      	nop			@ (mov r8, r8)
 800b3bc:	40001000 	.word	0x40001000
 800b3c0:	40021000 	.word	0x40021000

0800b3c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b3c4:	b590      	push	{r4, r7, lr}
 800b3c6:	b08b      	sub	sp, #44	@ 0x2c
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3cc:	2414      	movs	r4, #20
 800b3ce:	193b      	adds	r3, r7, r4
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	2314      	movs	r3, #20
 800b3d4:	001a      	movs	r2, r3
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	f011 f952 	bl	801c680 <memset>
  if(timHandle->Instance==TIM2)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	2380      	movs	r3, #128	@ 0x80
 800b3e2:	05db      	lsls	r3, r3, #23
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d123      	bne.n	800b430 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3e8:	4b27      	ldr	r3, [pc, #156]	@ (800b488 <HAL_TIM_MspPostInit+0xc4>)
 800b3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ec:	4b26      	ldr	r3, [pc, #152]	@ (800b488 <HAL_TIM_MspPostInit+0xc4>)
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b3f4:	4b24      	ldr	r3, [pc, #144]	@ (800b488 <HAL_TIM_MspPostInit+0xc4>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	613b      	str	r3, [r7, #16]
 800b3fe:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800b400:	0021      	movs	r1, r4
 800b402:	187b      	adds	r3, r7, r1
 800b404:	220d      	movs	r2, #13
 800b406:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b408:	187b      	adds	r3, r7, r1
 800b40a:	2202      	movs	r2, #2
 800b40c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b40e:	187b      	adds	r3, r7, r1
 800b410:	2200      	movs	r2, #0
 800b412:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b414:	187b      	adds	r3, r7, r1
 800b416:	2200      	movs	r2, #0
 800b418:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800b41a:	187b      	adds	r3, r7, r1
 800b41c:	2202      	movs	r2, #2
 800b41e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b420:	187a      	adds	r2, r7, r1
 800b422:	23a0      	movs	r3, #160	@ 0xa0
 800b424:	05db      	lsls	r3, r3, #23
 800b426:	0011      	movs	r1, r2
 800b428:	0018      	movs	r0, r3
 800b42a:	f001 febb 	bl	800d1a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b42e:	e027      	b.n	800b480 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a15      	ldr	r2, [pc, #84]	@ (800b48c <HAL_TIM_MspPostInit+0xc8>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d122      	bne.n	800b480 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b43a:	4b13      	ldr	r3, [pc, #76]	@ (800b488 <HAL_TIM_MspPostInit+0xc4>)
 800b43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43e:	4b12      	ldr	r3, [pc, #72]	@ (800b488 <HAL_TIM_MspPostInit+0xc4>)
 800b440:	2104      	movs	r1, #4
 800b442:	430a      	orrs	r2, r1
 800b444:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b446:	4b10      	ldr	r3, [pc, #64]	@ (800b488 <HAL_TIM_MspPostInit+0xc4>)
 800b448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44a:	2204      	movs	r2, #4
 800b44c:	4013      	ands	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800b452:	2114      	movs	r1, #20
 800b454:	187b      	adds	r3, r7, r1
 800b456:	22e0      	movs	r2, #224	@ 0xe0
 800b458:	0052      	lsls	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b45c:	187b      	adds	r3, r7, r1
 800b45e:	2202      	movs	r2, #2
 800b460:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b462:	187b      	adds	r3, r7, r1
 800b464:	2200      	movs	r2, #0
 800b466:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b468:	187b      	adds	r3, r7, r1
 800b46a:	2200      	movs	r2, #0
 800b46c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b46e:	187b      	adds	r3, r7, r1
 800b470:	2202      	movs	r2, #2
 800b472:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b474:	187b      	adds	r3, r7, r1
 800b476:	4a06      	ldr	r2, [pc, #24]	@ (800b490 <HAL_TIM_MspPostInit+0xcc>)
 800b478:	0019      	movs	r1, r3
 800b47a:	0010      	movs	r0, r2
 800b47c:	f001 fe92 	bl	800d1a4 <HAL_GPIO_Init>
}
 800b480:	46c0      	nop			@ (mov r8, r8)
 800b482:	46bd      	mov	sp, r7
 800b484:	b00b      	add	sp, #44	@ 0x2c
 800b486:	bd90      	pop	{r4, r7, pc}
 800b488:	40021000 	.word	0x40021000
 800b48c:	40000400 	.word	0x40000400
 800b490:	50000800 	.word	0x50000800

0800b494 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800b498:	4b17      	ldr	r3, [pc, #92]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b49a:	4a18      	ldr	r2, [pc, #96]	@ (800b4fc <MX_LPUART1_UART_Init+0x68>)
 800b49c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800b49e:	4b16      	ldr	r3, [pc, #88]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4a0:	22e1      	movs	r2, #225	@ 0xe1
 800b4a2:	0252      	lsls	r2, r2, #9
 800b4a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b4a6:	4b14      	ldr	r3, [pc, #80]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800b4ac:	4b12      	ldr	r3, [pc, #72]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800b4b2:	4b11      	ldr	r3, [pc, #68]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800b4b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4ba:	220c      	movs	r2, #12
 800b4bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b4be:	4b0e      	ldr	r3, [pc, #56]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800b4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4cc:	2218      	movs	r2, #24
 800b4ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b4d0:	4b09      	ldr	r3, [pc, #36]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4d2:	2280      	movs	r2, #128	@ 0x80
 800b4d4:	0212      	lsls	r2, r2, #8
 800b4d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800b4d8:	4b07      	ldr	r3, [pc, #28]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4da:	2280      	movs	r2, #128	@ 0x80
 800b4dc:	0152      	lsls	r2, r2, #5
 800b4de:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800b4e0:	4b05      	ldr	r3, [pc, #20]	@ (800b4f8 <MX_LPUART1_UART_Init+0x64>)
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	f008 f93a 	bl	801375c <HAL_UART_Init>
 800b4e8:	1e03      	subs	r3, r0, #0
 800b4ea:	d001      	beq.n	800b4f0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800b4ec:	f7fc f888 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800b4f0:	46c0      	nop			@ (mov r8, r8)
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	46c0      	nop			@ (mov r8, r8)
 800b4f8:	200021e8 	.word	0x200021e8
 800b4fc:	40004800 	.word	0x40004800

0800b500 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b504:	4b16      	ldr	r3, [pc, #88]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b506:	4a17      	ldr	r2, [pc, #92]	@ (800b564 <MX_USART1_UART_Init+0x64>)
 800b508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b50a:	4b15      	ldr	r3, [pc, #84]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b50c:	22e1      	movs	r2, #225	@ 0xe1
 800b50e:	0252      	lsls	r2, r2, #9
 800b510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b512:	4b13      	ldr	r3, [pc, #76]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b514:	2200      	movs	r2, #0
 800b516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b518:	4b11      	ldr	r3, [pc, #68]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b51e:	4b10      	ldr	r3, [pc, #64]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b520:	2200      	movs	r2, #0
 800b522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b524:	4b0e      	ldr	r3, [pc, #56]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b526:	220c      	movs	r2, #12
 800b528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b52a:	4b0d      	ldr	r3, [pc, #52]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b530:	4b0b      	ldr	r3, [pc, #44]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b532:	2200      	movs	r2, #0
 800b534:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b536:	4b0a      	ldr	r3, [pc, #40]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b538:	2200      	movs	r2, #0
 800b53a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800b53c:	4b08      	ldr	r3, [pc, #32]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b53e:	2208      	movs	r2, #8
 800b540:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b542:	4b07      	ldr	r3, [pc, #28]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b544:	2280      	movs	r2, #128	@ 0x80
 800b546:	0212      	lsls	r2, r2, #8
 800b548:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b54a:	4b05      	ldr	r3, [pc, #20]	@ (800b560 <MX_USART1_UART_Init+0x60>)
 800b54c:	0018      	movs	r0, r3
 800b54e:	f008 f905 	bl	801375c <HAL_UART_Init>
 800b552:	1e03      	subs	r3, r0, #0
 800b554:	d001      	beq.n	800b55a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800b556:	f7fc f853 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b55a:	46c0      	nop			@ (mov r8, r8)
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	200022a0 	.word	0x200022a0
 800b564:	40013800 	.word	0x40013800

0800b568 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800b56c:	4b14      	ldr	r3, [pc, #80]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b56e:	4a15      	ldr	r2, [pc, #84]	@ (800b5c4 <MX_USART4_UART_Init+0x5c>)
 800b570:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b572:	4b13      	ldr	r3, [pc, #76]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b574:	22e1      	movs	r2, #225	@ 0xe1
 800b576:	0252      	lsls	r2, r2, #9
 800b578:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b57a:	4b11      	ldr	r3, [pc, #68]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b580:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b582:	2200      	movs	r2, #0
 800b584:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b586:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b588:	2200      	movs	r2, #0
 800b58a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b58c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b58e:	220c      	movs	r2, #12
 800b590:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b592:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b594:	2200      	movs	r2, #0
 800b596:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b598:	4b09      	ldr	r3, [pc, #36]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b59e:	4b08      	ldr	r3, [pc, #32]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b5a4:	4b06      	ldr	r3, [pc, #24]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b5aa:	4b05      	ldr	r3, [pc, #20]	@ (800b5c0 <MX_USART4_UART_Init+0x58>)
 800b5ac:	0018      	movs	r0, r3
 800b5ae:	f008 f8d5 	bl	801375c <HAL_UART_Init>
 800b5b2:	1e03      	subs	r3, r0, #0
 800b5b4:	d001      	beq.n	800b5ba <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800b5b6:	f7fc f823 	bl	8007600 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800b5ba:	46c0      	nop			@ (mov r8, r8)
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20002358 	.word	0x20002358
 800b5c4:	40004c00 	.word	0x40004c00

0800b5c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b08d      	sub	sp, #52	@ 0x34
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5d0:	241c      	movs	r4, #28
 800b5d2:	193b      	adds	r3, r7, r4
 800b5d4:	0018      	movs	r0, r3
 800b5d6:	2314      	movs	r3, #20
 800b5d8:	001a      	movs	r2, r3
 800b5da:	2100      	movs	r1, #0
 800b5dc:	f011 f850 	bl	801c680 <memset>
  if(uartHandle->Instance==LPUART1)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a8b      	ldr	r2, [pc, #556]	@ (800b814 <HAL_UART_MspInit+0x24c>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d129      	bne.n	800b63e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800b5ea:	4b8b      	ldr	r3, [pc, #556]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b5ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5ee:	4b8a      	ldr	r3, [pc, #552]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b5f0:	2180      	movs	r1, #128	@ 0x80
 800b5f2:	02c9      	lsls	r1, r1, #11
 800b5f4:	430a      	orrs	r2, r1
 800b5f6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b5f8:	4b87      	ldr	r3, [pc, #540]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b5fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5fc:	4b86      	ldr	r3, [pc, #536]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b5fe:	2104      	movs	r1, #4
 800b600:	430a      	orrs	r2, r1
 800b602:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b604:	4b84      	ldr	r3, [pc, #528]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b608:	2204      	movs	r2, #4
 800b60a:	4013      	ands	r3, r2
 800b60c:	61bb      	str	r3, [r7, #24]
 800b60e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b610:	0021      	movs	r1, r4
 800b612:	187b      	adds	r3, r7, r1
 800b614:	2203      	movs	r2, #3
 800b616:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b618:	187b      	adds	r3, r7, r1
 800b61a:	2202      	movs	r2, #2
 800b61c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b61e:	187b      	adds	r3, r7, r1
 800b620:	2200      	movs	r2, #0
 800b622:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b624:	187b      	adds	r3, r7, r1
 800b626:	2203      	movs	r2, #3
 800b628:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800b62a:	187b      	adds	r3, r7, r1
 800b62c:	2206      	movs	r2, #6
 800b62e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b630:	187b      	adds	r3, r7, r1
 800b632:	4a7a      	ldr	r2, [pc, #488]	@ (800b81c <HAL_UART_MspInit+0x254>)
 800b634:	0019      	movs	r1, r3
 800b636:	0010      	movs	r0, r2
 800b638:	f001 fdb4 	bl	800d1a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800b63c:	e0e5      	b.n	800b80a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a77      	ldr	r2, [pc, #476]	@ (800b820 <HAL_UART_MspInit+0x258>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d133      	bne.n	800b6b0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b648:	4b73      	ldr	r3, [pc, #460]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b64a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b64c:	4b72      	ldr	r3, [pc, #456]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b64e:	2180      	movs	r1, #128	@ 0x80
 800b650:	01c9      	lsls	r1, r1, #7
 800b652:	430a      	orrs	r2, r1
 800b654:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b656:	4b70      	ldr	r3, [pc, #448]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b65a:	4b6f      	ldr	r3, [pc, #444]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b65c:	2101      	movs	r1, #1
 800b65e:	430a      	orrs	r2, r1
 800b660:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b662:	4b6d      	ldr	r3, [pc, #436]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b666:	2201      	movs	r2, #1
 800b668:	4013      	ands	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b66e:	211c      	movs	r1, #28
 800b670:	187b      	adds	r3, r7, r1
 800b672:	22c0      	movs	r2, #192	@ 0xc0
 800b674:	00d2      	lsls	r2, r2, #3
 800b676:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b678:	187b      	adds	r3, r7, r1
 800b67a:	2202      	movs	r2, #2
 800b67c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b67e:	187b      	adds	r3, r7, r1
 800b680:	2200      	movs	r2, #0
 800b682:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b684:	187b      	adds	r3, r7, r1
 800b686:	2203      	movs	r2, #3
 800b688:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800b68a:	187b      	adds	r3, r7, r1
 800b68c:	2204      	movs	r2, #4
 800b68e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b690:	187a      	adds	r2, r7, r1
 800b692:	23a0      	movs	r3, #160	@ 0xa0
 800b694:	05db      	lsls	r3, r3, #23
 800b696:	0011      	movs	r1, r2
 800b698:	0018      	movs	r0, r3
 800b69a:	f001 fd83 	bl	800d1a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	201b      	movs	r0, #27
 800b6a4:	f001 f930 	bl	800c908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b6a8:	201b      	movs	r0, #27
 800b6aa:	f001 f942 	bl	800c932 <HAL_NVIC_EnableIRQ>
}
 800b6ae:	e0ac      	b.n	800b80a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a5b      	ldr	r2, [pc, #364]	@ (800b824 <HAL_UART_MspInit+0x25c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d000      	beq.n	800b6bc <HAL_UART_MspInit+0xf4>
 800b6ba:	e0a6      	b.n	800b80a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800b6bc:	4b56      	ldr	r3, [pc, #344]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6c0:	4b55      	ldr	r3, [pc, #340]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6c2:	2180      	movs	r1, #128	@ 0x80
 800b6c4:	0309      	lsls	r1, r1, #12
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6ca:	4b53      	ldr	r3, [pc, #332]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ce:	4b52      	ldr	r3, [pc, #328]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	430a      	orrs	r2, r1
 800b6d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b6d6:	4b50      	ldr	r3, [pc, #320]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6da:	2201      	movs	r2, #1
 800b6dc:	4013      	ands	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
 800b6e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b6e2:	4b4d      	ldr	r3, [pc, #308]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e6:	4b4c      	ldr	r3, [pc, #304]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6e8:	2104      	movs	r1, #4
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b6ee:	4b4a      	ldr	r3, [pc, #296]	@ (800b818 <HAL_UART_MspInit+0x250>)
 800b6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f2:	2204      	movs	r2, #4
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b6fa:	241c      	movs	r4, #28
 800b6fc:	193b      	adds	r3, r7, r4
 800b6fe:	2202      	movs	r2, #2
 800b700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b702:	193b      	adds	r3, r7, r4
 800b704:	2202      	movs	r2, #2
 800b706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b708:	193b      	adds	r3, r7, r4
 800b70a:	2200      	movs	r2, #0
 800b70c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b70e:	193b      	adds	r3, r7, r4
 800b710:	2203      	movs	r2, #3
 800b712:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b714:	193b      	adds	r3, r7, r4
 800b716:	2206      	movs	r2, #6
 800b718:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b71a:	193a      	adds	r2, r7, r4
 800b71c:	23a0      	movs	r3, #160	@ 0xa0
 800b71e:	05db      	lsls	r3, r3, #23
 800b720:	0011      	movs	r1, r2
 800b722:	0018      	movs	r0, r3
 800b724:	f001 fd3e 	bl	800d1a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b728:	0021      	movs	r1, r4
 800b72a:	187b      	adds	r3, r7, r1
 800b72c:	2280      	movs	r2, #128	@ 0x80
 800b72e:	00d2      	lsls	r2, r2, #3
 800b730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b732:	187b      	adds	r3, r7, r1
 800b734:	2202      	movs	r2, #2
 800b736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b738:	187b      	adds	r3, r7, r1
 800b73a:	2200      	movs	r2, #0
 800b73c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b73e:	187b      	adds	r3, r7, r1
 800b740:	2203      	movs	r2, #3
 800b742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b744:	187b      	adds	r3, r7, r1
 800b746:	2206      	movs	r2, #6
 800b748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b74a:	187b      	adds	r3, r7, r1
 800b74c:	4a33      	ldr	r2, [pc, #204]	@ (800b81c <HAL_UART_MspInit+0x254>)
 800b74e:	0019      	movs	r1, r3
 800b750:	0010      	movs	r0, r2
 800b752:	f001 fd27 	bl	800d1a4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800b756:	4b34      	ldr	r3, [pc, #208]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b758:	4a34      	ldr	r2, [pc, #208]	@ (800b82c <HAL_UART_MspInit+0x264>)
 800b75a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800b75c:	4b32      	ldr	r3, [pc, #200]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b75e:	220c      	movs	r2, #12
 800b760:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b762:	4b31      	ldr	r3, [pc, #196]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b764:	2200      	movs	r2, #0
 800b766:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b768:	4b2f      	ldr	r3, [pc, #188]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b76e:	4b2e      	ldr	r3, [pc, #184]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b770:	2280      	movs	r2, #128	@ 0x80
 800b772:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b774:	4b2c      	ldr	r3, [pc, #176]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b776:	2200      	movs	r2, #0
 800b778:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b77a:	4b2b      	ldr	r3, [pc, #172]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800b780:	4b29      	ldr	r3, [pc, #164]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b782:	2220      	movs	r2, #32
 800b784:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b786:	4b28      	ldr	r3, [pc, #160]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b788:	2200      	movs	r2, #0
 800b78a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800b78c:	4b26      	ldr	r3, [pc, #152]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b78e:	0018      	movs	r0, r3
 800b790:	f001 f8ec 	bl	800c96c <HAL_DMA_Init>
 800b794:	1e03      	subs	r3, r0, #0
 800b796:	d001      	beq.n	800b79c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800b798:	f7fb ff32 	bl	8007600 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a22      	ldr	r2, [pc, #136]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b7a0:	675a      	str	r2, [r3, #116]	@ 0x74
 800b7a2:	4b21      	ldr	r3, [pc, #132]	@ (800b828 <HAL_UART_MspInit+0x260>)
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800b7a8:	4b21      	ldr	r3, [pc, #132]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7aa:	4a22      	ldr	r2, [pc, #136]	@ (800b834 <HAL_UART_MspInit+0x26c>)
 800b7ac:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800b7ae:	4b20      	ldr	r3, [pc, #128]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7b0:	220c      	movs	r2, #12
 800b7b2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7b4:	4b1e      	ldr	r3, [pc, #120]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7b6:	2210      	movs	r2, #16
 800b7b8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b7c0:	4b1b      	ldr	r3, [pc, #108]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7c2:	2280      	movs	r2, #128	@ 0x80
 800b7c4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7cc:	4b18      	ldr	r3, [pc, #96]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800b7d2:	4b17      	ldr	r3, [pc, #92]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b7d8:	4b15      	ldr	r3, [pc, #84]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800b7de:	4b14      	ldr	r3, [pc, #80]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f001 f8c3 	bl	800c96c <HAL_DMA_Init>
 800b7e6:	1e03      	subs	r3, r0, #0
 800b7e8:	d001      	beq.n	800b7ee <HAL_UART_MspInit+0x226>
      Error_Handler();
 800b7ea:	f7fb ff09 	bl	8007600 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a0f      	ldr	r2, [pc, #60]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7f2:	671a      	str	r2, [r3, #112]	@ 0x70
 800b7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b830 <HAL_UART_MspInit+0x268>)
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	200e      	movs	r0, #14
 800b800:	f001 f882 	bl	800c908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800b804:	200e      	movs	r0, #14
 800b806:	f001 f894 	bl	800c932 <HAL_NVIC_EnableIRQ>
}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	46bd      	mov	sp, r7
 800b80e:	b00d      	add	sp, #52	@ 0x34
 800b810:	bd90      	pop	{r4, r7, pc}
 800b812:	46c0      	nop			@ (mov r8, r8)
 800b814:	40004800 	.word	0x40004800
 800b818:	40021000 	.word	0x40021000
 800b81c:	50000800 	.word	0x50000800
 800b820:	40013800 	.word	0x40013800
 800b824:	40004c00 	.word	0x40004c00
 800b828:	20002410 	.word	0x20002410
 800b82c:	4002006c 	.word	0x4002006c
 800b830:	20002458 	.word	0x20002458
 800b834:	40020080 	.word	0x40020080

0800b838 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800b840:	f000 fbec 	bl	800c01c <HAL_GetTick>
 800b844:	0003      	movs	r3, r0
 800b846:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800b848:	4b1c      	ldr	r3, [pc, #112]	@ (800b8bc <TimestampIsReached+0x84>)
 800b84a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d307      	bcc.n	800b864 <TimestampIsReached+0x2c>
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d901      	bls.n	800b864 <TimestampIsReached+0x2c>
 800b860:	2201      	movs	r2, #1
 800b862:	e000      	b.n	800b866 <TimestampIsReached+0x2e>
 800b864:	2200      	movs	r2, #0
 800b866:	230f      	movs	r3, #15
 800b868:	18fb      	adds	r3, r7, r3
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	781a      	ldrb	r2, [r3, #0]
 800b86e:	2101      	movs	r1, #1
 800b870:	400a      	ands	r2, r1
 800b872:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d207      	bcs.n	800b88c <TimestampIsReached+0x54>
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	429a      	cmp	r2, r3
 800b886:	d201      	bcs.n	800b88c <TimestampIsReached+0x54>
 800b888:	2201      	movs	r2, #1
 800b88a:	e000      	b.n	800b88e <TimestampIsReached+0x56>
 800b88c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800b88e:	200e      	movs	r0, #14
 800b890:	183b      	adds	r3, r7, r0
 800b892:	701a      	strb	r2, [r3, #0]
 800b894:	781a      	ldrb	r2, [r3, #0]
 800b896:	2101      	movs	r1, #1
 800b898:	400a      	ands	r2, r1
 800b89a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800b89c:	230f      	movs	r3, #15
 800b89e:	18fb      	adds	r3, r7, r3
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d103      	bne.n	800b8ae <TimestampIsReached+0x76>
 800b8a6:	183b      	adds	r3, r7, r0
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e000      	b.n	800b8b4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	b006      	add	sp, #24
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	7fffffff 	.word	0x7fffffff

0800b8c0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800b8c8:	f000 fba8 	bl	800c01c <HAL_GetTick>
 800b8cc:	0002      	movs	r2, r0
 800b8ce:	4904      	ldr	r1, [pc, #16]	@ (800b8e0 <AddTimestamp+0x20>)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	f010 fe30 	bl	801c538 <siprintf>
}
 800b8d8:	46c0      	nop			@ (mov r8, r8)
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b002      	add	sp, #8
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	08020660 	.word	0x08020660

0800b8e4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800b8e4:	b40c      	push	{r2, r3}
 800b8e6:	b5b0      	push	{r4, r5, r7, lr}
 800b8e8:	b0a4      	sub	sp, #144	@ 0x90
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	0002      	movs	r2, r0
 800b8ee:	6039      	str	r1, [r7, #0]
 800b8f0:	1dfb      	adds	r3, r7, #7
 800b8f2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800b8f4:	4b23      	ldr	r3, [pc, #140]	@ (800b984 <CreateLine+0xa0>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	1dfa      	adds	r2, r7, #7
 800b8fa:	7812      	ldrb	r2, [r2, #0]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d839      	bhi.n	800b974 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	4921      	ldr	r1, [pc, #132]	@ (800b988 <CreateLine+0xa4>)
 800b904:	240c      	movs	r4, #12
 800b906:	193b      	adds	r3, r7, r4
 800b908:	0018      	movs	r0, r3
 800b90a:	f010 fe15 	bl	801c538 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800b90e:	4b1d      	ldr	r3, [pc, #116]	@ (800b984 <CreateLine+0xa0>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d909      	bls.n	800b92a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800b916:	193b      	adds	r3, r7, r4
 800b918:	0018      	movs	r0, r3
 800b91a:	f7f4 fc27 	bl	800016c <strlen>
 800b91e:	0002      	movs	r2, r0
 800b920:	193b      	adds	r3, r7, r4
 800b922:	189b      	adds	r3, r3, r2
 800b924:	0018      	movs	r0, r3
 800b926:	f7ff ffcb 	bl	800b8c0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800b92a:	240c      	movs	r4, #12
 800b92c:	193b      	adds	r3, r7, r4
 800b92e:	0018      	movs	r0, r3
 800b930:	f7f4 fc1c 	bl	800016c <strlen>
 800b934:	0003      	movs	r3, r0
 800b936:	218c      	movs	r1, #140	@ 0x8c
 800b938:	187a      	adds	r2, r7, r1
 800b93a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800b93c:	239c      	movs	r3, #156	@ 0x9c
 800b93e:	2508      	movs	r5, #8
 800b940:	195b      	adds	r3, r3, r5
 800b942:	19db      	adds	r3, r3, r7
 800b944:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800b946:	193a      	adds	r2, r7, r4
 800b948:	187b      	adds	r3, r7, r1
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	18d0      	adds	r0, r2, r3
 800b94e:	187b      	adds	r3, r7, r1
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2280      	movs	r2, #128	@ 0x80
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	0019      	movs	r1, r3
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2298      	movs	r2, #152	@ 0x98
 800b95c:	1952      	adds	r2, r2, r5
 800b95e:	19d2      	adds	r2, r2, r7
 800b960:	6812      	ldr	r2, [r2, #0]
 800b962:	f010 fe81 	bl	801c668 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800b966:	193a      	adds	r2, r7, r4
 800b968:	4b08      	ldr	r3, [pc, #32]	@ (800b98c <CreateLine+0xa8>)
 800b96a:	0011      	movs	r1, r2
 800b96c:	0018      	movs	r0, r3
 800b96e:	f010 fdd3 	bl	801c518 <iprintf>
 800b972:	e000      	b.n	800b976 <CreateLine+0x92>
    return;
 800b974:	46c0      	nop			@ (mov r8, r8)
}
 800b976:	46bd      	mov	sp, r7
 800b978:	b024      	add	sp, #144	@ 0x90
 800b97a:	bcb0      	pop	{r4, r5, r7}
 800b97c:	bc08      	pop	{r3}
 800b97e:	b002      	add	sp, #8
 800b980:	4718      	bx	r3
 800b982:	46c0      	nop			@ (mov r8, r8)
 800b984:	200000c8 	.word	0x200000c8
 800b988:	0802066c 	.word	0x0802066c
 800b98c:	08020670 	.word	0x08020670

0800b990 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	4804      	ldr	r0, [pc, #16]	@ (800b9b4 <_write+0x24>)
 800b9a4:	2364      	movs	r3, #100	@ 0x64
 800b9a6:	f007 ff3f 	bl	8013828 <HAL_UART_Transmit>
  return count;
 800b9aa:	687b      	ldr	r3, [r7, #4]
}
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b004      	add	sp, #16
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	200022a0 	.word	0x200022a0

0800b9b8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	0002      	movs	r2, r0
 800b9c0:	1dfb      	adds	r3, r7, #7
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	4b03      	ldr	r3, [pc, #12]	@ (800b9d4 <SetVerboseLevel+0x1c>)
 800b9c6:	1dfa      	adds	r2, r7, #7
 800b9c8:	7812      	ldrb	r2, [r2, #0]
 800b9ca:	701a      	strb	r2, [r3, #0]
 800b9cc:	46c0      	nop			@ (mov r8, r8)
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b002      	add	sp, #8
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	200000c8 	.word	0x200000c8

0800b9d8 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b9dc:	f000 fb1e 	bl	800c01c <HAL_GetTick>
 800b9e0:	0003      	movs	r3, r0
}
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800b9ee:	4a0f      	ldr	r2, [pc, #60]	@ (800ba2c <BinaryReleaseInfo+0x44>)
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800ba30 <BinaryReleaseInfo+0x48>)
 800b9f2:	0019      	movs	r1, r3
 800b9f4:	2002      	movs	r0, #2
 800b9f6:	f7ff ff75 	bl	800b8e4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800b9fa:	480e      	ldr	r0, [pc, #56]	@ (800ba34 <BinaryReleaseInfo+0x4c>)
 800b9fc:	4a0e      	ldr	r2, [pc, #56]	@ (800ba38 <BinaryReleaseInfo+0x50>)
 800b9fe:	490c      	ldr	r1, [pc, #48]	@ (800ba30 <BinaryReleaseInfo+0x48>)
 800ba00:	4b0e      	ldr	r3, [pc, #56]	@ (800ba3c <BinaryReleaseInfo+0x54>)
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	0003      	movs	r3, r0
 800ba06:	2002      	movs	r0, #2
 800ba08:	f7ff ff6c 	bl	800b8e4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w48");
 800ba0c:	4a0c      	ldr	r2, [pc, #48]	@ (800ba40 <BinaryReleaseInfo+0x58>)
 800ba0e:	4b08      	ldr	r3, [pc, #32]	@ (800ba30 <BinaryReleaseInfo+0x48>)
 800ba10:	0019      	movs	r1, r3
 800ba12:	2002      	movs	r0, #2
 800ba14:	f7ff ff66 	bl	800b8e4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800ba18:	4b0a      	ldr	r3, [pc, #40]	@ (800ba44 <BinaryReleaseInfo+0x5c>)
 800ba1a:	4a0b      	ldr	r2, [pc, #44]	@ (800ba48 <BinaryReleaseInfo+0x60>)
 800ba1c:	4904      	ldr	r1, [pc, #16]	@ (800ba30 <BinaryReleaseInfo+0x48>)
 800ba1e:	2002      	movs	r0, #2
 800ba20:	f7ff ff60 	bl	800b8e4 <CreateLine>
}
 800ba24:	46c0      	nop			@ (mov r8, r8)
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	46c0      	nop			@ (mov r8, r8)
 800ba2c:	08020678 	.word	0x08020678
 800ba30:	080206a4 	.word	0x080206a4
 800ba34:	080206a8 	.word	0x080206a8
 800ba38:	080206b4 	.word	0x080206b4
 800ba3c:	080206c8 	.word	0x080206c8
 800ba40:	080206d4 	.word	0x080206d4
 800ba44:	080206e0 	.word	0x080206e0
 800ba48:	080206e8 	.word	0x080206e8

0800ba4c <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	68f9      	ldr	r1, [r7, #12]
 800ba5e:	4803      	ldr	r0, [pc, #12]	@ (800ba6c <errorHandler+0x20>)
 800ba60:	f010 fd5a 	bl	801c518 <iprintf>
//    while (true)
//    {
//    }
}
 800ba64:	46c0      	nop			@ (mov r8, r8)
 800ba66:	46bd      	mov	sp, r7
 800ba68:	b004      	add	sp, #16
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	08020700 	.word	0x08020700

0800ba70 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ba70:	b590      	push	{r4, r7, lr}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6039      	str	r1, [r7, #0]
 800ba78:	0011      	movs	r1, r2
 800ba7a:	1dfb      	adds	r3, r7, #7
 800ba7c:	1c02      	adds	r2, r0, #0
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	1dbb      	adds	r3, r7, #6
 800ba82:	1c0a      	adds	r2, r1, #0
 800ba84:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800ba86:	4b0a      	ldr	r3, [pc, #40]	@ (800bab0 <ReadRegister+0x40>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00a      	beq.n	800baa4 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800ba8e:	4b08      	ldr	r3, [pc, #32]	@ (800bab0 <ReadRegister+0x40>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	1dba      	adds	r2, r7, #6
 800ba94:	7814      	ldrb	r4, [r2, #0]
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	1dfa      	adds	r2, r7, #7
 800ba9a:	7810      	ldrb	r0, [r2, #0]
 800ba9c:	0022      	movs	r2, r4
 800ba9e:	4798      	blx	r3
 800baa0:	0003      	movs	r3, r0
 800baa2:	e000      	b.n	800baa6 <ReadRegister+0x36>
	}
	return false;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	0018      	movs	r0, r3
 800baa8:	46bd      	mov	sp, r7
 800baaa:	b003      	add	sp, #12
 800baac:	bd90      	pop	{r4, r7, pc}
 800baae:	46c0      	nop			@ (mov r8, r8)
 800bab0:	200024a0 	.word	0x200024a0

0800bab4 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800bab4:	b590      	push	{r4, r7, lr}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6039      	str	r1, [r7, #0]
 800babc:	0011      	movs	r1, r2
 800babe:	1dfb      	adds	r3, r7, #7
 800bac0:	1c02      	adds	r2, r0, #0
 800bac2:	701a      	strb	r2, [r3, #0]
 800bac4:	1dbb      	adds	r3, r7, #6
 800bac6:	1c0a      	adds	r2, r1, #0
 800bac8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800baca:	4b0a      	ldr	r3, [pc, #40]	@ (800baf4 <WriteRegister+0x40>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800bad2:	4b08      	ldr	r3, [pc, #32]	@ (800baf4 <WriteRegister+0x40>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	1dba      	adds	r2, r7, #6
 800bad8:	7814      	ldrb	r4, [r2, #0]
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	1dfa      	adds	r2, r7, #7
 800bade:	7810      	ldrb	r0, [r2, #0]
 800bae0:	0022      	movs	r2, r4
 800bae2:	4798      	blx	r3
 800bae4:	0003      	movs	r3, r0
 800bae6:	e000      	b.n	800baea <WriteRegister+0x36>
  }
  return false;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	0018      	movs	r0, r3
 800baec:	46bd      	mov	sp, r7
 800baee:	b003      	add	sp, #12
 800baf0:	bd90      	pop	{r4, r7, pc}
 800baf2:	46c0      	nop			@ (mov r8, r8)
 800baf4:	200024a4 	.word	0x200024a4

0800baf8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	000a      	movs	r2, r1
 800bb02:	1cfb      	adds	r3, r7, #3
 800bb04:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800bb06:	230f      	movs	r3, #15
 800bb08:	18fb      	adds	r3, r7, r3
 800bb0a:	22ff      	movs	r2, #255	@ 0xff
 800bb0c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800bb0e:	230e      	movs	r3, #14
 800bb10:	18fb      	adds	r3, r7, r3
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]
 800bb16:	e037      	b.n	800bb88 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800bb18:	230e      	movs	r3, #14
 800bb1a:	18fb      	adds	r3, r7, r3
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	18d3      	adds	r3, r2, r3
 800bb22:	7819      	ldrb	r1, [r3, #0]
 800bb24:	220f      	movs	r2, #15
 800bb26:	18bb      	adds	r3, r7, r2
 800bb28:	18ba      	adds	r2, r7, r2
 800bb2a:	7812      	ldrb	r2, [r2, #0]
 800bb2c:	404a      	eors	r2, r1
 800bb2e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800bb30:	230d      	movs	r3, #13
 800bb32:	18fb      	adds	r3, r7, r3
 800bb34:	2200      	movs	r2, #0
 800bb36:	701a      	strb	r2, [r3, #0]
 800bb38:	e01b      	b.n	800bb72 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800bb3a:	210f      	movs	r1, #15
 800bb3c:	187b      	adds	r3, r7, r1
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	b25b      	sxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	da09      	bge.n	800bb5a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800bb46:	187b      	adds	r3, r7, r1
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	b25b      	sxtb	r3, r3
 800bb4e:	2231      	movs	r2, #49	@ 0x31
 800bb50:	4053      	eors	r3, r2
 800bb52:	b25a      	sxtb	r2, r3
 800bb54:	187b      	adds	r3, r7, r1
 800bb56:	701a      	strb	r2, [r3, #0]
 800bb58:	e005      	b.n	800bb66 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800bb5a:	230f      	movs	r3, #15
 800bb5c:	18fa      	adds	r2, r7, r3
 800bb5e:	18fb      	adds	r3, r7, r3
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	18db      	adds	r3, r3, r3
 800bb64:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800bb66:	210d      	movs	r1, #13
 800bb68:	187b      	adds	r3, r7, r1
 800bb6a:	781a      	ldrb	r2, [r3, #0]
 800bb6c:	187b      	adds	r3, r7, r1
 800bb6e:	3201      	adds	r2, #1
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	230d      	movs	r3, #13
 800bb74:	18fb      	adds	r3, r7, r3
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b07      	cmp	r3, #7
 800bb7a:	d9de      	bls.n	800bb3a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800bb7c:	210e      	movs	r1, #14
 800bb7e:	187b      	adds	r3, r7, r1
 800bb80:	781a      	ldrb	r2, [r3, #0]
 800bb82:	187b      	adds	r3, r7, r1
 800bb84:	3201      	adds	r2, #1
 800bb86:	701a      	strb	r2, [r3, #0]
 800bb88:	230e      	movs	r3, #14
 800bb8a:	18fa      	adds	r2, r7, r3
 800bb8c:	1cfb      	adds	r3, r7, #3
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d3c0      	bcc.n	800bb18 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800bb96:	230f      	movs	r3, #15
 800bb98:	18fb      	adds	r3, r7, r3
 800bb9a:	781b      	ldrb	r3, [r3, #0]
}
 800bb9c:	0018      	movs	r0, r3
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	b004      	add	sp, #16
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800bbae:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd8 <HIDS_Init+0x34>)
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800bbb4:	4b09      	ldr	r3, [pc, #36]	@ (800bbdc <HIDS_Init+0x38>)
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800bbba:	4b09      	ldr	r3, [pc, #36]	@ (800bbe0 <HIDS_Init+0x3c>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	f000 f8da 	bl	800bd78 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800bbc4:	4b07      	ldr	r3, [pc, #28]	@ (800bbe4 <HIDS_Init+0x40>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	0018      	movs	r0, r3
 800bbca:	f000 f82b 	bl	800bc24 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800bbce:	46c0      	nop			@ (mov r8, r8)
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	b002      	add	sp, #8
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	46c0      	nop			@ (mov r8, r8)
 800bbd8:	200024a0 	.word	0x200024a0
 800bbdc:	200024a4 	.word	0x200024a4
 800bbe0:	200000ca 	.word	0x200000ca
 800bbe4:	200000c9 	.word	0x200000c9

0800bbe8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800bbec:	f7ff fef4 	bl	800b9d8 <GetCurrentHalTicks>
 800bbf0:	0002      	movs	r2, r0
 800bbf2:	4b08      	ldr	r3, [pc, #32]	@ (800bc14 <HIDS_StartMeasurement+0x2c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	18d2      	adds	r2, r2, r3
 800bbf8:	4b07      	ldr	r3, [pc, #28]	@ (800bc18 <HIDS_StartMeasurement+0x30>)
 800bbfa:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800bbfc:	4b07      	ldr	r3, [pc, #28]	@ (800bc1c <HIDS_StartMeasurement+0x34>)
 800bbfe:	2201      	movs	r2, #1
 800bc00:	0019      	movs	r1, r3
 800bc02:	2044      	movs	r0, #68	@ 0x44
 800bc04:	f7ff ff56 	bl	800bab4 <WriteRegister>
  MeasurementDone = false;
 800bc08:	4b05      	ldr	r3, [pc, #20]	@ (800bc20 <HIDS_StartMeasurement+0x38>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
}
 800bc0e:	46c0      	nop			@ (mov r8, r8)
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	200000d0 	.word	0x200000d0
 800bc18:	200000cc 	.word	0x200000cc
 800bc1c:	200000ca 	.word	0x200000ca
 800bc20:	200024b6 	.word	0x200024b6

0800bc24 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	0002      	movs	r2, r0
 800bc2c:	1dfb      	adds	r3, r7, #7
 800bc2e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800bc30:	4b03      	ldr	r3, [pc, #12]	@ (800bc40 <HIDS_SetHeaterMode+0x1c>)
 800bc32:	1dfa      	adds	r2, r7, #7
 800bc34:	7812      	ldrb	r2, [r2, #0]
 800bc36:	701a      	strb	r2, [r3, #0]
}
 800bc38:	46c0      	nop			@ (mov r8, r8)
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	b002      	add	sp, #8
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	200000c9 	.word	0x200000c9

0800bc44 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800bc44:	b590      	push	{r4, r7, lr}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	781a      	ldrb	r2, [r3, #0]
 800bc50:	210c      	movs	r1, #12
 800bc52:	187b      	adds	r3, r7, r1
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	785a      	ldrb	r2, [r3, #1]
 800bc5a:	187b      	adds	r3, r7, r1
 800bc5c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800bc5e:	240f      	movs	r4, #15
 800bc60:	193b      	adds	r3, r7, r4
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	7892      	ldrb	r2, [r2, #2]
 800bc66:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800bc68:	187b      	adds	r3, r7, r1
 800bc6a:	2102      	movs	r1, #2
 800bc6c:	0018      	movs	r0, r3
 800bc6e:	f7ff ff43 	bl	800baf8 <CalculateCRC>
 800bc72:	0003      	movs	r3, r0
 800bc74:	001a      	movs	r2, r3
 800bc76:	193b      	adds	r3, r7, r4
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d007      	beq.n	800bc8e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800bc7e:	4a1a      	ldr	r2, [pc, #104]	@ (800bce8 <CheckCRC+0xa4>)
 800bc80:	4b1a      	ldr	r3, [pc, #104]	@ (800bcec <CheckCRC+0xa8>)
 800bc82:	0019      	movs	r1, r3
 800bc84:	2001      	movs	r0, #1
 800bc86:	f7ff fe2d 	bl	800b8e4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e027      	b.n	800bcde <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	78da      	ldrb	r2, [r3, #3]
 800bc92:	2108      	movs	r1, #8
 800bc94:	187b      	adds	r3, r7, r1
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	791a      	ldrb	r2, [r3, #4]
 800bc9c:	187b      	adds	r3, r7, r1
 800bc9e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800bca0:	240e      	movs	r4, #14
 800bca2:	193b      	adds	r3, r7, r4
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	7952      	ldrb	r2, [r2, #5]
 800bca8:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800bcaa:	187b      	adds	r3, r7, r1
 800bcac:	2102      	movs	r1, #2
 800bcae:	0018      	movs	r0, r3
 800bcb0:	f7ff ff22 	bl	800baf8 <CalculateCRC>
 800bcb4:	0003      	movs	r3, r0
 800bcb6:	001a      	movs	r2, r3
 800bcb8:	193b      	adds	r3, r7, r4
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00d      	beq.n	800bcdc <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800bcc0:	4a0b      	ldr	r2, [pc, #44]	@ (800bcf0 <CheckCRC+0xac>)
 800bcc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <CheckCRC+0xa8>)
 800bcc4:	0019      	movs	r1, r3
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	f7ff fe0c 	bl	800b8e4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800bccc:	4a09      	ldr	r2, [pc, #36]	@ (800bcf4 <CheckCRC+0xb0>)
 800bcce:	4b0a      	ldr	r3, [pc, #40]	@ (800bcf8 <CheckCRC+0xb4>)
 800bcd0:	2170      	movs	r1, #112	@ 0x70
 800bcd2:	0018      	movs	r0, r3
 800bcd4:	f7ff feba 	bl	800ba4c <errorHandler>
		return false;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e000      	b.n	800bcde <CheckCRC+0x9a>
	}
	return true;
 800bcdc:	2301      	movs	r3, #1
}
 800bcde:	0018      	movs	r0, r3
 800bce0:	46bd      	mov	sp, r7
 800bce2:	b005      	add	sp, #20
 800bce4:	bd90      	pop	{r4, r7, pc}
 800bce6:	46c0      	nop			@ (mov r8, r8)
 800bce8:	0802074c 	.word	0x0802074c
 800bcec:	08020774 	.word	0x08020774
 800bcf0:	08020778 	.word	0x08020778
 800bcf4:	080207a4 	.word	0x080207a4
 800bcf8:	08020c08 	.word	0x08020c08

0800bcfc <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800bd02:	1dbb      	adds	r3, r7, #6
 800bd04:	2289      	movs	r2, #137	@ 0x89
 800bd06:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800bd08:	1dbb      	adds	r3, r7, #6
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	0019      	movs	r1, r3
 800bd0e:	2044      	movs	r0, #68	@ 0x44
 800bd10:	f7ff fed0 	bl	800bab4 <WriteRegister>
	HAL_Delay(30);
 800bd14:	201e      	movs	r0, #30
 800bd16:	f000 f98b 	bl	800c030 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800bd1a:	4b14      	ldr	r3, [pc, #80]	@ (800bd6c <HIDS_DeviceConnected+0x70>)
 800bd1c:	2206      	movs	r2, #6
 800bd1e:	0019      	movs	r1, r3
 800bd20:	2044      	movs	r0, #68	@ 0x44
 800bd22:	f7ff fea5 	bl	800ba70 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800bd26:	1dfb      	adds	r3, r7, #7
 800bd28:	2200      	movs	r2, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
 800bd2c:	e011      	b.n	800bd52 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800bd2e:	1dfb      	adds	r3, r7, #7
 800bd30:	7818      	ldrb	r0, [r3, #0]
 800bd32:	1dfb      	adds	r3, r7, #7
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	4a0d      	ldr	r2, [pc, #52]	@ (800bd6c <HIDS_DeviceConnected+0x70>)
 800bd38:	5cd3      	ldrb	r3, [r2, r3]
 800bd3a:	4a0d      	ldr	r2, [pc, #52]	@ (800bd70 <HIDS_DeviceConnected+0x74>)
 800bd3c:	490d      	ldr	r1, [pc, #52]	@ (800bd74 <HIDS_DeviceConnected+0x78>)
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	0003      	movs	r3, r0
 800bd42:	2002      	movs	r0, #2
 800bd44:	f7ff fdce 	bl	800b8e4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800bd48:	1dfb      	adds	r3, r7, #7
 800bd4a:	781a      	ldrb	r2, [r3, #0]
 800bd4c:	1dfb      	adds	r3, r7, #7
 800bd4e:	3201      	adds	r2, #1
 800bd50:	701a      	strb	r2, [r3, #0]
 800bd52:	1dfb      	adds	r3, r7, #7
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b05      	cmp	r3, #5
 800bd58:	d9e9      	bls.n	800bd2e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800bd5a:	4b04      	ldr	r3, [pc, #16]	@ (800bd6c <HIDS_DeviceConnected+0x70>)
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	f7ff ff71 	bl	800bc44 <CheckCRC>
 800bd62:	0003      	movs	r3, r0
}
 800bd64:	0018      	movs	r0, r3
 800bd66:	46bd      	mov	sp, r7
 800bd68:	b002      	add	sp, #8
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	200024a8 	.word	0x200024a8
 800bd70:	080207bc 	.word	0x080207bc
 800bd74:	08020748 	.word	0x08020748

0800bd78 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	0002      	movs	r2, r0
 800bd80:	1dfb      	adds	r3, r7, #7
 800bd82:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800bd84:	4b03      	ldr	r3, [pc, #12]	@ (800bd94 <HIDS_SetMeasurementMode+0x1c>)
 800bd86:	1dfa      	adds	r2, r7, #7
 800bd88:	7812      	ldrb	r2, [r2, #0]
 800bd8a:	701a      	strb	r2, [r3, #0]
}
 800bd8c:	46c0      	nop			@ (mov r8, r8)
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	b002      	add	sp, #8
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	200000ca 	.word	0x200000ca

0800bd98 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800bd9c:	4b04      	ldr	r3, [pc, #16]	@ (800bdb0 <HIDS_MeasurementReady+0x18>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	0018      	movs	r0, r3
 800bda2:	f7ff fd49 	bl	800b838 <TimestampIsReached>
 800bda6:	0003      	movs	r3, r0
}
 800bda8:	0018      	movs	r0, r3
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	46c0      	nop			@ (mov r8, r8)
 800bdb0:	200000cc 	.word	0x200000cc

0800bdb4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800bdb4:	b590      	push	{r4, r7, lr}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800bdbe:	4b49      	ldr	r3, [pc, #292]	@ (800bee4 <HIDS_GetMeasurementValues+0x130>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <HIDS_GetMeasurementValues+0x16>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e087      	b.n	800beda <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800bdca:	f7ff ffe5 	bl	800bd98 <HIDS_MeasurementReady>
 800bdce:	0003      	movs	r3, r0
 800bdd0:	001a      	movs	r2, r3
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	4053      	eors	r3, r2
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <HIDS_GetMeasurementValues+0x2c>
 800bddc:	2300      	movs	r3, #0
 800bdde:	e07c      	b.n	800beda <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800bde0:	2316      	movs	r3, #22
 800bde2:	18fc      	adds	r4, r7, r3
 800bde4:	4b40      	ldr	r3, [pc, #256]	@ (800bee8 <HIDS_GetMeasurementValues+0x134>)
 800bde6:	2206      	movs	r2, #6
 800bde8:	0019      	movs	r1, r3
 800bdea:	2044      	movs	r0, #68	@ 0x44
 800bdec:	f7ff fe40 	bl	800ba70 <ReadRegister>
 800bdf0:	0003      	movs	r3, r0
 800bdf2:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800bdf4:	4b3c      	ldr	r3, [pc, #240]	@ (800bee8 <HIDS_GetMeasurementValues+0x134>)
 800bdf6:	0018      	movs	r0, r3
 800bdf8:	f7ff ff24 	bl	800bc44 <CheckCRC>
 800bdfc:	0003      	movs	r3, r0
 800bdfe:	001a      	movs	r2, r3
 800be00:	2301      	movs	r3, #1
 800be02:	4053      	eors	r3, r2
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d011      	beq.n	800be2e <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800be0a:	2317      	movs	r3, #23
 800be0c:	18fb      	adds	r3, r7, r3
 800be0e:	2200      	movs	r2, #0
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	e005      	b.n	800be20 <HIDS_GetMeasurementValues+0x6c>
 800be14:	2117      	movs	r1, #23
 800be16:	187b      	adds	r3, r7, r1
 800be18:	781a      	ldrb	r2, [r3, #0]
 800be1a:	187b      	adds	r3, r7, r1
 800be1c:	3201      	adds	r2, #1
 800be1e:	701a      	strb	r2, [r3, #0]
 800be20:	2317      	movs	r3, #23
 800be22:	18fb      	adds	r3, r7, r3
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b05      	cmp	r3, #5
 800be28:	d9f4      	bls.n	800be14 <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e055      	b.n	800beda <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800be2e:	4b2e      	ldr	r3, [pc, #184]	@ (800bee8 <HIDS_GetMeasurementValues+0x134>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	021b      	lsls	r3, r3, #8
 800be34:	4a2c      	ldr	r2, [pc, #176]	@ (800bee8 <HIDS_GetMeasurementValues+0x134>)
 800be36:	7852      	ldrb	r2, [r2, #1]
 800be38:	4313      	orrs	r3, r2
 800be3a:	22af      	movs	r2, #175	@ 0xaf
 800be3c:	4353      	muls	r3, r2
 800be3e:	0018      	movs	r0, r3
 800be40:	f7f7 fabe 	bl	80033c0 <__aeabi_i2d>
 800be44:	2200      	movs	r2, #0
 800be46:	4b29      	ldr	r3, [pc, #164]	@ (800beec <HIDS_GetMeasurementValues+0x138>)
 800be48:	f7f5 ffb4 	bl	8001db4 <__aeabi_ddiv>
 800be4c:	0002      	movs	r2, r0
 800be4e:	000b      	movs	r3, r1
 800be50:	0010      	movs	r0, r2
 800be52:	0019      	movs	r1, r3
 800be54:	f7f7 fb4e 	bl	80034f4 <__aeabi_d2f>
 800be58:	1c03      	adds	r3, r0, #0
 800be5a:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800be5c:	4924      	ldr	r1, [pc, #144]	@ (800bef0 <HIDS_GetMeasurementValues+0x13c>)
 800be5e:	6938      	ldr	r0, [r7, #16]
 800be60:	f7f5 f9dc 	bl	800121c <__aeabi_fsub>
 800be64:	1c03      	adds	r3, r0, #0
 800be66:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800be68:	4b1f      	ldr	r3, [pc, #124]	@ (800bee8 <HIDS_GetMeasurementValues+0x134>)
 800be6a:	78db      	ldrb	r3, [r3, #3]
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	4a1e      	ldr	r2, [pc, #120]	@ (800bee8 <HIDS_GetMeasurementValues+0x134>)
 800be70:	7912      	ldrb	r2, [r2, #4]
 800be72:	431a      	orrs	r2, r3
 800be74:	0013      	movs	r3, r2
 800be76:	015b      	lsls	r3, r3, #5
 800be78:	1a9b      	subs	r3, r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	189b      	adds	r3, r3, r2
 800be7e:	0018      	movs	r0, r3
 800be80:	f7f7 fa9e 	bl	80033c0 <__aeabi_i2d>
 800be84:	2200      	movs	r2, #0
 800be86:	4b19      	ldr	r3, [pc, #100]	@ (800beec <HIDS_GetMeasurementValues+0x138>)
 800be88:	f7f5 ff94 	bl	8001db4 <__aeabi_ddiv>
 800be8c:	0002      	movs	r2, r0
 800be8e:	000b      	movs	r3, r1
 800be90:	0010      	movs	r0, r2
 800be92:	0019      	movs	r1, r3
 800be94:	f7f7 fb2e 	bl	80034f4 <__aeabi_d2f>
 800be98:	1c03      	adds	r3, r0, #0
 800be9a:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800be9c:	4915      	ldr	r1, [pc, #84]	@ (800bef4 <HIDS_GetMeasurementValues+0x140>)
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f7f5 f9bc 	bl	800121c <__aeabi_fsub>
 800bea4:	1c03      	adds	r3, r0, #0
 800bea6:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	0011      	movs	r1, r2
 800beba:	0018      	movs	r0, r3
 800bebc:	f7fd fcfa 	bl	80098b4 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	1c11      	adds	r1, r2, #0
 800bec6:	1c18      	adds	r0, r3, #0
 800bec8:	f7f7 fcf2 	bl	80038b0 <ESP_GetHT>

   measurements = 0;
 800becc:	4b0a      	ldr	r3, [pc, #40]	@ (800bef8 <HIDS_GetMeasurementValues+0x144>)
 800bece:	2200      	movs	r2, #0
 800bed0:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800bed2:	4b04      	ldr	r3, [pc, #16]	@ (800bee4 <HIDS_GetMeasurementValues+0x130>)
 800bed4:	2201      	movs	r2, #1
 800bed6:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800bed8:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800beda:	0018      	movs	r0, r3
 800bedc:	46bd      	mov	sp, r7
 800bede:	b007      	add	sp, #28
 800bee0:	bd90      	pop	{r4, r7, pc}
 800bee2:	46c0      	nop			@ (mov r8, r8)
 800bee4:	200024b6 	.word	0x200024b6
 800bee8:	200024b0 	.word	0x200024b0
 800beec:	40efffe0 	.word	0x40efffe0
 800bef0:	42340000 	.word	0x42340000
 800bef4:	40c00000 	.word	0x40c00000
 800bef8:	200024b8 	.word	0x200024b8

0800befc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800befc:	480d      	ldr	r0, [pc, #52]	@ (800bf34 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800befe:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800bf00:	f7ff f8f0 	bl	800b0e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bf04:	480c      	ldr	r0, [pc, #48]	@ (800bf38 <LoopForever+0x6>)
  ldr r1, =_edata
 800bf06:	490d      	ldr	r1, [pc, #52]	@ (800bf3c <LoopForever+0xa>)
  ldr r2, =_sidata
 800bf08:	4a0d      	ldr	r2, [pc, #52]	@ (800bf40 <LoopForever+0xe>)
  movs r3, #0
 800bf0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bf0c:	e002      	b.n	800bf14 <LoopCopyDataInit>

0800bf0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bf0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bf10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bf12:	3304      	adds	r3, #4

0800bf14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bf14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bf16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bf18:	d3f9      	bcc.n	800bf0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	@ (800bf44 <LoopForever+0x12>)
  ldr r4, =_ebss
 800bf1c:	4c0a      	ldr	r4, [pc, #40]	@ (800bf48 <LoopForever+0x16>)
  movs r3, #0
 800bf1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bf20:	e001      	b.n	800bf26 <LoopFillZerobss>

0800bf22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bf22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bf24:	3204      	adds	r2, #4

0800bf26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bf26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bf28:	d3fb      	bcc.n	800bf22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bf2a:	f010 fc53 	bl	801c7d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bf2e:	f7fb f997 	bl	8007260 <main>

0800bf32 <LoopForever>:

LoopForever:
    b LoopForever
 800bf32:	e7fe      	b.n	800bf32 <LoopForever>
   ldr   r0, =_estack
 800bf34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800bf38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bf3c:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 800bf40:	08021588 	.word	0x08021588
  ldr r2, =_sbss
 800bf44:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 800bf48:	200038c0 	.word	0x200038c0

0800bf4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bf4c:	e7fe      	b.n	800bf4c <ADC1_COMP_IRQHandler>
	...

0800bf50 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bf56:	1dfb      	adds	r3, r7, #7
 800bf58:	2200      	movs	r2, #0
 800bf5a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800bf5c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf8c <HAL_Init+0x3c>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	4b0a      	ldr	r3, [pc, #40]	@ (800bf8c <HAL_Init+0x3c>)
 800bf62:	2140      	movs	r1, #64	@ 0x40
 800bf64:	430a      	orrs	r2, r1
 800bf66:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bf68:	2003      	movs	r0, #3
 800bf6a:	f000 f811 	bl	800bf90 <HAL_InitTick>
 800bf6e:	1e03      	subs	r3, r0, #0
 800bf70:	d003      	beq.n	800bf7a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800bf72:	1dfb      	adds	r3, r7, #7
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	e001      	b.n	800bf7e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bf7a:	f7fe ff7d 	bl	800ae78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bf7e:	1dfb      	adds	r3, r7, #7
 800bf80:	781b      	ldrb	r3, [r3, #0]
}
 800bf82:	0018      	movs	r0, r3
 800bf84:	46bd      	mov	sp, r7
 800bf86:	b002      	add	sp, #8
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	46c0      	nop			@ (mov r8, r8)
 800bf8c:	40022000 	.word	0x40022000

0800bf90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bf98:	4b14      	ldr	r3, [pc, #80]	@ (800bfec <HAL_InitTick+0x5c>)
 800bf9a:	681c      	ldr	r4, [r3, #0]
 800bf9c:	4b14      	ldr	r3, [pc, #80]	@ (800bff0 <HAL_InitTick+0x60>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	0019      	movs	r1, r3
 800bfa2:	23fa      	movs	r3, #250	@ 0xfa
 800bfa4:	0098      	lsls	r0, r3, #2
 800bfa6:	f7f4 f8fd 	bl	80001a4 <__udivsi3>
 800bfaa:	0003      	movs	r3, r0
 800bfac:	0019      	movs	r1, r3
 800bfae:	0020      	movs	r0, r4
 800bfb0:	f7f4 f8f8 	bl	80001a4 <__udivsi3>
 800bfb4:	0003      	movs	r3, r0
 800bfb6:	0018      	movs	r0, r3
 800bfb8:	f000 fccb 	bl	800c952 <HAL_SYSTICK_Config>
 800bfbc:	1e03      	subs	r3, r0, #0
 800bfbe:	d001      	beq.n	800bfc4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e00f      	b.n	800bfe4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d80b      	bhi.n	800bfe2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	2301      	movs	r3, #1
 800bfce:	425b      	negs	r3, r3
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	f000 fc98 	bl	800c908 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bfd8:	4b06      	ldr	r3, [pc, #24]	@ (800bff4 <HAL_InitTick+0x64>)
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e000      	b.n	800bfe4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
}
 800bfe4:	0018      	movs	r0, r3
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	b003      	add	sp, #12
 800bfea:	bd90      	pop	{r4, r7, pc}
 800bfec:	200000c4 	.word	0x200000c4
 800bff0:	200000d8 	.word	0x200000d8
 800bff4:	200000d4 	.word	0x200000d4

0800bff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bffc:	4b05      	ldr	r3, [pc, #20]	@ (800c014 <HAL_IncTick+0x1c>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	001a      	movs	r2, r3
 800c002:	4b05      	ldr	r3, [pc, #20]	@ (800c018 <HAL_IncTick+0x20>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	18d2      	adds	r2, r2, r3
 800c008:	4b03      	ldr	r3, [pc, #12]	@ (800c018 <HAL_IncTick+0x20>)
 800c00a:	601a      	str	r2, [r3, #0]
}
 800c00c:	46c0      	nop			@ (mov r8, r8)
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	46c0      	nop			@ (mov r8, r8)
 800c014:	200000d8 	.word	0x200000d8
 800c018:	200024bc 	.word	0x200024bc

0800c01c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	af00      	add	r7, sp, #0
  return uwTick;
 800c020:	4b02      	ldr	r3, [pc, #8]	@ (800c02c <HAL_GetTick+0x10>)
 800c022:	681b      	ldr	r3, [r3, #0]
}
 800c024:	0018      	movs	r0, r3
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	46c0      	nop			@ (mov r8, r8)
 800c02c:	200024bc 	.word	0x200024bc

0800c030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c038:	f7ff fff0 	bl	800c01c <HAL_GetTick>
 800c03c:	0003      	movs	r3, r0
 800c03e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3301      	adds	r3, #1
 800c048:	d005      	beq.n	800c056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c04a:	4b0a      	ldr	r3, [pc, #40]	@ (800c074 <HAL_Delay+0x44>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	001a      	movs	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	189b      	adds	r3, r3, r2
 800c054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c056:	46c0      	nop			@ (mov r8, r8)
 800c058:	f7ff ffe0 	bl	800c01c <HAL_GetTick>
 800c05c:	0002      	movs	r2, r0
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	429a      	cmp	r2, r3
 800c066:	d8f7      	bhi.n	800c058 <HAL_Delay+0x28>
  {
  }
}
 800c068:	46c0      	nop			@ (mov r8, r8)
 800c06a:	46c0      	nop			@ (mov r8, r8)
 800c06c:	46bd      	mov	sp, r7
 800c06e:	b004      	add	sp, #16
 800c070:	bd80      	pop	{r7, pc}
 800c072:	46c0      	nop			@ (mov r8, r8)
 800c074:	200000d8 	.word	0x200000d8

0800c078 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <HAL_GetUIDw0+0x10>)
 800c07e:	681b      	ldr	r3, [r3, #0]
}
 800c080:	0018      	movs	r0, r3
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	46c0      	nop			@ (mov r8, r8)
 800c088:	1ff80050 	.word	0x1ff80050

0800c08c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800c090:	4b02      	ldr	r3, [pc, #8]	@ (800c09c <HAL_GetUIDw1+0x10>)
 800c092:	681b      	ldr	r3, [r3, #0]
}
 800c094:	0018      	movs	r0, r3
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	46c0      	nop			@ (mov r8, r8)
 800c09c:	1ff80054 	.word	0x1ff80054

0800c0a0 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800c0a4:	4b02      	ldr	r3, [pc, #8]	@ (800c0b0 <HAL_GetUIDw2+0x10>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
}
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	46c0      	nop			@ (mov r8, r8)
 800c0b0:	1ff80064 	.word	0x1ff80064

0800c0b4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e159      	b.n	800c37a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2250      	movs	r2, #80	@ 0x50
 800c0d8:	2100      	movs	r1, #0
 800c0da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	0018      	movs	r0, r3
 800c0e0:	f7fa fb00 	bl	80066e4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0e8:	2210      	movs	r2, #16
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	2b10      	cmp	r3, #16
 800c0ee:	d005      	beq.n	800c0fc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	2204      	movs	r2, #4
 800c0f8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800c0fa:	d00b      	beq.n	800c114 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c100:	2210      	movs	r2, #16
 800c102:	431a      	orrs	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2250      	movs	r2, #80	@ 0x50
 800c10c:	2100      	movs	r1, #0
 800c10e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e132      	b.n	800c37a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c118:	4a9a      	ldr	r2, [pc, #616]	@ (800c384 <HAL_ADC_Init+0x2d0>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	2202      	movs	r2, #2
 800c11e:	431a      	orrs	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	2203      	movs	r2, #3
 800c12c:	4013      	ands	r3, r2
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d108      	bne.n	800c144 <HAL_ADC_Init+0x90>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2201      	movs	r2, #1
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d101      	bne.n	800c144 <HAL_ADC_Init+0x90>
 800c140:	2301      	movs	r3, #1
 800c142:	e000      	b.n	800c146 <HAL_ADC_Init+0x92>
 800c144:	2300      	movs	r3, #0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d149      	bne.n	800c1de <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	23c0      	movs	r3, #192	@ 0xc0
 800c150:	061b      	lsls	r3, r3, #24
 800c152:	429a      	cmp	r2, r3
 800c154:	d00b      	beq.n	800c16e <HAL_ADC_Init+0xba>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	685a      	ldr	r2, [r3, #4]
 800c15a:	2380      	movs	r3, #128	@ 0x80
 800c15c:	05db      	lsls	r3, r3, #23
 800c15e:	429a      	cmp	r2, r3
 800c160:	d005      	beq.n	800c16e <HAL_ADC_Init+0xba>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	2380      	movs	r3, #128	@ 0x80
 800c168:	061b      	lsls	r3, r3, #24
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d111      	bne.n	800c192 <HAL_ADC_Init+0xde>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	691a      	ldr	r2, [r3, #16]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	0092      	lsls	r2, r2, #2
 800c17a:	0892      	lsrs	r2, r2, #2
 800c17c:	611a      	str	r2, [r3, #16]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	6919      	ldr	r1, [r3, #16]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	430a      	orrs	r2, r1
 800c18e:	611a      	str	r2, [r3, #16]
 800c190:	e014      	b.n	800c1bc <HAL_ADC_Init+0x108>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	691a      	ldr	r2, [r3, #16]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	0092      	lsls	r2, r2, #2
 800c19e:	0892      	lsrs	r2, r2, #2
 800c1a0:	611a      	str	r2, [r3, #16]
 800c1a2:	4b79      	ldr	r3, [pc, #484]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	4b78      	ldr	r3, [pc, #480]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1a8:	4978      	ldr	r1, [pc, #480]	@ (800c38c <HAL_ADC_Init+0x2d8>)
 800c1aa:	400a      	ands	r2, r1
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	4b76      	ldr	r3, [pc, #472]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1b0:	6819      	ldr	r1, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	4b74      	ldr	r3, [pc, #464]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1b8:	430a      	orrs	r2, r1
 800c1ba:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2118      	movs	r1, #24
 800c1c8:	438a      	bics	r2, r1
 800c1ca:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68d9      	ldr	r1, [r3, #12]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689a      	ldr	r2, [r3, #8]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800c1de:	4b6a      	ldr	r3, [pc, #424]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b69      	ldr	r3, [pc, #420]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1e4:	496a      	ldr	r1, [pc, #424]	@ (800c390 <HAL_ADC_Init+0x2dc>)
 800c1e6:	400a      	ands	r2, r1
 800c1e8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800c1ea:	4b67      	ldr	r3, [pc, #412]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1ec:	6819      	ldr	r1, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1f2:	065a      	lsls	r2, r3, #25
 800c1f4:	4b64      	ldr	r3, [pc, #400]	@ (800c388 <HAL_ADC_Init+0x2d4>)
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	2380      	movs	r3, #128	@ 0x80
 800c202:	055b      	lsls	r3, r3, #21
 800c204:	4013      	ands	r3, r2
 800c206:	d108      	bne.n	800c21a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	689a      	ldr	r2, [r3, #8]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2180      	movs	r1, #128	@ 0x80
 800c214:	0549      	lsls	r1, r1, #21
 800c216:	430a      	orrs	r2, r1
 800c218:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68da      	ldr	r2, [r3, #12]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	495b      	ldr	r1, [pc, #364]	@ (800c394 <HAL_ADC_Init+0x2e0>)
 800c226:	400a      	ands	r2, r1
 800c228:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68d9      	ldr	r1, [r3, #12]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d101      	bne.n	800c240 <HAL_ADC_Init+0x18c>
 800c23c:	2304      	movs	r3, #4
 800c23e:	e000      	b.n	800c242 <HAL_ADC_Init+0x18e>
 800c240:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c242:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2020      	movs	r0, #32
 800c248:	5c1b      	ldrb	r3, [r3, r0]
 800c24a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c24c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	202c      	movs	r0, #44	@ 0x2c
 800c252:	5c1b      	ldrb	r3, [r3, r0]
 800c254:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c256:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c25c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	699b      	ldr	r3, [r3, #24]
 800c262:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800c264:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	69db      	ldr	r3, [r3, #28]
 800c26a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c26c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	430a      	orrs	r2, r1
 800c274:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c27a:	23c2      	movs	r3, #194	@ 0xc2
 800c27c:	33ff      	adds	r3, #255	@ 0xff
 800c27e:	429a      	cmp	r2, r3
 800c280:	d00b      	beq.n	800c29a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68d9      	ldr	r1, [r3, #12]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c290:	431a      	orrs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	430a      	orrs	r2, r1
 800c298:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2221      	movs	r2, #33	@ 0x21
 800c29e:	5c9b      	ldrb	r3, [r3, r2]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d11a      	bne.n	800c2da <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2220      	movs	r2, #32
 800c2a8:	5c9b      	ldrb	r3, [r3, r2]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68da      	ldr	r2, [r3, #12]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2180      	movs	r1, #128	@ 0x80
 800c2ba:	0249      	lsls	r1, r1, #9
 800c2bc:	430a      	orrs	r2, r1
 800c2be:	60da      	str	r2, [r3, #12]
 800c2c0:	e00b      	b.n	800c2da <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	431a      	orrs	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d11f      	bne.n	800c322 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	691a      	ldr	r2, [r3, #16]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	492a      	ldr	r1, [pc, #168]	@ (800c398 <HAL_ADC_Init+0x2e4>)
 800c2ee:	400a      	ands	r2, r1
 800c2f0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6919      	ldr	r1, [r3, #16]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c300:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800c306:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	691a      	ldr	r2, [r3, #16]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2101      	movs	r1, #1
 800c31c:	430a      	orrs	r2, r1
 800c31e:	611a      	str	r2, [r3, #16]
 800c320:	e00e      	b.n	800c340 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2201      	movs	r2, #1
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d107      	bne.n	800c340 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	691a      	ldr	r2, [r3, #16]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2101      	movs	r1, #1
 800c33c:	438a      	bics	r2, r1
 800c33e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	695a      	ldr	r2, [r3, #20]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2107      	movs	r1, #7
 800c34c:	438a      	bics	r2, r1
 800c34e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6959      	ldr	r1, [r3, #20]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c36c:	2203      	movs	r2, #3
 800c36e:	4393      	bics	r3, r2
 800c370:	2201      	movs	r2, #1
 800c372:	431a      	orrs	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	0018      	movs	r0, r3
 800c37c:	46bd      	mov	sp, r7
 800c37e:	b002      	add	sp, #8
 800c380:	bd80      	pop	{r7, pc}
 800c382:	46c0      	nop			@ (mov r8, r8)
 800c384:	fffffefd 	.word	0xfffffefd
 800c388:	40012708 	.word	0x40012708
 800c38c:	ffc3ffff 	.word	0xffc3ffff
 800c390:	fdffffff 	.word	0xfdffffff
 800c394:	fffe0219 	.word	0xfffe0219
 800c398:	fffffc03 	.word	0xfffffc03

0800c39c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c3a4:	230f      	movs	r3, #15
 800c3a6:	18fb      	adds	r3, r7, r3
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	2204      	movs	r2, #4
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	d138      	bne.n	800c42a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2250      	movs	r2, #80	@ 0x50
 800c3bc:	5c9b      	ldrb	r3, [r3, r2]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d101      	bne.n	800c3c6 <HAL_ADC_Start+0x2a>
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	e038      	b.n	800c438 <HAL_ADC_Start+0x9c>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2250      	movs	r2, #80	@ 0x50
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d007      	beq.n	800c3e6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800c3d6:	230f      	movs	r3, #15
 800c3d8:	18fc      	adds	r4, r7, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	0018      	movs	r0, r3
 800c3de:	f000 f95f 	bl	800c6a0 <ADC_Enable>
 800c3e2:	0003      	movs	r3, r0
 800c3e4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c3e6:	230f      	movs	r3, #15
 800c3e8:	18fb      	adds	r3, r7, r3
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d120      	bne.n	800c432 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3f4:	4a12      	ldr	r2, [pc, #72]	@ (800c440 <HAL_ADC_Start+0xa4>)
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	2280      	movs	r2, #128	@ 0x80
 800c3fa:	0052      	lsls	r2, r2, #1
 800c3fc:	431a      	orrs	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2250      	movs	r2, #80	@ 0x50
 800c40c:	2100      	movs	r1, #0
 800c40e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	221c      	movs	r2, #28
 800c416:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689a      	ldr	r2, [r3, #8]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2104      	movs	r1, #4
 800c424:	430a      	orrs	r2, r1
 800c426:	609a      	str	r2, [r3, #8]
 800c428:	e003      	b.n	800c432 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c42a:	230f      	movs	r3, #15
 800c42c:	18fb      	adds	r3, r7, r3
 800c42e:	2202      	movs	r2, #2
 800c430:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800c432:	230f      	movs	r3, #15
 800c434:	18fb      	adds	r3, r7, r3
 800c436:	781b      	ldrb	r3, [r3, #0]
}
 800c438:	0018      	movs	r0, r3
 800c43a:	46bd      	mov	sp, r7
 800c43c:	b005      	add	sp, #20
 800c43e:	bd90      	pop	{r4, r7, pc}
 800c440:	fffff0fe 	.word	0xfffff0fe

0800c444 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800c452:	2300      	movs	r3, #0
 800c454:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	2b08      	cmp	r3, #8
 800c45c:	d102      	bne.n	800c464 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800c45e:	2308      	movs	r3, #8
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	e014      	b.n	800c48e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	2201      	movs	r2, #1
 800c46c:	4013      	ands	r3, r2
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d10b      	bne.n	800c48a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c476:	2220      	movs	r2, #32
 800c478:	431a      	orrs	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2250      	movs	r2, #80	@ 0x50
 800c482:	2100      	movs	r1, #0
 800c484:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	e072      	b.n	800c570 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800c48a:	230c      	movs	r3, #12
 800c48c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c48e:	f7ff fdc5 	bl	800c01c <HAL_GetTick>
 800c492:	0003      	movs	r3, r0
 800c494:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c496:	e01f      	b.n	800c4d8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	3301      	adds	r3, #1
 800c49c:	d01c      	beq.n	800c4d8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d007      	beq.n	800c4b4 <HAL_ADC_PollForConversion+0x70>
 800c4a4:	f7ff fdba 	bl	800c01c <HAL_GetTick>
 800c4a8:	0002      	movs	r2, r0
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d211      	bcs.n	800c4d8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	4013      	ands	r3, r2
 800c4be:	d10b      	bne.n	800c4d8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c4:	2204      	movs	r2, #4
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2250      	movs	r2, #80	@ 0x50
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e04b      	b.n	800c570 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	d0d9      	beq.n	800c498 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e8:	2280      	movs	r2, #128	@ 0x80
 800c4ea:	0092      	lsls	r2, r2, #2
 800c4ec:	431a      	orrs	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	23c0      	movs	r3, #192	@ 0xc0
 800c4fa:	011b      	lsls	r3, r3, #4
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	d12e      	bne.n	800c55e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2220      	movs	r2, #32
 800c504:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c506:	2b00      	cmp	r3, #0
 800c508:	d129      	bne.n	800c55e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2208      	movs	r2, #8
 800c512:	4013      	ands	r3, r2
 800c514:	2b08      	cmp	r3, #8
 800c516:	d122      	bne.n	800c55e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	2204      	movs	r2, #4
 800c520:	4013      	ands	r3, r2
 800c522:	d110      	bne.n	800c546 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	210c      	movs	r1, #12
 800c530:	438a      	bics	r2, r1
 800c532:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c538:	4a0f      	ldr	r2, [pc, #60]	@ (800c578 <HAL_ADC_PollForConversion+0x134>)
 800c53a:	4013      	ands	r3, r2
 800c53c:	2201      	movs	r2, #1
 800c53e:	431a      	orrs	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	655a      	str	r2, [r3, #84]	@ 0x54
 800c544:	e00b      	b.n	800c55e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c54a:	2220      	movs	r2, #32
 800c54c:	431a      	orrs	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c556:	2201      	movs	r2, #1
 800c558:	431a      	orrs	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d103      	bne.n	800c56e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	220c      	movs	r2, #12
 800c56c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	0018      	movs	r0, r3
 800c572:	46bd      	mov	sp, r7
 800c574:	b004      	add	sp, #16
 800c576:	bd80      	pop	{r7, pc}
 800c578:	fffffefe 	.word	0xfffffefe

0800c57c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c58a:	0018      	movs	r0, r3
 800c58c:	46bd      	mov	sp, r7
 800c58e:	b002      	add	sp, #8
 800c590:	bd80      	pop	{r7, pc}
	...

0800c594 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2250      	movs	r2, #80	@ 0x50
 800c5a2:	5c9b      	ldrb	r3, [r3, r2]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <HAL_ADC_ConfigChannel+0x18>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e06c      	b.n	800c686 <HAL_ADC_ConfigChannel+0xf2>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2250      	movs	r2, #80	@ 0x50
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2204      	movs	r2, #4
 800c5bc:	4013      	ands	r3, r2
 800c5be:	d00b      	beq.n	800c5d8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c4:	2220      	movs	r2, #32
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2250      	movs	r2, #80	@ 0x50
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e056      	b.n	800c686 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c690 <HAL_ADC_ConfigChannel+0xfc>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d028      	beq.n	800c634 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	035b      	lsls	r3, r3, #13
 800c5ee:	0b5a      	lsrs	r2, r3, #13
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	430a      	orrs	r2, r1
 800c5f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	2380      	movs	r3, #128	@ 0x80
 800c5fe:	02db      	lsls	r3, r3, #11
 800c600:	4013      	ands	r3, r2
 800c602:	d009      	beq.n	800c618 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800c604:	4b23      	ldr	r3, [pc, #140]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	4b22      	ldr	r3, [pc, #136]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c60a:	2180      	movs	r1, #128	@ 0x80
 800c60c:	0409      	lsls	r1, r1, #16
 800c60e:	430a      	orrs	r2, r1
 800c610:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800c612:	200a      	movs	r0, #10
 800c614:	f000 f8ac 	bl	800c770 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	2380      	movs	r3, #128	@ 0x80
 800c61e:	029b      	lsls	r3, r3, #10
 800c620:	4013      	ands	r3, r2
 800c622:	d02b      	beq.n	800c67c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800c624:	4b1b      	ldr	r3, [pc, #108]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	4b1a      	ldr	r3, [pc, #104]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c62a:	2180      	movs	r1, #128	@ 0x80
 800c62c:	03c9      	lsls	r1, r1, #15
 800c62e:	430a      	orrs	r2, r1
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	e023      	b.n	800c67c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	035b      	lsls	r3, r3, #13
 800c640:	0b5b      	lsrs	r3, r3, #13
 800c642:	43d9      	mvns	r1, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	400a      	ands	r2, r1
 800c64a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	2380      	movs	r3, #128	@ 0x80
 800c652:	02db      	lsls	r3, r3, #11
 800c654:	4013      	ands	r3, r2
 800c656:	d005      	beq.n	800c664 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800c658:	4b0e      	ldr	r3, [pc, #56]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	4b0d      	ldr	r3, [pc, #52]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c65e:	490e      	ldr	r1, [pc, #56]	@ (800c698 <HAL_ADC_ConfigChannel+0x104>)
 800c660:	400a      	ands	r2, r1
 800c662:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	2380      	movs	r3, #128	@ 0x80
 800c66a:	029b      	lsls	r3, r3, #10
 800c66c:	4013      	ands	r3, r2
 800c66e:	d005      	beq.n	800c67c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800c670:	4b08      	ldr	r3, [pc, #32]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	4b07      	ldr	r3, [pc, #28]	@ (800c694 <HAL_ADC_ConfigChannel+0x100>)
 800c676:	4909      	ldr	r1, [pc, #36]	@ (800c69c <HAL_ADC_ConfigChannel+0x108>)
 800c678:	400a      	ands	r2, r1
 800c67a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2250      	movs	r2, #80	@ 0x50
 800c680:	2100      	movs	r1, #0
 800c682:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	0018      	movs	r0, r3
 800c688:	46bd      	mov	sp, r7
 800c68a:	b002      	add	sp, #8
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	46c0      	nop			@ (mov r8, r8)
 800c690:	00001001 	.word	0x00001001
 800c694:	40012708 	.word	0x40012708
 800c698:	ff7fffff 	.word	0xff7fffff
 800c69c:	ffbfffff 	.word	0xffbfffff

0800c6a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	2203      	movs	r2, #3
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d108      	bne.n	800c6cc <ADC_Enable+0x2c>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d101      	bne.n	800c6cc <ADC_Enable+0x2c>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <ADC_Enable+0x2e>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d146      	bne.n	800c760 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	4a24      	ldr	r2, [pc, #144]	@ (800c76c <ADC_Enable+0xcc>)
 800c6da:	4013      	ands	r3, r2
 800c6dc:	d00d      	beq.n	800c6fa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6e2:	2210      	movs	r2, #16
 800c6e4:	431a      	orrs	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e033      	b.n	800c762 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2101      	movs	r1, #1
 800c706:	430a      	orrs	r2, r1
 800c708:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c70a:	2001      	movs	r0, #1
 800c70c:	f000 f830 	bl	800c770 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800c710:	f7ff fc84 	bl	800c01c <HAL_GetTick>
 800c714:	0003      	movs	r3, r0
 800c716:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c718:	e01b      	b.n	800c752 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c71a:	f7ff fc7f 	bl	800c01c <HAL_GetTick>
 800c71e:	0002      	movs	r2, r0
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	2b0a      	cmp	r3, #10
 800c726:	d914      	bls.n	800c752 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2201      	movs	r2, #1
 800c730:	4013      	ands	r3, r2
 800c732:	2b01      	cmp	r3, #1
 800c734:	d00d      	beq.n	800c752 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c73a:	2210      	movs	r2, #16
 800c73c:	431a      	orrs	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c746:	2201      	movs	r2, #1
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	e007      	b.n	800c762 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2201      	movs	r2, #1
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d1dc      	bne.n	800c71a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	0018      	movs	r0, r3
 800c764:	46bd      	mov	sp, r7
 800c766:	b004      	add	sp, #16
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	46c0      	nop			@ (mov r8, r8)
 800c76c:	80000017 	.word	0x80000017

0800c770 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c778:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a8 <ADC_DelayMicroSecond+0x38>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	490b      	ldr	r1, [pc, #44]	@ (800c7ac <ADC_DelayMicroSecond+0x3c>)
 800c77e:	0018      	movs	r0, r3
 800c780:	f7f3 fd10 	bl	80001a4 <__udivsi3>
 800c784:	0003      	movs	r3, r0
 800c786:	001a      	movs	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4353      	muls	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800c78e:	e002      	b.n	800c796 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3b01      	subs	r3, #1
 800c794:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1f9      	bne.n	800c790 <ADC_DelayMicroSecond+0x20>
  }
}
 800c79c:	46c0      	nop			@ (mov r8, r8)
 800c79e:	46c0      	nop			@ (mov r8, r8)
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	b004      	add	sp, #16
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	46c0      	nop			@ (mov r8, r8)
 800c7a8:	200000c4 	.word	0x200000c4
 800c7ac:	000f4240 	.word	0x000f4240

0800c7b0 <__NVIC_EnableIRQ>:
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	0002      	movs	r2, r0
 800c7b8:	1dfb      	adds	r3, r7, #7
 800c7ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c7bc:	1dfb      	adds	r3, r7, #7
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7c2:	d809      	bhi.n	800c7d8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c7c4:	1dfb      	adds	r3, r7, #7
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	001a      	movs	r2, r3
 800c7ca:	231f      	movs	r3, #31
 800c7cc:	401a      	ands	r2, r3
 800c7ce:	4b04      	ldr	r3, [pc, #16]	@ (800c7e0 <__NVIC_EnableIRQ+0x30>)
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	4091      	lsls	r1, r2
 800c7d4:	000a      	movs	r2, r1
 800c7d6:	601a      	str	r2, [r3, #0]
}
 800c7d8:	46c0      	nop			@ (mov r8, r8)
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	b002      	add	sp, #8
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	e000e100 	.word	0xe000e100

0800c7e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	0002      	movs	r2, r0
 800c7ec:	6039      	str	r1, [r7, #0]
 800c7ee:	1dfb      	adds	r3, r7, #7
 800c7f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c7f2:	1dfb      	adds	r3, r7, #7
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7f8:	d828      	bhi.n	800c84c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c7fa:	4a2f      	ldr	r2, [pc, #188]	@ (800c8b8 <__NVIC_SetPriority+0xd4>)
 800c7fc:	1dfb      	adds	r3, r7, #7
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	b25b      	sxtb	r3, r3
 800c802:	089b      	lsrs	r3, r3, #2
 800c804:	33c0      	adds	r3, #192	@ 0xc0
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	589b      	ldr	r3, [r3, r2]
 800c80a:	1dfa      	adds	r2, r7, #7
 800c80c:	7812      	ldrb	r2, [r2, #0]
 800c80e:	0011      	movs	r1, r2
 800c810:	2203      	movs	r2, #3
 800c812:	400a      	ands	r2, r1
 800c814:	00d2      	lsls	r2, r2, #3
 800c816:	21ff      	movs	r1, #255	@ 0xff
 800c818:	4091      	lsls	r1, r2
 800c81a:	000a      	movs	r2, r1
 800c81c:	43d2      	mvns	r2, r2
 800c81e:	401a      	ands	r2, r3
 800c820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	019b      	lsls	r3, r3, #6
 800c826:	22ff      	movs	r2, #255	@ 0xff
 800c828:	401a      	ands	r2, r3
 800c82a:	1dfb      	adds	r3, r7, #7
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	0018      	movs	r0, r3
 800c830:	2303      	movs	r3, #3
 800c832:	4003      	ands	r3, r0
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c838:	481f      	ldr	r0, [pc, #124]	@ (800c8b8 <__NVIC_SetPriority+0xd4>)
 800c83a:	1dfb      	adds	r3, r7, #7
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	b25b      	sxtb	r3, r3
 800c840:	089b      	lsrs	r3, r3, #2
 800c842:	430a      	orrs	r2, r1
 800c844:	33c0      	adds	r3, #192	@ 0xc0
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800c84a:	e031      	b.n	800c8b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c84c:	4a1b      	ldr	r2, [pc, #108]	@ (800c8bc <__NVIC_SetPriority+0xd8>)
 800c84e:	1dfb      	adds	r3, r7, #7
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	0019      	movs	r1, r3
 800c854:	230f      	movs	r3, #15
 800c856:	400b      	ands	r3, r1
 800c858:	3b08      	subs	r3, #8
 800c85a:	089b      	lsrs	r3, r3, #2
 800c85c:	3306      	adds	r3, #6
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	18d3      	adds	r3, r2, r3
 800c862:	3304      	adds	r3, #4
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	1dfa      	adds	r2, r7, #7
 800c868:	7812      	ldrb	r2, [r2, #0]
 800c86a:	0011      	movs	r1, r2
 800c86c:	2203      	movs	r2, #3
 800c86e:	400a      	ands	r2, r1
 800c870:	00d2      	lsls	r2, r2, #3
 800c872:	21ff      	movs	r1, #255	@ 0xff
 800c874:	4091      	lsls	r1, r2
 800c876:	000a      	movs	r2, r1
 800c878:	43d2      	mvns	r2, r2
 800c87a:	401a      	ands	r2, r3
 800c87c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	019b      	lsls	r3, r3, #6
 800c882:	22ff      	movs	r2, #255	@ 0xff
 800c884:	401a      	ands	r2, r3
 800c886:	1dfb      	adds	r3, r7, #7
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	0018      	movs	r0, r3
 800c88c:	2303      	movs	r3, #3
 800c88e:	4003      	ands	r3, r0
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c894:	4809      	ldr	r0, [pc, #36]	@ (800c8bc <__NVIC_SetPriority+0xd8>)
 800c896:	1dfb      	adds	r3, r7, #7
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	001c      	movs	r4, r3
 800c89c:	230f      	movs	r3, #15
 800c89e:	4023      	ands	r3, r4
 800c8a0:	3b08      	subs	r3, #8
 800c8a2:	089b      	lsrs	r3, r3, #2
 800c8a4:	430a      	orrs	r2, r1
 800c8a6:	3306      	adds	r3, #6
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	18c3      	adds	r3, r0, r3
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	601a      	str	r2, [r3, #0]
}
 800c8b0:	46c0      	nop			@ (mov r8, r8)
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	b003      	add	sp, #12
 800c8b6:	bd90      	pop	{r4, r7, pc}
 800c8b8:	e000e100 	.word	0xe000e100
 800c8bc:	e000ed00 	.word	0xe000ed00

0800c8c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	1e5a      	subs	r2, r3, #1
 800c8cc:	2380      	movs	r3, #128	@ 0x80
 800c8ce:	045b      	lsls	r3, r3, #17
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d301      	bcc.n	800c8d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e010      	b.n	800c8fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c904 <SysTick_Config+0x44>)
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	3a01      	subs	r2, #1
 800c8de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	425b      	negs	r3, r3
 800c8e4:	2103      	movs	r1, #3
 800c8e6:	0018      	movs	r0, r3
 800c8e8:	f7ff ff7c 	bl	800c7e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c8ec:	4b05      	ldr	r3, [pc, #20]	@ (800c904 <SysTick_Config+0x44>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c8f2:	4b04      	ldr	r3, [pc, #16]	@ (800c904 <SysTick_Config+0x44>)
 800c8f4:	2207      	movs	r2, #7
 800c8f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	b002      	add	sp, #8
 800c900:	bd80      	pop	{r7, pc}
 800c902:	46c0      	nop			@ (mov r8, r8)
 800c904:	e000e010 	.word	0xe000e010

0800c908 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	607a      	str	r2, [r7, #4]
 800c912:	210f      	movs	r1, #15
 800c914:	187b      	adds	r3, r7, r1
 800c916:	1c02      	adds	r2, r0, #0
 800c918:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	187b      	adds	r3, r7, r1
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	b25b      	sxtb	r3, r3
 800c922:	0011      	movs	r1, r2
 800c924:	0018      	movs	r0, r3
 800c926:	f7ff ff5d 	bl	800c7e4 <__NVIC_SetPriority>
}
 800c92a:	46c0      	nop			@ (mov r8, r8)
 800c92c:	46bd      	mov	sp, r7
 800c92e:	b004      	add	sp, #16
 800c930:	bd80      	pop	{r7, pc}

0800c932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	0002      	movs	r2, r0
 800c93a:	1dfb      	adds	r3, r7, #7
 800c93c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c93e:	1dfb      	adds	r3, r7, #7
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	b25b      	sxtb	r3, r3
 800c944:	0018      	movs	r0, r3
 800c946:	f7ff ff33 	bl	800c7b0 <__NVIC_EnableIRQ>
}
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	46bd      	mov	sp, r7
 800c94e:	b002      	add	sp, #8
 800c950:	bd80      	pop	{r7, pc}

0800c952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	0018      	movs	r0, r3
 800c95e:	f7ff ffaf 	bl	800c8c0 <SysTick_Config>
 800c962:	0003      	movs	r3, r0
}
 800c964:	0018      	movs	r0, r3
 800c966:	46bd      	mov	sp, r7
 800c968:	b002      	add	sp, #8
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e061      	b.n	800ca42 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a32      	ldr	r2, [pc, #200]	@ (800ca4c <HAL_DMA_Init+0xe0>)
 800c984:	4694      	mov	ip, r2
 800c986:	4463      	add	r3, ip
 800c988:	2114      	movs	r1, #20
 800c98a:	0018      	movs	r0, r3
 800c98c:	f7f3 fc0a 	bl	80001a4 <__udivsi3>
 800c990:	0003      	movs	r3, r0
 800c992:	009a      	lsls	r2, r3, #2
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a2d      	ldr	r2, [pc, #180]	@ (800ca50 <HAL_DMA_Init+0xe4>)
 800c99c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2225      	movs	r2, #37	@ 0x25
 800c9a2:	2102      	movs	r1, #2
 800c9a4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	4a28      	ldr	r2, [pc, #160]	@ (800ca54 <HAL_DMA_Init+0xe8>)
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c9be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c9ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c9d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	689a      	ldr	r2, [r3, #8]
 800c9f0:	2380      	movs	r3, #128	@ 0x80
 800c9f2:	01db      	lsls	r3, r3, #7
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d018      	beq.n	800ca2a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c9f8:	4b17      	ldr	r3, [pc, #92]	@ (800ca58 <HAL_DMA_Init+0xec>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca00:	211c      	movs	r1, #28
 800ca02:	400b      	ands	r3, r1
 800ca04:	210f      	movs	r1, #15
 800ca06:	4099      	lsls	r1, r3
 800ca08:	000b      	movs	r3, r1
 800ca0a:	43d9      	mvns	r1, r3
 800ca0c:	4b12      	ldr	r3, [pc, #72]	@ (800ca58 <HAL_DMA_Init+0xec>)
 800ca0e:	400a      	ands	r2, r1
 800ca10:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ca12:	4b11      	ldr	r3, [pc, #68]	@ (800ca58 <HAL_DMA_Init+0xec>)
 800ca14:	6819      	ldr	r1, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca1e:	201c      	movs	r0, #28
 800ca20:	4003      	ands	r3, r0
 800ca22:	409a      	lsls	r2, r3
 800ca24:	4b0c      	ldr	r3, [pc, #48]	@ (800ca58 <HAL_DMA_Init+0xec>)
 800ca26:	430a      	orrs	r2, r1
 800ca28:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2225      	movs	r2, #37	@ 0x25
 800ca34:	2101      	movs	r1, #1
 800ca36:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2224      	movs	r2, #36	@ 0x24
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	0018      	movs	r0, r3
 800ca44:	46bd      	mov	sp, r7
 800ca46:	b004      	add	sp, #16
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	46c0      	nop			@ (mov r8, r8)
 800ca4c:	bffdfff8 	.word	0xbffdfff8
 800ca50:	40020000 	.word	0x40020000
 800ca54:	ffff800f 	.word	0xffff800f
 800ca58:	400200a8 	.word	0x400200a8

0800ca5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca6a:	2317      	movs	r3, #23
 800ca6c:	18fb      	adds	r3, r7, r3
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2224      	movs	r2, #36	@ 0x24
 800ca76:	5c9b      	ldrb	r3, [r3, r2]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d101      	bne.n	800ca80 <HAL_DMA_Start_IT+0x24>
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e04f      	b.n	800cb20 <HAL_DMA_Start_IT+0xc4>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2224      	movs	r2, #36	@ 0x24
 800ca84:	2101      	movs	r1, #1
 800ca86:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2225      	movs	r2, #37	@ 0x25
 800ca8c:	5c9b      	ldrb	r3, [r3, r2]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d13a      	bne.n	800cb0a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2225      	movs	r2, #37	@ 0x25
 800ca98:	2102      	movs	r1, #2
 800ca9a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2101      	movs	r1, #1
 800caae:	438a      	bics	r2, r1
 800cab0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	68b9      	ldr	r1, [r7, #8]
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 f976 	bl	800cdaa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d008      	beq.n	800cad8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	210e      	movs	r1, #14
 800cad2:	430a      	orrs	r2, r1
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	e00f      	b.n	800caf8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2104      	movs	r1, #4
 800cae4:	438a      	bics	r2, r1
 800cae6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	210a      	movs	r1, #10
 800caf4:	430a      	orrs	r2, r1
 800caf6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2101      	movs	r1, #1
 800cb04:	430a      	orrs	r2, r1
 800cb06:	601a      	str	r2, [r3, #0]
 800cb08:	e007      	b.n	800cb1a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2224      	movs	r2, #36	@ 0x24
 800cb0e:	2100      	movs	r1, #0
 800cb10:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800cb12:	2317      	movs	r3, #23
 800cb14:	18fb      	adds	r3, r7, r3
 800cb16:	2202      	movs	r2, #2
 800cb18:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cb1a:	2317      	movs	r3, #23
 800cb1c:	18fb      	adds	r3, r7, r3
 800cb1e:	781b      	ldrb	r3, [r3, #0]
}
 800cb20:	0018      	movs	r0, r3
 800cb22:	46bd      	mov	sp, r7
 800cb24:	b006      	add	sp, #24
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb30:	230f      	movs	r3, #15
 800cb32:	18fb      	adds	r3, r7, r3
 800cb34:	2200      	movs	r2, #0
 800cb36:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2225      	movs	r2, #37	@ 0x25
 800cb3c:	5c9b      	ldrb	r3, [r3, r2]
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d008      	beq.n	800cb56 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2204      	movs	r2, #4
 800cb48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2224      	movs	r2, #36	@ 0x24
 800cb4e:	2100      	movs	r1, #0
 800cb50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e024      	b.n	800cba0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	210e      	movs	r1, #14
 800cb62:	438a      	bics	r2, r1
 800cb64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2101      	movs	r1, #1
 800cb72:	438a      	bics	r2, r1
 800cb74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb7a:	221c      	movs	r2, #28
 800cb7c:	401a      	ands	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb82:	2101      	movs	r1, #1
 800cb84:	4091      	lsls	r1, r2
 800cb86:	000a      	movs	r2, r1
 800cb88:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2225      	movs	r2, #37	@ 0x25
 800cb8e:	2101      	movs	r1, #1
 800cb90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2224      	movs	r2, #36	@ 0x24
 800cb96:	2100      	movs	r1, #0
 800cb98:	5499      	strb	r1, [r3, r2]

    return status;
 800cb9a:	230f      	movs	r3, #15
 800cb9c:	18fb      	adds	r3, r7, r3
 800cb9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cba0:	0018      	movs	r0, r3
 800cba2:	46bd      	mov	sp, r7
 800cba4:	b004      	add	sp, #16
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbb0:	210f      	movs	r1, #15
 800cbb2:	187b      	adds	r3, r7, r1
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2225      	movs	r2, #37	@ 0x25
 800cbbc:	5c9b      	ldrb	r3, [r3, r2]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	d006      	beq.n	800cbd2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2204      	movs	r2, #4
 800cbc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800cbca:	187b      	adds	r3, r7, r1
 800cbcc:	2201      	movs	r2, #1
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	e02a      	b.n	800cc28 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	210e      	movs	r1, #14
 800cbde:	438a      	bics	r2, r1
 800cbe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2101      	movs	r1, #1
 800cbee:	438a      	bics	r2, r1
 800cbf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbf6:	221c      	movs	r2, #28
 800cbf8:	401a      	ands	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbfe:	2101      	movs	r1, #1
 800cc00:	4091      	lsls	r1, r2
 800cc02:	000a      	movs	r2, r1
 800cc04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2225      	movs	r2, #37	@ 0x25
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2224      	movs	r2, #36	@ 0x24
 800cc12:	2100      	movs	r1, #0
 800cc14:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d004      	beq.n	800cc28 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	0010      	movs	r0, r2
 800cc26:	4798      	blx	r3
    }
  }
  return status;
 800cc28:	230f      	movs	r3, #15
 800cc2a:	18fb      	adds	r3, r7, r3
 800cc2c:	781b      	ldrb	r3, [r3, #0]
}
 800cc2e:	0018      	movs	r0, r3
 800cc30:	46bd      	mov	sp, r7
 800cc32:	b004      	add	sp, #16
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b084      	sub	sp, #16
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc52:	221c      	movs	r2, #28
 800cc54:	4013      	ands	r3, r2
 800cc56:	2204      	movs	r2, #4
 800cc58:	409a      	lsls	r2, r3
 800cc5a:	0013      	movs	r3, r2
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	4013      	ands	r3, r2
 800cc60:	d026      	beq.n	800ccb0 <HAL_DMA_IRQHandler+0x7a>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2204      	movs	r2, #4
 800cc66:	4013      	ands	r3, r2
 800cc68:	d022      	beq.n	800ccb0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2220      	movs	r2, #32
 800cc72:	4013      	ands	r3, r2
 800cc74:	d107      	bne.n	800cc86 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2104      	movs	r1, #4
 800cc82:	438a      	bics	r2, r1
 800cc84:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc8a:	221c      	movs	r2, #28
 800cc8c:	401a      	ands	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc92:	2104      	movs	r1, #4
 800cc94:	4091      	lsls	r1, r2
 800cc96:	000a      	movs	r2, r1
 800cc98:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d100      	bne.n	800cca4 <HAL_DMA_IRQHandler+0x6e>
 800cca2:	e071      	b.n	800cd88 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	0010      	movs	r0, r2
 800ccac:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800ccae:	e06b      	b.n	800cd88 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccb4:	221c      	movs	r2, #28
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	2202      	movs	r2, #2
 800ccba:	409a      	lsls	r2, r3
 800ccbc:	0013      	movs	r3, r2
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	d02d      	beq.n	800cd20 <HAL_DMA_IRQHandler+0xea>
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2202      	movs	r2, #2
 800ccc8:	4013      	ands	r3, r2
 800ccca:	d029      	beq.n	800cd20 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	d10b      	bne.n	800ccf0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	210a      	movs	r1, #10
 800cce4:	438a      	bics	r2, r1
 800cce6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2225      	movs	r2, #37	@ 0x25
 800ccec:	2101      	movs	r1, #1
 800ccee:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf4:	221c      	movs	r2, #28
 800ccf6:	401a      	ands	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccfc:	2102      	movs	r1, #2
 800ccfe:	4091      	lsls	r1, r2
 800cd00:	000a      	movs	r2, r1
 800cd02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2224      	movs	r2, #36	@ 0x24
 800cd08:	2100      	movs	r1, #0
 800cd0a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d039      	beq.n	800cd88 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	0010      	movs	r0, r2
 800cd1c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cd1e:	e033      	b.n	800cd88 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd24:	221c      	movs	r2, #28
 800cd26:	4013      	ands	r3, r2
 800cd28:	2208      	movs	r2, #8
 800cd2a:	409a      	lsls	r2, r3
 800cd2c:	0013      	movs	r3, r2
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	4013      	ands	r3, r2
 800cd32:	d02a      	beq.n	800cd8a <HAL_DMA_IRQHandler+0x154>
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2208      	movs	r2, #8
 800cd38:	4013      	ands	r3, r2
 800cd3a:	d026      	beq.n	800cd8a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	210e      	movs	r1, #14
 800cd48:	438a      	bics	r2, r1
 800cd4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd50:	221c      	movs	r2, #28
 800cd52:	401a      	ands	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd58:	2101      	movs	r1, #1
 800cd5a:	4091      	lsls	r1, r2
 800cd5c:	000a      	movs	r2, r1
 800cd5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2225      	movs	r2, #37	@ 0x25
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2224      	movs	r2, #36	@ 0x24
 800cd72:	2100      	movs	r1, #0
 800cd74:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d005      	beq.n	800cd8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	0010      	movs	r0, r2
 800cd86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cd88:	46c0      	nop			@ (mov r8, r8)
 800cd8a:	46c0      	nop			@ (mov r8, r8)
}
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	b004      	add	sp, #16
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b082      	sub	sp, #8
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2225      	movs	r2, #37	@ 0x25
 800cd9e:	5c9b      	ldrb	r3, [r3, r2]
 800cda0:	b2db      	uxtb	r3, r3
}
 800cda2:	0018      	movs	r0, r3
 800cda4:	46bd      	mov	sp, r7
 800cda6:	b002      	add	sp, #8
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	60f8      	str	r0, [r7, #12]
 800cdb2:	60b9      	str	r1, [r7, #8]
 800cdb4:	607a      	str	r2, [r7, #4]
 800cdb6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdbc:	221c      	movs	r2, #28
 800cdbe:	401a      	ands	r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc4:	2101      	movs	r1, #1
 800cdc6:	4091      	lsls	r1, r2
 800cdc8:	000a      	movs	r2, r1
 800cdca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	2b10      	cmp	r3, #16
 800cdda:	d108      	bne.n	800cdee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cdec:	e007      	b.n	800cdfe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	60da      	str	r2, [r3, #12]
}
 800cdfe:	46c0      	nop			@ (mov r8, r8)
 800ce00:	46bd      	mov	sp, r7
 800ce02:	b004      	add	sp, #16
 800ce04:	bd80      	pop	{r7, pc}
	...

0800ce08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ce10:	f7ff f904 	bl	800c01c <HAL_GetTick>
 800ce14:	0003      	movs	r3, r0
 800ce16:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ce18:	e00f      	b.n	800ce3a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	d00c      	beq.n	800ce3a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d007      	beq.n	800ce36 <FLASH_WaitForLastOperation+0x2e>
 800ce26:	f7ff f8f9 	bl	800c01c <HAL_GetTick>
 800ce2a:	0002      	movs	r2, r0
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d201      	bcs.n	800ce3a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e052      	b.n	800cee0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ce3a:	4b2b      	ldr	r3, [pc, #172]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	4013      	ands	r3, r2
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d0e9      	beq.n	800ce1a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ce46:	4b28      	ldr	r3, [pc, #160]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ce48:	699b      	ldr	r3, [r3, #24]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d102      	bne.n	800ce58 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ce52:	4b25      	ldr	r3, [pc, #148]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ce54:	2202      	movs	r2, #2
 800ce56:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ce58:	4b23      	ldr	r3, [pc, #140]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ce5a:	699a      	ldr	r2, [r3, #24]
 800ce5c:	2380      	movs	r3, #128	@ 0x80
 800ce5e:	005b      	lsls	r3, r3, #1
 800ce60:	401a      	ands	r2, r3
 800ce62:	2380      	movs	r3, #128	@ 0x80
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d035      	beq.n	800ced6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ce6a:	4b1f      	ldr	r3, [pc, #124]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ce6c:	699a      	ldr	r2, [r3, #24]
 800ce6e:	2380      	movs	r3, #128	@ 0x80
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ce74:	2380      	movs	r3, #128	@ 0x80
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d02c      	beq.n	800ced6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ce7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ce7e:	699a      	ldr	r2, [r3, #24]
 800ce80:	2380      	movs	r3, #128	@ 0x80
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ce86:	2380      	movs	r3, #128	@ 0x80
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d023      	beq.n	800ced6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ce8e:	4b16      	ldr	r3, [pc, #88]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	2380      	movs	r3, #128	@ 0x80
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ce98:	2380      	movs	r3, #128	@ 0x80
 800ce9a:	011b      	lsls	r3, r3, #4
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d01a      	beq.n	800ced6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800cea0:	4b11      	ldr	r3, [pc, #68]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800cea2:	699a      	ldr	r2, [r3, #24]
 800cea4:	2380      	movs	r3, #128	@ 0x80
 800cea6:	019b      	lsls	r3, r3, #6
 800cea8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ceaa:	2380      	movs	r3, #128	@ 0x80
 800ceac:	019b      	lsls	r3, r3, #6
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d011      	beq.n	800ced6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800ceb4:	699a      	ldr	r2, [r3, #24]
 800ceb6:	2380      	movs	r3, #128	@ 0x80
 800ceb8:	029b      	lsls	r3, r3, #10
 800ceba:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800cebc:	2380      	movs	r3, #128	@ 0x80
 800cebe:	029b      	lsls	r3, r3, #10
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d008      	beq.n	800ced6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800cec4:	4b08      	ldr	r3, [pc, #32]	@ (800cee8 <FLASH_WaitForLastOperation+0xe0>)
 800cec6:	699a      	ldr	r2, [r3, #24]
 800cec8:	2380      	movs	r3, #128	@ 0x80
 800ceca:	025b      	lsls	r3, r3, #9
 800cecc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800cece:	2380      	movs	r3, #128	@ 0x80
 800ced0:	025b      	lsls	r3, r3, #9
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d103      	bne.n	800cede <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ced6:	f000 f809 	bl	800ceec <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e000      	b.n	800cee0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	0018      	movs	r0, r3
 800cee2:	46bd      	mov	sp, r7
 800cee4:	b004      	add	sp, #16
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	40022000 	.word	0x40022000

0800ceec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cef6:	4b49      	ldr	r3, [pc, #292]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800cef8:	699a      	ldr	r2, [r3, #24]
 800cefa:	2380      	movs	r3, #128	@ 0x80
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	401a      	ands	r2, r3
 800cf00:	2380      	movs	r3, #128	@ 0x80
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d10a      	bne.n	800cf1e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cf08:	4b45      	ldr	r3, [pc, #276]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	2202      	movs	r2, #2
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	4b43      	ldr	r3, [pc, #268]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf12:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2280      	movs	r2, #128	@ 0x80
 800cf18:	0052      	lsls	r2, r2, #1
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800cf1e:	4b3f      	ldr	r3, [pc, #252]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800cf20:	699a      	ldr	r2, [r3, #24]
 800cf22:	2380      	movs	r3, #128	@ 0x80
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	401a      	ands	r2, r3
 800cf28:	2380      	movs	r3, #128	@ 0x80
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d10a      	bne.n	800cf46 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cf30:	4b3b      	ldr	r3, [pc, #236]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	2201      	movs	r2, #1
 800cf36:	431a      	orrs	r2, r3
 800cf38:	4b39      	ldr	r3, [pc, #228]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf3a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2280      	movs	r2, #128	@ 0x80
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	4313      	orrs	r3, r2
 800cf44:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800cf46:	4b35      	ldr	r3, [pc, #212]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800cf48:	699a      	ldr	r2, [r3, #24]
 800cf4a:	2380      	movs	r3, #128	@ 0x80
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	401a      	ands	r2, r3
 800cf50:	2380      	movs	r3, #128	@ 0x80
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d10a      	bne.n	800cf6e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800cf58:	4b31      	ldr	r3, [pc, #196]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf5a:	695b      	ldr	r3, [r3, #20]
 800cf5c:	2208      	movs	r2, #8
 800cf5e:	431a      	orrs	r2, r3
 800cf60:	4b2f      	ldr	r3, [pc, #188]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf62:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2280      	movs	r2, #128	@ 0x80
 800cf68:	00d2      	lsls	r2, r2, #3
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cf6e:	4b2b      	ldr	r3, [pc, #172]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800cf70:	699a      	ldr	r2, [r3, #24]
 800cf72:	2380      	movs	r3, #128	@ 0x80
 800cf74:	011b      	lsls	r3, r3, #4
 800cf76:	401a      	ands	r2, r3
 800cf78:	2380      	movs	r3, #128	@ 0x80
 800cf7a:	011b      	lsls	r3, r3, #4
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d10a      	bne.n	800cf96 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cf80:	4b27      	ldr	r3, [pc, #156]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	2204      	movs	r2, #4
 800cf86:	431a      	orrs	r2, r3
 800cf88:	4b25      	ldr	r3, [pc, #148]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cf8a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2280      	movs	r2, #128	@ 0x80
 800cf90:	0112      	lsls	r2, r2, #4
 800cf92:	4313      	orrs	r3, r2
 800cf94:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800cf96:	4b21      	ldr	r3, [pc, #132]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800cf98:	699a      	ldr	r2, [r3, #24]
 800cf9a:	2380      	movs	r3, #128	@ 0x80
 800cf9c:	019b      	lsls	r3, r3, #6
 800cf9e:	401a      	ands	r2, r3
 800cfa0:	2380      	movs	r3, #128	@ 0x80
 800cfa2:	019b      	lsls	r3, r3, #6
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d10a      	bne.n	800cfbe <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800cfa8:	4b1d      	ldr	r3, [pc, #116]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cfaa:	695b      	ldr	r3, [r3, #20]
 800cfac:	2210      	movs	r2, #16
 800cfae:	431a      	orrs	r2, r3
 800cfb0:	4b1b      	ldr	r3, [pc, #108]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cfb2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2280      	movs	r2, #128	@ 0x80
 800cfb8:	0192      	lsls	r2, r2, #6
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800cfbe:	4b17      	ldr	r3, [pc, #92]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800cfc0:	699a      	ldr	r2, [r3, #24]
 800cfc2:	2380      	movs	r3, #128	@ 0x80
 800cfc4:	029b      	lsls	r3, r3, #10
 800cfc6:	401a      	ands	r2, r3
 800cfc8:	2380      	movs	r3, #128	@ 0x80
 800cfca:	029b      	lsls	r3, r3, #10
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d109      	bne.n	800cfe4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800cfd0:	4b13      	ldr	r3, [pc, #76]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	2220      	movs	r2, #32
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	4b11      	ldr	r3, [pc, #68]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cfda:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2220      	movs	r2, #32
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800cfe4:	4b0d      	ldr	r3, [pc, #52]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800cfe6:	699a      	ldr	r2, [r3, #24]
 800cfe8:	2380      	movs	r3, #128	@ 0x80
 800cfea:	025b      	lsls	r3, r3, #9
 800cfec:	401a      	ands	r2, r3
 800cfee:	2380      	movs	r3, #128	@ 0x80
 800cff0:	025b      	lsls	r3, r3, #9
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d10a      	bne.n	800d00c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800cff6:	4b0a      	ldr	r3, [pc, #40]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800cff8:	695b      	ldr	r3, [r3, #20]
 800cffa:	2240      	movs	r2, #64	@ 0x40
 800cffc:	431a      	orrs	r2, r3
 800cffe:	4b08      	ldr	r3, [pc, #32]	@ (800d020 <FLASH_SetErrorCode+0x134>)
 800d000:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2280      	movs	r2, #128	@ 0x80
 800d006:	0252      	lsls	r2, r2, #9
 800d008:	4313      	orrs	r3, r2
 800d00a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d00c:	4b03      	ldr	r3, [pc, #12]	@ (800d01c <FLASH_SetErrorCode+0x130>)
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	619a      	str	r2, [r3, #24]
}  
 800d012:	46c0      	nop			@ (mov r8, r8)
 800d014:	46bd      	mov	sp, r7
 800d016:	b002      	add	sp, #8
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	46c0      	nop			@ (mov r8, r8)
 800d01c:	40022000 	.word	0x40022000
 800d020:	200024c0 	.word	0x200024c0

0800d024 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d02a:	4b12      	ldr	r3, [pc, #72]	@ (800d074 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	4013      	ands	r3, r2
 800d032:	d019      	beq.n	800d068 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d034:	f3ef 8310 	mrs	r3, PRIMASK
 800d038:	607b      	str	r3, [r7, #4]
  return(result);
 800d03a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800d03c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d03e:	b672      	cpsid	i
}
 800d040:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800d042:	4b0c      	ldr	r3, [pc, #48]	@ (800d074 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800d044:	4a0c      	ldr	r2, [pc, #48]	@ (800d078 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800d046:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800d048:	4b0a      	ldr	r3, [pc, #40]	@ (800d074 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800d04a:	4a0c      	ldr	r2, [pc, #48]	@ (800d07c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800d04c:	60da      	str	r2, [r3, #12]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	f383 8810 	msr	PRIMASK, r3
}
 800d058:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800d05a:	4b06      	ldr	r3, [pc, #24]	@ (800d074 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	4013      	ands	r3, r2
 800d062:	d001      	beq.n	800d068 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e000      	b.n	800d06a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800d068:	2300      	movs	r3, #0
}
 800d06a:	0018      	movs	r0, r3
 800d06c:	46bd      	mov	sp, r7
 800d06e:	b004      	add	sp, #16
 800d070:	bd80      	pop	{r7, pc}
 800d072:	46c0      	nop			@ (mov r8, r8)
 800d074:	40022000 	.word	0x40022000
 800d078:	89abcdef 	.word	0x89abcdef
 800d07c:	02030405 	.word	0x02030405

0800d080 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800d084:	4b04      	ldr	r3, [pc, #16]	@ (800d098 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	4b03      	ldr	r3, [pc, #12]	@ (800d098 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800d08a:	2101      	movs	r1, #1
 800d08c:	430a      	orrs	r2, r1
 800d08e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	0018      	movs	r0, r3
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	40022000 	.word	0x40022000

0800d09c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800d09c:	b5b0      	push	{r4, r5, r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0a4:	250f      	movs	r5, #15
 800d0a6:	197b      	adds	r3, r7, r5
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0ac:	197c      	adds	r4, r7, r5
 800d0ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d0ec <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	f7ff fea9 	bl	800ce08 <FLASH_WaitForLastOperation>
 800d0b6:	0003      	movs	r3, r0
 800d0b8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800d0ba:	0029      	movs	r1, r5
 800d0bc:	187b      	adds	r3, r7, r1
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10c      	bne.n	800d0de <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d0d0:	187c      	adds	r4, r7, r1
 800d0d2:	4b06      	ldr	r3, [pc, #24]	@ (800d0ec <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	f7ff fe97 	bl	800ce08 <FLASH_WaitForLastOperation>
 800d0da:	0003      	movs	r3, r0
 800d0dc:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800d0de:	230f      	movs	r3, #15
 800d0e0:	18fb      	adds	r3, r7, r3
 800d0e2:	781b      	ldrb	r3, [r3, #0]
}  
 800d0e4:	0018      	movs	r0, r3
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	b004      	add	sp, #16
 800d0ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d0ec:	0000c350 	.word	0x0000c350
 800d0f0:	200024c0 	.word	0x200024c0

0800d0f4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800d0f4:	b5b0      	push	{r4, r5, r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d100:	2317      	movs	r3, #23
 800d102:	18fb      	adds	r3, r7, r3
 800d104:	2201      	movs	r2, #1
 800d106:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d108:	4b24      	ldr	r3, [pc, #144]	@ (800d19c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800d10a:	7c1b      	ldrb	r3, [r3, #16]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d101      	bne.n	800d114 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800d110:	2302      	movs	r3, #2
 800d112:	e03e      	b.n	800d192 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800d114:	4b21      	ldr	r3, [pc, #132]	@ (800d19c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800d116:	2201      	movs	r2, #1
 800d118:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d11a:	2517      	movs	r5, #23
 800d11c:	197c      	adds	r4, r7, r5
 800d11e:	4b20      	ldr	r3, [pc, #128]	@ (800d1a0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800d120:	0018      	movs	r0, r3
 800d122:	f7ff fe71 	bl	800ce08 <FLASH_WaitForLastOperation>
 800d126:	0003      	movs	r3, r0
 800d128:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800d12a:	197b      	adds	r3, r7, r5
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d129      	bne.n	800d186 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d132:	4b1a      	ldr	r3, [pc, #104]	@ (800d19c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800d134:	2200      	movs	r2, #0
 800d136:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d103      	bne.n	800d146 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	e013      	b.n	800d16e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d104      	bne.n	800d156 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	b292      	uxth	r2, r2
 800d152:	801a      	strh	r2, [r3, #0]
 800d154:	e00b      	b.n	800d16e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d104      	bne.n	800d166 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	e003      	b.n	800d16e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800d166:	2317      	movs	r3, #23
 800d168:	18fb      	adds	r3, r7, r3
 800d16a:	2201      	movs	r2, #1
 800d16c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800d16e:	2217      	movs	r2, #23
 800d170:	18bb      	adds	r3, r7, r2
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d106      	bne.n	800d186 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d178:	18bc      	adds	r4, r7, r2
 800d17a:	4b09      	ldr	r3, [pc, #36]	@ (800d1a0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800d17c:	0018      	movs	r0, r3
 800d17e:	f7ff fe43 	bl	800ce08 <FLASH_WaitForLastOperation>
 800d182:	0003      	movs	r3, r0
 800d184:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d186:	4b05      	ldr	r3, [pc, #20]	@ (800d19c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800d188:	2200      	movs	r2, #0
 800d18a:	741a      	strb	r2, [r3, #16]

  return status;
 800d18c:	2317      	movs	r3, #23
 800d18e:	18fb      	adds	r3, r7, r3
 800d190:	781b      	ldrb	r3, [r3, #0]
}
 800d192:	0018      	movs	r0, r3
 800d194:	46bd      	mov	sp, r7
 800d196:	b006      	add	sp, #24
 800d198:	bdb0      	pop	{r4, r5, r7, pc}
 800d19a:	46c0      	nop			@ (mov r8, r8)
 800d19c:	200024c0 	.word	0x200024c0
 800d1a0:	0000c350 	.word	0x0000c350

0800d1a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800d1ba:	e155      	b.n	800d468 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	4091      	lsls	r1, r2
 800d1c6:	000a      	movs	r2, r1
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d100      	bne.n	800d1d4 <HAL_GPIO_Init+0x30>
 800d1d2:	e146      	b.n	800d462 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	2203      	movs	r2, #3
 800d1da:	4013      	ands	r3, r2
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d005      	beq.n	800d1ec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	2203      	movs	r2, #3
 800d1e6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d130      	bne.n	800d24e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	005b      	lsls	r3, r3, #1
 800d1f6:	2203      	movs	r2, #3
 800d1f8:	409a      	lsls	r2, r3
 800d1fa:	0013      	movs	r3, r2
 800d1fc:	43da      	mvns	r2, r3
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	4013      	ands	r3, r2
 800d202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	68da      	ldr	r2, [r3, #12]
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	409a      	lsls	r2, r3
 800d20e:	0013      	movs	r3, r2
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	4313      	orrs	r3, r2
 800d214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d222:	2201      	movs	r2, #1
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	409a      	lsls	r2, r3
 800d228:	0013      	movs	r3, r2
 800d22a:	43da      	mvns	r2, r3
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	4013      	ands	r3, r2
 800d230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	091b      	lsrs	r3, r3, #4
 800d238:	2201      	movs	r2, #1
 800d23a:	401a      	ands	r2, r3
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	409a      	lsls	r2, r3
 800d240:	0013      	movs	r3, r2
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	4313      	orrs	r3, r2
 800d246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	2203      	movs	r2, #3
 800d254:	4013      	ands	r3, r2
 800d256:	2b03      	cmp	r3, #3
 800d258:	d017      	beq.n	800d28a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	2203      	movs	r2, #3
 800d266:	409a      	lsls	r2, r3
 800d268:	0013      	movs	r3, r2
 800d26a:	43da      	mvns	r2, r3
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	4013      	ands	r3, r2
 800d270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	689a      	ldr	r2, [r3, #8]
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	409a      	lsls	r2, r3
 800d27c:	0013      	movs	r3, r2
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	4313      	orrs	r3, r2
 800d282:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	2203      	movs	r2, #3
 800d290:	4013      	ands	r3, r2
 800d292:	2b02      	cmp	r3, #2
 800d294:	d123      	bne.n	800d2de <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	08da      	lsrs	r2, r3, #3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	3208      	adds	r2, #8
 800d29e:	0092      	lsls	r2, r2, #2
 800d2a0:	58d3      	ldr	r3, [r2, r3]
 800d2a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2207      	movs	r2, #7
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	220f      	movs	r2, #15
 800d2ae:	409a      	lsls	r2, r3
 800d2b0:	0013      	movs	r3, r2
 800d2b2:	43da      	mvns	r2, r3
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	691a      	ldr	r2, [r3, #16]
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2107      	movs	r1, #7
 800d2c2:	400b      	ands	r3, r1
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	409a      	lsls	r2, r3
 800d2c8:	0013      	movs	r3, r2
 800d2ca:	693a      	ldr	r2, [r7, #16]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	08da      	lsrs	r2, r3, #3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	3208      	adds	r2, #8
 800d2d8:	0092      	lsls	r2, r2, #2
 800d2da:	6939      	ldr	r1, [r7, #16]
 800d2dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	005b      	lsls	r3, r3, #1
 800d2e8:	2203      	movs	r2, #3
 800d2ea:	409a      	lsls	r2, r3
 800d2ec:	0013      	movs	r3, r2
 800d2ee:	43da      	mvns	r2, r3
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	2203      	movs	r2, #3
 800d2fc:	401a      	ands	r2, r3
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	409a      	lsls	r2, r3
 800d304:	0013      	movs	r3, r2
 800d306:	693a      	ldr	r2, [r7, #16]
 800d308:	4313      	orrs	r3, r2
 800d30a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	693a      	ldr	r2, [r7, #16]
 800d310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	685a      	ldr	r2, [r3, #4]
 800d316:	23c0      	movs	r3, #192	@ 0xc0
 800d318:	029b      	lsls	r3, r3, #10
 800d31a:	4013      	ands	r3, r2
 800d31c:	d100      	bne.n	800d320 <HAL_GPIO_Init+0x17c>
 800d31e:	e0a0      	b.n	800d462 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d320:	4b57      	ldr	r3, [pc, #348]	@ (800d480 <HAL_GPIO_Init+0x2dc>)
 800d322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d324:	4b56      	ldr	r3, [pc, #344]	@ (800d480 <HAL_GPIO_Init+0x2dc>)
 800d326:	2101      	movs	r1, #1
 800d328:	430a      	orrs	r2, r1
 800d32a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800d32c:	4a55      	ldr	r2, [pc, #340]	@ (800d484 <HAL_GPIO_Init+0x2e0>)
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	089b      	lsrs	r3, r3, #2
 800d332:	3302      	adds	r3, #2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	589b      	ldr	r3, [r3, r2]
 800d338:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2203      	movs	r2, #3
 800d33e:	4013      	ands	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	220f      	movs	r2, #15
 800d344:	409a      	lsls	r2, r3
 800d346:	0013      	movs	r3, r2
 800d348:	43da      	mvns	r2, r3
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	4013      	ands	r3, r2
 800d34e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	23a0      	movs	r3, #160	@ 0xa0
 800d354:	05db      	lsls	r3, r3, #23
 800d356:	429a      	cmp	r2, r3
 800d358:	d01f      	beq.n	800d39a <HAL_GPIO_Init+0x1f6>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a4a      	ldr	r2, [pc, #296]	@ (800d488 <HAL_GPIO_Init+0x2e4>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d019      	beq.n	800d396 <HAL_GPIO_Init+0x1f2>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a49      	ldr	r2, [pc, #292]	@ (800d48c <HAL_GPIO_Init+0x2e8>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d013      	beq.n	800d392 <HAL_GPIO_Init+0x1ee>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a48      	ldr	r2, [pc, #288]	@ (800d490 <HAL_GPIO_Init+0x2ec>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d00d      	beq.n	800d38e <HAL_GPIO_Init+0x1ea>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a47      	ldr	r2, [pc, #284]	@ (800d494 <HAL_GPIO_Init+0x2f0>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d007      	beq.n	800d38a <HAL_GPIO_Init+0x1e6>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a46      	ldr	r2, [pc, #280]	@ (800d498 <HAL_GPIO_Init+0x2f4>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d101      	bne.n	800d386 <HAL_GPIO_Init+0x1e2>
 800d382:	2305      	movs	r3, #5
 800d384:	e00a      	b.n	800d39c <HAL_GPIO_Init+0x1f8>
 800d386:	2306      	movs	r3, #6
 800d388:	e008      	b.n	800d39c <HAL_GPIO_Init+0x1f8>
 800d38a:	2304      	movs	r3, #4
 800d38c:	e006      	b.n	800d39c <HAL_GPIO_Init+0x1f8>
 800d38e:	2303      	movs	r3, #3
 800d390:	e004      	b.n	800d39c <HAL_GPIO_Init+0x1f8>
 800d392:	2302      	movs	r3, #2
 800d394:	e002      	b.n	800d39c <HAL_GPIO_Init+0x1f8>
 800d396:	2301      	movs	r3, #1
 800d398:	e000      	b.n	800d39c <HAL_GPIO_Init+0x1f8>
 800d39a:	2300      	movs	r3, #0
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	2103      	movs	r1, #3
 800d3a0:	400a      	ands	r2, r1
 800d3a2:	0092      	lsls	r2, r2, #2
 800d3a4:	4093      	lsls	r3, r2
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d3ac:	4935      	ldr	r1, [pc, #212]	@ (800d484 <HAL_GPIO_Init+0x2e0>)
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	089b      	lsrs	r3, r3, #2
 800d3b2:	3302      	adds	r3, #2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d3ba:	4b38      	ldr	r3, [pc, #224]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	43da      	mvns	r2, r3
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	2380      	movs	r3, #128	@ 0x80
 800d3d0:	035b      	lsls	r3, r3, #13
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	d003      	beq.n	800d3de <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800d3d6:	693a      	ldr	r2, [r7, #16]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800d3de:	4b2f      	ldr	r3, [pc, #188]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800d3e4:	4b2d      	ldr	r3, [pc, #180]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	43da      	mvns	r2, r3
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	4013      	ands	r3, r2
 800d3f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	2380      	movs	r3, #128	@ 0x80
 800d3fa:	039b      	lsls	r3, r3, #14
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	d003      	beq.n	800d408 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	4313      	orrs	r3, r2
 800d406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800d408:	4b24      	ldr	r3, [pc, #144]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d40a:	693a      	ldr	r2, [r7, #16]
 800d40c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800d40e:	4b23      	ldr	r3, [pc, #140]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	43da      	mvns	r2, r3
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	4013      	ands	r3, r2
 800d41c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	685a      	ldr	r2, [r3, #4]
 800d422:	2380      	movs	r3, #128	@ 0x80
 800d424:	029b      	lsls	r3, r3, #10
 800d426:	4013      	ands	r3, r2
 800d428:	d003      	beq.n	800d432 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4313      	orrs	r3, r2
 800d430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800d432:	4b1a      	ldr	r3, [pc, #104]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d438:	4b18      	ldr	r3, [pc, #96]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	43da      	mvns	r2, r3
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	4013      	ands	r3, r2
 800d446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	2380      	movs	r3, #128	@ 0x80
 800d44e:	025b      	lsls	r3, r3, #9
 800d450:	4013      	ands	r3, r2
 800d452:	d003      	beq.n	800d45c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	4313      	orrs	r3, r2
 800d45a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d45c:	4b0f      	ldr	r3, [pc, #60]	@ (800d49c <HAL_GPIO_Init+0x2f8>)
 800d45e:	693a      	ldr	r2, [r7, #16]
 800d460:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	3301      	adds	r3, #1
 800d466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	40da      	lsrs	r2, r3
 800d470:	1e13      	subs	r3, r2, #0
 800d472:	d000      	beq.n	800d476 <HAL_GPIO_Init+0x2d2>
 800d474:	e6a2      	b.n	800d1bc <HAL_GPIO_Init+0x18>
  }
}
 800d476:	46c0      	nop			@ (mov r8, r8)
 800d478:	46c0      	nop			@ (mov r8, r8)
 800d47a:	46bd      	mov	sp, r7
 800d47c:	b006      	add	sp, #24
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	40021000 	.word	0x40021000
 800d484:	40010000 	.word	0x40010000
 800d488:	50000400 	.word	0x50000400
 800d48c:	50000800 	.word	0x50000800
 800d490:	50000c00 	.word	0x50000c00
 800d494:	50001000 	.word	0x50001000
 800d498:	50001c00 	.word	0x50001c00
 800d49c:	40010400 	.word	0x40010400

0800d4a0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	000a      	movs	r2, r1
 800d4aa:	1cbb      	adds	r3, r7, #2
 800d4ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	1cba      	adds	r2, r7, #2
 800d4b4:	8812      	ldrh	r2, [r2, #0]
 800d4b6:	4013      	ands	r3, r2
 800d4b8:	d004      	beq.n	800d4c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800d4ba:	230f      	movs	r3, #15
 800d4bc:	18fb      	adds	r3, r7, r3
 800d4be:	2201      	movs	r2, #1
 800d4c0:	701a      	strb	r2, [r3, #0]
 800d4c2:	e003      	b.n	800d4cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d4c4:	230f      	movs	r3, #15
 800d4c6:	18fb      	adds	r3, r7, r3
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800d4cc:	230f      	movs	r3, #15
 800d4ce:	18fb      	adds	r3, r7, r3
 800d4d0:	781b      	ldrb	r3, [r3, #0]
}
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	b004      	add	sp, #16
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b082      	sub	sp, #8
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	0008      	movs	r0, r1
 800d4e4:	0011      	movs	r1, r2
 800d4e6:	1cbb      	adds	r3, r7, #2
 800d4e8:	1c02      	adds	r2, r0, #0
 800d4ea:	801a      	strh	r2, [r3, #0]
 800d4ec:	1c7b      	adds	r3, r7, #1
 800d4ee:	1c0a      	adds	r2, r1, #0
 800d4f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d4f2:	1c7b      	adds	r3, r7, #1
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d004      	beq.n	800d504 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d4fa:	1cbb      	adds	r3, r7, #2
 800d4fc:	881a      	ldrh	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800d502:	e003      	b.n	800d50c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800d504:	1cbb      	adds	r3, r7, #2
 800d506:	881a      	ldrh	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d50c:	46c0      	nop			@ (mov r8, r8)
 800d50e:	46bd      	mov	sp, r7
 800d510:	b002      	add	sp, #8
 800d512:	bd80      	pop	{r7, pc}

0800d514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e082      	b.n	800d62c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2241      	movs	r2, #65	@ 0x41
 800d52a:	5c9b      	ldrb	r3, [r3, r2]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d107      	bne.n	800d542 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2240      	movs	r2, #64	@ 0x40
 800d536:	2100      	movs	r1, #0
 800d538:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	0018      	movs	r0, r3
 800d53e:	f7f9 fcd5 	bl	8006eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2241      	movs	r2, #65	@ 0x41
 800d546:	2124      	movs	r1, #36	@ 0x24
 800d548:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2101      	movs	r1, #1
 800d556:	438a      	bics	r2, r1
 800d558:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4934      	ldr	r1, [pc, #208]	@ (800d634 <HAL_I2C_Init+0x120>)
 800d564:	400a      	ands	r2, r1
 800d566:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689a      	ldr	r2, [r3, #8]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4931      	ldr	r1, [pc, #196]	@ (800d638 <HAL_I2C_Init+0x124>)
 800d574:	400a      	ands	r2, r1
 800d576:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d108      	bne.n	800d592 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	689a      	ldr	r2, [r3, #8]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2180      	movs	r1, #128	@ 0x80
 800d58a:	0209      	lsls	r1, r1, #8
 800d58c:	430a      	orrs	r2, r1
 800d58e:	609a      	str	r2, [r3, #8]
 800d590:	e007      	b.n	800d5a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2184      	movs	r1, #132	@ 0x84
 800d59c:	0209      	lsls	r1, r1, #8
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d104      	bne.n	800d5b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2280      	movs	r2, #128	@ 0x80
 800d5b0:	0112      	lsls	r2, r2, #4
 800d5b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	491f      	ldr	r1, [pc, #124]	@ (800d63c <HAL_I2C_Init+0x128>)
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68da      	ldr	r2, [r3, #12]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	491a      	ldr	r1, [pc, #104]	@ (800d638 <HAL_I2C_Init+0x124>)
 800d5d0:	400a      	ands	r2, r1
 800d5d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	691a      	ldr	r2, [r3, #16]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	695b      	ldr	r3, [r3, #20]
 800d5dc:	431a      	orrs	r2, r3
 800d5de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	430a      	orrs	r2, r1
 800d5ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	69d9      	ldr	r1, [r3, #28]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a1a      	ldr	r2, [r3, #32]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2101      	movs	r1, #1
 800d60a:	430a      	orrs	r2, r1
 800d60c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2241      	movs	r2, #65	@ 0x41
 800d618:	2120      	movs	r1, #32
 800d61a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2242      	movs	r2, #66	@ 0x42
 800d626:	2100      	movs	r1, #0
 800d628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	0018      	movs	r0, r3
 800d62e:	46bd      	mov	sp, r7
 800d630:	b002      	add	sp, #8
 800d632:	bd80      	pop	{r7, pc}
 800d634:	f0ffffff 	.word	0xf0ffffff
 800d638:	ffff7fff 	.word	0xffff7fff
 800d63c:	02008000 	.word	0x02008000

0800d640 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800d640:	b5b0      	push	{r4, r5, r7, lr}
 800d642:	b088      	sub	sp, #32
 800d644:	af02      	add	r7, sp, #8
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	0008      	movs	r0, r1
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	0019      	movs	r1, r3
 800d64e:	230a      	movs	r3, #10
 800d650:	18fb      	adds	r3, r7, r3
 800d652:	1c02      	adds	r2, r0, #0
 800d654:	801a      	strh	r2, [r3, #0]
 800d656:	2308      	movs	r3, #8
 800d658:	18fb      	adds	r3, r7, r3
 800d65a:	1c0a      	adds	r2, r1, #0
 800d65c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2241      	movs	r2, #65	@ 0x41
 800d662:	5c9b      	ldrb	r3, [r3, r2]
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b20      	cmp	r3, #32
 800d668:	d000      	beq.n	800d66c <HAL_I2C_Master_Transmit_DMA+0x2c>
 800d66a:	e0dd      	b.n	800d828 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	699a      	ldr	r2, [r3, #24]
 800d672:	2380      	movs	r3, #128	@ 0x80
 800d674:	021b      	lsls	r3, r3, #8
 800d676:	401a      	ands	r2, r3
 800d678:	2380      	movs	r3, #128	@ 0x80
 800d67a:	021b      	lsls	r3, r3, #8
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d101      	bne.n	800d684 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800d680:	2302      	movs	r3, #2
 800d682:	e0d2      	b.n	800d82a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2240      	movs	r2, #64	@ 0x40
 800d688:	5c9b      	ldrb	r3, [r3, r2]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d101      	bne.n	800d692 <HAL_I2C_Master_Transmit_DMA+0x52>
 800d68e:	2302      	movs	r3, #2
 800d690:	e0cb      	b.n	800d82a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2240      	movs	r2, #64	@ 0x40
 800d696:	2101      	movs	r1, #1
 800d698:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2241      	movs	r2, #65	@ 0x41
 800d69e:	2121      	movs	r1, #33	@ 0x21
 800d6a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2242      	movs	r2, #66	@ 0x42
 800d6a6:	2110      	movs	r1, #16
 800d6a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	18ba      	adds	r2, r7, r2
 800d6bc:	8812      	ldrh	r2, [r2, #0]
 800d6be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4a5c      	ldr	r2, [pc, #368]	@ (800d834 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800d6c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	4a5b      	ldr	r2, [pc, #364]	@ (800d838 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800d6ca:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	2bff      	cmp	r3, #255	@ 0xff
 800d6d4:	d906      	bls.n	800d6e4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	22ff      	movs	r2, #255	@ 0xff
 800d6da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d6dc:	2380      	movs	r3, #128	@ 0x80
 800d6de:	045b      	lsls	r3, r3, #17
 800d6e0:	617b      	str	r3, [r7, #20]
 800d6e2:	e007      	b.n	800d6f4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d6ee:	2380      	movs	r3, #128	@ 0x80
 800d6f0:	049b      	lsls	r3, r3, #18
 800d6f2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d100      	bne.n	800d6fe <HAL_I2C_Master_Transmit_DMA+0xbe>
 800d6fc:	e078      	b.n	800d7f0 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d702:	2b00      	cmp	r3, #0
 800d704:	d023      	beq.n	800d74e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d70a:	4a4c      	ldr	r2, [pc, #304]	@ (800d83c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800d70c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d712:	4a4b      	ldr	r2, [pc, #300]	@ (800d840 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800d714:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d71a:	2200      	movs	r2, #0
 800d71c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d722:	2200      	movs	r2, #0
 800d724:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3328      	adds	r3, #40	@ 0x28
 800d732:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d738:	2513      	movs	r5, #19
 800d73a:	197c      	adds	r4, r7, r5
 800d73c:	f7ff f98e 	bl	800ca5c <HAL_DMA_Start_IT>
 800d740:	0003      	movs	r3, r0
 800d742:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d744:	197b      	adds	r3, r7, r5
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d13d      	bne.n	800d7c8 <HAL_I2C_Master_Transmit_DMA+0x188>
 800d74c:	e013      	b.n	800d776 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2241      	movs	r2, #65	@ 0x41
 800d752:	2120      	movs	r1, #32
 800d754:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2242      	movs	r2, #66	@ 0x42
 800d75a:	2100      	movs	r1, #0
 800d75c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d762:	2280      	movs	r2, #128	@ 0x80
 800d764:	431a      	orrs	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2240      	movs	r2, #64	@ 0x40
 800d76e:	2100      	movs	r1, #0
 800d770:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e059      	b.n	800d82a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	697c      	ldr	r4, [r7, #20]
 800d77e:	230a      	movs	r3, #10
 800d780:	18fb      	adds	r3, r7, r3
 800d782:	8819      	ldrh	r1, [r3, #0]
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	4b2f      	ldr	r3, [pc, #188]	@ (800d844 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	0023      	movs	r3, r4
 800d78c:	f001 fd0e 	bl	800f1ac <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2240      	movs	r2, #64	@ 0x40
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2110      	movs	r1, #16
 800d7ae:	0018      	movs	r0, r3
 800d7b0:	f001 fd36 	bl	800f220 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2180      	movs	r1, #128	@ 0x80
 800d7c0:	01c9      	lsls	r1, r1, #7
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	e02d      	b.n	800d824 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2241      	movs	r2, #65	@ 0x41
 800d7cc:	2120      	movs	r1, #32
 800d7ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2242      	movs	r2, #66	@ 0x42
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7dc:	2210      	movs	r2, #16
 800d7de:	431a      	orrs	r2, r3
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2240      	movs	r2, #64	@ 0x40
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e01c      	b.n	800d82a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	4a15      	ldr	r2, [pc, #84]	@ (800d848 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800d7f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7fa:	b2da      	uxtb	r2, r3
 800d7fc:	2380      	movs	r3, #128	@ 0x80
 800d7fe:	049c      	lsls	r4, r3, #18
 800d800:	230a      	movs	r3, #10
 800d802:	18fb      	adds	r3, r7, r3
 800d804:	8819      	ldrh	r1, [r3, #0]
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	4b0e      	ldr	r3, [pc, #56]	@ (800d844 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	0023      	movs	r3, r4
 800d80e:	f001 fccd 	bl	800f1ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2240      	movs	r2, #64	@ 0x40
 800d816:	2100      	movs	r1, #0
 800d818:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2101      	movs	r1, #1
 800d81e:	0018      	movs	r0, r3
 800d820:	f001 fcfe 	bl	800f220 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	e000      	b.n	800d82a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d828:	2302      	movs	r3, #2
  }
}
 800d82a:	0018      	movs	r0, r3
 800d82c:	46bd      	mov	sp, r7
 800d82e:	b006      	add	sp, #24
 800d830:	bdb0      	pop	{r4, r5, r7, pc}
 800d832:	46c0      	nop			@ (mov r8, r8)
 800d834:	ffff0000 	.word	0xffff0000
 800d838:	0800e045 	.word	0x0800e045
 800d83c:	0800effd 	.word	0x0800effd
 800d840:	0800f13d 	.word	0x0800f13d
 800d844:	80002000 	.word	0x80002000
 800d848:	0800dbf1 	.word	0x0800dbf1

0800d84c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800d84c:	b5b0      	push	{r4, r5, r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af02      	add	r7, sp, #8
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	0008      	movs	r0, r1
 800d856:	607a      	str	r2, [r7, #4]
 800d858:	0019      	movs	r1, r3
 800d85a:	230a      	movs	r3, #10
 800d85c:	18fb      	adds	r3, r7, r3
 800d85e:	1c02      	adds	r2, r0, #0
 800d860:	801a      	strh	r2, [r3, #0]
 800d862:	2308      	movs	r3, #8
 800d864:	18fb      	adds	r3, r7, r3
 800d866:	1c0a      	adds	r2, r1, #0
 800d868:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2241      	movs	r2, #65	@ 0x41
 800d86e:	5c9b      	ldrb	r3, [r3, r2]
 800d870:	b2db      	uxtb	r3, r3
 800d872:	2b20      	cmp	r3, #32
 800d874:	d000      	beq.n	800d878 <HAL_I2C_Master_Receive_DMA+0x2c>
 800d876:	e0dd      	b.n	800da34 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	699a      	ldr	r2, [r3, #24]
 800d87e:	2380      	movs	r3, #128	@ 0x80
 800d880:	021b      	lsls	r3, r3, #8
 800d882:	401a      	ands	r2, r3
 800d884:	2380      	movs	r3, #128	@ 0x80
 800d886:	021b      	lsls	r3, r3, #8
 800d888:	429a      	cmp	r2, r3
 800d88a:	d101      	bne.n	800d890 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800d88c:	2302      	movs	r3, #2
 800d88e:	e0d2      	b.n	800da36 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2240      	movs	r2, #64	@ 0x40
 800d894:	5c9b      	ldrb	r3, [r3, r2]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d101      	bne.n	800d89e <HAL_I2C_Master_Receive_DMA+0x52>
 800d89a:	2302      	movs	r3, #2
 800d89c:	e0cb      	b.n	800da36 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2240      	movs	r2, #64	@ 0x40
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2241      	movs	r2, #65	@ 0x41
 800d8aa:	2122      	movs	r1, #34	@ 0x22
 800d8ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2242      	movs	r2, #66	@ 0x42
 800d8b2:	2110      	movs	r1, #16
 800d8b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2208      	movs	r2, #8
 800d8c6:	18ba      	adds	r2, r7, r2
 800d8c8:	8812      	ldrh	r2, [r2, #0]
 800d8ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	4a5c      	ldr	r2, [pc, #368]	@ (800da40 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800d8d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4a5b      	ldr	r2, [pc, #364]	@ (800da44 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800d8d6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	2bff      	cmp	r3, #255	@ 0xff
 800d8e0:	d906      	bls.n	800d8f0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	22ff      	movs	r2, #255	@ 0xff
 800d8e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d8e8:	2380      	movs	r3, #128	@ 0x80
 800d8ea:	045b      	lsls	r3, r3, #17
 800d8ec:	617b      	str	r3, [r7, #20]
 800d8ee:	e007      	b.n	800d900 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d8fa:	2380      	movs	r3, #128	@ 0x80
 800d8fc:	049b      	lsls	r3, r3, #18
 800d8fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d904:	2b00      	cmp	r3, #0
 800d906:	d100      	bne.n	800d90a <HAL_I2C_Master_Receive_DMA+0xbe>
 800d908:	e078      	b.n	800d9fc <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d023      	beq.n	800d95a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d916:	4a4c      	ldr	r2, [pc, #304]	@ (800da48 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800d918:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d91e:	4a4b      	ldr	r2, [pc, #300]	@ (800da4c <HAL_I2C_Master_Receive_DMA+0x200>)
 800d920:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d926:	2200      	movs	r2, #0
 800d928:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d92e:	2200      	movs	r2, #0
 800d930:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3324      	adds	r3, #36	@ 0x24
 800d93c:	0019      	movs	r1, r3
 800d93e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d944:	2513      	movs	r5, #19
 800d946:	197c      	adds	r4, r7, r5
 800d948:	f7ff f888 	bl	800ca5c <HAL_DMA_Start_IT>
 800d94c:	0003      	movs	r3, r0
 800d94e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d950:	197b      	adds	r3, r7, r5
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d13d      	bne.n	800d9d4 <HAL_I2C_Master_Receive_DMA+0x188>
 800d958:	e013      	b.n	800d982 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2241      	movs	r2, #65	@ 0x41
 800d95e:	2120      	movs	r1, #32
 800d960:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2242      	movs	r2, #66	@ 0x42
 800d966:	2100      	movs	r1, #0
 800d968:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d96e:	2280      	movs	r2, #128	@ 0x80
 800d970:	431a      	orrs	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2240      	movs	r2, #64	@ 0x40
 800d97a:	2100      	movs	r1, #0
 800d97c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d97e:	2301      	movs	r3, #1
 800d980:	e059      	b.n	800da36 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d986:	b2da      	uxtb	r2, r3
 800d988:	697c      	ldr	r4, [r7, #20]
 800d98a:	230a      	movs	r3, #10
 800d98c:	18fb      	adds	r3, r7, r3
 800d98e:	8819      	ldrh	r1, [r3, #0]
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	4b2f      	ldr	r3, [pc, #188]	@ (800da50 <HAL_I2C_Master_Receive_DMA+0x204>)
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	0023      	movs	r3, r4
 800d998:	f001 fc08 	bl	800f1ac <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2240      	movs	r2, #64	@ 0x40
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2110      	movs	r1, #16
 800d9ba:	0018      	movs	r0, r3
 800d9bc:	f001 fc30 	bl	800f220 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2180      	movs	r1, #128	@ 0x80
 800d9cc:	0209      	lsls	r1, r1, #8
 800d9ce:	430a      	orrs	r2, r1
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	e02d      	b.n	800da30 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2241      	movs	r2, #65	@ 0x41
 800d9d8:	2120      	movs	r1, #32
 800d9da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2242      	movs	r2, #66	@ 0x42
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9e8:	2210      	movs	r2, #16
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2240      	movs	r2, #64	@ 0x40
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e01c      	b.n	800da36 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	4a15      	ldr	r2, [pc, #84]	@ (800da54 <HAL_I2C_Master_Receive_DMA+0x208>)
 800da00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da06:	b2da      	uxtb	r2, r3
 800da08:	2380      	movs	r3, #128	@ 0x80
 800da0a:	049c      	lsls	r4, r3, #18
 800da0c:	230a      	movs	r3, #10
 800da0e:	18fb      	adds	r3, r7, r3
 800da10:	8819      	ldrh	r1, [r3, #0]
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	4b0e      	ldr	r3, [pc, #56]	@ (800da50 <HAL_I2C_Master_Receive_DMA+0x204>)
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	0023      	movs	r3, r4
 800da1a:	f001 fbc7 	bl	800f1ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2240      	movs	r2, #64	@ 0x40
 800da22:	2100      	movs	r1, #0
 800da24:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2101      	movs	r1, #1
 800da2a:	0018      	movs	r0, r3
 800da2c:	f001 fbf8 	bl	800f220 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800da30:	2300      	movs	r3, #0
 800da32:	e000      	b.n	800da36 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800da34:	2302      	movs	r3, #2
  }
}
 800da36:	0018      	movs	r0, r3
 800da38:	46bd      	mov	sp, r7
 800da3a:	b006      	add	sp, #24
 800da3c:	bdb0      	pop	{r4, r5, r7, pc}
 800da3e:	46c0      	nop			@ (mov r8, r8)
 800da40:	ffff0000 	.word	0xffff0000
 800da44:	0800e045 	.word	0x0800e045
 800da48:	0800f09d 	.word	0x0800f09d
 800da4c:	0800f13d 	.word	0x0800f13d
 800da50:	80002400 	.word	0x80002400
 800da54:	0800dbf1 	.word	0x0800dbf1

0800da58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	699b      	ldr	r3, [r3, #24]
 800da66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	68f9      	ldr	r1, [r7, #12]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	4798      	blx	r3
  }
}
 800da84:	46c0      	nop			@ (mov r8, r8)
 800da86:	46bd      	mov	sp, r7
 800da88:	b004      	add	sp, #16
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	699b      	ldr	r3, [r3, #24]
 800da9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800daa4:	697a      	ldr	r2, [r7, #20]
 800daa6:	2380      	movs	r3, #128	@ 0x80
 800daa8:	005b      	lsls	r3, r3, #1
 800daaa:	4013      	ands	r3, r2
 800daac:	d00e      	beq.n	800dacc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	2280      	movs	r2, #128	@ 0x80
 800dab2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800dab4:	d00a      	beq.n	800dacc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daba:	2201      	movs	r2, #1
 800dabc:	431a      	orrs	r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2280      	movs	r2, #128	@ 0x80
 800dac8:	0052      	lsls	r2, r2, #1
 800daca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800dacc:	697a      	ldr	r2, [r7, #20]
 800dace:	2380      	movs	r3, #128	@ 0x80
 800dad0:	00db      	lsls	r3, r3, #3
 800dad2:	4013      	ands	r3, r2
 800dad4:	d00e      	beq.n	800daf4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	2280      	movs	r2, #128	@ 0x80
 800dada:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800dadc:	d00a      	beq.n	800daf4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dae2:	2208      	movs	r2, #8
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2280      	movs	r2, #128	@ 0x80
 800daf0:	00d2      	lsls	r2, r2, #3
 800daf2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	2380      	movs	r3, #128	@ 0x80
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4013      	ands	r3, r2
 800dafc:	d00e      	beq.n	800db1c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2280      	movs	r2, #128	@ 0x80
 800db02:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800db04:	d00a      	beq.n	800db1c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db0a:	2202      	movs	r2, #2
 800db0c:	431a      	orrs	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2280      	movs	r2, #128	@ 0x80
 800db18:	0092      	lsls	r2, r2, #2
 800db1a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db20:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	220b      	movs	r2, #11
 800db26:	4013      	ands	r3, r2
 800db28:	d005      	beq.n	800db36 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	0011      	movs	r1, r2
 800db30:	0018      	movs	r0, r3
 800db32:	f001 f915 	bl	800ed60 <I2C_ITError>
  }
}
 800db36:	46c0      	nop			@ (mov r8, r8)
 800db38:	46bd      	mov	sp, r7
 800db3a:	b006      	add	sp, #24
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b082      	sub	sp, #8
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800db46:	46c0      	nop			@ (mov r8, r8)
 800db48:	46bd      	mov	sp, r7
 800db4a:	b002      	add	sp, #8
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800db56:	46c0      	nop			@ (mov r8, r8)
 800db58:	46bd      	mov	sp, r7
 800db5a:	b002      	add	sp, #8
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b082      	sub	sp, #8
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	46bd      	mov	sp, r7
 800db6a:	b002      	add	sp, #8
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800db76:	46c0      	nop			@ (mov r8, r8)
 800db78:	46bd      	mov	sp, r7
 800db7a:	b002      	add	sp, #8
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b082      	sub	sp, #8
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	0008      	movs	r0, r1
 800db88:	0011      	movs	r1, r2
 800db8a:	1cfb      	adds	r3, r7, #3
 800db8c:	1c02      	adds	r2, r0, #0
 800db8e:	701a      	strb	r2, [r3, #0]
 800db90:	003b      	movs	r3, r7
 800db92:	1c0a      	adds	r2, r1, #0
 800db94:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800db96:	46c0      	nop			@ (mov r8, r8)
 800db98:	46bd      	mov	sp, r7
 800db9a:	b002      	add	sp, #8
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b082      	sub	sp, #8
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800dba6:	46c0      	nop			@ (mov r8, r8)
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	b002      	add	sp, #8
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b082      	sub	sp, #8
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800dbb6:	46c0      	nop			@ (mov r8, r8)
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	b002      	add	sp, #8
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b082      	sub	sp, #8
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800dbc6:	46c0      	nop			@ (mov r8, r8)
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	b002      	add	sp, #8
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b082      	sub	sp, #8
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800dbd6:	46c0      	nop			@ (mov r8, r8)
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	b002      	add	sp, #8
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b082      	sub	sp, #8
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800dbe6:	46c0      	nop			@ (mov r8, r8)
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	b002      	add	sp, #8
 800dbec:	bd80      	pop	{r7, pc}
	...

0800dbf0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800dbf0:	b590      	push	{r4, r7, lr}
 800dbf2:	b089      	sub	sp, #36	@ 0x24
 800dbf4:	af02      	add	r7, sp, #8
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2240      	movs	r2, #64	@ 0x40
 800dc04:	5c9b      	ldrb	r3, [r3, r2]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d101      	bne.n	800dc0e <I2C_Master_ISR_IT+0x1e>
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	e113      	b.n	800de36 <I2C_Master_ISR_IT+0x246>
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2240      	movs	r2, #64	@ 0x40
 800dc12:	2101      	movs	r1, #1
 800dc14:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2210      	movs	r2, #16
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	d012      	beq.n	800dc44 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2210      	movs	r2, #16
 800dc22:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dc24:	d00e      	beq.n	800dc44 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2210      	movs	r2, #16
 800dc2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc32:	2204      	movs	r2, #4
 800dc34:	431a      	orrs	r2, r3
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f001 f9ba 	bl	800efb6 <I2C_Flush_TXDR>
 800dc42:	e0e5      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	2204      	movs	r2, #4
 800dc48:	4013      	ands	r3, r2
 800dc4a:	d021      	beq.n	800dc90 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2204      	movs	r2, #4
 800dc50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800dc52:	d01d      	beq.n	800dc90 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2204      	movs	r2, #4
 800dc58:	4393      	bics	r3, r2
 800dc5a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc66:	b2d2      	uxtb	r2, r2
 800dc68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	3b01      	subs	r3, #1
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dc8e:	e0bf      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	2202      	movs	r2, #2
 800dc94:	4013      	ands	r3, r2
 800dc96:	d01c      	beq.n	800dcd2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2202      	movs	r2, #2
 800dc9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dc9e:	d018      	beq.n	800dcd2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca4:	781a      	ldrb	r2, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcb0:	1c5a      	adds	r2, r3, #1
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dcd0:	e09e      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	2280      	movs	r2, #128	@ 0x80
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	d100      	bne.n	800dcdc <I2C_Master_ISR_IT+0xec>
 800dcda:	e069      	b.n	800ddb0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2240      	movs	r2, #64	@ 0x40
 800dce0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800dce2:	d065      	beq.n	800ddb0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d04a      	beq.n	800dd84 <I2C_Master_ISR_IT+0x194>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d146      	bne.n	800dd84 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	2112      	movs	r1, #18
 800dd00:	187b      	adds	r3, r7, r1
 800dd02:	0592      	lsls	r2, r2, #22
 800dd04:	0d92      	lsrs	r2, r2, #22
 800dd06:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	2bff      	cmp	r3, #255	@ 0xff
 800dd10:	d910      	bls.n	800dd34 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	22ff      	movs	r2, #255	@ 0xff
 800dd16:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	2380      	movs	r3, #128	@ 0x80
 800dd20:	045c      	lsls	r4, r3, #17
 800dd22:	187b      	adds	r3, r7, r1
 800dd24:	8819      	ldrh	r1, [r3, #0]
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	2300      	movs	r3, #0
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	0023      	movs	r3, r4
 800dd2e:	f001 fa3d 	bl	800f1ac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd32:	e03c      	b.n	800ddae <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd42:	4a3f      	ldr	r2, [pc, #252]	@ (800de40 <I2C_Master_ISR_IT+0x250>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d00e      	beq.n	800dd66 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd4c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dd52:	2312      	movs	r3, #18
 800dd54:	18fb      	adds	r3, r7, r3
 800dd56:	8819      	ldrh	r1, [r3, #0]
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	0023      	movs	r3, r4
 800dd60:	f001 fa24 	bl	800f1ac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd64:	e023      	b.n	800ddae <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	2380      	movs	r3, #128	@ 0x80
 800dd6e:	049c      	lsls	r4, r3, #18
 800dd70:	2312      	movs	r3, #18
 800dd72:	18fb      	adds	r3, r7, r3
 800dd74:	8819      	ldrh	r1, [r3, #0]
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	2300      	movs	r3, #0
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	0023      	movs	r3, r4
 800dd7e:	f001 fa15 	bl	800f1ac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd82:	e014      	b.n	800ddae <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	685a      	ldr	r2, [r3, #4]
 800dd8a:	2380      	movs	r3, #128	@ 0x80
 800dd8c:	049b      	lsls	r3, r3, #18
 800dd8e:	401a      	ands	r2, r3
 800dd90:	2380      	movs	r3, #128	@ 0x80
 800dd92:	049b      	lsls	r3, r3, #18
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d004      	beq.n	800dda2 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	0018      	movs	r0, r3
 800dd9c:	f000 fcf4 	bl	800e788 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dda0:	e036      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2140      	movs	r1, #64	@ 0x40
 800dda6:	0018      	movs	r0, r3
 800dda8:	f000 ffda 	bl	800ed60 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ddac:	e030      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
 800ddae:	e02f      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2240      	movs	r2, #64	@ 0x40
 800ddb4:	4013      	ands	r3, r2
 800ddb6:	d02b      	beq.n	800de10 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2240      	movs	r2, #64	@ 0x40
 800ddbc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ddbe:	d027      	beq.n	800de10 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d11d      	bne.n	800de06 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	685a      	ldr	r2, [r3, #4]
 800ddd0:	2380      	movs	r3, #128	@ 0x80
 800ddd2:	049b      	lsls	r3, r3, #18
 800ddd4:	401a      	ands	r2, r3
 800ddd6:	2380      	movs	r3, #128	@ 0x80
 800ddd8:	049b      	lsls	r3, r3, #18
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d018      	beq.n	800de10 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dde2:	4a17      	ldr	r2, [pc, #92]	@ (800de40 <I2C_Master_ISR_IT+0x250>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d109      	bne.n	800ddfc <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	685a      	ldr	r2, [r3, #4]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2180      	movs	r1, #128	@ 0x80
 800ddf4:	01c9      	lsls	r1, r1, #7
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	605a      	str	r2, [r3, #4]
 800ddfa:	e009      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	0018      	movs	r0, r3
 800de00:	f000 fcc2 	bl	800e788 <I2C_ITMasterSeqCplt>
 800de04:	e004      	b.n	800de10 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2140      	movs	r1, #64	@ 0x40
 800de0a:	0018      	movs	r0, r3
 800de0c:	f000 ffa8 	bl	800ed60 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2220      	movs	r2, #32
 800de14:	4013      	ands	r3, r2
 800de16:	d009      	beq.n	800de2c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2220      	movs	r2, #32
 800de1c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800de1e:	d005      	beq.n	800de2c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800de20:	697a      	ldr	r2, [r7, #20]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	0011      	movs	r1, r2
 800de26:	0018      	movs	r0, r3
 800de28:	f000 fd54 	bl	800e8d4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2240      	movs	r2, #64	@ 0x40
 800de30:	2100      	movs	r1, #0
 800de32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	0018      	movs	r0, r3
 800de38:	46bd      	mov	sp, r7
 800de3a:	b007      	add	sp, #28
 800de3c:	bd90      	pop	{r4, r7, pc}
 800de3e:	46c0      	nop			@ (mov r8, r8)
 800de40:	ffff0000 	.word	0xffff0000

0800de44 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de54:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2240      	movs	r2, #64	@ 0x40
 800de5e:	5c9b      	ldrb	r3, [r3, r2]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d101      	bne.n	800de68 <I2C_Slave_ISR_IT+0x24>
 800de64:	2302      	movs	r3, #2
 800de66:	e0e6      	b.n	800e036 <I2C_Slave_ISR_IT+0x1f2>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2240      	movs	r2, #64	@ 0x40
 800de6c:	2101      	movs	r1, #1
 800de6e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2220      	movs	r2, #32
 800de74:	4013      	ands	r3, r2
 800de76:	d009      	beq.n	800de8c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2220      	movs	r2, #32
 800de7c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800de7e:	d005      	beq.n	800de8c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	0011      	movs	r1, r2
 800de86:	0018      	movs	r0, r3
 800de88:	f000 fdf2 	bl	800ea70 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2210      	movs	r2, #16
 800de90:	4013      	ands	r3, r2
 800de92:	d052      	beq.n	800df3a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2210      	movs	r2, #16
 800de98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800de9a:	d04e      	beq.n	800df3a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d12d      	bne.n	800df02 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2241      	movs	r2, #65	@ 0x41
 800deaa:	5c9b      	ldrb	r3, [r3, r2]
 800deac:	b2db      	uxtb	r3, r3
 800deae:	2b28      	cmp	r3, #40	@ 0x28
 800deb0:	d10b      	bne.n	800deca <I2C_Slave_ISR_IT+0x86>
 800deb2:	697a      	ldr	r2, [r7, #20]
 800deb4:	2380      	movs	r3, #128	@ 0x80
 800deb6:	049b      	lsls	r3, r3, #18
 800deb8:	429a      	cmp	r2, r3
 800deba:	d106      	bne.n	800deca <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	0011      	movs	r1, r2
 800dec2:	0018      	movs	r0, r3
 800dec4:	f000 fef4 	bl	800ecb0 <I2C_ITListenCplt>
 800dec8:	e036      	b.n	800df38 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2241      	movs	r2, #65	@ 0x41
 800dece:	5c9b      	ldrb	r3, [r3, r2]
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b29      	cmp	r3, #41	@ 0x29
 800ded4:	d110      	bne.n	800def8 <I2C_Slave_ISR_IT+0xb4>
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	4a59      	ldr	r2, [pc, #356]	@ (800e040 <I2C_Slave_ISR_IT+0x1fc>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d00c      	beq.n	800def8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2210      	movs	r2, #16
 800dee4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	0018      	movs	r0, r3
 800deea:	f001 f864 	bl	800efb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	0018      	movs	r0, r3
 800def2:	f000 fc8b 	bl	800e80c <I2C_ITSlaveSeqCplt>
 800def6:	e01f      	b.n	800df38 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2210      	movs	r2, #16
 800defe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800df00:	e091      	b.n	800e026 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2210      	movs	r2, #16
 800df08:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df0e:	2204      	movs	r2, #4
 800df10:	431a      	orrs	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d005      	beq.n	800df28 <I2C_Slave_ISR_IT+0xe4>
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	2380      	movs	r3, #128	@ 0x80
 800df20:	045b      	lsls	r3, r3, #17
 800df22:	429a      	cmp	r2, r3
 800df24:	d000      	beq.n	800df28 <I2C_Slave_ISR_IT+0xe4>
 800df26:	e07e      	b.n	800e026 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	0011      	movs	r1, r2
 800df30:	0018      	movs	r0, r3
 800df32:	f000 ff15 	bl	800ed60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800df36:	e076      	b.n	800e026 <I2C_Slave_ISR_IT+0x1e2>
 800df38:	e075      	b.n	800e026 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	2204      	movs	r2, #4
 800df3e:	4013      	ands	r3, r2
 800df40:	d02f      	beq.n	800dfa2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2204      	movs	r2, #4
 800df46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800df48:	d02b      	beq.n	800dfa2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df4e:	b29b      	uxth	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d018      	beq.n	800df86 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5e:	b2d2      	uxtb	r2, r2
 800df60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df70:	3b01      	subs	r3, #1
 800df72:	b29a      	uxth	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	3b01      	subs	r3, #1
 800df80:	b29a      	uxth	r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d14c      	bne.n	800e02a <I2C_Slave_ISR_IT+0x1e6>
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	4a2b      	ldr	r2, [pc, #172]	@ (800e040 <I2C_Slave_ISR_IT+0x1fc>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d048      	beq.n	800e02a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	0018      	movs	r0, r3
 800df9c:	f000 fc36 	bl	800e80c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800dfa0:	e043      	b.n	800e02a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	2208      	movs	r2, #8
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	d00a      	beq.n	800dfc0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2208      	movs	r2, #8
 800dfae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dfb0:	d006      	beq.n	800dfc0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800dfb2:	693a      	ldr	r2, [r7, #16]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	0011      	movs	r1, r2
 800dfb8:	0018      	movs	r0, r3
 800dfba:	f000 fb41 	bl	800e640 <I2C_ITAddrCplt>
 800dfbe:	e035      	b.n	800e02c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	d031      	beq.n	800e02c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2202      	movs	r2, #2
 800dfcc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dfce:	d02d      	beq.n	800e02c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d018      	beq.n	800e00c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfde:	781a      	ldrb	r2, [r3, #0]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	3b01      	subs	r3, #1
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e002:	3b01      	subs	r3, #1
 800e004:	b29a      	uxth	r2, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e00a:	e00f      	b.n	800e02c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	2380      	movs	r3, #128	@ 0x80
 800e010:	045b      	lsls	r3, r3, #17
 800e012:	429a      	cmp	r2, r3
 800e014:	d002      	beq.n	800e01c <I2C_Slave_ISR_IT+0x1d8>
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d107      	bne.n	800e02c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	0018      	movs	r0, r3
 800e020:	f000 fbf4 	bl	800e80c <I2C_ITSlaveSeqCplt>
 800e024:	e002      	b.n	800e02c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800e026:	46c0      	nop			@ (mov r8, r8)
 800e028:	e000      	b.n	800e02c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800e02a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2240      	movs	r2, #64	@ 0x40
 800e030:	2100      	movs	r1, #0
 800e032:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	0018      	movs	r0, r3
 800e038:	46bd      	mov	sp, r7
 800e03a:	b006      	add	sp, #24
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	46c0      	nop			@ (mov r8, r8)
 800e040:	ffff0000 	.word	0xffff0000

0800e044 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800e044:	b590      	push	{r4, r7, lr}
 800e046:	b089      	sub	sp, #36	@ 0x24
 800e048:	af02      	add	r7, sp, #8
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2240      	movs	r2, #64	@ 0x40
 800e054:	5c9b      	ldrb	r3, [r3, r2]
 800e056:	2b01      	cmp	r3, #1
 800e058:	d101      	bne.n	800e05e <I2C_Master_ISR_DMA+0x1a>
 800e05a:	2302      	movs	r3, #2
 800e05c:	e0e7      	b.n	800e22e <I2C_Master_ISR_DMA+0x1ea>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2240      	movs	r2, #64	@ 0x40
 800e062:	2101      	movs	r1, #1
 800e064:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	2210      	movs	r2, #16
 800e06a:	4013      	ands	r3, r2
 800e06c:	d017      	beq.n	800e09e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2210      	movs	r2, #16
 800e072:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e074:	d013      	beq.n	800e09e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2210      	movs	r2, #16
 800e07c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e082:	2204      	movs	r2, #4
 800e084:	431a      	orrs	r2, r3
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2120      	movs	r1, #32
 800e08e:	0018      	movs	r0, r3
 800e090:	f001 f8c6 	bl	800f220 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	0018      	movs	r0, r3
 800e098:	f000 ff8d 	bl	800efb6 <I2C_Flush_TXDR>
 800e09c:	e0c2      	b.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2280      	movs	r2, #128	@ 0x80
 800e0a2:	4013      	ands	r3, r2
 800e0a4:	d100      	bne.n	800e0a8 <I2C_Master_ISR_DMA+0x64>
 800e0a6:	e07c      	b.n	800e1a2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2240      	movs	r2, #64	@ 0x40
 800e0ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e0ae:	d100      	bne.n	800e0b2 <I2C_Master_ISR_DMA+0x6e>
 800e0b0:	e077      	b.n	800e1a2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2140      	movs	r1, #64	@ 0x40
 800e0be:	438a      	bics	r2, r1
 800e0c0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d055      	beq.n	800e178 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	2312      	movs	r3, #18
 800e0d6:	18fb      	adds	r3, r7, r3
 800e0d8:	0592      	lsls	r2, r2, #22
 800e0da:	0d92      	lsrs	r2, r2, #22
 800e0dc:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	2bff      	cmp	r3, #255	@ 0xff
 800e0e6:	d906      	bls.n	800e0f6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	22ff      	movs	r2, #255	@ 0xff
 800e0ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800e0ee:	2380      	movs	r3, #128	@ 0x80
 800e0f0:	045b      	lsls	r3, r3, #17
 800e0f2:	617b      	str	r3, [r7, #20]
 800e0f4:	e010      	b.n	800e118 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e104:	4a4c      	ldr	r2, [pc, #304]	@ (800e238 <I2C_Master_ISR_DMA+0x1f4>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d003      	beq.n	800e112 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e10e:	617b      	str	r3, [r7, #20]
 800e110:	e002      	b.n	800e118 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800e112:	2380      	movs	r3, #128	@ 0x80
 800e114:	049b      	lsls	r3, r3, #18
 800e116:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	697c      	ldr	r4, [r7, #20]
 800e120:	2312      	movs	r3, #18
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	8819      	ldrh	r1, [r3, #0]
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	2300      	movs	r3, #0
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	0023      	movs	r3, r4
 800e12e:	f001 f83d 	bl	800f1ac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e136:	b29a      	uxth	r2, r3
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	b29a      	uxth	r2, r3
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2241      	movs	r2, #65	@ 0x41
 800e148:	5c9b      	ldrb	r3, [r3, r2]
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	2b22      	cmp	r3, #34	@ 0x22
 800e14e:	d109      	bne.n	800e164 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2180      	movs	r1, #128	@ 0x80
 800e15c:	0209      	lsls	r1, r1, #8
 800e15e:	430a      	orrs	r2, r1
 800e160:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e162:	e05f      	b.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2180      	movs	r1, #128	@ 0x80
 800e170:	01c9      	lsls	r1, r1, #7
 800e172:	430a      	orrs	r2, r1
 800e174:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e176:	e055      	b.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	685a      	ldr	r2, [r3, #4]
 800e17e:	2380      	movs	r3, #128	@ 0x80
 800e180:	049b      	lsls	r3, r3, #18
 800e182:	401a      	ands	r2, r3
 800e184:	2380      	movs	r3, #128	@ 0x80
 800e186:	049b      	lsls	r3, r3, #18
 800e188:	429a      	cmp	r2, r3
 800e18a:	d004      	beq.n	800e196 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	0018      	movs	r0, r3
 800e190:	f000 fafa 	bl	800e788 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800e194:	e046      	b.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2140      	movs	r1, #64	@ 0x40
 800e19a:	0018      	movs	r0, r3
 800e19c:	f000 fde0 	bl	800ed60 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e1a0:	e040      	b.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	2240      	movs	r2, #64	@ 0x40
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	d02c      	beq.n	800e204 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2240      	movs	r2, #64	@ 0x40
 800e1ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e1b0:	d028      	beq.n	800e204 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d11d      	bne.n	800e1f8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	685a      	ldr	r2, [r3, #4]
 800e1c2:	2380      	movs	r3, #128	@ 0x80
 800e1c4:	049b      	lsls	r3, r3, #18
 800e1c6:	401a      	ands	r2, r3
 800e1c8:	2380      	movs	r3, #128	@ 0x80
 800e1ca:	049b      	lsls	r3, r3, #18
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d028      	beq.n	800e222 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d4:	4a18      	ldr	r2, [pc, #96]	@ (800e238 <I2C_Master_ISR_DMA+0x1f4>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d109      	bne.n	800e1ee <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	685a      	ldr	r2, [r3, #4]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2180      	movs	r1, #128	@ 0x80
 800e1e6:	01c9      	lsls	r1, r1, #7
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800e1ec:	e019      	b.n	800e222 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	0018      	movs	r0, r3
 800e1f2:	f000 fac9 	bl	800e788 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800e1f6:	e014      	b.n	800e222 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2140      	movs	r1, #64	@ 0x40
 800e1fc:	0018      	movs	r0, r3
 800e1fe:	f000 fdaf 	bl	800ed60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e202:	e00e      	b.n	800e222 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	2220      	movs	r2, #32
 800e208:	4013      	ands	r3, r2
 800e20a:	d00b      	beq.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2220      	movs	r2, #32
 800e210:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e212:	d007      	beq.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	0011      	movs	r1, r2
 800e21a:	0018      	movs	r0, r3
 800e21c:	f000 fb5a 	bl	800e8d4 <I2C_ITMasterCplt>
 800e220:	e000      	b.n	800e224 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800e222:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2240      	movs	r2, #64	@ 0x40
 800e228:	2100      	movs	r1, #0
 800e22a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	0018      	movs	r0, r3
 800e230:	46bd      	mov	sp, r7
 800e232:	b007      	add	sp, #28
 800e234:	bd90      	pop	{r4, r7, pc}
 800e236:	46c0      	nop			@ (mov r8, r8)
 800e238:	ffff0000 	.word	0xffff0000

0800e23c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800e23c:	b590      	push	{r4, r7, lr}
 800e23e:	b089      	sub	sp, #36	@ 0x24
 800e240:	af02      	add	r7, sp, #8
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e248:	4b88      	ldr	r3, [pc, #544]	@ (800e46c <I2C_Mem_ISR_DMA+0x230>)
 800e24a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2240      	movs	r2, #64	@ 0x40
 800e250:	5c9b      	ldrb	r3, [r3, r2]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d101      	bne.n	800e25a <I2C_Mem_ISR_DMA+0x1e>
 800e256:	2302      	movs	r3, #2
 800e258:	e104      	b.n	800e464 <I2C_Mem_ISR_DMA+0x228>
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2240      	movs	r2, #64	@ 0x40
 800e25e:	2101      	movs	r1, #1
 800e260:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2210      	movs	r2, #16
 800e266:	4013      	ands	r3, r2
 800e268:	d017      	beq.n	800e29a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2210      	movs	r2, #16
 800e26e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e270:	d013      	beq.n	800e29a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2210      	movs	r2, #16
 800e278:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e27e:	2204      	movs	r2, #4
 800e280:	431a      	orrs	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2120      	movs	r1, #32
 800e28a:	0018      	movs	r0, r3
 800e28c:	f000 ffc8 	bl	800f220 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	0018      	movs	r0, r3
 800e294:	f000 fe8f 	bl	800efb6 <I2C_Flush_TXDR>
 800e298:	e0df      	b.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2202      	movs	r2, #2
 800e29e:	4013      	ands	r3, r2
 800e2a0:	d00d      	beq.n	800e2be <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e2a8:	d009      	beq.n	800e2be <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e2b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	4252      	negs	r2, r2
 800e2ba:	651a      	str	r2, [r3, #80]	@ 0x50
 800e2bc:	e0cd      	b.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	2280      	movs	r2, #128	@ 0x80
 800e2c2:	4013      	ands	r3, r2
 800e2c4:	d05e      	beq.n	800e384 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2240      	movs	r2, #64	@ 0x40
 800e2ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e2cc:	d05a      	beq.n	800e384 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2110      	movs	r1, #16
 800e2d2:	0018      	movs	r0, r3
 800e2d4:	f000 ffa4 	bl	800f220 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d04a      	beq.n	800e378 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	2bff      	cmp	r3, #255	@ 0xff
 800e2ea:	d910      	bls.n	800e30e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	22ff      	movs	r2, #255	@ 0xff
 800e2f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2f6:	b299      	uxth	r1, r3
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2fc:	b2da      	uxtb	r2, r3
 800e2fe:	2380      	movs	r3, #128	@ 0x80
 800e300:	045b      	lsls	r3, r3, #17
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	2400      	movs	r4, #0
 800e306:	9400      	str	r4, [sp, #0]
 800e308:	f000 ff50 	bl	800f1ac <I2C_TransferConfig>
 800e30c:	e011      	b.n	800e332 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e312:	b29a      	uxth	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e31c:	b299      	uxth	r1, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e322:	b2da      	uxtb	r2, r3
 800e324:	2380      	movs	r3, #128	@ 0x80
 800e326:	049b      	lsls	r3, r3, #18
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	2400      	movs	r4, #0
 800e32c:	9400      	str	r4, [sp, #0]
 800e32e:	f000 ff3d 	bl	800f1ac <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e336:	b29a      	uxth	r2, r3
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	b29a      	uxth	r2, r3
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2241      	movs	r2, #65	@ 0x41
 800e348:	5c9b      	ldrb	r3, [r3, r2]
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b22      	cmp	r3, #34	@ 0x22
 800e34e:	d109      	bne.n	800e364 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2180      	movs	r1, #128	@ 0x80
 800e35c:	0209      	lsls	r1, r1, #8
 800e35e:	430a      	orrs	r2, r1
 800e360:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e362:	e07a      	b.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2180      	movs	r1, #128	@ 0x80
 800e370:	01c9      	lsls	r1, r1, #7
 800e372:	430a      	orrs	r2, r1
 800e374:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e376:	e070      	b.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2140      	movs	r1, #64	@ 0x40
 800e37c:	0018      	movs	r0, r3
 800e37e:	f000 fcef 	bl	800ed60 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e382:	e06a      	b.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2240      	movs	r2, #64	@ 0x40
 800e388:	4013      	ands	r3, r2
 800e38a:	d058      	beq.n	800e43e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2240      	movs	r2, #64	@ 0x40
 800e390:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e392:	d054      	beq.n	800e43e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2241      	movs	r2, #65	@ 0x41
 800e398:	5c9b      	ldrb	r3, [r3, r2]
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b22      	cmp	r3, #34	@ 0x22
 800e39e:	d101      	bne.n	800e3a4 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800e3a0:	4b33      	ldr	r3, [pc, #204]	@ (800e470 <I2C_Mem_ISR_DMA+0x234>)
 800e3a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	2bff      	cmp	r3, #255	@ 0xff
 800e3ac:	d911      	bls.n	800e3d2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	22ff      	movs	r2, #255	@ 0xff
 800e3b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3b8:	b299      	uxth	r1, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	2380      	movs	r3, #128	@ 0x80
 800e3c2:	045c      	lsls	r4, r3, #17
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	0023      	movs	r3, r4
 800e3cc:	f000 feee 	bl	800f1ac <I2C_TransferConfig>
 800e3d0:	e012      	b.n	800e3f8 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3e0:	b299      	uxth	r1, r3
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	2380      	movs	r3, #128	@ 0x80
 800e3ea:	049c      	lsls	r4, r3, #18
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	0023      	movs	r3, r4
 800e3f4:	f000 feda 	bl	800f1ac <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	b29a      	uxth	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2241      	movs	r2, #65	@ 0x41
 800e40e:	5c9b      	ldrb	r3, [r3, r2]
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b22      	cmp	r3, #34	@ 0x22
 800e414:	d109      	bne.n	800e42a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2180      	movs	r1, #128	@ 0x80
 800e422:	0209      	lsls	r1, r1, #8
 800e424:	430a      	orrs	r2, r1
 800e426:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e428:	e017      	b.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2180      	movs	r1, #128	@ 0x80
 800e436:	01c9      	lsls	r1, r1, #7
 800e438:	430a      	orrs	r2, r1
 800e43a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e43c:	e00d      	b.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2220      	movs	r2, #32
 800e442:	4013      	ands	r3, r2
 800e444:	d009      	beq.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2220      	movs	r2, #32
 800e44a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e44c:	d005      	beq.n	800e45a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e44e:	68ba      	ldr	r2, [r7, #8]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	0011      	movs	r1, r2
 800e454:	0018      	movs	r0, r3
 800e456:	f000 fa3d 	bl	800e8d4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2240      	movs	r2, #64	@ 0x40
 800e45e:	2100      	movs	r1, #0
 800e460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	0018      	movs	r0, r3
 800e466:	46bd      	mov	sp, r7
 800e468:	b007      	add	sp, #28
 800e46a:	bd90      	pop	{r4, r7, pc}
 800e46c:	80002000 	.word	0x80002000
 800e470:	80002400 	.word	0x80002400

0800e474 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e484:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800e486:	2300      	movs	r3, #0
 800e488:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2240      	movs	r2, #64	@ 0x40
 800e48e:	5c9b      	ldrb	r3, [r3, r2]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d101      	bne.n	800e498 <I2C_Slave_ISR_DMA+0x24>
 800e494:	2302      	movs	r3, #2
 800e496:	e0cd      	b.n	800e634 <I2C_Slave_ISR_DMA+0x1c0>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2240      	movs	r2, #64	@ 0x40
 800e49c:	2101      	movs	r1, #1
 800e49e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2220      	movs	r2, #32
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	d009      	beq.n	800e4bc <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e4ae:	d005      	beq.n	800e4bc <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	0011      	movs	r1, r2
 800e4b6:	0018      	movs	r0, r3
 800e4b8:	f000 fada 	bl	800ea70 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	2210      	movs	r2, #16
 800e4c0:	4013      	ands	r3, r2
 800e4c2:	d100      	bne.n	800e4c6 <I2C_Slave_ISR_DMA+0x52>
 800e4c4:	e0a3      	b.n	800e60e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2210      	movs	r2, #16
 800e4ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e4cc:	d100      	bne.n	800e4d0 <I2C_Slave_ISR_DMA+0x5c>
 800e4ce:	e09e      	b.n	800e60e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	2380      	movs	r3, #128	@ 0x80
 800e4d4:	01db      	lsls	r3, r3, #7
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	d105      	bne.n	800e4e6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	2380      	movs	r3, #128	@ 0x80
 800e4de:	021b      	lsls	r3, r3, #8
 800e4e0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e4e2:	d100      	bne.n	800e4e6 <I2C_Slave_ISR_DMA+0x72>
 800e4e4:	e08c      	b.n	800e600 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00c      	beq.n	800e508 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	2380      	movs	r3, #128	@ 0x80
 800e4f2:	021b      	lsls	r3, r3, #8
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	d007      	beq.n	800e508 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d101      	bne.n	800e508 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800e504:	2301      	movs	r3, #1
 800e506:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00c      	beq.n	800e52a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	2380      	movs	r3, #128	@ 0x80
 800e514:	01db      	lsls	r3, r3, #7
 800e516:	4013      	ands	r3, r2
 800e518:	d007      	beq.n	800e52a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d101      	bne.n	800e52a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800e526:	2301      	movs	r3, #1
 800e528:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d12d      	bne.n	800e58c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2241      	movs	r2, #65	@ 0x41
 800e534:	5c9b      	ldrb	r3, [r3, r2]
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b28      	cmp	r3, #40	@ 0x28
 800e53a:	d10b      	bne.n	800e554 <I2C_Slave_ISR_DMA+0xe0>
 800e53c:	69ba      	ldr	r2, [r7, #24]
 800e53e:	2380      	movs	r3, #128	@ 0x80
 800e540:	049b      	lsls	r3, r3, #18
 800e542:	429a      	cmp	r2, r3
 800e544:	d106      	bne.n	800e554 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	0011      	movs	r1, r2
 800e54c:	0018      	movs	r0, r3
 800e54e:	f000 fbaf 	bl	800ecb0 <I2C_ITListenCplt>
 800e552:	e054      	b.n	800e5fe <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2241      	movs	r2, #65	@ 0x41
 800e558:	5c9b      	ldrb	r3, [r3, r2]
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b29      	cmp	r3, #41	@ 0x29
 800e55e:	d110      	bne.n	800e582 <I2C_Slave_ISR_DMA+0x10e>
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	4a36      	ldr	r2, [pc, #216]	@ (800e63c <I2C_Slave_ISR_DMA+0x1c8>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d00c      	beq.n	800e582 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2210      	movs	r2, #16
 800e56e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	0018      	movs	r0, r3
 800e574:	f000 fd1f 	bl	800efb6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	0018      	movs	r0, r3
 800e57c:	f000 f946 	bl	800e80c <I2C_ITSlaveSeqCplt>
 800e580:	e03d      	b.n	800e5fe <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	2210      	movs	r2, #16
 800e588:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800e58a:	e03e      	b.n	800e60a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2210      	movs	r2, #16
 800e592:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e598:	2204      	movs	r2, #4
 800e59a:	431a      	orrs	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800e5a0:	2317      	movs	r3, #23
 800e5a2:	18fb      	adds	r3, r7, r3
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	2141      	movs	r1, #65	@ 0x41
 800e5a8:	5c52      	ldrb	r2, [r2, r1]
 800e5aa:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d004      	beq.n	800e5bc <I2C_Slave_ISR_DMA+0x148>
 800e5b2:	69ba      	ldr	r2, [r7, #24]
 800e5b4:	2380      	movs	r3, #128	@ 0x80
 800e5b6:	045b      	lsls	r3, r3, #17
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d126      	bne.n	800e60a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e5bc:	2217      	movs	r2, #23
 800e5be:	18bb      	adds	r3, r7, r2
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b21      	cmp	r3, #33	@ 0x21
 800e5c4:	d003      	beq.n	800e5ce <I2C_Slave_ISR_DMA+0x15a>
 800e5c6:	18bb      	adds	r3, r7, r2
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b29      	cmp	r3, #41	@ 0x29
 800e5cc:	d103      	bne.n	800e5d6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2221      	movs	r2, #33	@ 0x21
 800e5d2:	631a      	str	r2, [r3, #48]	@ 0x30
 800e5d4:	e00b      	b.n	800e5ee <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e5d6:	2217      	movs	r2, #23
 800e5d8:	18bb      	adds	r3, r7, r2
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	2b22      	cmp	r3, #34	@ 0x22
 800e5de:	d003      	beq.n	800e5e8 <I2C_Slave_ISR_DMA+0x174>
 800e5e0:	18bb      	adds	r3, r7, r2
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5e6:	d102      	bne.n	800e5ee <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2222      	movs	r2, #34	@ 0x22
 800e5ec:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	0011      	movs	r1, r2
 800e5f6:	0018      	movs	r0, r3
 800e5f8:	f000 fbb2 	bl	800ed60 <I2C_ITError>
      if (treatdmanack == 1U)
 800e5fc:	e005      	b.n	800e60a <I2C_Slave_ISR_DMA+0x196>
 800e5fe:	e004      	b.n	800e60a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2210      	movs	r2, #16
 800e606:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e608:	e00f      	b.n	800e62a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800e60a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e60c:	e00d      	b.n	800e62a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2208      	movs	r2, #8
 800e612:	4013      	ands	r3, r2
 800e614:	d009      	beq.n	800e62a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2208      	movs	r2, #8
 800e61a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e61c:	d005      	beq.n	800e62a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800e61e:	68ba      	ldr	r2, [r7, #8]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	0011      	movs	r1, r2
 800e624:	0018      	movs	r0, r3
 800e626:	f000 f80b 	bl	800e640 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2240      	movs	r2, #64	@ 0x40
 800e62e:	2100      	movs	r1, #0
 800e630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e632:	2300      	movs	r3, #0
}
 800e634:	0018      	movs	r0, r3
 800e636:	46bd      	mov	sp, r7
 800e638:	b008      	add	sp, #32
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	ffff0000 	.word	0xffff0000

0800e640 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e640:	b5b0      	push	{r4, r5, r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2241      	movs	r2, #65	@ 0x41
 800e64e:	5c9b      	ldrb	r3, [r3, r2]
 800e650:	b2db      	uxtb	r3, r3
 800e652:	001a      	movs	r2, r3
 800e654:	2328      	movs	r3, #40	@ 0x28
 800e656:	4013      	ands	r3, r2
 800e658:	2b28      	cmp	r3, #40	@ 0x28
 800e65a:	d000      	beq.n	800e65e <I2C_ITAddrCplt+0x1e>
 800e65c:	e088      	b.n	800e770 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	0c1b      	lsrs	r3, r3, #16
 800e666:	b2da      	uxtb	r2, r3
 800e668:	250f      	movs	r5, #15
 800e66a:	197b      	adds	r3, r7, r5
 800e66c:	2101      	movs	r1, #1
 800e66e:	400a      	ands	r2, r1
 800e670:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	699b      	ldr	r3, [r3, #24]
 800e678:	0c1b      	lsrs	r3, r3, #16
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	200c      	movs	r0, #12
 800e67e:	183b      	adds	r3, r7, r0
 800e680:	21fe      	movs	r1, #254	@ 0xfe
 800e682:	400a      	ands	r2, r1
 800e684:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	240a      	movs	r4, #10
 800e690:	193b      	adds	r3, r7, r4
 800e692:	0592      	lsls	r2, r2, #22
 800e694:	0d92      	lsrs	r2, r2, #22
 800e696:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	2308      	movs	r3, #8
 800e6a2:	18fb      	adds	r3, r7, r3
 800e6a4:	21fe      	movs	r1, #254	@ 0xfe
 800e6a6:	400a      	ands	r2, r1
 800e6a8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	2b02      	cmp	r3, #2
 800e6b0:	d148      	bne.n	800e744 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800e6b2:	0021      	movs	r1, r4
 800e6b4:	187b      	adds	r3, r7, r1
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	09db      	lsrs	r3, r3, #7
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	183b      	adds	r3, r7, r0
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	4053      	eors	r3, r2
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	001a      	movs	r2, r3
 800e6c6:	2306      	movs	r3, #6
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	d120      	bne.n	800e70e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800e6cc:	183b      	adds	r3, r7, r0
 800e6ce:	187a      	adds	r2, r7, r1
 800e6d0:	8812      	ldrh	r2, [r2, #0]
 800e6d2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	d14c      	bne.n	800e780 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2208      	movs	r2, #8
 800e6f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2240      	movs	r2, #64	@ 0x40
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e6fc:	183b      	adds	r3, r7, r0
 800e6fe:	881a      	ldrh	r2, [r3, #0]
 800e700:	197b      	adds	r3, r7, r5
 800e702:	7819      	ldrb	r1, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	0018      	movs	r0, r3
 800e708:	f7ff fa39 	bl	800db7e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e70c:	e038      	b.n	800e780 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800e70e:	240c      	movs	r4, #12
 800e710:	193b      	adds	r3, r7, r4
 800e712:	2208      	movs	r2, #8
 800e714:	18ba      	adds	r2, r7, r2
 800e716:	8812      	ldrh	r2, [r2, #0]
 800e718:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e71a:	2380      	movs	r3, #128	@ 0x80
 800e71c:	021a      	lsls	r2, r3, #8
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	0011      	movs	r1, r2
 800e722:	0018      	movs	r0, r3
 800e724:	f000 fe0a 	bl	800f33c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2240      	movs	r2, #64	@ 0x40
 800e72c:	2100      	movs	r1, #0
 800e72e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e730:	193b      	adds	r3, r7, r4
 800e732:	881a      	ldrh	r2, [r3, #0]
 800e734:	230f      	movs	r3, #15
 800e736:	18fb      	adds	r3, r7, r3
 800e738:	7819      	ldrb	r1, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	0018      	movs	r0, r3
 800e73e:	f7ff fa1e 	bl	800db7e <HAL_I2C_AddrCallback>
}
 800e742:	e01d      	b.n	800e780 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e744:	2380      	movs	r3, #128	@ 0x80
 800e746:	021a      	lsls	r2, r3, #8
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	0011      	movs	r1, r2
 800e74c:	0018      	movs	r0, r3
 800e74e:	f000 fdf5 	bl	800f33c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2240      	movs	r2, #64	@ 0x40
 800e756:	2100      	movs	r1, #0
 800e758:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e75a:	230c      	movs	r3, #12
 800e75c:	18fb      	adds	r3, r7, r3
 800e75e:	881a      	ldrh	r2, [r3, #0]
 800e760:	230f      	movs	r3, #15
 800e762:	18fb      	adds	r3, r7, r3
 800e764:	7819      	ldrb	r1, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	0018      	movs	r0, r3
 800e76a:	f7ff fa08 	bl	800db7e <HAL_I2C_AddrCallback>
}
 800e76e:	e007      	b.n	800e780 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2208      	movs	r2, #8
 800e776:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2240      	movs	r2, #64	@ 0x40
 800e77c:	2100      	movs	r1, #0
 800e77e:	5499      	strb	r1, [r3, r2]
}
 800e780:	46c0      	nop			@ (mov r8, r8)
 800e782:	46bd      	mov	sp, r7
 800e784:	b004      	add	sp, #16
 800e786:	bdb0      	pop	{r4, r5, r7, pc}

0800e788 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2242      	movs	r2, #66	@ 0x42
 800e794:	2100      	movs	r1, #0
 800e796:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2241      	movs	r2, #65	@ 0x41
 800e79c:	5c9b      	ldrb	r3, [r3, r2]
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	2b21      	cmp	r3, #33	@ 0x21
 800e7a2:	d117      	bne.n	800e7d4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2241      	movs	r2, #65	@ 0x41
 800e7a8:	2120      	movs	r1, #32
 800e7aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2211      	movs	r2, #17
 800e7b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2101      	movs	r1, #1
 800e7bc:	0018      	movs	r0, r3
 800e7be:	f000 fdbd 	bl	800f33c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2240      	movs	r2, #64	@ 0x40
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	0018      	movs	r0, r3
 800e7ce:	f7ff f9b6 	bl	800db3e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e7d2:	e016      	b.n	800e802 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2241      	movs	r2, #65	@ 0x41
 800e7d8:	2120      	movs	r1, #32
 800e7da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2212      	movs	r2, #18
 800e7e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2102      	movs	r1, #2
 800e7ec:	0018      	movs	r0, r3
 800e7ee:	f000 fda5 	bl	800f33c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2240      	movs	r2, #64	@ 0x40
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	0018      	movs	r0, r3
 800e7fe:	f7ff f9a6 	bl	800db4e <HAL_I2C_MasterRxCpltCallback>
}
 800e802:	46c0      	nop			@ (mov r8, r8)
 800e804:	46bd      	mov	sp, r7
 800e806:	b002      	add	sp, #8
 800e808:	bd80      	pop	{r7, pc}
	...

0800e80c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2242      	movs	r2, #66	@ 0x42
 800e820:	2100      	movs	r1, #0
 800e822:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	2380      	movs	r3, #128	@ 0x80
 800e828:	01db      	lsls	r3, r3, #7
 800e82a:	4013      	ands	r3, r2
 800e82c:	d008      	beq.n	800e840 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4924      	ldr	r1, [pc, #144]	@ (800e8cc <I2C_ITSlaveSeqCplt+0xc0>)
 800e83a:	400a      	ands	r2, r1
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	e00c      	b.n	800e85a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	2380      	movs	r3, #128	@ 0x80
 800e844:	021b      	lsls	r3, r3, #8
 800e846:	4013      	ands	r3, r2
 800e848:	d007      	beq.n	800e85a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	491e      	ldr	r1, [pc, #120]	@ (800e8d0 <I2C_ITSlaveSeqCplt+0xc4>)
 800e856:	400a      	ands	r2, r1
 800e858:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2241      	movs	r2, #65	@ 0x41
 800e85e:	5c9b      	ldrb	r3, [r3, r2]
 800e860:	b2db      	uxtb	r3, r3
 800e862:	2b29      	cmp	r3, #41	@ 0x29
 800e864:	d114      	bne.n	800e890 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2241      	movs	r2, #65	@ 0x41
 800e86a:	2128      	movs	r1, #40	@ 0x28
 800e86c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2221      	movs	r2, #33	@ 0x21
 800e872:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2101      	movs	r1, #1
 800e878:	0018      	movs	r0, r3
 800e87a:	f000 fd5f 	bl	800f33c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2240      	movs	r2, #64	@ 0x40
 800e882:	2100      	movs	r1, #0
 800e884:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	0018      	movs	r0, r3
 800e88a:	f7ff f968 	bl	800db5e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e88e:	e019      	b.n	800e8c4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2241      	movs	r2, #65	@ 0x41
 800e894:	5c9b      	ldrb	r3, [r3, r2]
 800e896:	b2db      	uxtb	r3, r3
 800e898:	2b2a      	cmp	r3, #42	@ 0x2a
 800e89a:	d113      	bne.n	800e8c4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2241      	movs	r2, #65	@ 0x41
 800e8a0:	2128      	movs	r1, #40	@ 0x28
 800e8a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2222      	movs	r2, #34	@ 0x22
 800e8a8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2102      	movs	r1, #2
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	f000 fd44 	bl	800f33c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2240      	movs	r2, #64	@ 0x40
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	0018      	movs	r0, r3
 800e8c0:	f7ff f955 	bl	800db6e <HAL_I2C_SlaveRxCpltCallback>
}
 800e8c4:	46c0      	nop			@ (mov r8, r8)
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	b004      	add	sp, #16
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	ffffbfff 	.word	0xffffbfff
 800e8d0:	ffff7fff 	.word	0xffff7fff

0800e8d4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2220      	movs	r2, #32
 800e8e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2241      	movs	r2, #65	@ 0x41
 800e8ee:	5c9b      	ldrb	r3, [r3, r2]
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b21      	cmp	r3, #33	@ 0x21
 800e8f4:	d108      	bne.n	800e908 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	0018      	movs	r0, r3
 800e8fc:	f000 fd1e 	bl	800f33c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2211      	movs	r2, #17
 800e904:	631a      	str	r2, [r3, #48]	@ 0x30
 800e906:	e00d      	b.n	800e924 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2241      	movs	r2, #65	@ 0x41
 800e90c:	5c9b      	ldrb	r3, [r3, r2]
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	2b22      	cmp	r3, #34	@ 0x22
 800e912:	d107      	bne.n	800e924 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2102      	movs	r1, #2
 800e918:	0018      	movs	r0, r3
 800e91a:	f000 fd0f 	bl	800f33c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2212      	movs	r2, #18
 800e922:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	494e      	ldr	r1, [pc, #312]	@ (800ea68 <I2C_ITMasterCplt+0x194>)
 800e930:	400a      	ands	r2, r1
 800e932:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a4b      	ldr	r2, [pc, #300]	@ (800ea6c <I2C_ITMasterCplt+0x198>)
 800e93e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	2210      	movs	r2, #16
 800e944:	4013      	ands	r3, r2
 800e946:	d009      	beq.n	800e95c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2210      	movs	r2, #16
 800e94e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e954:	2204      	movs	r2, #4
 800e956:	431a      	orrs	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2241      	movs	r2, #65	@ 0x41
 800e960:	5c9b      	ldrb	r3, [r3, r2]
 800e962:	b2db      	uxtb	r3, r3
 800e964:	2b60      	cmp	r3, #96	@ 0x60
 800e966:	d109      	bne.n	800e97c <I2C_ITMasterCplt+0xa8>
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	2204      	movs	r2, #4
 800e96c:	4013      	ands	r3, r2
 800e96e:	d005      	beq.n	800e97c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e976:	b2db      	uxtb	r3, r3
 800e978:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800e97a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	0018      	movs	r0, r3
 800e980:	f000 fb19 	bl	800efb6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e988:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2241      	movs	r2, #65	@ 0x41
 800e98e:	5c9b      	ldrb	r3, [r3, r2]
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b60      	cmp	r3, #96	@ 0x60
 800e994:	d002      	beq.n	800e99c <I2C_ITMasterCplt+0xc8>
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d007      	beq.n	800e9ac <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	0011      	movs	r1, r2
 800e9a4:	0018      	movs	r0, r3
 800e9a6:	f000 f9db 	bl	800ed60 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e9aa:	e058      	b.n	800ea5e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2241      	movs	r2, #65	@ 0x41
 800e9b0:	5c9b      	ldrb	r3, [r3, r2]
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	2b21      	cmp	r3, #33	@ 0x21
 800e9b6:	d126      	bne.n	800ea06 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2241      	movs	r2, #65	@ 0x41
 800e9bc:	2120      	movs	r1, #32
 800e9be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2242      	movs	r2, #66	@ 0x42
 800e9ca:	5c9b      	ldrb	r3, [r3, r2]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	2b40      	cmp	r3, #64	@ 0x40
 800e9d0:	d10c      	bne.n	800e9ec <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2242      	movs	r2, #66	@ 0x42
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2240      	movs	r2, #64	@ 0x40
 800e9de:	2100      	movs	r1, #0
 800e9e0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	0018      	movs	r0, r3
 800e9e6:	f7ff f8e2 	bl	800dbae <HAL_I2C_MemTxCpltCallback>
}
 800e9ea:	e038      	b.n	800ea5e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2242      	movs	r2, #66	@ 0x42
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2240      	movs	r2, #64	@ 0x40
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	0018      	movs	r0, r3
 800ea00:	f7ff f89d 	bl	800db3e <HAL_I2C_MasterTxCpltCallback>
}
 800ea04:	e02b      	b.n	800ea5e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2241      	movs	r2, #65	@ 0x41
 800ea0a:	5c9b      	ldrb	r3, [r3, r2]
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	2b22      	cmp	r3, #34	@ 0x22
 800ea10:	d125      	bne.n	800ea5e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2241      	movs	r2, #65	@ 0x41
 800ea16:	2120      	movs	r1, #32
 800ea18:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2242      	movs	r2, #66	@ 0x42
 800ea24:	5c9b      	ldrb	r3, [r3, r2]
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	2b40      	cmp	r3, #64	@ 0x40
 800ea2a:	d10c      	bne.n	800ea46 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2242      	movs	r2, #66	@ 0x42
 800ea30:	2100      	movs	r1, #0
 800ea32:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2240      	movs	r2, #64	@ 0x40
 800ea38:	2100      	movs	r1, #0
 800ea3a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	0018      	movs	r0, r3
 800ea40:	f7ff f8bd 	bl	800dbbe <HAL_I2C_MemRxCpltCallback>
}
 800ea44:	e00b      	b.n	800ea5e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2242      	movs	r2, #66	@ 0x42
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2240      	movs	r2, #64	@ 0x40
 800ea52:	2100      	movs	r1, #0
 800ea54:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	0018      	movs	r0, r3
 800ea5a:	f7ff f878 	bl	800db4e <HAL_I2C_MasterRxCpltCallback>
}
 800ea5e:	46c0      	nop			@ (mov r8, r8)
 800ea60:	46bd      	mov	sp, r7
 800ea62:	b006      	add	sp, #24
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	46c0      	nop			@ (mov r8, r8)
 800ea68:	fe00e800 	.word	0xfe00e800
 800ea6c:	ffff0000 	.word	0xffff0000

0800ea70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b086      	sub	sp, #24
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ea86:	200f      	movs	r0, #15
 800ea88:	183b      	adds	r3, r7, r0
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	2141      	movs	r1, #65	@ 0x41
 800ea8e:	5c52      	ldrb	r2, [r2, r1]
 800ea90:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2220      	movs	r2, #32
 800ea98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ea9a:	183b      	adds	r3, r7, r0
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	2b21      	cmp	r3, #33	@ 0x21
 800eaa0:	d003      	beq.n	800eaaa <I2C_ITSlaveCplt+0x3a>
 800eaa2:	183b      	adds	r3, r7, r0
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	2b29      	cmp	r3, #41	@ 0x29
 800eaa8:	d109      	bne.n	800eabe <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800eaaa:	4a7b      	ldr	r2, [pc, #492]	@ (800ec98 <I2C_ITSlaveCplt+0x228>)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	0011      	movs	r1, r2
 800eab0:	0018      	movs	r0, r3
 800eab2:	f000 fc43 	bl	800f33c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2221      	movs	r2, #33	@ 0x21
 800eaba:	631a      	str	r2, [r3, #48]	@ 0x30
 800eabc:	e011      	b.n	800eae2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800eabe:	220f      	movs	r2, #15
 800eac0:	18bb      	adds	r3, r7, r2
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b22      	cmp	r3, #34	@ 0x22
 800eac6:	d003      	beq.n	800ead0 <I2C_ITSlaveCplt+0x60>
 800eac8:	18bb      	adds	r3, r7, r2
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eace:	d108      	bne.n	800eae2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ead0:	4a72      	ldr	r2, [pc, #456]	@ (800ec9c <I2C_ITSlaveCplt+0x22c>)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	0011      	movs	r1, r2
 800ead6:	0018      	movs	r0, r3
 800ead8:	f000 fc30 	bl	800f33c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2222      	movs	r2, #34	@ 0x22
 800eae0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	685a      	ldr	r2, [r3, #4]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2180      	movs	r1, #128	@ 0x80
 800eaee:	0209      	lsls	r1, r1, #8
 800eaf0:	430a      	orrs	r2, r1
 800eaf2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	685a      	ldr	r2, [r3, #4]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4968      	ldr	r1, [pc, #416]	@ (800eca0 <I2C_ITSlaveCplt+0x230>)
 800eb00:	400a      	ands	r2, r1
 800eb02:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	0018      	movs	r0, r3
 800eb08:	f000 fa55 	bl	800efb6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	2380      	movs	r3, #128	@ 0x80
 800eb10:	01db      	lsls	r3, r3, #7
 800eb12:	4013      	ands	r3, r2
 800eb14:	d013      	beq.n	800eb3e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4960      	ldr	r1, [pc, #384]	@ (800eca4 <I2C_ITSlaveCplt+0x234>)
 800eb22:	400a      	ands	r2, r1
 800eb24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d01f      	beq.n	800eb6e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eb3c:	e017      	b.n	800eb6e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800eb3e:	693a      	ldr	r2, [r7, #16]
 800eb40:	2380      	movs	r3, #128	@ 0x80
 800eb42:	021b      	lsls	r3, r3, #8
 800eb44:	4013      	ands	r3, r2
 800eb46:	d012      	beq.n	800eb6e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4955      	ldr	r1, [pc, #340]	@ (800eca8 <I2C_ITSlaveCplt+0x238>)
 800eb54:	400a      	ands	r2, r1
 800eb56:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d006      	beq.n	800eb6e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	2204      	movs	r2, #4
 800eb72:	4013      	ands	r3, r2
 800eb74:	d020      	beq.n	800ebb8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	2204      	movs	r2, #4
 800eb7a:	4393      	bics	r3, r2
 800eb7c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb88:	b2d2      	uxtb	r2, r2
 800eb8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb90:	1c5a      	adds	r2, r3, #1
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00c      	beq.n	800ebb8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eba2:	3b01      	subs	r3, #1
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d005      	beq.n	800ebce <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebc6:	2204      	movs	r2, #4
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2242      	movs	r2, #66	@ 0x42
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d013      	beq.n	800ec0c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	0011      	movs	r1, r2
 800ebec:	0018      	movs	r0, r3
 800ebee:	f000 f8b7 	bl	800ed60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2241      	movs	r2, #65	@ 0x41
 800ebf6:	5c9b      	ldrb	r3, [r3, r2]
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b28      	cmp	r3, #40	@ 0x28
 800ebfc:	d147      	bne.n	800ec8e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	0011      	movs	r1, r2
 800ec04:	0018      	movs	r0, r3
 800ec06:	f000 f853 	bl	800ecb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ec0a:	e040      	b.n	800ec8e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec10:	4a26      	ldr	r2, [pc, #152]	@ (800ecac <I2C_ITSlaveCplt+0x23c>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d016      	beq.n	800ec44 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	0018      	movs	r0, r3
 800ec1a:	f7ff fdf7 	bl	800e80c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a22      	ldr	r2, [pc, #136]	@ (800ecac <I2C_ITSlaveCplt+0x23c>)
 800ec22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2241      	movs	r2, #65	@ 0x41
 800ec28:	2120      	movs	r1, #32
 800ec2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2240      	movs	r2, #64	@ 0x40
 800ec36:	2100      	movs	r1, #0
 800ec38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	0018      	movs	r0, r3
 800ec3e:	f7fe ffae 	bl	800db9e <HAL_I2C_ListenCpltCallback>
}
 800ec42:	e024      	b.n	800ec8e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2241      	movs	r2, #65	@ 0x41
 800ec48:	5c9b      	ldrb	r3, [r3, r2]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b22      	cmp	r3, #34	@ 0x22
 800ec4e:	d10f      	bne.n	800ec70 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2241      	movs	r2, #65	@ 0x41
 800ec54:	2120      	movs	r1, #32
 800ec56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2240      	movs	r2, #64	@ 0x40
 800ec62:	2100      	movs	r1, #0
 800ec64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	0018      	movs	r0, r3
 800ec6a:	f7fe ff80 	bl	800db6e <HAL_I2C_SlaveRxCpltCallback>
}
 800ec6e:	e00e      	b.n	800ec8e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2241      	movs	r2, #65	@ 0x41
 800ec74:	2120      	movs	r1, #32
 800ec76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2240      	movs	r2, #64	@ 0x40
 800ec82:	2100      	movs	r1, #0
 800ec84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	0018      	movs	r0, r3
 800ec8a:	f7fe ff68 	bl	800db5e <HAL_I2C_SlaveTxCpltCallback>
}
 800ec8e:	46c0      	nop			@ (mov r8, r8)
 800ec90:	46bd      	mov	sp, r7
 800ec92:	b006      	add	sp, #24
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	46c0      	nop			@ (mov r8, r8)
 800ec98:	00008001 	.word	0x00008001
 800ec9c:	00008002 	.word	0x00008002
 800eca0:	fe00e800 	.word	0xfe00e800
 800eca4:	ffffbfff 	.word	0xffffbfff
 800eca8:	ffff7fff 	.word	0xffff7fff
 800ecac:	ffff0000 	.word	0xffff0000

0800ecb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4a26      	ldr	r2, [pc, #152]	@ (800ed58 <I2C_ITListenCplt+0xa8>)
 800ecbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2241      	movs	r2, #65	@ 0x41
 800ecca:	2120      	movs	r1, #32
 800eccc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2242      	movs	r2, #66	@ 0x42
 800ecd2:	2100      	movs	r1, #0
 800ecd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2204      	movs	r2, #4
 800ece0:	4013      	ands	r3, r2
 800ece2:	d022      	beq.n	800ed2a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecee:	b2d2      	uxtb	r2, r2
 800ecf0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf6:	1c5a      	adds	r2, r3, #1
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d012      	beq.n	800ed2a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	3b01      	subs	r3, #1
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed22:	2204      	movs	r2, #4
 800ed24:	431a      	orrs	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ed2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ed5c <I2C_ITListenCplt+0xac>)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	0011      	movs	r1, r2
 800ed30:	0018      	movs	r0, r3
 800ed32:	f000 fb03 	bl	800f33c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2210      	movs	r2, #16
 800ed3c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2240      	movs	r2, #64	@ 0x40
 800ed42:	2100      	movs	r1, #0
 800ed44:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	0018      	movs	r0, r3
 800ed4a:	f7fe ff28 	bl	800db9e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ed4e:	46c0      	nop			@ (mov r8, r8)
 800ed50:	46bd      	mov	sp, r7
 800ed52:	b002      	add	sp, #8
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	46c0      	nop			@ (mov r8, r8)
 800ed58:	ffff0000 	.word	0xffff0000
 800ed5c:	00008003 	.word	0x00008003

0800ed60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ed6a:	200f      	movs	r0, #15
 800ed6c:	183b      	adds	r3, r7, r0
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	2141      	movs	r1, #65	@ 0x41
 800ed72:	5c52      	ldrb	r2, [r2, r1]
 800ed74:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2242      	movs	r2, #66	@ 0x42
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4a72      	ldr	r2, [pc, #456]	@ (800ef4c <I2C_ITError+0x1ec>)
 800ed82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	431a      	orrs	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ed96:	183b      	adds	r3, r7, r0
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	2b28      	cmp	r3, #40	@ 0x28
 800ed9c:	d007      	beq.n	800edae <I2C_ITError+0x4e>
 800ed9e:	183b      	adds	r3, r7, r0
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	2b29      	cmp	r3, #41	@ 0x29
 800eda4:	d003      	beq.n	800edae <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800eda6:	183b      	adds	r3, r7, r0
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800edac:	d10c      	bne.n	800edc8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2103      	movs	r1, #3
 800edb2:	0018      	movs	r0, r3
 800edb4:	f000 fac2 	bl	800f33c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2241      	movs	r2, #65	@ 0x41
 800edbc:	2128      	movs	r1, #40	@ 0x28
 800edbe:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4a63      	ldr	r2, [pc, #396]	@ (800ef50 <I2C_ITError+0x1f0>)
 800edc4:	635a      	str	r2, [r3, #52]	@ 0x34
 800edc6:	e032      	b.n	800ee2e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800edc8:	4a62      	ldr	r2, [pc, #392]	@ (800ef54 <I2C_ITError+0x1f4>)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	0011      	movs	r1, r2
 800edce:	0018      	movs	r0, r3
 800edd0:	f000 fab4 	bl	800f33c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	0018      	movs	r0, r3
 800edd8:	f000 f8ed 	bl	800efb6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2241      	movs	r2, #65	@ 0x41
 800ede0:	5c9b      	ldrb	r3, [r3, r2]
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b60      	cmp	r3, #96	@ 0x60
 800ede6:	d01f      	beq.n	800ee28 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2241      	movs	r2, #65	@ 0x41
 800edec:	2120      	movs	r1, #32
 800edee:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	699b      	ldr	r3, [r3, #24]
 800edf6:	2220      	movs	r2, #32
 800edf8:	4013      	ands	r3, r2
 800edfa:	2b20      	cmp	r3, #32
 800edfc:	d114      	bne.n	800ee28 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	699b      	ldr	r3, [r3, #24]
 800ee04:	2210      	movs	r2, #16
 800ee06:	4013      	ands	r3, r2
 800ee08:	2b10      	cmp	r3, #16
 800ee0a:	d109      	bne.n	800ee20 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2210      	movs	r2, #16
 800ee12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee18:	2204      	movs	r2, #4
 800ee1a:	431a      	orrs	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2220      	movs	r2, #32
 800ee26:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee32:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d03b      	beq.n	800eeb4 <I2C_ITError+0x154>
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	2b11      	cmp	r3, #17
 800ee40:	d002      	beq.n	800ee48 <I2C_ITError+0xe8>
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b21      	cmp	r3, #33	@ 0x21
 800ee46:	d135      	bne.n	800eeb4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	2380      	movs	r3, #128	@ 0x80
 800ee50:	01db      	lsls	r3, r3, #7
 800ee52:	401a      	ands	r2, r3
 800ee54:	2380      	movs	r3, #128	@ 0x80
 800ee56:	01db      	lsls	r3, r3, #7
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d107      	bne.n	800ee6c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	493c      	ldr	r1, [pc, #240]	@ (800ef58 <I2C_ITError+0x1f8>)
 800ee68:	400a      	ands	r2, r1
 800ee6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee70:	0018      	movs	r0, r3
 800ee72:	f7fd ff8e 	bl	800cd92 <HAL_DMA_GetState>
 800ee76:	0003      	movs	r3, r0
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d016      	beq.n	800eeaa <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee80:	4a36      	ldr	r2, [pc, #216]	@ (800ef5c <I2C_ITError+0x1fc>)
 800ee82:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2240      	movs	r2, #64	@ 0x40
 800ee88:	2100      	movs	r1, #0
 800ee8a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee90:	0018      	movs	r0, r3
 800ee92:	f7fd fe89 	bl	800cba8 <HAL_DMA_Abort_IT>
 800ee96:	1e03      	subs	r3, r0, #0
 800ee98:	d051      	beq.n	800ef3e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eea4:	0018      	movs	r0, r3
 800eea6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eea8:	e049      	b.n	800ef3e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	0018      	movs	r0, r3
 800eeae:	f000 f859 	bl	800ef64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eeb2:	e044      	b.n	800ef3e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d03b      	beq.n	800ef34 <I2C_ITError+0x1d4>
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	2b12      	cmp	r3, #18
 800eec0:	d002      	beq.n	800eec8 <I2C_ITError+0x168>
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	2b22      	cmp	r3, #34	@ 0x22
 800eec6:	d135      	bne.n	800ef34 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	2380      	movs	r3, #128	@ 0x80
 800eed0:	021b      	lsls	r3, r3, #8
 800eed2:	401a      	ands	r2, r3
 800eed4:	2380      	movs	r3, #128	@ 0x80
 800eed6:	021b      	lsls	r3, r3, #8
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d107      	bne.n	800eeec <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	491e      	ldr	r1, [pc, #120]	@ (800ef60 <I2C_ITError+0x200>)
 800eee8:	400a      	ands	r2, r1
 800eeea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eef0:	0018      	movs	r0, r3
 800eef2:	f7fd ff4e 	bl	800cd92 <HAL_DMA_GetState>
 800eef6:	0003      	movs	r3, r0
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d016      	beq.n	800ef2a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef00:	4a16      	ldr	r2, [pc, #88]	@ (800ef5c <I2C_ITError+0x1fc>)
 800ef02:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2240      	movs	r2, #64	@ 0x40
 800ef08:	2100      	movs	r1, #0
 800ef0a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef10:	0018      	movs	r0, r3
 800ef12:	f7fd fe49 	bl	800cba8 <HAL_DMA_Abort_IT>
 800ef16:	1e03      	subs	r3, r0, #0
 800ef18:	d013      	beq.n	800ef42 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef24:	0018      	movs	r0, r3
 800ef26:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ef28:	e00b      	b.n	800ef42 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	0018      	movs	r0, r3
 800ef2e:	f000 f819 	bl	800ef64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ef32:	e006      	b.n	800ef42 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	0018      	movs	r0, r3
 800ef38:	f000 f814 	bl	800ef64 <I2C_TreatErrorCallback>
  }
}
 800ef3c:	e002      	b.n	800ef44 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ef3e:	46c0      	nop			@ (mov r8, r8)
 800ef40:	e000      	b.n	800ef44 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ef42:	46c0      	nop			@ (mov r8, r8)
}
 800ef44:	46c0      	nop			@ (mov r8, r8)
 800ef46:	46bd      	mov	sp, r7
 800ef48:	b004      	add	sp, #16
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	ffff0000 	.word	0xffff0000
 800ef50:	0800de45 	.word	0x0800de45
 800ef54:	00008003 	.word	0x00008003
 800ef58:	ffffbfff 	.word	0xffffbfff
 800ef5c:	0800f16f 	.word	0x0800f16f
 800ef60:	ffff7fff 	.word	0xffff7fff

0800ef64 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2241      	movs	r2, #65	@ 0x41
 800ef70:	5c9b      	ldrb	r3, [r3, r2]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b60      	cmp	r3, #96	@ 0x60
 800ef76:	d10f      	bne.n	800ef98 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2241      	movs	r2, #65	@ 0x41
 800ef7c:	2120      	movs	r1, #32
 800ef7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2240      	movs	r2, #64	@ 0x40
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	0018      	movs	r0, r3
 800ef92:	f7fe fe24 	bl	800dbde <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ef96:	e00a      	b.n	800efae <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2240      	movs	r2, #64	@ 0x40
 800efa2:	2100      	movs	r1, #0
 800efa4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	0018      	movs	r0, r3
 800efaa:	f7fe fe10 	bl	800dbce <HAL_I2C_ErrorCallback>
}
 800efae:	46c0      	nop			@ (mov r8, r8)
 800efb0:	46bd      	mov	sp, r7
 800efb2:	b002      	add	sp, #8
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	2202      	movs	r2, #2
 800efc6:	4013      	ands	r3, r2
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d103      	bne.n	800efd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2200      	movs	r2, #0
 800efd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	699b      	ldr	r3, [r3, #24]
 800efda:	2201      	movs	r2, #1
 800efdc:	4013      	ands	r3, r2
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d007      	beq.n	800eff2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	699a      	ldr	r2, [r3, #24]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2101      	movs	r1, #1
 800efee:	430a      	orrs	r2, r1
 800eff0:	619a      	str	r2, [r3, #24]
  }
}
 800eff2:	46c0      	nop			@ (mov r8, r8)
 800eff4:	46bd      	mov	sp, r7
 800eff6:	b002      	add	sp, #8
 800eff8:	bd80      	pop	{r7, pc}
	...

0800effc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f008:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4920      	ldr	r1, [pc, #128]	@ (800f098 <I2C_DMAMasterTransmitCplt+0x9c>)
 800f016:	400a      	ands	r2, r1
 800f018:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f01e:	b29b      	uxth	r3, r3
 800f020:	2b00      	cmp	r3, #0
 800f022:	d105      	bne.n	800f030 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2120      	movs	r1, #32
 800f028:	0018      	movs	r0, r3
 800f02a:	f000 f8f9 	bl	800f220 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800f02e:	e02e      	b.n	800f08e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f038:	189a      	adds	r2, r3, r2
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f042:	b29b      	uxth	r3, r3
 800f044:	2bff      	cmp	r3, #255	@ 0xff
 800f046:	d903      	bls.n	800f050 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	22ff      	movs	r2, #255	@ 0xff
 800f04c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f04e:	e004      	b.n	800f05a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f054:	b29a      	uxth	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f062:	0019      	movs	r1, r3
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	3328      	adds	r3, #40	@ 0x28
 800f06a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800f070:	f7fd fcf4 	bl	800ca5c <HAL_DMA_Start_IT>
 800f074:	1e03      	subs	r3, r0, #0
 800f076:	d005      	beq.n	800f084 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2110      	movs	r1, #16
 800f07c:	0018      	movs	r0, r3
 800f07e:	f7ff fe6f 	bl	800ed60 <I2C_ITError>
}
 800f082:	e004      	b.n	800f08e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2140      	movs	r1, #64	@ 0x40
 800f088:	0018      	movs	r0, r3
 800f08a:	f000 f8c9 	bl	800f220 <I2C_Enable_IRQ>
}
 800f08e:	46c0      	nop			@ (mov r8, r8)
 800f090:	46bd      	mov	sp, r7
 800f092:	b004      	add	sp, #16
 800f094:	bd80      	pop	{r7, pc}
 800f096:	46c0      	nop			@ (mov r8, r8)
 800f098:	ffffbfff 	.word	0xffffbfff

0800f09c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0a8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4920      	ldr	r1, [pc, #128]	@ (800f138 <I2C_DMAMasterReceiveCplt+0x9c>)
 800f0b6:	400a      	ands	r2, r1
 800f0b8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d105      	bne.n	800f0d0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2120      	movs	r1, #32
 800f0c8:	0018      	movs	r0, r3
 800f0ca:	f000 f8a9 	bl	800f220 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800f0ce:	e02e      	b.n	800f12e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f0d8:	189a      	adds	r2, r3, r2
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	2bff      	cmp	r3, #255	@ 0xff
 800f0e6:	d903      	bls.n	800f0f0 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	22ff      	movs	r2, #255	@ 0xff
 800f0ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f0ee:	e004      	b.n	800f0fa <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3324      	adds	r3, #36	@ 0x24
 800f104:	0019      	movs	r1, r3
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800f110:	f7fd fca4 	bl	800ca5c <HAL_DMA_Start_IT>
 800f114:	1e03      	subs	r3, r0, #0
 800f116:	d005      	beq.n	800f124 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2110      	movs	r1, #16
 800f11c:	0018      	movs	r0, r3
 800f11e:	f7ff fe1f 	bl	800ed60 <I2C_ITError>
}
 800f122:	e004      	b.n	800f12e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2140      	movs	r1, #64	@ 0x40
 800f128:	0018      	movs	r0, r3
 800f12a:	f000 f879 	bl	800f220 <I2C_Enable_IRQ>
}
 800f12e:	46c0      	nop			@ (mov r8, r8)
 800f130:	46bd      	mov	sp, r7
 800f132:	b004      	add	sp, #16
 800f134:	bd80      	pop	{r7, pc}
 800f136:	46c0      	nop			@ (mov r8, r8)
 800f138:	ffff7fff 	.word	0xffff7fff

0800f13c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f148:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	685a      	ldr	r2, [r3, #4]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2180      	movs	r1, #128	@ 0x80
 800f156:	0209      	lsls	r1, r1, #8
 800f158:	430a      	orrs	r2, r1
 800f15a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2110      	movs	r1, #16
 800f160:	0018      	movs	r0, r3
 800f162:	f7ff fdfd 	bl	800ed60 <I2C_ITError>
}
 800f166:	46c0      	nop			@ (mov r8, r8)
 800f168:	46bd      	mov	sp, r7
 800f16a:	b004      	add	sp, #16
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b084      	sub	sp, #16
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f17a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f180:	2b00      	cmp	r3, #0
 800f182:	d003      	beq.n	800f18c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f188:	2200      	movs	r2, #0
 800f18a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f190:	2b00      	cmp	r3, #0
 800f192:	d003      	beq.n	800f19c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f198:	2200      	movs	r2, #0
 800f19a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	0018      	movs	r0, r3
 800f1a0:	f7ff fee0 	bl	800ef64 <I2C_TreatErrorCallback>
}
 800f1a4:	46c0      	nop			@ (mov r8, r8)
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	b004      	add	sp, #16
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f1ac:	b590      	push	{r4, r7, lr}
 800f1ae:	b087      	sub	sp, #28
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	0008      	movs	r0, r1
 800f1b6:	0011      	movs	r1, r2
 800f1b8:	607b      	str	r3, [r7, #4]
 800f1ba:	240a      	movs	r4, #10
 800f1bc:	193b      	adds	r3, r7, r4
 800f1be:	1c02      	adds	r2, r0, #0
 800f1c0:	801a      	strh	r2, [r3, #0]
 800f1c2:	2009      	movs	r0, #9
 800f1c4:	183b      	adds	r3, r7, r0
 800f1c6:	1c0a      	adds	r2, r1, #0
 800f1c8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f1ca:	193b      	adds	r3, r7, r4
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	059b      	lsls	r3, r3, #22
 800f1d0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f1d2:	183b      	adds	r3, r7, r0
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	0419      	lsls	r1, r3, #16
 800f1d8:	23ff      	movs	r3, #255	@ 0xff
 800f1da:	041b      	lsls	r3, r3, #16
 800f1dc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f1de:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	005b      	lsls	r3, r3, #1
 800f1ea:	085b      	lsrs	r3, r3, #1
 800f1ec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1f6:	0d51      	lsrs	r1, r2, #21
 800f1f8:	2280      	movs	r2, #128	@ 0x80
 800f1fa:	00d2      	lsls	r2, r2, #3
 800f1fc:	400a      	ands	r2, r1
 800f1fe:	4907      	ldr	r1, [pc, #28]	@ (800f21c <I2C_TransferConfig+0x70>)
 800f200:	430a      	orrs	r2, r1
 800f202:	43d2      	mvns	r2, r2
 800f204:	401a      	ands	r2, r3
 800f206:	0011      	movs	r1, r2
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	697a      	ldr	r2, [r7, #20]
 800f20e:	430a      	orrs	r2, r1
 800f210:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f212:	46c0      	nop			@ (mov r8, r8)
 800f214:	46bd      	mov	sp, r7
 800f216:	b007      	add	sp, #28
 800f218:	bd90      	pop	{r4, r7, pc}
 800f21a:	46c0      	nop			@ (mov r8, r8)
 800f21c:	03ff63ff 	.word	0x03ff63ff

0800f220 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	000a      	movs	r2, r1
 800f22a:	1cbb      	adds	r3, r7, #2
 800f22c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800f22e:	2300      	movs	r3, #0
 800f230:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f236:	4b3e      	ldr	r3, [pc, #248]	@ (800f330 <I2C_Enable_IRQ+0x110>)
 800f238:	429a      	cmp	r2, r3
 800f23a:	d035      	beq.n	800f2a8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800f240:	4b3c      	ldr	r3, [pc, #240]	@ (800f334 <I2C_Enable_IRQ+0x114>)
 800f242:	429a      	cmp	r2, r3
 800f244:	d030      	beq.n	800f2a8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800f24a:	4b3b      	ldr	r3, [pc, #236]	@ (800f338 <I2C_Enable_IRQ+0x118>)
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d02b      	beq.n	800f2a8 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f250:	1cbb      	adds	r3, r7, #2
 800f252:	2200      	movs	r2, #0
 800f254:	5e9b      	ldrsh	r3, [r3, r2]
 800f256:	2b00      	cmp	r3, #0
 800f258:	da03      	bge.n	800f262 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	22b8      	movs	r2, #184	@ 0xb8
 800f25e:	4313      	orrs	r3, r2
 800f260:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f262:	1cbb      	adds	r3, r7, #2
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	2201      	movs	r2, #1
 800f268:	4013      	ands	r3, r2
 800f26a:	d003      	beq.n	800f274 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	22f2      	movs	r2, #242	@ 0xf2
 800f270:	4313      	orrs	r3, r2
 800f272:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f274:	1cbb      	adds	r3, r7, #2
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	2202      	movs	r2, #2
 800f27a:	4013      	ands	r3, r2
 800f27c:	d003      	beq.n	800f286 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	22f4      	movs	r2, #244	@ 0xf4
 800f282:	4313      	orrs	r3, r2
 800f284:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f286:	1cbb      	adds	r3, r7, #2
 800f288:	881b      	ldrh	r3, [r3, #0]
 800f28a:	2b10      	cmp	r3, #16
 800f28c:	d103      	bne.n	800f296 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2290      	movs	r2, #144	@ 0x90
 800f292:	4313      	orrs	r3, r2
 800f294:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f296:	1cbb      	adds	r3, r7, #2
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	2b20      	cmp	r3, #32
 800f29c:	d13c      	bne.n	800f318 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2220      	movs	r2, #32
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f2a6:	e037      	b.n	800f318 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f2a8:	1cbb      	adds	r3, r7, #2
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	5e9b      	ldrsh	r3, [r3, r2]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	da03      	bge.n	800f2ba <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	22b8      	movs	r2, #184	@ 0xb8
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f2ba:	1cbb      	adds	r3, r7, #2
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	d003      	beq.n	800f2cc <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	22f2      	movs	r2, #242	@ 0xf2
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f2cc:	1cbb      	adds	r3, r7, #2
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	2202      	movs	r2, #2
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	d003      	beq.n	800f2de <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	22f4      	movs	r2, #244	@ 0xf4
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f2de:	1cbb      	adds	r3, r7, #2
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	2b10      	cmp	r3, #16
 800f2e4:	d103      	bne.n	800f2ee <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2290      	movs	r2, #144	@ 0x90
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f2ee:	1cbb      	adds	r3, r7, #2
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	2b20      	cmp	r3, #32
 800f2f4:	d103      	bne.n	800f2fe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2260      	movs	r2, #96	@ 0x60
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f302:	4b0d      	ldr	r3, [pc, #52]	@ (800f338 <I2C_Enable_IRQ+0x118>)
 800f304:	429a      	cmp	r2, r3
 800f306:	d007      	beq.n	800f318 <I2C_Enable_IRQ+0xf8>
 800f308:	1cbb      	adds	r3, r7, #2
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	2b40      	cmp	r3, #64	@ 0x40
 800f30e:	d103      	bne.n	800f318 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2240      	movs	r2, #64	@ 0x40
 800f314:	4313      	orrs	r3, r2
 800f316:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	6819      	ldr	r1, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	430a      	orrs	r2, r1
 800f326:	601a      	str	r2, [r3, #0]
}
 800f328:	46c0      	nop			@ (mov r8, r8)
 800f32a:	46bd      	mov	sp, r7
 800f32c:	b004      	add	sp, #16
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	0800e045 	.word	0x0800e045
 800f334:	0800e475 	.word	0x0800e475
 800f338:	0800e23d 	.word	0x0800e23d

0800f33c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	000a      	movs	r2, r1
 800f346:	1cbb      	adds	r3, r7, #2
 800f348:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800f34a:	2300      	movs	r3, #0
 800f34c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f34e:	1cbb      	adds	r3, r7, #2
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	2201      	movs	r2, #1
 800f354:	4013      	ands	r3, r2
 800f356:	d010      	beq.n	800f37a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2242      	movs	r2, #66	@ 0x42
 800f35c:	4313      	orrs	r3, r2
 800f35e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2241      	movs	r2, #65	@ 0x41
 800f364:	5c9b      	ldrb	r3, [r3, r2]
 800f366:	b2db      	uxtb	r3, r3
 800f368:	001a      	movs	r2, r3
 800f36a:	2328      	movs	r3, #40	@ 0x28
 800f36c:	4013      	ands	r3, r2
 800f36e:	2b28      	cmp	r3, #40	@ 0x28
 800f370:	d003      	beq.n	800f37a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	22b0      	movs	r2, #176	@ 0xb0
 800f376:	4313      	orrs	r3, r2
 800f378:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f37a:	1cbb      	adds	r3, r7, #2
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	2202      	movs	r2, #2
 800f380:	4013      	ands	r3, r2
 800f382:	d010      	beq.n	800f3a6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2244      	movs	r2, #68	@ 0x44
 800f388:	4313      	orrs	r3, r2
 800f38a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2241      	movs	r2, #65	@ 0x41
 800f390:	5c9b      	ldrb	r3, [r3, r2]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	001a      	movs	r2, r3
 800f396:	2328      	movs	r3, #40	@ 0x28
 800f398:	4013      	ands	r3, r2
 800f39a:	2b28      	cmp	r3, #40	@ 0x28
 800f39c:	d003      	beq.n	800f3a6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	22b0      	movs	r2, #176	@ 0xb0
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f3a6:	1cbb      	adds	r3, r7, #2
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	5e9b      	ldrsh	r3, [r3, r2]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	da03      	bge.n	800f3b8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	22b8      	movs	r2, #184	@ 0xb8
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f3b8:	1cbb      	adds	r3, r7, #2
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	2b10      	cmp	r3, #16
 800f3be:	d103      	bne.n	800f3c8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2290      	movs	r2, #144	@ 0x90
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f3c8:	1cbb      	adds	r3, r7, #2
 800f3ca:	881b      	ldrh	r3, [r3, #0]
 800f3cc:	2b20      	cmp	r3, #32
 800f3ce:	d103      	bne.n	800f3d8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2220      	movs	r2, #32
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800f3d8:	1cbb      	adds	r3, r7, #2
 800f3da:	881b      	ldrh	r3, [r3, #0]
 800f3dc:	2b40      	cmp	r3, #64	@ 0x40
 800f3de:	d103      	bne.n	800f3e8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2240      	movs	r2, #64	@ 0x40
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	43d9      	mvns	r1, r3
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	400a      	ands	r2, r1
 800f3f8:	601a      	str	r2, [r3, #0]
}
 800f3fa:	46c0      	nop			@ (mov r8, r8)
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	b004      	add	sp, #16
 800f400:	bd80      	pop	{r7, pc}
	...

0800f404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2241      	movs	r2, #65	@ 0x41
 800f412:	5c9b      	ldrb	r3, [r3, r2]
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b20      	cmp	r3, #32
 800f418:	d138      	bne.n	800f48c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2240      	movs	r2, #64	@ 0x40
 800f41e:	5c9b      	ldrb	r3, [r3, r2]
 800f420:	2b01      	cmp	r3, #1
 800f422:	d101      	bne.n	800f428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f424:	2302      	movs	r3, #2
 800f426:	e032      	b.n	800f48e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2240      	movs	r2, #64	@ 0x40
 800f42c:	2101      	movs	r1, #1
 800f42e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2241      	movs	r2, #65	@ 0x41
 800f434:	2124      	movs	r1, #36	@ 0x24
 800f436:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2101      	movs	r1, #1
 800f444:	438a      	bics	r2, r1
 800f446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4911      	ldr	r1, [pc, #68]	@ (800f498 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800f454:	400a      	ands	r2, r1
 800f456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	6819      	ldr	r1, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	683a      	ldr	r2, [r7, #0]
 800f464:	430a      	orrs	r2, r1
 800f466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2101      	movs	r1, #1
 800f474:	430a      	orrs	r2, r1
 800f476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2241      	movs	r2, #65	@ 0x41
 800f47c:	2120      	movs	r1, #32
 800f47e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2240      	movs	r2, #64	@ 0x40
 800f484:	2100      	movs	r1, #0
 800f486:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f488:	2300      	movs	r3, #0
 800f48a:	e000      	b.n	800f48e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f48c:	2302      	movs	r3, #2
  }
}
 800f48e:	0018      	movs	r0, r3
 800f490:	46bd      	mov	sp, r7
 800f492:	b002      	add	sp, #8
 800f494:	bd80      	pop	{r7, pc}
 800f496:	46c0      	nop			@ (mov r8, r8)
 800f498:	ffffefff 	.word	0xffffefff

0800f49c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2241      	movs	r2, #65	@ 0x41
 800f4aa:	5c9b      	ldrb	r3, [r3, r2]
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b20      	cmp	r3, #32
 800f4b0:	d139      	bne.n	800f526 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2240      	movs	r2, #64	@ 0x40
 800f4b6:	5c9b      	ldrb	r3, [r3, r2]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d101      	bne.n	800f4c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f4bc:	2302      	movs	r3, #2
 800f4be:	e033      	b.n	800f528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2240      	movs	r2, #64	@ 0x40
 800f4c4:	2101      	movs	r1, #1
 800f4c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2241      	movs	r2, #65	@ 0x41
 800f4cc:	2124      	movs	r1, #36	@ 0x24
 800f4ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2101      	movs	r1, #1
 800f4dc:	438a      	bics	r2, r1
 800f4de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	4a11      	ldr	r2, [pc, #68]	@ (800f530 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	021b      	lsls	r3, r3, #8
 800f4f4:	68fa      	ldr	r2, [r7, #12]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2101      	movs	r1, #1
 800f50e:	430a      	orrs	r2, r1
 800f510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2241      	movs	r2, #65	@ 0x41
 800f516:	2120      	movs	r1, #32
 800f518:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2240      	movs	r2, #64	@ 0x40
 800f51e:	2100      	movs	r1, #0
 800f520:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	e000      	b.n	800f528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f526:	2302      	movs	r3, #2
  }
}
 800f528:	0018      	movs	r0, r3
 800f52a:	46bd      	mov	sp, r7
 800f52c:	b004      	add	sp, #16
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	fffff0ff 	.word	0xfffff0ff

0800f534 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b088      	sub	sp, #32
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d101      	bne.n	800f546 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	e0e1      	b.n	800f70a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2235      	movs	r2, #53	@ 0x35
 800f54a:	5c9b      	ldrb	r3, [r3, r2]
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d107      	bne.n	800f562 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2234      	movs	r2, #52	@ 0x34
 800f556:	2100      	movs	r1, #0
 800f558:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	0018      	movs	r0, r3
 800f55e:	f7f7 fdc7 	bl	80070f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2235      	movs	r2, #53	@ 0x35
 800f566:	2102      	movs	r1, #2
 800f568:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	69da      	ldr	r2, [r3, #28]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4967      	ldr	r1, [pc, #412]	@ (800f714 <HAL_I2S_Init+0x1e0>)
 800f576:	400a      	ands	r2, r1
 800f578:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2202      	movs	r2, #2
 800f580:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	695b      	ldr	r3, [r3, #20]
 800f586:	2b02      	cmp	r3, #2
 800f588:	d073      	beq.n	800f672 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d102      	bne.n	800f598 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800f592:	2310      	movs	r3, #16
 800f594:	617b      	str	r3, [r7, #20]
 800f596:	e001      	b.n	800f59c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800f598:	2320      	movs	r3, #32
 800f59a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	2b20      	cmp	r3, #32
 800f5a2:	d802      	bhi.n	800f5aa <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800f5aa:	f002 fe51 	bl	8012250 <HAL_RCC_GetSysClockFreq>
 800f5ae:	0003      	movs	r3, r0
 800f5b0:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	691a      	ldr	r2, [r3, #16]
 800f5b6:	2380      	movs	r3, #128	@ 0x80
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d131      	bne.n	800f622 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d016      	beq.n	800f5f4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	0019      	movs	r1, r3
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f7f0 fde9 	bl	80001a4 <__udivsi3>
 800f5d2:	0003      	movs	r3, r0
 800f5d4:	001a      	movs	r2, r3
 800f5d6:	0013      	movs	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	189b      	adds	r3, r3, r2
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	001a      	movs	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	695b      	ldr	r3, [r3, #20]
 800f5e4:	0019      	movs	r1, r3
 800f5e6:	0010      	movs	r0, r2
 800f5e8:	f7f0 fddc 	bl	80001a4 <__udivsi3>
 800f5ec:	0003      	movs	r3, r0
 800f5ee:	3305      	adds	r3, #5
 800f5f0:	613b      	str	r3, [r7, #16]
 800f5f2:	e02a      	b.n	800f64a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	00db      	lsls	r3, r3, #3
 800f5f8:	0019      	movs	r1, r3
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f7f0 fdd2 	bl	80001a4 <__udivsi3>
 800f600:	0003      	movs	r3, r0
 800f602:	001a      	movs	r2, r3
 800f604:	0013      	movs	r3, r2
 800f606:	009b      	lsls	r3, r3, #2
 800f608:	189b      	adds	r3, r3, r2
 800f60a:	005b      	lsls	r3, r3, #1
 800f60c:	001a      	movs	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	695b      	ldr	r3, [r3, #20]
 800f612:	0019      	movs	r1, r3
 800f614:	0010      	movs	r0, r2
 800f616:	f7f0 fdc5 	bl	80001a4 <__udivsi3>
 800f61a:	0003      	movs	r3, r0
 800f61c:	3305      	adds	r3, #5
 800f61e:	613b      	str	r3, [r7, #16]
 800f620:	e013      	b.n	800f64a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f622:	6979      	ldr	r1, [r7, #20]
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f7f0 fdbd 	bl	80001a4 <__udivsi3>
 800f62a:	0003      	movs	r3, r0
 800f62c:	001a      	movs	r2, r3
 800f62e:	0013      	movs	r3, r2
 800f630:	009b      	lsls	r3, r3, #2
 800f632:	189b      	adds	r3, r3, r2
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	001a      	movs	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	695b      	ldr	r3, [r3, #20]
 800f63c:	0019      	movs	r1, r3
 800f63e:	0010      	movs	r0, r2
 800f640:	f7f0 fdb0 	bl	80001a4 <__udivsi3>
 800f644:	0003      	movs	r3, r0
 800f646:	3305      	adds	r3, #5
 800f648:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	210a      	movs	r1, #10
 800f64e:	0018      	movs	r0, r3
 800f650:	f7f0 fda8 	bl	80001a4 <__udivsi3>
 800f654:	0003      	movs	r3, r0
 800f656:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	2201      	movs	r2, #1
 800f65c:	4013      	ands	r3, r2
 800f65e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	085b      	lsrs	r3, r3, #1
 800f668:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	021b      	lsls	r3, r3, #8
 800f66e:	61bb      	str	r3, [r7, #24]
 800f670:	e003      	b.n	800f67a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800f672:	2302      	movs	r3, #2
 800f674:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800f676:	2300      	movs	r3, #0
 800f678:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d902      	bls.n	800f686 <HAL_I2S_Init+0x152>
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	2bff      	cmp	r3, #255	@ 0xff
 800f684:	d907      	bls.n	800f696 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f68a:	2210      	movs	r2, #16
 800f68c:	431a      	orrs	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800f692:	2301      	movs	r3, #1
 800f694:	e039      	b.n	800f70a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	691a      	ldr	r2, [r3, #16]
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	431a      	orrs	r2, r3
 800f69e:	0011      	movs	r1, r2
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	69fa      	ldr	r2, [r7, #28]
 800f6a6:	430a      	orrs	r2, r1
 800f6a8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	69db      	ldr	r3, [r3, #28]
 800f6b0:	4a18      	ldr	r2, [pc, #96]	@ (800f714 <HAL_I2S_Init+0x1e0>)
 800f6b2:	401a      	ands	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6859      	ldr	r1, [r3, #4]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	4319      	orrs	r1, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	4319      	orrs	r1, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	699b      	ldr	r3, [r3, #24]
 800f6c8:	430b      	orrs	r3, r1
 800f6ca:	431a      	orrs	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2180      	movs	r1, #128	@ 0x80
 800f6d2:	0109      	lsls	r1, r1, #4
 800f6d4:	430a      	orrs	r2, r1
 800f6d6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	2b30      	cmp	r3, #48	@ 0x30
 800f6de:	d003      	beq.n	800f6e8 <HAL_I2S_Init+0x1b4>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	2bb0      	cmp	r3, #176	@ 0xb0
 800f6e6:	d108      	bne.n	800f6fa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	69da      	ldr	r2, [r3, #28]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2180      	movs	r1, #128	@ 0x80
 800f6f4:	0149      	lsls	r1, r1, #5
 800f6f6:	430a      	orrs	r2, r1
 800f6f8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2235      	movs	r2, #53	@ 0x35
 800f704:	2101      	movs	r1, #1
 800f706:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f708:	2300      	movs	r3, #0
}
 800f70a:	0018      	movs	r0, r3
 800f70c:	46bd      	mov	sp, r7
 800f70e:	b008      	add	sp, #32
 800f710:	bd80      	pop	{r7, pc}
 800f712:	46c0      	nop			@ (mov r8, r8)
 800f714:	fffff040 	.word	0xfffff040

0800f718 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b086      	sub	sp, #24
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	1dbb      	adds	r3, r7, #6
 800f724:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d003      	beq.n	800f734 <HAL_I2S_Receive_DMA+0x1c>
 800f72c:	1dbb      	adds	r3, r7, #6
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d101      	bne.n	800f738 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800f734:	2301      	movs	r3, #1
 800f736:	e0a6      	b.n	800f886 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2234      	movs	r2, #52	@ 0x34
 800f73c:	5c9b      	ldrb	r3, [r3, r2]
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	2b01      	cmp	r3, #1
 800f742:	d101      	bne.n	800f748 <HAL_I2S_Receive_DMA+0x30>
 800f744:	2302      	movs	r3, #2
 800f746:	e09e      	b.n	800f886 <HAL_I2S_Receive_DMA+0x16e>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2234      	movs	r2, #52	@ 0x34
 800f74c:	2101      	movs	r1, #1
 800f74e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2235      	movs	r2, #53	@ 0x35
 800f754:	5c9b      	ldrb	r3, [r3, r2]
 800f756:	b2db      	uxtb	r3, r3
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d005      	beq.n	800f768 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2234      	movs	r2, #52	@ 0x34
 800f760:	2100      	movs	r1, #0
 800f762:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800f764:	2302      	movs	r3, #2
 800f766:	e08e      	b.n	800f886 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2235      	movs	r2, #53	@ 0x35
 800f76c:	2104      	movs	r1, #4
 800f76e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2200      	movs	r2, #0
 800f774:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	68ba      	ldr	r2, [r7, #8]
 800f77a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	2207      	movs	r2, #7
 800f784:	4013      	ands	r3, r2
 800f786:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d002      	beq.n	800f794 <HAL_I2S_Receive_DMA+0x7c>
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2b05      	cmp	r3, #5
 800f792:	d10c      	bne.n	800f7ae <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800f794:	1dbb      	adds	r3, r7, #6
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	18db      	adds	r3, r3, r3
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800f7a0:	1dbb      	adds	r3, r7, #6
 800f7a2:	881b      	ldrh	r3, [r3, #0]
 800f7a4:	18db      	adds	r3, r3, r3
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f7ac:	e007      	b.n	800f7be <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	1dba      	adds	r2, r7, #6
 800f7b2:	8812      	ldrh	r2, [r2, #0]
 800f7b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	1dba      	adds	r2, r7, #6
 800f7ba:	8812      	ldrh	r2, [r2, #0]
 800f7bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7c2:	4a33      	ldr	r2, [pc, #204]	@ (800f890 <HAL_I2S_Receive_DMA+0x178>)
 800f7c4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ca:	4a32      	ldr	r2, [pc, #200]	@ (800f894 <HAL_I2S_Receive_DMA+0x17c>)
 800f7cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7d2:	4a31      	ldr	r2, [pc, #196]	@ (800f898 <HAL_I2S_Receive_DMA+0x180>)
 800f7d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	69da      	ldr	r2, [r3, #28]
 800f7dc:	23c0      	movs	r3, #192	@ 0xc0
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	401a      	ands	r2, r3
 800f7e2:	23c0      	movs	r3, #192	@ 0xc0
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d10a      	bne.n	800f800 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	613b      	str	r3, [r7, #16]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	613b      	str	r3, [r7, #16]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	613b      	str	r3, [r7, #16]
 800f7fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	330c      	adds	r3, #12
 800f80a:	0019      	movs	r1, r3
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f810:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f816:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f818:	f7fd f920 	bl	800ca5c <HAL_DMA_Start_IT>
 800f81c:	1e03      	subs	r3, r0, #0
 800f81e:	d00f      	beq.n	800f840 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f824:	2208      	movs	r2, #8
 800f826:	431a      	orrs	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2235      	movs	r2, #53	@ 0x35
 800f830:	2101      	movs	r1, #1
 800f832:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2234      	movs	r2, #52	@ 0x34
 800f838:	2100      	movs	r1, #0
 800f83a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f83c:	2301      	movs	r3, #1
 800f83e:	e022      	b.n	800f886 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	69da      	ldr	r2, [r3, #28]
 800f846:	2380      	movs	r3, #128	@ 0x80
 800f848:	00db      	lsls	r3, r3, #3
 800f84a:	4013      	ands	r3, r2
 800f84c:	d108      	bne.n	800f860 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	69da      	ldr	r2, [r3, #28]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2180      	movs	r1, #128	@ 0x80
 800f85a:	00c9      	lsls	r1, r1, #3
 800f85c:	430a      	orrs	r2, r1
 800f85e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	4013      	ands	r3, r2
 800f86a:	d107      	bne.n	800f87c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	685a      	ldr	r2, [r3, #4]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2101      	movs	r1, #1
 800f878:	430a      	orrs	r2, r1
 800f87a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2234      	movs	r2, #52	@ 0x34
 800f880:	2100      	movs	r1, #0
 800f882:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800f884:	2300      	movs	r3, #0
}
 800f886:	0018      	movs	r0, r3
 800f888:	46bd      	mov	sp, r7
 800f88a:	b006      	add	sp, #24
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	46c0      	nop			@ (mov r8, r8)
 800f890:	0800fa79 	.word	0x0800fa79
 800f894:	0800fa35 	.word	0x0800fa35
 800f898:	0800fa97 	.word	0x0800fa97

0800f89c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f8a4:	2317      	movs	r3, #23
 800f8a6:	18fb      	adds	r3, r7, r3
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685a      	ldr	r2, [r3, #4]
 800f8b0:	2380      	movs	r3, #128	@ 0x80
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d003      	beq.n	800f8c0 <HAL_I2S_DMAStop+0x24>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d158      	bne.n	800f972 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d010      	beq.n	800f8ea <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8cc:	0018      	movs	r0, r3
 800f8ce:	f7fd f92b 	bl	800cb28 <HAL_DMA_Abort>
 800f8d2:	1e03      	subs	r3, r0, #0
 800f8d4:	d009      	beq.n	800f8ea <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8da:	2208      	movs	r2, #8
 800f8dc:	431a      	orrs	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f8e2:	2317      	movs	r3, #23
 800f8e4:	18fb      	adds	r3, r7, r3
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	2364      	movs	r3, #100	@ 0x64
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	2102      	movs	r1, #2
 800f8f2:	f000 f8f7 	bl	800fae4 <I2S_WaitFlagStateUntilTimeout>
 800f8f6:	1e03      	subs	r3, r0, #0
 800f8f8:	d00d      	beq.n	800f916 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8fe:	2201      	movs	r2, #1
 800f900:	431a      	orrs	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2235      	movs	r2, #53	@ 0x35
 800f90a:	2101      	movs	r1, #1
 800f90c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f90e:	2317      	movs	r3, #23
 800f910:	18fb      	adds	r3, r7, r3
 800f912:	2201      	movs	r2, #1
 800f914:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	2364      	movs	r3, #100	@ 0x64
 800f91a:	2200      	movs	r2, #0
 800f91c:	2180      	movs	r1, #128	@ 0x80
 800f91e:	f000 f8e1 	bl	800fae4 <I2S_WaitFlagStateUntilTimeout>
 800f922:	1e03      	subs	r3, r0, #0
 800f924:	d00d      	beq.n	800f942 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f92a:	2201      	movs	r2, #1
 800f92c:	431a      	orrs	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2235      	movs	r2, #53	@ 0x35
 800f936:	2101      	movs	r1, #1
 800f938:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f93a:	2317      	movs	r3, #23
 800f93c:	18fb      	adds	r3, r7, r3
 800f93e:	2201      	movs	r2, #1
 800f940:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	69da      	ldr	r2, [r3, #28]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4938      	ldr	r1, [pc, #224]	@ (800fa30 <HAL_I2S_DMAStop+0x194>)
 800f94e:	400a      	ands	r2, r1
 800f950:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800f952:	2300      	movs	r3, #0
 800f954:	613b      	str	r3, [r7, #16]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	613b      	str	r3, [r7, #16]
 800f95e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	685a      	ldr	r2, [r3, #4]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2102      	movs	r1, #2
 800f96c:	438a      	bics	r2, r1
 800f96e:	605a      	str	r2, [r3, #4]
 800f970:	e053      	b.n	800fa1a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685a      	ldr	r2, [r3, #4]
 800f976:	23c0      	movs	r3, #192	@ 0xc0
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d005      	beq.n	800f98a <HAL_I2S_DMAStop+0xee>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	685a      	ldr	r2, [r3, #4]
 800f982:	2380      	movs	r3, #128	@ 0x80
 800f984:	005b      	lsls	r3, r3, #1
 800f986:	429a      	cmp	r2, r3
 800f988:	d147      	bne.n	800fa1a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d010      	beq.n	800f9b4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f996:	0018      	movs	r0, r3
 800f998:	f7fd f8c6 	bl	800cb28 <HAL_DMA_Abort>
 800f99c:	1e03      	subs	r3, r0, #0
 800f99e:	d009      	beq.n	800f9b4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9a4:	2208      	movs	r2, #8
 800f9a6:	431a      	orrs	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f9ac:	2317      	movs	r3, #23
 800f9ae:	18fb      	adds	r3, r7, r3
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	69da      	ldr	r2, [r3, #28]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	491c      	ldr	r1, [pc, #112]	@ (800fa30 <HAL_I2S_DMAStop+0x194>)
 800f9c0:	400a      	ands	r2, r1
 800f9c2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	60fb      	str	r3, [r7, #12]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	60fb      	str	r3, [r7, #12]
 800f9d8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	438a      	bics	r2, r1
 800f9e8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	685a      	ldr	r2, [r3, #4]
 800f9ee:	2380      	movs	r3, #128	@ 0x80
 800f9f0:	005b      	lsls	r3, r3, #1
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d10e      	bne.n	800fa14 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9fa:	2240      	movs	r2, #64	@ 0x40
 800f9fc:	431a      	orrs	r2, r3
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2235      	movs	r2, #53	@ 0x35
 800fa06:	2101      	movs	r1, #1
 800fa08:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800fa0a:	2317      	movs	r3, #23
 800fa0c:	18fb      	adds	r3, r7, r3
 800fa0e:	2201      	movs	r2, #1
 800fa10:	701a      	strb	r2, [r3, #0]
 800fa12:	e002      	b.n	800fa1a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2235      	movs	r2, #53	@ 0x35
 800fa1e:	2101      	movs	r1, #1
 800fa20:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800fa22:	2317      	movs	r3, #23
 800fa24:	18fb      	adds	r3, r7, r3
 800fa26:	781b      	ldrb	r3, [r3, #0]
}
 800fa28:	0018      	movs	r0, r3
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	b006      	add	sp, #24
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	fffffbff 	.word	0xfffffbff

0800fa34 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa40:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10e      	bne.n	800fa68 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	685a      	ldr	r2, [r3, #4]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2101      	movs	r1, #1
 800fa56:	438a      	bics	r2, r1
 800fa58:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2235      	movs	r2, #53	@ 0x35
 800fa64:	2101      	movs	r1, #1
 800fa66:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	0018      	movs	r0, r3
 800fa6c:	f7fa f9c0 	bl	8009df0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800fa70:	46c0      	nop			@ (mov r8, r8)
 800fa72:	46bd      	mov	sp, r7
 800fa74:	b004      	add	sp, #16
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa84:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	0018      	movs	r0, r3
 800fa8a:	f7fa f99f 	bl	8009dcc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800fa8e:	46c0      	nop			@ (mov r8, r8)
 800fa90:	46bd      	mov	sp, r7
 800fa92:	b004      	add	sp, #16
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b084      	sub	sp, #16
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faa2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	685a      	ldr	r2, [r3, #4]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2103      	movs	r1, #3
 800fab0:	438a      	bics	r2, r1
 800fab2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2235      	movs	r2, #53	@ 0x35
 800fac4:	2101      	movs	r1, #1
 800fac6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800facc:	2208      	movs	r2, #8
 800face:	431a      	orrs	r2, r3
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	0018      	movs	r0, r3
 800fad8:	f7fa f9d8 	bl	8009e8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800fadc:	46c0      	nop			@ (mov r8, r8)
 800fade:	46bd      	mov	sp, r7
 800fae0:	b004      	add	sp, #16
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	603b      	str	r3, [r7, #0]
 800faf0:	1dfb      	adds	r3, r7, #7
 800faf2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800faf4:	f7fc fa92 	bl	800c01c <HAL_GetTick>
 800faf8:	0003      	movs	r3, r0
 800fafa:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800fafc:	e017      	b.n	800fb2e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	3301      	adds	r3, #1
 800fb02:	d014      	beq.n	800fb2e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800fb04:	f7fc fa8a 	bl	800c01c <HAL_GetTick>
 800fb08:	0002      	movs	r2, r0
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	1ad3      	subs	r3, r2, r3
 800fb0e:	683a      	ldr	r2, [r7, #0]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d902      	bls.n	800fb1a <I2S_WaitFlagStateUntilTimeout+0x36>
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d109      	bne.n	800fb2e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2235      	movs	r2, #53	@ 0x35
 800fb1e:	2101      	movs	r1, #1
 800fb20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2234      	movs	r2, #52	@ 0x34
 800fb26:	2100      	movs	r1, #0
 800fb28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	e00f      	b.n	800fb4e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	4013      	ands	r3, r2
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	425a      	negs	r2, r3
 800fb3e:	4153      	adcs	r3, r2
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	001a      	movs	r2, r3
 800fb44:	1dfb      	adds	r3, r7, #7
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d1d8      	bne.n	800fafe <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	0018      	movs	r0, r3
 800fb50:	46bd      	mov	sp, r7
 800fb52:	b006      	add	sp, #24
 800fb54:	bd80      	pop	{r7, pc}
	...

0800fb58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800fb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb5a:	b08b      	sub	sp, #44	@ 0x2c
 800fb5c:	af06      	add	r7, sp, #24
 800fb5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d101      	bne.n	800fb6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800fb66:	2301      	movs	r3, #1
 800fb68:	e0f0      	b.n	800fd4c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a79      	ldr	r2, [pc, #484]	@ (800fd54 <HAL_PCD_Init+0x1fc>)
 800fb6e:	5c9b      	ldrb	r3, [r3, r2]
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d108      	bne.n	800fb88 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	23aa      	movs	r3, #170	@ 0xaa
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	0018      	movs	r0, r3
 800fb84:	f009 fdd4 	bl	8019730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4a72      	ldr	r2, [pc, #456]	@ (800fd54 <HAL_PCD_Init+0x1fc>)
 800fb8c:	2103      	movs	r1, #3
 800fb8e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	0018      	movs	r0, r3
 800fb96:	f005 fd87 	bl	80156a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fb9a:	230f      	movs	r3, #15
 800fb9c:	18fb      	adds	r3, r7, r3
 800fb9e:	2200      	movs	r2, #0
 800fba0:	701a      	strb	r2, [r3, #0]
 800fba2:	e049      	b.n	800fc38 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800fba4:	200f      	movs	r0, #15
 800fba6:	183b      	adds	r3, r7, r0
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	6879      	ldr	r1, [r7, #4]
 800fbac:	1c5a      	adds	r2, r3, #1
 800fbae:	0013      	movs	r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	189b      	adds	r3, r3, r2
 800fbb4:	00db      	lsls	r3, r3, #3
 800fbb6:	18cb      	adds	r3, r1, r3
 800fbb8:	3301      	adds	r3, #1
 800fbba:	2201      	movs	r2, #1
 800fbbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800fbbe:	183b      	adds	r3, r7, r0
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	6879      	ldr	r1, [r7, #4]
 800fbc4:	1c5a      	adds	r2, r3, #1
 800fbc6:	0013      	movs	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	189b      	adds	r3, r3, r2
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	183a      	adds	r2, r7, r0
 800fbd0:	7812      	ldrb	r2, [r2, #0]
 800fbd2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800fbd4:	183b      	adds	r3, r7, r0
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	6879      	ldr	r1, [r7, #4]
 800fbda:	1c5a      	adds	r2, r3, #1
 800fbdc:	0013      	movs	r3, r2
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	189b      	adds	r3, r3, r2
 800fbe2:	00db      	lsls	r3, r3, #3
 800fbe4:	18cb      	adds	r3, r1, r3
 800fbe6:	3303      	adds	r3, #3
 800fbe8:	2200      	movs	r2, #0
 800fbea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800fbec:	183b      	adds	r3, r7, r0
 800fbee:	781a      	ldrb	r2, [r3, #0]
 800fbf0:	6879      	ldr	r1, [r7, #4]
 800fbf2:	0013      	movs	r3, r2
 800fbf4:	009b      	lsls	r3, r3, #2
 800fbf6:	189b      	adds	r3, r3, r2
 800fbf8:	00db      	lsls	r3, r3, #3
 800fbfa:	18cb      	adds	r3, r1, r3
 800fbfc:	3338      	adds	r3, #56	@ 0x38
 800fbfe:	2200      	movs	r2, #0
 800fc00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800fc02:	183b      	adds	r3, r7, r0
 800fc04:	781a      	ldrb	r2, [r3, #0]
 800fc06:	6879      	ldr	r1, [r7, #4]
 800fc08:	0013      	movs	r3, r2
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	189b      	adds	r3, r3, r2
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	18cb      	adds	r3, r1, r3
 800fc12:	333c      	adds	r3, #60	@ 0x3c
 800fc14:	2200      	movs	r2, #0
 800fc16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800fc18:	183b      	adds	r3, r7, r0
 800fc1a:	781a      	ldrb	r2, [r3, #0]
 800fc1c:	6879      	ldr	r1, [r7, #4]
 800fc1e:	0013      	movs	r3, r2
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	189b      	adds	r3, r3, r2
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	18cb      	adds	r3, r1, r3
 800fc28:	3340      	adds	r3, #64	@ 0x40
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fc2e:	183b      	adds	r3, r7, r0
 800fc30:	781a      	ldrb	r2, [r3, #0]
 800fc32:	183b      	adds	r3, r7, r0
 800fc34:	3201      	adds	r2, #1
 800fc36:	701a      	strb	r2, [r3, #0]
 800fc38:	210f      	movs	r1, #15
 800fc3a:	187b      	adds	r3, r7, r1
 800fc3c:	781a      	ldrb	r2, [r3, #0]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d3ae      	bcc.n	800fba4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fc46:	187b      	adds	r3, r7, r1
 800fc48:	2200      	movs	r2, #0
 800fc4a:	701a      	strb	r2, [r3, #0]
 800fc4c:	e056      	b.n	800fcfc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800fc4e:	240f      	movs	r4, #15
 800fc50:	193b      	adds	r3, r7, r4
 800fc52:	781a      	ldrb	r2, [r3, #0]
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	236a      	movs	r3, #106	@ 0x6a
 800fc58:	33ff      	adds	r3, #255	@ 0xff
 800fc5a:	0019      	movs	r1, r3
 800fc5c:	0013      	movs	r3, r2
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	189b      	adds	r3, r3, r2
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	18c3      	adds	r3, r0, r3
 800fc66:	185b      	adds	r3, r3, r1
 800fc68:	2200      	movs	r2, #0
 800fc6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800fc6c:	193b      	adds	r3, r7, r4
 800fc6e:	781a      	ldrb	r2, [r3, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	23b4      	movs	r3, #180	@ 0xb4
 800fc74:	0059      	lsls	r1, r3, #1
 800fc76:	0013      	movs	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	189b      	adds	r3, r3, r2
 800fc7c:	00db      	lsls	r3, r3, #3
 800fc7e:	18c3      	adds	r3, r0, r3
 800fc80:	185b      	adds	r3, r3, r1
 800fc82:	193a      	adds	r2, r7, r4
 800fc84:	7812      	ldrb	r2, [r2, #0]
 800fc86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800fc88:	193b      	adds	r3, r7, r4
 800fc8a:	781a      	ldrb	r2, [r3, #0]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	236c      	movs	r3, #108	@ 0x6c
 800fc90:	33ff      	adds	r3, #255	@ 0xff
 800fc92:	0019      	movs	r1, r3
 800fc94:	0013      	movs	r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	189b      	adds	r3, r3, r2
 800fc9a:	00db      	lsls	r3, r3, #3
 800fc9c:	18c3      	adds	r3, r0, r3
 800fc9e:	185b      	adds	r3, r3, r1
 800fca0:	2200      	movs	r2, #0
 800fca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800fca4:	193b      	adds	r3, r7, r4
 800fca6:	781a      	ldrb	r2, [r3, #0]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	23bc      	movs	r3, #188	@ 0xbc
 800fcac:	0059      	lsls	r1, r3, #1
 800fcae:	0013      	movs	r3, r2
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	189b      	adds	r3, r3, r2
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	18c3      	adds	r3, r0, r3
 800fcb8:	185b      	adds	r3, r3, r1
 800fcba:	2200      	movs	r2, #0
 800fcbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800fcbe:	193b      	adds	r3, r7, r4
 800fcc0:	781a      	ldrb	r2, [r3, #0]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	23be      	movs	r3, #190	@ 0xbe
 800fcc6:	0059      	lsls	r1, r3, #1
 800fcc8:	0013      	movs	r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	189b      	adds	r3, r3, r2
 800fcce:	00db      	lsls	r3, r3, #3
 800fcd0:	18c3      	adds	r3, r0, r3
 800fcd2:	185b      	adds	r3, r3, r1
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800fcd8:	193b      	adds	r3, r7, r4
 800fcda:	781a      	ldrb	r2, [r3, #0]
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	23c0      	movs	r3, #192	@ 0xc0
 800fce0:	0059      	lsls	r1, r3, #1
 800fce2:	0013      	movs	r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	189b      	adds	r3, r3, r2
 800fce8:	00db      	lsls	r3, r3, #3
 800fcea:	18c3      	adds	r3, r0, r3
 800fcec:	185b      	adds	r3, r3, r1
 800fcee:	2200      	movs	r2, #0
 800fcf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fcf2:	193b      	adds	r3, r7, r4
 800fcf4:	781a      	ldrb	r2, [r3, #0]
 800fcf6:	193b      	adds	r3, r7, r4
 800fcf8:	3201      	adds	r2, #1
 800fcfa:	701a      	strb	r2, [r3, #0]
 800fcfc:	230f      	movs	r3, #15
 800fcfe:	18fb      	adds	r3, r7, r3
 800fd00:	781a      	ldrb	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d3a1      	bcc.n	800fc4e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6818      	ldr	r0, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	466a      	mov	r2, sp
 800fd12:	0011      	movs	r1, r2
 800fd14:	001a      	movs	r2, r3
 800fd16:	3210      	adds	r2, #16
 800fd18:	ca70      	ldmia	r2!, {r4, r5, r6}
 800fd1a:	c170      	stmia	r1!, {r4, r5, r6}
 800fd1c:	ca30      	ldmia	r2!, {r4, r5}
 800fd1e:	c130      	stmia	r1!, {r4, r5}
 800fd20:	6859      	ldr	r1, [r3, #4]
 800fd22:	689a      	ldr	r2, [r3, #8]
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	f005 fcd9 	bl	80156dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2224      	movs	r2, #36	@ 0x24
 800fd2e:	2100      	movs	r1, #0
 800fd30:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4a07      	ldr	r2, [pc, #28]	@ (800fd54 <HAL_PCD_Init+0x1fc>)
 800fd36:	2101      	movs	r1, #1
 800fd38:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d103      	bne.n	800fd4a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	0018      	movs	r0, r3
 800fd46:	f001 fd23 	bl	8011790 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800fd4a:	2300      	movs	r3, #0
}
 800fd4c:	0018      	movs	r0, r3
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	b005      	add	sp, #20
 800fd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd54:	000002a9 	.word	0x000002a9

0800fd58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	23aa      	movs	r3, #170	@ 0xaa
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	5cd3      	ldrb	r3, [r2, r3]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d101      	bne.n	800fd70 <HAL_PCD_Start+0x18>
 800fd6c:	2302      	movs	r3, #2
 800fd6e:	e014      	b.n	800fd9a <HAL_PCD_Start+0x42>
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	23aa      	movs	r3, #170	@ 0xaa
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	2101      	movs	r1, #1
 800fd78:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	0018      	movs	r0, r3
 800fd80:	f005 fc7c 	bl	801567c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	0018      	movs	r0, r3
 800fd8a:	f007 fc7f 	bl	801768c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	23aa      	movs	r3, #170	@ 0xaa
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	2100      	movs	r1, #0
 800fd96:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	0018      	movs	r0, r3
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	b002      	add	sp, #8
 800fda0:	bd80      	pop	{r7, pc}
	...

0800fda4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	0018      	movs	r0, r3
 800fdb2:	f007 fc81 	bl	80176b8 <USB_ReadInterrupts>
 800fdb6:	0003      	movs	r3, r0
 800fdb8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800fdba:	68fa      	ldr	r2, [r7, #12]
 800fdbc:	2380      	movs	r3, #128	@ 0x80
 800fdbe:	021b      	lsls	r3, r3, #8
 800fdc0:	4013      	ands	r3, r2
 800fdc2:	d004      	beq.n	800fdce <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	0018      	movs	r0, r3
 800fdc8:	f000 fb62 	bl	8010490 <PCD_EP_ISR_Handler>

    return;
 800fdcc:	e11d      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800fdce:	68fa      	ldr	r2, [r7, #12]
 800fdd0:	2380      	movs	r3, #128	@ 0x80
 800fdd2:	00db      	lsls	r3, r3, #3
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	d015      	beq.n	800fe04 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	2244      	movs	r2, #68	@ 0x44
 800fdde:	5a9b      	ldrh	r3, [r3, r2]
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	498a      	ldr	r1, [pc, #552]	@ (8010010 <HAL_PCD_IRQHandler+0x26c>)
 800fde8:	400a      	ands	r2, r1
 800fdea:	b291      	uxth	r1, r2
 800fdec:	2244      	movs	r2, #68	@ 0x44
 800fdee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	0018      	movs	r0, r3
 800fdf4:	f009 fd1f 	bl	8019836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	0018      	movs	r0, r3
 800fdfe:	f000 f915 	bl	801002c <HAL_PCD_SetAddress>

    return;
 800fe02:	e102      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	2380      	movs	r3, #128	@ 0x80
 800fe08:	01db      	lsls	r3, r3, #7
 800fe0a:	4013      	ands	r3, r2
 800fe0c:	d00c      	beq.n	800fe28 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2244      	movs	r2, #68	@ 0x44
 800fe14:	5a9b      	ldrh	r3, [r3, r2]
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	497d      	ldr	r1, [pc, #500]	@ (8010014 <HAL_PCD_IRQHandler+0x270>)
 800fe1e:	400a      	ands	r2, r1
 800fe20:	b291      	uxth	r1, r2
 800fe22:	2244      	movs	r2, #68	@ 0x44
 800fe24:	5299      	strh	r1, [r3, r2]

    return;
 800fe26:	e0f0      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800fe28:	68fa      	ldr	r2, [r7, #12]
 800fe2a:	2380      	movs	r3, #128	@ 0x80
 800fe2c:	019b      	lsls	r3, r3, #6
 800fe2e:	4013      	ands	r3, r2
 800fe30:	d00c      	beq.n	800fe4c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2244      	movs	r2, #68	@ 0x44
 800fe38:	5a9b      	ldrh	r3, [r3, r2]
 800fe3a:	b29a      	uxth	r2, r3
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4975      	ldr	r1, [pc, #468]	@ (8010018 <HAL_PCD_IRQHandler+0x274>)
 800fe42:	400a      	ands	r2, r1
 800fe44:	b291      	uxth	r1, r2
 800fe46:	2244      	movs	r2, #68	@ 0x44
 800fe48:	5299      	strh	r1, [r3, r2]

    return;
 800fe4a:	e0de      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	2380      	movs	r3, #128	@ 0x80
 800fe50:	015b      	lsls	r3, r3, #5
 800fe52:	4013      	ands	r3, r2
 800fe54:	d038      	beq.n	800fec8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2240      	movs	r2, #64	@ 0x40
 800fe5c:	5a9b      	ldrh	r3, [r3, r2]
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2104      	movs	r1, #4
 800fe66:	438a      	bics	r2, r1
 800fe68:	b291      	uxth	r1, r2
 800fe6a:	2240      	movs	r2, #64	@ 0x40
 800fe6c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2240      	movs	r2, #64	@ 0x40
 800fe74:	5a9b      	ldrh	r3, [r3, r2]
 800fe76:	b29a      	uxth	r2, r3
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2108      	movs	r1, #8
 800fe7e:	438a      	bics	r2, r1
 800fe80:	b291      	uxth	r1, r2
 800fe82:	2240      	movs	r2, #64	@ 0x40
 800fe84:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	23b8      	movs	r3, #184	@ 0xb8
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	5cd3      	ldrb	r3, [r2, r3]
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	d109      	bne.n	800fea6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	23b8      	movs	r3, #184	@ 0xb8
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	2100      	movs	r1, #0
 800fe9a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2100      	movs	r1, #0
 800fea0:	0018      	movs	r0, r3
 800fea2:	f001 fc9f 	bl	80117e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	0018      	movs	r0, r3
 800feaa:	f009 fd05 	bl	80198b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2244      	movs	r2, #68	@ 0x44
 800feb4:	5a9b      	ldrh	r3, [r3, r2]
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4957      	ldr	r1, [pc, #348]	@ (801001c <HAL_PCD_IRQHandler+0x278>)
 800febe:	400a      	ands	r2, r1
 800fec0:	b291      	uxth	r1, r2
 800fec2:	2244      	movs	r2, #68	@ 0x44
 800fec4:	5299      	strh	r1, [r3, r2]

    return;
 800fec6:	e0a0      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	2380      	movs	r3, #128	@ 0x80
 800fecc:	011b      	lsls	r3, r3, #4
 800fece:	4013      	ands	r3, r2
 800fed0:	d028      	beq.n	800ff24 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2240      	movs	r2, #64	@ 0x40
 800fed8:	5a9b      	ldrh	r3, [r3, r2]
 800feda:	b29a      	uxth	r2, r3
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2108      	movs	r1, #8
 800fee2:	430a      	orrs	r2, r1
 800fee4:	b291      	uxth	r1, r2
 800fee6:	2240      	movs	r2, #64	@ 0x40
 800fee8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2244      	movs	r2, #68	@ 0x44
 800fef0:	5a9b      	ldrh	r3, [r3, r2]
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4949      	ldr	r1, [pc, #292]	@ (8010020 <HAL_PCD_IRQHandler+0x27c>)
 800fefa:	400a      	ands	r2, r1
 800fefc:	b291      	uxth	r1, r2
 800fefe:	2244      	movs	r2, #68	@ 0x44
 800ff00:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2240      	movs	r2, #64	@ 0x40
 800ff08:	5a9b      	ldrh	r3, [r3, r2]
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2104      	movs	r1, #4
 800ff12:	430a      	orrs	r2, r1
 800ff14:	b291      	uxth	r1, r2
 800ff16:	2240      	movs	r2, #64	@ 0x40
 800ff18:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	0018      	movs	r0, r3
 800ff1e:	f009 fcaf 	bl	8019880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800ff22:	e072      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2280      	movs	r2, #128	@ 0x80
 800ff28:	4013      	ands	r3, r2
 800ff2a:	d046      	beq.n	800ffba <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2244      	movs	r2, #68	@ 0x44
 800ff32:	5a9b      	ldrh	r3, [r3, r2]
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2180      	movs	r1, #128	@ 0x80
 800ff3c:	438a      	bics	r2, r1
 800ff3e:	b291      	uxth	r1, r2
 800ff40:	2244      	movs	r2, #68	@ 0x44
 800ff42:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	23b8      	movs	r3, #184	@ 0xb8
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	5cd3      	ldrb	r3, [r2, r3]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d12f      	bne.n	800ffb0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2240      	movs	r2, #64	@ 0x40
 800ff56:	5a9b      	ldrh	r3, [r3, r2]
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2104      	movs	r1, #4
 800ff60:	430a      	orrs	r2, r1
 800ff62:	b291      	uxth	r1, r2
 800ff64:	2240      	movs	r2, #64	@ 0x40
 800ff66:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2240      	movs	r2, #64	@ 0x40
 800ff6e:	5a9b      	ldrh	r3, [r3, r2]
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2108      	movs	r1, #8
 800ff78:	430a      	orrs	r2, r1
 800ff7a:	b291      	uxth	r1, r2
 800ff7c:	2240      	movs	r2, #64	@ 0x40
 800ff7e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	23b8      	movs	r3, #184	@ 0xb8
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	2101      	movs	r1, #1
 800ff88:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2254      	movs	r2, #84	@ 0x54
 800ff90:	5a9b      	ldrh	r3, [r3, r2]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	089b      	lsrs	r3, r3, #2
 800ff96:	223c      	movs	r2, #60	@ 0x3c
 800ff98:	4013      	ands	r3, r2
 800ff9a:	0019      	movs	r1, r3
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	23b9      	movs	r3, #185	@ 0xb9
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2101      	movs	r1, #1
 800ffa8:	0018      	movs	r0, r3
 800ffaa:	f001 fc1b 	bl	80117e4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800ffae:	e02c      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	0018      	movs	r0, r3
 800ffb4:	f009 fc64 	bl	8019880 <HAL_PCD_SuspendCallback>
    return;
 800ffb8:	e027      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	2380      	movs	r3, #128	@ 0x80
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	d010      	beq.n	800ffe6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2244      	movs	r2, #68	@ 0x44
 800ffca:	5a9b      	ldrh	r3, [r3, r2]
 800ffcc:	b29a      	uxth	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	4914      	ldr	r1, [pc, #80]	@ (8010024 <HAL_PCD_IRQHandler+0x280>)
 800ffd4:	400a      	ands	r2, r1
 800ffd6:	b291      	uxth	r1, r2
 800ffd8:	2244      	movs	r2, #68	@ 0x44
 800ffda:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	0018      	movs	r0, r3
 800ffe0:	f009 fc1a 	bl	8019818 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800ffe4:	e011      	b.n	801000a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	2380      	movs	r3, #128	@ 0x80
 800ffea:	005b      	lsls	r3, r3, #1
 800ffec:	4013      	ands	r3, r2
 800ffee:	d00c      	beq.n	801000a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2244      	movs	r2, #68	@ 0x44
 800fff6:	5a9b      	ldrh	r3, [r3, r2]
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	490a      	ldr	r1, [pc, #40]	@ (8010028 <HAL_PCD_IRQHandler+0x284>)
 8010000:	400a      	ands	r2, r1
 8010002:	b291      	uxth	r1, r2
 8010004:	2244      	movs	r2, #68	@ 0x44
 8010006:	5299      	strh	r1, [r3, r2]

    return;
 8010008:	46c0      	nop			@ (mov r8, r8)
  }
}
 801000a:	46bd      	mov	sp, r7
 801000c:	b004      	add	sp, #16
 801000e:	bd80      	pop	{r7, pc}
 8010010:	fffffbff 	.word	0xfffffbff
 8010014:	ffffbfff 	.word	0xffffbfff
 8010018:	ffffdfff 	.word	0xffffdfff
 801001c:	ffffefff 	.word	0xffffefff
 8010020:	fffff7ff 	.word	0xfffff7ff
 8010024:	fffffdff 	.word	0xfffffdff
 8010028:	fffffeff 	.word	0xfffffeff

0801002c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	000a      	movs	r2, r1
 8010036:	1cfb      	adds	r3, r7, #3
 8010038:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	23aa      	movs	r3, #170	@ 0xaa
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	5cd3      	ldrb	r3, [r2, r3]
 8010042:	2b01      	cmp	r3, #1
 8010044:	d101      	bne.n	801004a <HAL_PCD_SetAddress+0x1e>
 8010046:	2302      	movs	r3, #2
 8010048:	e017      	b.n	801007a <HAL_PCD_SetAddress+0x4e>
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	23aa      	movs	r3, #170	@ 0xaa
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	2101      	movs	r1, #1
 8010052:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	1cfa      	adds	r2, r7, #3
 8010058:	2124      	movs	r1, #36	@ 0x24
 801005a:	7812      	ldrb	r2, [r2, #0]
 801005c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	1cfb      	adds	r3, r7, #3
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	0019      	movs	r1, r3
 8010068:	0010      	movs	r0, r2
 801006a:	f007 fafb 	bl	8017664 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	23aa      	movs	r3, #170	@ 0xaa
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	2100      	movs	r1, #0
 8010076:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8010078:	2300      	movs	r3, #0
}
 801007a:	0018      	movs	r0, r3
 801007c:	46bd      	mov	sp, r7
 801007e:	b002      	add	sp, #8
 8010080:	bd80      	pop	{r7, pc}

08010082 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8010082:	b590      	push	{r4, r7, lr}
 8010084:	b085      	sub	sp, #20
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	000c      	movs	r4, r1
 801008c:	0010      	movs	r0, r2
 801008e:	0019      	movs	r1, r3
 8010090:	1cfb      	adds	r3, r7, #3
 8010092:	1c22      	adds	r2, r4, #0
 8010094:	701a      	strb	r2, [r3, #0]
 8010096:	003b      	movs	r3, r7
 8010098:	1c02      	adds	r2, r0, #0
 801009a:	801a      	strh	r2, [r3, #0]
 801009c:	1cbb      	adds	r3, r7, #2
 801009e:	1c0a      	adds	r2, r1, #0
 80100a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80100a2:	230b      	movs	r3, #11
 80100a4:	18fb      	adds	r3, r7, r3
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80100aa:	1cfb      	adds	r3, r7, #3
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	b25b      	sxtb	r3, r3
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	da0f      	bge.n	80100d4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80100b4:	1cfb      	adds	r3, r7, #3
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2207      	movs	r2, #7
 80100ba:	4013      	ands	r3, r2
 80100bc:	1c5a      	adds	r2, r3, #1
 80100be:	0013      	movs	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	189b      	adds	r3, r3, r2
 80100c4:	00db      	lsls	r3, r3, #3
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	18d3      	adds	r3, r2, r3
 80100ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2201      	movs	r2, #1
 80100d0:	705a      	strb	r2, [r3, #1]
 80100d2:	e00f      	b.n	80100f4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80100d4:	1cfb      	adds	r3, r7, #3
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	2207      	movs	r2, #7
 80100da:	401a      	ands	r2, r3
 80100dc:	0013      	movs	r3, r2
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	189b      	adds	r3, r3, r2
 80100e2:	00db      	lsls	r3, r3, #3
 80100e4:	3369      	adds	r3, #105	@ 0x69
 80100e6:	33ff      	adds	r3, #255	@ 0xff
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	18d3      	adds	r3, r2, r3
 80100ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2200      	movs	r2, #0
 80100f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80100f4:	1cfb      	adds	r3, r7, #3
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	2207      	movs	r2, #7
 80100fa:	4013      	ands	r3, r2
 80100fc:	b2da      	uxtb	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8010102:	003b      	movs	r3, r7
 8010104:	881a      	ldrh	r2, [r3, #0]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	1cba      	adds	r2, r7, #2
 801010e:	7812      	ldrb	r2, [r2, #0]
 8010110:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8010112:	1cbb      	adds	r3, r7, #2
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	2b02      	cmp	r3, #2
 8010118:	d102      	bne.n	8010120 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2200      	movs	r2, #0
 801011e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	23aa      	movs	r3, #170	@ 0xaa
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	5cd3      	ldrb	r3, [r2, r3]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d101      	bne.n	8010130 <HAL_PCD_EP_Open+0xae>
 801012c:	2302      	movs	r3, #2
 801012e:	e013      	b.n	8010158 <HAL_PCD_EP_Open+0xd6>
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	23aa      	movs	r3, #170	@ 0xaa
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	2101      	movs	r1, #1
 8010138:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68fa      	ldr	r2, [r7, #12]
 8010140:	0011      	movs	r1, r2
 8010142:	0018      	movs	r0, r3
 8010144:	f005 faf2 	bl	801572c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	23aa      	movs	r3, #170	@ 0xaa
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	2100      	movs	r1, #0
 8010150:	54d1      	strb	r1, [r2, r3]

  return ret;
 8010152:	230b      	movs	r3, #11
 8010154:	18fb      	adds	r3, r7, r3
 8010156:	781b      	ldrb	r3, [r3, #0]
}
 8010158:	0018      	movs	r0, r3
 801015a:	46bd      	mov	sp, r7
 801015c:	b005      	add	sp, #20
 801015e:	bd90      	pop	{r4, r7, pc}

08010160 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	000a      	movs	r2, r1
 801016a:	1cfb      	adds	r3, r7, #3
 801016c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801016e:	1cfb      	adds	r3, r7, #3
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	b25b      	sxtb	r3, r3
 8010174:	2b00      	cmp	r3, #0
 8010176:	da0f      	bge.n	8010198 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010178:	1cfb      	adds	r3, r7, #3
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	2207      	movs	r2, #7
 801017e:	4013      	ands	r3, r2
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	0013      	movs	r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	189b      	adds	r3, r3, r2
 8010188:	00db      	lsls	r3, r3, #3
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	18d3      	adds	r3, r2, r3
 801018e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2201      	movs	r2, #1
 8010194:	705a      	strb	r2, [r3, #1]
 8010196:	e00f      	b.n	80101b8 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010198:	1cfb      	adds	r3, r7, #3
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	2207      	movs	r2, #7
 801019e:	401a      	ands	r2, r3
 80101a0:	0013      	movs	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	189b      	adds	r3, r3, r2
 80101a6:	00db      	lsls	r3, r3, #3
 80101a8:	3369      	adds	r3, #105	@ 0x69
 80101aa:	33ff      	adds	r3, #255	@ 0xff
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	18d3      	adds	r3, r2, r3
 80101b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80101b8:	1cfb      	adds	r3, r7, #3
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2207      	movs	r2, #7
 80101be:	4013      	ands	r3, r2
 80101c0:	b2da      	uxtb	r2, r3
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	23aa      	movs	r3, #170	@ 0xaa
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	5cd3      	ldrb	r3, [r2, r3]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d101      	bne.n	80101d6 <HAL_PCD_EP_Close+0x76>
 80101d2:	2302      	movs	r3, #2
 80101d4:	e011      	b.n	80101fa <HAL_PCD_EP_Close+0x9a>
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	23aa      	movs	r3, #170	@ 0xaa
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	2101      	movs	r1, #1
 80101de:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	0011      	movs	r1, r2
 80101e8:	0018      	movs	r0, r3
 80101ea:	f005 fe41 	bl	8015e70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	23aa      	movs	r3, #170	@ 0xaa
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	2100      	movs	r1, #0
 80101f6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80101f8:	2300      	movs	r3, #0
}
 80101fa:	0018      	movs	r0, r3
 80101fc:	46bd      	mov	sp, r7
 80101fe:	b004      	add	sp, #16
 8010200:	bd80      	pop	{r7, pc}

08010202 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b086      	sub	sp, #24
 8010206:	af00      	add	r7, sp, #0
 8010208:	60f8      	str	r0, [r7, #12]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	603b      	str	r3, [r7, #0]
 801020e:	200b      	movs	r0, #11
 8010210:	183b      	adds	r3, r7, r0
 8010212:	1c0a      	adds	r2, r1, #0
 8010214:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010216:	0001      	movs	r1, r0
 8010218:	187b      	adds	r3, r7, r1
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	2207      	movs	r2, #7
 801021e:	401a      	ands	r2, r3
 8010220:	0013      	movs	r3, r2
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	189b      	adds	r3, r3, r2
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	3369      	adds	r3, #105	@ 0x69
 801022a:	33ff      	adds	r3, #255	@ 0xff
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	18d3      	adds	r3, r2, r3
 8010230:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	2200      	movs	r2, #0
 8010242:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	2200      	movs	r2, #0
 8010248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801024a:	187b      	adds	r3, r7, r1
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	2207      	movs	r2, #7
 8010250:	4013      	ands	r3, r2
 8010252:	b2da      	uxtb	r2, r3
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	697a      	ldr	r2, [r7, #20]
 801025e:	0011      	movs	r1, r2
 8010260:	0018      	movs	r0, r3
 8010262:	f005 ffc5 	bl	80161f0 <USB_EPStartXfer>

  return HAL_OK;
 8010266:	2300      	movs	r3, #0
}
 8010268:	0018      	movs	r0, r3
 801026a:	46bd      	mov	sp, r7
 801026c:	b006      	add	sp, #24
 801026e:	bd80      	pop	{r7, pc}

08010270 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	000a      	movs	r2, r1
 801027a:	1cfb      	adds	r3, r7, #3
 801027c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801027e:	1cfb      	adds	r3, r7, #3
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2207      	movs	r2, #7
 8010284:	401a      	ands	r2, r3
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	23c2      	movs	r3, #194	@ 0xc2
 801028a:	0059      	lsls	r1, r3, #1
 801028c:	0013      	movs	r3, r2
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	189b      	adds	r3, r3, r2
 8010292:	00db      	lsls	r3, r3, #3
 8010294:	18c3      	adds	r3, r0, r3
 8010296:	185b      	adds	r3, r3, r1
 8010298:	681b      	ldr	r3, [r3, #0]
}
 801029a:	0018      	movs	r0, r3
 801029c:	46bd      	mov	sp, r7
 801029e:	b002      	add	sp, #8
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b086      	sub	sp, #24
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	60f8      	str	r0, [r7, #12]
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	603b      	str	r3, [r7, #0]
 80102ae:	200b      	movs	r0, #11
 80102b0:	183b      	adds	r3, r7, r0
 80102b2:	1c0a      	adds	r2, r1, #0
 80102b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80102b6:	183b      	adds	r3, r7, r0
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	2207      	movs	r2, #7
 80102bc:	4013      	ands	r3, r2
 80102be:	1c5a      	adds	r2, r3, #1
 80102c0:	0013      	movs	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	189b      	adds	r3, r3, r2
 80102c6:	00db      	lsls	r3, r3, #3
 80102c8:	68fa      	ldr	r2, [r7, #12]
 80102ca:	18d3      	adds	r3, r2, r3
 80102cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	2224      	movs	r2, #36	@ 0x24
 80102de:	2101      	movs	r1, #1
 80102e0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	683a      	ldr	r2, [r7, #0]
 80102e6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	2200      	movs	r2, #0
 80102ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2201      	movs	r2, #1
 80102f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80102f4:	183b      	adds	r3, r7, r0
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2207      	movs	r2, #7
 80102fa:	4013      	ands	r3, r2
 80102fc:	b2da      	uxtb	r2, r3
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	697a      	ldr	r2, [r7, #20]
 8010308:	0011      	movs	r1, r2
 801030a:	0018      	movs	r0, r3
 801030c:	f005 ff70 	bl	80161f0 <USB_EPStartXfer>

  return HAL_OK;
 8010310:	2300      	movs	r3, #0
}
 8010312:	0018      	movs	r0, r3
 8010314:	46bd      	mov	sp, r7
 8010316:	b006      	add	sp, #24
 8010318:	bd80      	pop	{r7, pc}

0801031a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b084      	sub	sp, #16
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	000a      	movs	r2, r1
 8010324:	1cfb      	adds	r3, r7, #3
 8010326:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010328:	1cfb      	adds	r3, r7, #3
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	2207      	movs	r2, #7
 801032e:	401a      	ands	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	429a      	cmp	r2, r3
 8010336:	d901      	bls.n	801033c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8010338:	2301      	movs	r3, #1
 801033a:	e046      	b.n	80103ca <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801033c:	1cfb      	adds	r3, r7, #3
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	b25b      	sxtb	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	da0f      	bge.n	8010366 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010346:	1cfb      	adds	r3, r7, #3
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	2207      	movs	r2, #7
 801034c:	4013      	ands	r3, r2
 801034e:	1c5a      	adds	r2, r3, #1
 8010350:	0013      	movs	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	189b      	adds	r3, r3, r2
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	18d3      	adds	r3, r2, r3
 801035c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2201      	movs	r2, #1
 8010362:	705a      	strb	r2, [r3, #1]
 8010364:	e00d      	b.n	8010382 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010366:	1cfb      	adds	r3, r7, #3
 8010368:	781a      	ldrb	r2, [r3, #0]
 801036a:	0013      	movs	r3, r2
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	189b      	adds	r3, r3, r2
 8010370:	00db      	lsls	r3, r3, #3
 8010372:	3369      	adds	r3, #105	@ 0x69
 8010374:	33ff      	adds	r3, #255	@ 0xff
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	18d3      	adds	r3, r2, r3
 801037a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2200      	movs	r2, #0
 8010380:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2201      	movs	r2, #1
 8010386:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010388:	1cfb      	adds	r3, r7, #3
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2207      	movs	r2, #7
 801038e:	4013      	ands	r3, r2
 8010390:	b2da      	uxtb	r2, r3
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	23aa      	movs	r3, #170	@ 0xaa
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	5cd3      	ldrb	r3, [r2, r3]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d101      	bne.n	80103a6 <HAL_PCD_EP_SetStall+0x8c>
 80103a2:	2302      	movs	r3, #2
 80103a4:	e011      	b.n	80103ca <HAL_PCD_EP_SetStall+0xb0>
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	23aa      	movs	r3, #170	@ 0xaa
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	2101      	movs	r1, #1
 80103ae:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	0011      	movs	r1, r2
 80103b8:	0018      	movs	r0, r3
 80103ba:	f007 f851 	bl	8017460 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	23aa      	movs	r3, #170	@ 0xaa
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	2100      	movs	r1, #0
 80103c6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	0018      	movs	r0, r3
 80103cc:	46bd      	mov	sp, r7
 80103ce:	b004      	add	sp, #16
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b084      	sub	sp, #16
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
 80103da:	000a      	movs	r2, r1
 80103dc:	1cfb      	adds	r3, r7, #3
 80103de:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80103e0:	1cfb      	adds	r3, r7, #3
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	220f      	movs	r2, #15
 80103e6:	401a      	ands	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d901      	bls.n	80103f4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80103f0:	2301      	movs	r3, #1
 80103f2:	e048      	b.n	8010486 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80103f4:	1cfb      	adds	r3, r7, #3
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	b25b      	sxtb	r3, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	da0f      	bge.n	801041e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80103fe:	1cfb      	adds	r3, r7, #3
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	2207      	movs	r2, #7
 8010404:	4013      	ands	r3, r2
 8010406:	1c5a      	adds	r2, r3, #1
 8010408:	0013      	movs	r3, r2
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	189b      	adds	r3, r3, r2
 801040e:	00db      	lsls	r3, r3, #3
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	18d3      	adds	r3, r2, r3
 8010414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2201      	movs	r2, #1
 801041a:	705a      	strb	r2, [r3, #1]
 801041c:	e00f      	b.n	801043e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801041e:	1cfb      	adds	r3, r7, #3
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2207      	movs	r2, #7
 8010424:	401a      	ands	r2, r3
 8010426:	0013      	movs	r3, r2
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	189b      	adds	r3, r3, r2
 801042c:	00db      	lsls	r3, r3, #3
 801042e:	3369      	adds	r3, #105	@ 0x69
 8010430:	33ff      	adds	r3, #255	@ 0xff
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	18d3      	adds	r3, r2, r3
 8010436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2200      	movs	r2, #0
 801043c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2200      	movs	r2, #0
 8010442:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010444:	1cfb      	adds	r3, r7, #3
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	2207      	movs	r2, #7
 801044a:	4013      	ands	r3, r2
 801044c:	b2da      	uxtb	r2, r3
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	23aa      	movs	r3, #170	@ 0xaa
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	5cd3      	ldrb	r3, [r2, r3]
 801045a:	2b01      	cmp	r3, #1
 801045c:	d101      	bne.n	8010462 <HAL_PCD_EP_ClrStall+0x90>
 801045e:	2302      	movs	r3, #2
 8010460:	e011      	b.n	8010486 <HAL_PCD_EP_ClrStall+0xb4>
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	23aa      	movs	r3, #170	@ 0xaa
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	2101      	movs	r1, #1
 801046a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	0011      	movs	r1, r2
 8010474:	0018      	movs	r0, r3
 8010476:	f007 f843 	bl	8017500 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	23aa      	movs	r3, #170	@ 0xaa
 801047e:	009b      	lsls	r3, r3, #2
 8010480:	2100      	movs	r1, #0
 8010482:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	0018      	movs	r0, r3
 8010488:	46bd      	mov	sp, r7
 801048a:	b004      	add	sp, #16
 801048c:	bd80      	pop	{r7, pc}
	...

08010490 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8010490:	b5b0      	push	{r4, r5, r7, lr}
 8010492:	b096      	sub	sp, #88	@ 0x58
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010498:	f000 fbec 	bl	8010c74 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	204e      	movs	r0, #78	@ 0x4e
 80104a2:	183b      	adds	r3, r7, r0
 80104a4:	2144      	movs	r1, #68	@ 0x44
 80104a6:	5a52      	ldrh	r2, [r2, r1]
 80104a8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80104aa:	183b      	adds	r3, r7, r0
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	b2da      	uxtb	r2, r3
 80104b0:	244d      	movs	r4, #77	@ 0x4d
 80104b2:	193b      	adds	r3, r7, r4
 80104b4:	210f      	movs	r1, #15
 80104b6:	400a      	ands	r2, r1
 80104b8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80104ba:	193b      	adds	r3, r7, r4
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d000      	beq.n	80104c4 <PCD_EP_ISR_Handler+0x34>
 80104c2:	e18f      	b.n	80107e4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80104c4:	183b      	adds	r3, r7, r0
 80104c6:	881b      	ldrh	r3, [r3, #0]
 80104c8:	2210      	movs	r2, #16
 80104ca:	4013      	ands	r3, r2
 80104cc:	d155      	bne.n	801057a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	881b      	ldrh	r3, [r3, #0]
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	200e      	movs	r0, #14
 80104d8:	183b      	adds	r3, r7, r0
 80104da:	49bb      	ldr	r1, [pc, #748]	@ (80107c8 <PCD_EP_ISR_Handler+0x338>)
 80104dc:	400a      	ands	r2, r1
 80104de:	801a      	strh	r2, [r3, #0]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	183a      	adds	r2, r7, r0
 80104e6:	8812      	ldrh	r2, [r2, #0]
 80104e8:	49b8      	ldr	r1, [pc, #736]	@ (80107cc <PCD_EP_ISR_Handler+0x33c>)
 80104ea:	430a      	orrs	r2, r1
 80104ec:	b292      	uxth	r2, r2
 80104ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	3328      	adds	r3, #40	@ 0x28
 80104f4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2250      	movs	r2, #80	@ 0x50
 80104fc:	5a9b      	ldrh	r3, [r3, r2]
 80104fe:	b29b      	uxth	r3, r3
 8010500:	001a      	movs	r2, r3
 8010502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	00db      	lsls	r3, r3, #3
 8010508:	18d2      	adds	r2, r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	18d3      	adds	r3, r2, r3
 8010510:	4aaf      	ldr	r2, [pc, #700]	@ (80107d0 <PCD_EP_ISR_Handler+0x340>)
 8010512:	4694      	mov	ip, r2
 8010514:	4463      	add	r3, ip
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	059b      	lsls	r3, r3, #22
 801051a:	0d9a      	lsrs	r2, r3, #22
 801051c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801051e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8010520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010522:	695a      	ldr	r2, [r3, #20]
 8010524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010526:	69db      	ldr	r3, [r3, #28]
 8010528:	18d2      	adds	r2, r2, r3
 801052a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801052c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2100      	movs	r1, #0
 8010532:	0018      	movs	r0, r3
 8010534:	f009 f952 	bl	80197dc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2224      	movs	r2, #36	@ 0x24
 801053c:	5c9b      	ldrb	r3, [r3, r2]
 801053e:	b2db      	uxtb	r3, r3
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <PCD_EP_ISR_Handler+0xb8>
 8010544:	f000 fb96 	bl	8010c74 <PCD_EP_ISR_Handler+0x7e4>
 8010548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801054a:	699b      	ldr	r3, [r3, #24]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d001      	beq.n	8010554 <PCD_EP_ISR_Handler+0xc4>
 8010550:	f000 fb90 	bl	8010c74 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2224      	movs	r2, #36	@ 0x24
 8010558:	5c9b      	ldrb	r3, [r3, r2]
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2280      	movs	r2, #128	@ 0x80
 801055e:	4252      	negs	r2, r2
 8010560:	4313      	orrs	r3, r2
 8010562:	b2da      	uxtb	r2, r3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	0011      	movs	r1, r2
 801056a:	224c      	movs	r2, #76	@ 0x4c
 801056c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2224      	movs	r2, #36	@ 0x24
 8010572:	2100      	movs	r1, #0
 8010574:	5499      	strb	r1, [r3, r2]
 8010576:	f000 fb7d 	bl	8010c74 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	3369      	adds	r3, #105	@ 0x69
 801057e:	33ff      	adds	r3, #255	@ 0xff
 8010580:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	214a      	movs	r1, #74	@ 0x4a
 8010588:	187b      	adds	r3, r7, r1
 801058a:	8812      	ldrh	r2, [r2, #0]
 801058c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801058e:	187b      	adds	r3, r7, r1
 8010590:	881a      	ldrh	r2, [r3, #0]
 8010592:	2380      	movs	r3, #128	@ 0x80
 8010594:	011b      	lsls	r3, r3, #4
 8010596:	4013      	ands	r3, r2
 8010598:	d037      	beq.n	801060a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2250      	movs	r2, #80	@ 0x50
 80105a0:	5a9b      	ldrh	r3, [r3, r2]
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	001a      	movs	r2, r3
 80105a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	18d2      	adds	r2, r2, r3
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	18d3      	adds	r3, r2, r3
 80105b4:	4a87      	ldr	r2, [pc, #540]	@ (80107d4 <PCD_EP_ISR_Handler+0x344>)
 80105b6:	4694      	mov	ip, r2
 80105b8:	4463      	add	r3, ip
 80105ba:	881b      	ldrh	r3, [r3, #0]
 80105bc:	059b      	lsls	r3, r3, #22
 80105be:	0d9a      	lsrs	r2, r3, #22
 80105c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6818      	ldr	r0, [r3, #0]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	22ac      	movs	r2, #172	@ 0xac
 80105cc:	0092      	lsls	r2, r2, #2
 80105ce:	1899      	adds	r1, r3, r2
 80105d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80105d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80105d8:	b29b      	uxth	r3, r3
 80105da:	f007 f8c4 	bl	8017766 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	b29a      	uxth	r2, r3
 80105e6:	2010      	movs	r0, #16
 80105e8:	183b      	adds	r3, r7, r0
 80105ea:	497b      	ldr	r1, [pc, #492]	@ (80107d8 <PCD_EP_ISR_Handler+0x348>)
 80105ec:	400a      	ands	r2, r1
 80105ee:	801a      	strh	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	183a      	adds	r2, r7, r0
 80105f6:	8812      	ldrh	r2, [r2, #0]
 80105f8:	2180      	movs	r1, #128	@ 0x80
 80105fa:	430a      	orrs	r2, r1
 80105fc:	b292      	uxth	r2, r2
 80105fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	0018      	movs	r0, r3
 8010604:	f009 f8b4 	bl	8019770 <HAL_PCD_SetupStageCallback>
 8010608:	e334      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801060a:	234a      	movs	r3, #74	@ 0x4a
 801060c:	18fb      	adds	r3, r7, r3
 801060e:	2200      	movs	r2, #0
 8010610:	5e9b      	ldrsh	r3, [r3, r2]
 8010612:	2b00      	cmp	r3, #0
 8010614:	db00      	blt.n	8010618 <PCD_EP_ISR_Handler+0x188>
 8010616:	e32d      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	881b      	ldrh	r3, [r3, #0]
 801061e:	b29a      	uxth	r2, r3
 8010620:	201e      	movs	r0, #30
 8010622:	183b      	adds	r3, r7, r0
 8010624:	496c      	ldr	r1, [pc, #432]	@ (80107d8 <PCD_EP_ISR_Handler+0x348>)
 8010626:	400a      	ands	r2, r1
 8010628:	801a      	strh	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	183a      	adds	r2, r7, r0
 8010630:	8812      	ldrh	r2, [r2, #0]
 8010632:	2180      	movs	r1, #128	@ 0x80
 8010634:	430a      	orrs	r2, r1
 8010636:	b292      	uxth	r2, r2
 8010638:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	2250      	movs	r2, #80	@ 0x50
 8010640:	5a9b      	ldrh	r3, [r3, r2]
 8010642:	b29b      	uxth	r3, r3
 8010644:	001a      	movs	r2, r3
 8010646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	00db      	lsls	r3, r3, #3
 801064c:	18d2      	adds	r2, r2, r3
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	18d3      	adds	r3, r2, r3
 8010654:	4a5f      	ldr	r2, [pc, #380]	@ (80107d4 <PCD_EP_ISR_Handler+0x344>)
 8010656:	4694      	mov	ip, r2
 8010658:	4463      	add	r3, ip
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	059b      	lsls	r3, r3, #22
 801065e:	0d9a      	lsrs	r2, r3, #22
 8010660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010662:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8010664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010666:	69db      	ldr	r3, [r3, #28]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d01a      	beq.n	80106a2 <PCD_EP_ISR_Handler+0x212>
 801066c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801066e:	695b      	ldr	r3, [r3, #20]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d016      	beq.n	80106a2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6818      	ldr	r0, [r3, #0]
 8010678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801067a:	6959      	ldr	r1, [r3, #20]
 801067c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801067e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8010680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010682:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8010684:	b29b      	uxth	r3, r3
 8010686:	f007 f86e 	bl	8017766 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801068a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801068c:	695a      	ldr	r2, [r3, #20]
 801068e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	18d2      	adds	r2, r2, r3
 8010694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010696:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2100      	movs	r1, #0
 801069c:	0018      	movs	r0, r3
 801069e:	f009 f87c 	bl	801979a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	214a      	movs	r1, #74	@ 0x4a
 80106a8:	187b      	adds	r3, r7, r1
 80106aa:	8812      	ldrh	r2, [r2, #0]
 80106ac:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80106ae:	187b      	adds	r3, r7, r1
 80106b0:	881a      	ldrh	r2, [r3, #0]
 80106b2:	2380      	movs	r3, #128	@ 0x80
 80106b4:	011b      	lsls	r3, r3, #4
 80106b6:	4013      	ands	r3, r2
 80106b8:	d000      	beq.n	80106bc <PCD_EP_ISR_Handler+0x22c>
 80106ba:	e2db      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
 80106bc:	187b      	adds	r3, r7, r1
 80106be:	881a      	ldrh	r2, [r3, #0]
 80106c0:	23c0      	movs	r3, #192	@ 0xc0
 80106c2:	019b      	lsls	r3, r3, #6
 80106c4:	401a      	ands	r2, r3
 80106c6:	23c0      	movs	r3, #192	@ 0xc0
 80106c8:	019b      	lsls	r3, r3, #6
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d100      	bne.n	80106d0 <PCD_EP_ISR_Handler+0x240>
 80106ce:	e2d1      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	61bb      	str	r3, [r7, #24]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2250      	movs	r2, #80	@ 0x50
 80106dc:	5a9b      	ldrh	r3, [r3, r2]
 80106de:	b29b      	uxth	r3, r3
 80106e0:	001a      	movs	r2, r3
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	189b      	adds	r3, r3, r2
 80106e6:	61bb      	str	r3, [r7, #24]
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	4a3a      	ldr	r2, [pc, #232]	@ (80107d4 <PCD_EP_ISR_Handler+0x344>)
 80106ec:	4694      	mov	ip, r2
 80106ee:	4463      	add	r3, ip
 80106f0:	617b      	str	r3, [r7, #20]
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	059b      	lsls	r3, r3, #22
 80106fa:	0d9b      	lsrs	r3, r3, #22
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	801a      	strh	r2, [r3, #0]
 8010702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010704:	691b      	ldr	r3, [r3, #16]
 8010706:	2b3e      	cmp	r3, #62	@ 0x3e
 8010708:	d91a      	bls.n	8010740 <PCD_EP_ISR_Handler+0x2b0>
 801070a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801070c:	691b      	ldr	r3, [r3, #16]
 801070e:	095b      	lsrs	r3, r3, #5
 8010710:	647b      	str	r3, [r7, #68]	@ 0x44
 8010712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	221f      	movs	r2, #31
 8010718:	4013      	ands	r3, r2
 801071a:	d102      	bne.n	8010722 <PCD_EP_ISR_Handler+0x292>
 801071c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801071e:	3b01      	subs	r3, #1
 8010720:	647b      	str	r3, [r7, #68]	@ 0x44
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	b29a      	uxth	r2, r3
 8010728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801072a:	b29b      	uxth	r3, r3
 801072c:	029b      	lsls	r3, r3, #10
 801072e:	b29b      	uxth	r3, r3
 8010730:	4313      	orrs	r3, r2
 8010732:	b29b      	uxth	r3, r3
 8010734:	4a25      	ldr	r2, [pc, #148]	@ (80107cc <PCD_EP_ISR_Handler+0x33c>)
 8010736:	4313      	orrs	r3, r2
 8010738:	b29a      	uxth	r2, r3
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	801a      	strh	r2, [r3, #0]
 801073e:	e023      	b.n	8010788 <PCD_EP_ISR_Handler+0x2f8>
 8010740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010742:	691b      	ldr	r3, [r3, #16]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d108      	bne.n	801075a <PCD_EP_ISR_Handler+0x2ca>
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	881b      	ldrh	r3, [r3, #0]
 801074c:	b29b      	uxth	r3, r3
 801074e:	4a1f      	ldr	r2, [pc, #124]	@ (80107cc <PCD_EP_ISR_Handler+0x33c>)
 8010750:	4313      	orrs	r3, r2
 8010752:	b29a      	uxth	r2, r3
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	801a      	strh	r2, [r3, #0]
 8010758:	e016      	b.n	8010788 <PCD_EP_ISR_Handler+0x2f8>
 801075a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801075c:	691b      	ldr	r3, [r3, #16]
 801075e:	085b      	lsrs	r3, r3, #1
 8010760:	647b      	str	r3, [r7, #68]	@ 0x44
 8010762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010764:	691b      	ldr	r3, [r3, #16]
 8010766:	2201      	movs	r2, #1
 8010768:	4013      	ands	r3, r2
 801076a:	d002      	beq.n	8010772 <PCD_EP_ISR_Handler+0x2e2>
 801076c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801076e:	3301      	adds	r3, #1
 8010770:	647b      	str	r3, [r7, #68]	@ 0x44
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	b29a      	uxth	r2, r3
 8010778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801077a:	b29b      	uxth	r3, r3
 801077c:	029b      	lsls	r3, r3, #10
 801077e:	b29b      	uxth	r3, r3
 8010780:	4313      	orrs	r3, r2
 8010782:	b29a      	uxth	r2, r3
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	b29a      	uxth	r2, r3
 8010790:	2012      	movs	r0, #18
 8010792:	183b      	adds	r3, r7, r0
 8010794:	4911      	ldr	r1, [pc, #68]	@ (80107dc <PCD_EP_ISR_Handler+0x34c>)
 8010796:	400a      	ands	r2, r1
 8010798:	801a      	strh	r2, [r3, #0]
 801079a:	183b      	adds	r3, r7, r0
 801079c:	183a      	adds	r2, r7, r0
 801079e:	8812      	ldrh	r2, [r2, #0]
 80107a0:	2180      	movs	r1, #128	@ 0x80
 80107a2:	0149      	lsls	r1, r1, #5
 80107a4:	404a      	eors	r2, r1
 80107a6:	801a      	strh	r2, [r3, #0]
 80107a8:	183b      	adds	r3, r7, r0
 80107aa:	183a      	adds	r2, r7, r0
 80107ac:	8812      	ldrh	r2, [r2, #0]
 80107ae:	2180      	movs	r1, #128	@ 0x80
 80107b0:	0189      	lsls	r1, r1, #6
 80107b2:	404a      	eors	r2, r1
 80107b4:	801a      	strh	r2, [r3, #0]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	183a      	adds	r2, r7, r0
 80107bc:	8812      	ldrh	r2, [r2, #0]
 80107be:	4908      	ldr	r1, [pc, #32]	@ (80107e0 <PCD_EP_ISR_Handler+0x350>)
 80107c0:	430a      	orrs	r2, r1
 80107c2:	b292      	uxth	r2, r2
 80107c4:	801a      	strh	r2, [r3, #0]
 80107c6:	e255      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
 80107c8:	ffff8f0f 	.word	0xffff8f0f
 80107cc:	ffff8000 	.word	0xffff8000
 80107d0:	00000402 	.word	0x00000402
 80107d4:	00000406 	.word	0x00000406
 80107d8:	00000f8f 	.word	0x00000f8f
 80107dc:	ffffbf8f 	.word	0xffffbf8f
 80107e0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	001a      	movs	r2, r3
 80107ea:	204d      	movs	r0, #77	@ 0x4d
 80107ec:	183b      	adds	r3, r7, r0
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	18d2      	adds	r2, r2, r3
 80107f4:	214a      	movs	r1, #74	@ 0x4a
 80107f6:	187b      	adds	r3, r7, r1
 80107f8:	8812      	ldrh	r2, [r2, #0]
 80107fa:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80107fc:	187b      	adds	r3, r7, r1
 80107fe:	2200      	movs	r2, #0
 8010800:	5e9b      	ldrsh	r3, [r3, r2]
 8010802:	2b00      	cmp	r3, #0
 8010804:	db00      	blt.n	8010808 <PCD_EP_ISR_Handler+0x378>
 8010806:	e0fa      	b.n	80109fe <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	001a      	movs	r2, r3
 801080e:	183b      	adds	r3, r7, r0
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	18d3      	adds	r3, r2, r3
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	b29a      	uxth	r2, r3
 801081a:	2448      	movs	r4, #72	@ 0x48
 801081c:	193b      	adds	r3, r7, r4
 801081e:	49d1      	ldr	r1, [pc, #836]	@ (8010b64 <PCD_EP_ISR_Handler+0x6d4>)
 8010820:	400a      	ands	r2, r1
 8010822:	801a      	strh	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	001a      	movs	r2, r3
 801082a:	183b      	adds	r3, r7, r0
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	18d3      	adds	r3, r2, r3
 8010832:	193a      	adds	r2, r7, r4
 8010834:	8812      	ldrh	r2, [r2, #0]
 8010836:	2180      	movs	r1, #128	@ 0x80
 8010838:	430a      	orrs	r2, r1
 801083a:	b292      	uxth	r2, r2
 801083c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801083e:	183b      	adds	r3, r7, r0
 8010840:	781a      	ldrb	r2, [r3, #0]
 8010842:	0013      	movs	r3, r2
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	189b      	adds	r3, r3, r2
 8010848:	00db      	lsls	r3, r3, #3
 801084a:	3369      	adds	r3, #105	@ 0x69
 801084c:	33ff      	adds	r3, #255	@ 0xff
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	18d3      	adds	r3, r2, r3
 8010852:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8010854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010856:	7b1b      	ldrb	r3, [r3, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d125      	bne.n	80108a8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2250      	movs	r2, #80	@ 0x50
 8010862:	5a9b      	ldrh	r3, [r3, r2]
 8010864:	b29b      	uxth	r3, r3
 8010866:	001a      	movs	r2, r3
 8010868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	18d2      	adds	r2, r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	18d3      	adds	r3, r2, r3
 8010876:	4abc      	ldr	r2, [pc, #752]	@ (8010b68 <PCD_EP_ISR_Handler+0x6d8>)
 8010878:	4694      	mov	ip, r2
 801087a:	4463      	add	r3, ip
 801087c:	881a      	ldrh	r2, [r3, #0]
 801087e:	2450      	movs	r4, #80	@ 0x50
 8010880:	193b      	adds	r3, r7, r4
 8010882:	0592      	lsls	r2, r2, #22
 8010884:	0d92      	lsrs	r2, r2, #22
 8010886:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8010888:	193b      	adds	r3, r7, r4
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d100      	bne.n	8010892 <PCD_EP_ISR_Handler+0x402>
 8010890:	e08d      	b.n	80109ae <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6818      	ldr	r0, [r3, #0]
 8010896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010898:	6959      	ldr	r1, [r3, #20]
 801089a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801089c:	88da      	ldrh	r2, [r3, #6]
 801089e:	193b      	adds	r3, r7, r4
 80108a0:	881b      	ldrh	r3, [r3, #0]
 80108a2:	f006 ff60 	bl	8017766 <USB_ReadPMA>
 80108a6:	e082      	b.n	80109ae <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80108a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108aa:	78db      	ldrb	r3, [r3, #3]
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d10c      	bne.n	80108ca <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80108b0:	2350      	movs	r3, #80	@ 0x50
 80108b2:	18fc      	adds	r4, r7, r3
 80108b4:	234a      	movs	r3, #74	@ 0x4a
 80108b6:	18fb      	adds	r3, r7, r3
 80108b8:	881a      	ldrh	r2, [r3, #0]
 80108ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	0018      	movs	r0, r3
 80108c0:	f000 f9ec 	bl	8010c9c <HAL_PCD_EP_DB_Receive>
 80108c4:	0003      	movs	r3, r0
 80108c6:	8023      	strh	r3, [r4, #0]
 80108c8:	e071      	b.n	80109ae <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	001a      	movs	r2, r3
 80108d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	18d3      	adds	r3, r2, r3
 80108d8:	881b      	ldrh	r3, [r3, #0]
 80108da:	b29a      	uxth	r2, r3
 80108dc:	2052      	movs	r0, #82	@ 0x52
 80108de:	183b      	adds	r3, r7, r0
 80108e0:	49a2      	ldr	r1, [pc, #648]	@ (8010b6c <PCD_EP_ISR_Handler+0x6dc>)
 80108e2:	400a      	ands	r2, r1
 80108e4:	801a      	strh	r2, [r3, #0]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	001a      	movs	r2, r3
 80108ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	18d3      	adds	r3, r2, r3
 80108f4:	183a      	adds	r2, r7, r0
 80108f6:	8812      	ldrh	r2, [r2, #0]
 80108f8:	499d      	ldr	r1, [pc, #628]	@ (8010b70 <PCD_EP_ISR_Handler+0x6e0>)
 80108fa:	430a      	orrs	r2, r1
 80108fc:	b292      	uxth	r2, r2
 80108fe:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	001a      	movs	r2, r3
 8010906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	18d3      	adds	r3, r2, r3
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	b29b      	uxth	r3, r3
 8010912:	001a      	movs	r2, r3
 8010914:	2380      	movs	r3, #128	@ 0x80
 8010916:	01db      	lsls	r3, r3, #7
 8010918:	4013      	ands	r3, r2
 801091a:	d024      	beq.n	8010966 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2250      	movs	r2, #80	@ 0x50
 8010922:	5a9b      	ldrh	r3, [r3, r2]
 8010924:	b29b      	uxth	r3, r3
 8010926:	001a      	movs	r2, r3
 8010928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	00db      	lsls	r3, r3, #3
 801092e:	18d2      	adds	r2, r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	18d3      	adds	r3, r2, r3
 8010936:	4a8f      	ldr	r2, [pc, #572]	@ (8010b74 <PCD_EP_ISR_Handler+0x6e4>)
 8010938:	4694      	mov	ip, r2
 801093a:	4463      	add	r3, ip
 801093c:	881a      	ldrh	r2, [r3, #0]
 801093e:	2450      	movs	r4, #80	@ 0x50
 8010940:	193b      	adds	r3, r7, r4
 8010942:	0592      	lsls	r2, r2, #22
 8010944:	0d92      	lsrs	r2, r2, #22
 8010946:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8010948:	193b      	adds	r3, r7, r4
 801094a:	881b      	ldrh	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d02e      	beq.n	80109ae <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6818      	ldr	r0, [r3, #0]
 8010954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010956:	6959      	ldr	r1, [r3, #20]
 8010958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801095a:	891a      	ldrh	r2, [r3, #8]
 801095c:	193b      	adds	r3, r7, r4
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	f006 ff01 	bl	8017766 <USB_ReadPMA>
 8010964:	e023      	b.n	80109ae <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2250      	movs	r2, #80	@ 0x50
 801096c:	5a9b      	ldrh	r3, [r3, r2]
 801096e:	b29b      	uxth	r3, r3
 8010970:	001a      	movs	r2, r3
 8010972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	18d2      	adds	r2, r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	18d3      	adds	r3, r2, r3
 8010980:	4a79      	ldr	r2, [pc, #484]	@ (8010b68 <PCD_EP_ISR_Handler+0x6d8>)
 8010982:	4694      	mov	ip, r2
 8010984:	4463      	add	r3, ip
 8010986:	881a      	ldrh	r2, [r3, #0]
 8010988:	2450      	movs	r4, #80	@ 0x50
 801098a:	193b      	adds	r3, r7, r4
 801098c:	0592      	lsls	r2, r2, #22
 801098e:	0d92      	lsrs	r2, r2, #22
 8010990:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8010992:	193b      	adds	r3, r7, r4
 8010994:	881b      	ldrh	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d009      	beq.n	80109ae <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6818      	ldr	r0, [r3, #0]
 801099e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109a0:	6959      	ldr	r1, [r3, #20]
 80109a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109a4:	895a      	ldrh	r2, [r3, #10]
 80109a6:	193b      	adds	r3, r7, r4
 80109a8:	881b      	ldrh	r3, [r3, #0]
 80109aa:	f006 fedc 	bl	8017766 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80109ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109b0:	69da      	ldr	r2, [r3, #28]
 80109b2:	2150      	movs	r1, #80	@ 0x50
 80109b4:	187b      	adds	r3, r7, r1
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	18d2      	adds	r2, r2, r3
 80109ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80109be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109c0:	695a      	ldr	r2, [r3, #20]
 80109c2:	187b      	adds	r3, r7, r1
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	18d2      	adds	r2, r2, r3
 80109c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80109cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109ce:	699b      	ldr	r3, [r3, #24]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d005      	beq.n	80109e0 <PCD_EP_ISR_Handler+0x550>
 80109d4:	187b      	adds	r3, r7, r1
 80109d6:	881a      	ldrh	r2, [r3, #0]
 80109d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109da:	691b      	ldr	r3, [r3, #16]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d207      	bcs.n	80109f0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80109e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109e2:	781a      	ldrb	r2, [r3, #0]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	0011      	movs	r1, r2
 80109e8:	0018      	movs	r0, r3
 80109ea:	f008 fed6 	bl	801979a <HAL_PCD_DataOutStageCallback>
 80109ee:	e006      	b.n	80109fe <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80109f6:	0011      	movs	r1, r2
 80109f8:	0018      	movs	r0, r3
 80109fa:	f005 fbf9 	bl	80161f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80109fe:	244a      	movs	r4, #74	@ 0x4a
 8010a00:	193b      	adds	r3, r7, r4
 8010a02:	881b      	ldrh	r3, [r3, #0]
 8010a04:	2280      	movs	r2, #128	@ 0x80
 8010a06:	4013      	ands	r3, r2
 8010a08:	d100      	bne.n	8010a0c <PCD_EP_ISR_Handler+0x57c>
 8010a0a:	e133      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8010a0c:	204d      	movs	r0, #77	@ 0x4d
 8010a0e:	183b      	adds	r3, r7, r0
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	1c5a      	adds	r2, r3, #1
 8010a14:	0013      	movs	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	189b      	adds	r3, r3, r2
 8010a1a:	00db      	lsls	r3, r3, #3
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	18d3      	adds	r3, r2, r3
 8010a20:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	001a      	movs	r2, r3
 8010a28:	183b      	adds	r3, r7, r0
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	18d3      	adds	r3, r2, r3
 8010a30:	881b      	ldrh	r3, [r3, #0]
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	2542      	movs	r5, #66	@ 0x42
 8010a36:	197b      	adds	r3, r7, r5
 8010a38:	494f      	ldr	r1, [pc, #316]	@ (8010b78 <PCD_EP_ISR_Handler+0x6e8>)
 8010a3a:	400a      	ands	r2, r1
 8010a3c:	801a      	strh	r2, [r3, #0]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	001a      	movs	r2, r3
 8010a44:	183b      	adds	r3, r7, r0
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	18d3      	adds	r3, r2, r3
 8010a4c:	197a      	adds	r2, r7, r5
 8010a4e:	8812      	ldrh	r2, [r2, #0]
 8010a50:	494a      	ldr	r1, [pc, #296]	@ (8010b7c <PCD_EP_ISR_Handler+0x6ec>)
 8010a52:	430a      	orrs	r2, r1
 8010a54:	b292      	uxth	r2, r2
 8010a56:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8010a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a5a:	78db      	ldrb	r3, [r3, #3]
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d000      	beq.n	8010a62 <PCD_EP_ISR_Handler+0x5d2>
 8010a60:	e0af      	b.n	8010bc2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8010a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a64:	2200      	movs	r2, #0
 8010a66:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8010a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a6a:	7b1b      	ldrb	r3, [r3, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d100      	bne.n	8010a72 <PCD_EP_ISR_Handler+0x5e2>
 8010a70:	e09f      	b.n	8010bb2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010a72:	193b      	adds	r3, r7, r4
 8010a74:	881b      	ldrh	r3, [r3, #0]
 8010a76:	2240      	movs	r2, #64	@ 0x40
 8010a78:	4013      	ands	r3, r2
 8010a7a:	d046      	beq.n	8010b0a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a7e:	785b      	ldrb	r3, [r3, #1]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d125      	bne.n	8010ad0 <PCD_EP_ISR_Handler+0x640>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2250      	movs	r2, #80	@ 0x50
 8010a90:	5a9b      	ldrh	r3, [r3, r2]
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	001a      	movs	r2, r3
 8010a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a98:	189b      	adds	r3, r3, r2
 8010a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	00da      	lsls	r2, r3, #3
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa4:	18d3      	adds	r3, r2, r3
 8010aa6:	4a33      	ldr	r2, [pc, #204]	@ (8010b74 <PCD_EP_ISR_Handler+0x6e4>)
 8010aa8:	4694      	mov	ip, r2
 8010aaa:	4463      	add	r3, ip
 8010aac:	623b      	str	r3, [r7, #32]
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	059b      	lsls	r3, r3, #22
 8010ab6:	0d9b      	lsrs	r3, r3, #22
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	6a3b      	ldr	r3, [r7, #32]
 8010abc:	801a      	strh	r2, [r3, #0]
 8010abe:	6a3b      	ldr	r3, [r7, #32]
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8010b7c <PCD_EP_ISR_Handler+0x6ec>)
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	801a      	strh	r2, [r3, #0]
 8010ace:	e070      	b.n	8010bb2 <PCD_EP_ISR_Handler+0x722>
 8010ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ad2:	785b      	ldrb	r3, [r3, #1]
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d16c      	bne.n	8010bb2 <PCD_EP_ISR_Handler+0x722>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2250      	movs	r2, #80	@ 0x50
 8010ae4:	5a9b      	ldrh	r3, [r3, r2]
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	001a      	movs	r2, r3
 8010aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aec:	189b      	adds	r3, r3, r2
 8010aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	00da      	lsls	r2, r3, #3
 8010af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af8:	18d3      	adds	r3, r2, r3
 8010afa:	4a1e      	ldr	r2, [pc, #120]	@ (8010b74 <PCD_EP_ISR_Handler+0x6e4>)
 8010afc:	4694      	mov	ip, r2
 8010afe:	4463      	add	r3, ip
 8010b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b04:	2200      	movs	r2, #0
 8010b06:	801a      	strh	r2, [r3, #0]
 8010b08:	e053      	b.n	8010bb2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b12:	785b      	ldrb	r3, [r3, #1]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d133      	bne.n	8010b80 <PCD_EP_ISR_Handler+0x6f0>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2250      	movs	r2, #80	@ 0x50
 8010b24:	5a9b      	ldrh	r3, [r3, r2]
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	001a      	movs	r2, r3
 8010b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b2c:	189b      	adds	r3, r3, r2
 8010b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	00da      	lsls	r2, r3, #3
 8010b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b38:	18d3      	adds	r3, r2, r3
 8010b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8010b68 <PCD_EP_ISR_Handler+0x6d8>)
 8010b3c:	4694      	mov	ip, r2
 8010b3e:	4463      	add	r3, ip
 8010b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	059b      	lsls	r3, r3, #22
 8010b4a:	0d9b      	lsrs	r3, r3, #22
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b50:	801a      	strh	r2, [r3, #0]
 8010b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	4a08      	ldr	r2, [pc, #32]	@ (8010b7c <PCD_EP_ISR_Handler+0x6ec>)
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b60:	801a      	strh	r2, [r3, #0]
 8010b62:	e026      	b.n	8010bb2 <PCD_EP_ISR_Handler+0x722>
 8010b64:	00000f8f 	.word	0x00000f8f
 8010b68:	00000406 	.word	0x00000406
 8010b6c:	ffff8f8f 	.word	0xffff8f8f
 8010b70:	ffff80c0 	.word	0xffff80c0
 8010b74:	00000402 	.word	0x00000402
 8010b78:	ffff8f0f 	.word	0xffff8f0f
 8010b7c:	ffff8000 	.word	0xffff8000
 8010b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b82:	785b      	ldrb	r3, [r3, #1]
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d114      	bne.n	8010bb2 <PCD_EP_ISR_Handler+0x722>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2250      	movs	r2, #80	@ 0x50
 8010b8e:	5a9b      	ldrh	r3, [r3, r2]
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	001a      	movs	r2, r3
 8010b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b96:	189b      	adds	r3, r3, r2
 8010b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	00da      	lsls	r2, r3, #3
 8010ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ba2:	18d3      	adds	r3, r2, r3
 8010ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8010c94 <PCD_EP_ISR_Handler+0x804>)
 8010ba6:	4694      	mov	ip, r2
 8010ba8:	4463      	add	r3, ip
 8010baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bae:	2200      	movs	r2, #0
 8010bb0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010bb4:	781a      	ldrb	r2, [r3, #0]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	0011      	movs	r1, r2
 8010bba:	0018      	movs	r0, r3
 8010bbc:	f008 fe0e 	bl	80197dc <HAL_PCD_DataInStageCallback>
 8010bc0:	e058      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8010bc2:	234a      	movs	r3, #74	@ 0x4a
 8010bc4:	18fb      	adds	r3, r7, r3
 8010bc6:	881a      	ldrh	r2, [r3, #0]
 8010bc8:	2380      	movs	r3, #128	@ 0x80
 8010bca:	005b      	lsls	r3, r3, #1
 8010bcc:	4013      	ands	r3, r2
 8010bce:	d149      	bne.n	8010c64 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2250      	movs	r2, #80	@ 0x50
 8010bd6:	5a9b      	ldrh	r3, [r3, r2]
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	001a      	movs	r2, r3
 8010bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	18d2      	adds	r2, r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	18d3      	adds	r3, r2, r3
 8010bea:	4a2b      	ldr	r2, [pc, #172]	@ (8010c98 <PCD_EP_ISR_Handler+0x808>)
 8010bec:	4694      	mov	ip, r2
 8010bee:	4463      	add	r3, ip
 8010bf0:	881a      	ldrh	r2, [r3, #0]
 8010bf2:	2140      	movs	r1, #64	@ 0x40
 8010bf4:	187b      	adds	r3, r7, r1
 8010bf6:	0592      	lsls	r2, r2, #22
 8010bf8:	0d92      	lsrs	r2, r2, #22
 8010bfa:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8010bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010bfe:	699a      	ldr	r2, [r3, #24]
 8010c00:	187b      	adds	r3, r7, r1
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d907      	bls.n	8010c18 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8010c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c0a:	699a      	ldr	r2, [r3, #24]
 8010c0c:	187b      	adds	r3, r7, r1
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	1ad2      	subs	r2, r2, r3
 8010c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c14:	619a      	str	r2, [r3, #24]
 8010c16:	e002      	b.n	8010c1e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8010c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8010c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c20:	699b      	ldr	r3, [r3, #24]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d107      	bne.n	8010c36 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c28:	781a      	ldrb	r2, [r3, #0]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	0011      	movs	r1, r2
 8010c2e:	0018      	movs	r0, r3
 8010c30:	f008 fdd4 	bl	80197dc <HAL_PCD_DataInStageCallback>
 8010c34:	e01e      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8010c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c38:	695a      	ldr	r2, [r3, #20]
 8010c3a:	2140      	movs	r1, #64	@ 0x40
 8010c3c:	187b      	adds	r3, r7, r1
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	18d2      	adds	r2, r2, r3
 8010c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c44:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8010c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c48:	69da      	ldr	r2, [r3, #28]
 8010c4a:	187b      	adds	r3, r7, r1
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	18d2      	adds	r2, r2, r3
 8010c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c52:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010c5a:	0011      	movs	r1, r2
 8010c5c:	0018      	movs	r0, r3
 8010c5e:	f005 fac7 	bl	80161f0 <USB_EPStartXfer>
 8010c62:	e007      	b.n	8010c74 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8010c64:	234a      	movs	r3, #74	@ 0x4a
 8010c66:	18fb      	adds	r3, r7, r3
 8010c68:	881a      	ldrh	r2, [r3, #0]
 8010c6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	0018      	movs	r0, r3
 8010c70:	f000 f930 	bl	8010ed4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2244      	movs	r2, #68	@ 0x44
 8010c7a:	5a9b      	ldrh	r3, [r3, r2]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	b21b      	sxth	r3, r3
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	da01      	bge.n	8010c88 <PCD_EP_ISR_Handler+0x7f8>
 8010c84:	f7ff fc0a 	bl	801049c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	0018      	movs	r0, r3
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	b016      	add	sp, #88	@ 0x58
 8010c90:	bdb0      	pop	{r4, r5, r7, pc}
 8010c92:	46c0      	nop			@ (mov r8, r8)
 8010c94:	00000406 	.word	0x00000406
 8010c98:	00000402 	.word	0x00000402

08010c9c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010c9c:	b590      	push	{r4, r7, lr}
 8010c9e:	b089      	sub	sp, #36	@ 0x24
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	60b9      	str	r1, [r7, #8]
 8010ca6:	1dbb      	adds	r3, r7, #6
 8010ca8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010caa:	1dbb      	adds	r3, r7, #6
 8010cac:	881a      	ldrh	r2, [r3, #0]
 8010cae:	2380      	movs	r3, #128	@ 0x80
 8010cb0:	01db      	lsls	r3, r3, #7
 8010cb2:	4013      	ands	r3, r2
 8010cb4:	d100      	bne.n	8010cb8 <HAL_PCD_EP_DB_Receive+0x1c>
 8010cb6:	e07d      	b.n	8010db4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	2250      	movs	r2, #80	@ 0x50
 8010cbe:	5a9b      	ldrh	r3, [r3, r2]
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	001a      	movs	r2, r3
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	00db      	lsls	r3, r3, #3
 8010cca:	18d2      	adds	r2, r2, r3
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	18d3      	adds	r3, r2, r3
 8010cd2:	4a7a      	ldr	r2, [pc, #488]	@ (8010ebc <HAL_PCD_EP_DB_Receive+0x220>)
 8010cd4:	4694      	mov	ip, r2
 8010cd6:	4463      	add	r3, ip
 8010cd8:	881a      	ldrh	r2, [r3, #0]
 8010cda:	211a      	movs	r1, #26
 8010cdc:	187b      	adds	r3, r7, r1
 8010cde:	0592      	lsls	r2, r2, #22
 8010ce0:	0d92      	lsrs	r2, r2, #22
 8010ce2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	699a      	ldr	r2, [r3, #24]
 8010ce8:	187b      	adds	r3, r7, r1
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d307      	bcc.n	8010d00 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	699a      	ldr	r2, [r3, #24]
 8010cf4:	187b      	adds	r3, r7, r1
 8010cf6:	881b      	ldrh	r3, [r3, #0]
 8010cf8:	1ad2      	subs	r2, r2, r3
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	619a      	str	r2, [r3, #24]
 8010cfe:	e002      	b.n	8010d06 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	2200      	movs	r2, #0
 8010d04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d121      	bne.n	8010d52 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	001a      	movs	r2, r3
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	18d3      	adds	r3, r2, r3
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	b29a      	uxth	r2, r3
 8010d20:	2018      	movs	r0, #24
 8010d22:	183b      	adds	r3, r7, r0
 8010d24:	4966      	ldr	r1, [pc, #408]	@ (8010ec0 <HAL_PCD_EP_DB_Receive+0x224>)
 8010d26:	400a      	ands	r2, r1
 8010d28:	801a      	strh	r2, [r3, #0]
 8010d2a:	183b      	adds	r3, r7, r0
 8010d2c:	183a      	adds	r2, r7, r0
 8010d2e:	8812      	ldrh	r2, [r2, #0]
 8010d30:	2180      	movs	r1, #128	@ 0x80
 8010d32:	0189      	lsls	r1, r1, #6
 8010d34:	404a      	eors	r2, r1
 8010d36:	801a      	strh	r2, [r3, #0]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	001a      	movs	r2, r3
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	18d3      	adds	r3, r2, r3
 8010d46:	183a      	adds	r2, r7, r0
 8010d48:	8812      	ldrh	r2, [r2, #0]
 8010d4a:	495e      	ldr	r1, [pc, #376]	@ (8010ec4 <HAL_PCD_EP_DB_Receive+0x228>)
 8010d4c:	430a      	orrs	r2, r1
 8010d4e:	b292      	uxth	r2, r2
 8010d50:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010d52:	1dbb      	adds	r3, r7, #6
 8010d54:	881b      	ldrh	r3, [r3, #0]
 8010d56:	2240      	movs	r2, #64	@ 0x40
 8010d58:	4013      	ands	r3, r2
 8010d5a:	d01a      	beq.n	8010d92 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	001a      	movs	r2, r3
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	18d3      	adds	r3, r2, r3
 8010d6a:	881b      	ldrh	r3, [r3, #0]
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	2016      	movs	r0, #22
 8010d70:	183b      	adds	r3, r7, r0
 8010d72:	4955      	ldr	r1, [pc, #340]	@ (8010ec8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010d74:	400a      	ands	r2, r1
 8010d76:	801a      	strh	r2, [r3, #0]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	001a      	movs	r2, r3
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	18d3      	adds	r3, r2, r3
 8010d86:	183a      	adds	r2, r7, r0
 8010d88:	8812      	ldrh	r2, [r2, #0]
 8010d8a:	4950      	ldr	r1, [pc, #320]	@ (8010ecc <HAL_PCD_EP_DB_Receive+0x230>)
 8010d8c:	430a      	orrs	r2, r1
 8010d8e:	b292      	uxth	r2, r2
 8010d90:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010d92:	241a      	movs	r4, #26
 8010d94:	193b      	adds	r3, r7, r4
 8010d96:	881b      	ldrh	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d100      	bne.n	8010d9e <HAL_PCD_EP_DB_Receive+0x102>
 8010d9c:	e086      	b.n	8010eac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6818      	ldr	r0, [r3, #0]
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	6959      	ldr	r1, [r3, #20]
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	891a      	ldrh	r2, [r3, #8]
 8010daa:	193b      	adds	r3, r7, r4
 8010dac:	881b      	ldrh	r3, [r3, #0]
 8010dae:	f006 fcda 	bl	8017766 <USB_ReadPMA>
 8010db2:	e07b      	b.n	8010eac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2250      	movs	r2, #80	@ 0x50
 8010dba:	5a9b      	ldrh	r3, [r3, r2]
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	001a      	movs	r2, r3
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	00db      	lsls	r3, r3, #3
 8010dc6:	18d2      	adds	r2, r2, r3
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	18d3      	adds	r3, r2, r3
 8010dce:	4a40      	ldr	r2, [pc, #256]	@ (8010ed0 <HAL_PCD_EP_DB_Receive+0x234>)
 8010dd0:	4694      	mov	ip, r2
 8010dd2:	4463      	add	r3, ip
 8010dd4:	881a      	ldrh	r2, [r3, #0]
 8010dd6:	211a      	movs	r1, #26
 8010dd8:	187b      	adds	r3, r7, r1
 8010dda:	0592      	lsls	r2, r2, #22
 8010ddc:	0d92      	lsrs	r2, r2, #22
 8010dde:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	699a      	ldr	r2, [r3, #24]
 8010de4:	187b      	adds	r3, r7, r1
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d307      	bcc.n	8010dfc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	699a      	ldr	r2, [r3, #24]
 8010df0:	187b      	adds	r3, r7, r1
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	1ad2      	subs	r2, r2, r3
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	619a      	str	r2, [r3, #24]
 8010dfa:	e002      	b.n	8010e02 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	699b      	ldr	r3, [r3, #24]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d121      	bne.n	8010e4e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	001a      	movs	r2, r3
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	18d3      	adds	r3, r2, r3
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	201e      	movs	r0, #30
 8010e1e:	183b      	adds	r3, r7, r0
 8010e20:	4927      	ldr	r1, [pc, #156]	@ (8010ec0 <HAL_PCD_EP_DB_Receive+0x224>)
 8010e22:	400a      	ands	r2, r1
 8010e24:	801a      	strh	r2, [r3, #0]
 8010e26:	183b      	adds	r3, r7, r0
 8010e28:	183a      	adds	r2, r7, r0
 8010e2a:	8812      	ldrh	r2, [r2, #0]
 8010e2c:	2180      	movs	r1, #128	@ 0x80
 8010e2e:	0189      	lsls	r1, r1, #6
 8010e30:	404a      	eors	r2, r1
 8010e32:	801a      	strh	r2, [r3, #0]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	001a      	movs	r2, r3
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	18d3      	adds	r3, r2, r3
 8010e42:	183a      	adds	r2, r7, r0
 8010e44:	8812      	ldrh	r2, [r2, #0]
 8010e46:	491f      	ldr	r1, [pc, #124]	@ (8010ec4 <HAL_PCD_EP_DB_Receive+0x228>)
 8010e48:	430a      	orrs	r2, r1
 8010e4a:	b292      	uxth	r2, r2
 8010e4c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8010e4e:	1dbb      	adds	r3, r7, #6
 8010e50:	881b      	ldrh	r3, [r3, #0]
 8010e52:	2240      	movs	r2, #64	@ 0x40
 8010e54:	4013      	ands	r3, r2
 8010e56:	d11a      	bne.n	8010e8e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	001a      	movs	r2, r3
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	009b      	lsls	r3, r3, #2
 8010e64:	18d3      	adds	r3, r2, r3
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	201c      	movs	r0, #28
 8010e6c:	183b      	adds	r3, r7, r0
 8010e6e:	4916      	ldr	r1, [pc, #88]	@ (8010ec8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010e70:	400a      	ands	r2, r1
 8010e72:	801a      	strh	r2, [r3, #0]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	001a      	movs	r2, r3
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	18d3      	adds	r3, r2, r3
 8010e82:	183a      	adds	r2, r7, r0
 8010e84:	8812      	ldrh	r2, [r2, #0]
 8010e86:	4911      	ldr	r1, [pc, #68]	@ (8010ecc <HAL_PCD_EP_DB_Receive+0x230>)
 8010e88:	430a      	orrs	r2, r1
 8010e8a:	b292      	uxth	r2, r2
 8010e8c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010e8e:	241a      	movs	r4, #26
 8010e90:	193b      	adds	r3, r7, r4
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d009      	beq.n	8010eac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	6818      	ldr	r0, [r3, #0]
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	6959      	ldr	r1, [r3, #20]
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	895a      	ldrh	r2, [r3, #10]
 8010ea4:	193b      	adds	r3, r7, r4
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	f006 fc5d 	bl	8017766 <USB_ReadPMA>
    }
  }

  return count;
 8010eac:	231a      	movs	r3, #26
 8010eae:	18fb      	adds	r3, r7, r3
 8010eb0:	881b      	ldrh	r3, [r3, #0]
}
 8010eb2:	0018      	movs	r0, r3
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	b009      	add	sp, #36	@ 0x24
 8010eb8:	bd90      	pop	{r4, r7, pc}
 8010eba:	46c0      	nop			@ (mov r8, r8)
 8010ebc:	00000402 	.word	0x00000402
 8010ec0:	ffffbf8f 	.word	0xffffbf8f
 8010ec4:	ffff8080 	.word	0xffff8080
 8010ec8:	ffff8f8f 	.word	0xffff8f8f
 8010ecc:	ffff80c0 	.word	0xffff80c0
 8010ed0:	00000406 	.word	0x00000406

08010ed4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b0a4      	sub	sp, #144	@ 0x90
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	1dbb      	adds	r3, r7, #6
 8010ee0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010ee2:	1dbb      	adds	r3, r7, #6
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	2240      	movs	r2, #64	@ 0x40
 8010ee8:	4013      	ands	r3, r2
 8010eea:	d100      	bne.n	8010eee <HAL_PCD_EP_DB_Transmit+0x1a>
 8010eec:	e1e4      	b.n	80112b8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2250      	movs	r2, #80	@ 0x50
 8010ef4:	5a9b      	ldrh	r3, [r3, r2]
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	001a      	movs	r2, r3
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	00db      	lsls	r3, r3, #3
 8010f00:	18d2      	adds	r2, r2, r3
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	18d3      	adds	r3, r2, r3
 8010f08:	4ad0      	ldr	r2, [pc, #832]	@ (801124c <HAL_PCD_EP_DB_Transmit+0x378>)
 8010f0a:	4694      	mov	ip, r2
 8010f0c:	4463      	add	r3, ip
 8010f0e:	881a      	ldrh	r2, [r3, #0]
 8010f10:	2186      	movs	r1, #134	@ 0x86
 8010f12:	187b      	adds	r3, r7, r1
 8010f14:	0592      	lsls	r2, r2, #22
 8010f16:	0d92      	lsrs	r2, r2, #22
 8010f18:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	699a      	ldr	r2, [r3, #24]
 8010f1e:	187b      	adds	r3, r7, r1
 8010f20:	881b      	ldrh	r3, [r3, #0]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d907      	bls.n	8010f36 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	699a      	ldr	r2, [r3, #24]
 8010f2a:	187b      	adds	r3, r7, r1
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	1ad2      	subs	r2, r2, r3
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	619a      	str	r2, [r3, #24]
 8010f34:	e002      	b.n	8010f3c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	699b      	ldr	r3, [r3, #24]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d000      	beq.n	8010f46 <HAL_PCD_EP_DB_Transmit+0x72>
 8010f44:	e0b5      	b.n	80110b2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	785b      	ldrb	r3, [r3, #1]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d125      	bne.n	8010f9a <HAL_PCD_EP_DB_Transmit+0xc6>
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2250      	movs	r2, #80	@ 0x50
 8010f5a:	5a9b      	ldrh	r3, [r3, r2]
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	001a      	movs	r2, r3
 8010f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f62:	189b      	adds	r3, r3, r2
 8010f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	00da      	lsls	r2, r3, #3
 8010f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f6e:	18d3      	adds	r3, r2, r3
 8010f70:	4ab6      	ldr	r2, [pc, #728]	@ (801124c <HAL_PCD_EP_DB_Transmit+0x378>)
 8010f72:	4694      	mov	ip, r2
 8010f74:	4463      	add	r3, ip
 8010f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f7a:	881b      	ldrh	r3, [r3, #0]
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	059b      	lsls	r3, r3, #22
 8010f80:	0d9b      	lsrs	r3, r3, #22
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f86:	801a      	strh	r2, [r3, #0]
 8010f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f8a:	881b      	ldrh	r3, [r3, #0]
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	4ab0      	ldr	r2, [pc, #704]	@ (8011250 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010f90:	4313      	orrs	r3, r2
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f96:	801a      	strh	r2, [r3, #0]
 8010f98:	e01b      	b.n	8010fd2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	785b      	ldrb	r3, [r3, #1]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d117      	bne.n	8010fd2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2250      	movs	r2, #80	@ 0x50
 8010fae:	5a9b      	ldrh	r3, [r3, r2]
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	001a      	movs	r2, r3
 8010fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fb6:	189b      	adds	r3, r3, r2
 8010fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	00da      	lsls	r2, r3, #3
 8010fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fc2:	18d3      	adds	r3, r2, r3
 8010fc4:	4aa1      	ldr	r2, [pc, #644]	@ (801124c <HAL_PCD_EP_DB_Transmit+0x378>)
 8010fc6:	4694      	mov	ip, r2
 8010fc8:	4463      	add	r3, ip
 8010fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8010fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fce:	2200      	movs	r2, #0
 8010fd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	785b      	ldrb	r3, [r3, #1]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d125      	bne.n	801102c <HAL_PCD_EP_DB_Transmit+0x158>
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	61fb      	str	r3, [r7, #28]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2250      	movs	r2, #80	@ 0x50
 8010fec:	5a9b      	ldrh	r3, [r3, r2]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	001a      	movs	r2, r3
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	189b      	adds	r3, r3, r2
 8010ff6:	61fb      	str	r3, [r7, #28]
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	00da      	lsls	r2, r3, #3
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	18d3      	adds	r3, r2, r3
 8011002:	4a94      	ldr	r2, [pc, #592]	@ (8011254 <HAL_PCD_EP_DB_Transmit+0x380>)
 8011004:	4694      	mov	ip, r2
 8011006:	4463      	add	r3, ip
 8011008:	61bb      	str	r3, [r7, #24]
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	881b      	ldrh	r3, [r3, #0]
 801100e:	b29b      	uxth	r3, r3
 8011010:	059b      	lsls	r3, r3, #22
 8011012:	0d9b      	lsrs	r3, r3, #22
 8011014:	b29a      	uxth	r2, r3
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	801a      	strh	r2, [r3, #0]
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	b29b      	uxth	r3, r3
 8011020:	4a8b      	ldr	r2, [pc, #556]	@ (8011250 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8011022:	4313      	orrs	r3, r2
 8011024:	b29a      	uxth	r2, r3
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	801a      	strh	r2, [r3, #0]
 801102a:	e018      	b.n	801105e <HAL_PCD_EP_DB_Transmit+0x18a>
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	785b      	ldrb	r3, [r3, #1]
 8011030:	2b01      	cmp	r3, #1
 8011032:	d114      	bne.n	801105e <HAL_PCD_EP_DB_Transmit+0x18a>
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2250      	movs	r2, #80	@ 0x50
 801103a:	5a9b      	ldrh	r3, [r3, r2]
 801103c:	b29b      	uxth	r3, r3
 801103e:	001a      	movs	r2, r3
 8011040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011042:	189b      	adds	r3, r3, r2
 8011044:	627b      	str	r3, [r7, #36]	@ 0x24
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	00da      	lsls	r2, r3, #3
 801104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104e:	18d3      	adds	r3, r2, r3
 8011050:	4a80      	ldr	r2, [pc, #512]	@ (8011254 <HAL_PCD_EP_DB_Transmit+0x380>)
 8011052:	4694      	mov	ip, r2
 8011054:	4463      	add	r3, ip
 8011056:	623b      	str	r3, [r7, #32]
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	2200      	movs	r2, #0
 801105c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	781a      	ldrb	r2, [r3, #0]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	0011      	movs	r1, r2
 8011066:	0018      	movs	r0, r3
 8011068:	f008 fbb8 	bl	80197dc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801106c:	1dbb      	adds	r3, r7, #6
 801106e:	881a      	ldrh	r2, [r3, #0]
 8011070:	2380      	movs	r3, #128	@ 0x80
 8011072:	01db      	lsls	r3, r3, #7
 8011074:	4013      	ands	r3, r2
 8011076:	d100      	bne.n	801107a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8011078:	e309      	b.n	801168e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	001a      	movs	r2, r3
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	009b      	lsls	r3, r3, #2
 8011086:	18d3      	adds	r3, r2, r3
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	b29a      	uxth	r2, r3
 801108c:	2016      	movs	r0, #22
 801108e:	183b      	adds	r3, r7, r0
 8011090:	4971      	ldr	r1, [pc, #452]	@ (8011258 <HAL_PCD_EP_DB_Transmit+0x384>)
 8011092:	400a      	ands	r2, r1
 8011094:	801a      	strh	r2, [r3, #0]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	001a      	movs	r2, r3
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	18d3      	adds	r3, r2, r3
 80110a4:	183a      	adds	r2, r7, r0
 80110a6:	8812      	ldrh	r2, [r2, #0]
 80110a8:	496c      	ldr	r1, [pc, #432]	@ (801125c <HAL_PCD_EP_DB_Transmit+0x388>)
 80110aa:	430a      	orrs	r2, r1
 80110ac:	b292      	uxth	r2, r2
 80110ae:	801a      	strh	r2, [r3, #0]
 80110b0:	e2ed      	b.n	801168e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80110b2:	1dbb      	adds	r3, r7, #6
 80110b4:	881a      	ldrh	r2, [r3, #0]
 80110b6:	2380      	movs	r3, #128	@ 0x80
 80110b8:	01db      	lsls	r3, r3, #7
 80110ba:	4013      	ands	r3, r2
 80110bc:	d01a      	beq.n	80110f4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	001a      	movs	r2, r3
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	18d3      	adds	r3, r2, r3
 80110cc:	881b      	ldrh	r3, [r3, #0]
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	208a      	movs	r0, #138	@ 0x8a
 80110d2:	183b      	adds	r3, r7, r0
 80110d4:	4960      	ldr	r1, [pc, #384]	@ (8011258 <HAL_PCD_EP_DB_Transmit+0x384>)
 80110d6:	400a      	ands	r2, r1
 80110d8:	801a      	strh	r2, [r3, #0]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	001a      	movs	r2, r3
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	18d3      	adds	r3, r2, r3
 80110e8:	183a      	adds	r2, r7, r0
 80110ea:	8812      	ldrh	r2, [r2, #0]
 80110ec:	495b      	ldr	r1, [pc, #364]	@ (801125c <HAL_PCD_EP_DB_Transmit+0x388>)
 80110ee:	430a      	orrs	r2, r1
 80110f0:	b292      	uxth	r2, r2
 80110f2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	2224      	movs	r2, #36	@ 0x24
 80110f8:	5c9b      	ldrb	r3, [r3, r2]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d000      	beq.n	8011100 <HAL_PCD_EP_DB_Transmit+0x22c>
 80110fe:	e2c6      	b.n	801168e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	695a      	ldr	r2, [r3, #20]
 8011104:	2186      	movs	r1, #134	@ 0x86
 8011106:	187b      	adds	r3, r7, r1
 8011108:	881b      	ldrh	r3, [r3, #0]
 801110a:	18d2      	adds	r2, r2, r3
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	69da      	ldr	r2, [r3, #28]
 8011114:	187b      	adds	r3, r7, r1
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	18d2      	adds	r2, r2, r3
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	6a1a      	ldr	r2, [r3, #32]
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	691b      	ldr	r3, [r3, #16]
 8011126:	429a      	cmp	r2, r3
 8011128:	d30c      	bcc.n	8011144 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	218c      	movs	r1, #140	@ 0x8c
 8011130:	187a      	adds	r2, r7, r1
 8011132:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	6a1a      	ldr	r2, [r3, #32]
 8011138:	187b      	adds	r3, r7, r1
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	1ad2      	subs	r2, r2, r3
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	621a      	str	r2, [r3, #32]
 8011142:	e01a      	b.n	801117a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	6a1b      	ldr	r3, [r3, #32]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10a      	bne.n	8011162 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801114c:	2386      	movs	r3, #134	@ 0x86
 801114e:	18fb      	adds	r3, r7, r3
 8011150:	881b      	ldrh	r3, [r3, #0]
 8011152:	228c      	movs	r2, #140	@ 0x8c
 8011154:	18ba      	adds	r2, r7, r2
 8011156:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	2224      	movs	r2, #36	@ 0x24
 801115c:	2100      	movs	r1, #0
 801115e:	5499      	strb	r1, [r3, r2]
 8011160:	e00b      	b.n	801117a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	2224      	movs	r2, #36	@ 0x24
 8011166:	2100      	movs	r1, #0
 8011168:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	6a1b      	ldr	r3, [r3, #32]
 801116e:	228c      	movs	r2, #140	@ 0x8c
 8011170:	18ba      	adds	r2, r7, r2
 8011172:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2200      	movs	r2, #0
 8011178:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	785b      	ldrb	r3, [r3, #1]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d000      	beq.n	8011184 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8011182:	e06d      	b.n	8011260 <HAL_PCD_EP_DB_Transmit+0x38c>
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2250      	movs	r2, #80	@ 0x50
 8011190:	5a9b      	ldrh	r3, [r3, r2]
 8011192:	b29b      	uxth	r3, r3
 8011194:	001a      	movs	r2, r3
 8011196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011198:	189b      	adds	r3, r3, r2
 801119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	00da      	lsls	r2, r3, #3
 80111a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111a4:	18d3      	adds	r3, r2, r3
 80111a6:	4a29      	ldr	r2, [pc, #164]	@ (801124c <HAL_PCD_EP_DB_Transmit+0x378>)
 80111a8:	4694      	mov	ip, r2
 80111aa:	4463      	add	r3, ip
 80111ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80111ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b0:	881b      	ldrh	r3, [r3, #0]
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	059b      	lsls	r3, r3, #22
 80111b6:	0d9b      	lsrs	r3, r3, #22
 80111b8:	b29a      	uxth	r2, r3
 80111ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111bc:	801a      	strh	r2, [r3, #0]
 80111be:	228c      	movs	r2, #140	@ 0x8c
 80111c0:	18bb      	adds	r3, r7, r2
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80111c6:	d91a      	bls.n	80111fe <HAL_PCD_EP_DB_Transmit+0x32a>
 80111c8:	18bb      	adds	r3, r7, r2
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	095b      	lsrs	r3, r3, #5
 80111ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111d0:	18bb      	adds	r3, r7, r2
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	221f      	movs	r2, #31
 80111d6:	4013      	ands	r3, r2
 80111d8:	d102      	bne.n	80111e0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80111da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111dc:	3b01      	subs	r3, #1
 80111de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e2:	881b      	ldrh	r3, [r3, #0]
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	029b      	lsls	r3, r3, #10
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	4313      	orrs	r3, r2
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	4a17      	ldr	r2, [pc, #92]	@ (8011250 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80111f4:	4313      	orrs	r3, r2
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111fa:	801a      	strh	r2, [r3, #0]
 80111fc:	e04f      	b.n	801129e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80111fe:	238c      	movs	r3, #140	@ 0x8c
 8011200:	18fb      	adds	r3, r7, r3
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d108      	bne.n	801121a <HAL_PCD_EP_DB_Transmit+0x346>
 8011208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801120a:	881b      	ldrh	r3, [r3, #0]
 801120c:	b29b      	uxth	r3, r3
 801120e:	4a10      	ldr	r2, [pc, #64]	@ (8011250 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8011210:	4313      	orrs	r3, r2
 8011212:	b29a      	uxth	r2, r3
 8011214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011216:	801a      	strh	r2, [r3, #0]
 8011218:	e041      	b.n	801129e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801121a:	228c      	movs	r2, #140	@ 0x8c
 801121c:	18bb      	adds	r3, r7, r2
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	085b      	lsrs	r3, r3, #1
 8011222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011224:	18bb      	adds	r3, r7, r2
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	2201      	movs	r2, #1
 801122a:	4013      	ands	r3, r2
 801122c:	d002      	beq.n	8011234 <HAL_PCD_EP_DB_Transmit+0x360>
 801122e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011230:	3301      	adds	r3, #1
 8011232:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	b29a      	uxth	r2, r3
 801123a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801123c:	b29b      	uxth	r3, r3
 801123e:	029b      	lsls	r3, r3, #10
 8011240:	b29b      	uxth	r3, r3
 8011242:	4313      	orrs	r3, r2
 8011244:	b29a      	uxth	r2, r3
 8011246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011248:	801a      	strh	r2, [r3, #0]
 801124a:	e028      	b.n	801129e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801124c:	00000402 	.word	0x00000402
 8011250:	ffff8000 	.word	0xffff8000
 8011254:	00000406 	.word	0x00000406
 8011258:	ffff8f8f 	.word	0xffff8f8f
 801125c:	ffffc080 	.word	0xffffc080
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	785b      	ldrb	r3, [r3, #1]
 8011264:	2b01      	cmp	r3, #1
 8011266:	d11a      	bne.n	801129e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	647b      	str	r3, [r7, #68]	@ 0x44
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2250      	movs	r2, #80	@ 0x50
 8011274:	5a9b      	ldrh	r3, [r3, r2]
 8011276:	b29b      	uxth	r3, r3
 8011278:	001a      	movs	r2, r3
 801127a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801127c:	189b      	adds	r3, r3, r2
 801127e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	00da      	lsls	r2, r3, #3
 8011286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011288:	18d3      	adds	r3, r2, r3
 801128a:	4adb      	ldr	r2, [pc, #876]	@ (80115f8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801128c:	4694      	mov	ip, r2
 801128e:	4463      	add	r3, ip
 8011290:	643b      	str	r3, [r7, #64]	@ 0x40
 8011292:	238c      	movs	r3, #140	@ 0x8c
 8011294:	18fb      	adds	r3, r7, r3
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	b29a      	uxth	r2, r3
 801129a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801129c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6818      	ldr	r0, [r3, #0]
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	6959      	ldr	r1, [r3, #20]
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	891a      	ldrh	r2, [r3, #8]
 80112aa:	238c      	movs	r3, #140	@ 0x8c
 80112ac:	18fb      	adds	r3, r7, r3
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	f006 fa0f 	bl	80176d4 <USB_WritePMA>
 80112b6:	e1ea      	b.n	801168e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2250      	movs	r2, #80	@ 0x50
 80112be:	5a9b      	ldrh	r3, [r3, r2]
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	001a      	movs	r2, r3
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	00db      	lsls	r3, r3, #3
 80112ca:	18d2      	adds	r2, r2, r3
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	18d3      	adds	r3, r2, r3
 80112d2:	4aca      	ldr	r2, [pc, #808]	@ (80115fc <HAL_PCD_EP_DB_Transmit+0x728>)
 80112d4:	4694      	mov	ip, r2
 80112d6:	4463      	add	r3, ip
 80112d8:	881a      	ldrh	r2, [r3, #0]
 80112da:	2186      	movs	r1, #134	@ 0x86
 80112dc:	187b      	adds	r3, r7, r1
 80112de:	0592      	lsls	r2, r2, #22
 80112e0:	0d92      	lsrs	r2, r2, #22
 80112e2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	699a      	ldr	r2, [r3, #24]
 80112e8:	187b      	adds	r3, r7, r1
 80112ea:	881b      	ldrh	r3, [r3, #0]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d307      	bcc.n	8011300 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	699a      	ldr	r2, [r3, #24]
 80112f4:	187b      	adds	r3, r7, r1
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	1ad2      	subs	r2, r2, r3
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	619a      	str	r2, [r3, #24]
 80112fe:	e002      	b.n	8011306 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	2200      	movs	r2, #0
 8011304:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	699b      	ldr	r3, [r3, #24]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d000      	beq.n	8011310 <HAL_PCD_EP_DB_Transmit+0x43c>
 801130e:	e0bb      	b.n	8011488 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	785b      	ldrb	r3, [r3, #1]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d125      	bne.n	8011364 <HAL_PCD_EP_DB_Transmit+0x490>
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2250      	movs	r2, #80	@ 0x50
 8011324:	5a9b      	ldrh	r3, [r3, r2]
 8011326:	b29b      	uxth	r3, r3
 8011328:	001a      	movs	r2, r3
 801132a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801132c:	189b      	adds	r3, r3, r2
 801132e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	00da      	lsls	r2, r3, #3
 8011336:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011338:	18d3      	adds	r3, r2, r3
 801133a:	4aaf      	ldr	r2, [pc, #700]	@ (80115f8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801133c:	4694      	mov	ip, r2
 801133e:	4463      	add	r3, ip
 8011340:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	b29b      	uxth	r3, r3
 8011348:	059b      	lsls	r3, r3, #22
 801134a:	0d9b      	lsrs	r3, r3, #22
 801134c:	b29a      	uxth	r2, r3
 801134e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011350:	801a      	strh	r2, [r3, #0]
 8011352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	b29b      	uxth	r3, r3
 8011358:	4aa9      	ldr	r2, [pc, #676]	@ (8011600 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801135a:	4313      	orrs	r3, r2
 801135c:	b29a      	uxth	r2, r3
 801135e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011360:	801a      	strh	r2, [r3, #0]
 8011362:	e01b      	b.n	801139c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	785b      	ldrb	r3, [r3, #1]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d117      	bne.n	801139c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	667b      	str	r3, [r7, #100]	@ 0x64
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2250      	movs	r2, #80	@ 0x50
 8011378:	5a9b      	ldrh	r3, [r3, r2]
 801137a:	b29b      	uxth	r3, r3
 801137c:	001a      	movs	r2, r3
 801137e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011380:	189b      	adds	r3, r3, r2
 8011382:	667b      	str	r3, [r7, #100]	@ 0x64
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	00da      	lsls	r2, r3, #3
 801138a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801138c:	18d3      	adds	r3, r2, r3
 801138e:	4a9a      	ldr	r2, [pc, #616]	@ (80115f8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8011390:	4694      	mov	ip, r2
 8011392:	4463      	add	r3, ip
 8011394:	663b      	str	r3, [r7, #96]	@ 0x60
 8011396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011398:	2200      	movs	r2, #0
 801139a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	785b      	ldrb	r3, [r3, #1]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d12b      	bne.n	8011402 <HAL_PCD_EP_DB_Transmit+0x52e>
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2250      	movs	r2, #80	@ 0x50
 80113b6:	5a9b      	ldrh	r3, [r3, r2]
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	001a      	movs	r2, r3
 80113bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113be:	189b      	adds	r3, r3, r2
 80113c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	00da      	lsls	r2, r3, #3
 80113c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113ca:	18d3      	adds	r3, r2, r3
 80113cc:	4a8b      	ldr	r2, [pc, #556]	@ (80115fc <HAL_PCD_EP_DB_Transmit+0x728>)
 80113ce:	4694      	mov	ip, r2
 80113d0:	4463      	add	r3, ip
 80113d2:	2180      	movs	r1, #128	@ 0x80
 80113d4:	187a      	adds	r2, r7, r1
 80113d6:	6013      	str	r3, [r2, #0]
 80113d8:	187b      	adds	r3, r7, r1
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	881b      	ldrh	r3, [r3, #0]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	059b      	lsls	r3, r3, #22
 80113e2:	0d9b      	lsrs	r3, r3, #22
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	187b      	adds	r3, r7, r1
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	801a      	strh	r2, [r3, #0]
 80113ec:	187b      	adds	r3, r7, r1
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	881b      	ldrh	r3, [r3, #0]
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	4a82      	ldr	r2, [pc, #520]	@ (8011600 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80113f6:	4313      	orrs	r3, r2
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	187b      	adds	r3, r7, r1
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	801a      	strh	r2, [r3, #0]
 8011400:	e018      	b.n	8011434 <HAL_PCD_EP_DB_Transmit+0x560>
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	785b      	ldrb	r3, [r3, #1]
 8011406:	2b01      	cmp	r3, #1
 8011408:	d114      	bne.n	8011434 <HAL_PCD_EP_DB_Transmit+0x560>
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2250      	movs	r2, #80	@ 0x50
 8011410:	5a9b      	ldrh	r3, [r3, r2]
 8011412:	b29b      	uxth	r3, r3
 8011414:	001a      	movs	r2, r3
 8011416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011418:	189b      	adds	r3, r3, r2
 801141a:	677b      	str	r3, [r7, #116]	@ 0x74
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	00da      	lsls	r2, r3, #3
 8011422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011424:	18d3      	adds	r3, r2, r3
 8011426:	4a75      	ldr	r2, [pc, #468]	@ (80115fc <HAL_PCD_EP_DB_Transmit+0x728>)
 8011428:	4694      	mov	ip, r2
 801142a:	4463      	add	r3, ip
 801142c:	673b      	str	r3, [r7, #112]	@ 0x70
 801142e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011430:	2200      	movs	r2, #0
 8011432:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	781a      	ldrb	r2, [r3, #0]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	0011      	movs	r1, r2
 801143c:	0018      	movs	r0, r3
 801143e:	f008 f9cd 	bl	80197dc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8011442:	1dbb      	adds	r3, r7, #6
 8011444:	881a      	ldrh	r2, [r3, #0]
 8011446:	2380      	movs	r3, #128	@ 0x80
 8011448:	01db      	lsls	r3, r3, #7
 801144a:	4013      	ands	r3, r2
 801144c:	d000      	beq.n	8011450 <HAL_PCD_EP_DB_Transmit+0x57c>
 801144e:	e11e      	b.n	801168e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	001a      	movs	r2, r3
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	18d3      	adds	r3, r2, r3
 801145e:	881b      	ldrh	r3, [r3, #0]
 8011460:	b29a      	uxth	r2, r3
 8011462:	2088      	movs	r0, #136	@ 0x88
 8011464:	183b      	adds	r3, r7, r0
 8011466:	4967      	ldr	r1, [pc, #412]	@ (8011604 <HAL_PCD_EP_DB_Transmit+0x730>)
 8011468:	400a      	ands	r2, r1
 801146a:	801a      	strh	r2, [r3, #0]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	001a      	movs	r2, r3
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	18d3      	adds	r3, r2, r3
 801147a:	183a      	adds	r2, r7, r0
 801147c:	8812      	ldrh	r2, [r2, #0]
 801147e:	4962      	ldr	r1, [pc, #392]	@ (8011608 <HAL_PCD_EP_DB_Transmit+0x734>)
 8011480:	430a      	orrs	r2, r1
 8011482:	b292      	uxth	r2, r2
 8011484:	801a      	strh	r2, [r3, #0]
 8011486:	e102      	b.n	801168e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8011488:	1dbb      	adds	r3, r7, #6
 801148a:	881a      	ldrh	r2, [r3, #0]
 801148c:	2380      	movs	r3, #128	@ 0x80
 801148e:	01db      	lsls	r3, r3, #7
 8011490:	4013      	ands	r3, r2
 8011492:	d11a      	bne.n	80114ca <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	001a      	movs	r2, r3
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	18d3      	adds	r3, r2, r3
 80114a2:	881b      	ldrh	r3, [r3, #0]
 80114a4:	b29a      	uxth	r2, r3
 80114a6:	204e      	movs	r0, #78	@ 0x4e
 80114a8:	183b      	adds	r3, r7, r0
 80114aa:	4956      	ldr	r1, [pc, #344]	@ (8011604 <HAL_PCD_EP_DB_Transmit+0x730>)
 80114ac:	400a      	ands	r2, r1
 80114ae:	801a      	strh	r2, [r3, #0]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	001a      	movs	r2, r3
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	18d3      	adds	r3, r2, r3
 80114be:	183a      	adds	r2, r7, r0
 80114c0:	8812      	ldrh	r2, [r2, #0]
 80114c2:	4951      	ldr	r1, [pc, #324]	@ (8011608 <HAL_PCD_EP_DB_Transmit+0x734>)
 80114c4:	430a      	orrs	r2, r1
 80114c6:	b292      	uxth	r2, r2
 80114c8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2224      	movs	r2, #36	@ 0x24
 80114ce:	5c9b      	ldrb	r3, [r3, r2]
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d000      	beq.n	80114d6 <HAL_PCD_EP_DB_Transmit+0x602>
 80114d4:	e0db      	b.n	801168e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	695a      	ldr	r2, [r3, #20]
 80114da:	2186      	movs	r1, #134	@ 0x86
 80114dc:	187b      	adds	r3, r7, r1
 80114de:	881b      	ldrh	r3, [r3, #0]
 80114e0:	18d2      	adds	r2, r2, r3
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	69da      	ldr	r2, [r3, #28]
 80114ea:	187b      	adds	r3, r7, r1
 80114ec:	881b      	ldrh	r3, [r3, #0]
 80114ee:	18d2      	adds	r2, r2, r3
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	6a1a      	ldr	r2, [r3, #32]
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	691b      	ldr	r3, [r3, #16]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d30c      	bcc.n	801151a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	691b      	ldr	r3, [r3, #16]
 8011504:	218c      	movs	r1, #140	@ 0x8c
 8011506:	187a      	adds	r2, r7, r1
 8011508:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	6a1a      	ldr	r2, [r3, #32]
 801150e:	187b      	adds	r3, r7, r1
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	1ad2      	subs	r2, r2, r3
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	621a      	str	r2, [r3, #32]
 8011518:	e01a      	b.n	8011550 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	6a1b      	ldr	r3, [r3, #32]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d10a      	bne.n	8011538 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8011522:	2386      	movs	r3, #134	@ 0x86
 8011524:	18fb      	adds	r3, r7, r3
 8011526:	881b      	ldrh	r3, [r3, #0]
 8011528:	228c      	movs	r2, #140	@ 0x8c
 801152a:	18ba      	adds	r2, r7, r2
 801152c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	2224      	movs	r2, #36	@ 0x24
 8011532:	2100      	movs	r1, #0
 8011534:	5499      	strb	r1, [r3, r2]
 8011536:	e00b      	b.n	8011550 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	6a1b      	ldr	r3, [r3, #32]
 801153c:	228c      	movs	r2, #140	@ 0x8c
 801153e:	18ba      	adds	r2, r7, r2
 8011540:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2200      	movs	r2, #0
 8011546:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	2224      	movs	r2, #36	@ 0x24
 801154c:	2100      	movs	r1, #0
 801154e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	657b      	str	r3, [r7, #84]	@ 0x54
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	785b      	ldrb	r3, [r3, #1]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d000      	beq.n	8011560 <HAL_PCD_EP_DB_Transmit+0x68c>
 801155e:	e06e      	b.n	801163e <HAL_PCD_EP_DB_Transmit+0x76a>
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2250      	movs	r2, #80	@ 0x50
 801156c:	5a9b      	ldrh	r3, [r3, r2]
 801156e:	b29b      	uxth	r3, r3
 8011570:	001a      	movs	r2, r3
 8011572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011574:	189b      	adds	r3, r3, r2
 8011576:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	00da      	lsls	r2, r3, #3
 801157e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011580:	18d3      	adds	r3, r2, r3
 8011582:	4a1e      	ldr	r2, [pc, #120]	@ (80115fc <HAL_PCD_EP_DB_Transmit+0x728>)
 8011584:	4694      	mov	ip, r2
 8011586:	4463      	add	r3, ip
 8011588:	65bb      	str	r3, [r7, #88]	@ 0x58
 801158a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801158c:	881b      	ldrh	r3, [r3, #0]
 801158e:	b29b      	uxth	r3, r3
 8011590:	059b      	lsls	r3, r3, #22
 8011592:	0d9b      	lsrs	r3, r3, #22
 8011594:	b29a      	uxth	r2, r3
 8011596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011598:	801a      	strh	r2, [r3, #0]
 801159a:	228c      	movs	r2, #140	@ 0x8c
 801159c:	18bb      	adds	r3, r7, r2
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80115a2:	d91a      	bls.n	80115da <HAL_PCD_EP_DB_Transmit+0x706>
 80115a4:	18bb      	adds	r3, r7, r2
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	095b      	lsrs	r3, r3, #5
 80115aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115ac:	18bb      	adds	r3, r7, r2
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	221f      	movs	r2, #31
 80115b2:	4013      	ands	r3, r2
 80115b4:	d102      	bne.n	80115bc <HAL_PCD_EP_DB_Transmit+0x6e8>
 80115b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115b8:	3b01      	subs	r3, #1
 80115ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	029b      	lsls	r3, r3, #10
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	4313      	orrs	r3, r2
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	4a0c      	ldr	r2, [pc, #48]	@ (8011600 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80115d0:	4313      	orrs	r3, r2
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115d6:	801a      	strh	r2, [r3, #0]
 80115d8:	e04d      	b.n	8011676 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80115da:	238c      	movs	r3, #140	@ 0x8c
 80115dc:	18fb      	adds	r3, r7, r3
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d113      	bne.n	801160c <HAL_PCD_EP_DB_Transmit+0x738>
 80115e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	4a05      	ldr	r2, [pc, #20]	@ (8011600 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80115ec:	4313      	orrs	r3, r2
 80115ee:	b29a      	uxth	r2, r3
 80115f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115f2:	801a      	strh	r2, [r3, #0]
 80115f4:	e03f      	b.n	8011676 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80115f6:	46c0      	nop			@ (mov r8, r8)
 80115f8:	00000402 	.word	0x00000402
 80115fc:	00000406 	.word	0x00000406
 8011600:	ffff8000 	.word	0xffff8000
 8011604:	ffff8f8f 	.word	0xffff8f8f
 8011608:	ffffc080 	.word	0xffffc080
 801160c:	228c      	movs	r2, #140	@ 0x8c
 801160e:	18bb      	adds	r3, r7, r2
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	085b      	lsrs	r3, r3, #1
 8011614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011616:	18bb      	adds	r3, r7, r2
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2201      	movs	r2, #1
 801161c:	4013      	ands	r3, r2
 801161e:	d002      	beq.n	8011626 <HAL_PCD_EP_DB_Transmit+0x752>
 8011620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011622:	3301      	adds	r3, #1
 8011624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	b29a      	uxth	r2, r3
 801162c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801162e:	b29b      	uxth	r3, r3
 8011630:	029b      	lsls	r3, r3, #10
 8011632:	b29b      	uxth	r3, r3
 8011634:	4313      	orrs	r3, r2
 8011636:	b29a      	uxth	r2, r3
 8011638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801163a:	801a      	strh	r2, [r3, #0]
 801163c:	e01b      	b.n	8011676 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	785b      	ldrb	r3, [r3, #1]
 8011642:	2b01      	cmp	r3, #1
 8011644:	d117      	bne.n	8011676 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2250      	movs	r2, #80	@ 0x50
 801164c:	5a9b      	ldrh	r3, [r3, r2]
 801164e:	b29b      	uxth	r3, r3
 8011650:	001a      	movs	r2, r3
 8011652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011654:	189b      	adds	r3, r3, r2
 8011656:	657b      	str	r3, [r7, #84]	@ 0x54
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	00da      	lsls	r2, r3, #3
 801165e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011660:	18d3      	adds	r3, r2, r3
 8011662:	4a21      	ldr	r2, [pc, #132]	@ (80116e8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8011664:	4694      	mov	ip, r2
 8011666:	4463      	add	r3, ip
 8011668:	653b      	str	r3, [r7, #80]	@ 0x50
 801166a:	238c      	movs	r3, #140	@ 0x8c
 801166c:	18fb      	adds	r3, r7, r3
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	b29a      	uxth	r2, r3
 8011672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011674:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	6959      	ldr	r1, [r3, #20]
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	895a      	ldrh	r2, [r3, #10]
 8011682:	238c      	movs	r3, #140	@ 0x8c
 8011684:	18fb      	adds	r3, r7, r3
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	b29b      	uxth	r3, r3
 801168a:	f006 f823 	bl	80176d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	001a      	movs	r2, r3
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	18d3      	adds	r3, r2, r3
 801169c:	881b      	ldrh	r3, [r3, #0]
 801169e:	b29a      	uxth	r2, r3
 80116a0:	2014      	movs	r0, #20
 80116a2:	183b      	adds	r3, r7, r0
 80116a4:	4911      	ldr	r1, [pc, #68]	@ (80116ec <HAL_PCD_EP_DB_Transmit+0x818>)
 80116a6:	400a      	ands	r2, r1
 80116a8:	801a      	strh	r2, [r3, #0]
 80116aa:	183b      	adds	r3, r7, r0
 80116ac:	183a      	adds	r2, r7, r0
 80116ae:	8812      	ldrh	r2, [r2, #0]
 80116b0:	2110      	movs	r1, #16
 80116b2:	404a      	eors	r2, r1
 80116b4:	801a      	strh	r2, [r3, #0]
 80116b6:	183b      	adds	r3, r7, r0
 80116b8:	183a      	adds	r2, r7, r0
 80116ba:	8812      	ldrh	r2, [r2, #0]
 80116bc:	2120      	movs	r1, #32
 80116be:	404a      	eors	r2, r1
 80116c0:	801a      	strh	r2, [r3, #0]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	001a      	movs	r2, r3
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	009b      	lsls	r3, r3, #2
 80116ce:	18d3      	adds	r3, r2, r3
 80116d0:	183a      	adds	r2, r7, r0
 80116d2:	8812      	ldrh	r2, [r2, #0]
 80116d4:	4906      	ldr	r1, [pc, #24]	@ (80116f0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80116d6:	430a      	orrs	r2, r1
 80116d8:	b292      	uxth	r2, r2
 80116da:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	0018      	movs	r0, r3
 80116e0:	46bd      	mov	sp, r7
 80116e2:	b024      	add	sp, #144	@ 0x90
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	46c0      	nop			@ (mov r8, r8)
 80116e8:	00000406 	.word	0x00000406
 80116ec:	ffff8fbf 	.word	0xffff8fbf
 80116f0:	ffff8080 	.word	0xffff8080

080116f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80116f4:	b590      	push	{r4, r7, lr}
 80116f6:	b087      	sub	sp, #28
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	60f8      	str	r0, [r7, #12]
 80116fc:	0008      	movs	r0, r1
 80116fe:	0011      	movs	r1, r2
 8011700:	607b      	str	r3, [r7, #4]
 8011702:	240a      	movs	r4, #10
 8011704:	193b      	adds	r3, r7, r4
 8011706:	1c02      	adds	r2, r0, #0
 8011708:	801a      	strh	r2, [r3, #0]
 801170a:	2308      	movs	r3, #8
 801170c:	18fb      	adds	r3, r7, r3
 801170e:	1c0a      	adds	r2, r1, #0
 8011710:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8011712:	0021      	movs	r1, r4
 8011714:	187b      	adds	r3, r7, r1
 8011716:	881b      	ldrh	r3, [r3, #0]
 8011718:	2280      	movs	r2, #128	@ 0x80
 801171a:	4013      	ands	r3, r2
 801171c:	b29b      	uxth	r3, r3
 801171e:	2b00      	cmp	r3, #0
 8011720:	d00c      	beq.n	801173c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011722:	187b      	adds	r3, r7, r1
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	2207      	movs	r2, #7
 8011728:	4013      	ands	r3, r2
 801172a:	1c5a      	adds	r2, r3, #1
 801172c:	0013      	movs	r3, r2
 801172e:	009b      	lsls	r3, r3, #2
 8011730:	189b      	adds	r3, r3, r2
 8011732:	00db      	lsls	r3, r3, #3
 8011734:	68fa      	ldr	r2, [r7, #12]
 8011736:	18d3      	adds	r3, r2, r3
 8011738:	617b      	str	r3, [r7, #20]
 801173a:	e00b      	b.n	8011754 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801173c:	230a      	movs	r3, #10
 801173e:	18fb      	adds	r3, r7, r3
 8011740:	881a      	ldrh	r2, [r3, #0]
 8011742:	0013      	movs	r3, r2
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	189b      	adds	r3, r3, r2
 8011748:	00db      	lsls	r3, r3, #3
 801174a:	3369      	adds	r3, #105	@ 0x69
 801174c:	33ff      	adds	r3, #255	@ 0xff
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	18d3      	adds	r3, r2, r3
 8011752:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8011754:	2308      	movs	r3, #8
 8011756:	18fb      	adds	r3, r7, r3
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d107      	bne.n	801176e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2200      	movs	r2, #0
 8011762:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	b29a      	uxth	r2, r3
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	80da      	strh	r2, [r3, #6]
 801176c:	e00b      	b.n	8011786 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	2201      	movs	r2, #1
 8011772:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	b29a      	uxth	r2, r3
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	0c1b      	lsrs	r3, r3, #16
 8011780:	b29a      	uxth	r2, r3
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	0018      	movs	r0, r3
 801178a:	46bd      	mov	sp, r7
 801178c:	b007      	add	sp, #28
 801178e:	bd90      	pop	{r4, r7, pc}

08011790 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	23ba      	movs	r3, #186	@ 0xba
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	2101      	movs	r1, #1
 80117a6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	23b8      	movs	r3, #184	@ 0xb8
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	2100      	movs	r1, #0
 80117b0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2254      	movs	r2, #84	@ 0x54
 80117b6:	5a9b      	ldrh	r3, [r3, r2]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	2201      	movs	r2, #1
 80117bc:	4313      	orrs	r3, r2
 80117be:	b299      	uxth	r1, r3
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2254      	movs	r2, #84	@ 0x54
 80117c4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2254      	movs	r2, #84	@ 0x54
 80117ca:	5a9b      	ldrh	r3, [r3, r2]
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	2202      	movs	r2, #2
 80117d0:	4313      	orrs	r3, r2
 80117d2:	b299      	uxth	r1, r3
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2254      	movs	r2, #84	@ 0x54
 80117d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80117da:	2300      	movs	r3, #0
}
 80117dc:	0018      	movs	r0, r3
 80117de:	46bd      	mov	sp, r7
 80117e0:	b004      	add	sp, #16
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	000a      	movs	r2, r1
 80117ee:	1cfb      	adds	r3, r7, #3
 80117f0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80117f2:	46c0      	nop			@ (mov r8, r8)
 80117f4:	46bd      	mov	sp, r7
 80117f6:	b002      	add	sp, #8
 80117f8:	bd80      	pop	{r7, pc}
	...

080117fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8011800:	4b04      	ldr	r3, [pc, #16]	@ (8011814 <HAL_PWR_EnableBkUpAccess+0x18>)
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	4b03      	ldr	r3, [pc, #12]	@ (8011814 <HAL_PWR_EnableBkUpAccess+0x18>)
 8011806:	2180      	movs	r1, #128	@ 0x80
 8011808:	0049      	lsls	r1, r1, #1
 801180a:	430a      	orrs	r2, r1
 801180c:	601a      	str	r2, [r3, #0]
}
 801180e:	46c0      	nop			@ (mov r8, r8)
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	40007000 	.word	0x40007000

08011818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011818:	b5b0      	push	{r4, r5, r7, lr}
 801181a:	b08a      	sub	sp, #40	@ 0x28
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d102      	bne.n	801182c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	f000 fbbf 	bl	8011faa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801182c:	4bc9      	ldr	r3, [pc, #804]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	220c      	movs	r2, #12
 8011832:	4013      	ands	r3, r2
 8011834:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011836:	4bc7      	ldr	r3, [pc, #796]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011838:	68da      	ldr	r2, [r3, #12]
 801183a:	2380      	movs	r3, #128	@ 0x80
 801183c:	025b      	lsls	r3, r3, #9
 801183e:	4013      	ands	r3, r2
 8011840:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2201      	movs	r2, #1
 8011848:	4013      	ands	r3, r2
 801184a:	d100      	bne.n	801184e <HAL_RCC_OscConfig+0x36>
 801184c:	e07e      	b.n	801194c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	2b08      	cmp	r3, #8
 8011852:	d007      	beq.n	8011864 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	2b0c      	cmp	r3, #12
 8011858:	d112      	bne.n	8011880 <HAL_RCC_OscConfig+0x68>
 801185a:	69ba      	ldr	r2, [r7, #24]
 801185c:	2380      	movs	r3, #128	@ 0x80
 801185e:	025b      	lsls	r3, r3, #9
 8011860:	429a      	cmp	r2, r3
 8011862:	d10d      	bne.n	8011880 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011864:	4bbb      	ldr	r3, [pc, #748]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	2380      	movs	r3, #128	@ 0x80
 801186a:	029b      	lsls	r3, r3, #10
 801186c:	4013      	ands	r3, r2
 801186e:	d100      	bne.n	8011872 <HAL_RCC_OscConfig+0x5a>
 8011870:	e06b      	b.n	801194a <HAL_RCC_OscConfig+0x132>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d167      	bne.n	801194a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801187a:	2301      	movs	r3, #1
 801187c:	f000 fb95 	bl	8011faa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	685a      	ldr	r2, [r3, #4]
 8011884:	2380      	movs	r3, #128	@ 0x80
 8011886:	025b      	lsls	r3, r3, #9
 8011888:	429a      	cmp	r2, r3
 801188a:	d107      	bne.n	801189c <HAL_RCC_OscConfig+0x84>
 801188c:	4bb1      	ldr	r3, [pc, #708]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	4bb0      	ldr	r3, [pc, #704]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011892:	2180      	movs	r1, #128	@ 0x80
 8011894:	0249      	lsls	r1, r1, #9
 8011896:	430a      	orrs	r2, r1
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	e027      	b.n	80118ec <HAL_RCC_OscConfig+0xd4>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685a      	ldr	r2, [r3, #4]
 80118a0:	23a0      	movs	r3, #160	@ 0xa0
 80118a2:	02db      	lsls	r3, r3, #11
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d10e      	bne.n	80118c6 <HAL_RCC_OscConfig+0xae>
 80118a8:	4baa      	ldr	r3, [pc, #680]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	4ba9      	ldr	r3, [pc, #676]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118ae:	2180      	movs	r1, #128	@ 0x80
 80118b0:	02c9      	lsls	r1, r1, #11
 80118b2:	430a      	orrs	r2, r1
 80118b4:	601a      	str	r2, [r3, #0]
 80118b6:	4ba7      	ldr	r3, [pc, #668]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	4ba6      	ldr	r3, [pc, #664]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118bc:	2180      	movs	r1, #128	@ 0x80
 80118be:	0249      	lsls	r1, r1, #9
 80118c0:	430a      	orrs	r2, r1
 80118c2:	601a      	str	r2, [r3, #0]
 80118c4:	e012      	b.n	80118ec <HAL_RCC_OscConfig+0xd4>
 80118c6:	4ba3      	ldr	r3, [pc, #652]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	4ba2      	ldr	r3, [pc, #648]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118cc:	49a2      	ldr	r1, [pc, #648]	@ (8011b58 <HAL_RCC_OscConfig+0x340>)
 80118ce:	400a      	ands	r2, r1
 80118d0:	601a      	str	r2, [r3, #0]
 80118d2:	4ba0      	ldr	r3, [pc, #640]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118d4:	681a      	ldr	r2, [r3, #0]
 80118d6:	2380      	movs	r3, #128	@ 0x80
 80118d8:	025b      	lsls	r3, r3, #9
 80118da:	4013      	ands	r3, r2
 80118dc:	60fb      	str	r3, [r7, #12]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	4b9c      	ldr	r3, [pc, #624]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	4b9b      	ldr	r3, [pc, #620]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80118e6:	499d      	ldr	r1, [pc, #628]	@ (8011b5c <HAL_RCC_OscConfig+0x344>)
 80118e8:	400a      	ands	r2, r1
 80118ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d015      	beq.n	8011920 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80118f4:	f7fa fb92 	bl	800c01c <HAL_GetTick>
 80118f8:	0003      	movs	r3, r0
 80118fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80118fc:	e009      	b.n	8011912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80118fe:	f7fa fb8d 	bl	800c01c <HAL_GetTick>
 8011902:	0002      	movs	r2, r0
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	1ad3      	subs	r3, r2, r3
 8011908:	2b64      	cmp	r3, #100	@ 0x64
 801190a:	d902      	bls.n	8011912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801190c:	2303      	movs	r3, #3
 801190e:	f000 fb4c 	bl	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011912:	4b90      	ldr	r3, [pc, #576]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	2380      	movs	r3, #128	@ 0x80
 8011918:	029b      	lsls	r3, r3, #10
 801191a:	4013      	ands	r3, r2
 801191c:	d0ef      	beq.n	80118fe <HAL_RCC_OscConfig+0xe6>
 801191e:	e015      	b.n	801194c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011920:	f7fa fb7c 	bl	800c01c <HAL_GetTick>
 8011924:	0003      	movs	r3, r0
 8011926:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011928:	e008      	b.n	801193c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801192a:	f7fa fb77 	bl	800c01c <HAL_GetTick>
 801192e:	0002      	movs	r2, r0
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	2b64      	cmp	r3, #100	@ 0x64
 8011936:	d901      	bls.n	801193c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8011938:	2303      	movs	r3, #3
 801193a:	e336      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801193c:	4b85      	ldr	r3, [pc, #532]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	2380      	movs	r3, #128	@ 0x80
 8011942:	029b      	lsls	r3, r3, #10
 8011944:	4013      	ands	r3, r2
 8011946:	d1f0      	bne.n	801192a <HAL_RCC_OscConfig+0x112>
 8011948:	e000      	b.n	801194c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801194a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2202      	movs	r2, #2
 8011952:	4013      	ands	r3, r2
 8011954:	d100      	bne.n	8011958 <HAL_RCC_OscConfig+0x140>
 8011956:	e099      	b.n	8011a8c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011960:	2220      	movs	r2, #32
 8011962:	4013      	ands	r3, r2
 8011964:	d009      	beq.n	801197a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8011966:	4b7b      	ldr	r3, [pc, #492]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	4b7a      	ldr	r3, [pc, #488]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 801196c:	2120      	movs	r1, #32
 801196e:	430a      	orrs	r2, r1
 8011970:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8011972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011974:	2220      	movs	r2, #32
 8011976:	4393      	bics	r3, r2
 8011978:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	2b04      	cmp	r3, #4
 801197e:	d005      	beq.n	801198c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	2b0c      	cmp	r3, #12
 8011984:	d13e      	bne.n	8011a04 <HAL_RCC_OscConfig+0x1ec>
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d13b      	bne.n	8011a04 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801198c:	4b71      	ldr	r3, [pc, #452]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2204      	movs	r2, #4
 8011992:	4013      	ands	r3, r2
 8011994:	d004      	beq.n	80119a0 <HAL_RCC_OscConfig+0x188>
 8011996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011998:	2b00      	cmp	r3, #0
 801199a:	d101      	bne.n	80119a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801199c:	2301      	movs	r3, #1
 801199e:	e304      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119a0:	4b6c      	ldr	r3, [pc, #432]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	4a6e      	ldr	r2, [pc, #440]	@ (8011b60 <HAL_RCC_OscConfig+0x348>)
 80119a6:	4013      	ands	r3, r2
 80119a8:	0019      	movs	r1, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	021a      	lsls	r2, r3, #8
 80119b0:	4b68      	ldr	r3, [pc, #416]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80119b2:	430a      	orrs	r2, r1
 80119b4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80119b6:	4b67      	ldr	r3, [pc, #412]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2209      	movs	r2, #9
 80119bc:	4393      	bics	r3, r2
 80119be:	0019      	movs	r1, r3
 80119c0:	4b64      	ldr	r3, [pc, #400]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80119c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119c4:	430a      	orrs	r2, r1
 80119c6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80119c8:	f000 fc42 	bl	8012250 <HAL_RCC_GetSysClockFreq>
 80119cc:	0001      	movs	r1, r0
 80119ce:	4b61      	ldr	r3, [pc, #388]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	091b      	lsrs	r3, r3, #4
 80119d4:	220f      	movs	r2, #15
 80119d6:	4013      	ands	r3, r2
 80119d8:	4a62      	ldr	r2, [pc, #392]	@ (8011b64 <HAL_RCC_OscConfig+0x34c>)
 80119da:	5cd3      	ldrb	r3, [r2, r3]
 80119dc:	000a      	movs	r2, r1
 80119de:	40da      	lsrs	r2, r3
 80119e0:	4b61      	ldr	r3, [pc, #388]	@ (8011b68 <HAL_RCC_OscConfig+0x350>)
 80119e2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80119e4:	4b61      	ldr	r3, [pc, #388]	@ (8011b6c <HAL_RCC_OscConfig+0x354>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2513      	movs	r5, #19
 80119ea:	197c      	adds	r4, r7, r5
 80119ec:	0018      	movs	r0, r3
 80119ee:	f7fa facf 	bl	800bf90 <HAL_InitTick>
 80119f2:	0003      	movs	r3, r0
 80119f4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80119f6:	197b      	adds	r3, r7, r5
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d046      	beq.n	8011a8c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80119fe:	197b      	adds	r3, r7, r5
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	e2d2      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8011a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d027      	beq.n	8011a5a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8011a0a:	4b52      	ldr	r3, [pc, #328]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2209      	movs	r2, #9
 8011a10:	4393      	bics	r3, r2
 8011a12:	0019      	movs	r1, r3
 8011a14:	4b4f      	ldr	r3, [pc, #316]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a18:	430a      	orrs	r2, r1
 8011a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a1c:	f7fa fafe 	bl	800c01c <HAL_GetTick>
 8011a20:	0003      	movs	r3, r0
 8011a22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011a24:	e008      	b.n	8011a38 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a26:	f7fa faf9 	bl	800c01c <HAL_GetTick>
 8011a2a:	0002      	movs	r2, r0
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	2b02      	cmp	r3, #2
 8011a32:	d901      	bls.n	8011a38 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8011a34:	2303      	movs	r3, #3
 8011a36:	e2b8      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011a38:	4b46      	ldr	r3, [pc, #280]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2204      	movs	r2, #4
 8011a3e:	4013      	ands	r3, r2
 8011a40:	d0f1      	beq.n	8011a26 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a42:	4b44      	ldr	r3, [pc, #272]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	4a46      	ldr	r2, [pc, #280]	@ (8011b60 <HAL_RCC_OscConfig+0x348>)
 8011a48:	4013      	ands	r3, r2
 8011a4a:	0019      	movs	r1, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	691b      	ldr	r3, [r3, #16]
 8011a50:	021a      	lsls	r2, r3, #8
 8011a52:	4b40      	ldr	r3, [pc, #256]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a54:	430a      	orrs	r2, r1
 8011a56:	605a      	str	r2, [r3, #4]
 8011a58:	e018      	b.n	8011a8c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a60:	2101      	movs	r1, #1
 8011a62:	438a      	bics	r2, r1
 8011a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a66:	f7fa fad9 	bl	800c01c <HAL_GetTick>
 8011a6a:	0003      	movs	r3, r0
 8011a6c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011a6e:	e008      	b.n	8011a82 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a70:	f7fa fad4 	bl	800c01c <HAL_GetTick>
 8011a74:	0002      	movs	r2, r0
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	1ad3      	subs	r3, r2, r3
 8011a7a:	2b02      	cmp	r3, #2
 8011a7c:	d901      	bls.n	8011a82 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8011a7e:	2303      	movs	r3, #3
 8011a80:	e293      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011a82:	4b34      	ldr	r3, [pc, #208]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2204      	movs	r2, #4
 8011a88:	4013      	ands	r3, r2
 8011a8a:	d1f1      	bne.n	8011a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2210      	movs	r2, #16
 8011a92:	4013      	ands	r3, r2
 8011a94:	d100      	bne.n	8011a98 <HAL_RCC_OscConfig+0x280>
 8011a96:	e0a2      	b.n	8011bde <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d140      	bne.n	8011b20 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	2380      	movs	r3, #128	@ 0x80
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	4013      	ands	r3, r2
 8011aa8:	d005      	beq.n	8011ab6 <HAL_RCC_OscConfig+0x29e>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	69db      	ldr	r3, [r3, #28]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d101      	bne.n	8011ab6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e279      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011ab6:	4b27      	ldr	r3, [pc, #156]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	4a2d      	ldr	r2, [pc, #180]	@ (8011b70 <HAL_RCC_OscConfig+0x358>)
 8011abc:	4013      	ands	r3, r2
 8011abe:	0019      	movs	r1, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ac4:	4b23      	ldr	r3, [pc, #140]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011ac6:	430a      	orrs	r2, r1
 8011ac8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011aca:	4b22      	ldr	r3, [pc, #136]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	021b      	lsls	r3, r3, #8
 8011ad0:	0a19      	lsrs	r1, r3, #8
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6a1b      	ldr	r3, [r3, #32]
 8011ad6:	061a      	lsls	r2, r3, #24
 8011ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011ada:	430a      	orrs	r2, r1
 8011adc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ae2:	0b5b      	lsrs	r3, r3, #13
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	2280      	movs	r2, #128	@ 0x80
 8011ae8:	0212      	lsls	r2, r2, #8
 8011aea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8011aec:	4b19      	ldr	r3, [pc, #100]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	091b      	lsrs	r3, r3, #4
 8011af2:	210f      	movs	r1, #15
 8011af4:	400b      	ands	r3, r1
 8011af6:	491b      	ldr	r1, [pc, #108]	@ (8011b64 <HAL_RCC_OscConfig+0x34c>)
 8011af8:	5ccb      	ldrb	r3, [r1, r3]
 8011afa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011afc:	4b1a      	ldr	r3, [pc, #104]	@ (8011b68 <HAL_RCC_OscConfig+0x350>)
 8011afe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8011b00:	4b1a      	ldr	r3, [pc, #104]	@ (8011b6c <HAL_RCC_OscConfig+0x354>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	2513      	movs	r5, #19
 8011b06:	197c      	adds	r4, r7, r5
 8011b08:	0018      	movs	r0, r3
 8011b0a:	f7fa fa41 	bl	800bf90 <HAL_InitTick>
 8011b0e:	0003      	movs	r3, r0
 8011b10:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8011b12:	197b      	adds	r3, r7, r5
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d061      	beq.n	8011bde <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8011b1a:	197b      	adds	r3, r7, r5
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	e244      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	69db      	ldr	r3, [r3, #28]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d040      	beq.n	8011baa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011b28:	4b0a      	ldr	r3, [pc, #40]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	4b09      	ldr	r3, [pc, #36]	@ (8011b54 <HAL_RCC_OscConfig+0x33c>)
 8011b2e:	2180      	movs	r1, #128	@ 0x80
 8011b30:	0049      	lsls	r1, r1, #1
 8011b32:	430a      	orrs	r2, r1
 8011b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b36:	f7fa fa71 	bl	800c01c <HAL_GetTick>
 8011b3a:	0003      	movs	r3, r0
 8011b3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011b3e:	e019      	b.n	8011b74 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011b40:	f7fa fa6c 	bl	800c01c <HAL_GetTick>
 8011b44:	0002      	movs	r2, r0
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	1ad3      	subs	r3, r2, r3
 8011b4a:	2b02      	cmp	r3, #2
 8011b4c:	d912      	bls.n	8011b74 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	e22b      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
 8011b52:	46c0      	nop			@ (mov r8, r8)
 8011b54:	40021000 	.word	0x40021000
 8011b58:	fffeffff 	.word	0xfffeffff
 8011b5c:	fffbffff 	.word	0xfffbffff
 8011b60:	ffffe0ff 	.word	0xffffe0ff
 8011b64:	08020be4 	.word	0x08020be4
 8011b68:	200000c4 	.word	0x200000c4
 8011b6c:	200000d4 	.word	0x200000d4
 8011b70:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011b74:	4bca      	ldr	r3, [pc, #808]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	2380      	movs	r3, #128	@ 0x80
 8011b7a:	009b      	lsls	r3, r3, #2
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	d0df      	beq.n	8011b40 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011b80:	4bc7      	ldr	r3, [pc, #796]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	4ac7      	ldr	r2, [pc, #796]	@ (8011ea4 <HAL_RCC_OscConfig+0x68c>)
 8011b86:	4013      	ands	r3, r2
 8011b88:	0019      	movs	r1, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b8e:	4bc4      	ldr	r3, [pc, #784]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011b90:	430a      	orrs	r2, r1
 8011b92:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011b94:	4bc2      	ldr	r3, [pc, #776]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	021b      	lsls	r3, r3, #8
 8011b9a:	0a19      	lsrs	r1, r3, #8
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6a1b      	ldr	r3, [r3, #32]
 8011ba0:	061a      	lsls	r2, r3, #24
 8011ba2:	4bbf      	ldr	r3, [pc, #764]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011ba4:	430a      	orrs	r2, r1
 8011ba6:	605a      	str	r2, [r3, #4]
 8011ba8:	e019      	b.n	8011bde <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8011baa:	4bbd      	ldr	r3, [pc, #756]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	4bbc      	ldr	r3, [pc, #752]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011bb0:	49bd      	ldr	r1, [pc, #756]	@ (8011ea8 <HAL_RCC_OscConfig+0x690>)
 8011bb2:	400a      	ands	r2, r1
 8011bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011bb6:	f7fa fa31 	bl	800c01c <HAL_GetTick>
 8011bba:	0003      	movs	r3, r0
 8011bbc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011bbe:	e008      	b.n	8011bd2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011bc0:	f7fa fa2c 	bl	800c01c <HAL_GetTick>
 8011bc4:	0002      	movs	r2, r0
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	1ad3      	subs	r3, r2, r3
 8011bca:	2b02      	cmp	r3, #2
 8011bcc:	d901      	bls.n	8011bd2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8011bce:	2303      	movs	r3, #3
 8011bd0:	e1eb      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011bd2:	4bb3      	ldr	r3, [pc, #716]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	2380      	movs	r3, #128	@ 0x80
 8011bd8:	009b      	lsls	r3, r3, #2
 8011bda:	4013      	ands	r3, r2
 8011bdc:	d1f0      	bne.n	8011bc0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2208      	movs	r2, #8
 8011be4:	4013      	ands	r3, r2
 8011be6:	d036      	beq.n	8011c56 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	695b      	ldr	r3, [r3, #20]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d019      	beq.n	8011c24 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011bf0:	4bab      	ldr	r3, [pc, #684]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011bf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bf4:	4baa      	ldr	r3, [pc, #680]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011bf6:	2101      	movs	r1, #1
 8011bf8:	430a      	orrs	r2, r1
 8011bfa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011bfc:	f7fa fa0e 	bl	800c01c <HAL_GetTick>
 8011c00:	0003      	movs	r3, r0
 8011c02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011c04:	e008      	b.n	8011c18 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011c06:	f7fa fa09 	bl	800c01c <HAL_GetTick>
 8011c0a:	0002      	movs	r2, r0
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	1ad3      	subs	r3, r2, r3
 8011c10:	2b02      	cmp	r3, #2
 8011c12:	d901      	bls.n	8011c18 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8011c14:	2303      	movs	r3, #3
 8011c16:	e1c8      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011c18:	4ba1      	ldr	r3, [pc, #644]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c1c:	2202      	movs	r2, #2
 8011c1e:	4013      	ands	r3, r2
 8011c20:	d0f1      	beq.n	8011c06 <HAL_RCC_OscConfig+0x3ee>
 8011c22:	e018      	b.n	8011c56 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011c24:	4b9e      	ldr	r3, [pc, #632]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011c26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c28:	4b9d      	ldr	r3, [pc, #628]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011c2a:	2101      	movs	r1, #1
 8011c2c:	438a      	bics	r2, r1
 8011c2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011c30:	f7fa f9f4 	bl	800c01c <HAL_GetTick>
 8011c34:	0003      	movs	r3, r0
 8011c36:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011c38:	e008      	b.n	8011c4c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011c3a:	f7fa f9ef 	bl	800c01c <HAL_GetTick>
 8011c3e:	0002      	movs	r2, r0
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d901      	bls.n	8011c4c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8011c48:	2303      	movs	r3, #3
 8011c4a:	e1ae      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011c4c:	4b94      	ldr	r3, [pc, #592]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c50:	2202      	movs	r2, #2
 8011c52:	4013      	ands	r3, r2
 8011c54:	d1f1      	bne.n	8011c3a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	2204      	movs	r2, #4
 8011c5c:	4013      	ands	r3, r2
 8011c5e:	d100      	bne.n	8011c62 <HAL_RCC_OscConfig+0x44a>
 8011c60:	e0ae      	b.n	8011dc0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011c62:	2023      	movs	r0, #35	@ 0x23
 8011c64:	183b      	adds	r3, r7, r0
 8011c66:	2200      	movs	r2, #0
 8011c68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011c6a:	4b8d      	ldr	r3, [pc, #564]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c6e:	2380      	movs	r3, #128	@ 0x80
 8011c70:	055b      	lsls	r3, r3, #21
 8011c72:	4013      	ands	r3, r2
 8011c74:	d109      	bne.n	8011c8a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011c76:	4b8a      	ldr	r3, [pc, #552]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c7a:	4b89      	ldr	r3, [pc, #548]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011c7c:	2180      	movs	r1, #128	@ 0x80
 8011c7e:	0549      	lsls	r1, r1, #21
 8011c80:	430a      	orrs	r2, r1
 8011c82:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8011c84:	183b      	adds	r3, r7, r0
 8011c86:	2201      	movs	r2, #1
 8011c88:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011c8a:	4b88      	ldr	r3, [pc, #544]	@ (8011eac <HAL_RCC_OscConfig+0x694>)
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	2380      	movs	r3, #128	@ 0x80
 8011c90:	005b      	lsls	r3, r3, #1
 8011c92:	4013      	ands	r3, r2
 8011c94:	d11a      	bne.n	8011ccc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011c96:	4b85      	ldr	r3, [pc, #532]	@ (8011eac <HAL_RCC_OscConfig+0x694>)
 8011c98:	681a      	ldr	r2, [r3, #0]
 8011c9a:	4b84      	ldr	r3, [pc, #528]	@ (8011eac <HAL_RCC_OscConfig+0x694>)
 8011c9c:	2180      	movs	r1, #128	@ 0x80
 8011c9e:	0049      	lsls	r1, r1, #1
 8011ca0:	430a      	orrs	r2, r1
 8011ca2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011ca4:	f7fa f9ba 	bl	800c01c <HAL_GetTick>
 8011ca8:	0003      	movs	r3, r0
 8011caa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011cac:	e008      	b.n	8011cc0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011cae:	f7fa f9b5 	bl	800c01c <HAL_GetTick>
 8011cb2:	0002      	movs	r2, r0
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	2b64      	cmp	r3, #100	@ 0x64
 8011cba:	d901      	bls.n	8011cc0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	e174      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011cc0:	4b7a      	ldr	r3, [pc, #488]	@ (8011eac <HAL_RCC_OscConfig+0x694>)
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	2380      	movs	r3, #128	@ 0x80
 8011cc6:	005b      	lsls	r3, r3, #1
 8011cc8:	4013      	ands	r3, r2
 8011cca:	d0f0      	beq.n	8011cae <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	689a      	ldr	r2, [r3, #8]
 8011cd0:	2380      	movs	r3, #128	@ 0x80
 8011cd2:	005b      	lsls	r3, r3, #1
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d107      	bne.n	8011ce8 <HAL_RCC_OscConfig+0x4d0>
 8011cd8:	4b71      	ldr	r3, [pc, #452]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011cda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011cdc:	4b70      	ldr	r3, [pc, #448]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011cde:	2180      	movs	r1, #128	@ 0x80
 8011ce0:	0049      	lsls	r1, r1, #1
 8011ce2:	430a      	orrs	r2, r1
 8011ce4:	651a      	str	r2, [r3, #80]	@ 0x50
 8011ce6:	e031      	b.n	8011d4c <HAL_RCC_OscConfig+0x534>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	689b      	ldr	r3, [r3, #8]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d10c      	bne.n	8011d0a <HAL_RCC_OscConfig+0x4f2>
 8011cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011cf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011cf6:	496c      	ldr	r1, [pc, #432]	@ (8011ea8 <HAL_RCC_OscConfig+0x690>)
 8011cf8:	400a      	ands	r2, r1
 8011cfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8011cfc:	4b68      	ldr	r3, [pc, #416]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011cfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d00:	4b67      	ldr	r3, [pc, #412]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d02:	496b      	ldr	r1, [pc, #428]	@ (8011eb0 <HAL_RCC_OscConfig+0x698>)
 8011d04:	400a      	ands	r2, r1
 8011d06:	651a      	str	r2, [r3, #80]	@ 0x50
 8011d08:	e020      	b.n	8011d4c <HAL_RCC_OscConfig+0x534>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	689a      	ldr	r2, [r3, #8]
 8011d0e:	23a0      	movs	r3, #160	@ 0xa0
 8011d10:	00db      	lsls	r3, r3, #3
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d10e      	bne.n	8011d34 <HAL_RCC_OscConfig+0x51c>
 8011d16:	4b62      	ldr	r3, [pc, #392]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d1a:	4b61      	ldr	r3, [pc, #388]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d1c:	2180      	movs	r1, #128	@ 0x80
 8011d1e:	00c9      	lsls	r1, r1, #3
 8011d20:	430a      	orrs	r2, r1
 8011d22:	651a      	str	r2, [r3, #80]	@ 0x50
 8011d24:	4b5e      	ldr	r3, [pc, #376]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d28:	4b5d      	ldr	r3, [pc, #372]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d2a:	2180      	movs	r1, #128	@ 0x80
 8011d2c:	0049      	lsls	r1, r1, #1
 8011d2e:	430a      	orrs	r2, r1
 8011d30:	651a      	str	r2, [r3, #80]	@ 0x50
 8011d32:	e00b      	b.n	8011d4c <HAL_RCC_OscConfig+0x534>
 8011d34:	4b5a      	ldr	r3, [pc, #360]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d38:	4b59      	ldr	r3, [pc, #356]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d3a:	495b      	ldr	r1, [pc, #364]	@ (8011ea8 <HAL_RCC_OscConfig+0x690>)
 8011d3c:	400a      	ands	r2, r1
 8011d3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011d40:	4b57      	ldr	r3, [pc, #348]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d44:	4b56      	ldr	r3, [pc, #344]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d46:	495a      	ldr	r1, [pc, #360]	@ (8011eb0 <HAL_RCC_OscConfig+0x698>)
 8011d48:	400a      	ands	r2, r1
 8011d4a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	689b      	ldr	r3, [r3, #8]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d015      	beq.n	8011d80 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011d54:	f7fa f962 	bl	800c01c <HAL_GetTick>
 8011d58:	0003      	movs	r3, r0
 8011d5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011d5c:	e009      	b.n	8011d72 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011d5e:	f7fa f95d 	bl	800c01c <HAL_GetTick>
 8011d62:	0002      	movs	r2, r0
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	1ad3      	subs	r3, r2, r3
 8011d68:	4a52      	ldr	r2, [pc, #328]	@ (8011eb4 <HAL_RCC_OscConfig+0x69c>)
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	d901      	bls.n	8011d72 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8011d6e:	2303      	movs	r3, #3
 8011d70:	e11b      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011d72:	4b4b      	ldr	r3, [pc, #300]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011d74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d76:	2380      	movs	r3, #128	@ 0x80
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	4013      	ands	r3, r2
 8011d7c:	d0ef      	beq.n	8011d5e <HAL_RCC_OscConfig+0x546>
 8011d7e:	e014      	b.n	8011daa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011d80:	f7fa f94c 	bl	800c01c <HAL_GetTick>
 8011d84:	0003      	movs	r3, r0
 8011d86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011d88:	e009      	b.n	8011d9e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011d8a:	f7fa f947 	bl	800c01c <HAL_GetTick>
 8011d8e:	0002      	movs	r2, r0
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	4a47      	ldr	r2, [pc, #284]	@ (8011eb4 <HAL_RCC_OscConfig+0x69c>)
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d901      	bls.n	8011d9e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8011d9a:	2303      	movs	r3, #3
 8011d9c:	e105      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011d9e:	4b40      	ldr	r3, [pc, #256]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011da2:	2380      	movs	r3, #128	@ 0x80
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	4013      	ands	r3, r2
 8011da8:	d1ef      	bne.n	8011d8a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011daa:	2323      	movs	r3, #35	@ 0x23
 8011dac:	18fb      	adds	r3, r7, r3
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d105      	bne.n	8011dc0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011db4:	4b3a      	ldr	r3, [pc, #232]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011db6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011db8:	4b39      	ldr	r3, [pc, #228]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011dba:	493f      	ldr	r1, [pc, #252]	@ (8011eb8 <HAL_RCC_OscConfig+0x6a0>)
 8011dbc:	400a      	ands	r2, r1
 8011dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2220      	movs	r2, #32
 8011dc6:	4013      	ands	r3, r2
 8011dc8:	d049      	beq.n	8011e5e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	699b      	ldr	r3, [r3, #24]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d026      	beq.n	8011e20 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011dd2:	4b33      	ldr	r3, [pc, #204]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011dd4:	689a      	ldr	r2, [r3, #8]
 8011dd6:	4b32      	ldr	r3, [pc, #200]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011dd8:	2101      	movs	r1, #1
 8011dda:	430a      	orrs	r2, r1
 8011ddc:	609a      	str	r2, [r3, #8]
 8011dde:	4b30      	ldr	r3, [pc, #192]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011de2:	4b2f      	ldr	r3, [pc, #188]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011de4:	2101      	movs	r1, #1
 8011de6:	430a      	orrs	r2, r1
 8011de8:	635a      	str	r2, [r3, #52]	@ 0x34
 8011dea:	4b34      	ldr	r3, [pc, #208]	@ (8011ebc <HAL_RCC_OscConfig+0x6a4>)
 8011dec:	6a1a      	ldr	r2, [r3, #32]
 8011dee:	4b33      	ldr	r3, [pc, #204]	@ (8011ebc <HAL_RCC_OscConfig+0x6a4>)
 8011df0:	2180      	movs	r1, #128	@ 0x80
 8011df2:	0189      	lsls	r1, r1, #6
 8011df4:	430a      	orrs	r2, r1
 8011df6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011df8:	f7fa f910 	bl	800c01c <HAL_GetTick>
 8011dfc:	0003      	movs	r3, r0
 8011dfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011e00:	e008      	b.n	8011e14 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011e02:	f7fa f90b 	bl	800c01c <HAL_GetTick>
 8011e06:	0002      	movs	r2, r0
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	2b02      	cmp	r3, #2
 8011e0e:	d901      	bls.n	8011e14 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8011e10:	2303      	movs	r3, #3
 8011e12:	e0ca      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011e14:	4b22      	ldr	r3, [pc, #136]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	2202      	movs	r2, #2
 8011e1a:	4013      	ands	r3, r2
 8011e1c:	d0f1      	beq.n	8011e02 <HAL_RCC_OscConfig+0x5ea>
 8011e1e:	e01e      	b.n	8011e5e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8011e20:	4b1f      	ldr	r3, [pc, #124]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011e22:	689a      	ldr	r2, [r3, #8]
 8011e24:	4b1e      	ldr	r3, [pc, #120]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011e26:	2101      	movs	r1, #1
 8011e28:	438a      	bics	r2, r1
 8011e2a:	609a      	str	r2, [r3, #8]
 8011e2c:	4b23      	ldr	r3, [pc, #140]	@ (8011ebc <HAL_RCC_OscConfig+0x6a4>)
 8011e2e:	6a1a      	ldr	r2, [r3, #32]
 8011e30:	4b22      	ldr	r3, [pc, #136]	@ (8011ebc <HAL_RCC_OscConfig+0x6a4>)
 8011e32:	4923      	ldr	r1, [pc, #140]	@ (8011ec0 <HAL_RCC_OscConfig+0x6a8>)
 8011e34:	400a      	ands	r2, r1
 8011e36:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011e38:	f7fa f8f0 	bl	800c01c <HAL_GetTick>
 8011e3c:	0003      	movs	r3, r0
 8011e3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011e40:	e008      	b.n	8011e54 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011e42:	f7fa f8eb 	bl	800c01c <HAL_GetTick>
 8011e46:	0002      	movs	r2, r0
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	2b02      	cmp	r3, #2
 8011e4e:	d901      	bls.n	8011e54 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8011e50:	2303      	movs	r3, #3
 8011e52:	e0aa      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011e54:	4b12      	ldr	r3, [pc, #72]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	2202      	movs	r2, #2
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	d1f1      	bne.n	8011e42 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d100      	bne.n	8011e68 <HAL_RCC_OscConfig+0x650>
 8011e66:	e09f      	b.n	8011fa8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	2b0c      	cmp	r3, #12
 8011e6c:	d100      	bne.n	8011e70 <HAL_RCC_OscConfig+0x658>
 8011e6e:	e078      	b.n	8011f62 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d159      	bne.n	8011f2c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011e78:	4b09      	ldr	r3, [pc, #36]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	4b08      	ldr	r3, [pc, #32]	@ (8011ea0 <HAL_RCC_OscConfig+0x688>)
 8011e7e:	4911      	ldr	r1, [pc, #68]	@ (8011ec4 <HAL_RCC_OscConfig+0x6ac>)
 8011e80:	400a      	ands	r2, r1
 8011e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011e84:	f7fa f8ca 	bl	800c01c <HAL_GetTick>
 8011e88:	0003      	movs	r3, r0
 8011e8a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011e8c:	e01c      	b.n	8011ec8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011e8e:	f7fa f8c5 	bl	800c01c <HAL_GetTick>
 8011e92:	0002      	movs	r2, r0
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	1ad3      	subs	r3, r2, r3
 8011e98:	2b02      	cmp	r3, #2
 8011e9a:	d915      	bls.n	8011ec8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	e084      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
 8011ea0:	40021000 	.word	0x40021000
 8011ea4:	ffff1fff 	.word	0xffff1fff
 8011ea8:	fffffeff 	.word	0xfffffeff
 8011eac:	40007000 	.word	0x40007000
 8011eb0:	fffffbff 	.word	0xfffffbff
 8011eb4:	00001388 	.word	0x00001388
 8011eb8:	efffffff 	.word	0xefffffff
 8011ebc:	40010000 	.word	0x40010000
 8011ec0:	ffffdfff 	.word	0xffffdfff
 8011ec4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	2380      	movs	r3, #128	@ 0x80
 8011ece:	049b      	lsls	r3, r3, #18
 8011ed0:	4013      	ands	r3, r2
 8011ed2:	d1dc      	bne.n	8011e8e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011ed4:	4b37      	ldr	r3, [pc, #220]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	4a37      	ldr	r2, [pc, #220]	@ (8011fb8 <HAL_RCC_OscConfig+0x7a0>)
 8011eda:	4013      	ands	r3, r2
 8011edc:	0019      	movs	r1, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ee6:	431a      	orrs	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011eec:	431a      	orrs	r2, r3
 8011eee:	4b31      	ldr	r3, [pc, #196]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011ef0:	430a      	orrs	r2, r1
 8011ef2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011efa:	2180      	movs	r1, #128	@ 0x80
 8011efc:	0449      	lsls	r1, r1, #17
 8011efe:	430a      	orrs	r2, r1
 8011f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011f02:	f7fa f88b 	bl	800c01c <HAL_GetTick>
 8011f06:	0003      	movs	r3, r0
 8011f08:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011f0a:	e008      	b.n	8011f1e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011f0c:	f7fa f886 	bl	800c01c <HAL_GetTick>
 8011f10:	0002      	movs	r2, r0
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	1ad3      	subs	r3, r2, r3
 8011f16:	2b02      	cmp	r3, #2
 8011f18:	d901      	bls.n	8011f1e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	e045      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011f1e:	4b25      	ldr	r3, [pc, #148]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011f20:	681a      	ldr	r2, [r3, #0]
 8011f22:	2380      	movs	r3, #128	@ 0x80
 8011f24:	049b      	lsls	r3, r3, #18
 8011f26:	4013      	ands	r3, r2
 8011f28:	d0f0      	beq.n	8011f0c <HAL_RCC_OscConfig+0x6f4>
 8011f2a:	e03d      	b.n	8011fa8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011f2c:	4b21      	ldr	r3, [pc, #132]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	4b20      	ldr	r3, [pc, #128]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011f32:	4922      	ldr	r1, [pc, #136]	@ (8011fbc <HAL_RCC_OscConfig+0x7a4>)
 8011f34:	400a      	ands	r2, r1
 8011f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011f38:	f7fa f870 	bl	800c01c <HAL_GetTick>
 8011f3c:	0003      	movs	r3, r0
 8011f3e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011f40:	e008      	b.n	8011f54 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011f42:	f7fa f86b 	bl	800c01c <HAL_GetTick>
 8011f46:	0002      	movs	r2, r0
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	2b02      	cmp	r3, #2
 8011f4e:	d901      	bls.n	8011f54 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8011f50:	2303      	movs	r3, #3
 8011f52:	e02a      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011f54:	4b17      	ldr	r3, [pc, #92]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	2380      	movs	r3, #128	@ 0x80
 8011f5a:	049b      	lsls	r3, r3, #18
 8011f5c:	4013      	ands	r3, r2
 8011f5e:	d1f0      	bne.n	8011f42 <HAL_RCC_OscConfig+0x72a>
 8011f60:	e022      	b.n	8011fa8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d101      	bne.n	8011f6e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e01d      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011f6e:	4b11      	ldr	r3, [pc, #68]	@ (8011fb4 <HAL_RCC_OscConfig+0x79c>)
 8011f70:	68db      	ldr	r3, [r3, #12]
 8011f72:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011f74:	69ba      	ldr	r2, [r7, #24]
 8011f76:	2380      	movs	r3, #128	@ 0x80
 8011f78:	025b      	lsls	r3, r3, #9
 8011f7a:	401a      	ands	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d10f      	bne.n	8011fa4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011f84:	69ba      	ldr	r2, [r7, #24]
 8011f86:	23f0      	movs	r3, #240	@ 0xf0
 8011f88:	039b      	lsls	r3, r3, #14
 8011f8a:	401a      	ands	r2, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d107      	bne.n	8011fa4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8011f94:	69ba      	ldr	r2, [r7, #24]
 8011f96:	23c0      	movs	r3, #192	@ 0xc0
 8011f98:	041b      	lsls	r3, r3, #16
 8011f9a:	401a      	ands	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d001      	beq.n	8011fa8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e000      	b.n	8011faa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	0018      	movs	r0, r3
 8011fac:	46bd      	mov	sp, r7
 8011fae:	b00a      	add	sp, #40	@ 0x28
 8011fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8011fb2:	46c0      	nop			@ (mov r8, r8)
 8011fb4:	40021000 	.word	0x40021000
 8011fb8:	ff02ffff 	.word	0xff02ffff
 8011fbc:	feffffff 	.word	0xfeffffff

08011fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011fc0:	b5b0      	push	{r4, r5, r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d101      	bne.n	8011fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	e128      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011fd4:	4b96      	ldr	r3, [pc, #600]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	4013      	ands	r3, r2
 8011fdc:	683a      	ldr	r2, [r7, #0]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d91e      	bls.n	8012020 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011fe2:	4b93      	ldr	r3, [pc, #588]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	4393      	bics	r3, r2
 8011fea:	0019      	movs	r1, r3
 8011fec:	4b90      	ldr	r3, [pc, #576]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 8011fee:	683a      	ldr	r2, [r7, #0]
 8011ff0:	430a      	orrs	r2, r1
 8011ff2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011ff4:	f7fa f812 	bl	800c01c <HAL_GetTick>
 8011ff8:	0003      	movs	r3, r0
 8011ffa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011ffc:	e009      	b.n	8012012 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ffe:	f7fa f80d 	bl	800c01c <HAL_GetTick>
 8012002:	0002      	movs	r2, r0
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	1ad3      	subs	r3, r2, r3
 8012008:	4a8a      	ldr	r2, [pc, #552]	@ (8012234 <HAL_RCC_ClockConfig+0x274>)
 801200a:	4293      	cmp	r3, r2
 801200c:	d901      	bls.n	8012012 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801200e:	2303      	movs	r3, #3
 8012010:	e109      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012012:	4b87      	ldr	r3, [pc, #540]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	2201      	movs	r2, #1
 8012018:	4013      	ands	r3, r2
 801201a:	683a      	ldr	r2, [r7, #0]
 801201c:	429a      	cmp	r2, r3
 801201e:	d1ee      	bne.n	8011ffe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	2202      	movs	r2, #2
 8012026:	4013      	ands	r3, r2
 8012028:	d009      	beq.n	801203e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801202a:	4b83      	ldr	r3, [pc, #524]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	22f0      	movs	r2, #240	@ 0xf0
 8012030:	4393      	bics	r3, r2
 8012032:	0019      	movs	r1, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	689a      	ldr	r2, [r3, #8]
 8012038:	4b7f      	ldr	r3, [pc, #508]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 801203a:	430a      	orrs	r2, r1
 801203c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2201      	movs	r2, #1
 8012044:	4013      	ands	r3, r2
 8012046:	d100      	bne.n	801204a <HAL_RCC_ClockConfig+0x8a>
 8012048:	e089      	b.n	801215e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	2b02      	cmp	r3, #2
 8012050:	d107      	bne.n	8012062 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012052:	4b79      	ldr	r3, [pc, #484]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	2380      	movs	r3, #128	@ 0x80
 8012058:	029b      	lsls	r3, r3, #10
 801205a:	4013      	ands	r3, r2
 801205c:	d120      	bne.n	80120a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801205e:	2301      	movs	r3, #1
 8012060:	e0e1      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	2b03      	cmp	r3, #3
 8012068:	d107      	bne.n	801207a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801206a:	4b73      	ldr	r3, [pc, #460]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	2380      	movs	r3, #128	@ 0x80
 8012070:	049b      	lsls	r3, r3, #18
 8012072:	4013      	ands	r3, r2
 8012074:	d114      	bne.n	80120a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8012076:	2301      	movs	r3, #1
 8012078:	e0d5      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	2b01      	cmp	r3, #1
 8012080:	d106      	bne.n	8012090 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012082:	4b6d      	ldr	r3, [pc, #436]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	2204      	movs	r2, #4
 8012088:	4013      	ands	r3, r2
 801208a:	d109      	bne.n	80120a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801208c:	2301      	movs	r3, #1
 801208e:	e0ca      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8012090:	4b69      	ldr	r3, [pc, #420]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	2380      	movs	r3, #128	@ 0x80
 8012096:	009b      	lsls	r3, r3, #2
 8012098:	4013      	ands	r3, r2
 801209a:	d101      	bne.n	80120a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801209c:	2301      	movs	r3, #1
 801209e:	e0c2      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80120a0:	4b65      	ldr	r3, [pc, #404]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	2203      	movs	r2, #3
 80120a6:	4393      	bics	r3, r2
 80120a8:	0019      	movs	r1, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	685a      	ldr	r2, [r3, #4]
 80120ae:	4b62      	ldr	r3, [pc, #392]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80120b0:	430a      	orrs	r2, r1
 80120b2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80120b4:	f7f9 ffb2 	bl	800c01c <HAL_GetTick>
 80120b8:	0003      	movs	r3, r0
 80120ba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d111      	bne.n	80120e8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80120c4:	e009      	b.n	80120da <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80120c6:	f7f9 ffa9 	bl	800c01c <HAL_GetTick>
 80120ca:	0002      	movs	r2, r0
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	1ad3      	subs	r3, r2, r3
 80120d0:	4a58      	ldr	r2, [pc, #352]	@ (8012234 <HAL_RCC_ClockConfig+0x274>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d901      	bls.n	80120da <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80120d6:	2303      	movs	r3, #3
 80120d8:	e0a5      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80120da:	4b57      	ldr	r3, [pc, #348]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	220c      	movs	r2, #12
 80120e0:	4013      	ands	r3, r2
 80120e2:	2b08      	cmp	r3, #8
 80120e4:	d1ef      	bne.n	80120c6 <HAL_RCC_ClockConfig+0x106>
 80120e6:	e03a      	b.n	801215e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	2b03      	cmp	r3, #3
 80120ee:	d111      	bne.n	8012114 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80120f0:	e009      	b.n	8012106 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80120f2:	f7f9 ff93 	bl	800c01c <HAL_GetTick>
 80120f6:	0002      	movs	r2, r0
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	4a4d      	ldr	r2, [pc, #308]	@ (8012234 <HAL_RCC_ClockConfig+0x274>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d901      	bls.n	8012106 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8012102:	2303      	movs	r3, #3
 8012104:	e08f      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012106:	4b4c      	ldr	r3, [pc, #304]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	220c      	movs	r2, #12
 801210c:	4013      	ands	r3, r2
 801210e:	2b0c      	cmp	r3, #12
 8012110:	d1ef      	bne.n	80120f2 <HAL_RCC_ClockConfig+0x132>
 8012112:	e024      	b.n	801215e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d11b      	bne.n	8012154 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801211c:	e009      	b.n	8012132 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801211e:	f7f9 ff7d 	bl	800c01c <HAL_GetTick>
 8012122:	0002      	movs	r2, r0
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	1ad3      	subs	r3, r2, r3
 8012128:	4a42      	ldr	r2, [pc, #264]	@ (8012234 <HAL_RCC_ClockConfig+0x274>)
 801212a:	4293      	cmp	r3, r2
 801212c:	d901      	bls.n	8012132 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801212e:	2303      	movs	r3, #3
 8012130:	e079      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012132:	4b41      	ldr	r3, [pc, #260]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	220c      	movs	r2, #12
 8012138:	4013      	ands	r3, r2
 801213a:	2b04      	cmp	r3, #4
 801213c:	d1ef      	bne.n	801211e <HAL_RCC_ClockConfig+0x15e>
 801213e:	e00e      	b.n	801215e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012140:	f7f9 ff6c 	bl	800c01c <HAL_GetTick>
 8012144:	0002      	movs	r2, r0
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	4a3a      	ldr	r2, [pc, #232]	@ (8012234 <HAL_RCC_ClockConfig+0x274>)
 801214c:	4293      	cmp	r3, r2
 801214e:	d901      	bls.n	8012154 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8012150:	2303      	movs	r3, #3
 8012152:	e068      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8012154:	4b38      	ldr	r3, [pc, #224]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	220c      	movs	r2, #12
 801215a:	4013      	ands	r3, r2
 801215c:	d1f0      	bne.n	8012140 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801215e:	4b34      	ldr	r3, [pc, #208]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	2201      	movs	r2, #1
 8012164:	4013      	ands	r3, r2
 8012166:	683a      	ldr	r2, [r7, #0]
 8012168:	429a      	cmp	r2, r3
 801216a:	d21e      	bcs.n	80121aa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801216c:	4b30      	ldr	r3, [pc, #192]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	2201      	movs	r2, #1
 8012172:	4393      	bics	r3, r2
 8012174:	0019      	movs	r1, r3
 8012176:	4b2e      	ldr	r3, [pc, #184]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 8012178:	683a      	ldr	r2, [r7, #0]
 801217a:	430a      	orrs	r2, r1
 801217c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801217e:	f7f9 ff4d 	bl	800c01c <HAL_GetTick>
 8012182:	0003      	movs	r3, r0
 8012184:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012186:	e009      	b.n	801219c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012188:	f7f9 ff48 	bl	800c01c <HAL_GetTick>
 801218c:	0002      	movs	r2, r0
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	1ad3      	subs	r3, r2, r3
 8012192:	4a28      	ldr	r2, [pc, #160]	@ (8012234 <HAL_RCC_ClockConfig+0x274>)
 8012194:	4293      	cmp	r3, r2
 8012196:	d901      	bls.n	801219c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8012198:	2303      	movs	r3, #3
 801219a:	e044      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801219c:	4b24      	ldr	r3, [pc, #144]	@ (8012230 <HAL_RCC_ClockConfig+0x270>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	2201      	movs	r2, #1
 80121a2:	4013      	ands	r3, r2
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d1ee      	bne.n	8012188 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2204      	movs	r2, #4
 80121b0:	4013      	ands	r3, r2
 80121b2:	d009      	beq.n	80121c8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80121b4:	4b20      	ldr	r3, [pc, #128]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	4a20      	ldr	r2, [pc, #128]	@ (801223c <HAL_RCC_ClockConfig+0x27c>)
 80121ba:	4013      	ands	r3, r2
 80121bc:	0019      	movs	r1, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	68da      	ldr	r2, [r3, #12]
 80121c2:	4b1d      	ldr	r3, [pc, #116]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80121c4:	430a      	orrs	r2, r1
 80121c6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2208      	movs	r2, #8
 80121ce:	4013      	ands	r3, r2
 80121d0:	d00a      	beq.n	80121e8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80121d2:	4b19      	ldr	r3, [pc, #100]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	4a1a      	ldr	r2, [pc, #104]	@ (8012240 <HAL_RCC_ClockConfig+0x280>)
 80121d8:	4013      	ands	r3, r2
 80121da:	0019      	movs	r1, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	691b      	ldr	r3, [r3, #16]
 80121e0:	00da      	lsls	r2, r3, #3
 80121e2:	4b15      	ldr	r3, [pc, #84]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80121e4:	430a      	orrs	r2, r1
 80121e6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80121e8:	f000 f832 	bl	8012250 <HAL_RCC_GetSysClockFreq>
 80121ec:	0001      	movs	r1, r0
 80121ee:	4b12      	ldr	r3, [pc, #72]	@ (8012238 <HAL_RCC_ClockConfig+0x278>)
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	091b      	lsrs	r3, r3, #4
 80121f4:	220f      	movs	r2, #15
 80121f6:	4013      	ands	r3, r2
 80121f8:	4a12      	ldr	r2, [pc, #72]	@ (8012244 <HAL_RCC_ClockConfig+0x284>)
 80121fa:	5cd3      	ldrb	r3, [r2, r3]
 80121fc:	000a      	movs	r2, r1
 80121fe:	40da      	lsrs	r2, r3
 8012200:	4b11      	ldr	r3, [pc, #68]	@ (8012248 <HAL_RCC_ClockConfig+0x288>)
 8012202:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8012204:	4b11      	ldr	r3, [pc, #68]	@ (801224c <HAL_RCC_ClockConfig+0x28c>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	250b      	movs	r5, #11
 801220a:	197c      	adds	r4, r7, r5
 801220c:	0018      	movs	r0, r3
 801220e:	f7f9 febf 	bl	800bf90 <HAL_InitTick>
 8012212:	0003      	movs	r3, r0
 8012214:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8012216:	197b      	adds	r3, r7, r5
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d002      	beq.n	8012224 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801221e:	197b      	adds	r3, r7, r5
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	e000      	b.n	8012226 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8012224:	2300      	movs	r3, #0
}
 8012226:	0018      	movs	r0, r3
 8012228:	46bd      	mov	sp, r7
 801222a:	b004      	add	sp, #16
 801222c:	bdb0      	pop	{r4, r5, r7, pc}
 801222e:	46c0      	nop			@ (mov r8, r8)
 8012230:	40022000 	.word	0x40022000
 8012234:	00001388 	.word	0x00001388
 8012238:	40021000 	.word	0x40021000
 801223c:	fffff8ff 	.word	0xfffff8ff
 8012240:	ffffc7ff 	.word	0xffffc7ff
 8012244:	08020be4 	.word	0x08020be4
 8012248:	200000c4 	.word	0x200000c4
 801224c:	200000d4 	.word	0x200000d4

08012250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012250:	b5b0      	push	{r4, r5, r7, lr}
 8012252:	b08e      	sub	sp, #56	@ 0x38
 8012254:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8012256:	4b4c      	ldr	r3, [pc, #304]	@ (8012388 <HAL_RCC_GetSysClockFreq+0x138>)
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801225c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801225e:	230c      	movs	r3, #12
 8012260:	4013      	ands	r3, r2
 8012262:	2b0c      	cmp	r3, #12
 8012264:	d014      	beq.n	8012290 <HAL_RCC_GetSysClockFreq+0x40>
 8012266:	d900      	bls.n	801226a <HAL_RCC_GetSysClockFreq+0x1a>
 8012268:	e07b      	b.n	8012362 <HAL_RCC_GetSysClockFreq+0x112>
 801226a:	2b04      	cmp	r3, #4
 801226c:	d002      	beq.n	8012274 <HAL_RCC_GetSysClockFreq+0x24>
 801226e:	2b08      	cmp	r3, #8
 8012270:	d00b      	beq.n	801228a <HAL_RCC_GetSysClockFreq+0x3a>
 8012272:	e076      	b.n	8012362 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8012274:	4b44      	ldr	r3, [pc, #272]	@ (8012388 <HAL_RCC_GetSysClockFreq+0x138>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2210      	movs	r2, #16
 801227a:	4013      	ands	r3, r2
 801227c:	d002      	beq.n	8012284 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801227e:	4b43      	ldr	r3, [pc, #268]	@ (801238c <HAL_RCC_GetSysClockFreq+0x13c>)
 8012280:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8012282:	e07c      	b.n	801237e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8012284:	4b42      	ldr	r3, [pc, #264]	@ (8012390 <HAL_RCC_GetSysClockFreq+0x140>)
 8012286:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012288:	e079      	b.n	801237e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801228a:	4b42      	ldr	r3, [pc, #264]	@ (8012394 <HAL_RCC_GetSysClockFreq+0x144>)
 801228c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801228e:	e076      	b.n	801237e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8012290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012292:	0c9a      	lsrs	r2, r3, #18
 8012294:	230f      	movs	r3, #15
 8012296:	401a      	ands	r2, r3
 8012298:	4b3f      	ldr	r3, [pc, #252]	@ (8012398 <HAL_RCC_GetSysClockFreq+0x148>)
 801229a:	5c9b      	ldrb	r3, [r3, r2]
 801229c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a0:	0d9a      	lsrs	r2, r3, #22
 80122a2:	2303      	movs	r3, #3
 80122a4:	4013      	ands	r3, r2
 80122a6:	3301      	adds	r3, #1
 80122a8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80122aa:	4b37      	ldr	r3, [pc, #220]	@ (8012388 <HAL_RCC_GetSysClockFreq+0x138>)
 80122ac:	68da      	ldr	r2, [r3, #12]
 80122ae:	2380      	movs	r3, #128	@ 0x80
 80122b0:	025b      	lsls	r3, r3, #9
 80122b2:	4013      	ands	r3, r2
 80122b4:	d01a      	beq.n	80122ec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80122b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122b8:	61bb      	str	r3, [r7, #24]
 80122ba:	2300      	movs	r3, #0
 80122bc:	61fb      	str	r3, [r7, #28]
 80122be:	4a35      	ldr	r2, [pc, #212]	@ (8012394 <HAL_RCC_GetSysClockFreq+0x144>)
 80122c0:	2300      	movs	r3, #0
 80122c2:	69b8      	ldr	r0, [r7, #24]
 80122c4:	69f9      	ldr	r1, [r7, #28]
 80122c6:	f7ee f97b 	bl	80005c0 <__aeabi_lmul>
 80122ca:	0002      	movs	r2, r0
 80122cc:	000b      	movs	r3, r1
 80122ce:	0010      	movs	r0, r2
 80122d0:	0019      	movs	r1, r3
 80122d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d4:	613b      	str	r3, [r7, #16]
 80122d6:	2300      	movs	r3, #0
 80122d8:	617b      	str	r3, [r7, #20]
 80122da:	693a      	ldr	r2, [r7, #16]
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	f7ee f94f 	bl	8000580 <__aeabi_uldivmod>
 80122e2:	0002      	movs	r2, r0
 80122e4:	000b      	movs	r3, r1
 80122e6:	0013      	movs	r3, r2
 80122e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80122ea:	e037      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80122ec:	4b26      	ldr	r3, [pc, #152]	@ (8012388 <HAL_RCC_GetSysClockFreq+0x138>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2210      	movs	r2, #16
 80122f2:	4013      	ands	r3, r2
 80122f4:	d01a      	beq.n	801232c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80122f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f8:	60bb      	str	r3, [r7, #8]
 80122fa:	2300      	movs	r3, #0
 80122fc:	60fb      	str	r3, [r7, #12]
 80122fe:	4a23      	ldr	r2, [pc, #140]	@ (801238c <HAL_RCC_GetSysClockFreq+0x13c>)
 8012300:	2300      	movs	r3, #0
 8012302:	68b8      	ldr	r0, [r7, #8]
 8012304:	68f9      	ldr	r1, [r7, #12]
 8012306:	f7ee f95b 	bl	80005c0 <__aeabi_lmul>
 801230a:	0002      	movs	r2, r0
 801230c:	000b      	movs	r3, r1
 801230e:	0010      	movs	r0, r2
 8012310:	0019      	movs	r1, r3
 8012312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012314:	603b      	str	r3, [r7, #0]
 8012316:	2300      	movs	r3, #0
 8012318:	607b      	str	r3, [r7, #4]
 801231a:	683a      	ldr	r2, [r7, #0]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f7ee f92f 	bl	8000580 <__aeabi_uldivmod>
 8012322:	0002      	movs	r2, r0
 8012324:	000b      	movs	r3, r1
 8012326:	0013      	movs	r3, r2
 8012328:	637b      	str	r3, [r7, #52]	@ 0x34
 801232a:	e017      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801232e:	0018      	movs	r0, r3
 8012330:	2300      	movs	r3, #0
 8012332:	0019      	movs	r1, r3
 8012334:	4a16      	ldr	r2, [pc, #88]	@ (8012390 <HAL_RCC_GetSysClockFreq+0x140>)
 8012336:	2300      	movs	r3, #0
 8012338:	f7ee f942 	bl	80005c0 <__aeabi_lmul>
 801233c:	0002      	movs	r2, r0
 801233e:	000b      	movs	r3, r1
 8012340:	0010      	movs	r0, r2
 8012342:	0019      	movs	r1, r3
 8012344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012346:	001c      	movs	r4, r3
 8012348:	2300      	movs	r3, #0
 801234a:	001d      	movs	r5, r3
 801234c:	0022      	movs	r2, r4
 801234e:	002b      	movs	r3, r5
 8012350:	f7ee f916 	bl	8000580 <__aeabi_uldivmod>
 8012354:	0002      	movs	r2, r0
 8012356:	000b      	movs	r3, r1
 8012358:	0013      	movs	r3, r2
 801235a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801235c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801235e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012360:	e00d      	b.n	801237e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8012362:	4b09      	ldr	r3, [pc, #36]	@ (8012388 <HAL_RCC_GetSysClockFreq+0x138>)
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	0b5b      	lsrs	r3, r3, #13
 8012368:	2207      	movs	r2, #7
 801236a:	4013      	ands	r3, r2
 801236c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801236e:	6a3b      	ldr	r3, [r7, #32]
 8012370:	3301      	adds	r3, #1
 8012372:	2280      	movs	r2, #128	@ 0x80
 8012374:	0212      	lsls	r2, r2, #8
 8012376:	409a      	lsls	r2, r3
 8012378:	0013      	movs	r3, r2
 801237a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801237c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801237e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8012380:	0018      	movs	r0, r3
 8012382:	46bd      	mov	sp, r7
 8012384:	b00e      	add	sp, #56	@ 0x38
 8012386:	bdb0      	pop	{r4, r5, r7, pc}
 8012388:	40021000 	.word	0x40021000
 801238c:	003d0900 	.word	0x003d0900
 8012390:	00f42400 	.word	0x00f42400
 8012394:	007a1200 	.word	0x007a1200
 8012398:	08020bfc 	.word	0x08020bfc

0801239c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80123a0:	4b02      	ldr	r3, [pc, #8]	@ (80123ac <HAL_RCC_GetHCLKFreq+0x10>)
 80123a2:	681b      	ldr	r3, [r3, #0]
}
 80123a4:	0018      	movs	r0, r3
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	46c0      	nop			@ (mov r8, r8)
 80123ac:	200000c4 	.word	0x200000c4

080123b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80123b4:	f7ff fff2 	bl	801239c <HAL_RCC_GetHCLKFreq>
 80123b8:	0001      	movs	r1, r0
 80123ba:	4b06      	ldr	r3, [pc, #24]	@ (80123d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	0a1b      	lsrs	r3, r3, #8
 80123c0:	2207      	movs	r2, #7
 80123c2:	4013      	ands	r3, r2
 80123c4:	4a04      	ldr	r2, [pc, #16]	@ (80123d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80123c6:	5cd3      	ldrb	r3, [r2, r3]
 80123c8:	40d9      	lsrs	r1, r3
 80123ca:	000b      	movs	r3, r1
}
 80123cc:	0018      	movs	r0, r3
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	46c0      	nop			@ (mov r8, r8)
 80123d4:	40021000 	.word	0x40021000
 80123d8:	08020bf4 	.word	0x08020bf4

080123dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80123e0:	f7ff ffdc 	bl	801239c <HAL_RCC_GetHCLKFreq>
 80123e4:	0001      	movs	r1, r0
 80123e6:	4b06      	ldr	r3, [pc, #24]	@ (8012400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	0adb      	lsrs	r3, r3, #11
 80123ec:	2207      	movs	r2, #7
 80123ee:	4013      	ands	r3, r2
 80123f0:	4a04      	ldr	r2, [pc, #16]	@ (8012404 <HAL_RCC_GetPCLK2Freq+0x28>)
 80123f2:	5cd3      	ldrb	r3, [r2, r3]
 80123f4:	40d9      	lsrs	r1, r3
 80123f6:	000b      	movs	r3, r1
}
 80123f8:	0018      	movs	r0, r3
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	46c0      	nop			@ (mov r8, r8)
 8012400:	40021000 	.word	0x40021000
 8012404:	08020bf4 	.word	0x08020bf4

08012408 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b086      	sub	sp, #24
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8012410:	2017      	movs	r0, #23
 8012412:	183b      	adds	r3, r7, r0
 8012414:	2200      	movs	r2, #0
 8012416:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	2220      	movs	r2, #32
 801241e:	4013      	ands	r3, r2
 8012420:	d100      	bne.n	8012424 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8012422:	e0c7      	b.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012424:	4b9b      	ldr	r3, [pc, #620]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012428:	2380      	movs	r3, #128	@ 0x80
 801242a:	055b      	lsls	r3, r3, #21
 801242c:	4013      	ands	r3, r2
 801242e:	d109      	bne.n	8012444 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012430:	4b98      	ldr	r3, [pc, #608]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012434:	4b97      	ldr	r3, [pc, #604]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012436:	2180      	movs	r1, #128	@ 0x80
 8012438:	0549      	lsls	r1, r1, #21
 801243a:	430a      	orrs	r2, r1
 801243c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801243e:	183b      	adds	r3, r7, r0
 8012440:	2201      	movs	r2, #1
 8012442:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012444:	4b94      	ldr	r3, [pc, #592]	@ (8012698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	2380      	movs	r3, #128	@ 0x80
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	4013      	ands	r3, r2
 801244e:	d11a      	bne.n	8012486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012450:	4b91      	ldr	r3, [pc, #580]	@ (8012698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	4b90      	ldr	r3, [pc, #576]	@ (8012698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012456:	2180      	movs	r1, #128	@ 0x80
 8012458:	0049      	lsls	r1, r1, #1
 801245a:	430a      	orrs	r2, r1
 801245c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801245e:	f7f9 fddd 	bl	800c01c <HAL_GetTick>
 8012462:	0003      	movs	r3, r0
 8012464:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012466:	e008      	b.n	801247a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012468:	f7f9 fdd8 	bl	800c01c <HAL_GetTick>
 801246c:	0002      	movs	r2, r0
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	2b64      	cmp	r3, #100	@ 0x64
 8012474:	d901      	bls.n	801247a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8012476:	2303      	movs	r3, #3
 8012478:	e107      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801247a:	4b87      	ldr	r3, [pc, #540]	@ (8012698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	2380      	movs	r3, #128	@ 0x80
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	4013      	ands	r3, r2
 8012484:	d0f0      	beq.n	8012468 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8012486:	4b83      	ldr	r3, [pc, #524]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	23c0      	movs	r3, #192	@ 0xc0
 801248c:	039b      	lsls	r3, r3, #14
 801248e:	4013      	ands	r3, r2
 8012490:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	685a      	ldr	r2, [r3, #4]
 8012496:	23c0      	movs	r3, #192	@ 0xc0
 8012498:	039b      	lsls	r3, r3, #14
 801249a:	4013      	ands	r3, r2
 801249c:	68fa      	ldr	r2, [r7, #12]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d013      	beq.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	685a      	ldr	r2, [r3, #4]
 80124a6:	23c0      	movs	r3, #192	@ 0xc0
 80124a8:	029b      	lsls	r3, r3, #10
 80124aa:	401a      	ands	r2, r3
 80124ac:	23c0      	movs	r3, #192	@ 0xc0
 80124ae:	029b      	lsls	r3, r3, #10
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d10a      	bne.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80124b4:	4b77      	ldr	r3, [pc, #476]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	2380      	movs	r3, #128	@ 0x80
 80124ba:	029b      	lsls	r3, r3, #10
 80124bc:	401a      	ands	r2, r3
 80124be:	2380      	movs	r3, #128	@ 0x80
 80124c0:	029b      	lsls	r3, r3, #10
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d101      	bne.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80124c6:	2301      	movs	r3, #1
 80124c8:	e0df      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80124ca:	4b72      	ldr	r3, [pc, #456]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80124ce:	23c0      	movs	r3, #192	@ 0xc0
 80124d0:	029b      	lsls	r3, r3, #10
 80124d2:	4013      	ands	r3, r2
 80124d4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d03b      	beq.n	8012554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	685a      	ldr	r2, [r3, #4]
 80124e0:	23c0      	movs	r3, #192	@ 0xc0
 80124e2:	029b      	lsls	r3, r3, #10
 80124e4:	4013      	ands	r3, r2
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d033      	beq.n	8012554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2220      	movs	r2, #32
 80124f2:	4013      	ands	r3, r2
 80124f4:	d02e      	beq.n	8012554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80124f6:	4b67      	ldr	r3, [pc, #412]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124fa:	4a68      	ldr	r2, [pc, #416]	@ (801269c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80124fc:	4013      	ands	r3, r2
 80124fe:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012500:	4b64      	ldr	r3, [pc, #400]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012502:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012504:	4b63      	ldr	r3, [pc, #396]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012506:	2180      	movs	r1, #128	@ 0x80
 8012508:	0309      	lsls	r1, r1, #12
 801250a:	430a      	orrs	r2, r1
 801250c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801250e:	4b61      	ldr	r3, [pc, #388]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012512:	4b60      	ldr	r3, [pc, #384]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012514:	4962      	ldr	r1, [pc, #392]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8012516:	400a      	ands	r2, r1
 8012518:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801251a:	4b5e      	ldr	r3, [pc, #376]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8012520:	68fa      	ldr	r2, [r7, #12]
 8012522:	2380      	movs	r3, #128	@ 0x80
 8012524:	005b      	lsls	r3, r3, #1
 8012526:	4013      	ands	r3, r2
 8012528:	d014      	beq.n	8012554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801252a:	f7f9 fd77 	bl	800c01c <HAL_GetTick>
 801252e:	0003      	movs	r3, r0
 8012530:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012532:	e009      	b.n	8012548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012534:	f7f9 fd72 	bl	800c01c <HAL_GetTick>
 8012538:	0002      	movs	r2, r0
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	4a59      	ldr	r2, [pc, #356]	@ (80126a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8012540:	4293      	cmp	r3, r2
 8012542:	d901      	bls.n	8012548 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8012544:	2303      	movs	r3, #3
 8012546:	e0a0      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012548:	4b52      	ldr	r3, [pc, #328]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801254a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801254c:	2380      	movs	r3, #128	@ 0x80
 801254e:	009b      	lsls	r3, r3, #2
 8012550:	4013      	ands	r3, r2
 8012552:	d0ef      	beq.n	8012534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2220      	movs	r2, #32
 801255a:	4013      	ands	r3, r2
 801255c:	d01f      	beq.n	801259e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	685a      	ldr	r2, [r3, #4]
 8012562:	23c0      	movs	r3, #192	@ 0xc0
 8012564:	029b      	lsls	r3, r3, #10
 8012566:	401a      	ands	r2, r3
 8012568:	23c0      	movs	r3, #192	@ 0xc0
 801256a:	029b      	lsls	r3, r3, #10
 801256c:	429a      	cmp	r2, r3
 801256e:	d10c      	bne.n	801258a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8012570:	4b48      	ldr	r3, [pc, #288]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	4a4c      	ldr	r2, [pc, #304]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8012576:	4013      	ands	r3, r2
 8012578:	0019      	movs	r1, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	685a      	ldr	r2, [r3, #4]
 801257e:	23c0      	movs	r3, #192	@ 0xc0
 8012580:	039b      	lsls	r3, r3, #14
 8012582:	401a      	ands	r2, r3
 8012584:	4b43      	ldr	r3, [pc, #268]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012586:	430a      	orrs	r2, r1
 8012588:	601a      	str	r2, [r3, #0]
 801258a:	4b42      	ldr	r3, [pc, #264]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801258c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685a      	ldr	r2, [r3, #4]
 8012592:	23c0      	movs	r3, #192	@ 0xc0
 8012594:	029b      	lsls	r3, r3, #10
 8012596:	401a      	ands	r2, r3
 8012598:	4b3e      	ldr	r3, [pc, #248]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801259a:	430a      	orrs	r2, r1
 801259c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801259e:	2317      	movs	r3, #23
 80125a0:	18fb      	adds	r3, r7, r3
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d105      	bne.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80125a8:	4b3a      	ldr	r3, [pc, #232]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80125aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80125ac:	4b39      	ldr	r3, [pc, #228]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80125ae:	493f      	ldr	r1, [pc, #252]	@ (80126ac <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80125b0:	400a      	ands	r2, r1
 80125b2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2201      	movs	r2, #1
 80125ba:	4013      	ands	r3, r2
 80125bc:	d009      	beq.n	80125d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80125be:	4b35      	ldr	r3, [pc, #212]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80125c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80125c2:	2203      	movs	r2, #3
 80125c4:	4393      	bics	r3, r2
 80125c6:	0019      	movs	r1, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	689a      	ldr	r2, [r3, #8]
 80125cc:	4b31      	ldr	r3, [pc, #196]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80125ce:	430a      	orrs	r2, r1
 80125d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2202      	movs	r2, #2
 80125d8:	4013      	ands	r3, r2
 80125da:	d009      	beq.n	80125f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80125dc:	4b2d      	ldr	r3, [pc, #180]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80125de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80125e0:	220c      	movs	r2, #12
 80125e2:	4393      	bics	r3, r2
 80125e4:	0019      	movs	r1, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68da      	ldr	r2, [r3, #12]
 80125ea:	4b2a      	ldr	r3, [pc, #168]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80125ec:	430a      	orrs	r2, r1
 80125ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	2204      	movs	r2, #4
 80125f6:	4013      	ands	r3, r2
 80125f8:	d009      	beq.n	801260e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80125fa:	4b26      	ldr	r3, [pc, #152]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80125fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80125fe:	4a2c      	ldr	r2, [pc, #176]	@ (80126b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8012600:	4013      	ands	r3, r2
 8012602:	0019      	movs	r1, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	691a      	ldr	r2, [r3, #16]
 8012608:	4b22      	ldr	r3, [pc, #136]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801260a:	430a      	orrs	r2, r1
 801260c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2208      	movs	r2, #8
 8012614:	4013      	ands	r3, r2
 8012616:	d009      	beq.n	801262c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012618:	4b1e      	ldr	r3, [pc, #120]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801261a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801261c:	4a25      	ldr	r2, [pc, #148]	@ (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801261e:	4013      	ands	r3, r2
 8012620:	0019      	movs	r1, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	695a      	ldr	r2, [r3, #20]
 8012626:	4b1b      	ldr	r3, [pc, #108]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012628:	430a      	orrs	r2, r1
 801262a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681a      	ldr	r2, [r3, #0]
 8012630:	2380      	movs	r3, #128	@ 0x80
 8012632:	005b      	lsls	r3, r3, #1
 8012634:	4013      	ands	r3, r2
 8012636:	d009      	beq.n	801264c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012638:	4b16      	ldr	r3, [pc, #88]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801263c:	4a17      	ldr	r2, [pc, #92]	@ (801269c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801263e:	4013      	ands	r3, r2
 8012640:	0019      	movs	r1, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	699a      	ldr	r2, [r3, #24]
 8012646:	4b13      	ldr	r3, [pc, #76]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012648:	430a      	orrs	r2, r1
 801264a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2240      	movs	r2, #64	@ 0x40
 8012652:	4013      	ands	r3, r2
 8012654:	d009      	beq.n	801266a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012656:	4b0f      	ldr	r3, [pc, #60]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801265a:	4a17      	ldr	r2, [pc, #92]	@ (80126b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801265c:	4013      	ands	r3, r2
 801265e:	0019      	movs	r1, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6a1a      	ldr	r2, [r3, #32]
 8012664:	4b0b      	ldr	r3, [pc, #44]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012666:	430a      	orrs	r2, r1
 8012668:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2280      	movs	r2, #128	@ 0x80
 8012670:	4013      	ands	r3, r2
 8012672:	d009      	beq.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8012674:	4b07      	ldr	r3, [pc, #28]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012678:	4a10      	ldr	r2, [pc, #64]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801267a:	4013      	ands	r3, r2
 801267c:	0019      	movs	r1, r3
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	69da      	ldr	r2, [r3, #28]
 8012682:	4b04      	ldr	r3, [pc, #16]	@ (8012694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012684:	430a      	orrs	r2, r1
 8012686:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012688:	2300      	movs	r3, #0
}
 801268a:	0018      	movs	r0, r3
 801268c:	46bd      	mov	sp, r7
 801268e:	b006      	add	sp, #24
 8012690:	bd80      	pop	{r7, pc}
 8012692:	46c0      	nop			@ (mov r8, r8)
 8012694:	40021000 	.word	0x40021000
 8012698:	40007000 	.word	0x40007000
 801269c:	fffcffff 	.word	0xfffcffff
 80126a0:	fff7ffff 	.word	0xfff7ffff
 80126a4:	00001388 	.word	0x00001388
 80126a8:	ffcfffff 	.word	0xffcfffff
 80126ac:	efffffff 	.word	0xefffffff
 80126b0:	fffff3ff 	.word	0xfffff3ff
 80126b4:	ffffcfff 	.word	0xffffcfff
 80126b8:	fbffffff 	.word	0xfbffffff
 80126bc:	fff3ffff 	.word	0xfff3ffff

080126c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80126c0:	b5b0      	push	{r4, r5, r7, lr}
 80126c2:	b084      	sub	sp, #16
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80126c8:	230f      	movs	r3, #15
 80126ca:	18fb      	adds	r3, r7, r3
 80126cc:	2201      	movs	r2, #1
 80126ce:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d101      	bne.n	80126da <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80126d6:	2301      	movs	r3, #1
 80126d8:	e088      	b.n	80127ec <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2221      	movs	r2, #33	@ 0x21
 80126de:	5c9b      	ldrb	r3, [r3, r2]
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d107      	bne.n	80126f6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2220      	movs	r2, #32
 80126ea:	2100      	movs	r1, #0
 80126ec:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	0018      	movs	r0, r3
 80126f2:	f7f5 fda1 	bl	8008238 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2221      	movs	r2, #33	@ 0x21
 80126fa:	2102      	movs	r1, #2
 80126fc:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	2210      	movs	r2, #16
 8012706:	4013      	ands	r3, r2
 8012708:	2b10      	cmp	r3, #16
 801270a:	d05f      	beq.n	80127cc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	22ca      	movs	r2, #202	@ 0xca
 8012712:	625a      	str	r2, [r3, #36]	@ 0x24
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	2253      	movs	r2, #83	@ 0x53
 801271a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801271c:	250f      	movs	r5, #15
 801271e:	197c      	adds	r4, r7, r5
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	0018      	movs	r0, r3
 8012724:	f000 fa7c 	bl	8012c20 <RTC_EnterInitMode>
 8012728:	0003      	movs	r3, r0
 801272a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801272c:	0028      	movs	r0, r5
 801272e:	183b      	adds	r3, r7, r0
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d12c      	bne.n	8012790 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	689a      	ldr	r2, [r3, #8]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	492c      	ldr	r1, [pc, #176]	@ (80127f4 <HAL_RTC_Init+0x134>)
 8012742:	400a      	ands	r2, r1
 8012744:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	6899      	ldr	r1, [r3, #8]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	685a      	ldr	r2, [r3, #4]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	691b      	ldr	r3, [r3, #16]
 8012754:	431a      	orrs	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	699b      	ldr	r3, [r3, #24]
 801275a:	431a      	orrs	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	430a      	orrs	r2, r1
 8012762:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	68d2      	ldr	r2, [r2, #12]
 801276c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	6919      	ldr	r1, [r3, #16]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	041a      	lsls	r2, r3, #16
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	430a      	orrs	r2, r1
 8012780:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8012782:	183c      	adds	r4, r7, r0
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	0018      	movs	r0, r3
 8012788:	f000 fa8e 	bl	8012ca8 <RTC_ExitInitMode>
 801278c:	0003      	movs	r3, r0
 801278e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8012790:	230f      	movs	r3, #15
 8012792:	18fb      	adds	r3, r7, r3
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d113      	bne.n	80127c2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2103      	movs	r1, #3
 80127a6:	438a      	bics	r2, r1
 80127a8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	69da      	ldr	r2, [r3, #28]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	695b      	ldr	r3, [r3, #20]
 80127b8:	431a      	orrs	r2, r3
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	430a      	orrs	r2, r1
 80127c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	22ff      	movs	r2, #255	@ 0xff
 80127c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80127ca:	e003      	b.n	80127d4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80127cc:	230f      	movs	r3, #15
 80127ce:	18fb      	adds	r3, r7, r3
 80127d0:	2200      	movs	r2, #0
 80127d2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80127d4:	230f      	movs	r3, #15
 80127d6:	18fb      	adds	r3, r7, r3
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d103      	bne.n	80127e6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2221      	movs	r2, #33	@ 0x21
 80127e2:	2101      	movs	r1, #1
 80127e4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80127e6:	230f      	movs	r3, #15
 80127e8:	18fb      	adds	r3, r7, r3
 80127ea:	781b      	ldrb	r3, [r3, #0]
}
 80127ec:	0018      	movs	r0, r3
 80127ee:	46bd      	mov	sp, r7
 80127f0:	b004      	add	sp, #16
 80127f2:	bdb0      	pop	{r4, r5, r7, pc}
 80127f4:	ff8fffbf 	.word	0xff8fffbf

080127f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80127f8:	b5b0      	push	{r4, r5, r7, lr}
 80127fa:	b086      	sub	sp, #24
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8012804:	2300      	movs	r3, #0
 8012806:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2220      	movs	r2, #32
 801280c:	5c9b      	ldrb	r3, [r3, r2]
 801280e:	2b01      	cmp	r3, #1
 8012810:	d101      	bne.n	8012816 <HAL_RTC_SetTime+0x1e>
 8012812:	2302      	movs	r3, #2
 8012814:	e092      	b.n	801293c <HAL_RTC_SetTime+0x144>
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2220      	movs	r2, #32
 801281a:	2101      	movs	r1, #1
 801281c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	2221      	movs	r2, #33	@ 0x21
 8012822:	2102      	movs	r1, #2
 8012824:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d125      	bne.n	8012878 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	689b      	ldr	r3, [r3, #8]
 8012832:	2240      	movs	r2, #64	@ 0x40
 8012834:	4013      	ands	r3, r2
 8012836:	d102      	bne.n	801283e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	2200      	movs	r2, #0
 801283c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	0018      	movs	r0, r3
 8012844:	f000 fa5a 	bl	8012cfc <RTC_ByteToBcd2>
 8012848:	0003      	movs	r3, r0
 801284a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	785b      	ldrb	r3, [r3, #1]
 8012850:	0018      	movs	r0, r3
 8012852:	f000 fa53 	bl	8012cfc <RTC_ByteToBcd2>
 8012856:	0003      	movs	r3, r0
 8012858:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801285a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	789b      	ldrb	r3, [r3, #2]
 8012860:	0018      	movs	r0, r3
 8012862:	f000 fa4b 	bl	8012cfc <RTC_ByteToBcd2>
 8012866:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012868:	0022      	movs	r2, r4
 801286a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	78db      	ldrb	r3, [r3, #3]
 8012870:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012872:	4313      	orrs	r3, r2
 8012874:	617b      	str	r3, [r7, #20]
 8012876:	e017      	b.n	80128a8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	2240      	movs	r2, #64	@ 0x40
 8012880:	4013      	ands	r3, r2
 8012882:	d102      	bne.n	801288a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	2200      	movs	r2, #0
 8012888:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	785b      	ldrb	r3, [r3, #1]
 8012894:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8012896:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8012898:	68ba      	ldr	r2, [r7, #8]
 801289a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801289c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	78db      	ldrb	r3, [r3, #3]
 80128a2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80128a4:	4313      	orrs	r3, r2
 80128a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	22ca      	movs	r2, #202	@ 0xca
 80128ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	2253      	movs	r2, #83	@ 0x53
 80128b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80128b8:	2513      	movs	r5, #19
 80128ba:	197c      	adds	r4, r7, r5
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	0018      	movs	r0, r3
 80128c0:	f000 f9ae 	bl	8012c20 <RTC_EnterInitMode>
 80128c4:	0003      	movs	r3, r0
 80128c6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80128c8:	0028      	movs	r0, r5
 80128ca:	183b      	adds	r3, r7, r0
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d120      	bne.n	8012914 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	697a      	ldr	r2, [r7, #20]
 80128d8:	491a      	ldr	r1, [pc, #104]	@ (8012944 <HAL_RTC_SetTime+0x14c>)
 80128da:	400a      	ands	r2, r1
 80128dc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	689a      	ldr	r2, [r3, #8]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	4917      	ldr	r1, [pc, #92]	@ (8012948 <HAL_RTC_SetTime+0x150>)
 80128ea:	400a      	ands	r2, r1
 80128ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	6899      	ldr	r1, [r3, #8]
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	68da      	ldr	r2, [r3, #12]
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	691b      	ldr	r3, [r3, #16]
 80128fc:	431a      	orrs	r2, r3
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	430a      	orrs	r2, r1
 8012904:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012906:	183c      	adds	r4, r7, r0
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	0018      	movs	r0, r3
 801290c:	f000 f9cc 	bl	8012ca8 <RTC_ExitInitMode>
 8012910:	0003      	movs	r3, r0
 8012912:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8012914:	2313      	movs	r3, #19
 8012916:	18fb      	adds	r3, r7, r3
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d103      	bne.n	8012926 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2221      	movs	r2, #33	@ 0x21
 8012922:	2101      	movs	r1, #1
 8012924:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	22ff      	movs	r2, #255	@ 0xff
 801292c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2220      	movs	r2, #32
 8012932:	2100      	movs	r1, #0
 8012934:	5499      	strb	r1, [r3, r2]

  return status;
 8012936:	2313      	movs	r3, #19
 8012938:	18fb      	adds	r3, r7, r3
 801293a:	781b      	ldrb	r3, [r3, #0]
}
 801293c:	0018      	movs	r0, r3
 801293e:	46bd      	mov	sp, r7
 8012940:	b006      	add	sp, #24
 8012942:	bdb0      	pop	{r4, r5, r7, pc}
 8012944:	007f7f7f 	.word	0x007f7f7f
 8012948:	fffbffff 	.word	0xfffbffff

0801294c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b086      	sub	sp, #24
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8012958:	2300      	movs	r3, #0
 801295a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	045b      	lsls	r3, r3, #17
 801296e:	0c5a      	lsrs	r2, r3, #17
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a22      	ldr	r2, [pc, #136]	@ (8012a04 <HAL_RTC_GetTime+0xb8>)
 801297c:	4013      	ands	r3, r2
 801297e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	0c1b      	lsrs	r3, r3, #16
 8012984:	b2db      	uxtb	r3, r3
 8012986:	223f      	movs	r2, #63	@ 0x3f
 8012988:	4013      	ands	r3, r2
 801298a:	b2da      	uxtb	r2, r3
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	0a1b      	lsrs	r3, r3, #8
 8012994:	b2db      	uxtb	r3, r3
 8012996:	227f      	movs	r2, #127	@ 0x7f
 8012998:	4013      	ands	r3, r2
 801299a:	b2da      	uxtb	r2, r3
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	227f      	movs	r2, #127	@ 0x7f
 80129a6:	4013      	ands	r3, r2
 80129a8:	b2da      	uxtb	r2, r3
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	0d9b      	lsrs	r3, r3, #22
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	2201      	movs	r2, #1
 80129b6:	4013      	ands	r3, r2
 80129b8:	b2da      	uxtb	r2, r3
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d11a      	bne.n	80129fa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	0018      	movs	r0, r3
 80129ca:	f000 f9b8 	bl	8012d3e <RTC_Bcd2ToByte>
 80129ce:	0003      	movs	r3, r0
 80129d0:	001a      	movs	r2, r3
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	785b      	ldrb	r3, [r3, #1]
 80129da:	0018      	movs	r0, r3
 80129dc:	f000 f9af 	bl	8012d3e <RTC_Bcd2ToByte>
 80129e0:	0003      	movs	r3, r0
 80129e2:	001a      	movs	r2, r3
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	789b      	ldrb	r3, [r3, #2]
 80129ec:	0018      	movs	r0, r3
 80129ee:	f000 f9a6 	bl	8012d3e <RTC_Bcd2ToByte>
 80129f2:	0003      	movs	r3, r0
 80129f4:	001a      	movs	r2, r3
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80129fa:	2300      	movs	r3, #0
}
 80129fc:	0018      	movs	r0, r3
 80129fe:	46bd      	mov	sp, r7
 8012a00:	b006      	add	sp, #24
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	007f7f7f 	.word	0x007f7f7f

08012a08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012a08:	b5b0      	push	{r4, r5, r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8012a14:	2300      	movs	r3, #0
 8012a16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2220      	movs	r2, #32
 8012a1c:	5c9b      	ldrb	r3, [r3, r2]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d101      	bne.n	8012a26 <HAL_RTC_SetDate+0x1e>
 8012a22:	2302      	movs	r3, #2
 8012a24:	e07e      	b.n	8012b24 <HAL_RTC_SetDate+0x11c>
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2220      	movs	r2, #32
 8012a2a:	2101      	movs	r1, #1
 8012a2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2221      	movs	r2, #33	@ 0x21
 8012a32:	2102      	movs	r1, #2
 8012a34:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d10e      	bne.n	8012a5a <HAL_RTC_SetDate+0x52>
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	785b      	ldrb	r3, [r3, #1]
 8012a40:	001a      	movs	r2, r3
 8012a42:	2310      	movs	r3, #16
 8012a44:	4013      	ands	r3, r2
 8012a46:	d008      	beq.n	8012a5a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	785b      	ldrb	r3, [r3, #1]
 8012a4c:	2210      	movs	r2, #16
 8012a4e:	4393      	bics	r3, r2
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	330a      	adds	r3, #10
 8012a54:	b2da      	uxtb	r2, r3
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d11c      	bne.n	8012a9a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	78db      	ldrb	r3, [r3, #3]
 8012a64:	0018      	movs	r0, r3
 8012a66:	f000 f949 	bl	8012cfc <RTC_ByteToBcd2>
 8012a6a:	0003      	movs	r3, r0
 8012a6c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	785b      	ldrb	r3, [r3, #1]
 8012a72:	0018      	movs	r0, r3
 8012a74:	f000 f942 	bl	8012cfc <RTC_ByteToBcd2>
 8012a78:	0003      	movs	r3, r0
 8012a7a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012a7c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	789b      	ldrb	r3, [r3, #2]
 8012a82:	0018      	movs	r0, r3
 8012a84:	f000 f93a 	bl	8012cfc <RTC_ByteToBcd2>
 8012a88:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012a8a:	0022      	movs	r2, r4
 8012a8c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012a94:	4313      	orrs	r3, r2
 8012a96:	617b      	str	r3, [r7, #20]
 8012a98:	e00e      	b.n	8012ab8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	78db      	ldrb	r3, [r3, #3]
 8012a9e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	785b      	ldrb	r3, [r3, #1]
 8012aa4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012aa6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8012aa8:	68ba      	ldr	r2, [r7, #8]
 8012aaa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012aac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	22ca      	movs	r2, #202	@ 0xca
 8012abe:	625a      	str	r2, [r3, #36]	@ 0x24
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	2253      	movs	r2, #83	@ 0x53
 8012ac6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012ac8:	2513      	movs	r5, #19
 8012aca:	197c      	adds	r4, r7, r5
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	0018      	movs	r0, r3
 8012ad0:	f000 f8a6 	bl	8012c20 <RTC_EnterInitMode>
 8012ad4:	0003      	movs	r3, r0
 8012ad6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012ad8:	0028      	movs	r0, r5
 8012ada:	183b      	adds	r3, r7, r0
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d10c      	bne.n	8012afc <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	697a      	ldr	r2, [r7, #20]
 8012ae8:	4910      	ldr	r1, [pc, #64]	@ (8012b2c <HAL_RTC_SetDate+0x124>)
 8012aea:	400a      	ands	r2, r1
 8012aec:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012aee:	183c      	adds	r4, r7, r0
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	0018      	movs	r0, r3
 8012af4:	f000 f8d8 	bl	8012ca8 <RTC_ExitInitMode>
 8012af8:	0003      	movs	r3, r0
 8012afa:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8012afc:	2313      	movs	r3, #19
 8012afe:	18fb      	adds	r3, r7, r3
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d103      	bne.n	8012b0e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2221      	movs	r2, #33	@ 0x21
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	22ff      	movs	r2, #255	@ 0xff
 8012b14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2220      	movs	r2, #32
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	5499      	strb	r1, [r3, r2]

  return status;
 8012b1e:	2313      	movs	r3, #19
 8012b20:	18fb      	adds	r3, r7, r3
 8012b22:	781b      	ldrb	r3, [r3, #0]
}
 8012b24:	0018      	movs	r0, r3
 8012b26:	46bd      	mov	sp, r7
 8012b28:	b006      	add	sp, #24
 8012b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8012b2c:	00ffff3f 	.word	0x00ffff3f

08012b30 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b086      	sub	sp, #24
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	4a21      	ldr	r2, [pc, #132]	@ (8012bcc <HAL_RTC_GetDate+0x9c>)
 8012b48:	4013      	ands	r3, r2
 8012b4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	0c1b      	lsrs	r3, r3, #16
 8012b50:	b2da      	uxtb	r2, r3
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	0a1b      	lsrs	r3, r3, #8
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	221f      	movs	r2, #31
 8012b5e:	4013      	ands	r3, r2
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	223f      	movs	r2, #63	@ 0x3f
 8012b6c:	4013      	ands	r3, r2
 8012b6e:	b2da      	uxtb	r2, r3
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	0b5b      	lsrs	r3, r3, #13
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	2207      	movs	r2, #7
 8012b7c:	4013      	ands	r3, r2
 8012b7e:	b2da      	uxtb	r2, r3
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d11a      	bne.n	8012bc0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	78db      	ldrb	r3, [r3, #3]
 8012b8e:	0018      	movs	r0, r3
 8012b90:	f000 f8d5 	bl	8012d3e <RTC_Bcd2ToByte>
 8012b94:	0003      	movs	r3, r0
 8012b96:	001a      	movs	r2, r3
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	785b      	ldrb	r3, [r3, #1]
 8012ba0:	0018      	movs	r0, r3
 8012ba2:	f000 f8cc 	bl	8012d3e <RTC_Bcd2ToByte>
 8012ba6:	0003      	movs	r3, r0
 8012ba8:	001a      	movs	r2, r3
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	789b      	ldrb	r3, [r3, #2]
 8012bb2:	0018      	movs	r0, r3
 8012bb4:	f000 f8c3 	bl	8012d3e <RTC_Bcd2ToByte>
 8012bb8:	0003      	movs	r3, r0
 8012bba:	001a      	movs	r2, r3
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012bc0:	2300      	movs	r3, #0
}
 8012bc2:	0018      	movs	r0, r3
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	b006      	add	sp, #24
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	46c0      	nop			@ (mov r8, r8)
 8012bcc:	00ffff3f 	.word	0x00ffff3f

08012bd0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b084      	sub	sp, #16
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4a0e      	ldr	r2, [pc, #56]	@ (8012c1c <HAL_RTC_WaitForSynchro+0x4c>)
 8012be2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012be4:	f7f9 fa1a 	bl	800c01c <HAL_GetTick>
 8012be8:	0003      	movs	r3, r0
 8012bea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012bec:	e00a      	b.n	8012c04 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012bee:	f7f9 fa15 	bl	800c01c <HAL_GetTick>
 8012bf2:	0002      	movs	r2, r0
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	1ad2      	subs	r2, r2, r3
 8012bf8:	23fa      	movs	r3, #250	@ 0xfa
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d901      	bls.n	8012c04 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012c00:	2303      	movs	r3, #3
 8012c02:	e006      	b.n	8012c12 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	68db      	ldr	r3, [r3, #12]
 8012c0a:	2220      	movs	r2, #32
 8012c0c:	4013      	ands	r3, r2
 8012c0e:	d0ee      	beq.n	8012bee <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	0018      	movs	r0, r3
 8012c14:	46bd      	mov	sp, r7
 8012c16:	b004      	add	sp, #16
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	46c0      	nop			@ (mov r8, r8)
 8012c1c:	0001ff5f 	.word	0x0001ff5f

08012c20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8012c2c:	230f      	movs	r3, #15
 8012c2e:	18fb      	adds	r3, r7, r3
 8012c30:	2200      	movs	r2, #0
 8012c32:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	2240      	movs	r2, #64	@ 0x40
 8012c3c:	4013      	ands	r3, r2
 8012c3e:	d12c      	bne.n	8012c9a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	68da      	ldr	r2, [r3, #12]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2180      	movs	r1, #128	@ 0x80
 8012c4c:	430a      	orrs	r2, r1
 8012c4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012c50:	f7f9 f9e4 	bl	800c01c <HAL_GetTick>
 8012c54:	0003      	movs	r3, r0
 8012c56:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012c58:	e014      	b.n	8012c84 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012c5a:	f7f9 f9df 	bl	800c01c <HAL_GetTick>
 8012c5e:	0002      	movs	r2, r0
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	1ad2      	subs	r2, r2, r3
 8012c64:	200f      	movs	r0, #15
 8012c66:	183b      	adds	r3, r7, r0
 8012c68:	1839      	adds	r1, r7, r0
 8012c6a:	7809      	ldrb	r1, [r1, #0]
 8012c6c:	7019      	strb	r1, [r3, #0]
 8012c6e:	23fa      	movs	r3, #250	@ 0xfa
 8012c70:	009b      	lsls	r3, r3, #2
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d906      	bls.n	8012c84 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2221      	movs	r2, #33	@ 0x21
 8012c7a:	2104      	movs	r1, #4
 8012c7c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8012c7e:	183b      	adds	r3, r7, r0
 8012c80:	2201      	movs	r2, #1
 8012c82:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	68db      	ldr	r3, [r3, #12]
 8012c8a:	2240      	movs	r2, #64	@ 0x40
 8012c8c:	4013      	ands	r3, r2
 8012c8e:	d104      	bne.n	8012c9a <RTC_EnterInitMode+0x7a>
 8012c90:	230f      	movs	r3, #15
 8012c92:	18fb      	adds	r3, r7, r3
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d1df      	bne.n	8012c5a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8012c9a:	230f      	movs	r3, #15
 8012c9c:	18fb      	adds	r3, r7, r3
 8012c9e:	781b      	ldrb	r3, [r3, #0]
}
 8012ca0:	0018      	movs	r0, r3
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	b004      	add	sp, #16
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012ca8:	b590      	push	{r4, r7, lr}
 8012caa:	b085      	sub	sp, #20
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012cb0:	240f      	movs	r4, #15
 8012cb2:	193b      	adds	r3, r7, r4
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	68da      	ldr	r2, [r3, #12]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2180      	movs	r1, #128	@ 0x80
 8012cc4:	438a      	bics	r2, r1
 8012cc6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	689b      	ldr	r3, [r3, #8]
 8012cce:	2220      	movs	r2, #32
 8012cd0:	4013      	ands	r3, r2
 8012cd2:	d10c      	bne.n	8012cee <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	0018      	movs	r0, r3
 8012cd8:	f7ff ff7a 	bl	8012bd0 <HAL_RTC_WaitForSynchro>
 8012cdc:	1e03      	subs	r3, r0, #0
 8012cde:	d006      	beq.n	8012cee <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2221      	movs	r2, #33	@ 0x21
 8012ce4:	2104      	movs	r1, #4
 8012ce6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8012ce8:	193b      	adds	r3, r7, r4
 8012cea:	2201      	movs	r2, #1
 8012cec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8012cee:	230f      	movs	r3, #15
 8012cf0:	18fb      	adds	r3, r7, r3
 8012cf2:	781b      	ldrb	r3, [r3, #0]
}
 8012cf4:	0018      	movs	r0, r3
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	b005      	add	sp, #20
 8012cfa:	bd90      	pop	{r4, r7, pc}

08012cfc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b084      	sub	sp, #16
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	0002      	movs	r2, r0
 8012d04:	1dfb      	adds	r3, r7, #7
 8012d06:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8012d0c:	e007      	b.n	8012d1e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	3301      	adds	r3, #1
 8012d12:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8012d14:	1dfb      	adds	r3, r7, #7
 8012d16:	1dfa      	adds	r2, r7, #7
 8012d18:	7812      	ldrb	r2, [r2, #0]
 8012d1a:	3a0a      	subs	r2, #10
 8012d1c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8012d1e:	1dfb      	adds	r3, r7, #7
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	2b09      	cmp	r3, #9
 8012d24:	d8f3      	bhi.n	8012d0e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	011b      	lsls	r3, r3, #4
 8012d2c:	b2da      	uxtb	r2, r3
 8012d2e:	1dfb      	adds	r3, r7, #7
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	4313      	orrs	r3, r2
 8012d34:	b2db      	uxtb	r3, r3
}
 8012d36:	0018      	movs	r0, r3
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	b004      	add	sp, #16
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b084      	sub	sp, #16
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	0002      	movs	r2, r0
 8012d46:	1dfb      	adds	r3, r7, #7
 8012d48:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8012d4e:	1dfb      	adds	r3, r7, #7
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	091b      	lsrs	r3, r3, #4
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	001a      	movs	r2, r3
 8012d58:	0013      	movs	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	189b      	adds	r3, r3, r2
 8012d5e:	005b      	lsls	r3, r3, #1
 8012d60:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	b2da      	uxtb	r2, r3
 8012d66:	1dfb      	adds	r3, r7, #7
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	210f      	movs	r1, #15
 8012d6c:	400b      	ands	r3, r1
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	18d3      	adds	r3, r2, r3
 8012d72:	b2db      	uxtb	r3, r3
}
 8012d74:	0018      	movs	r0, r3
 8012d76:	46bd      	mov	sp, r7
 8012d78:	b004      	add	sp, #16
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b086      	sub	sp, #24
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2220      	movs	r2, #32
 8012d90:	5c9b      	ldrb	r3, [r3, r2]
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	d101      	bne.n	8012d9a <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8012d96:	2302      	movs	r3, #2
 8012d98:	e096      	b.n	8012ec8 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2220      	movs	r2, #32
 8012d9e:	2101      	movs	r1, #1
 8012da0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2221      	movs	r2, #33	@ 0x21
 8012da6:	2102      	movs	r1, #2
 8012da8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	22ca      	movs	r2, #202	@ 0xca
 8012db0:	625a      	str	r2, [r3, #36]	@ 0x24
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	2253      	movs	r2, #83	@ 0x53
 8012db8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	689a      	ldr	r2, [r3, #8]
 8012dc0:	2380      	movs	r3, #128	@ 0x80
 8012dc2:	00db      	lsls	r3, r3, #3
 8012dc4:	4013      	ands	r3, r2
 8012dc6:	d021      	beq.n	8012e0c <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8012dc8:	f7f9 f928 	bl	800c01c <HAL_GetTick>
 8012dcc:	0003      	movs	r3, r0
 8012dce:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012dd0:	e016      	b.n	8012e00 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012dd2:	f7f9 f923 	bl	800c01c <HAL_GetTick>
 8012dd6:	0002      	movs	r2, r0
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	1ad2      	subs	r2, r2, r3
 8012ddc:	23fa      	movs	r3, #250	@ 0xfa
 8012dde:	009b      	lsls	r3, r3, #2
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d90d      	bls.n	8012e00 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	22ff      	movs	r2, #255	@ 0xff
 8012dea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2221      	movs	r2, #33	@ 0x21
 8012df0:	2103      	movs	r1, #3
 8012df2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2220      	movs	r2, #32
 8012df8:	2100      	movs	r1, #0
 8012dfa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	e063      	b.n	8012ec8 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	2204      	movs	r2, #4
 8012e08:	4013      	ands	r3, r2
 8012e0a:	d1e2      	bne.n	8012dd2 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	689a      	ldr	r2, [r3, #8]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	492e      	ldr	r1, [pc, #184]	@ (8012ed0 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8012e18:	400a      	ands	r2, r1
 8012e1a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	22ff      	movs	r2, #255	@ 0xff
 8012e24:	401a      	ands	r2, r3
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	492a      	ldr	r1, [pc, #168]	@ (8012ed4 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8012e2c:	430a      	orrs	r2, r1
 8012e2e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012e30:	f7f9 f8f4 	bl	800c01c <HAL_GetTick>
 8012e34:	0003      	movs	r3, r0
 8012e36:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012e38:	e016      	b.n	8012e68 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012e3a:	f7f9 f8ef 	bl	800c01c <HAL_GetTick>
 8012e3e:	0002      	movs	r2, r0
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	1ad2      	subs	r2, r2, r3
 8012e44:	23fa      	movs	r3, #250	@ 0xfa
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d90d      	bls.n	8012e68 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	22ff      	movs	r2, #255	@ 0xff
 8012e52:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2221      	movs	r2, #33	@ 0x21
 8012e58:	2103      	movs	r1, #3
 8012e5a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2220      	movs	r2, #32
 8012e60:	2100      	movs	r1, #0
 8012e62:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8012e64:	2303      	movs	r3, #3
 8012e66:	e02f      	b.n	8012ec8 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	2204      	movs	r2, #4
 8012e70:	4013      	ands	r3, r2
 8012e72:	d0e2      	beq.n	8012e3a <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	689a      	ldr	r2, [r3, #8]
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	2107      	movs	r1, #7
 8012e80:	438a      	bics	r2, r1
 8012e82:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	6899      	ldr	r1, [r3, #8]
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	430a      	orrs	r2, r1
 8012e92:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	68ba      	ldr	r2, [r7, #8]
 8012e9a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	689a      	ldr	r2, [r3, #8]
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2180      	movs	r1, #128	@ 0x80
 8012ea8:	00c9      	lsls	r1, r1, #3
 8012eaa:	430a      	orrs	r2, r1
 8012eac:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	22ff      	movs	r2, #255	@ 0xff
 8012eb4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2221      	movs	r2, #33	@ 0x21
 8012eba:	2101      	movs	r1, #1
 8012ebc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2220      	movs	r2, #32
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012ec6:	2300      	movs	r3, #0
}
 8012ec8:	0018      	movs	r0, r3
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	b006      	add	sp, #24
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	fffffbff 	.word	0xfffffbff
 8012ed4:	fffffb7f 	.word	0xfffffb7f

08012ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d101      	bne.n	8012eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e032      	b.n	8012f50 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2239      	movs	r2, #57	@ 0x39
 8012eee:	5c9b      	ldrb	r3, [r3, r2]
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d107      	bne.n	8012f06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2238      	movs	r2, #56	@ 0x38
 8012efa:	2100      	movs	r1, #0
 8012efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	0018      	movs	r0, r3
 8012f02:	f7f8 fa47 	bl	800b394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2239      	movs	r2, #57	@ 0x39
 8012f0a:	2102      	movs	r1, #2
 8012f0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	3304      	adds	r3, #4
 8012f16:	0019      	movs	r1, r3
 8012f18:	0010      	movs	r0, r2
 8012f1a:	f000 fa1d 	bl	8013358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	223e      	movs	r2, #62	@ 0x3e
 8012f22:	2101      	movs	r1, #1
 8012f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	223a      	movs	r2, #58	@ 0x3a
 8012f2a:	2101      	movs	r1, #1
 8012f2c:	5499      	strb	r1, [r3, r2]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	223b      	movs	r2, #59	@ 0x3b
 8012f32:	2101      	movs	r1, #1
 8012f34:	5499      	strb	r1, [r3, r2]
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	223c      	movs	r2, #60	@ 0x3c
 8012f3a:	2101      	movs	r1, #1
 8012f3c:	5499      	strb	r1, [r3, r2]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	223d      	movs	r2, #61	@ 0x3d
 8012f42:	2101      	movs	r1, #1
 8012f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2239      	movs	r2, #57	@ 0x39
 8012f4a:	2101      	movs	r1, #1
 8012f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012f4e:	2300      	movs	r3, #0
}
 8012f50:	0018      	movs	r0, r3
 8012f52:	46bd      	mov	sp, r7
 8012f54:	b002      	add	sp, #8
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2239      	movs	r2, #57	@ 0x39
 8012f64:	5c9b      	ldrb	r3, [r3, r2]
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	2b01      	cmp	r3, #1
 8012f6a:	d001      	beq.n	8012f70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	e033      	b.n	8012fd8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2239      	movs	r2, #57	@ 0x39
 8012f74:	2102      	movs	r1, #2
 8012f76:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681a      	ldr	r2, [r3, #0]
 8012f7c:	2380      	movs	r3, #128	@ 0x80
 8012f7e:	05db      	lsls	r3, r3, #23
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d00e      	beq.n	8012fa2 <HAL_TIM_Base_Start+0x4a>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4a15      	ldr	r2, [pc, #84]	@ (8012fe0 <HAL_TIM_Base_Start+0x88>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d009      	beq.n	8012fa2 <HAL_TIM_Base_Start+0x4a>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4a14      	ldr	r2, [pc, #80]	@ (8012fe4 <HAL_TIM_Base_Start+0x8c>)
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d004      	beq.n	8012fa2 <HAL_TIM_Base_Start+0x4a>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	4a12      	ldr	r2, [pc, #72]	@ (8012fe8 <HAL_TIM_Base_Start+0x90>)
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	d111      	bne.n	8012fc6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	689b      	ldr	r3, [r3, #8]
 8012fa8:	2207      	movs	r2, #7
 8012faa:	4013      	ands	r3, r2
 8012fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2b06      	cmp	r3, #6
 8012fb2:	d010      	beq.n	8012fd6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2101      	movs	r1, #1
 8012fc0:	430a      	orrs	r2, r1
 8012fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fc4:	e007      	b.n	8012fd6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2101      	movs	r1, #1
 8012fd2:	430a      	orrs	r2, r1
 8012fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012fd6:	2300      	movs	r3, #0
}
 8012fd8:	0018      	movs	r0, r3
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	b004      	add	sp, #16
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	40000400 	.word	0x40000400
 8012fe4:	40010800 	.word	0x40010800
 8012fe8:	40011400 	.word	0x40011400

08012fec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	6a1b      	ldr	r3, [r3, #32]
 8012ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8013024 <HAL_TIM_Base_Stop+0x38>)
 8012ffc:	4013      	ands	r3, r2
 8012ffe:	d107      	bne.n	8013010 <HAL_TIM_Base_Stop+0x24>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	681a      	ldr	r2, [r3, #0]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	2101      	movs	r1, #1
 801300c:	438a      	bics	r2, r1
 801300e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2239      	movs	r2, #57	@ 0x39
 8013014:	2101      	movs	r1, #1
 8013016:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8013018:	2300      	movs	r3, #0
}
 801301a:	0018      	movs	r0, r3
 801301c:	46bd      	mov	sp, r7
 801301e:	b002      	add	sp, #8
 8013020:	bd80      	pop	{r7, pc}
 8013022:	46c0      	nop			@ (mov r8, r8)
 8013024:	00001111 	.word	0x00001111

08013028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d101      	bne.n	801303a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013036:	2301      	movs	r3, #1
 8013038:	e032      	b.n	80130a0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	2239      	movs	r2, #57	@ 0x39
 801303e:	5c9b      	ldrb	r3, [r3, r2]
 8013040:	b2db      	uxtb	r3, r3
 8013042:	2b00      	cmp	r3, #0
 8013044:	d107      	bne.n	8013056 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2238      	movs	r2, #56	@ 0x38
 801304a:	2100      	movs	r1, #0
 801304c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	0018      	movs	r0, r3
 8013052:	f7f8 f97b 	bl	800b34c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2239      	movs	r2, #57	@ 0x39
 801305a:	2102      	movs	r1, #2
 801305c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	3304      	adds	r3, #4
 8013066:	0019      	movs	r1, r3
 8013068:	0010      	movs	r0, r2
 801306a:	f000 f975 	bl	8013358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	223e      	movs	r2, #62	@ 0x3e
 8013072:	2101      	movs	r1, #1
 8013074:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	223a      	movs	r2, #58	@ 0x3a
 801307a:	2101      	movs	r1, #1
 801307c:	5499      	strb	r1, [r3, r2]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	223b      	movs	r2, #59	@ 0x3b
 8013082:	2101      	movs	r1, #1
 8013084:	5499      	strb	r1, [r3, r2]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	223c      	movs	r2, #60	@ 0x3c
 801308a:	2101      	movs	r1, #1
 801308c:	5499      	strb	r1, [r3, r2]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	223d      	movs	r2, #61	@ 0x3d
 8013092:	2101      	movs	r1, #1
 8013094:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2239      	movs	r2, #57	@ 0x39
 801309a:	2101      	movs	r1, #1
 801309c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801309e:	2300      	movs	r3, #0
}
 80130a0:	0018      	movs	r0, r3
 80130a2:	46bd      	mov	sp, r7
 80130a4:	b002      	add	sp, #8
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d108      	bne.n	80130ca <HAL_TIM_PWM_Start+0x22>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	223a      	movs	r2, #58	@ 0x3a
 80130bc:	5c9b      	ldrb	r3, [r3, r2]
 80130be:	b2db      	uxtb	r3, r3
 80130c0:	3b01      	subs	r3, #1
 80130c2:	1e5a      	subs	r2, r3, #1
 80130c4:	4193      	sbcs	r3, r2
 80130c6:	b2db      	uxtb	r3, r3
 80130c8:	e01f      	b.n	801310a <HAL_TIM_PWM_Start+0x62>
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	2b04      	cmp	r3, #4
 80130ce:	d108      	bne.n	80130e2 <HAL_TIM_PWM_Start+0x3a>
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	223b      	movs	r2, #59	@ 0x3b
 80130d4:	5c9b      	ldrb	r3, [r3, r2]
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	3b01      	subs	r3, #1
 80130da:	1e5a      	subs	r2, r3, #1
 80130dc:	4193      	sbcs	r3, r2
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	e013      	b.n	801310a <HAL_TIM_PWM_Start+0x62>
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	2b08      	cmp	r3, #8
 80130e6:	d108      	bne.n	80130fa <HAL_TIM_PWM_Start+0x52>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	223c      	movs	r2, #60	@ 0x3c
 80130ec:	5c9b      	ldrb	r3, [r3, r2]
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	3b01      	subs	r3, #1
 80130f2:	1e5a      	subs	r2, r3, #1
 80130f4:	4193      	sbcs	r3, r2
 80130f6:	b2db      	uxtb	r3, r3
 80130f8:	e007      	b.n	801310a <HAL_TIM_PWM_Start+0x62>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	223d      	movs	r2, #61	@ 0x3d
 80130fe:	5c9b      	ldrb	r3, [r3, r2]
 8013100:	b2db      	uxtb	r3, r3
 8013102:	3b01      	subs	r3, #1
 8013104:	1e5a      	subs	r2, r3, #1
 8013106:	4193      	sbcs	r3, r2
 8013108:	b2db      	uxtb	r3, r3
 801310a:	2b00      	cmp	r3, #0
 801310c:	d001      	beq.n	8013112 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801310e:	2301      	movs	r3, #1
 8013110:	e052      	b.n	80131b8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d104      	bne.n	8013122 <HAL_TIM_PWM_Start+0x7a>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	223a      	movs	r2, #58	@ 0x3a
 801311c:	2102      	movs	r1, #2
 801311e:	5499      	strb	r1, [r3, r2]
 8013120:	e013      	b.n	801314a <HAL_TIM_PWM_Start+0xa2>
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	2b04      	cmp	r3, #4
 8013126:	d104      	bne.n	8013132 <HAL_TIM_PWM_Start+0x8a>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	223b      	movs	r2, #59	@ 0x3b
 801312c:	2102      	movs	r1, #2
 801312e:	5499      	strb	r1, [r3, r2]
 8013130:	e00b      	b.n	801314a <HAL_TIM_PWM_Start+0xa2>
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	2b08      	cmp	r3, #8
 8013136:	d104      	bne.n	8013142 <HAL_TIM_PWM_Start+0x9a>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	223c      	movs	r2, #60	@ 0x3c
 801313c:	2102      	movs	r1, #2
 801313e:	5499      	strb	r1, [r3, r2]
 8013140:	e003      	b.n	801314a <HAL_TIM_PWM_Start+0xa2>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	223d      	movs	r2, #61	@ 0x3d
 8013146:	2102      	movs	r1, #2
 8013148:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	6839      	ldr	r1, [r7, #0]
 8013150:	2201      	movs	r2, #1
 8013152:	0018      	movs	r0, r3
 8013154:	f000 fa62 	bl	801361c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	2380      	movs	r3, #128	@ 0x80
 801315e:	05db      	lsls	r3, r3, #23
 8013160:	429a      	cmp	r2, r3
 8013162:	d00e      	beq.n	8013182 <HAL_TIM_PWM_Start+0xda>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a15      	ldr	r2, [pc, #84]	@ (80131c0 <HAL_TIM_PWM_Start+0x118>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d009      	beq.n	8013182 <HAL_TIM_PWM_Start+0xda>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	4a14      	ldr	r2, [pc, #80]	@ (80131c4 <HAL_TIM_PWM_Start+0x11c>)
 8013174:	4293      	cmp	r3, r2
 8013176:	d004      	beq.n	8013182 <HAL_TIM_PWM_Start+0xda>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a12      	ldr	r2, [pc, #72]	@ (80131c8 <HAL_TIM_PWM_Start+0x120>)
 801317e:	4293      	cmp	r3, r2
 8013180:	d111      	bne.n	80131a6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	2207      	movs	r2, #7
 801318a:	4013      	ands	r3, r2
 801318c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2b06      	cmp	r3, #6
 8013192:	d010      	beq.n	80131b6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2101      	movs	r1, #1
 80131a0:	430a      	orrs	r2, r1
 80131a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80131a4:	e007      	b.n	80131b6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	2101      	movs	r1, #1
 80131b2:	430a      	orrs	r2, r1
 80131b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	0018      	movs	r0, r3
 80131ba:	46bd      	mov	sp, r7
 80131bc:	b004      	add	sp, #16
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	40000400 	.word	0x40000400
 80131c4:	40010800 	.word	0x40010800
 80131c8:	40011400 	.word	0x40011400

080131cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b086      	sub	sp, #24
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80131d8:	2317      	movs	r3, #23
 80131da:	18fb      	adds	r3, r7, r3
 80131dc:	2200      	movs	r2, #0
 80131de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2238      	movs	r2, #56	@ 0x38
 80131e4:	5c9b      	ldrb	r3, [r3, r2]
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d101      	bne.n	80131ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80131ea:	2302      	movs	r3, #2
 80131ec:	e0ad      	b.n	801334a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2238      	movs	r2, #56	@ 0x38
 80131f2:	2101      	movs	r1, #1
 80131f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2b0c      	cmp	r3, #12
 80131fa:	d100      	bne.n	80131fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80131fc:	e076      	b.n	80132ec <HAL_TIM_PWM_ConfigChannel+0x120>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2b0c      	cmp	r3, #12
 8013202:	d900      	bls.n	8013206 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8013204:	e095      	b.n	8013332 <HAL_TIM_PWM_ConfigChannel+0x166>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b08      	cmp	r3, #8
 801320a:	d04e      	beq.n	80132aa <HAL_TIM_PWM_ConfigChannel+0xde>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2b08      	cmp	r3, #8
 8013210:	d900      	bls.n	8013214 <HAL_TIM_PWM_ConfigChannel+0x48>
 8013212:	e08e      	b.n	8013332 <HAL_TIM_PWM_ConfigChannel+0x166>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d003      	beq.n	8013222 <HAL_TIM_PWM_ConfigChannel+0x56>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2b04      	cmp	r3, #4
 801321e:	d021      	beq.n	8013264 <HAL_TIM_PWM_ConfigChannel+0x98>
 8013220:	e087      	b.n	8013332 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	68ba      	ldr	r2, [r7, #8]
 8013228:	0011      	movs	r1, r2
 801322a:	0018      	movs	r0, r3
 801322c:	f000 f8f2 	bl	8013414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	699a      	ldr	r2, [r3, #24]
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	2108      	movs	r1, #8
 801323c:	430a      	orrs	r2, r1
 801323e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	699a      	ldr	r2, [r3, #24]
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2104      	movs	r1, #4
 801324c:	438a      	bics	r2, r1
 801324e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	6999      	ldr	r1, [r3, #24]
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	68da      	ldr	r2, [r3, #12]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	430a      	orrs	r2, r1
 8013260:	619a      	str	r2, [r3, #24]
      break;
 8013262:	e06b      	b.n	801333c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	68ba      	ldr	r2, [r7, #8]
 801326a:	0011      	movs	r1, r2
 801326c:	0018      	movs	r0, r3
 801326e:	f000 f90d 	bl	801348c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	699a      	ldr	r2, [r3, #24]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2180      	movs	r1, #128	@ 0x80
 801327e:	0109      	lsls	r1, r1, #4
 8013280:	430a      	orrs	r2, r1
 8013282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	699a      	ldr	r2, [r3, #24]
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4931      	ldr	r1, [pc, #196]	@ (8013354 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8013290:	400a      	ands	r2, r1
 8013292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	6999      	ldr	r1, [r3, #24]
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	021a      	lsls	r2, r3, #8
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	430a      	orrs	r2, r1
 80132a6:	619a      	str	r2, [r3, #24]
      break;
 80132a8:	e048      	b.n	801333c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	0011      	movs	r1, r2
 80132b2:	0018      	movs	r0, r3
 80132b4:	f000 f92c 	bl	8013510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	69da      	ldr	r2, [r3, #28]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2108      	movs	r1, #8
 80132c4:	430a      	orrs	r2, r1
 80132c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	69da      	ldr	r2, [r3, #28]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2104      	movs	r1, #4
 80132d4:	438a      	bics	r2, r1
 80132d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	69d9      	ldr	r1, [r3, #28]
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	68da      	ldr	r2, [r3, #12]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	430a      	orrs	r2, r1
 80132e8:	61da      	str	r2, [r3, #28]
      break;
 80132ea:	e027      	b.n	801333c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	68ba      	ldr	r2, [r7, #8]
 80132f2:	0011      	movs	r1, r2
 80132f4:	0018      	movs	r0, r3
 80132f6:	f000 f94b 	bl	8013590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	69da      	ldr	r2, [r3, #28]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	2180      	movs	r1, #128	@ 0x80
 8013306:	0109      	lsls	r1, r1, #4
 8013308:	430a      	orrs	r2, r1
 801330a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	69da      	ldr	r2, [r3, #28]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	490f      	ldr	r1, [pc, #60]	@ (8013354 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8013318:	400a      	ands	r2, r1
 801331a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	69d9      	ldr	r1, [r3, #28]
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	021a      	lsls	r2, r3, #8
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	430a      	orrs	r2, r1
 801332e:	61da      	str	r2, [r3, #28]
      break;
 8013330:	e004      	b.n	801333c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8013332:	2317      	movs	r3, #23
 8013334:	18fb      	adds	r3, r7, r3
 8013336:	2201      	movs	r2, #1
 8013338:	701a      	strb	r2, [r3, #0]
      break;
 801333a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2238      	movs	r2, #56	@ 0x38
 8013340:	2100      	movs	r1, #0
 8013342:	5499      	strb	r1, [r3, r2]

  return status;
 8013344:	2317      	movs	r3, #23
 8013346:	18fb      	adds	r3, r7, r3
 8013348:	781b      	ldrb	r3, [r3, #0]
}
 801334a:	0018      	movs	r0, r3
 801334c:	46bd      	mov	sp, r7
 801334e:	b006      	add	sp, #24
 8013350:	bd80      	pop	{r7, pc}
 8013352:	46c0      	nop			@ (mov r8, r8)
 8013354:	fffffbff 	.word	0xfffffbff

08013358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	2380      	movs	r3, #128	@ 0x80
 801336c:	05db      	lsls	r3, r3, #23
 801336e:	429a      	cmp	r2, r3
 8013370:	d00b      	beq.n	801338a <TIM_Base_SetConfig+0x32>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	4a23      	ldr	r2, [pc, #140]	@ (8013404 <TIM_Base_SetConfig+0xac>)
 8013376:	4293      	cmp	r3, r2
 8013378:	d007      	beq.n	801338a <TIM_Base_SetConfig+0x32>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	4a22      	ldr	r2, [pc, #136]	@ (8013408 <TIM_Base_SetConfig+0xb0>)
 801337e:	4293      	cmp	r3, r2
 8013380:	d003      	beq.n	801338a <TIM_Base_SetConfig+0x32>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	4a21      	ldr	r2, [pc, #132]	@ (801340c <TIM_Base_SetConfig+0xb4>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d108      	bne.n	801339c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2270      	movs	r2, #112	@ 0x70
 801338e:	4393      	bics	r3, r2
 8013390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	68fa      	ldr	r2, [r7, #12]
 8013398:	4313      	orrs	r3, r2
 801339a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	2380      	movs	r3, #128	@ 0x80
 80133a0:	05db      	lsls	r3, r3, #23
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d00b      	beq.n	80133be <TIM_Base_SetConfig+0x66>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	4a16      	ldr	r2, [pc, #88]	@ (8013404 <TIM_Base_SetConfig+0xac>)
 80133aa:	4293      	cmp	r3, r2
 80133ac:	d007      	beq.n	80133be <TIM_Base_SetConfig+0x66>
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	4a15      	ldr	r2, [pc, #84]	@ (8013408 <TIM_Base_SetConfig+0xb0>)
 80133b2:	4293      	cmp	r3, r2
 80133b4:	d003      	beq.n	80133be <TIM_Base_SetConfig+0x66>
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	4a14      	ldr	r2, [pc, #80]	@ (801340c <TIM_Base_SetConfig+0xb4>)
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d108      	bne.n	80133d0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	4a13      	ldr	r2, [pc, #76]	@ (8013410 <TIM_Base_SetConfig+0xb8>)
 80133c2:	4013      	ands	r3, r2
 80133c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	68fa      	ldr	r2, [r7, #12]
 80133cc:	4313      	orrs	r3, r2
 80133ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2280      	movs	r2, #128	@ 0x80
 80133d4:	4393      	bics	r3, r2
 80133d6:	001a      	movs	r2, r3
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	4313      	orrs	r3, r2
 80133de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	68fa      	ldr	r2, [r7, #12]
 80133e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	689a      	ldr	r2, [r3, #8]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	681a      	ldr	r2, [r3, #0]
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2201      	movs	r2, #1
 80133fa:	615a      	str	r2, [r3, #20]
}
 80133fc:	46c0      	nop			@ (mov r8, r8)
 80133fe:	46bd      	mov	sp, r7
 8013400:	b004      	add	sp, #16
 8013402:	bd80      	pop	{r7, pc}
 8013404:	40000400 	.word	0x40000400
 8013408:	40010800 	.word	0x40010800
 801340c:	40011400 	.word	0x40011400
 8013410:	fffffcff 	.word	0xfffffcff

08013414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b086      	sub	sp, #24
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6a1b      	ldr	r3, [r3, #32]
 8013422:	2201      	movs	r2, #1
 8013424:	4393      	bics	r3, r2
 8013426:	001a      	movs	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6a1b      	ldr	r3, [r3, #32]
 8013430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	699b      	ldr	r3, [r3, #24]
 801343c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2270      	movs	r2, #112	@ 0x70
 8013442:	4393      	bics	r3, r2
 8013444:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2203      	movs	r2, #3
 801344a:	4393      	bics	r3, r2
 801344c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	68fa      	ldr	r2, [r7, #12]
 8013454:	4313      	orrs	r3, r2
 8013456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	2202      	movs	r2, #2
 801345c:	4393      	bics	r3, r2
 801345e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	689b      	ldr	r3, [r3, #8]
 8013464:	697a      	ldr	r2, [r7, #20]
 8013466:	4313      	orrs	r3, r2
 8013468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	693a      	ldr	r2, [r7, #16]
 801346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	68fa      	ldr	r2, [r7, #12]
 8013474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	685a      	ldr	r2, [r3, #4]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	697a      	ldr	r2, [r7, #20]
 8013482:	621a      	str	r2, [r3, #32]
}
 8013484:	46c0      	nop			@ (mov r8, r8)
 8013486:	46bd      	mov	sp, r7
 8013488:	b006      	add	sp, #24
 801348a:	bd80      	pop	{r7, pc}

0801348c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b086      	sub	sp, #24
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6a1b      	ldr	r3, [r3, #32]
 801349a:	2210      	movs	r2, #16
 801349c:	4393      	bics	r3, r2
 801349e:	001a      	movs	r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6a1b      	ldr	r3, [r3, #32]
 80134a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	699b      	ldr	r3, [r3, #24]
 80134b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	4a13      	ldr	r2, [pc, #76]	@ (8013508 <TIM_OC2_SetConfig+0x7c>)
 80134ba:	4013      	ands	r3, r2
 80134bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	4a12      	ldr	r2, [pc, #72]	@ (801350c <TIM_OC2_SetConfig+0x80>)
 80134c2:	4013      	ands	r3, r2
 80134c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	021b      	lsls	r3, r3, #8
 80134cc:	68fa      	ldr	r2, [r7, #12]
 80134ce:	4313      	orrs	r3, r2
 80134d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	2220      	movs	r2, #32
 80134d6:	4393      	bics	r3, r2
 80134d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	689b      	ldr	r3, [r3, #8]
 80134de:	011b      	lsls	r3, r3, #4
 80134e0:	697a      	ldr	r2, [r7, #20]
 80134e2:	4313      	orrs	r3, r2
 80134e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	693a      	ldr	r2, [r7, #16]
 80134ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	68fa      	ldr	r2, [r7, #12]
 80134f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	685a      	ldr	r2, [r3, #4]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	697a      	ldr	r2, [r7, #20]
 80134fe:	621a      	str	r2, [r3, #32]
}
 8013500:	46c0      	nop			@ (mov r8, r8)
 8013502:	46bd      	mov	sp, r7
 8013504:	b006      	add	sp, #24
 8013506:	bd80      	pop	{r7, pc}
 8013508:	ffff8fff 	.word	0xffff8fff
 801350c:	fffffcff 	.word	0xfffffcff

08013510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b086      	sub	sp, #24
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6a1b      	ldr	r3, [r3, #32]
 801351e:	4a1a      	ldr	r2, [pc, #104]	@ (8013588 <TIM_OC3_SetConfig+0x78>)
 8013520:	401a      	ands	r2, r3
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6a1b      	ldr	r3, [r3, #32]
 801352a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	69db      	ldr	r3, [r3, #28]
 8013536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2270      	movs	r2, #112	@ 0x70
 801353c:	4393      	bics	r3, r2
 801353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2203      	movs	r2, #3
 8013544:	4393      	bics	r3, r2
 8013546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	4313      	orrs	r3, r2
 8013550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	4a0d      	ldr	r2, [pc, #52]	@ (801358c <TIM_OC3_SetConfig+0x7c>)
 8013556:	4013      	ands	r3, r2
 8013558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	021b      	lsls	r3, r3, #8
 8013560:	697a      	ldr	r2, [r7, #20]
 8013562:	4313      	orrs	r3, r2
 8013564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	693a      	ldr	r2, [r7, #16]
 801356a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	685a      	ldr	r2, [r3, #4]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	697a      	ldr	r2, [r7, #20]
 801357e:	621a      	str	r2, [r3, #32]
}
 8013580:	46c0      	nop			@ (mov r8, r8)
 8013582:	46bd      	mov	sp, r7
 8013584:	b006      	add	sp, #24
 8013586:	bd80      	pop	{r7, pc}
 8013588:	fffffeff 	.word	0xfffffeff
 801358c:	fffffdff 	.word	0xfffffdff

08013590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6a1b      	ldr	r3, [r3, #32]
 801359e:	4a1b      	ldr	r2, [pc, #108]	@ (801360c <TIM_OC4_SetConfig+0x7c>)
 80135a0:	401a      	ands	r2, r3
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6a1b      	ldr	r3, [r3, #32]
 80135aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	69db      	ldr	r3, [r3, #28]
 80135b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	4a15      	ldr	r2, [pc, #84]	@ (8013610 <TIM_OC4_SetConfig+0x80>)
 80135bc:	4013      	ands	r3, r2
 80135be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	4a14      	ldr	r2, [pc, #80]	@ (8013614 <TIM_OC4_SetConfig+0x84>)
 80135c4:	4013      	ands	r3, r2
 80135c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	021b      	lsls	r3, r3, #8
 80135ce:	68fa      	ldr	r2, [r7, #12]
 80135d0:	4313      	orrs	r3, r2
 80135d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	4a10      	ldr	r2, [pc, #64]	@ (8013618 <TIM_OC4_SetConfig+0x88>)
 80135d8:	4013      	ands	r3, r2
 80135da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	689b      	ldr	r3, [r3, #8]
 80135e0:	031b      	lsls	r3, r3, #12
 80135e2:	697a      	ldr	r2, [r7, #20]
 80135e4:	4313      	orrs	r3, r2
 80135e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	693a      	ldr	r2, [r7, #16]
 80135ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	68fa      	ldr	r2, [r7, #12]
 80135f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	685a      	ldr	r2, [r3, #4]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	697a      	ldr	r2, [r7, #20]
 8013600:	621a      	str	r2, [r3, #32]
}
 8013602:	46c0      	nop			@ (mov r8, r8)
 8013604:	46bd      	mov	sp, r7
 8013606:	b006      	add	sp, #24
 8013608:	bd80      	pop	{r7, pc}
 801360a:	46c0      	nop			@ (mov r8, r8)
 801360c:	ffffefff 	.word	0xffffefff
 8013610:	ffff8fff 	.word	0xffff8fff
 8013614:	fffffcff 	.word	0xfffffcff
 8013618:	ffffdfff 	.word	0xffffdfff

0801361c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b086      	sub	sp, #24
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	221f      	movs	r2, #31
 801362c:	4013      	ands	r3, r2
 801362e:	2201      	movs	r2, #1
 8013630:	409a      	lsls	r2, r3
 8013632:	0013      	movs	r3, r2
 8013634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	6a1b      	ldr	r3, [r3, #32]
 801363a:	697a      	ldr	r2, [r7, #20]
 801363c:	43d2      	mvns	r2, r2
 801363e:	401a      	ands	r2, r3
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	6a1a      	ldr	r2, [r3, #32]
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	211f      	movs	r1, #31
 801364c:	400b      	ands	r3, r1
 801364e:	6879      	ldr	r1, [r7, #4]
 8013650:	4099      	lsls	r1, r3
 8013652:	000b      	movs	r3, r1
 8013654:	431a      	orrs	r2, r3
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	621a      	str	r2, [r3, #32]
}
 801365a:	46c0      	nop			@ (mov r8, r8)
 801365c:	46bd      	mov	sp, r7
 801365e:	b006      	add	sp, #24
 8013660:	bd80      	pop	{r7, pc}
	...

08013664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2238      	movs	r2, #56	@ 0x38
 8013672:	5c9b      	ldrb	r3, [r3, r2]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d101      	bne.n	801367c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013678:	2302      	movs	r3, #2
 801367a:	e047      	b.n	801370c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2238      	movs	r2, #56	@ 0x38
 8013680:	2101      	movs	r1, #1
 8013682:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2239      	movs	r2, #57	@ 0x39
 8013688:	2102      	movs	r1, #2
 801368a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	2270      	movs	r2, #112	@ 0x70
 80136a0:	4393      	bics	r3, r2
 80136a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	68fa      	ldr	r2, [r7, #12]
 80136aa:	4313      	orrs	r3, r2
 80136ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	68fa      	ldr	r2, [r7, #12]
 80136b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	2380      	movs	r3, #128	@ 0x80
 80136bc:	05db      	lsls	r3, r3, #23
 80136be:	429a      	cmp	r2, r3
 80136c0:	d00e      	beq.n	80136e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	4a13      	ldr	r2, [pc, #76]	@ (8013714 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d009      	beq.n	80136e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4a11      	ldr	r2, [pc, #68]	@ (8013718 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d004      	beq.n	80136e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	4a10      	ldr	r2, [pc, #64]	@ (801371c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d10c      	bne.n	80136fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	2280      	movs	r2, #128	@ 0x80
 80136e4:	4393      	bics	r3, r2
 80136e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	68ba      	ldr	r2, [r7, #8]
 80136ee:	4313      	orrs	r3, r2
 80136f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	68ba      	ldr	r2, [r7, #8]
 80136f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2239      	movs	r2, #57	@ 0x39
 80136fe:	2101      	movs	r1, #1
 8013700:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2238      	movs	r2, #56	@ 0x38
 8013706:	2100      	movs	r1, #0
 8013708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801370a:	2300      	movs	r3, #0
}
 801370c:	0018      	movs	r0, r3
 801370e:	46bd      	mov	sp, r7
 8013710:	b004      	add	sp, #16
 8013712:	bd80      	pop	{r7, pc}
 8013714:	40000400 	.word	0x40000400
 8013718:	40010800 	.word	0x40010800
 801371c:	40011400 	.word	0x40011400

08013720 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b082      	sub	sp, #8
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2238      	movs	r2, #56	@ 0x38
 801372e:	5c9b      	ldrb	r3, [r3, r2]
 8013730:	2b01      	cmp	r3, #1
 8013732:	d101      	bne.n	8013738 <HAL_TIMEx_RemapConfig+0x18>
 8013734:	2302      	movs	r3, #2
 8013736:	e00c      	b.n	8013752 <HAL_TIMEx_RemapConfig+0x32>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2238      	movs	r2, #56	@ 0x38
 801373c:	2101      	movs	r1, #1
 801373e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	683a      	ldr	r2, [r7, #0]
 8013746:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2238      	movs	r2, #56	@ 0x38
 801374c:	2100      	movs	r1, #0
 801374e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013750:	2300      	movs	r3, #0
}
 8013752:	0018      	movs	r0, r3
 8013754:	46bd      	mov	sp, r7
 8013756:	b002      	add	sp, #8
 8013758:	bd80      	pop	{r7, pc}
	...

0801375c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d101      	bne.n	801376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801376a:	2301      	movs	r3, #1
 801376c:	e053      	b.n	8013816 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013772:	2b00      	cmp	r3, #0
 8013774:	d116      	bne.n	80137a4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2278      	movs	r2, #120	@ 0x78
 801377a:	2100      	movs	r1, #0
 801377c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	0018      	movs	r0, r3
 8013782:	f000 fd65 	bl	8014250 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	22b0      	movs	r2, #176	@ 0xb0
 801378a:	589b      	ldr	r3, [r3, r2]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d103      	bne.n	8013798 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	21b0      	movs	r1, #176	@ 0xb0
 8013794:	4a22      	ldr	r2, [pc, #136]	@ (8013820 <HAL_UART_Init+0xc4>)
 8013796:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	22b0      	movs	r2, #176	@ 0xb0
 801379c:	589b      	ldr	r3, [r3, r2]
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	0010      	movs	r0, r2
 80137a2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2224      	movs	r2, #36	@ 0x24
 80137a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2101      	movs	r1, #1
 80137b6:	438a      	bics	r2, r1
 80137b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	0018      	movs	r0, r3
 80137be:	f000 fd8b 	bl	80142d8 <UART_SetConfig>
 80137c2:	0003      	movs	r3, r0
 80137c4:	2b01      	cmp	r3, #1
 80137c6:	d101      	bne.n	80137cc <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80137c8:	2301      	movs	r3, #1
 80137ca:	e024      	b.n	8013816 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d003      	beq.n	80137dc <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	0018      	movs	r0, r3
 80137d8:	f001 f81c 	bl	8014814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	685a      	ldr	r2, [r3, #4]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	490f      	ldr	r1, [pc, #60]	@ (8013824 <HAL_UART_Init+0xc8>)
 80137e8:	400a      	ands	r2, r1
 80137ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	689a      	ldr	r2, [r3, #8]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	212a      	movs	r1, #42	@ 0x2a
 80137f8:	438a      	bics	r2, r1
 80137fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2101      	movs	r1, #1
 8013808:	430a      	orrs	r2, r1
 801380a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	0018      	movs	r0, r3
 8013810:	f001 f8b4 	bl	801497c <UART_CheckIdleState>
 8013814:	0003      	movs	r3, r0
}
 8013816:	0018      	movs	r0, r3
 8013818:	46bd      	mov	sp, r7
 801381a:	b002      	add	sp, #8
 801381c:	bd80      	pop	{r7, pc}
 801381e:	46c0      	nop			@ (mov r8, r8)
 8013820:	0800b5c9 	.word	0x0800b5c9
 8013824:	ffffb7ff 	.word	0xffffb7ff

08013828 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b08a      	sub	sp, #40	@ 0x28
 801382c:	af02      	add	r7, sp, #8
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	603b      	str	r3, [r7, #0]
 8013834:	1dbb      	adds	r3, r7, #6
 8013836:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801383c:	2b20      	cmp	r3, #32
 801383e:	d000      	beq.n	8013842 <HAL_UART_Transmit+0x1a>
 8013840:	e08c      	b.n	801395c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d003      	beq.n	8013850 <HAL_UART_Transmit+0x28>
 8013848:	1dbb      	adds	r3, r7, #6
 801384a:	881b      	ldrh	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d101      	bne.n	8013854 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013850:	2301      	movs	r3, #1
 8013852:	e084      	b.n	801395e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	689a      	ldr	r2, [r3, #8]
 8013858:	2380      	movs	r3, #128	@ 0x80
 801385a:	015b      	lsls	r3, r3, #5
 801385c:	429a      	cmp	r2, r3
 801385e:	d109      	bne.n	8013874 <HAL_UART_Transmit+0x4c>
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	691b      	ldr	r3, [r3, #16]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d105      	bne.n	8013874 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	2201      	movs	r2, #1
 801386c:	4013      	ands	r3, r2
 801386e:	d001      	beq.n	8013874 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8013870:	2301      	movs	r3, #1
 8013872:	e074      	b.n	801395e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2284      	movs	r2, #132	@ 0x84
 8013878:	2100      	movs	r1, #0
 801387a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2221      	movs	r2, #33	@ 0x21
 8013880:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013882:	f7f8 fbcb 	bl	800c01c <HAL_GetTick>
 8013886:	0003      	movs	r3, r0
 8013888:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	1dba      	adds	r2, r7, #6
 801388e:	2150      	movs	r1, #80	@ 0x50
 8013890:	8812      	ldrh	r2, [r2, #0]
 8013892:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	1dba      	adds	r2, r7, #6
 8013898:	2152      	movs	r1, #82	@ 0x52
 801389a:	8812      	ldrh	r2, [r2, #0]
 801389c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	689a      	ldr	r2, [r3, #8]
 80138a2:	2380      	movs	r3, #128	@ 0x80
 80138a4:	015b      	lsls	r3, r3, #5
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d108      	bne.n	80138bc <HAL_UART_Transmit+0x94>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	691b      	ldr	r3, [r3, #16]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d104      	bne.n	80138bc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80138b2:	2300      	movs	r3, #0
 80138b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	61bb      	str	r3, [r7, #24]
 80138ba:	e003      	b.n	80138c4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80138c0:	2300      	movs	r3, #0
 80138c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80138c4:	e02f      	b.n	8013926 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80138c6:	697a      	ldr	r2, [r7, #20]
 80138c8:	68f8      	ldr	r0, [r7, #12]
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	9300      	str	r3, [sp, #0]
 80138ce:	0013      	movs	r3, r2
 80138d0:	2200      	movs	r2, #0
 80138d2:	2180      	movs	r1, #128	@ 0x80
 80138d4:	f001 f8fa 	bl	8014acc <UART_WaitOnFlagUntilTimeout>
 80138d8:	1e03      	subs	r3, r0, #0
 80138da:	d004      	beq.n	80138e6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2220      	movs	r2, #32
 80138e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80138e2:	2303      	movs	r3, #3
 80138e4:	e03b      	b.n	801395e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10b      	bne.n	8013904 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	881b      	ldrh	r3, [r3, #0]
 80138f0:	001a      	movs	r2, r3
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	05d2      	lsls	r2, r2, #23
 80138f8:	0dd2      	lsrs	r2, r2, #23
 80138fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80138fc:	69bb      	ldr	r3, [r7, #24]
 80138fe:	3302      	adds	r3, #2
 8013900:	61bb      	str	r3, [r7, #24]
 8013902:	e007      	b.n	8013914 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	781a      	ldrb	r2, [r3, #0]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801390e:	69fb      	ldr	r3, [r7, #28]
 8013910:	3301      	adds	r3, #1
 8013912:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2252      	movs	r2, #82	@ 0x52
 8013918:	5a9b      	ldrh	r3, [r3, r2]
 801391a:	b29b      	uxth	r3, r3
 801391c:	3b01      	subs	r3, #1
 801391e:	b299      	uxth	r1, r3
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	2252      	movs	r2, #82	@ 0x52
 8013924:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2252      	movs	r2, #82	@ 0x52
 801392a:	5a9b      	ldrh	r3, [r3, r2]
 801392c:	b29b      	uxth	r3, r3
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1c9      	bne.n	80138c6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013932:	697a      	ldr	r2, [r7, #20]
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	9300      	str	r3, [sp, #0]
 801393a:	0013      	movs	r3, r2
 801393c:	2200      	movs	r2, #0
 801393e:	2140      	movs	r1, #64	@ 0x40
 8013940:	f001 f8c4 	bl	8014acc <UART_WaitOnFlagUntilTimeout>
 8013944:	1e03      	subs	r3, r0, #0
 8013946:	d004      	beq.n	8013952 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	2220      	movs	r2, #32
 801394c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801394e:	2303      	movs	r3, #3
 8013950:	e005      	b.n	801395e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2220      	movs	r2, #32
 8013956:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8013958:	2300      	movs	r3, #0
 801395a:	e000      	b.n	801395e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801395c:	2302      	movs	r3, #2
  }
}
 801395e:	0018      	movs	r0, r3
 8013960:	46bd      	mov	sp, r7
 8013962:	b008      	add	sp, #32
 8013964:	bd80      	pop	{r7, pc}
	...

08013968 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b088      	sub	sp, #32
 801396c:	af00      	add	r7, sp, #0
 801396e:	60f8      	str	r0, [r7, #12]
 8013970:	60b9      	str	r1, [r7, #8]
 8013972:	1dbb      	adds	r3, r7, #6
 8013974:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2280      	movs	r2, #128	@ 0x80
 801397a:	589b      	ldr	r3, [r3, r2]
 801397c:	2b20      	cmp	r3, #32
 801397e:	d14a      	bne.n	8013a16 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d003      	beq.n	801398e <HAL_UART_Receive_IT+0x26>
 8013986:	1dbb      	adds	r3, r7, #6
 8013988:	881b      	ldrh	r3, [r3, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d101      	bne.n	8013992 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801398e:	2301      	movs	r3, #1
 8013990:	e042      	b.n	8013a18 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	689a      	ldr	r2, [r3, #8]
 8013996:	2380      	movs	r3, #128	@ 0x80
 8013998:	015b      	lsls	r3, r3, #5
 801399a:	429a      	cmp	r2, r3
 801399c:	d109      	bne.n	80139b2 <HAL_UART_Receive_IT+0x4a>
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	691b      	ldr	r3, [r3, #16]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d105      	bne.n	80139b2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	2201      	movs	r2, #1
 80139aa:	4013      	ands	r3, r2
 80139ac:	d001      	beq.n	80139b2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80139ae:	2301      	movs	r3, #1
 80139b0:	e032      	b.n	8013a18 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2200      	movs	r2, #0
 80139b6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	4a18      	ldr	r2, [pc, #96]	@ (8013a20 <HAL_UART_Receive_IT+0xb8>)
 80139be:	4293      	cmp	r3, r2
 80139c0:	d020      	beq.n	8013a04 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	685a      	ldr	r2, [r3, #4]
 80139c8:	2380      	movs	r3, #128	@ 0x80
 80139ca:	041b      	lsls	r3, r3, #16
 80139cc:	4013      	ands	r3, r2
 80139ce:	d019      	beq.n	8013a04 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139d0:	f3ef 8310 	mrs	r3, PRIMASK
 80139d4:	613b      	str	r3, [r7, #16]
  return(result);
 80139d6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80139d8:	61fb      	str	r3, [r7, #28]
 80139da:	2301      	movs	r3, #1
 80139dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	f383 8810 	msr	PRIMASK, r3
}
 80139e4:	46c0      	nop			@ (mov r8, r8)
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2180      	movs	r1, #128	@ 0x80
 80139f2:	04c9      	lsls	r1, r1, #19
 80139f4:	430a      	orrs	r2, r1
 80139f6:	601a      	str	r2, [r3, #0]
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	f383 8810 	msr	PRIMASK, r3
}
 8013a02:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013a04:	1dbb      	adds	r3, r7, #6
 8013a06:	881a      	ldrh	r2, [r3, #0]
 8013a08:	68b9      	ldr	r1, [r7, #8]
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	0018      	movs	r0, r3
 8013a0e:	f001 f8c7 	bl	8014ba0 <UART_Start_Receive_IT>
 8013a12:	0003      	movs	r3, r0
 8013a14:	e000      	b.n	8013a18 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8013a16:	2302      	movs	r3, #2
  }
}
 8013a18:	0018      	movs	r0, r3
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	b008      	add	sp, #32
 8013a1e:	bd80      	pop	{r7, pc}
 8013a20:	40004800 	.word	0x40004800

08013a24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b088      	sub	sp, #32
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	1dbb      	adds	r3, r7, #6
 8013a30:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013a36:	2b20      	cmp	r3, #32
 8013a38:	d000      	beq.n	8013a3c <HAL_UART_Transmit_DMA+0x18>
 8013a3a:	e077      	b.n	8013b2c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d003      	beq.n	8013a4a <HAL_UART_Transmit_DMA+0x26>
 8013a42:	1dbb      	adds	r3, r7, #6
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d101      	bne.n	8013a4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e06f      	b.n	8013b2e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	689a      	ldr	r2, [r3, #8]
 8013a52:	2380      	movs	r3, #128	@ 0x80
 8013a54:	015b      	lsls	r3, r3, #5
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d109      	bne.n	8013a6e <HAL_UART_Transmit_DMA+0x4a>
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	691b      	ldr	r3, [r3, #16]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d105      	bne.n	8013a6e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	2201      	movs	r2, #1
 8013a66:	4013      	ands	r3, r2
 8013a68:	d001      	beq.n	8013a6e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	e05f      	b.n	8013b2e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	68ba      	ldr	r2, [r7, #8]
 8013a72:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	1dba      	adds	r2, r7, #6
 8013a78:	2150      	movs	r1, #80	@ 0x50
 8013a7a:	8812      	ldrh	r2, [r2, #0]
 8013a7c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	1dba      	adds	r2, r7, #6
 8013a82:	2152      	movs	r1, #82	@ 0x52
 8013a84:	8812      	ldrh	r2, [r2, #0]
 8013a86:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2284      	movs	r2, #132	@ 0x84
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2221      	movs	r2, #33	@ 0x21
 8013a94:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d027      	beq.n	8013aee <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013aa2:	4a25      	ldr	r2, [pc, #148]	@ (8013b38 <HAL_UART_Transmit_DMA+0x114>)
 8013aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013aaa:	4a24      	ldr	r2, [pc, #144]	@ (8013b3c <HAL_UART_Transmit_DMA+0x118>)
 8013aac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ab2:	4a23      	ldr	r2, [pc, #140]	@ (8013b40 <HAL_UART_Transmit_DMA+0x11c>)
 8013ab4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013aba:	2200      	movs	r2, #0
 8013abc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ac6:	0019      	movs	r1, r3
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	3328      	adds	r3, #40	@ 0x28
 8013ace:	001a      	movs	r2, r3
 8013ad0:	1dbb      	adds	r3, r7, #6
 8013ad2:	881b      	ldrh	r3, [r3, #0]
 8013ad4:	f7f8 ffc2 	bl	800ca5c <HAL_DMA_Start_IT>
 8013ad8:	1e03      	subs	r3, r0, #0
 8013ada:	d008      	beq.n	8013aee <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2284      	movs	r2, #132	@ 0x84
 8013ae0:	2110      	movs	r1, #16
 8013ae2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2220      	movs	r2, #32
 8013ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8013aea:	2301      	movs	r3, #1
 8013aec:	e01f      	b.n	8013b2e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	2240      	movs	r2, #64	@ 0x40
 8013af4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013af6:	f3ef 8310 	mrs	r3, PRIMASK
 8013afa:	613b      	str	r3, [r7, #16]
  return(result);
 8013afc:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013afe:	61fb      	str	r3, [r7, #28]
 8013b00:	2301      	movs	r3, #1
 8013b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	f383 8810 	msr	PRIMASK, r3
}
 8013b0a:	46c0      	nop			@ (mov r8, r8)
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	689a      	ldr	r2, [r3, #8]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2180      	movs	r1, #128	@ 0x80
 8013b18:	430a      	orrs	r2, r1
 8013b1a:	609a      	str	r2, [r3, #8]
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	f383 8810 	msr	PRIMASK, r3
}
 8013b26:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	e000      	b.n	8013b2e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8013b2c:	2302      	movs	r3, #2
  }
}
 8013b2e:	0018      	movs	r0, r3
 8013b30:	46bd      	mov	sp, r7
 8013b32:	b008      	add	sp, #32
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	46c0      	nop			@ (mov r8, r8)
 8013b38:	08014f85 	.word	0x08014f85
 8013b3c:	08015021 	.word	0x08015021
 8013b40:	080151c1 	.word	0x080151c1

08013b44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b088      	sub	sp, #32
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	1dbb      	adds	r3, r7, #6
 8013b50:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2280      	movs	r2, #128	@ 0x80
 8013b56:	589b      	ldr	r3, [r3, r2]
 8013b58:	2b20      	cmp	r3, #32
 8013b5a:	d14a      	bne.n	8013bf2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d003      	beq.n	8013b6a <HAL_UART_Receive_DMA+0x26>
 8013b62:	1dbb      	adds	r3, r7, #6
 8013b64:	881b      	ldrh	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d101      	bne.n	8013b6e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	e042      	b.n	8013bf4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	689a      	ldr	r2, [r3, #8]
 8013b72:	2380      	movs	r3, #128	@ 0x80
 8013b74:	015b      	lsls	r3, r3, #5
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d109      	bne.n	8013b8e <HAL_UART_Receive_DMA+0x4a>
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	691b      	ldr	r3, [r3, #16]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d105      	bne.n	8013b8e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	2201      	movs	r2, #1
 8013b86:	4013      	ands	r3, r2
 8013b88:	d001      	beq.n	8013b8e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e032      	b.n	8013bf4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2200      	movs	r2, #0
 8013b92:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a18      	ldr	r2, [pc, #96]	@ (8013bfc <HAL_UART_Receive_DMA+0xb8>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d020      	beq.n	8013be0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	685a      	ldr	r2, [r3, #4]
 8013ba4:	2380      	movs	r3, #128	@ 0x80
 8013ba6:	041b      	lsls	r3, r3, #16
 8013ba8:	4013      	ands	r3, r2
 8013baa:	d019      	beq.n	8013be0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bac:	f3ef 8310 	mrs	r3, PRIMASK
 8013bb0:	613b      	str	r3, [r7, #16]
  return(result);
 8013bb2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013bb4:	61fb      	str	r3, [r7, #28]
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	f383 8810 	msr	PRIMASK, r3
}
 8013bc0:	46c0      	nop			@ (mov r8, r8)
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	681a      	ldr	r2, [r3, #0]
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	2180      	movs	r1, #128	@ 0x80
 8013bce:	04c9      	lsls	r1, r1, #19
 8013bd0:	430a      	orrs	r2, r1
 8013bd2:	601a      	str	r2, [r3, #0]
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	f383 8810 	msr	PRIMASK, r3
}
 8013bde:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013be0:	1dbb      	adds	r3, r7, #6
 8013be2:	881a      	ldrh	r2, [r3, #0]
 8013be4:	68b9      	ldr	r1, [r7, #8]
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	0018      	movs	r0, r3
 8013bea:	f001 f8a3 	bl	8014d34 <UART_Start_Receive_DMA>
 8013bee:	0003      	movs	r3, r0
 8013bf0:	e000      	b.n	8013bf4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8013bf2:	2302      	movs	r3, #2
  }
}
 8013bf4:	0018      	movs	r0, r3
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	b008      	add	sp, #32
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	40004800 	.word	0x40004800

08013c00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013c00:	b590      	push	{r4, r7, lr}
 8013c02:	b0ab      	sub	sp, #172	@ 0xac
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	69db      	ldr	r3, [r3, #28]
 8013c0e:	22a4      	movs	r2, #164	@ 0xa4
 8013c10:	18b9      	adds	r1, r7, r2
 8013c12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	20a0      	movs	r0, #160	@ 0xa0
 8013c1c:	1839      	adds	r1, r7, r0
 8013c1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	689b      	ldr	r3, [r3, #8]
 8013c26:	219c      	movs	r1, #156	@ 0x9c
 8013c28:	1879      	adds	r1, r7, r1
 8013c2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013c2c:	0011      	movs	r1, r2
 8013c2e:	18bb      	adds	r3, r7, r2
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	4a9c      	ldr	r2, [pc, #624]	@ (8013ea4 <HAL_UART_IRQHandler+0x2a4>)
 8013c34:	4013      	ands	r3, r2
 8013c36:	2298      	movs	r2, #152	@ 0x98
 8013c38:	18bc      	adds	r4, r7, r2
 8013c3a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8013c3c:	18bb      	adds	r3, r7, r2
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d114      	bne.n	8013c6e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8013c44:	187b      	adds	r3, r7, r1
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	2220      	movs	r2, #32
 8013c4a:	4013      	ands	r3, r2
 8013c4c:	d00f      	beq.n	8013c6e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013c4e:	183b      	adds	r3, r7, r0
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2220      	movs	r2, #32
 8013c54:	4013      	ands	r3, r2
 8013c56:	d00a      	beq.n	8013c6e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d100      	bne.n	8013c62 <HAL_UART_IRQHandler+0x62>
 8013c60:	e2aa      	b.n	80141b8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	0010      	movs	r0, r2
 8013c6a:	4798      	blx	r3
      }
      return;
 8013c6c:	e2a4      	b.n	80141b8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013c6e:	2398      	movs	r3, #152	@ 0x98
 8013c70:	18fb      	adds	r3, r7, r3
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d100      	bne.n	8013c7a <HAL_UART_IRQHandler+0x7a>
 8013c78:	e11a      	b.n	8013eb0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8013c7a:	239c      	movs	r3, #156	@ 0x9c
 8013c7c:	18fb      	adds	r3, r7, r3
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	2201      	movs	r2, #1
 8013c82:	4013      	ands	r3, r2
 8013c84:	d106      	bne.n	8013c94 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013c86:	23a0      	movs	r3, #160	@ 0xa0
 8013c88:	18fb      	adds	r3, r7, r3
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a86      	ldr	r2, [pc, #536]	@ (8013ea8 <HAL_UART_IRQHandler+0x2a8>)
 8013c8e:	4013      	ands	r3, r2
 8013c90:	d100      	bne.n	8013c94 <HAL_UART_IRQHandler+0x94>
 8013c92:	e10d      	b.n	8013eb0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013c94:	23a4      	movs	r3, #164	@ 0xa4
 8013c96:	18fb      	adds	r3, r7, r3
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	4013      	ands	r3, r2
 8013c9e:	d012      	beq.n	8013cc6 <HAL_UART_IRQHandler+0xc6>
 8013ca0:	23a0      	movs	r3, #160	@ 0xa0
 8013ca2:	18fb      	adds	r3, r7, r3
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	2380      	movs	r3, #128	@ 0x80
 8013ca8:	005b      	lsls	r3, r3, #1
 8013caa:	4013      	ands	r3, r2
 8013cac:	d00b      	beq.n	8013cc6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2284      	movs	r2, #132	@ 0x84
 8013cba:	589b      	ldr	r3, [r3, r2]
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	431a      	orrs	r2, r3
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2184      	movs	r1, #132	@ 0x84
 8013cc4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013cc6:	23a4      	movs	r3, #164	@ 0xa4
 8013cc8:	18fb      	adds	r3, r7, r3
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2202      	movs	r2, #2
 8013cce:	4013      	ands	r3, r2
 8013cd0:	d011      	beq.n	8013cf6 <HAL_UART_IRQHandler+0xf6>
 8013cd2:	239c      	movs	r3, #156	@ 0x9c
 8013cd4:	18fb      	adds	r3, r7, r3
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	2201      	movs	r2, #1
 8013cda:	4013      	ands	r3, r2
 8013cdc:	d00b      	beq.n	8013cf6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2202      	movs	r2, #2
 8013ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2284      	movs	r2, #132	@ 0x84
 8013cea:	589b      	ldr	r3, [r3, r2]
 8013cec:	2204      	movs	r2, #4
 8013cee:	431a      	orrs	r2, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2184      	movs	r1, #132	@ 0x84
 8013cf4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013cf6:	23a4      	movs	r3, #164	@ 0xa4
 8013cf8:	18fb      	adds	r3, r7, r3
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2204      	movs	r2, #4
 8013cfe:	4013      	ands	r3, r2
 8013d00:	d011      	beq.n	8013d26 <HAL_UART_IRQHandler+0x126>
 8013d02:	239c      	movs	r3, #156	@ 0x9c
 8013d04:	18fb      	adds	r3, r7, r3
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	4013      	ands	r3, r2
 8013d0c:	d00b      	beq.n	8013d26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2204      	movs	r2, #4
 8013d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2284      	movs	r2, #132	@ 0x84
 8013d1a:	589b      	ldr	r3, [r3, r2]
 8013d1c:	2202      	movs	r2, #2
 8013d1e:	431a      	orrs	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2184      	movs	r1, #132	@ 0x84
 8013d24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013d26:	23a4      	movs	r3, #164	@ 0xa4
 8013d28:	18fb      	adds	r3, r7, r3
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2208      	movs	r2, #8
 8013d2e:	4013      	ands	r3, r2
 8013d30:	d017      	beq.n	8013d62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013d32:	23a0      	movs	r3, #160	@ 0xa0
 8013d34:	18fb      	adds	r3, r7, r3
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	2220      	movs	r2, #32
 8013d3a:	4013      	ands	r3, r2
 8013d3c:	d105      	bne.n	8013d4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8013d3e:	239c      	movs	r3, #156	@ 0x9c
 8013d40:	18fb      	adds	r3, r7, r3
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2201      	movs	r2, #1
 8013d46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013d48:	d00b      	beq.n	8013d62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2208      	movs	r2, #8
 8013d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2284      	movs	r2, #132	@ 0x84
 8013d56:	589b      	ldr	r3, [r3, r2]
 8013d58:	2208      	movs	r2, #8
 8013d5a:	431a      	orrs	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2184      	movs	r1, #132	@ 0x84
 8013d60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013d62:	23a4      	movs	r3, #164	@ 0xa4
 8013d64:	18fb      	adds	r3, r7, r3
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	2380      	movs	r3, #128	@ 0x80
 8013d6a:	011b      	lsls	r3, r3, #4
 8013d6c:	4013      	ands	r3, r2
 8013d6e:	d013      	beq.n	8013d98 <HAL_UART_IRQHandler+0x198>
 8013d70:	23a0      	movs	r3, #160	@ 0xa0
 8013d72:	18fb      	adds	r3, r7, r3
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	2380      	movs	r3, #128	@ 0x80
 8013d78:	04db      	lsls	r3, r3, #19
 8013d7a:	4013      	ands	r3, r2
 8013d7c:	d00c      	beq.n	8013d98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	2280      	movs	r2, #128	@ 0x80
 8013d84:	0112      	lsls	r2, r2, #4
 8013d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2284      	movs	r2, #132	@ 0x84
 8013d8c:	589b      	ldr	r3, [r3, r2]
 8013d8e:	2220      	movs	r2, #32
 8013d90:	431a      	orrs	r2, r3
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2184      	movs	r1, #132	@ 0x84
 8013d96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2284      	movs	r2, #132	@ 0x84
 8013d9c:	589b      	ldr	r3, [r3, r2]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d100      	bne.n	8013da4 <HAL_UART_IRQHandler+0x1a4>
 8013da2:	e20b      	b.n	80141bc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8013da4:	23a4      	movs	r3, #164	@ 0xa4
 8013da6:	18fb      	adds	r3, r7, r3
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	2220      	movs	r2, #32
 8013dac:	4013      	ands	r3, r2
 8013dae:	d00e      	beq.n	8013dce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013db0:	23a0      	movs	r3, #160	@ 0xa0
 8013db2:	18fb      	adds	r3, r7, r3
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	2220      	movs	r2, #32
 8013db8:	4013      	ands	r3, r2
 8013dba:	d008      	beq.n	8013dce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d004      	beq.n	8013dce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	0010      	movs	r0, r2
 8013dcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2284      	movs	r2, #132	@ 0x84
 8013dd2:	589b      	ldr	r3, [r3, r2]
 8013dd4:	2194      	movs	r1, #148	@ 0x94
 8013dd6:	187a      	adds	r2, r7, r1
 8013dd8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	689b      	ldr	r3, [r3, #8]
 8013de0:	2240      	movs	r2, #64	@ 0x40
 8013de2:	4013      	ands	r3, r2
 8013de4:	2b40      	cmp	r3, #64	@ 0x40
 8013de6:	d004      	beq.n	8013df2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013de8:	187b      	adds	r3, r7, r1
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	2228      	movs	r2, #40	@ 0x28
 8013dee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013df0:	d04b      	beq.n	8013e8a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	0018      	movs	r0, r3
 8013df6:	f001 f861 	bl	8014ebc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	689b      	ldr	r3, [r3, #8]
 8013e00:	2240      	movs	r2, #64	@ 0x40
 8013e02:	4013      	ands	r3, r2
 8013e04:	2b40      	cmp	r3, #64	@ 0x40
 8013e06:	d139      	bne.n	8013e7c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e08:	f3ef 8310 	mrs	r3, PRIMASK
 8013e0c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8013e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013e10:	2090      	movs	r0, #144	@ 0x90
 8013e12:	183a      	adds	r2, r7, r0
 8013e14:	6013      	str	r3, [r2, #0]
 8013e16:	2301      	movs	r3, #1
 8013e18:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e1c:	f383 8810 	msr	PRIMASK, r3
}
 8013e20:	46c0      	nop			@ (mov r8, r8)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	689a      	ldr	r2, [r3, #8]
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2140      	movs	r1, #64	@ 0x40
 8013e2e:	438a      	bics	r2, r1
 8013e30:	609a      	str	r2, [r3, #8]
 8013e32:	183b      	adds	r3, r7, r0
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e3a:	f383 8810 	msr	PRIMASK, r3
}
 8013e3e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d012      	beq.n	8013e6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e4c:	4a17      	ldr	r2, [pc, #92]	@ (8013eac <HAL_UART_IRQHandler+0x2ac>)
 8013e4e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e54:	0018      	movs	r0, r3
 8013e56:	f7f8 fea7 	bl	800cba8 <HAL_DMA_Abort_IT>
 8013e5a:	1e03      	subs	r3, r0, #0
 8013e5c:	d020      	beq.n	8013ea0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e68:	0018      	movs	r0, r3
 8013e6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e6c:	e018      	b.n	8013ea0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2298      	movs	r2, #152	@ 0x98
 8013e72:	589b      	ldr	r3, [r3, r2]
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	0010      	movs	r0, r2
 8013e78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e7a:	e011      	b.n	8013ea0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2298      	movs	r2, #152	@ 0x98
 8013e80:	589b      	ldr	r3, [r3, r2]
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	0010      	movs	r0, r2
 8013e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e88:	e00a      	b.n	8013ea0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2298      	movs	r2, #152	@ 0x98
 8013e8e:	589b      	ldr	r3, [r3, r2]
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	0010      	movs	r0, r2
 8013e94:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2284      	movs	r2, #132	@ 0x84
 8013e9a:	2100      	movs	r1, #0
 8013e9c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8013e9e:	e18d      	b.n	80141bc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ea0:	46c0      	nop			@ (mov r8, r8)
    return;
 8013ea2:	e18b      	b.n	80141bc <HAL_UART_IRQHandler+0x5bc>
 8013ea4:	0000080f 	.word	0x0000080f
 8013ea8:	04000120 	.word	0x04000120
 8013eac:	08015249 	.word	0x08015249

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d000      	beq.n	8013eba <HAL_UART_IRQHandler+0x2ba>
 8013eb8:	e13d      	b.n	8014136 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013eba:	23a4      	movs	r3, #164	@ 0xa4
 8013ebc:	18fb      	adds	r3, r7, r3
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	2210      	movs	r2, #16
 8013ec2:	4013      	ands	r3, r2
 8013ec4:	d100      	bne.n	8013ec8 <HAL_UART_IRQHandler+0x2c8>
 8013ec6:	e136      	b.n	8014136 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013ec8:	23a0      	movs	r3, #160	@ 0xa0
 8013eca:	18fb      	adds	r3, r7, r3
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2210      	movs	r2, #16
 8013ed0:	4013      	ands	r3, r2
 8013ed2:	d100      	bne.n	8013ed6 <HAL_UART_IRQHandler+0x2d6>
 8013ed4:	e12f      	b.n	8014136 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	2210      	movs	r2, #16
 8013edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	689b      	ldr	r3, [r3, #8]
 8013ee4:	2240      	movs	r2, #64	@ 0x40
 8013ee6:	4013      	ands	r3, r2
 8013ee8:	2b40      	cmp	r3, #64	@ 0x40
 8013eea:	d000      	beq.n	8013eee <HAL_UART_IRQHandler+0x2ee>
 8013eec:	e0a2      	b.n	8014034 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	685a      	ldr	r2, [r3, #4]
 8013ef6:	217e      	movs	r1, #126	@ 0x7e
 8013ef8:	187b      	adds	r3, r7, r1
 8013efa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8013efc:	187b      	adds	r3, r7, r1
 8013efe:	881b      	ldrh	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d100      	bne.n	8013f06 <HAL_UART_IRQHandler+0x306>
 8013f04:	e15c      	b.n	80141c0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2258      	movs	r2, #88	@ 0x58
 8013f0a:	5a9b      	ldrh	r3, [r3, r2]
 8013f0c:	187a      	adds	r2, r7, r1
 8013f0e:	8812      	ldrh	r2, [r2, #0]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d300      	bcc.n	8013f16 <HAL_UART_IRQHandler+0x316>
 8013f14:	e154      	b.n	80141c0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	187a      	adds	r2, r7, r1
 8013f1a:	215a      	movs	r1, #90	@ 0x5a
 8013f1c:	8812      	ldrh	r2, [r2, #0]
 8013f1e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2220      	movs	r2, #32
 8013f2a:	4013      	ands	r3, r2
 8013f2c:	d16f      	bne.n	801400e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8013f32:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8013f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013f36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f38:	2301      	movs	r3, #1
 8013f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f3e:	f383 8810 	msr	PRIMASK, r3
}
 8013f42:	46c0      	nop			@ (mov r8, r8)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	681a      	ldr	r2, [r3, #0]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	49a0      	ldr	r1, [pc, #640]	@ (80141d0 <HAL_UART_IRQHandler+0x5d0>)
 8013f50:	400a      	ands	r2, r1
 8013f52:	601a      	str	r2, [r3, #0]
 8013f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f5a:	f383 8810 	msr	PRIMASK, r3
}
 8013f5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f60:	f3ef 8310 	mrs	r3, PRIMASK
 8013f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8013f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f68:	677b      	str	r3, [r7, #116]	@ 0x74
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f70:	f383 8810 	msr	PRIMASK, r3
}
 8013f74:	46c0      	nop			@ (mov r8, r8)
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	689a      	ldr	r2, [r3, #8]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2101      	movs	r1, #1
 8013f82:	438a      	bics	r2, r1
 8013f84:	609a      	str	r2, [r3, #8]
 8013f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013f88:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f8c:	f383 8810 	msr	PRIMASK, r3
}
 8013f90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f92:	f3ef 8310 	mrs	r3, PRIMASK
 8013f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8013f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013f9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fa2:	f383 8810 	msr	PRIMASK, r3
}
 8013fa6:	46c0      	nop			@ (mov r8, r8)
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	689a      	ldr	r2, [r3, #8]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2140      	movs	r1, #64	@ 0x40
 8013fb4:	438a      	bics	r2, r1
 8013fb6:	609a      	str	r2, [r3, #8]
 8013fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013fba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fbe:	f383 8810 	msr	PRIMASK, r3
}
 8013fc2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2280      	movs	r2, #128	@ 0x80
 8013fc8:	2120      	movs	r1, #32
 8013fca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8013fd6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8013fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013fdc:	2301      	movs	r3, #1
 8013fde:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fe2:	f383 8810 	msr	PRIMASK, r3
}
 8013fe6:	46c0      	nop			@ (mov r8, r8)
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2110      	movs	r1, #16
 8013ff4:	438a      	bics	r2, r1
 8013ff6:	601a      	str	r2, [r3, #0]
 8013ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ffe:	f383 8810 	msr	PRIMASK, r3
}
 8014002:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014008:	0018      	movs	r0, r3
 801400a:	f7f8 fd8d 	bl	800cb28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2202      	movs	r2, #2
 8014012:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	22ac      	movs	r2, #172	@ 0xac
 8014018:	589b      	ldr	r3, [r3, r2]
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	2158      	movs	r1, #88	@ 0x58
 801401e:	5a51      	ldrh	r1, [r2, r1]
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	205a      	movs	r0, #90	@ 0x5a
 8014024:	5a12      	ldrh	r2, [r2, r0]
 8014026:	b292      	uxth	r2, r2
 8014028:	1a8a      	subs	r2, r1, r2
 801402a:	b291      	uxth	r1, r2
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	0010      	movs	r0, r2
 8014030:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014032:	e0c5      	b.n	80141c0 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2258      	movs	r2, #88	@ 0x58
 8014038:	5a99      	ldrh	r1, [r3, r2]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	225a      	movs	r2, #90	@ 0x5a
 801403e:	5a9b      	ldrh	r3, [r3, r2]
 8014040:	b29a      	uxth	r2, r3
 8014042:	208e      	movs	r0, #142	@ 0x8e
 8014044:	183b      	adds	r3, r7, r0
 8014046:	1a8a      	subs	r2, r1, r2
 8014048:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	225a      	movs	r2, #90	@ 0x5a
 801404e:	5a9b      	ldrh	r3, [r3, r2]
 8014050:	b29b      	uxth	r3, r3
 8014052:	2b00      	cmp	r3, #0
 8014054:	d100      	bne.n	8014058 <HAL_UART_IRQHandler+0x458>
 8014056:	e0b5      	b.n	80141c4 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8014058:	183b      	adds	r3, r7, r0
 801405a:	881b      	ldrh	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d100      	bne.n	8014062 <HAL_UART_IRQHandler+0x462>
 8014060:	e0b0      	b.n	80141c4 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014062:	f3ef 8310 	mrs	r3, PRIMASK
 8014066:	60fb      	str	r3, [r7, #12]
  return(result);
 8014068:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801406a:	2488      	movs	r4, #136	@ 0x88
 801406c:	193a      	adds	r2, r7, r4
 801406e:	6013      	str	r3, [r2, #0]
 8014070:	2301      	movs	r3, #1
 8014072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	f383 8810 	msr	PRIMASK, r3
}
 801407a:	46c0      	nop			@ (mov r8, r8)
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	4953      	ldr	r1, [pc, #332]	@ (80141d4 <HAL_UART_IRQHandler+0x5d4>)
 8014088:	400a      	ands	r2, r1
 801408a:	601a      	str	r2, [r3, #0]
 801408c:	193b      	adds	r3, r7, r4
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	f383 8810 	msr	PRIMASK, r3
}
 8014098:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801409a:	f3ef 8310 	mrs	r3, PRIMASK
 801409e:	61bb      	str	r3, [r7, #24]
  return(result);
 80140a0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140a2:	2484      	movs	r4, #132	@ 0x84
 80140a4:	193a      	adds	r2, r7, r4
 80140a6:	6013      	str	r3, [r2, #0]
 80140a8:	2301      	movs	r3, #1
 80140aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	f383 8810 	msr	PRIMASK, r3
}
 80140b2:	46c0      	nop			@ (mov r8, r8)
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	689a      	ldr	r2, [r3, #8]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	2101      	movs	r1, #1
 80140c0:	438a      	bics	r2, r1
 80140c2:	609a      	str	r2, [r3, #8]
 80140c4:	193b      	adds	r3, r7, r4
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140ca:	6a3b      	ldr	r3, [r7, #32]
 80140cc:	f383 8810 	msr	PRIMASK, r3
}
 80140d0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2280      	movs	r2, #128	@ 0x80
 80140d6:	2120      	movs	r1, #32
 80140d8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2200      	movs	r2, #0
 80140de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2200      	movs	r2, #0
 80140e4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140e6:	f3ef 8310 	mrs	r3, PRIMASK
 80140ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80140ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80140ee:	2480      	movs	r4, #128	@ 0x80
 80140f0:	193a      	adds	r2, r7, r4
 80140f2:	6013      	str	r3, [r2, #0]
 80140f4:	2301      	movs	r3, #1
 80140f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140fa:	f383 8810 	msr	PRIMASK, r3
}
 80140fe:	46c0      	nop			@ (mov r8, r8)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	2110      	movs	r1, #16
 801410c:	438a      	bics	r2, r1
 801410e:	601a      	str	r2, [r3, #0]
 8014110:	193b      	adds	r3, r7, r4
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014118:	f383 8810 	msr	PRIMASK, r3
}
 801411c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2202      	movs	r2, #2
 8014122:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	22ac      	movs	r2, #172	@ 0xac
 8014128:	589b      	ldr	r3, [r3, r2]
 801412a:	183a      	adds	r2, r7, r0
 801412c:	8811      	ldrh	r1, [r2, #0]
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	0010      	movs	r0, r2
 8014132:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014134:	e046      	b.n	80141c4 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014136:	23a4      	movs	r3, #164	@ 0xa4
 8014138:	18fb      	adds	r3, r7, r3
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	2380      	movs	r3, #128	@ 0x80
 801413e:	035b      	lsls	r3, r3, #13
 8014140:	4013      	ands	r3, r2
 8014142:	d012      	beq.n	801416a <HAL_UART_IRQHandler+0x56a>
 8014144:	239c      	movs	r3, #156	@ 0x9c
 8014146:	18fb      	adds	r3, r7, r3
 8014148:	681a      	ldr	r2, [r3, #0]
 801414a:	2380      	movs	r3, #128	@ 0x80
 801414c:	03db      	lsls	r3, r3, #15
 801414e:	4013      	ands	r3, r2
 8014150:	d00b      	beq.n	801416a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2280      	movs	r2, #128	@ 0x80
 8014158:	0352      	lsls	r2, r2, #13
 801415a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	22a8      	movs	r2, #168	@ 0xa8
 8014160:	589b      	ldr	r3, [r3, r2]
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	0010      	movs	r0, r2
 8014166:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014168:	e02f      	b.n	80141ca <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801416a:	23a4      	movs	r3, #164	@ 0xa4
 801416c:	18fb      	adds	r3, r7, r3
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2280      	movs	r2, #128	@ 0x80
 8014172:	4013      	ands	r3, r2
 8014174:	d00f      	beq.n	8014196 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8014176:	23a0      	movs	r3, #160	@ 0xa0
 8014178:	18fb      	adds	r3, r7, r3
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	2280      	movs	r2, #128	@ 0x80
 801417e:	4013      	ands	r3, r2
 8014180:	d009      	beq.n	8014196 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014186:	2b00      	cmp	r3, #0
 8014188:	d01e      	beq.n	80141c8 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	0010      	movs	r0, r2
 8014192:	4798      	blx	r3
    }
    return;
 8014194:	e018      	b.n	80141c8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014196:	23a4      	movs	r3, #164	@ 0xa4
 8014198:	18fb      	adds	r3, r7, r3
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2240      	movs	r2, #64	@ 0x40
 801419e:	4013      	ands	r3, r2
 80141a0:	d013      	beq.n	80141ca <HAL_UART_IRQHandler+0x5ca>
 80141a2:	23a0      	movs	r3, #160	@ 0xa0
 80141a4:	18fb      	adds	r3, r7, r3
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2240      	movs	r2, #64	@ 0x40
 80141aa:	4013      	ands	r3, r2
 80141ac:	d00d      	beq.n	80141ca <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	0018      	movs	r0, r3
 80141b2:	f001 f862 	bl	801527a <UART_EndTransmit_IT>
    return;
 80141b6:	e008      	b.n	80141ca <HAL_UART_IRQHandler+0x5ca>
      return;
 80141b8:	46c0      	nop			@ (mov r8, r8)
 80141ba:	e006      	b.n	80141ca <HAL_UART_IRQHandler+0x5ca>
    return;
 80141bc:	46c0      	nop			@ (mov r8, r8)
 80141be:	e004      	b.n	80141ca <HAL_UART_IRQHandler+0x5ca>
      return;
 80141c0:	46c0      	nop			@ (mov r8, r8)
 80141c2:	e002      	b.n	80141ca <HAL_UART_IRQHandler+0x5ca>
      return;
 80141c4:	46c0      	nop			@ (mov r8, r8)
 80141c6:	e000      	b.n	80141ca <HAL_UART_IRQHandler+0x5ca>
    return;
 80141c8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80141ca:	46bd      	mov	sp, r7
 80141cc:	b02b      	add	sp, #172	@ 0xac
 80141ce:	bd90      	pop	{r4, r7, pc}
 80141d0:	fffffeff 	.word	0xfffffeff
 80141d4:	fffffedf 	.word	0xfffffedf

080141d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80141e0:	46c0      	nop			@ (mov r8, r8)
 80141e2:	46bd      	mov	sp, r7
 80141e4:	b002      	add	sp, #8
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80141f0:	46c0      	nop			@ (mov r8, r8)
 80141f2:	46bd      	mov	sp, r7
 80141f4:	b002      	add	sp, #8
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014200:	46c0      	nop			@ (mov r8, r8)
 8014202:	46bd      	mov	sp, r7
 8014204:	b002      	add	sp, #8
 8014206:	bd80      	pop	{r7, pc}

08014208 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8014210:	46c0      	nop			@ (mov r8, r8)
 8014212:	46bd      	mov	sp, r7
 8014214:	b002      	add	sp, #8
 8014216:	bd80      	pop	{r7, pc}

08014218 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8014220:	46c0      	nop			@ (mov r8, r8)
 8014222:	46bd      	mov	sp, r7
 8014224:	b002      	add	sp, #8
 8014226:	bd80      	pop	{r7, pc}

08014228 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8014230:	46c0      	nop			@ (mov r8, r8)
 8014232:	46bd      	mov	sp, r7
 8014234:	b002      	add	sp, #8
 8014236:	bd80      	pop	{r7, pc}

08014238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	000a      	movs	r2, r1
 8014242:	1cbb      	adds	r3, r7, #2
 8014244:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014246:	46c0      	nop			@ (mov r8, r8)
 8014248:	46bd      	mov	sp, r7
 801424a:	b002      	add	sp, #8
 801424c:	bd80      	pop	{r7, pc}
	...

08014250 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2188      	movs	r1, #136	@ 0x88
 801425c:	4a14      	ldr	r2, [pc, #80]	@ (80142b0 <UART_InitCallbacksToDefault+0x60>)
 801425e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	218c      	movs	r1, #140	@ 0x8c
 8014264:	4a13      	ldr	r2, [pc, #76]	@ (80142b4 <UART_InitCallbacksToDefault+0x64>)
 8014266:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2190      	movs	r1, #144	@ 0x90
 801426c:	4a12      	ldr	r2, [pc, #72]	@ (80142b8 <UART_InitCallbacksToDefault+0x68>)
 801426e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2194      	movs	r1, #148	@ 0x94
 8014274:	4a11      	ldr	r2, [pc, #68]	@ (80142bc <UART_InitCallbacksToDefault+0x6c>)
 8014276:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2198      	movs	r1, #152	@ 0x98
 801427c:	4a10      	ldr	r2, [pc, #64]	@ (80142c0 <UART_InitCallbacksToDefault+0x70>)
 801427e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	219c      	movs	r1, #156	@ 0x9c
 8014284:	4a0f      	ldr	r2, [pc, #60]	@ (80142c4 <UART_InitCallbacksToDefault+0x74>)
 8014286:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	21a0      	movs	r1, #160	@ 0xa0
 801428c:	4a0e      	ldr	r2, [pc, #56]	@ (80142c8 <UART_InitCallbacksToDefault+0x78>)
 801428e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	21a4      	movs	r1, #164	@ 0xa4
 8014294:	4a0d      	ldr	r2, [pc, #52]	@ (80142cc <UART_InitCallbacksToDefault+0x7c>)
 8014296:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	21a8      	movs	r1, #168	@ 0xa8
 801429c:	4a0c      	ldr	r2, [pc, #48]	@ (80142d0 <UART_InitCallbacksToDefault+0x80>)
 801429e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	21ac      	movs	r1, #172	@ 0xac
 80142a4:	4a0b      	ldr	r2, [pc, #44]	@ (80142d4 <UART_InitCallbacksToDefault+0x84>)
 80142a6:	505a      	str	r2, [r3, r1]

}
 80142a8:	46c0      	nop			@ (mov r8, r8)
 80142aa:	46bd      	mov	sp, r7
 80142ac:	b002      	add	sp, #8
 80142ae:	bd80      	pop	{r7, pc}
 80142b0:	080141e9 	.word	0x080141e9
 80142b4:	080141d9 	.word	0x080141d9
 80142b8:	080141f9 	.word	0x080141f9
 80142bc:	080075a1 	.word	0x080075a1
 80142c0:	08003a75 	.word	0x08003a75
 80142c4:	08014209 	.word	0x08014209
 80142c8:	08014219 	.word	0x08014219
 80142cc:	08014229 	.word	0x08014229
 80142d0:	0801566d 	.word	0x0801566d
 80142d4:	08014239 	.word	0x08014239

080142d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80142d8:	b5b0      	push	{r4, r5, r7, lr}
 80142da:	b08e      	sub	sp, #56	@ 0x38
 80142dc:	af00      	add	r7, sp, #0
 80142de:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80142e0:	231a      	movs	r3, #26
 80142e2:	2218      	movs	r2, #24
 80142e4:	189b      	adds	r3, r3, r2
 80142e6:	19db      	adds	r3, r3, r7
 80142e8:	2200      	movs	r2, #0
 80142ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80142ec:	69fb      	ldr	r3, [r7, #28]
 80142ee:	689a      	ldr	r2, [r3, #8]
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	691b      	ldr	r3, [r3, #16]
 80142f4:	431a      	orrs	r2, r3
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	695b      	ldr	r3, [r3, #20]
 80142fa:	431a      	orrs	r2, r3
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	69db      	ldr	r3, [r3, #28]
 8014300:	4313      	orrs	r3, r2
 8014302:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	4ac3      	ldr	r2, [pc, #780]	@ (8014618 <UART_SetConfig+0x340>)
 801430c:	4013      	ands	r3, r2
 801430e:	0019      	movs	r1, r3
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014316:	430a      	orrs	r2, r1
 8014318:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	4abe      	ldr	r2, [pc, #760]	@ (801461c <UART_SetConfig+0x344>)
 8014322:	4013      	ands	r3, r2
 8014324:	0019      	movs	r1, r3
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	68da      	ldr	r2, [r3, #12]
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	430a      	orrs	r2, r1
 8014330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014332:	69fb      	ldr	r3, [r7, #28]
 8014334:	699b      	ldr	r3, [r3, #24]
 8014336:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4ab8      	ldr	r2, [pc, #736]	@ (8014620 <UART_SetConfig+0x348>)
 801433e:	4293      	cmp	r3, r2
 8014340:	d004      	beq.n	801434c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	6a1b      	ldr	r3, [r3, #32]
 8014346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014348:	4313      	orrs	r3, r2
 801434a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	689b      	ldr	r3, [r3, #8]
 8014352:	4ab4      	ldr	r2, [pc, #720]	@ (8014624 <UART_SetConfig+0x34c>)
 8014354:	4013      	ands	r3, r2
 8014356:	0019      	movs	r1, r3
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801435e:	430a      	orrs	r2, r1
 8014360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014362:	69fb      	ldr	r3, [r7, #28]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4ab0      	ldr	r2, [pc, #704]	@ (8014628 <UART_SetConfig+0x350>)
 8014368:	4293      	cmp	r3, r2
 801436a:	d131      	bne.n	80143d0 <UART_SetConfig+0xf8>
 801436c:	4baf      	ldr	r3, [pc, #700]	@ (801462c <UART_SetConfig+0x354>)
 801436e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014370:	2203      	movs	r2, #3
 8014372:	4013      	ands	r3, r2
 8014374:	2b03      	cmp	r3, #3
 8014376:	d01d      	beq.n	80143b4 <UART_SetConfig+0xdc>
 8014378:	d823      	bhi.n	80143c2 <UART_SetConfig+0xea>
 801437a:	2b02      	cmp	r3, #2
 801437c:	d00c      	beq.n	8014398 <UART_SetConfig+0xc0>
 801437e:	d820      	bhi.n	80143c2 <UART_SetConfig+0xea>
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <UART_SetConfig+0xb2>
 8014384:	2b01      	cmp	r3, #1
 8014386:	d00e      	beq.n	80143a6 <UART_SetConfig+0xce>
 8014388:	e01b      	b.n	80143c2 <UART_SetConfig+0xea>
 801438a:	231b      	movs	r3, #27
 801438c:	2218      	movs	r2, #24
 801438e:	189b      	adds	r3, r3, r2
 8014390:	19db      	adds	r3, r3, r7
 8014392:	2201      	movs	r2, #1
 8014394:	701a      	strb	r2, [r3, #0]
 8014396:	e0b4      	b.n	8014502 <UART_SetConfig+0x22a>
 8014398:	231b      	movs	r3, #27
 801439a:	2218      	movs	r2, #24
 801439c:	189b      	adds	r3, r3, r2
 801439e:	19db      	adds	r3, r3, r7
 80143a0:	2202      	movs	r2, #2
 80143a2:	701a      	strb	r2, [r3, #0]
 80143a4:	e0ad      	b.n	8014502 <UART_SetConfig+0x22a>
 80143a6:	231b      	movs	r3, #27
 80143a8:	2218      	movs	r2, #24
 80143aa:	189b      	adds	r3, r3, r2
 80143ac:	19db      	adds	r3, r3, r7
 80143ae:	2204      	movs	r2, #4
 80143b0:	701a      	strb	r2, [r3, #0]
 80143b2:	e0a6      	b.n	8014502 <UART_SetConfig+0x22a>
 80143b4:	231b      	movs	r3, #27
 80143b6:	2218      	movs	r2, #24
 80143b8:	189b      	adds	r3, r3, r2
 80143ba:	19db      	adds	r3, r3, r7
 80143bc:	2208      	movs	r2, #8
 80143be:	701a      	strb	r2, [r3, #0]
 80143c0:	e09f      	b.n	8014502 <UART_SetConfig+0x22a>
 80143c2:	231b      	movs	r3, #27
 80143c4:	2218      	movs	r2, #24
 80143c6:	189b      	adds	r3, r3, r2
 80143c8:	19db      	adds	r3, r3, r7
 80143ca:	2210      	movs	r2, #16
 80143cc:	701a      	strb	r2, [r3, #0]
 80143ce:	e098      	b.n	8014502 <UART_SetConfig+0x22a>
 80143d0:	69fb      	ldr	r3, [r7, #28]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4a96      	ldr	r2, [pc, #600]	@ (8014630 <UART_SetConfig+0x358>)
 80143d6:	4293      	cmp	r3, r2
 80143d8:	d131      	bne.n	801443e <UART_SetConfig+0x166>
 80143da:	4b94      	ldr	r3, [pc, #592]	@ (801462c <UART_SetConfig+0x354>)
 80143dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80143de:	220c      	movs	r2, #12
 80143e0:	4013      	ands	r3, r2
 80143e2:	2b0c      	cmp	r3, #12
 80143e4:	d01d      	beq.n	8014422 <UART_SetConfig+0x14a>
 80143e6:	d823      	bhi.n	8014430 <UART_SetConfig+0x158>
 80143e8:	2b08      	cmp	r3, #8
 80143ea:	d00c      	beq.n	8014406 <UART_SetConfig+0x12e>
 80143ec:	d820      	bhi.n	8014430 <UART_SetConfig+0x158>
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d002      	beq.n	80143f8 <UART_SetConfig+0x120>
 80143f2:	2b04      	cmp	r3, #4
 80143f4:	d00e      	beq.n	8014414 <UART_SetConfig+0x13c>
 80143f6:	e01b      	b.n	8014430 <UART_SetConfig+0x158>
 80143f8:	231b      	movs	r3, #27
 80143fa:	2218      	movs	r2, #24
 80143fc:	189b      	adds	r3, r3, r2
 80143fe:	19db      	adds	r3, r3, r7
 8014400:	2200      	movs	r2, #0
 8014402:	701a      	strb	r2, [r3, #0]
 8014404:	e07d      	b.n	8014502 <UART_SetConfig+0x22a>
 8014406:	231b      	movs	r3, #27
 8014408:	2218      	movs	r2, #24
 801440a:	189b      	adds	r3, r3, r2
 801440c:	19db      	adds	r3, r3, r7
 801440e:	2202      	movs	r2, #2
 8014410:	701a      	strb	r2, [r3, #0]
 8014412:	e076      	b.n	8014502 <UART_SetConfig+0x22a>
 8014414:	231b      	movs	r3, #27
 8014416:	2218      	movs	r2, #24
 8014418:	189b      	adds	r3, r3, r2
 801441a:	19db      	adds	r3, r3, r7
 801441c:	2204      	movs	r2, #4
 801441e:	701a      	strb	r2, [r3, #0]
 8014420:	e06f      	b.n	8014502 <UART_SetConfig+0x22a>
 8014422:	231b      	movs	r3, #27
 8014424:	2218      	movs	r2, #24
 8014426:	189b      	adds	r3, r3, r2
 8014428:	19db      	adds	r3, r3, r7
 801442a:	2208      	movs	r2, #8
 801442c:	701a      	strb	r2, [r3, #0]
 801442e:	e068      	b.n	8014502 <UART_SetConfig+0x22a>
 8014430:	231b      	movs	r3, #27
 8014432:	2218      	movs	r2, #24
 8014434:	189b      	adds	r3, r3, r2
 8014436:	19db      	adds	r3, r3, r7
 8014438:	2210      	movs	r2, #16
 801443a:	701a      	strb	r2, [r3, #0]
 801443c:	e061      	b.n	8014502 <UART_SetConfig+0x22a>
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	4a7c      	ldr	r2, [pc, #496]	@ (8014634 <UART_SetConfig+0x35c>)
 8014444:	4293      	cmp	r3, r2
 8014446:	d106      	bne.n	8014456 <UART_SetConfig+0x17e>
 8014448:	231b      	movs	r3, #27
 801444a:	2218      	movs	r2, #24
 801444c:	189b      	adds	r3, r3, r2
 801444e:	19db      	adds	r3, r3, r7
 8014450:	2200      	movs	r2, #0
 8014452:	701a      	strb	r2, [r3, #0]
 8014454:	e055      	b.n	8014502 <UART_SetConfig+0x22a>
 8014456:	69fb      	ldr	r3, [r7, #28]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	4a77      	ldr	r2, [pc, #476]	@ (8014638 <UART_SetConfig+0x360>)
 801445c:	4293      	cmp	r3, r2
 801445e:	d106      	bne.n	801446e <UART_SetConfig+0x196>
 8014460:	231b      	movs	r3, #27
 8014462:	2218      	movs	r2, #24
 8014464:	189b      	adds	r3, r3, r2
 8014466:	19db      	adds	r3, r3, r7
 8014468:	2200      	movs	r2, #0
 801446a:	701a      	strb	r2, [r3, #0]
 801446c:	e049      	b.n	8014502 <UART_SetConfig+0x22a>
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4a6b      	ldr	r2, [pc, #428]	@ (8014620 <UART_SetConfig+0x348>)
 8014474:	4293      	cmp	r3, r2
 8014476:	d13e      	bne.n	80144f6 <UART_SetConfig+0x21e>
 8014478:	4b6c      	ldr	r3, [pc, #432]	@ (801462c <UART_SetConfig+0x354>)
 801447a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801447c:	23c0      	movs	r3, #192	@ 0xc0
 801447e:	011b      	lsls	r3, r3, #4
 8014480:	4013      	ands	r3, r2
 8014482:	22c0      	movs	r2, #192	@ 0xc0
 8014484:	0112      	lsls	r2, r2, #4
 8014486:	4293      	cmp	r3, r2
 8014488:	d027      	beq.n	80144da <UART_SetConfig+0x202>
 801448a:	22c0      	movs	r2, #192	@ 0xc0
 801448c:	0112      	lsls	r2, r2, #4
 801448e:	4293      	cmp	r3, r2
 8014490:	d82a      	bhi.n	80144e8 <UART_SetConfig+0x210>
 8014492:	2280      	movs	r2, #128	@ 0x80
 8014494:	0112      	lsls	r2, r2, #4
 8014496:	4293      	cmp	r3, r2
 8014498:	d011      	beq.n	80144be <UART_SetConfig+0x1e6>
 801449a:	2280      	movs	r2, #128	@ 0x80
 801449c:	0112      	lsls	r2, r2, #4
 801449e:	4293      	cmp	r3, r2
 80144a0:	d822      	bhi.n	80144e8 <UART_SetConfig+0x210>
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d004      	beq.n	80144b0 <UART_SetConfig+0x1d8>
 80144a6:	2280      	movs	r2, #128	@ 0x80
 80144a8:	00d2      	lsls	r2, r2, #3
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d00e      	beq.n	80144cc <UART_SetConfig+0x1f4>
 80144ae:	e01b      	b.n	80144e8 <UART_SetConfig+0x210>
 80144b0:	231b      	movs	r3, #27
 80144b2:	2218      	movs	r2, #24
 80144b4:	189b      	adds	r3, r3, r2
 80144b6:	19db      	adds	r3, r3, r7
 80144b8:	2200      	movs	r2, #0
 80144ba:	701a      	strb	r2, [r3, #0]
 80144bc:	e021      	b.n	8014502 <UART_SetConfig+0x22a>
 80144be:	231b      	movs	r3, #27
 80144c0:	2218      	movs	r2, #24
 80144c2:	189b      	adds	r3, r3, r2
 80144c4:	19db      	adds	r3, r3, r7
 80144c6:	2202      	movs	r2, #2
 80144c8:	701a      	strb	r2, [r3, #0]
 80144ca:	e01a      	b.n	8014502 <UART_SetConfig+0x22a>
 80144cc:	231b      	movs	r3, #27
 80144ce:	2218      	movs	r2, #24
 80144d0:	189b      	adds	r3, r3, r2
 80144d2:	19db      	adds	r3, r3, r7
 80144d4:	2204      	movs	r2, #4
 80144d6:	701a      	strb	r2, [r3, #0]
 80144d8:	e013      	b.n	8014502 <UART_SetConfig+0x22a>
 80144da:	231b      	movs	r3, #27
 80144dc:	2218      	movs	r2, #24
 80144de:	189b      	adds	r3, r3, r2
 80144e0:	19db      	adds	r3, r3, r7
 80144e2:	2208      	movs	r2, #8
 80144e4:	701a      	strb	r2, [r3, #0]
 80144e6:	e00c      	b.n	8014502 <UART_SetConfig+0x22a>
 80144e8:	231b      	movs	r3, #27
 80144ea:	2218      	movs	r2, #24
 80144ec:	189b      	adds	r3, r3, r2
 80144ee:	19db      	adds	r3, r3, r7
 80144f0:	2210      	movs	r2, #16
 80144f2:	701a      	strb	r2, [r3, #0]
 80144f4:	e005      	b.n	8014502 <UART_SetConfig+0x22a>
 80144f6:	231b      	movs	r3, #27
 80144f8:	2218      	movs	r2, #24
 80144fa:	189b      	adds	r3, r3, r2
 80144fc:	19db      	adds	r3, r3, r7
 80144fe:	2210      	movs	r2, #16
 8014500:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	4a46      	ldr	r2, [pc, #280]	@ (8014620 <UART_SetConfig+0x348>)
 8014508:	4293      	cmp	r3, r2
 801450a:	d000      	beq.n	801450e <UART_SetConfig+0x236>
 801450c:	e09a      	b.n	8014644 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801450e:	231b      	movs	r3, #27
 8014510:	2218      	movs	r2, #24
 8014512:	189b      	adds	r3, r3, r2
 8014514:	19db      	adds	r3, r3, r7
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	2b08      	cmp	r3, #8
 801451a:	d01d      	beq.n	8014558 <UART_SetConfig+0x280>
 801451c:	dc20      	bgt.n	8014560 <UART_SetConfig+0x288>
 801451e:	2b04      	cmp	r3, #4
 8014520:	d015      	beq.n	801454e <UART_SetConfig+0x276>
 8014522:	dc1d      	bgt.n	8014560 <UART_SetConfig+0x288>
 8014524:	2b00      	cmp	r3, #0
 8014526:	d002      	beq.n	801452e <UART_SetConfig+0x256>
 8014528:	2b02      	cmp	r3, #2
 801452a:	d005      	beq.n	8014538 <UART_SetConfig+0x260>
 801452c:	e018      	b.n	8014560 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801452e:	f7fd ff3f 	bl	80123b0 <HAL_RCC_GetPCLK1Freq>
 8014532:	0003      	movs	r3, r0
 8014534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014536:	e01c      	b.n	8014572 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014538:	4b3c      	ldr	r3, [pc, #240]	@ (801462c <UART_SetConfig+0x354>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2210      	movs	r2, #16
 801453e:	4013      	ands	r3, r2
 8014540:	d002      	beq.n	8014548 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8014542:	4b3e      	ldr	r3, [pc, #248]	@ (801463c <UART_SetConfig+0x364>)
 8014544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014546:	e014      	b.n	8014572 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8014548:	4b3d      	ldr	r3, [pc, #244]	@ (8014640 <UART_SetConfig+0x368>)
 801454a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801454c:	e011      	b.n	8014572 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801454e:	f7fd fe7f 	bl	8012250 <HAL_RCC_GetSysClockFreq>
 8014552:	0003      	movs	r3, r0
 8014554:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014556:	e00c      	b.n	8014572 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014558:	2380      	movs	r3, #128	@ 0x80
 801455a:	021b      	lsls	r3, r3, #8
 801455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801455e:	e008      	b.n	8014572 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8014560:	2300      	movs	r3, #0
 8014562:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8014564:	231a      	movs	r3, #26
 8014566:	2218      	movs	r2, #24
 8014568:	189b      	adds	r3, r3, r2
 801456a:	19db      	adds	r3, r3, r7
 801456c:	2201      	movs	r2, #1
 801456e:	701a      	strb	r2, [r3, #0]
        break;
 8014570:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014574:	2b00      	cmp	r3, #0
 8014576:	d100      	bne.n	801457a <UART_SetConfig+0x2a2>
 8014578:	e133      	b.n	80147e2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	685a      	ldr	r2, [r3, #4]
 801457e:	0013      	movs	r3, r2
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	189b      	adds	r3, r3, r2
 8014584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014586:	429a      	cmp	r2, r3
 8014588:	d305      	bcc.n	8014596 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801458a:	69fb      	ldr	r3, [r7, #28]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014592:	429a      	cmp	r2, r3
 8014594:	d906      	bls.n	80145a4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8014596:	231a      	movs	r3, #26
 8014598:	2218      	movs	r2, #24
 801459a:	189b      	adds	r3, r3, r2
 801459c:	19db      	adds	r3, r3, r7
 801459e:	2201      	movs	r2, #1
 80145a0:	701a      	strb	r2, [r3, #0]
 80145a2:	e11e      	b.n	80147e2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80145a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145a6:	613b      	str	r3, [r7, #16]
 80145a8:	2300      	movs	r3, #0
 80145aa:	617b      	str	r3, [r7, #20]
 80145ac:	6939      	ldr	r1, [r7, #16]
 80145ae:	697a      	ldr	r2, [r7, #20]
 80145b0:	000b      	movs	r3, r1
 80145b2:	0e1b      	lsrs	r3, r3, #24
 80145b4:	0010      	movs	r0, r2
 80145b6:	0205      	lsls	r5, r0, #8
 80145b8:	431d      	orrs	r5, r3
 80145ba:	000b      	movs	r3, r1
 80145bc:	021c      	lsls	r4, r3, #8
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	085b      	lsrs	r3, r3, #1
 80145c4:	60bb      	str	r3, [r7, #8]
 80145c6:	2300      	movs	r3, #0
 80145c8:	60fb      	str	r3, [r7, #12]
 80145ca:	68b8      	ldr	r0, [r7, #8]
 80145cc:	68f9      	ldr	r1, [r7, #12]
 80145ce:	1900      	adds	r0, r0, r4
 80145d0:	4169      	adcs	r1, r5
 80145d2:	69fb      	ldr	r3, [r7, #28]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	603b      	str	r3, [r7, #0]
 80145d8:	2300      	movs	r3, #0
 80145da:	607b      	str	r3, [r7, #4]
 80145dc:	683a      	ldr	r2, [r7, #0]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f7eb ffce 	bl	8000580 <__aeabi_uldivmod>
 80145e4:	0002      	movs	r2, r0
 80145e6:	000b      	movs	r3, r1
 80145e8:	0013      	movs	r3, r2
 80145ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80145ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145ee:	23c0      	movs	r3, #192	@ 0xc0
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d309      	bcc.n	801460a <UART_SetConfig+0x332>
 80145f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145f8:	2380      	movs	r3, #128	@ 0x80
 80145fa:	035b      	lsls	r3, r3, #13
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d204      	bcs.n	801460a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8014600:	69fb      	ldr	r3, [r7, #28]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014606:	60da      	str	r2, [r3, #12]
 8014608:	e0eb      	b.n	80147e2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801460a:	231a      	movs	r3, #26
 801460c:	2218      	movs	r2, #24
 801460e:	189b      	adds	r3, r3, r2
 8014610:	19db      	adds	r3, r3, r7
 8014612:	2201      	movs	r2, #1
 8014614:	701a      	strb	r2, [r3, #0]
 8014616:	e0e4      	b.n	80147e2 <UART_SetConfig+0x50a>
 8014618:	efff69f3 	.word	0xefff69f3
 801461c:	ffffcfff 	.word	0xffffcfff
 8014620:	40004800 	.word	0x40004800
 8014624:	fffff4ff 	.word	0xfffff4ff
 8014628:	40013800 	.word	0x40013800
 801462c:	40021000 	.word	0x40021000
 8014630:	40004400 	.word	0x40004400
 8014634:	40004c00 	.word	0x40004c00
 8014638:	40005000 	.word	0x40005000
 801463c:	003d0900 	.word	0x003d0900
 8014640:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	69da      	ldr	r2, [r3, #28]
 8014648:	2380      	movs	r3, #128	@ 0x80
 801464a:	021b      	lsls	r3, r3, #8
 801464c:	429a      	cmp	r2, r3
 801464e:	d000      	beq.n	8014652 <UART_SetConfig+0x37a>
 8014650:	e070      	b.n	8014734 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8014652:	231b      	movs	r3, #27
 8014654:	2218      	movs	r2, #24
 8014656:	189b      	adds	r3, r3, r2
 8014658:	19db      	adds	r3, r3, r7
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	2b08      	cmp	r3, #8
 801465e:	d822      	bhi.n	80146a6 <UART_SetConfig+0x3ce>
 8014660:	009a      	lsls	r2, r3, #2
 8014662:	4b67      	ldr	r3, [pc, #412]	@ (8014800 <UART_SetConfig+0x528>)
 8014664:	18d3      	adds	r3, r2, r3
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801466a:	f7fd fea1 	bl	80123b0 <HAL_RCC_GetPCLK1Freq>
 801466e:	0003      	movs	r3, r0
 8014670:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014672:	e021      	b.n	80146b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014674:	f7fd feb2 	bl	80123dc <HAL_RCC_GetPCLK2Freq>
 8014678:	0003      	movs	r3, r0
 801467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801467c:	e01c      	b.n	80146b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801467e:	4b61      	ldr	r3, [pc, #388]	@ (8014804 <UART_SetConfig+0x52c>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2210      	movs	r2, #16
 8014684:	4013      	ands	r3, r2
 8014686:	d002      	beq.n	801468e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8014688:	4b5f      	ldr	r3, [pc, #380]	@ (8014808 <UART_SetConfig+0x530>)
 801468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801468c:	e014      	b.n	80146b8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801468e:	4b5f      	ldr	r3, [pc, #380]	@ (801480c <UART_SetConfig+0x534>)
 8014690:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014692:	e011      	b.n	80146b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014694:	f7fd fddc 	bl	8012250 <HAL_RCC_GetSysClockFreq>
 8014698:	0003      	movs	r3, r0
 801469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801469c:	e00c      	b.n	80146b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801469e:	2380      	movs	r3, #128	@ 0x80
 80146a0:	021b      	lsls	r3, r3, #8
 80146a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80146a4:	e008      	b.n	80146b8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80146a6:	2300      	movs	r3, #0
 80146a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80146aa:	231a      	movs	r3, #26
 80146ac:	2218      	movs	r2, #24
 80146ae:	189b      	adds	r3, r3, r2
 80146b0:	19db      	adds	r3, r3, r7
 80146b2:	2201      	movs	r2, #1
 80146b4:	701a      	strb	r2, [r3, #0]
        break;
 80146b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80146b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d100      	bne.n	80146c0 <UART_SetConfig+0x3e8>
 80146be:	e090      	b.n	80147e2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80146c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146c2:	005a      	lsls	r2, r3, #1
 80146c4:	69fb      	ldr	r3, [r7, #28]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	085b      	lsrs	r3, r3, #1
 80146ca:	18d2      	adds	r2, r2, r3
 80146cc:	69fb      	ldr	r3, [r7, #28]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	0019      	movs	r1, r3
 80146d2:	0010      	movs	r0, r2
 80146d4:	f7eb fd66 	bl	80001a4 <__udivsi3>
 80146d8:	0003      	movs	r3, r0
 80146da:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80146dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146de:	2b0f      	cmp	r3, #15
 80146e0:	d921      	bls.n	8014726 <UART_SetConfig+0x44e>
 80146e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146e4:	2380      	movs	r3, #128	@ 0x80
 80146e6:	025b      	lsls	r3, r3, #9
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d21c      	bcs.n	8014726 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80146ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	200e      	movs	r0, #14
 80146f2:	2418      	movs	r4, #24
 80146f4:	1903      	adds	r3, r0, r4
 80146f6:	19db      	adds	r3, r3, r7
 80146f8:	210f      	movs	r1, #15
 80146fa:	438a      	bics	r2, r1
 80146fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80146fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014700:	085b      	lsrs	r3, r3, #1
 8014702:	b29b      	uxth	r3, r3
 8014704:	2207      	movs	r2, #7
 8014706:	4013      	ands	r3, r2
 8014708:	b299      	uxth	r1, r3
 801470a:	1903      	adds	r3, r0, r4
 801470c:	19db      	adds	r3, r3, r7
 801470e:	1902      	adds	r2, r0, r4
 8014710:	19d2      	adds	r2, r2, r7
 8014712:	8812      	ldrh	r2, [r2, #0]
 8014714:	430a      	orrs	r2, r1
 8014716:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8014718:	69fb      	ldr	r3, [r7, #28]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	1902      	adds	r2, r0, r4
 801471e:	19d2      	adds	r2, r2, r7
 8014720:	8812      	ldrh	r2, [r2, #0]
 8014722:	60da      	str	r2, [r3, #12]
 8014724:	e05d      	b.n	80147e2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8014726:	231a      	movs	r3, #26
 8014728:	2218      	movs	r2, #24
 801472a:	189b      	adds	r3, r3, r2
 801472c:	19db      	adds	r3, r3, r7
 801472e:	2201      	movs	r2, #1
 8014730:	701a      	strb	r2, [r3, #0]
 8014732:	e056      	b.n	80147e2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014734:	231b      	movs	r3, #27
 8014736:	2218      	movs	r2, #24
 8014738:	189b      	adds	r3, r3, r2
 801473a:	19db      	adds	r3, r3, r7
 801473c:	781b      	ldrb	r3, [r3, #0]
 801473e:	2b08      	cmp	r3, #8
 8014740:	d822      	bhi.n	8014788 <UART_SetConfig+0x4b0>
 8014742:	009a      	lsls	r2, r3, #2
 8014744:	4b32      	ldr	r3, [pc, #200]	@ (8014810 <UART_SetConfig+0x538>)
 8014746:	18d3      	adds	r3, r2, r3
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801474c:	f7fd fe30 	bl	80123b0 <HAL_RCC_GetPCLK1Freq>
 8014750:	0003      	movs	r3, r0
 8014752:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014754:	e021      	b.n	801479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014756:	f7fd fe41 	bl	80123dc <HAL_RCC_GetPCLK2Freq>
 801475a:	0003      	movs	r3, r0
 801475c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801475e:	e01c      	b.n	801479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014760:	4b28      	ldr	r3, [pc, #160]	@ (8014804 <UART_SetConfig+0x52c>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	2210      	movs	r2, #16
 8014766:	4013      	ands	r3, r2
 8014768:	d002      	beq.n	8014770 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801476a:	4b27      	ldr	r3, [pc, #156]	@ (8014808 <UART_SetConfig+0x530>)
 801476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801476e:	e014      	b.n	801479a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8014770:	4b26      	ldr	r3, [pc, #152]	@ (801480c <UART_SetConfig+0x534>)
 8014772:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014774:	e011      	b.n	801479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014776:	f7fd fd6b 	bl	8012250 <HAL_RCC_GetSysClockFreq>
 801477a:	0003      	movs	r3, r0
 801477c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801477e:	e00c      	b.n	801479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014780:	2380      	movs	r3, #128	@ 0x80
 8014782:	021b      	lsls	r3, r3, #8
 8014784:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014786:	e008      	b.n	801479a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8014788:	2300      	movs	r3, #0
 801478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801478c:	231a      	movs	r3, #26
 801478e:	2218      	movs	r2, #24
 8014790:	189b      	adds	r3, r3, r2
 8014792:	19db      	adds	r3, r3, r7
 8014794:	2201      	movs	r2, #1
 8014796:	701a      	strb	r2, [r3, #0]
        break;
 8014798:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801479a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801479c:	2b00      	cmp	r3, #0
 801479e:	d020      	beq.n	80147e2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	685b      	ldr	r3, [r3, #4]
 80147a4:	085a      	lsrs	r2, r3, #1
 80147a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147a8:	18d2      	adds	r2, r2, r3
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	0019      	movs	r1, r3
 80147b0:	0010      	movs	r0, r2
 80147b2:	f7eb fcf7 	bl	80001a4 <__udivsi3>
 80147b6:	0003      	movs	r3, r0
 80147b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80147ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147bc:	2b0f      	cmp	r3, #15
 80147be:	d90a      	bls.n	80147d6 <UART_SetConfig+0x4fe>
 80147c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80147c2:	2380      	movs	r3, #128	@ 0x80
 80147c4:	025b      	lsls	r3, r3, #9
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d205      	bcs.n	80147d6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80147ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147cc:	b29a      	uxth	r2, r3
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	60da      	str	r2, [r3, #12]
 80147d4:	e005      	b.n	80147e2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80147d6:	231a      	movs	r3, #26
 80147d8:	2218      	movs	r2, #24
 80147da:	189b      	adds	r3, r3, r2
 80147dc:	19db      	adds	r3, r3, r7
 80147de:	2201      	movs	r2, #1
 80147e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	2200      	movs	r2, #0
 80147e6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	2200      	movs	r2, #0
 80147ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80147ee:	231a      	movs	r3, #26
 80147f0:	2218      	movs	r2, #24
 80147f2:	189b      	adds	r3, r3, r2
 80147f4:	19db      	adds	r3, r3, r7
 80147f6:	781b      	ldrb	r3, [r3, #0]
}
 80147f8:	0018      	movs	r0, r3
 80147fa:	46bd      	mov	sp, r7
 80147fc:	b00e      	add	sp, #56	@ 0x38
 80147fe:	bdb0      	pop	{r4, r5, r7, pc}
 8014800:	08020c14 	.word	0x08020c14
 8014804:	40021000 	.word	0x40021000
 8014808:	003d0900 	.word	0x003d0900
 801480c:	00f42400 	.word	0x00f42400
 8014810:	08020c38 	.word	0x08020c38

08014814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014820:	2201      	movs	r2, #1
 8014822:	4013      	ands	r3, r2
 8014824:	d00b      	beq.n	801483e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	4a4a      	ldr	r2, [pc, #296]	@ (8014958 <UART_AdvFeatureConfig+0x144>)
 801482e:	4013      	ands	r3, r2
 8014830:	0019      	movs	r1, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	430a      	orrs	r2, r1
 801483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014842:	2202      	movs	r2, #2
 8014844:	4013      	ands	r3, r2
 8014846:	d00b      	beq.n	8014860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	4a43      	ldr	r2, [pc, #268]	@ (801495c <UART_AdvFeatureConfig+0x148>)
 8014850:	4013      	ands	r3, r2
 8014852:	0019      	movs	r1, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	430a      	orrs	r2, r1
 801485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014864:	2204      	movs	r2, #4
 8014866:	4013      	ands	r3, r2
 8014868:	d00b      	beq.n	8014882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	4a3b      	ldr	r2, [pc, #236]	@ (8014960 <UART_AdvFeatureConfig+0x14c>)
 8014872:	4013      	ands	r3, r2
 8014874:	0019      	movs	r1, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	430a      	orrs	r2, r1
 8014880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014886:	2208      	movs	r2, #8
 8014888:	4013      	ands	r3, r2
 801488a:	d00b      	beq.n	80148a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	4a34      	ldr	r2, [pc, #208]	@ (8014964 <UART_AdvFeatureConfig+0x150>)
 8014894:	4013      	ands	r3, r2
 8014896:	0019      	movs	r1, r3
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	430a      	orrs	r2, r1
 80148a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148a8:	2210      	movs	r2, #16
 80148aa:	4013      	ands	r3, r2
 80148ac:	d00b      	beq.n	80148c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	689b      	ldr	r3, [r3, #8]
 80148b4:	4a2c      	ldr	r2, [pc, #176]	@ (8014968 <UART_AdvFeatureConfig+0x154>)
 80148b6:	4013      	ands	r3, r2
 80148b8:	0019      	movs	r1, r3
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	430a      	orrs	r2, r1
 80148c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ca:	2220      	movs	r2, #32
 80148cc:	4013      	ands	r3, r2
 80148ce:	d00b      	beq.n	80148e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	689b      	ldr	r3, [r3, #8]
 80148d6:	4a25      	ldr	r2, [pc, #148]	@ (801496c <UART_AdvFeatureConfig+0x158>)
 80148d8:	4013      	ands	r3, r2
 80148da:	0019      	movs	r1, r3
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	430a      	orrs	r2, r1
 80148e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ec:	2240      	movs	r2, #64	@ 0x40
 80148ee:	4013      	ands	r3, r2
 80148f0:	d01d      	beq.n	801492e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	4a1d      	ldr	r2, [pc, #116]	@ (8014970 <UART_AdvFeatureConfig+0x15c>)
 80148fa:	4013      	ands	r3, r2
 80148fc:	0019      	movs	r1, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	430a      	orrs	r2, r1
 8014908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801490e:	2380      	movs	r3, #128	@ 0x80
 8014910:	035b      	lsls	r3, r3, #13
 8014912:	429a      	cmp	r2, r3
 8014914:	d10b      	bne.n	801492e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	4a15      	ldr	r2, [pc, #84]	@ (8014974 <UART_AdvFeatureConfig+0x160>)
 801491e:	4013      	ands	r3, r2
 8014920:	0019      	movs	r1, r3
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	430a      	orrs	r2, r1
 801492c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014932:	2280      	movs	r2, #128	@ 0x80
 8014934:	4013      	ands	r3, r2
 8014936:	d00b      	beq.n	8014950 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	4a0e      	ldr	r2, [pc, #56]	@ (8014978 <UART_AdvFeatureConfig+0x164>)
 8014940:	4013      	ands	r3, r2
 8014942:	0019      	movs	r1, r3
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	430a      	orrs	r2, r1
 801494e:	605a      	str	r2, [r3, #4]
  }
}
 8014950:	46c0      	nop			@ (mov r8, r8)
 8014952:	46bd      	mov	sp, r7
 8014954:	b002      	add	sp, #8
 8014956:	bd80      	pop	{r7, pc}
 8014958:	fffdffff 	.word	0xfffdffff
 801495c:	fffeffff 	.word	0xfffeffff
 8014960:	fffbffff 	.word	0xfffbffff
 8014964:	ffff7fff 	.word	0xffff7fff
 8014968:	ffffefff 	.word	0xffffefff
 801496c:	ffffdfff 	.word	0xffffdfff
 8014970:	ffefffff 	.word	0xffefffff
 8014974:	ff9fffff 	.word	0xff9fffff
 8014978:	fff7ffff 	.word	0xfff7ffff

0801497c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b092      	sub	sp, #72	@ 0x48
 8014980:	af02      	add	r7, sp, #8
 8014982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2284      	movs	r2, #132	@ 0x84
 8014988:	2100      	movs	r1, #0
 801498a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801498c:	f7f7 fb46 	bl	800c01c <HAL_GetTick>
 8014990:	0003      	movs	r3, r0
 8014992:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	2208      	movs	r2, #8
 801499c:	4013      	ands	r3, r2
 801499e:	2b08      	cmp	r3, #8
 80149a0:	d12c      	bne.n	80149fc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80149a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149a4:	2280      	movs	r2, #128	@ 0x80
 80149a6:	0391      	lsls	r1, r2, #14
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	4a46      	ldr	r2, [pc, #280]	@ (8014ac4 <UART_CheckIdleState+0x148>)
 80149ac:	9200      	str	r2, [sp, #0]
 80149ae:	2200      	movs	r2, #0
 80149b0:	f000 f88c 	bl	8014acc <UART_WaitOnFlagUntilTimeout>
 80149b4:	1e03      	subs	r3, r0, #0
 80149b6:	d021      	beq.n	80149fc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149b8:	f3ef 8310 	mrs	r3, PRIMASK
 80149bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80149be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80149c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80149c2:	2301      	movs	r3, #1
 80149c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c8:	f383 8810 	msr	PRIMASK, r3
}
 80149cc:	46c0      	nop			@ (mov r8, r8)
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	2180      	movs	r1, #128	@ 0x80
 80149da:	438a      	bics	r2, r1
 80149dc:	601a      	str	r2, [r3, #0]
 80149de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149e4:	f383 8810 	msr	PRIMASK, r3
}
 80149e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2220      	movs	r2, #32
 80149ee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2278      	movs	r2, #120	@ 0x78
 80149f4:	2100      	movs	r1, #0
 80149f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80149f8:	2303      	movs	r3, #3
 80149fa:	e05f      	b.n	8014abc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	2204      	movs	r2, #4
 8014a04:	4013      	ands	r3, r2
 8014a06:	2b04      	cmp	r3, #4
 8014a08:	d146      	bne.n	8014a98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a0c:	2280      	movs	r2, #128	@ 0x80
 8014a0e:	03d1      	lsls	r1, r2, #15
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	4a2c      	ldr	r2, [pc, #176]	@ (8014ac4 <UART_CheckIdleState+0x148>)
 8014a14:	9200      	str	r2, [sp, #0]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f000 f858 	bl	8014acc <UART_WaitOnFlagUntilTimeout>
 8014a1c:	1e03      	subs	r3, r0, #0
 8014a1e:	d03b      	beq.n	8014a98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a20:	f3ef 8310 	mrs	r3, PRIMASK
 8014a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8014a26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	f383 8810 	msr	PRIMASK, r3
}
 8014a34:	46c0      	nop			@ (mov r8, r8)
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	681a      	ldr	r2, [r3, #0]
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	4921      	ldr	r1, [pc, #132]	@ (8014ac8 <UART_CheckIdleState+0x14c>)
 8014a42:	400a      	ands	r2, r1
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	f383 8810 	msr	PRIMASK, r3
}
 8014a50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a52:	f3ef 8310 	mrs	r3, PRIMASK
 8014a56:	61bb      	str	r3, [r7, #24]
  return(result);
 8014a58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	f383 8810 	msr	PRIMASK, r3
}
 8014a66:	46c0      	nop			@ (mov r8, r8)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	689a      	ldr	r2, [r3, #8]
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2101      	movs	r1, #1
 8014a74:	438a      	bics	r2, r1
 8014a76:	609a      	str	r2, [r3, #8]
 8014a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a7c:	6a3b      	ldr	r3, [r7, #32]
 8014a7e:	f383 8810 	msr	PRIMASK, r3
}
 8014a82:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2280      	movs	r2, #128	@ 0x80
 8014a88:	2120      	movs	r1, #32
 8014a8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2278      	movs	r2, #120	@ 0x78
 8014a90:	2100      	movs	r1, #0
 8014a92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014a94:	2303      	movs	r3, #3
 8014a96:	e011      	b.n	8014abc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2220      	movs	r2, #32
 8014a9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2280      	movs	r2, #128	@ 0x80
 8014aa2:	2120      	movs	r1, #32
 8014aa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2200      	movs	r2, #0
 8014ab0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2278      	movs	r2, #120	@ 0x78
 8014ab6:	2100      	movs	r1, #0
 8014ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014aba:	2300      	movs	r3, #0
}
 8014abc:	0018      	movs	r0, r3
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	b010      	add	sp, #64	@ 0x40
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	01ffffff 	.word	0x01ffffff
 8014ac8:	fffffedf 	.word	0xfffffedf

08014acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	603b      	str	r3, [r7, #0]
 8014ad8:	1dfb      	adds	r3, r7, #7
 8014ada:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014adc:	e04b      	b.n	8014b76 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	3301      	adds	r3, #1
 8014ae2:	d048      	beq.n	8014b76 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ae4:	f7f7 fa9a 	bl	800c01c <HAL_GetTick>
 8014ae8:	0002      	movs	r2, r0
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	1ad3      	subs	r3, r2, r3
 8014aee:	69ba      	ldr	r2, [r7, #24]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d302      	bcc.n	8014afa <UART_WaitOnFlagUntilTimeout+0x2e>
 8014af4:	69bb      	ldr	r3, [r7, #24]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d101      	bne.n	8014afe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8014afa:	2303      	movs	r3, #3
 8014afc:	e04b      	b.n	8014b96 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2204      	movs	r2, #4
 8014b06:	4013      	ands	r3, r2
 8014b08:	d035      	beq.n	8014b76 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	69db      	ldr	r3, [r3, #28]
 8014b10:	2208      	movs	r2, #8
 8014b12:	4013      	ands	r3, r2
 8014b14:	2b08      	cmp	r3, #8
 8014b16:	d111      	bne.n	8014b3c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2208      	movs	r2, #8
 8014b1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	0018      	movs	r0, r3
 8014b24:	f000 f9ca 	bl	8014ebc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2284      	movs	r2, #132	@ 0x84
 8014b2c:	2108      	movs	r1, #8
 8014b2e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2278      	movs	r2, #120	@ 0x78
 8014b34:	2100      	movs	r1, #0
 8014b36:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8014b38:	2301      	movs	r3, #1
 8014b3a:	e02c      	b.n	8014b96 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	69da      	ldr	r2, [r3, #28]
 8014b42:	2380      	movs	r3, #128	@ 0x80
 8014b44:	011b      	lsls	r3, r3, #4
 8014b46:	401a      	ands	r2, r3
 8014b48:	2380      	movs	r3, #128	@ 0x80
 8014b4a:	011b      	lsls	r3, r3, #4
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d112      	bne.n	8014b76 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2280      	movs	r2, #128	@ 0x80
 8014b56:	0112      	lsls	r2, r2, #4
 8014b58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	0018      	movs	r0, r3
 8014b5e:	f000 f9ad 	bl	8014ebc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2284      	movs	r2, #132	@ 0x84
 8014b66:	2120      	movs	r1, #32
 8014b68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	2278      	movs	r2, #120	@ 0x78
 8014b6e:	2100      	movs	r1, #0
 8014b70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014b72:	2303      	movs	r3, #3
 8014b74:	e00f      	b.n	8014b96 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	69db      	ldr	r3, [r3, #28]
 8014b7c:	68ba      	ldr	r2, [r7, #8]
 8014b7e:	4013      	ands	r3, r2
 8014b80:	68ba      	ldr	r2, [r7, #8]
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	425a      	negs	r2, r3
 8014b86:	4153      	adcs	r3, r2
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	001a      	movs	r2, r3
 8014b8c:	1dfb      	adds	r3, r7, #7
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d0a4      	beq.n	8014ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014b94:	2300      	movs	r3, #0
}
 8014b96:	0018      	movs	r0, r3
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	b004      	add	sp, #16
 8014b9c:	bd80      	pop	{r7, pc}
	...

08014ba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b090      	sub	sp, #64	@ 0x40
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	1dbb      	adds	r3, r7, #6
 8014bac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	68ba      	ldr	r2, [r7, #8]
 8014bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	1dba      	adds	r2, r7, #6
 8014bb8:	2158      	movs	r1, #88	@ 0x58
 8014bba:	8812      	ldrh	r2, [r2, #0]
 8014bbc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	1dba      	adds	r2, r7, #6
 8014bc2:	215a      	movs	r1, #90	@ 0x5a
 8014bc4:	8812      	ldrh	r2, [r2, #0]
 8014bc6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	689a      	ldr	r2, [r3, #8]
 8014bd2:	2380      	movs	r3, #128	@ 0x80
 8014bd4:	015b      	lsls	r3, r3, #5
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d10d      	bne.n	8014bf6 <UART_Start_Receive_IT+0x56>
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	691b      	ldr	r3, [r3, #16]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d104      	bne.n	8014bec <UART_Start_Receive_IT+0x4c>
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	225c      	movs	r2, #92	@ 0x5c
 8014be6:	4950      	ldr	r1, [pc, #320]	@ (8014d28 <UART_Start_Receive_IT+0x188>)
 8014be8:	5299      	strh	r1, [r3, r2]
 8014bea:	e02e      	b.n	8014c4a <UART_Start_Receive_IT+0xaa>
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	225c      	movs	r2, #92	@ 0x5c
 8014bf0:	21ff      	movs	r1, #255	@ 0xff
 8014bf2:	5299      	strh	r1, [r3, r2]
 8014bf4:	e029      	b.n	8014c4a <UART_Start_Receive_IT+0xaa>
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	689b      	ldr	r3, [r3, #8]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d10d      	bne.n	8014c1a <UART_Start_Receive_IT+0x7a>
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	691b      	ldr	r3, [r3, #16]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d104      	bne.n	8014c10 <UART_Start_Receive_IT+0x70>
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	225c      	movs	r2, #92	@ 0x5c
 8014c0a:	21ff      	movs	r1, #255	@ 0xff
 8014c0c:	5299      	strh	r1, [r3, r2]
 8014c0e:	e01c      	b.n	8014c4a <UART_Start_Receive_IT+0xaa>
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	225c      	movs	r2, #92	@ 0x5c
 8014c14:	217f      	movs	r1, #127	@ 0x7f
 8014c16:	5299      	strh	r1, [r3, r2]
 8014c18:	e017      	b.n	8014c4a <UART_Start_Receive_IT+0xaa>
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	689a      	ldr	r2, [r3, #8]
 8014c1e:	2380      	movs	r3, #128	@ 0x80
 8014c20:	055b      	lsls	r3, r3, #21
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d10d      	bne.n	8014c42 <UART_Start_Receive_IT+0xa2>
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	691b      	ldr	r3, [r3, #16]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d104      	bne.n	8014c38 <UART_Start_Receive_IT+0x98>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	225c      	movs	r2, #92	@ 0x5c
 8014c32:	217f      	movs	r1, #127	@ 0x7f
 8014c34:	5299      	strh	r1, [r3, r2]
 8014c36:	e008      	b.n	8014c4a <UART_Start_Receive_IT+0xaa>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	225c      	movs	r2, #92	@ 0x5c
 8014c3c:	213f      	movs	r1, #63	@ 0x3f
 8014c3e:	5299      	strh	r1, [r3, r2]
 8014c40:	e003      	b.n	8014c4a <UART_Start_Receive_IT+0xaa>
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	225c      	movs	r2, #92	@ 0x5c
 8014c46:	2100      	movs	r1, #0
 8014c48:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	2284      	movs	r2, #132	@ 0x84
 8014c4e:	2100      	movs	r1, #0
 8014c50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2280      	movs	r2, #128	@ 0x80
 8014c56:	2122      	movs	r1, #34	@ 0x22
 8014c58:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8014c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c64:	2301      	movs	r3, #1
 8014c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c6a:	f383 8810 	msr	PRIMASK, r3
}
 8014c6e:	46c0      	nop			@ (mov r8, r8)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	689a      	ldr	r2, [r3, #8]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	2101      	movs	r1, #1
 8014c7c:	430a      	orrs	r2, r1
 8014c7e:	609a      	str	r2, [r3, #8]
 8014c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c82:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c86:	f383 8810 	msr	PRIMASK, r3
}
 8014c8a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	689a      	ldr	r2, [r3, #8]
 8014c90:	2380      	movs	r3, #128	@ 0x80
 8014c92:	015b      	lsls	r3, r3, #5
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d107      	bne.n	8014ca8 <UART_Start_Receive_IT+0x108>
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	691b      	ldr	r3, [r3, #16]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d103      	bne.n	8014ca8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	4a22      	ldr	r2, [pc, #136]	@ (8014d2c <UART_Start_Receive_IT+0x18c>)
 8014ca4:	669a      	str	r2, [r3, #104]	@ 0x68
 8014ca6:	e002      	b.n	8014cae <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	4a21      	ldr	r2, [pc, #132]	@ (8014d30 <UART_Start_Receive_IT+0x190>)
 8014cac:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	691b      	ldr	r3, [r3, #16]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d019      	beq.n	8014cea <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8014cba:	61fb      	str	r3, [r7, #28]
  return(result);
 8014cbc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8014cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cc4:	6a3b      	ldr	r3, [r7, #32]
 8014cc6:	f383 8810 	msr	PRIMASK, r3
}
 8014cca:	46c0      	nop			@ (mov r8, r8)
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	681a      	ldr	r2, [r3, #0]
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	2190      	movs	r1, #144	@ 0x90
 8014cd8:	0049      	lsls	r1, r1, #1
 8014cda:	430a      	orrs	r2, r1
 8014cdc:	601a      	str	r2, [r3, #0]
 8014cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce4:	f383 8810 	msr	PRIMASK, r3
}
 8014ce8:	e018      	b.n	8014d1c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cea:	f3ef 8310 	mrs	r3, PRIMASK
 8014cee:	613b      	str	r3, [r7, #16]
  return(result);
 8014cf0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8014cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	f383 8810 	msr	PRIMASK, r3
}
 8014cfe:	46c0      	nop			@ (mov r8, r8)
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	681a      	ldr	r2, [r3, #0]
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	2120      	movs	r1, #32
 8014d0c:	430a      	orrs	r2, r1
 8014d0e:	601a      	str	r2, [r3, #0]
 8014d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d14:	69bb      	ldr	r3, [r7, #24]
 8014d16:	f383 8810 	msr	PRIMASK, r3
}
 8014d1a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8014d1c:	2300      	movs	r3, #0
}
 8014d1e:	0018      	movs	r0, r3
 8014d20:	46bd      	mov	sp, r7
 8014d22:	b010      	add	sp, #64	@ 0x40
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	46c0      	nop			@ (mov r8, r8)
 8014d28:	000001ff 	.word	0x000001ff
 8014d2c:	080154a1 	.word	0x080154a1
 8014d30:	080152d5 	.word	0x080152d5

08014d34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b090      	sub	sp, #64	@ 0x40
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	60b9      	str	r1, [r7, #8]
 8014d3e:	1dbb      	adds	r3, r7, #6
 8014d40:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	68ba      	ldr	r2, [r7, #8]
 8014d46:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	1dba      	adds	r2, r7, #6
 8014d4c:	2158      	movs	r1, #88	@ 0x58
 8014d4e:	8812      	ldrh	r2, [r2, #0]
 8014d50:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2284      	movs	r2, #132	@ 0x84
 8014d56:	2100      	movs	r1, #0
 8014d58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2280      	movs	r2, #128	@ 0x80
 8014d5e:	2122      	movs	r1, #34	@ 0x22
 8014d60:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d028      	beq.n	8014dbc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8014e68 <UART_Start_Receive_DMA+0x134>)
 8014d70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d76:	4a3d      	ldr	r2, [pc, #244]	@ (8014e6c <UART_Start_Receive_DMA+0x138>)
 8014d78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d7e:	4a3c      	ldr	r2, [pc, #240]	@ (8014e70 <UART_Start_Receive_DMA+0x13c>)
 8014d80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d86:	2200      	movs	r2, #0
 8014d88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	3324      	adds	r3, #36	@ 0x24
 8014d94:	0019      	movs	r1, r3
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d9a:	001a      	movs	r2, r3
 8014d9c:	1dbb      	adds	r3, r7, #6
 8014d9e:	881b      	ldrh	r3, [r3, #0]
 8014da0:	f7f7 fe5c 	bl	800ca5c <HAL_DMA_Start_IT>
 8014da4:	1e03      	subs	r3, r0, #0
 8014da6:	d009      	beq.n	8014dbc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2284      	movs	r2, #132	@ 0x84
 8014dac:	2110      	movs	r1, #16
 8014dae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2280      	movs	r2, #128	@ 0x80
 8014db4:	2120      	movs	r1, #32
 8014db6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8014db8:	2301      	movs	r3, #1
 8014dba:	e050      	b.n	8014e5e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	691b      	ldr	r3, [r3, #16]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d019      	beq.n	8014df8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8014dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014dce:	2301      	movs	r3, #1
 8014dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd4:	f383 8810 	msr	PRIMASK, r3
}
 8014dd8:	46c0      	nop			@ (mov r8, r8)
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	681a      	ldr	r2, [r3, #0]
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2180      	movs	r1, #128	@ 0x80
 8014de6:	0049      	lsls	r1, r1, #1
 8014de8:	430a      	orrs	r2, r1
 8014dea:	601a      	str	r2, [r3, #0]
 8014dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014df2:	f383 8810 	msr	PRIMASK, r3
}
 8014df6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014df8:	f3ef 8310 	mrs	r3, PRIMASK
 8014dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8014dfe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014e02:	2301      	movs	r3, #1
 8014e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	f383 8810 	msr	PRIMASK, r3
}
 8014e0c:	46c0      	nop			@ (mov r8, r8)
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	689a      	ldr	r2, [r3, #8]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	2101      	movs	r1, #1
 8014e1a:	430a      	orrs	r2, r1
 8014e1c:	609a      	str	r2, [r3, #8]
 8014e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e22:	69bb      	ldr	r3, [r7, #24]
 8014e24:	f383 8810 	msr	PRIMASK, r3
}
 8014e28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8014e2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8014e30:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e34:	2301      	movs	r3, #1
 8014e36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e38:	6a3b      	ldr	r3, [r7, #32]
 8014e3a:	f383 8810 	msr	PRIMASK, r3
}
 8014e3e:	46c0      	nop			@ (mov r8, r8)
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	689a      	ldr	r2, [r3, #8]
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2140      	movs	r1, #64	@ 0x40
 8014e4c:	430a      	orrs	r2, r1
 8014e4e:	609a      	str	r2, [r3, #8]
 8014e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e56:	f383 8810 	msr	PRIMASK, r3
}
 8014e5a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8014e5c:	2300      	movs	r3, #0
}
 8014e5e:	0018      	movs	r0, r3
 8014e60:	46bd      	mov	sp, r7
 8014e62:	b010      	add	sp, #64	@ 0x40
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	46c0      	nop			@ (mov r8, r8)
 8014e68:	08015045 	.word	0x08015045
 8014e6c:	08015179 	.word	0x08015179
 8014e70:	080151c1 	.word	0x080151c1

08014e74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8014e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8014e82:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014e84:	617b      	str	r3, [r7, #20]
 8014e86:	2301      	movs	r3, #1
 8014e88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	f383 8810 	msr	PRIMASK, r3
}
 8014e90:	46c0      	nop			@ (mov r8, r8)
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	681a      	ldr	r2, [r3, #0]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	21c0      	movs	r1, #192	@ 0xc0
 8014e9e:	438a      	bics	r2, r1
 8014ea0:	601a      	str	r2, [r3, #0]
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	f383 8810 	msr	PRIMASK, r3
}
 8014eac:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2220      	movs	r2, #32
 8014eb2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8014eb4:	46c0      	nop			@ (mov r8, r8)
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	b006      	add	sp, #24
 8014eba:	bd80      	pop	{r7, pc}

08014ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b08e      	sub	sp, #56	@ 0x38
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8014ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8014eca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8014ece:	2301      	movs	r3, #1
 8014ed0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ed2:	69bb      	ldr	r3, [r7, #24]
 8014ed4:	f383 8810 	msr	PRIMASK, r3
}
 8014ed8:	46c0      	nop			@ (mov r8, r8)
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	4926      	ldr	r1, [pc, #152]	@ (8014f80 <UART_EndRxTransfer+0xc4>)
 8014ee6:	400a      	ands	r2, r1
 8014ee8:	601a      	str	r2, [r3, #0]
 8014eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	f383 8810 	msr	PRIMASK, r3
}
 8014ef4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8014efa:	623b      	str	r3, [r7, #32]
  return(result);
 8014efc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f00:	2301      	movs	r3, #1
 8014f02:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f06:	f383 8810 	msr	PRIMASK, r3
}
 8014f0a:	46c0      	nop			@ (mov r8, r8)
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	689a      	ldr	r2, [r3, #8]
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	2101      	movs	r1, #1
 8014f18:	438a      	bics	r2, r1
 8014f1a:	609a      	str	r2, [r3, #8]
 8014f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f22:	f383 8810 	msr	PRIMASK, r3
}
 8014f26:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	d118      	bne.n	8014f62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f30:	f3ef 8310 	mrs	r3, PRIMASK
 8014f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8014f36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	f383 8810 	msr	PRIMASK, r3
}
 8014f44:	46c0      	nop			@ (mov r8, r8)
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2110      	movs	r1, #16
 8014f52:	438a      	bics	r2, r1
 8014f54:	601a      	str	r2, [r3, #0]
 8014f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	f383 8810 	msr	PRIMASK, r3
}
 8014f60:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2280      	movs	r2, #128	@ 0x80
 8014f66:	2120      	movs	r1, #32
 8014f68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2200      	movs	r2, #0
 8014f74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8014f76:	46c0      	nop			@ (mov r8, r8)
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	b00e      	add	sp, #56	@ 0x38
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	46c0      	nop			@ (mov r8, r8)
 8014f80:	fffffedf 	.word	0xfffffedf

08014f84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b08c      	sub	sp, #48	@ 0x30
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	2220      	movs	r2, #32
 8014f9a:	4013      	ands	r3, r2
 8014f9c:	d135      	bne.n	801500a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8014f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fa0:	2252      	movs	r2, #82	@ 0x52
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8014faa:	60fb      	str	r3, [r7, #12]
  return(result);
 8014fac:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	f383 8810 	msr	PRIMASK, r3
}
 8014fba:	46c0      	nop			@ (mov r8, r8)
 8014fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	689a      	ldr	r2, [r3, #8]
 8014fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	2180      	movs	r1, #128	@ 0x80
 8014fc8:	438a      	bics	r2, r1
 8014fca:	609a      	str	r2, [r3, #8]
 8014fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	f383 8810 	msr	PRIMASK, r3
}
 8014fd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8014fdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8014fde:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	f383 8810 	msr	PRIMASK, r3
}
 8014fec:	46c0      	nop			@ (mov r8, r8)
 8014fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2140      	movs	r1, #64	@ 0x40
 8014ffa:	430a      	orrs	r2, r1
 8014ffc:	601a      	str	r2, [r3, #0]
 8014ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015000:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015002:	6a3b      	ldr	r3, [r7, #32]
 8015004:	f383 8810 	msr	PRIMASK, r3
}
 8015008:	e006      	b.n	8015018 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801500c:	228c      	movs	r2, #140	@ 0x8c
 801500e:	589b      	ldr	r3, [r3, r2]
 8015010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015012:	0010      	movs	r0, r2
 8015014:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015016:	46c0      	nop			@ (mov r8, r8)
 8015018:	46c0      	nop			@ (mov r8, r8)
 801501a:	46bd      	mov	sp, r7
 801501c:	b00c      	add	sp, #48	@ 0x30
 801501e:	bd80      	pop	{r7, pc}

08015020 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801502c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	2288      	movs	r2, #136	@ 0x88
 8015032:	589b      	ldr	r3, [r3, r2]
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	0010      	movs	r0, r2
 8015038:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801503a:	46c0      	nop			@ (mov r8, r8)
 801503c:	46bd      	mov	sp, r7
 801503e:	b004      	add	sp, #16
 8015040:	bd80      	pop	{r7, pc}
	...

08015044 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b094      	sub	sp, #80	@ 0x50
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015050:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2220      	movs	r2, #32
 801505a:	4013      	ands	r3, r2
 801505c:	d16f      	bne.n	801513e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801505e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015060:	225a      	movs	r2, #90	@ 0x5a
 8015062:	2100      	movs	r1, #0
 8015064:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015066:	f3ef 8310 	mrs	r3, PRIMASK
 801506a:	61bb      	str	r3, [r7, #24]
  return(result);
 801506c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801506e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015070:	2301      	movs	r3, #1
 8015072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015074:	69fb      	ldr	r3, [r7, #28]
 8015076:	f383 8810 	msr	PRIMASK, r3
}
 801507a:	46c0      	nop			@ (mov r8, r8)
 801507c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	493b      	ldr	r1, [pc, #236]	@ (8015174 <UART_DMAReceiveCplt+0x130>)
 8015088:	400a      	ands	r2, r1
 801508a:	601a      	str	r2, [r3, #0]
 801508c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801508e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015090:	6a3b      	ldr	r3, [r7, #32]
 8015092:	f383 8810 	msr	PRIMASK, r3
}
 8015096:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015098:	f3ef 8310 	mrs	r3, PRIMASK
 801509c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80150a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80150a2:	2301      	movs	r3, #1
 80150a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150a8:	f383 8810 	msr	PRIMASK, r3
}
 80150ac:	46c0      	nop			@ (mov r8, r8)
 80150ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	689a      	ldr	r2, [r3, #8]
 80150b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2101      	movs	r1, #1
 80150ba:	438a      	bics	r2, r1
 80150bc:	609a      	str	r2, [r3, #8]
 80150be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80150c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c4:	f383 8810 	msr	PRIMASK, r3
}
 80150c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150ca:	f3ef 8310 	mrs	r3, PRIMASK
 80150ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80150d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80150d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80150d4:	2301      	movs	r3, #1
 80150d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150da:	f383 8810 	msr	PRIMASK, r3
}
 80150de:	46c0      	nop			@ (mov r8, r8)
 80150e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	689a      	ldr	r2, [r3, #8]
 80150e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	2140      	movs	r1, #64	@ 0x40
 80150ec:	438a      	bics	r2, r1
 80150ee:	609a      	str	r2, [r3, #8]
 80150f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80150f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150f6:	f383 8810 	msr	PRIMASK, r3
}
 80150fa:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80150fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80150fe:	2280      	movs	r2, #128	@ 0x80
 8015100:	2120      	movs	r1, #32
 8015102:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015108:	2b01      	cmp	r3, #1
 801510a:	d118      	bne.n	801513e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801510c:	f3ef 8310 	mrs	r3, PRIMASK
 8015110:	60fb      	str	r3, [r7, #12]
  return(result);
 8015112:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015116:	2301      	movs	r3, #1
 8015118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	f383 8810 	msr	PRIMASK, r3
}
 8015120:	46c0      	nop			@ (mov r8, r8)
 8015122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2110      	movs	r1, #16
 801512e:	438a      	bics	r2, r1
 8015130:	601a      	str	r2, [r3, #0]
 8015132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	f383 8810 	msr	PRIMASK, r3
}
 801513c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801513e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015140:	2200      	movs	r2, #0
 8015142:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015148:	2b01      	cmp	r3, #1
 801514a:	d109      	bne.n	8015160 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801514c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801514e:	22ac      	movs	r2, #172	@ 0xac
 8015150:	589b      	ldr	r3, [r3, r2]
 8015152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015154:	2158      	movs	r1, #88	@ 0x58
 8015156:	5a51      	ldrh	r1, [r2, r1]
 8015158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801515a:	0010      	movs	r0, r2
 801515c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801515e:	e005      	b.n	801516c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8015160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015162:	2294      	movs	r2, #148	@ 0x94
 8015164:	589b      	ldr	r3, [r3, r2]
 8015166:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015168:	0010      	movs	r0, r2
 801516a:	4798      	blx	r3
}
 801516c:	46c0      	nop			@ (mov r8, r8)
 801516e:	46bd      	mov	sp, r7
 8015170:	b014      	add	sp, #80	@ 0x50
 8015172:	bd80      	pop	{r7, pc}
 8015174:	fffffeff 	.word	0xfffffeff

08015178 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015184:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	2201      	movs	r2, #1
 801518a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015190:	2b01      	cmp	r3, #1
 8015192:	d10b      	bne.n	80151ac <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	22ac      	movs	r2, #172	@ 0xac
 8015198:	589b      	ldr	r3, [r3, r2]
 801519a:	68fa      	ldr	r2, [r7, #12]
 801519c:	2158      	movs	r1, #88	@ 0x58
 801519e:	5a52      	ldrh	r2, [r2, r1]
 80151a0:	0852      	lsrs	r2, r2, #1
 80151a2:	b291      	uxth	r1, r2
 80151a4:	68fa      	ldr	r2, [r7, #12]
 80151a6:	0010      	movs	r0, r2
 80151a8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80151aa:	e005      	b.n	80151b8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	2290      	movs	r2, #144	@ 0x90
 80151b0:	589b      	ldr	r3, [r3, r2]
 80151b2:	68fa      	ldr	r2, [r7, #12]
 80151b4:	0010      	movs	r0, r2
 80151b6:	4798      	blx	r3
}
 80151b8:	46c0      	nop			@ (mov r8, r8)
 80151ba:	46bd      	mov	sp, r7
 80151bc:	b004      	add	sp, #16
 80151be:	bd80      	pop	{r7, pc}

080151c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b086      	sub	sp, #24
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	2280      	movs	r2, #128	@ 0x80
 80151d8:	589b      	ldr	r3, [r3, r2]
 80151da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	689b      	ldr	r3, [r3, #8]
 80151e2:	2280      	movs	r2, #128	@ 0x80
 80151e4:	4013      	ands	r3, r2
 80151e6:	2b80      	cmp	r3, #128	@ 0x80
 80151e8:	d10a      	bne.n	8015200 <UART_DMAError+0x40>
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	2b21      	cmp	r3, #33	@ 0x21
 80151ee:	d107      	bne.n	8015200 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	2252      	movs	r2, #82	@ 0x52
 80151f4:	2100      	movs	r1, #0
 80151f6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	0018      	movs	r0, r3
 80151fc:	f7ff fe3a 	bl	8014e74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	689b      	ldr	r3, [r3, #8]
 8015206:	2240      	movs	r2, #64	@ 0x40
 8015208:	4013      	ands	r3, r2
 801520a:	2b40      	cmp	r3, #64	@ 0x40
 801520c:	d10a      	bne.n	8015224 <UART_DMAError+0x64>
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2b22      	cmp	r3, #34	@ 0x22
 8015212:	d107      	bne.n	8015224 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	225a      	movs	r2, #90	@ 0x5a
 8015218:	2100      	movs	r1, #0
 801521a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801521c:	697b      	ldr	r3, [r7, #20]
 801521e:	0018      	movs	r0, r3
 8015220:	f7ff fe4c 	bl	8014ebc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	2284      	movs	r2, #132	@ 0x84
 8015228:	589b      	ldr	r3, [r3, r2]
 801522a:	2210      	movs	r2, #16
 801522c:	431a      	orrs	r2, r3
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	2184      	movs	r1, #132	@ 0x84
 8015232:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8015234:	697b      	ldr	r3, [r7, #20]
 8015236:	2298      	movs	r2, #152	@ 0x98
 8015238:	589b      	ldr	r3, [r3, r2]
 801523a:	697a      	ldr	r2, [r7, #20]
 801523c:	0010      	movs	r0, r2
 801523e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015240:	46c0      	nop			@ (mov r8, r8)
 8015242:	46bd      	mov	sp, r7
 8015244:	b006      	add	sp, #24
 8015246:	bd80      	pop	{r7, pc}

08015248 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	225a      	movs	r2, #90	@ 0x5a
 801525a:	2100      	movs	r1, #0
 801525c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	2252      	movs	r2, #82	@ 0x52
 8015262:	2100      	movs	r1, #0
 8015264:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2298      	movs	r2, #152	@ 0x98
 801526a:	589b      	ldr	r3, [r3, r2]
 801526c:	68fa      	ldr	r2, [r7, #12]
 801526e:	0010      	movs	r0, r2
 8015270:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015272:	46c0      	nop			@ (mov r8, r8)
 8015274:	46bd      	mov	sp, r7
 8015276:	b004      	add	sp, #16
 8015278:	bd80      	pop	{r7, pc}

0801527a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801527a:	b580      	push	{r7, lr}
 801527c:	b086      	sub	sp, #24
 801527e:	af00      	add	r7, sp, #0
 8015280:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015282:	f3ef 8310 	mrs	r3, PRIMASK
 8015286:	60bb      	str	r3, [r7, #8]
  return(result);
 8015288:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801528a:	617b      	str	r3, [r7, #20]
 801528c:	2301      	movs	r3, #1
 801528e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f383 8810 	msr	PRIMASK, r3
}
 8015296:	46c0      	nop			@ (mov r8, r8)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	681a      	ldr	r2, [r3, #0]
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	2140      	movs	r1, #64	@ 0x40
 80152a4:	438a      	bics	r2, r1
 80152a6:	601a      	str	r2, [r3, #0]
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	f383 8810 	msr	PRIMASK, r3
}
 80152b2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2220      	movs	r2, #32
 80152b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2200      	movs	r2, #0
 80152be:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	228c      	movs	r2, #140	@ 0x8c
 80152c4:	589b      	ldr	r3, [r3, r2]
 80152c6:	687a      	ldr	r2, [r7, #4]
 80152c8:	0010      	movs	r0, r2
 80152ca:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80152cc:	46c0      	nop			@ (mov r8, r8)
 80152ce:	46bd      	mov	sp, r7
 80152d0:	b006      	add	sp, #24
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b094      	sub	sp, #80	@ 0x50
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80152dc:	204e      	movs	r0, #78	@ 0x4e
 80152de:	183b      	adds	r3, r7, r0
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	215c      	movs	r1, #92	@ 0x5c
 80152e4:	5a52      	ldrh	r2, [r2, r1]
 80152e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2280      	movs	r2, #128	@ 0x80
 80152ec:	589b      	ldr	r3, [r3, r2]
 80152ee:	2b22      	cmp	r3, #34	@ 0x22
 80152f0:	d000      	beq.n	80152f4 <UART_RxISR_8BIT+0x20>
 80152f2:	e0c2      	b.n	801547a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152fa:	214c      	movs	r1, #76	@ 0x4c
 80152fc:	187b      	adds	r3, r7, r1
 80152fe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015300:	187b      	adds	r3, r7, r1
 8015302:	881b      	ldrh	r3, [r3, #0]
 8015304:	b2da      	uxtb	r2, r3
 8015306:	183b      	adds	r3, r7, r0
 8015308:	881b      	ldrh	r3, [r3, #0]
 801530a:	b2d9      	uxtb	r1, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015310:	400a      	ands	r2, r1
 8015312:	b2d2      	uxtb	r2, r2
 8015314:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801531a:	1c5a      	adds	r2, r3, #1
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	225a      	movs	r2, #90	@ 0x5a
 8015324:	5a9b      	ldrh	r3, [r3, r2]
 8015326:	b29b      	uxth	r3, r3
 8015328:	3b01      	subs	r3, #1
 801532a:	b299      	uxth	r1, r3
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	225a      	movs	r2, #90	@ 0x5a
 8015330:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	225a      	movs	r2, #90	@ 0x5a
 8015336:	5a9b      	ldrh	r3, [r3, r2]
 8015338:	b29b      	uxth	r3, r3
 801533a:	2b00      	cmp	r3, #0
 801533c:	d000      	beq.n	8015340 <UART_RxISR_8BIT+0x6c>
 801533e:	e0a4      	b.n	801548a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015340:	f3ef 8310 	mrs	r3, PRIMASK
 8015344:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015348:	64bb      	str	r3, [r7, #72]	@ 0x48
 801534a:	2301      	movs	r3, #1
 801534c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015350:	f383 8810 	msr	PRIMASK, r3
}
 8015354:	46c0      	nop			@ (mov r8, r8)
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	494c      	ldr	r1, [pc, #304]	@ (8015494 <UART_RxISR_8BIT+0x1c0>)
 8015362:	400a      	ands	r2, r1
 8015364:	601a      	str	r2, [r3, #0]
 8015366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801536a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801536c:	f383 8810 	msr	PRIMASK, r3
}
 8015370:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015372:	f3ef 8310 	mrs	r3, PRIMASK
 8015376:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801537a:	647b      	str	r3, [r7, #68]	@ 0x44
 801537c:	2301      	movs	r3, #1
 801537e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015382:	f383 8810 	msr	PRIMASK, r3
}
 8015386:	46c0      	nop			@ (mov r8, r8)
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	689a      	ldr	r2, [r3, #8]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2101      	movs	r1, #1
 8015394:	438a      	bics	r2, r1
 8015396:	609a      	str	r2, [r3, #8]
 8015398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801539a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801539e:	f383 8810 	msr	PRIMASK, r3
}
 80153a2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2280      	movs	r2, #128	@ 0x80
 80153a8:	2120      	movs	r1, #32
 80153aa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2200      	movs	r2, #0
 80153b0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2200      	movs	r2, #0
 80153b6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	4a36      	ldr	r2, [pc, #216]	@ (8015498 <UART_RxISR_8BIT+0x1c4>)
 80153be:	4293      	cmp	r3, r2
 80153c0:	d01f      	beq.n	8015402 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	685a      	ldr	r2, [r3, #4]
 80153c8:	2380      	movs	r3, #128	@ 0x80
 80153ca:	041b      	lsls	r3, r3, #16
 80153cc:	4013      	ands	r3, r2
 80153ce:	d018      	beq.n	8015402 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80153d0:	f3ef 8310 	mrs	r3, PRIMASK
 80153d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80153d6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80153d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80153da:	2301      	movs	r3, #1
 80153dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153de:	69fb      	ldr	r3, [r7, #28]
 80153e0:	f383 8810 	msr	PRIMASK, r3
}
 80153e4:	46c0      	nop			@ (mov r8, r8)
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	492a      	ldr	r1, [pc, #168]	@ (801549c <UART_RxISR_8BIT+0x1c8>)
 80153f2:	400a      	ands	r2, r1
 80153f4:	601a      	str	r2, [r3, #0]
 80153f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80153f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153fa:	6a3b      	ldr	r3, [r7, #32]
 80153fc:	f383 8810 	msr	PRIMASK, r3
}
 8015400:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015406:	2b01      	cmp	r3, #1
 8015408:	d130      	bne.n	801546c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2200      	movs	r2, #0
 801540e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015410:	f3ef 8310 	mrs	r3, PRIMASK
 8015414:	60fb      	str	r3, [r7, #12]
  return(result);
 8015416:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801541a:	2301      	movs	r3, #1
 801541c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	f383 8810 	msr	PRIMASK, r3
}
 8015424:	46c0      	nop			@ (mov r8, r8)
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2110      	movs	r1, #16
 8015432:	438a      	bics	r2, r1
 8015434:	601a      	str	r2, [r3, #0]
 8015436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	f383 8810 	msr	PRIMASK, r3
}
 8015440:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	69db      	ldr	r3, [r3, #28]
 8015448:	2210      	movs	r2, #16
 801544a:	4013      	ands	r3, r2
 801544c:	2b10      	cmp	r3, #16
 801544e:	d103      	bne.n	8015458 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	2210      	movs	r2, #16
 8015456:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	22ac      	movs	r2, #172	@ 0xac
 801545c:	589b      	ldr	r3, [r3, r2]
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	2158      	movs	r1, #88	@ 0x58
 8015462:	5a51      	ldrh	r1, [r2, r1]
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	0010      	movs	r0, r2
 8015468:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801546a:	e00e      	b.n	801548a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2294      	movs	r2, #148	@ 0x94
 8015470:	589b      	ldr	r3, [r3, r2]
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	0010      	movs	r0, r2
 8015476:	4798      	blx	r3
}
 8015478:	e007      	b.n	801548a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	699a      	ldr	r2, [r3, #24]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2108      	movs	r1, #8
 8015486:	430a      	orrs	r2, r1
 8015488:	619a      	str	r2, [r3, #24]
}
 801548a:	46c0      	nop			@ (mov r8, r8)
 801548c:	46bd      	mov	sp, r7
 801548e:	b014      	add	sp, #80	@ 0x50
 8015490:	bd80      	pop	{r7, pc}
 8015492:	46c0      	nop			@ (mov r8, r8)
 8015494:	fffffedf 	.word	0xfffffedf
 8015498:	40004800 	.word	0x40004800
 801549c:	fbffffff 	.word	0xfbffffff

080154a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b094      	sub	sp, #80	@ 0x50
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80154a8:	204e      	movs	r0, #78	@ 0x4e
 80154aa:	183b      	adds	r3, r7, r0
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	215c      	movs	r1, #92	@ 0x5c
 80154b0:	5a52      	ldrh	r2, [r2, r1]
 80154b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2280      	movs	r2, #128	@ 0x80
 80154b8:	589b      	ldr	r3, [r3, r2]
 80154ba:	2b22      	cmp	r3, #34	@ 0x22
 80154bc:	d000      	beq.n	80154c0 <UART_RxISR_16BIT+0x20>
 80154be:	e0c2      	b.n	8015646 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80154c6:	214c      	movs	r1, #76	@ 0x4c
 80154c8:	187b      	adds	r3, r7, r1
 80154ca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80154d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80154d2:	187b      	adds	r3, r7, r1
 80154d4:	183a      	adds	r2, r7, r0
 80154d6:	881b      	ldrh	r3, [r3, #0]
 80154d8:	8812      	ldrh	r2, [r2, #0]
 80154da:	4013      	ands	r3, r2
 80154dc:	b29a      	uxth	r2, r3
 80154de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80154e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80154e6:	1c9a      	adds	r2, r3, #2
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	225a      	movs	r2, #90	@ 0x5a
 80154f0:	5a9b      	ldrh	r3, [r3, r2]
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	3b01      	subs	r3, #1
 80154f6:	b299      	uxth	r1, r3
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	225a      	movs	r2, #90	@ 0x5a
 80154fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	225a      	movs	r2, #90	@ 0x5a
 8015502:	5a9b      	ldrh	r3, [r3, r2]
 8015504:	b29b      	uxth	r3, r3
 8015506:	2b00      	cmp	r3, #0
 8015508:	d000      	beq.n	801550c <UART_RxISR_16BIT+0x6c>
 801550a:	e0a4      	b.n	8015656 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801550c:	f3ef 8310 	mrs	r3, PRIMASK
 8015510:	623b      	str	r3, [r7, #32]
  return(result);
 8015512:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015514:	647b      	str	r3, [r7, #68]	@ 0x44
 8015516:	2301      	movs	r3, #1
 8015518:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801551c:	f383 8810 	msr	PRIMASK, r3
}
 8015520:	46c0      	nop			@ (mov r8, r8)
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	681a      	ldr	r2, [r3, #0]
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	494c      	ldr	r1, [pc, #304]	@ (8015660 <UART_RxISR_16BIT+0x1c0>)
 801552e:	400a      	ands	r2, r1
 8015530:	601a      	str	r2, [r3, #0]
 8015532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015534:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015538:	f383 8810 	msr	PRIMASK, r3
}
 801553c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801553e:	f3ef 8310 	mrs	r3, PRIMASK
 8015542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8015544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015546:	643b      	str	r3, [r7, #64]	@ 0x40
 8015548:	2301      	movs	r3, #1
 801554a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554e:	f383 8810 	msr	PRIMASK, r3
}
 8015552:	46c0      	nop			@ (mov r8, r8)
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	689a      	ldr	r2, [r3, #8]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	2101      	movs	r1, #1
 8015560:	438a      	bics	r2, r1
 8015562:	609a      	str	r2, [r3, #8]
 8015564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015566:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801556a:	f383 8810 	msr	PRIMASK, r3
}
 801556e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2280      	movs	r2, #128	@ 0x80
 8015574:	2120      	movs	r1, #32
 8015576:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2200      	movs	r2, #0
 801557c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2200      	movs	r2, #0
 8015582:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	4a36      	ldr	r2, [pc, #216]	@ (8015664 <UART_RxISR_16BIT+0x1c4>)
 801558a:	4293      	cmp	r3, r2
 801558c:	d01f      	beq.n	80155ce <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	685a      	ldr	r2, [r3, #4]
 8015594:	2380      	movs	r3, #128	@ 0x80
 8015596:	041b      	lsls	r3, r3, #16
 8015598:	4013      	ands	r3, r2
 801559a:	d018      	beq.n	80155ce <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801559c:	f3ef 8310 	mrs	r3, PRIMASK
 80155a0:	617b      	str	r3, [r7, #20]
  return(result);
 80155a2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80155a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80155a6:	2301      	movs	r3, #1
 80155a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	f383 8810 	msr	PRIMASK, r3
}
 80155b0:	46c0      	nop			@ (mov r8, r8)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	681a      	ldr	r2, [r3, #0]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	492a      	ldr	r1, [pc, #168]	@ (8015668 <UART_RxISR_16BIT+0x1c8>)
 80155be:	400a      	ands	r2, r1
 80155c0:	601a      	str	r2, [r3, #0]
 80155c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	f383 8810 	msr	PRIMASK, r3
}
 80155cc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	d130      	bne.n	8015638 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2200      	movs	r2, #0
 80155da:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80155dc:	f3ef 8310 	mrs	r3, PRIMASK
 80155e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80155e2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80155e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80155e6:	2301      	movs	r3, #1
 80155e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	f383 8810 	msr	PRIMASK, r3
}
 80155f0:	46c0      	nop			@ (mov r8, r8)
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2110      	movs	r1, #16
 80155fe:	438a      	bics	r2, r1
 8015600:	601a      	str	r2, [r3, #0]
 8015602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015606:	693b      	ldr	r3, [r7, #16]
 8015608:	f383 8810 	msr	PRIMASK, r3
}
 801560c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	69db      	ldr	r3, [r3, #28]
 8015614:	2210      	movs	r2, #16
 8015616:	4013      	ands	r3, r2
 8015618:	2b10      	cmp	r3, #16
 801561a:	d103      	bne.n	8015624 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2210      	movs	r2, #16
 8015622:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	22ac      	movs	r2, #172	@ 0xac
 8015628:	589b      	ldr	r3, [r3, r2]
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	2158      	movs	r1, #88	@ 0x58
 801562e:	5a51      	ldrh	r1, [r2, r1]
 8015630:	687a      	ldr	r2, [r7, #4]
 8015632:	0010      	movs	r0, r2
 8015634:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015636:	e00e      	b.n	8015656 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2294      	movs	r2, #148	@ 0x94
 801563c:	589b      	ldr	r3, [r3, r2]
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	0010      	movs	r0, r2
 8015642:	4798      	blx	r3
}
 8015644:	e007      	b.n	8015656 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	699a      	ldr	r2, [r3, #24]
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	2108      	movs	r1, #8
 8015652:	430a      	orrs	r2, r1
 8015654:	619a      	str	r2, [r3, #24]
}
 8015656:	46c0      	nop			@ (mov r8, r8)
 8015658:	46bd      	mov	sp, r7
 801565a:	b014      	add	sp, #80	@ 0x50
 801565c:	bd80      	pop	{r7, pc}
 801565e:	46c0      	nop			@ (mov r8, r8)
 8015660:	fffffedf 	.word	0xfffffedf
 8015664:	40004800 	.word	0x40004800
 8015668:	fbffffff 	.word	0xfbffffff

0801566c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015674:	46c0      	nop			@ (mov r8, r8)
 8015676:	46bd      	mov	sp, r7
 8015678:	b002      	add	sp, #8
 801567a:	bd80      	pop	{r7, pc}

0801567c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2244      	movs	r2, #68	@ 0x44
 8015688:	2100      	movs	r1, #0
 801568a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801568c:	4b05      	ldr	r3, [pc, #20]	@ (80156a4 <USB_EnableGlobalInt+0x28>)
 801568e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	b299      	uxth	r1, r3
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	2240      	movs	r2, #64	@ 0x40
 8015698:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801569a:	2300      	movs	r3, #0
}
 801569c:	0018      	movs	r0, r3
 801569e:	46bd      	mov	sp, r7
 80156a0:	b004      	add	sp, #16
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	0000bf80 	.word	0x0000bf80

080156a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b084      	sub	sp, #16
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80156b0:	4b09      	ldr	r3, [pc, #36]	@ (80156d8 <USB_DisableGlobalInt+0x30>)
 80156b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2240      	movs	r2, #64	@ 0x40
 80156b8:	5a9b      	ldrh	r3, [r3, r2]
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	68fa      	ldr	r2, [r7, #12]
 80156be:	b292      	uxth	r2, r2
 80156c0:	43d2      	mvns	r2, r2
 80156c2:	b292      	uxth	r2, r2
 80156c4:	4013      	ands	r3, r2
 80156c6:	b299      	uxth	r1, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2240      	movs	r2, #64	@ 0x40
 80156cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80156ce:	2300      	movs	r3, #0
}
 80156d0:	0018      	movs	r0, r3
 80156d2:	46bd      	mov	sp, r7
 80156d4:	b004      	add	sp, #16
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	0000bf80 	.word	0x0000bf80

080156dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80156dc:	b084      	sub	sp, #16
 80156de:	b590      	push	{r4, r7, lr}
 80156e0:	b083      	sub	sp, #12
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	6078      	str	r0, [r7, #4]
 80156e6:	2004      	movs	r0, #4
 80156e8:	2410      	movs	r4, #16
 80156ea:	1900      	adds	r0, r0, r4
 80156ec:	2408      	movs	r4, #8
 80156ee:	46a4      	mov	ip, r4
 80156f0:	44bc      	add	ip, r7
 80156f2:	4460      	add	r0, ip
 80156f4:	6001      	str	r1, [r0, #0]
 80156f6:	6042      	str	r2, [r0, #4]
 80156f8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2240      	movs	r2, #64	@ 0x40
 80156fe:	2101      	movs	r1, #1
 8015700:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2240      	movs	r2, #64	@ 0x40
 8015706:	2100      	movs	r1, #0
 8015708:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2244      	movs	r2, #68	@ 0x44
 801570e:	2100      	movs	r1, #0
 8015710:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2250      	movs	r2, #80	@ 0x50
 8015716:	2100      	movs	r1, #0
 8015718:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801571a:	2300      	movs	r3, #0
}
 801571c:	0018      	movs	r0, r3
 801571e:	46bd      	mov	sp, r7
 8015720:	b003      	add	sp, #12
 8015722:	bc90      	pop	{r4, r7}
 8015724:	bc08      	pop	{r3}
 8015726:	b004      	add	sp, #16
 8015728:	4718      	bx	r3
	...

0801572c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b09c      	sub	sp, #112	@ 0x70
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8015736:	236f      	movs	r3, #111	@ 0x6f
 8015738:	18fb      	adds	r3, r7, r3
 801573a:	2200      	movs	r2, #0
 801573c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	009b      	lsls	r3, r3, #2
 8015746:	18d3      	adds	r3, r2, r3
 8015748:	881b      	ldrh	r3, [r3, #0]
 801574a:	b29a      	uxth	r2, r3
 801574c:	236c      	movs	r3, #108	@ 0x6c
 801574e:	18fb      	adds	r3, r7, r3
 8015750:	49a3      	ldr	r1, [pc, #652]	@ (80159e0 <USB_ActivateEndpoint+0x2b4>)
 8015752:	400a      	ands	r2, r1
 8015754:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	78db      	ldrb	r3, [r3, #3]
 801575a:	2b03      	cmp	r3, #3
 801575c:	d017      	beq.n	801578e <USB_ActivateEndpoint+0x62>
 801575e:	dc28      	bgt.n	80157b2 <USB_ActivateEndpoint+0x86>
 8015760:	2b02      	cmp	r3, #2
 8015762:	d00e      	beq.n	8015782 <USB_ActivateEndpoint+0x56>
 8015764:	dc25      	bgt.n	80157b2 <USB_ActivateEndpoint+0x86>
 8015766:	2b00      	cmp	r3, #0
 8015768:	d002      	beq.n	8015770 <USB_ActivateEndpoint+0x44>
 801576a:	2b01      	cmp	r3, #1
 801576c:	d018      	beq.n	80157a0 <USB_ActivateEndpoint+0x74>
 801576e:	e020      	b.n	80157b2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8015770:	226c      	movs	r2, #108	@ 0x6c
 8015772:	18bb      	adds	r3, r7, r2
 8015774:	18ba      	adds	r2, r7, r2
 8015776:	8812      	ldrh	r2, [r2, #0]
 8015778:	2180      	movs	r1, #128	@ 0x80
 801577a:	0089      	lsls	r1, r1, #2
 801577c:	430a      	orrs	r2, r1
 801577e:	801a      	strh	r2, [r3, #0]
      break;
 8015780:	e01c      	b.n	80157bc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8015782:	226c      	movs	r2, #108	@ 0x6c
 8015784:	18bb      	adds	r3, r7, r2
 8015786:	18ba      	adds	r2, r7, r2
 8015788:	8812      	ldrh	r2, [r2, #0]
 801578a:	801a      	strh	r2, [r3, #0]
      break;
 801578c:	e016      	b.n	80157bc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801578e:	226c      	movs	r2, #108	@ 0x6c
 8015790:	18bb      	adds	r3, r7, r2
 8015792:	18ba      	adds	r2, r7, r2
 8015794:	8812      	ldrh	r2, [r2, #0]
 8015796:	21c0      	movs	r1, #192	@ 0xc0
 8015798:	00c9      	lsls	r1, r1, #3
 801579a:	430a      	orrs	r2, r1
 801579c:	801a      	strh	r2, [r3, #0]
      break;
 801579e:	e00d      	b.n	80157bc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80157a0:	226c      	movs	r2, #108	@ 0x6c
 80157a2:	18bb      	adds	r3, r7, r2
 80157a4:	18ba      	adds	r2, r7, r2
 80157a6:	8812      	ldrh	r2, [r2, #0]
 80157a8:	2180      	movs	r1, #128	@ 0x80
 80157aa:	00c9      	lsls	r1, r1, #3
 80157ac:	430a      	orrs	r2, r1
 80157ae:	801a      	strh	r2, [r3, #0]
      break;
 80157b0:	e004      	b.n	80157bc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80157b2:	236f      	movs	r3, #111	@ 0x6f
 80157b4:	18fb      	adds	r3, r7, r3
 80157b6:	2201      	movs	r2, #1
 80157b8:	701a      	strb	r2, [r3, #0]
      break;
 80157ba:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	18d3      	adds	r3, r2, r3
 80157c6:	226c      	movs	r2, #108	@ 0x6c
 80157c8:	18ba      	adds	r2, r7, r2
 80157ca:	8812      	ldrh	r2, [r2, #0]
 80157cc:	4985      	ldr	r1, [pc, #532]	@ (80159e4 <USB_ActivateEndpoint+0x2b8>)
 80157ce:	430a      	orrs	r2, r1
 80157d0:	b292      	uxth	r2, r2
 80157d2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	009b      	lsls	r3, r3, #2
 80157dc:	18d3      	adds	r3, r2, r3
 80157de:	881b      	ldrh	r3, [r3, #0]
 80157e0:	b29b      	uxth	r3, r3
 80157e2:	b21b      	sxth	r3, r3
 80157e4:	4a80      	ldr	r2, [pc, #512]	@ (80159e8 <USB_ActivateEndpoint+0x2bc>)
 80157e6:	4013      	ands	r3, r2
 80157e8:	b21a      	sxth	r2, r3
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	b21b      	sxth	r3, r3
 80157f0:	4313      	orrs	r3, r2
 80157f2:	b21a      	sxth	r2, r3
 80157f4:	2166      	movs	r1, #102	@ 0x66
 80157f6:	187b      	adds	r3, r7, r1
 80157f8:	801a      	strh	r2, [r3, #0]
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	009b      	lsls	r3, r3, #2
 8015802:	18d3      	adds	r3, r2, r3
 8015804:	187a      	adds	r2, r7, r1
 8015806:	8812      	ldrh	r2, [r2, #0]
 8015808:	4976      	ldr	r1, [pc, #472]	@ (80159e4 <USB_ActivateEndpoint+0x2b8>)
 801580a:	430a      	orrs	r2, r1
 801580c:	b292      	uxth	r2, r2
 801580e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	7b1b      	ldrb	r3, [r3, #12]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d000      	beq.n	801581a <USB_ActivateEndpoint+0xee>
 8015818:	e178      	b.n	8015b0c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	785b      	ldrb	r3, [r3, #1]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d100      	bne.n	8015824 <USB_ActivateEndpoint+0xf8>
 8015822:	e07a      	b.n	801591a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	61bb      	str	r3, [r7, #24]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	2250      	movs	r2, #80	@ 0x50
 801582c:	5a9b      	ldrh	r3, [r3, r2]
 801582e:	b29b      	uxth	r3, r3
 8015830:	001a      	movs	r2, r3
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	189b      	adds	r3, r3, r2
 8015836:	61bb      	str	r3, [r7, #24]
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	00da      	lsls	r2, r3, #3
 801583e:	69bb      	ldr	r3, [r7, #24]
 8015840:	18d3      	adds	r3, r2, r3
 8015842:	2280      	movs	r2, #128	@ 0x80
 8015844:	00d2      	lsls	r2, r2, #3
 8015846:	4694      	mov	ip, r2
 8015848:	4463      	add	r3, ip
 801584a:	617b      	str	r3, [r7, #20]
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	88db      	ldrh	r3, [r3, #6]
 8015850:	085b      	lsrs	r3, r3, #1
 8015852:	b29b      	uxth	r3, r3
 8015854:	18db      	adds	r3, r3, r3
 8015856:	b29a      	uxth	r2, r3
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	009b      	lsls	r3, r3, #2
 8015864:	18d2      	adds	r2, r2, r3
 8015866:	2112      	movs	r1, #18
 8015868:	187b      	adds	r3, r7, r1
 801586a:	8812      	ldrh	r2, [r2, #0]
 801586c:	801a      	strh	r2, [r3, #0]
 801586e:	187b      	adds	r3, r7, r1
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	2240      	movs	r2, #64	@ 0x40
 8015874:	4013      	ands	r3, r2
 8015876:	d016      	beq.n	80158a6 <USB_ActivateEndpoint+0x17a>
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	18d3      	adds	r3, r2, r3
 8015882:	881b      	ldrh	r3, [r3, #0]
 8015884:	b29a      	uxth	r2, r3
 8015886:	2010      	movs	r0, #16
 8015888:	183b      	adds	r3, r7, r0
 801588a:	4957      	ldr	r1, [pc, #348]	@ (80159e8 <USB_ActivateEndpoint+0x2bc>)
 801588c:	400a      	ands	r2, r1
 801588e:	801a      	strh	r2, [r3, #0]
 8015890:	687a      	ldr	r2, [r7, #4]
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	009b      	lsls	r3, r3, #2
 8015898:	18d3      	adds	r3, r2, r3
 801589a:	183a      	adds	r2, r7, r0
 801589c:	8812      	ldrh	r2, [r2, #0]
 801589e:	4953      	ldr	r1, [pc, #332]	@ (80159ec <USB_ActivateEndpoint+0x2c0>)
 80158a0:	430a      	orrs	r2, r1
 80158a2:	b292      	uxth	r2, r2
 80158a4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	78db      	ldrb	r3, [r3, #3]
 80158aa:	2b01      	cmp	r3, #1
 80158ac:	d01d      	beq.n	80158ea <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	781b      	ldrb	r3, [r3, #0]
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	18d3      	adds	r3, r2, r3
 80158b8:	881b      	ldrh	r3, [r3, #0]
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	200c      	movs	r0, #12
 80158be:	183b      	adds	r3, r7, r0
 80158c0:	494b      	ldr	r1, [pc, #300]	@ (80159f0 <USB_ActivateEndpoint+0x2c4>)
 80158c2:	400a      	ands	r2, r1
 80158c4:	801a      	strh	r2, [r3, #0]
 80158c6:	183b      	adds	r3, r7, r0
 80158c8:	183a      	adds	r2, r7, r0
 80158ca:	8812      	ldrh	r2, [r2, #0]
 80158cc:	2120      	movs	r1, #32
 80158ce:	404a      	eors	r2, r1
 80158d0:	801a      	strh	r2, [r3, #0]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	009b      	lsls	r3, r3, #2
 80158da:	18d3      	adds	r3, r2, r3
 80158dc:	183a      	adds	r2, r7, r0
 80158de:	8812      	ldrh	r2, [r2, #0]
 80158e0:	4940      	ldr	r1, [pc, #256]	@ (80159e4 <USB_ActivateEndpoint+0x2b8>)
 80158e2:	430a      	orrs	r2, r1
 80158e4:	b292      	uxth	r2, r2
 80158e6:	801a      	strh	r2, [r3, #0]
 80158e8:	e2b4      	b.n	8015e54 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	18d3      	adds	r3, r2, r3
 80158f4:	881b      	ldrh	r3, [r3, #0]
 80158f6:	b29a      	uxth	r2, r3
 80158f8:	200e      	movs	r0, #14
 80158fa:	183b      	adds	r3, r7, r0
 80158fc:	493c      	ldr	r1, [pc, #240]	@ (80159f0 <USB_ActivateEndpoint+0x2c4>)
 80158fe:	400a      	ands	r2, r1
 8015900:	801a      	strh	r2, [r3, #0]
 8015902:	687a      	ldr	r2, [r7, #4]
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	18d3      	adds	r3, r2, r3
 801590c:	183a      	adds	r2, r7, r0
 801590e:	8812      	ldrh	r2, [r2, #0]
 8015910:	4934      	ldr	r1, [pc, #208]	@ (80159e4 <USB_ActivateEndpoint+0x2b8>)
 8015912:	430a      	orrs	r2, r1
 8015914:	b292      	uxth	r2, r2
 8015916:	801a      	strh	r2, [r3, #0]
 8015918:	e29c      	b.n	8015e54 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	633b      	str	r3, [r7, #48]	@ 0x30
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2250      	movs	r2, #80	@ 0x50
 8015922:	5a9b      	ldrh	r3, [r3, r2]
 8015924:	b29b      	uxth	r3, r3
 8015926:	001a      	movs	r2, r3
 8015928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801592a:	189b      	adds	r3, r3, r2
 801592c:	633b      	str	r3, [r7, #48]	@ 0x30
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	00da      	lsls	r2, r3, #3
 8015934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015936:	18d3      	adds	r3, r2, r3
 8015938:	4a2e      	ldr	r2, [pc, #184]	@ (80159f4 <USB_ActivateEndpoint+0x2c8>)
 801593a:	4694      	mov	ip, r2
 801593c:	4463      	add	r3, ip
 801593e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	88db      	ldrh	r3, [r3, #6]
 8015944:	085b      	lsrs	r3, r3, #1
 8015946:	b29b      	uxth	r3, r3
 8015948:	18db      	adds	r3, r3, r3
 801594a:	b29a      	uxth	r2, r3
 801594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801594e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2250      	movs	r2, #80	@ 0x50
 8015958:	5a9b      	ldrh	r3, [r3, r2]
 801595a:	b29b      	uxth	r3, r3
 801595c:	001a      	movs	r2, r3
 801595e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015960:	189b      	adds	r3, r3, r2
 8015962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	781b      	ldrb	r3, [r3, #0]
 8015968:	00da      	lsls	r2, r3, #3
 801596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801596c:	18d3      	adds	r3, r2, r3
 801596e:	4a22      	ldr	r2, [pc, #136]	@ (80159f8 <USB_ActivateEndpoint+0x2cc>)
 8015970:	4694      	mov	ip, r2
 8015972:	4463      	add	r3, ip
 8015974:	627b      	str	r3, [r7, #36]	@ 0x24
 8015976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015978:	881b      	ldrh	r3, [r3, #0]
 801597a:	b29b      	uxth	r3, r3
 801597c:	059b      	lsls	r3, r3, #22
 801597e:	0d9b      	lsrs	r3, r3, #22
 8015980:	b29a      	uxth	r2, r3
 8015982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015984:	801a      	strh	r2, [r3, #0]
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	691b      	ldr	r3, [r3, #16]
 801598a:	2b3e      	cmp	r3, #62	@ 0x3e
 801598c:	d91a      	bls.n	80159c4 <USB_ActivateEndpoint+0x298>
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	691b      	ldr	r3, [r3, #16]
 8015992:	095b      	lsrs	r3, r3, #5
 8015994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	691b      	ldr	r3, [r3, #16]
 801599a:	221f      	movs	r2, #31
 801599c:	4013      	ands	r3, r2
 801599e:	d102      	bne.n	80159a6 <USB_ActivateEndpoint+0x27a>
 80159a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80159a2:	3b01      	subs	r3, #1
 80159a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80159a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a8:	881b      	ldrh	r3, [r3, #0]
 80159aa:	b29a      	uxth	r2, r3
 80159ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	029b      	lsls	r3, r3, #10
 80159b2:	b29b      	uxth	r3, r3
 80159b4:	4313      	orrs	r3, r2
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	4a10      	ldr	r2, [pc, #64]	@ (80159fc <USB_ActivateEndpoint+0x2d0>)
 80159ba:	4313      	orrs	r3, r2
 80159bc:	b29a      	uxth	r2, r3
 80159be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c0:	801a      	strh	r2, [r3, #0]
 80159c2:	e034      	b.n	8015a2e <USB_ActivateEndpoint+0x302>
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	691b      	ldr	r3, [r3, #16]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d119      	bne.n	8015a00 <USB_ActivateEndpoint+0x2d4>
 80159cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ce:	881b      	ldrh	r3, [r3, #0]
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	4a0a      	ldr	r2, [pc, #40]	@ (80159fc <USB_ActivateEndpoint+0x2d0>)
 80159d4:	4313      	orrs	r3, r2
 80159d6:	b29a      	uxth	r2, r3
 80159d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159da:	801a      	strh	r2, [r3, #0]
 80159dc:	e027      	b.n	8015a2e <USB_ActivateEndpoint+0x302>
 80159de:	46c0      	nop			@ (mov r8, r8)
 80159e0:	ffff898f 	.word	0xffff898f
 80159e4:	ffff8080 	.word	0xffff8080
 80159e8:	ffff8f8f 	.word	0xffff8f8f
 80159ec:	ffff80c0 	.word	0xffff80c0
 80159f0:	ffff8fbf 	.word	0xffff8fbf
 80159f4:	00000404 	.word	0x00000404
 80159f8:	00000406 	.word	0x00000406
 80159fc:	ffff8000 	.word	0xffff8000
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	691b      	ldr	r3, [r3, #16]
 8015a04:	085b      	lsrs	r3, r3, #1
 8015a06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	691b      	ldr	r3, [r3, #16]
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	4013      	ands	r3, r2
 8015a10:	d002      	beq.n	8015a18 <USB_ActivateEndpoint+0x2ec>
 8015a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015a14:	3301      	adds	r3, #1
 8015a16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a1a:	881b      	ldrh	r3, [r3, #0]
 8015a1c:	b29a      	uxth	r2, r3
 8015a1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	029b      	lsls	r3, r3, #10
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	4313      	orrs	r3, r2
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	781b      	ldrb	r3, [r3, #0]
 8015a34:	009b      	lsls	r3, r3, #2
 8015a36:	18d2      	adds	r2, r2, r3
 8015a38:	2122      	movs	r1, #34	@ 0x22
 8015a3a:	187b      	adds	r3, r7, r1
 8015a3c:	8812      	ldrh	r2, [r2, #0]
 8015a3e:	801a      	strh	r2, [r3, #0]
 8015a40:	187b      	adds	r3, r7, r1
 8015a42:	881a      	ldrh	r2, [r3, #0]
 8015a44:	2380      	movs	r3, #128	@ 0x80
 8015a46:	01db      	lsls	r3, r3, #7
 8015a48:	4013      	ands	r3, r2
 8015a4a:	d016      	beq.n	8015a7a <USB_ActivateEndpoint+0x34e>
 8015a4c:	687a      	ldr	r2, [r7, #4]
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	18d3      	adds	r3, r2, r3
 8015a56:	881b      	ldrh	r3, [r3, #0]
 8015a58:	b29a      	uxth	r2, r3
 8015a5a:	2020      	movs	r0, #32
 8015a5c:	183b      	adds	r3, r7, r0
 8015a5e:	49dd      	ldr	r1, [pc, #884]	@ (8015dd4 <USB_ActivateEndpoint+0x6a8>)
 8015a60:	400a      	ands	r2, r1
 8015a62:	801a      	strh	r2, [r3, #0]
 8015a64:	687a      	ldr	r2, [r7, #4]
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	781b      	ldrb	r3, [r3, #0]
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	18d3      	adds	r3, r2, r3
 8015a6e:	183a      	adds	r2, r7, r0
 8015a70:	8812      	ldrh	r2, [r2, #0]
 8015a72:	49d9      	ldr	r1, [pc, #868]	@ (8015dd8 <USB_ActivateEndpoint+0x6ac>)
 8015a74:	430a      	orrs	r2, r1
 8015a76:	b292      	uxth	r2, r2
 8015a78:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d125      	bne.n	8015ace <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015a82:	687a      	ldr	r2, [r7, #4]
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	18d3      	adds	r3, r2, r3
 8015a8c:	881b      	ldrh	r3, [r3, #0]
 8015a8e:	b29a      	uxth	r2, r3
 8015a90:	201c      	movs	r0, #28
 8015a92:	183b      	adds	r3, r7, r0
 8015a94:	49d1      	ldr	r1, [pc, #836]	@ (8015ddc <USB_ActivateEndpoint+0x6b0>)
 8015a96:	400a      	ands	r2, r1
 8015a98:	801a      	strh	r2, [r3, #0]
 8015a9a:	183b      	adds	r3, r7, r0
 8015a9c:	183a      	adds	r2, r7, r0
 8015a9e:	8812      	ldrh	r2, [r2, #0]
 8015aa0:	2180      	movs	r1, #128	@ 0x80
 8015aa2:	0149      	lsls	r1, r1, #5
 8015aa4:	404a      	eors	r2, r1
 8015aa6:	801a      	strh	r2, [r3, #0]
 8015aa8:	183b      	adds	r3, r7, r0
 8015aaa:	183a      	adds	r2, r7, r0
 8015aac:	8812      	ldrh	r2, [r2, #0]
 8015aae:	2180      	movs	r1, #128	@ 0x80
 8015ab0:	0189      	lsls	r1, r1, #6
 8015ab2:	404a      	eors	r2, r1
 8015ab4:	801a      	strh	r2, [r3, #0]
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	009b      	lsls	r3, r3, #2
 8015abe:	18d3      	adds	r3, r2, r3
 8015ac0:	183a      	adds	r2, r7, r0
 8015ac2:	8812      	ldrh	r2, [r2, #0]
 8015ac4:	49c6      	ldr	r1, [pc, #792]	@ (8015de0 <USB_ActivateEndpoint+0x6b4>)
 8015ac6:	430a      	orrs	r2, r1
 8015ac8:	b292      	uxth	r2, r2
 8015aca:	801a      	strh	r2, [r3, #0]
 8015acc:	e1c2      	b.n	8015e54 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8015ace:	687a      	ldr	r2, [r7, #4]
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	009b      	lsls	r3, r3, #2
 8015ad6:	18d3      	adds	r3, r2, r3
 8015ad8:	881b      	ldrh	r3, [r3, #0]
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	201e      	movs	r0, #30
 8015ade:	183b      	adds	r3, r7, r0
 8015ae0:	49be      	ldr	r1, [pc, #760]	@ (8015ddc <USB_ActivateEndpoint+0x6b0>)
 8015ae2:	400a      	ands	r2, r1
 8015ae4:	801a      	strh	r2, [r3, #0]
 8015ae6:	183b      	adds	r3, r7, r0
 8015ae8:	183a      	adds	r2, r7, r0
 8015aea:	8812      	ldrh	r2, [r2, #0]
 8015aec:	2180      	movs	r1, #128	@ 0x80
 8015aee:	0189      	lsls	r1, r1, #6
 8015af0:	404a      	eors	r2, r1
 8015af2:	801a      	strh	r2, [r3, #0]
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	009b      	lsls	r3, r3, #2
 8015afc:	18d3      	adds	r3, r2, r3
 8015afe:	183a      	adds	r2, r7, r0
 8015b00:	8812      	ldrh	r2, [r2, #0]
 8015b02:	49b7      	ldr	r1, [pc, #732]	@ (8015de0 <USB_ActivateEndpoint+0x6b4>)
 8015b04:	430a      	orrs	r2, r1
 8015b06:	b292      	uxth	r2, r2
 8015b08:	801a      	strh	r2, [r3, #0]
 8015b0a:	e1a3      	b.n	8015e54 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	78db      	ldrb	r3, [r3, #3]
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d117      	bne.n	8015b44 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8015b14:	687a      	ldr	r2, [r7, #4]
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	009b      	lsls	r3, r3, #2
 8015b1c:	18d3      	adds	r3, r2, r3
 8015b1e:	881b      	ldrh	r3, [r3, #0]
 8015b20:	b29a      	uxth	r2, r3
 8015b22:	2062      	movs	r0, #98	@ 0x62
 8015b24:	183b      	adds	r3, r7, r0
 8015b26:	49ab      	ldr	r1, [pc, #684]	@ (8015dd4 <USB_ActivateEndpoint+0x6a8>)
 8015b28:	400a      	ands	r2, r1
 8015b2a:	801a      	strh	r2, [r3, #0]
 8015b2c:	687a      	ldr	r2, [r7, #4]
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	18d3      	adds	r3, r2, r3
 8015b36:	183a      	adds	r2, r7, r0
 8015b38:	8812      	ldrh	r2, [r2, #0]
 8015b3a:	49aa      	ldr	r1, [pc, #680]	@ (8015de4 <USB_ActivateEndpoint+0x6b8>)
 8015b3c:	430a      	orrs	r2, r1
 8015b3e:	b292      	uxth	r2, r2
 8015b40:	801a      	strh	r2, [r3, #0]
 8015b42:	e016      	b.n	8015b72 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	18d3      	adds	r3, r2, r3
 8015b4e:	881b      	ldrh	r3, [r3, #0]
 8015b50:	b29a      	uxth	r2, r3
 8015b52:	2064      	movs	r0, #100	@ 0x64
 8015b54:	183b      	adds	r3, r7, r0
 8015b56:	49a4      	ldr	r1, [pc, #656]	@ (8015de8 <USB_ActivateEndpoint+0x6bc>)
 8015b58:	400a      	ands	r2, r1
 8015b5a:	801a      	strh	r2, [r3, #0]
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	18d3      	adds	r3, r2, r3
 8015b66:	183a      	adds	r2, r7, r0
 8015b68:	8812      	ldrh	r2, [r2, #0]
 8015b6a:	499d      	ldr	r1, [pc, #628]	@ (8015de0 <USB_ActivateEndpoint+0x6b4>)
 8015b6c:	430a      	orrs	r2, r1
 8015b6e:	b292      	uxth	r2, r2
 8015b70:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	2250      	movs	r2, #80	@ 0x50
 8015b7a:	5a9b      	ldrh	r3, [r3, r2]
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	001a      	movs	r2, r3
 8015b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015b82:	189b      	adds	r3, r3, r2
 8015b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	00da      	lsls	r2, r3, #3
 8015b8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015b8e:	18d3      	adds	r3, r2, r3
 8015b90:	2280      	movs	r2, #128	@ 0x80
 8015b92:	00d2      	lsls	r2, r2, #3
 8015b94:	4694      	mov	ip, r2
 8015b96:	4463      	add	r3, ip
 8015b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	891b      	ldrh	r3, [r3, #8]
 8015b9e:	085b      	lsrs	r3, r3, #1
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	18db      	adds	r3, r3, r3
 8015ba4:	b29a      	uxth	r2, r3
 8015ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015ba8:	801a      	strh	r2, [r3, #0]
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2250      	movs	r2, #80	@ 0x50
 8015bb2:	5a9b      	ldrh	r3, [r3, r2]
 8015bb4:	b29b      	uxth	r3, r3
 8015bb6:	001a      	movs	r2, r3
 8015bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015bba:	189b      	adds	r3, r3, r2
 8015bbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	00da      	lsls	r2, r3, #3
 8015bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015bc6:	18d3      	adds	r3, r2, r3
 8015bc8:	4a88      	ldr	r2, [pc, #544]	@ (8015dec <USB_ActivateEndpoint+0x6c0>)
 8015bca:	4694      	mov	ip, r2
 8015bcc:	4463      	add	r3, ip
 8015bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	895b      	ldrh	r3, [r3, #10]
 8015bd4:	085b      	lsrs	r3, r3, #1
 8015bd6:	b29b      	uxth	r3, r3
 8015bd8:	18db      	adds	r3, r3, r3
 8015bda:	b29a      	uxth	r2, r3
 8015bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bde:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	785b      	ldrb	r3, [r3, #1]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d000      	beq.n	8015bea <USB_ActivateEndpoint+0x4be>
 8015be8:	e087      	b.n	8015cfa <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015bea:	687a      	ldr	r2, [r7, #4]
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	18d2      	adds	r2, r2, r3
 8015bf4:	2140      	movs	r1, #64	@ 0x40
 8015bf6:	187b      	adds	r3, r7, r1
 8015bf8:	8812      	ldrh	r2, [r2, #0]
 8015bfa:	801a      	strh	r2, [r3, #0]
 8015bfc:	187b      	adds	r3, r7, r1
 8015bfe:	881a      	ldrh	r2, [r3, #0]
 8015c00:	2380      	movs	r3, #128	@ 0x80
 8015c02:	01db      	lsls	r3, r3, #7
 8015c04:	4013      	ands	r3, r2
 8015c06:	d016      	beq.n	8015c36 <USB_ActivateEndpoint+0x50a>
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	18d3      	adds	r3, r2, r3
 8015c12:	881b      	ldrh	r3, [r3, #0]
 8015c14:	b29a      	uxth	r2, r3
 8015c16:	203e      	movs	r0, #62	@ 0x3e
 8015c18:	183b      	adds	r3, r7, r0
 8015c1a:	496e      	ldr	r1, [pc, #440]	@ (8015dd4 <USB_ActivateEndpoint+0x6a8>)
 8015c1c:	400a      	ands	r2, r1
 8015c1e:	801a      	strh	r2, [r3, #0]
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	009b      	lsls	r3, r3, #2
 8015c28:	18d3      	adds	r3, r2, r3
 8015c2a:	183a      	adds	r2, r7, r0
 8015c2c:	8812      	ldrh	r2, [r2, #0]
 8015c2e:	496a      	ldr	r1, [pc, #424]	@ (8015dd8 <USB_ActivateEndpoint+0x6ac>)
 8015c30:	430a      	orrs	r2, r1
 8015c32:	b292      	uxth	r2, r2
 8015c34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	009b      	lsls	r3, r3, #2
 8015c3e:	18d2      	adds	r2, r2, r3
 8015c40:	213c      	movs	r1, #60	@ 0x3c
 8015c42:	187b      	adds	r3, r7, r1
 8015c44:	8812      	ldrh	r2, [r2, #0]
 8015c46:	801a      	strh	r2, [r3, #0]
 8015c48:	187b      	adds	r3, r7, r1
 8015c4a:	881b      	ldrh	r3, [r3, #0]
 8015c4c:	2240      	movs	r2, #64	@ 0x40
 8015c4e:	4013      	ands	r3, r2
 8015c50:	d016      	beq.n	8015c80 <USB_ActivateEndpoint+0x554>
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	18d3      	adds	r3, r2, r3
 8015c5c:	881b      	ldrh	r3, [r3, #0]
 8015c5e:	b29a      	uxth	r2, r3
 8015c60:	203a      	movs	r0, #58	@ 0x3a
 8015c62:	183b      	adds	r3, r7, r0
 8015c64:	495b      	ldr	r1, [pc, #364]	@ (8015dd4 <USB_ActivateEndpoint+0x6a8>)
 8015c66:	400a      	ands	r2, r1
 8015c68:	801a      	strh	r2, [r3, #0]
 8015c6a:	687a      	ldr	r2, [r7, #4]
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	781b      	ldrb	r3, [r3, #0]
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	18d3      	adds	r3, r2, r3
 8015c74:	183a      	adds	r2, r7, r0
 8015c76:	8812      	ldrh	r2, [r2, #0]
 8015c78:	495d      	ldr	r1, [pc, #372]	@ (8015df0 <USB_ActivateEndpoint+0x6c4>)
 8015c7a:	430a      	orrs	r2, r1
 8015c7c:	b292      	uxth	r2, r2
 8015c7e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	781b      	ldrb	r3, [r3, #0]
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	18d3      	adds	r3, r2, r3
 8015c8a:	881b      	ldrh	r3, [r3, #0]
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	2038      	movs	r0, #56	@ 0x38
 8015c90:	183b      	adds	r3, r7, r0
 8015c92:	4952      	ldr	r1, [pc, #328]	@ (8015ddc <USB_ActivateEndpoint+0x6b0>)
 8015c94:	400a      	ands	r2, r1
 8015c96:	801a      	strh	r2, [r3, #0]
 8015c98:	183b      	adds	r3, r7, r0
 8015c9a:	183a      	adds	r2, r7, r0
 8015c9c:	8812      	ldrh	r2, [r2, #0]
 8015c9e:	2180      	movs	r1, #128	@ 0x80
 8015ca0:	0149      	lsls	r1, r1, #5
 8015ca2:	404a      	eors	r2, r1
 8015ca4:	801a      	strh	r2, [r3, #0]
 8015ca6:	183b      	adds	r3, r7, r0
 8015ca8:	183a      	adds	r2, r7, r0
 8015caa:	8812      	ldrh	r2, [r2, #0]
 8015cac:	2180      	movs	r1, #128	@ 0x80
 8015cae:	0189      	lsls	r1, r1, #6
 8015cb0:	404a      	eors	r2, r1
 8015cb2:	801a      	strh	r2, [r3, #0]
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	683b      	ldr	r3, [r7, #0]
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	18d3      	adds	r3, r2, r3
 8015cbe:	183a      	adds	r2, r7, r0
 8015cc0:	8812      	ldrh	r2, [r2, #0]
 8015cc2:	4947      	ldr	r1, [pc, #284]	@ (8015de0 <USB_ActivateEndpoint+0x6b4>)
 8015cc4:	430a      	orrs	r2, r1
 8015cc6:	b292      	uxth	r2, r2
 8015cc8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	18d3      	adds	r3, r2, r3
 8015cd4:	881b      	ldrh	r3, [r3, #0]
 8015cd6:	b29a      	uxth	r2, r3
 8015cd8:	2036      	movs	r0, #54	@ 0x36
 8015cda:	183b      	adds	r3, r7, r0
 8015cdc:	4945      	ldr	r1, [pc, #276]	@ (8015df4 <USB_ActivateEndpoint+0x6c8>)
 8015cde:	400a      	ands	r2, r1
 8015ce0:	801a      	strh	r2, [r3, #0]
 8015ce2:	687a      	ldr	r2, [r7, #4]
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	009b      	lsls	r3, r3, #2
 8015cea:	18d3      	adds	r3, r2, r3
 8015cec:	183a      	adds	r2, r7, r0
 8015cee:	8812      	ldrh	r2, [r2, #0]
 8015cf0:	493b      	ldr	r1, [pc, #236]	@ (8015de0 <USB_ActivateEndpoint+0x6b4>)
 8015cf2:	430a      	orrs	r2, r1
 8015cf4:	b292      	uxth	r2, r2
 8015cf6:	801a      	strh	r2, [r3, #0]
 8015cf8:	e0ac      	b.n	8015e54 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015cfa:	687a      	ldr	r2, [r7, #4]
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	009b      	lsls	r3, r3, #2
 8015d02:	18d2      	adds	r2, r2, r3
 8015d04:	214e      	movs	r1, #78	@ 0x4e
 8015d06:	187b      	adds	r3, r7, r1
 8015d08:	8812      	ldrh	r2, [r2, #0]
 8015d0a:	801a      	strh	r2, [r3, #0]
 8015d0c:	187b      	adds	r3, r7, r1
 8015d0e:	881a      	ldrh	r2, [r3, #0]
 8015d10:	2380      	movs	r3, #128	@ 0x80
 8015d12:	01db      	lsls	r3, r3, #7
 8015d14:	4013      	ands	r3, r2
 8015d16:	d016      	beq.n	8015d46 <USB_ActivateEndpoint+0x61a>
 8015d18:	687a      	ldr	r2, [r7, #4]
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	009b      	lsls	r3, r3, #2
 8015d20:	18d3      	adds	r3, r2, r3
 8015d22:	881b      	ldrh	r3, [r3, #0]
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	204c      	movs	r0, #76	@ 0x4c
 8015d28:	183b      	adds	r3, r7, r0
 8015d2a:	492a      	ldr	r1, [pc, #168]	@ (8015dd4 <USB_ActivateEndpoint+0x6a8>)
 8015d2c:	400a      	ands	r2, r1
 8015d2e:	801a      	strh	r2, [r3, #0]
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	009b      	lsls	r3, r3, #2
 8015d38:	18d3      	adds	r3, r2, r3
 8015d3a:	183a      	adds	r2, r7, r0
 8015d3c:	8812      	ldrh	r2, [r2, #0]
 8015d3e:	4926      	ldr	r1, [pc, #152]	@ (8015dd8 <USB_ActivateEndpoint+0x6ac>)
 8015d40:	430a      	orrs	r2, r1
 8015d42:	b292      	uxth	r2, r2
 8015d44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015d46:	687a      	ldr	r2, [r7, #4]
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	009b      	lsls	r3, r3, #2
 8015d4e:	18d2      	adds	r2, r2, r3
 8015d50:	214a      	movs	r1, #74	@ 0x4a
 8015d52:	187b      	adds	r3, r7, r1
 8015d54:	8812      	ldrh	r2, [r2, #0]
 8015d56:	801a      	strh	r2, [r3, #0]
 8015d58:	187b      	adds	r3, r7, r1
 8015d5a:	881b      	ldrh	r3, [r3, #0]
 8015d5c:	2240      	movs	r2, #64	@ 0x40
 8015d5e:	4013      	ands	r3, r2
 8015d60:	d016      	beq.n	8015d90 <USB_ActivateEndpoint+0x664>
 8015d62:	687a      	ldr	r2, [r7, #4]
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	781b      	ldrb	r3, [r3, #0]
 8015d68:	009b      	lsls	r3, r3, #2
 8015d6a:	18d3      	adds	r3, r2, r3
 8015d6c:	881b      	ldrh	r3, [r3, #0]
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	2048      	movs	r0, #72	@ 0x48
 8015d72:	183b      	adds	r3, r7, r0
 8015d74:	4917      	ldr	r1, [pc, #92]	@ (8015dd4 <USB_ActivateEndpoint+0x6a8>)
 8015d76:	400a      	ands	r2, r1
 8015d78:	801a      	strh	r2, [r3, #0]
 8015d7a:	687a      	ldr	r2, [r7, #4]
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	009b      	lsls	r3, r3, #2
 8015d82:	18d3      	adds	r3, r2, r3
 8015d84:	183a      	adds	r2, r7, r0
 8015d86:	8812      	ldrh	r2, [r2, #0]
 8015d88:	4919      	ldr	r1, [pc, #100]	@ (8015df0 <USB_ActivateEndpoint+0x6c4>)
 8015d8a:	430a      	orrs	r2, r1
 8015d8c:	b292      	uxth	r2, r2
 8015d8e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	78db      	ldrb	r3, [r3, #3]
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d02f      	beq.n	8015df8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015d98:	687a      	ldr	r2, [r7, #4]
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	009b      	lsls	r3, r3, #2
 8015da0:	18d3      	adds	r3, r2, r3
 8015da2:	881b      	ldrh	r3, [r3, #0]
 8015da4:	b29a      	uxth	r2, r3
 8015da6:	2044      	movs	r0, #68	@ 0x44
 8015da8:	183b      	adds	r3, r7, r0
 8015daa:	4912      	ldr	r1, [pc, #72]	@ (8015df4 <USB_ActivateEndpoint+0x6c8>)
 8015dac:	400a      	ands	r2, r1
 8015dae:	801a      	strh	r2, [r3, #0]
 8015db0:	183b      	adds	r3, r7, r0
 8015db2:	183a      	adds	r2, r7, r0
 8015db4:	8812      	ldrh	r2, [r2, #0]
 8015db6:	2120      	movs	r1, #32
 8015db8:	404a      	eors	r2, r1
 8015dba:	801a      	strh	r2, [r3, #0]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	009b      	lsls	r3, r3, #2
 8015dc4:	18d3      	adds	r3, r2, r3
 8015dc6:	183a      	adds	r2, r7, r0
 8015dc8:	8812      	ldrh	r2, [r2, #0]
 8015dca:	4905      	ldr	r1, [pc, #20]	@ (8015de0 <USB_ActivateEndpoint+0x6b4>)
 8015dcc:	430a      	orrs	r2, r1
 8015dce:	b292      	uxth	r2, r2
 8015dd0:	801a      	strh	r2, [r3, #0]
 8015dd2:	e028      	b.n	8015e26 <USB_ActivateEndpoint+0x6fa>
 8015dd4:	ffff8f8f 	.word	0xffff8f8f
 8015dd8:	ffffc080 	.word	0xffffc080
 8015ddc:	ffffbf8f 	.word	0xffffbf8f
 8015de0:	ffff8080 	.word	0xffff8080
 8015de4:	ffff8180 	.word	0xffff8180
 8015de8:	ffff8e8f 	.word	0xffff8e8f
 8015dec:	00000404 	.word	0x00000404
 8015df0:	ffff80c0 	.word	0xffff80c0
 8015df4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	009b      	lsls	r3, r3, #2
 8015e00:	18d3      	adds	r3, r2, r3
 8015e02:	881b      	ldrh	r3, [r3, #0]
 8015e04:	b29a      	uxth	r2, r3
 8015e06:	2046      	movs	r0, #70	@ 0x46
 8015e08:	183b      	adds	r3, r7, r0
 8015e0a:	4916      	ldr	r1, [pc, #88]	@ (8015e64 <USB_ActivateEndpoint+0x738>)
 8015e0c:	400a      	ands	r2, r1
 8015e0e:	801a      	strh	r2, [r3, #0]
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	18d3      	adds	r3, r2, r3
 8015e1a:	183a      	adds	r2, r7, r0
 8015e1c:	8812      	ldrh	r2, [r2, #0]
 8015e1e:	4912      	ldr	r1, [pc, #72]	@ (8015e68 <USB_ActivateEndpoint+0x73c>)
 8015e20:	430a      	orrs	r2, r1
 8015e22:	b292      	uxth	r2, r2
 8015e24:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	18d3      	adds	r3, r2, r3
 8015e30:	881b      	ldrh	r3, [r3, #0]
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	2042      	movs	r0, #66	@ 0x42
 8015e36:	183b      	adds	r3, r7, r0
 8015e38:	490c      	ldr	r1, [pc, #48]	@ (8015e6c <USB_ActivateEndpoint+0x740>)
 8015e3a:	400a      	ands	r2, r1
 8015e3c:	801a      	strh	r2, [r3, #0]
 8015e3e:	687a      	ldr	r2, [r7, #4]
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	18d3      	adds	r3, r2, r3
 8015e48:	183a      	adds	r2, r7, r0
 8015e4a:	8812      	ldrh	r2, [r2, #0]
 8015e4c:	4906      	ldr	r1, [pc, #24]	@ (8015e68 <USB_ActivateEndpoint+0x73c>)
 8015e4e:	430a      	orrs	r2, r1
 8015e50:	b292      	uxth	r2, r2
 8015e52:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8015e54:	236f      	movs	r3, #111	@ 0x6f
 8015e56:	18fb      	adds	r3, r7, r3
 8015e58:	781b      	ldrb	r3, [r3, #0]
}
 8015e5a:	0018      	movs	r0, r3
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	b01c      	add	sp, #112	@ 0x70
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	46c0      	nop			@ (mov r8, r8)
 8015e64:	ffff8fbf 	.word	0xffff8fbf
 8015e68:	ffff8080 	.word	0xffff8080
 8015e6c:	ffffbf8f 	.word	0xffffbf8f

08015e70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b08c      	sub	sp, #48	@ 0x30
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	7b1b      	ldrb	r3, [r3, #12]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d000      	beq.n	8015e84 <USB_DeactivateEndpoint+0x14>
 8015e82:	e07e      	b.n	8015f82 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	785b      	ldrb	r3, [r3, #1]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d03c      	beq.n	8015f06 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	18d2      	adds	r2, r2, r3
 8015e96:	210c      	movs	r1, #12
 8015e98:	187b      	adds	r3, r7, r1
 8015e9a:	8812      	ldrh	r2, [r2, #0]
 8015e9c:	801a      	strh	r2, [r3, #0]
 8015e9e:	187b      	adds	r3, r7, r1
 8015ea0:	881b      	ldrh	r3, [r3, #0]
 8015ea2:	2240      	movs	r2, #64	@ 0x40
 8015ea4:	4013      	ands	r3, r2
 8015ea6:	d016      	beq.n	8015ed6 <USB_DeactivateEndpoint+0x66>
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	009b      	lsls	r3, r3, #2
 8015eb0:	18d3      	adds	r3, r2, r3
 8015eb2:	881b      	ldrh	r3, [r3, #0]
 8015eb4:	b29a      	uxth	r2, r3
 8015eb6:	200a      	movs	r0, #10
 8015eb8:	183b      	adds	r3, r7, r0
 8015eba:	49c7      	ldr	r1, [pc, #796]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 8015ebc:	400a      	ands	r2, r1
 8015ebe:	801a      	strh	r2, [r3, #0]
 8015ec0:	687a      	ldr	r2, [r7, #4]
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	781b      	ldrb	r3, [r3, #0]
 8015ec6:	009b      	lsls	r3, r3, #2
 8015ec8:	18d3      	adds	r3, r2, r3
 8015eca:	183a      	adds	r2, r7, r0
 8015ecc:	8812      	ldrh	r2, [r2, #0]
 8015ece:	49c3      	ldr	r1, [pc, #780]	@ (80161dc <USB_DeactivateEndpoint+0x36c>)
 8015ed0:	430a      	orrs	r2, r1
 8015ed2:	b292      	uxth	r2, r2
 8015ed4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015ed6:	687a      	ldr	r2, [r7, #4]
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	18d3      	adds	r3, r2, r3
 8015ee0:	881b      	ldrh	r3, [r3, #0]
 8015ee2:	b29a      	uxth	r2, r3
 8015ee4:	2008      	movs	r0, #8
 8015ee6:	183b      	adds	r3, r7, r0
 8015ee8:	49bd      	ldr	r1, [pc, #756]	@ (80161e0 <USB_DeactivateEndpoint+0x370>)
 8015eea:	400a      	ands	r2, r1
 8015eec:	801a      	strh	r2, [r3, #0]
 8015eee:	687a      	ldr	r2, [r7, #4]
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	009b      	lsls	r3, r3, #2
 8015ef6:	18d3      	adds	r3, r2, r3
 8015ef8:	183a      	adds	r2, r7, r0
 8015efa:	8812      	ldrh	r2, [r2, #0]
 8015efc:	49b9      	ldr	r1, [pc, #740]	@ (80161e4 <USB_DeactivateEndpoint+0x374>)
 8015efe:	430a      	orrs	r2, r1
 8015f00:	b292      	uxth	r2, r2
 8015f02:	801a      	strh	r2, [r3, #0]
 8015f04:	e163      	b.n	80161ce <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015f06:	687a      	ldr	r2, [r7, #4]
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	009b      	lsls	r3, r3, #2
 8015f0e:	18d2      	adds	r2, r2, r3
 8015f10:	2112      	movs	r1, #18
 8015f12:	187b      	adds	r3, r7, r1
 8015f14:	8812      	ldrh	r2, [r2, #0]
 8015f16:	801a      	strh	r2, [r3, #0]
 8015f18:	187b      	adds	r3, r7, r1
 8015f1a:	881a      	ldrh	r2, [r3, #0]
 8015f1c:	2380      	movs	r3, #128	@ 0x80
 8015f1e:	01db      	lsls	r3, r3, #7
 8015f20:	4013      	ands	r3, r2
 8015f22:	d016      	beq.n	8015f52 <USB_DeactivateEndpoint+0xe2>
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	781b      	ldrb	r3, [r3, #0]
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	18d3      	adds	r3, r2, r3
 8015f2e:	881b      	ldrh	r3, [r3, #0]
 8015f30:	b29a      	uxth	r2, r3
 8015f32:	2010      	movs	r0, #16
 8015f34:	183b      	adds	r3, r7, r0
 8015f36:	49a8      	ldr	r1, [pc, #672]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 8015f38:	400a      	ands	r2, r1
 8015f3a:	801a      	strh	r2, [r3, #0]
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	18d3      	adds	r3, r2, r3
 8015f46:	183a      	adds	r2, r7, r0
 8015f48:	8812      	ldrh	r2, [r2, #0]
 8015f4a:	49a7      	ldr	r1, [pc, #668]	@ (80161e8 <USB_DeactivateEndpoint+0x378>)
 8015f4c:	430a      	orrs	r2, r1
 8015f4e:	b292      	uxth	r2, r2
 8015f50:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	009b      	lsls	r3, r3, #2
 8015f5a:	18d3      	adds	r3, r2, r3
 8015f5c:	881b      	ldrh	r3, [r3, #0]
 8015f5e:	b29a      	uxth	r2, r3
 8015f60:	200e      	movs	r0, #14
 8015f62:	183b      	adds	r3, r7, r0
 8015f64:	49a1      	ldr	r1, [pc, #644]	@ (80161ec <USB_DeactivateEndpoint+0x37c>)
 8015f66:	400a      	ands	r2, r1
 8015f68:	801a      	strh	r2, [r3, #0]
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	009b      	lsls	r3, r3, #2
 8015f72:	18d3      	adds	r3, r2, r3
 8015f74:	183a      	adds	r2, r7, r0
 8015f76:	8812      	ldrh	r2, [r2, #0]
 8015f78:	499a      	ldr	r1, [pc, #616]	@ (80161e4 <USB_DeactivateEndpoint+0x374>)
 8015f7a:	430a      	orrs	r2, r1
 8015f7c:	b292      	uxth	r2, r2
 8015f7e:	801a      	strh	r2, [r3, #0]
 8015f80:	e125      	b.n	80161ce <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	785b      	ldrb	r3, [r3, #1]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d000      	beq.n	8015f8c <USB_DeactivateEndpoint+0x11c>
 8015f8a:	e090      	b.n	80160ae <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015f8c:	687a      	ldr	r2, [r7, #4]
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	009b      	lsls	r3, r3, #2
 8015f94:	18d2      	adds	r2, r2, r3
 8015f96:	2120      	movs	r1, #32
 8015f98:	187b      	adds	r3, r7, r1
 8015f9a:	8812      	ldrh	r2, [r2, #0]
 8015f9c:	801a      	strh	r2, [r3, #0]
 8015f9e:	187b      	adds	r3, r7, r1
 8015fa0:	881a      	ldrh	r2, [r3, #0]
 8015fa2:	2380      	movs	r3, #128	@ 0x80
 8015fa4:	01db      	lsls	r3, r3, #7
 8015fa6:	4013      	ands	r3, r2
 8015fa8:	d016      	beq.n	8015fd8 <USB_DeactivateEndpoint+0x168>
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	009b      	lsls	r3, r3, #2
 8015fb2:	18d3      	adds	r3, r2, r3
 8015fb4:	881b      	ldrh	r3, [r3, #0]
 8015fb6:	b29a      	uxth	r2, r3
 8015fb8:	201e      	movs	r0, #30
 8015fba:	183b      	adds	r3, r7, r0
 8015fbc:	4986      	ldr	r1, [pc, #536]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 8015fbe:	400a      	ands	r2, r1
 8015fc0:	801a      	strh	r2, [r3, #0]
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	781b      	ldrb	r3, [r3, #0]
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	18d3      	adds	r3, r2, r3
 8015fcc:	183a      	adds	r2, r7, r0
 8015fce:	8812      	ldrh	r2, [r2, #0]
 8015fd0:	4985      	ldr	r1, [pc, #532]	@ (80161e8 <USB_DeactivateEndpoint+0x378>)
 8015fd2:	430a      	orrs	r2, r1
 8015fd4:	b292      	uxth	r2, r2
 8015fd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	009b      	lsls	r3, r3, #2
 8015fe0:	18d2      	adds	r2, r2, r3
 8015fe2:	211c      	movs	r1, #28
 8015fe4:	187b      	adds	r3, r7, r1
 8015fe6:	8812      	ldrh	r2, [r2, #0]
 8015fe8:	801a      	strh	r2, [r3, #0]
 8015fea:	187b      	adds	r3, r7, r1
 8015fec:	881b      	ldrh	r3, [r3, #0]
 8015fee:	2240      	movs	r2, #64	@ 0x40
 8015ff0:	4013      	ands	r3, r2
 8015ff2:	d016      	beq.n	8016022 <USB_DeactivateEndpoint+0x1b2>
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	009b      	lsls	r3, r3, #2
 8015ffc:	18d3      	adds	r3, r2, r3
 8015ffe:	881b      	ldrh	r3, [r3, #0]
 8016000:	b29a      	uxth	r2, r3
 8016002:	201a      	movs	r0, #26
 8016004:	183b      	adds	r3, r7, r0
 8016006:	4974      	ldr	r1, [pc, #464]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 8016008:	400a      	ands	r2, r1
 801600a:	801a      	strh	r2, [r3, #0]
 801600c:	687a      	ldr	r2, [r7, #4]
 801600e:	683b      	ldr	r3, [r7, #0]
 8016010:	781b      	ldrb	r3, [r3, #0]
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	18d3      	adds	r3, r2, r3
 8016016:	183a      	adds	r2, r7, r0
 8016018:	8812      	ldrh	r2, [r2, #0]
 801601a:	4970      	ldr	r1, [pc, #448]	@ (80161dc <USB_DeactivateEndpoint+0x36c>)
 801601c:	430a      	orrs	r2, r1
 801601e:	b292      	uxth	r2, r2
 8016020:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	009b      	lsls	r3, r3, #2
 801602a:	18d3      	adds	r3, r2, r3
 801602c:	881b      	ldrh	r3, [r3, #0]
 801602e:	b29a      	uxth	r2, r3
 8016030:	2018      	movs	r0, #24
 8016032:	183b      	adds	r3, r7, r0
 8016034:	4968      	ldr	r1, [pc, #416]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 8016036:	400a      	ands	r2, r1
 8016038:	801a      	strh	r2, [r3, #0]
 801603a:	687a      	ldr	r2, [r7, #4]
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	009b      	lsls	r3, r3, #2
 8016042:	18d3      	adds	r3, r2, r3
 8016044:	183a      	adds	r2, r7, r0
 8016046:	8812      	ldrh	r2, [r2, #0]
 8016048:	4964      	ldr	r1, [pc, #400]	@ (80161dc <USB_DeactivateEndpoint+0x36c>)
 801604a:	430a      	orrs	r2, r1
 801604c:	b292      	uxth	r2, r2
 801604e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	009b      	lsls	r3, r3, #2
 8016058:	18d3      	adds	r3, r2, r3
 801605a:	881b      	ldrh	r3, [r3, #0]
 801605c:	b29a      	uxth	r2, r3
 801605e:	2016      	movs	r0, #22
 8016060:	183b      	adds	r3, r7, r0
 8016062:	4962      	ldr	r1, [pc, #392]	@ (80161ec <USB_DeactivateEndpoint+0x37c>)
 8016064:	400a      	ands	r2, r1
 8016066:	801a      	strh	r2, [r3, #0]
 8016068:	687a      	ldr	r2, [r7, #4]
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	009b      	lsls	r3, r3, #2
 8016070:	18d3      	adds	r3, r2, r3
 8016072:	183a      	adds	r2, r7, r0
 8016074:	8812      	ldrh	r2, [r2, #0]
 8016076:	495b      	ldr	r1, [pc, #364]	@ (80161e4 <USB_DeactivateEndpoint+0x374>)
 8016078:	430a      	orrs	r2, r1
 801607a:	b292      	uxth	r2, r2
 801607c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801607e:	687a      	ldr	r2, [r7, #4]
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	18d3      	adds	r3, r2, r3
 8016088:	881b      	ldrh	r3, [r3, #0]
 801608a:	b29a      	uxth	r2, r3
 801608c:	2014      	movs	r0, #20
 801608e:	183b      	adds	r3, r7, r0
 8016090:	4953      	ldr	r1, [pc, #332]	@ (80161e0 <USB_DeactivateEndpoint+0x370>)
 8016092:	400a      	ands	r2, r1
 8016094:	801a      	strh	r2, [r3, #0]
 8016096:	687a      	ldr	r2, [r7, #4]
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	009b      	lsls	r3, r3, #2
 801609e:	18d3      	adds	r3, r2, r3
 80160a0:	183a      	adds	r2, r7, r0
 80160a2:	8812      	ldrh	r2, [r2, #0]
 80160a4:	494f      	ldr	r1, [pc, #316]	@ (80161e4 <USB_DeactivateEndpoint+0x374>)
 80160a6:	430a      	orrs	r2, r1
 80160a8:	b292      	uxth	r2, r2
 80160aa:	801a      	strh	r2, [r3, #0]
 80160ac:	e08f      	b.n	80161ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	009b      	lsls	r3, r3, #2
 80160b6:	18d2      	adds	r2, r2, r3
 80160b8:	212e      	movs	r1, #46	@ 0x2e
 80160ba:	187b      	adds	r3, r7, r1
 80160bc:	8812      	ldrh	r2, [r2, #0]
 80160be:	801a      	strh	r2, [r3, #0]
 80160c0:	187b      	adds	r3, r7, r1
 80160c2:	881a      	ldrh	r2, [r3, #0]
 80160c4:	2380      	movs	r3, #128	@ 0x80
 80160c6:	01db      	lsls	r3, r3, #7
 80160c8:	4013      	ands	r3, r2
 80160ca:	d016      	beq.n	80160fa <USB_DeactivateEndpoint+0x28a>
 80160cc:	687a      	ldr	r2, [r7, #4]
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	009b      	lsls	r3, r3, #2
 80160d4:	18d3      	adds	r3, r2, r3
 80160d6:	881b      	ldrh	r3, [r3, #0]
 80160d8:	b29a      	uxth	r2, r3
 80160da:	202c      	movs	r0, #44	@ 0x2c
 80160dc:	183b      	adds	r3, r7, r0
 80160de:	493e      	ldr	r1, [pc, #248]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 80160e0:	400a      	ands	r2, r1
 80160e2:	801a      	strh	r2, [r3, #0]
 80160e4:	687a      	ldr	r2, [r7, #4]
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	009b      	lsls	r3, r3, #2
 80160ec:	18d3      	adds	r3, r2, r3
 80160ee:	183a      	adds	r2, r7, r0
 80160f0:	8812      	ldrh	r2, [r2, #0]
 80160f2:	493d      	ldr	r1, [pc, #244]	@ (80161e8 <USB_DeactivateEndpoint+0x378>)
 80160f4:	430a      	orrs	r2, r1
 80160f6:	b292      	uxth	r2, r2
 80160f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	009b      	lsls	r3, r3, #2
 8016102:	18d2      	adds	r2, r2, r3
 8016104:	212a      	movs	r1, #42	@ 0x2a
 8016106:	187b      	adds	r3, r7, r1
 8016108:	8812      	ldrh	r2, [r2, #0]
 801610a:	801a      	strh	r2, [r3, #0]
 801610c:	187b      	adds	r3, r7, r1
 801610e:	881b      	ldrh	r3, [r3, #0]
 8016110:	2240      	movs	r2, #64	@ 0x40
 8016112:	4013      	ands	r3, r2
 8016114:	d016      	beq.n	8016144 <USB_DeactivateEndpoint+0x2d4>
 8016116:	687a      	ldr	r2, [r7, #4]
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	009b      	lsls	r3, r3, #2
 801611e:	18d3      	adds	r3, r2, r3
 8016120:	881b      	ldrh	r3, [r3, #0]
 8016122:	b29a      	uxth	r2, r3
 8016124:	2028      	movs	r0, #40	@ 0x28
 8016126:	183b      	adds	r3, r7, r0
 8016128:	492b      	ldr	r1, [pc, #172]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 801612a:	400a      	ands	r2, r1
 801612c:	801a      	strh	r2, [r3, #0]
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	009b      	lsls	r3, r3, #2
 8016136:	18d3      	adds	r3, r2, r3
 8016138:	183a      	adds	r2, r7, r0
 801613a:	8812      	ldrh	r2, [r2, #0]
 801613c:	4927      	ldr	r1, [pc, #156]	@ (80161dc <USB_DeactivateEndpoint+0x36c>)
 801613e:	430a      	orrs	r2, r1
 8016140:	b292      	uxth	r2, r2
 8016142:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8016144:	687a      	ldr	r2, [r7, #4]
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	009b      	lsls	r3, r3, #2
 801614c:	18d3      	adds	r3, r2, r3
 801614e:	881b      	ldrh	r3, [r3, #0]
 8016150:	b29a      	uxth	r2, r3
 8016152:	2026      	movs	r0, #38	@ 0x26
 8016154:	183b      	adds	r3, r7, r0
 8016156:	4920      	ldr	r1, [pc, #128]	@ (80161d8 <USB_DeactivateEndpoint+0x368>)
 8016158:	400a      	ands	r2, r1
 801615a:	801a      	strh	r2, [r3, #0]
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	009b      	lsls	r3, r3, #2
 8016164:	18d3      	adds	r3, r2, r3
 8016166:	183a      	adds	r2, r7, r0
 8016168:	8812      	ldrh	r2, [r2, #0]
 801616a:	491f      	ldr	r1, [pc, #124]	@ (80161e8 <USB_DeactivateEndpoint+0x378>)
 801616c:	430a      	orrs	r2, r1
 801616e:	b292      	uxth	r2, r2
 8016170:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	009b      	lsls	r3, r3, #2
 801617a:	18d3      	adds	r3, r2, r3
 801617c:	881b      	ldrh	r3, [r3, #0]
 801617e:	b29a      	uxth	r2, r3
 8016180:	2024      	movs	r0, #36	@ 0x24
 8016182:	183b      	adds	r3, r7, r0
 8016184:	4916      	ldr	r1, [pc, #88]	@ (80161e0 <USB_DeactivateEndpoint+0x370>)
 8016186:	400a      	ands	r2, r1
 8016188:	801a      	strh	r2, [r3, #0]
 801618a:	687a      	ldr	r2, [r7, #4]
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	009b      	lsls	r3, r3, #2
 8016192:	18d3      	adds	r3, r2, r3
 8016194:	183a      	adds	r2, r7, r0
 8016196:	8812      	ldrh	r2, [r2, #0]
 8016198:	4912      	ldr	r1, [pc, #72]	@ (80161e4 <USB_DeactivateEndpoint+0x374>)
 801619a:	430a      	orrs	r2, r1
 801619c:	b292      	uxth	r2, r2
 801619e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80161a0:	687a      	ldr	r2, [r7, #4]
 80161a2:	683b      	ldr	r3, [r7, #0]
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	009b      	lsls	r3, r3, #2
 80161a8:	18d3      	adds	r3, r2, r3
 80161aa:	881b      	ldrh	r3, [r3, #0]
 80161ac:	b29a      	uxth	r2, r3
 80161ae:	2022      	movs	r0, #34	@ 0x22
 80161b0:	183b      	adds	r3, r7, r0
 80161b2:	490e      	ldr	r1, [pc, #56]	@ (80161ec <USB_DeactivateEndpoint+0x37c>)
 80161b4:	400a      	ands	r2, r1
 80161b6:	801a      	strh	r2, [r3, #0]
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	18d3      	adds	r3, r2, r3
 80161c2:	183a      	adds	r2, r7, r0
 80161c4:	8812      	ldrh	r2, [r2, #0]
 80161c6:	4907      	ldr	r1, [pc, #28]	@ (80161e4 <USB_DeactivateEndpoint+0x374>)
 80161c8:	430a      	orrs	r2, r1
 80161ca:	b292      	uxth	r2, r2
 80161cc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80161ce:	2300      	movs	r3, #0
}
 80161d0:	0018      	movs	r0, r3
 80161d2:	46bd      	mov	sp, r7
 80161d4:	b00c      	add	sp, #48	@ 0x30
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	ffff8f8f 	.word	0xffff8f8f
 80161dc:	ffff80c0 	.word	0xffff80c0
 80161e0:	ffff8fbf 	.word	0xffff8fbf
 80161e4:	ffff8080 	.word	0xffff8080
 80161e8:	ffffc080 	.word	0xffffc080
 80161ec:	ffffbf8f 	.word	0xffffbf8f

080161f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80161f0:	b590      	push	{r4, r7, lr}
 80161f2:	b0c3      	sub	sp, #268	@ 0x10c
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80161fa:	683b      	ldr	r3, [r7, #0]
 80161fc:	785b      	ldrb	r3, [r3, #1]
 80161fe:	2b01      	cmp	r3, #1
 8016200:	d001      	beq.n	8016206 <USB_EPStartXfer+0x16>
 8016202:	f000 fd2d 	bl	8016c60 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	699a      	ldr	r2, [r3, #24]
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	691b      	ldr	r3, [r3, #16]
 801620e:	429a      	cmp	r2, r3
 8016210:	d905      	bls.n	801621e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	691b      	ldr	r3, [r3, #16]
 8016216:	1d7a      	adds	r2, r7, #5
 8016218:	32ff      	adds	r2, #255	@ 0xff
 801621a:	6013      	str	r3, [r2, #0]
 801621c:	e004      	b.n	8016228 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	699b      	ldr	r3, [r3, #24]
 8016222:	1d7a      	adds	r2, r7, #5
 8016224:	32ff      	adds	r2, #255	@ 0xff
 8016226:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	7b1b      	ldrb	r3, [r3, #12]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d125      	bne.n	801627c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	6959      	ldr	r1, [r3, #20]
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	88da      	ldrh	r2, [r3, #6]
 8016238:	1d7b      	adds	r3, r7, #5
 801623a:	33ff      	adds	r3, #255	@ 0xff
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	b29b      	uxth	r3, r3
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f001 fa47 	bl	80176d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	613b      	str	r3, [r7, #16]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2250      	movs	r2, #80	@ 0x50
 801624e:	5a9b      	ldrh	r3, [r3, r2]
 8016250:	b29b      	uxth	r3, r3
 8016252:	001a      	movs	r2, r3
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	189b      	adds	r3, r3, r2
 8016258:	613b      	str	r3, [r7, #16]
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	00da      	lsls	r2, r3, #3
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	18d3      	adds	r3, r2, r3
 8016264:	4ad7      	ldr	r2, [pc, #860]	@ (80165c4 <USB_EPStartXfer+0x3d4>)
 8016266:	4694      	mov	ip, r2
 8016268:	4463      	add	r3, ip
 801626a:	60fb      	str	r3, [r7, #12]
 801626c:	1d7b      	adds	r3, r7, #5
 801626e:	33ff      	adds	r3, #255	@ 0xff
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	b29a      	uxth	r2, r3
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	801a      	strh	r2, [r3, #0]
 8016278:	f000 fccd 	bl	8016c16 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	78db      	ldrb	r3, [r3, #3]
 8016280:	2b02      	cmp	r3, #2
 8016282:	d000      	beq.n	8016286 <USB_EPStartXfer+0x96>
 8016284:	e362      	b.n	801694c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	6a1a      	ldr	r2, [r3, #32]
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	691b      	ldr	r3, [r3, #16]
 801628e:	429a      	cmp	r2, r3
 8016290:	d800      	bhi.n	8016294 <USB_EPStartXfer+0xa4>
 8016292:	e309      	b.n	80168a8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8016294:	687a      	ldr	r2, [r7, #4]
 8016296:	683b      	ldr	r3, [r7, #0]
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	009b      	lsls	r3, r3, #2
 801629c:	18d3      	adds	r3, r2, r3
 801629e:	881b      	ldrh	r3, [r3, #0]
 80162a0:	b29a      	uxth	r2, r3
 80162a2:	2056      	movs	r0, #86	@ 0x56
 80162a4:	183b      	adds	r3, r7, r0
 80162a6:	49c8      	ldr	r1, [pc, #800]	@ (80165c8 <USB_EPStartXfer+0x3d8>)
 80162a8:	400a      	ands	r2, r1
 80162aa:	801a      	strh	r2, [r3, #0]
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	009b      	lsls	r3, r3, #2
 80162b4:	18d3      	adds	r3, r2, r3
 80162b6:	183a      	adds	r2, r7, r0
 80162b8:	8812      	ldrh	r2, [r2, #0]
 80162ba:	49c4      	ldr	r1, [pc, #784]	@ (80165cc <USB_EPStartXfer+0x3dc>)
 80162bc:	430a      	orrs	r2, r1
 80162be:	b292      	uxth	r2, r2
 80162c0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	6a1a      	ldr	r2, [r3, #32]
 80162c6:	1d7b      	adds	r3, r7, #5
 80162c8:	33ff      	adds	r3, #255	@ 0xff
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	1ad2      	subs	r2, r2, r3
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	18d3      	adds	r3, r2, r3
 80162dc:	881b      	ldrh	r3, [r3, #0]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	001a      	movs	r2, r3
 80162e2:	2340      	movs	r3, #64	@ 0x40
 80162e4:	4013      	ands	r3, r2
 80162e6:	d100      	bne.n	80162ea <USB_EPStartXfer+0xfa>
 80162e8:	e176      	b.n	80165d8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	785b      	ldrb	r3, [r3, #1]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d000      	beq.n	80162f8 <USB_EPStartXfer+0x108>
 80162f6:	e074      	b.n	80163e2 <USB_EPStartXfer+0x1f2>
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2250      	movs	r2, #80	@ 0x50
 8016300:	5a9b      	ldrh	r3, [r3, r2]
 8016302:	b29b      	uxth	r3, r3
 8016304:	001a      	movs	r2, r3
 8016306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016308:	189b      	adds	r3, r3, r2
 801630a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801630c:	683b      	ldr	r3, [r7, #0]
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	00da      	lsls	r2, r3, #3
 8016312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016314:	18d3      	adds	r3, r2, r3
 8016316:	4aae      	ldr	r2, [pc, #696]	@ (80165d0 <USB_EPStartXfer+0x3e0>)
 8016318:	4694      	mov	ip, r2
 801631a:	4463      	add	r3, ip
 801631c:	627b      	str	r3, [r7, #36]	@ 0x24
 801631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016320:	881b      	ldrh	r3, [r3, #0]
 8016322:	b29b      	uxth	r3, r3
 8016324:	059b      	lsls	r3, r3, #22
 8016326:	0d9b      	lsrs	r3, r3, #22
 8016328:	b29a      	uxth	r2, r3
 801632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801632c:	801a      	strh	r2, [r3, #0]
 801632e:	1d7b      	adds	r3, r7, #5
 8016330:	33ff      	adds	r3, #255	@ 0xff
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b3e      	cmp	r3, #62	@ 0x3e
 8016336:	d924      	bls.n	8016382 <USB_EPStartXfer+0x192>
 8016338:	1d7b      	adds	r3, r7, #5
 801633a:	33ff      	adds	r3, #255	@ 0xff
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	095b      	lsrs	r3, r3, #5
 8016340:	1c7a      	adds	r2, r7, #1
 8016342:	32ff      	adds	r2, #255	@ 0xff
 8016344:	6013      	str	r3, [r2, #0]
 8016346:	1d7b      	adds	r3, r7, #5
 8016348:	33ff      	adds	r3, #255	@ 0xff
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	221f      	movs	r2, #31
 801634e:	4013      	ands	r3, r2
 8016350:	d106      	bne.n	8016360 <USB_EPStartXfer+0x170>
 8016352:	1c7b      	adds	r3, r7, #1
 8016354:	33ff      	adds	r3, #255	@ 0xff
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	3b01      	subs	r3, #1
 801635a:	1c7a      	adds	r2, r7, #1
 801635c:	32ff      	adds	r2, #255	@ 0xff
 801635e:	6013      	str	r3, [r2, #0]
 8016360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016362:	881b      	ldrh	r3, [r3, #0]
 8016364:	b29a      	uxth	r2, r3
 8016366:	1c7b      	adds	r3, r7, #1
 8016368:	33ff      	adds	r3, #255	@ 0xff
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	b29b      	uxth	r3, r3
 801636e:	029b      	lsls	r3, r3, #10
 8016370:	b29b      	uxth	r3, r3
 8016372:	4313      	orrs	r3, r2
 8016374:	b29b      	uxth	r3, r3
 8016376:	4a97      	ldr	r2, [pc, #604]	@ (80165d4 <USB_EPStartXfer+0x3e4>)
 8016378:	4313      	orrs	r3, r2
 801637a:	b29a      	uxth	r2, r3
 801637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801637e:	801a      	strh	r2, [r3, #0]
 8016380:	e04a      	b.n	8016418 <USB_EPStartXfer+0x228>
 8016382:	1d7b      	adds	r3, r7, #5
 8016384:	33ff      	adds	r3, #255	@ 0xff
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d108      	bne.n	801639e <USB_EPStartXfer+0x1ae>
 801638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801638e:	881b      	ldrh	r3, [r3, #0]
 8016390:	b29b      	uxth	r3, r3
 8016392:	4a90      	ldr	r2, [pc, #576]	@ (80165d4 <USB_EPStartXfer+0x3e4>)
 8016394:	4313      	orrs	r3, r2
 8016396:	b29a      	uxth	r2, r3
 8016398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801639a:	801a      	strh	r2, [r3, #0]
 801639c:	e03c      	b.n	8016418 <USB_EPStartXfer+0x228>
 801639e:	1d7b      	adds	r3, r7, #5
 80163a0:	33ff      	adds	r3, #255	@ 0xff
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	085b      	lsrs	r3, r3, #1
 80163a6:	1c7a      	adds	r2, r7, #1
 80163a8:	32ff      	adds	r2, #255	@ 0xff
 80163aa:	6013      	str	r3, [r2, #0]
 80163ac:	1d7b      	adds	r3, r7, #5
 80163ae:	33ff      	adds	r3, #255	@ 0xff
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2201      	movs	r2, #1
 80163b4:	4013      	ands	r3, r2
 80163b6:	d006      	beq.n	80163c6 <USB_EPStartXfer+0x1d6>
 80163b8:	1c7b      	adds	r3, r7, #1
 80163ba:	33ff      	adds	r3, #255	@ 0xff
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	3301      	adds	r3, #1
 80163c0:	1c7a      	adds	r2, r7, #1
 80163c2:	32ff      	adds	r2, #255	@ 0xff
 80163c4:	6013      	str	r3, [r2, #0]
 80163c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c8:	881b      	ldrh	r3, [r3, #0]
 80163ca:	b29a      	uxth	r2, r3
 80163cc:	1c7b      	adds	r3, r7, #1
 80163ce:	33ff      	adds	r3, #255	@ 0xff
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	029b      	lsls	r3, r3, #10
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	4313      	orrs	r3, r2
 80163da:	b29a      	uxth	r2, r3
 80163dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163de:	801a      	strh	r2, [r3, #0]
 80163e0:	e01a      	b.n	8016418 <USB_EPStartXfer+0x228>
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	785b      	ldrb	r3, [r3, #1]
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	d116      	bne.n	8016418 <USB_EPStartXfer+0x228>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2250      	movs	r2, #80	@ 0x50
 80163ee:	5a9b      	ldrh	r3, [r3, r2]
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	001a      	movs	r2, r3
 80163f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163f6:	189b      	adds	r3, r3, r2
 80163f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	781b      	ldrb	r3, [r3, #0]
 80163fe:	00da      	lsls	r2, r3, #3
 8016400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016402:	18d3      	adds	r3, r2, r3
 8016404:	4a72      	ldr	r2, [pc, #456]	@ (80165d0 <USB_EPStartXfer+0x3e0>)
 8016406:	4694      	mov	ip, r2
 8016408:	4463      	add	r3, ip
 801640a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801640c:	1d7b      	adds	r3, r7, #5
 801640e:	33ff      	adds	r3, #255	@ 0xff
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	b29a      	uxth	r2, r3
 8016414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016416:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8016418:	2076      	movs	r0, #118	@ 0x76
 801641a:	183b      	adds	r3, r7, r0
 801641c:	683a      	ldr	r2, [r7, #0]
 801641e:	8952      	ldrh	r2, [r2, #10]
 8016420:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	6959      	ldr	r1, [r3, #20]
 8016426:	1d7b      	adds	r3, r7, #5
 8016428:	33ff      	adds	r3, #255	@ 0xff
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	b29c      	uxth	r4, r3
 801642e:	183b      	adds	r3, r7, r0
 8016430:	881a      	ldrh	r2, [r3, #0]
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	0023      	movs	r3, r4
 8016436:	f001 f94d 	bl	80176d4 <USB_WritePMA>
            ep->xfer_buff += len;
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	695a      	ldr	r2, [r3, #20]
 801643e:	1d7b      	adds	r3, r7, #5
 8016440:	33ff      	adds	r3, #255	@ 0xff
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	18d2      	adds	r2, r2, r3
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	6a1a      	ldr	r2, [r3, #32]
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	691b      	ldr	r3, [r3, #16]
 8016452:	429a      	cmp	r2, r3
 8016454:	d908      	bls.n	8016468 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	6a1a      	ldr	r2, [r3, #32]
 801645a:	1d7b      	adds	r3, r7, #5
 801645c:	33ff      	adds	r3, #255	@ 0xff
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	1ad2      	subs	r2, r2, r3
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	621a      	str	r2, [r3, #32]
 8016466:	e007      	b.n	8016478 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	6a1b      	ldr	r3, [r3, #32]
 801646c:	1d7a      	adds	r2, r7, #5
 801646e:	32ff      	adds	r2, #255	@ 0xff
 8016470:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	2200      	movs	r2, #0
 8016476:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	785b      	ldrb	r3, [r3, #1]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d000      	beq.n	8016482 <USB_EPStartXfer+0x292>
 8016480:	e070      	b.n	8016564 <USB_EPStartXfer+0x374>
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	61bb      	str	r3, [r7, #24]
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2250      	movs	r2, #80	@ 0x50
 801648a:	5a9b      	ldrh	r3, [r3, r2]
 801648c:	b29b      	uxth	r3, r3
 801648e:	001a      	movs	r2, r3
 8016490:	69bb      	ldr	r3, [r7, #24]
 8016492:	189b      	adds	r3, r3, r2
 8016494:	61bb      	str	r3, [r7, #24]
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	781b      	ldrb	r3, [r3, #0]
 801649a:	00da      	lsls	r2, r3, #3
 801649c:	69bb      	ldr	r3, [r7, #24]
 801649e:	18d3      	adds	r3, r2, r3
 80164a0:	4a48      	ldr	r2, [pc, #288]	@ (80165c4 <USB_EPStartXfer+0x3d4>)
 80164a2:	4694      	mov	ip, r2
 80164a4:	4463      	add	r3, ip
 80164a6:	617b      	str	r3, [r7, #20]
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	881b      	ldrh	r3, [r3, #0]
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	059b      	lsls	r3, r3, #22
 80164b0:	0d9b      	lsrs	r3, r3, #22
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	801a      	strh	r2, [r3, #0]
 80164b8:	1d7b      	adds	r3, r7, #5
 80164ba:	33ff      	adds	r3, #255	@ 0xff
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	2b3e      	cmp	r3, #62	@ 0x3e
 80164c0:	d922      	bls.n	8016508 <USB_EPStartXfer+0x318>
 80164c2:	1d7b      	adds	r3, r7, #5
 80164c4:	33ff      	adds	r3, #255	@ 0xff
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	095b      	lsrs	r3, r3, #5
 80164ca:	21fc      	movs	r1, #252	@ 0xfc
 80164cc:	187a      	adds	r2, r7, r1
 80164ce:	6013      	str	r3, [r2, #0]
 80164d0:	1d7b      	adds	r3, r7, #5
 80164d2:	33ff      	adds	r3, #255	@ 0xff
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	221f      	movs	r2, #31
 80164d8:	4013      	ands	r3, r2
 80164da:	d104      	bne.n	80164e6 <USB_EPStartXfer+0x2f6>
 80164dc:	187b      	adds	r3, r7, r1
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	3b01      	subs	r3, #1
 80164e2:	187a      	adds	r2, r7, r1
 80164e4:	6013      	str	r3, [r2, #0]
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	881b      	ldrh	r3, [r3, #0]
 80164ea:	b29a      	uxth	r2, r3
 80164ec:	23fc      	movs	r3, #252	@ 0xfc
 80164ee:	18fb      	adds	r3, r7, r3
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	029b      	lsls	r3, r3, #10
 80164f6:	b29b      	uxth	r3, r3
 80164f8:	4313      	orrs	r3, r2
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	4a35      	ldr	r2, [pc, #212]	@ (80165d4 <USB_EPStartXfer+0x3e4>)
 80164fe:	4313      	orrs	r3, r2
 8016500:	b29a      	uxth	r2, r3
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	801a      	strh	r2, [r3, #0]
 8016506:	e04a      	b.n	801659e <USB_EPStartXfer+0x3ae>
 8016508:	1d7b      	adds	r3, r7, #5
 801650a:	33ff      	adds	r3, #255	@ 0xff
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d108      	bne.n	8016524 <USB_EPStartXfer+0x334>
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	b29b      	uxth	r3, r3
 8016518:	4a2e      	ldr	r2, [pc, #184]	@ (80165d4 <USB_EPStartXfer+0x3e4>)
 801651a:	4313      	orrs	r3, r2
 801651c:	b29a      	uxth	r2, r3
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	801a      	strh	r2, [r3, #0]
 8016522:	e03c      	b.n	801659e <USB_EPStartXfer+0x3ae>
 8016524:	1d7b      	adds	r3, r7, #5
 8016526:	33ff      	adds	r3, #255	@ 0xff
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	085b      	lsrs	r3, r3, #1
 801652c:	21fc      	movs	r1, #252	@ 0xfc
 801652e:	187a      	adds	r2, r7, r1
 8016530:	6013      	str	r3, [r2, #0]
 8016532:	1d7b      	adds	r3, r7, #5
 8016534:	33ff      	adds	r3, #255	@ 0xff
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	2201      	movs	r2, #1
 801653a:	4013      	ands	r3, r2
 801653c:	d004      	beq.n	8016548 <USB_EPStartXfer+0x358>
 801653e:	187b      	adds	r3, r7, r1
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	3301      	adds	r3, #1
 8016544:	187a      	adds	r2, r7, r1
 8016546:	6013      	str	r3, [r2, #0]
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	881b      	ldrh	r3, [r3, #0]
 801654c:	b29a      	uxth	r2, r3
 801654e:	23fc      	movs	r3, #252	@ 0xfc
 8016550:	18fb      	adds	r3, r7, r3
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	b29b      	uxth	r3, r3
 8016556:	029b      	lsls	r3, r3, #10
 8016558:	b29b      	uxth	r3, r3
 801655a:	4313      	orrs	r3, r2
 801655c:	b29a      	uxth	r2, r3
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	801a      	strh	r2, [r3, #0]
 8016562:	e01c      	b.n	801659e <USB_EPStartXfer+0x3ae>
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	785b      	ldrb	r3, [r3, #1]
 8016568:	2b01      	cmp	r3, #1
 801656a:	d118      	bne.n	801659e <USB_EPStartXfer+0x3ae>
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	623b      	str	r3, [r7, #32]
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2250      	movs	r2, #80	@ 0x50
 8016574:	5a9b      	ldrh	r3, [r3, r2]
 8016576:	b29b      	uxth	r3, r3
 8016578:	001a      	movs	r2, r3
 801657a:	6a3b      	ldr	r3, [r7, #32]
 801657c:	189b      	adds	r3, r3, r2
 801657e:	623b      	str	r3, [r7, #32]
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	00da      	lsls	r2, r3, #3
 8016586:	6a3b      	ldr	r3, [r7, #32]
 8016588:	18d3      	adds	r3, r2, r3
 801658a:	4a0e      	ldr	r2, [pc, #56]	@ (80165c4 <USB_EPStartXfer+0x3d4>)
 801658c:	4694      	mov	ip, r2
 801658e:	4463      	add	r3, ip
 8016590:	61fb      	str	r3, [r7, #28]
 8016592:	1d7b      	adds	r3, r7, #5
 8016594:	33ff      	adds	r3, #255	@ 0xff
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	b29a      	uxth	r2, r3
 801659a:	69fb      	ldr	r3, [r7, #28]
 801659c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801659e:	2076      	movs	r0, #118	@ 0x76
 80165a0:	183b      	adds	r3, r7, r0
 80165a2:	683a      	ldr	r2, [r7, #0]
 80165a4:	8912      	ldrh	r2, [r2, #8]
 80165a6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	6959      	ldr	r1, [r3, #20]
 80165ac:	1d7b      	adds	r3, r7, #5
 80165ae:	33ff      	adds	r3, #255	@ 0xff
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	b29c      	uxth	r4, r3
 80165b4:	183b      	adds	r3, r7, r0
 80165b6:	881a      	ldrh	r2, [r3, #0]
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	0023      	movs	r3, r4
 80165bc:	f001 f88a 	bl	80176d4 <USB_WritePMA>
 80165c0:	e329      	b.n	8016c16 <USB_EPStartXfer+0xa26>
 80165c2:	46c0      	nop			@ (mov r8, r8)
 80165c4:	00000402 	.word	0x00000402
 80165c8:	ffff8f8f 	.word	0xffff8f8f
 80165cc:	ffff8180 	.word	0xffff8180
 80165d0:	00000406 	.word	0x00000406
 80165d4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	785b      	ldrb	r3, [r3, #1]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d000      	beq.n	80165e2 <USB_EPStartXfer+0x3f2>
 80165e0:	e070      	b.n	80166c4 <USB_EPStartXfer+0x4d4>
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	2250      	movs	r2, #80	@ 0x50
 80165ea:	5a9b      	ldrh	r3, [r3, r2]
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	001a      	movs	r2, r3
 80165f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80165f2:	189b      	adds	r3, r3, r2
 80165f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	781b      	ldrb	r3, [r3, #0]
 80165fa:	00da      	lsls	r2, r3, #3
 80165fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80165fe:	18d3      	adds	r3, r2, r3
 8016600:	4acd      	ldr	r2, [pc, #820]	@ (8016938 <USB_EPStartXfer+0x748>)
 8016602:	4694      	mov	ip, r2
 8016604:	4463      	add	r3, ip
 8016606:	647b      	str	r3, [r7, #68]	@ 0x44
 8016608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801660a:	881b      	ldrh	r3, [r3, #0]
 801660c:	b29b      	uxth	r3, r3
 801660e:	059b      	lsls	r3, r3, #22
 8016610:	0d9b      	lsrs	r3, r3, #22
 8016612:	b29a      	uxth	r2, r3
 8016614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016616:	801a      	strh	r2, [r3, #0]
 8016618:	1d7b      	adds	r3, r7, #5
 801661a:	33ff      	adds	r3, #255	@ 0xff
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016620:	d922      	bls.n	8016668 <USB_EPStartXfer+0x478>
 8016622:	1d7b      	adds	r3, r7, #5
 8016624:	33ff      	adds	r3, #255	@ 0xff
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	095b      	lsrs	r3, r3, #5
 801662a:	21f8      	movs	r1, #248	@ 0xf8
 801662c:	187a      	adds	r2, r7, r1
 801662e:	6013      	str	r3, [r2, #0]
 8016630:	1d7b      	adds	r3, r7, #5
 8016632:	33ff      	adds	r3, #255	@ 0xff
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	221f      	movs	r2, #31
 8016638:	4013      	ands	r3, r2
 801663a:	d104      	bne.n	8016646 <USB_EPStartXfer+0x456>
 801663c:	187b      	adds	r3, r7, r1
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	3b01      	subs	r3, #1
 8016642:	187a      	adds	r2, r7, r1
 8016644:	6013      	str	r3, [r2, #0]
 8016646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016648:	881b      	ldrh	r3, [r3, #0]
 801664a:	b29a      	uxth	r2, r3
 801664c:	23f8      	movs	r3, #248	@ 0xf8
 801664e:	18fb      	adds	r3, r7, r3
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	b29b      	uxth	r3, r3
 8016654:	029b      	lsls	r3, r3, #10
 8016656:	b29b      	uxth	r3, r3
 8016658:	4313      	orrs	r3, r2
 801665a:	b29b      	uxth	r3, r3
 801665c:	4ab7      	ldr	r2, [pc, #732]	@ (801693c <USB_EPStartXfer+0x74c>)
 801665e:	4313      	orrs	r3, r2
 8016660:	b29a      	uxth	r2, r3
 8016662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016664:	801a      	strh	r2, [r3, #0]
 8016666:	e04a      	b.n	80166fe <USB_EPStartXfer+0x50e>
 8016668:	1d7b      	adds	r3, r7, #5
 801666a:	33ff      	adds	r3, #255	@ 0xff
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d108      	bne.n	8016684 <USB_EPStartXfer+0x494>
 8016672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016674:	881b      	ldrh	r3, [r3, #0]
 8016676:	b29b      	uxth	r3, r3
 8016678:	4ab0      	ldr	r2, [pc, #704]	@ (801693c <USB_EPStartXfer+0x74c>)
 801667a:	4313      	orrs	r3, r2
 801667c:	b29a      	uxth	r2, r3
 801667e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016680:	801a      	strh	r2, [r3, #0]
 8016682:	e03c      	b.n	80166fe <USB_EPStartXfer+0x50e>
 8016684:	1d7b      	adds	r3, r7, #5
 8016686:	33ff      	adds	r3, #255	@ 0xff
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	085b      	lsrs	r3, r3, #1
 801668c:	21f8      	movs	r1, #248	@ 0xf8
 801668e:	187a      	adds	r2, r7, r1
 8016690:	6013      	str	r3, [r2, #0]
 8016692:	1d7b      	adds	r3, r7, #5
 8016694:	33ff      	adds	r3, #255	@ 0xff
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	2201      	movs	r2, #1
 801669a:	4013      	ands	r3, r2
 801669c:	d004      	beq.n	80166a8 <USB_EPStartXfer+0x4b8>
 801669e:	187b      	adds	r3, r7, r1
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	3301      	adds	r3, #1
 80166a4:	187a      	adds	r2, r7, r1
 80166a6:	6013      	str	r3, [r2, #0]
 80166a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80166aa:	881b      	ldrh	r3, [r3, #0]
 80166ac:	b29a      	uxth	r2, r3
 80166ae:	23f8      	movs	r3, #248	@ 0xf8
 80166b0:	18fb      	adds	r3, r7, r3
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	b29b      	uxth	r3, r3
 80166b6:	029b      	lsls	r3, r3, #10
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	4313      	orrs	r3, r2
 80166bc:	b29a      	uxth	r2, r3
 80166be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80166c0:	801a      	strh	r2, [r3, #0]
 80166c2:	e01c      	b.n	80166fe <USB_EPStartXfer+0x50e>
 80166c4:	683b      	ldr	r3, [r7, #0]
 80166c6:	785b      	ldrb	r3, [r3, #1]
 80166c8:	2b01      	cmp	r3, #1
 80166ca:	d118      	bne.n	80166fe <USB_EPStartXfer+0x50e>
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2250      	movs	r2, #80	@ 0x50
 80166d4:	5a9b      	ldrh	r3, [r3, r2]
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	001a      	movs	r2, r3
 80166da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166dc:	189b      	adds	r3, r3, r2
 80166de:	653b      	str	r3, [r7, #80]	@ 0x50
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	00da      	lsls	r2, r3, #3
 80166e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166e8:	18d3      	adds	r3, r2, r3
 80166ea:	4a93      	ldr	r2, [pc, #588]	@ (8016938 <USB_EPStartXfer+0x748>)
 80166ec:	4694      	mov	ip, r2
 80166ee:	4463      	add	r3, ip
 80166f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80166f2:	1d7b      	adds	r3, r7, #5
 80166f4:	33ff      	adds	r3, #255	@ 0xff
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	b29a      	uxth	r2, r3
 80166fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80166fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80166fe:	2076      	movs	r0, #118	@ 0x76
 8016700:	183b      	adds	r3, r7, r0
 8016702:	683a      	ldr	r2, [r7, #0]
 8016704:	8912      	ldrh	r2, [r2, #8]
 8016706:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016708:	683b      	ldr	r3, [r7, #0]
 801670a:	6959      	ldr	r1, [r3, #20]
 801670c:	1d7b      	adds	r3, r7, #5
 801670e:	33ff      	adds	r3, #255	@ 0xff
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	b29c      	uxth	r4, r3
 8016714:	183b      	adds	r3, r7, r0
 8016716:	881a      	ldrh	r2, [r3, #0]
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	0023      	movs	r3, r4
 801671c:	f000 ffda 	bl	80176d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	695a      	ldr	r2, [r3, #20]
 8016724:	1d7b      	adds	r3, r7, #5
 8016726:	33ff      	adds	r3, #255	@ 0xff
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	18d2      	adds	r2, r2, r3
 801672c:	683b      	ldr	r3, [r7, #0]
 801672e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	6a1a      	ldr	r2, [r3, #32]
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	691b      	ldr	r3, [r3, #16]
 8016738:	429a      	cmp	r2, r3
 801673a:	d908      	bls.n	801674e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	6a1a      	ldr	r2, [r3, #32]
 8016740:	1d7b      	adds	r3, r7, #5
 8016742:	33ff      	adds	r3, #255	@ 0xff
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	1ad2      	subs	r2, r2, r3
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	621a      	str	r2, [r3, #32]
 801674c:	e007      	b.n	801675e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	6a1b      	ldr	r3, [r3, #32]
 8016752:	1d7a      	adds	r2, r7, #5
 8016754:	32ff      	adds	r2, #255	@ 0xff
 8016756:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	2200      	movs	r2, #0
 801675c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	643b      	str	r3, [r7, #64]	@ 0x40
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	785b      	ldrb	r3, [r3, #1]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d000      	beq.n	801676c <USB_EPStartXfer+0x57c>
 801676a:	e070      	b.n	801684e <USB_EPStartXfer+0x65e>
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2250      	movs	r2, #80	@ 0x50
 8016774:	5a9b      	ldrh	r3, [r3, r2]
 8016776:	b29b      	uxth	r3, r3
 8016778:	001a      	movs	r2, r3
 801677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801677c:	189b      	adds	r3, r3, r2
 801677e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	00da      	lsls	r2, r3, #3
 8016786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016788:	18d3      	adds	r3, r2, r3
 801678a:	4a6d      	ldr	r2, [pc, #436]	@ (8016940 <USB_EPStartXfer+0x750>)
 801678c:	4694      	mov	ip, r2
 801678e:	4463      	add	r3, ip
 8016790:	637b      	str	r3, [r7, #52]	@ 0x34
 8016792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016794:	881b      	ldrh	r3, [r3, #0]
 8016796:	b29b      	uxth	r3, r3
 8016798:	059b      	lsls	r3, r3, #22
 801679a:	0d9b      	lsrs	r3, r3, #22
 801679c:	b29a      	uxth	r2, r3
 801679e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167a0:	801a      	strh	r2, [r3, #0]
 80167a2:	1d7b      	adds	r3, r7, #5
 80167a4:	33ff      	adds	r3, #255	@ 0xff
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80167aa:	d922      	bls.n	80167f2 <USB_EPStartXfer+0x602>
 80167ac:	1d7b      	adds	r3, r7, #5
 80167ae:	33ff      	adds	r3, #255	@ 0xff
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	095b      	lsrs	r3, r3, #5
 80167b4:	21f4      	movs	r1, #244	@ 0xf4
 80167b6:	187a      	adds	r2, r7, r1
 80167b8:	6013      	str	r3, [r2, #0]
 80167ba:	1d7b      	adds	r3, r7, #5
 80167bc:	33ff      	adds	r3, #255	@ 0xff
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	221f      	movs	r2, #31
 80167c2:	4013      	ands	r3, r2
 80167c4:	d104      	bne.n	80167d0 <USB_EPStartXfer+0x5e0>
 80167c6:	187b      	adds	r3, r7, r1
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	3b01      	subs	r3, #1
 80167cc:	187a      	adds	r2, r7, r1
 80167ce:	6013      	str	r3, [r2, #0]
 80167d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167d2:	881b      	ldrh	r3, [r3, #0]
 80167d4:	b29a      	uxth	r2, r3
 80167d6:	23f4      	movs	r3, #244	@ 0xf4
 80167d8:	18fb      	adds	r3, r7, r3
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	b29b      	uxth	r3, r3
 80167de:	029b      	lsls	r3, r3, #10
 80167e0:	b29b      	uxth	r3, r3
 80167e2:	4313      	orrs	r3, r2
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	4a55      	ldr	r2, [pc, #340]	@ (801693c <USB_EPStartXfer+0x74c>)
 80167e8:	4313      	orrs	r3, r2
 80167ea:	b29a      	uxth	r2, r3
 80167ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167ee:	801a      	strh	r2, [r3, #0]
 80167f0:	e048      	b.n	8016884 <USB_EPStartXfer+0x694>
 80167f2:	1d7b      	adds	r3, r7, #5
 80167f4:	33ff      	adds	r3, #255	@ 0xff
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d108      	bne.n	801680e <USB_EPStartXfer+0x61e>
 80167fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167fe:	881b      	ldrh	r3, [r3, #0]
 8016800:	b29b      	uxth	r3, r3
 8016802:	4a4e      	ldr	r2, [pc, #312]	@ (801693c <USB_EPStartXfer+0x74c>)
 8016804:	4313      	orrs	r3, r2
 8016806:	b29a      	uxth	r2, r3
 8016808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801680a:	801a      	strh	r2, [r3, #0]
 801680c:	e03a      	b.n	8016884 <USB_EPStartXfer+0x694>
 801680e:	1d7b      	adds	r3, r7, #5
 8016810:	33ff      	adds	r3, #255	@ 0xff
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	085b      	lsrs	r3, r3, #1
 8016816:	21f4      	movs	r1, #244	@ 0xf4
 8016818:	187a      	adds	r2, r7, r1
 801681a:	6013      	str	r3, [r2, #0]
 801681c:	1d7b      	adds	r3, r7, #5
 801681e:	33ff      	adds	r3, #255	@ 0xff
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	2201      	movs	r2, #1
 8016824:	4013      	ands	r3, r2
 8016826:	d004      	beq.n	8016832 <USB_EPStartXfer+0x642>
 8016828:	187b      	adds	r3, r7, r1
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	3301      	adds	r3, #1
 801682e:	187a      	adds	r2, r7, r1
 8016830:	6013      	str	r3, [r2, #0]
 8016832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016834:	881b      	ldrh	r3, [r3, #0]
 8016836:	b29a      	uxth	r2, r3
 8016838:	23f4      	movs	r3, #244	@ 0xf4
 801683a:	18fb      	adds	r3, r7, r3
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	b29b      	uxth	r3, r3
 8016840:	029b      	lsls	r3, r3, #10
 8016842:	b29b      	uxth	r3, r3
 8016844:	4313      	orrs	r3, r2
 8016846:	b29a      	uxth	r2, r3
 8016848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801684a:	801a      	strh	r2, [r3, #0]
 801684c:	e01a      	b.n	8016884 <USB_EPStartXfer+0x694>
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	785b      	ldrb	r3, [r3, #1]
 8016852:	2b01      	cmp	r3, #1
 8016854:	d116      	bne.n	8016884 <USB_EPStartXfer+0x694>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2250      	movs	r2, #80	@ 0x50
 801685a:	5a9b      	ldrh	r3, [r3, r2]
 801685c:	b29b      	uxth	r3, r3
 801685e:	001a      	movs	r2, r3
 8016860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016862:	189b      	adds	r3, r3, r2
 8016864:	643b      	str	r3, [r7, #64]	@ 0x40
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	781b      	ldrb	r3, [r3, #0]
 801686a:	00da      	lsls	r2, r3, #3
 801686c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801686e:	18d3      	adds	r3, r2, r3
 8016870:	4a33      	ldr	r2, [pc, #204]	@ (8016940 <USB_EPStartXfer+0x750>)
 8016872:	4694      	mov	ip, r2
 8016874:	4463      	add	r3, ip
 8016876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016878:	1d7b      	adds	r3, r7, #5
 801687a:	33ff      	adds	r3, #255	@ 0xff
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	b29a      	uxth	r2, r3
 8016880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016882:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8016884:	2076      	movs	r0, #118	@ 0x76
 8016886:	183b      	adds	r3, r7, r0
 8016888:	683a      	ldr	r2, [r7, #0]
 801688a:	8952      	ldrh	r2, [r2, #10]
 801688c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	6959      	ldr	r1, [r3, #20]
 8016892:	1d7b      	adds	r3, r7, #5
 8016894:	33ff      	adds	r3, #255	@ 0xff
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	b29c      	uxth	r4, r3
 801689a:	183b      	adds	r3, r7, r0
 801689c:	881a      	ldrh	r2, [r3, #0]
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	0023      	movs	r3, r4
 80168a2:	f000 ff17 	bl	80176d4 <USB_WritePMA>
 80168a6:	e1b6      	b.n	8016c16 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	6a1b      	ldr	r3, [r3, #32]
 80168ac:	1d7a      	adds	r2, r7, #5
 80168ae:	32ff      	adds	r2, #255	@ 0xff
 80168b0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80168b2:	687a      	ldr	r2, [r7, #4]
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	781b      	ldrb	r3, [r3, #0]
 80168b8:	009b      	lsls	r3, r3, #2
 80168ba:	18d3      	adds	r3, r2, r3
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	b29a      	uxth	r2, r3
 80168c0:	2062      	movs	r0, #98	@ 0x62
 80168c2:	183b      	adds	r3, r7, r0
 80168c4:	491f      	ldr	r1, [pc, #124]	@ (8016944 <USB_EPStartXfer+0x754>)
 80168c6:	400a      	ands	r2, r1
 80168c8:	801a      	strh	r2, [r3, #0]
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	781b      	ldrb	r3, [r3, #0]
 80168d0:	009b      	lsls	r3, r3, #2
 80168d2:	18d3      	adds	r3, r2, r3
 80168d4:	183a      	adds	r2, r7, r0
 80168d6:	8812      	ldrh	r2, [r2, #0]
 80168d8:	491b      	ldr	r1, [pc, #108]	@ (8016948 <USB_EPStartXfer+0x758>)
 80168da:	430a      	orrs	r2, r1
 80168dc:	b292      	uxth	r2, r2
 80168de:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2250      	movs	r2, #80	@ 0x50
 80168e8:	5a9b      	ldrh	r3, [r3, r2]
 80168ea:	b29b      	uxth	r3, r3
 80168ec:	001a      	movs	r2, r3
 80168ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168f0:	189b      	adds	r3, r3, r2
 80168f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	781b      	ldrb	r3, [r3, #0]
 80168f8:	00da      	lsls	r2, r3, #3
 80168fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168fc:	18d3      	adds	r3, r2, r3
 80168fe:	4a0e      	ldr	r2, [pc, #56]	@ (8016938 <USB_EPStartXfer+0x748>)
 8016900:	4694      	mov	ip, r2
 8016902:	4463      	add	r3, ip
 8016904:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016906:	1d7b      	adds	r3, r7, #5
 8016908:	33ff      	adds	r3, #255	@ 0xff
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	b29a      	uxth	r2, r3
 801690e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016910:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8016912:	2076      	movs	r0, #118	@ 0x76
 8016914:	183b      	adds	r3, r7, r0
 8016916:	683a      	ldr	r2, [r7, #0]
 8016918:	8912      	ldrh	r2, [r2, #8]
 801691a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	6959      	ldr	r1, [r3, #20]
 8016920:	1d7b      	adds	r3, r7, #5
 8016922:	33ff      	adds	r3, #255	@ 0xff
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	b29c      	uxth	r4, r3
 8016928:	183b      	adds	r3, r7, r0
 801692a:	881a      	ldrh	r2, [r3, #0]
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	0023      	movs	r3, r4
 8016930:	f000 fed0 	bl	80176d4 <USB_WritePMA>
 8016934:	e16f      	b.n	8016c16 <USB_EPStartXfer+0xa26>
 8016936:	46c0      	nop			@ (mov r8, r8)
 8016938:	00000402 	.word	0x00000402
 801693c:	ffff8000 	.word	0xffff8000
 8016940:	00000406 	.word	0x00000406
 8016944:	ffff8e8f 	.word	0xffff8e8f
 8016948:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	6a1a      	ldr	r2, [r3, #32]
 8016950:	1d7b      	adds	r3, r7, #5
 8016952:	33ff      	adds	r3, #255	@ 0xff
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	1ad2      	subs	r2, r2, r3
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801695c:	687a      	ldr	r2, [r7, #4]
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	781b      	ldrb	r3, [r3, #0]
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	18d3      	adds	r3, r2, r3
 8016966:	881b      	ldrh	r3, [r3, #0]
 8016968:	b29b      	uxth	r3, r3
 801696a:	001a      	movs	r2, r3
 801696c:	2340      	movs	r3, #64	@ 0x40
 801696e:	4013      	ands	r3, r2
 8016970:	d100      	bne.n	8016974 <USB_EPStartXfer+0x784>
 8016972:	e0a4      	b.n	8016abe <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	673b      	str	r3, [r7, #112]	@ 0x70
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	785b      	ldrb	r3, [r3, #1]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d000      	beq.n	8016982 <USB_EPStartXfer+0x792>
 8016980:	e070      	b.n	8016a64 <USB_EPStartXfer+0x874>
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	2250      	movs	r2, #80	@ 0x50
 801698a:	5a9b      	ldrh	r3, [r3, r2]
 801698c:	b29b      	uxth	r3, r3
 801698e:	001a      	movs	r2, r3
 8016990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016992:	189b      	adds	r3, r3, r2
 8016994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	00da      	lsls	r2, r3, #3
 801699c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801699e:	18d3      	adds	r3, r2, r3
 80169a0:	4abc      	ldr	r2, [pc, #752]	@ (8016c94 <USB_EPStartXfer+0xaa4>)
 80169a2:	4694      	mov	ip, r2
 80169a4:	4463      	add	r3, ip
 80169a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80169a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80169aa:	881b      	ldrh	r3, [r3, #0]
 80169ac:	b29b      	uxth	r3, r3
 80169ae:	059b      	lsls	r3, r3, #22
 80169b0:	0d9b      	lsrs	r3, r3, #22
 80169b2:	b29a      	uxth	r2, r3
 80169b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80169b6:	801a      	strh	r2, [r3, #0]
 80169b8:	1d7b      	adds	r3, r7, #5
 80169ba:	33ff      	adds	r3, #255	@ 0xff
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2b3e      	cmp	r3, #62	@ 0x3e
 80169c0:	d922      	bls.n	8016a08 <USB_EPStartXfer+0x818>
 80169c2:	1d7b      	adds	r3, r7, #5
 80169c4:	33ff      	adds	r3, #255	@ 0xff
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	095b      	lsrs	r3, r3, #5
 80169ca:	21f0      	movs	r1, #240	@ 0xf0
 80169cc:	187a      	adds	r2, r7, r1
 80169ce:	6013      	str	r3, [r2, #0]
 80169d0:	1d7b      	adds	r3, r7, #5
 80169d2:	33ff      	adds	r3, #255	@ 0xff
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	221f      	movs	r2, #31
 80169d8:	4013      	ands	r3, r2
 80169da:	d104      	bne.n	80169e6 <USB_EPStartXfer+0x7f6>
 80169dc:	187b      	adds	r3, r7, r1
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	3b01      	subs	r3, #1
 80169e2:	187a      	adds	r2, r7, r1
 80169e4:	6013      	str	r3, [r2, #0]
 80169e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80169e8:	881b      	ldrh	r3, [r3, #0]
 80169ea:	b29a      	uxth	r2, r3
 80169ec:	23f0      	movs	r3, #240	@ 0xf0
 80169ee:	18fb      	adds	r3, r7, r3
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	b29b      	uxth	r3, r3
 80169f4:	029b      	lsls	r3, r3, #10
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	4313      	orrs	r3, r2
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	4aa6      	ldr	r2, [pc, #664]	@ (8016c98 <USB_EPStartXfer+0xaa8>)
 80169fe:	4313      	orrs	r3, r2
 8016a00:	b29a      	uxth	r2, r3
 8016a02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a04:	801a      	strh	r2, [r3, #0]
 8016a06:	e048      	b.n	8016a9a <USB_EPStartXfer+0x8aa>
 8016a08:	1d7b      	adds	r3, r7, #5
 8016a0a:	33ff      	adds	r3, #255	@ 0xff
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d108      	bne.n	8016a24 <USB_EPStartXfer+0x834>
 8016a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a14:	881b      	ldrh	r3, [r3, #0]
 8016a16:	b29b      	uxth	r3, r3
 8016a18:	4a9f      	ldr	r2, [pc, #636]	@ (8016c98 <USB_EPStartXfer+0xaa8>)
 8016a1a:	4313      	orrs	r3, r2
 8016a1c:	b29a      	uxth	r2, r3
 8016a1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a20:	801a      	strh	r2, [r3, #0]
 8016a22:	e03a      	b.n	8016a9a <USB_EPStartXfer+0x8aa>
 8016a24:	1d7b      	adds	r3, r7, #5
 8016a26:	33ff      	adds	r3, #255	@ 0xff
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	085b      	lsrs	r3, r3, #1
 8016a2c:	21f0      	movs	r1, #240	@ 0xf0
 8016a2e:	187a      	adds	r2, r7, r1
 8016a30:	6013      	str	r3, [r2, #0]
 8016a32:	1d7b      	adds	r3, r7, #5
 8016a34:	33ff      	adds	r3, #255	@ 0xff
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	2201      	movs	r2, #1
 8016a3a:	4013      	ands	r3, r2
 8016a3c:	d004      	beq.n	8016a48 <USB_EPStartXfer+0x858>
 8016a3e:	187b      	adds	r3, r7, r1
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	3301      	adds	r3, #1
 8016a44:	187a      	adds	r2, r7, r1
 8016a46:	6013      	str	r3, [r2, #0]
 8016a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a4a:	881b      	ldrh	r3, [r3, #0]
 8016a4c:	b29a      	uxth	r2, r3
 8016a4e:	23f0      	movs	r3, #240	@ 0xf0
 8016a50:	18fb      	adds	r3, r7, r3
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	029b      	lsls	r3, r3, #10
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	4313      	orrs	r3, r2
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a60:	801a      	strh	r2, [r3, #0]
 8016a62:	e01a      	b.n	8016a9a <USB_EPStartXfer+0x8aa>
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	785b      	ldrb	r3, [r3, #1]
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	d116      	bne.n	8016a9a <USB_EPStartXfer+0x8aa>
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2250      	movs	r2, #80	@ 0x50
 8016a70:	5a9b      	ldrh	r3, [r3, r2]
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	001a      	movs	r2, r3
 8016a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016a78:	189b      	adds	r3, r3, r2
 8016a7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	00da      	lsls	r2, r3, #3
 8016a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016a84:	18d3      	adds	r3, r2, r3
 8016a86:	4a83      	ldr	r2, [pc, #524]	@ (8016c94 <USB_EPStartXfer+0xaa4>)
 8016a88:	4694      	mov	ip, r2
 8016a8a:	4463      	add	r3, ip
 8016a8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016a8e:	1d7b      	adds	r3, r7, #5
 8016a90:	33ff      	adds	r3, #255	@ 0xff
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	b29a      	uxth	r2, r3
 8016a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016a98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8016a9a:	2076      	movs	r0, #118	@ 0x76
 8016a9c:	183b      	adds	r3, r7, r0
 8016a9e:	683a      	ldr	r2, [r7, #0]
 8016aa0:	8952      	ldrh	r2, [r2, #10]
 8016aa2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	6959      	ldr	r1, [r3, #20]
 8016aa8:	1d7b      	adds	r3, r7, #5
 8016aaa:	33ff      	adds	r3, #255	@ 0xff
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	b29c      	uxth	r4, r3
 8016ab0:	183b      	adds	r3, r7, r0
 8016ab2:	881a      	ldrh	r2, [r3, #0]
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	0023      	movs	r3, r4
 8016ab8:	f000 fe0c 	bl	80176d4 <USB_WritePMA>
 8016abc:	e0ab      	b.n	8016c16 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	785b      	ldrb	r3, [r3, #1]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d000      	beq.n	8016ac8 <USB_EPStartXfer+0x8d8>
 8016ac6:	e070      	b.n	8016baa <USB_EPStartXfer+0x9ba>
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2250      	movs	r2, #80	@ 0x50
 8016ad0:	5a9b      	ldrh	r3, [r3, r2]
 8016ad2:	b29b      	uxth	r3, r3
 8016ad4:	001a      	movs	r2, r3
 8016ad6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016ad8:	189b      	adds	r3, r3, r2
 8016ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	781b      	ldrb	r3, [r3, #0]
 8016ae0:	00da      	lsls	r2, r3, #3
 8016ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016ae4:	18d3      	adds	r3, r2, r3
 8016ae6:	4a6d      	ldr	r2, [pc, #436]	@ (8016c9c <USB_EPStartXfer+0xaac>)
 8016ae8:	4694      	mov	ip, r2
 8016aea:	4463      	add	r3, ip
 8016aec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016af0:	881b      	ldrh	r3, [r3, #0]
 8016af2:	b29b      	uxth	r3, r3
 8016af4:	059b      	lsls	r3, r3, #22
 8016af6:	0d9b      	lsrs	r3, r3, #22
 8016af8:	b29a      	uxth	r2, r3
 8016afa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016afc:	801a      	strh	r2, [r3, #0]
 8016afe:	1d7b      	adds	r3, r7, #5
 8016b00:	33ff      	adds	r3, #255	@ 0xff
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	2b3e      	cmp	r3, #62	@ 0x3e
 8016b06:	d922      	bls.n	8016b4e <USB_EPStartXfer+0x95e>
 8016b08:	1d7b      	adds	r3, r7, #5
 8016b0a:	33ff      	adds	r3, #255	@ 0xff
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	095b      	lsrs	r3, r3, #5
 8016b10:	21ec      	movs	r1, #236	@ 0xec
 8016b12:	187a      	adds	r2, r7, r1
 8016b14:	6013      	str	r3, [r2, #0]
 8016b16:	1d7b      	adds	r3, r7, #5
 8016b18:	33ff      	adds	r3, #255	@ 0xff
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	221f      	movs	r2, #31
 8016b1e:	4013      	ands	r3, r2
 8016b20:	d104      	bne.n	8016b2c <USB_EPStartXfer+0x93c>
 8016b22:	187b      	adds	r3, r7, r1
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	3b01      	subs	r3, #1
 8016b28:	187a      	adds	r2, r7, r1
 8016b2a:	6013      	str	r3, [r2, #0]
 8016b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016b2e:	881b      	ldrh	r3, [r3, #0]
 8016b30:	b29a      	uxth	r2, r3
 8016b32:	23ec      	movs	r3, #236	@ 0xec
 8016b34:	18fb      	adds	r3, r7, r3
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	029b      	lsls	r3, r3, #10
 8016b3c:	b29b      	uxth	r3, r3
 8016b3e:	4313      	orrs	r3, r2
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	4a55      	ldr	r2, [pc, #340]	@ (8016c98 <USB_EPStartXfer+0xaa8>)
 8016b44:	4313      	orrs	r3, r2
 8016b46:	b29a      	uxth	r2, r3
 8016b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016b4a:	801a      	strh	r2, [r3, #0]
 8016b4c:	e052      	b.n	8016bf4 <USB_EPStartXfer+0xa04>
 8016b4e:	1d7b      	adds	r3, r7, #5
 8016b50:	33ff      	adds	r3, #255	@ 0xff
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d108      	bne.n	8016b6a <USB_EPStartXfer+0x97a>
 8016b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016b5a:	881b      	ldrh	r3, [r3, #0]
 8016b5c:	b29b      	uxth	r3, r3
 8016b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8016c98 <USB_EPStartXfer+0xaa8>)
 8016b60:	4313      	orrs	r3, r2
 8016b62:	b29a      	uxth	r2, r3
 8016b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016b66:	801a      	strh	r2, [r3, #0]
 8016b68:	e044      	b.n	8016bf4 <USB_EPStartXfer+0xa04>
 8016b6a:	1d7b      	adds	r3, r7, #5
 8016b6c:	33ff      	adds	r3, #255	@ 0xff
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	085b      	lsrs	r3, r3, #1
 8016b72:	21ec      	movs	r1, #236	@ 0xec
 8016b74:	187a      	adds	r2, r7, r1
 8016b76:	6013      	str	r3, [r2, #0]
 8016b78:	1d7b      	adds	r3, r7, #5
 8016b7a:	33ff      	adds	r3, #255	@ 0xff
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	2201      	movs	r2, #1
 8016b80:	4013      	ands	r3, r2
 8016b82:	d004      	beq.n	8016b8e <USB_EPStartXfer+0x99e>
 8016b84:	187b      	adds	r3, r7, r1
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	3301      	adds	r3, #1
 8016b8a:	187a      	adds	r2, r7, r1
 8016b8c:	6013      	str	r3, [r2, #0]
 8016b8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016b90:	881b      	ldrh	r3, [r3, #0]
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	23ec      	movs	r3, #236	@ 0xec
 8016b96:	18fb      	adds	r3, r7, r3
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	b29b      	uxth	r3, r3
 8016b9c:	029b      	lsls	r3, r3, #10
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	4313      	orrs	r3, r2
 8016ba2:	b29a      	uxth	r2, r3
 8016ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ba6:	801a      	strh	r2, [r3, #0]
 8016ba8:	e024      	b.n	8016bf4 <USB_EPStartXfer+0xa04>
 8016baa:	683b      	ldr	r3, [r7, #0]
 8016bac:	785b      	ldrb	r3, [r3, #1]
 8016bae:	2b01      	cmp	r3, #1
 8016bb0:	d120      	bne.n	8016bf4 <USB_EPStartXfer+0xa04>
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2184      	movs	r1, #132	@ 0x84
 8016bb6:	187a      	adds	r2, r7, r1
 8016bb8:	6013      	str	r3, [r2, #0]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2250      	movs	r2, #80	@ 0x50
 8016bbe:	5a9b      	ldrh	r3, [r3, r2]
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	001a      	movs	r2, r3
 8016bc4:	187b      	adds	r3, r7, r1
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	189b      	adds	r3, r3, r2
 8016bca:	187a      	adds	r2, r7, r1
 8016bcc:	6013      	str	r3, [r2, #0]
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	00da      	lsls	r2, r3, #3
 8016bd4:	187b      	adds	r3, r7, r1
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	18d3      	adds	r3, r2, r3
 8016bda:	4a30      	ldr	r2, [pc, #192]	@ (8016c9c <USB_EPStartXfer+0xaac>)
 8016bdc:	4694      	mov	ip, r2
 8016bde:	4463      	add	r3, ip
 8016be0:	2180      	movs	r1, #128	@ 0x80
 8016be2:	187a      	adds	r2, r7, r1
 8016be4:	6013      	str	r3, [r2, #0]
 8016be6:	1d7b      	adds	r3, r7, #5
 8016be8:	33ff      	adds	r3, #255	@ 0xff
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	b29a      	uxth	r2, r3
 8016bee:	187b      	adds	r3, r7, r1
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8016bf4:	2076      	movs	r0, #118	@ 0x76
 8016bf6:	183b      	adds	r3, r7, r0
 8016bf8:	683a      	ldr	r2, [r7, #0]
 8016bfa:	8912      	ldrh	r2, [r2, #8]
 8016bfc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	6959      	ldr	r1, [r3, #20]
 8016c02:	1d7b      	adds	r3, r7, #5
 8016c04:	33ff      	adds	r3, #255	@ 0xff
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	b29c      	uxth	r4, r3
 8016c0a:	183b      	adds	r3, r7, r0
 8016c0c:	881a      	ldrh	r2, [r3, #0]
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	0023      	movs	r3, r4
 8016c12:	f000 fd5f 	bl	80176d4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8016c16:	687a      	ldr	r2, [r7, #4]
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	009b      	lsls	r3, r3, #2
 8016c1e:	18d3      	adds	r3, r2, r3
 8016c20:	881b      	ldrh	r3, [r3, #0]
 8016c22:	b29a      	uxth	r2, r3
 8016c24:	200a      	movs	r0, #10
 8016c26:	183b      	adds	r3, r7, r0
 8016c28:	491d      	ldr	r1, [pc, #116]	@ (8016ca0 <USB_EPStartXfer+0xab0>)
 8016c2a:	400a      	ands	r2, r1
 8016c2c:	801a      	strh	r2, [r3, #0]
 8016c2e:	183b      	adds	r3, r7, r0
 8016c30:	183a      	adds	r2, r7, r0
 8016c32:	8812      	ldrh	r2, [r2, #0]
 8016c34:	2110      	movs	r1, #16
 8016c36:	404a      	eors	r2, r1
 8016c38:	801a      	strh	r2, [r3, #0]
 8016c3a:	183b      	adds	r3, r7, r0
 8016c3c:	183a      	adds	r2, r7, r0
 8016c3e:	8812      	ldrh	r2, [r2, #0]
 8016c40:	2120      	movs	r1, #32
 8016c42:	404a      	eors	r2, r1
 8016c44:	801a      	strh	r2, [r3, #0]
 8016c46:	687a      	ldr	r2, [r7, #4]
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	009b      	lsls	r3, r3, #2
 8016c4e:	18d3      	adds	r3, r2, r3
 8016c50:	183a      	adds	r2, r7, r0
 8016c52:	8812      	ldrh	r2, [r2, #0]
 8016c54:	4913      	ldr	r1, [pc, #76]	@ (8016ca4 <USB_EPStartXfer+0xab4>)
 8016c56:	430a      	orrs	r2, r1
 8016c58:	b292      	uxth	r2, r2
 8016c5a:	801a      	strh	r2, [r3, #0]
 8016c5c:	f000 fbf4 	bl	8017448 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	7b1b      	ldrb	r3, [r3, #12]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d000      	beq.n	8016c6a <USB_EPStartXfer+0xa7a>
 8016c68:	e0a9      	b.n	8016dbe <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8016c6a:	683b      	ldr	r3, [r7, #0]
 8016c6c:	699a      	ldr	r2, [r3, #24]
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	691b      	ldr	r3, [r3, #16]
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d918      	bls.n	8016ca8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	691b      	ldr	r3, [r3, #16]
 8016c7a:	1d7a      	adds	r2, r7, #5
 8016c7c:	32ff      	adds	r2, #255	@ 0xff
 8016c7e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	699a      	ldr	r2, [r3, #24]
 8016c84:	1d7b      	adds	r3, r7, #5
 8016c86:	33ff      	adds	r3, #255	@ 0xff
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	1ad2      	subs	r2, r2, r3
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	619a      	str	r2, [r3, #24]
 8016c90:	e012      	b.n	8016cb8 <USB_EPStartXfer+0xac8>
 8016c92:	46c0      	nop			@ (mov r8, r8)
 8016c94:	00000406 	.word	0x00000406
 8016c98:	ffff8000 	.word	0xffff8000
 8016c9c:	00000402 	.word	0x00000402
 8016ca0:	ffff8fbf 	.word	0xffff8fbf
 8016ca4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	699b      	ldr	r3, [r3, #24]
 8016cac:	1d7a      	adds	r2, r7, #5
 8016cae:	32ff      	adds	r2, #255	@ 0xff
 8016cb0:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2190      	movs	r1, #144	@ 0x90
 8016cbc:	187a      	adds	r2, r7, r1
 8016cbe:	6013      	str	r3, [r2, #0]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2250      	movs	r2, #80	@ 0x50
 8016cc4:	5a9b      	ldrh	r3, [r3, r2]
 8016cc6:	b29b      	uxth	r3, r3
 8016cc8:	001a      	movs	r2, r3
 8016cca:	187b      	adds	r3, r7, r1
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	189b      	adds	r3, r3, r2
 8016cd0:	187a      	adds	r2, r7, r1
 8016cd2:	6013      	str	r3, [r2, #0]
 8016cd4:	683b      	ldr	r3, [r7, #0]
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	00da      	lsls	r2, r3, #3
 8016cda:	187b      	adds	r3, r7, r1
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	18d3      	adds	r3, r2, r3
 8016ce0:	4acf      	ldr	r2, [pc, #828]	@ (8017020 <USB_EPStartXfer+0xe30>)
 8016ce2:	4694      	mov	ip, r2
 8016ce4:	4463      	add	r3, ip
 8016ce6:	218c      	movs	r1, #140	@ 0x8c
 8016ce8:	187a      	adds	r2, r7, r1
 8016cea:	6013      	str	r3, [r2, #0]
 8016cec:	187b      	adds	r3, r7, r1
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	881b      	ldrh	r3, [r3, #0]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	059b      	lsls	r3, r3, #22
 8016cf6:	0d9b      	lsrs	r3, r3, #22
 8016cf8:	b29a      	uxth	r2, r3
 8016cfa:	187b      	adds	r3, r7, r1
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	801a      	strh	r2, [r3, #0]
 8016d00:	1d7b      	adds	r3, r7, #5
 8016d02:	33ff      	adds	r3, #255	@ 0xff
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	2b3e      	cmp	r3, #62	@ 0x3e
 8016d08:	d925      	bls.n	8016d56 <USB_EPStartXfer+0xb66>
 8016d0a:	1d7b      	adds	r3, r7, #5
 8016d0c:	33ff      	adds	r3, #255	@ 0xff
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	095b      	lsrs	r3, r3, #5
 8016d12:	21e8      	movs	r1, #232	@ 0xe8
 8016d14:	187a      	adds	r2, r7, r1
 8016d16:	6013      	str	r3, [r2, #0]
 8016d18:	1d7b      	adds	r3, r7, #5
 8016d1a:	33ff      	adds	r3, #255	@ 0xff
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	221f      	movs	r2, #31
 8016d20:	4013      	ands	r3, r2
 8016d22:	d104      	bne.n	8016d2e <USB_EPStartXfer+0xb3e>
 8016d24:	187b      	adds	r3, r7, r1
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	187a      	adds	r2, r7, r1
 8016d2c:	6013      	str	r3, [r2, #0]
 8016d2e:	218c      	movs	r1, #140	@ 0x8c
 8016d30:	187b      	adds	r3, r7, r1
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	b29a      	uxth	r2, r3
 8016d38:	23e8      	movs	r3, #232	@ 0xe8
 8016d3a:	18fb      	adds	r3, r7, r3
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	029b      	lsls	r3, r3, #10
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	4313      	orrs	r3, r2
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	4ab6      	ldr	r2, [pc, #728]	@ (8017024 <USB_EPStartXfer+0xe34>)
 8016d4a:	4313      	orrs	r3, r2
 8016d4c:	b29a      	uxth	r2, r3
 8016d4e:	187b      	adds	r3, r7, r1
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	801a      	strh	r2, [r3, #0]
 8016d54:	e353      	b.n	80173fe <USB_EPStartXfer+0x120e>
 8016d56:	1d7b      	adds	r3, r7, #5
 8016d58:	33ff      	adds	r3, #255	@ 0xff
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d10b      	bne.n	8016d78 <USB_EPStartXfer+0xb88>
 8016d60:	218c      	movs	r1, #140	@ 0x8c
 8016d62:	187b      	adds	r3, r7, r1
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	881b      	ldrh	r3, [r3, #0]
 8016d68:	b29b      	uxth	r3, r3
 8016d6a:	4aae      	ldr	r2, [pc, #696]	@ (8017024 <USB_EPStartXfer+0xe34>)
 8016d6c:	4313      	orrs	r3, r2
 8016d6e:	b29a      	uxth	r2, r3
 8016d70:	187b      	adds	r3, r7, r1
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	801a      	strh	r2, [r3, #0]
 8016d76:	e342      	b.n	80173fe <USB_EPStartXfer+0x120e>
 8016d78:	1d7b      	adds	r3, r7, #5
 8016d7a:	33ff      	adds	r3, #255	@ 0xff
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	085b      	lsrs	r3, r3, #1
 8016d80:	21e8      	movs	r1, #232	@ 0xe8
 8016d82:	187a      	adds	r2, r7, r1
 8016d84:	6013      	str	r3, [r2, #0]
 8016d86:	1d7b      	adds	r3, r7, #5
 8016d88:	33ff      	adds	r3, #255	@ 0xff
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	4013      	ands	r3, r2
 8016d90:	d004      	beq.n	8016d9c <USB_EPStartXfer+0xbac>
 8016d92:	187b      	adds	r3, r7, r1
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	3301      	adds	r3, #1
 8016d98:	187a      	adds	r2, r7, r1
 8016d9a:	6013      	str	r3, [r2, #0]
 8016d9c:	218c      	movs	r1, #140	@ 0x8c
 8016d9e:	187b      	adds	r3, r7, r1
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	881b      	ldrh	r3, [r3, #0]
 8016da4:	b29a      	uxth	r2, r3
 8016da6:	23e8      	movs	r3, #232	@ 0xe8
 8016da8:	18fb      	adds	r3, r7, r3
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	029b      	lsls	r3, r3, #10
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	4313      	orrs	r3, r2
 8016db4:	b29a      	uxth	r2, r3
 8016db6:	187b      	adds	r3, r7, r1
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	801a      	strh	r2, [r3, #0]
 8016dbc:	e31f      	b.n	80173fe <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	78db      	ldrb	r3, [r3, #3]
 8016dc2:	2b02      	cmp	r3, #2
 8016dc4:	d000      	beq.n	8016dc8 <USB_EPStartXfer+0xbd8>
 8016dc6:	e191      	b.n	80170ec <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8016dc8:	683b      	ldr	r3, [r7, #0]
 8016dca:	785b      	ldrb	r3, [r3, #1]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d000      	beq.n	8016dd2 <USB_EPStartXfer+0xbe2>
 8016dd0:	e07c      	b.n	8016ecc <USB_EPStartXfer+0xcdc>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	21ac      	movs	r1, #172	@ 0xac
 8016dd6:	187a      	adds	r2, r7, r1
 8016dd8:	6013      	str	r3, [r2, #0]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2250      	movs	r2, #80	@ 0x50
 8016dde:	5a9b      	ldrh	r3, [r3, r2]
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	001a      	movs	r2, r3
 8016de4:	187b      	adds	r3, r7, r1
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	189b      	adds	r3, r3, r2
 8016dea:	187a      	adds	r2, r7, r1
 8016dec:	6013      	str	r3, [r2, #0]
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	00da      	lsls	r2, r3, #3
 8016df4:	187b      	adds	r3, r7, r1
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	18d3      	adds	r3, r2, r3
 8016dfa:	4a8b      	ldr	r2, [pc, #556]	@ (8017028 <USB_EPStartXfer+0xe38>)
 8016dfc:	4694      	mov	ip, r2
 8016dfe:	4463      	add	r3, ip
 8016e00:	21a8      	movs	r1, #168	@ 0xa8
 8016e02:	187a      	adds	r2, r7, r1
 8016e04:	6013      	str	r3, [r2, #0]
 8016e06:	187b      	adds	r3, r7, r1
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	881b      	ldrh	r3, [r3, #0]
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	059b      	lsls	r3, r3, #22
 8016e10:	0d9b      	lsrs	r3, r3, #22
 8016e12:	b29a      	uxth	r2, r3
 8016e14:	187b      	adds	r3, r7, r1
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	801a      	strh	r2, [r3, #0]
 8016e1a:	683b      	ldr	r3, [r7, #0]
 8016e1c:	691b      	ldr	r3, [r3, #16]
 8016e1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016e20:	d923      	bls.n	8016e6a <USB_EPStartXfer+0xc7a>
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	691b      	ldr	r3, [r3, #16]
 8016e26:	095b      	lsrs	r3, r3, #5
 8016e28:	21e4      	movs	r1, #228	@ 0xe4
 8016e2a:	187a      	adds	r2, r7, r1
 8016e2c:	6013      	str	r3, [r2, #0]
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	691b      	ldr	r3, [r3, #16]
 8016e32:	221f      	movs	r2, #31
 8016e34:	4013      	ands	r3, r2
 8016e36:	d104      	bne.n	8016e42 <USB_EPStartXfer+0xc52>
 8016e38:	187b      	adds	r3, r7, r1
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	3b01      	subs	r3, #1
 8016e3e:	187a      	adds	r2, r7, r1
 8016e40:	6013      	str	r3, [r2, #0]
 8016e42:	21a8      	movs	r1, #168	@ 0xa8
 8016e44:	187b      	adds	r3, r7, r1
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	881b      	ldrh	r3, [r3, #0]
 8016e4a:	b29a      	uxth	r2, r3
 8016e4c:	23e4      	movs	r3, #228	@ 0xe4
 8016e4e:	18fb      	adds	r3, r7, r3
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	b29b      	uxth	r3, r3
 8016e54:	029b      	lsls	r3, r3, #10
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	4313      	orrs	r3, r2
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	4a71      	ldr	r2, [pc, #452]	@ (8017024 <USB_EPStartXfer+0xe34>)
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	b29a      	uxth	r2, r3
 8016e62:	187b      	adds	r3, r7, r1
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	801a      	strh	r2, [r3, #0]
 8016e68:	e054      	b.n	8016f14 <USB_EPStartXfer+0xd24>
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	691b      	ldr	r3, [r3, #16]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d10b      	bne.n	8016e8a <USB_EPStartXfer+0xc9a>
 8016e72:	21a8      	movs	r1, #168	@ 0xa8
 8016e74:	187b      	adds	r3, r7, r1
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	881b      	ldrh	r3, [r3, #0]
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	4a69      	ldr	r2, [pc, #420]	@ (8017024 <USB_EPStartXfer+0xe34>)
 8016e7e:	4313      	orrs	r3, r2
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	187b      	adds	r3, r7, r1
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	801a      	strh	r2, [r3, #0]
 8016e88:	e044      	b.n	8016f14 <USB_EPStartXfer+0xd24>
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	691b      	ldr	r3, [r3, #16]
 8016e8e:	085b      	lsrs	r3, r3, #1
 8016e90:	21e4      	movs	r1, #228	@ 0xe4
 8016e92:	187a      	adds	r2, r7, r1
 8016e94:	6013      	str	r3, [r2, #0]
 8016e96:	683b      	ldr	r3, [r7, #0]
 8016e98:	691b      	ldr	r3, [r3, #16]
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	4013      	ands	r3, r2
 8016e9e:	d004      	beq.n	8016eaa <USB_EPStartXfer+0xcba>
 8016ea0:	187b      	adds	r3, r7, r1
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	187a      	adds	r2, r7, r1
 8016ea8:	6013      	str	r3, [r2, #0]
 8016eaa:	21a8      	movs	r1, #168	@ 0xa8
 8016eac:	187b      	adds	r3, r7, r1
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	881b      	ldrh	r3, [r3, #0]
 8016eb2:	b29a      	uxth	r2, r3
 8016eb4:	23e4      	movs	r3, #228	@ 0xe4
 8016eb6:	18fb      	adds	r3, r7, r3
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	b29b      	uxth	r3, r3
 8016ebc:	029b      	lsls	r3, r3, #10
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	4313      	orrs	r3, r2
 8016ec2:	b29a      	uxth	r2, r3
 8016ec4:	187b      	adds	r3, r7, r1
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	801a      	strh	r2, [r3, #0]
 8016eca:	e023      	b.n	8016f14 <USB_EPStartXfer+0xd24>
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	785b      	ldrb	r3, [r3, #1]
 8016ed0:	2b01      	cmp	r3, #1
 8016ed2:	d11f      	bne.n	8016f14 <USB_EPStartXfer+0xd24>
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	21b4      	movs	r1, #180	@ 0xb4
 8016ed8:	187a      	adds	r2, r7, r1
 8016eda:	6013      	str	r3, [r2, #0]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	2250      	movs	r2, #80	@ 0x50
 8016ee0:	5a9b      	ldrh	r3, [r3, r2]
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	001a      	movs	r2, r3
 8016ee6:	187b      	adds	r3, r7, r1
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	189b      	adds	r3, r3, r2
 8016eec:	187a      	adds	r2, r7, r1
 8016eee:	6013      	str	r3, [r2, #0]
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	00da      	lsls	r2, r3, #3
 8016ef6:	187b      	adds	r3, r7, r1
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	18d3      	adds	r3, r2, r3
 8016efc:	4a4a      	ldr	r2, [pc, #296]	@ (8017028 <USB_EPStartXfer+0xe38>)
 8016efe:	4694      	mov	ip, r2
 8016f00:	4463      	add	r3, ip
 8016f02:	21b0      	movs	r1, #176	@ 0xb0
 8016f04:	187a      	adds	r2, r7, r1
 8016f06:	6013      	str	r3, [r2, #0]
 8016f08:	683b      	ldr	r3, [r7, #0]
 8016f0a:	691b      	ldr	r3, [r3, #16]
 8016f0c:	b29a      	uxth	r2, r3
 8016f0e:	187b      	adds	r3, r7, r1
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	801a      	strh	r2, [r3, #0]
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	22a4      	movs	r2, #164	@ 0xa4
 8016f18:	18ba      	adds	r2, r7, r2
 8016f1a:	6013      	str	r3, [r2, #0]
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	785b      	ldrb	r3, [r3, #1]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d000      	beq.n	8016f26 <USB_EPStartXfer+0xd36>
 8016f24:	e082      	b.n	801702c <USB_EPStartXfer+0xe3c>
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	219c      	movs	r1, #156	@ 0x9c
 8016f2a:	187a      	adds	r2, r7, r1
 8016f2c:	6013      	str	r3, [r2, #0]
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2250      	movs	r2, #80	@ 0x50
 8016f32:	5a9b      	ldrh	r3, [r3, r2]
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	001a      	movs	r2, r3
 8016f38:	187b      	adds	r3, r7, r1
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	189b      	adds	r3, r3, r2
 8016f3e:	187a      	adds	r2, r7, r1
 8016f40:	6013      	str	r3, [r2, #0]
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	781b      	ldrb	r3, [r3, #0]
 8016f46:	00da      	lsls	r2, r3, #3
 8016f48:	187b      	adds	r3, r7, r1
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	18d3      	adds	r3, r2, r3
 8016f4e:	4a34      	ldr	r2, [pc, #208]	@ (8017020 <USB_EPStartXfer+0xe30>)
 8016f50:	4694      	mov	ip, r2
 8016f52:	4463      	add	r3, ip
 8016f54:	2198      	movs	r1, #152	@ 0x98
 8016f56:	187a      	adds	r2, r7, r1
 8016f58:	6013      	str	r3, [r2, #0]
 8016f5a:	187b      	adds	r3, r7, r1
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	881b      	ldrh	r3, [r3, #0]
 8016f60:	b29b      	uxth	r3, r3
 8016f62:	059b      	lsls	r3, r3, #22
 8016f64:	0d9b      	lsrs	r3, r3, #22
 8016f66:	b29a      	uxth	r2, r3
 8016f68:	187b      	adds	r3, r7, r1
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	801a      	strh	r2, [r3, #0]
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	691b      	ldr	r3, [r3, #16]
 8016f72:	2b3e      	cmp	r3, #62	@ 0x3e
 8016f74:	d923      	bls.n	8016fbe <USB_EPStartXfer+0xdce>
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	691b      	ldr	r3, [r3, #16]
 8016f7a:	095b      	lsrs	r3, r3, #5
 8016f7c:	21e0      	movs	r1, #224	@ 0xe0
 8016f7e:	187a      	adds	r2, r7, r1
 8016f80:	6013      	str	r3, [r2, #0]
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	691b      	ldr	r3, [r3, #16]
 8016f86:	221f      	movs	r2, #31
 8016f88:	4013      	ands	r3, r2
 8016f8a:	d104      	bne.n	8016f96 <USB_EPStartXfer+0xda6>
 8016f8c:	187b      	adds	r3, r7, r1
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	3b01      	subs	r3, #1
 8016f92:	187a      	adds	r2, r7, r1
 8016f94:	6013      	str	r3, [r2, #0]
 8016f96:	2198      	movs	r1, #152	@ 0x98
 8016f98:	187b      	adds	r3, r7, r1
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	881b      	ldrh	r3, [r3, #0]
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	23e0      	movs	r3, #224	@ 0xe0
 8016fa2:	18fb      	adds	r3, r7, r3
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	b29b      	uxth	r3, r3
 8016fa8:	029b      	lsls	r3, r3, #10
 8016faa:	b29b      	uxth	r3, r3
 8016fac:	4313      	orrs	r3, r2
 8016fae:	b29b      	uxth	r3, r3
 8016fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8017024 <USB_EPStartXfer+0xe34>)
 8016fb2:	4313      	orrs	r3, r2
 8016fb4:	b29a      	uxth	r2, r3
 8016fb6:	187b      	adds	r3, r7, r1
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	801a      	strh	r2, [r3, #0]
 8016fbc:	e057      	b.n	801706e <USB_EPStartXfer+0xe7e>
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	691b      	ldr	r3, [r3, #16]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d10b      	bne.n	8016fde <USB_EPStartXfer+0xdee>
 8016fc6:	2198      	movs	r1, #152	@ 0x98
 8016fc8:	187b      	adds	r3, r7, r1
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	881b      	ldrh	r3, [r3, #0]
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	4a14      	ldr	r2, [pc, #80]	@ (8017024 <USB_EPStartXfer+0xe34>)
 8016fd2:	4313      	orrs	r3, r2
 8016fd4:	b29a      	uxth	r2, r3
 8016fd6:	187b      	adds	r3, r7, r1
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	801a      	strh	r2, [r3, #0]
 8016fdc:	e047      	b.n	801706e <USB_EPStartXfer+0xe7e>
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	691b      	ldr	r3, [r3, #16]
 8016fe2:	085b      	lsrs	r3, r3, #1
 8016fe4:	21e0      	movs	r1, #224	@ 0xe0
 8016fe6:	187a      	adds	r2, r7, r1
 8016fe8:	6013      	str	r3, [r2, #0]
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	691b      	ldr	r3, [r3, #16]
 8016fee:	2201      	movs	r2, #1
 8016ff0:	4013      	ands	r3, r2
 8016ff2:	d004      	beq.n	8016ffe <USB_EPStartXfer+0xe0e>
 8016ff4:	187b      	adds	r3, r7, r1
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	187a      	adds	r2, r7, r1
 8016ffc:	6013      	str	r3, [r2, #0]
 8016ffe:	2198      	movs	r1, #152	@ 0x98
 8017000:	187b      	adds	r3, r7, r1
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	881b      	ldrh	r3, [r3, #0]
 8017006:	b29a      	uxth	r2, r3
 8017008:	23e0      	movs	r3, #224	@ 0xe0
 801700a:	18fb      	adds	r3, r7, r3
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	b29b      	uxth	r3, r3
 8017010:	029b      	lsls	r3, r3, #10
 8017012:	b29b      	uxth	r3, r3
 8017014:	4313      	orrs	r3, r2
 8017016:	b29a      	uxth	r2, r3
 8017018:	187b      	adds	r3, r7, r1
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	801a      	strh	r2, [r3, #0]
 801701e:	e026      	b.n	801706e <USB_EPStartXfer+0xe7e>
 8017020:	00000406 	.word	0x00000406
 8017024:	ffff8000 	.word	0xffff8000
 8017028:	00000402 	.word	0x00000402
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	785b      	ldrb	r3, [r3, #1]
 8017030:	2b01      	cmp	r3, #1
 8017032:	d11c      	bne.n	801706e <USB_EPStartXfer+0xe7e>
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	2250      	movs	r2, #80	@ 0x50
 8017038:	5a9b      	ldrh	r3, [r3, r2]
 801703a:	b29b      	uxth	r3, r3
 801703c:	001a      	movs	r2, r3
 801703e:	21a4      	movs	r1, #164	@ 0xa4
 8017040:	187b      	adds	r3, r7, r1
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	189b      	adds	r3, r3, r2
 8017046:	187a      	adds	r2, r7, r1
 8017048:	6013      	str	r3, [r2, #0]
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	00da      	lsls	r2, r3, #3
 8017050:	187b      	adds	r3, r7, r1
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	18d3      	adds	r3, r2, r3
 8017056:	4ad2      	ldr	r2, [pc, #840]	@ (80173a0 <USB_EPStartXfer+0x11b0>)
 8017058:	4694      	mov	ip, r2
 801705a:	4463      	add	r3, ip
 801705c:	21a0      	movs	r1, #160	@ 0xa0
 801705e:	187a      	adds	r2, r7, r1
 8017060:	6013      	str	r3, [r2, #0]
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	691b      	ldr	r3, [r3, #16]
 8017066:	b29a      	uxth	r2, r3
 8017068:	187b      	adds	r3, r7, r1
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	69db      	ldr	r3, [r3, #28]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d100      	bne.n	8017078 <USB_EPStartXfer+0xe88>
 8017076:	e1c2      	b.n	80173fe <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8017078:	687a      	ldr	r2, [r7, #4]
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	781b      	ldrb	r3, [r3, #0]
 801707e:	009b      	lsls	r3, r3, #2
 8017080:	18d2      	adds	r2, r2, r3
 8017082:	2196      	movs	r1, #150	@ 0x96
 8017084:	187b      	adds	r3, r7, r1
 8017086:	8812      	ldrh	r2, [r2, #0]
 8017088:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801708a:	187b      	adds	r3, r7, r1
 801708c:	881a      	ldrh	r2, [r3, #0]
 801708e:	2380      	movs	r3, #128	@ 0x80
 8017090:	01db      	lsls	r3, r3, #7
 8017092:	4013      	ands	r3, r2
 8017094:	d004      	beq.n	80170a0 <USB_EPStartXfer+0xeb0>
 8017096:	187b      	adds	r3, r7, r1
 8017098:	881b      	ldrh	r3, [r3, #0]
 801709a:	2240      	movs	r2, #64	@ 0x40
 801709c:	4013      	ands	r3, r2
 801709e:	d10d      	bne.n	80170bc <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80170a0:	2196      	movs	r1, #150	@ 0x96
 80170a2:	187b      	adds	r3, r7, r1
 80170a4:	881a      	ldrh	r2, [r3, #0]
 80170a6:	2380      	movs	r3, #128	@ 0x80
 80170a8:	01db      	lsls	r3, r3, #7
 80170aa:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80170ac:	d000      	beq.n	80170b0 <USB_EPStartXfer+0xec0>
 80170ae:	e1a6      	b.n	80173fe <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80170b0:	187b      	adds	r3, r7, r1
 80170b2:	881b      	ldrh	r3, [r3, #0]
 80170b4:	2240      	movs	r2, #64	@ 0x40
 80170b6:	4013      	ands	r3, r2
 80170b8:	d000      	beq.n	80170bc <USB_EPStartXfer+0xecc>
 80170ba:	e1a0      	b.n	80173fe <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	781b      	ldrb	r3, [r3, #0]
 80170c2:	009b      	lsls	r3, r3, #2
 80170c4:	18d3      	adds	r3, r2, r3
 80170c6:	881b      	ldrh	r3, [r3, #0]
 80170c8:	b29a      	uxth	r2, r3
 80170ca:	2094      	movs	r0, #148	@ 0x94
 80170cc:	183b      	adds	r3, r7, r0
 80170ce:	49b5      	ldr	r1, [pc, #724]	@ (80173a4 <USB_EPStartXfer+0x11b4>)
 80170d0:	400a      	ands	r2, r1
 80170d2:	801a      	strh	r2, [r3, #0]
 80170d4:	687a      	ldr	r2, [r7, #4]
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	009b      	lsls	r3, r3, #2
 80170dc:	18d3      	adds	r3, r2, r3
 80170de:	183a      	adds	r2, r7, r0
 80170e0:	8812      	ldrh	r2, [r2, #0]
 80170e2:	49b1      	ldr	r1, [pc, #708]	@ (80173a8 <USB_EPStartXfer+0x11b8>)
 80170e4:	430a      	orrs	r2, r1
 80170e6:	b292      	uxth	r2, r2
 80170e8:	801a      	strh	r2, [r3, #0]
 80170ea:	e188      	b.n	80173fe <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	78db      	ldrb	r3, [r3, #3]
 80170f0:	2b01      	cmp	r3, #1
 80170f2:	d000      	beq.n	80170f6 <USB_EPStartXfer+0xf06>
 80170f4:	e181      	b.n	80173fa <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	699a      	ldr	r2, [r3, #24]
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	691b      	ldr	r3, [r3, #16]
 80170fe:	429a      	cmp	r2, r3
 8017100:	d90d      	bls.n	801711e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8017102:	683b      	ldr	r3, [r7, #0]
 8017104:	691b      	ldr	r3, [r3, #16]
 8017106:	1d7a      	adds	r2, r7, #5
 8017108:	32ff      	adds	r2, #255	@ 0xff
 801710a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	699a      	ldr	r2, [r3, #24]
 8017110:	1d7b      	adds	r3, r7, #5
 8017112:	33ff      	adds	r3, #255	@ 0xff
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	1ad2      	subs	r2, r2, r3
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	619a      	str	r2, [r3, #24]
 801711c:	e007      	b.n	801712e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	699b      	ldr	r3, [r3, #24]
 8017122:	1d7a      	adds	r2, r7, #5
 8017124:	32ff      	adds	r2, #255	@ 0xff
 8017126:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8017128:	683b      	ldr	r3, [r7, #0]
 801712a:	2200      	movs	r2, #0
 801712c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	785b      	ldrb	r3, [r3, #1]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d000      	beq.n	8017138 <USB_EPStartXfer+0xf48>
 8017136:	e082      	b.n	801723e <USB_EPStartXfer+0x104e>
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	21cc      	movs	r1, #204	@ 0xcc
 801713c:	187a      	adds	r2, r7, r1
 801713e:	6013      	str	r3, [r2, #0]
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2250      	movs	r2, #80	@ 0x50
 8017144:	5a9b      	ldrh	r3, [r3, r2]
 8017146:	b29b      	uxth	r3, r3
 8017148:	001a      	movs	r2, r3
 801714a:	187b      	adds	r3, r7, r1
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	189b      	adds	r3, r3, r2
 8017150:	187a      	adds	r2, r7, r1
 8017152:	6013      	str	r3, [r2, #0]
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	00da      	lsls	r2, r3, #3
 801715a:	187b      	adds	r3, r7, r1
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	18d3      	adds	r3, r2, r3
 8017160:	4a92      	ldr	r2, [pc, #584]	@ (80173ac <USB_EPStartXfer+0x11bc>)
 8017162:	4694      	mov	ip, r2
 8017164:	4463      	add	r3, ip
 8017166:	21c8      	movs	r1, #200	@ 0xc8
 8017168:	187a      	adds	r2, r7, r1
 801716a:	6013      	str	r3, [r2, #0]
 801716c:	187b      	adds	r3, r7, r1
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	881b      	ldrh	r3, [r3, #0]
 8017172:	b29b      	uxth	r3, r3
 8017174:	059b      	lsls	r3, r3, #22
 8017176:	0d9b      	lsrs	r3, r3, #22
 8017178:	b29a      	uxth	r2, r3
 801717a:	187b      	adds	r3, r7, r1
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	801a      	strh	r2, [r3, #0]
 8017180:	1d7b      	adds	r3, r7, #5
 8017182:	33ff      	adds	r3, #255	@ 0xff
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	2b3e      	cmp	r3, #62	@ 0x3e
 8017188:	d925      	bls.n	80171d6 <USB_EPStartXfer+0xfe6>
 801718a:	1d7b      	adds	r3, r7, #5
 801718c:	33ff      	adds	r3, #255	@ 0xff
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	095b      	lsrs	r3, r3, #5
 8017192:	21dc      	movs	r1, #220	@ 0xdc
 8017194:	187a      	adds	r2, r7, r1
 8017196:	6013      	str	r3, [r2, #0]
 8017198:	1d7b      	adds	r3, r7, #5
 801719a:	33ff      	adds	r3, #255	@ 0xff
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	221f      	movs	r2, #31
 80171a0:	4013      	ands	r3, r2
 80171a2:	d104      	bne.n	80171ae <USB_EPStartXfer+0xfbe>
 80171a4:	187b      	adds	r3, r7, r1
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	3b01      	subs	r3, #1
 80171aa:	187a      	adds	r2, r7, r1
 80171ac:	6013      	str	r3, [r2, #0]
 80171ae:	21c8      	movs	r1, #200	@ 0xc8
 80171b0:	187b      	adds	r3, r7, r1
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	881b      	ldrh	r3, [r3, #0]
 80171b6:	b29a      	uxth	r2, r3
 80171b8:	23dc      	movs	r3, #220	@ 0xdc
 80171ba:	18fb      	adds	r3, r7, r3
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	b29b      	uxth	r3, r3
 80171c0:	029b      	lsls	r3, r3, #10
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	4313      	orrs	r3, r2
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	4a79      	ldr	r2, [pc, #484]	@ (80173b0 <USB_EPStartXfer+0x11c0>)
 80171ca:	4313      	orrs	r3, r2
 80171cc:	b29a      	uxth	r2, r3
 80171ce:	187b      	adds	r3, r7, r1
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	801a      	strh	r2, [r3, #0]
 80171d4:	e058      	b.n	8017288 <USB_EPStartXfer+0x1098>
 80171d6:	1d7b      	adds	r3, r7, #5
 80171d8:	33ff      	adds	r3, #255	@ 0xff
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d10b      	bne.n	80171f8 <USB_EPStartXfer+0x1008>
 80171e0:	21c8      	movs	r1, #200	@ 0xc8
 80171e2:	187b      	adds	r3, r7, r1
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	881b      	ldrh	r3, [r3, #0]
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	4a71      	ldr	r2, [pc, #452]	@ (80173b0 <USB_EPStartXfer+0x11c0>)
 80171ec:	4313      	orrs	r3, r2
 80171ee:	b29a      	uxth	r2, r3
 80171f0:	187b      	adds	r3, r7, r1
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	801a      	strh	r2, [r3, #0]
 80171f6:	e047      	b.n	8017288 <USB_EPStartXfer+0x1098>
 80171f8:	1d7b      	adds	r3, r7, #5
 80171fa:	33ff      	adds	r3, #255	@ 0xff
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	085b      	lsrs	r3, r3, #1
 8017200:	21dc      	movs	r1, #220	@ 0xdc
 8017202:	187a      	adds	r2, r7, r1
 8017204:	6013      	str	r3, [r2, #0]
 8017206:	1d7b      	adds	r3, r7, #5
 8017208:	33ff      	adds	r3, #255	@ 0xff
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	2201      	movs	r2, #1
 801720e:	4013      	ands	r3, r2
 8017210:	d004      	beq.n	801721c <USB_EPStartXfer+0x102c>
 8017212:	187b      	adds	r3, r7, r1
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	3301      	adds	r3, #1
 8017218:	187a      	adds	r2, r7, r1
 801721a:	6013      	str	r3, [r2, #0]
 801721c:	21c8      	movs	r1, #200	@ 0xc8
 801721e:	187b      	adds	r3, r7, r1
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	881b      	ldrh	r3, [r3, #0]
 8017224:	b29a      	uxth	r2, r3
 8017226:	23dc      	movs	r3, #220	@ 0xdc
 8017228:	18fb      	adds	r3, r7, r3
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	b29b      	uxth	r3, r3
 801722e:	029b      	lsls	r3, r3, #10
 8017230:	b29b      	uxth	r3, r3
 8017232:	4313      	orrs	r3, r2
 8017234:	b29a      	uxth	r2, r3
 8017236:	187b      	adds	r3, r7, r1
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	801a      	strh	r2, [r3, #0]
 801723c:	e024      	b.n	8017288 <USB_EPStartXfer+0x1098>
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	785b      	ldrb	r3, [r3, #1]
 8017242:	2b01      	cmp	r3, #1
 8017244:	d120      	bne.n	8017288 <USB_EPStartXfer+0x1098>
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	21d4      	movs	r1, #212	@ 0xd4
 801724a:	187a      	adds	r2, r7, r1
 801724c:	6013      	str	r3, [r2, #0]
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	2250      	movs	r2, #80	@ 0x50
 8017252:	5a9b      	ldrh	r3, [r3, r2]
 8017254:	b29b      	uxth	r3, r3
 8017256:	001a      	movs	r2, r3
 8017258:	187b      	adds	r3, r7, r1
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	189b      	adds	r3, r3, r2
 801725e:	187a      	adds	r2, r7, r1
 8017260:	6013      	str	r3, [r2, #0]
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	00da      	lsls	r2, r3, #3
 8017268:	187b      	adds	r3, r7, r1
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	18d3      	adds	r3, r2, r3
 801726e:	4a4f      	ldr	r2, [pc, #316]	@ (80173ac <USB_EPStartXfer+0x11bc>)
 8017270:	4694      	mov	ip, r2
 8017272:	4463      	add	r3, ip
 8017274:	21d0      	movs	r1, #208	@ 0xd0
 8017276:	187a      	adds	r2, r7, r1
 8017278:	6013      	str	r3, [r2, #0]
 801727a:	1d7b      	adds	r3, r7, #5
 801727c:	33ff      	adds	r3, #255	@ 0xff
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	b29a      	uxth	r2, r3
 8017282:	187b      	adds	r3, r7, r1
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	801a      	strh	r2, [r3, #0]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	22c4      	movs	r2, #196	@ 0xc4
 801728c:	18ba      	adds	r2, r7, r2
 801728e:	6013      	str	r3, [r2, #0]
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	785b      	ldrb	r3, [r3, #1]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d000      	beq.n	801729a <USB_EPStartXfer+0x10aa>
 8017298:	e08c      	b.n	80173b4 <USB_EPStartXfer+0x11c4>
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	21bc      	movs	r1, #188	@ 0xbc
 801729e:	187a      	adds	r2, r7, r1
 80172a0:	6013      	str	r3, [r2, #0]
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2250      	movs	r2, #80	@ 0x50
 80172a6:	5a9b      	ldrh	r3, [r3, r2]
 80172a8:	b29b      	uxth	r3, r3
 80172aa:	001a      	movs	r2, r3
 80172ac:	187b      	adds	r3, r7, r1
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	189b      	adds	r3, r3, r2
 80172b2:	187a      	adds	r2, r7, r1
 80172b4:	6013      	str	r3, [r2, #0]
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	00da      	lsls	r2, r3, #3
 80172bc:	187b      	adds	r3, r7, r1
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	18d3      	adds	r3, r2, r3
 80172c2:	4a37      	ldr	r2, [pc, #220]	@ (80173a0 <USB_EPStartXfer+0x11b0>)
 80172c4:	4694      	mov	ip, r2
 80172c6:	4463      	add	r3, ip
 80172c8:	21b8      	movs	r1, #184	@ 0xb8
 80172ca:	187a      	adds	r2, r7, r1
 80172cc:	6013      	str	r3, [r2, #0]
 80172ce:	187b      	adds	r3, r7, r1
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	881b      	ldrh	r3, [r3, #0]
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	059b      	lsls	r3, r3, #22
 80172d8:	0d9b      	lsrs	r3, r3, #22
 80172da:	b29a      	uxth	r2, r3
 80172dc:	187b      	adds	r3, r7, r1
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	801a      	strh	r2, [r3, #0]
 80172e2:	1d7b      	adds	r3, r7, #5
 80172e4:	33ff      	adds	r3, #255	@ 0xff
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80172ea:	d925      	bls.n	8017338 <USB_EPStartXfer+0x1148>
 80172ec:	1d7b      	adds	r3, r7, #5
 80172ee:	33ff      	adds	r3, #255	@ 0xff
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	095b      	lsrs	r3, r3, #5
 80172f4:	21d8      	movs	r1, #216	@ 0xd8
 80172f6:	187a      	adds	r2, r7, r1
 80172f8:	6013      	str	r3, [r2, #0]
 80172fa:	1d7b      	adds	r3, r7, #5
 80172fc:	33ff      	adds	r3, #255	@ 0xff
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	221f      	movs	r2, #31
 8017302:	4013      	ands	r3, r2
 8017304:	d104      	bne.n	8017310 <USB_EPStartXfer+0x1120>
 8017306:	187b      	adds	r3, r7, r1
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	3b01      	subs	r3, #1
 801730c:	187a      	adds	r2, r7, r1
 801730e:	6013      	str	r3, [r2, #0]
 8017310:	21b8      	movs	r1, #184	@ 0xb8
 8017312:	187b      	adds	r3, r7, r1
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	881b      	ldrh	r3, [r3, #0]
 8017318:	b29a      	uxth	r2, r3
 801731a:	23d8      	movs	r3, #216	@ 0xd8
 801731c:	18fb      	adds	r3, r7, r3
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	b29b      	uxth	r3, r3
 8017322:	029b      	lsls	r3, r3, #10
 8017324:	b29b      	uxth	r3, r3
 8017326:	4313      	orrs	r3, r2
 8017328:	b29b      	uxth	r3, r3
 801732a:	4a21      	ldr	r2, [pc, #132]	@ (80173b0 <USB_EPStartXfer+0x11c0>)
 801732c:	4313      	orrs	r3, r2
 801732e:	b29a      	uxth	r2, r3
 8017330:	187b      	adds	r3, r7, r1
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	801a      	strh	r2, [r3, #0]
 8017336:	e062      	b.n	80173fe <USB_EPStartXfer+0x120e>
 8017338:	1d7b      	adds	r3, r7, #5
 801733a:	33ff      	adds	r3, #255	@ 0xff
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d10b      	bne.n	801735a <USB_EPStartXfer+0x116a>
 8017342:	21b8      	movs	r1, #184	@ 0xb8
 8017344:	187b      	adds	r3, r7, r1
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	881b      	ldrh	r3, [r3, #0]
 801734a:	b29b      	uxth	r3, r3
 801734c:	4a18      	ldr	r2, [pc, #96]	@ (80173b0 <USB_EPStartXfer+0x11c0>)
 801734e:	4313      	orrs	r3, r2
 8017350:	b29a      	uxth	r2, r3
 8017352:	187b      	adds	r3, r7, r1
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	801a      	strh	r2, [r3, #0]
 8017358:	e051      	b.n	80173fe <USB_EPStartXfer+0x120e>
 801735a:	1d7b      	adds	r3, r7, #5
 801735c:	33ff      	adds	r3, #255	@ 0xff
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	085b      	lsrs	r3, r3, #1
 8017362:	21d8      	movs	r1, #216	@ 0xd8
 8017364:	187a      	adds	r2, r7, r1
 8017366:	6013      	str	r3, [r2, #0]
 8017368:	1d7b      	adds	r3, r7, #5
 801736a:	33ff      	adds	r3, #255	@ 0xff
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	2201      	movs	r2, #1
 8017370:	4013      	ands	r3, r2
 8017372:	d004      	beq.n	801737e <USB_EPStartXfer+0x118e>
 8017374:	187b      	adds	r3, r7, r1
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	3301      	adds	r3, #1
 801737a:	187a      	adds	r2, r7, r1
 801737c:	6013      	str	r3, [r2, #0]
 801737e:	21b8      	movs	r1, #184	@ 0xb8
 8017380:	187b      	adds	r3, r7, r1
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	881b      	ldrh	r3, [r3, #0]
 8017386:	b29a      	uxth	r2, r3
 8017388:	23d8      	movs	r3, #216	@ 0xd8
 801738a:	18fb      	adds	r3, r7, r3
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	b29b      	uxth	r3, r3
 8017390:	029b      	lsls	r3, r3, #10
 8017392:	b29b      	uxth	r3, r3
 8017394:	4313      	orrs	r3, r2
 8017396:	b29a      	uxth	r2, r3
 8017398:	187b      	adds	r3, r7, r1
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	801a      	strh	r2, [r3, #0]
 801739e:	e02e      	b.n	80173fe <USB_EPStartXfer+0x120e>
 80173a0:	00000406 	.word	0x00000406
 80173a4:	ffff8f8f 	.word	0xffff8f8f
 80173a8:	ffff80c0 	.word	0xffff80c0
 80173ac:	00000402 	.word	0x00000402
 80173b0:	ffff8000 	.word	0xffff8000
 80173b4:	683b      	ldr	r3, [r7, #0]
 80173b6:	785b      	ldrb	r3, [r3, #1]
 80173b8:	2b01      	cmp	r3, #1
 80173ba:	d120      	bne.n	80173fe <USB_EPStartXfer+0x120e>
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	2250      	movs	r2, #80	@ 0x50
 80173c0:	5a9b      	ldrh	r3, [r3, r2]
 80173c2:	b29b      	uxth	r3, r3
 80173c4:	001a      	movs	r2, r3
 80173c6:	21c4      	movs	r1, #196	@ 0xc4
 80173c8:	187b      	adds	r3, r7, r1
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	189b      	adds	r3, r3, r2
 80173ce:	187a      	adds	r2, r7, r1
 80173d0:	6013      	str	r3, [r2, #0]
 80173d2:	683b      	ldr	r3, [r7, #0]
 80173d4:	781b      	ldrb	r3, [r3, #0]
 80173d6:	00da      	lsls	r2, r3, #3
 80173d8:	187b      	adds	r3, r7, r1
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	18d3      	adds	r3, r2, r3
 80173de:	4a1d      	ldr	r2, [pc, #116]	@ (8017454 <USB_EPStartXfer+0x1264>)
 80173e0:	4694      	mov	ip, r2
 80173e2:	4463      	add	r3, ip
 80173e4:	21c0      	movs	r1, #192	@ 0xc0
 80173e6:	187a      	adds	r2, r7, r1
 80173e8:	6013      	str	r3, [r2, #0]
 80173ea:	1d7b      	adds	r3, r7, #5
 80173ec:	33ff      	adds	r3, #255	@ 0xff
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	b29a      	uxth	r2, r3
 80173f2:	187b      	adds	r3, r7, r1
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	801a      	strh	r2, [r3, #0]
 80173f8:	e001      	b.n	80173fe <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80173fa:	2301      	movs	r3, #1
 80173fc:	e025      	b.n	801744a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	009b      	lsls	r3, r3, #2
 8017406:	18d3      	adds	r3, r2, r3
 8017408:	881b      	ldrh	r3, [r3, #0]
 801740a:	b29a      	uxth	r2, r3
 801740c:	208a      	movs	r0, #138	@ 0x8a
 801740e:	183b      	adds	r3, r7, r0
 8017410:	4911      	ldr	r1, [pc, #68]	@ (8017458 <USB_EPStartXfer+0x1268>)
 8017412:	400a      	ands	r2, r1
 8017414:	801a      	strh	r2, [r3, #0]
 8017416:	183b      	adds	r3, r7, r0
 8017418:	183a      	adds	r2, r7, r0
 801741a:	8812      	ldrh	r2, [r2, #0]
 801741c:	2180      	movs	r1, #128	@ 0x80
 801741e:	0149      	lsls	r1, r1, #5
 8017420:	404a      	eors	r2, r1
 8017422:	801a      	strh	r2, [r3, #0]
 8017424:	183b      	adds	r3, r7, r0
 8017426:	183a      	adds	r2, r7, r0
 8017428:	8812      	ldrh	r2, [r2, #0]
 801742a:	2180      	movs	r1, #128	@ 0x80
 801742c:	0189      	lsls	r1, r1, #6
 801742e:	404a      	eors	r2, r1
 8017430:	801a      	strh	r2, [r3, #0]
 8017432:	687a      	ldr	r2, [r7, #4]
 8017434:	683b      	ldr	r3, [r7, #0]
 8017436:	781b      	ldrb	r3, [r3, #0]
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	18d3      	adds	r3, r2, r3
 801743c:	183a      	adds	r2, r7, r0
 801743e:	8812      	ldrh	r2, [r2, #0]
 8017440:	4906      	ldr	r1, [pc, #24]	@ (801745c <USB_EPStartXfer+0x126c>)
 8017442:	430a      	orrs	r2, r1
 8017444:	b292      	uxth	r2, r2
 8017446:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8017448:	2300      	movs	r3, #0
}
 801744a:	0018      	movs	r0, r3
 801744c:	46bd      	mov	sp, r7
 801744e:	b043      	add	sp, #268	@ 0x10c
 8017450:	bd90      	pop	{r4, r7, pc}
 8017452:	46c0      	nop			@ (mov r8, r8)
 8017454:	00000406 	.word	0x00000406
 8017458:	ffffbf8f 	.word	0xffffbf8f
 801745c:	ffff8080 	.word	0xffff8080

08017460 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b084      	sub	sp, #16
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
 8017468:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	785b      	ldrb	r3, [r3, #1]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d01d      	beq.n	80174ae <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8017472:	687a      	ldr	r2, [r7, #4]
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	781b      	ldrb	r3, [r3, #0]
 8017478:	009b      	lsls	r3, r3, #2
 801747a:	18d3      	adds	r3, r2, r3
 801747c:	881b      	ldrh	r3, [r3, #0]
 801747e:	b29a      	uxth	r2, r3
 8017480:	200c      	movs	r0, #12
 8017482:	183b      	adds	r3, r7, r0
 8017484:	491b      	ldr	r1, [pc, #108]	@ (80174f4 <USB_EPSetStall+0x94>)
 8017486:	400a      	ands	r2, r1
 8017488:	801a      	strh	r2, [r3, #0]
 801748a:	183b      	adds	r3, r7, r0
 801748c:	183a      	adds	r2, r7, r0
 801748e:	8812      	ldrh	r2, [r2, #0]
 8017490:	2110      	movs	r1, #16
 8017492:	404a      	eors	r2, r1
 8017494:	801a      	strh	r2, [r3, #0]
 8017496:	687a      	ldr	r2, [r7, #4]
 8017498:	683b      	ldr	r3, [r7, #0]
 801749a:	781b      	ldrb	r3, [r3, #0]
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	18d3      	adds	r3, r2, r3
 80174a0:	183a      	adds	r2, r7, r0
 80174a2:	8812      	ldrh	r2, [r2, #0]
 80174a4:	4914      	ldr	r1, [pc, #80]	@ (80174f8 <USB_EPSetStall+0x98>)
 80174a6:	430a      	orrs	r2, r1
 80174a8:	b292      	uxth	r2, r2
 80174aa:	801a      	strh	r2, [r3, #0]
 80174ac:	e01d      	b.n	80174ea <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80174ae:	687a      	ldr	r2, [r7, #4]
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	781b      	ldrb	r3, [r3, #0]
 80174b4:	009b      	lsls	r3, r3, #2
 80174b6:	18d3      	adds	r3, r2, r3
 80174b8:	881b      	ldrh	r3, [r3, #0]
 80174ba:	b29a      	uxth	r2, r3
 80174bc:	200e      	movs	r0, #14
 80174be:	183b      	adds	r3, r7, r0
 80174c0:	490e      	ldr	r1, [pc, #56]	@ (80174fc <USB_EPSetStall+0x9c>)
 80174c2:	400a      	ands	r2, r1
 80174c4:	801a      	strh	r2, [r3, #0]
 80174c6:	183b      	adds	r3, r7, r0
 80174c8:	183a      	adds	r2, r7, r0
 80174ca:	8812      	ldrh	r2, [r2, #0]
 80174cc:	2180      	movs	r1, #128	@ 0x80
 80174ce:	0149      	lsls	r1, r1, #5
 80174d0:	404a      	eors	r2, r1
 80174d2:	801a      	strh	r2, [r3, #0]
 80174d4:	687a      	ldr	r2, [r7, #4]
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	781b      	ldrb	r3, [r3, #0]
 80174da:	009b      	lsls	r3, r3, #2
 80174dc:	18d3      	adds	r3, r2, r3
 80174de:	183a      	adds	r2, r7, r0
 80174e0:	8812      	ldrh	r2, [r2, #0]
 80174e2:	4905      	ldr	r1, [pc, #20]	@ (80174f8 <USB_EPSetStall+0x98>)
 80174e4:	430a      	orrs	r2, r1
 80174e6:	b292      	uxth	r2, r2
 80174e8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80174ea:	2300      	movs	r3, #0
}
 80174ec:	0018      	movs	r0, r3
 80174ee:	46bd      	mov	sp, r7
 80174f0:	b004      	add	sp, #16
 80174f2:	bd80      	pop	{r7, pc}
 80174f4:	ffff8fbf 	.word	0xffff8fbf
 80174f8:	ffff8080 	.word	0xffff8080
 80174fc:	ffffbf8f 	.word	0xffffbf8f

08017500 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b086      	sub	sp, #24
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
 8017508:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	7b1b      	ldrb	r3, [r3, #12]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d000      	beq.n	8017514 <USB_EPClearStall+0x14>
 8017512:	e095      	b.n	8017640 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	785b      	ldrb	r3, [r3, #1]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d046      	beq.n	80175aa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	009b      	lsls	r3, r3, #2
 8017524:	18d2      	adds	r2, r2, r3
 8017526:	2110      	movs	r1, #16
 8017528:	187b      	adds	r3, r7, r1
 801752a:	8812      	ldrh	r2, [r2, #0]
 801752c:	801a      	strh	r2, [r3, #0]
 801752e:	187b      	adds	r3, r7, r1
 8017530:	881b      	ldrh	r3, [r3, #0]
 8017532:	2240      	movs	r2, #64	@ 0x40
 8017534:	4013      	ands	r3, r2
 8017536:	d016      	beq.n	8017566 <USB_EPClearStall+0x66>
 8017538:	687a      	ldr	r2, [r7, #4]
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	009b      	lsls	r3, r3, #2
 8017540:	18d3      	adds	r3, r2, r3
 8017542:	881b      	ldrh	r3, [r3, #0]
 8017544:	b29a      	uxth	r2, r3
 8017546:	200e      	movs	r0, #14
 8017548:	183b      	adds	r3, r7, r0
 801754a:	4940      	ldr	r1, [pc, #256]	@ (801764c <USB_EPClearStall+0x14c>)
 801754c:	400a      	ands	r2, r1
 801754e:	801a      	strh	r2, [r3, #0]
 8017550:	687a      	ldr	r2, [r7, #4]
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	781b      	ldrb	r3, [r3, #0]
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	18d3      	adds	r3, r2, r3
 801755a:	183a      	adds	r2, r7, r0
 801755c:	8812      	ldrh	r2, [r2, #0]
 801755e:	493c      	ldr	r1, [pc, #240]	@ (8017650 <USB_EPClearStall+0x150>)
 8017560:	430a      	orrs	r2, r1
 8017562:	b292      	uxth	r2, r2
 8017564:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	78db      	ldrb	r3, [r3, #3]
 801756a:	2b01      	cmp	r3, #1
 801756c:	d068      	beq.n	8017640 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801756e:	687a      	ldr	r2, [r7, #4]
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	009b      	lsls	r3, r3, #2
 8017576:	18d3      	adds	r3, r2, r3
 8017578:	881b      	ldrh	r3, [r3, #0]
 801757a:	b29a      	uxth	r2, r3
 801757c:	200c      	movs	r0, #12
 801757e:	183b      	adds	r3, r7, r0
 8017580:	4934      	ldr	r1, [pc, #208]	@ (8017654 <USB_EPClearStall+0x154>)
 8017582:	400a      	ands	r2, r1
 8017584:	801a      	strh	r2, [r3, #0]
 8017586:	183b      	adds	r3, r7, r0
 8017588:	183a      	adds	r2, r7, r0
 801758a:	8812      	ldrh	r2, [r2, #0]
 801758c:	2120      	movs	r1, #32
 801758e:	404a      	eors	r2, r1
 8017590:	801a      	strh	r2, [r3, #0]
 8017592:	687a      	ldr	r2, [r7, #4]
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	781b      	ldrb	r3, [r3, #0]
 8017598:	009b      	lsls	r3, r3, #2
 801759a:	18d3      	adds	r3, r2, r3
 801759c:	183a      	adds	r2, r7, r0
 801759e:	8812      	ldrh	r2, [r2, #0]
 80175a0:	492d      	ldr	r1, [pc, #180]	@ (8017658 <USB_EPClearStall+0x158>)
 80175a2:	430a      	orrs	r2, r1
 80175a4:	b292      	uxth	r2, r2
 80175a6:	801a      	strh	r2, [r3, #0]
 80175a8:	e04a      	b.n	8017640 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	781b      	ldrb	r3, [r3, #0]
 80175b0:	009b      	lsls	r3, r3, #2
 80175b2:	18d2      	adds	r2, r2, r3
 80175b4:	2116      	movs	r1, #22
 80175b6:	187b      	adds	r3, r7, r1
 80175b8:	8812      	ldrh	r2, [r2, #0]
 80175ba:	801a      	strh	r2, [r3, #0]
 80175bc:	187b      	adds	r3, r7, r1
 80175be:	881a      	ldrh	r2, [r3, #0]
 80175c0:	2380      	movs	r3, #128	@ 0x80
 80175c2:	01db      	lsls	r3, r3, #7
 80175c4:	4013      	ands	r3, r2
 80175c6:	d016      	beq.n	80175f6 <USB_EPClearStall+0xf6>
 80175c8:	687a      	ldr	r2, [r7, #4]
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	009b      	lsls	r3, r3, #2
 80175d0:	18d3      	adds	r3, r2, r3
 80175d2:	881b      	ldrh	r3, [r3, #0]
 80175d4:	b29a      	uxth	r2, r3
 80175d6:	2014      	movs	r0, #20
 80175d8:	183b      	adds	r3, r7, r0
 80175da:	491c      	ldr	r1, [pc, #112]	@ (801764c <USB_EPClearStall+0x14c>)
 80175dc:	400a      	ands	r2, r1
 80175de:	801a      	strh	r2, [r3, #0]
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	781b      	ldrb	r3, [r3, #0]
 80175e6:	009b      	lsls	r3, r3, #2
 80175e8:	18d3      	adds	r3, r2, r3
 80175ea:	183a      	adds	r2, r7, r0
 80175ec:	8812      	ldrh	r2, [r2, #0]
 80175ee:	491b      	ldr	r1, [pc, #108]	@ (801765c <USB_EPClearStall+0x15c>)
 80175f0:	430a      	orrs	r2, r1
 80175f2:	b292      	uxth	r2, r2
 80175f4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	781b      	ldrb	r3, [r3, #0]
 80175fc:	009b      	lsls	r3, r3, #2
 80175fe:	18d3      	adds	r3, r2, r3
 8017600:	881b      	ldrh	r3, [r3, #0]
 8017602:	b29a      	uxth	r2, r3
 8017604:	2012      	movs	r0, #18
 8017606:	183b      	adds	r3, r7, r0
 8017608:	4915      	ldr	r1, [pc, #84]	@ (8017660 <USB_EPClearStall+0x160>)
 801760a:	400a      	ands	r2, r1
 801760c:	801a      	strh	r2, [r3, #0]
 801760e:	183b      	adds	r3, r7, r0
 8017610:	183a      	adds	r2, r7, r0
 8017612:	8812      	ldrh	r2, [r2, #0]
 8017614:	2180      	movs	r1, #128	@ 0x80
 8017616:	0149      	lsls	r1, r1, #5
 8017618:	404a      	eors	r2, r1
 801761a:	801a      	strh	r2, [r3, #0]
 801761c:	183b      	adds	r3, r7, r0
 801761e:	183a      	adds	r2, r7, r0
 8017620:	8812      	ldrh	r2, [r2, #0]
 8017622:	2180      	movs	r1, #128	@ 0x80
 8017624:	0189      	lsls	r1, r1, #6
 8017626:	404a      	eors	r2, r1
 8017628:	801a      	strh	r2, [r3, #0]
 801762a:	687a      	ldr	r2, [r7, #4]
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	781b      	ldrb	r3, [r3, #0]
 8017630:	009b      	lsls	r3, r3, #2
 8017632:	18d3      	adds	r3, r2, r3
 8017634:	183a      	adds	r2, r7, r0
 8017636:	8812      	ldrh	r2, [r2, #0]
 8017638:	4907      	ldr	r1, [pc, #28]	@ (8017658 <USB_EPClearStall+0x158>)
 801763a:	430a      	orrs	r2, r1
 801763c:	b292      	uxth	r2, r2
 801763e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8017640:	2300      	movs	r3, #0
}
 8017642:	0018      	movs	r0, r3
 8017644:	46bd      	mov	sp, r7
 8017646:	b006      	add	sp, #24
 8017648:	bd80      	pop	{r7, pc}
 801764a:	46c0      	nop			@ (mov r8, r8)
 801764c:	ffff8f8f 	.word	0xffff8f8f
 8017650:	ffff80c0 	.word	0xffff80c0
 8017654:	ffff8fbf 	.word	0xffff8fbf
 8017658:	ffff8080 	.word	0xffff8080
 801765c:	ffffc080 	.word	0xffffc080
 8017660:	ffffbf8f 	.word	0xffffbf8f

08017664 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	000a      	movs	r2, r1
 801766e:	1cfb      	adds	r3, r7, #3
 8017670:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8017672:	1cfb      	adds	r3, r7, #3
 8017674:	781b      	ldrb	r3, [r3, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d103      	bne.n	8017682 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	224c      	movs	r2, #76	@ 0x4c
 801767e:	2180      	movs	r1, #128	@ 0x80
 8017680:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8017682:	2300      	movs	r3, #0
}
 8017684:	0018      	movs	r0, r3
 8017686:	46bd      	mov	sp, r7
 8017688:	b002      	add	sp, #8
 801768a:	bd80      	pop	{r7, pc}

0801768c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2258      	movs	r2, #88	@ 0x58
 8017698:	5a9b      	ldrh	r3, [r3, r2]
 801769a:	b29b      	uxth	r3, r3
 801769c:	4a05      	ldr	r2, [pc, #20]	@ (80176b4 <USB_DevConnect+0x28>)
 801769e:	4313      	orrs	r3, r2
 80176a0:	b299      	uxth	r1, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2258      	movs	r2, #88	@ 0x58
 80176a6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80176a8:	2300      	movs	r3, #0
}
 80176aa:	0018      	movs	r0, r3
 80176ac:	46bd      	mov	sp, r7
 80176ae:	b002      	add	sp, #8
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	46c0      	nop			@ (mov r8, r8)
 80176b4:	ffff8000 	.word	0xffff8000

080176b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b084      	sub	sp, #16
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2244      	movs	r2, #68	@ 0x44
 80176c4:	5a9b      	ldrh	r3, [r3, r2]
 80176c6:	b29b      	uxth	r3, r3
 80176c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80176ca:	68fb      	ldr	r3, [r7, #12]
}
 80176cc:	0018      	movs	r0, r3
 80176ce:	46bd      	mov	sp, r7
 80176d0:	b004      	add	sp, #16
 80176d2:	bd80      	pop	{r7, pc}

080176d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b08a      	sub	sp, #40	@ 0x28
 80176d8:	af00      	add	r7, sp, #0
 80176da:	60f8      	str	r0, [r7, #12]
 80176dc:	60b9      	str	r1, [r7, #8]
 80176de:	0019      	movs	r1, r3
 80176e0:	1dbb      	adds	r3, r7, #6
 80176e2:	801a      	strh	r2, [r3, #0]
 80176e4:	1d3b      	adds	r3, r7, #4
 80176e6:	1c0a      	adds	r2, r1, #0
 80176e8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80176ea:	1d3b      	adds	r3, r7, #4
 80176ec:	881b      	ldrh	r3, [r3, #0]
 80176ee:	3301      	adds	r3, #1
 80176f0:	085b      	lsrs	r3, r3, #1
 80176f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80176f8:	68bb      	ldr	r3, [r7, #8]
 80176fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80176fc:	1dbb      	adds	r3, r7, #6
 80176fe:	881a      	ldrh	r2, [r3, #0]
 8017700:	697b      	ldr	r3, [r7, #20]
 8017702:	18d3      	adds	r3, r2, r3
 8017704:	2280      	movs	r2, #128	@ 0x80
 8017706:	00d2      	lsls	r2, r2, #3
 8017708:	4694      	mov	ip, r2
 801770a:	4463      	add	r3, ip
 801770c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801770e:	69bb      	ldr	r3, [r7, #24]
 8017710:	627b      	str	r3, [r7, #36]	@ 0x24
 8017712:	e020      	b.n	8017756 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8017714:	69fb      	ldr	r3, [r7, #28]
 8017716:	781a      	ldrb	r2, [r3, #0]
 8017718:	2112      	movs	r1, #18
 801771a:	187b      	adds	r3, r7, r1
 801771c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801771e:	69fb      	ldr	r3, [r7, #28]
 8017720:	3301      	adds	r3, #1
 8017722:	781b      	ldrb	r3, [r3, #0]
 8017724:	021b      	lsls	r3, r3, #8
 8017726:	b21a      	sxth	r2, r3
 8017728:	187b      	adds	r3, r7, r1
 801772a:	2000      	movs	r0, #0
 801772c:	5e1b      	ldrsh	r3, [r3, r0]
 801772e:	4313      	orrs	r3, r2
 8017730:	b21a      	sxth	r2, r3
 8017732:	187b      	adds	r3, r7, r1
 8017734:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8017736:	6a3b      	ldr	r3, [r7, #32]
 8017738:	187a      	adds	r2, r7, r1
 801773a:	8812      	ldrh	r2, [r2, #0]
 801773c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801773e:	6a3b      	ldr	r3, [r7, #32]
 8017740:	3302      	adds	r3, #2
 8017742:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8017744:	69fb      	ldr	r3, [r7, #28]
 8017746:	3301      	adds	r3, #1
 8017748:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801774a:	69fb      	ldr	r3, [r7, #28]
 801774c:	3301      	adds	r3, #1
 801774e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8017750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017752:	3b01      	subs	r3, #1
 8017754:	627b      	str	r3, [r7, #36]	@ 0x24
 8017756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017758:	2b00      	cmp	r3, #0
 801775a:	d1db      	bne.n	8017714 <USB_WritePMA+0x40>
  }
}
 801775c:	46c0      	nop			@ (mov r8, r8)
 801775e:	46c0      	nop			@ (mov r8, r8)
 8017760:	46bd      	mov	sp, r7
 8017762:	b00a      	add	sp, #40	@ 0x28
 8017764:	bd80      	pop	{r7, pc}

08017766 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8017766:	b580      	push	{r7, lr}
 8017768:	b08a      	sub	sp, #40	@ 0x28
 801776a:	af00      	add	r7, sp, #0
 801776c:	60f8      	str	r0, [r7, #12]
 801776e:	60b9      	str	r1, [r7, #8]
 8017770:	0019      	movs	r1, r3
 8017772:	1dbb      	adds	r3, r7, #6
 8017774:	801a      	strh	r2, [r3, #0]
 8017776:	1d3b      	adds	r3, r7, #4
 8017778:	1c0a      	adds	r2, r1, #0
 801777a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801777c:	1d3b      	adds	r3, r7, #4
 801777e:	881b      	ldrh	r3, [r3, #0]
 8017780:	085b      	lsrs	r3, r3, #1
 8017782:	b29b      	uxth	r3, r3
 8017784:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801778e:	1dbb      	adds	r3, r7, #6
 8017790:	881a      	ldrh	r2, [r3, #0]
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	18d3      	adds	r3, r2, r3
 8017796:	2280      	movs	r2, #128	@ 0x80
 8017798:	00d2      	lsls	r2, r2, #3
 801779a:	4694      	mov	ip, r2
 801779c:	4463      	add	r3, ip
 801779e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80177a0:	69bb      	ldr	r3, [r7, #24]
 80177a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80177a4:	e018      	b.n	80177d8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80177a6:	6a3b      	ldr	r3, [r7, #32]
 80177a8:	881b      	ldrh	r3, [r3, #0]
 80177aa:	b29b      	uxth	r3, r3
 80177ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80177ae:	6a3b      	ldr	r3, [r7, #32]
 80177b0:	3302      	adds	r3, #2
 80177b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80177b4:	693b      	ldr	r3, [r7, #16]
 80177b6:	b2da      	uxtb	r2, r3
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80177bc:	69fb      	ldr	r3, [r7, #28]
 80177be:	3301      	adds	r3, #1
 80177c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80177c2:	693b      	ldr	r3, [r7, #16]
 80177c4:	0a1b      	lsrs	r3, r3, #8
 80177c6:	b2da      	uxtb	r2, r3
 80177c8:	69fb      	ldr	r3, [r7, #28]
 80177ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80177cc:	69fb      	ldr	r3, [r7, #28]
 80177ce:	3301      	adds	r3, #1
 80177d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80177d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177d4:	3b01      	subs	r3, #1
 80177d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80177d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1e3      	bne.n	80177a6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80177de:	1d3b      	adds	r3, r7, #4
 80177e0:	881b      	ldrh	r3, [r3, #0]
 80177e2:	2201      	movs	r2, #1
 80177e4:	4013      	ands	r3, r2
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d007      	beq.n	80177fc <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80177ec:	6a3b      	ldr	r3, [r7, #32]
 80177ee:	881b      	ldrh	r3, [r3, #0]
 80177f0:	b29b      	uxth	r3, r3
 80177f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80177f4:	693b      	ldr	r3, [r7, #16]
 80177f6:	b2da      	uxtb	r2, r3
 80177f8:	69fb      	ldr	r3, [r7, #28]
 80177fa:	701a      	strb	r2, [r3, #0]
  }
}
 80177fc:	46c0      	nop			@ (mov r8, r8)
 80177fe:	46bd      	mov	sp, r7
 8017800:	b00a      	add	sp, #40	@ 0x28
 8017802:	bd80      	pop	{r7, pc}

08017804 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b084      	sub	sp, #16
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	000a      	movs	r2, r1
 801780e:	1cfb      	adds	r3, r7, #3
 8017810:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8017812:	230f      	movs	r3, #15
 8017814:	18fb      	adds	r3, r7, r3
 8017816:	2200      	movs	r2, #0
 8017818:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	7c1b      	ldrb	r3, [r3, #16]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d116      	bne.n	8017850 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017822:	2380      	movs	r3, #128	@ 0x80
 8017824:	009b      	lsls	r3, r3, #2
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	2202      	movs	r2, #2
 801782a:	2181      	movs	r1, #129	@ 0x81
 801782c:	f002 f8eb 	bl	8019a06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2201      	movs	r2, #1
 8017834:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017836:	2380      	movs	r3, #128	@ 0x80
 8017838:	009b      	lsls	r3, r3, #2
 801783a:	6878      	ldr	r0, [r7, #4]
 801783c:	2202      	movs	r2, #2
 801783e:	2101      	movs	r1, #1
 8017840:	f002 f8e1 	bl	8019a06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017844:	687a      	ldr	r2, [r7, #4]
 8017846:	23b6      	movs	r3, #182	@ 0xb6
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	2101      	movs	r1, #1
 801784c:	50d1      	str	r1, [r2, r3]
 801784e:	e013      	b.n	8017878 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017850:	6878      	ldr	r0, [r7, #4]
 8017852:	2340      	movs	r3, #64	@ 0x40
 8017854:	2202      	movs	r2, #2
 8017856:	2181      	movs	r1, #129	@ 0x81
 8017858:	f002 f8d5 	bl	8019a06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	2201      	movs	r2, #1
 8017860:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	2340      	movs	r3, #64	@ 0x40
 8017866:	2202      	movs	r2, #2
 8017868:	2101      	movs	r1, #1
 801786a:	f002 f8cc 	bl	8019a06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801786e:	687a      	ldr	r2, [r7, #4]
 8017870:	23b6      	movs	r3, #182	@ 0xb6
 8017872:	005b      	lsls	r3, r3, #1
 8017874:	2101      	movs	r1, #1
 8017876:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017878:	6878      	ldr	r0, [r7, #4]
 801787a:	2308      	movs	r3, #8
 801787c:	2203      	movs	r2, #3
 801787e:	2182      	movs	r1, #130	@ 0x82
 8017880:	f002 f8c1 	bl	8019a06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2201      	movs	r2, #1
 8017888:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801788a:	2387      	movs	r3, #135	@ 0x87
 801788c:	009b      	lsls	r3, r3, #2
 801788e:	0018      	movs	r0, r3
 8017890:	f002 fa52 	bl	8019d38 <USBD_static_malloc>
 8017894:	0001      	movs	r1, r0
 8017896:	687a      	ldr	r2, [r7, #4]
 8017898:	23ae      	movs	r3, #174	@ 0xae
 801789a:	009b      	lsls	r3, r3, #2
 801789c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801789e:	687a      	ldr	r2, [r7, #4]
 80178a0:	23ae      	movs	r3, #174	@ 0xae
 80178a2:	009b      	lsls	r3, r3, #2
 80178a4:	58d3      	ldr	r3, [r2, r3]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d104      	bne.n	80178b4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80178aa:	230f      	movs	r3, #15
 80178ac:	18fb      	adds	r3, r7, r3
 80178ae:	2201      	movs	r2, #1
 80178b0:	701a      	strb	r2, [r3, #0]
 80178b2:	e02c      	b.n	801790e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80178b4:	687a      	ldr	r2, [r7, #4]
 80178b6:	23ae      	movs	r3, #174	@ 0xae
 80178b8:	009b      	lsls	r3, r3, #2
 80178ba:	58d3      	ldr	r3, [r2, r3]
 80178bc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80178be:	687a      	ldr	r2, [r7, #4]
 80178c0:	23af      	movs	r3, #175	@ 0xaf
 80178c2:	009b      	lsls	r3, r3, #2
 80178c4:	58d3      	ldr	r3, [r2, r3]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80178ca:	68ba      	ldr	r2, [r7, #8]
 80178cc:	2385      	movs	r3, #133	@ 0x85
 80178ce:	009b      	lsls	r3, r3, #2
 80178d0:	2100      	movs	r1, #0
 80178d2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80178d4:	68ba      	ldr	r2, [r7, #8]
 80178d6:	2386      	movs	r3, #134	@ 0x86
 80178d8:	009b      	lsls	r3, r3, #2
 80178da:	2100      	movs	r1, #0
 80178dc:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	7c1b      	ldrb	r3, [r3, #16]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d10a      	bne.n	80178fc <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80178e6:	68ba      	ldr	r2, [r7, #8]
 80178e8:	2381      	movs	r3, #129	@ 0x81
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	58d2      	ldr	r2, [r2, r3]
 80178ee:	2380      	movs	r3, #128	@ 0x80
 80178f0:	009b      	lsls	r3, r3, #2
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	2101      	movs	r1, #1
 80178f6:	f002 f9d1 	bl	8019c9c <USBD_LL_PrepareReceive>
 80178fa:	e008      	b.n	801790e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80178fc:	68ba      	ldr	r2, [r7, #8]
 80178fe:	2381      	movs	r3, #129	@ 0x81
 8017900:	009b      	lsls	r3, r3, #2
 8017902:	58d2      	ldr	r2, [r2, r3]
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	2340      	movs	r3, #64	@ 0x40
 8017908:	2101      	movs	r1, #1
 801790a:	f002 f9c7 	bl	8019c9c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801790e:	230f      	movs	r3, #15
 8017910:	18fb      	adds	r3, r7, r3
 8017912:	781b      	ldrb	r3, [r3, #0]
}
 8017914:	0018      	movs	r0, r3
 8017916:	46bd      	mov	sp, r7
 8017918:	b004      	add	sp, #16
 801791a:	bd80      	pop	{r7, pc}

0801791c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b084      	sub	sp, #16
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
 8017924:	000a      	movs	r2, r1
 8017926:	1cfb      	adds	r3, r7, #3
 8017928:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801792a:	230f      	movs	r3, #15
 801792c:	18fb      	adds	r3, r7, r3
 801792e:	2200      	movs	r2, #0
 8017930:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	2181      	movs	r1, #129	@ 0x81
 8017936:	0018      	movs	r0, r3
 8017938:	f002 f89c 	bl	8019a74 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	2200      	movs	r2, #0
 8017940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	2101      	movs	r1, #1
 8017946:	0018      	movs	r0, r3
 8017948:	f002 f894 	bl	8019a74 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801794c:	687a      	ldr	r2, [r7, #4]
 801794e:	23b6      	movs	r3, #182	@ 0xb6
 8017950:	005b      	lsls	r3, r3, #1
 8017952:	2100      	movs	r1, #0
 8017954:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	2182      	movs	r1, #130	@ 0x82
 801795a:	0018      	movs	r0, r3
 801795c:	f002 f88a 	bl	8019a74 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2200      	movs	r2, #0
 8017964:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8017966:	687a      	ldr	r2, [r7, #4]
 8017968:	23ae      	movs	r3, #174	@ 0xae
 801796a:	009b      	lsls	r3, r3, #2
 801796c:	58d3      	ldr	r3, [r2, r3]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d011      	beq.n	8017996 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8017972:	687a      	ldr	r2, [r7, #4]
 8017974:	23af      	movs	r3, #175	@ 0xaf
 8017976:	009b      	lsls	r3, r3, #2
 8017978:	58d3      	ldr	r3, [r2, r3]
 801797a:	685b      	ldr	r3, [r3, #4]
 801797c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801797e:	687a      	ldr	r2, [r7, #4]
 8017980:	23ae      	movs	r3, #174	@ 0xae
 8017982:	009b      	lsls	r3, r3, #2
 8017984:	58d3      	ldr	r3, [r2, r3]
 8017986:	0018      	movs	r0, r3
 8017988:	f002 f9e2 	bl	8019d50 <USBD_static_free>
    pdev->pClassData = NULL;
 801798c:	687a      	ldr	r2, [r7, #4]
 801798e:	23ae      	movs	r3, #174	@ 0xae
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	2100      	movs	r1, #0
 8017994:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8017996:	230f      	movs	r3, #15
 8017998:	18fb      	adds	r3, r7, r3
 801799a:	781b      	ldrb	r3, [r3, #0]
}
 801799c:	0018      	movs	r0, r3
 801799e:	46bd      	mov	sp, r7
 80179a0:	b004      	add	sp, #16
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b086      	sub	sp, #24
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80179ae:	687a      	ldr	r2, [r7, #4]
 80179b0:	23ae      	movs	r3, #174	@ 0xae
 80179b2:	009b      	lsls	r3, r3, #2
 80179b4:	58d3      	ldr	r3, [r2, r3]
 80179b6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80179b8:	230f      	movs	r3, #15
 80179ba:	18fb      	adds	r3, r7, r3
 80179bc:	2200      	movs	r2, #0
 80179be:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80179c0:	230c      	movs	r3, #12
 80179c2:	18fb      	adds	r3, r7, r3
 80179c4:	2200      	movs	r2, #0
 80179c6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80179c8:	2317      	movs	r3, #23
 80179ca:	18fb      	adds	r3, r7, r3
 80179cc:	2200      	movs	r2, #0
 80179ce:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80179d0:	683b      	ldr	r3, [r7, #0]
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	001a      	movs	r2, r3
 80179d6:	2360      	movs	r3, #96	@ 0x60
 80179d8:	4013      	ands	r3, r2
 80179da:	d03d      	beq.n	8017a58 <USBD_CDC_Setup+0xb4>
 80179dc:	2b20      	cmp	r3, #32
 80179de:	d000      	beq.n	80179e2 <USBD_CDC_Setup+0x3e>
 80179e0:	e094      	b.n	8017b0c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80179e2:	683b      	ldr	r3, [r7, #0]
 80179e4:	88db      	ldrh	r3, [r3, #6]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d02b      	beq.n	8017a42 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	781b      	ldrb	r3, [r3, #0]
 80179ee:	b25b      	sxtb	r3, r3
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	da12      	bge.n	8017a1a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80179f4:	687a      	ldr	r2, [r7, #4]
 80179f6:	23af      	movs	r3, #175	@ 0xaf
 80179f8:	009b      	lsls	r3, r3, #2
 80179fa:	58d3      	ldr	r3, [r2, r3]
 80179fc:	689b      	ldr	r3, [r3, #8]
 80179fe:	683a      	ldr	r2, [r7, #0]
 8017a00:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8017a02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017a04:	683a      	ldr	r2, [r7, #0]
 8017a06:	88d2      	ldrh	r2, [r2, #6]
 8017a08:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8017a0a:	6939      	ldr	r1, [r7, #16]
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	88da      	ldrh	r2, [r3, #6]
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	0018      	movs	r0, r3
 8017a14:	f001 fbaf 	bl	8019176 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8017a18:	e083      	b.n	8017b22 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	7859      	ldrb	r1, [r3, #1]
 8017a1e:	693a      	ldr	r2, [r7, #16]
 8017a20:	2380      	movs	r3, #128	@ 0x80
 8017a22:	009b      	lsls	r3, r3, #2
 8017a24:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8017a26:	683b      	ldr	r3, [r7, #0]
 8017a28:	88db      	ldrh	r3, [r3, #6]
 8017a2a:	b2d9      	uxtb	r1, r3
 8017a2c:	693b      	ldr	r3, [r7, #16]
 8017a2e:	4a40      	ldr	r2, [pc, #256]	@ (8017b30 <USBD_CDC_Setup+0x18c>)
 8017a30:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8017a32:	6939      	ldr	r1, [r7, #16]
 8017a34:	683b      	ldr	r3, [r7, #0]
 8017a36:	88da      	ldrh	r2, [r3, #6]
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	0018      	movs	r0, r3
 8017a3c:	f001 fbce 	bl	80191dc <USBD_CtlPrepareRx>
      break;
 8017a40:	e06f      	b.n	8017b22 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017a42:	687a      	ldr	r2, [r7, #4]
 8017a44:	23af      	movs	r3, #175	@ 0xaf
 8017a46:	009b      	lsls	r3, r3, #2
 8017a48:	58d3      	ldr	r3, [r2, r3]
 8017a4a:	689b      	ldr	r3, [r3, #8]
 8017a4c:	683a      	ldr	r2, [r7, #0]
 8017a4e:	7850      	ldrb	r0, [r2, #1]
 8017a50:	6839      	ldr	r1, [r7, #0]
 8017a52:	2200      	movs	r2, #0
 8017a54:	4798      	blx	r3
      break;
 8017a56:	e064      	b.n	8017b22 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	785b      	ldrb	r3, [r3, #1]
 8017a5c:	2b0b      	cmp	r3, #11
 8017a5e:	d037      	beq.n	8017ad0 <USBD_CDC_Setup+0x12c>
 8017a60:	dc47      	bgt.n	8017af2 <USBD_CDC_Setup+0x14e>
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d002      	beq.n	8017a6c <USBD_CDC_Setup+0xc8>
 8017a66:	2b0a      	cmp	r3, #10
 8017a68:	d019      	beq.n	8017a9e <USBD_CDC_Setup+0xfa>
 8017a6a:	e042      	b.n	8017af2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a6c:	687a      	ldr	r2, [r7, #4]
 8017a6e:	23a7      	movs	r3, #167	@ 0xa7
 8017a70:	009b      	lsls	r3, r3, #2
 8017a72:	5cd3      	ldrb	r3, [r2, r3]
 8017a74:	2b03      	cmp	r3, #3
 8017a76:	d107      	bne.n	8017a88 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8017a78:	230c      	movs	r3, #12
 8017a7a:	18f9      	adds	r1, r7, r3
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2202      	movs	r2, #2
 8017a80:	0018      	movs	r0, r3
 8017a82:	f001 fb78 	bl	8019176 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017a86:	e040      	b.n	8017b0a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8017a88:	683a      	ldr	r2, [r7, #0]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	0011      	movs	r1, r2
 8017a8e:	0018      	movs	r0, r3
 8017a90:	f001 faf3 	bl	801907a <USBD_CtlError>
            ret = USBD_FAIL;
 8017a94:	2317      	movs	r3, #23
 8017a96:	18fb      	adds	r3, r7, r3
 8017a98:	2202      	movs	r2, #2
 8017a9a:	701a      	strb	r2, [r3, #0]
          break;
 8017a9c:	e035      	b.n	8017b0a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	23a7      	movs	r3, #167	@ 0xa7
 8017aa2:	009b      	lsls	r3, r3, #2
 8017aa4:	5cd3      	ldrb	r3, [r2, r3]
 8017aa6:	2b03      	cmp	r3, #3
 8017aa8:	d107      	bne.n	8017aba <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8017aaa:	230f      	movs	r3, #15
 8017aac:	18f9      	adds	r1, r7, r3
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	2201      	movs	r2, #1
 8017ab2:	0018      	movs	r0, r3
 8017ab4:	f001 fb5f 	bl	8019176 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017ab8:	e027      	b.n	8017b0a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8017aba:	683a      	ldr	r2, [r7, #0]
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	0011      	movs	r1, r2
 8017ac0:	0018      	movs	r0, r3
 8017ac2:	f001 fada 	bl	801907a <USBD_CtlError>
            ret = USBD_FAIL;
 8017ac6:	2317      	movs	r3, #23
 8017ac8:	18fb      	adds	r3, r7, r3
 8017aca:	2202      	movs	r2, #2
 8017acc:	701a      	strb	r2, [r3, #0]
          break;
 8017ace:	e01c      	b.n	8017b0a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017ad0:	687a      	ldr	r2, [r7, #4]
 8017ad2:	23a7      	movs	r3, #167	@ 0xa7
 8017ad4:	009b      	lsls	r3, r3, #2
 8017ad6:	5cd3      	ldrb	r3, [r2, r3]
 8017ad8:	2b03      	cmp	r3, #3
 8017ada:	d015      	beq.n	8017b08 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8017adc:	683a      	ldr	r2, [r7, #0]
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	0011      	movs	r1, r2
 8017ae2:	0018      	movs	r0, r3
 8017ae4:	f001 fac9 	bl	801907a <USBD_CtlError>
            ret = USBD_FAIL;
 8017ae8:	2317      	movs	r3, #23
 8017aea:	18fb      	adds	r3, r7, r3
 8017aec:	2202      	movs	r2, #2
 8017aee:	701a      	strb	r2, [r3, #0]
          }
          break;
 8017af0:	e00a      	b.n	8017b08 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8017af2:	683a      	ldr	r2, [r7, #0]
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	0011      	movs	r1, r2
 8017af8:	0018      	movs	r0, r3
 8017afa:	f001 fabe 	bl	801907a <USBD_CtlError>
          ret = USBD_FAIL;
 8017afe:	2317      	movs	r3, #23
 8017b00:	18fb      	adds	r3, r7, r3
 8017b02:	2202      	movs	r2, #2
 8017b04:	701a      	strb	r2, [r3, #0]
          break;
 8017b06:	e000      	b.n	8017b0a <USBD_CDC_Setup+0x166>
          break;
 8017b08:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017b0a:	e00a      	b.n	8017b22 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8017b0c:	683a      	ldr	r2, [r7, #0]
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	0011      	movs	r1, r2
 8017b12:	0018      	movs	r0, r3
 8017b14:	f001 fab1 	bl	801907a <USBD_CtlError>
      ret = USBD_FAIL;
 8017b18:	2317      	movs	r3, #23
 8017b1a:	18fb      	adds	r3, r7, r3
 8017b1c:	2202      	movs	r2, #2
 8017b1e:	701a      	strb	r2, [r3, #0]
      break;
 8017b20:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8017b22:	2317      	movs	r3, #23
 8017b24:	18fb      	adds	r3, r7, r3
 8017b26:	781b      	ldrb	r3, [r3, #0]
}
 8017b28:	0018      	movs	r0, r3
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	b006      	add	sp, #24
 8017b2e:	bd80      	pop	{r7, pc}
 8017b30:	00000201 	.word	0x00000201

08017b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b084      	sub	sp, #16
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	000a      	movs	r2, r1
 8017b3e:	1cfb      	adds	r3, r7, #3
 8017b40:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017b42:	687a      	ldr	r2, [r7, #4]
 8017b44:	23ae      	movs	r3, #174	@ 0xae
 8017b46:	009b      	lsls	r3, r3, #2
 8017b48:	58d3      	ldr	r3, [r2, r3]
 8017b4a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8017b4c:	687a      	ldr	r2, [r7, #4]
 8017b4e:	23b0      	movs	r3, #176	@ 0xb0
 8017b50:	009b      	lsls	r3, r3, #2
 8017b52:	58d3      	ldr	r3, [r2, r3]
 8017b54:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8017b56:	687a      	ldr	r2, [r7, #4]
 8017b58:	23ae      	movs	r3, #174	@ 0xae
 8017b5a:	009b      	lsls	r3, r3, #2
 8017b5c:	58d3      	ldr	r3, [r2, r3]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d03e      	beq.n	8017be0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8017b62:	1cfb      	adds	r3, r7, #3
 8017b64:	781a      	ldrb	r2, [r3, #0]
 8017b66:	6879      	ldr	r1, [r7, #4]
 8017b68:	0013      	movs	r3, r2
 8017b6a:	009b      	lsls	r3, r3, #2
 8017b6c:	189b      	adds	r3, r3, r2
 8017b6e:	009b      	lsls	r3, r3, #2
 8017b70:	18cb      	adds	r3, r1, r3
 8017b72:	331c      	adds	r3, #28
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d02b      	beq.n	8017bd2 <USBD_CDC_DataIn+0x9e>
 8017b7a:	1cfb      	adds	r3, r7, #3
 8017b7c:	781a      	ldrb	r2, [r3, #0]
 8017b7e:	6879      	ldr	r1, [r7, #4]
 8017b80:	0013      	movs	r3, r2
 8017b82:	009b      	lsls	r3, r3, #2
 8017b84:	189b      	adds	r3, r3, r2
 8017b86:	009b      	lsls	r3, r3, #2
 8017b88:	18cb      	adds	r3, r1, r3
 8017b8a:	331c      	adds	r3, #28
 8017b8c:	6818      	ldr	r0, [r3, #0]
 8017b8e:	1cfb      	adds	r3, r7, #3
 8017b90:	781a      	ldrb	r2, [r3, #0]
 8017b92:	68b9      	ldr	r1, [r7, #8]
 8017b94:	0013      	movs	r3, r2
 8017b96:	009b      	lsls	r3, r3, #2
 8017b98:	189b      	adds	r3, r3, r2
 8017b9a:	00db      	lsls	r3, r3, #3
 8017b9c:	18cb      	adds	r3, r1, r3
 8017b9e:	3338      	adds	r3, #56	@ 0x38
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	0019      	movs	r1, r3
 8017ba4:	f7e8 fb84 	bl	80002b0 <__aeabi_uidivmod>
 8017ba8:	1e0b      	subs	r3, r1, #0
 8017baa:	d112      	bne.n	8017bd2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8017bac:	1cfb      	adds	r3, r7, #3
 8017bae:	781a      	ldrb	r2, [r3, #0]
 8017bb0:	6879      	ldr	r1, [r7, #4]
 8017bb2:	0013      	movs	r3, r2
 8017bb4:	009b      	lsls	r3, r3, #2
 8017bb6:	189b      	adds	r3, r3, r2
 8017bb8:	009b      	lsls	r3, r3, #2
 8017bba:	18cb      	adds	r3, r1, r3
 8017bbc:	331c      	adds	r3, #28
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017bc2:	1cfb      	adds	r3, r7, #3
 8017bc4:	7819      	ldrb	r1, [r3, #0]
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	2300      	movs	r3, #0
 8017bca:	2200      	movs	r2, #0
 8017bcc:	f002 f82f 	bl	8019c2e <USBD_LL_Transmit>
 8017bd0:	e004      	b.n	8017bdc <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	2385      	movs	r3, #133	@ 0x85
 8017bd6:	009b      	lsls	r3, r3, #2
 8017bd8:	2100      	movs	r1, #0
 8017bda:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	e000      	b.n	8017be2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8017be0:	2302      	movs	r3, #2
  }
}
 8017be2:	0018      	movs	r0, r3
 8017be4:	46bd      	mov	sp, r7
 8017be6:	b004      	add	sp, #16
 8017be8:	bd80      	pop	{r7, pc}

08017bea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017bea:	b580      	push	{r7, lr}
 8017bec:	b084      	sub	sp, #16
 8017bee:	af00      	add	r7, sp, #0
 8017bf0:	6078      	str	r0, [r7, #4]
 8017bf2:	000a      	movs	r2, r1
 8017bf4:	1cfb      	adds	r3, r7, #3
 8017bf6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	23ae      	movs	r3, #174	@ 0xae
 8017bfc:	009b      	lsls	r3, r3, #2
 8017bfe:	58d3      	ldr	r3, [r2, r3]
 8017c00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017c02:	1cfb      	adds	r3, r7, #3
 8017c04:	781a      	ldrb	r2, [r3, #0]
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	0011      	movs	r1, r2
 8017c0a:	0018      	movs	r0, r3
 8017c0c:	f002 f87d 	bl	8019d0a <USBD_LL_GetRxDataSize>
 8017c10:	0001      	movs	r1, r0
 8017c12:	68fa      	ldr	r2, [r7, #12]
 8017c14:	2383      	movs	r3, #131	@ 0x83
 8017c16:	009b      	lsls	r3, r3, #2
 8017c18:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	23ae      	movs	r3, #174	@ 0xae
 8017c1e:	009b      	lsls	r3, r3, #2
 8017c20:	58d3      	ldr	r3, [r2, r3]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d011      	beq.n	8017c4a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017c26:	687a      	ldr	r2, [r7, #4]
 8017c28:	23af      	movs	r3, #175	@ 0xaf
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	58d3      	ldr	r3, [r2, r3]
 8017c2e:	68da      	ldr	r2, [r3, #12]
 8017c30:	68f9      	ldr	r1, [r7, #12]
 8017c32:	2381      	movs	r3, #129	@ 0x81
 8017c34:	009b      	lsls	r3, r3, #2
 8017c36:	58c8      	ldr	r0, [r1, r3]
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	2183      	movs	r1, #131	@ 0x83
 8017c3c:	0089      	lsls	r1, r1, #2
 8017c3e:	468c      	mov	ip, r1
 8017c40:	4463      	add	r3, ip
 8017c42:	0019      	movs	r1, r3
 8017c44:	4790      	blx	r2

    return USBD_OK;
 8017c46:	2300      	movs	r3, #0
 8017c48:	e000      	b.n	8017c4c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8017c4a:	2302      	movs	r3, #2
  }
}
 8017c4c:	0018      	movs	r0, r3
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	b004      	add	sp, #16
 8017c52:	bd80      	pop	{r7, pc}

08017c54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017c54:	b590      	push	{r4, r7, lr}
 8017c56:	b085      	sub	sp, #20
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017c5c:	687a      	ldr	r2, [r7, #4]
 8017c5e:	23ae      	movs	r3, #174	@ 0xae
 8017c60:	009b      	lsls	r3, r3, #2
 8017c62:	58d3      	ldr	r3, [r2, r3]
 8017c64:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	23af      	movs	r3, #175	@ 0xaf
 8017c6a:	009b      	lsls	r3, r3, #2
 8017c6c:	58d3      	ldr	r3, [r2, r3]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d018      	beq.n	8017ca4 <USBD_CDC_EP0_RxReady+0x50>
 8017c72:	68fa      	ldr	r2, [r7, #12]
 8017c74:	2380      	movs	r3, #128	@ 0x80
 8017c76:	009b      	lsls	r3, r3, #2
 8017c78:	5cd3      	ldrb	r3, [r2, r3]
 8017c7a:	2bff      	cmp	r3, #255	@ 0xff
 8017c7c:	d012      	beq.n	8017ca4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	23af      	movs	r3, #175	@ 0xaf
 8017c82:	009b      	lsls	r3, r3, #2
 8017c84:	58d3      	ldr	r3, [r2, r3]
 8017c86:	689b      	ldr	r3, [r3, #8]
 8017c88:	68f9      	ldr	r1, [r7, #12]
 8017c8a:	2280      	movs	r2, #128	@ 0x80
 8017c8c:	0092      	lsls	r2, r2, #2
 8017c8e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8017c90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8017c92:	68fa      	ldr	r2, [r7, #12]
 8017c94:	4c06      	ldr	r4, [pc, #24]	@ (8017cb0 <USBD_CDC_EP0_RxReady+0x5c>)
 8017c96:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017c9a:	68fa      	ldr	r2, [r7, #12]
 8017c9c:	2380      	movs	r3, #128	@ 0x80
 8017c9e:	009b      	lsls	r3, r3, #2
 8017ca0:	21ff      	movs	r1, #255	@ 0xff
 8017ca2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8017ca4:	2300      	movs	r3, #0
}
 8017ca6:	0018      	movs	r0, r3
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	b005      	add	sp, #20
 8017cac:	bd90      	pop	{r4, r7, pc}
 8017cae:	46c0      	nop			@ (mov r8, r8)
 8017cb0:	00000201 	.word	0x00000201

08017cb4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2243      	movs	r2, #67	@ 0x43
 8017cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8017cc2:	4b02      	ldr	r3, [pc, #8]	@ (8017ccc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8017cc4:	0018      	movs	r0, r3
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	b002      	add	sp, #8
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	20000164 	.word	0x20000164

08017cd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b082      	sub	sp, #8
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2243      	movs	r2, #67	@ 0x43
 8017cdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8017cde:	4b02      	ldr	r3, [pc, #8]	@ (8017ce8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8017ce0:	0018      	movs	r0, r3
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	b002      	add	sp, #8
 8017ce6:	bd80      	pop	{r7, pc}
 8017ce8:	20000120 	.word	0x20000120

08017cec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b082      	sub	sp, #8
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2243      	movs	r2, #67	@ 0x43
 8017cf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8017cfa:	4b02      	ldr	r3, [pc, #8]	@ (8017d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8017cfc:	0018      	movs	r0, r3
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	b002      	add	sp, #8
 8017d02:	bd80      	pop	{r7, pc}
 8017d04:	200001a8 	.word	0x200001a8

08017d08 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b082      	sub	sp, #8
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	220a      	movs	r2, #10
 8017d14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8017d16:	4b02      	ldr	r3, [pc, #8]	@ (8017d20 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8017d18:	0018      	movs	r0, r3
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	b002      	add	sp, #8
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	200000dc 	.word	0x200000dc

08017d24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b084      	sub	sp, #16
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8017d2e:	200f      	movs	r0, #15
 8017d30:	183b      	adds	r3, r7, r0
 8017d32:	2202      	movs	r2, #2
 8017d34:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d007      	beq.n	8017d4c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8017d3c:	687a      	ldr	r2, [r7, #4]
 8017d3e:	23af      	movs	r3, #175	@ 0xaf
 8017d40:	009b      	lsls	r3, r3, #2
 8017d42:	6839      	ldr	r1, [r7, #0]
 8017d44:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8017d46:	183b      	adds	r3, r7, r0
 8017d48:	2200      	movs	r2, #0
 8017d4a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8017d4c:	230f      	movs	r3, #15
 8017d4e:	18fb      	adds	r3, r7, r3
 8017d50:	781b      	ldrb	r3, [r3, #0]
}
 8017d52:	0018      	movs	r0, r3
 8017d54:	46bd      	mov	sp, r7
 8017d56:	b004      	add	sp, #16
 8017d58:	bd80      	pop	{r7, pc}

08017d5a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8017d5a:	b580      	push	{r7, lr}
 8017d5c:	b086      	sub	sp, #24
 8017d5e:	af00      	add	r7, sp, #0
 8017d60:	60f8      	str	r0, [r7, #12]
 8017d62:	60b9      	str	r1, [r7, #8]
 8017d64:	1dbb      	adds	r3, r7, #6
 8017d66:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017d68:	68fa      	ldr	r2, [r7, #12]
 8017d6a:	23ae      	movs	r3, #174	@ 0xae
 8017d6c:	009b      	lsls	r3, r3, #2
 8017d6e:	58d3      	ldr	r3, [r2, r3]
 8017d70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8017d72:	697a      	ldr	r2, [r7, #20]
 8017d74:	2382      	movs	r3, #130	@ 0x82
 8017d76:	009b      	lsls	r3, r3, #2
 8017d78:	68b9      	ldr	r1, [r7, #8]
 8017d7a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8017d7c:	1dbb      	adds	r3, r7, #6
 8017d7e:	8819      	ldrh	r1, [r3, #0]
 8017d80:	697a      	ldr	r2, [r7, #20]
 8017d82:	2384      	movs	r3, #132	@ 0x84
 8017d84:	009b      	lsls	r3, r3, #2
 8017d86:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017d88:	2300      	movs	r3, #0
}
 8017d8a:	0018      	movs	r0, r3
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	b006      	add	sp, #24
 8017d90:	bd80      	pop	{r7, pc}

08017d92 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8017d92:	b580      	push	{r7, lr}
 8017d94:	b084      	sub	sp, #16
 8017d96:	af00      	add	r7, sp, #0
 8017d98:	6078      	str	r0, [r7, #4]
 8017d9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017d9c:	687a      	ldr	r2, [r7, #4]
 8017d9e:	23ae      	movs	r3, #174	@ 0xae
 8017da0:	009b      	lsls	r3, r3, #2
 8017da2:	58d3      	ldr	r3, [r2, r3]
 8017da4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8017da6:	68fa      	ldr	r2, [r7, #12]
 8017da8:	2381      	movs	r3, #129	@ 0x81
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	6839      	ldr	r1, [r7, #0]
 8017dae:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017db0:	2300      	movs	r3, #0
}
 8017db2:	0018      	movs	r0, r3
 8017db4:	46bd      	mov	sp, r7
 8017db6:	b004      	add	sp, #16
 8017db8:	bd80      	pop	{r7, pc}

08017dba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8017dba:	b580      	push	{r7, lr}
 8017dbc:	b084      	sub	sp, #16
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017dc2:	687a      	ldr	r2, [r7, #4]
 8017dc4:	23ae      	movs	r3, #174	@ 0xae
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	58d3      	ldr	r3, [r2, r3]
 8017dca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8017dcc:	687a      	ldr	r2, [r7, #4]
 8017dce:	23ae      	movs	r3, #174	@ 0xae
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	58d3      	ldr	r3, [r2, r3]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d022      	beq.n	8017e1e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8017dd8:	68fa      	ldr	r2, [r7, #12]
 8017dda:	2385      	movs	r3, #133	@ 0x85
 8017ddc:	009b      	lsls	r3, r3, #2
 8017dde:	58d3      	ldr	r3, [r2, r3]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d11a      	bne.n	8017e1a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8017de4:	68fa      	ldr	r2, [r7, #12]
 8017de6:	2385      	movs	r3, #133	@ 0x85
 8017de8:	009b      	lsls	r3, r3, #2
 8017dea:	2101      	movs	r1, #1
 8017dec:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8017dee:	68fa      	ldr	r2, [r7, #12]
 8017df0:	2384      	movs	r3, #132	@ 0x84
 8017df2:	009b      	lsls	r3, r3, #2
 8017df4:	58d2      	ldr	r2, [r2, r3]
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017dfa:	68fa      	ldr	r2, [r7, #12]
 8017dfc:	2382      	movs	r3, #130	@ 0x82
 8017dfe:	009b      	lsls	r3, r3, #2
 8017e00:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8017e02:	68fa      	ldr	r2, [r7, #12]
 8017e04:	2384      	movs	r3, #132	@ 0x84
 8017e06:	009b      	lsls	r3, r3, #2
 8017e08:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	000a      	movs	r2, r1
 8017e10:	2181      	movs	r1, #129	@ 0x81
 8017e12:	f001 ff0c 	bl	8019c2e <USBD_LL_Transmit>

      return USBD_OK;
 8017e16:	2300      	movs	r3, #0
 8017e18:	e002      	b.n	8017e20 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	e000      	b.n	8017e20 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8017e1e:	2302      	movs	r3, #2
  }
}
 8017e20:	0018      	movs	r0, r3
 8017e22:	46bd      	mov	sp, r7
 8017e24:	b004      	add	sp, #16
 8017e26:	bd80      	pop	{r7, pc}

08017e28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b084      	sub	sp, #16
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017e30:	687a      	ldr	r2, [r7, #4]
 8017e32:	23ae      	movs	r3, #174	@ 0xae
 8017e34:	009b      	lsls	r3, r3, #2
 8017e36:	58d3      	ldr	r3, [r2, r3]
 8017e38:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8017e3a:	687a      	ldr	r2, [r7, #4]
 8017e3c:	23ae      	movs	r3, #174	@ 0xae
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	58d3      	ldr	r3, [r2, r3]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d019      	beq.n	8017e7a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	7c1b      	ldrb	r3, [r3, #16]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d10a      	bne.n	8017e64 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017e4e:	68fa      	ldr	r2, [r7, #12]
 8017e50:	2381      	movs	r3, #129	@ 0x81
 8017e52:	009b      	lsls	r3, r3, #2
 8017e54:	58d2      	ldr	r2, [r2, r3]
 8017e56:	2380      	movs	r3, #128	@ 0x80
 8017e58:	009b      	lsls	r3, r3, #2
 8017e5a:	6878      	ldr	r0, [r7, #4]
 8017e5c:	2101      	movs	r1, #1
 8017e5e:	f001 ff1d 	bl	8019c9c <USBD_LL_PrepareReceive>
 8017e62:	e008      	b.n	8017e76 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017e64:	68fa      	ldr	r2, [r7, #12]
 8017e66:	2381      	movs	r3, #129	@ 0x81
 8017e68:	009b      	lsls	r3, r3, #2
 8017e6a:	58d2      	ldr	r2, [r2, r3]
 8017e6c:	6878      	ldr	r0, [r7, #4]
 8017e6e:	2340      	movs	r3, #64	@ 0x40
 8017e70:	2101      	movs	r1, #1
 8017e72:	f001 ff13 	bl	8019c9c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8017e76:	2300      	movs	r3, #0
 8017e78:	e000      	b.n	8017e7c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8017e7a:	2302      	movs	r3, #2
  }
}
 8017e7c:	0018      	movs	r0, r3
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	b004      	add	sp, #16
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	60b9      	str	r1, [r7, #8]
 8017e8e:	1dfb      	adds	r3, r7, #7
 8017e90:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d101      	bne.n	8017e9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017e98:	2302      	movs	r3, #2
 8017e9a:	e020      	b.n	8017ede <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8017e9c:	68fa      	ldr	r2, [r7, #12]
 8017e9e:	23ad      	movs	r3, #173	@ 0xad
 8017ea0:	009b      	lsls	r3, r3, #2
 8017ea2:	58d3      	ldr	r3, [r2, r3]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d004      	beq.n	8017eb2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8017ea8:	68fa      	ldr	r2, [r7, #12]
 8017eaa:	23ad      	movs	r3, #173	@ 0xad
 8017eac:	009b      	lsls	r3, r3, #2
 8017eae:	2100      	movs	r1, #0
 8017eb0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017eb2:	68bb      	ldr	r3, [r7, #8]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d004      	beq.n	8017ec2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017eb8:	68fa      	ldr	r2, [r7, #12]
 8017eba:	23ac      	movs	r3, #172	@ 0xac
 8017ebc:	009b      	lsls	r3, r3, #2
 8017ebe:	68b9      	ldr	r1, [r7, #8]
 8017ec0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017ec2:	68fa      	ldr	r2, [r7, #12]
 8017ec4:	23a7      	movs	r3, #167	@ 0xa7
 8017ec6:	009b      	lsls	r3, r3, #2
 8017ec8:	2101      	movs	r1, #1
 8017eca:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	1dfa      	adds	r2, r7, #7
 8017ed0:	7812      	ldrb	r2, [r2, #0]
 8017ed2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	0018      	movs	r0, r3
 8017ed8:	f001 fd0c 	bl	80198f4 <USBD_LL_Init>

  return USBD_OK;
 8017edc:	2300      	movs	r3, #0
}
 8017ede:	0018      	movs	r0, r3
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	b004      	add	sp, #16
 8017ee4:	bd80      	pop	{r7, pc}

08017ee6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017ee6:	b580      	push	{r7, lr}
 8017ee8:	b084      	sub	sp, #16
 8017eea:	af00      	add	r7, sp, #0
 8017eec:	6078      	str	r0, [r7, #4]
 8017eee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8017ef0:	200f      	movs	r0, #15
 8017ef2:	183b      	adds	r3, r7, r0
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8017ef8:	683b      	ldr	r3, [r7, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d008      	beq.n	8017f10 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	23ad      	movs	r3, #173	@ 0xad
 8017f02:	009b      	lsls	r3, r3, #2
 8017f04:	6839      	ldr	r1, [r7, #0]
 8017f06:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8017f08:	183b      	adds	r3, r7, r0
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	701a      	strb	r2, [r3, #0]
 8017f0e:	e003      	b.n	8017f18 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8017f10:	230f      	movs	r3, #15
 8017f12:	18fb      	adds	r3, r7, r3
 8017f14:	2202      	movs	r2, #2
 8017f16:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8017f18:	230f      	movs	r3, #15
 8017f1a:	18fb      	adds	r3, r7, r3
 8017f1c:	781b      	ldrb	r3, [r3, #0]
}
 8017f1e:	0018      	movs	r0, r3
 8017f20:	46bd      	mov	sp, r7
 8017f22:	b004      	add	sp, #16
 8017f24:	bd80      	pop	{r7, pc}

08017f26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017f26:	b580      	push	{r7, lr}
 8017f28:	b082      	sub	sp, #8
 8017f2a:	af00      	add	r7, sp, #0
 8017f2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	0018      	movs	r0, r3
 8017f32:	f001 fd43 	bl	80199bc <USBD_LL_Start>

  return USBD_OK;
 8017f36:	2300      	movs	r3, #0
}
 8017f38:	0018      	movs	r0, r3
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	b002      	add	sp, #8
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017f48:	2300      	movs	r3, #0
}
 8017f4a:	0018      	movs	r0, r3
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	b002      	add	sp, #8
 8017f50:	bd80      	pop	{r7, pc}

08017f52 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017f52:	b590      	push	{r4, r7, lr}
 8017f54:	b085      	sub	sp, #20
 8017f56:	af00      	add	r7, sp, #0
 8017f58:	6078      	str	r0, [r7, #4]
 8017f5a:	000a      	movs	r2, r1
 8017f5c:	1cfb      	adds	r3, r7, #3
 8017f5e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017f60:	240f      	movs	r4, #15
 8017f62:	193b      	adds	r3, r7, r4
 8017f64:	2202      	movs	r2, #2
 8017f66:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8017f68:	687a      	ldr	r2, [r7, #4]
 8017f6a:	23ad      	movs	r3, #173	@ 0xad
 8017f6c:	009b      	lsls	r3, r3, #2
 8017f6e:	58d3      	ldr	r3, [r2, r3]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d00e      	beq.n	8017f92 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8017f74:	687a      	ldr	r2, [r7, #4]
 8017f76:	23ad      	movs	r3, #173	@ 0xad
 8017f78:	009b      	lsls	r3, r3, #2
 8017f7a:	58d3      	ldr	r3, [r2, r3]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	1cfa      	adds	r2, r7, #3
 8017f80:	7811      	ldrb	r1, [r2, #0]
 8017f82:	687a      	ldr	r2, [r7, #4]
 8017f84:	0010      	movs	r0, r2
 8017f86:	4798      	blx	r3
 8017f88:	1e03      	subs	r3, r0, #0
 8017f8a:	d102      	bne.n	8017f92 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8017f8c:	193b      	adds	r3, r7, r4
 8017f8e:	2200      	movs	r2, #0
 8017f90:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8017f92:	230f      	movs	r3, #15
 8017f94:	18fb      	adds	r3, r7, r3
 8017f96:	781b      	ldrb	r3, [r3, #0]
}
 8017f98:	0018      	movs	r0, r3
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	b005      	add	sp, #20
 8017f9e:	bd90      	pop	{r4, r7, pc}

08017fa0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	000a      	movs	r2, r1
 8017faa:	1cfb      	adds	r3, r7, #3
 8017fac:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	23ad      	movs	r3, #173	@ 0xad
 8017fb2:	009b      	lsls	r3, r3, #2
 8017fb4:	58d3      	ldr	r3, [r2, r3]
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	1cfa      	adds	r2, r7, #3
 8017fba:	7811      	ldrb	r1, [r2, #0]
 8017fbc:	687a      	ldr	r2, [r7, #4]
 8017fbe:	0010      	movs	r0, r2
 8017fc0:	4798      	blx	r3

  return USBD_OK;
 8017fc2:	2300      	movs	r3, #0
}
 8017fc4:	0018      	movs	r0, r3
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	b002      	add	sp, #8
 8017fca:	bd80      	pop	{r7, pc}

08017fcc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
 8017fd4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	22aa      	movs	r2, #170	@ 0xaa
 8017fda:	0092      	lsls	r2, r2, #2
 8017fdc:	4694      	mov	ip, r2
 8017fde:	4463      	add	r3, ip
 8017fe0:	683a      	ldr	r2, [r7, #0]
 8017fe2:	0011      	movs	r1, r2
 8017fe4:	0018      	movs	r0, r3
 8017fe6:	f001 f810 	bl	801900a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017fea:	687a      	ldr	r2, [r7, #4]
 8017fec:	23a5      	movs	r3, #165	@ 0xa5
 8017fee:	009b      	lsls	r3, r3, #2
 8017ff0:	2101      	movs	r1, #1
 8017ff2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	4a23      	ldr	r2, [pc, #140]	@ (8018084 <USBD_LL_SetupStage+0xb8>)
 8017ff8:	5a9b      	ldrh	r3, [r3, r2]
 8017ffa:	0019      	movs	r1, r3
 8017ffc:	687a      	ldr	r2, [r7, #4]
 8017ffe:	23a6      	movs	r3, #166	@ 0xa6
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8018004:	687a      	ldr	r2, [r7, #4]
 8018006:	23aa      	movs	r3, #170	@ 0xaa
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	5cd3      	ldrb	r3, [r2, r3]
 801800c:	001a      	movs	r2, r3
 801800e:	231f      	movs	r3, #31
 8018010:	4013      	ands	r3, r2
 8018012:	2b02      	cmp	r3, #2
 8018014:	d019      	beq.n	801804a <USBD_LL_SetupStage+0x7e>
 8018016:	d822      	bhi.n	801805e <USBD_LL_SetupStage+0x92>
 8018018:	2b00      	cmp	r3, #0
 801801a:	d002      	beq.n	8018022 <USBD_LL_SetupStage+0x56>
 801801c:	2b01      	cmp	r3, #1
 801801e:	d00a      	beq.n	8018036 <USBD_LL_SetupStage+0x6a>
 8018020:	e01d      	b.n	801805e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	22aa      	movs	r2, #170	@ 0xaa
 8018026:	0092      	lsls	r2, r2, #2
 8018028:	189a      	adds	r2, r3, r2
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	0011      	movs	r1, r2
 801802e:	0018      	movs	r0, r3
 8018030:	f000 fa10 	bl	8018454 <USBD_StdDevReq>
      break;
 8018034:	e020      	b.n	8018078 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	22aa      	movs	r2, #170	@ 0xaa
 801803a:	0092      	lsls	r2, r2, #2
 801803c:	189a      	adds	r2, r3, r2
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	0011      	movs	r1, r2
 8018042:	0018      	movs	r0, r3
 8018044:	f000 fa78 	bl	8018538 <USBD_StdItfReq>
      break;
 8018048:	e016      	b.n	8018078 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	22aa      	movs	r2, #170	@ 0xaa
 801804e:	0092      	lsls	r2, r2, #2
 8018050:	189a      	adds	r2, r3, r2
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	0011      	movs	r1, r2
 8018056:	0018      	movs	r0, r3
 8018058:	f000 fac5 	bl	80185e6 <USBD_StdEPReq>
      break;
 801805c:	e00c      	b.n	8018078 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801805e:	687a      	ldr	r2, [r7, #4]
 8018060:	23aa      	movs	r3, #170	@ 0xaa
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	5cd3      	ldrb	r3, [r2, r3]
 8018066:	227f      	movs	r2, #127	@ 0x7f
 8018068:	4393      	bics	r3, r2
 801806a:	b2da      	uxtb	r2, r3
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	0011      	movs	r1, r2
 8018070:	0018      	movs	r0, r3
 8018072:	f001 fd2a 	bl	8019aca <USBD_LL_StallEP>
      break;
 8018076:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8018078:	2300      	movs	r3, #0
}
 801807a:	0018      	movs	r0, r3
 801807c:	46bd      	mov	sp, r7
 801807e:	b002      	add	sp, #8
 8018080:	bd80      	pop	{r7, pc}
 8018082:	46c0      	nop			@ (mov r8, r8)
 8018084:	000002ae 	.word	0x000002ae

08018088 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b086      	sub	sp, #24
 801808c:	af00      	add	r7, sp, #0
 801808e:	60f8      	str	r0, [r7, #12]
 8018090:	607a      	str	r2, [r7, #4]
 8018092:	200b      	movs	r0, #11
 8018094:	183b      	adds	r3, r7, r0
 8018096:	1c0a      	adds	r2, r1, #0
 8018098:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801809a:	183b      	adds	r3, r7, r0
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d154      	bne.n	801814c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	3355      	adds	r3, #85	@ 0x55
 80180a6:	33ff      	adds	r3, #255	@ 0xff
 80180a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80180aa:	68fa      	ldr	r2, [r7, #12]
 80180ac:	23a5      	movs	r3, #165	@ 0xa5
 80180ae:	009b      	lsls	r3, r3, #2
 80180b0:	58d3      	ldr	r3, [r2, r3]
 80180b2:	2b03      	cmp	r3, #3
 80180b4:	d139      	bne.n	801812a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	68da      	ldr	r2, [r3, #12]
 80180ba:	697b      	ldr	r3, [r7, #20]
 80180bc:	691b      	ldr	r3, [r3, #16]
 80180be:	429a      	cmp	r2, r3
 80180c0:	d919      	bls.n	80180f6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	68da      	ldr	r2, [r3, #12]
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	691b      	ldr	r3, [r3, #16]
 80180ca:	1ad2      	subs	r2, r2, r3
 80180cc:	697b      	ldr	r3, [r7, #20]
 80180ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	68da      	ldr	r2, [r3, #12]
 80180d4:	697b      	ldr	r3, [r7, #20]
 80180d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80180d8:	429a      	cmp	r2, r3
 80180da:	d203      	bcs.n	80180e4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80180e0:	b29b      	uxth	r3, r3
 80180e2:	e002      	b.n	80180ea <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	6879      	ldr	r1, [r7, #4]
 80180ec:	68f8      	ldr	r0, [r7, #12]
 80180ee:	001a      	movs	r2, r3
 80180f0:	f001 f898 	bl	8019224 <USBD_CtlContinueRx>
 80180f4:	e045      	b.n	8018182 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80180f6:	68fa      	ldr	r2, [r7, #12]
 80180f8:	23ad      	movs	r3, #173	@ 0xad
 80180fa:	009b      	lsls	r3, r3, #2
 80180fc:	58d3      	ldr	r3, [r2, r3]
 80180fe:	691b      	ldr	r3, [r3, #16]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d00d      	beq.n	8018120 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8018104:	68fa      	ldr	r2, [r7, #12]
 8018106:	23a7      	movs	r3, #167	@ 0xa7
 8018108:	009b      	lsls	r3, r3, #2
 801810a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801810c:	2b03      	cmp	r3, #3
 801810e:	d107      	bne.n	8018120 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8018110:	68fa      	ldr	r2, [r7, #12]
 8018112:	23ad      	movs	r3, #173	@ 0xad
 8018114:	009b      	lsls	r3, r3, #2
 8018116:	58d3      	ldr	r3, [r2, r3]
 8018118:	691b      	ldr	r3, [r3, #16]
 801811a:	68fa      	ldr	r2, [r7, #12]
 801811c:	0010      	movs	r0, r2
 801811e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	0018      	movs	r0, r3
 8018124:	f001 f891 	bl	801924a <USBD_CtlSendStatus>
 8018128:	e02b      	b.n	8018182 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801812a:	68fa      	ldr	r2, [r7, #12]
 801812c:	23a5      	movs	r3, #165	@ 0xa5
 801812e:	009b      	lsls	r3, r3, #2
 8018130:	58d3      	ldr	r3, [r2, r3]
 8018132:	2b05      	cmp	r3, #5
 8018134:	d125      	bne.n	8018182 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8018136:	68fa      	ldr	r2, [r7, #12]
 8018138:	23a5      	movs	r3, #165	@ 0xa5
 801813a:	009b      	lsls	r3, r3, #2
 801813c:	2100      	movs	r1, #0
 801813e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	2100      	movs	r1, #0
 8018144:	0018      	movs	r0, r3
 8018146:	f001 fcc0 	bl	8019aca <USBD_LL_StallEP>
 801814a:	e01a      	b.n	8018182 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801814c:	68fa      	ldr	r2, [r7, #12]
 801814e:	23ad      	movs	r3, #173	@ 0xad
 8018150:	009b      	lsls	r3, r3, #2
 8018152:	58d3      	ldr	r3, [r2, r3]
 8018154:	699b      	ldr	r3, [r3, #24]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d011      	beq.n	801817e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801815a:	68fa      	ldr	r2, [r7, #12]
 801815c:	23a7      	movs	r3, #167	@ 0xa7
 801815e:	009b      	lsls	r3, r3, #2
 8018160:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8018162:	2b03      	cmp	r3, #3
 8018164:	d10b      	bne.n	801817e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8018166:	68fa      	ldr	r2, [r7, #12]
 8018168:	23ad      	movs	r3, #173	@ 0xad
 801816a:	009b      	lsls	r3, r3, #2
 801816c:	58d3      	ldr	r3, [r2, r3]
 801816e:	699b      	ldr	r3, [r3, #24]
 8018170:	220b      	movs	r2, #11
 8018172:	18ba      	adds	r2, r7, r2
 8018174:	7811      	ldrb	r1, [r2, #0]
 8018176:	68fa      	ldr	r2, [r7, #12]
 8018178:	0010      	movs	r0, r2
 801817a:	4798      	blx	r3
 801817c:	e001      	b.n	8018182 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801817e:	2302      	movs	r3, #2
 8018180:	e000      	b.n	8018184 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8018182:	2300      	movs	r3, #0
}
 8018184:	0018      	movs	r0, r3
 8018186:	46bd      	mov	sp, r7
 8018188:	b006      	add	sp, #24
 801818a:	bd80      	pop	{r7, pc}

0801818c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b086      	sub	sp, #24
 8018190:	af00      	add	r7, sp, #0
 8018192:	60f8      	str	r0, [r7, #12]
 8018194:	607a      	str	r2, [r7, #4]
 8018196:	200b      	movs	r0, #11
 8018198:	183b      	adds	r3, r7, r0
 801819a:	1c0a      	adds	r2, r1, #0
 801819c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801819e:	183b      	adds	r3, r7, r0
 80181a0:	781b      	ldrb	r3, [r3, #0]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d000      	beq.n	80181a8 <USBD_LL_DataInStage+0x1c>
 80181a6:	e08e      	b.n	80182c6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	3314      	adds	r3, #20
 80181ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80181ae:	68fa      	ldr	r2, [r7, #12]
 80181b0:	23a5      	movs	r3, #165	@ 0xa5
 80181b2:	009b      	lsls	r3, r3, #2
 80181b4:	58d3      	ldr	r3, [r2, r3]
 80181b6:	2b02      	cmp	r3, #2
 80181b8:	d164      	bne.n	8018284 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80181ba:	697b      	ldr	r3, [r7, #20]
 80181bc:	68da      	ldr	r2, [r3, #12]
 80181be:	697b      	ldr	r3, [r7, #20]
 80181c0:	691b      	ldr	r3, [r3, #16]
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d915      	bls.n	80181f2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80181c6:	697b      	ldr	r3, [r7, #20]
 80181c8:	68da      	ldr	r2, [r3, #12]
 80181ca:	697b      	ldr	r3, [r7, #20]
 80181cc:	691b      	ldr	r3, [r3, #16]
 80181ce:	1ad2      	subs	r2, r2, r3
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	68db      	ldr	r3, [r3, #12]
 80181d8:	b29a      	uxth	r2, r3
 80181da:	6879      	ldr	r1, [r7, #4]
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	0018      	movs	r0, r3
 80181e0:	f000 ffe9 	bl	80191b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80181e4:	68f8      	ldr	r0, [r7, #12]
 80181e6:	2300      	movs	r3, #0
 80181e8:	2200      	movs	r2, #0
 80181ea:	2100      	movs	r1, #0
 80181ec:	f001 fd56 	bl	8019c9c <USBD_LL_PrepareReceive>
 80181f0:	e059      	b.n	80182a6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80181f2:	697b      	ldr	r3, [r7, #20]
 80181f4:	689a      	ldr	r2, [r3, #8]
 80181f6:	697b      	ldr	r3, [r7, #20]
 80181f8:	691b      	ldr	r3, [r3, #16]
 80181fa:	0019      	movs	r1, r3
 80181fc:	0010      	movs	r0, r2
 80181fe:	f7e8 f857 	bl	80002b0 <__aeabi_uidivmod>
 8018202:	1e0b      	subs	r3, r1, #0
 8018204:	d11f      	bne.n	8018246 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8018206:	697b      	ldr	r3, [r7, #20]
 8018208:	689a      	ldr	r2, [r3, #8]
 801820a:	697b      	ldr	r3, [r7, #20]
 801820c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801820e:	429a      	cmp	r2, r3
 8018210:	d319      	bcc.n	8018246 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	689a      	ldr	r2, [r3, #8]
 8018216:	68f9      	ldr	r1, [r7, #12]
 8018218:	23a6      	movs	r3, #166	@ 0xa6
 801821a:	009b      	lsls	r3, r3, #2
 801821c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801821e:	429a      	cmp	r2, r3
 8018220:	d211      	bcs.n	8018246 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	2200      	movs	r2, #0
 8018226:	2100      	movs	r1, #0
 8018228:	0018      	movs	r0, r3
 801822a:	f000 ffc4 	bl	80191b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801822e:	68fa      	ldr	r2, [r7, #12]
 8018230:	23a6      	movs	r3, #166	@ 0xa6
 8018232:	009b      	lsls	r3, r3, #2
 8018234:	2100      	movs	r1, #0
 8018236:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018238:	68f8      	ldr	r0, [r7, #12]
 801823a:	2300      	movs	r3, #0
 801823c:	2200      	movs	r2, #0
 801823e:	2100      	movs	r1, #0
 8018240:	f001 fd2c 	bl	8019c9c <USBD_LL_PrepareReceive>
 8018244:	e02f      	b.n	80182a6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8018246:	68fa      	ldr	r2, [r7, #12]
 8018248:	23ad      	movs	r3, #173	@ 0xad
 801824a:	009b      	lsls	r3, r3, #2
 801824c:	58d3      	ldr	r3, [r2, r3]
 801824e:	68db      	ldr	r3, [r3, #12]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d00d      	beq.n	8018270 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8018254:	68fa      	ldr	r2, [r7, #12]
 8018256:	23a7      	movs	r3, #167	@ 0xa7
 8018258:	009b      	lsls	r3, r3, #2
 801825a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801825c:	2b03      	cmp	r3, #3
 801825e:	d107      	bne.n	8018270 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8018260:	68fa      	ldr	r2, [r7, #12]
 8018262:	23ad      	movs	r3, #173	@ 0xad
 8018264:	009b      	lsls	r3, r3, #2
 8018266:	58d3      	ldr	r3, [r2, r3]
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	68fa      	ldr	r2, [r7, #12]
 801826c:	0010      	movs	r0, r2
 801826e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	2180      	movs	r1, #128	@ 0x80
 8018274:	0018      	movs	r0, r3
 8018276:	f001 fc28 	bl	8019aca <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	0018      	movs	r0, r3
 801827e:	f000 fff8 	bl	8019272 <USBD_CtlReceiveStatus>
 8018282:	e010      	b.n	80182a6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8018284:	68fa      	ldr	r2, [r7, #12]
 8018286:	23a5      	movs	r3, #165	@ 0xa5
 8018288:	009b      	lsls	r3, r3, #2
 801828a:	58d3      	ldr	r3, [r2, r3]
 801828c:	2b04      	cmp	r3, #4
 801828e:	d005      	beq.n	801829c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8018290:	68fa      	ldr	r2, [r7, #12]
 8018292:	23a5      	movs	r3, #165	@ 0xa5
 8018294:	009b      	lsls	r3, r3, #2
 8018296:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8018298:	2b00      	cmp	r3, #0
 801829a:	d104      	bne.n	80182a6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	2180      	movs	r1, #128	@ 0x80
 80182a0:	0018      	movs	r0, r3
 80182a2:	f001 fc12 	bl	8019aca <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80182a6:	68fa      	ldr	r2, [r7, #12]
 80182a8:	23a8      	movs	r3, #168	@ 0xa8
 80182aa:	009b      	lsls	r3, r3, #2
 80182ac:	5cd3      	ldrb	r3, [r2, r3]
 80182ae:	2b01      	cmp	r3, #1
 80182b0:	d124      	bne.n	80182fc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	0018      	movs	r0, r3
 80182b6:	f7ff fe43 	bl	8017f40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80182ba:	68fa      	ldr	r2, [r7, #12]
 80182bc:	23a8      	movs	r3, #168	@ 0xa8
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	2100      	movs	r1, #0
 80182c2:	54d1      	strb	r1, [r2, r3]
 80182c4:	e01a      	b.n	80182fc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80182c6:	68fa      	ldr	r2, [r7, #12]
 80182c8:	23ad      	movs	r3, #173	@ 0xad
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	58d3      	ldr	r3, [r2, r3]
 80182ce:	695b      	ldr	r3, [r3, #20]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d011      	beq.n	80182f8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80182d4:	68fa      	ldr	r2, [r7, #12]
 80182d6:	23a7      	movs	r3, #167	@ 0xa7
 80182d8:	009b      	lsls	r3, r3, #2
 80182da:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80182dc:	2b03      	cmp	r3, #3
 80182de:	d10b      	bne.n	80182f8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80182e0:	68fa      	ldr	r2, [r7, #12]
 80182e2:	23ad      	movs	r3, #173	@ 0xad
 80182e4:	009b      	lsls	r3, r3, #2
 80182e6:	58d3      	ldr	r3, [r2, r3]
 80182e8:	695b      	ldr	r3, [r3, #20]
 80182ea:	220b      	movs	r2, #11
 80182ec:	18ba      	adds	r2, r7, r2
 80182ee:	7811      	ldrb	r1, [r2, #0]
 80182f0:	68fa      	ldr	r2, [r7, #12]
 80182f2:	0010      	movs	r0, r2
 80182f4:	4798      	blx	r3
 80182f6:	e001      	b.n	80182fc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80182f8:	2302      	movs	r3, #2
 80182fa:	e000      	b.n	80182fe <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80182fc:	2300      	movs	r3, #0
}
 80182fe:	0018      	movs	r0, r3
 8018300:	46bd      	mov	sp, r7
 8018302:	b006      	add	sp, #24
 8018304:	bd80      	pop	{r7, pc}

08018306 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018306:	b580      	push	{r7, lr}
 8018308:	b082      	sub	sp, #8
 801830a:	af00      	add	r7, sp, #0
 801830c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	2340      	movs	r3, #64	@ 0x40
 8018312:	2200      	movs	r2, #0
 8018314:	2100      	movs	r1, #0
 8018316:	f001 fb76 	bl	8019a06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801831a:	687a      	ldr	r2, [r7, #4]
 801831c:	23ac      	movs	r3, #172	@ 0xac
 801831e:	005b      	lsls	r3, r3, #1
 8018320:	2101      	movs	r1, #1
 8018322:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018324:	687a      	ldr	r2, [r7, #4]
 8018326:	23b2      	movs	r3, #178	@ 0xb2
 8018328:	005b      	lsls	r3, r3, #1
 801832a:	2140      	movs	r1, #64	@ 0x40
 801832c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801832e:	6878      	ldr	r0, [r7, #4]
 8018330:	2340      	movs	r3, #64	@ 0x40
 8018332:	2200      	movs	r2, #0
 8018334:	2180      	movs	r1, #128	@ 0x80
 8018336:	f001 fb66 	bl	8019a06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	2201      	movs	r2, #1
 801833e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	2240      	movs	r2, #64	@ 0x40
 8018344:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018346:	687a      	ldr	r2, [r7, #4]
 8018348:	23a7      	movs	r3, #167	@ 0xa7
 801834a:	009b      	lsls	r3, r3, #2
 801834c:	2101      	movs	r1, #1
 801834e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	23a5      	movs	r3, #165	@ 0xa5
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	2100      	movs	r1, #0
 8018358:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2200      	movs	r2, #0
 801835e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018360:	687a      	ldr	r2, [r7, #4]
 8018362:	23a9      	movs	r3, #169	@ 0xa9
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	2100      	movs	r1, #0
 8018368:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	23ae      	movs	r3, #174	@ 0xae
 801836e:	009b      	lsls	r3, r3, #2
 8018370:	58d3      	ldr	r3, [r2, r3]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d00a      	beq.n	801838c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018376:	687a      	ldr	r2, [r7, #4]
 8018378:	23ad      	movs	r3, #173	@ 0xad
 801837a:	009b      	lsls	r3, r3, #2
 801837c:	58d3      	ldr	r3, [r2, r3]
 801837e:	685a      	ldr	r2, [r3, #4]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	685b      	ldr	r3, [r3, #4]
 8018384:	b2d9      	uxtb	r1, r3
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	0018      	movs	r0, r3
 801838a:	4790      	blx	r2
  }

  return USBD_OK;
 801838c:	2300      	movs	r3, #0
}
 801838e:	0018      	movs	r0, r3
 8018390:	46bd      	mov	sp, r7
 8018392:	b002      	add	sp, #8
 8018394:	bd80      	pop	{r7, pc}

08018396 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018396:	b580      	push	{r7, lr}
 8018398:	b082      	sub	sp, #8
 801839a:	af00      	add	r7, sp, #0
 801839c:	6078      	str	r0, [r7, #4]
 801839e:	000a      	movs	r2, r1
 80183a0:	1cfb      	adds	r3, r7, #3
 80183a2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	1cfa      	adds	r2, r7, #3
 80183a8:	7812      	ldrb	r2, [r2, #0]
 80183aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80183ac:	2300      	movs	r3, #0
}
 80183ae:	0018      	movs	r0, r3
 80183b0:	46bd      	mov	sp, r7
 80183b2:	b002      	add	sp, #8
 80183b4:	bd80      	pop	{r7, pc}
	...

080183b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80183c0:	687a      	ldr	r2, [r7, #4]
 80183c2:	23a7      	movs	r3, #167	@ 0xa7
 80183c4:	009b      	lsls	r3, r3, #2
 80183c6:	5cd1      	ldrb	r1, [r2, r3]
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	4a06      	ldr	r2, [pc, #24]	@ (80183e4 <USBD_LL_Suspend+0x2c>)
 80183cc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80183ce:	687a      	ldr	r2, [r7, #4]
 80183d0:	23a7      	movs	r3, #167	@ 0xa7
 80183d2:	009b      	lsls	r3, r3, #2
 80183d4:	2104      	movs	r1, #4
 80183d6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80183d8:	2300      	movs	r3, #0
}
 80183da:	0018      	movs	r0, r3
 80183dc:	46bd      	mov	sp, r7
 80183de:	b002      	add	sp, #8
 80183e0:	bd80      	pop	{r7, pc}
 80183e2:	46c0      	nop			@ (mov r8, r8)
 80183e4:	0000029d 	.word	0x0000029d

080183e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b082      	sub	sp, #8
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80183f0:	687a      	ldr	r2, [r7, #4]
 80183f2:	23a7      	movs	r3, #167	@ 0xa7
 80183f4:	009b      	lsls	r3, r3, #2
 80183f6:	5cd3      	ldrb	r3, [r2, r3]
 80183f8:	2b04      	cmp	r3, #4
 80183fa:	d106      	bne.n	801840a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	4a05      	ldr	r2, [pc, #20]	@ (8018414 <USBD_LL_Resume+0x2c>)
 8018400:	5c99      	ldrb	r1, [r3, r2]
 8018402:	687a      	ldr	r2, [r7, #4]
 8018404:	23a7      	movs	r3, #167	@ 0xa7
 8018406:	009b      	lsls	r3, r3, #2
 8018408:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801840a:	2300      	movs	r3, #0
}
 801840c:	0018      	movs	r0, r3
 801840e:	46bd      	mov	sp, r7
 8018410:	b002      	add	sp, #8
 8018412:	bd80      	pop	{r7, pc}
 8018414:	0000029d 	.word	0x0000029d

08018418 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018420:	687a      	ldr	r2, [r7, #4]
 8018422:	23a7      	movs	r3, #167	@ 0xa7
 8018424:	009b      	lsls	r3, r3, #2
 8018426:	5cd3      	ldrb	r3, [r2, r3]
 8018428:	2b03      	cmp	r3, #3
 801842a:	d10e      	bne.n	801844a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801842c:	687a      	ldr	r2, [r7, #4]
 801842e:	23ad      	movs	r3, #173	@ 0xad
 8018430:	009b      	lsls	r3, r3, #2
 8018432:	58d3      	ldr	r3, [r2, r3]
 8018434:	69db      	ldr	r3, [r3, #28]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d007      	beq.n	801844a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	23ad      	movs	r3, #173	@ 0xad
 801843e:	009b      	lsls	r3, r3, #2
 8018440:	58d3      	ldr	r3, [r2, r3]
 8018442:	69db      	ldr	r3, [r3, #28]
 8018444:	687a      	ldr	r2, [r7, #4]
 8018446:	0010      	movs	r0, r2
 8018448:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801844a:	2300      	movs	r3, #0
}
 801844c:	0018      	movs	r0, r3
 801844e:	46bd      	mov	sp, r7
 8018450:	b002      	add	sp, #8
 8018452:	bd80      	pop	{r7, pc}

08018454 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b084      	sub	sp, #16
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
 801845c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801845e:	230f      	movs	r3, #15
 8018460:	18fb      	adds	r3, r7, r3
 8018462:	2200      	movs	r2, #0
 8018464:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018466:	683b      	ldr	r3, [r7, #0]
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	001a      	movs	r2, r3
 801846c:	2360      	movs	r3, #96	@ 0x60
 801846e:	4013      	ands	r3, r2
 8018470:	2b40      	cmp	r3, #64	@ 0x40
 8018472:	d004      	beq.n	801847e <USBD_StdDevReq+0x2a>
 8018474:	d84f      	bhi.n	8018516 <USBD_StdDevReq+0xc2>
 8018476:	2b00      	cmp	r3, #0
 8018478:	d00b      	beq.n	8018492 <USBD_StdDevReq+0x3e>
 801847a:	2b20      	cmp	r3, #32
 801847c:	d14b      	bne.n	8018516 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	23ad      	movs	r3, #173	@ 0xad
 8018482:	009b      	lsls	r3, r3, #2
 8018484:	58d3      	ldr	r3, [r2, r3]
 8018486:	689b      	ldr	r3, [r3, #8]
 8018488:	6839      	ldr	r1, [r7, #0]
 801848a:	687a      	ldr	r2, [r7, #4]
 801848c:	0010      	movs	r0, r2
 801848e:	4798      	blx	r3
      break;
 8018490:	e048      	b.n	8018524 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	785b      	ldrb	r3, [r3, #1]
 8018496:	2b09      	cmp	r3, #9
 8018498:	d835      	bhi.n	8018506 <USBD_StdDevReq+0xb2>
 801849a:	009a      	lsls	r2, r3, #2
 801849c:	4b25      	ldr	r3, [pc, #148]	@ (8018534 <USBD_StdDevReq+0xe0>)
 801849e:	18d3      	adds	r3, r2, r3
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80184a4:	683a      	ldr	r2, [r7, #0]
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	0011      	movs	r1, r2
 80184aa:	0018      	movs	r0, r3
 80184ac:	f000 fa52 	bl	8018954 <USBD_GetDescriptor>
          break;
 80184b0:	e030      	b.n	8018514 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80184b2:	683a      	ldr	r2, [r7, #0]
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	0011      	movs	r1, r2
 80184b8:	0018      	movs	r0, r3
 80184ba:	f000 fbfd 	bl	8018cb8 <USBD_SetAddress>
          break;
 80184be:	e029      	b.n	8018514 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80184c0:	683a      	ldr	r2, [r7, #0]
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	0011      	movs	r1, r2
 80184c6:	0018      	movs	r0, r3
 80184c8:	f000 fc4a 	bl	8018d60 <USBD_SetConfig>
          break;
 80184cc:	e022      	b.n	8018514 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80184ce:	683a      	ldr	r2, [r7, #0]
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	0011      	movs	r1, r2
 80184d4:	0018      	movs	r0, r3
 80184d6:	f000 fce7 	bl	8018ea8 <USBD_GetConfig>
          break;
 80184da:	e01b      	b.n	8018514 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80184dc:	683a      	ldr	r2, [r7, #0]
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	0011      	movs	r1, r2
 80184e2:	0018      	movs	r0, r3
 80184e4:	f000 fd1b 	bl	8018f1e <USBD_GetStatus>
          break;
 80184e8:	e014      	b.n	8018514 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80184ea:	683a      	ldr	r2, [r7, #0]
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	0011      	movs	r1, r2
 80184f0:	0018      	movs	r0, r3
 80184f2:	f000 fd4e 	bl	8018f92 <USBD_SetFeature>
          break;
 80184f6:	e00d      	b.n	8018514 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80184f8:	683a      	ldr	r2, [r7, #0]
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	0011      	movs	r1, r2
 80184fe:	0018      	movs	r0, r3
 8018500:	f000 fd5d 	bl	8018fbe <USBD_ClrFeature>
          break;
 8018504:	e006      	b.n	8018514 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8018506:	683a      	ldr	r2, [r7, #0]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	0011      	movs	r1, r2
 801850c:	0018      	movs	r0, r3
 801850e:	f000 fdb4 	bl	801907a <USBD_CtlError>
          break;
 8018512:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8018514:	e006      	b.n	8018524 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8018516:	683a      	ldr	r2, [r7, #0]
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	0011      	movs	r1, r2
 801851c:	0018      	movs	r0, r3
 801851e:	f000 fdac 	bl	801907a <USBD_CtlError>
      break;
 8018522:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8018524:	230f      	movs	r3, #15
 8018526:	18fb      	adds	r3, r7, r3
 8018528:	781b      	ldrb	r3, [r3, #0]
}
 801852a:	0018      	movs	r0, r3
 801852c:	46bd      	mov	sp, r7
 801852e:	b004      	add	sp, #16
 8018530:	bd80      	pop	{r7, pc}
 8018532:	46c0      	nop			@ (mov r8, r8)
 8018534:	08020c5c 	.word	0x08020c5c

08018538 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8018538:	b5b0      	push	{r4, r5, r7, lr}
 801853a:	b084      	sub	sp, #16
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018542:	230f      	movs	r3, #15
 8018544:	18fb      	adds	r3, r7, r3
 8018546:	2200      	movs	r2, #0
 8018548:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	781b      	ldrb	r3, [r3, #0]
 801854e:	001a      	movs	r2, r3
 8018550:	2360      	movs	r3, #96	@ 0x60
 8018552:	4013      	ands	r3, r2
 8018554:	2b40      	cmp	r3, #64	@ 0x40
 8018556:	d004      	beq.n	8018562 <USBD_StdItfReq+0x2a>
 8018558:	d839      	bhi.n	80185ce <USBD_StdItfReq+0x96>
 801855a:	2b00      	cmp	r3, #0
 801855c:	d001      	beq.n	8018562 <USBD_StdItfReq+0x2a>
 801855e:	2b20      	cmp	r3, #32
 8018560:	d135      	bne.n	80185ce <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018562:	687a      	ldr	r2, [r7, #4]
 8018564:	23a7      	movs	r3, #167	@ 0xa7
 8018566:	009b      	lsls	r3, r3, #2
 8018568:	5cd3      	ldrb	r3, [r2, r3]
 801856a:	3b01      	subs	r3, #1
 801856c:	2b02      	cmp	r3, #2
 801856e:	d825      	bhi.n	80185bc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	889b      	ldrh	r3, [r3, #4]
 8018574:	b2db      	uxtb	r3, r3
 8018576:	2b01      	cmp	r3, #1
 8018578:	d819      	bhi.n	80185ae <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801857a:	687a      	ldr	r2, [r7, #4]
 801857c:	23ad      	movs	r3, #173	@ 0xad
 801857e:	009b      	lsls	r3, r3, #2
 8018580:	58d3      	ldr	r3, [r2, r3]
 8018582:	689b      	ldr	r3, [r3, #8]
 8018584:	250f      	movs	r5, #15
 8018586:	197c      	adds	r4, r7, r5
 8018588:	6839      	ldr	r1, [r7, #0]
 801858a:	687a      	ldr	r2, [r7, #4]
 801858c:	0010      	movs	r0, r2
 801858e:	4798      	blx	r3
 8018590:	0003      	movs	r3, r0
 8018592:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	88db      	ldrh	r3, [r3, #6]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d116      	bne.n	80185ca <USBD_StdItfReq+0x92>
 801859c:	197b      	adds	r3, r7, r5
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d112      	bne.n	80185ca <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	0018      	movs	r0, r3
 80185a8:	f000 fe4f 	bl	801924a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80185ac:	e00d      	b.n	80185ca <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80185ae:	683a      	ldr	r2, [r7, #0]
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	0011      	movs	r1, r2
 80185b4:	0018      	movs	r0, r3
 80185b6:	f000 fd60 	bl	801907a <USBD_CtlError>
          break;
 80185ba:	e006      	b.n	80185ca <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80185bc:	683a      	ldr	r2, [r7, #0]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	0011      	movs	r1, r2
 80185c2:	0018      	movs	r0, r3
 80185c4:	f000 fd59 	bl	801907a <USBD_CtlError>
          break;
 80185c8:	e000      	b.n	80185cc <USBD_StdItfReq+0x94>
          break;
 80185ca:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80185cc:	e006      	b.n	80185dc <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80185ce:	683a      	ldr	r2, [r7, #0]
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	0011      	movs	r1, r2
 80185d4:	0018      	movs	r0, r3
 80185d6:	f000 fd50 	bl	801907a <USBD_CtlError>
      break;
 80185da:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80185dc:	2300      	movs	r3, #0
}
 80185de:	0018      	movs	r0, r3
 80185e0:	46bd      	mov	sp, r7
 80185e2:	b004      	add	sp, #16
 80185e4:	bdb0      	pop	{r4, r5, r7, pc}

080185e6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80185e6:	b5b0      	push	{r4, r5, r7, lr}
 80185e8:	b084      	sub	sp, #16
 80185ea:	af00      	add	r7, sp, #0
 80185ec:	6078      	str	r0, [r7, #4]
 80185ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80185f0:	230f      	movs	r3, #15
 80185f2:	18fb      	adds	r3, r7, r3
 80185f4:	2200      	movs	r2, #0
 80185f6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	889a      	ldrh	r2, [r3, #4]
 80185fc:	230e      	movs	r3, #14
 80185fe:	18fb      	adds	r3, r7, r3
 8018600:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018602:	683b      	ldr	r3, [r7, #0]
 8018604:	781b      	ldrb	r3, [r3, #0]
 8018606:	001a      	movs	r2, r3
 8018608:	2360      	movs	r3, #96	@ 0x60
 801860a:	4013      	ands	r3, r2
 801860c:	2b40      	cmp	r3, #64	@ 0x40
 801860e:	d006      	beq.n	801861e <USBD_StdEPReq+0x38>
 8018610:	d900      	bls.n	8018614 <USBD_StdEPReq+0x2e>
 8018612:	e190      	b.n	8018936 <USBD_StdEPReq+0x350>
 8018614:	2b00      	cmp	r3, #0
 8018616:	d00c      	beq.n	8018632 <USBD_StdEPReq+0x4c>
 8018618:	2b20      	cmp	r3, #32
 801861a:	d000      	beq.n	801861e <USBD_StdEPReq+0x38>
 801861c:	e18b      	b.n	8018936 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801861e:	687a      	ldr	r2, [r7, #4]
 8018620:	23ad      	movs	r3, #173	@ 0xad
 8018622:	009b      	lsls	r3, r3, #2
 8018624:	58d3      	ldr	r3, [r2, r3]
 8018626:	689b      	ldr	r3, [r3, #8]
 8018628:	6839      	ldr	r1, [r7, #0]
 801862a:	687a      	ldr	r2, [r7, #4]
 801862c:	0010      	movs	r0, r2
 801862e:	4798      	blx	r3
      break;
 8018630:	e188      	b.n	8018944 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	781b      	ldrb	r3, [r3, #0]
 8018636:	001a      	movs	r2, r3
 8018638:	2360      	movs	r3, #96	@ 0x60
 801863a:	4013      	ands	r3, r2
 801863c:	2b20      	cmp	r3, #32
 801863e:	d10f      	bne.n	8018660 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018640:	687a      	ldr	r2, [r7, #4]
 8018642:	23ad      	movs	r3, #173	@ 0xad
 8018644:	009b      	lsls	r3, r3, #2
 8018646:	58d3      	ldr	r3, [r2, r3]
 8018648:	689b      	ldr	r3, [r3, #8]
 801864a:	250f      	movs	r5, #15
 801864c:	197c      	adds	r4, r7, r5
 801864e:	6839      	ldr	r1, [r7, #0]
 8018650:	687a      	ldr	r2, [r7, #4]
 8018652:	0010      	movs	r0, r2
 8018654:	4798      	blx	r3
 8018656:	0003      	movs	r3, r0
 8018658:	7023      	strb	r3, [r4, #0]

        return ret;
 801865a:	197b      	adds	r3, r7, r5
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	e174      	b.n	801894a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	785b      	ldrb	r3, [r3, #1]
 8018664:	2b03      	cmp	r3, #3
 8018666:	d007      	beq.n	8018678 <USBD_StdEPReq+0x92>
 8018668:	dd00      	ble.n	801866c <USBD_StdEPReq+0x86>
 801866a:	e15c      	b.n	8018926 <USBD_StdEPReq+0x340>
 801866c:	2b00      	cmp	r3, #0
 801866e:	d100      	bne.n	8018672 <USBD_StdEPReq+0x8c>
 8018670:	e092      	b.n	8018798 <USBD_StdEPReq+0x1b2>
 8018672:	2b01      	cmp	r3, #1
 8018674:	d04b      	beq.n	801870e <USBD_StdEPReq+0x128>
 8018676:	e156      	b.n	8018926 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018678:	687a      	ldr	r2, [r7, #4]
 801867a:	23a7      	movs	r3, #167	@ 0xa7
 801867c:	009b      	lsls	r3, r3, #2
 801867e:	5cd3      	ldrb	r3, [r2, r3]
 8018680:	2b02      	cmp	r3, #2
 8018682:	d002      	beq.n	801868a <USBD_StdEPReq+0xa4>
 8018684:	2b03      	cmp	r3, #3
 8018686:	d01d      	beq.n	80186c4 <USBD_StdEPReq+0xde>
 8018688:	e039      	b.n	80186fe <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801868a:	220e      	movs	r2, #14
 801868c:	18bb      	adds	r3, r7, r2
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d010      	beq.n	80186b6 <USBD_StdEPReq+0xd0>
 8018694:	18bb      	adds	r3, r7, r2
 8018696:	781b      	ldrb	r3, [r3, #0]
 8018698:	2b80      	cmp	r3, #128	@ 0x80
 801869a:	d00c      	beq.n	80186b6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801869c:	18bb      	adds	r3, r7, r2
 801869e:	781a      	ldrb	r2, [r3, #0]
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	0011      	movs	r1, r2
 80186a4:	0018      	movs	r0, r3
 80186a6:	f001 fa10 	bl	8019aca <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	2180      	movs	r1, #128	@ 0x80
 80186ae:	0018      	movs	r0, r3
 80186b0:	f001 fa0b 	bl	8019aca <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80186b4:	e02a      	b.n	801870c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80186b6:	683a      	ldr	r2, [r7, #0]
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	0011      	movs	r1, r2
 80186bc:	0018      	movs	r0, r3
 80186be:	f000 fcdc 	bl	801907a <USBD_CtlError>
              break;
 80186c2:	e023      	b.n	801870c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	885b      	ldrh	r3, [r3, #2]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d113      	bne.n	80186f4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80186cc:	220e      	movs	r2, #14
 80186ce:	18bb      	adds	r3, r7, r2
 80186d0:	781b      	ldrb	r3, [r3, #0]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d00e      	beq.n	80186f4 <USBD_StdEPReq+0x10e>
 80186d6:	18bb      	adds	r3, r7, r2
 80186d8:	781b      	ldrb	r3, [r3, #0]
 80186da:	2b80      	cmp	r3, #128	@ 0x80
 80186dc:	d00a      	beq.n	80186f4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80186de:	683b      	ldr	r3, [r7, #0]
 80186e0:	88db      	ldrh	r3, [r3, #6]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d106      	bne.n	80186f4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80186e6:	18bb      	adds	r3, r7, r2
 80186e8:	781a      	ldrb	r2, [r3, #0]
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	0011      	movs	r1, r2
 80186ee:	0018      	movs	r0, r3
 80186f0:	f001 f9eb 	bl	8019aca <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	0018      	movs	r0, r3
 80186f8:	f000 fda7 	bl	801924a <USBD_CtlSendStatus>

              break;
 80186fc:	e006      	b.n	801870c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80186fe:	683a      	ldr	r2, [r7, #0]
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	0011      	movs	r1, r2
 8018704:	0018      	movs	r0, r3
 8018706:	f000 fcb8 	bl	801907a <USBD_CtlError>
              break;
 801870a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801870c:	e112      	b.n	8018934 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801870e:	687a      	ldr	r2, [r7, #4]
 8018710:	23a7      	movs	r3, #167	@ 0xa7
 8018712:	009b      	lsls	r3, r3, #2
 8018714:	5cd3      	ldrb	r3, [r2, r3]
 8018716:	2b02      	cmp	r3, #2
 8018718:	d002      	beq.n	8018720 <USBD_StdEPReq+0x13a>
 801871a:	2b03      	cmp	r3, #3
 801871c:	d01d      	beq.n	801875a <USBD_StdEPReq+0x174>
 801871e:	e032      	b.n	8018786 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018720:	220e      	movs	r2, #14
 8018722:	18bb      	adds	r3, r7, r2
 8018724:	781b      	ldrb	r3, [r3, #0]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d010      	beq.n	801874c <USBD_StdEPReq+0x166>
 801872a:	18bb      	adds	r3, r7, r2
 801872c:	781b      	ldrb	r3, [r3, #0]
 801872e:	2b80      	cmp	r3, #128	@ 0x80
 8018730:	d00c      	beq.n	801874c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8018732:	18bb      	adds	r3, r7, r2
 8018734:	781a      	ldrb	r2, [r3, #0]
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	0011      	movs	r1, r2
 801873a:	0018      	movs	r0, r3
 801873c:	f001 f9c5 	bl	8019aca <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2180      	movs	r1, #128	@ 0x80
 8018744:	0018      	movs	r0, r3
 8018746:	f001 f9c0 	bl	8019aca <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801874a:	e024      	b.n	8018796 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	0011      	movs	r1, r2
 8018752:	0018      	movs	r0, r3
 8018754:	f000 fc91 	bl	801907a <USBD_CtlError>
              break;
 8018758:	e01d      	b.n	8018796 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801875a:	683b      	ldr	r3, [r7, #0]
 801875c:	885b      	ldrh	r3, [r3, #2]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d118      	bne.n	8018794 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018762:	210e      	movs	r1, #14
 8018764:	187b      	adds	r3, r7, r1
 8018766:	781b      	ldrb	r3, [r3, #0]
 8018768:	227f      	movs	r2, #127	@ 0x7f
 801876a:	4013      	ands	r3, r2
 801876c:	d006      	beq.n	801877c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801876e:	187b      	adds	r3, r7, r1
 8018770:	781a      	ldrb	r2, [r3, #0]
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	0011      	movs	r1, r2
 8018776:	0018      	movs	r0, r3
 8018778:	f001 f9d2 	bl	8019b20 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	0018      	movs	r0, r3
 8018780:	f000 fd63 	bl	801924a <USBD_CtlSendStatus>
              }
              break;
 8018784:	e006      	b.n	8018794 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8018786:	683a      	ldr	r2, [r7, #0]
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	0011      	movs	r1, r2
 801878c:	0018      	movs	r0, r3
 801878e:	f000 fc74 	bl	801907a <USBD_CtlError>
              break;
 8018792:	e000      	b.n	8018796 <USBD_StdEPReq+0x1b0>
              break;
 8018794:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8018796:	e0cd      	b.n	8018934 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018798:	687a      	ldr	r2, [r7, #4]
 801879a:	23a7      	movs	r3, #167	@ 0xa7
 801879c:	009b      	lsls	r3, r3, #2
 801879e:	5cd3      	ldrb	r3, [r2, r3]
 80187a0:	2b02      	cmp	r3, #2
 80187a2:	d002      	beq.n	80187aa <USBD_StdEPReq+0x1c4>
 80187a4:	2b03      	cmp	r3, #3
 80187a6:	d03c      	beq.n	8018822 <USBD_StdEPReq+0x23c>
 80187a8:	e0b5      	b.n	8018916 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80187aa:	220e      	movs	r2, #14
 80187ac:	18bb      	adds	r3, r7, r2
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d00a      	beq.n	80187ca <USBD_StdEPReq+0x1e4>
 80187b4:	18bb      	adds	r3, r7, r2
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	2b80      	cmp	r3, #128	@ 0x80
 80187ba:	d006      	beq.n	80187ca <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80187bc:	683a      	ldr	r2, [r7, #0]
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	0011      	movs	r1, r2
 80187c2:	0018      	movs	r0, r3
 80187c4:	f000 fc59 	bl	801907a <USBD_CtlError>
                break;
 80187c8:	e0ac      	b.n	8018924 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187ca:	220e      	movs	r2, #14
 80187cc:	18bb      	adds	r3, r7, r2
 80187ce:	781b      	ldrb	r3, [r3, #0]
 80187d0:	b25b      	sxtb	r3, r3
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	da0c      	bge.n	80187f0 <USBD_StdEPReq+0x20a>
 80187d6:	18bb      	adds	r3, r7, r2
 80187d8:	781b      	ldrb	r3, [r3, #0]
 80187da:	227f      	movs	r2, #127	@ 0x7f
 80187dc:	401a      	ands	r2, r3
 80187de:	0013      	movs	r3, r2
 80187e0:	009b      	lsls	r3, r3, #2
 80187e2:	189b      	adds	r3, r3, r2
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	3310      	adds	r3, #16
 80187e8:	687a      	ldr	r2, [r7, #4]
 80187ea:	18d3      	adds	r3, r2, r3
 80187ec:	3304      	adds	r3, #4
 80187ee:	e00d      	b.n	801880c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80187f0:	230e      	movs	r3, #14
 80187f2:	18fb      	adds	r3, r7, r3
 80187f4:	781b      	ldrb	r3, [r3, #0]
 80187f6:	227f      	movs	r2, #127	@ 0x7f
 80187f8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187fa:	0013      	movs	r3, r2
 80187fc:	009b      	lsls	r3, r3, #2
 80187fe:	189b      	adds	r3, r3, r2
 8018800:	009b      	lsls	r3, r3, #2
 8018802:	3351      	adds	r3, #81	@ 0x51
 8018804:	33ff      	adds	r3, #255	@ 0xff
 8018806:	687a      	ldr	r2, [r7, #4]
 8018808:	18d3      	adds	r3, r2, r3
 801880a:	3304      	adds	r3, #4
 801880c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801880e:	68bb      	ldr	r3, [r7, #8]
 8018810:	2200      	movs	r2, #0
 8018812:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8018814:	68b9      	ldr	r1, [r7, #8]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	2202      	movs	r2, #2
 801881a:	0018      	movs	r0, r3
 801881c:	f000 fcab 	bl	8019176 <USBD_CtlSendData>
              break;
 8018820:	e080      	b.n	8018924 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018822:	220e      	movs	r2, #14
 8018824:	18bb      	adds	r3, r7, r2
 8018826:	781b      	ldrb	r3, [r3, #0]
 8018828:	b25b      	sxtb	r3, r3
 801882a:	2b00      	cmp	r3, #0
 801882c:	da14      	bge.n	8018858 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801882e:	18bb      	adds	r3, r7, r2
 8018830:	781b      	ldrb	r3, [r3, #0]
 8018832:	220f      	movs	r2, #15
 8018834:	401a      	ands	r2, r3
 8018836:	6879      	ldr	r1, [r7, #4]
 8018838:	0013      	movs	r3, r2
 801883a:	009b      	lsls	r3, r3, #2
 801883c:	189b      	adds	r3, r3, r2
 801883e:	009b      	lsls	r3, r3, #2
 8018840:	18cb      	adds	r3, r1, r3
 8018842:	3318      	adds	r3, #24
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d11e      	bne.n	8018888 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801884a:	683a      	ldr	r2, [r7, #0]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	0011      	movs	r1, r2
 8018850:	0018      	movs	r0, r3
 8018852:	f000 fc12 	bl	801907a <USBD_CtlError>
                  break;
 8018856:	e065      	b.n	8018924 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018858:	230e      	movs	r3, #14
 801885a:	18fb      	adds	r3, r7, r3
 801885c:	781b      	ldrb	r3, [r3, #0]
 801885e:	220f      	movs	r2, #15
 8018860:	401a      	ands	r2, r3
 8018862:	6878      	ldr	r0, [r7, #4]
 8018864:	23ac      	movs	r3, #172	@ 0xac
 8018866:	0059      	lsls	r1, r3, #1
 8018868:	0013      	movs	r3, r2
 801886a:	009b      	lsls	r3, r3, #2
 801886c:	189b      	adds	r3, r3, r2
 801886e:	009b      	lsls	r3, r3, #2
 8018870:	18c3      	adds	r3, r0, r3
 8018872:	185b      	adds	r3, r3, r1
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d106      	bne.n	8018888 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801887a:	683a      	ldr	r2, [r7, #0]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	0011      	movs	r1, r2
 8018880:	0018      	movs	r0, r3
 8018882:	f000 fbfa 	bl	801907a <USBD_CtlError>
                  break;
 8018886:	e04d      	b.n	8018924 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018888:	220e      	movs	r2, #14
 801888a:	18bb      	adds	r3, r7, r2
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	b25b      	sxtb	r3, r3
 8018890:	2b00      	cmp	r3, #0
 8018892:	da0c      	bge.n	80188ae <USBD_StdEPReq+0x2c8>
 8018894:	18bb      	adds	r3, r7, r2
 8018896:	781b      	ldrb	r3, [r3, #0]
 8018898:	227f      	movs	r2, #127	@ 0x7f
 801889a:	401a      	ands	r2, r3
 801889c:	0013      	movs	r3, r2
 801889e:	009b      	lsls	r3, r3, #2
 80188a0:	189b      	adds	r3, r3, r2
 80188a2:	009b      	lsls	r3, r3, #2
 80188a4:	3310      	adds	r3, #16
 80188a6:	687a      	ldr	r2, [r7, #4]
 80188a8:	18d3      	adds	r3, r2, r3
 80188aa:	3304      	adds	r3, #4
 80188ac:	e00d      	b.n	80188ca <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80188ae:	230e      	movs	r3, #14
 80188b0:	18fb      	adds	r3, r7, r3
 80188b2:	781b      	ldrb	r3, [r3, #0]
 80188b4:	227f      	movs	r2, #127	@ 0x7f
 80188b6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80188b8:	0013      	movs	r3, r2
 80188ba:	009b      	lsls	r3, r3, #2
 80188bc:	189b      	adds	r3, r3, r2
 80188be:	009b      	lsls	r3, r3, #2
 80188c0:	3351      	adds	r3, #81	@ 0x51
 80188c2:	33ff      	adds	r3, #255	@ 0xff
 80188c4:	687a      	ldr	r2, [r7, #4]
 80188c6:	18d3      	adds	r3, r2, r3
 80188c8:	3304      	adds	r3, #4
 80188ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80188cc:	220e      	movs	r2, #14
 80188ce:	18bb      	adds	r3, r7, r2
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d003      	beq.n	80188de <USBD_StdEPReq+0x2f8>
 80188d6:	18bb      	adds	r3, r7, r2
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	2b80      	cmp	r3, #128	@ 0x80
 80188dc:	d103      	bne.n	80188e6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	2200      	movs	r2, #0
 80188e2:	601a      	str	r2, [r3, #0]
 80188e4:	e010      	b.n	8018908 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80188e6:	230e      	movs	r3, #14
 80188e8:	18fb      	adds	r3, r7, r3
 80188ea:	781a      	ldrb	r2, [r3, #0]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	0011      	movs	r1, r2
 80188f0:	0018      	movs	r0, r3
 80188f2:	f001 f940 	bl	8019b76 <USBD_LL_IsStallEP>
 80188f6:	1e03      	subs	r3, r0, #0
 80188f8:	d003      	beq.n	8018902 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80188fa:	68bb      	ldr	r3, [r7, #8]
 80188fc:	2201      	movs	r2, #1
 80188fe:	601a      	str	r2, [r3, #0]
 8018900:	e002      	b.n	8018908 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8018902:	68bb      	ldr	r3, [r7, #8]
 8018904:	2200      	movs	r2, #0
 8018906:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8018908:	68b9      	ldr	r1, [r7, #8]
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2202      	movs	r2, #2
 801890e:	0018      	movs	r0, r3
 8018910:	f000 fc31 	bl	8019176 <USBD_CtlSendData>
              break;
 8018914:	e006      	b.n	8018924 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8018916:	683a      	ldr	r2, [r7, #0]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	0011      	movs	r1, r2
 801891c:	0018      	movs	r0, r3
 801891e:	f000 fbac 	bl	801907a <USBD_CtlError>
              break;
 8018922:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8018924:	e006      	b.n	8018934 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8018926:	683a      	ldr	r2, [r7, #0]
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	0011      	movs	r1, r2
 801892c:	0018      	movs	r0, r3
 801892e:	f000 fba4 	bl	801907a <USBD_CtlError>
          break;
 8018932:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8018934:	e006      	b.n	8018944 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8018936:	683a      	ldr	r2, [r7, #0]
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	0011      	movs	r1, r2
 801893c:	0018      	movs	r0, r3
 801893e:	f000 fb9c 	bl	801907a <USBD_CtlError>
      break;
 8018942:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8018944:	230f      	movs	r3, #15
 8018946:	18fb      	adds	r3, r7, r3
 8018948:	781b      	ldrb	r3, [r3, #0]
}
 801894a:	0018      	movs	r0, r3
 801894c:	46bd      	mov	sp, r7
 801894e:	b004      	add	sp, #16
 8018950:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018954 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b084      	sub	sp, #16
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
 801895c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801895e:	2308      	movs	r3, #8
 8018960:	18fb      	adds	r3, r7, r3
 8018962:	2200      	movs	r2, #0
 8018964:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8018966:	2300      	movs	r3, #0
 8018968:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801896a:	230b      	movs	r3, #11
 801896c:	18fb      	adds	r3, r7, r3
 801896e:	2200      	movs	r2, #0
 8018970:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	885b      	ldrh	r3, [r3, #2]
 8018976:	0a1b      	lsrs	r3, r3, #8
 8018978:	b29b      	uxth	r3, r3
 801897a:	2b07      	cmp	r3, #7
 801897c:	d900      	bls.n	8018980 <USBD_GetDescriptor+0x2c>
 801897e:	e159      	b.n	8018c34 <USBD_GetDescriptor+0x2e0>
 8018980:	009a      	lsls	r2, r3, #2
 8018982:	4bcb      	ldr	r3, [pc, #812]	@ (8018cb0 <USBD_GetDescriptor+0x35c>)
 8018984:	18d3      	adds	r3, r2, r3
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801898a:	687a      	ldr	r2, [r7, #4]
 801898c:	23ac      	movs	r3, #172	@ 0xac
 801898e:	009b      	lsls	r3, r3, #2
 8018990:	58d3      	ldr	r3, [r2, r3]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	687a      	ldr	r2, [r7, #4]
 8018996:	7c12      	ldrb	r2, [r2, #16]
 8018998:	2108      	movs	r1, #8
 801899a:	1879      	adds	r1, r7, r1
 801899c:	0010      	movs	r0, r2
 801899e:	4798      	blx	r3
 80189a0:	0003      	movs	r3, r0
 80189a2:	60fb      	str	r3, [r7, #12]
      break;
 80189a4:	e153      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	7c1b      	ldrb	r3, [r3, #16]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d10f      	bne.n	80189ce <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80189ae:	687a      	ldr	r2, [r7, #4]
 80189b0:	23ad      	movs	r3, #173	@ 0xad
 80189b2:	009b      	lsls	r3, r3, #2
 80189b4:	58d3      	ldr	r3, [r2, r3]
 80189b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189b8:	2208      	movs	r2, #8
 80189ba:	18ba      	adds	r2, r7, r2
 80189bc:	0010      	movs	r0, r2
 80189be:	4798      	blx	r3
 80189c0:	0003      	movs	r3, r0
 80189c2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	3301      	adds	r3, #1
 80189c8:	2202      	movs	r2, #2
 80189ca:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80189cc:	e13f      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80189ce:	687a      	ldr	r2, [r7, #4]
 80189d0:	23ad      	movs	r3, #173	@ 0xad
 80189d2:	009b      	lsls	r3, r3, #2
 80189d4:	58d3      	ldr	r3, [r2, r3]
 80189d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189d8:	2208      	movs	r2, #8
 80189da:	18ba      	adds	r2, r7, r2
 80189dc:	0010      	movs	r0, r2
 80189de:	4798      	blx	r3
 80189e0:	0003      	movs	r3, r0
 80189e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	3301      	adds	r3, #1
 80189e8:	2202      	movs	r2, #2
 80189ea:	701a      	strb	r2, [r3, #0]
      break;
 80189ec:	e12f      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	885b      	ldrh	r3, [r3, #2]
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	2b05      	cmp	r3, #5
 80189f6:	d900      	bls.n	80189fa <USBD_GetDescriptor+0xa6>
 80189f8:	e0d0      	b.n	8018b9c <USBD_GetDescriptor+0x248>
 80189fa:	009a      	lsls	r2, r3, #2
 80189fc:	4bad      	ldr	r3, [pc, #692]	@ (8018cb4 <USBD_GetDescriptor+0x360>)
 80189fe:	18d3      	adds	r3, r2, r3
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018a04:	687a      	ldr	r2, [r7, #4]
 8018a06:	23ac      	movs	r3, #172	@ 0xac
 8018a08:	009b      	lsls	r3, r3, #2
 8018a0a:	58d3      	ldr	r3, [r2, r3]
 8018a0c:	685b      	ldr	r3, [r3, #4]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d00d      	beq.n	8018a2e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018a12:	687a      	ldr	r2, [r7, #4]
 8018a14:	23ac      	movs	r3, #172	@ 0xac
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	58d3      	ldr	r3, [r2, r3]
 8018a1a:	685b      	ldr	r3, [r3, #4]
 8018a1c:	687a      	ldr	r2, [r7, #4]
 8018a1e:	7c12      	ldrb	r2, [r2, #16]
 8018a20:	2108      	movs	r1, #8
 8018a22:	1879      	adds	r1, r7, r1
 8018a24:	0010      	movs	r0, r2
 8018a26:	4798      	blx	r3
 8018a28:	0003      	movs	r3, r0
 8018a2a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a2c:	e0c3      	b.n	8018bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018a2e:	683a      	ldr	r2, [r7, #0]
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	0011      	movs	r1, r2
 8018a34:	0018      	movs	r0, r3
 8018a36:	f000 fb20 	bl	801907a <USBD_CtlError>
            err++;
 8018a3a:	210b      	movs	r1, #11
 8018a3c:	187b      	adds	r3, r7, r1
 8018a3e:	781a      	ldrb	r2, [r3, #0]
 8018a40:	187b      	adds	r3, r7, r1
 8018a42:	3201      	adds	r2, #1
 8018a44:	701a      	strb	r2, [r3, #0]
          break;
 8018a46:	e0b6      	b.n	8018bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018a48:	687a      	ldr	r2, [r7, #4]
 8018a4a:	23ac      	movs	r3, #172	@ 0xac
 8018a4c:	009b      	lsls	r3, r3, #2
 8018a4e:	58d3      	ldr	r3, [r2, r3]
 8018a50:	689b      	ldr	r3, [r3, #8]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d00d      	beq.n	8018a72 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	23ac      	movs	r3, #172	@ 0xac
 8018a5a:	009b      	lsls	r3, r3, #2
 8018a5c:	58d3      	ldr	r3, [r2, r3]
 8018a5e:	689b      	ldr	r3, [r3, #8]
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	7c12      	ldrb	r2, [r2, #16]
 8018a64:	2108      	movs	r1, #8
 8018a66:	1879      	adds	r1, r7, r1
 8018a68:	0010      	movs	r0, r2
 8018a6a:	4798      	blx	r3
 8018a6c:	0003      	movs	r3, r0
 8018a6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a70:	e0a1      	b.n	8018bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018a72:	683a      	ldr	r2, [r7, #0]
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	0011      	movs	r1, r2
 8018a78:	0018      	movs	r0, r3
 8018a7a:	f000 fafe 	bl	801907a <USBD_CtlError>
            err++;
 8018a7e:	210b      	movs	r1, #11
 8018a80:	187b      	adds	r3, r7, r1
 8018a82:	781a      	ldrb	r2, [r3, #0]
 8018a84:	187b      	adds	r3, r7, r1
 8018a86:	3201      	adds	r2, #1
 8018a88:	701a      	strb	r2, [r3, #0]
          break;
 8018a8a:	e094      	b.n	8018bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018a8c:	687a      	ldr	r2, [r7, #4]
 8018a8e:	23ac      	movs	r3, #172	@ 0xac
 8018a90:	009b      	lsls	r3, r3, #2
 8018a92:	58d3      	ldr	r3, [r2, r3]
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d00d      	beq.n	8018ab6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018a9a:	687a      	ldr	r2, [r7, #4]
 8018a9c:	23ac      	movs	r3, #172	@ 0xac
 8018a9e:	009b      	lsls	r3, r3, #2
 8018aa0:	58d3      	ldr	r3, [r2, r3]
 8018aa2:	68db      	ldr	r3, [r3, #12]
 8018aa4:	687a      	ldr	r2, [r7, #4]
 8018aa6:	7c12      	ldrb	r2, [r2, #16]
 8018aa8:	2108      	movs	r1, #8
 8018aaa:	1879      	adds	r1, r7, r1
 8018aac:	0010      	movs	r0, r2
 8018aae:	4798      	blx	r3
 8018ab0:	0003      	movs	r3, r0
 8018ab2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ab4:	e07f      	b.n	8018bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018ab6:	683a      	ldr	r2, [r7, #0]
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	0011      	movs	r1, r2
 8018abc:	0018      	movs	r0, r3
 8018abe:	f000 fadc 	bl	801907a <USBD_CtlError>
            err++;
 8018ac2:	210b      	movs	r1, #11
 8018ac4:	187b      	adds	r3, r7, r1
 8018ac6:	781a      	ldrb	r2, [r3, #0]
 8018ac8:	187b      	adds	r3, r7, r1
 8018aca:	3201      	adds	r2, #1
 8018acc:	701a      	strb	r2, [r3, #0]
          break;
 8018ace:	e072      	b.n	8018bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	23ac      	movs	r3, #172	@ 0xac
 8018ad4:	009b      	lsls	r3, r3, #2
 8018ad6:	58d3      	ldr	r3, [r2, r3]
 8018ad8:	691b      	ldr	r3, [r3, #16]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d00d      	beq.n	8018afa <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018ade:	687a      	ldr	r2, [r7, #4]
 8018ae0:	23ac      	movs	r3, #172	@ 0xac
 8018ae2:	009b      	lsls	r3, r3, #2
 8018ae4:	58d3      	ldr	r3, [r2, r3]
 8018ae6:	691b      	ldr	r3, [r3, #16]
 8018ae8:	687a      	ldr	r2, [r7, #4]
 8018aea:	7c12      	ldrb	r2, [r2, #16]
 8018aec:	2108      	movs	r1, #8
 8018aee:	1879      	adds	r1, r7, r1
 8018af0:	0010      	movs	r0, r2
 8018af2:	4798      	blx	r3
 8018af4:	0003      	movs	r3, r0
 8018af6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018af8:	e05d      	b.n	8018bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018afa:	683a      	ldr	r2, [r7, #0]
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	0011      	movs	r1, r2
 8018b00:	0018      	movs	r0, r3
 8018b02:	f000 faba 	bl	801907a <USBD_CtlError>
            err++;
 8018b06:	210b      	movs	r1, #11
 8018b08:	187b      	adds	r3, r7, r1
 8018b0a:	781a      	ldrb	r2, [r3, #0]
 8018b0c:	187b      	adds	r3, r7, r1
 8018b0e:	3201      	adds	r2, #1
 8018b10:	701a      	strb	r2, [r3, #0]
          break;
 8018b12:	e050      	b.n	8018bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018b14:	687a      	ldr	r2, [r7, #4]
 8018b16:	23ac      	movs	r3, #172	@ 0xac
 8018b18:	009b      	lsls	r3, r3, #2
 8018b1a:	58d3      	ldr	r3, [r2, r3]
 8018b1c:	695b      	ldr	r3, [r3, #20]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d00d      	beq.n	8018b3e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018b22:	687a      	ldr	r2, [r7, #4]
 8018b24:	23ac      	movs	r3, #172	@ 0xac
 8018b26:	009b      	lsls	r3, r3, #2
 8018b28:	58d3      	ldr	r3, [r2, r3]
 8018b2a:	695b      	ldr	r3, [r3, #20]
 8018b2c:	687a      	ldr	r2, [r7, #4]
 8018b2e:	7c12      	ldrb	r2, [r2, #16]
 8018b30:	2108      	movs	r1, #8
 8018b32:	1879      	adds	r1, r7, r1
 8018b34:	0010      	movs	r0, r2
 8018b36:	4798      	blx	r3
 8018b38:	0003      	movs	r3, r0
 8018b3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018b3c:	e03b      	b.n	8018bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018b3e:	683a      	ldr	r2, [r7, #0]
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	0011      	movs	r1, r2
 8018b44:	0018      	movs	r0, r3
 8018b46:	f000 fa98 	bl	801907a <USBD_CtlError>
            err++;
 8018b4a:	210b      	movs	r1, #11
 8018b4c:	187b      	adds	r3, r7, r1
 8018b4e:	781a      	ldrb	r2, [r3, #0]
 8018b50:	187b      	adds	r3, r7, r1
 8018b52:	3201      	adds	r2, #1
 8018b54:	701a      	strb	r2, [r3, #0]
          break;
 8018b56:	e02e      	b.n	8018bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018b58:	687a      	ldr	r2, [r7, #4]
 8018b5a:	23ac      	movs	r3, #172	@ 0xac
 8018b5c:	009b      	lsls	r3, r3, #2
 8018b5e:	58d3      	ldr	r3, [r2, r3]
 8018b60:	699b      	ldr	r3, [r3, #24]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d00d      	beq.n	8018b82 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	23ac      	movs	r3, #172	@ 0xac
 8018b6a:	009b      	lsls	r3, r3, #2
 8018b6c:	58d3      	ldr	r3, [r2, r3]
 8018b6e:	699b      	ldr	r3, [r3, #24]
 8018b70:	687a      	ldr	r2, [r7, #4]
 8018b72:	7c12      	ldrb	r2, [r2, #16]
 8018b74:	2108      	movs	r1, #8
 8018b76:	1879      	adds	r1, r7, r1
 8018b78:	0010      	movs	r0, r2
 8018b7a:	4798      	blx	r3
 8018b7c:	0003      	movs	r3, r0
 8018b7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018b80:	e019      	b.n	8018bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018b82:	683a      	ldr	r2, [r7, #0]
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	0011      	movs	r1, r2
 8018b88:	0018      	movs	r0, r3
 8018b8a:	f000 fa76 	bl	801907a <USBD_CtlError>
            err++;
 8018b8e:	210b      	movs	r1, #11
 8018b90:	187b      	adds	r3, r7, r1
 8018b92:	781a      	ldrb	r2, [r3, #0]
 8018b94:	187b      	adds	r3, r7, r1
 8018b96:	3201      	adds	r2, #1
 8018b98:	701a      	strb	r2, [r3, #0]
          break;
 8018b9a:	e00c      	b.n	8018bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8018b9c:	683a      	ldr	r2, [r7, #0]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	0011      	movs	r1, r2
 8018ba2:	0018      	movs	r0, r3
 8018ba4:	f000 fa69 	bl	801907a <USBD_CtlError>
          err++;
 8018ba8:	210b      	movs	r1, #11
 8018baa:	187b      	adds	r3, r7, r1
 8018bac:	781a      	ldrb	r2, [r3, #0]
 8018bae:	187b      	adds	r3, r7, r1
 8018bb0:	3201      	adds	r2, #1
 8018bb2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8018bb4:	e04b      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>
 8018bb6:	e04a      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	7c1b      	ldrb	r3, [r3, #16]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d10b      	bne.n	8018bd8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018bc0:	687a      	ldr	r2, [r7, #4]
 8018bc2:	23ad      	movs	r3, #173	@ 0xad
 8018bc4:	009b      	lsls	r3, r3, #2
 8018bc6:	58d3      	ldr	r3, [r2, r3]
 8018bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018bca:	2208      	movs	r2, #8
 8018bcc:	18ba      	adds	r2, r7, r2
 8018bce:	0010      	movs	r0, r2
 8018bd0:	4798      	blx	r3
 8018bd2:	0003      	movs	r3, r0
 8018bd4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018bd6:	e03a      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8018bd8:	683a      	ldr	r2, [r7, #0]
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	0011      	movs	r1, r2
 8018bde:	0018      	movs	r0, r3
 8018be0:	f000 fa4b 	bl	801907a <USBD_CtlError>
        err++;
 8018be4:	210b      	movs	r1, #11
 8018be6:	187b      	adds	r3, r7, r1
 8018be8:	781a      	ldrb	r2, [r3, #0]
 8018bea:	187b      	adds	r3, r7, r1
 8018bec:	3201      	adds	r2, #1
 8018bee:	701a      	strb	r2, [r3, #0]
      break;
 8018bf0:	e02d      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	7c1b      	ldrb	r3, [r3, #16]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d10f      	bne.n	8018c1a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018bfa:	687a      	ldr	r2, [r7, #4]
 8018bfc:	23ad      	movs	r3, #173	@ 0xad
 8018bfe:	009b      	lsls	r3, r3, #2
 8018c00:	58d3      	ldr	r3, [r2, r3]
 8018c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018c04:	2208      	movs	r2, #8
 8018c06:	18ba      	adds	r2, r7, r2
 8018c08:	0010      	movs	r0, r2
 8018c0a:	4798      	blx	r3
 8018c0c:	0003      	movs	r3, r0
 8018c0e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	3301      	adds	r3, #1
 8018c14:	2207      	movs	r2, #7
 8018c16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018c18:	e019      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8018c1a:	683a      	ldr	r2, [r7, #0]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	0011      	movs	r1, r2
 8018c20:	0018      	movs	r0, r3
 8018c22:	f000 fa2a 	bl	801907a <USBD_CtlError>
        err++;
 8018c26:	210b      	movs	r1, #11
 8018c28:	187b      	adds	r3, r7, r1
 8018c2a:	781a      	ldrb	r2, [r3, #0]
 8018c2c:	187b      	adds	r3, r7, r1
 8018c2e:	3201      	adds	r2, #1
 8018c30:	701a      	strb	r2, [r3, #0]
      break;
 8018c32:	e00c      	b.n	8018c4e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8018c34:	683a      	ldr	r2, [r7, #0]
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	0011      	movs	r1, r2
 8018c3a:	0018      	movs	r0, r3
 8018c3c:	f000 fa1d 	bl	801907a <USBD_CtlError>
      err++;
 8018c40:	210b      	movs	r1, #11
 8018c42:	187b      	adds	r3, r7, r1
 8018c44:	781a      	ldrb	r2, [r3, #0]
 8018c46:	187b      	adds	r3, r7, r1
 8018c48:	3201      	adds	r2, #1
 8018c4a:	701a      	strb	r2, [r3, #0]
      break;
 8018c4c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8018c4e:	230b      	movs	r3, #11
 8018c50:	18fb      	adds	r3, r7, r3
 8018c52:	781b      	ldrb	r3, [r3, #0]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d127      	bne.n	8018ca8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8018c58:	2108      	movs	r1, #8
 8018c5a:	187b      	adds	r3, r7, r1
 8018c5c:	881b      	ldrh	r3, [r3, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d019      	beq.n	8018c96 <USBD_GetDescriptor+0x342>
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	88db      	ldrh	r3, [r3, #6]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d015      	beq.n	8018c96 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	88da      	ldrh	r2, [r3, #6]
 8018c6e:	187b      	adds	r3, r7, r1
 8018c70:	881b      	ldrh	r3, [r3, #0]
 8018c72:	1c18      	adds	r0, r3, #0
 8018c74:	1c11      	adds	r1, r2, #0
 8018c76:	b28a      	uxth	r2, r1
 8018c78:	b283      	uxth	r3, r0
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d900      	bls.n	8018c80 <USBD_GetDescriptor+0x32c>
 8018c7e:	1c01      	adds	r1, r0, #0
 8018c80:	b28a      	uxth	r2, r1
 8018c82:	2108      	movs	r1, #8
 8018c84:	187b      	adds	r3, r7, r1
 8018c86:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018c88:	187b      	adds	r3, r7, r1
 8018c8a:	881a      	ldrh	r2, [r3, #0]
 8018c8c:	68f9      	ldr	r1, [r7, #12]
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	0018      	movs	r0, r3
 8018c92:	f000 fa70 	bl	8019176 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	88db      	ldrh	r3, [r3, #6]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d105      	bne.n	8018caa <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	0018      	movs	r0, r3
 8018ca2:	f000 fad2 	bl	801924a <USBD_CtlSendStatus>
 8018ca6:	e000      	b.n	8018caa <USBD_GetDescriptor+0x356>
    return;
 8018ca8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018caa:	46bd      	mov	sp, r7
 8018cac:	b004      	add	sp, #16
 8018cae:	bd80      	pop	{r7, pc}
 8018cb0:	08020c84 	.word	0x08020c84
 8018cb4:	08020ca4 	.word	0x08020ca4

08018cb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018cb8:	b590      	push	{r4, r7, lr}
 8018cba:	b085      	sub	sp, #20
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	889b      	ldrh	r3, [r3, #4]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d13d      	bne.n	8018d46 <USBD_SetAddress+0x8e>
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	88db      	ldrh	r3, [r3, #6]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d139      	bne.n	8018d46 <USBD_SetAddress+0x8e>
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	885b      	ldrh	r3, [r3, #2]
 8018cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8018cd8:	d835      	bhi.n	8018d46 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018cda:	683b      	ldr	r3, [r7, #0]
 8018cdc:	885b      	ldrh	r3, [r3, #2]
 8018cde:	b2da      	uxtb	r2, r3
 8018ce0:	230f      	movs	r3, #15
 8018ce2:	18fb      	adds	r3, r7, r3
 8018ce4:	217f      	movs	r1, #127	@ 0x7f
 8018ce6:	400a      	ands	r2, r1
 8018ce8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018cea:	687a      	ldr	r2, [r7, #4]
 8018cec:	23a7      	movs	r3, #167	@ 0xa7
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	5cd3      	ldrb	r3, [r2, r3]
 8018cf2:	2b03      	cmp	r3, #3
 8018cf4:	d106      	bne.n	8018d04 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8018cf6:	683a      	ldr	r2, [r7, #0]
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	0011      	movs	r1, r2
 8018cfc:	0018      	movs	r0, r3
 8018cfe:	f000 f9bc 	bl	801907a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d02:	e027      	b.n	8018d54 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	240f      	movs	r4, #15
 8018d08:	193a      	adds	r2, r7, r4
 8018d0a:	4914      	ldr	r1, [pc, #80]	@ (8018d5c <USBD_SetAddress+0xa4>)
 8018d0c:	7812      	ldrb	r2, [r2, #0]
 8018d0e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018d10:	193b      	adds	r3, r7, r4
 8018d12:	781a      	ldrb	r2, [r3, #0]
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	0011      	movs	r1, r2
 8018d18:	0018      	movs	r0, r3
 8018d1a:	f000 ff5d 	bl	8019bd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	0018      	movs	r0, r3
 8018d22:	f000 fa92 	bl	801924a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018d26:	193b      	adds	r3, r7, r4
 8018d28:	781b      	ldrb	r3, [r3, #0]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d005      	beq.n	8018d3a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d2e:	687a      	ldr	r2, [r7, #4]
 8018d30:	23a7      	movs	r3, #167	@ 0xa7
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	2102      	movs	r1, #2
 8018d36:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d38:	e00c      	b.n	8018d54 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018d3a:	687a      	ldr	r2, [r7, #4]
 8018d3c:	23a7      	movs	r3, #167	@ 0xa7
 8018d3e:	009b      	lsls	r3, r3, #2
 8018d40:	2101      	movs	r1, #1
 8018d42:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d44:	e006      	b.n	8018d54 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018d46:	683a      	ldr	r2, [r7, #0]
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	0011      	movs	r1, r2
 8018d4c:	0018      	movs	r0, r3
 8018d4e:	f000 f994 	bl	801907a <USBD_CtlError>
  }
}
 8018d52:	46c0      	nop			@ (mov r8, r8)
 8018d54:	46c0      	nop			@ (mov r8, r8)
 8018d56:	46bd      	mov	sp, r7
 8018d58:	b005      	add	sp, #20
 8018d5a:	bd90      	pop	{r4, r7, pc}
 8018d5c:	0000029e 	.word	0x0000029e

08018d60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b082      	sub	sp, #8
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018d6a:	683b      	ldr	r3, [r7, #0]
 8018d6c:	885b      	ldrh	r3, [r3, #2]
 8018d6e:	b2da      	uxtb	r2, r3
 8018d70:	4b4c      	ldr	r3, [pc, #304]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018d74:	4b4b      	ldr	r3, [pc, #300]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018d76:	781b      	ldrb	r3, [r3, #0]
 8018d78:	2b01      	cmp	r3, #1
 8018d7a:	d906      	bls.n	8018d8a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8018d7c:	683a      	ldr	r2, [r7, #0]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	0011      	movs	r1, r2
 8018d82:	0018      	movs	r0, r3
 8018d84:	f000 f979 	bl	801907a <USBD_CtlError>
 8018d88:	e088      	b.n	8018e9c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8018d8a:	687a      	ldr	r2, [r7, #4]
 8018d8c:	23a7      	movs	r3, #167	@ 0xa7
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	5cd3      	ldrb	r3, [r2, r3]
 8018d92:	2b02      	cmp	r3, #2
 8018d94:	d002      	beq.n	8018d9c <USBD_SetConfig+0x3c>
 8018d96:	2b03      	cmp	r3, #3
 8018d98:	d029      	beq.n	8018dee <USBD_SetConfig+0x8e>
 8018d9a:	e071      	b.n	8018e80 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8018d9c:	4b41      	ldr	r3, [pc, #260]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018d9e:	781b      	ldrb	r3, [r3, #0]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d01f      	beq.n	8018de4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8018da4:	4b3f      	ldr	r3, [pc, #252]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	001a      	movs	r2, r3
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018dae:	687a      	ldr	r2, [r7, #4]
 8018db0:	23a7      	movs	r3, #167	@ 0xa7
 8018db2:	009b      	lsls	r3, r3, #2
 8018db4:	2103      	movs	r1, #3
 8018db6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018db8:	4b3a      	ldr	r3, [pc, #232]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018dba:	781a      	ldrb	r2, [r3, #0]
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	0011      	movs	r1, r2
 8018dc0:	0018      	movs	r0, r3
 8018dc2:	f7ff f8c6 	bl	8017f52 <USBD_SetClassConfig>
 8018dc6:	0003      	movs	r3, r0
 8018dc8:	2b02      	cmp	r3, #2
 8018dca:	d106      	bne.n	8018dda <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8018dcc:	683a      	ldr	r2, [r7, #0]
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	0011      	movs	r1, r2
 8018dd2:	0018      	movs	r0, r3
 8018dd4:	f000 f951 	bl	801907a <USBD_CtlError>
            return;
 8018dd8:	e060      	b.n	8018e9c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	0018      	movs	r0, r3
 8018dde:	f000 fa34 	bl	801924a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018de2:	e05b      	b.n	8018e9c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	0018      	movs	r0, r3
 8018de8:	f000 fa2f 	bl	801924a <USBD_CtlSendStatus>
        break;
 8018dec:	e056      	b.n	8018e9c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8018dee:	4b2d      	ldr	r3, [pc, #180]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018df0:	781b      	ldrb	r3, [r3, #0]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d115      	bne.n	8018e22 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018df6:	687a      	ldr	r2, [r7, #4]
 8018df8:	23a7      	movs	r3, #167	@ 0xa7
 8018dfa:	009b      	lsls	r3, r3, #2
 8018dfc:	2102      	movs	r1, #2
 8018dfe:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8018e00:	4b28      	ldr	r3, [pc, #160]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018e02:	781b      	ldrb	r3, [r3, #0]
 8018e04:	001a      	movs	r2, r3
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8018e0a:	4b26      	ldr	r3, [pc, #152]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018e0c:	781a      	ldrb	r2, [r3, #0]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	0011      	movs	r1, r2
 8018e12:	0018      	movs	r0, r3
 8018e14:	f7ff f8c4 	bl	8017fa0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	0018      	movs	r0, r3
 8018e1c:	f000 fa15 	bl	801924a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018e20:	e03c      	b.n	8018e9c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8018e22:	4b20      	ldr	r3, [pc, #128]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	001a      	movs	r2, r3
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	685b      	ldr	r3, [r3, #4]
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d022      	beq.n	8018e76 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	685b      	ldr	r3, [r3, #4]
 8018e34:	b2da      	uxtb	r2, r3
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	0011      	movs	r1, r2
 8018e3a:	0018      	movs	r0, r3
 8018e3c:	f7ff f8b0 	bl	8017fa0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8018e40:	4b18      	ldr	r3, [pc, #96]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018e42:	781b      	ldrb	r3, [r3, #0]
 8018e44:	001a      	movs	r2, r3
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018e4a:	4b16      	ldr	r3, [pc, #88]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018e4c:	781a      	ldrb	r2, [r3, #0]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	0011      	movs	r1, r2
 8018e52:	0018      	movs	r0, r3
 8018e54:	f7ff f87d 	bl	8017f52 <USBD_SetClassConfig>
 8018e58:	0003      	movs	r3, r0
 8018e5a:	2b02      	cmp	r3, #2
 8018e5c:	d106      	bne.n	8018e6c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8018e5e:	683a      	ldr	r2, [r7, #0]
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	0011      	movs	r1, r2
 8018e64:	0018      	movs	r0, r3
 8018e66:	f000 f908 	bl	801907a <USBD_CtlError>
            return;
 8018e6a:	e017      	b.n	8018e9c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	0018      	movs	r0, r3
 8018e70:	f000 f9eb 	bl	801924a <USBD_CtlSendStatus>
        break;
 8018e74:	e012      	b.n	8018e9c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	0018      	movs	r0, r3
 8018e7a:	f000 f9e6 	bl	801924a <USBD_CtlSendStatus>
        break;
 8018e7e:	e00d      	b.n	8018e9c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8018e80:	683a      	ldr	r2, [r7, #0]
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	0011      	movs	r1, r2
 8018e86:	0018      	movs	r0, r3
 8018e88:	f000 f8f7 	bl	801907a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8018e8c:	4b05      	ldr	r3, [pc, #20]	@ (8018ea4 <USBD_SetConfig+0x144>)
 8018e8e:	781a      	ldrb	r2, [r3, #0]
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	0011      	movs	r1, r2
 8018e94:	0018      	movs	r0, r3
 8018e96:	f7ff f883 	bl	8017fa0 <USBD_ClrClassConfig>
        break;
 8018e9a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	b002      	add	sp, #8
 8018ea0:	bd80      	pop	{r7, pc}
 8018ea2:	46c0      	nop			@ (mov r8, r8)
 8018ea4:	200024d8 	.word	0x200024d8

08018ea8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b082      	sub	sp, #8
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]
 8018eb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	88db      	ldrh	r3, [r3, #6]
 8018eb6:	2b01      	cmp	r3, #1
 8018eb8:	d006      	beq.n	8018ec8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8018eba:	683a      	ldr	r2, [r7, #0]
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	0011      	movs	r1, r2
 8018ec0:	0018      	movs	r0, r3
 8018ec2:	f000 f8da 	bl	801907a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018ec6:	e026      	b.n	8018f16 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8018ec8:	687a      	ldr	r2, [r7, #4]
 8018eca:	23a7      	movs	r3, #167	@ 0xa7
 8018ecc:	009b      	lsls	r3, r3, #2
 8018ece:	5cd3      	ldrb	r3, [r2, r3]
 8018ed0:	2b02      	cmp	r3, #2
 8018ed2:	dc02      	bgt.n	8018eda <USBD_GetConfig+0x32>
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	dc03      	bgt.n	8018ee0 <USBD_GetConfig+0x38>
 8018ed8:	e016      	b.n	8018f08 <USBD_GetConfig+0x60>
 8018eda:	2b03      	cmp	r3, #3
 8018edc:	d00c      	beq.n	8018ef8 <USBD_GetConfig+0x50>
 8018ede:	e013      	b.n	8018f08 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	3308      	adds	r3, #8
 8018eea:	0019      	movs	r1, r3
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2201      	movs	r2, #1
 8018ef0:	0018      	movs	r0, r3
 8018ef2:	f000 f940 	bl	8019176 <USBD_CtlSendData>
        break;
 8018ef6:	e00e      	b.n	8018f16 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	1d19      	adds	r1, r3, #4
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2201      	movs	r2, #1
 8018f00:	0018      	movs	r0, r3
 8018f02:	f000 f938 	bl	8019176 <USBD_CtlSendData>
        break;
 8018f06:	e006      	b.n	8018f16 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8018f08:	683a      	ldr	r2, [r7, #0]
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	0011      	movs	r1, r2
 8018f0e:	0018      	movs	r0, r3
 8018f10:	f000 f8b3 	bl	801907a <USBD_CtlError>
        break;
 8018f14:	46c0      	nop			@ (mov r8, r8)
}
 8018f16:	46c0      	nop			@ (mov r8, r8)
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	b002      	add	sp, #8
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f1e:	b580      	push	{r7, lr}
 8018f20:	b082      	sub	sp, #8
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	6078      	str	r0, [r7, #4]
 8018f26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018f28:	687a      	ldr	r2, [r7, #4]
 8018f2a:	23a7      	movs	r3, #167	@ 0xa7
 8018f2c:	009b      	lsls	r3, r3, #2
 8018f2e:	5cd3      	ldrb	r3, [r2, r3]
 8018f30:	3b01      	subs	r3, #1
 8018f32:	2b02      	cmp	r3, #2
 8018f34:	d822      	bhi.n	8018f7c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018f36:	683b      	ldr	r3, [r7, #0]
 8018f38:	88db      	ldrh	r3, [r3, #6]
 8018f3a:	2b02      	cmp	r3, #2
 8018f3c:	d006      	beq.n	8018f4c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8018f3e:	683a      	ldr	r2, [r7, #0]
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	0011      	movs	r1, r2
 8018f44:	0018      	movs	r0, r3
 8018f46:	f000 f898 	bl	801907a <USBD_CtlError>
        break;
 8018f4a:	e01e      	b.n	8018f8a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	2201      	movs	r2, #1
 8018f50:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8018f52:	687a      	ldr	r2, [r7, #4]
 8018f54:	23a9      	movs	r3, #169	@ 0xa9
 8018f56:	009b      	lsls	r3, r3, #2
 8018f58:	58d3      	ldr	r3, [r2, r3]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d005      	beq.n	8018f6a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	68db      	ldr	r3, [r3, #12]
 8018f62:	2202      	movs	r2, #2
 8018f64:	431a      	orrs	r2, r3
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	330c      	adds	r3, #12
 8018f6e:	0019      	movs	r1, r3
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2202      	movs	r2, #2
 8018f74:	0018      	movs	r0, r3
 8018f76:	f000 f8fe 	bl	8019176 <USBD_CtlSendData>
      break;
 8018f7a:	e006      	b.n	8018f8a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8018f7c:	683a      	ldr	r2, [r7, #0]
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	0011      	movs	r1, r2
 8018f82:	0018      	movs	r0, r3
 8018f84:	f000 f879 	bl	801907a <USBD_CtlError>
      break;
 8018f88:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018f8a:	46c0      	nop			@ (mov r8, r8)
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	b002      	add	sp, #8
 8018f90:	bd80      	pop	{r7, pc}

08018f92 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018f92:	b580      	push	{r7, lr}
 8018f94:	b082      	sub	sp, #8
 8018f96:	af00      	add	r7, sp, #0
 8018f98:	6078      	str	r0, [r7, #4]
 8018f9a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	885b      	ldrh	r3, [r3, #2]
 8018fa0:	2b01      	cmp	r3, #1
 8018fa2:	d108      	bne.n	8018fb6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8018fa4:	687a      	ldr	r2, [r7, #4]
 8018fa6:	23a9      	movs	r3, #169	@ 0xa9
 8018fa8:	009b      	lsls	r3, r3, #2
 8018faa:	2101      	movs	r1, #1
 8018fac:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	0018      	movs	r0, r3
 8018fb2:	f000 f94a 	bl	801924a <USBD_CtlSendStatus>
  }
}
 8018fb6:	46c0      	nop			@ (mov r8, r8)
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	b002      	add	sp, #8
 8018fbc:	bd80      	pop	{r7, pc}

08018fbe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018fbe:	b580      	push	{r7, lr}
 8018fc0:	b082      	sub	sp, #8
 8018fc2:	af00      	add	r7, sp, #0
 8018fc4:	6078      	str	r0, [r7, #4]
 8018fc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018fc8:	687a      	ldr	r2, [r7, #4]
 8018fca:	23a7      	movs	r3, #167	@ 0xa7
 8018fcc:	009b      	lsls	r3, r3, #2
 8018fce:	5cd3      	ldrb	r3, [r2, r3]
 8018fd0:	3b01      	subs	r3, #1
 8018fd2:	2b02      	cmp	r3, #2
 8018fd4:	d80d      	bhi.n	8018ff2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	885b      	ldrh	r3, [r3, #2]
 8018fda:	2b01      	cmp	r3, #1
 8018fdc:	d110      	bne.n	8019000 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8018fde:	687a      	ldr	r2, [r7, #4]
 8018fe0:	23a9      	movs	r3, #169	@ 0xa9
 8018fe2:	009b      	lsls	r3, r3, #2
 8018fe4:	2100      	movs	r1, #0
 8018fe6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	0018      	movs	r0, r3
 8018fec:	f000 f92d 	bl	801924a <USBD_CtlSendStatus>
      }
      break;
 8018ff0:	e006      	b.n	8019000 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8018ff2:	683a      	ldr	r2, [r7, #0]
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	0011      	movs	r1, r2
 8018ff8:	0018      	movs	r0, r3
 8018ffa:	f000 f83e 	bl	801907a <USBD_CtlError>
      break;
 8018ffe:	e000      	b.n	8019002 <USBD_ClrFeature+0x44>
      break;
 8019000:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019002:	46c0      	nop			@ (mov r8, r8)
 8019004:	46bd      	mov	sp, r7
 8019006:	b002      	add	sp, #8
 8019008:	bd80      	pop	{r7, pc}

0801900a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801900a:	b580      	push	{r7, lr}
 801900c:	b082      	sub	sp, #8
 801900e:	af00      	add	r7, sp, #0
 8019010:	6078      	str	r0, [r7, #4]
 8019012:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	781a      	ldrb	r2, [r3, #0]
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	785a      	ldrb	r2, [r3, #1]
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8019024:	683b      	ldr	r3, [r7, #0]
 8019026:	3302      	adds	r3, #2
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	001a      	movs	r2, r3
 801902c:	683b      	ldr	r3, [r7, #0]
 801902e:	3303      	adds	r3, #3
 8019030:	781b      	ldrb	r3, [r3, #0]
 8019032:	021b      	lsls	r3, r3, #8
 8019034:	b29b      	uxth	r3, r3
 8019036:	18d3      	adds	r3, r2, r3
 8019038:	b29a      	uxth	r2, r3
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801903e:	683b      	ldr	r3, [r7, #0]
 8019040:	3304      	adds	r3, #4
 8019042:	781b      	ldrb	r3, [r3, #0]
 8019044:	001a      	movs	r2, r3
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	3305      	adds	r3, #5
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	021b      	lsls	r3, r3, #8
 801904e:	b29b      	uxth	r3, r3
 8019050:	18d3      	adds	r3, r2, r3
 8019052:	b29a      	uxth	r2, r3
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8019058:	683b      	ldr	r3, [r7, #0]
 801905a:	3306      	adds	r3, #6
 801905c:	781b      	ldrb	r3, [r3, #0]
 801905e:	001a      	movs	r2, r3
 8019060:	683b      	ldr	r3, [r7, #0]
 8019062:	3307      	adds	r3, #7
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	021b      	lsls	r3, r3, #8
 8019068:	b29b      	uxth	r3, r3
 801906a:	18d3      	adds	r3, r2, r3
 801906c:	b29a      	uxth	r2, r3
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	80da      	strh	r2, [r3, #6]

}
 8019072:	46c0      	nop			@ (mov r8, r8)
 8019074:	46bd      	mov	sp, r7
 8019076:	b002      	add	sp, #8
 8019078:	bd80      	pop	{r7, pc}

0801907a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801907a:	b580      	push	{r7, lr}
 801907c:	b082      	sub	sp, #8
 801907e:	af00      	add	r7, sp, #0
 8019080:	6078      	str	r0, [r7, #4]
 8019082:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	2180      	movs	r1, #128	@ 0x80
 8019088:	0018      	movs	r0, r3
 801908a:	f000 fd1e 	bl	8019aca <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2100      	movs	r1, #0
 8019092:	0018      	movs	r0, r3
 8019094:	f000 fd19 	bl	8019aca <USBD_LL_StallEP>
}
 8019098:	46c0      	nop			@ (mov r8, r8)
 801909a:	46bd      	mov	sp, r7
 801909c:	b002      	add	sp, #8
 801909e:	bd80      	pop	{r7, pc}

080190a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80190a0:	b590      	push	{r4, r7, lr}
 80190a2:	b087      	sub	sp, #28
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	60f8      	str	r0, [r7, #12]
 80190a8:	60b9      	str	r1, [r7, #8]
 80190aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80190ac:	2417      	movs	r4, #23
 80190ae:	193b      	adds	r3, r7, r4
 80190b0:	2200      	movs	r2, #0
 80190b2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d03c      	beq.n	8019134 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	0018      	movs	r0, r3
 80190be:	f000 f83d 	bl	801913c <USBD_GetLen>
 80190c2:	0003      	movs	r3, r0
 80190c4:	3301      	adds	r3, #1
 80190c6:	b29b      	uxth	r3, r3
 80190c8:	18db      	adds	r3, r3, r3
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80190d0:	193b      	adds	r3, r7, r4
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	193a      	adds	r2, r7, r4
 80190d6:	1c59      	adds	r1, r3, #1
 80190d8:	7011      	strb	r1, [r2, #0]
 80190da:	001a      	movs	r2, r3
 80190dc:	68bb      	ldr	r3, [r7, #8]
 80190de:	189b      	adds	r3, r3, r2
 80190e0:	687a      	ldr	r2, [r7, #4]
 80190e2:	7812      	ldrb	r2, [r2, #0]
 80190e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80190e6:	193b      	adds	r3, r7, r4
 80190e8:	781b      	ldrb	r3, [r3, #0]
 80190ea:	193a      	adds	r2, r7, r4
 80190ec:	1c59      	adds	r1, r3, #1
 80190ee:	7011      	strb	r1, [r2, #0]
 80190f0:	001a      	movs	r2, r3
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	189b      	adds	r3, r3, r2
 80190f6:	2203      	movs	r2, #3
 80190f8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80190fa:	e017      	b.n	801912c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	1c5a      	adds	r2, r3, #1
 8019100:	60fa      	str	r2, [r7, #12]
 8019102:	2417      	movs	r4, #23
 8019104:	193a      	adds	r2, r7, r4
 8019106:	7812      	ldrb	r2, [r2, #0]
 8019108:	1939      	adds	r1, r7, r4
 801910a:	1c50      	adds	r0, r2, #1
 801910c:	7008      	strb	r0, [r1, #0]
 801910e:	0011      	movs	r1, r2
 8019110:	68ba      	ldr	r2, [r7, #8]
 8019112:	1852      	adds	r2, r2, r1
 8019114:	781b      	ldrb	r3, [r3, #0]
 8019116:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8019118:	193b      	adds	r3, r7, r4
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	193a      	adds	r2, r7, r4
 801911e:	1c59      	adds	r1, r3, #1
 8019120:	7011      	strb	r1, [r2, #0]
 8019122:	001a      	movs	r2, r3
 8019124:	68bb      	ldr	r3, [r7, #8]
 8019126:	189b      	adds	r3, r3, r2
 8019128:	2200      	movs	r2, #0
 801912a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d1e3      	bne.n	80190fc <USBD_GetString+0x5c>
    }
  }
}
 8019134:	46c0      	nop			@ (mov r8, r8)
 8019136:	46bd      	mov	sp, r7
 8019138:	b007      	add	sp, #28
 801913a:	bd90      	pop	{r4, r7, pc}

0801913c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b084      	sub	sp, #16
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019144:	230f      	movs	r3, #15
 8019146:	18fb      	adds	r3, r7, r3
 8019148:	2200      	movs	r2, #0
 801914a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801914c:	e008      	b.n	8019160 <USBD_GetLen+0x24>
  {
    len++;
 801914e:	210f      	movs	r1, #15
 8019150:	187b      	adds	r3, r7, r1
 8019152:	781a      	ldrb	r2, [r3, #0]
 8019154:	187b      	adds	r3, r7, r1
 8019156:	3201      	adds	r2, #1
 8019158:	701a      	strb	r2, [r3, #0]
    buf++;
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	3301      	adds	r3, #1
 801915e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	781b      	ldrb	r3, [r3, #0]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d1f2      	bne.n	801914e <USBD_GetLen+0x12>
  }

  return len;
 8019168:	230f      	movs	r3, #15
 801916a:	18fb      	adds	r3, r7, r3
 801916c:	781b      	ldrb	r3, [r3, #0]
}
 801916e:	0018      	movs	r0, r3
 8019170:	46bd      	mov	sp, r7
 8019172:	b004      	add	sp, #16
 8019174:	bd80      	pop	{r7, pc}

08019176 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8019176:	b580      	push	{r7, lr}
 8019178:	b084      	sub	sp, #16
 801917a:	af00      	add	r7, sp, #0
 801917c:	60f8      	str	r0, [r7, #12]
 801917e:	60b9      	str	r1, [r7, #8]
 8019180:	1dbb      	adds	r3, r7, #6
 8019182:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019184:	68fa      	ldr	r2, [r7, #12]
 8019186:	23a5      	movs	r3, #165	@ 0xa5
 8019188:	009b      	lsls	r3, r3, #2
 801918a:	2102      	movs	r1, #2
 801918c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801918e:	1dbb      	adds	r3, r7, #6
 8019190:	881a      	ldrh	r2, [r3, #0]
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8019196:	1dbb      	adds	r3, r7, #6
 8019198:	881a      	ldrh	r2, [r3, #0]
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801919e:	1dbb      	adds	r3, r7, #6
 80191a0:	881b      	ldrh	r3, [r3, #0]
 80191a2:	68ba      	ldr	r2, [r7, #8]
 80191a4:	68f8      	ldr	r0, [r7, #12]
 80191a6:	2100      	movs	r1, #0
 80191a8:	f000 fd41 	bl	8019c2e <USBD_LL_Transmit>

  return USBD_OK;
 80191ac:	2300      	movs	r3, #0
}
 80191ae:	0018      	movs	r0, r3
 80191b0:	46bd      	mov	sp, r7
 80191b2:	b004      	add	sp, #16
 80191b4:	bd80      	pop	{r7, pc}

080191b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80191b6:	b580      	push	{r7, lr}
 80191b8:	b084      	sub	sp, #16
 80191ba:	af00      	add	r7, sp, #0
 80191bc:	60f8      	str	r0, [r7, #12]
 80191be:	60b9      	str	r1, [r7, #8]
 80191c0:	1dbb      	adds	r3, r7, #6
 80191c2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80191c4:	1dbb      	adds	r3, r7, #6
 80191c6:	881b      	ldrh	r3, [r3, #0]
 80191c8:	68ba      	ldr	r2, [r7, #8]
 80191ca:	68f8      	ldr	r0, [r7, #12]
 80191cc:	2100      	movs	r1, #0
 80191ce:	f000 fd2e 	bl	8019c2e <USBD_LL_Transmit>

  return USBD_OK;
 80191d2:	2300      	movs	r3, #0
}
 80191d4:	0018      	movs	r0, r3
 80191d6:	46bd      	mov	sp, r7
 80191d8:	b004      	add	sp, #16
 80191da:	bd80      	pop	{r7, pc}

080191dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b084      	sub	sp, #16
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	60f8      	str	r0, [r7, #12]
 80191e4:	60b9      	str	r1, [r7, #8]
 80191e6:	1dbb      	adds	r3, r7, #6
 80191e8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80191ea:	68fa      	ldr	r2, [r7, #12]
 80191ec:	23a5      	movs	r3, #165	@ 0xa5
 80191ee:	009b      	lsls	r3, r3, #2
 80191f0:	2103      	movs	r1, #3
 80191f2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80191f4:	1dbb      	adds	r3, r7, #6
 80191f6:	8819      	ldrh	r1, [r3, #0]
 80191f8:	68fa      	ldr	r2, [r7, #12]
 80191fa:	23ae      	movs	r3, #174	@ 0xae
 80191fc:	005b      	lsls	r3, r3, #1
 80191fe:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8019200:	1dbb      	adds	r3, r7, #6
 8019202:	8819      	ldrh	r1, [r3, #0]
 8019204:	68fa      	ldr	r2, [r7, #12]
 8019206:	23b0      	movs	r3, #176	@ 0xb0
 8019208:	005b      	lsls	r3, r3, #1
 801920a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801920c:	1dbb      	adds	r3, r7, #6
 801920e:	881b      	ldrh	r3, [r3, #0]
 8019210:	68ba      	ldr	r2, [r7, #8]
 8019212:	68f8      	ldr	r0, [r7, #12]
 8019214:	2100      	movs	r1, #0
 8019216:	f000 fd41 	bl	8019c9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801921a:	2300      	movs	r3, #0
}
 801921c:	0018      	movs	r0, r3
 801921e:	46bd      	mov	sp, r7
 8019220:	b004      	add	sp, #16
 8019222:	bd80      	pop	{r7, pc}

08019224 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b084      	sub	sp, #16
 8019228:	af00      	add	r7, sp, #0
 801922a:	60f8      	str	r0, [r7, #12]
 801922c:	60b9      	str	r1, [r7, #8]
 801922e:	1dbb      	adds	r3, r7, #6
 8019230:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019232:	1dbb      	adds	r3, r7, #6
 8019234:	881b      	ldrh	r3, [r3, #0]
 8019236:	68ba      	ldr	r2, [r7, #8]
 8019238:	68f8      	ldr	r0, [r7, #12]
 801923a:	2100      	movs	r1, #0
 801923c:	f000 fd2e 	bl	8019c9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019240:	2300      	movs	r3, #0
}
 8019242:	0018      	movs	r0, r3
 8019244:	46bd      	mov	sp, r7
 8019246:	b004      	add	sp, #16
 8019248:	bd80      	pop	{r7, pc}

0801924a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801924a:	b580      	push	{r7, lr}
 801924c:	b082      	sub	sp, #8
 801924e:	af00      	add	r7, sp, #0
 8019250:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019252:	687a      	ldr	r2, [r7, #4]
 8019254:	23a5      	movs	r3, #165	@ 0xa5
 8019256:	009b      	lsls	r3, r3, #2
 8019258:	2104      	movs	r1, #4
 801925a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801925c:	6878      	ldr	r0, [r7, #4]
 801925e:	2300      	movs	r3, #0
 8019260:	2200      	movs	r2, #0
 8019262:	2100      	movs	r1, #0
 8019264:	f000 fce3 	bl	8019c2e <USBD_LL_Transmit>

  return USBD_OK;
 8019268:	2300      	movs	r3, #0
}
 801926a:	0018      	movs	r0, r3
 801926c:	46bd      	mov	sp, r7
 801926e:	b002      	add	sp, #8
 8019270:	bd80      	pop	{r7, pc}

08019272 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019272:	b580      	push	{r7, lr}
 8019274:	b082      	sub	sp, #8
 8019276:	af00      	add	r7, sp, #0
 8019278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801927a:	687a      	ldr	r2, [r7, #4]
 801927c:	23a5      	movs	r3, #165	@ 0xa5
 801927e:	009b      	lsls	r3, r3, #2
 8019280:	2105      	movs	r1, #5
 8019282:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	2300      	movs	r3, #0
 8019288:	2200      	movs	r2, #0
 801928a:	2100      	movs	r1, #0
 801928c:	f000 fd06 	bl	8019c9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019290:	2300      	movs	r3, #0
}
 8019292:	0018      	movs	r0, r3
 8019294:	46bd      	mov	sp, r7
 8019296:	b002      	add	sp, #8
 8019298:	bd80      	pop	{r7, pc}
	...

0801929c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801929c:	b580      	push	{r7, lr}
 801929e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80192a0:	4914      	ldr	r1, [pc, #80]	@ (80192f4 <MX_USB_DEVICE_Init+0x58>)
 80192a2:	4b15      	ldr	r3, [pc, #84]	@ (80192f8 <MX_USB_DEVICE_Init+0x5c>)
 80192a4:	2200      	movs	r2, #0
 80192a6:	0018      	movs	r0, r3
 80192a8:	f7fe fdec 	bl	8017e84 <USBD_Init>
 80192ac:	1e03      	subs	r3, r0, #0
 80192ae:	d001      	beq.n	80192b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80192b0:	f7ee f9a6 	bl	8007600 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80192b4:	4a11      	ldr	r2, [pc, #68]	@ (80192fc <MX_USB_DEVICE_Init+0x60>)
 80192b6:	4b10      	ldr	r3, [pc, #64]	@ (80192f8 <MX_USB_DEVICE_Init+0x5c>)
 80192b8:	0011      	movs	r1, r2
 80192ba:	0018      	movs	r0, r3
 80192bc:	f7fe fe13 	bl	8017ee6 <USBD_RegisterClass>
 80192c0:	1e03      	subs	r3, r0, #0
 80192c2:	d001      	beq.n	80192c8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80192c4:	f7ee f99c 	bl	8007600 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80192c8:	4a0d      	ldr	r2, [pc, #52]	@ (8019300 <MX_USB_DEVICE_Init+0x64>)
 80192ca:	4b0b      	ldr	r3, [pc, #44]	@ (80192f8 <MX_USB_DEVICE_Init+0x5c>)
 80192cc:	0011      	movs	r1, r2
 80192ce:	0018      	movs	r0, r3
 80192d0:	f7fe fd28 	bl	8017d24 <USBD_CDC_RegisterInterface>
 80192d4:	1e03      	subs	r3, r0, #0
 80192d6:	d001      	beq.n	80192dc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80192d8:	f7ee f992 	bl	8007600 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80192dc:	4b06      	ldr	r3, [pc, #24]	@ (80192f8 <MX_USB_DEVICE_Init+0x5c>)
 80192de:	0018      	movs	r0, r3
 80192e0:	f7fe fe21 	bl	8017f26 <USBD_Start>
 80192e4:	1e03      	subs	r3, r0, #0
 80192e6:	d001      	beq.n	80192ec <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80192e8:	f7ee f98a 	bl	8007600 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80192ec:	46c0      	nop			@ (mov r8, r8)
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	46c0      	nop			@ (mov r8, r8)
 80192f4:	200001fc 	.word	0x200001fc
 80192f8:	200024dc 	.word	0x200024dc
 80192fc:	200000e8 	.word	0x200000e8
 8019300:	200001ec 	.word	0x200001ec

08019304 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019308:	4907      	ldr	r1, [pc, #28]	@ (8019328 <CDC_Init_FS+0x24>)
 801930a:	4b08      	ldr	r3, [pc, #32]	@ (801932c <CDC_Init_FS+0x28>)
 801930c:	2200      	movs	r2, #0
 801930e:	0018      	movs	r0, r3
 8019310:	f7fe fd23 	bl	8017d5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019314:	4a06      	ldr	r2, [pc, #24]	@ (8019330 <CDC_Init_FS+0x2c>)
 8019316:	4b05      	ldr	r3, [pc, #20]	@ (801932c <CDC_Init_FS+0x28>)
 8019318:	0011      	movs	r1, r2
 801931a:	0018      	movs	r0, r3
 801931c:	f7fe fd39 	bl	8017d92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019320:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019322:	0018      	movs	r0, r3
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}
 8019328:	20002c60 	.word	0x20002c60
 801932c:	200024dc 	.word	0x200024dc
 8019330:	20002860 	.word	0x20002860

08019334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801933a:	0018      	movs	r0, r3
 801933c:	46bd      	mov	sp, r7
 801933e:	bd80      	pop	{r7, pc}

08019340 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b082      	sub	sp, #8
 8019344:	af00      	add	r7, sp, #0
 8019346:	6039      	str	r1, [r7, #0]
 8019348:	0011      	movs	r1, r2
 801934a:	1dfb      	adds	r3, r7, #7
 801934c:	1c02      	adds	r2, r0, #0
 801934e:	701a      	strb	r2, [r3, #0]
 8019350:	1d3b      	adds	r3, r7, #4
 8019352:	1c0a      	adds	r2, r1, #0
 8019354:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019356:	1dfb      	adds	r3, r7, #7
 8019358:	781b      	ldrb	r3, [r3, #0]
 801935a:	2b23      	cmp	r3, #35	@ 0x23
 801935c:	d804      	bhi.n	8019368 <CDC_Control_FS+0x28>
 801935e:	009a      	lsls	r2, r3, #2
 8019360:	4b04      	ldr	r3, [pc, #16]	@ (8019374 <CDC_Control_FS+0x34>)
 8019362:	18d3      	adds	r3, r2, r3
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019368:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801936a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801936c:	0018      	movs	r0, r3
 801936e:	46bd      	mov	sp, r7
 8019370:	b002      	add	sp, #8
 8019372:	bd80      	pop	{r7, pc}
 8019374:	08020cbc 	.word	0x08020cbc

08019378 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b082      	sub	sp, #8
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
 8019380:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8019382:	4b12      	ldr	r3, [pc, #72]	@ (80193cc <CDC_Receive_FS+0x54>)
 8019384:	781b      	ldrb	r3, [r3, #0]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d013      	beq.n	80193b2 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	b29a      	uxth	r2, r3
 8019390:	2301      	movs	r3, #1
 8019392:	425b      	negs	r3, r3
 8019394:	6879      	ldr	r1, [r7, #4]
 8019396:	480e      	ldr	r0, [pc, #56]	@ (80193d0 <CDC_Receive_FS+0x58>)
 8019398:	f7fa fa46 	bl	8013828 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801939c:	687a      	ldr	r2, [r7, #4]
 801939e:	4b0d      	ldr	r3, [pc, #52]	@ (80193d4 <CDC_Receive_FS+0x5c>)
 80193a0:	0011      	movs	r1, r2
 80193a2:	0018      	movs	r0, r3
 80193a4:	f7fe fcf5 	bl	8017d92 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80193a8:	4b0a      	ldr	r3, [pc, #40]	@ (80193d4 <CDC_Receive_FS+0x5c>)
 80193aa:	0018      	movs	r0, r3
 80193ac:	f7fe fd3c 	bl	8017e28 <USBD_CDC_ReceivePacket>
 80193b0:	e006      	b.n	80193c0 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	681a      	ldr	r2, [r3, #0]
 80193b6:	4b08      	ldr	r3, [pc, #32]	@ (80193d8 <CDC_Receive_FS+0x60>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	18d2      	adds	r2, r2, r3
 80193bc:	4b06      	ldr	r3, [pc, #24]	@ (80193d8 <CDC_Receive_FS+0x60>)
 80193be:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80193c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80193c2:	0018      	movs	r0, r3
 80193c4:	46bd      	mov	sp, r7
 80193c6:	b002      	add	sp, #8
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	46c0      	nop			@ (mov r8, r8)
 80193cc:	200027a0 	.word	0x200027a0
 80193d0:	200027a4 	.word	0x200027a4
 80193d4:	200024dc 	.word	0x200024dc
 80193d8:	2000285c 	.word	0x2000285c

080193dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80193dc:	b5b0      	push	{r4, r5, r7, lr}
 80193de:	b084      	sub	sp, #16
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
 80193e4:	000a      	movs	r2, r1
 80193e6:	1cbb      	adds	r3, r7, #2
 80193e8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80193ea:	230f      	movs	r3, #15
 80193ec:	18fb      	adds	r3, r7, r3
 80193ee:	2200      	movs	r2, #0
 80193f0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80193f2:	4a11      	ldr	r2, [pc, #68]	@ (8019438 <CDC_Transmit_FS+0x5c>)
 80193f4:	23ae      	movs	r3, #174	@ 0xae
 80193f6:	009b      	lsls	r3, r3, #2
 80193f8:	58d3      	ldr	r3, [r2, r3]
 80193fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80193fc:	68ba      	ldr	r2, [r7, #8]
 80193fe:	2385      	movs	r3, #133	@ 0x85
 8019400:	009b      	lsls	r3, r3, #2
 8019402:	58d3      	ldr	r3, [r2, r3]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d001      	beq.n	801940c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8019408:	2301      	movs	r3, #1
 801940a:	e010      	b.n	801942e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801940c:	1cbb      	adds	r3, r7, #2
 801940e:	881a      	ldrh	r2, [r3, #0]
 8019410:	6879      	ldr	r1, [r7, #4]
 8019412:	4b09      	ldr	r3, [pc, #36]	@ (8019438 <CDC_Transmit_FS+0x5c>)
 8019414:	0018      	movs	r0, r3
 8019416:	f7fe fca0 	bl	8017d5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801941a:	250f      	movs	r5, #15
 801941c:	197c      	adds	r4, r7, r5
 801941e:	4b06      	ldr	r3, [pc, #24]	@ (8019438 <CDC_Transmit_FS+0x5c>)
 8019420:	0018      	movs	r0, r3
 8019422:	f7fe fcca 	bl	8017dba <USBD_CDC_TransmitPacket>
 8019426:	0003      	movs	r3, r0
 8019428:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801942a:	197b      	adds	r3, r7, r5
 801942c:	781b      	ldrb	r3, [r3, #0]
}
 801942e:	0018      	movs	r0, r3
 8019430:	46bd      	mov	sp, r7
 8019432:	b004      	add	sp, #16
 8019434:	bdb0      	pop	{r4, r5, r7, pc}
 8019436:	46c0      	nop			@ (mov r8, r8)
 8019438:	200024dc 	.word	0x200024dc

0801943c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801943c:	b580      	push	{r7, lr}
 801943e:	af00      	add	r7, sp, #0
  ESPProg = true;
 8019440:	4b02      	ldr	r3, [pc, #8]	@ (801944c <EnableESPProg+0x10>)
 8019442:	2201      	movs	r2, #1
 8019444:	701a      	strb	r2, [r3, #0]
}
 8019446:	46c0      	nop			@ (mov r8, r8)
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}
 801944c:	200027a0 	.word	0x200027a0

08019450 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8019454:	4b01      	ldr	r3, [pc, #4]	@ (801945c <GetUsbRxPointer+0xc>)
}
 8019456:	0018      	movs	r0, r3
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}
 801945c:	20002860 	.word	0x20002860

08019460 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8019460:	b580      	push	{r7, lr}
 8019462:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8019464:	4b07      	ldr	r3, [pc, #28]	@ (8019484 <ResetUsbRxDataSize+0x24>)
 8019466:	2200      	movs	r2, #0
 8019468:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801946a:	4a07      	ldr	r2, [pc, #28]	@ (8019488 <ResetUsbRxDataSize+0x28>)
 801946c:	4b07      	ldr	r3, [pc, #28]	@ (801948c <ResetUsbRxDataSize+0x2c>)
 801946e:	0011      	movs	r1, r2
 8019470:	0018      	movs	r0, r3
 8019472:	f7fe fc8e 	bl	8017d92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019476:	4b05      	ldr	r3, [pc, #20]	@ (801948c <ResetUsbRxDataSize+0x2c>)
 8019478:	0018      	movs	r0, r3
 801947a:	f7fe fcd5 	bl	8017e28 <USBD_CDC_ReceivePacket>
}
 801947e:	46c0      	nop			@ (mov r8, r8)
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}
 8019484:	2000285c 	.word	0x2000285c
 8019488:	20002860 	.word	0x20002860
 801948c:	200024dc 	.word	0x200024dc

08019490 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8019490:	b580      	push	{r7, lr}
 8019492:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8019494:	4b02      	ldr	r3, [pc, #8]	@ (80194a0 <GetUsbRxDataSize+0x10>)
 8019496:	681b      	ldr	r3, [r3, #0]
}
 8019498:	0018      	movs	r0, r3
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}
 801949e:	46c0      	nop			@ (mov r8, r8)
 80194a0:	2000285c 	.word	0x2000285c

080194a4 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b082      	sub	sp, #8
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 80194ac:	687a      	ldr	r2, [r7, #4]
 80194ae:	4b07      	ldr	r3, [pc, #28]	@ (80194cc <GetUsbRxNextChunk+0x28>)
 80194b0:	18d2      	adds	r2, r2, r3
 80194b2:	4b07      	ldr	r3, [pc, #28]	@ (80194d0 <GetUsbRxNextChunk+0x2c>)
 80194b4:	0011      	movs	r1, r2
 80194b6:	0018      	movs	r0, r3
 80194b8:	f7fe fc6b 	bl	8017d92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80194bc:	4b04      	ldr	r3, [pc, #16]	@ (80194d0 <GetUsbRxNextChunk+0x2c>)
 80194be:	0018      	movs	r0, r3
 80194c0:	f7fe fcb2 	bl	8017e28 <USBD_CDC_ReceivePacket>
}
 80194c4:	46c0      	nop			@ (mov r8, r8)
 80194c6:	46bd      	mov	sp, r7
 80194c8:	b002      	add	sp, #8
 80194ca:	bd80      	pop	{r7, pc}
 80194cc:	20002860 	.word	0x20002860
 80194d0:	200024dc 	.word	0x200024dc

080194d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b082      	sub	sp, #8
 80194d8:	af00      	add	r7, sp, #0
 80194da:	0002      	movs	r2, r0
 80194dc:	6039      	str	r1, [r7, #0]
 80194de:	1dfb      	adds	r3, r7, #7
 80194e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80194e2:	683b      	ldr	r3, [r7, #0]
 80194e4:	2212      	movs	r2, #18
 80194e6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80194e8:	4b02      	ldr	r3, [pc, #8]	@ (80194f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80194ea:	0018      	movs	r0, r3
 80194ec:	46bd      	mov	sp, r7
 80194ee:	b002      	add	sp, #8
 80194f0:	bd80      	pop	{r7, pc}
 80194f2:	46c0      	nop			@ (mov r8, r8)
 80194f4:	20000218 	.word	0x20000218

080194f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b082      	sub	sp, #8
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	0002      	movs	r2, r0
 8019500:	6039      	str	r1, [r7, #0]
 8019502:	1dfb      	adds	r3, r7, #7
 8019504:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019506:	683b      	ldr	r3, [r7, #0]
 8019508:	2204      	movs	r2, #4
 801950a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801950c:	4b02      	ldr	r3, [pc, #8]	@ (8019518 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801950e:	0018      	movs	r0, r3
 8019510:	46bd      	mov	sp, r7
 8019512:	b002      	add	sp, #8
 8019514:	bd80      	pop	{r7, pc}
 8019516:	46c0      	nop			@ (mov r8, r8)
 8019518:	2000022c 	.word	0x2000022c

0801951c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b082      	sub	sp, #8
 8019520:	af00      	add	r7, sp, #0
 8019522:	0002      	movs	r2, r0
 8019524:	6039      	str	r1, [r7, #0]
 8019526:	1dfb      	adds	r3, r7, #7
 8019528:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801952a:	1dfb      	adds	r3, r7, #7
 801952c:	781b      	ldrb	r3, [r3, #0]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d106      	bne.n	8019540 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019532:	683a      	ldr	r2, [r7, #0]
 8019534:	4908      	ldr	r1, [pc, #32]	@ (8019558 <USBD_FS_ProductStrDescriptor+0x3c>)
 8019536:	4b09      	ldr	r3, [pc, #36]	@ (801955c <USBD_FS_ProductStrDescriptor+0x40>)
 8019538:	0018      	movs	r0, r3
 801953a:	f7ff fdb1 	bl	80190a0 <USBD_GetString>
 801953e:	e005      	b.n	801954c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019540:	683a      	ldr	r2, [r7, #0]
 8019542:	4905      	ldr	r1, [pc, #20]	@ (8019558 <USBD_FS_ProductStrDescriptor+0x3c>)
 8019544:	4b05      	ldr	r3, [pc, #20]	@ (801955c <USBD_FS_ProductStrDescriptor+0x40>)
 8019546:	0018      	movs	r0, r3
 8019548:	f7ff fdaa 	bl	80190a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801954c:	4b02      	ldr	r3, [pc, #8]	@ (8019558 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801954e:	0018      	movs	r0, r3
 8019550:	46bd      	mov	sp, r7
 8019552:	b002      	add	sp, #8
 8019554:	bd80      	pop	{r7, pc}
 8019556:	46c0      	nop			@ (mov r8, r8)
 8019558:	20003060 	.word	0x20003060
 801955c:	080207dc 	.word	0x080207dc

08019560 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b082      	sub	sp, #8
 8019564:	af00      	add	r7, sp, #0
 8019566:	0002      	movs	r2, r0
 8019568:	6039      	str	r1, [r7, #0]
 801956a:	1dfb      	adds	r3, r7, #7
 801956c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801956e:	683a      	ldr	r2, [r7, #0]
 8019570:	4904      	ldr	r1, [pc, #16]	@ (8019584 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019572:	4b05      	ldr	r3, [pc, #20]	@ (8019588 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8019574:	0018      	movs	r0, r3
 8019576:	f7ff fd93 	bl	80190a0 <USBD_GetString>
  return USBD_StrDesc;
 801957a:	4b02      	ldr	r3, [pc, #8]	@ (8019584 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801957c:	0018      	movs	r0, r3
 801957e:	46bd      	mov	sp, r7
 8019580:	b002      	add	sp, #8
 8019582:	bd80      	pop	{r7, pc}
 8019584:	20003060 	.word	0x20003060
 8019588:	080207f4 	.word	0x080207f4

0801958c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b082      	sub	sp, #8
 8019590:	af00      	add	r7, sp, #0
 8019592:	0002      	movs	r2, r0
 8019594:	6039      	str	r1, [r7, #0]
 8019596:	1dfb      	adds	r3, r7, #7
 8019598:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801959a:	683b      	ldr	r3, [r7, #0]
 801959c:	221a      	movs	r2, #26
 801959e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80195a0:	f000 f84c 	bl	801963c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80195a4:	4b02      	ldr	r3, [pc, #8]	@ (80195b0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80195a6:	0018      	movs	r0, r3
 80195a8:	46bd      	mov	sp, r7
 80195aa:	b002      	add	sp, #8
 80195ac:	bd80      	pop	{r7, pc}
 80195ae:	46c0      	nop			@ (mov r8, r8)
 80195b0:	20000230 	.word	0x20000230

080195b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	0002      	movs	r2, r0
 80195bc:	6039      	str	r1, [r7, #0]
 80195be:	1dfb      	adds	r3, r7, #7
 80195c0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80195c2:	1dfb      	adds	r3, r7, #7
 80195c4:	781b      	ldrb	r3, [r3, #0]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d106      	bne.n	80195d8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80195ca:	683a      	ldr	r2, [r7, #0]
 80195cc:	4908      	ldr	r1, [pc, #32]	@ (80195f0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80195ce:	4b09      	ldr	r3, [pc, #36]	@ (80195f4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80195d0:	0018      	movs	r0, r3
 80195d2:	f7ff fd65 	bl	80190a0 <USBD_GetString>
 80195d6:	e005      	b.n	80195e4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80195d8:	683a      	ldr	r2, [r7, #0]
 80195da:	4905      	ldr	r1, [pc, #20]	@ (80195f0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80195dc:	4b05      	ldr	r3, [pc, #20]	@ (80195f4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80195de:	0018      	movs	r0, r3
 80195e0:	f7ff fd5e 	bl	80190a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80195e4:	4b02      	ldr	r3, [pc, #8]	@ (80195f0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80195e6:	0018      	movs	r0, r3
 80195e8:	46bd      	mov	sp, r7
 80195ea:	b002      	add	sp, #8
 80195ec:	bd80      	pop	{r7, pc}
 80195ee:	46c0      	nop			@ (mov r8, r8)
 80195f0:	20003060 	.word	0x20003060
 80195f4:	08020808 	.word	0x08020808

080195f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b082      	sub	sp, #8
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	0002      	movs	r2, r0
 8019600:	6039      	str	r1, [r7, #0]
 8019602:	1dfb      	adds	r3, r7, #7
 8019604:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8019606:	1dfb      	adds	r3, r7, #7
 8019608:	781b      	ldrb	r3, [r3, #0]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d106      	bne.n	801961c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801960e:	683a      	ldr	r2, [r7, #0]
 8019610:	4908      	ldr	r1, [pc, #32]	@ (8019634 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8019612:	4b09      	ldr	r3, [pc, #36]	@ (8019638 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8019614:	0018      	movs	r0, r3
 8019616:	f7ff fd43 	bl	80190a0 <USBD_GetString>
 801961a:	e005      	b.n	8019628 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801961c:	683a      	ldr	r2, [r7, #0]
 801961e:	4905      	ldr	r1, [pc, #20]	@ (8019634 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8019620:	4b05      	ldr	r3, [pc, #20]	@ (8019638 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8019622:	0018      	movs	r0, r3
 8019624:	f7ff fd3c 	bl	80190a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019628:	4b02      	ldr	r3, [pc, #8]	@ (8019634 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801962a:	0018      	movs	r0, r3
 801962c:	46bd      	mov	sp, r7
 801962e:	b002      	add	sp, #8
 8019630:	bd80      	pop	{r7, pc}
 8019632:	46c0      	nop			@ (mov r8, r8)
 8019634:	20003060 	.word	0x20003060
 8019638:	08020814 	.word	0x08020814

0801963c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b084      	sub	sp, #16
 8019640:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019642:	4b10      	ldr	r3, [pc, #64]	@ (8019684 <Get_SerialNum+0x48>)
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019648:	4b0f      	ldr	r3, [pc, #60]	@ (8019688 <Get_SerialNum+0x4c>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801964e:	4b0f      	ldr	r3, [pc, #60]	@ (801968c <Get_SerialNum+0x50>)
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019654:	68fa      	ldr	r2, [r7, #12]
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	18d3      	adds	r3, r2, r3
 801965a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d00b      	beq.n	801967a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019662:	490b      	ldr	r1, [pc, #44]	@ (8019690 <Get_SerialNum+0x54>)
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	2208      	movs	r2, #8
 8019668:	0018      	movs	r0, r3
 801966a:	f000 f815 	bl	8019698 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801966e:	4909      	ldr	r1, [pc, #36]	@ (8019694 <Get_SerialNum+0x58>)
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	2204      	movs	r2, #4
 8019674:	0018      	movs	r0, r3
 8019676:	f000 f80f 	bl	8019698 <IntToUnicode>
  }
}
 801967a:	46c0      	nop			@ (mov r8, r8)
 801967c:	46bd      	mov	sp, r7
 801967e:	b004      	add	sp, #16
 8019680:	bd80      	pop	{r7, pc}
 8019682:	46c0      	nop			@ (mov r8, r8)
 8019684:	1ff80050 	.word	0x1ff80050
 8019688:	1ff80054 	.word	0x1ff80054
 801968c:	1ff80058 	.word	0x1ff80058
 8019690:	20000232 	.word	0x20000232
 8019694:	20000242 	.word	0x20000242

08019698 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019698:	b580      	push	{r7, lr}
 801969a:	b086      	sub	sp, #24
 801969c:	af00      	add	r7, sp, #0
 801969e:	60f8      	str	r0, [r7, #12]
 80196a0:	60b9      	str	r1, [r7, #8]
 80196a2:	1dfb      	adds	r3, r7, #7
 80196a4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80196a6:	2117      	movs	r1, #23
 80196a8:	187b      	adds	r3, r7, r1
 80196aa:	2200      	movs	r2, #0
 80196ac:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80196ae:	187b      	adds	r3, r7, r1
 80196b0:	2200      	movs	r2, #0
 80196b2:	701a      	strb	r2, [r3, #0]
 80196b4:	e02f      	b.n	8019716 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	0f1b      	lsrs	r3, r3, #28
 80196ba:	2b09      	cmp	r3, #9
 80196bc:	d80d      	bhi.n	80196da <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	0f1b      	lsrs	r3, r3, #28
 80196c2:	b2da      	uxtb	r2, r3
 80196c4:	2317      	movs	r3, #23
 80196c6:	18fb      	adds	r3, r7, r3
 80196c8:	781b      	ldrb	r3, [r3, #0]
 80196ca:	005b      	lsls	r3, r3, #1
 80196cc:	0019      	movs	r1, r3
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	185b      	adds	r3, r3, r1
 80196d2:	3230      	adds	r2, #48	@ 0x30
 80196d4:	b2d2      	uxtb	r2, r2
 80196d6:	701a      	strb	r2, [r3, #0]
 80196d8:	e00c      	b.n	80196f4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	0f1b      	lsrs	r3, r3, #28
 80196de:	b2da      	uxtb	r2, r3
 80196e0:	2317      	movs	r3, #23
 80196e2:	18fb      	adds	r3, r7, r3
 80196e4:	781b      	ldrb	r3, [r3, #0]
 80196e6:	005b      	lsls	r3, r3, #1
 80196e8:	0019      	movs	r1, r3
 80196ea:	68bb      	ldr	r3, [r7, #8]
 80196ec:	185b      	adds	r3, r3, r1
 80196ee:	3237      	adds	r2, #55	@ 0x37
 80196f0:	b2d2      	uxtb	r2, r2
 80196f2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	011b      	lsls	r3, r3, #4
 80196f8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80196fa:	2117      	movs	r1, #23
 80196fc:	187b      	adds	r3, r7, r1
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	005b      	lsls	r3, r3, #1
 8019702:	3301      	adds	r3, #1
 8019704:	68ba      	ldr	r2, [r7, #8]
 8019706:	18d3      	adds	r3, r2, r3
 8019708:	2200      	movs	r2, #0
 801970a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801970c:	187b      	adds	r3, r7, r1
 801970e:	781a      	ldrb	r2, [r3, #0]
 8019710:	187b      	adds	r3, r7, r1
 8019712:	3201      	adds	r2, #1
 8019714:	701a      	strb	r2, [r3, #0]
 8019716:	2317      	movs	r3, #23
 8019718:	18fa      	adds	r2, r7, r3
 801971a:	1dfb      	adds	r3, r7, #7
 801971c:	7812      	ldrb	r2, [r2, #0]
 801971e:	781b      	ldrb	r3, [r3, #0]
 8019720:	429a      	cmp	r2, r3
 8019722:	d3c8      	bcc.n	80196b6 <IntToUnicode+0x1e>
  }
}
 8019724:	46c0      	nop			@ (mov r8, r8)
 8019726:	46c0      	nop			@ (mov r8, r8)
 8019728:	46bd      	mov	sp, r7
 801972a:	b006      	add	sp, #24
 801972c:	bd80      	pop	{r7, pc}
	...

08019730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b082      	sub	sp, #8
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	4a0a      	ldr	r2, [pc, #40]	@ (8019768 <HAL_PCD_MspInit+0x38>)
 801973e:	4293      	cmp	r3, r2
 8019740:	d10e      	bne.n	8019760 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019742:	4b0a      	ldr	r3, [pc, #40]	@ (801976c <HAL_PCD_MspInit+0x3c>)
 8019744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019746:	4b09      	ldr	r3, [pc, #36]	@ (801976c <HAL_PCD_MspInit+0x3c>)
 8019748:	2180      	movs	r1, #128	@ 0x80
 801974a:	0409      	lsls	r1, r1, #16
 801974c:	430a      	orrs	r2, r1
 801974e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8019750:	2200      	movs	r2, #0
 8019752:	2100      	movs	r1, #0
 8019754:	201f      	movs	r0, #31
 8019756:	f7f3 f8d7 	bl	800c908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801975a:	201f      	movs	r0, #31
 801975c:	f7f3 f8e9 	bl	800c932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019760:	46c0      	nop			@ (mov r8, r8)
 8019762:	46bd      	mov	sp, r7
 8019764:	b002      	add	sp, #8
 8019766:	bd80      	pop	{r7, pc}
 8019768:	40005c00 	.word	0x40005c00
 801976c:	40021000 	.word	0x40021000

08019770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b082      	sub	sp, #8
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019778:	687a      	ldr	r2, [r7, #4]
 801977a:	23bc      	movs	r3, #188	@ 0xbc
 801977c:	009b      	lsls	r3, r3, #2
 801977e:	58d2      	ldr	r2, [r2, r3]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	21ac      	movs	r1, #172	@ 0xac
 8019784:	0089      	lsls	r1, r1, #2
 8019786:	468c      	mov	ip, r1
 8019788:	4463      	add	r3, ip
 801978a:	0019      	movs	r1, r3
 801978c:	0010      	movs	r0, r2
 801978e:	f7fe fc1d 	bl	8017fcc <USBD_LL_SetupStage>
}
 8019792:	46c0      	nop			@ (mov r8, r8)
 8019794:	46bd      	mov	sp, r7
 8019796:	b002      	add	sp, #8
 8019798:	bd80      	pop	{r7, pc}

0801979a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801979a:	b590      	push	{r4, r7, lr}
 801979c:	b083      	sub	sp, #12
 801979e:	af00      	add	r7, sp, #0
 80197a0:	6078      	str	r0, [r7, #4]
 80197a2:	000a      	movs	r2, r1
 80197a4:	1cfb      	adds	r3, r7, #3
 80197a6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80197a8:	687a      	ldr	r2, [r7, #4]
 80197aa:	23bc      	movs	r3, #188	@ 0xbc
 80197ac:	009b      	lsls	r3, r3, #2
 80197ae:	58d4      	ldr	r4, [r2, r3]
 80197b0:	1cfb      	adds	r3, r7, #3
 80197b2:	781a      	ldrb	r2, [r3, #0]
 80197b4:	6878      	ldr	r0, [r7, #4]
 80197b6:	23be      	movs	r3, #190	@ 0xbe
 80197b8:	0059      	lsls	r1, r3, #1
 80197ba:	0013      	movs	r3, r2
 80197bc:	009b      	lsls	r3, r3, #2
 80197be:	189b      	adds	r3, r3, r2
 80197c0:	00db      	lsls	r3, r3, #3
 80197c2:	18c3      	adds	r3, r0, r3
 80197c4:	185b      	adds	r3, r3, r1
 80197c6:	681a      	ldr	r2, [r3, #0]
 80197c8:	1cfb      	adds	r3, r7, #3
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	0019      	movs	r1, r3
 80197ce:	0020      	movs	r0, r4
 80197d0:	f7fe fc5a 	bl	8018088 <USBD_LL_DataOutStage>
}
 80197d4:	46c0      	nop			@ (mov r8, r8)
 80197d6:	46bd      	mov	sp, r7
 80197d8:	b003      	add	sp, #12
 80197da:	bd90      	pop	{r4, r7, pc}

080197dc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b082      	sub	sp, #8
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
 80197e4:	000a      	movs	r2, r1
 80197e6:	1cfb      	adds	r3, r7, #3
 80197e8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80197ea:	687a      	ldr	r2, [r7, #4]
 80197ec:	23bc      	movs	r3, #188	@ 0xbc
 80197ee:	009b      	lsls	r3, r3, #2
 80197f0:	58d0      	ldr	r0, [r2, r3]
 80197f2:	1cfb      	adds	r3, r7, #3
 80197f4:	781a      	ldrb	r2, [r3, #0]
 80197f6:	6879      	ldr	r1, [r7, #4]
 80197f8:	0013      	movs	r3, r2
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	189b      	adds	r3, r3, r2
 80197fe:	00db      	lsls	r3, r3, #3
 8019800:	18cb      	adds	r3, r1, r3
 8019802:	333c      	adds	r3, #60	@ 0x3c
 8019804:	681a      	ldr	r2, [r3, #0]
 8019806:	1cfb      	adds	r3, r7, #3
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	0019      	movs	r1, r3
 801980c:	f7fe fcbe 	bl	801818c <USBD_LL_DataInStage>
}
 8019810:	46c0      	nop			@ (mov r8, r8)
 8019812:	46bd      	mov	sp, r7
 8019814:	b002      	add	sp, #8
 8019816:	bd80      	pop	{r7, pc}

08019818 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b082      	sub	sp, #8
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019820:	687a      	ldr	r2, [r7, #4]
 8019822:	23bc      	movs	r3, #188	@ 0xbc
 8019824:	009b      	lsls	r3, r3, #2
 8019826:	58d3      	ldr	r3, [r2, r3]
 8019828:	0018      	movs	r0, r3
 801982a:	f7fe fdf5 	bl	8018418 <USBD_LL_SOF>
}
 801982e:	46c0      	nop			@ (mov r8, r8)
 8019830:	46bd      	mov	sp, r7
 8019832:	b002      	add	sp, #8
 8019834:	bd80      	pop	{r7, pc}

08019836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019836:	b580      	push	{r7, lr}
 8019838:	b084      	sub	sp, #16
 801983a:	af00      	add	r7, sp, #0
 801983c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801983e:	230f      	movs	r3, #15
 8019840:	18fb      	adds	r3, r7, r3
 8019842:	2201      	movs	r2, #1
 8019844:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	689b      	ldr	r3, [r3, #8]
 801984a:	2b02      	cmp	r3, #2
 801984c:	d001      	beq.n	8019852 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801984e:	f7ed fed7 	bl	8007600 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019852:	687a      	ldr	r2, [r7, #4]
 8019854:	23bc      	movs	r3, #188	@ 0xbc
 8019856:	009b      	lsls	r3, r3, #2
 8019858:	58d2      	ldr	r2, [r2, r3]
 801985a:	230f      	movs	r3, #15
 801985c:	18fb      	adds	r3, r7, r3
 801985e:	781b      	ldrb	r3, [r3, #0]
 8019860:	0019      	movs	r1, r3
 8019862:	0010      	movs	r0, r2
 8019864:	f7fe fd97 	bl	8018396 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	23bc      	movs	r3, #188	@ 0xbc
 801986c:	009b      	lsls	r3, r3, #2
 801986e:	58d3      	ldr	r3, [r2, r3]
 8019870:	0018      	movs	r0, r3
 8019872:	f7fe fd48 	bl	8018306 <USBD_LL_Reset>
}
 8019876:	46c0      	nop			@ (mov r8, r8)
 8019878:	46bd      	mov	sp, r7
 801987a:	b004      	add	sp, #16
 801987c:	bd80      	pop	{r7, pc}
	...

08019880 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019880:	b580      	push	{r7, lr}
 8019882:	b082      	sub	sp, #8
 8019884:	af00      	add	r7, sp, #0
 8019886:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019888:	687a      	ldr	r2, [r7, #4]
 801988a:	23bc      	movs	r3, #188	@ 0xbc
 801988c:	009b      	lsls	r3, r3, #2
 801988e:	58d3      	ldr	r3, [r2, r3]
 8019890:	0018      	movs	r0, r3
 8019892:	f7fe fd91 	bl	80183b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	699b      	ldr	r3, [r3, #24]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d005      	beq.n	80198aa <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801989e:	4b05      	ldr	r3, [pc, #20]	@ (80198b4 <HAL_PCD_SuspendCallback+0x34>)
 80198a0:	691a      	ldr	r2, [r3, #16]
 80198a2:	4b04      	ldr	r3, [pc, #16]	@ (80198b4 <HAL_PCD_SuspendCallback+0x34>)
 80198a4:	2106      	movs	r1, #6
 80198a6:	430a      	orrs	r2, r1
 80198a8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80198aa:	46c0      	nop			@ (mov r8, r8)
 80198ac:	46bd      	mov	sp, r7
 80198ae:	b002      	add	sp, #8
 80198b0:	bd80      	pop	{r7, pc}
 80198b2:	46c0      	nop			@ (mov r8, r8)
 80198b4:	e000ed00 	.word	0xe000ed00

080198b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b082      	sub	sp, #8
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	699b      	ldr	r3, [r3, #24]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d007      	beq.n	80198d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80198c8:	4b09      	ldr	r3, [pc, #36]	@ (80198f0 <HAL_PCD_ResumeCallback+0x38>)
 80198ca:	691a      	ldr	r2, [r3, #16]
 80198cc:	4b08      	ldr	r3, [pc, #32]	@ (80198f0 <HAL_PCD_ResumeCallback+0x38>)
 80198ce:	2106      	movs	r1, #6
 80198d0:	438a      	bics	r2, r1
 80198d2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80198d4:	f000 fa44 	bl	8019d60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80198d8:	687a      	ldr	r2, [r7, #4]
 80198da:	23bc      	movs	r3, #188	@ 0xbc
 80198dc:	009b      	lsls	r3, r3, #2
 80198de:	58d3      	ldr	r3, [r2, r3]
 80198e0:	0018      	movs	r0, r3
 80198e2:	f7fe fd81 	bl	80183e8 <USBD_LL_Resume>
}
 80198e6:	46c0      	nop			@ (mov r8, r8)
 80198e8:	46bd      	mov	sp, r7
 80198ea:	b002      	add	sp, #8
 80198ec:	bd80      	pop	{r7, pc}
 80198ee:	46c0      	nop			@ (mov r8, r8)
 80198f0:	e000ed00 	.word	0xe000ed00

080198f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80198fc:	4a2d      	ldr	r2, [pc, #180]	@ (80199b4 <USBD_LL_Init+0xc0>)
 80198fe:	23bc      	movs	r3, #188	@ 0xbc
 8019900:	009b      	lsls	r3, r3, #2
 8019902:	6879      	ldr	r1, [r7, #4]
 8019904:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8019906:	687a      	ldr	r2, [r7, #4]
 8019908:	23b0      	movs	r3, #176	@ 0xb0
 801990a:	009b      	lsls	r3, r3, #2
 801990c:	4929      	ldr	r1, [pc, #164]	@ (80199b4 <USBD_LL_Init+0xc0>)
 801990e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8019910:	4b28      	ldr	r3, [pc, #160]	@ (80199b4 <USBD_LL_Init+0xc0>)
 8019912:	4a29      	ldr	r2, [pc, #164]	@ (80199b8 <USBD_LL_Init+0xc4>)
 8019914:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019916:	4b27      	ldr	r3, [pc, #156]	@ (80199b4 <USBD_LL_Init+0xc0>)
 8019918:	2208      	movs	r2, #8
 801991a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801991c:	4b25      	ldr	r3, [pc, #148]	@ (80199b4 <USBD_LL_Init+0xc0>)
 801991e:	2202      	movs	r2, #2
 8019920:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019922:	4b24      	ldr	r3, [pc, #144]	@ (80199b4 <USBD_LL_Init+0xc0>)
 8019924:	2202      	movs	r2, #2
 8019926:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019928:	4b22      	ldr	r3, [pc, #136]	@ (80199b4 <USBD_LL_Init+0xc0>)
 801992a:	2200      	movs	r2, #0
 801992c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801992e:	4b21      	ldr	r3, [pc, #132]	@ (80199b4 <USBD_LL_Init+0xc0>)
 8019930:	2200      	movs	r2, #0
 8019932:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019934:	4b1f      	ldr	r3, [pc, #124]	@ (80199b4 <USBD_LL_Init+0xc0>)
 8019936:	2200      	movs	r2, #0
 8019938:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801993a:	4b1e      	ldr	r3, [pc, #120]	@ (80199b4 <USBD_LL_Init+0xc0>)
 801993c:	0018      	movs	r0, r3
 801993e:	f7f6 f90b 	bl	800fb58 <HAL_PCD_Init>
 8019942:	1e03      	subs	r3, r0, #0
 8019944:	d001      	beq.n	801994a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8019946:	f7ed fe5b 	bl	8007600 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801994a:	687a      	ldr	r2, [r7, #4]
 801994c:	23b0      	movs	r3, #176	@ 0xb0
 801994e:	009b      	lsls	r3, r3, #2
 8019950:	58d0      	ldr	r0, [r2, r3]
 8019952:	2318      	movs	r3, #24
 8019954:	2200      	movs	r2, #0
 8019956:	2100      	movs	r1, #0
 8019958:	f7f7 fecc 	bl	80116f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801995c:	687a      	ldr	r2, [r7, #4]
 801995e:	23b0      	movs	r3, #176	@ 0xb0
 8019960:	009b      	lsls	r3, r3, #2
 8019962:	58d0      	ldr	r0, [r2, r3]
 8019964:	2358      	movs	r3, #88	@ 0x58
 8019966:	2200      	movs	r2, #0
 8019968:	2180      	movs	r1, #128	@ 0x80
 801996a:	f7f7 fec3 	bl	80116f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801996e:	687a      	ldr	r2, [r7, #4]
 8019970:	23b0      	movs	r3, #176	@ 0xb0
 8019972:	009b      	lsls	r3, r3, #2
 8019974:	58d0      	ldr	r0, [r2, r3]
 8019976:	23c0      	movs	r3, #192	@ 0xc0
 8019978:	2200      	movs	r2, #0
 801997a:	2181      	movs	r1, #129	@ 0x81
 801997c:	f7f7 feba 	bl	80116f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019980:	687a      	ldr	r2, [r7, #4]
 8019982:	23b0      	movs	r3, #176	@ 0xb0
 8019984:	009b      	lsls	r3, r3, #2
 8019986:	58d0      	ldr	r0, [r2, r3]
 8019988:	2388      	movs	r3, #136	@ 0x88
 801998a:	005b      	lsls	r3, r3, #1
 801998c:	2200      	movs	r2, #0
 801998e:	2101      	movs	r1, #1
 8019990:	f7f7 feb0 	bl	80116f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019994:	687a      	ldr	r2, [r7, #4]
 8019996:	23b0      	movs	r3, #176	@ 0xb0
 8019998:	009b      	lsls	r3, r3, #2
 801999a:	58d0      	ldr	r0, [r2, r3]
 801999c:	2380      	movs	r3, #128	@ 0x80
 801999e:	005b      	lsls	r3, r3, #1
 80199a0:	2200      	movs	r2, #0
 80199a2:	2182      	movs	r1, #130	@ 0x82
 80199a4:	f7f7 fea6 	bl	80116f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80199a8:	2300      	movs	r3, #0
}
 80199aa:	0018      	movs	r0, r3
 80199ac:	46bd      	mov	sp, r7
 80199ae:	b002      	add	sp, #8
 80199b0:	bd80      	pop	{r7, pc}
 80199b2:	46c0      	nop			@ (mov r8, r8)
 80199b4:	20003260 	.word	0x20003260
 80199b8:	40005c00 	.word	0x40005c00

080199bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80199bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199be:	b085      	sub	sp, #20
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199c4:	210f      	movs	r1, #15
 80199c6:	187b      	adds	r3, r7, r1
 80199c8:	2200      	movs	r2, #0
 80199ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199cc:	260e      	movs	r6, #14
 80199ce:	19bb      	adds	r3, r7, r6
 80199d0:	2200      	movs	r2, #0
 80199d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	23b0      	movs	r3, #176	@ 0xb0
 80199d8:	009b      	lsls	r3, r3, #2
 80199da:	58d3      	ldr	r3, [r2, r3]
 80199dc:	000d      	movs	r5, r1
 80199de:	187c      	adds	r4, r7, r1
 80199e0:	0018      	movs	r0, r3
 80199e2:	f7f6 f9b9 	bl	800fd58 <HAL_PCD_Start>
 80199e6:	0003      	movs	r3, r0
 80199e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199ea:	19bc      	adds	r4, r7, r6
 80199ec:	197b      	adds	r3, r7, r5
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	0018      	movs	r0, r3
 80199f2:	f000 f9bc 	bl	8019d6e <USBD_Get_USB_Status>
 80199f6:	0003      	movs	r3, r0
 80199f8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80199fa:	19bb      	adds	r3, r7, r6
 80199fc:	781b      	ldrb	r3, [r3, #0]
}
 80199fe:	0018      	movs	r0, r3
 8019a00:	46bd      	mov	sp, r7
 8019a02:	b005      	add	sp, #20
 8019a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a08:	b085      	sub	sp, #20
 8019a0a:	af00      	add	r7, sp, #0
 8019a0c:	6078      	str	r0, [r7, #4]
 8019a0e:	000c      	movs	r4, r1
 8019a10:	0010      	movs	r0, r2
 8019a12:	0019      	movs	r1, r3
 8019a14:	1cfb      	adds	r3, r7, #3
 8019a16:	1c22      	adds	r2, r4, #0
 8019a18:	701a      	strb	r2, [r3, #0]
 8019a1a:	1cbb      	adds	r3, r7, #2
 8019a1c:	1c02      	adds	r2, r0, #0
 8019a1e:	701a      	strb	r2, [r3, #0]
 8019a20:	003b      	movs	r3, r7
 8019a22:	1c0a      	adds	r2, r1, #0
 8019a24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a26:	260f      	movs	r6, #15
 8019a28:	19bb      	adds	r3, r7, r6
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a2e:	250e      	movs	r5, #14
 8019a30:	197b      	adds	r3, r7, r5
 8019a32:	2200      	movs	r2, #0
 8019a34:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019a36:	687a      	ldr	r2, [r7, #4]
 8019a38:	23b0      	movs	r3, #176	@ 0xb0
 8019a3a:	009b      	lsls	r3, r3, #2
 8019a3c:	58d0      	ldr	r0, [r2, r3]
 8019a3e:	19bc      	adds	r4, r7, r6
 8019a40:	1cbb      	adds	r3, r7, #2
 8019a42:	781d      	ldrb	r5, [r3, #0]
 8019a44:	003b      	movs	r3, r7
 8019a46:	881a      	ldrh	r2, [r3, #0]
 8019a48:	1cfb      	adds	r3, r7, #3
 8019a4a:	7819      	ldrb	r1, [r3, #0]
 8019a4c:	002b      	movs	r3, r5
 8019a4e:	f7f6 fb18 	bl	8010082 <HAL_PCD_EP_Open>
 8019a52:	0003      	movs	r3, r0
 8019a54:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a56:	250e      	movs	r5, #14
 8019a58:	197c      	adds	r4, r7, r5
 8019a5a:	19bb      	adds	r3, r7, r6
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	0018      	movs	r0, r3
 8019a60:	f000 f985 	bl	8019d6e <USBD_Get_USB_Status>
 8019a64:	0003      	movs	r3, r0
 8019a66:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019a68:	197b      	adds	r3, r7, r5
 8019a6a:	781b      	ldrb	r3, [r3, #0]
}
 8019a6c:	0018      	movs	r0, r3
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	b005      	add	sp, #20
 8019a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a74 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a76:	b085      	sub	sp, #20
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
 8019a7c:	000a      	movs	r2, r1
 8019a7e:	1cfb      	adds	r3, r7, #3
 8019a80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a82:	210f      	movs	r1, #15
 8019a84:	187b      	adds	r3, r7, r1
 8019a86:	2200      	movs	r2, #0
 8019a88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a8a:	260e      	movs	r6, #14
 8019a8c:	19bb      	adds	r3, r7, r6
 8019a8e:	2200      	movs	r2, #0
 8019a90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019a92:	687a      	ldr	r2, [r7, #4]
 8019a94:	23b0      	movs	r3, #176	@ 0xb0
 8019a96:	009b      	lsls	r3, r3, #2
 8019a98:	58d2      	ldr	r2, [r2, r3]
 8019a9a:	000d      	movs	r5, r1
 8019a9c:	187c      	adds	r4, r7, r1
 8019a9e:	1cfb      	adds	r3, r7, #3
 8019aa0:	781b      	ldrb	r3, [r3, #0]
 8019aa2:	0019      	movs	r1, r3
 8019aa4:	0010      	movs	r0, r2
 8019aa6:	f7f6 fb5b 	bl	8010160 <HAL_PCD_EP_Close>
 8019aaa:	0003      	movs	r3, r0
 8019aac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019aae:	19bc      	adds	r4, r7, r6
 8019ab0:	197b      	adds	r3, r7, r5
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	0018      	movs	r0, r3
 8019ab6:	f000 f95a 	bl	8019d6e <USBD_Get_USB_Status>
 8019aba:	0003      	movs	r3, r0
 8019abc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019abe:	19bb      	adds	r3, r7, r6
 8019ac0:	781b      	ldrb	r3, [r3, #0]
}
 8019ac2:	0018      	movs	r0, r3
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	b005      	add	sp, #20
 8019ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019aca <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019acc:	b085      	sub	sp, #20
 8019ace:	af00      	add	r7, sp, #0
 8019ad0:	6078      	str	r0, [r7, #4]
 8019ad2:	000a      	movs	r2, r1
 8019ad4:	1cfb      	adds	r3, r7, #3
 8019ad6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ad8:	210f      	movs	r1, #15
 8019ada:	187b      	adds	r3, r7, r1
 8019adc:	2200      	movs	r2, #0
 8019ade:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ae0:	260e      	movs	r6, #14
 8019ae2:	19bb      	adds	r3, r7, r6
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019ae8:	687a      	ldr	r2, [r7, #4]
 8019aea:	23b0      	movs	r3, #176	@ 0xb0
 8019aec:	009b      	lsls	r3, r3, #2
 8019aee:	58d2      	ldr	r2, [r2, r3]
 8019af0:	000d      	movs	r5, r1
 8019af2:	187c      	adds	r4, r7, r1
 8019af4:	1cfb      	adds	r3, r7, #3
 8019af6:	781b      	ldrb	r3, [r3, #0]
 8019af8:	0019      	movs	r1, r3
 8019afa:	0010      	movs	r0, r2
 8019afc:	f7f6 fc0d 	bl	801031a <HAL_PCD_EP_SetStall>
 8019b00:	0003      	movs	r3, r0
 8019b02:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b04:	19bc      	adds	r4, r7, r6
 8019b06:	197b      	adds	r3, r7, r5
 8019b08:	781b      	ldrb	r3, [r3, #0]
 8019b0a:	0018      	movs	r0, r3
 8019b0c:	f000 f92f 	bl	8019d6e <USBD_Get_USB_Status>
 8019b10:	0003      	movs	r3, r0
 8019b12:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019b14:	19bb      	adds	r3, r7, r6
 8019b16:	781b      	ldrb	r3, [r3, #0]
}
 8019b18:	0018      	movs	r0, r3
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	b005      	add	sp, #20
 8019b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b20 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b22:	b085      	sub	sp, #20
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
 8019b28:	000a      	movs	r2, r1
 8019b2a:	1cfb      	adds	r3, r7, #3
 8019b2c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b2e:	210f      	movs	r1, #15
 8019b30:	187b      	adds	r3, r7, r1
 8019b32:	2200      	movs	r2, #0
 8019b34:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b36:	260e      	movs	r6, #14
 8019b38:	19bb      	adds	r3, r7, r6
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	23b0      	movs	r3, #176	@ 0xb0
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	58d2      	ldr	r2, [r2, r3]
 8019b46:	000d      	movs	r5, r1
 8019b48:	187c      	adds	r4, r7, r1
 8019b4a:	1cfb      	adds	r3, r7, #3
 8019b4c:	781b      	ldrb	r3, [r3, #0]
 8019b4e:	0019      	movs	r1, r3
 8019b50:	0010      	movs	r0, r2
 8019b52:	f7f6 fc3e 	bl	80103d2 <HAL_PCD_EP_ClrStall>
 8019b56:	0003      	movs	r3, r0
 8019b58:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b5a:	19bc      	adds	r4, r7, r6
 8019b5c:	197b      	adds	r3, r7, r5
 8019b5e:	781b      	ldrb	r3, [r3, #0]
 8019b60:	0018      	movs	r0, r3
 8019b62:	f000 f904 	bl	8019d6e <USBD_Get_USB_Status>
 8019b66:	0003      	movs	r3, r0
 8019b68:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019b6a:	19bb      	adds	r3, r7, r6
 8019b6c:	781b      	ldrb	r3, [r3, #0]
}
 8019b6e:	0018      	movs	r0, r3
 8019b70:	46bd      	mov	sp, r7
 8019b72:	b005      	add	sp, #20
 8019b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b76 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b76:	b580      	push	{r7, lr}
 8019b78:	b084      	sub	sp, #16
 8019b7a:	af00      	add	r7, sp, #0
 8019b7c:	6078      	str	r0, [r7, #4]
 8019b7e:	000a      	movs	r2, r1
 8019b80:	1cfb      	adds	r3, r7, #3
 8019b82:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019b84:	687a      	ldr	r2, [r7, #4]
 8019b86:	23b0      	movs	r3, #176	@ 0xb0
 8019b88:	009b      	lsls	r3, r3, #2
 8019b8a:	58d3      	ldr	r3, [r2, r3]
 8019b8c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019b8e:	1cfb      	adds	r3, r7, #3
 8019b90:	781b      	ldrb	r3, [r3, #0]
 8019b92:	b25b      	sxtb	r3, r3
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	da0d      	bge.n	8019bb4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019b98:	1cfb      	adds	r3, r7, #3
 8019b9a:	781b      	ldrb	r3, [r3, #0]
 8019b9c:	227f      	movs	r2, #127	@ 0x7f
 8019b9e:	4013      	ands	r3, r2
 8019ba0:	68f9      	ldr	r1, [r7, #12]
 8019ba2:	1c5a      	adds	r2, r3, #1
 8019ba4:	0013      	movs	r3, r2
 8019ba6:	009b      	lsls	r3, r3, #2
 8019ba8:	189b      	adds	r3, r3, r2
 8019baa:	00db      	lsls	r3, r3, #3
 8019bac:	18cb      	adds	r3, r1, r3
 8019bae:	3302      	adds	r3, #2
 8019bb0:	781b      	ldrb	r3, [r3, #0]
 8019bb2:	e00d      	b.n	8019bd0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019bb4:	1cfb      	adds	r3, r7, #3
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	227f      	movs	r2, #127	@ 0x7f
 8019bba:	401a      	ands	r2, r3
 8019bbc:	68f8      	ldr	r0, [r7, #12]
 8019bbe:	23b5      	movs	r3, #181	@ 0xb5
 8019bc0:	0059      	lsls	r1, r3, #1
 8019bc2:	0013      	movs	r3, r2
 8019bc4:	009b      	lsls	r3, r3, #2
 8019bc6:	189b      	adds	r3, r3, r2
 8019bc8:	00db      	lsls	r3, r3, #3
 8019bca:	18c3      	adds	r3, r0, r3
 8019bcc:	185b      	adds	r3, r3, r1
 8019bce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019bd0:	0018      	movs	r0, r3
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	b004      	add	sp, #16
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bda:	b085      	sub	sp, #20
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	000a      	movs	r2, r1
 8019be2:	1cfb      	adds	r3, r7, #3
 8019be4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019be6:	210f      	movs	r1, #15
 8019be8:	187b      	adds	r3, r7, r1
 8019bea:	2200      	movs	r2, #0
 8019bec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bee:	260e      	movs	r6, #14
 8019bf0:	19bb      	adds	r3, r7, r6
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019bf6:	687a      	ldr	r2, [r7, #4]
 8019bf8:	23b0      	movs	r3, #176	@ 0xb0
 8019bfa:	009b      	lsls	r3, r3, #2
 8019bfc:	58d2      	ldr	r2, [r2, r3]
 8019bfe:	000d      	movs	r5, r1
 8019c00:	187c      	adds	r4, r7, r1
 8019c02:	1cfb      	adds	r3, r7, #3
 8019c04:	781b      	ldrb	r3, [r3, #0]
 8019c06:	0019      	movs	r1, r3
 8019c08:	0010      	movs	r0, r2
 8019c0a:	f7f6 fa0f 	bl	801002c <HAL_PCD_SetAddress>
 8019c0e:	0003      	movs	r3, r0
 8019c10:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c12:	19bc      	adds	r4, r7, r6
 8019c14:	197b      	adds	r3, r7, r5
 8019c16:	781b      	ldrb	r3, [r3, #0]
 8019c18:	0018      	movs	r0, r3
 8019c1a:	f000 f8a8 	bl	8019d6e <USBD_Get_USB_Status>
 8019c1e:	0003      	movs	r3, r0
 8019c20:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019c22:	19bb      	adds	r3, r7, r6
 8019c24:	781b      	ldrb	r3, [r3, #0]
}
 8019c26:	0018      	movs	r0, r3
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	b005      	add	sp, #20
 8019c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019c2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c30:	b087      	sub	sp, #28
 8019c32:	af00      	add	r7, sp, #0
 8019c34:	60f8      	str	r0, [r7, #12]
 8019c36:	0008      	movs	r0, r1
 8019c38:	607a      	str	r2, [r7, #4]
 8019c3a:	0019      	movs	r1, r3
 8019c3c:	230b      	movs	r3, #11
 8019c3e:	18fb      	adds	r3, r7, r3
 8019c40:	1c02      	adds	r2, r0, #0
 8019c42:	701a      	strb	r2, [r3, #0]
 8019c44:	2408      	movs	r4, #8
 8019c46:	193b      	adds	r3, r7, r4
 8019c48:	1c0a      	adds	r2, r1, #0
 8019c4a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c4c:	2117      	movs	r1, #23
 8019c4e:	187b      	adds	r3, r7, r1
 8019c50:	2200      	movs	r2, #0
 8019c52:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c54:	2516      	movs	r5, #22
 8019c56:	197b      	adds	r3, r7, r5
 8019c58:	2200      	movs	r2, #0
 8019c5a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019c5c:	68fa      	ldr	r2, [r7, #12]
 8019c5e:	23b0      	movs	r3, #176	@ 0xb0
 8019c60:	009b      	lsls	r3, r3, #2
 8019c62:	58d0      	ldr	r0, [r2, r3]
 8019c64:	193b      	adds	r3, r7, r4
 8019c66:	881d      	ldrh	r5, [r3, #0]
 8019c68:	000e      	movs	r6, r1
 8019c6a:	187c      	adds	r4, r7, r1
 8019c6c:	687a      	ldr	r2, [r7, #4]
 8019c6e:	230b      	movs	r3, #11
 8019c70:	18fb      	adds	r3, r7, r3
 8019c72:	7819      	ldrb	r1, [r3, #0]
 8019c74:	002b      	movs	r3, r5
 8019c76:	f7f6 fb14 	bl	80102a2 <HAL_PCD_EP_Transmit>
 8019c7a:	0003      	movs	r3, r0
 8019c7c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c7e:	2516      	movs	r5, #22
 8019c80:	197c      	adds	r4, r7, r5
 8019c82:	19bb      	adds	r3, r7, r6
 8019c84:	781b      	ldrb	r3, [r3, #0]
 8019c86:	0018      	movs	r0, r3
 8019c88:	f000 f871 	bl	8019d6e <USBD_Get_USB_Status>
 8019c8c:	0003      	movs	r3, r0
 8019c8e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019c90:	197b      	adds	r3, r7, r5
 8019c92:	781b      	ldrb	r3, [r3, #0]
}
 8019c94:	0018      	movs	r0, r3
 8019c96:	46bd      	mov	sp, r7
 8019c98:	b007      	add	sp, #28
 8019c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019c9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c9e:	b087      	sub	sp, #28
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	60f8      	str	r0, [r7, #12]
 8019ca4:	0008      	movs	r0, r1
 8019ca6:	607a      	str	r2, [r7, #4]
 8019ca8:	0019      	movs	r1, r3
 8019caa:	230b      	movs	r3, #11
 8019cac:	18fb      	adds	r3, r7, r3
 8019cae:	1c02      	adds	r2, r0, #0
 8019cb0:	701a      	strb	r2, [r3, #0]
 8019cb2:	2408      	movs	r4, #8
 8019cb4:	193b      	adds	r3, r7, r4
 8019cb6:	1c0a      	adds	r2, r1, #0
 8019cb8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019cba:	2117      	movs	r1, #23
 8019cbc:	187b      	adds	r3, r7, r1
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cc2:	2516      	movs	r5, #22
 8019cc4:	197b      	adds	r3, r7, r5
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019cca:	68fa      	ldr	r2, [r7, #12]
 8019ccc:	23b0      	movs	r3, #176	@ 0xb0
 8019cce:	009b      	lsls	r3, r3, #2
 8019cd0:	58d0      	ldr	r0, [r2, r3]
 8019cd2:	193b      	adds	r3, r7, r4
 8019cd4:	881d      	ldrh	r5, [r3, #0]
 8019cd6:	000e      	movs	r6, r1
 8019cd8:	187c      	adds	r4, r7, r1
 8019cda:	687a      	ldr	r2, [r7, #4]
 8019cdc:	230b      	movs	r3, #11
 8019cde:	18fb      	adds	r3, r7, r3
 8019ce0:	7819      	ldrb	r1, [r3, #0]
 8019ce2:	002b      	movs	r3, r5
 8019ce4:	f7f6 fa8d 	bl	8010202 <HAL_PCD_EP_Receive>
 8019ce8:	0003      	movs	r3, r0
 8019cea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019cec:	2516      	movs	r5, #22
 8019cee:	197c      	adds	r4, r7, r5
 8019cf0:	19bb      	adds	r3, r7, r6
 8019cf2:	781b      	ldrb	r3, [r3, #0]
 8019cf4:	0018      	movs	r0, r3
 8019cf6:	f000 f83a 	bl	8019d6e <USBD_Get_USB_Status>
 8019cfa:	0003      	movs	r3, r0
 8019cfc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019cfe:	197b      	adds	r3, r7, r5
 8019d00:	781b      	ldrb	r3, [r3, #0]
}
 8019d02:	0018      	movs	r0, r3
 8019d04:	46bd      	mov	sp, r7
 8019d06:	b007      	add	sp, #28
 8019d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d0a:	b580      	push	{r7, lr}
 8019d0c:	b082      	sub	sp, #8
 8019d0e:	af00      	add	r7, sp, #0
 8019d10:	6078      	str	r0, [r7, #4]
 8019d12:	000a      	movs	r2, r1
 8019d14:	1cfb      	adds	r3, r7, #3
 8019d16:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019d18:	687a      	ldr	r2, [r7, #4]
 8019d1a:	23b0      	movs	r3, #176	@ 0xb0
 8019d1c:	009b      	lsls	r3, r3, #2
 8019d1e:	58d2      	ldr	r2, [r2, r3]
 8019d20:	1cfb      	adds	r3, r7, #3
 8019d22:	781b      	ldrb	r3, [r3, #0]
 8019d24:	0019      	movs	r1, r3
 8019d26:	0010      	movs	r0, r2
 8019d28:	f7f6 faa2 	bl	8010270 <HAL_PCD_EP_GetRxCount>
 8019d2c:	0003      	movs	r3, r0
}
 8019d2e:	0018      	movs	r0, r3
 8019d30:	46bd      	mov	sp, r7
 8019d32:	b002      	add	sp, #8
 8019d34:	bd80      	pop	{r7, pc}
	...

08019d38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019d40:	4b02      	ldr	r3, [pc, #8]	@ (8019d4c <USBD_static_malloc+0x14>)
}
 8019d42:	0018      	movs	r0, r3
 8019d44:	46bd      	mov	sp, r7
 8019d46:	b002      	add	sp, #8
 8019d48:	bd80      	pop	{r7, pc}
 8019d4a:	46c0      	nop			@ (mov r8, r8)
 8019d4c:	20003554 	.word	0x20003554

08019d50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b082      	sub	sp, #8
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]

}
 8019d58:	46c0      	nop			@ (mov r8, r8)
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	b002      	add	sp, #8
 8019d5e:	bd80      	pop	{r7, pc}

08019d60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019d64:	f7ed fb7a 	bl	800745c <SystemClock_Config>
}
 8019d68:	46c0      	nop			@ (mov r8, r8)
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}

08019d6e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019d6e:	b580      	push	{r7, lr}
 8019d70:	b084      	sub	sp, #16
 8019d72:	af00      	add	r7, sp, #0
 8019d74:	0002      	movs	r2, r0
 8019d76:	1dfb      	adds	r3, r7, #7
 8019d78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d7a:	230f      	movs	r3, #15
 8019d7c:	18fb      	adds	r3, r7, r3
 8019d7e:	2200      	movs	r2, #0
 8019d80:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8019d82:	1dfb      	adds	r3, r7, #7
 8019d84:	781b      	ldrb	r3, [r3, #0]
 8019d86:	2b03      	cmp	r3, #3
 8019d88:	d017      	beq.n	8019dba <USBD_Get_USB_Status+0x4c>
 8019d8a:	dc1b      	bgt.n	8019dc4 <USBD_Get_USB_Status+0x56>
 8019d8c:	2b02      	cmp	r3, #2
 8019d8e:	d00f      	beq.n	8019db0 <USBD_Get_USB_Status+0x42>
 8019d90:	dc18      	bgt.n	8019dc4 <USBD_Get_USB_Status+0x56>
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d002      	beq.n	8019d9c <USBD_Get_USB_Status+0x2e>
 8019d96:	2b01      	cmp	r3, #1
 8019d98:	d005      	beq.n	8019da6 <USBD_Get_USB_Status+0x38>
 8019d9a:	e013      	b.n	8019dc4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019d9c:	230f      	movs	r3, #15
 8019d9e:	18fb      	adds	r3, r7, r3
 8019da0:	2200      	movs	r2, #0
 8019da2:	701a      	strb	r2, [r3, #0]
    break;
 8019da4:	e013      	b.n	8019dce <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019da6:	230f      	movs	r3, #15
 8019da8:	18fb      	adds	r3, r7, r3
 8019daa:	2202      	movs	r2, #2
 8019dac:	701a      	strb	r2, [r3, #0]
    break;
 8019dae:	e00e      	b.n	8019dce <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019db0:	230f      	movs	r3, #15
 8019db2:	18fb      	adds	r3, r7, r3
 8019db4:	2201      	movs	r2, #1
 8019db6:	701a      	strb	r2, [r3, #0]
    break;
 8019db8:	e009      	b.n	8019dce <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019dba:	230f      	movs	r3, #15
 8019dbc:	18fb      	adds	r3, r7, r3
 8019dbe:	2202      	movs	r2, #2
 8019dc0:	701a      	strb	r2, [r3, #0]
    break;
 8019dc2:	e004      	b.n	8019dce <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8019dc4:	230f      	movs	r3, #15
 8019dc6:	18fb      	adds	r3, r7, r3
 8019dc8:	2202      	movs	r2, #2
 8019dca:	701a      	strb	r2, [r3, #0]
    break;
 8019dcc:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8019dce:	230f      	movs	r3, #15
 8019dd0:	18fb      	adds	r3, r7, r3
 8019dd2:	781b      	ldrb	r3, [r3, #0]
}
 8019dd4:	0018      	movs	r0, r3
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	b004      	add	sp, #16
 8019dda:	bd80      	pop	{r7, pc}

08019ddc <arm_cfft_radix4by2_q31>:
 8019ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dde:	465f      	mov	r7, fp
 8019de0:	4656      	mov	r6, sl
 8019de2:	464d      	mov	r5, r9
 8019de4:	4644      	mov	r4, r8
 8019de6:	000b      	movs	r3, r1
 8019de8:	b4f0      	push	{r4, r5, r6, r7}
 8019dea:	085b      	lsrs	r3, r3, #1
 8019dec:	b08f      	sub	sp, #60	@ 0x3c
 8019dee:	910a      	str	r1, [sp, #40]	@ 0x28
 8019df0:	0007      	movs	r7, r0
 8019df2:	9009      	str	r0, [sp, #36]	@ 0x24
 8019df4:	0011      	movs	r1, r2
 8019df6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019df8:	930c      	str	r3, [sp, #48]	@ 0x30
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d100      	bne.n	8019e00 <arm_cfft_radix4by2_q31+0x24>
 8019dfe:	e0a0      	b.n	8019f42 <arm_cfft_radix4by2_q31+0x166>
 8019e00:	0002      	movs	r2, r0
 8019e02:	00db      	lsls	r3, r3, #3
 8019e04:	3204      	adds	r2, #4
 8019e06:	4691      	mov	r9, r2
 8019e08:	4698      	mov	r8, r3
 8019e0a:	000a      	movs	r2, r1
 8019e0c:	464e      	mov	r6, r9
 8019e0e:	4442      	add	r2, r8
 8019e10:	4699      	mov	r9, r3
 8019e12:	4688      	mov	r8, r1
 8019e14:	9208      	str	r2, [sp, #32]
 8019e16:	900d      	str	r0, [sp, #52]	@ 0x34
 8019e18:	4643      	mov	r3, r8
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	469b      	mov	fp, r3
 8019e1e:	4643      	mov	r3, r8
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	469a      	mov	sl, r3
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	109c      	asrs	r4, r3, #2
 8019e28:	464b      	mov	r3, r9
 8019e2a:	58fb      	ldr	r3, [r7, r3]
 8019e2c:	109a      	asrs	r2, r3, #2
 8019e2e:	18a3      	adds	r3, r4, r2
 8019e30:	603b      	str	r3, [r7, #0]
 8019e32:	6833      	ldr	r3, [r6, #0]
 8019e34:	1aa4      	subs	r4, r4, r2
 8019e36:	109d      	asrs	r5, r3, #2
 8019e38:	464b      	mov	r3, r9
 8019e3a:	58f3      	ldr	r3, [r6, r3]
 8019e3c:	17e2      	asrs	r2, r4, #31
 8019e3e:	109b      	asrs	r3, r3, #2
 8019e40:	18e9      	adds	r1, r5, r3
 8019e42:	6031      	str	r1, [r6, #0]
 8019e44:	0011      	movs	r1, r2
 8019e46:	465a      	mov	r2, fp
 8019e48:	17d2      	asrs	r2, r2, #31
 8019e4a:	0010      	movs	r0, r2
 8019e4c:	4652      	mov	r2, sl
 8019e4e:	1aed      	subs	r5, r5, r3
 8019e50:	17eb      	asrs	r3, r5, #31
 8019e52:	17d2      	asrs	r2, r2, #31
 8019e54:	9307      	str	r3, [sp, #28]
 8019e56:	9204      	str	r2, [sp, #16]
 8019e58:	0003      	movs	r3, r0
 8019e5a:	465a      	mov	r2, fp
 8019e5c:	9006      	str	r0, [sp, #24]
 8019e5e:	0020      	movs	r0, r4
 8019e60:	9105      	str	r1, [sp, #20]
 8019e62:	f7e6 fbad 	bl	80005c0 <__aeabi_lmul>
 8019e66:	2280      	movs	r2, #128	@ 0x80
 8019e68:	2300      	movs	r3, #0
 8019e6a:	0612      	lsls	r2, r2, #24
 8019e6c:	1880      	adds	r0, r0, r2
 8019e6e:	4159      	adcs	r1, r3
 8019e70:	2300      	movs	r3, #0
 8019e72:	9101      	str	r1, [sp, #4]
 8019e74:	9300      	str	r3, [sp, #0]
 8019e76:	4652      	mov	r2, sl
 8019e78:	9b04      	ldr	r3, [sp, #16]
 8019e7a:	0028      	movs	r0, r5
 8019e7c:	17e9      	asrs	r1, r5, #31
 8019e7e:	f7e6 fb9f 	bl	80005c0 <__aeabi_lmul>
 8019e82:	9a00      	ldr	r2, [sp, #0]
 8019e84:	9b01      	ldr	r3, [sp, #4]
 8019e86:	1880      	adds	r0, r0, r2
 8019e88:	4159      	adcs	r1, r3
 8019e8a:	2280      	movs	r2, #128	@ 0x80
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	0612      	lsls	r2, r2, #24
 8019e90:	1880      	adds	r0, r0, r2
 8019e92:	4159      	adcs	r1, r3
 8019e94:	464a      	mov	r2, r9
 8019e96:	004b      	lsls	r3, r1, #1
 8019e98:	50bb      	str	r3, [r7, r2]
 8019e9a:	4658      	mov	r0, fp
 8019e9c:	002a      	movs	r2, r5
 8019e9e:	9b07      	ldr	r3, [sp, #28]
 8019ea0:	9906      	ldr	r1, [sp, #24]
 8019ea2:	f7e6 fb8d 	bl	80005c0 <__aeabi_lmul>
 8019ea6:	2280      	movs	r2, #128	@ 0x80
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	0612      	lsls	r2, r2, #24
 8019eac:	1880      	adds	r0, r0, r2
 8019eae:	4159      	adcs	r1, r3
 8019eb0:	2000      	movs	r0, #0
 8019eb2:	9103      	str	r1, [sp, #12]
 8019eb4:	9002      	str	r0, [sp, #8]
 8019eb6:	4652      	mov	r2, sl
 8019eb8:	9b04      	ldr	r3, [sp, #16]
 8019eba:	0020      	movs	r0, r4
 8019ebc:	9905      	ldr	r1, [sp, #20]
 8019ebe:	f7e6 fb7f 	bl	80005c0 <__aeabi_lmul>
 8019ec2:	9a02      	ldr	r2, [sp, #8]
 8019ec4:	9b03      	ldr	r3, [sp, #12]
 8019ec6:	1a12      	subs	r2, r2, r0
 8019ec8:	418b      	sbcs	r3, r1
 8019eca:	2080      	movs	r0, #128	@ 0x80
 8019ecc:	2100      	movs	r1, #0
 8019ece:	0600      	lsls	r0, r0, #24
 8019ed0:	1812      	adds	r2, r2, r0
 8019ed2:	414b      	adcs	r3, r1
 8019ed4:	464a      	mov	r2, r9
 8019ed6:	005b      	lsls	r3, r3, #1
 8019ed8:	50b3      	str	r3, [r6, r2]
 8019eda:	2308      	movs	r3, #8
 8019edc:	469c      	mov	ip, r3
 8019ede:	9b08      	ldr	r3, [sp, #32]
 8019ee0:	44e0      	add	r8, ip
 8019ee2:	3708      	adds	r7, #8
 8019ee4:	3608      	adds	r6, #8
 8019ee6:	4598      	cmp	r8, r3
 8019ee8:	d196      	bne.n	8019e18 <arm_cfft_radix4by2_q31+0x3c>
 8019eea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019eec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019eee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019ef0:	2302      	movs	r3, #2
 8019ef2:	003a      	movs	r2, r7
 8019ef4:	0029      	movs	r1, r5
 8019ef6:	0020      	movs	r0, r4
 8019ef8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8019efa:	f000 f957 	bl	801a1ac <arm_radix4_butterfly_q31>
 8019efe:	46a4      	mov	ip, r4
 8019f00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f02:	2302      	movs	r3, #2
 8019f04:	0088      	lsls	r0, r1, #2
 8019f06:	4460      	add	r0, ip
 8019f08:	003a      	movs	r2, r7
 8019f0a:	0029      	movs	r1, r5
 8019f0c:	f000 f94e 	bl	801a1ac <arm_radix4_butterfly_q31>
 8019f10:	46a4      	mov	ip, r4
 8019f12:	0128      	lsls	r0, r5, #4
 8019f14:	4460      	add	r0, ip
 8019f16:	6833      	ldr	r3, [r6, #0]
 8019f18:	005b      	lsls	r3, r3, #1
 8019f1a:	6033      	str	r3, [r6, #0]
 8019f1c:	6873      	ldr	r3, [r6, #4]
 8019f1e:	005b      	lsls	r3, r3, #1
 8019f20:	6073      	str	r3, [r6, #4]
 8019f22:	68b3      	ldr	r3, [r6, #8]
 8019f24:	005b      	lsls	r3, r3, #1
 8019f26:	60b3      	str	r3, [r6, #8]
 8019f28:	68f3      	ldr	r3, [r6, #12]
 8019f2a:	005b      	lsls	r3, r3, #1
 8019f2c:	60f3      	str	r3, [r6, #12]
 8019f2e:	3610      	adds	r6, #16
 8019f30:	42b0      	cmp	r0, r6
 8019f32:	d1f0      	bne.n	8019f16 <arm_cfft_radix4by2_q31+0x13a>
 8019f34:	b00f      	add	sp, #60	@ 0x3c
 8019f36:	bc3c      	pop	{r2, r3, r4, r5}
 8019f38:	4690      	mov	r8, r2
 8019f3a:	4699      	mov	r9, r3
 8019f3c:	46a2      	mov	sl, r4
 8019f3e:	46ab      	mov	fp, r5
 8019f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f42:	2302      	movs	r3, #2
 8019f44:	2100      	movs	r1, #0
 8019f46:	0015      	movs	r5, r2
 8019f48:	f000 f930 	bl	801a1ac <arm_radix4_butterfly_q31>
 8019f4c:	46bc      	mov	ip, r7
 8019f4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f50:	002a      	movs	r2, r5
 8019f52:	0098      	lsls	r0, r3, #2
 8019f54:	4460      	add	r0, ip
 8019f56:	2302      	movs	r3, #2
 8019f58:	2100      	movs	r1, #0
 8019f5a:	f000 f927 	bl	801a1ac <arm_radix4_butterfly_q31>
 8019f5e:	e7e9      	b.n	8019f34 <arm_cfft_radix4by2_q31+0x158>

08019f60 <arm_cfft_radix4by2_inverse_q31>:
 8019f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f62:	465f      	mov	r7, fp
 8019f64:	4656      	mov	r6, sl
 8019f66:	464d      	mov	r5, r9
 8019f68:	4644      	mov	r4, r8
 8019f6a:	000b      	movs	r3, r1
 8019f6c:	b4f0      	push	{r4, r5, r6, r7}
 8019f6e:	085b      	lsrs	r3, r3, #1
 8019f70:	b08f      	sub	sp, #60	@ 0x3c
 8019f72:	910a      	str	r1, [sp, #40]	@ 0x28
 8019f74:	0007      	movs	r7, r0
 8019f76:	9009      	str	r0, [sp, #36]	@ 0x24
 8019f78:	0011      	movs	r1, r2
 8019f7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019f7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d100      	bne.n	8019f84 <arm_cfft_radix4by2_inverse_q31+0x24>
 8019f82:	e0a0      	b.n	801a0c6 <arm_cfft_radix4by2_inverse_q31+0x166>
 8019f84:	0002      	movs	r2, r0
 8019f86:	00db      	lsls	r3, r3, #3
 8019f88:	3204      	adds	r2, #4
 8019f8a:	4691      	mov	r9, r2
 8019f8c:	4698      	mov	r8, r3
 8019f8e:	000a      	movs	r2, r1
 8019f90:	464e      	mov	r6, r9
 8019f92:	4442      	add	r2, r8
 8019f94:	4699      	mov	r9, r3
 8019f96:	4688      	mov	r8, r1
 8019f98:	9208      	str	r2, [sp, #32]
 8019f9a:	900d      	str	r0, [sp, #52]	@ 0x34
 8019f9c:	4643      	mov	r3, r8
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	469b      	mov	fp, r3
 8019fa2:	4643      	mov	r3, r8
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	469a      	mov	sl, r3
 8019fa8:	683b      	ldr	r3, [r7, #0]
 8019faa:	109c      	asrs	r4, r3, #2
 8019fac:	464b      	mov	r3, r9
 8019fae:	58fb      	ldr	r3, [r7, r3]
 8019fb0:	109a      	asrs	r2, r3, #2
 8019fb2:	18a3      	adds	r3, r4, r2
 8019fb4:	603b      	str	r3, [r7, #0]
 8019fb6:	6833      	ldr	r3, [r6, #0]
 8019fb8:	1aa4      	subs	r4, r4, r2
 8019fba:	109d      	asrs	r5, r3, #2
 8019fbc:	464b      	mov	r3, r9
 8019fbe:	58f3      	ldr	r3, [r6, r3]
 8019fc0:	17e2      	asrs	r2, r4, #31
 8019fc2:	109b      	asrs	r3, r3, #2
 8019fc4:	18e9      	adds	r1, r5, r3
 8019fc6:	6031      	str	r1, [r6, #0]
 8019fc8:	0011      	movs	r1, r2
 8019fca:	465a      	mov	r2, fp
 8019fcc:	17d2      	asrs	r2, r2, #31
 8019fce:	0010      	movs	r0, r2
 8019fd0:	4652      	mov	r2, sl
 8019fd2:	1aed      	subs	r5, r5, r3
 8019fd4:	17eb      	asrs	r3, r5, #31
 8019fd6:	17d2      	asrs	r2, r2, #31
 8019fd8:	9307      	str	r3, [sp, #28]
 8019fda:	9204      	str	r2, [sp, #16]
 8019fdc:	0003      	movs	r3, r0
 8019fde:	465a      	mov	r2, fp
 8019fe0:	9006      	str	r0, [sp, #24]
 8019fe2:	0020      	movs	r0, r4
 8019fe4:	9105      	str	r1, [sp, #20]
 8019fe6:	f7e6 faeb 	bl	80005c0 <__aeabi_lmul>
 8019fea:	2280      	movs	r2, #128	@ 0x80
 8019fec:	2300      	movs	r3, #0
 8019fee:	0612      	lsls	r2, r2, #24
 8019ff0:	1880      	adds	r0, r0, r2
 8019ff2:	4159      	adcs	r1, r3
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	9101      	str	r1, [sp, #4]
 8019ff8:	9300      	str	r3, [sp, #0]
 8019ffa:	4652      	mov	r2, sl
 8019ffc:	9b04      	ldr	r3, [sp, #16]
 8019ffe:	0028      	movs	r0, r5
 801a000:	17e9      	asrs	r1, r5, #31
 801a002:	f7e6 fadd 	bl	80005c0 <__aeabi_lmul>
 801a006:	9a00      	ldr	r2, [sp, #0]
 801a008:	9b01      	ldr	r3, [sp, #4]
 801a00a:	1a12      	subs	r2, r2, r0
 801a00c:	418b      	sbcs	r3, r1
 801a00e:	2080      	movs	r0, #128	@ 0x80
 801a010:	2100      	movs	r1, #0
 801a012:	0600      	lsls	r0, r0, #24
 801a014:	1812      	adds	r2, r2, r0
 801a016:	414b      	adcs	r3, r1
 801a018:	464a      	mov	r2, r9
 801a01a:	005b      	lsls	r3, r3, #1
 801a01c:	50bb      	str	r3, [r7, r2]
 801a01e:	4658      	mov	r0, fp
 801a020:	002a      	movs	r2, r5
 801a022:	9b07      	ldr	r3, [sp, #28]
 801a024:	9906      	ldr	r1, [sp, #24]
 801a026:	f7e6 facb 	bl	80005c0 <__aeabi_lmul>
 801a02a:	2280      	movs	r2, #128	@ 0x80
 801a02c:	2300      	movs	r3, #0
 801a02e:	0612      	lsls	r2, r2, #24
 801a030:	1880      	adds	r0, r0, r2
 801a032:	4159      	adcs	r1, r3
 801a034:	2000      	movs	r0, #0
 801a036:	9103      	str	r1, [sp, #12]
 801a038:	9002      	str	r0, [sp, #8]
 801a03a:	4652      	mov	r2, sl
 801a03c:	9b04      	ldr	r3, [sp, #16]
 801a03e:	0020      	movs	r0, r4
 801a040:	9905      	ldr	r1, [sp, #20]
 801a042:	f7e6 fabd 	bl	80005c0 <__aeabi_lmul>
 801a046:	9b02      	ldr	r3, [sp, #8]
 801a048:	9c03      	ldr	r4, [sp, #12]
 801a04a:	18c0      	adds	r0, r0, r3
 801a04c:	4161      	adcs	r1, r4
 801a04e:	2380      	movs	r3, #128	@ 0x80
 801a050:	2400      	movs	r4, #0
 801a052:	061b      	lsls	r3, r3, #24
 801a054:	18c0      	adds	r0, r0, r3
 801a056:	4161      	adcs	r1, r4
 801a058:	464a      	mov	r2, r9
 801a05a:	004b      	lsls	r3, r1, #1
 801a05c:	50b3      	str	r3, [r6, r2]
 801a05e:	2308      	movs	r3, #8
 801a060:	469c      	mov	ip, r3
 801a062:	9b08      	ldr	r3, [sp, #32]
 801a064:	44e0      	add	r8, ip
 801a066:	3708      	adds	r7, #8
 801a068:	3608      	adds	r6, #8
 801a06a:	4598      	cmp	r8, r3
 801a06c:	d196      	bne.n	8019f9c <arm_cfft_radix4by2_inverse_q31+0x3c>
 801a06e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a070:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a072:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a074:	2302      	movs	r3, #2
 801a076:	003a      	movs	r2, r7
 801a078:	0029      	movs	r1, r5
 801a07a:	0020      	movs	r0, r4
 801a07c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801a07e:	f000 fb3b 	bl	801a6f8 <arm_radix4_butterfly_inverse_q31>
 801a082:	46a4      	mov	ip, r4
 801a084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a086:	2302      	movs	r3, #2
 801a088:	0088      	lsls	r0, r1, #2
 801a08a:	4460      	add	r0, ip
 801a08c:	003a      	movs	r2, r7
 801a08e:	0029      	movs	r1, r5
 801a090:	f000 fb32 	bl	801a6f8 <arm_radix4_butterfly_inverse_q31>
 801a094:	46a4      	mov	ip, r4
 801a096:	0128      	lsls	r0, r5, #4
 801a098:	4460      	add	r0, ip
 801a09a:	6833      	ldr	r3, [r6, #0]
 801a09c:	005b      	lsls	r3, r3, #1
 801a09e:	6033      	str	r3, [r6, #0]
 801a0a0:	6873      	ldr	r3, [r6, #4]
 801a0a2:	005b      	lsls	r3, r3, #1
 801a0a4:	6073      	str	r3, [r6, #4]
 801a0a6:	68b3      	ldr	r3, [r6, #8]
 801a0a8:	005b      	lsls	r3, r3, #1
 801a0aa:	60b3      	str	r3, [r6, #8]
 801a0ac:	68f3      	ldr	r3, [r6, #12]
 801a0ae:	005b      	lsls	r3, r3, #1
 801a0b0:	60f3      	str	r3, [r6, #12]
 801a0b2:	3610      	adds	r6, #16
 801a0b4:	42b0      	cmp	r0, r6
 801a0b6:	d1f0      	bne.n	801a09a <arm_cfft_radix4by2_inverse_q31+0x13a>
 801a0b8:	b00f      	add	sp, #60	@ 0x3c
 801a0ba:	bc3c      	pop	{r2, r3, r4, r5}
 801a0bc:	4690      	mov	r8, r2
 801a0be:	4699      	mov	r9, r3
 801a0c0:	46a2      	mov	sl, r4
 801a0c2:	46ab      	mov	fp, r5
 801a0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0c6:	2302      	movs	r3, #2
 801a0c8:	2100      	movs	r1, #0
 801a0ca:	0015      	movs	r5, r2
 801a0cc:	f000 fb14 	bl	801a6f8 <arm_radix4_butterfly_inverse_q31>
 801a0d0:	46bc      	mov	ip, r7
 801a0d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0d4:	002a      	movs	r2, r5
 801a0d6:	0098      	lsls	r0, r3, #2
 801a0d8:	4460      	add	r0, ip
 801a0da:	2302      	movs	r3, #2
 801a0dc:	2100      	movs	r1, #0
 801a0de:	f000 fb0b 	bl	801a6f8 <arm_radix4_butterfly_inverse_q31>
 801a0e2:	e7e9      	b.n	801a0b8 <arm_cfft_radix4by2_inverse_q31+0x158>

0801a0e4 <arm_cfft_q31>:
 801a0e4:	b570      	push	{r4, r5, r6, lr}
 801a0e6:	001e      	movs	r6, r3
 801a0e8:	2380      	movs	r3, #128	@ 0x80
 801a0ea:	000d      	movs	r5, r1
 801a0ec:	0004      	movs	r4, r0
 801a0ee:	8801      	ldrh	r1, [r0, #0]
 801a0f0:	005b      	lsls	r3, r3, #1
 801a0f2:	2a01      	cmp	r2, #1
 801a0f4:	d028      	beq.n	801a148 <arm_cfft_q31+0x64>
 801a0f6:	4299      	cmp	r1, r3
 801a0f8:	d020      	beq.n	801a13c <arm_cfft_q31+0x58>
 801a0fa:	d812      	bhi.n	801a122 <arm_cfft_q31+0x3e>
 801a0fc:	2920      	cmp	r1, #32
 801a0fe:	d004      	beq.n	801a10a <arm_cfft_q31+0x26>
 801a100:	d949      	bls.n	801a196 <arm_cfft_q31+0xb2>
 801a102:	2940      	cmp	r1, #64	@ 0x40
 801a104:	d01a      	beq.n	801a13c <arm_cfft_q31+0x58>
 801a106:	2980      	cmp	r1, #128	@ 0x80
 801a108:	d103      	bne.n	801a112 <arm_cfft_q31+0x2e>
 801a10a:	6862      	ldr	r2, [r4, #4]
 801a10c:	0028      	movs	r0, r5
 801a10e:	f7ff fe65 	bl	8019ddc <arm_cfft_radix4by2_q31>
 801a112:	2e00      	cmp	r6, #0
 801a114:	d004      	beq.n	801a120 <arm_cfft_q31+0x3c>
 801a116:	68a2      	ldr	r2, [r4, #8]
 801a118:	89a1      	ldrh	r1, [r4, #12]
 801a11a:	0028      	movs	r0, r5
 801a11c:	f7e5 fff4 	bl	8000108 <arm_bitreversal_32>
 801a120:	bd70      	pop	{r4, r5, r6, pc}
 801a122:	2380      	movs	r3, #128	@ 0x80
 801a124:	00db      	lsls	r3, r3, #3
 801a126:	4299      	cmp	r1, r3
 801a128:	d008      	beq.n	801a13c <arm_cfft_q31+0x58>
 801a12a:	d92f      	bls.n	801a18c <arm_cfft_q31+0xa8>
 801a12c:	2380      	movs	r3, #128	@ 0x80
 801a12e:	011b      	lsls	r3, r3, #4
 801a130:	4299      	cmp	r1, r3
 801a132:	d0ea      	beq.n	801a10a <arm_cfft_q31+0x26>
 801a134:	2380      	movs	r3, #128	@ 0x80
 801a136:	015b      	lsls	r3, r3, #5
 801a138:	4299      	cmp	r1, r3
 801a13a:	d1ea      	bne.n	801a112 <arm_cfft_q31+0x2e>
 801a13c:	2301      	movs	r3, #1
 801a13e:	6862      	ldr	r2, [r4, #4]
 801a140:	0028      	movs	r0, r5
 801a142:	f000 f833 	bl	801a1ac <arm_radix4_butterfly_q31>
 801a146:	e7e4      	b.n	801a112 <arm_cfft_q31+0x2e>
 801a148:	4299      	cmp	r1, r3
 801a14a:	d019      	beq.n	801a180 <arm_cfft_q31+0x9c>
 801a14c:	d80b      	bhi.n	801a166 <arm_cfft_q31+0x82>
 801a14e:	2920      	cmp	r1, #32
 801a150:	d004      	beq.n	801a15c <arm_cfft_q31+0x78>
 801a152:	d928      	bls.n	801a1a6 <arm_cfft_q31+0xc2>
 801a154:	2940      	cmp	r1, #64	@ 0x40
 801a156:	d013      	beq.n	801a180 <arm_cfft_q31+0x9c>
 801a158:	2980      	cmp	r1, #128	@ 0x80
 801a15a:	d1da      	bne.n	801a112 <arm_cfft_q31+0x2e>
 801a15c:	6862      	ldr	r2, [r4, #4]
 801a15e:	0028      	movs	r0, r5
 801a160:	f7ff fefe 	bl	8019f60 <arm_cfft_radix4by2_inverse_q31>
 801a164:	e7d5      	b.n	801a112 <arm_cfft_q31+0x2e>
 801a166:	2380      	movs	r3, #128	@ 0x80
 801a168:	00db      	lsls	r3, r3, #3
 801a16a:	4299      	cmp	r1, r3
 801a16c:	d008      	beq.n	801a180 <arm_cfft_q31+0x9c>
 801a16e:	d915      	bls.n	801a19c <arm_cfft_q31+0xb8>
 801a170:	2380      	movs	r3, #128	@ 0x80
 801a172:	011b      	lsls	r3, r3, #4
 801a174:	4299      	cmp	r1, r3
 801a176:	d0f1      	beq.n	801a15c <arm_cfft_q31+0x78>
 801a178:	2380      	movs	r3, #128	@ 0x80
 801a17a:	015b      	lsls	r3, r3, #5
 801a17c:	4299      	cmp	r1, r3
 801a17e:	d1c8      	bne.n	801a112 <arm_cfft_q31+0x2e>
 801a180:	2301      	movs	r3, #1
 801a182:	6862      	ldr	r2, [r4, #4]
 801a184:	0028      	movs	r0, r5
 801a186:	f000 fab7 	bl	801a6f8 <arm_radix4_butterfly_inverse_q31>
 801a18a:	e7c2      	b.n	801a112 <arm_cfft_q31+0x2e>
 801a18c:	2380      	movs	r3, #128	@ 0x80
 801a18e:	009b      	lsls	r3, r3, #2
 801a190:	4299      	cmp	r1, r3
 801a192:	d0ba      	beq.n	801a10a <arm_cfft_q31+0x26>
 801a194:	e7bd      	b.n	801a112 <arm_cfft_q31+0x2e>
 801a196:	2910      	cmp	r1, #16
 801a198:	d1bb      	bne.n	801a112 <arm_cfft_q31+0x2e>
 801a19a:	e7cf      	b.n	801a13c <arm_cfft_q31+0x58>
 801a19c:	2380      	movs	r3, #128	@ 0x80
 801a19e:	009b      	lsls	r3, r3, #2
 801a1a0:	4299      	cmp	r1, r3
 801a1a2:	d0db      	beq.n	801a15c <arm_cfft_q31+0x78>
 801a1a4:	e7b5      	b.n	801a112 <arm_cfft_q31+0x2e>
 801a1a6:	2910      	cmp	r1, #16
 801a1a8:	d1b3      	bne.n	801a112 <arm_cfft_q31+0x2e>
 801a1aa:	e7e9      	b.n	801a180 <arm_cfft_q31+0x9c>

0801a1ac <arm_radix4_butterfly_q31>:
 801a1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1ae:	464d      	mov	r5, r9
 801a1b0:	4644      	mov	r4, r8
 801a1b2:	465f      	mov	r7, fp
 801a1b4:	4656      	mov	r6, sl
 801a1b6:	469c      	mov	ip, r3
 801a1b8:	b4f0      	push	{r4, r5, r6, r7}
 801a1ba:	b0a7      	sub	sp, #156	@ 0x9c
 801a1bc:	9114      	str	r1, [sp, #80]	@ 0x50
 801a1be:	0889      	lsrs	r1, r1, #2
 801a1c0:	9310      	str	r3, [sp, #64]	@ 0x40
 801a1c2:	00cb      	lsls	r3, r1, #3
 801a1c4:	0015      	movs	r5, r2
 801a1c6:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a1c8:	18c2      	adds	r2, r0, r3
 801a1ca:	000c      	movs	r4, r1
 801a1cc:	469a      	mov	sl, r3
 801a1ce:	9124      	str	r1, [sp, #144]	@ 0x90
 801a1d0:	18d1      	adds	r1, r2, r3
 801a1d2:	4663      	mov	r3, ip
 801a1d4:	468b      	mov	fp, r1
 801a1d6:	0119      	lsls	r1, r3, #4
 801a1d8:	910d      	str	r1, [sp, #52]	@ 0x34
 801a1da:	00d9      	lsls	r1, r3, #3
 801a1dc:	005b      	lsls	r3, r3, #1
 801a1de:	4463      	add	r3, ip
 801a1e0:	910e      	str	r1, [sp, #56]	@ 0x38
 801a1e2:	00d9      	lsls	r1, r3, #3
 801a1e4:	465b      	mov	r3, fp
 801a1e6:	44da      	add	sl, fp
 801a1e8:	4690      	mov	r8, r2
 801a1ea:	4683      	mov	fp, r0
 801a1ec:	4699      	mov	r9, r3
 801a1ee:	9022      	str	r0, [sp, #136]	@ 0x88
 801a1f0:	9025      	str	r0, [sp, #148]	@ 0x94
 801a1f2:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a1f4:	9502      	str	r5, [sp, #8]
 801a1f6:	9500      	str	r5, [sp, #0]
 801a1f8:	9501      	str	r5, [sp, #4]
 801a1fa:	9407      	str	r4, [sp, #28]
 801a1fc:	465b      	mov	r3, fp
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	4642      	mov	r2, r8
 801a202:	111c      	asrs	r4, r3, #4
 801a204:	464b      	mov	r3, r9
 801a206:	4658      	mov	r0, fp
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	6812      	ldr	r2, [r2, #0]
 801a20c:	111b      	asrs	r3, r3, #4
 801a20e:	18e7      	adds	r7, r4, r3
 801a210:	1ae3      	subs	r3, r4, r3
 801a212:	1114      	asrs	r4, r2, #4
 801a214:	4652      	mov	r2, sl
 801a216:	6840      	ldr	r0, [r0, #4]
 801a218:	6812      	ldr	r2, [r2, #0]
 801a21a:	1105      	asrs	r5, r0, #4
 801a21c:	4648      	mov	r0, r9
 801a21e:	9303      	str	r3, [sp, #12]
 801a220:	1113      	asrs	r3, r2, #4
 801a222:	18e2      	adds	r2, r4, r3
 801a224:	465c      	mov	r4, fp
 801a226:	6840      	ldr	r0, [r0, #4]
 801a228:	1103      	asrs	r3, r0, #4
 801a22a:	18ee      	adds	r6, r5, r3
 801a22c:	1ae8      	subs	r0, r5, r3
 801a22e:	18bb      	adds	r3, r7, r2
 801a230:	6023      	str	r3, [r4, #0]
 801a232:	4644      	mov	r4, r8
 801a234:	6864      	ldr	r4, [r4, #4]
 801a236:	9004      	str	r0, [sp, #16]
 801a238:	1125      	asrs	r5, r4, #4
 801a23a:	4654      	mov	r4, sl
 801a23c:	6864      	ldr	r4, [r4, #4]
 801a23e:	1123      	asrs	r3, r4, #4
 801a240:	465c      	mov	r4, fp
 801a242:	18eb      	adds	r3, r5, r3
 801a244:	18f1      	adds	r1, r6, r3
 801a246:	6061      	str	r1, [r4, #4]
 801a248:	4655      	mov	r5, sl
 801a24a:	4644      	mov	r4, r8
 801a24c:	686d      	ldr	r5, [r5, #4]
 801a24e:	6864      	ldr	r4, [r4, #4]
 801a250:	1129      	asrs	r1, r5, #4
 801a252:	1124      	asrs	r4, r4, #4
 801a254:	1a64      	subs	r4, r4, r1
 801a256:	4641      	mov	r1, r8
 801a258:	6809      	ldr	r1, [r1, #0]
 801a25a:	9405      	str	r4, [sp, #20]
 801a25c:	1108      	asrs	r0, r1, #4
 801a25e:	4651      	mov	r1, sl
 801a260:	6809      	ldr	r1, [r1, #0]
 801a262:	1abc      	subs	r4, r7, r2
 801a264:	1109      	asrs	r1, r1, #4
 801a266:	1a41      	subs	r1, r0, r1
 801a268:	17e2      	asrs	r2, r4, #31
 801a26a:	9106      	str	r1, [sp, #24]
 801a26c:	0011      	movs	r1, r2
 801a26e:	9a01      	ldr	r2, [sp, #4]
 801a270:	9108      	str	r1, [sp, #32]
 801a272:	6817      	ldr	r7, [r2, #0]
 801a274:	17fd      	asrs	r5, r7, #31
 801a276:	0028      	movs	r0, r5
 801a278:	1af5      	subs	r5, r6, r3
 801a27a:	17ee      	asrs	r6, r5, #31
 801a27c:	960a      	str	r6, [sp, #40]	@ 0x28
 801a27e:	6856      	ldr	r6, [r2, #4]
 801a280:	9009      	str	r0, [sp, #36]	@ 0x24
 801a282:	17f3      	asrs	r3, r6, #31
 801a284:	003a      	movs	r2, r7
 801a286:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a288:	0003      	movs	r3, r0
 801a28a:	0020      	movs	r0, r4
 801a28c:	f7e6 f998 	bl	80005c0 <__aeabi_lmul>
 801a290:	0032      	movs	r2, r6
 801a292:	17f3      	asrs	r3, r6, #31
 801a294:	910c      	str	r1, [sp, #48]	@ 0x30
 801a296:	0028      	movs	r0, r5
 801a298:	17e9      	asrs	r1, r5, #31
 801a29a:	f7e6 f991 	bl	80005c0 <__aeabi_lmul>
 801a29e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a2a0:	002a      	movs	r2, r5
 801a2a2:	4684      	mov	ip, r0
 801a2a4:	4640      	mov	r0, r8
 801a2a6:	4461      	add	r1, ip
 801a2a8:	0049      	lsls	r1, r1, #1
 801a2aa:	6001      	str	r1, [r0, #0]
 801a2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a2b0:	0038      	movs	r0, r7
 801a2b2:	f7e6 f985 	bl	80005c0 <__aeabi_lmul>
 801a2b6:	0032      	movs	r2, r6
 801a2b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a2ba:	000d      	movs	r5, r1
 801a2bc:	0020      	movs	r0, r4
 801a2be:	9908      	ldr	r1, [sp, #32]
 801a2c0:	f7e6 f97e 	bl	80005c0 <__aeabi_lmul>
 801a2c4:	4646      	mov	r6, r8
 801a2c6:	1a6d      	subs	r5, r5, r1
 801a2c8:	006d      	lsls	r5, r5, #1
 801a2ca:	6075      	str	r5, [r6, #4]
 801a2cc:	9903      	ldr	r1, [sp, #12]
 801a2ce:	9d05      	ldr	r5, [sp, #20]
 801a2d0:	000c      	movs	r4, r1
 801a2d2:	46ac      	mov	ip, r5
 801a2d4:	4464      	add	r4, ip
 801a2d6:	17e6      	asrs	r6, r4, #31
 801a2d8:	0031      	movs	r1, r6
 801a2da:	9b00      	ldr	r3, [sp, #0]
 801a2dc:	9804      	ldr	r0, [sp, #16]
 801a2de:	681e      	ldr	r6, [r3, #0]
 801a2e0:	17f7      	asrs	r7, r6, #31
 801a2e2:	9709      	str	r7, [sp, #36]	@ 0x24
 801a2e4:	9f06      	ldr	r7, [sp, #24]
 801a2e6:	0032      	movs	r2, r6
 801a2e8:	1bc7      	subs	r7, r0, r7
 801a2ea:	17fd      	asrs	r5, r7, #31
 801a2ec:	950a      	str	r5, [sp, #40]	@ 0x28
 801a2ee:	685d      	ldr	r5, [r3, #4]
 801a2f0:	17f3      	asrs	r3, r6, #31
 801a2f2:	17e8      	asrs	r0, r5, #31
 801a2f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a2f6:	0020      	movs	r0, r4
 801a2f8:	9108      	str	r1, [sp, #32]
 801a2fa:	f7e6 f961 	bl	80005c0 <__aeabi_lmul>
 801a2fe:	002a      	movs	r2, r5
 801a300:	17eb      	asrs	r3, r5, #31
 801a302:	910c      	str	r1, [sp, #48]	@ 0x30
 801a304:	0038      	movs	r0, r7
 801a306:	17f9      	asrs	r1, r7, #31
 801a308:	f7e6 f95a 	bl	80005c0 <__aeabi_lmul>
 801a30c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a30e:	003a      	movs	r2, r7
 801a310:	4684      	mov	ip, r0
 801a312:	4648      	mov	r0, r9
 801a314:	4461      	add	r1, ip
 801a316:	0049      	lsls	r1, r1, #1
 801a318:	6001      	str	r1, [r0, #0]
 801a31a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a31c:	0030      	movs	r0, r6
 801a31e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a320:	f7e6 f94e 	bl	80005c0 <__aeabi_lmul>
 801a324:	002a      	movs	r2, r5
 801a326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a328:	000e      	movs	r6, r1
 801a32a:	0020      	movs	r0, r4
 801a32c:	9908      	ldr	r1, [sp, #32]
 801a32e:	f7e6 f947 	bl	80005c0 <__aeabi_lmul>
 801a332:	464c      	mov	r4, r9
 801a334:	9d05      	ldr	r5, [sp, #20]
 801a336:	1a76      	subs	r6, r6, r1
 801a338:	9903      	ldr	r1, [sp, #12]
 801a33a:	0076      	lsls	r6, r6, #1
 801a33c:	6066      	str	r6, [r4, #4]
 801a33e:	1b4c      	subs	r4, r1, r5
 801a340:	9e06      	ldr	r6, [sp, #24]
 801a342:	17e1      	asrs	r1, r4, #31
 801a344:	9103      	str	r1, [sp, #12]
 801a346:	9902      	ldr	r1, [sp, #8]
 801a348:	46b4      	mov	ip, r6
 801a34a:	680f      	ldr	r7, [r1, #0]
 801a34c:	9804      	ldr	r0, [sp, #16]
 801a34e:	17fd      	asrs	r5, r7, #31
 801a350:	002b      	movs	r3, r5
 801a352:	684e      	ldr	r6, [r1, #4]
 801a354:	4460      	add	r0, ip
 801a356:	0005      	movs	r5, r0
 801a358:	17c0      	asrs	r0, r0, #31
 801a35a:	9005      	str	r0, [sp, #20]
 801a35c:	17f0      	asrs	r0, r6, #31
 801a35e:	9006      	str	r0, [sp, #24]
 801a360:	003a      	movs	r2, r7
 801a362:	0020      	movs	r0, r4
 801a364:	17e1      	asrs	r1, r4, #31
 801a366:	9304      	str	r3, [sp, #16]
 801a368:	f7e6 f92a 	bl	80005c0 <__aeabi_lmul>
 801a36c:	0032      	movs	r2, r6
 801a36e:	9108      	str	r1, [sp, #32]
 801a370:	17f3      	asrs	r3, r6, #31
 801a372:	0028      	movs	r0, r5
 801a374:	17e9      	asrs	r1, r5, #31
 801a376:	f7e6 f923 	bl	80005c0 <__aeabi_lmul>
 801a37a:	9808      	ldr	r0, [sp, #32]
 801a37c:	002a      	movs	r2, r5
 801a37e:	4684      	mov	ip, r0
 801a380:	4650      	mov	r0, sl
 801a382:	4461      	add	r1, ip
 801a384:	0049      	lsls	r1, r1, #1
 801a386:	6001      	str	r1, [r0, #0]
 801a388:	9b05      	ldr	r3, [sp, #20]
 801a38a:	9904      	ldr	r1, [sp, #16]
 801a38c:	0038      	movs	r0, r7
 801a38e:	f7e6 f917 	bl	80005c0 <__aeabi_lmul>
 801a392:	0020      	movs	r0, r4
 801a394:	2408      	movs	r4, #8
 801a396:	000d      	movs	r5, r1
 801a398:	0032      	movs	r2, r6
 801a39a:	9b06      	ldr	r3, [sp, #24]
 801a39c:	9903      	ldr	r1, [sp, #12]
 801a39e:	f7e6 f90f 	bl	80005c0 <__aeabi_lmul>
 801a3a2:	46a4      	mov	ip, r4
 801a3a4:	4650      	mov	r0, sl
 801a3a6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a3a8:	44e3      	add	fp, ip
 801a3aa:	44e0      	add	r8, ip
 801a3ac:	44e1      	add	r9, ip
 801a3ae:	44e2      	add	sl, ip
 801a3b0:	46a4      	mov	ip, r4
 801a3b2:	1a6d      	subs	r5, r5, r1
 801a3b4:	006d      	lsls	r5, r5, #1
 801a3b6:	9a01      	ldr	r2, [sp, #4]
 801a3b8:	6045      	str	r5, [r0, #4]
 801a3ba:	9807      	ldr	r0, [sp, #28]
 801a3bc:	4462      	add	r2, ip
 801a3be:	3801      	subs	r0, #1
 801a3c0:	9201      	str	r2, [sp, #4]
 801a3c2:	9007      	str	r0, [sp, #28]
 801a3c4:	9b00      	ldr	r3, [sp, #0]
 801a3c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a3c8:	9902      	ldr	r1, [sp, #8]
 801a3ca:	4694      	mov	ip, r2
 801a3cc:	4463      	add	r3, ip
 801a3ce:	9300      	str	r3, [sp, #0]
 801a3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a3d2:	469c      	mov	ip, r3
 801a3d4:	4461      	add	r1, ip
 801a3d6:	9102      	str	r1, [sp, #8]
 801a3d8:	2800      	cmp	r0, #0
 801a3da:	d000      	beq.n	801a3de <arm_radix4_butterfly_q31+0x232>
 801a3dc:	e70e      	b.n	801a1fc <arm_radix4_butterfly_q31+0x50>
 801a3de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a3e0:	009b      	lsls	r3, r3, #2
 801a3e2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a3e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a3e6:	9320      	str	r3, [sp, #128]	@ 0x80
 801a3e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a3ea:	2b04      	cmp	r3, #4
 801a3ec:	d800      	bhi.n	801a3f0 <arm_radix4_butterfly_q31+0x244>
 801a3ee:	e180      	b.n	801a6f2 <arm_radix4_butterfly_q31+0x546>
 801a3f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a3f2:	0893      	lsrs	r3, r2, #2
 801a3f4:	1e59      	subs	r1, r3, #1
 801a3f6:	9321      	str	r3, [sp, #132]	@ 0x84
 801a3f8:	00db      	lsls	r3, r3, #3
 801a3fa:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a3fc:	00d3      	lsls	r3, r2, #3
 801a3fe:	9300      	str	r3, [sp, #0]
 801a400:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a402:	911a      	str	r1, [sp, #104]	@ 0x68
 801a404:	00da      	lsls	r2, r3, #3
 801a406:	921e      	str	r2, [sp, #120]	@ 0x78
 801a408:	011a      	lsls	r2, r3, #4
 801a40a:	921d      	str	r2, [sp, #116]	@ 0x74
 801a40c:	001a      	movs	r2, r3
 801a40e:	4694      	mov	ip, r2
 801a410:	005b      	lsls	r3, r3, #1
 801a412:	4463      	add	r3, ip
 801a414:	00db      	lsls	r3, r3, #3
 801a416:	931c      	str	r3, [sp, #112]	@ 0x70
 801a418:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a41a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a41c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a41e:	9318      	str	r3, [sp, #96]	@ 0x60
 801a420:	9319      	str	r3, [sp, #100]	@ 0x64
 801a422:	9316      	str	r3, [sp, #88]	@ 0x58
 801a424:	2300      	movs	r3, #0
 801a426:	9315      	str	r3, [sp, #84]	@ 0x54
 801a428:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a42a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a42c:	681a      	ldr	r2, [r3, #0]
 801a42e:	685b      	ldr	r3, [r3, #4]
 801a430:	9205      	str	r2, [sp, #20]
 801a432:	9306      	str	r3, [sp, #24]
 801a434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a436:	468c      	mov	ip, r1
 801a438:	681a      	ldr	r2, [r3, #0]
 801a43a:	685b      	ldr	r3, [r3, #4]
 801a43c:	9207      	str	r2, [sp, #28]
 801a43e:	9308      	str	r3, [sp, #32]
 801a440:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a442:	681a      	ldr	r2, [r3, #0]
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	9209      	str	r2, [sp, #36]	@ 0x24
 801a448:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a44a:	930a      	str	r3, [sp, #40]	@ 0x28
 801a44c:	0013      	movs	r3, r2
 801a44e:	4463      	add	r3, ip
 801a450:	4698      	mov	r8, r3
 801a452:	0013      	movs	r3, r2
 801a454:	4442      	add	r2, r8
 801a456:	4691      	mov	r9, r2
 801a458:	001a      	movs	r2, r3
 801a45a:	444a      	add	r2, r9
 801a45c:	4692      	mov	sl, r2
 801a45e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a460:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a462:	4293      	cmp	r3, r2
 801a464:	d800      	bhi.n	801a468 <arm_radix4_butterfly_q31+0x2bc>
 801a466:	e0dd      	b.n	801a624 <arm_radix4_butterfly_q31+0x478>
 801a468:	4694      	mov	ip, r2
 801a46a:	468b      	mov	fp, r1
 801a46c:	4644      	mov	r4, r8
 801a46e:	4655      	mov	r5, sl
 801a470:	9b07      	ldr	r3, [sp, #28]
 801a472:	17db      	asrs	r3, r3, #31
 801a474:	930c      	str	r3, [sp, #48]	@ 0x30
 801a476:	9b08      	ldr	r3, [sp, #32]
 801a478:	17db      	asrs	r3, r3, #31
 801a47a:	930d      	str	r3, [sp, #52]	@ 0x34
 801a47c:	9b05      	ldr	r3, [sp, #20]
 801a47e:	17db      	asrs	r3, r3, #31
 801a480:	930e      	str	r3, [sp, #56]	@ 0x38
 801a482:	9b06      	ldr	r3, [sp, #24]
 801a484:	17db      	asrs	r3, r3, #31
 801a486:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a48a:	17db      	asrs	r3, r3, #31
 801a48c:	9310      	str	r3, [sp, #64]	@ 0x40
 801a48e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a490:	17db      	asrs	r3, r3, #31
 801a492:	9311      	str	r3, [sp, #68]	@ 0x44
 801a494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a496:	4463      	add	r3, ip
 801a498:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a49a:	465b      	mov	r3, fp
 801a49c:	4659      	mov	r1, fp
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	464b      	mov	r3, r9
 801a4a2:	684f      	ldr	r7, [r1, #4]
 801a4a4:	4649      	mov	r1, r9
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	18d6      	adds	r6, r2, r3
 801a4aa:	1ad3      	subs	r3, r2, r3
 801a4ac:	9301      	str	r3, [sp, #4]
 801a4ae:	684b      	ldr	r3, [r1, #4]
 801a4b0:	18f8      	adds	r0, r7, r3
 801a4b2:	1af9      	subs	r1, r7, r3
 801a4b4:	6827      	ldr	r7, [r4, #0]
 801a4b6:	9102      	str	r1, [sp, #8]
 801a4b8:	003a      	movs	r2, r7
 801a4ba:	682f      	ldr	r7, [r5, #0]
 801a4bc:	46bc      	mov	ip, r7
 801a4be:	465f      	mov	r7, fp
 801a4c0:	4462      	add	r2, ip
 801a4c2:	18b3      	adds	r3, r6, r2
 801a4c4:	109b      	asrs	r3, r3, #2
 801a4c6:	603b      	str	r3, [r7, #0]
 801a4c8:	6867      	ldr	r7, [r4, #4]
 801a4ca:	1ab6      	subs	r6, r6, r2
 801a4cc:	46b8      	mov	r8, r7
 801a4ce:	686f      	ldr	r7, [r5, #4]
 801a4d0:	17f2      	asrs	r2, r6, #31
 801a4d2:	46bc      	mov	ip, r7
 801a4d4:	44e0      	add	r8, ip
 801a4d6:	4643      	mov	r3, r8
 801a4d8:	465f      	mov	r7, fp
 801a4da:	18c1      	adds	r1, r0, r3
 801a4dc:	1089      	asrs	r1, r1, #2
 801a4de:	6079      	str	r1, [r7, #4]
 801a4e0:	9900      	ldr	r1, [sp, #0]
 801a4e2:	4690      	mov	r8, r2
 801a4e4:	468c      	mov	ip, r1
 801a4e6:	6867      	ldr	r7, [r4, #4]
 801a4e8:	6869      	ldr	r1, [r5, #4]
 801a4ea:	44e3      	add	fp, ip
 801a4ec:	1a7f      	subs	r7, r7, r1
 801a4ee:	9703      	str	r7, [sp, #12]
 801a4f0:	6829      	ldr	r1, [r5, #0]
 801a4f2:	6827      	ldr	r7, [r4, #0]
 801a4f4:	1a7f      	subs	r7, r7, r1
 801a4f6:	9704      	str	r7, [sp, #16]
 801a4f8:	1ac7      	subs	r7, r0, r3
 801a4fa:	17fa      	asrs	r2, r7, #31
 801a4fc:	4692      	mov	sl, r2
 801a4fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a500:	9a07      	ldr	r2, [sp, #28]
 801a502:	0030      	movs	r0, r6
 801a504:	4641      	mov	r1, r8
 801a506:	f7e6 f85b 	bl	80005c0 <__aeabi_lmul>
 801a50a:	9a08      	ldr	r2, [sp, #32]
 801a50c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a50e:	9112      	str	r1, [sp, #72]	@ 0x48
 801a510:	0038      	movs	r0, r7
 801a512:	4651      	mov	r1, sl
 801a514:	f7e6 f854 	bl	80005c0 <__aeabi_lmul>
 801a518:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a51a:	9a07      	ldr	r2, [sp, #28]
 801a51c:	4684      	mov	ip, r0
 801a51e:	4461      	add	r1, ip
 801a520:	1049      	asrs	r1, r1, #1
 801a522:	6021      	str	r1, [r4, #0]
 801a524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a526:	0038      	movs	r0, r7
 801a528:	4651      	mov	r1, sl
 801a52a:	f7e6 f849 	bl	80005c0 <__aeabi_lmul>
 801a52e:	9a08      	ldr	r2, [sp, #32]
 801a530:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a532:	000f      	movs	r7, r1
 801a534:	0030      	movs	r0, r6
 801a536:	4641      	mov	r1, r8
 801a538:	f7e6 f842 	bl	80005c0 <__aeabi_lmul>
 801a53c:	9b00      	ldr	r3, [sp, #0]
 801a53e:	9a01      	ldr	r2, [sp, #4]
 801a540:	469c      	mov	ip, r3
 801a542:	9803      	ldr	r0, [sp, #12]
 801a544:	1a7f      	subs	r7, r7, r1
 801a546:	107f      	asrs	r7, r7, #1
 801a548:	6067      	str	r7, [r4, #4]
 801a54a:	0016      	movs	r6, r2
 801a54c:	4464      	add	r4, ip
 801a54e:	4684      	mov	ip, r0
 801a550:	4466      	add	r6, ip
 801a552:	17f2      	asrs	r2, r6, #31
 801a554:	4690      	mov	r8, r2
 801a556:	9902      	ldr	r1, [sp, #8]
 801a558:	9f04      	ldr	r7, [sp, #16]
 801a55a:	0030      	movs	r0, r6
 801a55c:	1bcf      	subs	r7, r1, r7
 801a55e:	17fa      	asrs	r2, r7, #31
 801a560:	4692      	mov	sl, r2
 801a562:	4641      	mov	r1, r8
 801a564:	9a05      	ldr	r2, [sp, #20]
 801a566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a568:	f7e6 f82a 	bl	80005c0 <__aeabi_lmul>
 801a56c:	9a06      	ldr	r2, [sp, #24]
 801a56e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a570:	9112      	str	r1, [sp, #72]	@ 0x48
 801a572:	0038      	movs	r0, r7
 801a574:	4651      	mov	r1, sl
 801a576:	f7e6 f823 	bl	80005c0 <__aeabi_lmul>
 801a57a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a57c:	9a05      	ldr	r2, [sp, #20]
 801a57e:	4684      	mov	ip, r0
 801a580:	4648      	mov	r0, r9
 801a582:	4461      	add	r1, ip
 801a584:	1049      	asrs	r1, r1, #1
 801a586:	6001      	str	r1, [r0, #0]
 801a588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a58a:	0038      	movs	r0, r7
 801a58c:	4651      	mov	r1, sl
 801a58e:	f7e6 f817 	bl	80005c0 <__aeabi_lmul>
 801a592:	9a06      	ldr	r2, [sp, #24]
 801a594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a596:	000f      	movs	r7, r1
 801a598:	0030      	movs	r0, r6
 801a59a:	4641      	mov	r1, r8
 801a59c:	f7e6 f810 	bl	80005c0 <__aeabi_lmul>
 801a5a0:	464e      	mov	r6, r9
 801a5a2:	9a00      	ldr	r2, [sp, #0]
 801a5a4:	9b01      	ldr	r3, [sp, #4]
 801a5a6:	4694      	mov	ip, r2
 801a5a8:	9803      	ldr	r0, [sp, #12]
 801a5aa:	1a7f      	subs	r7, r7, r1
 801a5ac:	107f      	asrs	r7, r7, #1
 801a5ae:	6077      	str	r7, [r6, #4]
 801a5b0:	1a1e      	subs	r6, r3, r0
 801a5b2:	9b04      	ldr	r3, [sp, #16]
 801a5b4:	44e1      	add	r9, ip
 801a5b6:	469c      	mov	ip, r3
 801a5b8:	17f0      	asrs	r0, r6, #31
 801a5ba:	4680      	mov	r8, r0
 801a5bc:	9902      	ldr	r1, [sp, #8]
 801a5be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5c0:	4461      	add	r1, ip
 801a5c2:	17cb      	asrs	r3, r1, #31
 801a5c4:	000f      	movs	r7, r1
 801a5c6:	469a      	mov	sl, r3
 801a5c8:	0030      	movs	r0, r6
 801a5ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a5cc:	4641      	mov	r1, r8
 801a5ce:	f7e5 fff7 	bl	80005c0 <__aeabi_lmul>
 801a5d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a5d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a5d6:	9101      	str	r1, [sp, #4]
 801a5d8:	0038      	movs	r0, r7
 801a5da:	4651      	mov	r1, sl
 801a5dc:	f7e5 fff0 	bl	80005c0 <__aeabi_lmul>
 801a5e0:	9801      	ldr	r0, [sp, #4]
 801a5e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5e4:	4684      	mov	ip, r0
 801a5e6:	4461      	add	r1, ip
 801a5e8:	1049      	asrs	r1, r1, #1
 801a5ea:	6029      	str	r1, [r5, #0]
 801a5ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a5ee:	0038      	movs	r0, r7
 801a5f0:	4651      	mov	r1, sl
 801a5f2:	f7e5 ffe5 	bl	80005c0 <__aeabi_lmul>
 801a5f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a5f8:	000f      	movs	r7, r1
 801a5fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a5fc:	0030      	movs	r0, r6
 801a5fe:	4641      	mov	r1, r8
 801a600:	f7e5 ffde 	bl	80005c0 <__aeabi_lmul>
 801a604:	1a7f      	subs	r7, r7, r1
 801a606:	107f      	asrs	r7, r7, #1
 801a608:	606f      	str	r7, [r5, #4]
 801a60a:	9a00      	ldr	r2, [sp, #0]
 801a60c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a60e:	4694      	mov	ip, r2
 801a610:	4465      	add	r5, ip
 801a612:	468c      	mov	ip, r1
 801a614:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a616:	0013      	movs	r3, r2
 801a618:	4462      	add	r2, ip
 801a61a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a61c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a61e:	429a      	cmp	r2, r3
 801a620:	d900      	bls.n	801a624 <arm_radix4_butterfly_q31+0x478>
 801a622:	e73a      	b.n	801a49a <arm_radix4_butterfly_q31+0x2ee>
 801a624:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a626:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a628:	468c      	mov	ip, r1
 801a62a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801a62c:	4462      	add	r2, ip
 801a62e:	468c      	mov	ip, r1
 801a630:	9216      	str	r2, [sp, #88]	@ 0x58
 801a632:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801a634:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a636:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a638:	4462      	add	r2, ip
 801a63a:	468c      	mov	ip, r1
 801a63c:	9219      	str	r2, [sp, #100]	@ 0x64
 801a63e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a640:	3301      	adds	r3, #1
 801a642:	4462      	add	r2, ip
 801a644:	9218      	str	r2, [sp, #96]	@ 0x60
 801a646:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a648:	9315      	str	r3, [sp, #84]	@ 0x54
 801a64a:	3208      	adds	r2, #8
 801a64c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a64e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a650:	4293      	cmp	r3, r2
 801a652:	d800      	bhi.n	801a656 <arm_radix4_butterfly_q31+0x4aa>
 801a654:	e6e8      	b.n	801a428 <arm_radix4_butterfly_q31+0x27c>
 801a656:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a658:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a65a:	009b      	lsls	r3, r3, #2
 801a65c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a65e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a660:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a662:	089b      	lsrs	r3, r3, #2
 801a664:	9320      	str	r3, [sp, #128]	@ 0x80
 801a666:	2b04      	cmp	r3, #4
 801a668:	d900      	bls.n	801a66c <arm_radix4_butterfly_q31+0x4c0>
 801a66a:	e6c1      	b.n	801a3f0 <arm_radix4_butterfly_q31+0x244>
 801a66c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a66e:	469a      	mov	sl, r3
 801a670:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a672:	691c      	ldr	r4, [r3, #16]
 801a674:	685a      	ldr	r2, [r3, #4]
 801a676:	46a1      	mov	r9, r4
 801a678:	4690      	mov	r8, r2
 801a67a:	6819      	ldr	r1, [r3, #0]
 801a67c:	689a      	ldr	r2, [r3, #8]
 801a67e:	699f      	ldr	r7, [r3, #24]
 801a680:	188d      	adds	r5, r1, r2
 801a682:	444d      	add	r5, r9
 801a684:	19ed      	adds	r5, r5, r7
 801a686:	69de      	ldr	r6, [r3, #28]
 801a688:	601d      	str	r5, [r3, #0]
 801a68a:	4645      	mov	r5, r8
 801a68c:	46b4      	mov	ip, r6
 801a68e:	68d8      	ldr	r0, [r3, #12]
 801a690:	695c      	ldr	r4, [r3, #20]
 801a692:	182d      	adds	r5, r5, r0
 801a694:	192d      	adds	r5, r5, r4
 801a696:	4465      	add	r5, ip
 801a698:	605d      	str	r5, [r3, #4]
 801a69a:	1a8d      	subs	r5, r1, r2
 801a69c:	444d      	add	r5, r9
 801a69e:	1bed      	subs	r5, r5, r7
 801a6a0:	609d      	str	r5, [r3, #8]
 801a6a2:	4645      	mov	r5, r8
 801a6a4:	1a2d      	subs	r5, r5, r0
 801a6a6:	192d      	adds	r5, r5, r4
 801a6a8:	1bad      	subs	r5, r5, r6
 801a6aa:	464e      	mov	r6, r9
 801a6ac:	60dd      	str	r5, [r3, #12]
 801a6ae:	180d      	adds	r5, r1, r0
 801a6b0:	1bad      	subs	r5, r5, r6
 801a6b2:	4666      	mov	r6, ip
 801a6b4:	1bad      	subs	r5, r5, r6
 801a6b6:	611d      	str	r5, [r3, #16]
 801a6b8:	4645      	mov	r5, r8
 801a6ba:	1aad      	subs	r5, r5, r2
 801a6bc:	4442      	add	r2, r8
 801a6be:	1b12      	subs	r2, r2, r4
 801a6c0:	1bd2      	subs	r2, r2, r7
 801a6c2:	1a08      	subs	r0, r1, r0
 801a6c4:	61da      	str	r2, [r3, #28]
 801a6c6:	4649      	mov	r1, r9
 801a6c8:	2201      	movs	r2, #1
 801a6ca:	1a41      	subs	r1, r0, r1
 801a6cc:	4252      	negs	r2, r2
 801a6ce:	4461      	add	r1, ip
 801a6d0:	4694      	mov	ip, r2
 801a6d2:	44e2      	add	sl, ip
 801a6d4:	4652      	mov	r2, sl
 801a6d6:	1b2d      	subs	r5, r5, r4
 801a6d8:	19ed      	adds	r5, r5, r7
 801a6da:	615d      	str	r5, [r3, #20]
 801a6dc:	6199      	str	r1, [r3, #24]
 801a6de:	3320      	adds	r3, #32
 801a6e0:	2a00      	cmp	r2, #0
 801a6e2:	d1c6      	bne.n	801a672 <arm_radix4_butterfly_q31+0x4c6>
 801a6e4:	b027      	add	sp, #156	@ 0x9c
 801a6e6:	bc3c      	pop	{r2, r3, r4, r5}
 801a6e8:	4690      	mov	r8, r2
 801a6ea:	4699      	mov	r9, r3
 801a6ec:	46a2      	mov	sl, r4
 801a6ee:	46ab      	mov	fp, r5
 801a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6f2:	469a      	mov	sl, r3
 801a6f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a6f6:	e7bc      	b.n	801a672 <arm_radix4_butterfly_q31+0x4c6>

0801a6f8 <arm_radix4_butterfly_inverse_q31>:
 801a6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6fa:	464d      	mov	r5, r9
 801a6fc:	4644      	mov	r4, r8
 801a6fe:	465f      	mov	r7, fp
 801a700:	4656      	mov	r6, sl
 801a702:	b4f0      	push	{r4, r5, r6, r7}
 801a704:	b0a7      	sub	sp, #156	@ 0x9c
 801a706:	469c      	mov	ip, r3
 801a708:	9114      	str	r1, [sp, #80]	@ 0x50
 801a70a:	0889      	lsrs	r1, r1, #2
 801a70c:	9310      	str	r3, [sp, #64]	@ 0x40
 801a70e:	00cb      	lsls	r3, r1, #3
 801a710:	0015      	movs	r5, r2
 801a712:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a714:	18c2      	adds	r2, r0, r3
 801a716:	000c      	movs	r4, r1
 801a718:	9124      	str	r1, [sp, #144]	@ 0x90
 801a71a:	18d1      	adds	r1, r2, r3
 801a71c:	468b      	mov	fp, r1
 801a71e:	469a      	mov	sl, r3
 801a720:	4663      	mov	r3, ip
 801a722:	44da      	add	sl, fp
 801a724:	46d0      	mov	r8, sl
 801a726:	4681      	mov	r9, r0
 801a728:	4692      	mov	sl, r2
 801a72a:	0119      	lsls	r1, r3, #4
 801a72c:	910d      	str	r1, [sp, #52]	@ 0x34
 801a72e:	00d9      	lsls	r1, r3, #3
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	4463      	add	r3, ip
 801a734:	910e      	str	r1, [sp, #56]	@ 0x38
 801a736:	00d9      	lsls	r1, r3, #3
 801a738:	9022      	str	r0, [sp, #136]	@ 0x88
 801a73a:	9025      	str	r0, [sp, #148]	@ 0x94
 801a73c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a73e:	9502      	str	r5, [sp, #8]
 801a740:	9500      	str	r5, [sp, #0]
 801a742:	9501      	str	r5, [sp, #4]
 801a744:	9409      	str	r4, [sp, #36]	@ 0x24
 801a746:	464b      	mov	r3, r9
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	4652      	mov	r2, sl
 801a74c:	111c      	asrs	r4, r3, #4
 801a74e:	465b      	mov	r3, fp
 801a750:	4648      	mov	r0, r9
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	6812      	ldr	r2, [r2, #0]
 801a756:	6840      	ldr	r0, [r0, #4]
 801a758:	111b      	asrs	r3, r3, #4
 801a75a:	18e7      	adds	r7, r4, r3
 801a75c:	1ae3      	subs	r3, r4, r3
 801a75e:	1114      	asrs	r4, r2, #4
 801a760:	4642      	mov	r2, r8
 801a762:	1105      	asrs	r5, r0, #4
 801a764:	4658      	mov	r0, fp
 801a766:	6812      	ldr	r2, [r2, #0]
 801a768:	6840      	ldr	r0, [r0, #4]
 801a76a:	9303      	str	r3, [sp, #12]
 801a76c:	1113      	asrs	r3, r2, #4
 801a76e:	18e2      	adds	r2, r4, r3
 801a770:	1103      	asrs	r3, r0, #4
 801a772:	18ee      	adds	r6, r5, r3
 801a774:	1ae8      	subs	r0, r5, r3
 801a776:	464d      	mov	r5, r9
 801a778:	18bb      	adds	r3, r7, r2
 801a77a:	602b      	str	r3, [r5, #0]
 801a77c:	4641      	mov	r1, r8
 801a77e:	4655      	mov	r5, sl
 801a780:	6849      	ldr	r1, [r1, #4]
 801a782:	686d      	ldr	r5, [r5, #4]
 801a784:	110b      	asrs	r3, r1, #4
 801a786:	112d      	asrs	r5, r5, #4
 801a788:	18eb      	adds	r3, r5, r3
 801a78a:	464d      	mov	r5, r9
 801a78c:	18f1      	adds	r1, r6, r3
 801a78e:	6069      	str	r1, [r5, #4]
 801a790:	4655      	mov	r5, sl
 801a792:	686d      	ldr	r5, [r5, #4]
 801a794:	9004      	str	r0, [sp, #16]
 801a796:	112c      	asrs	r4, r5, #4
 801a798:	4645      	mov	r5, r8
 801a79a:	686d      	ldr	r5, [r5, #4]
 801a79c:	1129      	asrs	r1, r5, #4
 801a79e:	1a65      	subs	r5, r4, r1
 801a7a0:	4651      	mov	r1, sl
 801a7a2:	6809      	ldr	r1, [r1, #0]
 801a7a4:	1abc      	subs	r4, r7, r2
 801a7a6:	1108      	asrs	r0, r1, #4
 801a7a8:	4641      	mov	r1, r8
 801a7aa:	17e2      	asrs	r2, r4, #31
 801a7ac:	6809      	ldr	r1, [r1, #0]
 801a7ae:	9207      	str	r2, [sp, #28]
 801a7b0:	9a01      	ldr	r2, [sp, #4]
 801a7b2:	1109      	asrs	r1, r1, #4
 801a7b4:	6817      	ldr	r7, [r2, #0]
 801a7b6:	1a41      	subs	r1, r0, r1
 801a7b8:	9106      	str	r1, [sp, #24]
 801a7ba:	0039      	movs	r1, r7
 801a7bc:	17ff      	asrs	r7, r7, #31
 801a7be:	0038      	movs	r0, r7
 801a7c0:	9505      	str	r5, [sp, #20]
 801a7c2:	1af5      	subs	r5, r6, r3
 801a7c4:	17ef      	asrs	r7, r5, #31
 801a7c6:	970b      	str	r7, [sp, #44]	@ 0x2c
 801a7c8:	6857      	ldr	r7, [r2, #4]
 801a7ca:	0003      	movs	r3, r0
 801a7cc:	17fe      	asrs	r6, r7, #31
 801a7ce:	000a      	movs	r2, r1
 801a7d0:	9108      	str	r1, [sp, #32]
 801a7d2:	900a      	str	r0, [sp, #40]	@ 0x28
 801a7d4:	17e1      	asrs	r1, r4, #31
 801a7d6:	0020      	movs	r0, r4
 801a7d8:	960c      	str	r6, [sp, #48]	@ 0x30
 801a7da:	f7e5 fef1 	bl	80005c0 <__aeabi_lmul>
 801a7de:	003a      	movs	r2, r7
 801a7e0:	17fb      	asrs	r3, r7, #31
 801a7e2:	000e      	movs	r6, r1
 801a7e4:	0028      	movs	r0, r5
 801a7e6:	17e9      	asrs	r1, r5, #31
 801a7e8:	f7e5 feea 	bl	80005c0 <__aeabi_lmul>
 801a7ec:	4653      	mov	r3, sl
 801a7ee:	1a76      	subs	r6, r6, r1
 801a7f0:	0076      	lsls	r6, r6, #1
 801a7f2:	601e      	str	r6, [r3, #0]
 801a7f4:	002a      	movs	r2, r5
 801a7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a7f8:	9808      	ldr	r0, [sp, #32]
 801a7fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a7fc:	f7e5 fee0 	bl	80005c0 <__aeabi_lmul>
 801a800:	003a      	movs	r2, r7
 801a802:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a804:	000d      	movs	r5, r1
 801a806:	0020      	movs	r0, r4
 801a808:	9907      	ldr	r1, [sp, #28]
 801a80a:	f7e5 fed9 	bl	80005c0 <__aeabi_lmul>
 801a80e:	4657      	mov	r7, sl
 801a810:	186d      	adds	r5, r5, r1
 801a812:	006d      	lsls	r5, r5, #1
 801a814:	607d      	str	r5, [r7, #4]
 801a816:	9b03      	ldr	r3, [sp, #12]
 801a818:	9e06      	ldr	r6, [sp, #24]
 801a81a:	9d05      	ldr	r5, [sp, #20]
 801a81c:	46b4      	mov	ip, r6
 801a81e:	1b5d      	subs	r5, r3, r5
 801a820:	9b00      	ldr	r3, [sp, #0]
 801a822:	17ef      	asrs	r7, r5, #31
 801a824:	0039      	movs	r1, r7
 801a826:	681f      	ldr	r7, [r3, #0]
 801a828:	17fc      	asrs	r4, r7, #31
 801a82a:	0020      	movs	r0, r4
 801a82c:	9c04      	ldr	r4, [sp, #16]
 801a82e:	4464      	add	r4, ip
 801a830:	17e6      	asrs	r6, r4, #31
 801a832:	9407      	str	r4, [sp, #28]
 801a834:	9608      	str	r6, [sp, #32]
 801a836:	685e      	ldr	r6, [r3, #4]
 801a838:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a83a:	17f2      	asrs	r2, r6, #31
 801a83c:	0003      	movs	r3, r0
 801a83e:	920c      	str	r2, [sp, #48]	@ 0x30
 801a840:	0028      	movs	r0, r5
 801a842:	003a      	movs	r2, r7
 801a844:	910a      	str	r1, [sp, #40]	@ 0x28
 801a846:	f7e5 febb 	bl	80005c0 <__aeabi_lmul>
 801a84a:	0032      	movs	r2, r6
 801a84c:	17f3      	asrs	r3, r6, #31
 801a84e:	9807      	ldr	r0, [sp, #28]
 801a850:	000c      	movs	r4, r1
 801a852:	9908      	ldr	r1, [sp, #32]
 801a854:	f7e5 feb4 	bl	80005c0 <__aeabi_lmul>
 801a858:	4658      	mov	r0, fp
 801a85a:	1a64      	subs	r4, r4, r1
 801a85c:	0064      	lsls	r4, r4, #1
 801a85e:	9a07      	ldr	r2, [sp, #28]
 801a860:	6004      	str	r4, [r0, #0]
 801a862:	9b08      	ldr	r3, [sp, #32]
 801a864:	0038      	movs	r0, r7
 801a866:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a868:	f7e5 feaa 	bl	80005c0 <__aeabi_lmul>
 801a86c:	0032      	movs	r2, r6
 801a86e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a870:	000c      	movs	r4, r1
 801a872:	0028      	movs	r0, r5
 801a874:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a876:	f7e5 fea3 	bl	80005c0 <__aeabi_lmul>
 801a87a:	9d05      	ldr	r5, [sp, #20]
 801a87c:	465f      	mov	r7, fp
 801a87e:	46ac      	mov	ip, r5
 801a880:	1864      	adds	r4, r4, r1
 801a882:	9903      	ldr	r1, [sp, #12]
 801a884:	0064      	lsls	r4, r4, #1
 801a886:	4461      	add	r1, ip
 801a888:	607c      	str	r4, [r7, #4]
 801a88a:	000c      	movs	r4, r1
 801a88c:	17c9      	asrs	r1, r1, #31
 801a88e:	9105      	str	r1, [sp, #20]
 801a890:	9902      	ldr	r1, [sp, #8]
 801a892:	9804      	ldr	r0, [sp, #16]
 801a894:	680d      	ldr	r5, [r1, #0]
 801a896:	9e06      	ldr	r6, [sp, #24]
 801a898:	002b      	movs	r3, r5
 801a89a:	17ed      	asrs	r5, r5, #31
 801a89c:	684f      	ldr	r7, [r1, #4]
 801a89e:	9503      	str	r5, [sp, #12]
 801a8a0:	1b85      	subs	r5, r0, r6
 801a8a2:	17e8      	asrs	r0, r5, #31
 801a8a4:	001a      	movs	r2, r3
 801a8a6:	9006      	str	r0, [sp, #24]
 801a8a8:	17fe      	asrs	r6, r7, #31
 801a8aa:	9304      	str	r3, [sp, #16]
 801a8ac:	0020      	movs	r0, r4
 801a8ae:	9b03      	ldr	r3, [sp, #12]
 801a8b0:	17e1      	asrs	r1, r4, #31
 801a8b2:	9607      	str	r6, [sp, #28]
 801a8b4:	f7e5 fe84 	bl	80005c0 <__aeabi_lmul>
 801a8b8:	003a      	movs	r2, r7
 801a8ba:	000e      	movs	r6, r1
 801a8bc:	17fb      	asrs	r3, r7, #31
 801a8be:	0028      	movs	r0, r5
 801a8c0:	17e9      	asrs	r1, r5, #31
 801a8c2:	f7e5 fe7d 	bl	80005c0 <__aeabi_lmul>
 801a8c6:	4640      	mov	r0, r8
 801a8c8:	1a76      	subs	r6, r6, r1
 801a8ca:	0076      	lsls	r6, r6, #1
 801a8cc:	002a      	movs	r2, r5
 801a8ce:	9b06      	ldr	r3, [sp, #24]
 801a8d0:	6006      	str	r6, [r0, #0]
 801a8d2:	9903      	ldr	r1, [sp, #12]
 801a8d4:	9804      	ldr	r0, [sp, #16]
 801a8d6:	f7e5 fe73 	bl	80005c0 <__aeabi_lmul>
 801a8da:	0020      	movs	r0, r4
 801a8dc:	2408      	movs	r4, #8
 801a8de:	9b07      	ldr	r3, [sp, #28]
 801a8e0:	000d      	movs	r5, r1
 801a8e2:	003a      	movs	r2, r7
 801a8e4:	9905      	ldr	r1, [sp, #20]
 801a8e6:	f7e5 fe6b 	bl	80005c0 <__aeabi_lmul>
 801a8ea:	4640      	mov	r0, r8
 801a8ec:	46a4      	mov	ip, r4
 801a8ee:	186d      	adds	r5, r5, r1
 801a8f0:	006d      	lsls	r5, r5, #1
 801a8f2:	6045      	str	r5, [r0, #4]
 801a8f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a8f6:	44e1      	add	r9, ip
 801a8f8:	3801      	subs	r0, #1
 801a8fa:	9009      	str	r0, [sp, #36]	@ 0x24
 801a8fc:	9a01      	ldr	r2, [sp, #4]
 801a8fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a900:	44e2      	add	sl, ip
 801a902:	44e3      	add	fp, ip
 801a904:	44e0      	add	r8, ip
 801a906:	46a4      	mov	ip, r4
 801a908:	4462      	add	r2, ip
 801a90a:	9201      	str	r2, [sp, #4]
 801a90c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a90e:	9b00      	ldr	r3, [sp, #0]
 801a910:	4694      	mov	ip, r2
 801a912:	4463      	add	r3, ip
 801a914:	9300      	str	r3, [sp, #0]
 801a916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a918:	9902      	ldr	r1, [sp, #8]
 801a91a:	469c      	mov	ip, r3
 801a91c:	4461      	add	r1, ip
 801a91e:	9102      	str	r1, [sp, #8]
 801a920:	2800      	cmp	r0, #0
 801a922:	d000      	beq.n	801a926 <arm_radix4_butterfly_inverse_q31+0x22e>
 801a924:	e70f      	b.n	801a746 <arm_radix4_butterfly_inverse_q31+0x4e>
 801a926:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a928:	009b      	lsls	r3, r3, #2
 801a92a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a92c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a92e:	9320      	str	r3, [sp, #128]	@ 0x80
 801a930:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a932:	2b04      	cmp	r3, #4
 801a934:	d800      	bhi.n	801a938 <arm_radix4_butterfly_inverse_q31+0x240>
 801a936:	e17c      	b.n	801ac32 <arm_radix4_butterfly_inverse_q31+0x53a>
 801a938:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a93a:	0893      	lsrs	r3, r2, #2
 801a93c:	1e59      	subs	r1, r3, #1
 801a93e:	9321      	str	r3, [sp, #132]	@ 0x84
 801a940:	00db      	lsls	r3, r3, #3
 801a942:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a944:	00d3      	lsls	r3, r2, #3
 801a946:	9300      	str	r3, [sp, #0]
 801a948:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a94a:	911a      	str	r1, [sp, #104]	@ 0x68
 801a94c:	00da      	lsls	r2, r3, #3
 801a94e:	921e      	str	r2, [sp, #120]	@ 0x78
 801a950:	011a      	lsls	r2, r3, #4
 801a952:	921d      	str	r2, [sp, #116]	@ 0x74
 801a954:	001a      	movs	r2, r3
 801a956:	4694      	mov	ip, r2
 801a958:	005b      	lsls	r3, r3, #1
 801a95a:	4463      	add	r3, ip
 801a95c:	00db      	lsls	r3, r3, #3
 801a95e:	931c      	str	r3, [sp, #112]	@ 0x70
 801a960:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a962:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a964:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a966:	9318      	str	r3, [sp, #96]	@ 0x60
 801a968:	9319      	str	r3, [sp, #100]	@ 0x64
 801a96a:	9316      	str	r3, [sp, #88]	@ 0x58
 801a96c:	2300      	movs	r3, #0
 801a96e:	9315      	str	r3, [sp, #84]	@ 0x54
 801a970:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a972:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a974:	681a      	ldr	r2, [r3, #0]
 801a976:	685b      	ldr	r3, [r3, #4]
 801a978:	9205      	str	r2, [sp, #20]
 801a97a:	9306      	str	r3, [sp, #24]
 801a97c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a97e:	468c      	mov	ip, r1
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	685b      	ldr	r3, [r3, #4]
 801a984:	9207      	str	r2, [sp, #28]
 801a986:	9308      	str	r3, [sp, #32]
 801a988:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a98a:	681a      	ldr	r2, [r3, #0]
 801a98c:	685b      	ldr	r3, [r3, #4]
 801a98e:	9209      	str	r2, [sp, #36]	@ 0x24
 801a990:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a992:	930a      	str	r3, [sp, #40]	@ 0x28
 801a994:	0013      	movs	r3, r2
 801a996:	4463      	add	r3, ip
 801a998:	4698      	mov	r8, r3
 801a99a:	0013      	movs	r3, r2
 801a99c:	4442      	add	r2, r8
 801a99e:	4691      	mov	r9, r2
 801a9a0:	001a      	movs	r2, r3
 801a9a2:	444a      	add	r2, r9
 801a9a4:	4692      	mov	sl, r2
 801a9a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a9a8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a9aa:	4293      	cmp	r3, r2
 801a9ac:	d800      	bhi.n	801a9b0 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801a9ae:	e0d9      	b.n	801ab64 <arm_radix4_butterfly_inverse_q31+0x46c>
 801a9b0:	4694      	mov	ip, r2
 801a9b2:	4644      	mov	r4, r8
 801a9b4:	4655      	mov	r5, sl
 801a9b6:	4688      	mov	r8, r1
 801a9b8:	9b07      	ldr	r3, [sp, #28]
 801a9ba:	17db      	asrs	r3, r3, #31
 801a9bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801a9be:	9b08      	ldr	r3, [sp, #32]
 801a9c0:	17db      	asrs	r3, r3, #31
 801a9c2:	930d      	str	r3, [sp, #52]	@ 0x34
 801a9c4:	9b05      	ldr	r3, [sp, #20]
 801a9c6:	17db      	asrs	r3, r3, #31
 801a9c8:	930e      	str	r3, [sp, #56]	@ 0x38
 801a9ca:	9b06      	ldr	r3, [sp, #24]
 801a9cc:	17db      	asrs	r3, r3, #31
 801a9ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9d2:	17db      	asrs	r3, r3, #31
 801a9d4:	9310      	str	r3, [sp, #64]	@ 0x40
 801a9d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a9d8:	17db      	asrs	r3, r3, #31
 801a9da:	9311      	str	r3, [sp, #68]	@ 0x44
 801a9dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a9de:	4463      	add	r3, ip
 801a9e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9e2:	4643      	mov	r3, r8
 801a9e4:	4641      	mov	r1, r8
 801a9e6:	681a      	ldr	r2, [r3, #0]
 801a9e8:	464b      	mov	r3, r9
 801a9ea:	684f      	ldr	r7, [r1, #4]
 801a9ec:	4649      	mov	r1, r9
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	18d6      	adds	r6, r2, r3
 801a9f2:	1ad3      	subs	r3, r2, r3
 801a9f4:	9301      	str	r3, [sp, #4]
 801a9f6:	684b      	ldr	r3, [r1, #4]
 801a9f8:	1af9      	subs	r1, r7, r3
 801a9fa:	9102      	str	r1, [sp, #8]
 801a9fc:	6829      	ldr	r1, [r5, #0]
 801a9fe:	18f8      	adds	r0, r7, r3
 801aa00:	468c      	mov	ip, r1
 801aa02:	6827      	ldr	r7, [r4, #0]
 801aa04:	4467      	add	r7, ip
 801aa06:	003a      	movs	r2, r7
 801aa08:	19f3      	adds	r3, r6, r7
 801aa0a:	4647      	mov	r7, r8
 801aa0c:	109b      	asrs	r3, r3, #2
 801aa0e:	603b      	str	r3, [r7, #0]
 801aa10:	6869      	ldr	r1, [r5, #4]
 801aa12:	6867      	ldr	r7, [r4, #4]
 801aa14:	468c      	mov	ip, r1
 801aa16:	4467      	add	r7, ip
 801aa18:	003b      	movs	r3, r7
 801aa1a:	19c1      	adds	r1, r0, r7
 801aa1c:	4647      	mov	r7, r8
 801aa1e:	1ab6      	subs	r6, r6, r2
 801aa20:	1089      	asrs	r1, r1, #2
 801aa22:	6079      	str	r1, [r7, #4]
 801aa24:	17f2      	asrs	r2, r6, #31
 801aa26:	9900      	ldr	r1, [sp, #0]
 801aa28:	4692      	mov	sl, r2
 801aa2a:	468c      	mov	ip, r1
 801aa2c:	6867      	ldr	r7, [r4, #4]
 801aa2e:	6869      	ldr	r1, [r5, #4]
 801aa30:	44e0      	add	r8, ip
 801aa32:	1a7f      	subs	r7, r7, r1
 801aa34:	9703      	str	r7, [sp, #12]
 801aa36:	6821      	ldr	r1, [r4, #0]
 801aa38:	682f      	ldr	r7, [r5, #0]
 801aa3a:	1bc9      	subs	r1, r1, r7
 801aa3c:	1ac7      	subs	r7, r0, r3
 801aa3e:	17fa      	asrs	r2, r7, #31
 801aa40:	4693      	mov	fp, r2
 801aa42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa44:	9a07      	ldr	r2, [sp, #28]
 801aa46:	9104      	str	r1, [sp, #16]
 801aa48:	0030      	movs	r0, r6
 801aa4a:	4651      	mov	r1, sl
 801aa4c:	f7e5 fdb8 	bl	80005c0 <__aeabi_lmul>
 801aa50:	9a08      	ldr	r2, [sp, #32]
 801aa52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aa54:	9112      	str	r1, [sp, #72]	@ 0x48
 801aa56:	0038      	movs	r0, r7
 801aa58:	4659      	mov	r1, fp
 801aa5a:	f7e5 fdb1 	bl	80005c0 <__aeabi_lmul>
 801aa5e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801aa60:	9a07      	ldr	r2, [sp, #28]
 801aa62:	1a41      	subs	r1, r0, r1
 801aa64:	1049      	asrs	r1, r1, #1
 801aa66:	6021      	str	r1, [r4, #0]
 801aa68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa6a:	0038      	movs	r0, r7
 801aa6c:	4659      	mov	r1, fp
 801aa6e:	f7e5 fda7 	bl	80005c0 <__aeabi_lmul>
 801aa72:	9a08      	ldr	r2, [sp, #32]
 801aa74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aa76:	000f      	movs	r7, r1
 801aa78:	0030      	movs	r0, r6
 801aa7a:	4651      	mov	r1, sl
 801aa7c:	f7e5 fda0 	bl	80005c0 <__aeabi_lmul>
 801aa80:	9b00      	ldr	r3, [sp, #0]
 801aa82:	187f      	adds	r7, r7, r1
 801aa84:	469c      	mov	ip, r3
 801aa86:	107f      	asrs	r7, r7, #1
 801aa88:	6067      	str	r7, [r4, #4]
 801aa8a:	9a01      	ldr	r2, [sp, #4]
 801aa8c:	9f03      	ldr	r7, [sp, #12]
 801aa8e:	9802      	ldr	r0, [sp, #8]
 801aa90:	1bd7      	subs	r7, r2, r7
 801aa92:	17fe      	asrs	r6, r7, #31
 801aa94:	0031      	movs	r1, r6
 801aa96:	9e04      	ldr	r6, [sp, #16]
 801aa98:	4682      	mov	sl, r0
 801aa9a:	4464      	add	r4, ip
 801aa9c:	46b4      	mov	ip, r6
 801aa9e:	44e2      	add	sl, ip
 801aaa0:	4652      	mov	r2, sl
 801aaa2:	17d2      	asrs	r2, r2, #31
 801aaa4:	4693      	mov	fp, r2
 801aaa6:	0038      	movs	r0, r7
 801aaa8:	9a05      	ldr	r2, [sp, #20]
 801aaaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aaac:	9112      	str	r1, [sp, #72]	@ 0x48
 801aaae:	f7e5 fd87 	bl	80005c0 <__aeabi_lmul>
 801aab2:	9a06      	ldr	r2, [sp, #24]
 801aab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aab6:	000e      	movs	r6, r1
 801aab8:	4650      	mov	r0, sl
 801aaba:	4659      	mov	r1, fp
 801aabc:	f7e5 fd80 	bl	80005c0 <__aeabi_lmul>
 801aac0:	4648      	mov	r0, r9
 801aac2:	1a76      	subs	r6, r6, r1
 801aac4:	1076      	asrs	r6, r6, #1
 801aac6:	6006      	str	r6, [r0, #0]
 801aac8:	9a05      	ldr	r2, [sp, #20]
 801aaca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aacc:	4650      	mov	r0, sl
 801aace:	4659      	mov	r1, fp
 801aad0:	f7e5 fd76 	bl	80005c0 <__aeabi_lmul>
 801aad4:	9a06      	ldr	r2, [sp, #24]
 801aad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aad8:	000e      	movs	r6, r1
 801aada:	0038      	movs	r0, r7
 801aadc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801aade:	f7e5 fd6f 	bl	80005c0 <__aeabi_lmul>
 801aae2:	9a00      	ldr	r2, [sp, #0]
 801aae4:	9f03      	ldr	r7, [sp, #12]
 801aae6:	4694      	mov	ip, r2
 801aae8:	1876      	adds	r6, r6, r1
 801aaea:	4649      	mov	r1, r9
 801aaec:	44e1      	add	r9, ip
 801aaee:	46bc      	mov	ip, r7
 801aaf0:	9b01      	ldr	r3, [sp, #4]
 801aaf2:	1076      	asrs	r6, r6, #1
 801aaf4:	4463      	add	r3, ip
 801aaf6:	17df      	asrs	r7, r3, #31
 801aaf8:	604e      	str	r6, [r1, #4]
 801aafa:	46ba      	mov	sl, r7
 801aafc:	001e      	movs	r6, r3
 801aafe:	9802      	ldr	r0, [sp, #8]
 801ab00:	9b04      	ldr	r3, [sp, #16]
 801ab02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ab04:	1ac7      	subs	r7, r0, r3
 801ab06:	17fb      	asrs	r3, r7, #31
 801ab08:	469b      	mov	fp, r3
 801ab0a:	0030      	movs	r0, r6
 801ab0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ab0e:	4651      	mov	r1, sl
 801ab10:	f7e5 fd56 	bl	80005c0 <__aeabi_lmul>
 801ab14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ab16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ab18:	9101      	str	r1, [sp, #4]
 801ab1a:	0038      	movs	r0, r7
 801ab1c:	4659      	mov	r1, fp
 801ab1e:	f7e5 fd4f 	bl	80005c0 <__aeabi_lmul>
 801ab22:	9801      	ldr	r0, [sp, #4]
 801ab24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ab26:	1a41      	subs	r1, r0, r1
 801ab28:	1049      	asrs	r1, r1, #1
 801ab2a:	6029      	str	r1, [r5, #0]
 801ab2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ab2e:	0038      	movs	r0, r7
 801ab30:	4659      	mov	r1, fp
 801ab32:	f7e5 fd45 	bl	80005c0 <__aeabi_lmul>
 801ab36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ab38:	000f      	movs	r7, r1
 801ab3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ab3c:	0030      	movs	r0, r6
 801ab3e:	4651      	mov	r1, sl
 801ab40:	f7e5 fd3e 	bl	80005c0 <__aeabi_lmul>
 801ab44:	187f      	adds	r7, r7, r1
 801ab46:	107f      	asrs	r7, r7, #1
 801ab48:	606f      	str	r7, [r5, #4]
 801ab4a:	9a00      	ldr	r2, [sp, #0]
 801ab4c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ab4e:	4694      	mov	ip, r2
 801ab50:	4465      	add	r5, ip
 801ab52:	468c      	mov	ip, r1
 801ab54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ab56:	0013      	movs	r3, r2
 801ab58:	4462      	add	r2, ip
 801ab5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ab5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d900      	bls.n	801ab64 <arm_radix4_butterfly_inverse_q31+0x46c>
 801ab62:	e73e      	b.n	801a9e2 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801ab64:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ab66:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ab68:	468c      	mov	ip, r1
 801ab6a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801ab6c:	4462      	add	r2, ip
 801ab6e:	468c      	mov	ip, r1
 801ab70:	9216      	str	r2, [sp, #88]	@ 0x58
 801ab72:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801ab74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ab76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab78:	4462      	add	r2, ip
 801ab7a:	468c      	mov	ip, r1
 801ab7c:	9219      	str	r2, [sp, #100]	@ 0x64
 801ab7e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ab80:	3301      	adds	r3, #1
 801ab82:	4462      	add	r2, ip
 801ab84:	9218      	str	r2, [sp, #96]	@ 0x60
 801ab86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801ab88:	9315      	str	r3, [sp, #84]	@ 0x54
 801ab8a:	3208      	adds	r2, #8
 801ab8c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ab8e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ab90:	4293      	cmp	r3, r2
 801ab92:	d800      	bhi.n	801ab96 <arm_radix4_butterfly_inverse_q31+0x49e>
 801ab94:	e6ec      	b.n	801a970 <arm_radix4_butterfly_inverse_q31+0x278>
 801ab96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ab98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ab9a:	009b      	lsls	r3, r3, #2
 801ab9c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ab9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aba0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801aba2:	089b      	lsrs	r3, r3, #2
 801aba4:	9320      	str	r3, [sp, #128]	@ 0x80
 801aba6:	2b04      	cmp	r3, #4
 801aba8:	d900      	bls.n	801abac <arm_radix4_butterfly_inverse_q31+0x4b4>
 801abaa:	e6c5      	b.n	801a938 <arm_radix4_butterfly_inverse_q31+0x240>
 801abac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801abae:	469a      	mov	sl, r3
 801abb0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801abb2:	681a      	ldr	r2, [r3, #0]
 801abb4:	6918      	ldr	r0, [r3, #16]
 801abb6:	4691      	mov	r9, r2
 801abb8:	464c      	mov	r4, r9
 801abba:	4680      	mov	r8, r0
 801abbc:	69de      	ldr	r6, [r3, #28]
 801abbe:	689d      	ldr	r5, [r3, #8]
 801abc0:	46b4      	mov	ip, r6
 801abc2:	6998      	ldr	r0, [r3, #24]
 801abc4:	1964      	adds	r4, r4, r5
 801abc6:	6859      	ldr	r1, [r3, #4]
 801abc8:	68da      	ldr	r2, [r3, #12]
 801abca:	4444      	add	r4, r8
 801abcc:	695f      	ldr	r7, [r3, #20]
 801abce:	1824      	adds	r4, r4, r0
 801abd0:	601c      	str	r4, [r3, #0]
 801abd2:	188c      	adds	r4, r1, r2
 801abd4:	19e4      	adds	r4, r4, r7
 801abd6:	4464      	add	r4, ip
 801abd8:	605c      	str	r4, [r3, #4]
 801abda:	464c      	mov	r4, r9
 801abdc:	1b64      	subs	r4, r4, r5
 801abde:	4444      	add	r4, r8
 801abe0:	1a24      	subs	r4, r4, r0
 801abe2:	609c      	str	r4, [r3, #8]
 801abe4:	1a8c      	subs	r4, r1, r2
 801abe6:	19e4      	adds	r4, r4, r7
 801abe8:	1ba4      	subs	r4, r4, r6
 801abea:	60dc      	str	r4, [r3, #12]
 801abec:	464c      	mov	r4, r9
 801abee:	4646      	mov	r6, r8
 801abf0:	1aa4      	subs	r4, r4, r2
 801abf2:	1ba4      	subs	r4, r4, r6
 801abf4:	4464      	add	r4, ip
 801abf6:	611c      	str	r4, [r3, #16]
 801abf8:	194c      	adds	r4, r1, r5
 801abfa:	1be4      	subs	r4, r4, r7
 801abfc:	1a24      	subs	r4, r4, r0
 801abfe:	615c      	str	r4, [r3, #20]
 801ac00:	4644      	mov	r4, r8
 801ac02:	4666      	mov	r6, ip
 801ac04:	444a      	add	r2, r9
 801ac06:	1b12      	subs	r2, r2, r4
 801ac08:	1b92      	subs	r2, r2, r6
 801ac0a:	619a      	str	r2, [r3, #24]
 801ac0c:	1b4a      	subs	r2, r1, r5
 801ac0e:	1bd1      	subs	r1, r2, r7
 801ac10:	2201      	movs	r2, #1
 801ac12:	4252      	negs	r2, r2
 801ac14:	4694      	mov	ip, r2
 801ac16:	44e2      	add	sl, ip
 801ac18:	4652      	mov	r2, sl
 801ac1a:	1809      	adds	r1, r1, r0
 801ac1c:	61d9      	str	r1, [r3, #28]
 801ac1e:	3320      	adds	r3, #32
 801ac20:	2a00      	cmp	r2, #0
 801ac22:	d1c6      	bne.n	801abb2 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801ac24:	b027      	add	sp, #156	@ 0x9c
 801ac26:	bc3c      	pop	{r2, r3, r4, r5}
 801ac28:	4690      	mov	r8, r2
 801ac2a:	4699      	mov	r9, r3
 801ac2c:	46a2      	mov	sl, r4
 801ac2e:	46ab      	mov	fp, r5
 801ac30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac32:	469a      	mov	sl, r3
 801ac34:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ac36:	e7bc      	b.n	801abb2 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801ac38 <arm_cmplx_mag_squared_q31>:
 801ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac3a:	464f      	mov	r7, r9
 801ac3c:	4646      	mov	r6, r8
 801ac3e:	0004      	movs	r4, r0
 801ac40:	b4c0      	push	{r6, r7}
 801ac42:	0016      	movs	r6, r2
 801ac44:	000f      	movs	r7, r1
 801ac46:	2a00      	cmp	r2, #0
 801ac48:	d018      	beq.n	801ac7c <arm_cmplx_mag_squared_q31+0x44>
 801ac4a:	6823      	ldr	r3, [r4, #0]
 801ac4c:	6822      	ldr	r2, [r4, #0]
 801ac4e:	17d9      	asrs	r1, r3, #31
 801ac50:	6863      	ldr	r3, [r4, #4]
 801ac52:	0010      	movs	r0, r2
 801ac54:	4698      	mov	r8, r3
 801ac56:	17db      	asrs	r3, r3, #31
 801ac58:	4699      	mov	r9, r3
 801ac5a:	000b      	movs	r3, r1
 801ac5c:	f7e5 fcb0 	bl	80005c0 <__aeabi_lmul>
 801ac60:	4642      	mov	r2, r8
 801ac62:	104d      	asrs	r5, r1, #1
 801ac64:	464b      	mov	r3, r9
 801ac66:	4640      	mov	r0, r8
 801ac68:	4649      	mov	r1, r9
 801ac6a:	f7e5 fca9 	bl	80005c0 <__aeabi_lmul>
 801ac6e:	1049      	asrs	r1, r1, #1
 801ac70:	1869      	adds	r1, r5, r1
 801ac72:	3e01      	subs	r6, #1
 801ac74:	c702      	stmia	r7!, {r1}
 801ac76:	3408      	adds	r4, #8
 801ac78:	2e00      	cmp	r6, #0
 801ac7a:	d1e6      	bne.n	801ac4a <arm_cmplx_mag_squared_q31+0x12>
 801ac7c:	bc0c      	pop	{r2, r3}
 801ac7e:	4690      	mov	r8, r2
 801ac80:	4699      	mov	r9, r3
 801ac82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ac84 <arm_mult_q31>:
 801ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac86:	4646      	mov	r6, r8
 801ac88:	464f      	mov	r7, r9
 801ac8a:	4690      	mov	r8, r2
 801ac8c:	b4c0      	push	{r6, r7}
 801ac8e:	001d      	movs	r5, r3
 801ac90:	0006      	movs	r6, r0
 801ac92:	000f      	movs	r7, r1
 801ac94:	2400      	movs	r4, #0
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d020      	beq.n	801acdc <arm_mult_q31+0x58>
 801ac9a:	4b12      	ldr	r3, [pc, #72]	@ (801ace4 <arm_mult_q31+0x60>)
 801ac9c:	4699      	mov	r9, r3
 801ac9e:	e007      	b.n	801acb0 <arm_mult_q31+0x2c>
 801aca0:	464b      	mov	r3, r9
 801aca2:	4059      	eors	r1, r3
 801aca4:	4643      	mov	r3, r8
 801aca6:	3d01      	subs	r5, #1
 801aca8:	5119      	str	r1, [r3, r4]
 801acaa:	3404      	adds	r4, #4
 801acac:	2d00      	cmp	r5, #0
 801acae:	d015      	beq.n	801acdc <arm_mult_q31+0x58>
 801acb0:	5933      	ldr	r3, [r6, r4]
 801acb2:	593a      	ldr	r2, [r7, r4]
 801acb4:	17d9      	asrs	r1, r3, #31
 801acb6:	593b      	ldr	r3, [r7, r4]
 801acb8:	5930      	ldr	r0, [r6, r4]
 801acba:	17db      	asrs	r3, r3, #31
 801acbc:	f7e5 fc80 	bl	80005c0 <__aeabi_lmul>
 801acc0:	004b      	lsls	r3, r1, #1
 801acc2:	0fc0      	lsrs	r0, r0, #31
 801acc4:	4318      	orrs	r0, r3
 801acc6:	17c9      	asrs	r1, r1, #31
 801acc8:	17c3      	asrs	r3, r0, #31
 801acca:	428b      	cmp	r3, r1
 801accc:	d1e8      	bne.n	801aca0 <arm_mult_q31+0x1c>
 801acce:	0001      	movs	r1, r0
 801acd0:	4643      	mov	r3, r8
 801acd2:	3d01      	subs	r5, #1
 801acd4:	5119      	str	r1, [r3, r4]
 801acd6:	3404      	adds	r4, #4
 801acd8:	2d00      	cmp	r5, #0
 801acda:	d1e9      	bne.n	801acb0 <arm_mult_q31+0x2c>
 801acdc:	bc0c      	pop	{r2, r3}
 801acde:	4690      	mov	r8, r2
 801ace0:	4699      	mov	r9, r3
 801ace2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ace4:	7fffffff 	.word	0x7fffffff

0801ace8 <arm_add_q31>:
 801ace8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acea:	465f      	mov	r7, fp
 801acec:	4656      	mov	r6, sl
 801acee:	464d      	mov	r5, r9
 801acf0:	4644      	mov	r4, r8
 801acf2:	b4f0      	push	{r4, r5, r6, r7}
 801acf4:	4693      	mov	fp, r2
 801acf6:	b083      	sub	sp, #12
 801acf8:	4681      	mov	r9, r0
 801acfa:	468a      	mov	sl, r1
 801acfc:	4698      	mov	r8, r3
 801acfe:	2200      	movs	r2, #0
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d020      	beq.n	801ad46 <arm_add_q31+0x5e>
 801ad04:	4649      	mov	r1, r9
 801ad06:	4653      	mov	r3, sl
 801ad08:	588e      	ldr	r6, [r1, r2]
 801ad0a:	589b      	ldr	r3, [r3, r2]
 801ad0c:	17f7      	asrs	r7, r6, #31
 801ad0e:	001c      	movs	r4, r3
 801ad10:	0030      	movs	r0, r6
 801ad12:	0039      	movs	r1, r7
 801ad14:	17dd      	asrs	r5, r3, #31
 801ad16:	46b4      	mov	ip, r6
 801ad18:	1900      	adds	r0, r0, r4
 801ad1a:	4169      	adcs	r1, r5
 801ad1c:	4463      	add	r3, ip
 801ad1e:	9000      	str	r0, [sp, #0]
 801ad20:	9101      	str	r1, [sp, #4]
 801ad22:	17d9      	asrs	r1, r3, #31
 801ad24:	468c      	mov	ip, r1
 801ad26:	9901      	ldr	r1, [sp, #4]
 801ad28:	458c      	cmp	ip, r1
 801ad2a:	d002      	beq.n	801ad32 <arm_add_q31+0x4a>
 801ad2c:	17cb      	asrs	r3, r1, #31
 801ad2e:	4909      	ldr	r1, [pc, #36]	@ (801ad54 <arm_add_q31+0x6c>)
 801ad30:	404b      	eors	r3, r1
 801ad32:	4659      	mov	r1, fp
 801ad34:	508b      	str	r3, [r1, r2]
 801ad36:	2301      	movs	r3, #1
 801ad38:	425b      	negs	r3, r3
 801ad3a:	469c      	mov	ip, r3
 801ad3c:	44e0      	add	r8, ip
 801ad3e:	4643      	mov	r3, r8
 801ad40:	3204      	adds	r2, #4
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d1de      	bne.n	801ad04 <arm_add_q31+0x1c>
 801ad46:	b003      	add	sp, #12
 801ad48:	bc3c      	pop	{r2, r3, r4, r5}
 801ad4a:	4690      	mov	r8, r2
 801ad4c:	4699      	mov	r9, r3
 801ad4e:	46a2      	mov	sl, r4
 801ad50:	46ab      	mov	fp, r5
 801ad52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad54:	7fffffff 	.word	0x7fffffff

0801ad58 <atof>:
 801ad58:	b510      	push	{r4, lr}
 801ad5a:	2100      	movs	r1, #0
 801ad5c:	f000 fe12 	bl	801b984 <strtod>
 801ad60:	bd10      	pop	{r4, pc}

0801ad62 <atoi>:
 801ad62:	b510      	push	{r4, lr}
 801ad64:	220a      	movs	r2, #10
 801ad66:	2100      	movs	r1, #0
 801ad68:	f000 fea4 	bl	801bab4 <strtol>
 801ad6c:	bd10      	pop	{r4, pc}
	...

0801ad70 <sulp>:
 801ad70:	b570      	push	{r4, r5, r6, lr}
 801ad72:	0016      	movs	r6, r2
 801ad74:	000d      	movs	r5, r1
 801ad76:	f003 fbf3 	bl	801e560 <__ulp>
 801ad7a:	2e00      	cmp	r6, #0
 801ad7c:	d00d      	beq.n	801ad9a <sulp+0x2a>
 801ad7e:	236b      	movs	r3, #107	@ 0x6b
 801ad80:	006a      	lsls	r2, r5, #1
 801ad82:	0d52      	lsrs	r2, r2, #21
 801ad84:	1a9b      	subs	r3, r3, r2
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	dd07      	ble.n	801ad9a <sulp+0x2a>
 801ad8a:	2400      	movs	r4, #0
 801ad8c:	4a03      	ldr	r2, [pc, #12]	@ (801ad9c <sulp+0x2c>)
 801ad8e:	051b      	lsls	r3, r3, #20
 801ad90:	189d      	adds	r5, r3, r2
 801ad92:	002b      	movs	r3, r5
 801ad94:	0022      	movs	r2, r4
 801ad96:	f7e7 fc51 	bl	800263c <__aeabi_dmul>
 801ad9a:	bd70      	pop	{r4, r5, r6, pc}
 801ad9c:	3ff00000 	.word	0x3ff00000

0801ada0 <_strtod_l>:
 801ada0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ada2:	b0a3      	sub	sp, #140	@ 0x8c
 801ada4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801ada6:	2200      	movs	r2, #0
 801ada8:	2600      	movs	r6, #0
 801adaa:	2700      	movs	r7, #0
 801adac:	9005      	str	r0, [sp, #20]
 801adae:	9109      	str	r1, [sp, #36]	@ 0x24
 801adb0:	921e      	str	r2, [sp, #120]	@ 0x78
 801adb2:	911d      	str	r1, [sp, #116]	@ 0x74
 801adb4:	780a      	ldrb	r2, [r1, #0]
 801adb6:	2a2b      	cmp	r2, #43	@ 0x2b
 801adb8:	d053      	beq.n	801ae62 <_strtod_l+0xc2>
 801adba:	d83f      	bhi.n	801ae3c <_strtod_l+0x9c>
 801adbc:	2a0d      	cmp	r2, #13
 801adbe:	d839      	bhi.n	801ae34 <_strtod_l+0x94>
 801adc0:	2a08      	cmp	r2, #8
 801adc2:	d839      	bhi.n	801ae38 <_strtod_l+0x98>
 801adc4:	2a00      	cmp	r2, #0
 801adc6:	d042      	beq.n	801ae4e <_strtod_l+0xae>
 801adc8:	2200      	movs	r2, #0
 801adca:	9212      	str	r2, [sp, #72]	@ 0x48
 801adcc:	2100      	movs	r1, #0
 801adce:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801add0:	910c      	str	r1, [sp, #48]	@ 0x30
 801add2:	782a      	ldrb	r2, [r5, #0]
 801add4:	2a30      	cmp	r2, #48	@ 0x30
 801add6:	d000      	beq.n	801adda <_strtod_l+0x3a>
 801add8:	e083      	b.n	801aee2 <_strtod_l+0x142>
 801adda:	786a      	ldrb	r2, [r5, #1]
 801addc:	3120      	adds	r1, #32
 801adde:	438a      	bics	r2, r1
 801ade0:	2a58      	cmp	r2, #88	@ 0x58
 801ade2:	d000      	beq.n	801ade6 <_strtod_l+0x46>
 801ade4:	e073      	b.n	801aece <_strtod_l+0x12e>
 801ade6:	9302      	str	r3, [sp, #8]
 801ade8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801adea:	4a95      	ldr	r2, [pc, #596]	@ (801b040 <_strtod_l+0x2a0>)
 801adec:	9301      	str	r3, [sp, #4]
 801adee:	ab1e      	add	r3, sp, #120	@ 0x78
 801adf0:	9300      	str	r3, [sp, #0]
 801adf2:	9805      	ldr	r0, [sp, #20]
 801adf4:	ab1f      	add	r3, sp, #124	@ 0x7c
 801adf6:	a91d      	add	r1, sp, #116	@ 0x74
 801adf8:	f002 fc62 	bl	801d6c0 <__gethex>
 801adfc:	230f      	movs	r3, #15
 801adfe:	0002      	movs	r2, r0
 801ae00:	401a      	ands	r2, r3
 801ae02:	0004      	movs	r4, r0
 801ae04:	9206      	str	r2, [sp, #24]
 801ae06:	4218      	tst	r0, r3
 801ae08:	d005      	beq.n	801ae16 <_strtod_l+0x76>
 801ae0a:	2a06      	cmp	r2, #6
 801ae0c:	d12b      	bne.n	801ae66 <_strtod_l+0xc6>
 801ae0e:	2300      	movs	r3, #0
 801ae10:	3501      	adds	r5, #1
 801ae12:	951d      	str	r5, [sp, #116]	@ 0x74
 801ae14:	9312      	str	r3, [sp, #72]	@ 0x48
 801ae16:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d002      	beq.n	801ae22 <_strtod_l+0x82>
 801ae1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae1e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ae20:	6013      	str	r3, [r2, #0]
 801ae22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d019      	beq.n	801ae5c <_strtod_l+0xbc>
 801ae28:	2380      	movs	r3, #128	@ 0x80
 801ae2a:	0030      	movs	r0, r6
 801ae2c:	061b      	lsls	r3, r3, #24
 801ae2e:	18f9      	adds	r1, r7, r3
 801ae30:	b023      	add	sp, #140	@ 0x8c
 801ae32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae34:	2a20      	cmp	r2, #32
 801ae36:	d1c7      	bne.n	801adc8 <_strtod_l+0x28>
 801ae38:	3101      	adds	r1, #1
 801ae3a:	e7ba      	b.n	801adb2 <_strtod_l+0x12>
 801ae3c:	2a2d      	cmp	r2, #45	@ 0x2d
 801ae3e:	d1c3      	bne.n	801adc8 <_strtod_l+0x28>
 801ae40:	3a2c      	subs	r2, #44	@ 0x2c
 801ae42:	9212      	str	r2, [sp, #72]	@ 0x48
 801ae44:	1c4a      	adds	r2, r1, #1
 801ae46:	921d      	str	r2, [sp, #116]	@ 0x74
 801ae48:	784a      	ldrb	r2, [r1, #1]
 801ae4a:	2a00      	cmp	r2, #0
 801ae4c:	d1be      	bne.n	801adcc <_strtod_l+0x2c>
 801ae4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae50:	931d      	str	r3, [sp, #116]	@ 0x74
 801ae52:	2300      	movs	r3, #0
 801ae54:	9312      	str	r3, [sp, #72]	@ 0x48
 801ae56:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d1df      	bne.n	801ae1c <_strtod_l+0x7c>
 801ae5c:	0030      	movs	r0, r6
 801ae5e:	0039      	movs	r1, r7
 801ae60:	e7e6      	b.n	801ae30 <_strtod_l+0x90>
 801ae62:	2200      	movs	r2, #0
 801ae64:	e7ed      	b.n	801ae42 <_strtod_l+0xa2>
 801ae66:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ae68:	2a00      	cmp	r2, #0
 801ae6a:	d007      	beq.n	801ae7c <_strtod_l+0xdc>
 801ae6c:	2135      	movs	r1, #53	@ 0x35
 801ae6e:	a820      	add	r0, sp, #128	@ 0x80
 801ae70:	f003 fc6c 	bl	801e74c <__copybits>
 801ae74:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ae76:	9805      	ldr	r0, [sp, #20]
 801ae78:	f003 f826 	bl	801dec8 <_Bfree>
 801ae7c:	9806      	ldr	r0, [sp, #24]
 801ae7e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ae80:	3801      	subs	r0, #1
 801ae82:	2804      	cmp	r0, #4
 801ae84:	d806      	bhi.n	801ae94 <_strtod_l+0xf4>
 801ae86:	f7e5 f979 	bl	800017c <__gnu_thumb1_case_uqi>
 801ae8a:	0312      	.short	0x0312
 801ae8c:	1e1c      	.short	0x1e1c
 801ae8e:	12          	.byte	0x12
 801ae8f:	00          	.byte	0x00
 801ae90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ae92:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ae94:	05e4      	lsls	r4, r4, #23
 801ae96:	d502      	bpl.n	801ae9e <_strtod_l+0xfe>
 801ae98:	2380      	movs	r3, #128	@ 0x80
 801ae9a:	061b      	lsls	r3, r3, #24
 801ae9c:	431f      	orrs	r7, r3
 801ae9e:	4b69      	ldr	r3, [pc, #420]	@ (801b044 <_strtod_l+0x2a4>)
 801aea0:	423b      	tst	r3, r7
 801aea2:	d1b8      	bne.n	801ae16 <_strtod_l+0x76>
 801aea4:	f001 fc90 	bl	801c7c8 <__errno>
 801aea8:	2322      	movs	r3, #34	@ 0x22
 801aeaa:	6003      	str	r3, [r0, #0]
 801aeac:	e7b3      	b.n	801ae16 <_strtod_l+0x76>
 801aeae:	4966      	ldr	r1, [pc, #408]	@ (801b048 <_strtod_l+0x2a8>)
 801aeb0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801aeb2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801aeb4:	400a      	ands	r2, r1
 801aeb6:	4965      	ldr	r1, [pc, #404]	@ (801b04c <_strtod_l+0x2ac>)
 801aeb8:	185b      	adds	r3, r3, r1
 801aeba:	051b      	lsls	r3, r3, #20
 801aebc:	431a      	orrs	r2, r3
 801aebe:	0017      	movs	r7, r2
 801aec0:	e7e8      	b.n	801ae94 <_strtod_l+0xf4>
 801aec2:	4f60      	ldr	r7, [pc, #384]	@ (801b044 <_strtod_l+0x2a4>)
 801aec4:	e7e6      	b.n	801ae94 <_strtod_l+0xf4>
 801aec6:	2601      	movs	r6, #1
 801aec8:	4f61      	ldr	r7, [pc, #388]	@ (801b050 <_strtod_l+0x2b0>)
 801aeca:	4276      	negs	r6, r6
 801aecc:	e7e2      	b.n	801ae94 <_strtod_l+0xf4>
 801aece:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aed0:	1c5a      	adds	r2, r3, #1
 801aed2:	921d      	str	r2, [sp, #116]	@ 0x74
 801aed4:	785b      	ldrb	r3, [r3, #1]
 801aed6:	2b30      	cmp	r3, #48	@ 0x30
 801aed8:	d0f9      	beq.n	801aece <_strtod_l+0x12e>
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d09b      	beq.n	801ae16 <_strtod_l+0x76>
 801aede:	2301      	movs	r3, #1
 801aee0:	930c      	str	r3, [sp, #48]	@ 0x30
 801aee2:	2500      	movs	r5, #0
 801aee4:	220a      	movs	r2, #10
 801aee6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aee8:	950d      	str	r5, [sp, #52]	@ 0x34
 801aeea:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aeec:	9508      	str	r5, [sp, #32]
 801aeee:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801aef0:	7804      	ldrb	r4, [r0, #0]
 801aef2:	0023      	movs	r3, r4
 801aef4:	3b30      	subs	r3, #48	@ 0x30
 801aef6:	b2d9      	uxtb	r1, r3
 801aef8:	2909      	cmp	r1, #9
 801aefa:	d927      	bls.n	801af4c <_strtod_l+0x1ac>
 801aefc:	2201      	movs	r2, #1
 801aefe:	4955      	ldr	r1, [pc, #340]	@ (801b054 <_strtod_l+0x2b4>)
 801af00:	f001 fbd4 	bl	801c6ac <strncmp>
 801af04:	2800      	cmp	r0, #0
 801af06:	d031      	beq.n	801af6c <_strtod_l+0x1cc>
 801af08:	2000      	movs	r0, #0
 801af0a:	0023      	movs	r3, r4
 801af0c:	4684      	mov	ip, r0
 801af0e:	9a08      	ldr	r2, [sp, #32]
 801af10:	900e      	str	r0, [sp, #56]	@ 0x38
 801af12:	9206      	str	r2, [sp, #24]
 801af14:	2220      	movs	r2, #32
 801af16:	0019      	movs	r1, r3
 801af18:	4391      	bics	r1, r2
 801af1a:	000a      	movs	r2, r1
 801af1c:	2100      	movs	r1, #0
 801af1e:	9107      	str	r1, [sp, #28]
 801af20:	2a45      	cmp	r2, #69	@ 0x45
 801af22:	d000      	beq.n	801af26 <_strtod_l+0x186>
 801af24:	e0c0      	b.n	801b0a8 <_strtod_l+0x308>
 801af26:	9b06      	ldr	r3, [sp, #24]
 801af28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801af2a:	4303      	orrs	r3, r0
 801af2c:	4313      	orrs	r3, r2
 801af2e:	428b      	cmp	r3, r1
 801af30:	d08d      	beq.n	801ae4e <_strtod_l+0xae>
 801af32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af34:	9309      	str	r3, [sp, #36]	@ 0x24
 801af36:	3301      	adds	r3, #1
 801af38:	931d      	str	r3, [sp, #116]	@ 0x74
 801af3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af3c:	785b      	ldrb	r3, [r3, #1]
 801af3e:	2b2b      	cmp	r3, #43	@ 0x2b
 801af40:	d070      	beq.n	801b024 <_strtod_l+0x284>
 801af42:	000c      	movs	r4, r1
 801af44:	2b2d      	cmp	r3, #45	@ 0x2d
 801af46:	d173      	bne.n	801b030 <_strtod_l+0x290>
 801af48:	2401      	movs	r4, #1
 801af4a:	e06c      	b.n	801b026 <_strtod_l+0x286>
 801af4c:	9908      	ldr	r1, [sp, #32]
 801af4e:	2908      	cmp	r1, #8
 801af50:	dc09      	bgt.n	801af66 <_strtod_l+0x1c6>
 801af52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801af54:	4351      	muls	r1, r2
 801af56:	185b      	adds	r3, r3, r1
 801af58:	930d      	str	r3, [sp, #52]	@ 0x34
 801af5a:	9b08      	ldr	r3, [sp, #32]
 801af5c:	3001      	adds	r0, #1
 801af5e:	3301      	adds	r3, #1
 801af60:	9308      	str	r3, [sp, #32]
 801af62:	901d      	str	r0, [sp, #116]	@ 0x74
 801af64:	e7c3      	b.n	801aeee <_strtod_l+0x14e>
 801af66:	4355      	muls	r5, r2
 801af68:	195d      	adds	r5, r3, r5
 801af6a:	e7f6      	b.n	801af5a <_strtod_l+0x1ba>
 801af6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af6e:	1c5a      	adds	r2, r3, #1
 801af70:	921d      	str	r2, [sp, #116]	@ 0x74
 801af72:	9a08      	ldr	r2, [sp, #32]
 801af74:	785b      	ldrb	r3, [r3, #1]
 801af76:	2a00      	cmp	r2, #0
 801af78:	d03a      	beq.n	801aff0 <_strtod_l+0x250>
 801af7a:	900e      	str	r0, [sp, #56]	@ 0x38
 801af7c:	9206      	str	r2, [sp, #24]
 801af7e:	001a      	movs	r2, r3
 801af80:	3a30      	subs	r2, #48	@ 0x30
 801af82:	2a09      	cmp	r2, #9
 801af84:	d912      	bls.n	801afac <_strtod_l+0x20c>
 801af86:	2201      	movs	r2, #1
 801af88:	4694      	mov	ip, r2
 801af8a:	e7c3      	b.n	801af14 <_strtod_l+0x174>
 801af8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af8e:	3001      	adds	r0, #1
 801af90:	1c5a      	adds	r2, r3, #1
 801af92:	921d      	str	r2, [sp, #116]	@ 0x74
 801af94:	785b      	ldrb	r3, [r3, #1]
 801af96:	2b30      	cmp	r3, #48	@ 0x30
 801af98:	d0f8      	beq.n	801af8c <_strtod_l+0x1ec>
 801af9a:	001a      	movs	r2, r3
 801af9c:	3a31      	subs	r2, #49	@ 0x31
 801af9e:	2a08      	cmp	r2, #8
 801afa0:	d83b      	bhi.n	801b01a <_strtod_l+0x27a>
 801afa2:	900e      	str	r0, [sp, #56]	@ 0x38
 801afa4:	2000      	movs	r0, #0
 801afa6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801afa8:	9006      	str	r0, [sp, #24]
 801afaa:	9213      	str	r2, [sp, #76]	@ 0x4c
 801afac:	001a      	movs	r2, r3
 801afae:	1c41      	adds	r1, r0, #1
 801afb0:	3a30      	subs	r2, #48	@ 0x30
 801afb2:	2b30      	cmp	r3, #48	@ 0x30
 801afb4:	d016      	beq.n	801afe4 <_strtod_l+0x244>
 801afb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afb8:	185b      	adds	r3, r3, r1
 801afba:	930e      	str	r3, [sp, #56]	@ 0x38
 801afbc:	9b06      	ldr	r3, [sp, #24]
 801afbe:	210a      	movs	r1, #10
 801afc0:	469c      	mov	ip, r3
 801afc2:	4484      	add	ip, r0
 801afc4:	459c      	cmp	ip, r3
 801afc6:	d115      	bne.n	801aff4 <_strtod_l+0x254>
 801afc8:	9906      	ldr	r1, [sp, #24]
 801afca:	9b06      	ldr	r3, [sp, #24]
 801afcc:	3101      	adds	r1, #1
 801afce:	1809      	adds	r1, r1, r0
 801afd0:	181b      	adds	r3, r3, r0
 801afd2:	9106      	str	r1, [sp, #24]
 801afd4:	2b08      	cmp	r3, #8
 801afd6:	dc19      	bgt.n	801b00c <_strtod_l+0x26c>
 801afd8:	230a      	movs	r3, #10
 801afda:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801afdc:	434b      	muls	r3, r1
 801afde:	2100      	movs	r1, #0
 801afe0:	18d3      	adds	r3, r2, r3
 801afe2:	930d      	str	r3, [sp, #52]	@ 0x34
 801afe4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801afe6:	0008      	movs	r0, r1
 801afe8:	1c5a      	adds	r2, r3, #1
 801afea:	921d      	str	r2, [sp, #116]	@ 0x74
 801afec:	785b      	ldrb	r3, [r3, #1]
 801afee:	e7c6      	b.n	801af7e <_strtod_l+0x1de>
 801aff0:	9808      	ldr	r0, [sp, #32]
 801aff2:	e7d0      	b.n	801af96 <_strtod_l+0x1f6>
 801aff4:	1c5c      	adds	r4, r3, #1
 801aff6:	2b08      	cmp	r3, #8
 801aff8:	dc04      	bgt.n	801b004 <_strtod_l+0x264>
 801affa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801affc:	434b      	muls	r3, r1
 801affe:	930d      	str	r3, [sp, #52]	@ 0x34
 801b000:	0023      	movs	r3, r4
 801b002:	e7df      	b.n	801afc4 <_strtod_l+0x224>
 801b004:	2c10      	cmp	r4, #16
 801b006:	dcfb      	bgt.n	801b000 <_strtod_l+0x260>
 801b008:	434d      	muls	r5, r1
 801b00a:	e7f9      	b.n	801b000 <_strtod_l+0x260>
 801b00c:	2100      	movs	r1, #0
 801b00e:	2b0f      	cmp	r3, #15
 801b010:	dce8      	bgt.n	801afe4 <_strtod_l+0x244>
 801b012:	230a      	movs	r3, #10
 801b014:	435d      	muls	r5, r3
 801b016:	1955      	adds	r5, r2, r5
 801b018:	e7e4      	b.n	801afe4 <_strtod_l+0x244>
 801b01a:	2200      	movs	r2, #0
 801b01c:	920e      	str	r2, [sp, #56]	@ 0x38
 801b01e:	9206      	str	r2, [sp, #24]
 801b020:	3201      	adds	r2, #1
 801b022:	e7b1      	b.n	801af88 <_strtod_l+0x1e8>
 801b024:	2400      	movs	r4, #0
 801b026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b028:	3302      	adds	r3, #2
 801b02a:	931d      	str	r3, [sp, #116]	@ 0x74
 801b02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b02e:	789b      	ldrb	r3, [r3, #2]
 801b030:	001a      	movs	r2, r3
 801b032:	3a30      	subs	r2, #48	@ 0x30
 801b034:	2a09      	cmp	r2, #9
 801b036:	d913      	bls.n	801b060 <_strtod_l+0x2c0>
 801b038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b03a:	921d      	str	r2, [sp, #116]	@ 0x74
 801b03c:	2200      	movs	r2, #0
 801b03e:	e032      	b.n	801b0a6 <_strtod_l+0x306>
 801b040:	08021154 	.word	0x08021154
 801b044:	7ff00000 	.word	0x7ff00000
 801b048:	ffefffff 	.word	0xffefffff
 801b04c:	00000433 	.word	0x00000433
 801b050:	7fffffff 	.word	0x7fffffff
 801b054:	0802113c 	.word	0x0802113c
 801b058:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b05a:	1c5a      	adds	r2, r3, #1
 801b05c:	921d      	str	r2, [sp, #116]	@ 0x74
 801b05e:	785b      	ldrb	r3, [r3, #1]
 801b060:	2b30      	cmp	r3, #48	@ 0x30
 801b062:	d0f9      	beq.n	801b058 <_strtod_l+0x2b8>
 801b064:	2200      	movs	r2, #0
 801b066:	9207      	str	r2, [sp, #28]
 801b068:	001a      	movs	r2, r3
 801b06a:	3a31      	subs	r2, #49	@ 0x31
 801b06c:	2a08      	cmp	r2, #8
 801b06e:	d81b      	bhi.n	801b0a8 <_strtod_l+0x308>
 801b070:	3b30      	subs	r3, #48	@ 0x30
 801b072:	9310      	str	r3, [sp, #64]	@ 0x40
 801b074:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b076:	9307      	str	r3, [sp, #28]
 801b078:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b07a:	1c59      	adds	r1, r3, #1
 801b07c:	911d      	str	r1, [sp, #116]	@ 0x74
 801b07e:	785b      	ldrb	r3, [r3, #1]
 801b080:	001a      	movs	r2, r3
 801b082:	3a30      	subs	r2, #48	@ 0x30
 801b084:	2a09      	cmp	r2, #9
 801b086:	d93a      	bls.n	801b0fe <_strtod_l+0x35e>
 801b088:	9a07      	ldr	r2, [sp, #28]
 801b08a:	1a8a      	subs	r2, r1, r2
 801b08c:	49b4      	ldr	r1, [pc, #720]	@ (801b360 <_strtod_l+0x5c0>)
 801b08e:	9107      	str	r1, [sp, #28]
 801b090:	2a08      	cmp	r2, #8
 801b092:	dc04      	bgt.n	801b09e <_strtod_l+0x2fe>
 801b094:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b096:	9207      	str	r2, [sp, #28]
 801b098:	428a      	cmp	r2, r1
 801b09a:	dd00      	ble.n	801b09e <_strtod_l+0x2fe>
 801b09c:	9107      	str	r1, [sp, #28]
 801b09e:	2c00      	cmp	r4, #0
 801b0a0:	d002      	beq.n	801b0a8 <_strtod_l+0x308>
 801b0a2:	9a07      	ldr	r2, [sp, #28]
 801b0a4:	4252      	negs	r2, r2
 801b0a6:	9207      	str	r2, [sp, #28]
 801b0a8:	9a06      	ldr	r2, [sp, #24]
 801b0aa:	2a00      	cmp	r2, #0
 801b0ac:	d14d      	bne.n	801b14a <_strtod_l+0x3aa>
 801b0ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b0b0:	4310      	orrs	r0, r2
 801b0b2:	d000      	beq.n	801b0b6 <_strtod_l+0x316>
 801b0b4:	e6af      	b.n	801ae16 <_strtod_l+0x76>
 801b0b6:	4662      	mov	r2, ip
 801b0b8:	2a00      	cmp	r2, #0
 801b0ba:	d000      	beq.n	801b0be <_strtod_l+0x31e>
 801b0bc:	e6c7      	b.n	801ae4e <_strtod_l+0xae>
 801b0be:	2b69      	cmp	r3, #105	@ 0x69
 801b0c0:	d027      	beq.n	801b112 <_strtod_l+0x372>
 801b0c2:	dc23      	bgt.n	801b10c <_strtod_l+0x36c>
 801b0c4:	2b49      	cmp	r3, #73	@ 0x49
 801b0c6:	d024      	beq.n	801b112 <_strtod_l+0x372>
 801b0c8:	2b4e      	cmp	r3, #78	@ 0x4e
 801b0ca:	d000      	beq.n	801b0ce <_strtod_l+0x32e>
 801b0cc:	e6bf      	b.n	801ae4e <_strtod_l+0xae>
 801b0ce:	49a5      	ldr	r1, [pc, #660]	@ (801b364 <_strtod_l+0x5c4>)
 801b0d0:	a81d      	add	r0, sp, #116	@ 0x74
 801b0d2:	f002 fd2b 	bl	801db2c <__match>
 801b0d6:	2800      	cmp	r0, #0
 801b0d8:	d100      	bne.n	801b0dc <_strtod_l+0x33c>
 801b0da:	e6b8      	b.n	801ae4e <_strtod_l+0xae>
 801b0dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b0de:	781b      	ldrb	r3, [r3, #0]
 801b0e0:	2b28      	cmp	r3, #40	@ 0x28
 801b0e2:	d12c      	bne.n	801b13e <_strtod_l+0x39e>
 801b0e4:	49a0      	ldr	r1, [pc, #640]	@ (801b368 <_strtod_l+0x5c8>)
 801b0e6:	aa20      	add	r2, sp, #128	@ 0x80
 801b0e8:	a81d      	add	r0, sp, #116	@ 0x74
 801b0ea:	f002 fd33 	bl	801db54 <__hexnan>
 801b0ee:	2805      	cmp	r0, #5
 801b0f0:	d125      	bne.n	801b13e <_strtod_l+0x39e>
 801b0f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b0f4:	4a9d      	ldr	r2, [pc, #628]	@ (801b36c <_strtod_l+0x5cc>)
 801b0f6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b0f8:	431a      	orrs	r2, r3
 801b0fa:	0017      	movs	r7, r2
 801b0fc:	e68b      	b.n	801ae16 <_strtod_l+0x76>
 801b0fe:	220a      	movs	r2, #10
 801b100:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b102:	434a      	muls	r2, r1
 801b104:	18d2      	adds	r2, r2, r3
 801b106:	3a30      	subs	r2, #48	@ 0x30
 801b108:	9210      	str	r2, [sp, #64]	@ 0x40
 801b10a:	e7b5      	b.n	801b078 <_strtod_l+0x2d8>
 801b10c:	2b6e      	cmp	r3, #110	@ 0x6e
 801b10e:	d0de      	beq.n	801b0ce <_strtod_l+0x32e>
 801b110:	e69d      	b.n	801ae4e <_strtod_l+0xae>
 801b112:	4997      	ldr	r1, [pc, #604]	@ (801b370 <_strtod_l+0x5d0>)
 801b114:	a81d      	add	r0, sp, #116	@ 0x74
 801b116:	f002 fd09 	bl	801db2c <__match>
 801b11a:	2800      	cmp	r0, #0
 801b11c:	d100      	bne.n	801b120 <_strtod_l+0x380>
 801b11e:	e696      	b.n	801ae4e <_strtod_l+0xae>
 801b120:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b122:	4994      	ldr	r1, [pc, #592]	@ (801b374 <_strtod_l+0x5d4>)
 801b124:	3b01      	subs	r3, #1
 801b126:	a81d      	add	r0, sp, #116	@ 0x74
 801b128:	931d      	str	r3, [sp, #116]	@ 0x74
 801b12a:	f002 fcff 	bl	801db2c <__match>
 801b12e:	2800      	cmp	r0, #0
 801b130:	d102      	bne.n	801b138 <_strtod_l+0x398>
 801b132:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b134:	3301      	adds	r3, #1
 801b136:	931d      	str	r3, [sp, #116]	@ 0x74
 801b138:	2600      	movs	r6, #0
 801b13a:	4f8c      	ldr	r7, [pc, #560]	@ (801b36c <_strtod_l+0x5cc>)
 801b13c:	e66b      	b.n	801ae16 <_strtod_l+0x76>
 801b13e:	488e      	ldr	r0, [pc, #568]	@ (801b378 <_strtod_l+0x5d8>)
 801b140:	f001 fb84 	bl	801c84c <nan>
 801b144:	0006      	movs	r6, r0
 801b146:	000f      	movs	r7, r1
 801b148:	e665      	b.n	801ae16 <_strtod_l+0x76>
 801b14a:	9b07      	ldr	r3, [sp, #28]
 801b14c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b14e:	1a9b      	subs	r3, r3, r2
 801b150:	930c      	str	r3, [sp, #48]	@ 0x30
 801b152:	9b08      	ldr	r3, [sp, #32]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d101      	bne.n	801b15c <_strtod_l+0x3bc>
 801b158:	9b06      	ldr	r3, [sp, #24]
 801b15a:	9308      	str	r3, [sp, #32]
 801b15c:	9c06      	ldr	r4, [sp, #24]
 801b15e:	2c10      	cmp	r4, #16
 801b160:	dd00      	ble.n	801b164 <_strtod_l+0x3c4>
 801b162:	2410      	movs	r4, #16
 801b164:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b166:	f7e8 f959 	bl	800341c <__aeabi_ui2d>
 801b16a:	9b06      	ldr	r3, [sp, #24]
 801b16c:	0006      	movs	r6, r0
 801b16e:	000f      	movs	r7, r1
 801b170:	2b09      	cmp	r3, #9
 801b172:	dc13      	bgt.n	801b19c <_strtod_l+0x3fc>
 801b174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b176:	2b00      	cmp	r3, #0
 801b178:	d100      	bne.n	801b17c <_strtod_l+0x3dc>
 801b17a:	e64c      	b.n	801ae16 <_strtod_l+0x76>
 801b17c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b17e:	2b00      	cmp	r3, #0
 801b180:	dc00      	bgt.n	801b184 <_strtod_l+0x3e4>
 801b182:	e07e      	b.n	801b282 <_strtod_l+0x4e2>
 801b184:	2b16      	cmp	r3, #22
 801b186:	dc63      	bgt.n	801b250 <_strtod_l+0x4b0>
 801b188:	497c      	ldr	r1, [pc, #496]	@ (801b37c <_strtod_l+0x5dc>)
 801b18a:	00db      	lsls	r3, r3, #3
 801b18c:	18c9      	adds	r1, r1, r3
 801b18e:	0032      	movs	r2, r6
 801b190:	6808      	ldr	r0, [r1, #0]
 801b192:	6849      	ldr	r1, [r1, #4]
 801b194:	003b      	movs	r3, r7
 801b196:	f7e7 fa51 	bl	800263c <__aeabi_dmul>
 801b19a:	e7d3      	b.n	801b144 <_strtod_l+0x3a4>
 801b19c:	0022      	movs	r2, r4
 801b19e:	4b77      	ldr	r3, [pc, #476]	@ (801b37c <_strtod_l+0x5dc>)
 801b1a0:	3a09      	subs	r2, #9
 801b1a2:	00d2      	lsls	r2, r2, #3
 801b1a4:	189b      	adds	r3, r3, r2
 801b1a6:	681a      	ldr	r2, [r3, #0]
 801b1a8:	685b      	ldr	r3, [r3, #4]
 801b1aa:	f7e7 fa47 	bl	800263c <__aeabi_dmul>
 801b1ae:	0006      	movs	r6, r0
 801b1b0:	0028      	movs	r0, r5
 801b1b2:	000f      	movs	r7, r1
 801b1b4:	f7e8 f932 	bl	800341c <__aeabi_ui2d>
 801b1b8:	000b      	movs	r3, r1
 801b1ba:	0002      	movs	r2, r0
 801b1bc:	0039      	movs	r1, r7
 801b1be:	0030      	movs	r0, r6
 801b1c0:	f7e6 fa94 	bl	80016ec <__aeabi_dadd>
 801b1c4:	9b06      	ldr	r3, [sp, #24]
 801b1c6:	0006      	movs	r6, r0
 801b1c8:	000f      	movs	r7, r1
 801b1ca:	2b0f      	cmp	r3, #15
 801b1cc:	ddd2      	ble.n	801b174 <_strtod_l+0x3d4>
 801b1ce:	9b06      	ldr	r3, [sp, #24]
 801b1d0:	1b1c      	subs	r4, r3, r4
 801b1d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b1d4:	18e4      	adds	r4, r4, r3
 801b1d6:	2c00      	cmp	r4, #0
 801b1d8:	dc00      	bgt.n	801b1dc <_strtod_l+0x43c>
 801b1da:	e09b      	b.n	801b314 <_strtod_l+0x574>
 801b1dc:	220f      	movs	r2, #15
 801b1de:	0023      	movs	r3, r4
 801b1e0:	4013      	ands	r3, r2
 801b1e2:	4214      	tst	r4, r2
 801b1e4:	d00a      	beq.n	801b1fc <_strtod_l+0x45c>
 801b1e6:	4965      	ldr	r1, [pc, #404]	@ (801b37c <_strtod_l+0x5dc>)
 801b1e8:	00db      	lsls	r3, r3, #3
 801b1ea:	18c9      	adds	r1, r1, r3
 801b1ec:	0032      	movs	r2, r6
 801b1ee:	6808      	ldr	r0, [r1, #0]
 801b1f0:	6849      	ldr	r1, [r1, #4]
 801b1f2:	003b      	movs	r3, r7
 801b1f4:	f7e7 fa22 	bl	800263c <__aeabi_dmul>
 801b1f8:	0006      	movs	r6, r0
 801b1fa:	000f      	movs	r7, r1
 801b1fc:	230f      	movs	r3, #15
 801b1fe:	439c      	bics	r4, r3
 801b200:	d073      	beq.n	801b2ea <_strtod_l+0x54a>
 801b202:	3326      	adds	r3, #38	@ 0x26
 801b204:	33ff      	adds	r3, #255	@ 0xff
 801b206:	429c      	cmp	r4, r3
 801b208:	dd4b      	ble.n	801b2a2 <_strtod_l+0x502>
 801b20a:	2300      	movs	r3, #0
 801b20c:	9306      	str	r3, [sp, #24]
 801b20e:	9307      	str	r3, [sp, #28]
 801b210:	930d      	str	r3, [sp, #52]	@ 0x34
 801b212:	9308      	str	r3, [sp, #32]
 801b214:	2322      	movs	r3, #34	@ 0x22
 801b216:	2600      	movs	r6, #0
 801b218:	9a05      	ldr	r2, [sp, #20]
 801b21a:	4f54      	ldr	r7, [pc, #336]	@ (801b36c <_strtod_l+0x5cc>)
 801b21c:	6013      	str	r3, [r2, #0]
 801b21e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b220:	42b3      	cmp	r3, r6
 801b222:	d100      	bne.n	801b226 <_strtod_l+0x486>
 801b224:	e5f7      	b.n	801ae16 <_strtod_l+0x76>
 801b226:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b228:	9805      	ldr	r0, [sp, #20]
 801b22a:	f002 fe4d 	bl	801dec8 <_Bfree>
 801b22e:	9908      	ldr	r1, [sp, #32]
 801b230:	9805      	ldr	r0, [sp, #20]
 801b232:	f002 fe49 	bl	801dec8 <_Bfree>
 801b236:	9907      	ldr	r1, [sp, #28]
 801b238:	9805      	ldr	r0, [sp, #20]
 801b23a:	f002 fe45 	bl	801dec8 <_Bfree>
 801b23e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b240:	9805      	ldr	r0, [sp, #20]
 801b242:	f002 fe41 	bl	801dec8 <_Bfree>
 801b246:	9906      	ldr	r1, [sp, #24]
 801b248:	9805      	ldr	r0, [sp, #20]
 801b24a:	f002 fe3d 	bl	801dec8 <_Bfree>
 801b24e:	e5e2      	b.n	801ae16 <_strtod_l+0x76>
 801b250:	2325      	movs	r3, #37	@ 0x25
 801b252:	9a06      	ldr	r2, [sp, #24]
 801b254:	1a9b      	subs	r3, r3, r2
 801b256:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b258:	4293      	cmp	r3, r2
 801b25a:	dbb8      	blt.n	801b1ce <_strtod_l+0x42e>
 801b25c:	240f      	movs	r4, #15
 801b25e:	9b06      	ldr	r3, [sp, #24]
 801b260:	4d46      	ldr	r5, [pc, #280]	@ (801b37c <_strtod_l+0x5dc>)
 801b262:	1ae4      	subs	r4, r4, r3
 801b264:	00e1      	lsls	r1, r4, #3
 801b266:	1869      	adds	r1, r5, r1
 801b268:	0032      	movs	r2, r6
 801b26a:	6808      	ldr	r0, [r1, #0]
 801b26c:	6849      	ldr	r1, [r1, #4]
 801b26e:	003b      	movs	r3, r7
 801b270:	f7e7 f9e4 	bl	800263c <__aeabi_dmul>
 801b274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b276:	1b1c      	subs	r4, r3, r4
 801b278:	00e4      	lsls	r4, r4, #3
 801b27a:	192d      	adds	r5, r5, r4
 801b27c:	682a      	ldr	r2, [r5, #0]
 801b27e:	686b      	ldr	r3, [r5, #4]
 801b280:	e789      	b.n	801b196 <_strtod_l+0x3f6>
 801b282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b284:	3316      	adds	r3, #22
 801b286:	dba2      	blt.n	801b1ce <_strtod_l+0x42e>
 801b288:	9907      	ldr	r1, [sp, #28]
 801b28a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b28c:	4b3b      	ldr	r3, [pc, #236]	@ (801b37c <_strtod_l+0x5dc>)
 801b28e:	1a52      	subs	r2, r2, r1
 801b290:	00d2      	lsls	r2, r2, #3
 801b292:	189b      	adds	r3, r3, r2
 801b294:	0030      	movs	r0, r6
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	685b      	ldr	r3, [r3, #4]
 801b29a:	0039      	movs	r1, r7
 801b29c:	f7e6 fd8a 	bl	8001db4 <__aeabi_ddiv>
 801b2a0:	e750      	b.n	801b144 <_strtod_l+0x3a4>
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	0030      	movs	r0, r6
 801b2a6:	0039      	movs	r1, r7
 801b2a8:	4d35      	ldr	r5, [pc, #212]	@ (801b380 <_strtod_l+0x5e0>)
 801b2aa:	1124      	asrs	r4, r4, #4
 801b2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2ae:	2c01      	cmp	r4, #1
 801b2b0:	dc1e      	bgt.n	801b2f0 <_strtod_l+0x550>
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d001      	beq.n	801b2ba <_strtod_l+0x51a>
 801b2b6:	0006      	movs	r6, r0
 801b2b8:	000f      	movs	r7, r1
 801b2ba:	4b32      	ldr	r3, [pc, #200]	@ (801b384 <_strtod_l+0x5e4>)
 801b2bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b2be:	18ff      	adds	r7, r7, r3
 801b2c0:	4b2f      	ldr	r3, [pc, #188]	@ (801b380 <_strtod_l+0x5e0>)
 801b2c2:	00d5      	lsls	r5, r2, #3
 801b2c4:	195d      	adds	r5, r3, r5
 801b2c6:	0032      	movs	r2, r6
 801b2c8:	6828      	ldr	r0, [r5, #0]
 801b2ca:	6869      	ldr	r1, [r5, #4]
 801b2cc:	003b      	movs	r3, r7
 801b2ce:	f7e7 f9b5 	bl	800263c <__aeabi_dmul>
 801b2d2:	4b26      	ldr	r3, [pc, #152]	@ (801b36c <_strtod_l+0x5cc>)
 801b2d4:	4a2c      	ldr	r2, [pc, #176]	@ (801b388 <_strtod_l+0x5e8>)
 801b2d6:	0006      	movs	r6, r0
 801b2d8:	400b      	ands	r3, r1
 801b2da:	4293      	cmp	r3, r2
 801b2dc:	d895      	bhi.n	801b20a <_strtod_l+0x46a>
 801b2de:	4a2b      	ldr	r2, [pc, #172]	@ (801b38c <_strtod_l+0x5ec>)
 801b2e0:	4293      	cmp	r3, r2
 801b2e2:	d913      	bls.n	801b30c <_strtod_l+0x56c>
 801b2e4:	2601      	movs	r6, #1
 801b2e6:	4f2a      	ldr	r7, [pc, #168]	@ (801b390 <_strtod_l+0x5f0>)
 801b2e8:	4276      	negs	r6, r6
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2ee:	e086      	b.n	801b3fe <_strtod_l+0x65e>
 801b2f0:	2201      	movs	r2, #1
 801b2f2:	4214      	tst	r4, r2
 801b2f4:	d004      	beq.n	801b300 <_strtod_l+0x560>
 801b2f6:	682a      	ldr	r2, [r5, #0]
 801b2f8:	686b      	ldr	r3, [r5, #4]
 801b2fa:	f7e7 f99f 	bl	800263c <__aeabi_dmul>
 801b2fe:	2301      	movs	r3, #1
 801b300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b302:	1064      	asrs	r4, r4, #1
 801b304:	3201      	adds	r2, #1
 801b306:	9209      	str	r2, [sp, #36]	@ 0x24
 801b308:	3508      	adds	r5, #8
 801b30a:	e7d0      	b.n	801b2ae <_strtod_l+0x50e>
 801b30c:	23d4      	movs	r3, #212	@ 0xd4
 801b30e:	049b      	lsls	r3, r3, #18
 801b310:	18cf      	adds	r7, r1, r3
 801b312:	e7ea      	b.n	801b2ea <_strtod_l+0x54a>
 801b314:	2c00      	cmp	r4, #0
 801b316:	d0e8      	beq.n	801b2ea <_strtod_l+0x54a>
 801b318:	4264      	negs	r4, r4
 801b31a:	230f      	movs	r3, #15
 801b31c:	0022      	movs	r2, r4
 801b31e:	401a      	ands	r2, r3
 801b320:	421c      	tst	r4, r3
 801b322:	d00a      	beq.n	801b33a <_strtod_l+0x59a>
 801b324:	4b15      	ldr	r3, [pc, #84]	@ (801b37c <_strtod_l+0x5dc>)
 801b326:	00d2      	lsls	r2, r2, #3
 801b328:	189b      	adds	r3, r3, r2
 801b32a:	0030      	movs	r0, r6
 801b32c:	681a      	ldr	r2, [r3, #0]
 801b32e:	685b      	ldr	r3, [r3, #4]
 801b330:	0039      	movs	r1, r7
 801b332:	f7e6 fd3f 	bl	8001db4 <__aeabi_ddiv>
 801b336:	0006      	movs	r6, r0
 801b338:	000f      	movs	r7, r1
 801b33a:	1124      	asrs	r4, r4, #4
 801b33c:	d0d5      	beq.n	801b2ea <_strtod_l+0x54a>
 801b33e:	2c1f      	cmp	r4, #31
 801b340:	dd28      	ble.n	801b394 <_strtod_l+0x5f4>
 801b342:	2300      	movs	r3, #0
 801b344:	9306      	str	r3, [sp, #24]
 801b346:	9307      	str	r3, [sp, #28]
 801b348:	930d      	str	r3, [sp, #52]	@ 0x34
 801b34a:	9308      	str	r3, [sp, #32]
 801b34c:	2322      	movs	r3, #34	@ 0x22
 801b34e:	9a05      	ldr	r2, [sp, #20]
 801b350:	2600      	movs	r6, #0
 801b352:	6013      	str	r3, [r2, #0]
 801b354:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b356:	2700      	movs	r7, #0
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d000      	beq.n	801b35e <_strtod_l+0x5be>
 801b35c:	e763      	b.n	801b226 <_strtod_l+0x486>
 801b35e:	e55a      	b.n	801ae16 <_strtod_l+0x76>
 801b360:	00004e1f 	.word	0x00004e1f
 801b364:	0802129e 	.word	0x0802129e
 801b368:	08021140 	.word	0x08021140
 801b36c:	7ff00000 	.word	0x7ff00000
 801b370:	08021296 	.word	0x08021296
 801b374:	080212d0 	.word	0x080212d0
 801b378:	0802155c 	.word	0x0802155c
 801b37c:	08021448 	.word	0x08021448
 801b380:	08021420 	.word	0x08021420
 801b384:	fcb00000 	.word	0xfcb00000
 801b388:	7ca00000 	.word	0x7ca00000
 801b38c:	7c900000 	.word	0x7c900000
 801b390:	7fefffff 	.word	0x7fefffff
 801b394:	2310      	movs	r3, #16
 801b396:	0022      	movs	r2, r4
 801b398:	401a      	ands	r2, r3
 801b39a:	9209      	str	r2, [sp, #36]	@ 0x24
 801b39c:	421c      	tst	r4, r3
 801b39e:	d001      	beq.n	801b3a4 <_strtod_l+0x604>
 801b3a0:	335a      	adds	r3, #90	@ 0x5a
 801b3a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3a4:	0030      	movs	r0, r6
 801b3a6:	0039      	movs	r1, r7
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	4dbf      	ldr	r5, [pc, #764]	@ (801b6a8 <_strtod_l+0x908>)
 801b3ac:	2201      	movs	r2, #1
 801b3ae:	4214      	tst	r4, r2
 801b3b0:	d004      	beq.n	801b3bc <_strtod_l+0x61c>
 801b3b2:	682a      	ldr	r2, [r5, #0]
 801b3b4:	686b      	ldr	r3, [r5, #4]
 801b3b6:	f7e7 f941 	bl	800263c <__aeabi_dmul>
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	1064      	asrs	r4, r4, #1
 801b3be:	3508      	adds	r5, #8
 801b3c0:	2c00      	cmp	r4, #0
 801b3c2:	d1f3      	bne.n	801b3ac <_strtod_l+0x60c>
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d001      	beq.n	801b3cc <_strtod_l+0x62c>
 801b3c8:	0006      	movs	r6, r0
 801b3ca:	000f      	movs	r7, r1
 801b3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d00d      	beq.n	801b3ee <_strtod_l+0x64e>
 801b3d2:	236b      	movs	r3, #107	@ 0x6b
 801b3d4:	007a      	lsls	r2, r7, #1
 801b3d6:	0d52      	lsrs	r2, r2, #21
 801b3d8:	0039      	movs	r1, r7
 801b3da:	1a9b      	subs	r3, r3, r2
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	dd06      	ble.n	801b3ee <_strtod_l+0x64e>
 801b3e0:	2b1f      	cmp	r3, #31
 801b3e2:	dd5a      	ble.n	801b49a <_strtod_l+0x6fa>
 801b3e4:	2600      	movs	r6, #0
 801b3e6:	2b34      	cmp	r3, #52	@ 0x34
 801b3e8:	dd50      	ble.n	801b48c <_strtod_l+0x6ec>
 801b3ea:	27dc      	movs	r7, #220	@ 0xdc
 801b3ec:	04bf      	lsls	r7, r7, #18
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	0030      	movs	r0, r6
 801b3f4:	0039      	movs	r1, r7
 801b3f6:	f7e5 f85b 	bl	80004b0 <__aeabi_dcmpeq>
 801b3fa:	2800      	cmp	r0, #0
 801b3fc:	d1a1      	bne.n	801b342 <_strtod_l+0x5a2>
 801b3fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b400:	9a08      	ldr	r2, [sp, #32]
 801b402:	9300      	str	r3, [sp, #0]
 801b404:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b406:	9b06      	ldr	r3, [sp, #24]
 801b408:	9805      	ldr	r0, [sp, #20]
 801b40a:	f002 fdc5 	bl	801df98 <__s2b>
 801b40e:	900d      	str	r0, [sp, #52]	@ 0x34
 801b410:	2800      	cmp	r0, #0
 801b412:	d100      	bne.n	801b416 <_strtod_l+0x676>
 801b414:	e6f9      	b.n	801b20a <_strtod_l+0x46a>
 801b416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b418:	9907      	ldr	r1, [sp, #28]
 801b41a:	17da      	asrs	r2, r3, #31
 801b41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b41e:	1a5b      	subs	r3, r3, r1
 801b420:	401a      	ands	r2, r3
 801b422:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b424:	9217      	str	r2, [sp, #92]	@ 0x5c
 801b426:	43db      	mvns	r3, r3
 801b428:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b42a:	17db      	asrs	r3, r3, #31
 801b42c:	401a      	ands	r2, r3
 801b42e:	2300      	movs	r3, #0
 801b430:	921a      	str	r2, [sp, #104]	@ 0x68
 801b432:	9306      	str	r3, [sp, #24]
 801b434:	9307      	str	r3, [sp, #28]
 801b436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b438:	9805      	ldr	r0, [sp, #20]
 801b43a:	6859      	ldr	r1, [r3, #4]
 801b43c:	f002 fd00 	bl	801de40 <_Balloc>
 801b440:	9008      	str	r0, [sp, #32]
 801b442:	2800      	cmp	r0, #0
 801b444:	d100      	bne.n	801b448 <_strtod_l+0x6a8>
 801b446:	e6e5      	b.n	801b214 <_strtod_l+0x474>
 801b448:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b44a:	300c      	adds	r0, #12
 801b44c:	0019      	movs	r1, r3
 801b44e:	691a      	ldr	r2, [r3, #16]
 801b450:	310c      	adds	r1, #12
 801b452:	3202      	adds	r2, #2
 801b454:	0092      	lsls	r2, r2, #2
 801b456:	f001 f9ef 	bl	801c838 <memcpy>
 801b45a:	ab20      	add	r3, sp, #128	@ 0x80
 801b45c:	9301      	str	r3, [sp, #4]
 801b45e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b460:	9300      	str	r3, [sp, #0]
 801b462:	0032      	movs	r2, r6
 801b464:	003b      	movs	r3, r7
 801b466:	9805      	ldr	r0, [sp, #20]
 801b468:	9610      	str	r6, [sp, #64]	@ 0x40
 801b46a:	9711      	str	r7, [sp, #68]	@ 0x44
 801b46c:	f003 f8e4 	bl	801e638 <__d2b>
 801b470:	901e      	str	r0, [sp, #120]	@ 0x78
 801b472:	2800      	cmp	r0, #0
 801b474:	d100      	bne.n	801b478 <_strtod_l+0x6d8>
 801b476:	e6cd      	b.n	801b214 <_strtod_l+0x474>
 801b478:	2101      	movs	r1, #1
 801b47a:	9805      	ldr	r0, [sp, #20]
 801b47c:	f002 fe28 	bl	801e0d0 <__i2b>
 801b480:	9007      	str	r0, [sp, #28]
 801b482:	2800      	cmp	r0, #0
 801b484:	d10e      	bne.n	801b4a4 <_strtod_l+0x704>
 801b486:	2300      	movs	r3, #0
 801b488:	9307      	str	r3, [sp, #28]
 801b48a:	e6c3      	b.n	801b214 <_strtod_l+0x474>
 801b48c:	234b      	movs	r3, #75	@ 0x4b
 801b48e:	1a9a      	subs	r2, r3, r2
 801b490:	3b4c      	subs	r3, #76	@ 0x4c
 801b492:	4093      	lsls	r3, r2
 801b494:	4019      	ands	r1, r3
 801b496:	000f      	movs	r7, r1
 801b498:	e7a9      	b.n	801b3ee <_strtod_l+0x64e>
 801b49a:	2201      	movs	r2, #1
 801b49c:	4252      	negs	r2, r2
 801b49e:	409a      	lsls	r2, r3
 801b4a0:	4016      	ands	r6, r2
 801b4a2:	e7a4      	b.n	801b3ee <_strtod_l+0x64e>
 801b4a4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801b4a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b4a8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801b4aa:	1ad4      	subs	r4, r2, r3
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	db01      	blt.n	801b4b4 <_strtod_l+0x714>
 801b4b0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801b4b2:	195d      	adds	r5, r3, r5
 801b4b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b4b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b4b8:	1a5b      	subs	r3, r3, r1
 801b4ba:	2136      	movs	r1, #54	@ 0x36
 801b4bc:	189b      	adds	r3, r3, r2
 801b4be:	1a8a      	subs	r2, r1, r2
 801b4c0:	497a      	ldr	r1, [pc, #488]	@ (801b6ac <_strtod_l+0x90c>)
 801b4c2:	2001      	movs	r0, #1
 801b4c4:	468c      	mov	ip, r1
 801b4c6:	2100      	movs	r1, #0
 801b4c8:	3b01      	subs	r3, #1
 801b4ca:	9116      	str	r1, [sp, #88]	@ 0x58
 801b4cc:	9014      	str	r0, [sp, #80]	@ 0x50
 801b4ce:	4563      	cmp	r3, ip
 801b4d0:	da06      	bge.n	801b4e0 <_strtod_l+0x740>
 801b4d2:	4661      	mov	r1, ip
 801b4d4:	1ac9      	subs	r1, r1, r3
 801b4d6:	1a52      	subs	r2, r2, r1
 801b4d8:	291f      	cmp	r1, #31
 801b4da:	dc3f      	bgt.n	801b55c <_strtod_l+0x7bc>
 801b4dc:	4088      	lsls	r0, r1
 801b4de:	9014      	str	r0, [sp, #80]	@ 0x50
 801b4e0:	18ab      	adds	r3, r5, r2
 801b4e2:	930e      	str	r3, [sp, #56]	@ 0x38
 801b4e4:	18a4      	adds	r4, r4, r2
 801b4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b4ea:	191c      	adds	r4, r3, r4
 801b4ec:	002b      	movs	r3, r5
 801b4ee:	4295      	cmp	r5, r2
 801b4f0:	dd00      	ble.n	801b4f4 <_strtod_l+0x754>
 801b4f2:	0013      	movs	r3, r2
 801b4f4:	42a3      	cmp	r3, r4
 801b4f6:	dd00      	ble.n	801b4fa <_strtod_l+0x75a>
 801b4f8:	0023      	movs	r3, r4
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	dd04      	ble.n	801b508 <_strtod_l+0x768>
 801b4fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b500:	1ae4      	subs	r4, r4, r3
 801b502:	1ad2      	subs	r2, r2, r3
 801b504:	920e      	str	r2, [sp, #56]	@ 0x38
 801b506:	1aed      	subs	r5, r5, r3
 801b508:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	dd16      	ble.n	801b53c <_strtod_l+0x79c>
 801b50e:	001a      	movs	r2, r3
 801b510:	9907      	ldr	r1, [sp, #28]
 801b512:	9805      	ldr	r0, [sp, #20]
 801b514:	f002 fea6 	bl	801e264 <__pow5mult>
 801b518:	9007      	str	r0, [sp, #28]
 801b51a:	2800      	cmp	r0, #0
 801b51c:	d0b3      	beq.n	801b486 <_strtod_l+0x6e6>
 801b51e:	0001      	movs	r1, r0
 801b520:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b522:	9805      	ldr	r0, [sp, #20]
 801b524:	f002 fdec 	bl	801e100 <__multiply>
 801b528:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b52a:	2800      	cmp	r0, #0
 801b52c:	d100      	bne.n	801b530 <_strtod_l+0x790>
 801b52e:	e671      	b.n	801b214 <_strtod_l+0x474>
 801b530:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b532:	9805      	ldr	r0, [sp, #20]
 801b534:	f002 fcc8 	bl	801dec8 <_Bfree>
 801b538:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b53a:	931e      	str	r3, [sp, #120]	@ 0x78
 801b53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b53e:	2b00      	cmp	r3, #0
 801b540:	dc12      	bgt.n	801b568 <_strtod_l+0x7c8>
 801b542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b544:	2b00      	cmp	r3, #0
 801b546:	dd18      	ble.n	801b57a <_strtod_l+0x7da>
 801b548:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b54a:	9908      	ldr	r1, [sp, #32]
 801b54c:	9805      	ldr	r0, [sp, #20]
 801b54e:	f002 fe89 	bl	801e264 <__pow5mult>
 801b552:	9008      	str	r0, [sp, #32]
 801b554:	2800      	cmp	r0, #0
 801b556:	d110      	bne.n	801b57a <_strtod_l+0x7da>
 801b558:	2300      	movs	r3, #0
 801b55a:	e65a      	b.n	801b212 <_strtod_l+0x472>
 801b55c:	4954      	ldr	r1, [pc, #336]	@ (801b6b0 <_strtod_l+0x910>)
 801b55e:	1acb      	subs	r3, r1, r3
 801b560:	0001      	movs	r1, r0
 801b562:	4099      	lsls	r1, r3
 801b564:	9116      	str	r1, [sp, #88]	@ 0x58
 801b566:	e7ba      	b.n	801b4de <_strtod_l+0x73e>
 801b568:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b56a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b56c:	9805      	ldr	r0, [sp, #20]
 801b56e:	f002 fed5 	bl	801e31c <__lshift>
 801b572:	901e      	str	r0, [sp, #120]	@ 0x78
 801b574:	2800      	cmp	r0, #0
 801b576:	d1e4      	bne.n	801b542 <_strtod_l+0x7a2>
 801b578:	e64c      	b.n	801b214 <_strtod_l+0x474>
 801b57a:	2c00      	cmp	r4, #0
 801b57c:	dd07      	ble.n	801b58e <_strtod_l+0x7ee>
 801b57e:	0022      	movs	r2, r4
 801b580:	9908      	ldr	r1, [sp, #32]
 801b582:	9805      	ldr	r0, [sp, #20]
 801b584:	f002 feca 	bl	801e31c <__lshift>
 801b588:	9008      	str	r0, [sp, #32]
 801b58a:	2800      	cmp	r0, #0
 801b58c:	d0e4      	beq.n	801b558 <_strtod_l+0x7b8>
 801b58e:	2d00      	cmp	r5, #0
 801b590:	dd08      	ble.n	801b5a4 <_strtod_l+0x804>
 801b592:	002a      	movs	r2, r5
 801b594:	9907      	ldr	r1, [sp, #28]
 801b596:	9805      	ldr	r0, [sp, #20]
 801b598:	f002 fec0 	bl	801e31c <__lshift>
 801b59c:	9007      	str	r0, [sp, #28]
 801b59e:	2800      	cmp	r0, #0
 801b5a0:	d100      	bne.n	801b5a4 <_strtod_l+0x804>
 801b5a2:	e637      	b.n	801b214 <_strtod_l+0x474>
 801b5a4:	9a08      	ldr	r2, [sp, #32]
 801b5a6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b5a8:	9805      	ldr	r0, [sp, #20]
 801b5aa:	f002 ff3f 	bl	801e42c <__mdiff>
 801b5ae:	9006      	str	r0, [sp, #24]
 801b5b0:	2800      	cmp	r0, #0
 801b5b2:	d100      	bne.n	801b5b6 <_strtod_l+0x816>
 801b5b4:	e62e      	b.n	801b214 <_strtod_l+0x474>
 801b5b6:	68c3      	ldr	r3, [r0, #12]
 801b5b8:	9907      	ldr	r1, [sp, #28]
 801b5ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b5bc:	2300      	movs	r3, #0
 801b5be:	60c3      	str	r3, [r0, #12]
 801b5c0:	f002 ff18 	bl	801e3f4 <__mcmp>
 801b5c4:	2800      	cmp	r0, #0
 801b5c6:	da3b      	bge.n	801b640 <_strtod_l+0x8a0>
 801b5c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b5ca:	4333      	orrs	r3, r6
 801b5cc:	d167      	bne.n	801b69e <_strtod_l+0x8fe>
 801b5ce:	033b      	lsls	r3, r7, #12
 801b5d0:	d165      	bne.n	801b69e <_strtod_l+0x8fe>
 801b5d2:	22d6      	movs	r2, #214	@ 0xd6
 801b5d4:	4b37      	ldr	r3, [pc, #220]	@ (801b6b4 <_strtod_l+0x914>)
 801b5d6:	04d2      	lsls	r2, r2, #19
 801b5d8:	403b      	ands	r3, r7
 801b5da:	4293      	cmp	r3, r2
 801b5dc:	d95f      	bls.n	801b69e <_strtod_l+0x8fe>
 801b5de:	9b06      	ldr	r3, [sp, #24]
 801b5e0:	695b      	ldr	r3, [r3, #20]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d103      	bne.n	801b5ee <_strtod_l+0x84e>
 801b5e6:	9b06      	ldr	r3, [sp, #24]
 801b5e8:	691b      	ldr	r3, [r3, #16]
 801b5ea:	2b01      	cmp	r3, #1
 801b5ec:	dd57      	ble.n	801b69e <_strtod_l+0x8fe>
 801b5ee:	9906      	ldr	r1, [sp, #24]
 801b5f0:	2201      	movs	r2, #1
 801b5f2:	9805      	ldr	r0, [sp, #20]
 801b5f4:	f002 fe92 	bl	801e31c <__lshift>
 801b5f8:	9907      	ldr	r1, [sp, #28]
 801b5fa:	9006      	str	r0, [sp, #24]
 801b5fc:	f002 fefa 	bl	801e3f4 <__mcmp>
 801b600:	2800      	cmp	r0, #0
 801b602:	dd4c      	ble.n	801b69e <_strtod_l+0x8fe>
 801b604:	4b2b      	ldr	r3, [pc, #172]	@ (801b6b4 <_strtod_l+0x914>)
 801b606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b608:	403b      	ands	r3, r7
 801b60a:	2a00      	cmp	r2, #0
 801b60c:	d074      	beq.n	801b6f8 <_strtod_l+0x958>
 801b60e:	22d6      	movs	r2, #214	@ 0xd6
 801b610:	04d2      	lsls	r2, r2, #19
 801b612:	4293      	cmp	r3, r2
 801b614:	d870      	bhi.n	801b6f8 <_strtod_l+0x958>
 801b616:	22dc      	movs	r2, #220	@ 0xdc
 801b618:	0492      	lsls	r2, r2, #18
 801b61a:	4293      	cmp	r3, r2
 801b61c:	d800      	bhi.n	801b620 <_strtod_l+0x880>
 801b61e:	e695      	b.n	801b34c <_strtod_l+0x5ac>
 801b620:	0030      	movs	r0, r6
 801b622:	0039      	movs	r1, r7
 801b624:	4b24      	ldr	r3, [pc, #144]	@ (801b6b8 <_strtod_l+0x918>)
 801b626:	2200      	movs	r2, #0
 801b628:	f7e7 f808 	bl	800263c <__aeabi_dmul>
 801b62c:	4b21      	ldr	r3, [pc, #132]	@ (801b6b4 <_strtod_l+0x914>)
 801b62e:	0006      	movs	r6, r0
 801b630:	000f      	movs	r7, r1
 801b632:	420b      	tst	r3, r1
 801b634:	d000      	beq.n	801b638 <_strtod_l+0x898>
 801b636:	e5f6      	b.n	801b226 <_strtod_l+0x486>
 801b638:	2322      	movs	r3, #34	@ 0x22
 801b63a:	9a05      	ldr	r2, [sp, #20]
 801b63c:	6013      	str	r3, [r2, #0]
 801b63e:	e5f2      	b.n	801b226 <_strtod_l+0x486>
 801b640:	970e      	str	r7, [sp, #56]	@ 0x38
 801b642:	2800      	cmp	r0, #0
 801b644:	d175      	bne.n	801b732 <_strtod_l+0x992>
 801b646:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b648:	033b      	lsls	r3, r7, #12
 801b64a:	0b1b      	lsrs	r3, r3, #12
 801b64c:	2a00      	cmp	r2, #0
 801b64e:	d039      	beq.n	801b6c4 <_strtod_l+0x924>
 801b650:	4a1a      	ldr	r2, [pc, #104]	@ (801b6bc <_strtod_l+0x91c>)
 801b652:	4293      	cmp	r3, r2
 801b654:	d138      	bne.n	801b6c8 <_strtod_l+0x928>
 801b656:	2101      	movs	r1, #1
 801b658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b65a:	4249      	negs	r1, r1
 801b65c:	0032      	movs	r2, r6
 801b65e:	0008      	movs	r0, r1
 801b660:	2b00      	cmp	r3, #0
 801b662:	d00b      	beq.n	801b67c <_strtod_l+0x8dc>
 801b664:	24d4      	movs	r4, #212	@ 0xd4
 801b666:	4b13      	ldr	r3, [pc, #76]	@ (801b6b4 <_strtod_l+0x914>)
 801b668:	0008      	movs	r0, r1
 801b66a:	403b      	ands	r3, r7
 801b66c:	04e4      	lsls	r4, r4, #19
 801b66e:	42a3      	cmp	r3, r4
 801b670:	d804      	bhi.n	801b67c <_strtod_l+0x8dc>
 801b672:	306c      	adds	r0, #108	@ 0x6c
 801b674:	0d1b      	lsrs	r3, r3, #20
 801b676:	1ac3      	subs	r3, r0, r3
 801b678:	4099      	lsls	r1, r3
 801b67a:	0008      	movs	r0, r1
 801b67c:	4282      	cmp	r2, r0
 801b67e:	d123      	bne.n	801b6c8 <_strtod_l+0x928>
 801b680:	4b0f      	ldr	r3, [pc, #60]	@ (801b6c0 <_strtod_l+0x920>)
 801b682:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b684:	4299      	cmp	r1, r3
 801b686:	d102      	bne.n	801b68e <_strtod_l+0x8ee>
 801b688:	3201      	adds	r2, #1
 801b68a:	d100      	bne.n	801b68e <_strtod_l+0x8ee>
 801b68c:	e5c2      	b.n	801b214 <_strtod_l+0x474>
 801b68e:	4b09      	ldr	r3, [pc, #36]	@ (801b6b4 <_strtod_l+0x914>)
 801b690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b692:	2600      	movs	r6, #0
 801b694:	401a      	ands	r2, r3
 801b696:	0013      	movs	r3, r2
 801b698:	2280      	movs	r2, #128	@ 0x80
 801b69a:	0352      	lsls	r2, r2, #13
 801b69c:	189f      	adds	r7, r3, r2
 801b69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d1bd      	bne.n	801b620 <_strtod_l+0x880>
 801b6a4:	e5bf      	b.n	801b226 <_strtod_l+0x486>
 801b6a6:	46c0      	nop			@ (mov r8, r8)
 801b6a8:	08021168 	.word	0x08021168
 801b6ac:	fffffc02 	.word	0xfffffc02
 801b6b0:	fffffbe2 	.word	0xfffffbe2
 801b6b4:	7ff00000 	.word	0x7ff00000
 801b6b8:	39500000 	.word	0x39500000
 801b6bc:	000fffff 	.word	0x000fffff
 801b6c0:	7fefffff 	.word	0x7fefffff
 801b6c4:	4333      	orrs	r3, r6
 801b6c6:	d09d      	beq.n	801b604 <_strtod_l+0x864>
 801b6c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d01c      	beq.n	801b708 <_strtod_l+0x968>
 801b6ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b6d0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b6d2:	4213      	tst	r3, r2
 801b6d4:	d0e3      	beq.n	801b69e <_strtod_l+0x8fe>
 801b6d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b6d8:	0030      	movs	r0, r6
 801b6da:	0039      	movs	r1, r7
 801b6dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d016      	beq.n	801b710 <_strtod_l+0x970>
 801b6e2:	f7ff fb45 	bl	801ad70 <sulp>
 801b6e6:	0002      	movs	r2, r0
 801b6e8:	000b      	movs	r3, r1
 801b6ea:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b6ec:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b6ee:	f7e5 fffd 	bl	80016ec <__aeabi_dadd>
 801b6f2:	0006      	movs	r6, r0
 801b6f4:	000f      	movs	r7, r1
 801b6f6:	e7d2      	b.n	801b69e <_strtod_l+0x8fe>
 801b6f8:	2601      	movs	r6, #1
 801b6fa:	4a92      	ldr	r2, [pc, #584]	@ (801b944 <_strtod_l+0xba4>)
 801b6fc:	4276      	negs	r6, r6
 801b6fe:	189b      	adds	r3, r3, r2
 801b700:	4a91      	ldr	r2, [pc, #580]	@ (801b948 <_strtod_l+0xba8>)
 801b702:	431a      	orrs	r2, r3
 801b704:	0017      	movs	r7, r2
 801b706:	e7ca      	b.n	801b69e <_strtod_l+0x8fe>
 801b708:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b70a:	4233      	tst	r3, r6
 801b70c:	d0c7      	beq.n	801b69e <_strtod_l+0x8fe>
 801b70e:	e7e2      	b.n	801b6d6 <_strtod_l+0x936>
 801b710:	f7ff fb2e 	bl	801ad70 <sulp>
 801b714:	0002      	movs	r2, r0
 801b716:	000b      	movs	r3, r1
 801b718:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b71a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b71c:	f7e7 fa56 	bl	8002bcc <__aeabi_dsub>
 801b720:	2200      	movs	r2, #0
 801b722:	2300      	movs	r3, #0
 801b724:	0006      	movs	r6, r0
 801b726:	000f      	movs	r7, r1
 801b728:	f7e4 fec2 	bl	80004b0 <__aeabi_dcmpeq>
 801b72c:	2800      	cmp	r0, #0
 801b72e:	d0b6      	beq.n	801b69e <_strtod_l+0x8fe>
 801b730:	e60c      	b.n	801b34c <_strtod_l+0x5ac>
 801b732:	9907      	ldr	r1, [sp, #28]
 801b734:	9806      	ldr	r0, [sp, #24]
 801b736:	f002 ffdf 	bl	801e6f8 <__ratio>
 801b73a:	2380      	movs	r3, #128	@ 0x80
 801b73c:	2200      	movs	r2, #0
 801b73e:	05db      	lsls	r3, r3, #23
 801b740:	0004      	movs	r4, r0
 801b742:	000d      	movs	r5, r1
 801b744:	f7e4 fec4 	bl	80004d0 <__aeabi_dcmple>
 801b748:	2800      	cmp	r0, #0
 801b74a:	d06c      	beq.n	801b826 <_strtod_l+0xa86>
 801b74c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d177      	bne.n	801b842 <_strtod_l+0xaa2>
 801b752:	2e00      	cmp	r6, #0
 801b754:	d157      	bne.n	801b806 <_strtod_l+0xa66>
 801b756:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b758:	031b      	lsls	r3, r3, #12
 801b75a:	d15a      	bne.n	801b812 <_strtod_l+0xa72>
 801b75c:	2200      	movs	r2, #0
 801b75e:	0020      	movs	r0, r4
 801b760:	0029      	movs	r1, r5
 801b762:	4b7a      	ldr	r3, [pc, #488]	@ (801b94c <_strtod_l+0xbac>)
 801b764:	f7e4 feaa 	bl	80004bc <__aeabi_dcmplt>
 801b768:	2800      	cmp	r0, #0
 801b76a:	d159      	bne.n	801b820 <_strtod_l+0xa80>
 801b76c:	0020      	movs	r0, r4
 801b76e:	0029      	movs	r1, r5
 801b770:	2200      	movs	r2, #0
 801b772:	4b77      	ldr	r3, [pc, #476]	@ (801b950 <_strtod_l+0xbb0>)
 801b774:	f7e6 ff62 	bl	800263c <__aeabi_dmul>
 801b778:	0004      	movs	r4, r0
 801b77a:	000d      	movs	r5, r1
 801b77c:	2380      	movs	r3, #128	@ 0x80
 801b77e:	061b      	lsls	r3, r3, #24
 801b780:	18eb      	adds	r3, r5, r3
 801b782:	940a      	str	r4, [sp, #40]	@ 0x28
 801b784:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b788:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b78a:	9214      	str	r2, [sp, #80]	@ 0x50
 801b78c:	9315      	str	r3, [sp, #84]	@ 0x54
 801b78e:	4a71      	ldr	r2, [pc, #452]	@ (801b954 <_strtod_l+0xbb4>)
 801b790:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b792:	4013      	ands	r3, r2
 801b794:	9316      	str	r3, [sp, #88]	@ 0x58
 801b796:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b798:	4b6f      	ldr	r3, [pc, #444]	@ (801b958 <_strtod_l+0xbb8>)
 801b79a:	429a      	cmp	r2, r3
 801b79c:	d000      	beq.n	801b7a0 <_strtod_l+0xa00>
 801b79e:	e087      	b.n	801b8b0 <_strtod_l+0xb10>
 801b7a0:	4a6e      	ldr	r2, [pc, #440]	@ (801b95c <_strtod_l+0xbbc>)
 801b7a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b7a4:	4694      	mov	ip, r2
 801b7a6:	4463      	add	r3, ip
 801b7a8:	001f      	movs	r7, r3
 801b7aa:	0030      	movs	r0, r6
 801b7ac:	0019      	movs	r1, r3
 801b7ae:	f002 fed7 	bl	801e560 <__ulp>
 801b7b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b7b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b7b6:	f7e6 ff41 	bl	800263c <__aeabi_dmul>
 801b7ba:	0032      	movs	r2, r6
 801b7bc:	003b      	movs	r3, r7
 801b7be:	f7e5 ff95 	bl	80016ec <__aeabi_dadd>
 801b7c2:	4a64      	ldr	r2, [pc, #400]	@ (801b954 <_strtod_l+0xbb4>)
 801b7c4:	4b66      	ldr	r3, [pc, #408]	@ (801b960 <_strtod_l+0xbc0>)
 801b7c6:	0006      	movs	r6, r0
 801b7c8:	400a      	ands	r2, r1
 801b7ca:	429a      	cmp	r2, r3
 801b7cc:	d940      	bls.n	801b850 <_strtod_l+0xab0>
 801b7ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b7d0:	4a64      	ldr	r2, [pc, #400]	@ (801b964 <_strtod_l+0xbc4>)
 801b7d2:	4293      	cmp	r3, r2
 801b7d4:	d103      	bne.n	801b7de <_strtod_l+0xa3e>
 801b7d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b7d8:	3301      	adds	r3, #1
 801b7da:	d100      	bne.n	801b7de <_strtod_l+0xa3e>
 801b7dc:	e51a      	b.n	801b214 <_strtod_l+0x474>
 801b7de:	2601      	movs	r6, #1
 801b7e0:	4f60      	ldr	r7, [pc, #384]	@ (801b964 <_strtod_l+0xbc4>)
 801b7e2:	4276      	negs	r6, r6
 801b7e4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b7e6:	9805      	ldr	r0, [sp, #20]
 801b7e8:	f002 fb6e 	bl	801dec8 <_Bfree>
 801b7ec:	9908      	ldr	r1, [sp, #32]
 801b7ee:	9805      	ldr	r0, [sp, #20]
 801b7f0:	f002 fb6a 	bl	801dec8 <_Bfree>
 801b7f4:	9907      	ldr	r1, [sp, #28]
 801b7f6:	9805      	ldr	r0, [sp, #20]
 801b7f8:	f002 fb66 	bl	801dec8 <_Bfree>
 801b7fc:	9906      	ldr	r1, [sp, #24]
 801b7fe:	9805      	ldr	r0, [sp, #20]
 801b800:	f002 fb62 	bl	801dec8 <_Bfree>
 801b804:	e617      	b.n	801b436 <_strtod_l+0x696>
 801b806:	2e01      	cmp	r6, #1
 801b808:	d103      	bne.n	801b812 <_strtod_l+0xa72>
 801b80a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d100      	bne.n	801b812 <_strtod_l+0xa72>
 801b810:	e59c      	b.n	801b34c <_strtod_l+0x5ac>
 801b812:	2300      	movs	r3, #0
 801b814:	4c54      	ldr	r4, [pc, #336]	@ (801b968 <_strtod_l+0xbc8>)
 801b816:	4d4d      	ldr	r5, [pc, #308]	@ (801b94c <_strtod_l+0xbac>)
 801b818:	930a      	str	r3, [sp, #40]	@ 0x28
 801b81a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b81c:	2400      	movs	r4, #0
 801b81e:	e7b2      	b.n	801b786 <_strtod_l+0x9e6>
 801b820:	2400      	movs	r4, #0
 801b822:	4d4b      	ldr	r5, [pc, #300]	@ (801b950 <_strtod_l+0xbb0>)
 801b824:	e7aa      	b.n	801b77c <_strtod_l+0x9dc>
 801b826:	0020      	movs	r0, r4
 801b828:	0029      	movs	r1, r5
 801b82a:	4b49      	ldr	r3, [pc, #292]	@ (801b950 <_strtod_l+0xbb0>)
 801b82c:	2200      	movs	r2, #0
 801b82e:	f7e6 ff05 	bl	800263c <__aeabi_dmul>
 801b832:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b834:	0004      	movs	r4, r0
 801b836:	000d      	movs	r5, r1
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d09f      	beq.n	801b77c <_strtod_l+0x9dc>
 801b83c:	940a      	str	r4, [sp, #40]	@ 0x28
 801b83e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801b840:	e7a1      	b.n	801b786 <_strtod_l+0x9e6>
 801b842:	2300      	movs	r3, #0
 801b844:	4c41      	ldr	r4, [pc, #260]	@ (801b94c <_strtod_l+0xbac>)
 801b846:	0025      	movs	r5, r4
 801b848:	930a      	str	r3, [sp, #40]	@ 0x28
 801b84a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b84c:	001c      	movs	r4, r3
 801b84e:	e79a      	b.n	801b786 <_strtod_l+0x9e6>
 801b850:	23d4      	movs	r3, #212	@ 0xd4
 801b852:	049b      	lsls	r3, r3, #18
 801b854:	18cf      	adds	r7, r1, r3
 801b856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b858:	9710      	str	r7, [sp, #64]	@ 0x40
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d1c2      	bne.n	801b7e4 <_strtod_l+0xa44>
 801b85e:	4b3d      	ldr	r3, [pc, #244]	@ (801b954 <_strtod_l+0xbb4>)
 801b860:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b862:	403b      	ands	r3, r7
 801b864:	429a      	cmp	r2, r3
 801b866:	d1bd      	bne.n	801b7e4 <_strtod_l+0xa44>
 801b868:	0020      	movs	r0, r4
 801b86a:	0029      	movs	r1, r5
 801b86c:	f7e4 ff0c 	bl	8000688 <__aeabi_d2lz>
 801b870:	f7e4 ff44 	bl	80006fc <__aeabi_l2d>
 801b874:	0002      	movs	r2, r0
 801b876:	000b      	movs	r3, r1
 801b878:	0020      	movs	r0, r4
 801b87a:	0029      	movs	r1, r5
 801b87c:	f7e7 f9a6 	bl	8002bcc <__aeabi_dsub>
 801b880:	033c      	lsls	r4, r7, #12
 801b882:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b884:	0b24      	lsrs	r4, r4, #12
 801b886:	4334      	orrs	r4, r6
 801b888:	900e      	str	r0, [sp, #56]	@ 0x38
 801b88a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b88c:	4a37      	ldr	r2, [pc, #220]	@ (801b96c <_strtod_l+0xbcc>)
 801b88e:	431c      	orrs	r4, r3
 801b890:	d052      	beq.n	801b938 <_strtod_l+0xb98>
 801b892:	4b37      	ldr	r3, [pc, #220]	@ (801b970 <_strtod_l+0xbd0>)
 801b894:	f7e4 fe12 	bl	80004bc <__aeabi_dcmplt>
 801b898:	2800      	cmp	r0, #0
 801b89a:	d000      	beq.n	801b89e <_strtod_l+0xafe>
 801b89c:	e4c3      	b.n	801b226 <_strtod_l+0x486>
 801b89e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b8a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b8a2:	4a34      	ldr	r2, [pc, #208]	@ (801b974 <_strtod_l+0xbd4>)
 801b8a4:	4b2a      	ldr	r3, [pc, #168]	@ (801b950 <_strtod_l+0xbb0>)
 801b8a6:	f7e4 fe1d 	bl	80004e4 <__aeabi_dcmpgt>
 801b8aa:	2800      	cmp	r0, #0
 801b8ac:	d09a      	beq.n	801b7e4 <_strtod_l+0xa44>
 801b8ae:	e4ba      	b.n	801b226 <_strtod_l+0x486>
 801b8b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d02a      	beq.n	801b90c <_strtod_l+0xb6c>
 801b8b6:	23d4      	movs	r3, #212	@ 0xd4
 801b8b8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b8ba:	04db      	lsls	r3, r3, #19
 801b8bc:	429a      	cmp	r2, r3
 801b8be:	d825      	bhi.n	801b90c <_strtod_l+0xb6c>
 801b8c0:	0020      	movs	r0, r4
 801b8c2:	0029      	movs	r1, r5
 801b8c4:	4a2c      	ldr	r2, [pc, #176]	@ (801b978 <_strtod_l+0xbd8>)
 801b8c6:	4b2d      	ldr	r3, [pc, #180]	@ (801b97c <_strtod_l+0xbdc>)
 801b8c8:	f7e4 fe02 	bl	80004d0 <__aeabi_dcmple>
 801b8cc:	2800      	cmp	r0, #0
 801b8ce:	d016      	beq.n	801b8fe <_strtod_l+0xb5e>
 801b8d0:	0020      	movs	r0, r4
 801b8d2:	0029      	movs	r1, r5
 801b8d4:	f7e4 feba 	bl	800064c <__aeabi_d2uiz>
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	d100      	bne.n	801b8de <_strtod_l+0xb3e>
 801b8dc:	3001      	adds	r0, #1
 801b8de:	f7e7 fd9d 	bl	800341c <__aeabi_ui2d>
 801b8e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b8e4:	0004      	movs	r4, r0
 801b8e6:	000d      	movs	r5, r1
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d122      	bne.n	801b932 <_strtod_l+0xb92>
 801b8ec:	2380      	movs	r3, #128	@ 0x80
 801b8ee:	061b      	lsls	r3, r3, #24
 801b8f0:	18cb      	adds	r3, r1, r3
 801b8f2:	9018      	str	r0, [sp, #96]	@ 0x60
 801b8f4:	9319      	str	r3, [sp, #100]	@ 0x64
 801b8f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b8f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b8fa:	9214      	str	r2, [sp, #80]	@ 0x50
 801b8fc:	9315      	str	r3, [sp, #84]	@ 0x54
 801b8fe:	22d6      	movs	r2, #214	@ 0xd6
 801b900:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b902:	04d2      	lsls	r2, r2, #19
 801b904:	189b      	adds	r3, r3, r2
 801b906:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b908:	1a9b      	subs	r3, r3, r2
 801b90a:	9315      	str	r3, [sp, #84]	@ 0x54
 801b90c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b90e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b910:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b912:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801b914:	f002 fe24 	bl	801e560 <__ulp>
 801b918:	0002      	movs	r2, r0
 801b91a:	000b      	movs	r3, r1
 801b91c:	0030      	movs	r0, r6
 801b91e:	0039      	movs	r1, r7
 801b920:	f7e6 fe8c 	bl	800263c <__aeabi_dmul>
 801b924:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b926:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b928:	f7e5 fee0 	bl	80016ec <__aeabi_dadd>
 801b92c:	0006      	movs	r6, r0
 801b92e:	000f      	movs	r7, r1
 801b930:	e791      	b.n	801b856 <_strtod_l+0xab6>
 801b932:	9418      	str	r4, [sp, #96]	@ 0x60
 801b934:	9519      	str	r5, [sp, #100]	@ 0x64
 801b936:	e7de      	b.n	801b8f6 <_strtod_l+0xb56>
 801b938:	4b11      	ldr	r3, [pc, #68]	@ (801b980 <_strtod_l+0xbe0>)
 801b93a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b93c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b93e:	f7e4 fdbd 	bl	80004bc <__aeabi_dcmplt>
 801b942:	e7b2      	b.n	801b8aa <_strtod_l+0xb0a>
 801b944:	fff00000 	.word	0xfff00000
 801b948:	000fffff 	.word	0x000fffff
 801b94c:	3ff00000 	.word	0x3ff00000
 801b950:	3fe00000 	.word	0x3fe00000
 801b954:	7ff00000 	.word	0x7ff00000
 801b958:	7fe00000 	.word	0x7fe00000
 801b95c:	fcb00000 	.word	0xfcb00000
 801b960:	7c9fffff 	.word	0x7c9fffff
 801b964:	7fefffff 	.word	0x7fefffff
 801b968:	bff00000 	.word	0xbff00000
 801b96c:	94a03595 	.word	0x94a03595
 801b970:	3fdfffff 	.word	0x3fdfffff
 801b974:	35afe535 	.word	0x35afe535
 801b978:	ffc00000 	.word	0xffc00000
 801b97c:	41dfffff 	.word	0x41dfffff
 801b980:	3fcfffff 	.word	0x3fcfffff

0801b984 <strtod>:
 801b984:	b510      	push	{r4, lr}
 801b986:	4c04      	ldr	r4, [pc, #16]	@ (801b998 <strtod+0x14>)
 801b988:	000a      	movs	r2, r1
 801b98a:	0001      	movs	r1, r0
 801b98c:	4b03      	ldr	r3, [pc, #12]	@ (801b99c <strtod+0x18>)
 801b98e:	6820      	ldr	r0, [r4, #0]
 801b990:	f7ff fa06 	bl	801ada0 <_strtod_l>
 801b994:	bd10      	pop	{r4, pc}
 801b996:	46c0      	nop			@ (mov r8, r8)
 801b998:	200003c4 	.word	0x200003c4
 801b99c:	20000258 	.word	0x20000258

0801b9a0 <_strtol_l.constprop.0>:
 801b9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9a2:	b085      	sub	sp, #20
 801b9a4:	0017      	movs	r7, r2
 801b9a6:	001e      	movs	r6, r3
 801b9a8:	9003      	str	r0, [sp, #12]
 801b9aa:	9101      	str	r1, [sp, #4]
 801b9ac:	2b24      	cmp	r3, #36	@ 0x24
 801b9ae:	d844      	bhi.n	801ba3a <_strtol_l.constprop.0+0x9a>
 801b9b0:	000c      	movs	r4, r1
 801b9b2:	2b01      	cmp	r3, #1
 801b9b4:	d041      	beq.n	801ba3a <_strtol_l.constprop.0+0x9a>
 801b9b6:	4b3d      	ldr	r3, [pc, #244]	@ (801baac <_strtol_l.constprop.0+0x10c>)
 801b9b8:	2208      	movs	r2, #8
 801b9ba:	469c      	mov	ip, r3
 801b9bc:	0023      	movs	r3, r4
 801b9be:	4661      	mov	r1, ip
 801b9c0:	781d      	ldrb	r5, [r3, #0]
 801b9c2:	3401      	adds	r4, #1
 801b9c4:	5d48      	ldrb	r0, [r1, r5]
 801b9c6:	0001      	movs	r1, r0
 801b9c8:	4011      	ands	r1, r2
 801b9ca:	4210      	tst	r0, r2
 801b9cc:	d1f6      	bne.n	801b9bc <_strtol_l.constprop.0+0x1c>
 801b9ce:	2d2d      	cmp	r5, #45	@ 0x2d
 801b9d0:	d13a      	bne.n	801ba48 <_strtol_l.constprop.0+0xa8>
 801b9d2:	7825      	ldrb	r5, [r4, #0]
 801b9d4:	1c9c      	adds	r4, r3, #2
 801b9d6:	2301      	movs	r3, #1
 801b9d8:	9300      	str	r3, [sp, #0]
 801b9da:	2210      	movs	r2, #16
 801b9dc:	0033      	movs	r3, r6
 801b9de:	4393      	bics	r3, r2
 801b9e0:	d109      	bne.n	801b9f6 <_strtol_l.constprop.0+0x56>
 801b9e2:	2d30      	cmp	r5, #48	@ 0x30
 801b9e4:	d136      	bne.n	801ba54 <_strtol_l.constprop.0+0xb4>
 801b9e6:	2120      	movs	r1, #32
 801b9e8:	7823      	ldrb	r3, [r4, #0]
 801b9ea:	438b      	bics	r3, r1
 801b9ec:	2b58      	cmp	r3, #88	@ 0x58
 801b9ee:	d131      	bne.n	801ba54 <_strtol_l.constprop.0+0xb4>
 801b9f0:	0016      	movs	r6, r2
 801b9f2:	7865      	ldrb	r5, [r4, #1]
 801b9f4:	3402      	adds	r4, #2
 801b9f6:	4a2e      	ldr	r2, [pc, #184]	@ (801bab0 <_strtol_l.constprop.0+0x110>)
 801b9f8:	9b00      	ldr	r3, [sp, #0]
 801b9fa:	4694      	mov	ip, r2
 801b9fc:	4463      	add	r3, ip
 801b9fe:	0031      	movs	r1, r6
 801ba00:	0018      	movs	r0, r3
 801ba02:	9302      	str	r3, [sp, #8]
 801ba04:	f7e4 fc54 	bl	80002b0 <__aeabi_uidivmod>
 801ba08:	2200      	movs	r2, #0
 801ba0a:	4684      	mov	ip, r0
 801ba0c:	0010      	movs	r0, r2
 801ba0e:	002b      	movs	r3, r5
 801ba10:	3b30      	subs	r3, #48	@ 0x30
 801ba12:	2b09      	cmp	r3, #9
 801ba14:	d825      	bhi.n	801ba62 <_strtol_l.constprop.0+0xc2>
 801ba16:	001d      	movs	r5, r3
 801ba18:	42ae      	cmp	r6, r5
 801ba1a:	dd31      	ble.n	801ba80 <_strtol_l.constprop.0+0xe0>
 801ba1c:	1c53      	adds	r3, r2, #1
 801ba1e:	d009      	beq.n	801ba34 <_strtol_l.constprop.0+0x94>
 801ba20:	2201      	movs	r2, #1
 801ba22:	4252      	negs	r2, r2
 801ba24:	4584      	cmp	ip, r0
 801ba26:	d305      	bcc.n	801ba34 <_strtol_l.constprop.0+0x94>
 801ba28:	d101      	bne.n	801ba2e <_strtol_l.constprop.0+0x8e>
 801ba2a:	42a9      	cmp	r1, r5
 801ba2c:	db25      	blt.n	801ba7a <_strtol_l.constprop.0+0xda>
 801ba2e:	2201      	movs	r2, #1
 801ba30:	4370      	muls	r0, r6
 801ba32:	1828      	adds	r0, r5, r0
 801ba34:	7825      	ldrb	r5, [r4, #0]
 801ba36:	3401      	adds	r4, #1
 801ba38:	e7e9      	b.n	801ba0e <_strtol_l.constprop.0+0x6e>
 801ba3a:	f000 fec5 	bl	801c7c8 <__errno>
 801ba3e:	2316      	movs	r3, #22
 801ba40:	6003      	str	r3, [r0, #0]
 801ba42:	2000      	movs	r0, #0
 801ba44:	b005      	add	sp, #20
 801ba46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba48:	9100      	str	r1, [sp, #0]
 801ba4a:	2d2b      	cmp	r5, #43	@ 0x2b
 801ba4c:	d1c5      	bne.n	801b9da <_strtol_l.constprop.0+0x3a>
 801ba4e:	7825      	ldrb	r5, [r4, #0]
 801ba50:	1c9c      	adds	r4, r3, #2
 801ba52:	e7c2      	b.n	801b9da <_strtol_l.constprop.0+0x3a>
 801ba54:	2e00      	cmp	r6, #0
 801ba56:	d1ce      	bne.n	801b9f6 <_strtol_l.constprop.0+0x56>
 801ba58:	3608      	adds	r6, #8
 801ba5a:	2d30      	cmp	r5, #48	@ 0x30
 801ba5c:	d0cb      	beq.n	801b9f6 <_strtol_l.constprop.0+0x56>
 801ba5e:	3602      	adds	r6, #2
 801ba60:	e7c9      	b.n	801b9f6 <_strtol_l.constprop.0+0x56>
 801ba62:	002b      	movs	r3, r5
 801ba64:	3b41      	subs	r3, #65	@ 0x41
 801ba66:	2b19      	cmp	r3, #25
 801ba68:	d801      	bhi.n	801ba6e <_strtol_l.constprop.0+0xce>
 801ba6a:	3d37      	subs	r5, #55	@ 0x37
 801ba6c:	e7d4      	b.n	801ba18 <_strtol_l.constprop.0+0x78>
 801ba6e:	002b      	movs	r3, r5
 801ba70:	3b61      	subs	r3, #97	@ 0x61
 801ba72:	2b19      	cmp	r3, #25
 801ba74:	d804      	bhi.n	801ba80 <_strtol_l.constprop.0+0xe0>
 801ba76:	3d57      	subs	r5, #87	@ 0x57
 801ba78:	e7ce      	b.n	801ba18 <_strtol_l.constprop.0+0x78>
 801ba7a:	2201      	movs	r2, #1
 801ba7c:	4252      	negs	r2, r2
 801ba7e:	e7d9      	b.n	801ba34 <_strtol_l.constprop.0+0x94>
 801ba80:	1c53      	adds	r3, r2, #1
 801ba82:	d108      	bne.n	801ba96 <_strtol_l.constprop.0+0xf6>
 801ba84:	2322      	movs	r3, #34	@ 0x22
 801ba86:	9a03      	ldr	r2, [sp, #12]
 801ba88:	9802      	ldr	r0, [sp, #8]
 801ba8a:	6013      	str	r3, [r2, #0]
 801ba8c:	2f00      	cmp	r7, #0
 801ba8e:	d0d9      	beq.n	801ba44 <_strtol_l.constprop.0+0xa4>
 801ba90:	1e63      	subs	r3, r4, #1
 801ba92:	9301      	str	r3, [sp, #4]
 801ba94:	e007      	b.n	801baa6 <_strtol_l.constprop.0+0x106>
 801ba96:	9b00      	ldr	r3, [sp, #0]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d000      	beq.n	801ba9e <_strtol_l.constprop.0+0xfe>
 801ba9c:	4240      	negs	r0, r0
 801ba9e:	2f00      	cmp	r7, #0
 801baa0:	d0d0      	beq.n	801ba44 <_strtol_l.constprop.0+0xa4>
 801baa2:	2a00      	cmp	r2, #0
 801baa4:	d1f4      	bne.n	801ba90 <_strtol_l.constprop.0+0xf0>
 801baa6:	9b01      	ldr	r3, [sp, #4]
 801baa8:	603b      	str	r3, [r7, #0]
 801baaa:	e7cb      	b.n	801ba44 <_strtol_l.constprop.0+0xa4>
 801baac:	08021191 	.word	0x08021191
 801bab0:	7fffffff 	.word	0x7fffffff

0801bab4 <strtol>:
 801bab4:	b510      	push	{r4, lr}
 801bab6:	4c04      	ldr	r4, [pc, #16]	@ (801bac8 <strtol+0x14>)
 801bab8:	0013      	movs	r3, r2
 801baba:	000a      	movs	r2, r1
 801babc:	0001      	movs	r1, r0
 801babe:	6820      	ldr	r0, [r4, #0]
 801bac0:	f7ff ff6e 	bl	801b9a0 <_strtol_l.constprop.0>
 801bac4:	bd10      	pop	{r4, pc}
 801bac6:	46c0      	nop			@ (mov r8, r8)
 801bac8:	200003c4 	.word	0x200003c4

0801bacc <__cvt>:
 801bacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bace:	001f      	movs	r7, r3
 801bad0:	2300      	movs	r3, #0
 801bad2:	0016      	movs	r6, r2
 801bad4:	b08b      	sub	sp, #44	@ 0x2c
 801bad6:	429f      	cmp	r7, r3
 801bad8:	da04      	bge.n	801bae4 <__cvt+0x18>
 801bada:	2180      	movs	r1, #128	@ 0x80
 801badc:	0609      	lsls	r1, r1, #24
 801bade:	187b      	adds	r3, r7, r1
 801bae0:	001f      	movs	r7, r3
 801bae2:	232d      	movs	r3, #45	@ 0x2d
 801bae4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bae6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801bae8:	7013      	strb	r3, [r2, #0]
 801baea:	2320      	movs	r3, #32
 801baec:	2203      	movs	r2, #3
 801baee:	439d      	bics	r5, r3
 801baf0:	2d46      	cmp	r5, #70	@ 0x46
 801baf2:	d007      	beq.n	801bb04 <__cvt+0x38>
 801baf4:	002b      	movs	r3, r5
 801baf6:	3b45      	subs	r3, #69	@ 0x45
 801baf8:	4259      	negs	r1, r3
 801bafa:	414b      	adcs	r3, r1
 801bafc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801bafe:	3a01      	subs	r2, #1
 801bb00:	18cb      	adds	r3, r1, r3
 801bb02:	9310      	str	r3, [sp, #64]	@ 0x40
 801bb04:	ab09      	add	r3, sp, #36	@ 0x24
 801bb06:	9304      	str	r3, [sp, #16]
 801bb08:	ab08      	add	r3, sp, #32
 801bb0a:	9303      	str	r3, [sp, #12]
 801bb0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bb0e:	9200      	str	r2, [sp, #0]
 801bb10:	9302      	str	r3, [sp, #8]
 801bb12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bb14:	0032      	movs	r2, r6
 801bb16:	9301      	str	r3, [sp, #4]
 801bb18:	003b      	movs	r3, r7
 801bb1a:	f000 ff2b 	bl	801c974 <_dtoa_r>
 801bb1e:	0004      	movs	r4, r0
 801bb20:	2d47      	cmp	r5, #71	@ 0x47
 801bb22:	d11b      	bne.n	801bb5c <__cvt+0x90>
 801bb24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bb26:	07db      	lsls	r3, r3, #31
 801bb28:	d511      	bpl.n	801bb4e <__cvt+0x82>
 801bb2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bb2c:	18c3      	adds	r3, r0, r3
 801bb2e:	9307      	str	r3, [sp, #28]
 801bb30:	2200      	movs	r2, #0
 801bb32:	2300      	movs	r3, #0
 801bb34:	0030      	movs	r0, r6
 801bb36:	0039      	movs	r1, r7
 801bb38:	f7e4 fcba 	bl	80004b0 <__aeabi_dcmpeq>
 801bb3c:	2800      	cmp	r0, #0
 801bb3e:	d001      	beq.n	801bb44 <__cvt+0x78>
 801bb40:	9b07      	ldr	r3, [sp, #28]
 801bb42:	9309      	str	r3, [sp, #36]	@ 0x24
 801bb44:	2230      	movs	r2, #48	@ 0x30
 801bb46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb48:	9907      	ldr	r1, [sp, #28]
 801bb4a:	428b      	cmp	r3, r1
 801bb4c:	d320      	bcc.n	801bb90 <__cvt+0xc4>
 801bb4e:	0020      	movs	r0, r4
 801bb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bb54:	1b1b      	subs	r3, r3, r4
 801bb56:	6013      	str	r3, [r2, #0]
 801bb58:	b00b      	add	sp, #44	@ 0x2c
 801bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bb5e:	18c3      	adds	r3, r0, r3
 801bb60:	9307      	str	r3, [sp, #28]
 801bb62:	2d46      	cmp	r5, #70	@ 0x46
 801bb64:	d1e4      	bne.n	801bb30 <__cvt+0x64>
 801bb66:	7803      	ldrb	r3, [r0, #0]
 801bb68:	2b30      	cmp	r3, #48	@ 0x30
 801bb6a:	d10c      	bne.n	801bb86 <__cvt+0xba>
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	2300      	movs	r3, #0
 801bb70:	0030      	movs	r0, r6
 801bb72:	0039      	movs	r1, r7
 801bb74:	f7e4 fc9c 	bl	80004b0 <__aeabi_dcmpeq>
 801bb78:	2800      	cmp	r0, #0
 801bb7a:	d104      	bne.n	801bb86 <__cvt+0xba>
 801bb7c:	2301      	movs	r3, #1
 801bb7e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bb80:	1a9b      	subs	r3, r3, r2
 801bb82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bb84:	6013      	str	r3, [r2, #0]
 801bb86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bb88:	9a07      	ldr	r2, [sp, #28]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	18d3      	adds	r3, r2, r3
 801bb8e:	e7ce      	b.n	801bb2e <__cvt+0x62>
 801bb90:	1c59      	adds	r1, r3, #1
 801bb92:	9109      	str	r1, [sp, #36]	@ 0x24
 801bb94:	701a      	strb	r2, [r3, #0]
 801bb96:	e7d6      	b.n	801bb46 <__cvt+0x7a>

0801bb98 <__exponent>:
 801bb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb9a:	232b      	movs	r3, #43	@ 0x2b
 801bb9c:	0005      	movs	r5, r0
 801bb9e:	000c      	movs	r4, r1
 801bba0:	b085      	sub	sp, #20
 801bba2:	7002      	strb	r2, [r0, #0]
 801bba4:	2900      	cmp	r1, #0
 801bba6:	da01      	bge.n	801bbac <__exponent+0x14>
 801bba8:	424c      	negs	r4, r1
 801bbaa:	3302      	adds	r3, #2
 801bbac:	706b      	strb	r3, [r5, #1]
 801bbae:	2c09      	cmp	r4, #9
 801bbb0:	dd2c      	ble.n	801bc0c <__exponent+0x74>
 801bbb2:	ab02      	add	r3, sp, #8
 801bbb4:	1dde      	adds	r6, r3, #7
 801bbb6:	0020      	movs	r0, r4
 801bbb8:	210a      	movs	r1, #10
 801bbba:	f7e4 fc63 	bl	8000484 <__aeabi_idivmod>
 801bbbe:	0037      	movs	r7, r6
 801bbc0:	3130      	adds	r1, #48	@ 0x30
 801bbc2:	3e01      	subs	r6, #1
 801bbc4:	0020      	movs	r0, r4
 801bbc6:	7031      	strb	r1, [r6, #0]
 801bbc8:	210a      	movs	r1, #10
 801bbca:	9401      	str	r4, [sp, #4]
 801bbcc:	f7e4 fb74 	bl	80002b8 <__divsi3>
 801bbd0:	9b01      	ldr	r3, [sp, #4]
 801bbd2:	0004      	movs	r4, r0
 801bbd4:	2b63      	cmp	r3, #99	@ 0x63
 801bbd6:	dcee      	bgt.n	801bbb6 <__exponent+0x1e>
 801bbd8:	1eba      	subs	r2, r7, #2
 801bbda:	1ca8      	adds	r0, r5, #2
 801bbdc:	0001      	movs	r1, r0
 801bbde:	0013      	movs	r3, r2
 801bbe0:	3430      	adds	r4, #48	@ 0x30
 801bbe2:	7014      	strb	r4, [r2, #0]
 801bbe4:	ac02      	add	r4, sp, #8
 801bbe6:	3407      	adds	r4, #7
 801bbe8:	429c      	cmp	r4, r3
 801bbea:	d80a      	bhi.n	801bc02 <__exponent+0x6a>
 801bbec:	2300      	movs	r3, #0
 801bbee:	42a2      	cmp	r2, r4
 801bbf0:	d803      	bhi.n	801bbfa <__exponent+0x62>
 801bbf2:	3309      	adds	r3, #9
 801bbf4:	aa02      	add	r2, sp, #8
 801bbf6:	189b      	adds	r3, r3, r2
 801bbf8:	1bdb      	subs	r3, r3, r7
 801bbfa:	18c0      	adds	r0, r0, r3
 801bbfc:	1b40      	subs	r0, r0, r5
 801bbfe:	b005      	add	sp, #20
 801bc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc02:	781c      	ldrb	r4, [r3, #0]
 801bc04:	3301      	adds	r3, #1
 801bc06:	700c      	strb	r4, [r1, #0]
 801bc08:	3101      	adds	r1, #1
 801bc0a:	e7eb      	b.n	801bbe4 <__exponent+0x4c>
 801bc0c:	2330      	movs	r3, #48	@ 0x30
 801bc0e:	18e4      	adds	r4, r4, r3
 801bc10:	70ab      	strb	r3, [r5, #2]
 801bc12:	1d28      	adds	r0, r5, #4
 801bc14:	70ec      	strb	r4, [r5, #3]
 801bc16:	e7f1      	b.n	801bbfc <__exponent+0x64>

0801bc18 <_printf_float>:
 801bc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc1a:	b097      	sub	sp, #92	@ 0x5c
 801bc1c:	000d      	movs	r5, r1
 801bc1e:	920a      	str	r2, [sp, #40]	@ 0x28
 801bc20:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801bc22:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc24:	9009      	str	r0, [sp, #36]	@ 0x24
 801bc26:	f000 fd7d 	bl	801c724 <_localeconv_r>
 801bc2a:	6803      	ldr	r3, [r0, #0]
 801bc2c:	0018      	movs	r0, r3
 801bc2e:	930d      	str	r3, [sp, #52]	@ 0x34
 801bc30:	f7e4 fa9c 	bl	800016c <strlen>
 801bc34:	2300      	movs	r3, #0
 801bc36:	900f      	str	r0, [sp, #60]	@ 0x3c
 801bc38:	9314      	str	r3, [sp, #80]	@ 0x50
 801bc3a:	7e2b      	ldrb	r3, [r5, #24]
 801bc3c:	2207      	movs	r2, #7
 801bc3e:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc40:	682b      	ldr	r3, [r5, #0]
 801bc42:	930e      	str	r3, [sp, #56]	@ 0x38
 801bc44:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801bc46:	6823      	ldr	r3, [r4, #0]
 801bc48:	05c9      	lsls	r1, r1, #23
 801bc4a:	d545      	bpl.n	801bcd8 <_printf_float+0xc0>
 801bc4c:	189b      	adds	r3, r3, r2
 801bc4e:	4393      	bics	r3, r2
 801bc50:	001a      	movs	r2, r3
 801bc52:	3208      	adds	r2, #8
 801bc54:	6022      	str	r2, [r4, #0]
 801bc56:	2201      	movs	r2, #1
 801bc58:	681e      	ldr	r6, [r3, #0]
 801bc5a:	685f      	ldr	r7, [r3, #4]
 801bc5c:	007b      	lsls	r3, r7, #1
 801bc5e:	085b      	lsrs	r3, r3, #1
 801bc60:	9311      	str	r3, [sp, #68]	@ 0x44
 801bc62:	9610      	str	r6, [sp, #64]	@ 0x40
 801bc64:	64ae      	str	r6, [r5, #72]	@ 0x48
 801bc66:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801bc68:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801bc6a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801bc6c:	4ba7      	ldr	r3, [pc, #668]	@ (801bf0c <_printf_float+0x2f4>)
 801bc6e:	4252      	negs	r2, r2
 801bc70:	f7e7 fb48 	bl	8003304 <__aeabi_dcmpun>
 801bc74:	2800      	cmp	r0, #0
 801bc76:	d131      	bne.n	801bcdc <_printf_float+0xc4>
 801bc78:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801bc7a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801bc7c:	2201      	movs	r2, #1
 801bc7e:	4ba3      	ldr	r3, [pc, #652]	@ (801bf0c <_printf_float+0x2f4>)
 801bc80:	4252      	negs	r2, r2
 801bc82:	f7e4 fc25 	bl	80004d0 <__aeabi_dcmple>
 801bc86:	2800      	cmp	r0, #0
 801bc88:	d128      	bne.n	801bcdc <_printf_float+0xc4>
 801bc8a:	2200      	movs	r2, #0
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	0030      	movs	r0, r6
 801bc90:	0039      	movs	r1, r7
 801bc92:	f7e4 fc13 	bl	80004bc <__aeabi_dcmplt>
 801bc96:	2800      	cmp	r0, #0
 801bc98:	d003      	beq.n	801bca2 <_printf_float+0x8a>
 801bc9a:	002b      	movs	r3, r5
 801bc9c:	222d      	movs	r2, #45	@ 0x2d
 801bc9e:	3343      	adds	r3, #67	@ 0x43
 801bca0:	701a      	strb	r2, [r3, #0]
 801bca2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bca4:	4f9a      	ldr	r7, [pc, #616]	@ (801bf10 <_printf_float+0x2f8>)
 801bca6:	2b47      	cmp	r3, #71	@ 0x47
 801bca8:	d900      	bls.n	801bcac <_printf_float+0x94>
 801bcaa:	4f9a      	ldr	r7, [pc, #616]	@ (801bf14 <_printf_float+0x2fc>)
 801bcac:	2303      	movs	r3, #3
 801bcae:	2400      	movs	r4, #0
 801bcb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bcb2:	612b      	str	r3, [r5, #16]
 801bcb4:	3301      	adds	r3, #1
 801bcb6:	439a      	bics	r2, r3
 801bcb8:	602a      	str	r2, [r5, #0]
 801bcba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bcbc:	0029      	movs	r1, r5
 801bcbe:	9300      	str	r3, [sp, #0]
 801bcc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bcc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bcc4:	aa15      	add	r2, sp, #84	@ 0x54
 801bcc6:	f000 f9e5 	bl	801c094 <_printf_common>
 801bcca:	3001      	adds	r0, #1
 801bccc:	d000      	beq.n	801bcd0 <_printf_float+0xb8>
 801bcce:	e09f      	b.n	801be10 <_printf_float+0x1f8>
 801bcd0:	2001      	movs	r0, #1
 801bcd2:	4240      	negs	r0, r0
 801bcd4:	b017      	add	sp, #92	@ 0x5c
 801bcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcd8:	3307      	adds	r3, #7
 801bcda:	e7b8      	b.n	801bc4e <_printf_float+0x36>
 801bcdc:	0032      	movs	r2, r6
 801bcde:	003b      	movs	r3, r7
 801bce0:	0030      	movs	r0, r6
 801bce2:	0039      	movs	r1, r7
 801bce4:	f7e7 fb0e 	bl	8003304 <__aeabi_dcmpun>
 801bce8:	2800      	cmp	r0, #0
 801bcea:	d00b      	beq.n	801bd04 <_printf_float+0xec>
 801bcec:	2f00      	cmp	r7, #0
 801bcee:	da03      	bge.n	801bcf8 <_printf_float+0xe0>
 801bcf0:	002b      	movs	r3, r5
 801bcf2:	222d      	movs	r2, #45	@ 0x2d
 801bcf4:	3343      	adds	r3, #67	@ 0x43
 801bcf6:	701a      	strb	r2, [r3, #0]
 801bcf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bcfa:	4f87      	ldr	r7, [pc, #540]	@ (801bf18 <_printf_float+0x300>)
 801bcfc:	2b47      	cmp	r3, #71	@ 0x47
 801bcfe:	d9d5      	bls.n	801bcac <_printf_float+0x94>
 801bd00:	4f86      	ldr	r7, [pc, #536]	@ (801bf1c <_printf_float+0x304>)
 801bd02:	e7d3      	b.n	801bcac <_printf_float+0x94>
 801bd04:	2220      	movs	r2, #32
 801bd06:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bd08:	686b      	ldr	r3, [r5, #4]
 801bd0a:	4394      	bics	r4, r2
 801bd0c:	1c5a      	adds	r2, r3, #1
 801bd0e:	d146      	bne.n	801bd9e <_printf_float+0x186>
 801bd10:	3307      	adds	r3, #7
 801bd12:	606b      	str	r3, [r5, #4]
 801bd14:	2380      	movs	r3, #128	@ 0x80
 801bd16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bd18:	00db      	lsls	r3, r3, #3
 801bd1a:	4313      	orrs	r3, r2
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	602b      	str	r3, [r5, #0]
 801bd20:	9206      	str	r2, [sp, #24]
 801bd22:	aa14      	add	r2, sp, #80	@ 0x50
 801bd24:	9205      	str	r2, [sp, #20]
 801bd26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bd28:	a90a      	add	r1, sp, #40	@ 0x28
 801bd2a:	9204      	str	r2, [sp, #16]
 801bd2c:	aa13      	add	r2, sp, #76	@ 0x4c
 801bd2e:	9203      	str	r2, [sp, #12]
 801bd30:	2223      	movs	r2, #35	@ 0x23
 801bd32:	1852      	adds	r2, r2, r1
 801bd34:	9202      	str	r2, [sp, #8]
 801bd36:	9301      	str	r3, [sp, #4]
 801bd38:	686b      	ldr	r3, [r5, #4]
 801bd3a:	0032      	movs	r2, r6
 801bd3c:	9300      	str	r3, [sp, #0]
 801bd3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd40:	003b      	movs	r3, r7
 801bd42:	f7ff fec3 	bl	801bacc <__cvt>
 801bd46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bd48:	0007      	movs	r7, r0
 801bd4a:	2c47      	cmp	r4, #71	@ 0x47
 801bd4c:	d12d      	bne.n	801bdaa <_printf_float+0x192>
 801bd4e:	1cd3      	adds	r3, r2, #3
 801bd50:	db02      	blt.n	801bd58 <_printf_float+0x140>
 801bd52:	686b      	ldr	r3, [r5, #4]
 801bd54:	429a      	cmp	r2, r3
 801bd56:	dd48      	ble.n	801bdea <_printf_float+0x1d2>
 801bd58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bd5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bd5c:	3b02      	subs	r3, #2
 801bd5e:	b2db      	uxtb	r3, r3
 801bd60:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd62:	0028      	movs	r0, r5
 801bd64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bd66:	3901      	subs	r1, #1
 801bd68:	3050      	adds	r0, #80	@ 0x50
 801bd6a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bd6c:	f7ff ff14 	bl	801bb98 <__exponent>
 801bd70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bd72:	0004      	movs	r4, r0
 801bd74:	1813      	adds	r3, r2, r0
 801bd76:	612b      	str	r3, [r5, #16]
 801bd78:	2a01      	cmp	r2, #1
 801bd7a:	dc02      	bgt.n	801bd82 <_printf_float+0x16a>
 801bd7c:	682a      	ldr	r2, [r5, #0]
 801bd7e:	07d2      	lsls	r2, r2, #31
 801bd80:	d501      	bpl.n	801bd86 <_printf_float+0x16e>
 801bd82:	3301      	adds	r3, #1
 801bd84:	612b      	str	r3, [r5, #16]
 801bd86:	2323      	movs	r3, #35	@ 0x23
 801bd88:	aa0a      	add	r2, sp, #40	@ 0x28
 801bd8a:	189b      	adds	r3, r3, r2
 801bd8c:	781b      	ldrb	r3, [r3, #0]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d100      	bne.n	801bd94 <_printf_float+0x17c>
 801bd92:	e792      	b.n	801bcba <_printf_float+0xa2>
 801bd94:	002b      	movs	r3, r5
 801bd96:	222d      	movs	r2, #45	@ 0x2d
 801bd98:	3343      	adds	r3, #67	@ 0x43
 801bd9a:	701a      	strb	r2, [r3, #0]
 801bd9c:	e78d      	b.n	801bcba <_printf_float+0xa2>
 801bd9e:	2c47      	cmp	r4, #71	@ 0x47
 801bda0:	d1b8      	bne.n	801bd14 <_printf_float+0xfc>
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d1b6      	bne.n	801bd14 <_printf_float+0xfc>
 801bda6:	3301      	adds	r3, #1
 801bda8:	e7b3      	b.n	801bd12 <_printf_float+0xfa>
 801bdaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdac:	0011      	movs	r1, r2
 801bdae:	2b65      	cmp	r3, #101	@ 0x65
 801bdb0:	d9d7      	bls.n	801bd62 <_printf_float+0x14a>
 801bdb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdb4:	2b66      	cmp	r3, #102	@ 0x66
 801bdb6:	d11a      	bne.n	801bdee <_printf_float+0x1d6>
 801bdb8:	686b      	ldr	r3, [r5, #4]
 801bdba:	2a00      	cmp	r2, #0
 801bdbc:	dd09      	ble.n	801bdd2 <_printf_float+0x1ba>
 801bdbe:	612a      	str	r2, [r5, #16]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d102      	bne.n	801bdca <_printf_float+0x1b2>
 801bdc4:	6829      	ldr	r1, [r5, #0]
 801bdc6:	07c9      	lsls	r1, r1, #31
 801bdc8:	d50b      	bpl.n	801bde2 <_printf_float+0x1ca>
 801bdca:	3301      	adds	r3, #1
 801bdcc:	189b      	adds	r3, r3, r2
 801bdce:	612b      	str	r3, [r5, #16]
 801bdd0:	e007      	b.n	801bde2 <_printf_float+0x1ca>
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d103      	bne.n	801bdde <_printf_float+0x1c6>
 801bdd6:	2201      	movs	r2, #1
 801bdd8:	6829      	ldr	r1, [r5, #0]
 801bdda:	4211      	tst	r1, r2
 801bddc:	d000      	beq.n	801bde0 <_printf_float+0x1c8>
 801bdde:	1c9a      	adds	r2, r3, #2
 801bde0:	612a      	str	r2, [r5, #16]
 801bde2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bde4:	2400      	movs	r4, #0
 801bde6:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bde8:	e7cd      	b.n	801bd86 <_printf_float+0x16e>
 801bdea:	2367      	movs	r3, #103	@ 0x67
 801bdec:	930c      	str	r3, [sp, #48]	@ 0x30
 801bdee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bdf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bdf2:	4299      	cmp	r1, r3
 801bdf4:	db06      	blt.n	801be04 <_printf_float+0x1ec>
 801bdf6:	682b      	ldr	r3, [r5, #0]
 801bdf8:	6129      	str	r1, [r5, #16]
 801bdfa:	07db      	lsls	r3, r3, #31
 801bdfc:	d5f1      	bpl.n	801bde2 <_printf_float+0x1ca>
 801bdfe:	3101      	adds	r1, #1
 801be00:	6129      	str	r1, [r5, #16]
 801be02:	e7ee      	b.n	801bde2 <_printf_float+0x1ca>
 801be04:	2201      	movs	r2, #1
 801be06:	2900      	cmp	r1, #0
 801be08:	dce0      	bgt.n	801bdcc <_printf_float+0x1b4>
 801be0a:	1892      	adds	r2, r2, r2
 801be0c:	1a52      	subs	r2, r2, r1
 801be0e:	e7dd      	b.n	801bdcc <_printf_float+0x1b4>
 801be10:	682a      	ldr	r2, [r5, #0]
 801be12:	0553      	lsls	r3, r2, #21
 801be14:	d408      	bmi.n	801be28 <_printf_float+0x210>
 801be16:	692b      	ldr	r3, [r5, #16]
 801be18:	003a      	movs	r2, r7
 801be1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801be20:	47a0      	blx	r4
 801be22:	3001      	adds	r0, #1
 801be24:	d129      	bne.n	801be7a <_printf_float+0x262>
 801be26:	e753      	b.n	801bcd0 <_printf_float+0xb8>
 801be28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be2a:	2b65      	cmp	r3, #101	@ 0x65
 801be2c:	d800      	bhi.n	801be30 <_printf_float+0x218>
 801be2e:	e0da      	b.n	801bfe6 <_printf_float+0x3ce>
 801be30:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801be32:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801be34:	2200      	movs	r2, #0
 801be36:	2300      	movs	r3, #0
 801be38:	f7e4 fb3a 	bl	80004b0 <__aeabi_dcmpeq>
 801be3c:	2800      	cmp	r0, #0
 801be3e:	d033      	beq.n	801bea8 <_printf_float+0x290>
 801be40:	2301      	movs	r3, #1
 801be42:	4a37      	ldr	r2, [pc, #220]	@ (801bf20 <_printf_float+0x308>)
 801be44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be48:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801be4a:	47a0      	blx	r4
 801be4c:	3001      	adds	r0, #1
 801be4e:	d100      	bne.n	801be52 <_printf_float+0x23a>
 801be50:	e73e      	b.n	801bcd0 <_printf_float+0xb8>
 801be52:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801be54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801be56:	42b3      	cmp	r3, r6
 801be58:	db02      	blt.n	801be60 <_printf_float+0x248>
 801be5a:	682b      	ldr	r3, [r5, #0]
 801be5c:	07db      	lsls	r3, r3, #31
 801be5e:	d50c      	bpl.n	801be7a <_printf_float+0x262>
 801be60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801be62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801be66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be6a:	47a0      	blx	r4
 801be6c:	2400      	movs	r4, #0
 801be6e:	3001      	adds	r0, #1
 801be70:	d100      	bne.n	801be74 <_printf_float+0x25c>
 801be72:	e72d      	b.n	801bcd0 <_printf_float+0xb8>
 801be74:	1e73      	subs	r3, r6, #1
 801be76:	42a3      	cmp	r3, r4
 801be78:	dc0a      	bgt.n	801be90 <_printf_float+0x278>
 801be7a:	682b      	ldr	r3, [r5, #0]
 801be7c:	079b      	lsls	r3, r3, #30
 801be7e:	d500      	bpl.n	801be82 <_printf_float+0x26a>
 801be80:	e105      	b.n	801c08e <_printf_float+0x476>
 801be82:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801be84:	68e8      	ldr	r0, [r5, #12]
 801be86:	4298      	cmp	r0, r3
 801be88:	db00      	blt.n	801be8c <_printf_float+0x274>
 801be8a:	e723      	b.n	801bcd4 <_printf_float+0xbc>
 801be8c:	0018      	movs	r0, r3
 801be8e:	e721      	b.n	801bcd4 <_printf_float+0xbc>
 801be90:	002a      	movs	r2, r5
 801be92:	2301      	movs	r3, #1
 801be94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801be9a:	321a      	adds	r2, #26
 801be9c:	47b8      	blx	r7
 801be9e:	3001      	adds	r0, #1
 801bea0:	d100      	bne.n	801bea4 <_printf_float+0x28c>
 801bea2:	e715      	b.n	801bcd0 <_printf_float+0xb8>
 801bea4:	3401      	adds	r4, #1
 801bea6:	e7e5      	b.n	801be74 <_printf_float+0x25c>
 801bea8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801beaa:	2b00      	cmp	r3, #0
 801beac:	dc3a      	bgt.n	801bf24 <_printf_float+0x30c>
 801beae:	2301      	movs	r3, #1
 801beb0:	4a1b      	ldr	r2, [pc, #108]	@ (801bf20 <_printf_float+0x308>)
 801beb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801beb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801beb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801beb8:	47a0      	blx	r4
 801beba:	3001      	adds	r0, #1
 801bebc:	d100      	bne.n	801bec0 <_printf_float+0x2a8>
 801bebe:	e707      	b.n	801bcd0 <_printf_float+0xb8>
 801bec0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bec2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bec4:	4333      	orrs	r3, r6
 801bec6:	d102      	bne.n	801bece <_printf_float+0x2b6>
 801bec8:	682b      	ldr	r3, [r5, #0]
 801beca:	07db      	lsls	r3, r3, #31
 801becc:	d5d5      	bpl.n	801be7a <_printf_float+0x262>
 801bece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bed0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bed2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bed4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bed6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bed8:	47a0      	blx	r4
 801beda:	2300      	movs	r3, #0
 801bedc:	3001      	adds	r0, #1
 801bede:	d100      	bne.n	801bee2 <_printf_float+0x2ca>
 801bee0:	e6f6      	b.n	801bcd0 <_printf_float+0xb8>
 801bee2:	930c      	str	r3, [sp, #48]	@ 0x30
 801bee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bee6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bee8:	425b      	negs	r3, r3
 801beea:	4293      	cmp	r3, r2
 801beec:	dc01      	bgt.n	801bef2 <_printf_float+0x2da>
 801beee:	0033      	movs	r3, r6
 801bef0:	e792      	b.n	801be18 <_printf_float+0x200>
 801bef2:	002a      	movs	r2, r5
 801bef4:	2301      	movs	r3, #1
 801bef6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bef8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801befa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801befc:	321a      	adds	r2, #26
 801befe:	47a0      	blx	r4
 801bf00:	3001      	adds	r0, #1
 801bf02:	d100      	bne.n	801bf06 <_printf_float+0x2ee>
 801bf04:	e6e4      	b.n	801bcd0 <_printf_float+0xb8>
 801bf06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf08:	3301      	adds	r3, #1
 801bf0a:	e7ea      	b.n	801bee2 <_printf_float+0x2ca>
 801bf0c:	7fefffff 	.word	0x7fefffff
 801bf10:	08021291 	.word	0x08021291
 801bf14:	08021295 	.word	0x08021295
 801bf18:	08021299 	.word	0x08021299
 801bf1c:	0802129d 	.word	0x0802129d
 801bf20:	080212a1 	.word	0x080212a1
 801bf24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bf26:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801bf28:	930c      	str	r3, [sp, #48]	@ 0x30
 801bf2a:	429e      	cmp	r6, r3
 801bf2c:	dd00      	ble.n	801bf30 <_printf_float+0x318>
 801bf2e:	001e      	movs	r6, r3
 801bf30:	2e00      	cmp	r6, #0
 801bf32:	dc31      	bgt.n	801bf98 <_printf_float+0x380>
 801bf34:	43f3      	mvns	r3, r6
 801bf36:	2400      	movs	r4, #0
 801bf38:	17db      	asrs	r3, r3, #31
 801bf3a:	4033      	ands	r3, r6
 801bf3c:	930e      	str	r3, [sp, #56]	@ 0x38
 801bf3e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801bf40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf42:	1af3      	subs	r3, r6, r3
 801bf44:	42a3      	cmp	r3, r4
 801bf46:	dc30      	bgt.n	801bfaa <_printf_float+0x392>
 801bf48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bf4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bf4c:	429a      	cmp	r2, r3
 801bf4e:	dc38      	bgt.n	801bfc2 <_printf_float+0x3aa>
 801bf50:	682b      	ldr	r3, [r5, #0]
 801bf52:	07db      	lsls	r3, r3, #31
 801bf54:	d435      	bmi.n	801bfc2 <_printf_float+0x3aa>
 801bf56:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bf58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bf5c:	1b9b      	subs	r3, r3, r6
 801bf5e:	1b14      	subs	r4, r2, r4
 801bf60:	429c      	cmp	r4, r3
 801bf62:	dd00      	ble.n	801bf66 <_printf_float+0x34e>
 801bf64:	001c      	movs	r4, r3
 801bf66:	2c00      	cmp	r4, #0
 801bf68:	dc34      	bgt.n	801bfd4 <_printf_float+0x3bc>
 801bf6a:	43e3      	mvns	r3, r4
 801bf6c:	2600      	movs	r6, #0
 801bf6e:	17db      	asrs	r3, r3, #31
 801bf70:	401c      	ands	r4, r3
 801bf72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bf74:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bf76:	1ad3      	subs	r3, r2, r3
 801bf78:	1b1b      	subs	r3, r3, r4
 801bf7a:	42b3      	cmp	r3, r6
 801bf7c:	dc00      	bgt.n	801bf80 <_printf_float+0x368>
 801bf7e:	e77c      	b.n	801be7a <_printf_float+0x262>
 801bf80:	002a      	movs	r2, r5
 801bf82:	2301      	movs	r3, #1
 801bf84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bf88:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bf8a:	321a      	adds	r2, #26
 801bf8c:	47b8      	blx	r7
 801bf8e:	3001      	adds	r0, #1
 801bf90:	d100      	bne.n	801bf94 <_printf_float+0x37c>
 801bf92:	e69d      	b.n	801bcd0 <_printf_float+0xb8>
 801bf94:	3601      	adds	r6, #1
 801bf96:	e7ec      	b.n	801bf72 <_printf_float+0x35a>
 801bf98:	0033      	movs	r3, r6
 801bf9a:	003a      	movs	r2, r7
 801bf9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bfa0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bfa2:	47a0      	blx	r4
 801bfa4:	3001      	adds	r0, #1
 801bfa6:	d1c5      	bne.n	801bf34 <_printf_float+0x31c>
 801bfa8:	e692      	b.n	801bcd0 <_printf_float+0xb8>
 801bfaa:	002a      	movs	r2, r5
 801bfac:	2301      	movs	r3, #1
 801bfae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bfb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bfb2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bfb4:	321a      	adds	r2, #26
 801bfb6:	47b0      	blx	r6
 801bfb8:	3001      	adds	r0, #1
 801bfba:	d100      	bne.n	801bfbe <_printf_float+0x3a6>
 801bfbc:	e688      	b.n	801bcd0 <_printf_float+0xb8>
 801bfbe:	3401      	adds	r4, #1
 801bfc0:	e7bd      	b.n	801bf3e <_printf_float+0x326>
 801bfc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bfc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bfc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bfc8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bfca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bfcc:	47a0      	blx	r4
 801bfce:	3001      	adds	r0, #1
 801bfd0:	d1c1      	bne.n	801bf56 <_printf_float+0x33e>
 801bfd2:	e67d      	b.n	801bcd0 <_printf_float+0xb8>
 801bfd4:	19ba      	adds	r2, r7, r6
 801bfd6:	0023      	movs	r3, r4
 801bfd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bfda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bfdc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bfde:	47b0      	blx	r6
 801bfe0:	3001      	adds	r0, #1
 801bfe2:	d1c2      	bne.n	801bf6a <_printf_float+0x352>
 801bfe4:	e674      	b.n	801bcd0 <_printf_float+0xb8>
 801bfe6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bfe8:	930c      	str	r3, [sp, #48]	@ 0x30
 801bfea:	2b01      	cmp	r3, #1
 801bfec:	dc02      	bgt.n	801bff4 <_printf_float+0x3dc>
 801bfee:	2301      	movs	r3, #1
 801bff0:	421a      	tst	r2, r3
 801bff2:	d039      	beq.n	801c068 <_printf_float+0x450>
 801bff4:	2301      	movs	r3, #1
 801bff6:	003a      	movs	r2, r7
 801bff8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bffc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bffe:	47b0      	blx	r6
 801c000:	3001      	adds	r0, #1
 801c002:	d100      	bne.n	801c006 <_printf_float+0x3ee>
 801c004:	e664      	b.n	801bcd0 <_printf_float+0xb8>
 801c006:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c008:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c00a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c00c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c00e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c010:	47b0      	blx	r6
 801c012:	3001      	adds	r0, #1
 801c014:	d100      	bne.n	801c018 <_printf_float+0x400>
 801c016:	e65b      	b.n	801bcd0 <_printf_float+0xb8>
 801c018:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801c01a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801c01c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c01e:	2200      	movs	r2, #0
 801c020:	3b01      	subs	r3, #1
 801c022:	930c      	str	r3, [sp, #48]	@ 0x30
 801c024:	2300      	movs	r3, #0
 801c026:	f7e4 fa43 	bl	80004b0 <__aeabi_dcmpeq>
 801c02a:	2800      	cmp	r0, #0
 801c02c:	d11a      	bne.n	801c064 <_printf_float+0x44c>
 801c02e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c030:	1c7a      	adds	r2, r7, #1
 801c032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c034:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c036:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c038:	47b0      	blx	r6
 801c03a:	3001      	adds	r0, #1
 801c03c:	d10e      	bne.n	801c05c <_printf_float+0x444>
 801c03e:	e647      	b.n	801bcd0 <_printf_float+0xb8>
 801c040:	002a      	movs	r2, r5
 801c042:	2301      	movs	r3, #1
 801c044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c048:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c04a:	321a      	adds	r2, #26
 801c04c:	47b8      	blx	r7
 801c04e:	3001      	adds	r0, #1
 801c050:	d100      	bne.n	801c054 <_printf_float+0x43c>
 801c052:	e63d      	b.n	801bcd0 <_printf_float+0xb8>
 801c054:	3601      	adds	r6, #1
 801c056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c058:	429e      	cmp	r6, r3
 801c05a:	dbf1      	blt.n	801c040 <_printf_float+0x428>
 801c05c:	002a      	movs	r2, r5
 801c05e:	0023      	movs	r3, r4
 801c060:	3250      	adds	r2, #80	@ 0x50
 801c062:	e6da      	b.n	801be1a <_printf_float+0x202>
 801c064:	2600      	movs	r6, #0
 801c066:	e7f6      	b.n	801c056 <_printf_float+0x43e>
 801c068:	003a      	movs	r2, r7
 801c06a:	e7e2      	b.n	801c032 <_printf_float+0x41a>
 801c06c:	002a      	movs	r2, r5
 801c06e:	2301      	movs	r3, #1
 801c070:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c074:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c076:	3219      	adds	r2, #25
 801c078:	47b0      	blx	r6
 801c07a:	3001      	adds	r0, #1
 801c07c:	d100      	bne.n	801c080 <_printf_float+0x468>
 801c07e:	e627      	b.n	801bcd0 <_printf_float+0xb8>
 801c080:	3401      	adds	r4, #1
 801c082:	68eb      	ldr	r3, [r5, #12]
 801c084:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c086:	1a9b      	subs	r3, r3, r2
 801c088:	42a3      	cmp	r3, r4
 801c08a:	dcef      	bgt.n	801c06c <_printf_float+0x454>
 801c08c:	e6f9      	b.n	801be82 <_printf_float+0x26a>
 801c08e:	2400      	movs	r4, #0
 801c090:	e7f7      	b.n	801c082 <_printf_float+0x46a>
 801c092:	46c0      	nop			@ (mov r8, r8)

0801c094 <_printf_common>:
 801c094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c096:	0016      	movs	r6, r2
 801c098:	9301      	str	r3, [sp, #4]
 801c09a:	688a      	ldr	r2, [r1, #8]
 801c09c:	690b      	ldr	r3, [r1, #16]
 801c09e:	000c      	movs	r4, r1
 801c0a0:	9000      	str	r0, [sp, #0]
 801c0a2:	4293      	cmp	r3, r2
 801c0a4:	da00      	bge.n	801c0a8 <_printf_common+0x14>
 801c0a6:	0013      	movs	r3, r2
 801c0a8:	0022      	movs	r2, r4
 801c0aa:	6033      	str	r3, [r6, #0]
 801c0ac:	3243      	adds	r2, #67	@ 0x43
 801c0ae:	7812      	ldrb	r2, [r2, #0]
 801c0b0:	2a00      	cmp	r2, #0
 801c0b2:	d001      	beq.n	801c0b8 <_printf_common+0x24>
 801c0b4:	3301      	adds	r3, #1
 801c0b6:	6033      	str	r3, [r6, #0]
 801c0b8:	6823      	ldr	r3, [r4, #0]
 801c0ba:	069b      	lsls	r3, r3, #26
 801c0bc:	d502      	bpl.n	801c0c4 <_printf_common+0x30>
 801c0be:	6833      	ldr	r3, [r6, #0]
 801c0c0:	3302      	adds	r3, #2
 801c0c2:	6033      	str	r3, [r6, #0]
 801c0c4:	6822      	ldr	r2, [r4, #0]
 801c0c6:	2306      	movs	r3, #6
 801c0c8:	0015      	movs	r5, r2
 801c0ca:	401d      	ands	r5, r3
 801c0cc:	421a      	tst	r2, r3
 801c0ce:	d027      	beq.n	801c120 <_printf_common+0x8c>
 801c0d0:	0023      	movs	r3, r4
 801c0d2:	3343      	adds	r3, #67	@ 0x43
 801c0d4:	781b      	ldrb	r3, [r3, #0]
 801c0d6:	1e5a      	subs	r2, r3, #1
 801c0d8:	4193      	sbcs	r3, r2
 801c0da:	6822      	ldr	r2, [r4, #0]
 801c0dc:	0692      	lsls	r2, r2, #26
 801c0de:	d430      	bmi.n	801c142 <_printf_common+0xae>
 801c0e0:	0022      	movs	r2, r4
 801c0e2:	9901      	ldr	r1, [sp, #4]
 801c0e4:	9800      	ldr	r0, [sp, #0]
 801c0e6:	9d08      	ldr	r5, [sp, #32]
 801c0e8:	3243      	adds	r2, #67	@ 0x43
 801c0ea:	47a8      	blx	r5
 801c0ec:	3001      	adds	r0, #1
 801c0ee:	d025      	beq.n	801c13c <_printf_common+0xa8>
 801c0f0:	2206      	movs	r2, #6
 801c0f2:	6823      	ldr	r3, [r4, #0]
 801c0f4:	2500      	movs	r5, #0
 801c0f6:	4013      	ands	r3, r2
 801c0f8:	2b04      	cmp	r3, #4
 801c0fa:	d105      	bne.n	801c108 <_printf_common+0x74>
 801c0fc:	6833      	ldr	r3, [r6, #0]
 801c0fe:	68e5      	ldr	r5, [r4, #12]
 801c100:	1aed      	subs	r5, r5, r3
 801c102:	43eb      	mvns	r3, r5
 801c104:	17db      	asrs	r3, r3, #31
 801c106:	401d      	ands	r5, r3
 801c108:	68a3      	ldr	r3, [r4, #8]
 801c10a:	6922      	ldr	r2, [r4, #16]
 801c10c:	4293      	cmp	r3, r2
 801c10e:	dd01      	ble.n	801c114 <_printf_common+0x80>
 801c110:	1a9b      	subs	r3, r3, r2
 801c112:	18ed      	adds	r5, r5, r3
 801c114:	2600      	movs	r6, #0
 801c116:	42b5      	cmp	r5, r6
 801c118:	d120      	bne.n	801c15c <_printf_common+0xc8>
 801c11a:	2000      	movs	r0, #0
 801c11c:	e010      	b.n	801c140 <_printf_common+0xac>
 801c11e:	3501      	adds	r5, #1
 801c120:	68e3      	ldr	r3, [r4, #12]
 801c122:	6832      	ldr	r2, [r6, #0]
 801c124:	1a9b      	subs	r3, r3, r2
 801c126:	42ab      	cmp	r3, r5
 801c128:	ddd2      	ble.n	801c0d0 <_printf_common+0x3c>
 801c12a:	0022      	movs	r2, r4
 801c12c:	2301      	movs	r3, #1
 801c12e:	9901      	ldr	r1, [sp, #4]
 801c130:	9800      	ldr	r0, [sp, #0]
 801c132:	9f08      	ldr	r7, [sp, #32]
 801c134:	3219      	adds	r2, #25
 801c136:	47b8      	blx	r7
 801c138:	3001      	adds	r0, #1
 801c13a:	d1f0      	bne.n	801c11e <_printf_common+0x8a>
 801c13c:	2001      	movs	r0, #1
 801c13e:	4240      	negs	r0, r0
 801c140:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c142:	2030      	movs	r0, #48	@ 0x30
 801c144:	18e1      	adds	r1, r4, r3
 801c146:	3143      	adds	r1, #67	@ 0x43
 801c148:	7008      	strb	r0, [r1, #0]
 801c14a:	0021      	movs	r1, r4
 801c14c:	1c5a      	adds	r2, r3, #1
 801c14e:	3145      	adds	r1, #69	@ 0x45
 801c150:	7809      	ldrb	r1, [r1, #0]
 801c152:	18a2      	adds	r2, r4, r2
 801c154:	3243      	adds	r2, #67	@ 0x43
 801c156:	3302      	adds	r3, #2
 801c158:	7011      	strb	r1, [r2, #0]
 801c15a:	e7c1      	b.n	801c0e0 <_printf_common+0x4c>
 801c15c:	0022      	movs	r2, r4
 801c15e:	2301      	movs	r3, #1
 801c160:	9901      	ldr	r1, [sp, #4]
 801c162:	9800      	ldr	r0, [sp, #0]
 801c164:	9f08      	ldr	r7, [sp, #32]
 801c166:	321a      	adds	r2, #26
 801c168:	47b8      	blx	r7
 801c16a:	3001      	adds	r0, #1
 801c16c:	d0e6      	beq.n	801c13c <_printf_common+0xa8>
 801c16e:	3601      	adds	r6, #1
 801c170:	e7d1      	b.n	801c116 <_printf_common+0x82>
	...

0801c174 <_printf_i>:
 801c174:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c176:	b08b      	sub	sp, #44	@ 0x2c
 801c178:	9206      	str	r2, [sp, #24]
 801c17a:	000a      	movs	r2, r1
 801c17c:	3243      	adds	r2, #67	@ 0x43
 801c17e:	9307      	str	r3, [sp, #28]
 801c180:	9005      	str	r0, [sp, #20]
 801c182:	9203      	str	r2, [sp, #12]
 801c184:	7e0a      	ldrb	r2, [r1, #24]
 801c186:	000c      	movs	r4, r1
 801c188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c18a:	2a78      	cmp	r2, #120	@ 0x78
 801c18c:	d809      	bhi.n	801c1a2 <_printf_i+0x2e>
 801c18e:	2a62      	cmp	r2, #98	@ 0x62
 801c190:	d80b      	bhi.n	801c1aa <_printf_i+0x36>
 801c192:	2a00      	cmp	r2, #0
 801c194:	d100      	bne.n	801c198 <_printf_i+0x24>
 801c196:	e0bc      	b.n	801c312 <_printf_i+0x19e>
 801c198:	497b      	ldr	r1, [pc, #492]	@ (801c388 <_printf_i+0x214>)
 801c19a:	9104      	str	r1, [sp, #16]
 801c19c:	2a58      	cmp	r2, #88	@ 0x58
 801c19e:	d100      	bne.n	801c1a2 <_printf_i+0x2e>
 801c1a0:	e090      	b.n	801c2c4 <_printf_i+0x150>
 801c1a2:	0025      	movs	r5, r4
 801c1a4:	3542      	adds	r5, #66	@ 0x42
 801c1a6:	702a      	strb	r2, [r5, #0]
 801c1a8:	e022      	b.n	801c1f0 <_printf_i+0x7c>
 801c1aa:	0010      	movs	r0, r2
 801c1ac:	3863      	subs	r0, #99	@ 0x63
 801c1ae:	2815      	cmp	r0, #21
 801c1b0:	d8f7      	bhi.n	801c1a2 <_printf_i+0x2e>
 801c1b2:	f7e3 ffed 	bl	8000190 <__gnu_thumb1_case_shi>
 801c1b6:	0016      	.short	0x0016
 801c1b8:	fff6001f 	.word	0xfff6001f
 801c1bc:	fff6fff6 	.word	0xfff6fff6
 801c1c0:	001ffff6 	.word	0x001ffff6
 801c1c4:	fff6fff6 	.word	0xfff6fff6
 801c1c8:	fff6fff6 	.word	0xfff6fff6
 801c1cc:	003600a1 	.word	0x003600a1
 801c1d0:	fff60080 	.word	0xfff60080
 801c1d4:	00b2fff6 	.word	0x00b2fff6
 801c1d8:	0036fff6 	.word	0x0036fff6
 801c1dc:	fff6fff6 	.word	0xfff6fff6
 801c1e0:	0084      	.short	0x0084
 801c1e2:	0025      	movs	r5, r4
 801c1e4:	681a      	ldr	r2, [r3, #0]
 801c1e6:	3542      	adds	r5, #66	@ 0x42
 801c1e8:	1d11      	adds	r1, r2, #4
 801c1ea:	6019      	str	r1, [r3, #0]
 801c1ec:	6813      	ldr	r3, [r2, #0]
 801c1ee:	702b      	strb	r3, [r5, #0]
 801c1f0:	2301      	movs	r3, #1
 801c1f2:	e0a0      	b.n	801c336 <_printf_i+0x1c2>
 801c1f4:	6818      	ldr	r0, [r3, #0]
 801c1f6:	6809      	ldr	r1, [r1, #0]
 801c1f8:	1d02      	adds	r2, r0, #4
 801c1fa:	060d      	lsls	r5, r1, #24
 801c1fc:	d50b      	bpl.n	801c216 <_printf_i+0xa2>
 801c1fe:	6806      	ldr	r6, [r0, #0]
 801c200:	601a      	str	r2, [r3, #0]
 801c202:	2e00      	cmp	r6, #0
 801c204:	da03      	bge.n	801c20e <_printf_i+0x9a>
 801c206:	232d      	movs	r3, #45	@ 0x2d
 801c208:	9a03      	ldr	r2, [sp, #12]
 801c20a:	4276      	negs	r6, r6
 801c20c:	7013      	strb	r3, [r2, #0]
 801c20e:	4b5e      	ldr	r3, [pc, #376]	@ (801c388 <_printf_i+0x214>)
 801c210:	270a      	movs	r7, #10
 801c212:	9304      	str	r3, [sp, #16]
 801c214:	e018      	b.n	801c248 <_printf_i+0xd4>
 801c216:	6806      	ldr	r6, [r0, #0]
 801c218:	601a      	str	r2, [r3, #0]
 801c21a:	0649      	lsls	r1, r1, #25
 801c21c:	d5f1      	bpl.n	801c202 <_printf_i+0x8e>
 801c21e:	b236      	sxth	r6, r6
 801c220:	e7ef      	b.n	801c202 <_printf_i+0x8e>
 801c222:	6808      	ldr	r0, [r1, #0]
 801c224:	6819      	ldr	r1, [r3, #0]
 801c226:	c940      	ldmia	r1!, {r6}
 801c228:	0605      	lsls	r5, r0, #24
 801c22a:	d402      	bmi.n	801c232 <_printf_i+0xbe>
 801c22c:	0640      	lsls	r0, r0, #25
 801c22e:	d500      	bpl.n	801c232 <_printf_i+0xbe>
 801c230:	b2b6      	uxth	r6, r6
 801c232:	6019      	str	r1, [r3, #0]
 801c234:	4b54      	ldr	r3, [pc, #336]	@ (801c388 <_printf_i+0x214>)
 801c236:	270a      	movs	r7, #10
 801c238:	9304      	str	r3, [sp, #16]
 801c23a:	2a6f      	cmp	r2, #111	@ 0x6f
 801c23c:	d100      	bne.n	801c240 <_printf_i+0xcc>
 801c23e:	3f02      	subs	r7, #2
 801c240:	0023      	movs	r3, r4
 801c242:	2200      	movs	r2, #0
 801c244:	3343      	adds	r3, #67	@ 0x43
 801c246:	701a      	strb	r2, [r3, #0]
 801c248:	6863      	ldr	r3, [r4, #4]
 801c24a:	60a3      	str	r3, [r4, #8]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	db03      	blt.n	801c258 <_printf_i+0xe4>
 801c250:	2104      	movs	r1, #4
 801c252:	6822      	ldr	r2, [r4, #0]
 801c254:	438a      	bics	r2, r1
 801c256:	6022      	str	r2, [r4, #0]
 801c258:	2e00      	cmp	r6, #0
 801c25a:	d102      	bne.n	801c262 <_printf_i+0xee>
 801c25c:	9d03      	ldr	r5, [sp, #12]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d00c      	beq.n	801c27c <_printf_i+0x108>
 801c262:	9d03      	ldr	r5, [sp, #12]
 801c264:	0030      	movs	r0, r6
 801c266:	0039      	movs	r1, r7
 801c268:	f7e4 f822 	bl	80002b0 <__aeabi_uidivmod>
 801c26c:	9b04      	ldr	r3, [sp, #16]
 801c26e:	3d01      	subs	r5, #1
 801c270:	5c5b      	ldrb	r3, [r3, r1]
 801c272:	702b      	strb	r3, [r5, #0]
 801c274:	0033      	movs	r3, r6
 801c276:	0006      	movs	r6, r0
 801c278:	429f      	cmp	r7, r3
 801c27a:	d9f3      	bls.n	801c264 <_printf_i+0xf0>
 801c27c:	2f08      	cmp	r7, #8
 801c27e:	d109      	bne.n	801c294 <_printf_i+0x120>
 801c280:	6823      	ldr	r3, [r4, #0]
 801c282:	07db      	lsls	r3, r3, #31
 801c284:	d506      	bpl.n	801c294 <_printf_i+0x120>
 801c286:	6862      	ldr	r2, [r4, #4]
 801c288:	6923      	ldr	r3, [r4, #16]
 801c28a:	429a      	cmp	r2, r3
 801c28c:	dc02      	bgt.n	801c294 <_printf_i+0x120>
 801c28e:	2330      	movs	r3, #48	@ 0x30
 801c290:	3d01      	subs	r5, #1
 801c292:	702b      	strb	r3, [r5, #0]
 801c294:	9b03      	ldr	r3, [sp, #12]
 801c296:	1b5b      	subs	r3, r3, r5
 801c298:	6123      	str	r3, [r4, #16]
 801c29a:	9b07      	ldr	r3, [sp, #28]
 801c29c:	0021      	movs	r1, r4
 801c29e:	9300      	str	r3, [sp, #0]
 801c2a0:	9805      	ldr	r0, [sp, #20]
 801c2a2:	9b06      	ldr	r3, [sp, #24]
 801c2a4:	aa09      	add	r2, sp, #36	@ 0x24
 801c2a6:	f7ff fef5 	bl	801c094 <_printf_common>
 801c2aa:	3001      	adds	r0, #1
 801c2ac:	d148      	bne.n	801c340 <_printf_i+0x1cc>
 801c2ae:	2001      	movs	r0, #1
 801c2b0:	4240      	negs	r0, r0
 801c2b2:	b00b      	add	sp, #44	@ 0x2c
 801c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2b6:	2220      	movs	r2, #32
 801c2b8:	6809      	ldr	r1, [r1, #0]
 801c2ba:	430a      	orrs	r2, r1
 801c2bc:	6022      	str	r2, [r4, #0]
 801c2be:	2278      	movs	r2, #120	@ 0x78
 801c2c0:	4932      	ldr	r1, [pc, #200]	@ (801c38c <_printf_i+0x218>)
 801c2c2:	9104      	str	r1, [sp, #16]
 801c2c4:	0021      	movs	r1, r4
 801c2c6:	3145      	adds	r1, #69	@ 0x45
 801c2c8:	700a      	strb	r2, [r1, #0]
 801c2ca:	6819      	ldr	r1, [r3, #0]
 801c2cc:	6822      	ldr	r2, [r4, #0]
 801c2ce:	c940      	ldmia	r1!, {r6}
 801c2d0:	0610      	lsls	r0, r2, #24
 801c2d2:	d402      	bmi.n	801c2da <_printf_i+0x166>
 801c2d4:	0650      	lsls	r0, r2, #25
 801c2d6:	d500      	bpl.n	801c2da <_printf_i+0x166>
 801c2d8:	b2b6      	uxth	r6, r6
 801c2da:	6019      	str	r1, [r3, #0]
 801c2dc:	07d3      	lsls	r3, r2, #31
 801c2de:	d502      	bpl.n	801c2e6 <_printf_i+0x172>
 801c2e0:	2320      	movs	r3, #32
 801c2e2:	4313      	orrs	r3, r2
 801c2e4:	6023      	str	r3, [r4, #0]
 801c2e6:	2e00      	cmp	r6, #0
 801c2e8:	d001      	beq.n	801c2ee <_printf_i+0x17a>
 801c2ea:	2710      	movs	r7, #16
 801c2ec:	e7a8      	b.n	801c240 <_printf_i+0xcc>
 801c2ee:	2220      	movs	r2, #32
 801c2f0:	6823      	ldr	r3, [r4, #0]
 801c2f2:	4393      	bics	r3, r2
 801c2f4:	6023      	str	r3, [r4, #0]
 801c2f6:	e7f8      	b.n	801c2ea <_printf_i+0x176>
 801c2f8:	681a      	ldr	r2, [r3, #0]
 801c2fa:	680d      	ldr	r5, [r1, #0]
 801c2fc:	1d10      	adds	r0, r2, #4
 801c2fe:	6949      	ldr	r1, [r1, #20]
 801c300:	6018      	str	r0, [r3, #0]
 801c302:	6813      	ldr	r3, [r2, #0]
 801c304:	062e      	lsls	r6, r5, #24
 801c306:	d501      	bpl.n	801c30c <_printf_i+0x198>
 801c308:	6019      	str	r1, [r3, #0]
 801c30a:	e002      	b.n	801c312 <_printf_i+0x19e>
 801c30c:	066d      	lsls	r5, r5, #25
 801c30e:	d5fb      	bpl.n	801c308 <_printf_i+0x194>
 801c310:	8019      	strh	r1, [r3, #0]
 801c312:	2300      	movs	r3, #0
 801c314:	9d03      	ldr	r5, [sp, #12]
 801c316:	6123      	str	r3, [r4, #16]
 801c318:	e7bf      	b.n	801c29a <_printf_i+0x126>
 801c31a:	681a      	ldr	r2, [r3, #0]
 801c31c:	1d11      	adds	r1, r2, #4
 801c31e:	6019      	str	r1, [r3, #0]
 801c320:	6815      	ldr	r5, [r2, #0]
 801c322:	2100      	movs	r1, #0
 801c324:	0028      	movs	r0, r5
 801c326:	6862      	ldr	r2, [r4, #4]
 801c328:	f000 fa7b 	bl	801c822 <memchr>
 801c32c:	2800      	cmp	r0, #0
 801c32e:	d001      	beq.n	801c334 <_printf_i+0x1c0>
 801c330:	1b40      	subs	r0, r0, r5
 801c332:	6060      	str	r0, [r4, #4]
 801c334:	6863      	ldr	r3, [r4, #4]
 801c336:	6123      	str	r3, [r4, #16]
 801c338:	2300      	movs	r3, #0
 801c33a:	9a03      	ldr	r2, [sp, #12]
 801c33c:	7013      	strb	r3, [r2, #0]
 801c33e:	e7ac      	b.n	801c29a <_printf_i+0x126>
 801c340:	002a      	movs	r2, r5
 801c342:	6923      	ldr	r3, [r4, #16]
 801c344:	9906      	ldr	r1, [sp, #24]
 801c346:	9805      	ldr	r0, [sp, #20]
 801c348:	9d07      	ldr	r5, [sp, #28]
 801c34a:	47a8      	blx	r5
 801c34c:	3001      	adds	r0, #1
 801c34e:	d0ae      	beq.n	801c2ae <_printf_i+0x13a>
 801c350:	6823      	ldr	r3, [r4, #0]
 801c352:	079b      	lsls	r3, r3, #30
 801c354:	d415      	bmi.n	801c382 <_printf_i+0x20e>
 801c356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c358:	68e0      	ldr	r0, [r4, #12]
 801c35a:	4298      	cmp	r0, r3
 801c35c:	daa9      	bge.n	801c2b2 <_printf_i+0x13e>
 801c35e:	0018      	movs	r0, r3
 801c360:	e7a7      	b.n	801c2b2 <_printf_i+0x13e>
 801c362:	0022      	movs	r2, r4
 801c364:	2301      	movs	r3, #1
 801c366:	9906      	ldr	r1, [sp, #24]
 801c368:	9805      	ldr	r0, [sp, #20]
 801c36a:	9e07      	ldr	r6, [sp, #28]
 801c36c:	3219      	adds	r2, #25
 801c36e:	47b0      	blx	r6
 801c370:	3001      	adds	r0, #1
 801c372:	d09c      	beq.n	801c2ae <_printf_i+0x13a>
 801c374:	3501      	adds	r5, #1
 801c376:	68e3      	ldr	r3, [r4, #12]
 801c378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c37a:	1a9b      	subs	r3, r3, r2
 801c37c:	42ab      	cmp	r3, r5
 801c37e:	dcf0      	bgt.n	801c362 <_printf_i+0x1ee>
 801c380:	e7e9      	b.n	801c356 <_printf_i+0x1e2>
 801c382:	2500      	movs	r5, #0
 801c384:	e7f7      	b.n	801c376 <_printf_i+0x202>
 801c386:	46c0      	nop			@ (mov r8, r8)
 801c388:	080212a3 	.word	0x080212a3
 801c38c:	080212b4 	.word	0x080212b4

0801c390 <std>:
 801c390:	2300      	movs	r3, #0
 801c392:	b510      	push	{r4, lr}
 801c394:	0004      	movs	r4, r0
 801c396:	6003      	str	r3, [r0, #0]
 801c398:	6043      	str	r3, [r0, #4]
 801c39a:	6083      	str	r3, [r0, #8]
 801c39c:	8181      	strh	r1, [r0, #12]
 801c39e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c3a0:	81c2      	strh	r2, [r0, #14]
 801c3a2:	6103      	str	r3, [r0, #16]
 801c3a4:	6143      	str	r3, [r0, #20]
 801c3a6:	6183      	str	r3, [r0, #24]
 801c3a8:	0019      	movs	r1, r3
 801c3aa:	2208      	movs	r2, #8
 801c3ac:	305c      	adds	r0, #92	@ 0x5c
 801c3ae:	f000 f967 	bl	801c680 <memset>
 801c3b2:	4b0b      	ldr	r3, [pc, #44]	@ (801c3e0 <std+0x50>)
 801c3b4:	6224      	str	r4, [r4, #32]
 801c3b6:	6263      	str	r3, [r4, #36]	@ 0x24
 801c3b8:	4b0a      	ldr	r3, [pc, #40]	@ (801c3e4 <std+0x54>)
 801c3ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c3bc:	4b0a      	ldr	r3, [pc, #40]	@ (801c3e8 <std+0x58>)
 801c3be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c3c0:	4b0a      	ldr	r3, [pc, #40]	@ (801c3ec <std+0x5c>)
 801c3c2:	6323      	str	r3, [r4, #48]	@ 0x30
 801c3c4:	4b0a      	ldr	r3, [pc, #40]	@ (801c3f0 <std+0x60>)
 801c3c6:	429c      	cmp	r4, r3
 801c3c8:	d005      	beq.n	801c3d6 <std+0x46>
 801c3ca:	4b0a      	ldr	r3, [pc, #40]	@ (801c3f4 <std+0x64>)
 801c3cc:	429c      	cmp	r4, r3
 801c3ce:	d002      	beq.n	801c3d6 <std+0x46>
 801c3d0:	4b09      	ldr	r3, [pc, #36]	@ (801c3f8 <std+0x68>)
 801c3d2:	429c      	cmp	r4, r3
 801c3d4:	d103      	bne.n	801c3de <std+0x4e>
 801c3d6:	0020      	movs	r0, r4
 801c3d8:	3058      	adds	r0, #88	@ 0x58
 801c3da:	f000 fa1f 	bl	801c81c <__retarget_lock_init_recursive>
 801c3de:	bd10      	pop	{r4, pc}
 801c3e0:	0801c579 	.word	0x0801c579
 801c3e4:	0801c5a1 	.word	0x0801c5a1
 801c3e8:	0801c5d9 	.word	0x0801c5d9
 801c3ec:	0801c605 	.word	0x0801c605
 801c3f0:	20003774 	.word	0x20003774
 801c3f4:	200037dc 	.word	0x200037dc
 801c3f8:	20003844 	.word	0x20003844

0801c3fc <stdio_exit_handler>:
 801c3fc:	b510      	push	{r4, lr}
 801c3fe:	4a03      	ldr	r2, [pc, #12]	@ (801c40c <stdio_exit_handler+0x10>)
 801c400:	4903      	ldr	r1, [pc, #12]	@ (801c410 <stdio_exit_handler+0x14>)
 801c402:	4804      	ldr	r0, [pc, #16]	@ (801c414 <stdio_exit_handler+0x18>)
 801c404:	f000 f86c 	bl	801c4e0 <_fwalk_sglue>
 801c408:	bd10      	pop	{r4, pc}
 801c40a:	46c0      	nop			@ (mov r8, r8)
 801c40c:	2000024c 	.word	0x2000024c
 801c410:	0801ee41 	.word	0x0801ee41
 801c414:	200003c8 	.word	0x200003c8

0801c418 <cleanup_stdio>:
 801c418:	6841      	ldr	r1, [r0, #4]
 801c41a:	4b0b      	ldr	r3, [pc, #44]	@ (801c448 <cleanup_stdio+0x30>)
 801c41c:	b510      	push	{r4, lr}
 801c41e:	0004      	movs	r4, r0
 801c420:	4299      	cmp	r1, r3
 801c422:	d001      	beq.n	801c428 <cleanup_stdio+0x10>
 801c424:	f002 fd0c 	bl	801ee40 <_fflush_r>
 801c428:	68a1      	ldr	r1, [r4, #8]
 801c42a:	4b08      	ldr	r3, [pc, #32]	@ (801c44c <cleanup_stdio+0x34>)
 801c42c:	4299      	cmp	r1, r3
 801c42e:	d002      	beq.n	801c436 <cleanup_stdio+0x1e>
 801c430:	0020      	movs	r0, r4
 801c432:	f002 fd05 	bl	801ee40 <_fflush_r>
 801c436:	68e1      	ldr	r1, [r4, #12]
 801c438:	4b05      	ldr	r3, [pc, #20]	@ (801c450 <cleanup_stdio+0x38>)
 801c43a:	4299      	cmp	r1, r3
 801c43c:	d002      	beq.n	801c444 <cleanup_stdio+0x2c>
 801c43e:	0020      	movs	r0, r4
 801c440:	f002 fcfe 	bl	801ee40 <_fflush_r>
 801c444:	bd10      	pop	{r4, pc}
 801c446:	46c0      	nop			@ (mov r8, r8)
 801c448:	20003774 	.word	0x20003774
 801c44c:	200037dc 	.word	0x200037dc
 801c450:	20003844 	.word	0x20003844

0801c454 <global_stdio_init.part.0>:
 801c454:	b510      	push	{r4, lr}
 801c456:	4b09      	ldr	r3, [pc, #36]	@ (801c47c <global_stdio_init.part.0+0x28>)
 801c458:	4a09      	ldr	r2, [pc, #36]	@ (801c480 <global_stdio_init.part.0+0x2c>)
 801c45a:	2104      	movs	r1, #4
 801c45c:	601a      	str	r2, [r3, #0]
 801c45e:	4809      	ldr	r0, [pc, #36]	@ (801c484 <global_stdio_init.part.0+0x30>)
 801c460:	2200      	movs	r2, #0
 801c462:	f7ff ff95 	bl	801c390 <std>
 801c466:	2201      	movs	r2, #1
 801c468:	2109      	movs	r1, #9
 801c46a:	4807      	ldr	r0, [pc, #28]	@ (801c488 <global_stdio_init.part.0+0x34>)
 801c46c:	f7ff ff90 	bl	801c390 <std>
 801c470:	2202      	movs	r2, #2
 801c472:	2112      	movs	r1, #18
 801c474:	4805      	ldr	r0, [pc, #20]	@ (801c48c <global_stdio_init.part.0+0x38>)
 801c476:	f7ff ff8b 	bl	801c390 <std>
 801c47a:	bd10      	pop	{r4, pc}
 801c47c:	200038ac 	.word	0x200038ac
 801c480:	0801c3fd 	.word	0x0801c3fd
 801c484:	20003774 	.word	0x20003774
 801c488:	200037dc 	.word	0x200037dc
 801c48c:	20003844 	.word	0x20003844

0801c490 <__sfp_lock_acquire>:
 801c490:	b510      	push	{r4, lr}
 801c492:	4802      	ldr	r0, [pc, #8]	@ (801c49c <__sfp_lock_acquire+0xc>)
 801c494:	f000 f9c3 	bl	801c81e <__retarget_lock_acquire_recursive>
 801c498:	bd10      	pop	{r4, pc}
 801c49a:	46c0      	nop			@ (mov r8, r8)
 801c49c:	200038b5 	.word	0x200038b5

0801c4a0 <__sfp_lock_release>:
 801c4a0:	b510      	push	{r4, lr}
 801c4a2:	4802      	ldr	r0, [pc, #8]	@ (801c4ac <__sfp_lock_release+0xc>)
 801c4a4:	f000 f9bc 	bl	801c820 <__retarget_lock_release_recursive>
 801c4a8:	bd10      	pop	{r4, pc}
 801c4aa:	46c0      	nop			@ (mov r8, r8)
 801c4ac:	200038b5 	.word	0x200038b5

0801c4b0 <__sinit>:
 801c4b0:	b510      	push	{r4, lr}
 801c4b2:	0004      	movs	r4, r0
 801c4b4:	f7ff ffec 	bl	801c490 <__sfp_lock_acquire>
 801c4b8:	6a23      	ldr	r3, [r4, #32]
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d002      	beq.n	801c4c4 <__sinit+0x14>
 801c4be:	f7ff ffef 	bl	801c4a0 <__sfp_lock_release>
 801c4c2:	bd10      	pop	{r4, pc}
 801c4c4:	4b04      	ldr	r3, [pc, #16]	@ (801c4d8 <__sinit+0x28>)
 801c4c6:	6223      	str	r3, [r4, #32]
 801c4c8:	4b04      	ldr	r3, [pc, #16]	@ (801c4dc <__sinit+0x2c>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d1f6      	bne.n	801c4be <__sinit+0xe>
 801c4d0:	f7ff ffc0 	bl	801c454 <global_stdio_init.part.0>
 801c4d4:	e7f3      	b.n	801c4be <__sinit+0xe>
 801c4d6:	46c0      	nop			@ (mov r8, r8)
 801c4d8:	0801c419 	.word	0x0801c419
 801c4dc:	200038ac 	.word	0x200038ac

0801c4e0 <_fwalk_sglue>:
 801c4e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c4e2:	0014      	movs	r4, r2
 801c4e4:	2600      	movs	r6, #0
 801c4e6:	9000      	str	r0, [sp, #0]
 801c4e8:	9101      	str	r1, [sp, #4]
 801c4ea:	68a5      	ldr	r5, [r4, #8]
 801c4ec:	6867      	ldr	r7, [r4, #4]
 801c4ee:	3f01      	subs	r7, #1
 801c4f0:	d504      	bpl.n	801c4fc <_fwalk_sglue+0x1c>
 801c4f2:	6824      	ldr	r4, [r4, #0]
 801c4f4:	2c00      	cmp	r4, #0
 801c4f6:	d1f8      	bne.n	801c4ea <_fwalk_sglue+0xa>
 801c4f8:	0030      	movs	r0, r6
 801c4fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c4fc:	89ab      	ldrh	r3, [r5, #12]
 801c4fe:	2b01      	cmp	r3, #1
 801c500:	d908      	bls.n	801c514 <_fwalk_sglue+0x34>
 801c502:	220e      	movs	r2, #14
 801c504:	5eab      	ldrsh	r3, [r5, r2]
 801c506:	3301      	adds	r3, #1
 801c508:	d004      	beq.n	801c514 <_fwalk_sglue+0x34>
 801c50a:	0029      	movs	r1, r5
 801c50c:	9800      	ldr	r0, [sp, #0]
 801c50e:	9b01      	ldr	r3, [sp, #4]
 801c510:	4798      	blx	r3
 801c512:	4306      	orrs	r6, r0
 801c514:	3568      	adds	r5, #104	@ 0x68
 801c516:	e7ea      	b.n	801c4ee <_fwalk_sglue+0xe>

0801c518 <iprintf>:
 801c518:	b40f      	push	{r0, r1, r2, r3}
 801c51a:	b507      	push	{r0, r1, r2, lr}
 801c51c:	4905      	ldr	r1, [pc, #20]	@ (801c534 <iprintf+0x1c>)
 801c51e:	ab04      	add	r3, sp, #16
 801c520:	6808      	ldr	r0, [r1, #0]
 801c522:	cb04      	ldmia	r3!, {r2}
 801c524:	6881      	ldr	r1, [r0, #8]
 801c526:	9301      	str	r3, [sp, #4]
 801c528:	f002 fae8 	bl	801eafc <_vfiprintf_r>
 801c52c:	b003      	add	sp, #12
 801c52e:	bc08      	pop	{r3}
 801c530:	b004      	add	sp, #16
 801c532:	4718      	bx	r3
 801c534:	200003c4 	.word	0x200003c4

0801c538 <siprintf>:
 801c538:	b40e      	push	{r1, r2, r3}
 801c53a:	b500      	push	{lr}
 801c53c:	490b      	ldr	r1, [pc, #44]	@ (801c56c <siprintf+0x34>)
 801c53e:	b09c      	sub	sp, #112	@ 0x70
 801c540:	ab1d      	add	r3, sp, #116	@ 0x74
 801c542:	9002      	str	r0, [sp, #8]
 801c544:	9006      	str	r0, [sp, #24]
 801c546:	9107      	str	r1, [sp, #28]
 801c548:	9104      	str	r1, [sp, #16]
 801c54a:	4809      	ldr	r0, [pc, #36]	@ (801c570 <siprintf+0x38>)
 801c54c:	4909      	ldr	r1, [pc, #36]	@ (801c574 <siprintf+0x3c>)
 801c54e:	cb04      	ldmia	r3!, {r2}
 801c550:	9105      	str	r1, [sp, #20]
 801c552:	6800      	ldr	r0, [r0, #0]
 801c554:	a902      	add	r1, sp, #8
 801c556:	9301      	str	r3, [sp, #4]
 801c558:	f002 f9aa 	bl	801e8b0 <_svfiprintf_r>
 801c55c:	2200      	movs	r2, #0
 801c55e:	9b02      	ldr	r3, [sp, #8]
 801c560:	701a      	strb	r2, [r3, #0]
 801c562:	b01c      	add	sp, #112	@ 0x70
 801c564:	bc08      	pop	{r3}
 801c566:	b003      	add	sp, #12
 801c568:	4718      	bx	r3
 801c56a:	46c0      	nop			@ (mov r8, r8)
 801c56c:	7fffffff 	.word	0x7fffffff
 801c570:	200003c4 	.word	0x200003c4
 801c574:	ffff0208 	.word	0xffff0208

0801c578 <__sread>:
 801c578:	b570      	push	{r4, r5, r6, lr}
 801c57a:	000c      	movs	r4, r1
 801c57c:	250e      	movs	r5, #14
 801c57e:	5f49      	ldrsh	r1, [r1, r5]
 801c580:	f000 f8fa 	bl	801c778 <_read_r>
 801c584:	2800      	cmp	r0, #0
 801c586:	db03      	blt.n	801c590 <__sread+0x18>
 801c588:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801c58a:	181b      	adds	r3, r3, r0
 801c58c:	6563      	str	r3, [r4, #84]	@ 0x54
 801c58e:	bd70      	pop	{r4, r5, r6, pc}
 801c590:	89a3      	ldrh	r3, [r4, #12]
 801c592:	4a02      	ldr	r2, [pc, #8]	@ (801c59c <__sread+0x24>)
 801c594:	4013      	ands	r3, r2
 801c596:	81a3      	strh	r3, [r4, #12]
 801c598:	e7f9      	b.n	801c58e <__sread+0x16>
 801c59a:	46c0      	nop			@ (mov r8, r8)
 801c59c:	ffffefff 	.word	0xffffefff

0801c5a0 <__swrite>:
 801c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5a2:	001f      	movs	r7, r3
 801c5a4:	898b      	ldrh	r3, [r1, #12]
 801c5a6:	0005      	movs	r5, r0
 801c5a8:	000c      	movs	r4, r1
 801c5aa:	0016      	movs	r6, r2
 801c5ac:	05db      	lsls	r3, r3, #23
 801c5ae:	d505      	bpl.n	801c5bc <__swrite+0x1c>
 801c5b0:	230e      	movs	r3, #14
 801c5b2:	5ec9      	ldrsh	r1, [r1, r3]
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	2302      	movs	r3, #2
 801c5b8:	f000 f8ca 	bl	801c750 <_lseek_r>
 801c5bc:	89a3      	ldrh	r3, [r4, #12]
 801c5be:	4a05      	ldr	r2, [pc, #20]	@ (801c5d4 <__swrite+0x34>)
 801c5c0:	0028      	movs	r0, r5
 801c5c2:	4013      	ands	r3, r2
 801c5c4:	81a3      	strh	r3, [r4, #12]
 801c5c6:	0032      	movs	r2, r6
 801c5c8:	230e      	movs	r3, #14
 801c5ca:	5ee1      	ldrsh	r1, [r4, r3]
 801c5cc:	003b      	movs	r3, r7
 801c5ce:	f000 f8e7 	bl	801c7a0 <_write_r>
 801c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5d4:	ffffefff 	.word	0xffffefff

0801c5d8 <__sseek>:
 801c5d8:	b570      	push	{r4, r5, r6, lr}
 801c5da:	000c      	movs	r4, r1
 801c5dc:	250e      	movs	r5, #14
 801c5de:	5f49      	ldrsh	r1, [r1, r5]
 801c5e0:	f000 f8b6 	bl	801c750 <_lseek_r>
 801c5e4:	89a3      	ldrh	r3, [r4, #12]
 801c5e6:	1c42      	adds	r2, r0, #1
 801c5e8:	d103      	bne.n	801c5f2 <__sseek+0x1a>
 801c5ea:	4a05      	ldr	r2, [pc, #20]	@ (801c600 <__sseek+0x28>)
 801c5ec:	4013      	ands	r3, r2
 801c5ee:	81a3      	strh	r3, [r4, #12]
 801c5f0:	bd70      	pop	{r4, r5, r6, pc}
 801c5f2:	2280      	movs	r2, #128	@ 0x80
 801c5f4:	0152      	lsls	r2, r2, #5
 801c5f6:	4313      	orrs	r3, r2
 801c5f8:	81a3      	strh	r3, [r4, #12]
 801c5fa:	6560      	str	r0, [r4, #84]	@ 0x54
 801c5fc:	e7f8      	b.n	801c5f0 <__sseek+0x18>
 801c5fe:	46c0      	nop			@ (mov r8, r8)
 801c600:	ffffefff 	.word	0xffffefff

0801c604 <__sclose>:
 801c604:	b510      	push	{r4, lr}
 801c606:	230e      	movs	r3, #14
 801c608:	5ec9      	ldrsh	r1, [r1, r3]
 801c60a:	f000 f88f 	bl	801c72c <_close_r>
 801c60e:	bd10      	pop	{r4, pc}

0801c610 <_vsniprintf_r>:
 801c610:	b530      	push	{r4, r5, lr}
 801c612:	0014      	movs	r4, r2
 801c614:	0005      	movs	r5, r0
 801c616:	001a      	movs	r2, r3
 801c618:	b09b      	sub	sp, #108	@ 0x6c
 801c61a:	2c00      	cmp	r4, #0
 801c61c:	da05      	bge.n	801c62a <_vsniprintf_r+0x1a>
 801c61e:	238b      	movs	r3, #139	@ 0x8b
 801c620:	6003      	str	r3, [r0, #0]
 801c622:	2001      	movs	r0, #1
 801c624:	4240      	negs	r0, r0
 801c626:	b01b      	add	sp, #108	@ 0x6c
 801c628:	bd30      	pop	{r4, r5, pc}
 801c62a:	2382      	movs	r3, #130	@ 0x82
 801c62c:	4668      	mov	r0, sp
 801c62e:	009b      	lsls	r3, r3, #2
 801c630:	8183      	strh	r3, [r0, #12]
 801c632:	2300      	movs	r3, #0
 801c634:	9100      	str	r1, [sp, #0]
 801c636:	9104      	str	r1, [sp, #16]
 801c638:	429c      	cmp	r4, r3
 801c63a:	d000      	beq.n	801c63e <_vsniprintf_r+0x2e>
 801c63c:	1e63      	subs	r3, r4, #1
 801c63e:	9302      	str	r3, [sp, #8]
 801c640:	9305      	str	r3, [sp, #20]
 801c642:	2301      	movs	r3, #1
 801c644:	4669      	mov	r1, sp
 801c646:	425b      	negs	r3, r3
 801c648:	81cb      	strh	r3, [r1, #14]
 801c64a:	0028      	movs	r0, r5
 801c64c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c64e:	f002 f92f 	bl	801e8b0 <_svfiprintf_r>
 801c652:	1c43      	adds	r3, r0, #1
 801c654:	da01      	bge.n	801c65a <_vsniprintf_r+0x4a>
 801c656:	238b      	movs	r3, #139	@ 0x8b
 801c658:	602b      	str	r3, [r5, #0]
 801c65a:	2c00      	cmp	r4, #0
 801c65c:	d0e3      	beq.n	801c626 <_vsniprintf_r+0x16>
 801c65e:	2200      	movs	r2, #0
 801c660:	9b00      	ldr	r3, [sp, #0]
 801c662:	701a      	strb	r2, [r3, #0]
 801c664:	e7df      	b.n	801c626 <_vsniprintf_r+0x16>
	...

0801c668 <vsniprintf>:
 801c668:	b513      	push	{r0, r1, r4, lr}
 801c66a:	4c04      	ldr	r4, [pc, #16]	@ (801c67c <vsniprintf+0x14>)
 801c66c:	9300      	str	r3, [sp, #0]
 801c66e:	0013      	movs	r3, r2
 801c670:	000a      	movs	r2, r1
 801c672:	0001      	movs	r1, r0
 801c674:	6820      	ldr	r0, [r4, #0]
 801c676:	f7ff ffcb 	bl	801c610 <_vsniprintf_r>
 801c67a:	bd16      	pop	{r1, r2, r4, pc}
 801c67c:	200003c4 	.word	0x200003c4

0801c680 <memset>:
 801c680:	0003      	movs	r3, r0
 801c682:	1882      	adds	r2, r0, r2
 801c684:	4293      	cmp	r3, r2
 801c686:	d100      	bne.n	801c68a <memset+0xa>
 801c688:	4770      	bx	lr
 801c68a:	7019      	strb	r1, [r3, #0]
 801c68c:	3301      	adds	r3, #1
 801c68e:	e7f9      	b.n	801c684 <memset+0x4>

0801c690 <strchr>:
 801c690:	b2c9      	uxtb	r1, r1
 801c692:	7803      	ldrb	r3, [r0, #0]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d004      	beq.n	801c6a2 <strchr+0x12>
 801c698:	428b      	cmp	r3, r1
 801c69a:	d100      	bne.n	801c69e <strchr+0xe>
 801c69c:	4770      	bx	lr
 801c69e:	3001      	adds	r0, #1
 801c6a0:	e7f7      	b.n	801c692 <strchr+0x2>
 801c6a2:	424b      	negs	r3, r1
 801c6a4:	4159      	adcs	r1, r3
 801c6a6:	4249      	negs	r1, r1
 801c6a8:	4008      	ands	r0, r1
 801c6aa:	e7f7      	b.n	801c69c <strchr+0xc>

0801c6ac <strncmp>:
 801c6ac:	b530      	push	{r4, r5, lr}
 801c6ae:	0005      	movs	r5, r0
 801c6b0:	1e10      	subs	r0, r2, #0
 801c6b2:	d00b      	beq.n	801c6cc <strncmp+0x20>
 801c6b4:	2400      	movs	r4, #0
 801c6b6:	3a01      	subs	r2, #1
 801c6b8:	5d2b      	ldrb	r3, [r5, r4]
 801c6ba:	5d08      	ldrb	r0, [r1, r4]
 801c6bc:	4283      	cmp	r3, r0
 801c6be:	d104      	bne.n	801c6ca <strncmp+0x1e>
 801c6c0:	42a2      	cmp	r2, r4
 801c6c2:	d002      	beq.n	801c6ca <strncmp+0x1e>
 801c6c4:	3401      	adds	r4, #1
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d1f6      	bne.n	801c6b8 <strncmp+0xc>
 801c6ca:	1a18      	subs	r0, r3, r0
 801c6cc:	bd30      	pop	{r4, r5, pc}

0801c6ce <strncpy>:
 801c6ce:	0003      	movs	r3, r0
 801c6d0:	b530      	push	{r4, r5, lr}
 801c6d2:	001d      	movs	r5, r3
 801c6d4:	2a00      	cmp	r2, #0
 801c6d6:	d006      	beq.n	801c6e6 <strncpy+0x18>
 801c6d8:	780c      	ldrb	r4, [r1, #0]
 801c6da:	3a01      	subs	r2, #1
 801c6dc:	3301      	adds	r3, #1
 801c6de:	702c      	strb	r4, [r5, #0]
 801c6e0:	3101      	adds	r1, #1
 801c6e2:	2c00      	cmp	r4, #0
 801c6e4:	d1f5      	bne.n	801c6d2 <strncpy+0x4>
 801c6e6:	2100      	movs	r1, #0
 801c6e8:	189a      	adds	r2, r3, r2
 801c6ea:	4293      	cmp	r3, r2
 801c6ec:	d100      	bne.n	801c6f0 <strncpy+0x22>
 801c6ee:	bd30      	pop	{r4, r5, pc}
 801c6f0:	7019      	strb	r1, [r3, #0]
 801c6f2:	3301      	adds	r3, #1
 801c6f4:	e7f9      	b.n	801c6ea <strncpy+0x1c>

0801c6f6 <strstr>:
 801c6f6:	780a      	ldrb	r2, [r1, #0]
 801c6f8:	b530      	push	{r4, r5, lr}
 801c6fa:	2a00      	cmp	r2, #0
 801c6fc:	d10c      	bne.n	801c718 <strstr+0x22>
 801c6fe:	bd30      	pop	{r4, r5, pc}
 801c700:	429a      	cmp	r2, r3
 801c702:	d108      	bne.n	801c716 <strstr+0x20>
 801c704:	2301      	movs	r3, #1
 801c706:	5ccc      	ldrb	r4, [r1, r3]
 801c708:	2c00      	cmp	r4, #0
 801c70a:	d0f8      	beq.n	801c6fe <strstr+0x8>
 801c70c:	5cc5      	ldrb	r5, [r0, r3]
 801c70e:	42a5      	cmp	r5, r4
 801c710:	d101      	bne.n	801c716 <strstr+0x20>
 801c712:	3301      	adds	r3, #1
 801c714:	e7f7      	b.n	801c706 <strstr+0x10>
 801c716:	3001      	adds	r0, #1
 801c718:	7803      	ldrb	r3, [r0, #0]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d1f0      	bne.n	801c700 <strstr+0xa>
 801c71e:	0018      	movs	r0, r3
 801c720:	e7ed      	b.n	801c6fe <strstr+0x8>
	...

0801c724 <_localeconv_r>:
 801c724:	4800      	ldr	r0, [pc, #0]	@ (801c728 <_localeconv_r+0x4>)
 801c726:	4770      	bx	lr
 801c728:	20000348 	.word	0x20000348

0801c72c <_close_r>:
 801c72c:	2300      	movs	r3, #0
 801c72e:	b570      	push	{r4, r5, r6, lr}
 801c730:	4d06      	ldr	r5, [pc, #24]	@ (801c74c <_close_r+0x20>)
 801c732:	0004      	movs	r4, r0
 801c734:	0008      	movs	r0, r1
 801c736:	602b      	str	r3, [r5, #0]
 801c738:	f7ee fc72 	bl	800b020 <_close>
 801c73c:	1c43      	adds	r3, r0, #1
 801c73e:	d103      	bne.n	801c748 <_close_r+0x1c>
 801c740:	682b      	ldr	r3, [r5, #0]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d000      	beq.n	801c748 <_close_r+0x1c>
 801c746:	6023      	str	r3, [r4, #0]
 801c748:	bd70      	pop	{r4, r5, r6, pc}
 801c74a:	46c0      	nop			@ (mov r8, r8)
 801c74c:	200038b0 	.word	0x200038b0

0801c750 <_lseek_r>:
 801c750:	b570      	push	{r4, r5, r6, lr}
 801c752:	0004      	movs	r4, r0
 801c754:	0008      	movs	r0, r1
 801c756:	0011      	movs	r1, r2
 801c758:	001a      	movs	r2, r3
 801c75a:	2300      	movs	r3, #0
 801c75c:	4d05      	ldr	r5, [pc, #20]	@ (801c774 <_lseek_r+0x24>)
 801c75e:	602b      	str	r3, [r5, #0]
 801c760:	f7ee fc7f 	bl	800b062 <_lseek>
 801c764:	1c43      	adds	r3, r0, #1
 801c766:	d103      	bne.n	801c770 <_lseek_r+0x20>
 801c768:	682b      	ldr	r3, [r5, #0]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d000      	beq.n	801c770 <_lseek_r+0x20>
 801c76e:	6023      	str	r3, [r4, #0]
 801c770:	bd70      	pop	{r4, r5, r6, pc}
 801c772:	46c0      	nop			@ (mov r8, r8)
 801c774:	200038b0 	.word	0x200038b0

0801c778 <_read_r>:
 801c778:	b570      	push	{r4, r5, r6, lr}
 801c77a:	0004      	movs	r4, r0
 801c77c:	0008      	movs	r0, r1
 801c77e:	0011      	movs	r1, r2
 801c780:	001a      	movs	r2, r3
 801c782:	2300      	movs	r3, #0
 801c784:	4d05      	ldr	r5, [pc, #20]	@ (801c79c <_read_r+0x24>)
 801c786:	602b      	str	r3, [r5, #0]
 801c788:	f7ee fc2d 	bl	800afe6 <_read>
 801c78c:	1c43      	adds	r3, r0, #1
 801c78e:	d103      	bne.n	801c798 <_read_r+0x20>
 801c790:	682b      	ldr	r3, [r5, #0]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d000      	beq.n	801c798 <_read_r+0x20>
 801c796:	6023      	str	r3, [r4, #0]
 801c798:	bd70      	pop	{r4, r5, r6, pc}
 801c79a:	46c0      	nop			@ (mov r8, r8)
 801c79c:	200038b0 	.word	0x200038b0

0801c7a0 <_write_r>:
 801c7a0:	b570      	push	{r4, r5, r6, lr}
 801c7a2:	0004      	movs	r4, r0
 801c7a4:	0008      	movs	r0, r1
 801c7a6:	0011      	movs	r1, r2
 801c7a8:	001a      	movs	r2, r3
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	4d05      	ldr	r5, [pc, #20]	@ (801c7c4 <_write_r+0x24>)
 801c7ae:	602b      	str	r3, [r5, #0]
 801c7b0:	f7ef f8ee 	bl	800b990 <_write>
 801c7b4:	1c43      	adds	r3, r0, #1
 801c7b6:	d103      	bne.n	801c7c0 <_write_r+0x20>
 801c7b8:	682b      	ldr	r3, [r5, #0]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d000      	beq.n	801c7c0 <_write_r+0x20>
 801c7be:	6023      	str	r3, [r4, #0]
 801c7c0:	bd70      	pop	{r4, r5, r6, pc}
 801c7c2:	46c0      	nop			@ (mov r8, r8)
 801c7c4:	200038b0 	.word	0x200038b0

0801c7c8 <__errno>:
 801c7c8:	4b01      	ldr	r3, [pc, #4]	@ (801c7d0 <__errno+0x8>)
 801c7ca:	6818      	ldr	r0, [r3, #0]
 801c7cc:	4770      	bx	lr
 801c7ce:	46c0      	nop			@ (mov r8, r8)
 801c7d0:	200003c4 	.word	0x200003c4

0801c7d4 <__libc_init_array>:
 801c7d4:	b570      	push	{r4, r5, r6, lr}
 801c7d6:	2600      	movs	r6, #0
 801c7d8:	4c0c      	ldr	r4, [pc, #48]	@ (801c80c <__libc_init_array+0x38>)
 801c7da:	4d0d      	ldr	r5, [pc, #52]	@ (801c810 <__libc_init_array+0x3c>)
 801c7dc:	1b64      	subs	r4, r4, r5
 801c7de:	10a4      	asrs	r4, r4, #2
 801c7e0:	42a6      	cmp	r6, r4
 801c7e2:	d109      	bne.n	801c7f8 <__libc_init_array+0x24>
 801c7e4:	2600      	movs	r6, #0
 801c7e6:	f002 ff8b 	bl	801f700 <_init>
 801c7ea:	4c0a      	ldr	r4, [pc, #40]	@ (801c814 <__libc_init_array+0x40>)
 801c7ec:	4d0a      	ldr	r5, [pc, #40]	@ (801c818 <__libc_init_array+0x44>)
 801c7ee:	1b64      	subs	r4, r4, r5
 801c7f0:	10a4      	asrs	r4, r4, #2
 801c7f2:	42a6      	cmp	r6, r4
 801c7f4:	d105      	bne.n	801c802 <__libc_init_array+0x2e>
 801c7f6:	bd70      	pop	{r4, r5, r6, pc}
 801c7f8:	00b3      	lsls	r3, r6, #2
 801c7fa:	58eb      	ldr	r3, [r5, r3]
 801c7fc:	4798      	blx	r3
 801c7fe:	3601      	adds	r6, #1
 801c800:	e7ee      	b.n	801c7e0 <__libc_init_array+0xc>
 801c802:	00b3      	lsls	r3, r6, #2
 801c804:	58eb      	ldr	r3, [r5, r3]
 801c806:	4798      	blx	r3
 801c808:	3601      	adds	r6, #1
 801c80a:	e7f2      	b.n	801c7f2 <__libc_init_array+0x1e>
 801c80c:	08021580 	.word	0x08021580
 801c810:	08021580 	.word	0x08021580
 801c814:	08021584 	.word	0x08021584
 801c818:	08021580 	.word	0x08021580

0801c81c <__retarget_lock_init_recursive>:
 801c81c:	4770      	bx	lr

0801c81e <__retarget_lock_acquire_recursive>:
 801c81e:	4770      	bx	lr

0801c820 <__retarget_lock_release_recursive>:
 801c820:	4770      	bx	lr

0801c822 <memchr>:
 801c822:	b2c9      	uxtb	r1, r1
 801c824:	1882      	adds	r2, r0, r2
 801c826:	4290      	cmp	r0, r2
 801c828:	d101      	bne.n	801c82e <memchr+0xc>
 801c82a:	2000      	movs	r0, #0
 801c82c:	4770      	bx	lr
 801c82e:	7803      	ldrb	r3, [r0, #0]
 801c830:	428b      	cmp	r3, r1
 801c832:	d0fb      	beq.n	801c82c <memchr+0xa>
 801c834:	3001      	adds	r0, #1
 801c836:	e7f6      	b.n	801c826 <memchr+0x4>

0801c838 <memcpy>:
 801c838:	2300      	movs	r3, #0
 801c83a:	b510      	push	{r4, lr}
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d100      	bne.n	801c842 <memcpy+0xa>
 801c840:	bd10      	pop	{r4, pc}
 801c842:	5ccc      	ldrb	r4, [r1, r3]
 801c844:	54c4      	strb	r4, [r0, r3]
 801c846:	3301      	adds	r3, #1
 801c848:	e7f8      	b.n	801c83c <memcpy+0x4>
	...

0801c84c <nan>:
 801c84c:	2000      	movs	r0, #0
 801c84e:	4901      	ldr	r1, [pc, #4]	@ (801c854 <nan+0x8>)
 801c850:	4770      	bx	lr
 801c852:	46c0      	nop			@ (mov r8, r8)
 801c854:	7ff80000 	.word	0x7ff80000

0801c858 <quorem>:
 801c858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c85a:	6902      	ldr	r2, [r0, #16]
 801c85c:	690f      	ldr	r7, [r1, #16]
 801c85e:	b087      	sub	sp, #28
 801c860:	0006      	movs	r6, r0
 801c862:	000b      	movs	r3, r1
 801c864:	2000      	movs	r0, #0
 801c866:	9102      	str	r1, [sp, #8]
 801c868:	42ba      	cmp	r2, r7
 801c86a:	db6d      	blt.n	801c948 <quorem+0xf0>
 801c86c:	3f01      	subs	r7, #1
 801c86e:	00bc      	lsls	r4, r7, #2
 801c870:	3314      	adds	r3, #20
 801c872:	9305      	str	r3, [sp, #20]
 801c874:	191b      	adds	r3, r3, r4
 801c876:	9303      	str	r3, [sp, #12]
 801c878:	0033      	movs	r3, r6
 801c87a:	3314      	adds	r3, #20
 801c87c:	191c      	adds	r4, r3, r4
 801c87e:	9301      	str	r3, [sp, #4]
 801c880:	6823      	ldr	r3, [r4, #0]
 801c882:	9304      	str	r3, [sp, #16]
 801c884:	9b03      	ldr	r3, [sp, #12]
 801c886:	9804      	ldr	r0, [sp, #16]
 801c888:	681d      	ldr	r5, [r3, #0]
 801c88a:	3501      	adds	r5, #1
 801c88c:	0029      	movs	r1, r5
 801c88e:	f7e3 fc89 	bl	80001a4 <__udivsi3>
 801c892:	9b04      	ldr	r3, [sp, #16]
 801c894:	9000      	str	r0, [sp, #0]
 801c896:	42ab      	cmp	r3, r5
 801c898:	d32b      	bcc.n	801c8f2 <quorem+0x9a>
 801c89a:	9b05      	ldr	r3, [sp, #20]
 801c89c:	9d01      	ldr	r5, [sp, #4]
 801c89e:	469c      	mov	ip, r3
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	9305      	str	r3, [sp, #20]
 801c8a4:	9304      	str	r3, [sp, #16]
 801c8a6:	4662      	mov	r2, ip
 801c8a8:	ca08      	ldmia	r2!, {r3}
 801c8aa:	6828      	ldr	r0, [r5, #0]
 801c8ac:	4694      	mov	ip, r2
 801c8ae:	9a00      	ldr	r2, [sp, #0]
 801c8b0:	b299      	uxth	r1, r3
 801c8b2:	4351      	muls	r1, r2
 801c8b4:	9a05      	ldr	r2, [sp, #20]
 801c8b6:	0c1b      	lsrs	r3, r3, #16
 801c8b8:	1889      	adds	r1, r1, r2
 801c8ba:	9a00      	ldr	r2, [sp, #0]
 801c8bc:	4353      	muls	r3, r2
 801c8be:	0c0a      	lsrs	r2, r1, #16
 801c8c0:	189b      	adds	r3, r3, r2
 801c8c2:	0c1a      	lsrs	r2, r3, #16
 801c8c4:	b289      	uxth	r1, r1
 801c8c6:	9205      	str	r2, [sp, #20]
 801c8c8:	b282      	uxth	r2, r0
 801c8ca:	1a52      	subs	r2, r2, r1
 801c8cc:	9904      	ldr	r1, [sp, #16]
 801c8ce:	0c00      	lsrs	r0, r0, #16
 801c8d0:	1852      	adds	r2, r2, r1
 801c8d2:	b29b      	uxth	r3, r3
 801c8d4:	1411      	asrs	r1, r2, #16
 801c8d6:	1ac3      	subs	r3, r0, r3
 801c8d8:	185b      	adds	r3, r3, r1
 801c8da:	1419      	asrs	r1, r3, #16
 801c8dc:	b292      	uxth	r2, r2
 801c8de:	041b      	lsls	r3, r3, #16
 801c8e0:	431a      	orrs	r2, r3
 801c8e2:	9b03      	ldr	r3, [sp, #12]
 801c8e4:	9104      	str	r1, [sp, #16]
 801c8e6:	c504      	stmia	r5!, {r2}
 801c8e8:	4563      	cmp	r3, ip
 801c8ea:	d2dc      	bcs.n	801c8a6 <quorem+0x4e>
 801c8ec:	6823      	ldr	r3, [r4, #0]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d030      	beq.n	801c954 <quorem+0xfc>
 801c8f2:	0030      	movs	r0, r6
 801c8f4:	9902      	ldr	r1, [sp, #8]
 801c8f6:	f001 fd7d 	bl	801e3f4 <__mcmp>
 801c8fa:	2800      	cmp	r0, #0
 801c8fc:	db23      	blt.n	801c946 <quorem+0xee>
 801c8fe:	0034      	movs	r4, r6
 801c900:	2500      	movs	r5, #0
 801c902:	9902      	ldr	r1, [sp, #8]
 801c904:	3414      	adds	r4, #20
 801c906:	3114      	adds	r1, #20
 801c908:	6823      	ldr	r3, [r4, #0]
 801c90a:	c901      	ldmia	r1!, {r0}
 801c90c:	9302      	str	r3, [sp, #8]
 801c90e:	466b      	mov	r3, sp
 801c910:	891b      	ldrh	r3, [r3, #8]
 801c912:	b282      	uxth	r2, r0
 801c914:	1a9a      	subs	r2, r3, r2
 801c916:	9b02      	ldr	r3, [sp, #8]
 801c918:	1952      	adds	r2, r2, r5
 801c91a:	0c00      	lsrs	r0, r0, #16
 801c91c:	0c1b      	lsrs	r3, r3, #16
 801c91e:	1a1b      	subs	r3, r3, r0
 801c920:	1410      	asrs	r0, r2, #16
 801c922:	181b      	adds	r3, r3, r0
 801c924:	141d      	asrs	r5, r3, #16
 801c926:	b292      	uxth	r2, r2
 801c928:	041b      	lsls	r3, r3, #16
 801c92a:	431a      	orrs	r2, r3
 801c92c:	9b03      	ldr	r3, [sp, #12]
 801c92e:	c404      	stmia	r4!, {r2}
 801c930:	428b      	cmp	r3, r1
 801c932:	d2e9      	bcs.n	801c908 <quorem+0xb0>
 801c934:	9a01      	ldr	r2, [sp, #4]
 801c936:	00bb      	lsls	r3, r7, #2
 801c938:	18d3      	adds	r3, r2, r3
 801c93a:	681a      	ldr	r2, [r3, #0]
 801c93c:	2a00      	cmp	r2, #0
 801c93e:	d013      	beq.n	801c968 <quorem+0x110>
 801c940:	9b00      	ldr	r3, [sp, #0]
 801c942:	3301      	adds	r3, #1
 801c944:	9300      	str	r3, [sp, #0]
 801c946:	9800      	ldr	r0, [sp, #0]
 801c948:	b007      	add	sp, #28
 801c94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c94c:	6823      	ldr	r3, [r4, #0]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d104      	bne.n	801c95c <quorem+0x104>
 801c952:	3f01      	subs	r7, #1
 801c954:	9b01      	ldr	r3, [sp, #4]
 801c956:	3c04      	subs	r4, #4
 801c958:	42a3      	cmp	r3, r4
 801c95a:	d3f7      	bcc.n	801c94c <quorem+0xf4>
 801c95c:	6137      	str	r7, [r6, #16]
 801c95e:	e7c8      	b.n	801c8f2 <quorem+0x9a>
 801c960:	681a      	ldr	r2, [r3, #0]
 801c962:	2a00      	cmp	r2, #0
 801c964:	d104      	bne.n	801c970 <quorem+0x118>
 801c966:	3f01      	subs	r7, #1
 801c968:	9a01      	ldr	r2, [sp, #4]
 801c96a:	3b04      	subs	r3, #4
 801c96c:	429a      	cmp	r2, r3
 801c96e:	d3f7      	bcc.n	801c960 <quorem+0x108>
 801c970:	6137      	str	r7, [r6, #16]
 801c972:	e7e5      	b.n	801c940 <quorem+0xe8>

0801c974 <_dtoa_r>:
 801c974:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c976:	0014      	movs	r4, r2
 801c978:	001d      	movs	r5, r3
 801c97a:	69c6      	ldr	r6, [r0, #28]
 801c97c:	b09d      	sub	sp, #116	@ 0x74
 801c97e:	940a      	str	r4, [sp, #40]	@ 0x28
 801c980:	950b      	str	r5, [sp, #44]	@ 0x2c
 801c982:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801c984:	9003      	str	r0, [sp, #12]
 801c986:	2e00      	cmp	r6, #0
 801c988:	d10f      	bne.n	801c9aa <_dtoa_r+0x36>
 801c98a:	2010      	movs	r0, #16
 801c98c:	f001 f98a 	bl	801dca4 <malloc>
 801c990:	9b03      	ldr	r3, [sp, #12]
 801c992:	1e02      	subs	r2, r0, #0
 801c994:	61d8      	str	r0, [r3, #28]
 801c996:	d104      	bne.n	801c9a2 <_dtoa_r+0x2e>
 801c998:	21ef      	movs	r1, #239	@ 0xef
 801c99a:	4bc7      	ldr	r3, [pc, #796]	@ (801ccb8 <_dtoa_r+0x344>)
 801c99c:	48c7      	ldr	r0, [pc, #796]	@ (801ccbc <_dtoa_r+0x348>)
 801c99e:	f002 fb41 	bl	801f024 <__assert_func>
 801c9a2:	6046      	str	r6, [r0, #4]
 801c9a4:	6086      	str	r6, [r0, #8]
 801c9a6:	6006      	str	r6, [r0, #0]
 801c9a8:	60c6      	str	r6, [r0, #12]
 801c9aa:	9b03      	ldr	r3, [sp, #12]
 801c9ac:	69db      	ldr	r3, [r3, #28]
 801c9ae:	6819      	ldr	r1, [r3, #0]
 801c9b0:	2900      	cmp	r1, #0
 801c9b2:	d00b      	beq.n	801c9cc <_dtoa_r+0x58>
 801c9b4:	685a      	ldr	r2, [r3, #4]
 801c9b6:	2301      	movs	r3, #1
 801c9b8:	4093      	lsls	r3, r2
 801c9ba:	604a      	str	r2, [r1, #4]
 801c9bc:	608b      	str	r3, [r1, #8]
 801c9be:	9803      	ldr	r0, [sp, #12]
 801c9c0:	f001 fa82 	bl	801dec8 <_Bfree>
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	9b03      	ldr	r3, [sp, #12]
 801c9c8:	69db      	ldr	r3, [r3, #28]
 801c9ca:	601a      	str	r2, [r3, #0]
 801c9cc:	2d00      	cmp	r5, #0
 801c9ce:	da1e      	bge.n	801ca0e <_dtoa_r+0x9a>
 801c9d0:	2301      	movs	r3, #1
 801c9d2:	603b      	str	r3, [r7, #0]
 801c9d4:	006b      	lsls	r3, r5, #1
 801c9d6:	085b      	lsrs	r3, r3, #1
 801c9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c9da:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c9dc:	4bb8      	ldr	r3, [pc, #736]	@ (801ccc0 <_dtoa_r+0x34c>)
 801c9de:	4ab8      	ldr	r2, [pc, #736]	@ (801ccc0 <_dtoa_r+0x34c>)
 801c9e0:	403b      	ands	r3, r7
 801c9e2:	4293      	cmp	r3, r2
 801c9e4:	d116      	bne.n	801ca14 <_dtoa_r+0xa0>
 801c9e6:	4bb7      	ldr	r3, [pc, #732]	@ (801ccc4 <_dtoa_r+0x350>)
 801c9e8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c9ea:	6013      	str	r3, [r2, #0]
 801c9ec:	033b      	lsls	r3, r7, #12
 801c9ee:	0b1b      	lsrs	r3, r3, #12
 801c9f0:	4323      	orrs	r3, r4
 801c9f2:	d101      	bne.n	801c9f8 <_dtoa_r+0x84>
 801c9f4:	f000 fd83 	bl	801d4fe <_dtoa_r+0xb8a>
 801c9f8:	4bb3      	ldr	r3, [pc, #716]	@ (801ccc8 <_dtoa_r+0x354>)
 801c9fa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c9fc:	9308      	str	r3, [sp, #32]
 801c9fe:	2a00      	cmp	r2, #0
 801ca00:	d002      	beq.n	801ca08 <_dtoa_r+0x94>
 801ca02:	4bb2      	ldr	r3, [pc, #712]	@ (801cccc <_dtoa_r+0x358>)
 801ca04:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ca06:	6013      	str	r3, [r2, #0]
 801ca08:	9808      	ldr	r0, [sp, #32]
 801ca0a:	b01d      	add	sp, #116	@ 0x74
 801ca0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca0e:	2300      	movs	r3, #0
 801ca10:	603b      	str	r3, [r7, #0]
 801ca12:	e7e2      	b.n	801c9da <_dtoa_r+0x66>
 801ca14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ca16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca18:	9212      	str	r2, [sp, #72]	@ 0x48
 801ca1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ca1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ca1e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ca20:	2200      	movs	r2, #0
 801ca22:	2300      	movs	r3, #0
 801ca24:	f7e3 fd44 	bl	80004b0 <__aeabi_dcmpeq>
 801ca28:	1e06      	subs	r6, r0, #0
 801ca2a:	d00b      	beq.n	801ca44 <_dtoa_r+0xd0>
 801ca2c:	2301      	movs	r3, #1
 801ca2e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ca30:	6013      	str	r3, [r2, #0]
 801ca32:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d002      	beq.n	801ca3e <_dtoa_r+0xca>
 801ca38:	4ba5      	ldr	r3, [pc, #660]	@ (801ccd0 <_dtoa_r+0x35c>)
 801ca3a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ca3c:	6013      	str	r3, [r2, #0]
 801ca3e:	4ba5      	ldr	r3, [pc, #660]	@ (801ccd4 <_dtoa_r+0x360>)
 801ca40:	9308      	str	r3, [sp, #32]
 801ca42:	e7e1      	b.n	801ca08 <_dtoa_r+0x94>
 801ca44:	ab1a      	add	r3, sp, #104	@ 0x68
 801ca46:	9301      	str	r3, [sp, #4]
 801ca48:	ab1b      	add	r3, sp, #108	@ 0x6c
 801ca4a:	9300      	str	r3, [sp, #0]
 801ca4c:	9803      	ldr	r0, [sp, #12]
 801ca4e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ca50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ca52:	f001 fdf1 	bl	801e638 <__d2b>
 801ca56:	007a      	lsls	r2, r7, #1
 801ca58:	9005      	str	r0, [sp, #20]
 801ca5a:	0d52      	lsrs	r2, r2, #21
 801ca5c:	d100      	bne.n	801ca60 <_dtoa_r+0xec>
 801ca5e:	e07b      	b.n	801cb58 <_dtoa_r+0x1e4>
 801ca60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ca62:	9618      	str	r6, [sp, #96]	@ 0x60
 801ca64:	0319      	lsls	r1, r3, #12
 801ca66:	4b9c      	ldr	r3, [pc, #624]	@ (801ccd8 <_dtoa_r+0x364>)
 801ca68:	0b09      	lsrs	r1, r1, #12
 801ca6a:	430b      	orrs	r3, r1
 801ca6c:	499b      	ldr	r1, [pc, #620]	@ (801ccdc <_dtoa_r+0x368>)
 801ca6e:	1857      	adds	r7, r2, r1
 801ca70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ca72:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ca74:	0019      	movs	r1, r3
 801ca76:	2200      	movs	r2, #0
 801ca78:	4b99      	ldr	r3, [pc, #612]	@ (801cce0 <_dtoa_r+0x36c>)
 801ca7a:	f7e6 f8a7 	bl	8002bcc <__aeabi_dsub>
 801ca7e:	4a99      	ldr	r2, [pc, #612]	@ (801cce4 <_dtoa_r+0x370>)
 801ca80:	4b99      	ldr	r3, [pc, #612]	@ (801cce8 <_dtoa_r+0x374>)
 801ca82:	f7e5 fddb 	bl	800263c <__aeabi_dmul>
 801ca86:	4a99      	ldr	r2, [pc, #612]	@ (801ccec <_dtoa_r+0x378>)
 801ca88:	4b99      	ldr	r3, [pc, #612]	@ (801ccf0 <_dtoa_r+0x37c>)
 801ca8a:	f7e4 fe2f 	bl	80016ec <__aeabi_dadd>
 801ca8e:	0004      	movs	r4, r0
 801ca90:	0038      	movs	r0, r7
 801ca92:	000d      	movs	r5, r1
 801ca94:	f7e6 fc94 	bl	80033c0 <__aeabi_i2d>
 801ca98:	4a96      	ldr	r2, [pc, #600]	@ (801ccf4 <_dtoa_r+0x380>)
 801ca9a:	4b97      	ldr	r3, [pc, #604]	@ (801ccf8 <_dtoa_r+0x384>)
 801ca9c:	f7e5 fdce 	bl	800263c <__aeabi_dmul>
 801caa0:	0002      	movs	r2, r0
 801caa2:	000b      	movs	r3, r1
 801caa4:	0020      	movs	r0, r4
 801caa6:	0029      	movs	r1, r5
 801caa8:	f7e4 fe20 	bl	80016ec <__aeabi_dadd>
 801caac:	0004      	movs	r4, r0
 801caae:	000d      	movs	r5, r1
 801cab0:	f7e6 fc4a 	bl	8003348 <__aeabi_d2iz>
 801cab4:	2200      	movs	r2, #0
 801cab6:	9004      	str	r0, [sp, #16]
 801cab8:	2300      	movs	r3, #0
 801caba:	0020      	movs	r0, r4
 801cabc:	0029      	movs	r1, r5
 801cabe:	f7e3 fcfd 	bl	80004bc <__aeabi_dcmplt>
 801cac2:	2800      	cmp	r0, #0
 801cac4:	d00b      	beq.n	801cade <_dtoa_r+0x16a>
 801cac6:	9804      	ldr	r0, [sp, #16]
 801cac8:	f7e6 fc7a 	bl	80033c0 <__aeabi_i2d>
 801cacc:	002b      	movs	r3, r5
 801cace:	0022      	movs	r2, r4
 801cad0:	f7e3 fcee 	bl	80004b0 <__aeabi_dcmpeq>
 801cad4:	4243      	negs	r3, r0
 801cad6:	4158      	adcs	r0, r3
 801cad8:	9b04      	ldr	r3, [sp, #16]
 801cada:	1a1b      	subs	r3, r3, r0
 801cadc:	9304      	str	r3, [sp, #16]
 801cade:	2301      	movs	r3, #1
 801cae0:	9315      	str	r3, [sp, #84]	@ 0x54
 801cae2:	9b04      	ldr	r3, [sp, #16]
 801cae4:	2b16      	cmp	r3, #22
 801cae6:	d810      	bhi.n	801cb0a <_dtoa_r+0x196>
 801cae8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801caea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801caec:	9a04      	ldr	r2, [sp, #16]
 801caee:	4b83      	ldr	r3, [pc, #524]	@ (801ccfc <_dtoa_r+0x388>)
 801caf0:	00d2      	lsls	r2, r2, #3
 801caf2:	189b      	adds	r3, r3, r2
 801caf4:	681a      	ldr	r2, [r3, #0]
 801caf6:	685b      	ldr	r3, [r3, #4]
 801caf8:	f7e3 fce0 	bl	80004bc <__aeabi_dcmplt>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	d047      	beq.n	801cb90 <_dtoa_r+0x21c>
 801cb00:	9b04      	ldr	r3, [sp, #16]
 801cb02:	3b01      	subs	r3, #1
 801cb04:	9304      	str	r3, [sp, #16]
 801cb06:	2300      	movs	r3, #0
 801cb08:	9315      	str	r3, [sp, #84]	@ 0x54
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801cb0e:	9206      	str	r2, [sp, #24]
 801cb10:	1bdb      	subs	r3, r3, r7
 801cb12:	1e5a      	subs	r2, r3, #1
 801cb14:	d53e      	bpl.n	801cb94 <_dtoa_r+0x220>
 801cb16:	2201      	movs	r2, #1
 801cb18:	1ad3      	subs	r3, r2, r3
 801cb1a:	9306      	str	r3, [sp, #24]
 801cb1c:	2300      	movs	r3, #0
 801cb1e:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb20:	9b04      	ldr	r3, [sp, #16]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	db38      	blt.n	801cb98 <_dtoa_r+0x224>
 801cb26:	9a04      	ldr	r2, [sp, #16]
 801cb28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb2a:	4694      	mov	ip, r2
 801cb2c:	4463      	add	r3, ip
 801cb2e:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb30:	2300      	movs	r3, #0
 801cb32:	9214      	str	r2, [sp, #80]	@ 0x50
 801cb34:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cb36:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cb38:	2401      	movs	r4, #1
 801cb3a:	2b09      	cmp	r3, #9
 801cb3c:	d867      	bhi.n	801cc0e <_dtoa_r+0x29a>
 801cb3e:	2b05      	cmp	r3, #5
 801cb40:	dd02      	ble.n	801cb48 <_dtoa_r+0x1d4>
 801cb42:	2400      	movs	r4, #0
 801cb44:	3b04      	subs	r3, #4
 801cb46:	9322      	str	r3, [sp, #136]	@ 0x88
 801cb48:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cb4a:	1e98      	subs	r0, r3, #2
 801cb4c:	2803      	cmp	r0, #3
 801cb4e:	d867      	bhi.n	801cc20 <_dtoa_r+0x2ac>
 801cb50:	f7e3 fb14 	bl	800017c <__gnu_thumb1_case_uqi>
 801cb54:	5b383a2b 	.word	0x5b383a2b
 801cb58:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cb5a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801cb5c:	18f6      	adds	r6, r6, r3
 801cb5e:	4b68      	ldr	r3, [pc, #416]	@ (801cd00 <_dtoa_r+0x38c>)
 801cb60:	18f2      	adds	r2, r6, r3
 801cb62:	2a20      	cmp	r2, #32
 801cb64:	dd0f      	ble.n	801cb86 <_dtoa_r+0x212>
 801cb66:	2340      	movs	r3, #64	@ 0x40
 801cb68:	1a9b      	subs	r3, r3, r2
 801cb6a:	409f      	lsls	r7, r3
 801cb6c:	4b65      	ldr	r3, [pc, #404]	@ (801cd04 <_dtoa_r+0x390>)
 801cb6e:	0038      	movs	r0, r7
 801cb70:	18f3      	adds	r3, r6, r3
 801cb72:	40dc      	lsrs	r4, r3
 801cb74:	4320      	orrs	r0, r4
 801cb76:	f7e6 fc51 	bl	800341c <__aeabi_ui2d>
 801cb7a:	2201      	movs	r2, #1
 801cb7c:	4b62      	ldr	r3, [pc, #392]	@ (801cd08 <_dtoa_r+0x394>)
 801cb7e:	1e77      	subs	r7, r6, #1
 801cb80:	18cb      	adds	r3, r1, r3
 801cb82:	9218      	str	r2, [sp, #96]	@ 0x60
 801cb84:	e776      	b.n	801ca74 <_dtoa_r+0x100>
 801cb86:	2320      	movs	r3, #32
 801cb88:	0020      	movs	r0, r4
 801cb8a:	1a9b      	subs	r3, r3, r2
 801cb8c:	4098      	lsls	r0, r3
 801cb8e:	e7f2      	b.n	801cb76 <_dtoa_r+0x202>
 801cb90:	9015      	str	r0, [sp, #84]	@ 0x54
 801cb92:	e7ba      	b.n	801cb0a <_dtoa_r+0x196>
 801cb94:	920d      	str	r2, [sp, #52]	@ 0x34
 801cb96:	e7c3      	b.n	801cb20 <_dtoa_r+0x1ac>
 801cb98:	9b06      	ldr	r3, [sp, #24]
 801cb9a:	9a04      	ldr	r2, [sp, #16]
 801cb9c:	1a9b      	subs	r3, r3, r2
 801cb9e:	9306      	str	r3, [sp, #24]
 801cba0:	4253      	negs	r3, r2
 801cba2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cba4:	2300      	movs	r3, #0
 801cba6:	9314      	str	r3, [sp, #80]	@ 0x50
 801cba8:	e7c5      	b.n	801cb36 <_dtoa_r+0x1c2>
 801cbaa:	2300      	movs	r3, #0
 801cbac:	9310      	str	r3, [sp, #64]	@ 0x40
 801cbae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cbb0:	930e      	str	r3, [sp, #56]	@ 0x38
 801cbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	dc13      	bgt.n	801cbe0 <_dtoa_r+0x26c>
 801cbb8:	2301      	movs	r3, #1
 801cbba:	001a      	movs	r2, r3
 801cbbc:	930e      	str	r3, [sp, #56]	@ 0x38
 801cbbe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbc0:	9223      	str	r2, [sp, #140]	@ 0x8c
 801cbc2:	e00d      	b.n	801cbe0 <_dtoa_r+0x26c>
 801cbc4:	2301      	movs	r3, #1
 801cbc6:	e7f1      	b.n	801cbac <_dtoa_r+0x238>
 801cbc8:	2300      	movs	r3, #0
 801cbca:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801cbcc:	9310      	str	r3, [sp, #64]	@ 0x40
 801cbce:	4694      	mov	ip, r2
 801cbd0:	9b04      	ldr	r3, [sp, #16]
 801cbd2:	4463      	add	r3, ip
 801cbd4:	930e      	str	r3, [sp, #56]	@ 0x38
 801cbd6:	3301      	adds	r3, #1
 801cbd8:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	dc00      	bgt.n	801cbe0 <_dtoa_r+0x26c>
 801cbde:	2301      	movs	r3, #1
 801cbe0:	9a03      	ldr	r2, [sp, #12]
 801cbe2:	2100      	movs	r1, #0
 801cbe4:	69d0      	ldr	r0, [r2, #28]
 801cbe6:	2204      	movs	r2, #4
 801cbe8:	0015      	movs	r5, r2
 801cbea:	3514      	adds	r5, #20
 801cbec:	429d      	cmp	r5, r3
 801cbee:	d91b      	bls.n	801cc28 <_dtoa_r+0x2b4>
 801cbf0:	6041      	str	r1, [r0, #4]
 801cbf2:	9803      	ldr	r0, [sp, #12]
 801cbf4:	f001 f924 	bl	801de40 <_Balloc>
 801cbf8:	9008      	str	r0, [sp, #32]
 801cbfa:	2800      	cmp	r0, #0
 801cbfc:	d117      	bne.n	801cc2e <_dtoa_r+0x2ba>
 801cbfe:	21b0      	movs	r1, #176	@ 0xb0
 801cc00:	4b42      	ldr	r3, [pc, #264]	@ (801cd0c <_dtoa_r+0x398>)
 801cc02:	482e      	ldr	r0, [pc, #184]	@ (801ccbc <_dtoa_r+0x348>)
 801cc04:	9a08      	ldr	r2, [sp, #32]
 801cc06:	31ff      	adds	r1, #255	@ 0xff
 801cc08:	e6c9      	b.n	801c99e <_dtoa_r+0x2a>
 801cc0a:	2301      	movs	r3, #1
 801cc0c:	e7dd      	b.n	801cbca <_dtoa_r+0x256>
 801cc0e:	2300      	movs	r3, #0
 801cc10:	9410      	str	r4, [sp, #64]	@ 0x40
 801cc12:	9322      	str	r3, [sp, #136]	@ 0x88
 801cc14:	3b01      	subs	r3, #1
 801cc16:	930e      	str	r3, [sp, #56]	@ 0x38
 801cc18:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc1a:	2200      	movs	r2, #0
 801cc1c:	3313      	adds	r3, #19
 801cc1e:	e7cf      	b.n	801cbc0 <_dtoa_r+0x24c>
 801cc20:	2301      	movs	r3, #1
 801cc22:	9310      	str	r3, [sp, #64]	@ 0x40
 801cc24:	3b02      	subs	r3, #2
 801cc26:	e7f6      	b.n	801cc16 <_dtoa_r+0x2a2>
 801cc28:	3101      	adds	r1, #1
 801cc2a:	0052      	lsls	r2, r2, #1
 801cc2c:	e7dc      	b.n	801cbe8 <_dtoa_r+0x274>
 801cc2e:	9b03      	ldr	r3, [sp, #12]
 801cc30:	9a08      	ldr	r2, [sp, #32]
 801cc32:	69db      	ldr	r3, [r3, #28]
 801cc34:	601a      	str	r2, [r3, #0]
 801cc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc38:	2b0e      	cmp	r3, #14
 801cc3a:	d900      	bls.n	801cc3e <_dtoa_r+0x2ca>
 801cc3c:	e0d9      	b.n	801cdf2 <_dtoa_r+0x47e>
 801cc3e:	2c00      	cmp	r4, #0
 801cc40:	d100      	bne.n	801cc44 <_dtoa_r+0x2d0>
 801cc42:	e0d6      	b.n	801cdf2 <_dtoa_r+0x47e>
 801cc44:	9b04      	ldr	r3, [sp, #16]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	dd64      	ble.n	801cd14 <_dtoa_r+0x3a0>
 801cc4a:	210f      	movs	r1, #15
 801cc4c:	9a04      	ldr	r2, [sp, #16]
 801cc4e:	4b2b      	ldr	r3, [pc, #172]	@ (801ccfc <_dtoa_r+0x388>)
 801cc50:	400a      	ands	r2, r1
 801cc52:	00d2      	lsls	r2, r2, #3
 801cc54:	189b      	adds	r3, r3, r2
 801cc56:	681e      	ldr	r6, [r3, #0]
 801cc58:	685f      	ldr	r7, [r3, #4]
 801cc5a:	9b04      	ldr	r3, [sp, #16]
 801cc5c:	2402      	movs	r4, #2
 801cc5e:	111d      	asrs	r5, r3, #4
 801cc60:	05db      	lsls	r3, r3, #23
 801cc62:	d50a      	bpl.n	801cc7a <_dtoa_r+0x306>
 801cc64:	4b2a      	ldr	r3, [pc, #168]	@ (801cd10 <_dtoa_r+0x39c>)
 801cc66:	400d      	ands	r5, r1
 801cc68:	6a1a      	ldr	r2, [r3, #32]
 801cc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc6c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cc6e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cc70:	f7e5 f8a0 	bl	8001db4 <__aeabi_ddiv>
 801cc74:	900a      	str	r0, [sp, #40]	@ 0x28
 801cc76:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cc78:	3401      	adds	r4, #1
 801cc7a:	4b25      	ldr	r3, [pc, #148]	@ (801cd10 <_dtoa_r+0x39c>)
 801cc7c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cc7e:	2d00      	cmp	r5, #0
 801cc80:	d108      	bne.n	801cc94 <_dtoa_r+0x320>
 801cc82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cc84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cc86:	0032      	movs	r2, r6
 801cc88:	003b      	movs	r3, r7
 801cc8a:	f7e5 f893 	bl	8001db4 <__aeabi_ddiv>
 801cc8e:	900a      	str	r0, [sp, #40]	@ 0x28
 801cc90:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cc92:	e05a      	b.n	801cd4a <_dtoa_r+0x3d6>
 801cc94:	2301      	movs	r3, #1
 801cc96:	421d      	tst	r5, r3
 801cc98:	d009      	beq.n	801ccae <_dtoa_r+0x33a>
 801cc9a:	18e4      	adds	r4, r4, r3
 801cc9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cc9e:	0030      	movs	r0, r6
 801cca0:	681a      	ldr	r2, [r3, #0]
 801cca2:	685b      	ldr	r3, [r3, #4]
 801cca4:	0039      	movs	r1, r7
 801cca6:	f7e5 fcc9 	bl	800263c <__aeabi_dmul>
 801ccaa:	0006      	movs	r6, r0
 801ccac:	000f      	movs	r7, r1
 801ccae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ccb0:	106d      	asrs	r5, r5, #1
 801ccb2:	3308      	adds	r3, #8
 801ccb4:	e7e2      	b.n	801cc7c <_dtoa_r+0x308>
 801ccb6:	46c0      	nop			@ (mov r8, r8)
 801ccb8:	080212da 	.word	0x080212da
 801ccbc:	080212f1 	.word	0x080212f1
 801ccc0:	7ff00000 	.word	0x7ff00000
 801ccc4:	0000270f 	.word	0x0000270f
 801ccc8:	080212d6 	.word	0x080212d6
 801cccc:	080212d9 	.word	0x080212d9
 801ccd0:	080212a2 	.word	0x080212a2
 801ccd4:	080212a1 	.word	0x080212a1
 801ccd8:	3ff00000 	.word	0x3ff00000
 801ccdc:	fffffc01 	.word	0xfffffc01
 801cce0:	3ff80000 	.word	0x3ff80000
 801cce4:	636f4361 	.word	0x636f4361
 801cce8:	3fd287a7 	.word	0x3fd287a7
 801ccec:	8b60c8b3 	.word	0x8b60c8b3
 801ccf0:	3fc68a28 	.word	0x3fc68a28
 801ccf4:	509f79fb 	.word	0x509f79fb
 801ccf8:	3fd34413 	.word	0x3fd34413
 801ccfc:	08021448 	.word	0x08021448
 801cd00:	00000432 	.word	0x00000432
 801cd04:	00000412 	.word	0x00000412
 801cd08:	fe100000 	.word	0xfe100000
 801cd0c:	08021349 	.word	0x08021349
 801cd10:	08021420 	.word	0x08021420
 801cd14:	9b04      	ldr	r3, [sp, #16]
 801cd16:	2402      	movs	r4, #2
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d016      	beq.n	801cd4a <_dtoa_r+0x3d6>
 801cd1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cd1e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cd20:	220f      	movs	r2, #15
 801cd22:	425d      	negs	r5, r3
 801cd24:	402a      	ands	r2, r5
 801cd26:	4bd7      	ldr	r3, [pc, #860]	@ (801d084 <_dtoa_r+0x710>)
 801cd28:	00d2      	lsls	r2, r2, #3
 801cd2a:	189b      	adds	r3, r3, r2
 801cd2c:	681a      	ldr	r2, [r3, #0]
 801cd2e:	685b      	ldr	r3, [r3, #4]
 801cd30:	f7e5 fc84 	bl	800263c <__aeabi_dmul>
 801cd34:	2701      	movs	r7, #1
 801cd36:	2300      	movs	r3, #0
 801cd38:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd3a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cd3c:	4ed2      	ldr	r6, [pc, #840]	@ (801d088 <_dtoa_r+0x714>)
 801cd3e:	112d      	asrs	r5, r5, #4
 801cd40:	2d00      	cmp	r5, #0
 801cd42:	d000      	beq.n	801cd46 <_dtoa_r+0x3d2>
 801cd44:	e0ba      	b.n	801cebc <_dtoa_r+0x548>
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d1a1      	bne.n	801cc8e <_dtoa_r+0x31a>
 801cd4a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cd4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cd4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d100      	bne.n	801cd56 <_dtoa_r+0x3e2>
 801cd54:	e0bd      	b.n	801ced2 <_dtoa_r+0x55e>
 801cd56:	2200      	movs	r2, #0
 801cd58:	0030      	movs	r0, r6
 801cd5a:	0039      	movs	r1, r7
 801cd5c:	4bcb      	ldr	r3, [pc, #812]	@ (801d08c <_dtoa_r+0x718>)
 801cd5e:	f7e3 fbad 	bl	80004bc <__aeabi_dcmplt>
 801cd62:	2800      	cmp	r0, #0
 801cd64:	d100      	bne.n	801cd68 <_dtoa_r+0x3f4>
 801cd66:	e0b4      	b.n	801ced2 <_dtoa_r+0x55e>
 801cd68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d100      	bne.n	801cd70 <_dtoa_r+0x3fc>
 801cd6e:	e0b0      	b.n	801ced2 <_dtoa_r+0x55e>
 801cd70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	dd39      	ble.n	801cdea <_dtoa_r+0x476>
 801cd76:	9b04      	ldr	r3, [sp, #16]
 801cd78:	2200      	movs	r2, #0
 801cd7a:	3b01      	subs	r3, #1
 801cd7c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cd7e:	0030      	movs	r0, r6
 801cd80:	4bc3      	ldr	r3, [pc, #780]	@ (801d090 <_dtoa_r+0x71c>)
 801cd82:	0039      	movs	r1, r7
 801cd84:	f7e5 fc5a 	bl	800263c <__aeabi_dmul>
 801cd88:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd8a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cd8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd8e:	3401      	adds	r4, #1
 801cd90:	0020      	movs	r0, r4
 801cd92:	9311      	str	r3, [sp, #68]	@ 0x44
 801cd94:	f7e6 fb14 	bl	80033c0 <__aeabi_i2d>
 801cd98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cd9c:	f7e5 fc4e 	bl	800263c <__aeabi_dmul>
 801cda0:	4bbc      	ldr	r3, [pc, #752]	@ (801d094 <_dtoa_r+0x720>)
 801cda2:	2200      	movs	r2, #0
 801cda4:	f7e4 fca2 	bl	80016ec <__aeabi_dadd>
 801cda8:	4bbb      	ldr	r3, [pc, #748]	@ (801d098 <_dtoa_r+0x724>)
 801cdaa:	0006      	movs	r6, r0
 801cdac:	18cf      	adds	r7, r1, r3
 801cdae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d000      	beq.n	801cdb6 <_dtoa_r+0x442>
 801cdb4:	e091      	b.n	801ceda <_dtoa_r+0x566>
 801cdb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cdb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cdba:	2200      	movs	r2, #0
 801cdbc:	4bb7      	ldr	r3, [pc, #732]	@ (801d09c <_dtoa_r+0x728>)
 801cdbe:	f7e5 ff05 	bl	8002bcc <__aeabi_dsub>
 801cdc2:	0032      	movs	r2, r6
 801cdc4:	003b      	movs	r3, r7
 801cdc6:	0004      	movs	r4, r0
 801cdc8:	000d      	movs	r5, r1
 801cdca:	f7e3 fb8b 	bl	80004e4 <__aeabi_dcmpgt>
 801cdce:	2800      	cmp	r0, #0
 801cdd0:	d000      	beq.n	801cdd4 <_dtoa_r+0x460>
 801cdd2:	e29d      	b.n	801d310 <_dtoa_r+0x99c>
 801cdd4:	2180      	movs	r1, #128	@ 0x80
 801cdd6:	0609      	lsls	r1, r1, #24
 801cdd8:	187b      	adds	r3, r7, r1
 801cdda:	0032      	movs	r2, r6
 801cddc:	0020      	movs	r0, r4
 801cdde:	0029      	movs	r1, r5
 801cde0:	f7e3 fb6c 	bl	80004bc <__aeabi_dcmplt>
 801cde4:	2800      	cmp	r0, #0
 801cde6:	d000      	beq.n	801cdea <_dtoa_r+0x476>
 801cde8:	e130      	b.n	801d04c <_dtoa_r+0x6d8>
 801cdea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cdec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cdee:	930a      	str	r3, [sp, #40]	@ 0x28
 801cdf0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cdf2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	da00      	bge.n	801cdfa <_dtoa_r+0x486>
 801cdf8:	e177      	b.n	801d0ea <_dtoa_r+0x776>
 801cdfa:	9a04      	ldr	r2, [sp, #16]
 801cdfc:	2a0e      	cmp	r2, #14
 801cdfe:	dd00      	ble.n	801ce02 <_dtoa_r+0x48e>
 801ce00:	e173      	b.n	801d0ea <_dtoa_r+0x776>
 801ce02:	4ba0      	ldr	r3, [pc, #640]	@ (801d084 <_dtoa_r+0x710>)
 801ce04:	00d2      	lsls	r2, r2, #3
 801ce06:	189b      	adds	r3, r3, r2
 801ce08:	685c      	ldr	r4, [r3, #4]
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	9306      	str	r3, [sp, #24]
 801ce0e:	9407      	str	r4, [sp, #28]
 801ce10:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	da03      	bge.n	801ce1e <_dtoa_r+0x4aa>
 801ce16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	dc00      	bgt.n	801ce1e <_dtoa_r+0x4aa>
 801ce1c:	e106      	b.n	801d02c <_dtoa_r+0x6b8>
 801ce1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ce20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ce22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce24:	9d08      	ldr	r5, [sp, #32]
 801ce26:	3b01      	subs	r3, #1
 801ce28:	195b      	adds	r3, r3, r5
 801ce2a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce2c:	9a06      	ldr	r2, [sp, #24]
 801ce2e:	9b07      	ldr	r3, [sp, #28]
 801ce30:	0030      	movs	r0, r6
 801ce32:	0039      	movs	r1, r7
 801ce34:	f7e4 ffbe 	bl	8001db4 <__aeabi_ddiv>
 801ce38:	f7e6 fa86 	bl	8003348 <__aeabi_d2iz>
 801ce3c:	9009      	str	r0, [sp, #36]	@ 0x24
 801ce3e:	f7e6 fabf 	bl	80033c0 <__aeabi_i2d>
 801ce42:	9a06      	ldr	r2, [sp, #24]
 801ce44:	9b07      	ldr	r3, [sp, #28]
 801ce46:	f7e5 fbf9 	bl	800263c <__aeabi_dmul>
 801ce4a:	0002      	movs	r2, r0
 801ce4c:	000b      	movs	r3, r1
 801ce4e:	0030      	movs	r0, r6
 801ce50:	0039      	movs	r1, r7
 801ce52:	f7e5 febb 	bl	8002bcc <__aeabi_dsub>
 801ce56:	002b      	movs	r3, r5
 801ce58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce5a:	3501      	adds	r5, #1
 801ce5c:	3230      	adds	r2, #48	@ 0x30
 801ce5e:	701a      	strb	r2, [r3, #0]
 801ce60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ce62:	002c      	movs	r4, r5
 801ce64:	429a      	cmp	r2, r3
 801ce66:	d000      	beq.n	801ce6a <_dtoa_r+0x4f6>
 801ce68:	e131      	b.n	801d0ce <_dtoa_r+0x75a>
 801ce6a:	0002      	movs	r2, r0
 801ce6c:	000b      	movs	r3, r1
 801ce6e:	f7e4 fc3d 	bl	80016ec <__aeabi_dadd>
 801ce72:	9a06      	ldr	r2, [sp, #24]
 801ce74:	9b07      	ldr	r3, [sp, #28]
 801ce76:	0006      	movs	r6, r0
 801ce78:	000f      	movs	r7, r1
 801ce7a:	f7e3 fb33 	bl	80004e4 <__aeabi_dcmpgt>
 801ce7e:	2800      	cmp	r0, #0
 801ce80:	d000      	beq.n	801ce84 <_dtoa_r+0x510>
 801ce82:	e10f      	b.n	801d0a4 <_dtoa_r+0x730>
 801ce84:	9a06      	ldr	r2, [sp, #24]
 801ce86:	9b07      	ldr	r3, [sp, #28]
 801ce88:	0030      	movs	r0, r6
 801ce8a:	0039      	movs	r1, r7
 801ce8c:	f7e3 fb10 	bl	80004b0 <__aeabi_dcmpeq>
 801ce90:	2800      	cmp	r0, #0
 801ce92:	d003      	beq.n	801ce9c <_dtoa_r+0x528>
 801ce94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce96:	07dd      	lsls	r5, r3, #31
 801ce98:	d500      	bpl.n	801ce9c <_dtoa_r+0x528>
 801ce9a:	e103      	b.n	801d0a4 <_dtoa_r+0x730>
 801ce9c:	9905      	ldr	r1, [sp, #20]
 801ce9e:	9803      	ldr	r0, [sp, #12]
 801cea0:	f001 f812 	bl	801dec8 <_Bfree>
 801cea4:	2300      	movs	r3, #0
 801cea6:	7023      	strb	r3, [r4, #0]
 801cea8:	9b04      	ldr	r3, [sp, #16]
 801ceaa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ceac:	3301      	adds	r3, #1
 801ceae:	6013      	str	r3, [r2, #0]
 801ceb0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d100      	bne.n	801ceb8 <_dtoa_r+0x544>
 801ceb6:	e5a7      	b.n	801ca08 <_dtoa_r+0x94>
 801ceb8:	601c      	str	r4, [r3, #0]
 801ceba:	e5a5      	b.n	801ca08 <_dtoa_r+0x94>
 801cebc:	423d      	tst	r5, r7
 801cebe:	d005      	beq.n	801cecc <_dtoa_r+0x558>
 801cec0:	6832      	ldr	r2, [r6, #0]
 801cec2:	6873      	ldr	r3, [r6, #4]
 801cec4:	f7e5 fbba 	bl	800263c <__aeabi_dmul>
 801cec8:	003b      	movs	r3, r7
 801ceca:	3401      	adds	r4, #1
 801cecc:	106d      	asrs	r5, r5, #1
 801cece:	3608      	adds	r6, #8
 801ced0:	e736      	b.n	801cd40 <_dtoa_r+0x3cc>
 801ced2:	9b04      	ldr	r3, [sp, #16]
 801ced4:	930c      	str	r3, [sp, #48]	@ 0x30
 801ced6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ced8:	e75a      	b.n	801cd90 <_dtoa_r+0x41c>
 801ceda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cedc:	4b69      	ldr	r3, [pc, #420]	@ (801d084 <_dtoa_r+0x710>)
 801cede:	3a01      	subs	r2, #1
 801cee0:	00d2      	lsls	r2, r2, #3
 801cee2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cee4:	189b      	adds	r3, r3, r2
 801cee6:	681a      	ldr	r2, [r3, #0]
 801cee8:	685b      	ldr	r3, [r3, #4]
 801ceea:	2900      	cmp	r1, #0
 801ceec:	d04c      	beq.n	801cf88 <_dtoa_r+0x614>
 801ceee:	2000      	movs	r0, #0
 801cef0:	496b      	ldr	r1, [pc, #428]	@ (801d0a0 <_dtoa_r+0x72c>)
 801cef2:	f7e4 ff5f 	bl	8001db4 <__aeabi_ddiv>
 801cef6:	0032      	movs	r2, r6
 801cef8:	003b      	movs	r3, r7
 801cefa:	f7e5 fe67 	bl	8002bcc <__aeabi_dsub>
 801cefe:	9a08      	ldr	r2, [sp, #32]
 801cf00:	0006      	movs	r6, r0
 801cf02:	4694      	mov	ip, r2
 801cf04:	000f      	movs	r7, r1
 801cf06:	9b08      	ldr	r3, [sp, #32]
 801cf08:	9316      	str	r3, [sp, #88]	@ 0x58
 801cf0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cf0c:	4463      	add	r3, ip
 801cf0e:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cf12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cf14:	f7e6 fa18 	bl	8003348 <__aeabi_d2iz>
 801cf18:	0005      	movs	r5, r0
 801cf1a:	f7e6 fa51 	bl	80033c0 <__aeabi_i2d>
 801cf1e:	0002      	movs	r2, r0
 801cf20:	000b      	movs	r3, r1
 801cf22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cf24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cf26:	f7e5 fe51 	bl	8002bcc <__aeabi_dsub>
 801cf2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cf2c:	3530      	adds	r5, #48	@ 0x30
 801cf2e:	1c5c      	adds	r4, r3, #1
 801cf30:	701d      	strb	r5, [r3, #0]
 801cf32:	0032      	movs	r2, r6
 801cf34:	003b      	movs	r3, r7
 801cf36:	900a      	str	r0, [sp, #40]	@ 0x28
 801cf38:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cf3a:	f7e3 fabf 	bl	80004bc <__aeabi_dcmplt>
 801cf3e:	2800      	cmp	r0, #0
 801cf40:	d16a      	bne.n	801d018 <_dtoa_r+0x6a4>
 801cf42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cf44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf46:	2000      	movs	r0, #0
 801cf48:	4950      	ldr	r1, [pc, #320]	@ (801d08c <_dtoa_r+0x718>)
 801cf4a:	f7e5 fe3f 	bl	8002bcc <__aeabi_dsub>
 801cf4e:	0032      	movs	r2, r6
 801cf50:	003b      	movs	r3, r7
 801cf52:	f7e3 fab3 	bl	80004bc <__aeabi_dcmplt>
 801cf56:	2800      	cmp	r0, #0
 801cf58:	d000      	beq.n	801cf5c <_dtoa_r+0x5e8>
 801cf5a:	e0a5      	b.n	801d0a8 <_dtoa_r+0x734>
 801cf5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cf5e:	42a3      	cmp	r3, r4
 801cf60:	d100      	bne.n	801cf64 <_dtoa_r+0x5f0>
 801cf62:	e742      	b.n	801cdea <_dtoa_r+0x476>
 801cf64:	2200      	movs	r2, #0
 801cf66:	0030      	movs	r0, r6
 801cf68:	0039      	movs	r1, r7
 801cf6a:	4b49      	ldr	r3, [pc, #292]	@ (801d090 <_dtoa_r+0x71c>)
 801cf6c:	f7e5 fb66 	bl	800263c <__aeabi_dmul>
 801cf70:	2200      	movs	r2, #0
 801cf72:	0006      	movs	r6, r0
 801cf74:	000f      	movs	r7, r1
 801cf76:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cf78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cf7a:	4b45      	ldr	r3, [pc, #276]	@ (801d090 <_dtoa_r+0x71c>)
 801cf7c:	f7e5 fb5e 	bl	800263c <__aeabi_dmul>
 801cf80:	9416      	str	r4, [sp, #88]	@ 0x58
 801cf82:	900a      	str	r0, [sp, #40]	@ 0x28
 801cf84:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cf86:	e7c3      	b.n	801cf10 <_dtoa_r+0x59c>
 801cf88:	0030      	movs	r0, r6
 801cf8a:	0039      	movs	r1, r7
 801cf8c:	f7e5 fb56 	bl	800263c <__aeabi_dmul>
 801cf90:	9d08      	ldr	r5, [sp, #32]
 801cf92:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cf94:	002b      	movs	r3, r5
 801cf96:	4694      	mov	ip, r2
 801cf98:	9016      	str	r0, [sp, #88]	@ 0x58
 801cf9a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801cf9c:	4463      	add	r3, ip
 801cf9e:	9319      	str	r3, [sp, #100]	@ 0x64
 801cfa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cfa2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cfa4:	f7e6 f9d0 	bl	8003348 <__aeabi_d2iz>
 801cfa8:	0004      	movs	r4, r0
 801cfaa:	f7e6 fa09 	bl	80033c0 <__aeabi_i2d>
 801cfae:	000b      	movs	r3, r1
 801cfb0:	0002      	movs	r2, r0
 801cfb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cfb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cfb6:	f7e5 fe09 	bl	8002bcc <__aeabi_dsub>
 801cfba:	3430      	adds	r4, #48	@ 0x30
 801cfbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cfbe:	702c      	strb	r4, [r5, #0]
 801cfc0:	3501      	adds	r5, #1
 801cfc2:	0006      	movs	r6, r0
 801cfc4:	000f      	movs	r7, r1
 801cfc6:	42ab      	cmp	r3, r5
 801cfc8:	d129      	bne.n	801d01e <_dtoa_r+0x6aa>
 801cfca:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801cfcc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cfce:	9b08      	ldr	r3, [sp, #32]
 801cfd0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cfd2:	469c      	mov	ip, r3
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	4b32      	ldr	r3, [pc, #200]	@ (801d0a0 <_dtoa_r+0x72c>)
 801cfd8:	4464      	add	r4, ip
 801cfda:	f7e4 fb87 	bl	80016ec <__aeabi_dadd>
 801cfde:	0002      	movs	r2, r0
 801cfe0:	000b      	movs	r3, r1
 801cfe2:	0030      	movs	r0, r6
 801cfe4:	0039      	movs	r1, r7
 801cfe6:	f7e3 fa7d 	bl	80004e4 <__aeabi_dcmpgt>
 801cfea:	2800      	cmp	r0, #0
 801cfec:	d15c      	bne.n	801d0a8 <_dtoa_r+0x734>
 801cfee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cff0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cff2:	2000      	movs	r0, #0
 801cff4:	492a      	ldr	r1, [pc, #168]	@ (801d0a0 <_dtoa_r+0x72c>)
 801cff6:	f7e5 fde9 	bl	8002bcc <__aeabi_dsub>
 801cffa:	0002      	movs	r2, r0
 801cffc:	000b      	movs	r3, r1
 801cffe:	0030      	movs	r0, r6
 801d000:	0039      	movs	r1, r7
 801d002:	f7e3 fa5b 	bl	80004bc <__aeabi_dcmplt>
 801d006:	2800      	cmp	r0, #0
 801d008:	d100      	bne.n	801d00c <_dtoa_r+0x698>
 801d00a:	e6ee      	b.n	801cdea <_dtoa_r+0x476>
 801d00c:	0023      	movs	r3, r4
 801d00e:	3c01      	subs	r4, #1
 801d010:	7822      	ldrb	r2, [r4, #0]
 801d012:	2a30      	cmp	r2, #48	@ 0x30
 801d014:	d0fa      	beq.n	801d00c <_dtoa_r+0x698>
 801d016:	001c      	movs	r4, r3
 801d018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d01a:	9304      	str	r3, [sp, #16]
 801d01c:	e73e      	b.n	801ce9c <_dtoa_r+0x528>
 801d01e:	2200      	movs	r2, #0
 801d020:	4b1b      	ldr	r3, [pc, #108]	@ (801d090 <_dtoa_r+0x71c>)
 801d022:	f7e5 fb0b 	bl	800263c <__aeabi_dmul>
 801d026:	900a      	str	r0, [sp, #40]	@ 0x28
 801d028:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d02a:	e7b9      	b.n	801cfa0 <_dtoa_r+0x62c>
 801d02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d10c      	bne.n	801d04c <_dtoa_r+0x6d8>
 801d032:	9806      	ldr	r0, [sp, #24]
 801d034:	9907      	ldr	r1, [sp, #28]
 801d036:	2200      	movs	r2, #0
 801d038:	4b18      	ldr	r3, [pc, #96]	@ (801d09c <_dtoa_r+0x728>)
 801d03a:	f7e5 faff 	bl	800263c <__aeabi_dmul>
 801d03e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d040:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d042:	f7e3 fa59 	bl	80004f8 <__aeabi_dcmpge>
 801d046:	2800      	cmp	r0, #0
 801d048:	d100      	bne.n	801d04c <_dtoa_r+0x6d8>
 801d04a:	e164      	b.n	801d316 <_dtoa_r+0x9a2>
 801d04c:	2600      	movs	r6, #0
 801d04e:	0037      	movs	r7, r6
 801d050:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d052:	9c08      	ldr	r4, [sp, #32]
 801d054:	43db      	mvns	r3, r3
 801d056:	930c      	str	r3, [sp, #48]	@ 0x30
 801d058:	2300      	movs	r3, #0
 801d05a:	9304      	str	r3, [sp, #16]
 801d05c:	0031      	movs	r1, r6
 801d05e:	9803      	ldr	r0, [sp, #12]
 801d060:	f000 ff32 	bl	801dec8 <_Bfree>
 801d064:	2f00      	cmp	r7, #0
 801d066:	d0d7      	beq.n	801d018 <_dtoa_r+0x6a4>
 801d068:	9b04      	ldr	r3, [sp, #16]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d005      	beq.n	801d07a <_dtoa_r+0x706>
 801d06e:	42bb      	cmp	r3, r7
 801d070:	d003      	beq.n	801d07a <_dtoa_r+0x706>
 801d072:	0019      	movs	r1, r3
 801d074:	9803      	ldr	r0, [sp, #12]
 801d076:	f000 ff27 	bl	801dec8 <_Bfree>
 801d07a:	0039      	movs	r1, r7
 801d07c:	9803      	ldr	r0, [sp, #12]
 801d07e:	f000 ff23 	bl	801dec8 <_Bfree>
 801d082:	e7c9      	b.n	801d018 <_dtoa_r+0x6a4>
 801d084:	08021448 	.word	0x08021448
 801d088:	08021420 	.word	0x08021420
 801d08c:	3ff00000 	.word	0x3ff00000
 801d090:	40240000 	.word	0x40240000
 801d094:	401c0000 	.word	0x401c0000
 801d098:	fcc00000 	.word	0xfcc00000
 801d09c:	40140000 	.word	0x40140000
 801d0a0:	3fe00000 	.word	0x3fe00000
 801d0a4:	9b04      	ldr	r3, [sp, #16]
 801d0a6:	930c      	str	r3, [sp, #48]	@ 0x30
 801d0a8:	0023      	movs	r3, r4
 801d0aa:	001c      	movs	r4, r3
 801d0ac:	3b01      	subs	r3, #1
 801d0ae:	781a      	ldrb	r2, [r3, #0]
 801d0b0:	2a39      	cmp	r2, #57	@ 0x39
 801d0b2:	d108      	bne.n	801d0c6 <_dtoa_r+0x752>
 801d0b4:	9a08      	ldr	r2, [sp, #32]
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d1f7      	bne.n	801d0aa <_dtoa_r+0x736>
 801d0ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d0bc:	9908      	ldr	r1, [sp, #32]
 801d0be:	3201      	adds	r2, #1
 801d0c0:	920c      	str	r2, [sp, #48]	@ 0x30
 801d0c2:	2230      	movs	r2, #48	@ 0x30
 801d0c4:	700a      	strb	r2, [r1, #0]
 801d0c6:	781a      	ldrb	r2, [r3, #0]
 801d0c8:	3201      	adds	r2, #1
 801d0ca:	701a      	strb	r2, [r3, #0]
 801d0cc:	e7a4      	b.n	801d018 <_dtoa_r+0x6a4>
 801d0ce:	2200      	movs	r2, #0
 801d0d0:	4bc6      	ldr	r3, [pc, #792]	@ (801d3ec <_dtoa_r+0xa78>)
 801d0d2:	f7e5 fab3 	bl	800263c <__aeabi_dmul>
 801d0d6:	2200      	movs	r2, #0
 801d0d8:	2300      	movs	r3, #0
 801d0da:	0006      	movs	r6, r0
 801d0dc:	000f      	movs	r7, r1
 801d0de:	f7e3 f9e7 	bl	80004b0 <__aeabi_dcmpeq>
 801d0e2:	2800      	cmp	r0, #0
 801d0e4:	d100      	bne.n	801d0e8 <_dtoa_r+0x774>
 801d0e6:	e6a1      	b.n	801ce2c <_dtoa_r+0x4b8>
 801d0e8:	e6d8      	b.n	801ce9c <_dtoa_r+0x528>
 801d0ea:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801d0ec:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801d0ee:	9c06      	ldr	r4, [sp, #24]
 801d0f0:	2f00      	cmp	r7, #0
 801d0f2:	d014      	beq.n	801d11e <_dtoa_r+0x7aa>
 801d0f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d0f6:	2a01      	cmp	r2, #1
 801d0f8:	dd00      	ble.n	801d0fc <_dtoa_r+0x788>
 801d0fa:	e0c8      	b.n	801d28e <_dtoa_r+0x91a>
 801d0fc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d0fe:	2a00      	cmp	r2, #0
 801d100:	d100      	bne.n	801d104 <_dtoa_r+0x790>
 801d102:	e0be      	b.n	801d282 <_dtoa_r+0x90e>
 801d104:	4aba      	ldr	r2, [pc, #744]	@ (801d3f0 <_dtoa_r+0xa7c>)
 801d106:	189b      	adds	r3, r3, r2
 801d108:	9a06      	ldr	r2, [sp, #24]
 801d10a:	2101      	movs	r1, #1
 801d10c:	18d2      	adds	r2, r2, r3
 801d10e:	9206      	str	r2, [sp, #24]
 801d110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d112:	9803      	ldr	r0, [sp, #12]
 801d114:	18d3      	adds	r3, r2, r3
 801d116:	930d      	str	r3, [sp, #52]	@ 0x34
 801d118:	f000 ffda 	bl	801e0d0 <__i2b>
 801d11c:	0007      	movs	r7, r0
 801d11e:	2c00      	cmp	r4, #0
 801d120:	d00e      	beq.n	801d140 <_dtoa_r+0x7cc>
 801d122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d124:	2b00      	cmp	r3, #0
 801d126:	dd0b      	ble.n	801d140 <_dtoa_r+0x7cc>
 801d128:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d12a:	0023      	movs	r3, r4
 801d12c:	4294      	cmp	r4, r2
 801d12e:	dd00      	ble.n	801d132 <_dtoa_r+0x7be>
 801d130:	0013      	movs	r3, r2
 801d132:	9a06      	ldr	r2, [sp, #24]
 801d134:	1ae4      	subs	r4, r4, r3
 801d136:	1ad2      	subs	r2, r2, r3
 801d138:	9206      	str	r2, [sp, #24]
 801d13a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d13c:	1ad3      	subs	r3, r2, r3
 801d13e:	930d      	str	r3, [sp, #52]	@ 0x34
 801d140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d142:	2b00      	cmp	r3, #0
 801d144:	d01f      	beq.n	801d186 <_dtoa_r+0x812>
 801d146:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d100      	bne.n	801d14e <_dtoa_r+0x7da>
 801d14c:	e0b5      	b.n	801d2ba <_dtoa_r+0x946>
 801d14e:	2d00      	cmp	r5, #0
 801d150:	d010      	beq.n	801d174 <_dtoa_r+0x800>
 801d152:	0039      	movs	r1, r7
 801d154:	002a      	movs	r2, r5
 801d156:	9803      	ldr	r0, [sp, #12]
 801d158:	f001 f884 	bl	801e264 <__pow5mult>
 801d15c:	9a05      	ldr	r2, [sp, #20]
 801d15e:	0001      	movs	r1, r0
 801d160:	0007      	movs	r7, r0
 801d162:	9803      	ldr	r0, [sp, #12]
 801d164:	f000 ffcc 	bl	801e100 <__multiply>
 801d168:	0006      	movs	r6, r0
 801d16a:	9905      	ldr	r1, [sp, #20]
 801d16c:	9803      	ldr	r0, [sp, #12]
 801d16e:	f000 feab 	bl	801dec8 <_Bfree>
 801d172:	9605      	str	r6, [sp, #20]
 801d174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d176:	1b5a      	subs	r2, r3, r5
 801d178:	42ab      	cmp	r3, r5
 801d17a:	d004      	beq.n	801d186 <_dtoa_r+0x812>
 801d17c:	9905      	ldr	r1, [sp, #20]
 801d17e:	9803      	ldr	r0, [sp, #12]
 801d180:	f001 f870 	bl	801e264 <__pow5mult>
 801d184:	9005      	str	r0, [sp, #20]
 801d186:	2101      	movs	r1, #1
 801d188:	9803      	ldr	r0, [sp, #12]
 801d18a:	f000 ffa1 	bl	801e0d0 <__i2b>
 801d18e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d190:	0006      	movs	r6, r0
 801d192:	2b00      	cmp	r3, #0
 801d194:	d100      	bne.n	801d198 <_dtoa_r+0x824>
 801d196:	e1bc      	b.n	801d512 <_dtoa_r+0xb9e>
 801d198:	001a      	movs	r2, r3
 801d19a:	0001      	movs	r1, r0
 801d19c:	9803      	ldr	r0, [sp, #12]
 801d19e:	f001 f861 	bl	801e264 <__pow5mult>
 801d1a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d1a4:	0006      	movs	r6, r0
 801d1a6:	2500      	movs	r5, #0
 801d1a8:	2b01      	cmp	r3, #1
 801d1aa:	dc16      	bgt.n	801d1da <_dtoa_r+0x866>
 801d1ac:	2500      	movs	r5, #0
 801d1ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1b0:	42ab      	cmp	r3, r5
 801d1b2:	d10e      	bne.n	801d1d2 <_dtoa_r+0x85e>
 801d1b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1b6:	031b      	lsls	r3, r3, #12
 801d1b8:	42ab      	cmp	r3, r5
 801d1ba:	d10a      	bne.n	801d1d2 <_dtoa_r+0x85e>
 801d1bc:	4b8d      	ldr	r3, [pc, #564]	@ (801d3f4 <_dtoa_r+0xa80>)
 801d1be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d1c0:	4213      	tst	r3, r2
 801d1c2:	d006      	beq.n	801d1d2 <_dtoa_r+0x85e>
 801d1c4:	9b06      	ldr	r3, [sp, #24]
 801d1c6:	3501      	adds	r5, #1
 801d1c8:	3301      	adds	r3, #1
 801d1ca:	9306      	str	r3, [sp, #24]
 801d1cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d1ce:	3301      	adds	r3, #1
 801d1d0:	930d      	str	r3, [sp, #52]	@ 0x34
 801d1d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d1d4:	2001      	movs	r0, #1
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d008      	beq.n	801d1ec <_dtoa_r+0x878>
 801d1da:	6933      	ldr	r3, [r6, #16]
 801d1dc:	3303      	adds	r3, #3
 801d1de:	009b      	lsls	r3, r3, #2
 801d1e0:	18f3      	adds	r3, r6, r3
 801d1e2:	6858      	ldr	r0, [r3, #4]
 801d1e4:	f000 ff24 	bl	801e030 <__hi0bits>
 801d1e8:	2320      	movs	r3, #32
 801d1ea:	1a18      	subs	r0, r3, r0
 801d1ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d1ee:	1818      	adds	r0, r3, r0
 801d1f0:	0002      	movs	r2, r0
 801d1f2:	231f      	movs	r3, #31
 801d1f4:	401a      	ands	r2, r3
 801d1f6:	4218      	tst	r0, r3
 801d1f8:	d065      	beq.n	801d2c6 <_dtoa_r+0x952>
 801d1fa:	3301      	adds	r3, #1
 801d1fc:	1a9b      	subs	r3, r3, r2
 801d1fe:	2b04      	cmp	r3, #4
 801d200:	dd5d      	ble.n	801d2be <_dtoa_r+0x94a>
 801d202:	231c      	movs	r3, #28
 801d204:	1a9b      	subs	r3, r3, r2
 801d206:	9a06      	ldr	r2, [sp, #24]
 801d208:	18e4      	adds	r4, r4, r3
 801d20a:	18d2      	adds	r2, r2, r3
 801d20c:	9206      	str	r2, [sp, #24]
 801d20e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d210:	18d3      	adds	r3, r2, r3
 801d212:	930d      	str	r3, [sp, #52]	@ 0x34
 801d214:	9b06      	ldr	r3, [sp, #24]
 801d216:	2b00      	cmp	r3, #0
 801d218:	dd05      	ble.n	801d226 <_dtoa_r+0x8b2>
 801d21a:	001a      	movs	r2, r3
 801d21c:	9905      	ldr	r1, [sp, #20]
 801d21e:	9803      	ldr	r0, [sp, #12]
 801d220:	f001 f87c 	bl	801e31c <__lshift>
 801d224:	9005      	str	r0, [sp, #20]
 801d226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d228:	2b00      	cmp	r3, #0
 801d22a:	dd05      	ble.n	801d238 <_dtoa_r+0x8c4>
 801d22c:	0031      	movs	r1, r6
 801d22e:	001a      	movs	r2, r3
 801d230:	9803      	ldr	r0, [sp, #12]
 801d232:	f001 f873 	bl	801e31c <__lshift>
 801d236:	0006      	movs	r6, r0
 801d238:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d045      	beq.n	801d2ca <_dtoa_r+0x956>
 801d23e:	0031      	movs	r1, r6
 801d240:	9805      	ldr	r0, [sp, #20]
 801d242:	f001 f8d7 	bl	801e3f4 <__mcmp>
 801d246:	2800      	cmp	r0, #0
 801d248:	da3f      	bge.n	801d2ca <_dtoa_r+0x956>
 801d24a:	9b04      	ldr	r3, [sp, #16]
 801d24c:	220a      	movs	r2, #10
 801d24e:	3b01      	subs	r3, #1
 801d250:	930c      	str	r3, [sp, #48]	@ 0x30
 801d252:	9905      	ldr	r1, [sp, #20]
 801d254:	2300      	movs	r3, #0
 801d256:	9803      	ldr	r0, [sp, #12]
 801d258:	f000 fe5a 	bl	801df10 <__multadd>
 801d25c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d25e:	9005      	str	r0, [sp, #20]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d100      	bne.n	801d266 <_dtoa_r+0x8f2>
 801d264:	e15c      	b.n	801d520 <_dtoa_r+0xbac>
 801d266:	2300      	movs	r3, #0
 801d268:	0039      	movs	r1, r7
 801d26a:	220a      	movs	r2, #10
 801d26c:	9803      	ldr	r0, [sp, #12]
 801d26e:	f000 fe4f 	bl	801df10 <__multadd>
 801d272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d274:	0007      	movs	r7, r0
 801d276:	2b00      	cmp	r3, #0
 801d278:	dc55      	bgt.n	801d326 <_dtoa_r+0x9b2>
 801d27a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d27c:	2b02      	cmp	r3, #2
 801d27e:	dc2d      	bgt.n	801d2dc <_dtoa_r+0x968>
 801d280:	e051      	b.n	801d326 <_dtoa_r+0x9b2>
 801d282:	2336      	movs	r3, #54	@ 0x36
 801d284:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d286:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801d288:	9c06      	ldr	r4, [sp, #24]
 801d28a:	1a9b      	subs	r3, r3, r2
 801d28c:	e73c      	b.n	801d108 <_dtoa_r+0x794>
 801d28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d290:	1e5d      	subs	r5, r3, #1
 801d292:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d294:	42ab      	cmp	r3, r5
 801d296:	db08      	blt.n	801d2aa <_dtoa_r+0x936>
 801d298:	1b5d      	subs	r5, r3, r5
 801d29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d29c:	9c06      	ldr	r4, [sp, #24]
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	db00      	blt.n	801d2a4 <_dtoa_r+0x930>
 801d2a2:	e731      	b.n	801d108 <_dtoa_r+0x794>
 801d2a4:	1ae4      	subs	r4, r4, r3
 801d2a6:	2300      	movs	r3, #0
 801d2a8:	e72e      	b.n	801d108 <_dtoa_r+0x794>
 801d2aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d2ae:	1aeb      	subs	r3, r5, r3
 801d2b0:	18d3      	adds	r3, r2, r3
 801d2b2:	950f      	str	r5, [sp, #60]	@ 0x3c
 801d2b4:	9314      	str	r3, [sp, #80]	@ 0x50
 801d2b6:	2500      	movs	r5, #0
 801d2b8:	e7ef      	b.n	801d29a <_dtoa_r+0x926>
 801d2ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d2bc:	e75e      	b.n	801d17c <_dtoa_r+0x808>
 801d2be:	2b04      	cmp	r3, #4
 801d2c0:	d0a8      	beq.n	801d214 <_dtoa_r+0x8a0>
 801d2c2:	331c      	adds	r3, #28
 801d2c4:	e79f      	b.n	801d206 <_dtoa_r+0x892>
 801d2c6:	0013      	movs	r3, r2
 801d2c8:	e7fb      	b.n	801d2c2 <_dtoa_r+0x94e>
 801d2ca:	9b04      	ldr	r3, [sp, #16]
 801d2cc:	930c      	str	r3, [sp, #48]	@ 0x30
 801d2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2d0:	930e      	str	r3, [sp, #56]	@ 0x38
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	dc23      	bgt.n	801d31e <_dtoa_r+0x9aa>
 801d2d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d2d8:	2b02      	cmp	r3, #2
 801d2da:	dd20      	ble.n	801d31e <_dtoa_r+0x9aa>
 801d2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d000      	beq.n	801d2e4 <_dtoa_r+0x970>
 801d2e2:	e6b5      	b.n	801d050 <_dtoa_r+0x6dc>
 801d2e4:	0031      	movs	r1, r6
 801d2e6:	2205      	movs	r2, #5
 801d2e8:	9803      	ldr	r0, [sp, #12]
 801d2ea:	f000 fe11 	bl	801df10 <__multadd>
 801d2ee:	0006      	movs	r6, r0
 801d2f0:	0001      	movs	r1, r0
 801d2f2:	9805      	ldr	r0, [sp, #20]
 801d2f4:	f001 f87e 	bl	801e3f4 <__mcmp>
 801d2f8:	2800      	cmp	r0, #0
 801d2fa:	dc00      	bgt.n	801d2fe <_dtoa_r+0x98a>
 801d2fc:	e6a8      	b.n	801d050 <_dtoa_r+0x6dc>
 801d2fe:	9b08      	ldr	r3, [sp, #32]
 801d300:	9a08      	ldr	r2, [sp, #32]
 801d302:	1c5c      	adds	r4, r3, #1
 801d304:	2331      	movs	r3, #49	@ 0x31
 801d306:	7013      	strb	r3, [r2, #0]
 801d308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d30a:	3301      	adds	r3, #1
 801d30c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d30e:	e6a3      	b.n	801d058 <_dtoa_r+0x6e4>
 801d310:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d312:	0037      	movs	r7, r6
 801d314:	e7f3      	b.n	801d2fe <_dtoa_r+0x98a>
 801d316:	9b04      	ldr	r3, [sp, #16]
 801d318:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801d31a:	930c      	str	r3, [sp, #48]	@ 0x30
 801d31c:	e7f9      	b.n	801d312 <_dtoa_r+0x99e>
 801d31e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d320:	2b00      	cmp	r3, #0
 801d322:	d100      	bne.n	801d326 <_dtoa_r+0x9b2>
 801d324:	e100      	b.n	801d528 <_dtoa_r+0xbb4>
 801d326:	2c00      	cmp	r4, #0
 801d328:	dd05      	ble.n	801d336 <_dtoa_r+0x9c2>
 801d32a:	0039      	movs	r1, r7
 801d32c:	0022      	movs	r2, r4
 801d32e:	9803      	ldr	r0, [sp, #12]
 801d330:	f000 fff4 	bl	801e31c <__lshift>
 801d334:	0007      	movs	r7, r0
 801d336:	0038      	movs	r0, r7
 801d338:	2d00      	cmp	r5, #0
 801d33a:	d018      	beq.n	801d36e <_dtoa_r+0x9fa>
 801d33c:	6879      	ldr	r1, [r7, #4]
 801d33e:	9803      	ldr	r0, [sp, #12]
 801d340:	f000 fd7e 	bl	801de40 <_Balloc>
 801d344:	1e04      	subs	r4, r0, #0
 801d346:	d105      	bne.n	801d354 <_dtoa_r+0x9e0>
 801d348:	0022      	movs	r2, r4
 801d34a:	4b2b      	ldr	r3, [pc, #172]	@ (801d3f8 <_dtoa_r+0xa84>)
 801d34c:	482b      	ldr	r0, [pc, #172]	@ (801d3fc <_dtoa_r+0xa88>)
 801d34e:	492c      	ldr	r1, [pc, #176]	@ (801d400 <_dtoa_r+0xa8c>)
 801d350:	f7ff fb25 	bl	801c99e <_dtoa_r+0x2a>
 801d354:	0039      	movs	r1, r7
 801d356:	693a      	ldr	r2, [r7, #16]
 801d358:	310c      	adds	r1, #12
 801d35a:	3202      	adds	r2, #2
 801d35c:	0092      	lsls	r2, r2, #2
 801d35e:	300c      	adds	r0, #12
 801d360:	f7ff fa6a 	bl	801c838 <memcpy>
 801d364:	2201      	movs	r2, #1
 801d366:	0021      	movs	r1, r4
 801d368:	9803      	ldr	r0, [sp, #12]
 801d36a:	f000 ffd7 	bl	801e31c <__lshift>
 801d36e:	9b08      	ldr	r3, [sp, #32]
 801d370:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d372:	9306      	str	r3, [sp, #24]
 801d374:	3b01      	subs	r3, #1
 801d376:	189b      	adds	r3, r3, r2
 801d378:	2201      	movs	r2, #1
 801d37a:	9704      	str	r7, [sp, #16]
 801d37c:	0007      	movs	r7, r0
 801d37e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d382:	4013      	ands	r3, r2
 801d384:	930e      	str	r3, [sp, #56]	@ 0x38
 801d386:	0031      	movs	r1, r6
 801d388:	9805      	ldr	r0, [sp, #20]
 801d38a:	f7ff fa65 	bl	801c858 <quorem>
 801d38e:	9904      	ldr	r1, [sp, #16]
 801d390:	0005      	movs	r5, r0
 801d392:	900a      	str	r0, [sp, #40]	@ 0x28
 801d394:	9805      	ldr	r0, [sp, #20]
 801d396:	f001 f82d 	bl	801e3f4 <__mcmp>
 801d39a:	003a      	movs	r2, r7
 801d39c:	900d      	str	r0, [sp, #52]	@ 0x34
 801d39e:	0031      	movs	r1, r6
 801d3a0:	9803      	ldr	r0, [sp, #12]
 801d3a2:	f001 f843 	bl	801e42c <__mdiff>
 801d3a6:	2201      	movs	r2, #1
 801d3a8:	68c3      	ldr	r3, [r0, #12]
 801d3aa:	0004      	movs	r4, r0
 801d3ac:	3530      	adds	r5, #48	@ 0x30
 801d3ae:	9209      	str	r2, [sp, #36]	@ 0x24
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d104      	bne.n	801d3be <_dtoa_r+0xa4a>
 801d3b4:	0001      	movs	r1, r0
 801d3b6:	9805      	ldr	r0, [sp, #20]
 801d3b8:	f001 f81c 	bl	801e3f4 <__mcmp>
 801d3bc:	9009      	str	r0, [sp, #36]	@ 0x24
 801d3be:	0021      	movs	r1, r4
 801d3c0:	9803      	ldr	r0, [sp, #12]
 801d3c2:	f000 fd81 	bl	801dec8 <_Bfree>
 801d3c6:	9b06      	ldr	r3, [sp, #24]
 801d3c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d3ca:	1c5c      	adds	r4, r3, #1
 801d3cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d3ce:	4313      	orrs	r3, r2
 801d3d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d3d2:	4313      	orrs	r3, r2
 801d3d4:	d116      	bne.n	801d404 <_dtoa_r+0xa90>
 801d3d6:	2d39      	cmp	r5, #57	@ 0x39
 801d3d8:	d02f      	beq.n	801d43a <_dtoa_r+0xac6>
 801d3da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	dd01      	ble.n	801d3e4 <_dtoa_r+0xa70>
 801d3e0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801d3e2:	3531      	adds	r5, #49	@ 0x31
 801d3e4:	9b06      	ldr	r3, [sp, #24]
 801d3e6:	701d      	strb	r5, [r3, #0]
 801d3e8:	e638      	b.n	801d05c <_dtoa_r+0x6e8>
 801d3ea:	46c0      	nop			@ (mov r8, r8)
 801d3ec:	40240000 	.word	0x40240000
 801d3f0:	00000433 	.word	0x00000433
 801d3f4:	7ff00000 	.word	0x7ff00000
 801d3f8:	08021349 	.word	0x08021349
 801d3fc:	080212f1 	.word	0x080212f1
 801d400:	000002ef 	.word	0x000002ef
 801d404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d406:	2b00      	cmp	r3, #0
 801d408:	db04      	blt.n	801d414 <_dtoa_r+0xaa0>
 801d40a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d40c:	4313      	orrs	r3, r2
 801d40e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d410:	4313      	orrs	r3, r2
 801d412:	d11e      	bne.n	801d452 <_dtoa_r+0xade>
 801d414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d416:	2b00      	cmp	r3, #0
 801d418:	dde4      	ble.n	801d3e4 <_dtoa_r+0xa70>
 801d41a:	9905      	ldr	r1, [sp, #20]
 801d41c:	2201      	movs	r2, #1
 801d41e:	9803      	ldr	r0, [sp, #12]
 801d420:	f000 ff7c 	bl	801e31c <__lshift>
 801d424:	0031      	movs	r1, r6
 801d426:	9005      	str	r0, [sp, #20]
 801d428:	f000 ffe4 	bl	801e3f4 <__mcmp>
 801d42c:	2800      	cmp	r0, #0
 801d42e:	dc02      	bgt.n	801d436 <_dtoa_r+0xac2>
 801d430:	d1d8      	bne.n	801d3e4 <_dtoa_r+0xa70>
 801d432:	07eb      	lsls	r3, r5, #31
 801d434:	d5d6      	bpl.n	801d3e4 <_dtoa_r+0xa70>
 801d436:	2d39      	cmp	r5, #57	@ 0x39
 801d438:	d1d2      	bne.n	801d3e0 <_dtoa_r+0xa6c>
 801d43a:	2339      	movs	r3, #57	@ 0x39
 801d43c:	9a06      	ldr	r2, [sp, #24]
 801d43e:	7013      	strb	r3, [r2, #0]
 801d440:	0023      	movs	r3, r4
 801d442:	001c      	movs	r4, r3
 801d444:	3b01      	subs	r3, #1
 801d446:	781a      	ldrb	r2, [r3, #0]
 801d448:	2a39      	cmp	r2, #57	@ 0x39
 801d44a:	d04f      	beq.n	801d4ec <_dtoa_r+0xb78>
 801d44c:	3201      	adds	r2, #1
 801d44e:	701a      	strb	r2, [r3, #0]
 801d450:	e604      	b.n	801d05c <_dtoa_r+0x6e8>
 801d452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d454:	2b00      	cmp	r3, #0
 801d456:	dd03      	ble.n	801d460 <_dtoa_r+0xaec>
 801d458:	2d39      	cmp	r5, #57	@ 0x39
 801d45a:	d0ee      	beq.n	801d43a <_dtoa_r+0xac6>
 801d45c:	3501      	adds	r5, #1
 801d45e:	e7c1      	b.n	801d3e4 <_dtoa_r+0xa70>
 801d460:	9b06      	ldr	r3, [sp, #24]
 801d462:	9a06      	ldr	r2, [sp, #24]
 801d464:	701d      	strb	r5, [r3, #0]
 801d466:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d468:	4293      	cmp	r3, r2
 801d46a:	d02a      	beq.n	801d4c2 <_dtoa_r+0xb4e>
 801d46c:	2300      	movs	r3, #0
 801d46e:	220a      	movs	r2, #10
 801d470:	9905      	ldr	r1, [sp, #20]
 801d472:	9803      	ldr	r0, [sp, #12]
 801d474:	f000 fd4c 	bl	801df10 <__multadd>
 801d478:	9b04      	ldr	r3, [sp, #16]
 801d47a:	9005      	str	r0, [sp, #20]
 801d47c:	42bb      	cmp	r3, r7
 801d47e:	d109      	bne.n	801d494 <_dtoa_r+0xb20>
 801d480:	2300      	movs	r3, #0
 801d482:	220a      	movs	r2, #10
 801d484:	9904      	ldr	r1, [sp, #16]
 801d486:	9803      	ldr	r0, [sp, #12]
 801d488:	f000 fd42 	bl	801df10 <__multadd>
 801d48c:	9004      	str	r0, [sp, #16]
 801d48e:	0007      	movs	r7, r0
 801d490:	9406      	str	r4, [sp, #24]
 801d492:	e778      	b.n	801d386 <_dtoa_r+0xa12>
 801d494:	9904      	ldr	r1, [sp, #16]
 801d496:	2300      	movs	r3, #0
 801d498:	220a      	movs	r2, #10
 801d49a:	9803      	ldr	r0, [sp, #12]
 801d49c:	f000 fd38 	bl	801df10 <__multadd>
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	9004      	str	r0, [sp, #16]
 801d4a4:	220a      	movs	r2, #10
 801d4a6:	0039      	movs	r1, r7
 801d4a8:	9803      	ldr	r0, [sp, #12]
 801d4aa:	f000 fd31 	bl	801df10 <__multadd>
 801d4ae:	e7ee      	b.n	801d48e <_dtoa_r+0xb1a>
 801d4b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4b2:	2401      	movs	r4, #1
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	dd00      	ble.n	801d4ba <_dtoa_r+0xb46>
 801d4b8:	001c      	movs	r4, r3
 801d4ba:	9b08      	ldr	r3, [sp, #32]
 801d4bc:	191c      	adds	r4, r3, r4
 801d4be:	2300      	movs	r3, #0
 801d4c0:	9304      	str	r3, [sp, #16]
 801d4c2:	9905      	ldr	r1, [sp, #20]
 801d4c4:	2201      	movs	r2, #1
 801d4c6:	9803      	ldr	r0, [sp, #12]
 801d4c8:	f000 ff28 	bl	801e31c <__lshift>
 801d4cc:	0031      	movs	r1, r6
 801d4ce:	9005      	str	r0, [sp, #20]
 801d4d0:	f000 ff90 	bl	801e3f4 <__mcmp>
 801d4d4:	2800      	cmp	r0, #0
 801d4d6:	dcb3      	bgt.n	801d440 <_dtoa_r+0xacc>
 801d4d8:	d101      	bne.n	801d4de <_dtoa_r+0xb6a>
 801d4da:	07ed      	lsls	r5, r5, #31
 801d4dc:	d4b0      	bmi.n	801d440 <_dtoa_r+0xacc>
 801d4de:	0023      	movs	r3, r4
 801d4e0:	001c      	movs	r4, r3
 801d4e2:	3b01      	subs	r3, #1
 801d4e4:	781a      	ldrb	r2, [r3, #0]
 801d4e6:	2a30      	cmp	r2, #48	@ 0x30
 801d4e8:	d0fa      	beq.n	801d4e0 <_dtoa_r+0xb6c>
 801d4ea:	e5b7      	b.n	801d05c <_dtoa_r+0x6e8>
 801d4ec:	9a08      	ldr	r2, [sp, #32]
 801d4ee:	429a      	cmp	r2, r3
 801d4f0:	d1a7      	bne.n	801d442 <_dtoa_r+0xace>
 801d4f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4f4:	3301      	adds	r3, #1
 801d4f6:	930c      	str	r3, [sp, #48]	@ 0x30
 801d4f8:	2331      	movs	r3, #49	@ 0x31
 801d4fa:	7013      	strb	r3, [r2, #0]
 801d4fc:	e5ae      	b.n	801d05c <_dtoa_r+0x6e8>
 801d4fe:	4b15      	ldr	r3, [pc, #84]	@ (801d554 <_dtoa_r+0xbe0>)
 801d500:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801d502:	9308      	str	r3, [sp, #32]
 801d504:	4b14      	ldr	r3, [pc, #80]	@ (801d558 <_dtoa_r+0xbe4>)
 801d506:	2a00      	cmp	r2, #0
 801d508:	d001      	beq.n	801d50e <_dtoa_r+0xb9a>
 801d50a:	f7ff fa7b 	bl	801ca04 <_dtoa_r+0x90>
 801d50e:	f7ff fa7b 	bl	801ca08 <_dtoa_r+0x94>
 801d512:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d514:	2b01      	cmp	r3, #1
 801d516:	dc00      	bgt.n	801d51a <_dtoa_r+0xba6>
 801d518:	e648      	b.n	801d1ac <_dtoa_r+0x838>
 801d51a:	2001      	movs	r0, #1
 801d51c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d51e:	e665      	b.n	801d1ec <_dtoa_r+0x878>
 801d520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d522:	2b00      	cmp	r3, #0
 801d524:	dc00      	bgt.n	801d528 <_dtoa_r+0xbb4>
 801d526:	e6d6      	b.n	801d2d6 <_dtoa_r+0x962>
 801d528:	2400      	movs	r4, #0
 801d52a:	0031      	movs	r1, r6
 801d52c:	9805      	ldr	r0, [sp, #20]
 801d52e:	f7ff f993 	bl	801c858 <quorem>
 801d532:	9b08      	ldr	r3, [sp, #32]
 801d534:	3030      	adds	r0, #48	@ 0x30
 801d536:	5518      	strb	r0, [r3, r4]
 801d538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d53a:	3401      	adds	r4, #1
 801d53c:	0005      	movs	r5, r0
 801d53e:	429c      	cmp	r4, r3
 801d540:	dab6      	bge.n	801d4b0 <_dtoa_r+0xb3c>
 801d542:	2300      	movs	r3, #0
 801d544:	220a      	movs	r2, #10
 801d546:	9905      	ldr	r1, [sp, #20]
 801d548:	9803      	ldr	r0, [sp, #12]
 801d54a:	f000 fce1 	bl	801df10 <__multadd>
 801d54e:	9005      	str	r0, [sp, #20]
 801d550:	e7eb      	b.n	801d52a <_dtoa_r+0xbb6>
 801d552:	46c0      	nop			@ (mov r8, r8)
 801d554:	080212cd 	.word	0x080212cd
 801d558:	080212d5 	.word	0x080212d5

0801d55c <_free_r>:
 801d55c:	b570      	push	{r4, r5, r6, lr}
 801d55e:	0005      	movs	r5, r0
 801d560:	1e0c      	subs	r4, r1, #0
 801d562:	d010      	beq.n	801d586 <_free_r+0x2a>
 801d564:	3c04      	subs	r4, #4
 801d566:	6823      	ldr	r3, [r4, #0]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	da00      	bge.n	801d56e <_free_r+0x12>
 801d56c:	18e4      	adds	r4, r4, r3
 801d56e:	0028      	movs	r0, r5
 801d570:	f000 fc56 	bl	801de20 <__malloc_lock>
 801d574:	4a1d      	ldr	r2, [pc, #116]	@ (801d5ec <_free_r+0x90>)
 801d576:	6813      	ldr	r3, [r2, #0]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d105      	bne.n	801d588 <_free_r+0x2c>
 801d57c:	6063      	str	r3, [r4, #4]
 801d57e:	6014      	str	r4, [r2, #0]
 801d580:	0028      	movs	r0, r5
 801d582:	f000 fc55 	bl	801de30 <__malloc_unlock>
 801d586:	bd70      	pop	{r4, r5, r6, pc}
 801d588:	42a3      	cmp	r3, r4
 801d58a:	d908      	bls.n	801d59e <_free_r+0x42>
 801d58c:	6820      	ldr	r0, [r4, #0]
 801d58e:	1821      	adds	r1, r4, r0
 801d590:	428b      	cmp	r3, r1
 801d592:	d1f3      	bne.n	801d57c <_free_r+0x20>
 801d594:	6819      	ldr	r1, [r3, #0]
 801d596:	685b      	ldr	r3, [r3, #4]
 801d598:	1809      	adds	r1, r1, r0
 801d59a:	6021      	str	r1, [r4, #0]
 801d59c:	e7ee      	b.n	801d57c <_free_r+0x20>
 801d59e:	001a      	movs	r2, r3
 801d5a0:	685b      	ldr	r3, [r3, #4]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d001      	beq.n	801d5aa <_free_r+0x4e>
 801d5a6:	42a3      	cmp	r3, r4
 801d5a8:	d9f9      	bls.n	801d59e <_free_r+0x42>
 801d5aa:	6811      	ldr	r1, [r2, #0]
 801d5ac:	1850      	adds	r0, r2, r1
 801d5ae:	42a0      	cmp	r0, r4
 801d5b0:	d10b      	bne.n	801d5ca <_free_r+0x6e>
 801d5b2:	6820      	ldr	r0, [r4, #0]
 801d5b4:	1809      	adds	r1, r1, r0
 801d5b6:	1850      	adds	r0, r2, r1
 801d5b8:	6011      	str	r1, [r2, #0]
 801d5ba:	4283      	cmp	r3, r0
 801d5bc:	d1e0      	bne.n	801d580 <_free_r+0x24>
 801d5be:	6818      	ldr	r0, [r3, #0]
 801d5c0:	685b      	ldr	r3, [r3, #4]
 801d5c2:	1841      	adds	r1, r0, r1
 801d5c4:	6011      	str	r1, [r2, #0]
 801d5c6:	6053      	str	r3, [r2, #4]
 801d5c8:	e7da      	b.n	801d580 <_free_r+0x24>
 801d5ca:	42a0      	cmp	r0, r4
 801d5cc:	d902      	bls.n	801d5d4 <_free_r+0x78>
 801d5ce:	230c      	movs	r3, #12
 801d5d0:	602b      	str	r3, [r5, #0]
 801d5d2:	e7d5      	b.n	801d580 <_free_r+0x24>
 801d5d4:	6820      	ldr	r0, [r4, #0]
 801d5d6:	1821      	adds	r1, r4, r0
 801d5d8:	428b      	cmp	r3, r1
 801d5da:	d103      	bne.n	801d5e4 <_free_r+0x88>
 801d5dc:	6819      	ldr	r1, [r3, #0]
 801d5de:	685b      	ldr	r3, [r3, #4]
 801d5e0:	1809      	adds	r1, r1, r0
 801d5e2:	6021      	str	r1, [r4, #0]
 801d5e4:	6063      	str	r3, [r4, #4]
 801d5e6:	6054      	str	r4, [r2, #4]
 801d5e8:	e7ca      	b.n	801d580 <_free_r+0x24>
 801d5ea:	46c0      	nop			@ (mov r8, r8)
 801d5ec:	200038bc 	.word	0x200038bc

0801d5f0 <rshift>:
 801d5f0:	0002      	movs	r2, r0
 801d5f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5f4:	6904      	ldr	r4, [r0, #16]
 801d5f6:	b085      	sub	sp, #20
 801d5f8:	3214      	adds	r2, #20
 801d5fa:	114b      	asrs	r3, r1, #5
 801d5fc:	0016      	movs	r6, r2
 801d5fe:	9302      	str	r3, [sp, #8]
 801d600:	429c      	cmp	r4, r3
 801d602:	dd31      	ble.n	801d668 <rshift+0x78>
 801d604:	261f      	movs	r6, #31
 801d606:	000f      	movs	r7, r1
 801d608:	009b      	lsls	r3, r3, #2
 801d60a:	00a5      	lsls	r5, r4, #2
 801d60c:	18d3      	adds	r3, r2, r3
 801d60e:	4037      	ands	r7, r6
 801d610:	1955      	adds	r5, r2, r5
 801d612:	9300      	str	r3, [sp, #0]
 801d614:	9701      	str	r7, [sp, #4]
 801d616:	4231      	tst	r1, r6
 801d618:	d10d      	bne.n	801d636 <rshift+0x46>
 801d61a:	0016      	movs	r6, r2
 801d61c:	0019      	movs	r1, r3
 801d61e:	428d      	cmp	r5, r1
 801d620:	d836      	bhi.n	801d690 <rshift+0xa0>
 801d622:	9b00      	ldr	r3, [sp, #0]
 801d624:	2600      	movs	r6, #0
 801d626:	3b03      	subs	r3, #3
 801d628:	429d      	cmp	r5, r3
 801d62a:	d302      	bcc.n	801d632 <rshift+0x42>
 801d62c:	9b02      	ldr	r3, [sp, #8]
 801d62e:	1ae4      	subs	r4, r4, r3
 801d630:	00a6      	lsls	r6, r4, #2
 801d632:	1996      	adds	r6, r2, r6
 801d634:	e018      	b.n	801d668 <rshift+0x78>
 801d636:	2120      	movs	r1, #32
 801d638:	9e01      	ldr	r6, [sp, #4]
 801d63a:	9f01      	ldr	r7, [sp, #4]
 801d63c:	1b89      	subs	r1, r1, r6
 801d63e:	9e00      	ldr	r6, [sp, #0]
 801d640:	9103      	str	r1, [sp, #12]
 801d642:	ce02      	ldmia	r6!, {r1}
 801d644:	4694      	mov	ip, r2
 801d646:	40f9      	lsrs	r1, r7
 801d648:	42b5      	cmp	r5, r6
 801d64a:	d816      	bhi.n	801d67a <rshift+0x8a>
 801d64c:	9b00      	ldr	r3, [sp, #0]
 801d64e:	2600      	movs	r6, #0
 801d650:	3301      	adds	r3, #1
 801d652:	429d      	cmp	r5, r3
 801d654:	d303      	bcc.n	801d65e <rshift+0x6e>
 801d656:	9b02      	ldr	r3, [sp, #8]
 801d658:	1ae4      	subs	r4, r4, r3
 801d65a:	00a6      	lsls	r6, r4, #2
 801d65c:	3e04      	subs	r6, #4
 801d65e:	1996      	adds	r6, r2, r6
 801d660:	6031      	str	r1, [r6, #0]
 801d662:	2900      	cmp	r1, #0
 801d664:	d000      	beq.n	801d668 <rshift+0x78>
 801d666:	3604      	adds	r6, #4
 801d668:	1ab1      	subs	r1, r6, r2
 801d66a:	1089      	asrs	r1, r1, #2
 801d66c:	6101      	str	r1, [r0, #16]
 801d66e:	4296      	cmp	r6, r2
 801d670:	d101      	bne.n	801d676 <rshift+0x86>
 801d672:	2300      	movs	r3, #0
 801d674:	6143      	str	r3, [r0, #20]
 801d676:	b005      	add	sp, #20
 801d678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d67a:	6837      	ldr	r7, [r6, #0]
 801d67c:	9b03      	ldr	r3, [sp, #12]
 801d67e:	409f      	lsls	r7, r3
 801d680:	430f      	orrs	r7, r1
 801d682:	4661      	mov	r1, ip
 801d684:	c180      	stmia	r1!, {r7}
 801d686:	468c      	mov	ip, r1
 801d688:	9b01      	ldr	r3, [sp, #4]
 801d68a:	ce02      	ldmia	r6!, {r1}
 801d68c:	40d9      	lsrs	r1, r3
 801d68e:	e7db      	b.n	801d648 <rshift+0x58>
 801d690:	c980      	ldmia	r1!, {r7}
 801d692:	c680      	stmia	r6!, {r7}
 801d694:	e7c3      	b.n	801d61e <rshift+0x2e>

0801d696 <__hexdig_fun>:
 801d696:	0002      	movs	r2, r0
 801d698:	3a30      	subs	r2, #48	@ 0x30
 801d69a:	0003      	movs	r3, r0
 801d69c:	2a09      	cmp	r2, #9
 801d69e:	d802      	bhi.n	801d6a6 <__hexdig_fun+0x10>
 801d6a0:	3b20      	subs	r3, #32
 801d6a2:	b2d8      	uxtb	r0, r3
 801d6a4:	4770      	bx	lr
 801d6a6:	0002      	movs	r2, r0
 801d6a8:	3a61      	subs	r2, #97	@ 0x61
 801d6aa:	2a05      	cmp	r2, #5
 801d6ac:	d801      	bhi.n	801d6b2 <__hexdig_fun+0x1c>
 801d6ae:	3b47      	subs	r3, #71	@ 0x47
 801d6b0:	e7f7      	b.n	801d6a2 <__hexdig_fun+0xc>
 801d6b2:	001a      	movs	r2, r3
 801d6b4:	3a41      	subs	r2, #65	@ 0x41
 801d6b6:	2000      	movs	r0, #0
 801d6b8:	2a05      	cmp	r2, #5
 801d6ba:	d8f3      	bhi.n	801d6a4 <__hexdig_fun+0xe>
 801d6bc:	3b27      	subs	r3, #39	@ 0x27
 801d6be:	e7f0      	b.n	801d6a2 <__hexdig_fun+0xc>

0801d6c0 <__gethex>:
 801d6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6c2:	b089      	sub	sp, #36	@ 0x24
 801d6c4:	9307      	str	r3, [sp, #28]
 801d6c6:	680b      	ldr	r3, [r1, #0]
 801d6c8:	9201      	str	r2, [sp, #4]
 801d6ca:	9003      	str	r0, [sp, #12]
 801d6cc:	9106      	str	r1, [sp, #24]
 801d6ce:	1c9a      	adds	r2, r3, #2
 801d6d0:	0011      	movs	r1, r2
 801d6d2:	3201      	adds	r2, #1
 801d6d4:	1e50      	subs	r0, r2, #1
 801d6d6:	7800      	ldrb	r0, [r0, #0]
 801d6d8:	2830      	cmp	r0, #48	@ 0x30
 801d6da:	d0f9      	beq.n	801d6d0 <__gethex+0x10>
 801d6dc:	1acb      	subs	r3, r1, r3
 801d6de:	3b02      	subs	r3, #2
 801d6e0:	9305      	str	r3, [sp, #20]
 801d6e2:	9100      	str	r1, [sp, #0]
 801d6e4:	f7ff ffd7 	bl	801d696 <__hexdig_fun>
 801d6e8:	2300      	movs	r3, #0
 801d6ea:	001d      	movs	r5, r3
 801d6ec:	9302      	str	r3, [sp, #8]
 801d6ee:	4298      	cmp	r0, r3
 801d6f0:	d11e      	bne.n	801d730 <__gethex+0x70>
 801d6f2:	2201      	movs	r2, #1
 801d6f4:	49a6      	ldr	r1, [pc, #664]	@ (801d990 <__gethex+0x2d0>)
 801d6f6:	9800      	ldr	r0, [sp, #0]
 801d6f8:	f7fe ffd8 	bl	801c6ac <strncmp>
 801d6fc:	0007      	movs	r7, r0
 801d6fe:	42a8      	cmp	r0, r5
 801d700:	d000      	beq.n	801d704 <__gethex+0x44>
 801d702:	e06a      	b.n	801d7da <__gethex+0x11a>
 801d704:	9b00      	ldr	r3, [sp, #0]
 801d706:	7858      	ldrb	r0, [r3, #1]
 801d708:	1c5c      	adds	r4, r3, #1
 801d70a:	f7ff ffc4 	bl	801d696 <__hexdig_fun>
 801d70e:	2301      	movs	r3, #1
 801d710:	9302      	str	r3, [sp, #8]
 801d712:	42a8      	cmp	r0, r5
 801d714:	d02f      	beq.n	801d776 <__gethex+0xb6>
 801d716:	9400      	str	r4, [sp, #0]
 801d718:	9b00      	ldr	r3, [sp, #0]
 801d71a:	7818      	ldrb	r0, [r3, #0]
 801d71c:	2830      	cmp	r0, #48	@ 0x30
 801d71e:	d009      	beq.n	801d734 <__gethex+0x74>
 801d720:	f7ff ffb9 	bl	801d696 <__hexdig_fun>
 801d724:	4242      	negs	r2, r0
 801d726:	4142      	adcs	r2, r0
 801d728:	2301      	movs	r3, #1
 801d72a:	0025      	movs	r5, r4
 801d72c:	9202      	str	r2, [sp, #8]
 801d72e:	9305      	str	r3, [sp, #20]
 801d730:	9c00      	ldr	r4, [sp, #0]
 801d732:	e004      	b.n	801d73e <__gethex+0x7e>
 801d734:	9b00      	ldr	r3, [sp, #0]
 801d736:	3301      	adds	r3, #1
 801d738:	9300      	str	r3, [sp, #0]
 801d73a:	e7ed      	b.n	801d718 <__gethex+0x58>
 801d73c:	3401      	adds	r4, #1
 801d73e:	7820      	ldrb	r0, [r4, #0]
 801d740:	f7ff ffa9 	bl	801d696 <__hexdig_fun>
 801d744:	1e07      	subs	r7, r0, #0
 801d746:	d1f9      	bne.n	801d73c <__gethex+0x7c>
 801d748:	2201      	movs	r2, #1
 801d74a:	0020      	movs	r0, r4
 801d74c:	4990      	ldr	r1, [pc, #576]	@ (801d990 <__gethex+0x2d0>)
 801d74e:	f7fe ffad 	bl	801c6ac <strncmp>
 801d752:	2800      	cmp	r0, #0
 801d754:	d10d      	bne.n	801d772 <__gethex+0xb2>
 801d756:	2d00      	cmp	r5, #0
 801d758:	d106      	bne.n	801d768 <__gethex+0xa8>
 801d75a:	3401      	adds	r4, #1
 801d75c:	0025      	movs	r5, r4
 801d75e:	7820      	ldrb	r0, [r4, #0]
 801d760:	f7ff ff99 	bl	801d696 <__hexdig_fun>
 801d764:	2800      	cmp	r0, #0
 801d766:	d102      	bne.n	801d76e <__gethex+0xae>
 801d768:	1b2d      	subs	r5, r5, r4
 801d76a:	00af      	lsls	r7, r5, #2
 801d76c:	e003      	b.n	801d776 <__gethex+0xb6>
 801d76e:	3401      	adds	r4, #1
 801d770:	e7f5      	b.n	801d75e <__gethex+0x9e>
 801d772:	2d00      	cmp	r5, #0
 801d774:	d1f8      	bne.n	801d768 <__gethex+0xa8>
 801d776:	2220      	movs	r2, #32
 801d778:	7823      	ldrb	r3, [r4, #0]
 801d77a:	0026      	movs	r6, r4
 801d77c:	4393      	bics	r3, r2
 801d77e:	2b50      	cmp	r3, #80	@ 0x50
 801d780:	d11d      	bne.n	801d7be <__gethex+0xfe>
 801d782:	7863      	ldrb	r3, [r4, #1]
 801d784:	2b2b      	cmp	r3, #43	@ 0x2b
 801d786:	d02d      	beq.n	801d7e4 <__gethex+0x124>
 801d788:	2b2d      	cmp	r3, #45	@ 0x2d
 801d78a:	d02f      	beq.n	801d7ec <__gethex+0x12c>
 801d78c:	2300      	movs	r3, #0
 801d78e:	1c66      	adds	r6, r4, #1
 801d790:	9304      	str	r3, [sp, #16]
 801d792:	7830      	ldrb	r0, [r6, #0]
 801d794:	f7ff ff7f 	bl	801d696 <__hexdig_fun>
 801d798:	1e43      	subs	r3, r0, #1
 801d79a:	b2db      	uxtb	r3, r3
 801d79c:	0005      	movs	r5, r0
 801d79e:	2b18      	cmp	r3, #24
 801d7a0:	d82a      	bhi.n	801d7f8 <__gethex+0x138>
 801d7a2:	7870      	ldrb	r0, [r6, #1]
 801d7a4:	f7ff ff77 	bl	801d696 <__hexdig_fun>
 801d7a8:	1e43      	subs	r3, r0, #1
 801d7aa:	b2db      	uxtb	r3, r3
 801d7ac:	3601      	adds	r6, #1
 801d7ae:	3d10      	subs	r5, #16
 801d7b0:	2b18      	cmp	r3, #24
 801d7b2:	d91d      	bls.n	801d7f0 <__gethex+0x130>
 801d7b4:	9b04      	ldr	r3, [sp, #16]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d000      	beq.n	801d7bc <__gethex+0xfc>
 801d7ba:	426d      	negs	r5, r5
 801d7bc:	197f      	adds	r7, r7, r5
 801d7be:	9b06      	ldr	r3, [sp, #24]
 801d7c0:	601e      	str	r6, [r3, #0]
 801d7c2:	9b02      	ldr	r3, [sp, #8]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d019      	beq.n	801d7fc <__gethex+0x13c>
 801d7c8:	9b05      	ldr	r3, [sp, #20]
 801d7ca:	2606      	movs	r6, #6
 801d7cc:	425a      	negs	r2, r3
 801d7ce:	4153      	adcs	r3, r2
 801d7d0:	425b      	negs	r3, r3
 801d7d2:	401e      	ands	r6, r3
 801d7d4:	0030      	movs	r0, r6
 801d7d6:	b009      	add	sp, #36	@ 0x24
 801d7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7da:	2301      	movs	r3, #1
 801d7dc:	2700      	movs	r7, #0
 801d7de:	9c00      	ldr	r4, [sp, #0]
 801d7e0:	9302      	str	r3, [sp, #8]
 801d7e2:	e7c8      	b.n	801d776 <__gethex+0xb6>
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	9304      	str	r3, [sp, #16]
 801d7e8:	1ca6      	adds	r6, r4, #2
 801d7ea:	e7d2      	b.n	801d792 <__gethex+0xd2>
 801d7ec:	2301      	movs	r3, #1
 801d7ee:	e7fa      	b.n	801d7e6 <__gethex+0x126>
 801d7f0:	230a      	movs	r3, #10
 801d7f2:	435d      	muls	r5, r3
 801d7f4:	182d      	adds	r5, r5, r0
 801d7f6:	e7d4      	b.n	801d7a2 <__gethex+0xe2>
 801d7f8:	0026      	movs	r6, r4
 801d7fa:	e7e0      	b.n	801d7be <__gethex+0xfe>
 801d7fc:	9b00      	ldr	r3, [sp, #0]
 801d7fe:	9902      	ldr	r1, [sp, #8]
 801d800:	1ae3      	subs	r3, r4, r3
 801d802:	3b01      	subs	r3, #1
 801d804:	2b07      	cmp	r3, #7
 801d806:	dc0a      	bgt.n	801d81e <__gethex+0x15e>
 801d808:	9803      	ldr	r0, [sp, #12]
 801d80a:	f000 fb19 	bl	801de40 <_Balloc>
 801d80e:	1e05      	subs	r5, r0, #0
 801d810:	d108      	bne.n	801d824 <__gethex+0x164>
 801d812:	002a      	movs	r2, r5
 801d814:	21e4      	movs	r1, #228	@ 0xe4
 801d816:	4b5f      	ldr	r3, [pc, #380]	@ (801d994 <__gethex+0x2d4>)
 801d818:	485f      	ldr	r0, [pc, #380]	@ (801d998 <__gethex+0x2d8>)
 801d81a:	f001 fc03 	bl	801f024 <__assert_func>
 801d81e:	3101      	adds	r1, #1
 801d820:	105b      	asrs	r3, r3, #1
 801d822:	e7ef      	b.n	801d804 <__gethex+0x144>
 801d824:	0003      	movs	r3, r0
 801d826:	3314      	adds	r3, #20
 801d828:	9302      	str	r3, [sp, #8]
 801d82a:	9305      	str	r3, [sp, #20]
 801d82c:	2300      	movs	r3, #0
 801d82e:	001e      	movs	r6, r3
 801d830:	9304      	str	r3, [sp, #16]
 801d832:	9b00      	ldr	r3, [sp, #0]
 801d834:	42a3      	cmp	r3, r4
 801d836:	d338      	bcc.n	801d8aa <__gethex+0x1ea>
 801d838:	9c05      	ldr	r4, [sp, #20]
 801d83a:	9b02      	ldr	r3, [sp, #8]
 801d83c:	c440      	stmia	r4!, {r6}
 801d83e:	1ae4      	subs	r4, r4, r3
 801d840:	10a4      	asrs	r4, r4, #2
 801d842:	0030      	movs	r0, r6
 801d844:	612c      	str	r4, [r5, #16]
 801d846:	f000 fbf3 	bl	801e030 <__hi0bits>
 801d84a:	9b01      	ldr	r3, [sp, #4]
 801d84c:	0164      	lsls	r4, r4, #5
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	1a26      	subs	r6, r4, r0
 801d852:	9300      	str	r3, [sp, #0]
 801d854:	429e      	cmp	r6, r3
 801d856:	dd52      	ble.n	801d8fe <__gethex+0x23e>
 801d858:	1af6      	subs	r6, r6, r3
 801d85a:	0031      	movs	r1, r6
 801d85c:	0028      	movs	r0, r5
 801d85e:	f000 ff96 	bl	801e78e <__any_on>
 801d862:	1e04      	subs	r4, r0, #0
 801d864:	d00f      	beq.n	801d886 <__gethex+0x1c6>
 801d866:	2401      	movs	r4, #1
 801d868:	231f      	movs	r3, #31
 801d86a:	0020      	movs	r0, r4
 801d86c:	1e72      	subs	r2, r6, #1
 801d86e:	4013      	ands	r3, r2
 801d870:	4098      	lsls	r0, r3
 801d872:	0003      	movs	r3, r0
 801d874:	1151      	asrs	r1, r2, #5
 801d876:	9802      	ldr	r0, [sp, #8]
 801d878:	0089      	lsls	r1, r1, #2
 801d87a:	5809      	ldr	r1, [r1, r0]
 801d87c:	4219      	tst	r1, r3
 801d87e:	d002      	beq.n	801d886 <__gethex+0x1c6>
 801d880:	42a2      	cmp	r2, r4
 801d882:	dc34      	bgt.n	801d8ee <__gethex+0x22e>
 801d884:	2402      	movs	r4, #2
 801d886:	0031      	movs	r1, r6
 801d888:	0028      	movs	r0, r5
 801d88a:	f7ff feb1 	bl	801d5f0 <rshift>
 801d88e:	19bf      	adds	r7, r7, r6
 801d890:	9b01      	ldr	r3, [sp, #4]
 801d892:	689b      	ldr	r3, [r3, #8]
 801d894:	42bb      	cmp	r3, r7
 801d896:	da42      	bge.n	801d91e <__gethex+0x25e>
 801d898:	0029      	movs	r1, r5
 801d89a:	9803      	ldr	r0, [sp, #12]
 801d89c:	f000 fb14 	bl	801dec8 <_Bfree>
 801d8a0:	2300      	movs	r3, #0
 801d8a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8a4:	26a3      	movs	r6, #163	@ 0xa3
 801d8a6:	6013      	str	r3, [r2, #0]
 801d8a8:	e794      	b.n	801d7d4 <__gethex+0x114>
 801d8aa:	3c01      	subs	r4, #1
 801d8ac:	7823      	ldrb	r3, [r4, #0]
 801d8ae:	2b2e      	cmp	r3, #46	@ 0x2e
 801d8b0:	d012      	beq.n	801d8d8 <__gethex+0x218>
 801d8b2:	9b04      	ldr	r3, [sp, #16]
 801d8b4:	2b20      	cmp	r3, #32
 801d8b6:	d104      	bne.n	801d8c2 <__gethex+0x202>
 801d8b8:	9b05      	ldr	r3, [sp, #20]
 801d8ba:	c340      	stmia	r3!, {r6}
 801d8bc:	2600      	movs	r6, #0
 801d8be:	9305      	str	r3, [sp, #20]
 801d8c0:	9604      	str	r6, [sp, #16]
 801d8c2:	7820      	ldrb	r0, [r4, #0]
 801d8c4:	f7ff fee7 	bl	801d696 <__hexdig_fun>
 801d8c8:	230f      	movs	r3, #15
 801d8ca:	4018      	ands	r0, r3
 801d8cc:	9b04      	ldr	r3, [sp, #16]
 801d8ce:	4098      	lsls	r0, r3
 801d8d0:	3304      	adds	r3, #4
 801d8d2:	4306      	orrs	r6, r0
 801d8d4:	9304      	str	r3, [sp, #16]
 801d8d6:	e7ac      	b.n	801d832 <__gethex+0x172>
 801d8d8:	9b00      	ldr	r3, [sp, #0]
 801d8da:	42a3      	cmp	r3, r4
 801d8dc:	d8e9      	bhi.n	801d8b2 <__gethex+0x1f2>
 801d8de:	2201      	movs	r2, #1
 801d8e0:	0020      	movs	r0, r4
 801d8e2:	492b      	ldr	r1, [pc, #172]	@ (801d990 <__gethex+0x2d0>)
 801d8e4:	f7fe fee2 	bl	801c6ac <strncmp>
 801d8e8:	2800      	cmp	r0, #0
 801d8ea:	d1e2      	bne.n	801d8b2 <__gethex+0x1f2>
 801d8ec:	e7a1      	b.n	801d832 <__gethex+0x172>
 801d8ee:	0028      	movs	r0, r5
 801d8f0:	1eb1      	subs	r1, r6, #2
 801d8f2:	f000 ff4c 	bl	801e78e <__any_on>
 801d8f6:	2800      	cmp	r0, #0
 801d8f8:	d0c4      	beq.n	801d884 <__gethex+0x1c4>
 801d8fa:	2403      	movs	r4, #3
 801d8fc:	e7c3      	b.n	801d886 <__gethex+0x1c6>
 801d8fe:	9b00      	ldr	r3, [sp, #0]
 801d900:	2400      	movs	r4, #0
 801d902:	429e      	cmp	r6, r3
 801d904:	dac4      	bge.n	801d890 <__gethex+0x1d0>
 801d906:	1b9e      	subs	r6, r3, r6
 801d908:	0029      	movs	r1, r5
 801d90a:	0032      	movs	r2, r6
 801d90c:	9803      	ldr	r0, [sp, #12]
 801d90e:	f000 fd05 	bl	801e31c <__lshift>
 801d912:	0003      	movs	r3, r0
 801d914:	3314      	adds	r3, #20
 801d916:	0005      	movs	r5, r0
 801d918:	1bbf      	subs	r7, r7, r6
 801d91a:	9302      	str	r3, [sp, #8]
 801d91c:	e7b8      	b.n	801d890 <__gethex+0x1d0>
 801d91e:	9b01      	ldr	r3, [sp, #4]
 801d920:	685e      	ldr	r6, [r3, #4]
 801d922:	42be      	cmp	r6, r7
 801d924:	dd6f      	ble.n	801da06 <__gethex+0x346>
 801d926:	9b00      	ldr	r3, [sp, #0]
 801d928:	1bf6      	subs	r6, r6, r7
 801d92a:	42b3      	cmp	r3, r6
 801d92c:	dc36      	bgt.n	801d99c <__gethex+0x2dc>
 801d92e:	9b01      	ldr	r3, [sp, #4]
 801d930:	68db      	ldr	r3, [r3, #12]
 801d932:	2b02      	cmp	r3, #2
 801d934:	d024      	beq.n	801d980 <__gethex+0x2c0>
 801d936:	2b03      	cmp	r3, #3
 801d938:	d026      	beq.n	801d988 <__gethex+0x2c8>
 801d93a:	2b01      	cmp	r3, #1
 801d93c:	d117      	bne.n	801d96e <__gethex+0x2ae>
 801d93e:	9b00      	ldr	r3, [sp, #0]
 801d940:	42b3      	cmp	r3, r6
 801d942:	d114      	bne.n	801d96e <__gethex+0x2ae>
 801d944:	2b01      	cmp	r3, #1
 801d946:	d10b      	bne.n	801d960 <__gethex+0x2a0>
 801d948:	9b01      	ldr	r3, [sp, #4]
 801d94a:	9a07      	ldr	r2, [sp, #28]
 801d94c:	685b      	ldr	r3, [r3, #4]
 801d94e:	2662      	movs	r6, #98	@ 0x62
 801d950:	6013      	str	r3, [r2, #0]
 801d952:	2301      	movs	r3, #1
 801d954:	9a02      	ldr	r2, [sp, #8]
 801d956:	612b      	str	r3, [r5, #16]
 801d958:	6013      	str	r3, [r2, #0]
 801d95a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d95c:	601d      	str	r5, [r3, #0]
 801d95e:	e739      	b.n	801d7d4 <__gethex+0x114>
 801d960:	9900      	ldr	r1, [sp, #0]
 801d962:	0028      	movs	r0, r5
 801d964:	3901      	subs	r1, #1
 801d966:	f000 ff12 	bl	801e78e <__any_on>
 801d96a:	2800      	cmp	r0, #0
 801d96c:	d1ec      	bne.n	801d948 <__gethex+0x288>
 801d96e:	0029      	movs	r1, r5
 801d970:	9803      	ldr	r0, [sp, #12]
 801d972:	f000 faa9 	bl	801dec8 <_Bfree>
 801d976:	2300      	movs	r3, #0
 801d978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d97a:	2650      	movs	r6, #80	@ 0x50
 801d97c:	6013      	str	r3, [r2, #0]
 801d97e:	e729      	b.n	801d7d4 <__gethex+0x114>
 801d980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d982:	2b00      	cmp	r3, #0
 801d984:	d1f3      	bne.n	801d96e <__gethex+0x2ae>
 801d986:	e7df      	b.n	801d948 <__gethex+0x288>
 801d988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d1dc      	bne.n	801d948 <__gethex+0x288>
 801d98e:	e7ee      	b.n	801d96e <__gethex+0x2ae>
 801d990:	0802113c 	.word	0x0802113c
 801d994:	08021349 	.word	0x08021349
 801d998:	0802135a 	.word	0x0802135a
 801d99c:	1e77      	subs	r7, r6, #1
 801d99e:	2c00      	cmp	r4, #0
 801d9a0:	d12f      	bne.n	801da02 <__gethex+0x342>
 801d9a2:	2f00      	cmp	r7, #0
 801d9a4:	d004      	beq.n	801d9b0 <__gethex+0x2f0>
 801d9a6:	0039      	movs	r1, r7
 801d9a8:	0028      	movs	r0, r5
 801d9aa:	f000 fef0 	bl	801e78e <__any_on>
 801d9ae:	0004      	movs	r4, r0
 801d9b0:	231f      	movs	r3, #31
 801d9b2:	117a      	asrs	r2, r7, #5
 801d9b4:	401f      	ands	r7, r3
 801d9b6:	3b1e      	subs	r3, #30
 801d9b8:	40bb      	lsls	r3, r7
 801d9ba:	9902      	ldr	r1, [sp, #8]
 801d9bc:	0092      	lsls	r2, r2, #2
 801d9be:	5852      	ldr	r2, [r2, r1]
 801d9c0:	421a      	tst	r2, r3
 801d9c2:	d001      	beq.n	801d9c8 <__gethex+0x308>
 801d9c4:	2302      	movs	r3, #2
 801d9c6:	431c      	orrs	r4, r3
 801d9c8:	9b00      	ldr	r3, [sp, #0]
 801d9ca:	0031      	movs	r1, r6
 801d9cc:	1b9b      	subs	r3, r3, r6
 801d9ce:	2602      	movs	r6, #2
 801d9d0:	0028      	movs	r0, r5
 801d9d2:	9300      	str	r3, [sp, #0]
 801d9d4:	f7ff fe0c 	bl	801d5f0 <rshift>
 801d9d8:	9b01      	ldr	r3, [sp, #4]
 801d9da:	685f      	ldr	r7, [r3, #4]
 801d9dc:	2c00      	cmp	r4, #0
 801d9de:	d03f      	beq.n	801da60 <__gethex+0x3a0>
 801d9e0:	9b01      	ldr	r3, [sp, #4]
 801d9e2:	68db      	ldr	r3, [r3, #12]
 801d9e4:	2b02      	cmp	r3, #2
 801d9e6:	d010      	beq.n	801da0a <__gethex+0x34a>
 801d9e8:	2b03      	cmp	r3, #3
 801d9ea:	d012      	beq.n	801da12 <__gethex+0x352>
 801d9ec:	2b01      	cmp	r3, #1
 801d9ee:	d106      	bne.n	801d9fe <__gethex+0x33e>
 801d9f0:	07a2      	lsls	r2, r4, #30
 801d9f2:	d504      	bpl.n	801d9fe <__gethex+0x33e>
 801d9f4:	9a02      	ldr	r2, [sp, #8]
 801d9f6:	6812      	ldr	r2, [r2, #0]
 801d9f8:	4314      	orrs	r4, r2
 801d9fa:	421c      	tst	r4, r3
 801d9fc:	d10c      	bne.n	801da18 <__gethex+0x358>
 801d9fe:	2310      	movs	r3, #16
 801da00:	e02d      	b.n	801da5e <__gethex+0x39e>
 801da02:	2401      	movs	r4, #1
 801da04:	e7d4      	b.n	801d9b0 <__gethex+0x2f0>
 801da06:	2601      	movs	r6, #1
 801da08:	e7e8      	b.n	801d9dc <__gethex+0x31c>
 801da0a:	2301      	movs	r3, #1
 801da0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801da0e:	1a9b      	subs	r3, r3, r2
 801da10:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da14:	2b00      	cmp	r3, #0
 801da16:	d0f2      	beq.n	801d9fe <__gethex+0x33e>
 801da18:	692b      	ldr	r3, [r5, #16]
 801da1a:	2000      	movs	r0, #0
 801da1c:	9302      	str	r3, [sp, #8]
 801da1e:	009b      	lsls	r3, r3, #2
 801da20:	9304      	str	r3, [sp, #16]
 801da22:	002b      	movs	r3, r5
 801da24:	9a04      	ldr	r2, [sp, #16]
 801da26:	3314      	adds	r3, #20
 801da28:	1899      	adds	r1, r3, r2
 801da2a:	681a      	ldr	r2, [r3, #0]
 801da2c:	1c54      	adds	r4, r2, #1
 801da2e:	d01c      	beq.n	801da6a <__gethex+0x3aa>
 801da30:	3201      	adds	r2, #1
 801da32:	601a      	str	r2, [r3, #0]
 801da34:	002b      	movs	r3, r5
 801da36:	3314      	adds	r3, #20
 801da38:	2e02      	cmp	r6, #2
 801da3a:	d13f      	bne.n	801dabc <__gethex+0x3fc>
 801da3c:	9a01      	ldr	r2, [sp, #4]
 801da3e:	9900      	ldr	r1, [sp, #0]
 801da40:	6812      	ldr	r2, [r2, #0]
 801da42:	3a01      	subs	r2, #1
 801da44:	428a      	cmp	r2, r1
 801da46:	d109      	bne.n	801da5c <__gethex+0x39c>
 801da48:	000a      	movs	r2, r1
 801da4a:	201f      	movs	r0, #31
 801da4c:	4010      	ands	r0, r2
 801da4e:	2201      	movs	r2, #1
 801da50:	4082      	lsls	r2, r0
 801da52:	1149      	asrs	r1, r1, #5
 801da54:	0089      	lsls	r1, r1, #2
 801da56:	58cb      	ldr	r3, [r1, r3]
 801da58:	4213      	tst	r3, r2
 801da5a:	d13d      	bne.n	801dad8 <__gethex+0x418>
 801da5c:	2320      	movs	r3, #32
 801da5e:	431e      	orrs	r6, r3
 801da60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da62:	601d      	str	r5, [r3, #0]
 801da64:	9b07      	ldr	r3, [sp, #28]
 801da66:	601f      	str	r7, [r3, #0]
 801da68:	e6b4      	b.n	801d7d4 <__gethex+0x114>
 801da6a:	c301      	stmia	r3!, {r0}
 801da6c:	4299      	cmp	r1, r3
 801da6e:	d8dc      	bhi.n	801da2a <__gethex+0x36a>
 801da70:	68ab      	ldr	r3, [r5, #8]
 801da72:	9a02      	ldr	r2, [sp, #8]
 801da74:	429a      	cmp	r2, r3
 801da76:	db18      	blt.n	801daaa <__gethex+0x3ea>
 801da78:	6869      	ldr	r1, [r5, #4]
 801da7a:	9803      	ldr	r0, [sp, #12]
 801da7c:	3101      	adds	r1, #1
 801da7e:	f000 f9df 	bl	801de40 <_Balloc>
 801da82:	1e04      	subs	r4, r0, #0
 801da84:	d104      	bne.n	801da90 <__gethex+0x3d0>
 801da86:	0022      	movs	r2, r4
 801da88:	2184      	movs	r1, #132	@ 0x84
 801da8a:	4b1d      	ldr	r3, [pc, #116]	@ (801db00 <__gethex+0x440>)
 801da8c:	481d      	ldr	r0, [pc, #116]	@ (801db04 <__gethex+0x444>)
 801da8e:	e6c4      	b.n	801d81a <__gethex+0x15a>
 801da90:	0029      	movs	r1, r5
 801da92:	692a      	ldr	r2, [r5, #16]
 801da94:	310c      	adds	r1, #12
 801da96:	3202      	adds	r2, #2
 801da98:	0092      	lsls	r2, r2, #2
 801da9a:	300c      	adds	r0, #12
 801da9c:	f7fe fecc 	bl	801c838 <memcpy>
 801daa0:	0029      	movs	r1, r5
 801daa2:	9803      	ldr	r0, [sp, #12]
 801daa4:	f000 fa10 	bl	801dec8 <_Bfree>
 801daa8:	0025      	movs	r5, r4
 801daaa:	692b      	ldr	r3, [r5, #16]
 801daac:	1c5a      	adds	r2, r3, #1
 801daae:	612a      	str	r2, [r5, #16]
 801dab0:	2201      	movs	r2, #1
 801dab2:	3304      	adds	r3, #4
 801dab4:	009b      	lsls	r3, r3, #2
 801dab6:	18eb      	adds	r3, r5, r3
 801dab8:	605a      	str	r2, [r3, #4]
 801daba:	e7bb      	b.n	801da34 <__gethex+0x374>
 801dabc:	692a      	ldr	r2, [r5, #16]
 801dabe:	9902      	ldr	r1, [sp, #8]
 801dac0:	428a      	cmp	r2, r1
 801dac2:	dd0b      	ble.n	801dadc <__gethex+0x41c>
 801dac4:	2101      	movs	r1, #1
 801dac6:	0028      	movs	r0, r5
 801dac8:	f7ff fd92 	bl	801d5f0 <rshift>
 801dacc:	9b01      	ldr	r3, [sp, #4]
 801dace:	3701      	adds	r7, #1
 801dad0:	689b      	ldr	r3, [r3, #8]
 801dad2:	42bb      	cmp	r3, r7
 801dad4:	da00      	bge.n	801dad8 <__gethex+0x418>
 801dad6:	e6df      	b.n	801d898 <__gethex+0x1d8>
 801dad8:	2601      	movs	r6, #1
 801dada:	e7bf      	b.n	801da5c <__gethex+0x39c>
 801dadc:	221f      	movs	r2, #31
 801dade:	9c00      	ldr	r4, [sp, #0]
 801dae0:	9900      	ldr	r1, [sp, #0]
 801dae2:	4014      	ands	r4, r2
 801dae4:	4211      	tst	r1, r2
 801dae6:	d0f7      	beq.n	801dad8 <__gethex+0x418>
 801dae8:	9a04      	ldr	r2, [sp, #16]
 801daea:	189b      	adds	r3, r3, r2
 801daec:	3b04      	subs	r3, #4
 801daee:	6818      	ldr	r0, [r3, #0]
 801daf0:	f000 fa9e 	bl	801e030 <__hi0bits>
 801daf4:	2320      	movs	r3, #32
 801daf6:	1b1b      	subs	r3, r3, r4
 801daf8:	4298      	cmp	r0, r3
 801dafa:	dbe3      	blt.n	801dac4 <__gethex+0x404>
 801dafc:	e7ec      	b.n	801dad8 <__gethex+0x418>
 801dafe:	46c0      	nop			@ (mov r8, r8)
 801db00:	08021349 	.word	0x08021349
 801db04:	0802135a 	.word	0x0802135a

0801db08 <L_shift>:
 801db08:	2308      	movs	r3, #8
 801db0a:	b570      	push	{r4, r5, r6, lr}
 801db0c:	2520      	movs	r5, #32
 801db0e:	1a9a      	subs	r2, r3, r2
 801db10:	0092      	lsls	r2, r2, #2
 801db12:	1aad      	subs	r5, r5, r2
 801db14:	6843      	ldr	r3, [r0, #4]
 801db16:	6804      	ldr	r4, [r0, #0]
 801db18:	001e      	movs	r6, r3
 801db1a:	40ae      	lsls	r6, r5
 801db1c:	40d3      	lsrs	r3, r2
 801db1e:	4334      	orrs	r4, r6
 801db20:	6004      	str	r4, [r0, #0]
 801db22:	6043      	str	r3, [r0, #4]
 801db24:	3004      	adds	r0, #4
 801db26:	4288      	cmp	r0, r1
 801db28:	d3f4      	bcc.n	801db14 <L_shift+0xc>
 801db2a:	bd70      	pop	{r4, r5, r6, pc}

0801db2c <__match>:
 801db2c:	b530      	push	{r4, r5, lr}
 801db2e:	6803      	ldr	r3, [r0, #0]
 801db30:	780c      	ldrb	r4, [r1, #0]
 801db32:	3301      	adds	r3, #1
 801db34:	2c00      	cmp	r4, #0
 801db36:	d102      	bne.n	801db3e <__match+0x12>
 801db38:	6003      	str	r3, [r0, #0]
 801db3a:	2001      	movs	r0, #1
 801db3c:	bd30      	pop	{r4, r5, pc}
 801db3e:	781a      	ldrb	r2, [r3, #0]
 801db40:	0015      	movs	r5, r2
 801db42:	3d41      	subs	r5, #65	@ 0x41
 801db44:	2d19      	cmp	r5, #25
 801db46:	d800      	bhi.n	801db4a <__match+0x1e>
 801db48:	3220      	adds	r2, #32
 801db4a:	3101      	adds	r1, #1
 801db4c:	42a2      	cmp	r2, r4
 801db4e:	d0ef      	beq.n	801db30 <__match+0x4>
 801db50:	2000      	movs	r0, #0
 801db52:	e7f3      	b.n	801db3c <__match+0x10>

0801db54 <__hexnan>:
 801db54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db56:	680b      	ldr	r3, [r1, #0]
 801db58:	b08b      	sub	sp, #44	@ 0x2c
 801db5a:	9201      	str	r2, [sp, #4]
 801db5c:	9901      	ldr	r1, [sp, #4]
 801db5e:	115a      	asrs	r2, r3, #5
 801db60:	0092      	lsls	r2, r2, #2
 801db62:	188a      	adds	r2, r1, r2
 801db64:	9202      	str	r2, [sp, #8]
 801db66:	0019      	movs	r1, r3
 801db68:	221f      	movs	r2, #31
 801db6a:	4011      	ands	r1, r2
 801db6c:	9008      	str	r0, [sp, #32]
 801db6e:	9106      	str	r1, [sp, #24]
 801db70:	4213      	tst	r3, r2
 801db72:	d002      	beq.n	801db7a <__hexnan+0x26>
 801db74:	9b02      	ldr	r3, [sp, #8]
 801db76:	3304      	adds	r3, #4
 801db78:	9302      	str	r3, [sp, #8]
 801db7a:	9b02      	ldr	r3, [sp, #8]
 801db7c:	2500      	movs	r5, #0
 801db7e:	1f1f      	subs	r7, r3, #4
 801db80:	003e      	movs	r6, r7
 801db82:	003c      	movs	r4, r7
 801db84:	9b08      	ldr	r3, [sp, #32]
 801db86:	603d      	str	r5, [r7, #0]
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	9507      	str	r5, [sp, #28]
 801db8c:	9305      	str	r3, [sp, #20]
 801db8e:	9503      	str	r5, [sp, #12]
 801db90:	9b05      	ldr	r3, [sp, #20]
 801db92:	3301      	adds	r3, #1
 801db94:	9309      	str	r3, [sp, #36]	@ 0x24
 801db96:	9b05      	ldr	r3, [sp, #20]
 801db98:	785b      	ldrb	r3, [r3, #1]
 801db9a:	9304      	str	r3, [sp, #16]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d028      	beq.n	801dbf2 <__hexnan+0x9e>
 801dba0:	9804      	ldr	r0, [sp, #16]
 801dba2:	f7ff fd78 	bl	801d696 <__hexdig_fun>
 801dba6:	2800      	cmp	r0, #0
 801dba8:	d155      	bne.n	801dc56 <__hexnan+0x102>
 801dbaa:	9b04      	ldr	r3, [sp, #16]
 801dbac:	2b20      	cmp	r3, #32
 801dbae:	d819      	bhi.n	801dbe4 <__hexnan+0x90>
 801dbb0:	9b03      	ldr	r3, [sp, #12]
 801dbb2:	9a07      	ldr	r2, [sp, #28]
 801dbb4:	4293      	cmp	r3, r2
 801dbb6:	dd12      	ble.n	801dbde <__hexnan+0x8a>
 801dbb8:	42b4      	cmp	r4, r6
 801dbba:	d206      	bcs.n	801dbca <__hexnan+0x76>
 801dbbc:	2d07      	cmp	r5, #7
 801dbbe:	dc04      	bgt.n	801dbca <__hexnan+0x76>
 801dbc0:	002a      	movs	r2, r5
 801dbc2:	0031      	movs	r1, r6
 801dbc4:	0020      	movs	r0, r4
 801dbc6:	f7ff ff9f 	bl	801db08 <L_shift>
 801dbca:	9b01      	ldr	r3, [sp, #4]
 801dbcc:	2508      	movs	r5, #8
 801dbce:	429c      	cmp	r4, r3
 801dbd0:	d905      	bls.n	801dbde <__hexnan+0x8a>
 801dbd2:	1f26      	subs	r6, r4, #4
 801dbd4:	2500      	movs	r5, #0
 801dbd6:	0034      	movs	r4, r6
 801dbd8:	9b03      	ldr	r3, [sp, #12]
 801dbda:	6035      	str	r5, [r6, #0]
 801dbdc:	9307      	str	r3, [sp, #28]
 801dbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbe0:	9305      	str	r3, [sp, #20]
 801dbe2:	e7d5      	b.n	801db90 <__hexnan+0x3c>
 801dbe4:	9b04      	ldr	r3, [sp, #16]
 801dbe6:	2b29      	cmp	r3, #41	@ 0x29
 801dbe8:	d15a      	bne.n	801dca0 <__hexnan+0x14c>
 801dbea:	9b05      	ldr	r3, [sp, #20]
 801dbec:	9a08      	ldr	r2, [sp, #32]
 801dbee:	3302      	adds	r3, #2
 801dbf0:	6013      	str	r3, [r2, #0]
 801dbf2:	9b03      	ldr	r3, [sp, #12]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d053      	beq.n	801dca0 <__hexnan+0x14c>
 801dbf8:	42b4      	cmp	r4, r6
 801dbfa:	d206      	bcs.n	801dc0a <__hexnan+0xb6>
 801dbfc:	2d07      	cmp	r5, #7
 801dbfe:	dc04      	bgt.n	801dc0a <__hexnan+0xb6>
 801dc00:	002a      	movs	r2, r5
 801dc02:	0031      	movs	r1, r6
 801dc04:	0020      	movs	r0, r4
 801dc06:	f7ff ff7f 	bl	801db08 <L_shift>
 801dc0a:	9b01      	ldr	r3, [sp, #4]
 801dc0c:	429c      	cmp	r4, r3
 801dc0e:	d936      	bls.n	801dc7e <__hexnan+0x12a>
 801dc10:	001a      	movs	r2, r3
 801dc12:	0023      	movs	r3, r4
 801dc14:	cb02      	ldmia	r3!, {r1}
 801dc16:	c202      	stmia	r2!, {r1}
 801dc18:	429f      	cmp	r7, r3
 801dc1a:	d2fb      	bcs.n	801dc14 <__hexnan+0xc0>
 801dc1c:	9b02      	ldr	r3, [sp, #8]
 801dc1e:	1c61      	adds	r1, r4, #1
 801dc20:	1eda      	subs	r2, r3, #3
 801dc22:	2304      	movs	r3, #4
 801dc24:	4291      	cmp	r1, r2
 801dc26:	d805      	bhi.n	801dc34 <__hexnan+0xe0>
 801dc28:	9b02      	ldr	r3, [sp, #8]
 801dc2a:	3b04      	subs	r3, #4
 801dc2c:	1b1b      	subs	r3, r3, r4
 801dc2e:	089b      	lsrs	r3, r3, #2
 801dc30:	3301      	adds	r3, #1
 801dc32:	009b      	lsls	r3, r3, #2
 801dc34:	9a01      	ldr	r2, [sp, #4]
 801dc36:	18d3      	adds	r3, r2, r3
 801dc38:	2200      	movs	r2, #0
 801dc3a:	c304      	stmia	r3!, {r2}
 801dc3c:	429f      	cmp	r7, r3
 801dc3e:	d2fc      	bcs.n	801dc3a <__hexnan+0xe6>
 801dc40:	683b      	ldr	r3, [r7, #0]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d104      	bne.n	801dc50 <__hexnan+0xfc>
 801dc46:	9b01      	ldr	r3, [sp, #4]
 801dc48:	429f      	cmp	r7, r3
 801dc4a:	d127      	bne.n	801dc9c <__hexnan+0x148>
 801dc4c:	2301      	movs	r3, #1
 801dc4e:	603b      	str	r3, [r7, #0]
 801dc50:	2005      	movs	r0, #5
 801dc52:	b00b      	add	sp, #44	@ 0x2c
 801dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc56:	9b03      	ldr	r3, [sp, #12]
 801dc58:	3501      	adds	r5, #1
 801dc5a:	3301      	adds	r3, #1
 801dc5c:	9303      	str	r3, [sp, #12]
 801dc5e:	2d08      	cmp	r5, #8
 801dc60:	dd06      	ble.n	801dc70 <__hexnan+0x11c>
 801dc62:	9b01      	ldr	r3, [sp, #4]
 801dc64:	429c      	cmp	r4, r3
 801dc66:	d9ba      	bls.n	801dbde <__hexnan+0x8a>
 801dc68:	2300      	movs	r3, #0
 801dc6a:	2501      	movs	r5, #1
 801dc6c:	3c04      	subs	r4, #4
 801dc6e:	6023      	str	r3, [r4, #0]
 801dc70:	220f      	movs	r2, #15
 801dc72:	6823      	ldr	r3, [r4, #0]
 801dc74:	4010      	ands	r0, r2
 801dc76:	011b      	lsls	r3, r3, #4
 801dc78:	4303      	orrs	r3, r0
 801dc7a:	6023      	str	r3, [r4, #0]
 801dc7c:	e7af      	b.n	801dbde <__hexnan+0x8a>
 801dc7e:	9b06      	ldr	r3, [sp, #24]
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d0dd      	beq.n	801dc40 <__hexnan+0xec>
 801dc84:	2320      	movs	r3, #32
 801dc86:	9a06      	ldr	r2, [sp, #24]
 801dc88:	9902      	ldr	r1, [sp, #8]
 801dc8a:	1a9b      	subs	r3, r3, r2
 801dc8c:	2201      	movs	r2, #1
 801dc8e:	4252      	negs	r2, r2
 801dc90:	40da      	lsrs	r2, r3
 801dc92:	3904      	subs	r1, #4
 801dc94:	680b      	ldr	r3, [r1, #0]
 801dc96:	4013      	ands	r3, r2
 801dc98:	600b      	str	r3, [r1, #0]
 801dc9a:	e7d1      	b.n	801dc40 <__hexnan+0xec>
 801dc9c:	3f04      	subs	r7, #4
 801dc9e:	e7cf      	b.n	801dc40 <__hexnan+0xec>
 801dca0:	2004      	movs	r0, #4
 801dca2:	e7d6      	b.n	801dc52 <__hexnan+0xfe>

0801dca4 <malloc>:
 801dca4:	b510      	push	{r4, lr}
 801dca6:	4b03      	ldr	r3, [pc, #12]	@ (801dcb4 <malloc+0x10>)
 801dca8:	0001      	movs	r1, r0
 801dcaa:	6818      	ldr	r0, [r3, #0]
 801dcac:	f000 f826 	bl	801dcfc <_malloc_r>
 801dcb0:	bd10      	pop	{r4, pc}
 801dcb2:	46c0      	nop			@ (mov r8, r8)
 801dcb4:	200003c4 	.word	0x200003c4

0801dcb8 <sbrk_aligned>:
 801dcb8:	b570      	push	{r4, r5, r6, lr}
 801dcba:	4e0f      	ldr	r6, [pc, #60]	@ (801dcf8 <sbrk_aligned+0x40>)
 801dcbc:	000d      	movs	r5, r1
 801dcbe:	6831      	ldr	r1, [r6, #0]
 801dcc0:	0004      	movs	r4, r0
 801dcc2:	2900      	cmp	r1, #0
 801dcc4:	d102      	bne.n	801dccc <sbrk_aligned+0x14>
 801dcc6:	f001 f99b 	bl	801f000 <_sbrk_r>
 801dcca:	6030      	str	r0, [r6, #0]
 801dccc:	0029      	movs	r1, r5
 801dcce:	0020      	movs	r0, r4
 801dcd0:	f001 f996 	bl	801f000 <_sbrk_r>
 801dcd4:	1c43      	adds	r3, r0, #1
 801dcd6:	d103      	bne.n	801dce0 <sbrk_aligned+0x28>
 801dcd8:	2501      	movs	r5, #1
 801dcda:	426d      	negs	r5, r5
 801dcdc:	0028      	movs	r0, r5
 801dcde:	bd70      	pop	{r4, r5, r6, pc}
 801dce0:	2303      	movs	r3, #3
 801dce2:	1cc5      	adds	r5, r0, #3
 801dce4:	439d      	bics	r5, r3
 801dce6:	42a8      	cmp	r0, r5
 801dce8:	d0f8      	beq.n	801dcdc <sbrk_aligned+0x24>
 801dcea:	1a29      	subs	r1, r5, r0
 801dcec:	0020      	movs	r0, r4
 801dcee:	f001 f987 	bl	801f000 <_sbrk_r>
 801dcf2:	3001      	adds	r0, #1
 801dcf4:	d1f2      	bne.n	801dcdc <sbrk_aligned+0x24>
 801dcf6:	e7ef      	b.n	801dcd8 <sbrk_aligned+0x20>
 801dcf8:	200038b8 	.word	0x200038b8

0801dcfc <_malloc_r>:
 801dcfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dcfe:	2203      	movs	r2, #3
 801dd00:	1ccb      	adds	r3, r1, #3
 801dd02:	4393      	bics	r3, r2
 801dd04:	3308      	adds	r3, #8
 801dd06:	0005      	movs	r5, r0
 801dd08:	001f      	movs	r7, r3
 801dd0a:	2b0c      	cmp	r3, #12
 801dd0c:	d234      	bcs.n	801dd78 <_malloc_r+0x7c>
 801dd0e:	270c      	movs	r7, #12
 801dd10:	42b9      	cmp	r1, r7
 801dd12:	d833      	bhi.n	801dd7c <_malloc_r+0x80>
 801dd14:	0028      	movs	r0, r5
 801dd16:	f000 f883 	bl	801de20 <__malloc_lock>
 801dd1a:	4e37      	ldr	r6, [pc, #220]	@ (801ddf8 <_malloc_r+0xfc>)
 801dd1c:	6833      	ldr	r3, [r6, #0]
 801dd1e:	001c      	movs	r4, r3
 801dd20:	2c00      	cmp	r4, #0
 801dd22:	d12f      	bne.n	801dd84 <_malloc_r+0x88>
 801dd24:	0039      	movs	r1, r7
 801dd26:	0028      	movs	r0, r5
 801dd28:	f7ff ffc6 	bl	801dcb8 <sbrk_aligned>
 801dd2c:	0004      	movs	r4, r0
 801dd2e:	1c43      	adds	r3, r0, #1
 801dd30:	d15f      	bne.n	801ddf2 <_malloc_r+0xf6>
 801dd32:	6834      	ldr	r4, [r6, #0]
 801dd34:	9400      	str	r4, [sp, #0]
 801dd36:	9b00      	ldr	r3, [sp, #0]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d14a      	bne.n	801ddd2 <_malloc_r+0xd6>
 801dd3c:	2c00      	cmp	r4, #0
 801dd3e:	d052      	beq.n	801dde6 <_malloc_r+0xea>
 801dd40:	6823      	ldr	r3, [r4, #0]
 801dd42:	0028      	movs	r0, r5
 801dd44:	18e3      	adds	r3, r4, r3
 801dd46:	9900      	ldr	r1, [sp, #0]
 801dd48:	9301      	str	r3, [sp, #4]
 801dd4a:	f001 f959 	bl	801f000 <_sbrk_r>
 801dd4e:	9b01      	ldr	r3, [sp, #4]
 801dd50:	4283      	cmp	r3, r0
 801dd52:	d148      	bne.n	801dde6 <_malloc_r+0xea>
 801dd54:	6823      	ldr	r3, [r4, #0]
 801dd56:	0028      	movs	r0, r5
 801dd58:	1aff      	subs	r7, r7, r3
 801dd5a:	0039      	movs	r1, r7
 801dd5c:	f7ff ffac 	bl	801dcb8 <sbrk_aligned>
 801dd60:	3001      	adds	r0, #1
 801dd62:	d040      	beq.n	801dde6 <_malloc_r+0xea>
 801dd64:	6823      	ldr	r3, [r4, #0]
 801dd66:	19db      	adds	r3, r3, r7
 801dd68:	6023      	str	r3, [r4, #0]
 801dd6a:	6833      	ldr	r3, [r6, #0]
 801dd6c:	685a      	ldr	r2, [r3, #4]
 801dd6e:	2a00      	cmp	r2, #0
 801dd70:	d133      	bne.n	801ddda <_malloc_r+0xde>
 801dd72:	9b00      	ldr	r3, [sp, #0]
 801dd74:	6033      	str	r3, [r6, #0]
 801dd76:	e019      	b.n	801ddac <_malloc_r+0xb0>
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	dac9      	bge.n	801dd10 <_malloc_r+0x14>
 801dd7c:	230c      	movs	r3, #12
 801dd7e:	602b      	str	r3, [r5, #0]
 801dd80:	2000      	movs	r0, #0
 801dd82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dd84:	6821      	ldr	r1, [r4, #0]
 801dd86:	1bc9      	subs	r1, r1, r7
 801dd88:	d420      	bmi.n	801ddcc <_malloc_r+0xd0>
 801dd8a:	290b      	cmp	r1, #11
 801dd8c:	d90a      	bls.n	801dda4 <_malloc_r+0xa8>
 801dd8e:	19e2      	adds	r2, r4, r7
 801dd90:	6027      	str	r7, [r4, #0]
 801dd92:	42a3      	cmp	r3, r4
 801dd94:	d104      	bne.n	801dda0 <_malloc_r+0xa4>
 801dd96:	6032      	str	r2, [r6, #0]
 801dd98:	6863      	ldr	r3, [r4, #4]
 801dd9a:	6011      	str	r1, [r2, #0]
 801dd9c:	6053      	str	r3, [r2, #4]
 801dd9e:	e005      	b.n	801ddac <_malloc_r+0xb0>
 801dda0:	605a      	str	r2, [r3, #4]
 801dda2:	e7f9      	b.n	801dd98 <_malloc_r+0x9c>
 801dda4:	6862      	ldr	r2, [r4, #4]
 801dda6:	42a3      	cmp	r3, r4
 801dda8:	d10e      	bne.n	801ddc8 <_malloc_r+0xcc>
 801ddaa:	6032      	str	r2, [r6, #0]
 801ddac:	0028      	movs	r0, r5
 801ddae:	f000 f83f 	bl	801de30 <__malloc_unlock>
 801ddb2:	0020      	movs	r0, r4
 801ddb4:	2207      	movs	r2, #7
 801ddb6:	300b      	adds	r0, #11
 801ddb8:	1d23      	adds	r3, r4, #4
 801ddba:	4390      	bics	r0, r2
 801ddbc:	1ac2      	subs	r2, r0, r3
 801ddbe:	4298      	cmp	r0, r3
 801ddc0:	d0df      	beq.n	801dd82 <_malloc_r+0x86>
 801ddc2:	1a1b      	subs	r3, r3, r0
 801ddc4:	50a3      	str	r3, [r4, r2]
 801ddc6:	e7dc      	b.n	801dd82 <_malloc_r+0x86>
 801ddc8:	605a      	str	r2, [r3, #4]
 801ddca:	e7ef      	b.n	801ddac <_malloc_r+0xb0>
 801ddcc:	0023      	movs	r3, r4
 801ddce:	6864      	ldr	r4, [r4, #4]
 801ddd0:	e7a6      	b.n	801dd20 <_malloc_r+0x24>
 801ddd2:	9c00      	ldr	r4, [sp, #0]
 801ddd4:	6863      	ldr	r3, [r4, #4]
 801ddd6:	9300      	str	r3, [sp, #0]
 801ddd8:	e7ad      	b.n	801dd36 <_malloc_r+0x3a>
 801ddda:	001a      	movs	r2, r3
 801dddc:	685b      	ldr	r3, [r3, #4]
 801ddde:	42a3      	cmp	r3, r4
 801dde0:	d1fb      	bne.n	801ddda <_malloc_r+0xde>
 801dde2:	2300      	movs	r3, #0
 801dde4:	e7da      	b.n	801dd9c <_malloc_r+0xa0>
 801dde6:	230c      	movs	r3, #12
 801dde8:	0028      	movs	r0, r5
 801ddea:	602b      	str	r3, [r5, #0]
 801ddec:	f000 f820 	bl	801de30 <__malloc_unlock>
 801ddf0:	e7c6      	b.n	801dd80 <_malloc_r+0x84>
 801ddf2:	6007      	str	r7, [r0, #0]
 801ddf4:	e7da      	b.n	801ddac <_malloc_r+0xb0>
 801ddf6:	46c0      	nop			@ (mov r8, r8)
 801ddf8:	200038bc 	.word	0x200038bc

0801ddfc <__ascii_mbtowc>:
 801ddfc:	b082      	sub	sp, #8
 801ddfe:	2900      	cmp	r1, #0
 801de00:	d100      	bne.n	801de04 <__ascii_mbtowc+0x8>
 801de02:	a901      	add	r1, sp, #4
 801de04:	1e10      	subs	r0, r2, #0
 801de06:	d006      	beq.n	801de16 <__ascii_mbtowc+0x1a>
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d006      	beq.n	801de1a <__ascii_mbtowc+0x1e>
 801de0c:	7813      	ldrb	r3, [r2, #0]
 801de0e:	600b      	str	r3, [r1, #0]
 801de10:	7810      	ldrb	r0, [r2, #0]
 801de12:	1e43      	subs	r3, r0, #1
 801de14:	4198      	sbcs	r0, r3
 801de16:	b002      	add	sp, #8
 801de18:	4770      	bx	lr
 801de1a:	2002      	movs	r0, #2
 801de1c:	4240      	negs	r0, r0
 801de1e:	e7fa      	b.n	801de16 <__ascii_mbtowc+0x1a>

0801de20 <__malloc_lock>:
 801de20:	b510      	push	{r4, lr}
 801de22:	4802      	ldr	r0, [pc, #8]	@ (801de2c <__malloc_lock+0xc>)
 801de24:	f7fe fcfb 	bl	801c81e <__retarget_lock_acquire_recursive>
 801de28:	bd10      	pop	{r4, pc}
 801de2a:	46c0      	nop			@ (mov r8, r8)
 801de2c:	200038b4 	.word	0x200038b4

0801de30 <__malloc_unlock>:
 801de30:	b510      	push	{r4, lr}
 801de32:	4802      	ldr	r0, [pc, #8]	@ (801de3c <__malloc_unlock+0xc>)
 801de34:	f7fe fcf4 	bl	801c820 <__retarget_lock_release_recursive>
 801de38:	bd10      	pop	{r4, pc}
 801de3a:	46c0      	nop			@ (mov r8, r8)
 801de3c:	200038b4 	.word	0x200038b4

0801de40 <_Balloc>:
 801de40:	b570      	push	{r4, r5, r6, lr}
 801de42:	69c5      	ldr	r5, [r0, #28]
 801de44:	0006      	movs	r6, r0
 801de46:	000c      	movs	r4, r1
 801de48:	2d00      	cmp	r5, #0
 801de4a:	d10e      	bne.n	801de6a <_Balloc+0x2a>
 801de4c:	2010      	movs	r0, #16
 801de4e:	f7ff ff29 	bl	801dca4 <malloc>
 801de52:	1e02      	subs	r2, r0, #0
 801de54:	61f0      	str	r0, [r6, #28]
 801de56:	d104      	bne.n	801de62 <_Balloc+0x22>
 801de58:	216b      	movs	r1, #107	@ 0x6b
 801de5a:	4b19      	ldr	r3, [pc, #100]	@ (801dec0 <_Balloc+0x80>)
 801de5c:	4819      	ldr	r0, [pc, #100]	@ (801dec4 <_Balloc+0x84>)
 801de5e:	f001 f8e1 	bl	801f024 <__assert_func>
 801de62:	6045      	str	r5, [r0, #4]
 801de64:	6085      	str	r5, [r0, #8]
 801de66:	6005      	str	r5, [r0, #0]
 801de68:	60c5      	str	r5, [r0, #12]
 801de6a:	69f5      	ldr	r5, [r6, #28]
 801de6c:	68eb      	ldr	r3, [r5, #12]
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d013      	beq.n	801de9a <_Balloc+0x5a>
 801de72:	69f3      	ldr	r3, [r6, #28]
 801de74:	00a2      	lsls	r2, r4, #2
 801de76:	68db      	ldr	r3, [r3, #12]
 801de78:	189b      	adds	r3, r3, r2
 801de7a:	6818      	ldr	r0, [r3, #0]
 801de7c:	2800      	cmp	r0, #0
 801de7e:	d118      	bne.n	801deb2 <_Balloc+0x72>
 801de80:	2101      	movs	r1, #1
 801de82:	000d      	movs	r5, r1
 801de84:	40a5      	lsls	r5, r4
 801de86:	1d6a      	adds	r2, r5, #5
 801de88:	0030      	movs	r0, r6
 801de8a:	0092      	lsls	r2, r2, #2
 801de8c:	f001 f8e8 	bl	801f060 <_calloc_r>
 801de90:	2800      	cmp	r0, #0
 801de92:	d00c      	beq.n	801deae <_Balloc+0x6e>
 801de94:	6044      	str	r4, [r0, #4]
 801de96:	6085      	str	r5, [r0, #8]
 801de98:	e00d      	b.n	801deb6 <_Balloc+0x76>
 801de9a:	2221      	movs	r2, #33	@ 0x21
 801de9c:	2104      	movs	r1, #4
 801de9e:	0030      	movs	r0, r6
 801dea0:	f001 f8de 	bl	801f060 <_calloc_r>
 801dea4:	69f3      	ldr	r3, [r6, #28]
 801dea6:	60e8      	str	r0, [r5, #12]
 801dea8:	68db      	ldr	r3, [r3, #12]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d1e1      	bne.n	801de72 <_Balloc+0x32>
 801deae:	2000      	movs	r0, #0
 801deb0:	bd70      	pop	{r4, r5, r6, pc}
 801deb2:	6802      	ldr	r2, [r0, #0]
 801deb4:	601a      	str	r2, [r3, #0]
 801deb6:	2300      	movs	r3, #0
 801deb8:	6103      	str	r3, [r0, #16]
 801deba:	60c3      	str	r3, [r0, #12]
 801debc:	e7f8      	b.n	801deb0 <_Balloc+0x70>
 801debe:	46c0      	nop			@ (mov r8, r8)
 801dec0:	080212da 	.word	0x080212da
 801dec4:	080213ba 	.word	0x080213ba

0801dec8 <_Bfree>:
 801dec8:	b570      	push	{r4, r5, r6, lr}
 801deca:	69c6      	ldr	r6, [r0, #28]
 801decc:	0005      	movs	r5, r0
 801dece:	000c      	movs	r4, r1
 801ded0:	2e00      	cmp	r6, #0
 801ded2:	d10e      	bne.n	801def2 <_Bfree+0x2a>
 801ded4:	2010      	movs	r0, #16
 801ded6:	f7ff fee5 	bl	801dca4 <malloc>
 801deda:	1e02      	subs	r2, r0, #0
 801dedc:	61e8      	str	r0, [r5, #28]
 801dede:	d104      	bne.n	801deea <_Bfree+0x22>
 801dee0:	218f      	movs	r1, #143	@ 0x8f
 801dee2:	4b09      	ldr	r3, [pc, #36]	@ (801df08 <_Bfree+0x40>)
 801dee4:	4809      	ldr	r0, [pc, #36]	@ (801df0c <_Bfree+0x44>)
 801dee6:	f001 f89d 	bl	801f024 <__assert_func>
 801deea:	6046      	str	r6, [r0, #4]
 801deec:	6086      	str	r6, [r0, #8]
 801deee:	6006      	str	r6, [r0, #0]
 801def0:	60c6      	str	r6, [r0, #12]
 801def2:	2c00      	cmp	r4, #0
 801def4:	d007      	beq.n	801df06 <_Bfree+0x3e>
 801def6:	69eb      	ldr	r3, [r5, #28]
 801def8:	6862      	ldr	r2, [r4, #4]
 801defa:	68db      	ldr	r3, [r3, #12]
 801defc:	0092      	lsls	r2, r2, #2
 801defe:	189b      	adds	r3, r3, r2
 801df00:	681a      	ldr	r2, [r3, #0]
 801df02:	6022      	str	r2, [r4, #0]
 801df04:	601c      	str	r4, [r3, #0]
 801df06:	bd70      	pop	{r4, r5, r6, pc}
 801df08:	080212da 	.word	0x080212da
 801df0c:	080213ba 	.word	0x080213ba

0801df10 <__multadd>:
 801df10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801df12:	000f      	movs	r7, r1
 801df14:	9001      	str	r0, [sp, #4]
 801df16:	000c      	movs	r4, r1
 801df18:	001e      	movs	r6, r3
 801df1a:	2000      	movs	r0, #0
 801df1c:	690d      	ldr	r5, [r1, #16]
 801df1e:	3714      	adds	r7, #20
 801df20:	683b      	ldr	r3, [r7, #0]
 801df22:	3001      	adds	r0, #1
 801df24:	b299      	uxth	r1, r3
 801df26:	4351      	muls	r1, r2
 801df28:	0c1b      	lsrs	r3, r3, #16
 801df2a:	4353      	muls	r3, r2
 801df2c:	1989      	adds	r1, r1, r6
 801df2e:	0c0e      	lsrs	r6, r1, #16
 801df30:	199b      	adds	r3, r3, r6
 801df32:	0c1e      	lsrs	r6, r3, #16
 801df34:	b289      	uxth	r1, r1
 801df36:	041b      	lsls	r3, r3, #16
 801df38:	185b      	adds	r3, r3, r1
 801df3a:	c708      	stmia	r7!, {r3}
 801df3c:	4285      	cmp	r5, r0
 801df3e:	dcef      	bgt.n	801df20 <__multadd+0x10>
 801df40:	2e00      	cmp	r6, #0
 801df42:	d022      	beq.n	801df8a <__multadd+0x7a>
 801df44:	68a3      	ldr	r3, [r4, #8]
 801df46:	42ab      	cmp	r3, r5
 801df48:	dc19      	bgt.n	801df7e <__multadd+0x6e>
 801df4a:	6861      	ldr	r1, [r4, #4]
 801df4c:	9801      	ldr	r0, [sp, #4]
 801df4e:	3101      	adds	r1, #1
 801df50:	f7ff ff76 	bl	801de40 <_Balloc>
 801df54:	1e07      	subs	r7, r0, #0
 801df56:	d105      	bne.n	801df64 <__multadd+0x54>
 801df58:	003a      	movs	r2, r7
 801df5a:	21ba      	movs	r1, #186	@ 0xba
 801df5c:	4b0c      	ldr	r3, [pc, #48]	@ (801df90 <__multadd+0x80>)
 801df5e:	480d      	ldr	r0, [pc, #52]	@ (801df94 <__multadd+0x84>)
 801df60:	f001 f860 	bl	801f024 <__assert_func>
 801df64:	0021      	movs	r1, r4
 801df66:	6922      	ldr	r2, [r4, #16]
 801df68:	310c      	adds	r1, #12
 801df6a:	3202      	adds	r2, #2
 801df6c:	0092      	lsls	r2, r2, #2
 801df6e:	300c      	adds	r0, #12
 801df70:	f7fe fc62 	bl	801c838 <memcpy>
 801df74:	0021      	movs	r1, r4
 801df76:	9801      	ldr	r0, [sp, #4]
 801df78:	f7ff ffa6 	bl	801dec8 <_Bfree>
 801df7c:	003c      	movs	r4, r7
 801df7e:	1d2b      	adds	r3, r5, #4
 801df80:	009b      	lsls	r3, r3, #2
 801df82:	18e3      	adds	r3, r4, r3
 801df84:	3501      	adds	r5, #1
 801df86:	605e      	str	r6, [r3, #4]
 801df88:	6125      	str	r5, [r4, #16]
 801df8a:	0020      	movs	r0, r4
 801df8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801df8e:	46c0      	nop			@ (mov r8, r8)
 801df90:	08021349 	.word	0x08021349
 801df94:	080213ba 	.word	0x080213ba

0801df98 <__s2b>:
 801df98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801df9a:	0007      	movs	r7, r0
 801df9c:	0018      	movs	r0, r3
 801df9e:	000c      	movs	r4, r1
 801dfa0:	3008      	adds	r0, #8
 801dfa2:	2109      	movs	r1, #9
 801dfa4:	9301      	str	r3, [sp, #4]
 801dfa6:	0015      	movs	r5, r2
 801dfa8:	f7e2 f986 	bl	80002b8 <__divsi3>
 801dfac:	2301      	movs	r3, #1
 801dfae:	2100      	movs	r1, #0
 801dfb0:	4283      	cmp	r3, r0
 801dfb2:	db0a      	blt.n	801dfca <__s2b+0x32>
 801dfb4:	0038      	movs	r0, r7
 801dfb6:	f7ff ff43 	bl	801de40 <_Balloc>
 801dfba:	1e01      	subs	r1, r0, #0
 801dfbc:	d108      	bne.n	801dfd0 <__s2b+0x38>
 801dfbe:	000a      	movs	r2, r1
 801dfc0:	4b19      	ldr	r3, [pc, #100]	@ (801e028 <__s2b+0x90>)
 801dfc2:	481a      	ldr	r0, [pc, #104]	@ (801e02c <__s2b+0x94>)
 801dfc4:	31d3      	adds	r1, #211	@ 0xd3
 801dfc6:	f001 f82d 	bl	801f024 <__assert_func>
 801dfca:	005b      	lsls	r3, r3, #1
 801dfcc:	3101      	adds	r1, #1
 801dfce:	e7ef      	b.n	801dfb0 <__s2b+0x18>
 801dfd0:	9b08      	ldr	r3, [sp, #32]
 801dfd2:	6143      	str	r3, [r0, #20]
 801dfd4:	2301      	movs	r3, #1
 801dfd6:	6103      	str	r3, [r0, #16]
 801dfd8:	2d09      	cmp	r5, #9
 801dfda:	dd18      	ble.n	801e00e <__s2b+0x76>
 801dfdc:	0023      	movs	r3, r4
 801dfde:	3309      	adds	r3, #9
 801dfe0:	001e      	movs	r6, r3
 801dfe2:	9300      	str	r3, [sp, #0]
 801dfe4:	1964      	adds	r4, r4, r5
 801dfe6:	7833      	ldrb	r3, [r6, #0]
 801dfe8:	220a      	movs	r2, #10
 801dfea:	0038      	movs	r0, r7
 801dfec:	3b30      	subs	r3, #48	@ 0x30
 801dfee:	f7ff ff8f 	bl	801df10 <__multadd>
 801dff2:	3601      	adds	r6, #1
 801dff4:	0001      	movs	r1, r0
 801dff6:	42a6      	cmp	r6, r4
 801dff8:	d1f5      	bne.n	801dfe6 <__s2b+0x4e>
 801dffa:	002c      	movs	r4, r5
 801dffc:	9b00      	ldr	r3, [sp, #0]
 801dffe:	3c08      	subs	r4, #8
 801e000:	191c      	adds	r4, r3, r4
 801e002:	002e      	movs	r6, r5
 801e004:	9b01      	ldr	r3, [sp, #4]
 801e006:	429e      	cmp	r6, r3
 801e008:	db04      	blt.n	801e014 <__s2b+0x7c>
 801e00a:	0008      	movs	r0, r1
 801e00c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e00e:	2509      	movs	r5, #9
 801e010:	340a      	adds	r4, #10
 801e012:	e7f6      	b.n	801e002 <__s2b+0x6a>
 801e014:	1b63      	subs	r3, r4, r5
 801e016:	5d9b      	ldrb	r3, [r3, r6]
 801e018:	220a      	movs	r2, #10
 801e01a:	0038      	movs	r0, r7
 801e01c:	3b30      	subs	r3, #48	@ 0x30
 801e01e:	f7ff ff77 	bl	801df10 <__multadd>
 801e022:	3601      	adds	r6, #1
 801e024:	0001      	movs	r1, r0
 801e026:	e7ed      	b.n	801e004 <__s2b+0x6c>
 801e028:	08021349 	.word	0x08021349
 801e02c:	080213ba 	.word	0x080213ba

0801e030 <__hi0bits>:
 801e030:	2280      	movs	r2, #128	@ 0x80
 801e032:	0003      	movs	r3, r0
 801e034:	0252      	lsls	r2, r2, #9
 801e036:	2000      	movs	r0, #0
 801e038:	4293      	cmp	r3, r2
 801e03a:	d201      	bcs.n	801e040 <__hi0bits+0x10>
 801e03c:	041b      	lsls	r3, r3, #16
 801e03e:	3010      	adds	r0, #16
 801e040:	2280      	movs	r2, #128	@ 0x80
 801e042:	0452      	lsls	r2, r2, #17
 801e044:	4293      	cmp	r3, r2
 801e046:	d201      	bcs.n	801e04c <__hi0bits+0x1c>
 801e048:	3008      	adds	r0, #8
 801e04a:	021b      	lsls	r3, r3, #8
 801e04c:	2280      	movs	r2, #128	@ 0x80
 801e04e:	0552      	lsls	r2, r2, #21
 801e050:	4293      	cmp	r3, r2
 801e052:	d201      	bcs.n	801e058 <__hi0bits+0x28>
 801e054:	3004      	adds	r0, #4
 801e056:	011b      	lsls	r3, r3, #4
 801e058:	2280      	movs	r2, #128	@ 0x80
 801e05a:	05d2      	lsls	r2, r2, #23
 801e05c:	4293      	cmp	r3, r2
 801e05e:	d201      	bcs.n	801e064 <__hi0bits+0x34>
 801e060:	3002      	adds	r0, #2
 801e062:	009b      	lsls	r3, r3, #2
 801e064:	2b00      	cmp	r3, #0
 801e066:	db03      	blt.n	801e070 <__hi0bits+0x40>
 801e068:	3001      	adds	r0, #1
 801e06a:	4213      	tst	r3, r2
 801e06c:	d100      	bne.n	801e070 <__hi0bits+0x40>
 801e06e:	2020      	movs	r0, #32
 801e070:	4770      	bx	lr

0801e072 <__lo0bits>:
 801e072:	6803      	ldr	r3, [r0, #0]
 801e074:	0001      	movs	r1, r0
 801e076:	2207      	movs	r2, #7
 801e078:	0018      	movs	r0, r3
 801e07a:	4010      	ands	r0, r2
 801e07c:	4213      	tst	r3, r2
 801e07e:	d00d      	beq.n	801e09c <__lo0bits+0x2a>
 801e080:	3a06      	subs	r2, #6
 801e082:	2000      	movs	r0, #0
 801e084:	4213      	tst	r3, r2
 801e086:	d105      	bne.n	801e094 <__lo0bits+0x22>
 801e088:	3002      	adds	r0, #2
 801e08a:	4203      	tst	r3, r0
 801e08c:	d003      	beq.n	801e096 <__lo0bits+0x24>
 801e08e:	40d3      	lsrs	r3, r2
 801e090:	0010      	movs	r0, r2
 801e092:	600b      	str	r3, [r1, #0]
 801e094:	4770      	bx	lr
 801e096:	089b      	lsrs	r3, r3, #2
 801e098:	600b      	str	r3, [r1, #0]
 801e09a:	e7fb      	b.n	801e094 <__lo0bits+0x22>
 801e09c:	b29a      	uxth	r2, r3
 801e09e:	2a00      	cmp	r2, #0
 801e0a0:	d101      	bne.n	801e0a6 <__lo0bits+0x34>
 801e0a2:	2010      	movs	r0, #16
 801e0a4:	0c1b      	lsrs	r3, r3, #16
 801e0a6:	b2da      	uxtb	r2, r3
 801e0a8:	2a00      	cmp	r2, #0
 801e0aa:	d101      	bne.n	801e0b0 <__lo0bits+0x3e>
 801e0ac:	3008      	adds	r0, #8
 801e0ae:	0a1b      	lsrs	r3, r3, #8
 801e0b0:	071a      	lsls	r2, r3, #28
 801e0b2:	d101      	bne.n	801e0b8 <__lo0bits+0x46>
 801e0b4:	3004      	adds	r0, #4
 801e0b6:	091b      	lsrs	r3, r3, #4
 801e0b8:	079a      	lsls	r2, r3, #30
 801e0ba:	d101      	bne.n	801e0c0 <__lo0bits+0x4e>
 801e0bc:	3002      	adds	r0, #2
 801e0be:	089b      	lsrs	r3, r3, #2
 801e0c0:	07da      	lsls	r2, r3, #31
 801e0c2:	d4e9      	bmi.n	801e098 <__lo0bits+0x26>
 801e0c4:	3001      	adds	r0, #1
 801e0c6:	085b      	lsrs	r3, r3, #1
 801e0c8:	d1e6      	bne.n	801e098 <__lo0bits+0x26>
 801e0ca:	2020      	movs	r0, #32
 801e0cc:	e7e2      	b.n	801e094 <__lo0bits+0x22>
	...

0801e0d0 <__i2b>:
 801e0d0:	b510      	push	{r4, lr}
 801e0d2:	000c      	movs	r4, r1
 801e0d4:	2101      	movs	r1, #1
 801e0d6:	f7ff feb3 	bl	801de40 <_Balloc>
 801e0da:	2800      	cmp	r0, #0
 801e0dc:	d107      	bne.n	801e0ee <__i2b+0x1e>
 801e0de:	2146      	movs	r1, #70	@ 0x46
 801e0e0:	4c05      	ldr	r4, [pc, #20]	@ (801e0f8 <__i2b+0x28>)
 801e0e2:	0002      	movs	r2, r0
 801e0e4:	4b05      	ldr	r3, [pc, #20]	@ (801e0fc <__i2b+0x2c>)
 801e0e6:	0020      	movs	r0, r4
 801e0e8:	31ff      	adds	r1, #255	@ 0xff
 801e0ea:	f000 ff9b 	bl	801f024 <__assert_func>
 801e0ee:	2301      	movs	r3, #1
 801e0f0:	6144      	str	r4, [r0, #20]
 801e0f2:	6103      	str	r3, [r0, #16]
 801e0f4:	bd10      	pop	{r4, pc}
 801e0f6:	46c0      	nop			@ (mov r8, r8)
 801e0f8:	080213ba 	.word	0x080213ba
 801e0fc:	08021349 	.word	0x08021349

0801e100 <__multiply>:
 801e100:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e102:	0014      	movs	r4, r2
 801e104:	690a      	ldr	r2, [r1, #16]
 801e106:	6923      	ldr	r3, [r4, #16]
 801e108:	000d      	movs	r5, r1
 801e10a:	b08b      	sub	sp, #44	@ 0x2c
 801e10c:	429a      	cmp	r2, r3
 801e10e:	db02      	blt.n	801e116 <__multiply+0x16>
 801e110:	0023      	movs	r3, r4
 801e112:	000c      	movs	r4, r1
 801e114:	001d      	movs	r5, r3
 801e116:	6927      	ldr	r7, [r4, #16]
 801e118:	692e      	ldr	r6, [r5, #16]
 801e11a:	6861      	ldr	r1, [r4, #4]
 801e11c:	19bb      	adds	r3, r7, r6
 801e11e:	9303      	str	r3, [sp, #12]
 801e120:	68a3      	ldr	r3, [r4, #8]
 801e122:	19ba      	adds	r2, r7, r6
 801e124:	4293      	cmp	r3, r2
 801e126:	da00      	bge.n	801e12a <__multiply+0x2a>
 801e128:	3101      	adds	r1, #1
 801e12a:	f7ff fe89 	bl	801de40 <_Balloc>
 801e12e:	9002      	str	r0, [sp, #8]
 801e130:	2800      	cmp	r0, #0
 801e132:	d106      	bne.n	801e142 <__multiply+0x42>
 801e134:	21b1      	movs	r1, #177	@ 0xb1
 801e136:	4b49      	ldr	r3, [pc, #292]	@ (801e25c <__multiply+0x15c>)
 801e138:	4849      	ldr	r0, [pc, #292]	@ (801e260 <__multiply+0x160>)
 801e13a:	9a02      	ldr	r2, [sp, #8]
 801e13c:	0049      	lsls	r1, r1, #1
 801e13e:	f000 ff71 	bl	801f024 <__assert_func>
 801e142:	9b02      	ldr	r3, [sp, #8]
 801e144:	2200      	movs	r2, #0
 801e146:	3314      	adds	r3, #20
 801e148:	469c      	mov	ip, r3
 801e14a:	19bb      	adds	r3, r7, r6
 801e14c:	009b      	lsls	r3, r3, #2
 801e14e:	4463      	add	r3, ip
 801e150:	9304      	str	r3, [sp, #16]
 801e152:	4663      	mov	r3, ip
 801e154:	9904      	ldr	r1, [sp, #16]
 801e156:	428b      	cmp	r3, r1
 801e158:	d32a      	bcc.n	801e1b0 <__multiply+0xb0>
 801e15a:	0023      	movs	r3, r4
 801e15c:	00bf      	lsls	r7, r7, #2
 801e15e:	3314      	adds	r3, #20
 801e160:	3514      	adds	r5, #20
 801e162:	9308      	str	r3, [sp, #32]
 801e164:	00b6      	lsls	r6, r6, #2
 801e166:	19db      	adds	r3, r3, r7
 801e168:	9305      	str	r3, [sp, #20]
 801e16a:	19ab      	adds	r3, r5, r6
 801e16c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e16e:	2304      	movs	r3, #4
 801e170:	9306      	str	r3, [sp, #24]
 801e172:	0023      	movs	r3, r4
 801e174:	9a05      	ldr	r2, [sp, #20]
 801e176:	3315      	adds	r3, #21
 801e178:	9501      	str	r5, [sp, #4]
 801e17a:	429a      	cmp	r2, r3
 801e17c:	d305      	bcc.n	801e18a <__multiply+0x8a>
 801e17e:	1b13      	subs	r3, r2, r4
 801e180:	3b15      	subs	r3, #21
 801e182:	089b      	lsrs	r3, r3, #2
 801e184:	3301      	adds	r3, #1
 801e186:	009b      	lsls	r3, r3, #2
 801e188:	9306      	str	r3, [sp, #24]
 801e18a:	9b01      	ldr	r3, [sp, #4]
 801e18c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e18e:	4293      	cmp	r3, r2
 801e190:	d310      	bcc.n	801e1b4 <__multiply+0xb4>
 801e192:	9b03      	ldr	r3, [sp, #12]
 801e194:	2b00      	cmp	r3, #0
 801e196:	dd05      	ble.n	801e1a4 <__multiply+0xa4>
 801e198:	9b04      	ldr	r3, [sp, #16]
 801e19a:	3b04      	subs	r3, #4
 801e19c:	9304      	str	r3, [sp, #16]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d056      	beq.n	801e252 <__multiply+0x152>
 801e1a4:	9b02      	ldr	r3, [sp, #8]
 801e1a6:	9a03      	ldr	r2, [sp, #12]
 801e1a8:	0018      	movs	r0, r3
 801e1aa:	611a      	str	r2, [r3, #16]
 801e1ac:	b00b      	add	sp, #44	@ 0x2c
 801e1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1b0:	c304      	stmia	r3!, {r2}
 801e1b2:	e7cf      	b.n	801e154 <__multiply+0x54>
 801e1b4:	9b01      	ldr	r3, [sp, #4]
 801e1b6:	6818      	ldr	r0, [r3, #0]
 801e1b8:	b280      	uxth	r0, r0
 801e1ba:	2800      	cmp	r0, #0
 801e1bc:	d01e      	beq.n	801e1fc <__multiply+0xfc>
 801e1be:	4667      	mov	r7, ip
 801e1c0:	2500      	movs	r5, #0
 801e1c2:	9e08      	ldr	r6, [sp, #32]
 801e1c4:	ce02      	ldmia	r6!, {r1}
 801e1c6:	683b      	ldr	r3, [r7, #0]
 801e1c8:	9307      	str	r3, [sp, #28]
 801e1ca:	b28b      	uxth	r3, r1
 801e1cc:	4343      	muls	r3, r0
 801e1ce:	001a      	movs	r2, r3
 801e1d0:	466b      	mov	r3, sp
 801e1d2:	0c09      	lsrs	r1, r1, #16
 801e1d4:	8b9b      	ldrh	r3, [r3, #28]
 801e1d6:	4341      	muls	r1, r0
 801e1d8:	18d3      	adds	r3, r2, r3
 801e1da:	9a07      	ldr	r2, [sp, #28]
 801e1dc:	195b      	adds	r3, r3, r5
 801e1de:	0c12      	lsrs	r2, r2, #16
 801e1e0:	1889      	adds	r1, r1, r2
 801e1e2:	0c1a      	lsrs	r2, r3, #16
 801e1e4:	188a      	adds	r2, r1, r2
 801e1e6:	b29b      	uxth	r3, r3
 801e1e8:	0c15      	lsrs	r5, r2, #16
 801e1ea:	0412      	lsls	r2, r2, #16
 801e1ec:	431a      	orrs	r2, r3
 801e1ee:	9b05      	ldr	r3, [sp, #20]
 801e1f0:	c704      	stmia	r7!, {r2}
 801e1f2:	42b3      	cmp	r3, r6
 801e1f4:	d8e6      	bhi.n	801e1c4 <__multiply+0xc4>
 801e1f6:	4663      	mov	r3, ip
 801e1f8:	9a06      	ldr	r2, [sp, #24]
 801e1fa:	509d      	str	r5, [r3, r2]
 801e1fc:	9b01      	ldr	r3, [sp, #4]
 801e1fe:	6818      	ldr	r0, [r3, #0]
 801e200:	0c00      	lsrs	r0, r0, #16
 801e202:	d020      	beq.n	801e246 <__multiply+0x146>
 801e204:	4663      	mov	r3, ip
 801e206:	0025      	movs	r5, r4
 801e208:	4661      	mov	r1, ip
 801e20a:	2700      	movs	r7, #0
 801e20c:	681b      	ldr	r3, [r3, #0]
 801e20e:	3514      	adds	r5, #20
 801e210:	682a      	ldr	r2, [r5, #0]
 801e212:	680e      	ldr	r6, [r1, #0]
 801e214:	b292      	uxth	r2, r2
 801e216:	4342      	muls	r2, r0
 801e218:	0c36      	lsrs	r6, r6, #16
 801e21a:	1992      	adds	r2, r2, r6
 801e21c:	19d2      	adds	r2, r2, r7
 801e21e:	0416      	lsls	r6, r2, #16
 801e220:	b29b      	uxth	r3, r3
 801e222:	431e      	orrs	r6, r3
 801e224:	600e      	str	r6, [r1, #0]
 801e226:	cd40      	ldmia	r5!, {r6}
 801e228:	684b      	ldr	r3, [r1, #4]
 801e22a:	0c36      	lsrs	r6, r6, #16
 801e22c:	4346      	muls	r6, r0
 801e22e:	b29b      	uxth	r3, r3
 801e230:	0c12      	lsrs	r2, r2, #16
 801e232:	18f3      	adds	r3, r6, r3
 801e234:	189b      	adds	r3, r3, r2
 801e236:	9a05      	ldr	r2, [sp, #20]
 801e238:	0c1f      	lsrs	r7, r3, #16
 801e23a:	3104      	adds	r1, #4
 801e23c:	42aa      	cmp	r2, r5
 801e23e:	d8e7      	bhi.n	801e210 <__multiply+0x110>
 801e240:	4662      	mov	r2, ip
 801e242:	9906      	ldr	r1, [sp, #24]
 801e244:	5053      	str	r3, [r2, r1]
 801e246:	9b01      	ldr	r3, [sp, #4]
 801e248:	3304      	adds	r3, #4
 801e24a:	9301      	str	r3, [sp, #4]
 801e24c:	2304      	movs	r3, #4
 801e24e:	449c      	add	ip, r3
 801e250:	e79b      	b.n	801e18a <__multiply+0x8a>
 801e252:	9b03      	ldr	r3, [sp, #12]
 801e254:	3b01      	subs	r3, #1
 801e256:	9303      	str	r3, [sp, #12]
 801e258:	e79b      	b.n	801e192 <__multiply+0x92>
 801e25a:	46c0      	nop			@ (mov r8, r8)
 801e25c:	08021349 	.word	0x08021349
 801e260:	080213ba 	.word	0x080213ba

0801e264 <__pow5mult>:
 801e264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e266:	2303      	movs	r3, #3
 801e268:	0015      	movs	r5, r2
 801e26a:	0007      	movs	r7, r0
 801e26c:	000e      	movs	r6, r1
 801e26e:	401a      	ands	r2, r3
 801e270:	421d      	tst	r5, r3
 801e272:	d008      	beq.n	801e286 <__pow5mult+0x22>
 801e274:	4925      	ldr	r1, [pc, #148]	@ (801e30c <__pow5mult+0xa8>)
 801e276:	3a01      	subs	r2, #1
 801e278:	0092      	lsls	r2, r2, #2
 801e27a:	5852      	ldr	r2, [r2, r1]
 801e27c:	2300      	movs	r3, #0
 801e27e:	0031      	movs	r1, r6
 801e280:	f7ff fe46 	bl	801df10 <__multadd>
 801e284:	0006      	movs	r6, r0
 801e286:	10ad      	asrs	r5, r5, #2
 801e288:	d03d      	beq.n	801e306 <__pow5mult+0xa2>
 801e28a:	69fc      	ldr	r4, [r7, #28]
 801e28c:	2c00      	cmp	r4, #0
 801e28e:	d10f      	bne.n	801e2b0 <__pow5mult+0x4c>
 801e290:	2010      	movs	r0, #16
 801e292:	f7ff fd07 	bl	801dca4 <malloc>
 801e296:	1e02      	subs	r2, r0, #0
 801e298:	61f8      	str	r0, [r7, #28]
 801e29a:	d105      	bne.n	801e2a8 <__pow5mult+0x44>
 801e29c:	21b4      	movs	r1, #180	@ 0xb4
 801e29e:	4b1c      	ldr	r3, [pc, #112]	@ (801e310 <__pow5mult+0xac>)
 801e2a0:	481c      	ldr	r0, [pc, #112]	@ (801e314 <__pow5mult+0xb0>)
 801e2a2:	31ff      	adds	r1, #255	@ 0xff
 801e2a4:	f000 febe 	bl	801f024 <__assert_func>
 801e2a8:	6044      	str	r4, [r0, #4]
 801e2aa:	6084      	str	r4, [r0, #8]
 801e2ac:	6004      	str	r4, [r0, #0]
 801e2ae:	60c4      	str	r4, [r0, #12]
 801e2b0:	69fb      	ldr	r3, [r7, #28]
 801e2b2:	689c      	ldr	r4, [r3, #8]
 801e2b4:	9301      	str	r3, [sp, #4]
 801e2b6:	2c00      	cmp	r4, #0
 801e2b8:	d108      	bne.n	801e2cc <__pow5mult+0x68>
 801e2ba:	0038      	movs	r0, r7
 801e2bc:	4916      	ldr	r1, [pc, #88]	@ (801e318 <__pow5mult+0xb4>)
 801e2be:	f7ff ff07 	bl	801e0d0 <__i2b>
 801e2c2:	9b01      	ldr	r3, [sp, #4]
 801e2c4:	0004      	movs	r4, r0
 801e2c6:	6098      	str	r0, [r3, #8]
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	6003      	str	r3, [r0, #0]
 801e2cc:	2301      	movs	r3, #1
 801e2ce:	421d      	tst	r5, r3
 801e2d0:	d00a      	beq.n	801e2e8 <__pow5mult+0x84>
 801e2d2:	0031      	movs	r1, r6
 801e2d4:	0022      	movs	r2, r4
 801e2d6:	0038      	movs	r0, r7
 801e2d8:	f7ff ff12 	bl	801e100 <__multiply>
 801e2dc:	0031      	movs	r1, r6
 801e2de:	9001      	str	r0, [sp, #4]
 801e2e0:	0038      	movs	r0, r7
 801e2e2:	f7ff fdf1 	bl	801dec8 <_Bfree>
 801e2e6:	9e01      	ldr	r6, [sp, #4]
 801e2e8:	106d      	asrs	r5, r5, #1
 801e2ea:	d00c      	beq.n	801e306 <__pow5mult+0xa2>
 801e2ec:	6820      	ldr	r0, [r4, #0]
 801e2ee:	2800      	cmp	r0, #0
 801e2f0:	d107      	bne.n	801e302 <__pow5mult+0x9e>
 801e2f2:	0022      	movs	r2, r4
 801e2f4:	0021      	movs	r1, r4
 801e2f6:	0038      	movs	r0, r7
 801e2f8:	f7ff ff02 	bl	801e100 <__multiply>
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	6020      	str	r0, [r4, #0]
 801e300:	6003      	str	r3, [r0, #0]
 801e302:	0004      	movs	r4, r0
 801e304:	e7e2      	b.n	801e2cc <__pow5mult+0x68>
 801e306:	0030      	movs	r0, r6
 801e308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e30a:	46c0      	nop			@ (mov r8, r8)
 801e30c:	08021414 	.word	0x08021414
 801e310:	080212da 	.word	0x080212da
 801e314:	080213ba 	.word	0x080213ba
 801e318:	00000271 	.word	0x00000271

0801e31c <__lshift>:
 801e31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e31e:	000c      	movs	r4, r1
 801e320:	0016      	movs	r6, r2
 801e322:	6923      	ldr	r3, [r4, #16]
 801e324:	1157      	asrs	r7, r2, #5
 801e326:	b085      	sub	sp, #20
 801e328:	18fb      	adds	r3, r7, r3
 801e32a:	9301      	str	r3, [sp, #4]
 801e32c:	3301      	adds	r3, #1
 801e32e:	9300      	str	r3, [sp, #0]
 801e330:	6849      	ldr	r1, [r1, #4]
 801e332:	68a3      	ldr	r3, [r4, #8]
 801e334:	9002      	str	r0, [sp, #8]
 801e336:	9a00      	ldr	r2, [sp, #0]
 801e338:	4293      	cmp	r3, r2
 801e33a:	db10      	blt.n	801e35e <__lshift+0x42>
 801e33c:	9802      	ldr	r0, [sp, #8]
 801e33e:	f7ff fd7f 	bl	801de40 <_Balloc>
 801e342:	2300      	movs	r3, #0
 801e344:	0001      	movs	r1, r0
 801e346:	0005      	movs	r5, r0
 801e348:	001a      	movs	r2, r3
 801e34a:	3114      	adds	r1, #20
 801e34c:	4298      	cmp	r0, r3
 801e34e:	d10c      	bne.n	801e36a <__lshift+0x4e>
 801e350:	21ef      	movs	r1, #239	@ 0xef
 801e352:	002a      	movs	r2, r5
 801e354:	4b25      	ldr	r3, [pc, #148]	@ (801e3ec <__lshift+0xd0>)
 801e356:	4826      	ldr	r0, [pc, #152]	@ (801e3f0 <__lshift+0xd4>)
 801e358:	0049      	lsls	r1, r1, #1
 801e35a:	f000 fe63 	bl	801f024 <__assert_func>
 801e35e:	3101      	adds	r1, #1
 801e360:	005b      	lsls	r3, r3, #1
 801e362:	e7e8      	b.n	801e336 <__lshift+0x1a>
 801e364:	0098      	lsls	r0, r3, #2
 801e366:	500a      	str	r2, [r1, r0]
 801e368:	3301      	adds	r3, #1
 801e36a:	42bb      	cmp	r3, r7
 801e36c:	dbfa      	blt.n	801e364 <__lshift+0x48>
 801e36e:	43fb      	mvns	r3, r7
 801e370:	17db      	asrs	r3, r3, #31
 801e372:	401f      	ands	r7, r3
 801e374:	00bf      	lsls	r7, r7, #2
 801e376:	0023      	movs	r3, r4
 801e378:	201f      	movs	r0, #31
 801e37a:	19c9      	adds	r1, r1, r7
 801e37c:	0037      	movs	r7, r6
 801e37e:	6922      	ldr	r2, [r4, #16]
 801e380:	3314      	adds	r3, #20
 801e382:	0092      	lsls	r2, r2, #2
 801e384:	189a      	adds	r2, r3, r2
 801e386:	4007      	ands	r7, r0
 801e388:	4206      	tst	r6, r0
 801e38a:	d029      	beq.n	801e3e0 <__lshift+0xc4>
 801e38c:	3001      	adds	r0, #1
 801e38e:	1bc0      	subs	r0, r0, r7
 801e390:	9003      	str	r0, [sp, #12]
 801e392:	468c      	mov	ip, r1
 801e394:	2000      	movs	r0, #0
 801e396:	681e      	ldr	r6, [r3, #0]
 801e398:	40be      	lsls	r6, r7
 801e39a:	4306      	orrs	r6, r0
 801e39c:	4660      	mov	r0, ip
 801e39e:	c040      	stmia	r0!, {r6}
 801e3a0:	4684      	mov	ip, r0
 801e3a2:	9e03      	ldr	r6, [sp, #12]
 801e3a4:	cb01      	ldmia	r3!, {r0}
 801e3a6:	40f0      	lsrs	r0, r6
 801e3a8:	429a      	cmp	r2, r3
 801e3aa:	d8f4      	bhi.n	801e396 <__lshift+0x7a>
 801e3ac:	0026      	movs	r6, r4
 801e3ae:	3615      	adds	r6, #21
 801e3b0:	2304      	movs	r3, #4
 801e3b2:	42b2      	cmp	r2, r6
 801e3b4:	d304      	bcc.n	801e3c0 <__lshift+0xa4>
 801e3b6:	1b13      	subs	r3, r2, r4
 801e3b8:	3b15      	subs	r3, #21
 801e3ba:	089b      	lsrs	r3, r3, #2
 801e3bc:	3301      	adds	r3, #1
 801e3be:	009b      	lsls	r3, r3, #2
 801e3c0:	50c8      	str	r0, [r1, r3]
 801e3c2:	2800      	cmp	r0, #0
 801e3c4:	d002      	beq.n	801e3cc <__lshift+0xb0>
 801e3c6:	9b01      	ldr	r3, [sp, #4]
 801e3c8:	3302      	adds	r3, #2
 801e3ca:	9300      	str	r3, [sp, #0]
 801e3cc:	9b00      	ldr	r3, [sp, #0]
 801e3ce:	9802      	ldr	r0, [sp, #8]
 801e3d0:	3b01      	subs	r3, #1
 801e3d2:	0021      	movs	r1, r4
 801e3d4:	612b      	str	r3, [r5, #16]
 801e3d6:	f7ff fd77 	bl	801dec8 <_Bfree>
 801e3da:	0028      	movs	r0, r5
 801e3dc:	b005      	add	sp, #20
 801e3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3e0:	cb01      	ldmia	r3!, {r0}
 801e3e2:	c101      	stmia	r1!, {r0}
 801e3e4:	429a      	cmp	r2, r3
 801e3e6:	d8fb      	bhi.n	801e3e0 <__lshift+0xc4>
 801e3e8:	e7f0      	b.n	801e3cc <__lshift+0xb0>
 801e3ea:	46c0      	nop			@ (mov r8, r8)
 801e3ec:	08021349 	.word	0x08021349
 801e3f0:	080213ba 	.word	0x080213ba

0801e3f4 <__mcmp>:
 801e3f4:	b530      	push	{r4, r5, lr}
 801e3f6:	690b      	ldr	r3, [r1, #16]
 801e3f8:	6904      	ldr	r4, [r0, #16]
 801e3fa:	0002      	movs	r2, r0
 801e3fc:	1ae0      	subs	r0, r4, r3
 801e3fe:	429c      	cmp	r4, r3
 801e400:	d10f      	bne.n	801e422 <__mcmp+0x2e>
 801e402:	3214      	adds	r2, #20
 801e404:	009b      	lsls	r3, r3, #2
 801e406:	3114      	adds	r1, #20
 801e408:	0014      	movs	r4, r2
 801e40a:	18c9      	adds	r1, r1, r3
 801e40c:	18d2      	adds	r2, r2, r3
 801e40e:	3a04      	subs	r2, #4
 801e410:	3904      	subs	r1, #4
 801e412:	6815      	ldr	r5, [r2, #0]
 801e414:	680b      	ldr	r3, [r1, #0]
 801e416:	429d      	cmp	r5, r3
 801e418:	d004      	beq.n	801e424 <__mcmp+0x30>
 801e41a:	2001      	movs	r0, #1
 801e41c:	429d      	cmp	r5, r3
 801e41e:	d200      	bcs.n	801e422 <__mcmp+0x2e>
 801e420:	3802      	subs	r0, #2
 801e422:	bd30      	pop	{r4, r5, pc}
 801e424:	4294      	cmp	r4, r2
 801e426:	d3f2      	bcc.n	801e40e <__mcmp+0x1a>
 801e428:	e7fb      	b.n	801e422 <__mcmp+0x2e>
	...

0801e42c <__mdiff>:
 801e42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e42e:	000c      	movs	r4, r1
 801e430:	b087      	sub	sp, #28
 801e432:	9000      	str	r0, [sp, #0]
 801e434:	0011      	movs	r1, r2
 801e436:	0020      	movs	r0, r4
 801e438:	0017      	movs	r7, r2
 801e43a:	f7ff ffdb 	bl	801e3f4 <__mcmp>
 801e43e:	1e05      	subs	r5, r0, #0
 801e440:	d110      	bne.n	801e464 <__mdiff+0x38>
 801e442:	0001      	movs	r1, r0
 801e444:	9800      	ldr	r0, [sp, #0]
 801e446:	f7ff fcfb 	bl	801de40 <_Balloc>
 801e44a:	1e02      	subs	r2, r0, #0
 801e44c:	d104      	bne.n	801e458 <__mdiff+0x2c>
 801e44e:	4b40      	ldr	r3, [pc, #256]	@ (801e550 <__mdiff+0x124>)
 801e450:	4840      	ldr	r0, [pc, #256]	@ (801e554 <__mdiff+0x128>)
 801e452:	4941      	ldr	r1, [pc, #260]	@ (801e558 <__mdiff+0x12c>)
 801e454:	f000 fde6 	bl	801f024 <__assert_func>
 801e458:	2301      	movs	r3, #1
 801e45a:	6145      	str	r5, [r0, #20]
 801e45c:	6103      	str	r3, [r0, #16]
 801e45e:	0010      	movs	r0, r2
 801e460:	b007      	add	sp, #28
 801e462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e464:	2600      	movs	r6, #0
 801e466:	42b0      	cmp	r0, r6
 801e468:	da03      	bge.n	801e472 <__mdiff+0x46>
 801e46a:	0023      	movs	r3, r4
 801e46c:	003c      	movs	r4, r7
 801e46e:	001f      	movs	r7, r3
 801e470:	3601      	adds	r6, #1
 801e472:	6861      	ldr	r1, [r4, #4]
 801e474:	9800      	ldr	r0, [sp, #0]
 801e476:	f7ff fce3 	bl	801de40 <_Balloc>
 801e47a:	1e02      	subs	r2, r0, #0
 801e47c:	d103      	bne.n	801e486 <__mdiff+0x5a>
 801e47e:	4b34      	ldr	r3, [pc, #208]	@ (801e550 <__mdiff+0x124>)
 801e480:	4834      	ldr	r0, [pc, #208]	@ (801e554 <__mdiff+0x128>)
 801e482:	4936      	ldr	r1, [pc, #216]	@ (801e55c <__mdiff+0x130>)
 801e484:	e7e6      	b.n	801e454 <__mdiff+0x28>
 801e486:	6923      	ldr	r3, [r4, #16]
 801e488:	3414      	adds	r4, #20
 801e48a:	9300      	str	r3, [sp, #0]
 801e48c:	009b      	lsls	r3, r3, #2
 801e48e:	18e3      	adds	r3, r4, r3
 801e490:	0021      	movs	r1, r4
 801e492:	9401      	str	r4, [sp, #4]
 801e494:	003c      	movs	r4, r7
 801e496:	9302      	str	r3, [sp, #8]
 801e498:	693b      	ldr	r3, [r7, #16]
 801e49a:	3414      	adds	r4, #20
 801e49c:	009b      	lsls	r3, r3, #2
 801e49e:	18e3      	adds	r3, r4, r3
 801e4a0:	9303      	str	r3, [sp, #12]
 801e4a2:	0003      	movs	r3, r0
 801e4a4:	60c6      	str	r6, [r0, #12]
 801e4a6:	468c      	mov	ip, r1
 801e4a8:	2000      	movs	r0, #0
 801e4aa:	3314      	adds	r3, #20
 801e4ac:	9304      	str	r3, [sp, #16]
 801e4ae:	9305      	str	r3, [sp, #20]
 801e4b0:	4663      	mov	r3, ip
 801e4b2:	cb20      	ldmia	r3!, {r5}
 801e4b4:	b2a9      	uxth	r1, r5
 801e4b6:	000e      	movs	r6, r1
 801e4b8:	469c      	mov	ip, r3
 801e4ba:	cc08      	ldmia	r4!, {r3}
 801e4bc:	0c2d      	lsrs	r5, r5, #16
 801e4be:	b299      	uxth	r1, r3
 801e4c0:	1a71      	subs	r1, r6, r1
 801e4c2:	1809      	adds	r1, r1, r0
 801e4c4:	0c1b      	lsrs	r3, r3, #16
 801e4c6:	1408      	asrs	r0, r1, #16
 801e4c8:	1aeb      	subs	r3, r5, r3
 801e4ca:	181b      	adds	r3, r3, r0
 801e4cc:	1418      	asrs	r0, r3, #16
 801e4ce:	b289      	uxth	r1, r1
 801e4d0:	041b      	lsls	r3, r3, #16
 801e4d2:	4319      	orrs	r1, r3
 801e4d4:	9b05      	ldr	r3, [sp, #20]
 801e4d6:	c302      	stmia	r3!, {r1}
 801e4d8:	9305      	str	r3, [sp, #20]
 801e4da:	9b03      	ldr	r3, [sp, #12]
 801e4dc:	42a3      	cmp	r3, r4
 801e4de:	d8e7      	bhi.n	801e4b0 <__mdiff+0x84>
 801e4e0:	0039      	movs	r1, r7
 801e4e2:	9c03      	ldr	r4, [sp, #12]
 801e4e4:	3115      	adds	r1, #21
 801e4e6:	2304      	movs	r3, #4
 801e4e8:	428c      	cmp	r4, r1
 801e4ea:	d304      	bcc.n	801e4f6 <__mdiff+0xca>
 801e4ec:	1be3      	subs	r3, r4, r7
 801e4ee:	3b15      	subs	r3, #21
 801e4f0:	089b      	lsrs	r3, r3, #2
 801e4f2:	3301      	adds	r3, #1
 801e4f4:	009b      	lsls	r3, r3, #2
 801e4f6:	9901      	ldr	r1, [sp, #4]
 801e4f8:	18cd      	adds	r5, r1, r3
 801e4fa:	9904      	ldr	r1, [sp, #16]
 801e4fc:	002e      	movs	r6, r5
 801e4fe:	18cb      	adds	r3, r1, r3
 801e500:	001f      	movs	r7, r3
 801e502:	9902      	ldr	r1, [sp, #8]
 801e504:	428e      	cmp	r6, r1
 801e506:	d311      	bcc.n	801e52c <__mdiff+0x100>
 801e508:	9c02      	ldr	r4, [sp, #8]
 801e50a:	1ee9      	subs	r1, r5, #3
 801e50c:	2000      	movs	r0, #0
 801e50e:	428c      	cmp	r4, r1
 801e510:	d304      	bcc.n	801e51c <__mdiff+0xf0>
 801e512:	0021      	movs	r1, r4
 801e514:	3103      	adds	r1, #3
 801e516:	1b49      	subs	r1, r1, r5
 801e518:	0889      	lsrs	r1, r1, #2
 801e51a:	0088      	lsls	r0, r1, #2
 801e51c:	181b      	adds	r3, r3, r0
 801e51e:	3b04      	subs	r3, #4
 801e520:	6819      	ldr	r1, [r3, #0]
 801e522:	2900      	cmp	r1, #0
 801e524:	d010      	beq.n	801e548 <__mdiff+0x11c>
 801e526:	9b00      	ldr	r3, [sp, #0]
 801e528:	6113      	str	r3, [r2, #16]
 801e52a:	e798      	b.n	801e45e <__mdiff+0x32>
 801e52c:	4684      	mov	ip, r0
 801e52e:	ce02      	ldmia	r6!, {r1}
 801e530:	b288      	uxth	r0, r1
 801e532:	4460      	add	r0, ip
 801e534:	1400      	asrs	r0, r0, #16
 801e536:	0c0c      	lsrs	r4, r1, #16
 801e538:	1904      	adds	r4, r0, r4
 801e53a:	4461      	add	r1, ip
 801e53c:	1420      	asrs	r0, r4, #16
 801e53e:	b289      	uxth	r1, r1
 801e540:	0424      	lsls	r4, r4, #16
 801e542:	4321      	orrs	r1, r4
 801e544:	c702      	stmia	r7!, {r1}
 801e546:	e7dc      	b.n	801e502 <__mdiff+0xd6>
 801e548:	9900      	ldr	r1, [sp, #0]
 801e54a:	3901      	subs	r1, #1
 801e54c:	9100      	str	r1, [sp, #0]
 801e54e:	e7e6      	b.n	801e51e <__mdiff+0xf2>
 801e550:	08021349 	.word	0x08021349
 801e554:	080213ba 	.word	0x080213ba
 801e558:	00000237 	.word	0x00000237
 801e55c:	00000245 	.word	0x00000245

0801e560 <__ulp>:
 801e560:	b510      	push	{r4, lr}
 801e562:	2400      	movs	r4, #0
 801e564:	4b0c      	ldr	r3, [pc, #48]	@ (801e598 <__ulp+0x38>)
 801e566:	4a0d      	ldr	r2, [pc, #52]	@ (801e59c <__ulp+0x3c>)
 801e568:	400b      	ands	r3, r1
 801e56a:	189b      	adds	r3, r3, r2
 801e56c:	42a3      	cmp	r3, r4
 801e56e:	dc06      	bgt.n	801e57e <__ulp+0x1e>
 801e570:	425b      	negs	r3, r3
 801e572:	151a      	asrs	r2, r3, #20
 801e574:	2a13      	cmp	r2, #19
 801e576:	dc05      	bgt.n	801e584 <__ulp+0x24>
 801e578:	2380      	movs	r3, #128	@ 0x80
 801e57a:	031b      	lsls	r3, r3, #12
 801e57c:	4113      	asrs	r3, r2
 801e57e:	0019      	movs	r1, r3
 801e580:	0020      	movs	r0, r4
 801e582:	bd10      	pop	{r4, pc}
 801e584:	3a14      	subs	r2, #20
 801e586:	2401      	movs	r4, #1
 801e588:	2a1e      	cmp	r2, #30
 801e58a:	dc02      	bgt.n	801e592 <__ulp+0x32>
 801e58c:	2480      	movs	r4, #128	@ 0x80
 801e58e:	0624      	lsls	r4, r4, #24
 801e590:	40d4      	lsrs	r4, r2
 801e592:	2300      	movs	r3, #0
 801e594:	e7f3      	b.n	801e57e <__ulp+0x1e>
 801e596:	46c0      	nop			@ (mov r8, r8)
 801e598:	7ff00000 	.word	0x7ff00000
 801e59c:	fcc00000 	.word	0xfcc00000

0801e5a0 <__b2d>:
 801e5a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e5a2:	0006      	movs	r6, r0
 801e5a4:	6903      	ldr	r3, [r0, #16]
 801e5a6:	3614      	adds	r6, #20
 801e5a8:	009b      	lsls	r3, r3, #2
 801e5aa:	18f3      	adds	r3, r6, r3
 801e5ac:	1f1d      	subs	r5, r3, #4
 801e5ae:	682c      	ldr	r4, [r5, #0]
 801e5b0:	000f      	movs	r7, r1
 801e5b2:	0020      	movs	r0, r4
 801e5b4:	9301      	str	r3, [sp, #4]
 801e5b6:	f7ff fd3b 	bl	801e030 <__hi0bits>
 801e5ba:	2220      	movs	r2, #32
 801e5bc:	1a12      	subs	r2, r2, r0
 801e5be:	603a      	str	r2, [r7, #0]
 801e5c0:	0003      	movs	r3, r0
 801e5c2:	4a1c      	ldr	r2, [pc, #112]	@ (801e634 <__b2d+0x94>)
 801e5c4:	280a      	cmp	r0, #10
 801e5c6:	dc15      	bgt.n	801e5f4 <__b2d+0x54>
 801e5c8:	210b      	movs	r1, #11
 801e5ca:	0027      	movs	r7, r4
 801e5cc:	1a09      	subs	r1, r1, r0
 801e5ce:	40cf      	lsrs	r7, r1
 801e5d0:	433a      	orrs	r2, r7
 801e5d2:	468c      	mov	ip, r1
 801e5d4:	0011      	movs	r1, r2
 801e5d6:	2200      	movs	r2, #0
 801e5d8:	42ae      	cmp	r6, r5
 801e5da:	d202      	bcs.n	801e5e2 <__b2d+0x42>
 801e5dc:	9a01      	ldr	r2, [sp, #4]
 801e5de:	3a08      	subs	r2, #8
 801e5e0:	6812      	ldr	r2, [r2, #0]
 801e5e2:	3315      	adds	r3, #21
 801e5e4:	409c      	lsls	r4, r3
 801e5e6:	4663      	mov	r3, ip
 801e5e8:	0027      	movs	r7, r4
 801e5ea:	40da      	lsrs	r2, r3
 801e5ec:	4317      	orrs	r7, r2
 801e5ee:	0038      	movs	r0, r7
 801e5f0:	b003      	add	sp, #12
 801e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5f4:	2700      	movs	r7, #0
 801e5f6:	42ae      	cmp	r6, r5
 801e5f8:	d202      	bcs.n	801e600 <__b2d+0x60>
 801e5fa:	9d01      	ldr	r5, [sp, #4]
 801e5fc:	3d08      	subs	r5, #8
 801e5fe:	682f      	ldr	r7, [r5, #0]
 801e600:	210b      	movs	r1, #11
 801e602:	4249      	negs	r1, r1
 801e604:	468c      	mov	ip, r1
 801e606:	449c      	add	ip, r3
 801e608:	2b0b      	cmp	r3, #11
 801e60a:	d010      	beq.n	801e62e <__b2d+0x8e>
 801e60c:	4661      	mov	r1, ip
 801e60e:	2320      	movs	r3, #32
 801e610:	408c      	lsls	r4, r1
 801e612:	1a5b      	subs	r3, r3, r1
 801e614:	0039      	movs	r1, r7
 801e616:	40d9      	lsrs	r1, r3
 801e618:	430c      	orrs	r4, r1
 801e61a:	4322      	orrs	r2, r4
 801e61c:	0011      	movs	r1, r2
 801e61e:	2200      	movs	r2, #0
 801e620:	42b5      	cmp	r5, r6
 801e622:	d901      	bls.n	801e628 <__b2d+0x88>
 801e624:	3d04      	subs	r5, #4
 801e626:	682a      	ldr	r2, [r5, #0]
 801e628:	4664      	mov	r4, ip
 801e62a:	40a7      	lsls	r7, r4
 801e62c:	e7dd      	b.n	801e5ea <__b2d+0x4a>
 801e62e:	4322      	orrs	r2, r4
 801e630:	0011      	movs	r1, r2
 801e632:	e7dc      	b.n	801e5ee <__b2d+0x4e>
 801e634:	3ff00000 	.word	0x3ff00000

0801e638 <__d2b>:
 801e638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e63a:	2101      	movs	r1, #1
 801e63c:	0016      	movs	r6, r2
 801e63e:	001f      	movs	r7, r3
 801e640:	f7ff fbfe 	bl	801de40 <_Balloc>
 801e644:	1e04      	subs	r4, r0, #0
 801e646:	d105      	bne.n	801e654 <__d2b+0x1c>
 801e648:	0022      	movs	r2, r4
 801e64a:	4b25      	ldr	r3, [pc, #148]	@ (801e6e0 <__d2b+0xa8>)
 801e64c:	4825      	ldr	r0, [pc, #148]	@ (801e6e4 <__d2b+0xac>)
 801e64e:	4926      	ldr	r1, [pc, #152]	@ (801e6e8 <__d2b+0xb0>)
 801e650:	f000 fce8 	bl	801f024 <__assert_func>
 801e654:	033b      	lsls	r3, r7, #12
 801e656:	007d      	lsls	r5, r7, #1
 801e658:	0b1b      	lsrs	r3, r3, #12
 801e65a:	0d6d      	lsrs	r5, r5, #21
 801e65c:	d002      	beq.n	801e664 <__d2b+0x2c>
 801e65e:	2280      	movs	r2, #128	@ 0x80
 801e660:	0352      	lsls	r2, r2, #13
 801e662:	4313      	orrs	r3, r2
 801e664:	9301      	str	r3, [sp, #4]
 801e666:	2e00      	cmp	r6, #0
 801e668:	d025      	beq.n	801e6b6 <__d2b+0x7e>
 801e66a:	4668      	mov	r0, sp
 801e66c:	9600      	str	r6, [sp, #0]
 801e66e:	f7ff fd00 	bl	801e072 <__lo0bits>
 801e672:	9b01      	ldr	r3, [sp, #4]
 801e674:	9900      	ldr	r1, [sp, #0]
 801e676:	2800      	cmp	r0, #0
 801e678:	d01b      	beq.n	801e6b2 <__d2b+0x7a>
 801e67a:	2220      	movs	r2, #32
 801e67c:	001e      	movs	r6, r3
 801e67e:	1a12      	subs	r2, r2, r0
 801e680:	4096      	lsls	r6, r2
 801e682:	0032      	movs	r2, r6
 801e684:	40c3      	lsrs	r3, r0
 801e686:	430a      	orrs	r2, r1
 801e688:	6162      	str	r2, [r4, #20]
 801e68a:	9301      	str	r3, [sp, #4]
 801e68c:	9e01      	ldr	r6, [sp, #4]
 801e68e:	61a6      	str	r6, [r4, #24]
 801e690:	1e73      	subs	r3, r6, #1
 801e692:	419e      	sbcs	r6, r3
 801e694:	3601      	adds	r6, #1
 801e696:	6126      	str	r6, [r4, #16]
 801e698:	2d00      	cmp	r5, #0
 801e69a:	d014      	beq.n	801e6c6 <__d2b+0x8e>
 801e69c:	2635      	movs	r6, #53	@ 0x35
 801e69e:	4b13      	ldr	r3, [pc, #76]	@ (801e6ec <__d2b+0xb4>)
 801e6a0:	18ed      	adds	r5, r5, r3
 801e6a2:	9b08      	ldr	r3, [sp, #32]
 801e6a4:	182d      	adds	r5, r5, r0
 801e6a6:	601d      	str	r5, [r3, #0]
 801e6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6aa:	1a36      	subs	r6, r6, r0
 801e6ac:	601e      	str	r6, [r3, #0]
 801e6ae:	0020      	movs	r0, r4
 801e6b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e6b2:	6161      	str	r1, [r4, #20]
 801e6b4:	e7ea      	b.n	801e68c <__d2b+0x54>
 801e6b6:	a801      	add	r0, sp, #4
 801e6b8:	f7ff fcdb 	bl	801e072 <__lo0bits>
 801e6bc:	9b01      	ldr	r3, [sp, #4]
 801e6be:	2601      	movs	r6, #1
 801e6c0:	6163      	str	r3, [r4, #20]
 801e6c2:	3020      	adds	r0, #32
 801e6c4:	e7e7      	b.n	801e696 <__d2b+0x5e>
 801e6c6:	4b0a      	ldr	r3, [pc, #40]	@ (801e6f0 <__d2b+0xb8>)
 801e6c8:	18c0      	adds	r0, r0, r3
 801e6ca:	9b08      	ldr	r3, [sp, #32]
 801e6cc:	6018      	str	r0, [r3, #0]
 801e6ce:	4b09      	ldr	r3, [pc, #36]	@ (801e6f4 <__d2b+0xbc>)
 801e6d0:	18f3      	adds	r3, r6, r3
 801e6d2:	009b      	lsls	r3, r3, #2
 801e6d4:	18e3      	adds	r3, r4, r3
 801e6d6:	6958      	ldr	r0, [r3, #20]
 801e6d8:	f7ff fcaa 	bl	801e030 <__hi0bits>
 801e6dc:	0176      	lsls	r6, r6, #5
 801e6de:	e7e3      	b.n	801e6a8 <__d2b+0x70>
 801e6e0:	08021349 	.word	0x08021349
 801e6e4:	080213ba 	.word	0x080213ba
 801e6e8:	0000030f 	.word	0x0000030f
 801e6ec:	fffffbcd 	.word	0xfffffbcd
 801e6f0:	fffffbce 	.word	0xfffffbce
 801e6f4:	3fffffff 	.word	0x3fffffff

0801e6f8 <__ratio>:
 801e6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6fa:	b087      	sub	sp, #28
 801e6fc:	000f      	movs	r7, r1
 801e6fe:	a904      	add	r1, sp, #16
 801e700:	0006      	movs	r6, r0
 801e702:	f7ff ff4d 	bl	801e5a0 <__b2d>
 801e706:	9000      	str	r0, [sp, #0]
 801e708:	9101      	str	r1, [sp, #4]
 801e70a:	9b00      	ldr	r3, [sp, #0]
 801e70c:	9c01      	ldr	r4, [sp, #4]
 801e70e:	0038      	movs	r0, r7
 801e710:	a905      	add	r1, sp, #20
 801e712:	9302      	str	r3, [sp, #8]
 801e714:	9403      	str	r4, [sp, #12]
 801e716:	f7ff ff43 	bl	801e5a0 <__b2d>
 801e71a:	000d      	movs	r5, r1
 801e71c:	0002      	movs	r2, r0
 801e71e:	000b      	movs	r3, r1
 801e720:	6930      	ldr	r0, [r6, #16]
 801e722:	6939      	ldr	r1, [r7, #16]
 801e724:	9e04      	ldr	r6, [sp, #16]
 801e726:	1a40      	subs	r0, r0, r1
 801e728:	9905      	ldr	r1, [sp, #20]
 801e72a:	0140      	lsls	r0, r0, #5
 801e72c:	1a71      	subs	r1, r6, r1
 801e72e:	1841      	adds	r1, r0, r1
 801e730:	0508      	lsls	r0, r1, #20
 801e732:	2900      	cmp	r1, #0
 801e734:	dd08      	ble.n	801e748 <__ratio+0x50>
 801e736:	9901      	ldr	r1, [sp, #4]
 801e738:	1841      	adds	r1, r0, r1
 801e73a:	9103      	str	r1, [sp, #12]
 801e73c:	9802      	ldr	r0, [sp, #8]
 801e73e:	9903      	ldr	r1, [sp, #12]
 801e740:	f7e3 fb38 	bl	8001db4 <__aeabi_ddiv>
 801e744:	b007      	add	sp, #28
 801e746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e748:	1a2b      	subs	r3, r5, r0
 801e74a:	e7f7      	b.n	801e73c <__ratio+0x44>

0801e74c <__copybits>:
 801e74c:	b570      	push	{r4, r5, r6, lr}
 801e74e:	0014      	movs	r4, r2
 801e750:	0005      	movs	r5, r0
 801e752:	3901      	subs	r1, #1
 801e754:	6913      	ldr	r3, [r2, #16]
 801e756:	1149      	asrs	r1, r1, #5
 801e758:	3101      	adds	r1, #1
 801e75a:	0089      	lsls	r1, r1, #2
 801e75c:	3414      	adds	r4, #20
 801e75e:	009b      	lsls	r3, r3, #2
 801e760:	1841      	adds	r1, r0, r1
 801e762:	18e3      	adds	r3, r4, r3
 801e764:	42a3      	cmp	r3, r4
 801e766:	d80d      	bhi.n	801e784 <__copybits+0x38>
 801e768:	0014      	movs	r4, r2
 801e76a:	3411      	adds	r4, #17
 801e76c:	2500      	movs	r5, #0
 801e76e:	429c      	cmp	r4, r3
 801e770:	d803      	bhi.n	801e77a <__copybits+0x2e>
 801e772:	1a9b      	subs	r3, r3, r2
 801e774:	3b11      	subs	r3, #17
 801e776:	089b      	lsrs	r3, r3, #2
 801e778:	009d      	lsls	r5, r3, #2
 801e77a:	2300      	movs	r3, #0
 801e77c:	1940      	adds	r0, r0, r5
 801e77e:	4281      	cmp	r1, r0
 801e780:	d803      	bhi.n	801e78a <__copybits+0x3e>
 801e782:	bd70      	pop	{r4, r5, r6, pc}
 801e784:	cc40      	ldmia	r4!, {r6}
 801e786:	c540      	stmia	r5!, {r6}
 801e788:	e7ec      	b.n	801e764 <__copybits+0x18>
 801e78a:	c008      	stmia	r0!, {r3}
 801e78c:	e7f7      	b.n	801e77e <__copybits+0x32>

0801e78e <__any_on>:
 801e78e:	0002      	movs	r2, r0
 801e790:	6900      	ldr	r0, [r0, #16]
 801e792:	b510      	push	{r4, lr}
 801e794:	3214      	adds	r2, #20
 801e796:	114b      	asrs	r3, r1, #5
 801e798:	4298      	cmp	r0, r3
 801e79a:	db13      	blt.n	801e7c4 <__any_on+0x36>
 801e79c:	dd0c      	ble.n	801e7b8 <__any_on+0x2a>
 801e79e:	241f      	movs	r4, #31
 801e7a0:	0008      	movs	r0, r1
 801e7a2:	4020      	ands	r0, r4
 801e7a4:	4221      	tst	r1, r4
 801e7a6:	d007      	beq.n	801e7b8 <__any_on+0x2a>
 801e7a8:	0099      	lsls	r1, r3, #2
 801e7aa:	588c      	ldr	r4, [r1, r2]
 801e7ac:	0021      	movs	r1, r4
 801e7ae:	40c1      	lsrs	r1, r0
 801e7b0:	4081      	lsls	r1, r0
 801e7b2:	2001      	movs	r0, #1
 801e7b4:	428c      	cmp	r4, r1
 801e7b6:	d104      	bne.n	801e7c2 <__any_on+0x34>
 801e7b8:	009b      	lsls	r3, r3, #2
 801e7ba:	18d3      	adds	r3, r2, r3
 801e7bc:	4293      	cmp	r3, r2
 801e7be:	d803      	bhi.n	801e7c8 <__any_on+0x3a>
 801e7c0:	2000      	movs	r0, #0
 801e7c2:	bd10      	pop	{r4, pc}
 801e7c4:	0003      	movs	r3, r0
 801e7c6:	e7f7      	b.n	801e7b8 <__any_on+0x2a>
 801e7c8:	3b04      	subs	r3, #4
 801e7ca:	6819      	ldr	r1, [r3, #0]
 801e7cc:	2900      	cmp	r1, #0
 801e7ce:	d0f5      	beq.n	801e7bc <__any_on+0x2e>
 801e7d0:	2001      	movs	r0, #1
 801e7d2:	e7f6      	b.n	801e7c2 <__any_on+0x34>

0801e7d4 <__ascii_wctomb>:
 801e7d4:	0003      	movs	r3, r0
 801e7d6:	1e08      	subs	r0, r1, #0
 801e7d8:	d005      	beq.n	801e7e6 <__ascii_wctomb+0x12>
 801e7da:	2aff      	cmp	r2, #255	@ 0xff
 801e7dc:	d904      	bls.n	801e7e8 <__ascii_wctomb+0x14>
 801e7de:	228a      	movs	r2, #138	@ 0x8a
 801e7e0:	2001      	movs	r0, #1
 801e7e2:	601a      	str	r2, [r3, #0]
 801e7e4:	4240      	negs	r0, r0
 801e7e6:	4770      	bx	lr
 801e7e8:	2001      	movs	r0, #1
 801e7ea:	700a      	strb	r2, [r1, #0]
 801e7ec:	e7fb      	b.n	801e7e6 <__ascii_wctomb+0x12>
	...

0801e7f0 <__ssputs_r>:
 801e7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7f2:	688e      	ldr	r6, [r1, #8]
 801e7f4:	b085      	sub	sp, #20
 801e7f6:	001f      	movs	r7, r3
 801e7f8:	000c      	movs	r4, r1
 801e7fa:	680b      	ldr	r3, [r1, #0]
 801e7fc:	9002      	str	r0, [sp, #8]
 801e7fe:	9203      	str	r2, [sp, #12]
 801e800:	42be      	cmp	r6, r7
 801e802:	d830      	bhi.n	801e866 <__ssputs_r+0x76>
 801e804:	210c      	movs	r1, #12
 801e806:	5e62      	ldrsh	r2, [r4, r1]
 801e808:	2190      	movs	r1, #144	@ 0x90
 801e80a:	00c9      	lsls	r1, r1, #3
 801e80c:	420a      	tst	r2, r1
 801e80e:	d028      	beq.n	801e862 <__ssputs_r+0x72>
 801e810:	2003      	movs	r0, #3
 801e812:	6921      	ldr	r1, [r4, #16]
 801e814:	1a5b      	subs	r3, r3, r1
 801e816:	9301      	str	r3, [sp, #4]
 801e818:	6963      	ldr	r3, [r4, #20]
 801e81a:	4343      	muls	r3, r0
 801e81c:	9801      	ldr	r0, [sp, #4]
 801e81e:	0fdd      	lsrs	r5, r3, #31
 801e820:	18ed      	adds	r5, r5, r3
 801e822:	1c7b      	adds	r3, r7, #1
 801e824:	181b      	adds	r3, r3, r0
 801e826:	106d      	asrs	r5, r5, #1
 801e828:	42ab      	cmp	r3, r5
 801e82a:	d900      	bls.n	801e82e <__ssputs_r+0x3e>
 801e82c:	001d      	movs	r5, r3
 801e82e:	0552      	lsls	r2, r2, #21
 801e830:	d528      	bpl.n	801e884 <__ssputs_r+0x94>
 801e832:	0029      	movs	r1, r5
 801e834:	9802      	ldr	r0, [sp, #8]
 801e836:	f7ff fa61 	bl	801dcfc <_malloc_r>
 801e83a:	1e06      	subs	r6, r0, #0
 801e83c:	d02c      	beq.n	801e898 <__ssputs_r+0xa8>
 801e83e:	9a01      	ldr	r2, [sp, #4]
 801e840:	6921      	ldr	r1, [r4, #16]
 801e842:	f7fd fff9 	bl	801c838 <memcpy>
 801e846:	89a2      	ldrh	r2, [r4, #12]
 801e848:	4b18      	ldr	r3, [pc, #96]	@ (801e8ac <__ssputs_r+0xbc>)
 801e84a:	401a      	ands	r2, r3
 801e84c:	2380      	movs	r3, #128	@ 0x80
 801e84e:	4313      	orrs	r3, r2
 801e850:	81a3      	strh	r3, [r4, #12]
 801e852:	9b01      	ldr	r3, [sp, #4]
 801e854:	6126      	str	r6, [r4, #16]
 801e856:	18f6      	adds	r6, r6, r3
 801e858:	6026      	str	r6, [r4, #0]
 801e85a:	003e      	movs	r6, r7
 801e85c:	6165      	str	r5, [r4, #20]
 801e85e:	1aed      	subs	r5, r5, r3
 801e860:	60a5      	str	r5, [r4, #8]
 801e862:	42be      	cmp	r6, r7
 801e864:	d900      	bls.n	801e868 <__ssputs_r+0x78>
 801e866:	003e      	movs	r6, r7
 801e868:	0032      	movs	r2, r6
 801e86a:	9903      	ldr	r1, [sp, #12]
 801e86c:	6820      	ldr	r0, [r4, #0]
 801e86e:	f000 fbb3 	bl	801efd8 <memmove>
 801e872:	2000      	movs	r0, #0
 801e874:	68a3      	ldr	r3, [r4, #8]
 801e876:	1b9b      	subs	r3, r3, r6
 801e878:	60a3      	str	r3, [r4, #8]
 801e87a:	6823      	ldr	r3, [r4, #0]
 801e87c:	199b      	adds	r3, r3, r6
 801e87e:	6023      	str	r3, [r4, #0]
 801e880:	b005      	add	sp, #20
 801e882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e884:	002a      	movs	r2, r5
 801e886:	9802      	ldr	r0, [sp, #8]
 801e888:	f000 fc17 	bl	801f0ba <_realloc_r>
 801e88c:	1e06      	subs	r6, r0, #0
 801e88e:	d1e0      	bne.n	801e852 <__ssputs_r+0x62>
 801e890:	6921      	ldr	r1, [r4, #16]
 801e892:	9802      	ldr	r0, [sp, #8]
 801e894:	f7fe fe62 	bl	801d55c <_free_r>
 801e898:	230c      	movs	r3, #12
 801e89a:	2001      	movs	r0, #1
 801e89c:	9a02      	ldr	r2, [sp, #8]
 801e89e:	4240      	negs	r0, r0
 801e8a0:	6013      	str	r3, [r2, #0]
 801e8a2:	89a2      	ldrh	r2, [r4, #12]
 801e8a4:	3334      	adds	r3, #52	@ 0x34
 801e8a6:	4313      	orrs	r3, r2
 801e8a8:	81a3      	strh	r3, [r4, #12]
 801e8aa:	e7e9      	b.n	801e880 <__ssputs_r+0x90>
 801e8ac:	fffffb7f 	.word	0xfffffb7f

0801e8b0 <_svfiprintf_r>:
 801e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8b2:	b0a1      	sub	sp, #132	@ 0x84
 801e8b4:	9003      	str	r0, [sp, #12]
 801e8b6:	001d      	movs	r5, r3
 801e8b8:	898b      	ldrh	r3, [r1, #12]
 801e8ba:	000f      	movs	r7, r1
 801e8bc:	0016      	movs	r6, r2
 801e8be:	061b      	lsls	r3, r3, #24
 801e8c0:	d511      	bpl.n	801e8e6 <_svfiprintf_r+0x36>
 801e8c2:	690b      	ldr	r3, [r1, #16]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d10e      	bne.n	801e8e6 <_svfiprintf_r+0x36>
 801e8c8:	2140      	movs	r1, #64	@ 0x40
 801e8ca:	f7ff fa17 	bl	801dcfc <_malloc_r>
 801e8ce:	6038      	str	r0, [r7, #0]
 801e8d0:	6138      	str	r0, [r7, #16]
 801e8d2:	2800      	cmp	r0, #0
 801e8d4:	d105      	bne.n	801e8e2 <_svfiprintf_r+0x32>
 801e8d6:	230c      	movs	r3, #12
 801e8d8:	9a03      	ldr	r2, [sp, #12]
 801e8da:	6013      	str	r3, [r2, #0]
 801e8dc:	2001      	movs	r0, #1
 801e8de:	4240      	negs	r0, r0
 801e8e0:	e0cf      	b.n	801ea82 <_svfiprintf_r+0x1d2>
 801e8e2:	2340      	movs	r3, #64	@ 0x40
 801e8e4:	617b      	str	r3, [r7, #20]
 801e8e6:	2300      	movs	r3, #0
 801e8e8:	ac08      	add	r4, sp, #32
 801e8ea:	6163      	str	r3, [r4, #20]
 801e8ec:	3320      	adds	r3, #32
 801e8ee:	7663      	strb	r3, [r4, #25]
 801e8f0:	3310      	adds	r3, #16
 801e8f2:	76a3      	strb	r3, [r4, #26]
 801e8f4:	9507      	str	r5, [sp, #28]
 801e8f6:	0035      	movs	r5, r6
 801e8f8:	782b      	ldrb	r3, [r5, #0]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d001      	beq.n	801e902 <_svfiprintf_r+0x52>
 801e8fe:	2b25      	cmp	r3, #37	@ 0x25
 801e900:	d148      	bne.n	801e994 <_svfiprintf_r+0xe4>
 801e902:	1bab      	subs	r3, r5, r6
 801e904:	9305      	str	r3, [sp, #20]
 801e906:	42b5      	cmp	r5, r6
 801e908:	d00b      	beq.n	801e922 <_svfiprintf_r+0x72>
 801e90a:	0032      	movs	r2, r6
 801e90c:	0039      	movs	r1, r7
 801e90e:	9803      	ldr	r0, [sp, #12]
 801e910:	f7ff ff6e 	bl	801e7f0 <__ssputs_r>
 801e914:	3001      	adds	r0, #1
 801e916:	d100      	bne.n	801e91a <_svfiprintf_r+0x6a>
 801e918:	e0ae      	b.n	801ea78 <_svfiprintf_r+0x1c8>
 801e91a:	6963      	ldr	r3, [r4, #20]
 801e91c:	9a05      	ldr	r2, [sp, #20]
 801e91e:	189b      	adds	r3, r3, r2
 801e920:	6163      	str	r3, [r4, #20]
 801e922:	782b      	ldrb	r3, [r5, #0]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d100      	bne.n	801e92a <_svfiprintf_r+0x7a>
 801e928:	e0a6      	b.n	801ea78 <_svfiprintf_r+0x1c8>
 801e92a:	2201      	movs	r2, #1
 801e92c:	2300      	movs	r3, #0
 801e92e:	4252      	negs	r2, r2
 801e930:	6062      	str	r2, [r4, #4]
 801e932:	a904      	add	r1, sp, #16
 801e934:	3254      	adds	r2, #84	@ 0x54
 801e936:	1852      	adds	r2, r2, r1
 801e938:	1c6e      	adds	r6, r5, #1
 801e93a:	6023      	str	r3, [r4, #0]
 801e93c:	60e3      	str	r3, [r4, #12]
 801e93e:	60a3      	str	r3, [r4, #8]
 801e940:	7013      	strb	r3, [r2, #0]
 801e942:	65a3      	str	r3, [r4, #88]	@ 0x58
 801e944:	4b54      	ldr	r3, [pc, #336]	@ (801ea98 <_svfiprintf_r+0x1e8>)
 801e946:	2205      	movs	r2, #5
 801e948:	0018      	movs	r0, r3
 801e94a:	7831      	ldrb	r1, [r6, #0]
 801e94c:	9305      	str	r3, [sp, #20]
 801e94e:	f7fd ff68 	bl	801c822 <memchr>
 801e952:	1c75      	adds	r5, r6, #1
 801e954:	2800      	cmp	r0, #0
 801e956:	d11f      	bne.n	801e998 <_svfiprintf_r+0xe8>
 801e958:	6822      	ldr	r2, [r4, #0]
 801e95a:	06d3      	lsls	r3, r2, #27
 801e95c:	d504      	bpl.n	801e968 <_svfiprintf_r+0xb8>
 801e95e:	2353      	movs	r3, #83	@ 0x53
 801e960:	a904      	add	r1, sp, #16
 801e962:	185b      	adds	r3, r3, r1
 801e964:	2120      	movs	r1, #32
 801e966:	7019      	strb	r1, [r3, #0]
 801e968:	0713      	lsls	r3, r2, #28
 801e96a:	d504      	bpl.n	801e976 <_svfiprintf_r+0xc6>
 801e96c:	2353      	movs	r3, #83	@ 0x53
 801e96e:	a904      	add	r1, sp, #16
 801e970:	185b      	adds	r3, r3, r1
 801e972:	212b      	movs	r1, #43	@ 0x2b
 801e974:	7019      	strb	r1, [r3, #0]
 801e976:	7833      	ldrb	r3, [r6, #0]
 801e978:	2b2a      	cmp	r3, #42	@ 0x2a
 801e97a:	d016      	beq.n	801e9aa <_svfiprintf_r+0xfa>
 801e97c:	0035      	movs	r5, r6
 801e97e:	2100      	movs	r1, #0
 801e980:	200a      	movs	r0, #10
 801e982:	68e3      	ldr	r3, [r4, #12]
 801e984:	782a      	ldrb	r2, [r5, #0]
 801e986:	1c6e      	adds	r6, r5, #1
 801e988:	3a30      	subs	r2, #48	@ 0x30
 801e98a:	2a09      	cmp	r2, #9
 801e98c:	d950      	bls.n	801ea30 <_svfiprintf_r+0x180>
 801e98e:	2900      	cmp	r1, #0
 801e990:	d111      	bne.n	801e9b6 <_svfiprintf_r+0x106>
 801e992:	e017      	b.n	801e9c4 <_svfiprintf_r+0x114>
 801e994:	3501      	adds	r5, #1
 801e996:	e7af      	b.n	801e8f8 <_svfiprintf_r+0x48>
 801e998:	9b05      	ldr	r3, [sp, #20]
 801e99a:	6822      	ldr	r2, [r4, #0]
 801e99c:	1ac0      	subs	r0, r0, r3
 801e99e:	2301      	movs	r3, #1
 801e9a0:	4083      	lsls	r3, r0
 801e9a2:	4313      	orrs	r3, r2
 801e9a4:	002e      	movs	r6, r5
 801e9a6:	6023      	str	r3, [r4, #0]
 801e9a8:	e7cc      	b.n	801e944 <_svfiprintf_r+0x94>
 801e9aa:	9b07      	ldr	r3, [sp, #28]
 801e9ac:	1d19      	adds	r1, r3, #4
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	9107      	str	r1, [sp, #28]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	db01      	blt.n	801e9ba <_svfiprintf_r+0x10a>
 801e9b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e9b8:	e004      	b.n	801e9c4 <_svfiprintf_r+0x114>
 801e9ba:	425b      	negs	r3, r3
 801e9bc:	60e3      	str	r3, [r4, #12]
 801e9be:	2302      	movs	r3, #2
 801e9c0:	4313      	orrs	r3, r2
 801e9c2:	6023      	str	r3, [r4, #0]
 801e9c4:	782b      	ldrb	r3, [r5, #0]
 801e9c6:	2b2e      	cmp	r3, #46	@ 0x2e
 801e9c8:	d10c      	bne.n	801e9e4 <_svfiprintf_r+0x134>
 801e9ca:	786b      	ldrb	r3, [r5, #1]
 801e9cc:	2b2a      	cmp	r3, #42	@ 0x2a
 801e9ce:	d134      	bne.n	801ea3a <_svfiprintf_r+0x18a>
 801e9d0:	9b07      	ldr	r3, [sp, #28]
 801e9d2:	3502      	adds	r5, #2
 801e9d4:	1d1a      	adds	r2, r3, #4
 801e9d6:	681b      	ldr	r3, [r3, #0]
 801e9d8:	9207      	str	r2, [sp, #28]
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	da01      	bge.n	801e9e2 <_svfiprintf_r+0x132>
 801e9de:	2301      	movs	r3, #1
 801e9e0:	425b      	negs	r3, r3
 801e9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e9e4:	4e2d      	ldr	r6, [pc, #180]	@ (801ea9c <_svfiprintf_r+0x1ec>)
 801e9e6:	2203      	movs	r2, #3
 801e9e8:	0030      	movs	r0, r6
 801e9ea:	7829      	ldrb	r1, [r5, #0]
 801e9ec:	f7fd ff19 	bl	801c822 <memchr>
 801e9f0:	2800      	cmp	r0, #0
 801e9f2:	d006      	beq.n	801ea02 <_svfiprintf_r+0x152>
 801e9f4:	2340      	movs	r3, #64	@ 0x40
 801e9f6:	1b80      	subs	r0, r0, r6
 801e9f8:	4083      	lsls	r3, r0
 801e9fa:	6822      	ldr	r2, [r4, #0]
 801e9fc:	3501      	adds	r5, #1
 801e9fe:	4313      	orrs	r3, r2
 801ea00:	6023      	str	r3, [r4, #0]
 801ea02:	7829      	ldrb	r1, [r5, #0]
 801ea04:	2206      	movs	r2, #6
 801ea06:	4826      	ldr	r0, [pc, #152]	@ (801eaa0 <_svfiprintf_r+0x1f0>)
 801ea08:	1c6e      	adds	r6, r5, #1
 801ea0a:	7621      	strb	r1, [r4, #24]
 801ea0c:	f7fd ff09 	bl	801c822 <memchr>
 801ea10:	2800      	cmp	r0, #0
 801ea12:	d038      	beq.n	801ea86 <_svfiprintf_r+0x1d6>
 801ea14:	4b23      	ldr	r3, [pc, #140]	@ (801eaa4 <_svfiprintf_r+0x1f4>)
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d122      	bne.n	801ea60 <_svfiprintf_r+0x1b0>
 801ea1a:	2207      	movs	r2, #7
 801ea1c:	9b07      	ldr	r3, [sp, #28]
 801ea1e:	3307      	adds	r3, #7
 801ea20:	4393      	bics	r3, r2
 801ea22:	3308      	adds	r3, #8
 801ea24:	9307      	str	r3, [sp, #28]
 801ea26:	6963      	ldr	r3, [r4, #20]
 801ea28:	9a04      	ldr	r2, [sp, #16]
 801ea2a:	189b      	adds	r3, r3, r2
 801ea2c:	6163      	str	r3, [r4, #20]
 801ea2e:	e762      	b.n	801e8f6 <_svfiprintf_r+0x46>
 801ea30:	4343      	muls	r3, r0
 801ea32:	0035      	movs	r5, r6
 801ea34:	2101      	movs	r1, #1
 801ea36:	189b      	adds	r3, r3, r2
 801ea38:	e7a4      	b.n	801e984 <_svfiprintf_r+0xd4>
 801ea3a:	2300      	movs	r3, #0
 801ea3c:	200a      	movs	r0, #10
 801ea3e:	0019      	movs	r1, r3
 801ea40:	3501      	adds	r5, #1
 801ea42:	6063      	str	r3, [r4, #4]
 801ea44:	782a      	ldrb	r2, [r5, #0]
 801ea46:	1c6e      	adds	r6, r5, #1
 801ea48:	3a30      	subs	r2, #48	@ 0x30
 801ea4a:	2a09      	cmp	r2, #9
 801ea4c:	d903      	bls.n	801ea56 <_svfiprintf_r+0x1a6>
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d0c8      	beq.n	801e9e4 <_svfiprintf_r+0x134>
 801ea52:	9109      	str	r1, [sp, #36]	@ 0x24
 801ea54:	e7c6      	b.n	801e9e4 <_svfiprintf_r+0x134>
 801ea56:	4341      	muls	r1, r0
 801ea58:	0035      	movs	r5, r6
 801ea5a:	2301      	movs	r3, #1
 801ea5c:	1889      	adds	r1, r1, r2
 801ea5e:	e7f1      	b.n	801ea44 <_svfiprintf_r+0x194>
 801ea60:	aa07      	add	r2, sp, #28
 801ea62:	9200      	str	r2, [sp, #0]
 801ea64:	0021      	movs	r1, r4
 801ea66:	003a      	movs	r2, r7
 801ea68:	4b0f      	ldr	r3, [pc, #60]	@ (801eaa8 <_svfiprintf_r+0x1f8>)
 801ea6a:	9803      	ldr	r0, [sp, #12]
 801ea6c:	f7fd f8d4 	bl	801bc18 <_printf_float>
 801ea70:	9004      	str	r0, [sp, #16]
 801ea72:	9b04      	ldr	r3, [sp, #16]
 801ea74:	3301      	adds	r3, #1
 801ea76:	d1d6      	bne.n	801ea26 <_svfiprintf_r+0x176>
 801ea78:	89bb      	ldrh	r3, [r7, #12]
 801ea7a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ea7c:	065b      	lsls	r3, r3, #25
 801ea7e:	d500      	bpl.n	801ea82 <_svfiprintf_r+0x1d2>
 801ea80:	e72c      	b.n	801e8dc <_svfiprintf_r+0x2c>
 801ea82:	b021      	add	sp, #132	@ 0x84
 801ea84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea86:	aa07      	add	r2, sp, #28
 801ea88:	9200      	str	r2, [sp, #0]
 801ea8a:	0021      	movs	r1, r4
 801ea8c:	003a      	movs	r2, r7
 801ea8e:	4b06      	ldr	r3, [pc, #24]	@ (801eaa8 <_svfiprintf_r+0x1f8>)
 801ea90:	9803      	ldr	r0, [sp, #12]
 801ea92:	f7fd fb6f 	bl	801c174 <_printf_i>
 801ea96:	e7eb      	b.n	801ea70 <_svfiprintf_r+0x1c0>
 801ea98:	08021510 	.word	0x08021510
 801ea9c:	08021516 	.word	0x08021516
 801eaa0:	0802151a 	.word	0x0802151a
 801eaa4:	0801bc19 	.word	0x0801bc19
 801eaa8:	0801e7f1 	.word	0x0801e7f1

0801eaac <__sfputc_r>:
 801eaac:	6893      	ldr	r3, [r2, #8]
 801eaae:	b510      	push	{r4, lr}
 801eab0:	3b01      	subs	r3, #1
 801eab2:	6093      	str	r3, [r2, #8]
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	da04      	bge.n	801eac2 <__sfputc_r+0x16>
 801eab8:	6994      	ldr	r4, [r2, #24]
 801eaba:	42a3      	cmp	r3, r4
 801eabc:	db07      	blt.n	801eace <__sfputc_r+0x22>
 801eabe:	290a      	cmp	r1, #10
 801eac0:	d005      	beq.n	801eace <__sfputc_r+0x22>
 801eac2:	6813      	ldr	r3, [r2, #0]
 801eac4:	1c58      	adds	r0, r3, #1
 801eac6:	6010      	str	r0, [r2, #0]
 801eac8:	7019      	strb	r1, [r3, #0]
 801eaca:	0008      	movs	r0, r1
 801eacc:	bd10      	pop	{r4, pc}
 801eace:	f000 f9e2 	bl	801ee96 <__swbuf_r>
 801ead2:	0001      	movs	r1, r0
 801ead4:	e7f9      	b.n	801eaca <__sfputc_r+0x1e>

0801ead6 <__sfputs_r>:
 801ead6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ead8:	0006      	movs	r6, r0
 801eada:	000f      	movs	r7, r1
 801eadc:	0014      	movs	r4, r2
 801eade:	18d5      	adds	r5, r2, r3
 801eae0:	42ac      	cmp	r4, r5
 801eae2:	d101      	bne.n	801eae8 <__sfputs_r+0x12>
 801eae4:	2000      	movs	r0, #0
 801eae6:	e007      	b.n	801eaf8 <__sfputs_r+0x22>
 801eae8:	7821      	ldrb	r1, [r4, #0]
 801eaea:	003a      	movs	r2, r7
 801eaec:	0030      	movs	r0, r6
 801eaee:	f7ff ffdd 	bl	801eaac <__sfputc_r>
 801eaf2:	3401      	adds	r4, #1
 801eaf4:	1c43      	adds	r3, r0, #1
 801eaf6:	d1f3      	bne.n	801eae0 <__sfputs_r+0xa>
 801eaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eafc <_vfiprintf_r>:
 801eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eafe:	b0a1      	sub	sp, #132	@ 0x84
 801eb00:	000f      	movs	r7, r1
 801eb02:	0015      	movs	r5, r2
 801eb04:	001e      	movs	r6, r3
 801eb06:	9003      	str	r0, [sp, #12]
 801eb08:	2800      	cmp	r0, #0
 801eb0a:	d004      	beq.n	801eb16 <_vfiprintf_r+0x1a>
 801eb0c:	6a03      	ldr	r3, [r0, #32]
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d101      	bne.n	801eb16 <_vfiprintf_r+0x1a>
 801eb12:	f7fd fccd 	bl	801c4b0 <__sinit>
 801eb16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801eb18:	07db      	lsls	r3, r3, #31
 801eb1a:	d405      	bmi.n	801eb28 <_vfiprintf_r+0x2c>
 801eb1c:	89bb      	ldrh	r3, [r7, #12]
 801eb1e:	059b      	lsls	r3, r3, #22
 801eb20:	d402      	bmi.n	801eb28 <_vfiprintf_r+0x2c>
 801eb22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801eb24:	f7fd fe7b 	bl	801c81e <__retarget_lock_acquire_recursive>
 801eb28:	89bb      	ldrh	r3, [r7, #12]
 801eb2a:	071b      	lsls	r3, r3, #28
 801eb2c:	d502      	bpl.n	801eb34 <_vfiprintf_r+0x38>
 801eb2e:	693b      	ldr	r3, [r7, #16]
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	d113      	bne.n	801eb5c <_vfiprintf_r+0x60>
 801eb34:	0039      	movs	r1, r7
 801eb36:	9803      	ldr	r0, [sp, #12]
 801eb38:	f000 f9f0 	bl	801ef1c <__swsetup_r>
 801eb3c:	2800      	cmp	r0, #0
 801eb3e:	d00d      	beq.n	801eb5c <_vfiprintf_r+0x60>
 801eb40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801eb42:	07db      	lsls	r3, r3, #31
 801eb44:	d503      	bpl.n	801eb4e <_vfiprintf_r+0x52>
 801eb46:	2001      	movs	r0, #1
 801eb48:	4240      	negs	r0, r0
 801eb4a:	b021      	add	sp, #132	@ 0x84
 801eb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb4e:	89bb      	ldrh	r3, [r7, #12]
 801eb50:	059b      	lsls	r3, r3, #22
 801eb52:	d4f8      	bmi.n	801eb46 <_vfiprintf_r+0x4a>
 801eb54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801eb56:	f7fd fe63 	bl	801c820 <__retarget_lock_release_recursive>
 801eb5a:	e7f4      	b.n	801eb46 <_vfiprintf_r+0x4a>
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	ac08      	add	r4, sp, #32
 801eb60:	6163      	str	r3, [r4, #20]
 801eb62:	3320      	adds	r3, #32
 801eb64:	7663      	strb	r3, [r4, #25]
 801eb66:	3310      	adds	r3, #16
 801eb68:	76a3      	strb	r3, [r4, #26]
 801eb6a:	9607      	str	r6, [sp, #28]
 801eb6c:	002e      	movs	r6, r5
 801eb6e:	7833      	ldrb	r3, [r6, #0]
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d001      	beq.n	801eb78 <_vfiprintf_r+0x7c>
 801eb74:	2b25      	cmp	r3, #37	@ 0x25
 801eb76:	d148      	bne.n	801ec0a <_vfiprintf_r+0x10e>
 801eb78:	1b73      	subs	r3, r6, r5
 801eb7a:	9305      	str	r3, [sp, #20]
 801eb7c:	42ae      	cmp	r6, r5
 801eb7e:	d00b      	beq.n	801eb98 <_vfiprintf_r+0x9c>
 801eb80:	002a      	movs	r2, r5
 801eb82:	0039      	movs	r1, r7
 801eb84:	9803      	ldr	r0, [sp, #12]
 801eb86:	f7ff ffa6 	bl	801ead6 <__sfputs_r>
 801eb8a:	3001      	adds	r0, #1
 801eb8c:	d100      	bne.n	801eb90 <_vfiprintf_r+0x94>
 801eb8e:	e0ae      	b.n	801ecee <_vfiprintf_r+0x1f2>
 801eb90:	6963      	ldr	r3, [r4, #20]
 801eb92:	9a05      	ldr	r2, [sp, #20]
 801eb94:	189b      	adds	r3, r3, r2
 801eb96:	6163      	str	r3, [r4, #20]
 801eb98:	7833      	ldrb	r3, [r6, #0]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d100      	bne.n	801eba0 <_vfiprintf_r+0xa4>
 801eb9e:	e0a6      	b.n	801ecee <_vfiprintf_r+0x1f2>
 801eba0:	2201      	movs	r2, #1
 801eba2:	2300      	movs	r3, #0
 801eba4:	4252      	negs	r2, r2
 801eba6:	6062      	str	r2, [r4, #4]
 801eba8:	a904      	add	r1, sp, #16
 801ebaa:	3254      	adds	r2, #84	@ 0x54
 801ebac:	1852      	adds	r2, r2, r1
 801ebae:	1c75      	adds	r5, r6, #1
 801ebb0:	6023      	str	r3, [r4, #0]
 801ebb2:	60e3      	str	r3, [r4, #12]
 801ebb4:	60a3      	str	r3, [r4, #8]
 801ebb6:	7013      	strb	r3, [r2, #0]
 801ebb8:	65a3      	str	r3, [r4, #88]	@ 0x58
 801ebba:	4b59      	ldr	r3, [pc, #356]	@ (801ed20 <_vfiprintf_r+0x224>)
 801ebbc:	2205      	movs	r2, #5
 801ebbe:	0018      	movs	r0, r3
 801ebc0:	7829      	ldrb	r1, [r5, #0]
 801ebc2:	9305      	str	r3, [sp, #20]
 801ebc4:	f7fd fe2d 	bl	801c822 <memchr>
 801ebc8:	1c6e      	adds	r6, r5, #1
 801ebca:	2800      	cmp	r0, #0
 801ebcc:	d11f      	bne.n	801ec0e <_vfiprintf_r+0x112>
 801ebce:	6822      	ldr	r2, [r4, #0]
 801ebd0:	06d3      	lsls	r3, r2, #27
 801ebd2:	d504      	bpl.n	801ebde <_vfiprintf_r+0xe2>
 801ebd4:	2353      	movs	r3, #83	@ 0x53
 801ebd6:	a904      	add	r1, sp, #16
 801ebd8:	185b      	adds	r3, r3, r1
 801ebda:	2120      	movs	r1, #32
 801ebdc:	7019      	strb	r1, [r3, #0]
 801ebde:	0713      	lsls	r3, r2, #28
 801ebe0:	d504      	bpl.n	801ebec <_vfiprintf_r+0xf0>
 801ebe2:	2353      	movs	r3, #83	@ 0x53
 801ebe4:	a904      	add	r1, sp, #16
 801ebe6:	185b      	adds	r3, r3, r1
 801ebe8:	212b      	movs	r1, #43	@ 0x2b
 801ebea:	7019      	strb	r1, [r3, #0]
 801ebec:	782b      	ldrb	r3, [r5, #0]
 801ebee:	2b2a      	cmp	r3, #42	@ 0x2a
 801ebf0:	d016      	beq.n	801ec20 <_vfiprintf_r+0x124>
 801ebf2:	002e      	movs	r6, r5
 801ebf4:	2100      	movs	r1, #0
 801ebf6:	200a      	movs	r0, #10
 801ebf8:	68e3      	ldr	r3, [r4, #12]
 801ebfa:	7832      	ldrb	r2, [r6, #0]
 801ebfc:	1c75      	adds	r5, r6, #1
 801ebfe:	3a30      	subs	r2, #48	@ 0x30
 801ec00:	2a09      	cmp	r2, #9
 801ec02:	d950      	bls.n	801eca6 <_vfiprintf_r+0x1aa>
 801ec04:	2900      	cmp	r1, #0
 801ec06:	d111      	bne.n	801ec2c <_vfiprintf_r+0x130>
 801ec08:	e017      	b.n	801ec3a <_vfiprintf_r+0x13e>
 801ec0a:	3601      	adds	r6, #1
 801ec0c:	e7af      	b.n	801eb6e <_vfiprintf_r+0x72>
 801ec0e:	9b05      	ldr	r3, [sp, #20]
 801ec10:	6822      	ldr	r2, [r4, #0]
 801ec12:	1ac0      	subs	r0, r0, r3
 801ec14:	2301      	movs	r3, #1
 801ec16:	4083      	lsls	r3, r0
 801ec18:	4313      	orrs	r3, r2
 801ec1a:	0035      	movs	r5, r6
 801ec1c:	6023      	str	r3, [r4, #0]
 801ec1e:	e7cc      	b.n	801ebba <_vfiprintf_r+0xbe>
 801ec20:	9b07      	ldr	r3, [sp, #28]
 801ec22:	1d19      	adds	r1, r3, #4
 801ec24:	681b      	ldr	r3, [r3, #0]
 801ec26:	9107      	str	r1, [sp, #28]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	db01      	blt.n	801ec30 <_vfiprintf_r+0x134>
 801ec2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec2e:	e004      	b.n	801ec3a <_vfiprintf_r+0x13e>
 801ec30:	425b      	negs	r3, r3
 801ec32:	60e3      	str	r3, [r4, #12]
 801ec34:	2302      	movs	r3, #2
 801ec36:	4313      	orrs	r3, r2
 801ec38:	6023      	str	r3, [r4, #0]
 801ec3a:	7833      	ldrb	r3, [r6, #0]
 801ec3c:	2b2e      	cmp	r3, #46	@ 0x2e
 801ec3e:	d10c      	bne.n	801ec5a <_vfiprintf_r+0x15e>
 801ec40:	7873      	ldrb	r3, [r6, #1]
 801ec42:	2b2a      	cmp	r3, #42	@ 0x2a
 801ec44:	d134      	bne.n	801ecb0 <_vfiprintf_r+0x1b4>
 801ec46:	9b07      	ldr	r3, [sp, #28]
 801ec48:	3602      	adds	r6, #2
 801ec4a:	1d1a      	adds	r2, r3, #4
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	9207      	str	r2, [sp, #28]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	da01      	bge.n	801ec58 <_vfiprintf_r+0x15c>
 801ec54:	2301      	movs	r3, #1
 801ec56:	425b      	negs	r3, r3
 801ec58:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec5a:	4d32      	ldr	r5, [pc, #200]	@ (801ed24 <_vfiprintf_r+0x228>)
 801ec5c:	2203      	movs	r2, #3
 801ec5e:	0028      	movs	r0, r5
 801ec60:	7831      	ldrb	r1, [r6, #0]
 801ec62:	f7fd fdde 	bl	801c822 <memchr>
 801ec66:	2800      	cmp	r0, #0
 801ec68:	d006      	beq.n	801ec78 <_vfiprintf_r+0x17c>
 801ec6a:	2340      	movs	r3, #64	@ 0x40
 801ec6c:	1b40      	subs	r0, r0, r5
 801ec6e:	4083      	lsls	r3, r0
 801ec70:	6822      	ldr	r2, [r4, #0]
 801ec72:	3601      	adds	r6, #1
 801ec74:	4313      	orrs	r3, r2
 801ec76:	6023      	str	r3, [r4, #0]
 801ec78:	7831      	ldrb	r1, [r6, #0]
 801ec7a:	2206      	movs	r2, #6
 801ec7c:	482a      	ldr	r0, [pc, #168]	@ (801ed28 <_vfiprintf_r+0x22c>)
 801ec7e:	1c75      	adds	r5, r6, #1
 801ec80:	7621      	strb	r1, [r4, #24]
 801ec82:	f7fd fdce 	bl	801c822 <memchr>
 801ec86:	2800      	cmp	r0, #0
 801ec88:	d040      	beq.n	801ed0c <_vfiprintf_r+0x210>
 801ec8a:	4b28      	ldr	r3, [pc, #160]	@ (801ed2c <_vfiprintf_r+0x230>)
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d122      	bne.n	801ecd6 <_vfiprintf_r+0x1da>
 801ec90:	2207      	movs	r2, #7
 801ec92:	9b07      	ldr	r3, [sp, #28]
 801ec94:	3307      	adds	r3, #7
 801ec96:	4393      	bics	r3, r2
 801ec98:	3308      	adds	r3, #8
 801ec9a:	9307      	str	r3, [sp, #28]
 801ec9c:	6963      	ldr	r3, [r4, #20]
 801ec9e:	9a04      	ldr	r2, [sp, #16]
 801eca0:	189b      	adds	r3, r3, r2
 801eca2:	6163      	str	r3, [r4, #20]
 801eca4:	e762      	b.n	801eb6c <_vfiprintf_r+0x70>
 801eca6:	4343      	muls	r3, r0
 801eca8:	002e      	movs	r6, r5
 801ecaa:	2101      	movs	r1, #1
 801ecac:	189b      	adds	r3, r3, r2
 801ecae:	e7a4      	b.n	801ebfa <_vfiprintf_r+0xfe>
 801ecb0:	2300      	movs	r3, #0
 801ecb2:	200a      	movs	r0, #10
 801ecb4:	0019      	movs	r1, r3
 801ecb6:	3601      	adds	r6, #1
 801ecb8:	6063      	str	r3, [r4, #4]
 801ecba:	7832      	ldrb	r2, [r6, #0]
 801ecbc:	1c75      	adds	r5, r6, #1
 801ecbe:	3a30      	subs	r2, #48	@ 0x30
 801ecc0:	2a09      	cmp	r2, #9
 801ecc2:	d903      	bls.n	801eccc <_vfiprintf_r+0x1d0>
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d0c8      	beq.n	801ec5a <_vfiprintf_r+0x15e>
 801ecc8:	9109      	str	r1, [sp, #36]	@ 0x24
 801ecca:	e7c6      	b.n	801ec5a <_vfiprintf_r+0x15e>
 801eccc:	4341      	muls	r1, r0
 801ecce:	002e      	movs	r6, r5
 801ecd0:	2301      	movs	r3, #1
 801ecd2:	1889      	adds	r1, r1, r2
 801ecd4:	e7f1      	b.n	801ecba <_vfiprintf_r+0x1be>
 801ecd6:	aa07      	add	r2, sp, #28
 801ecd8:	9200      	str	r2, [sp, #0]
 801ecda:	0021      	movs	r1, r4
 801ecdc:	003a      	movs	r2, r7
 801ecde:	4b14      	ldr	r3, [pc, #80]	@ (801ed30 <_vfiprintf_r+0x234>)
 801ece0:	9803      	ldr	r0, [sp, #12]
 801ece2:	f7fc ff99 	bl	801bc18 <_printf_float>
 801ece6:	9004      	str	r0, [sp, #16]
 801ece8:	9b04      	ldr	r3, [sp, #16]
 801ecea:	3301      	adds	r3, #1
 801ecec:	d1d6      	bne.n	801ec9c <_vfiprintf_r+0x1a0>
 801ecee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ecf0:	07db      	lsls	r3, r3, #31
 801ecf2:	d405      	bmi.n	801ed00 <_vfiprintf_r+0x204>
 801ecf4:	89bb      	ldrh	r3, [r7, #12]
 801ecf6:	059b      	lsls	r3, r3, #22
 801ecf8:	d402      	bmi.n	801ed00 <_vfiprintf_r+0x204>
 801ecfa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ecfc:	f7fd fd90 	bl	801c820 <__retarget_lock_release_recursive>
 801ed00:	89bb      	ldrh	r3, [r7, #12]
 801ed02:	065b      	lsls	r3, r3, #25
 801ed04:	d500      	bpl.n	801ed08 <_vfiprintf_r+0x20c>
 801ed06:	e71e      	b.n	801eb46 <_vfiprintf_r+0x4a>
 801ed08:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ed0a:	e71e      	b.n	801eb4a <_vfiprintf_r+0x4e>
 801ed0c:	aa07      	add	r2, sp, #28
 801ed0e:	9200      	str	r2, [sp, #0]
 801ed10:	0021      	movs	r1, r4
 801ed12:	003a      	movs	r2, r7
 801ed14:	4b06      	ldr	r3, [pc, #24]	@ (801ed30 <_vfiprintf_r+0x234>)
 801ed16:	9803      	ldr	r0, [sp, #12]
 801ed18:	f7fd fa2c 	bl	801c174 <_printf_i>
 801ed1c:	e7e3      	b.n	801ece6 <_vfiprintf_r+0x1ea>
 801ed1e:	46c0      	nop			@ (mov r8, r8)
 801ed20:	08021510 	.word	0x08021510
 801ed24:	08021516 	.word	0x08021516
 801ed28:	0802151a 	.word	0x0802151a
 801ed2c:	0801bc19 	.word	0x0801bc19
 801ed30:	0801ead7 	.word	0x0801ead7

0801ed34 <__sflush_r>:
 801ed34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ed36:	220c      	movs	r2, #12
 801ed38:	5e8b      	ldrsh	r3, [r1, r2]
 801ed3a:	0005      	movs	r5, r0
 801ed3c:	000c      	movs	r4, r1
 801ed3e:	071a      	lsls	r2, r3, #28
 801ed40:	d456      	bmi.n	801edf0 <__sflush_r+0xbc>
 801ed42:	684a      	ldr	r2, [r1, #4]
 801ed44:	2a00      	cmp	r2, #0
 801ed46:	dc02      	bgt.n	801ed4e <__sflush_r+0x1a>
 801ed48:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801ed4a:	2a00      	cmp	r2, #0
 801ed4c:	dd4e      	ble.n	801edec <__sflush_r+0xb8>
 801ed4e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801ed50:	2f00      	cmp	r7, #0
 801ed52:	d04b      	beq.n	801edec <__sflush_r+0xb8>
 801ed54:	2200      	movs	r2, #0
 801ed56:	2080      	movs	r0, #128	@ 0x80
 801ed58:	682e      	ldr	r6, [r5, #0]
 801ed5a:	602a      	str	r2, [r5, #0]
 801ed5c:	001a      	movs	r2, r3
 801ed5e:	0140      	lsls	r0, r0, #5
 801ed60:	6a21      	ldr	r1, [r4, #32]
 801ed62:	4002      	ands	r2, r0
 801ed64:	4203      	tst	r3, r0
 801ed66:	d033      	beq.n	801edd0 <__sflush_r+0x9c>
 801ed68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ed6a:	89a3      	ldrh	r3, [r4, #12]
 801ed6c:	075b      	lsls	r3, r3, #29
 801ed6e:	d506      	bpl.n	801ed7e <__sflush_r+0x4a>
 801ed70:	6863      	ldr	r3, [r4, #4]
 801ed72:	1ad2      	subs	r2, r2, r3
 801ed74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ed76:	2b00      	cmp	r3, #0
 801ed78:	d001      	beq.n	801ed7e <__sflush_r+0x4a>
 801ed7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ed7c:	1ad2      	subs	r2, r2, r3
 801ed7e:	2300      	movs	r3, #0
 801ed80:	0028      	movs	r0, r5
 801ed82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801ed84:	6a21      	ldr	r1, [r4, #32]
 801ed86:	47b8      	blx	r7
 801ed88:	89a2      	ldrh	r2, [r4, #12]
 801ed8a:	1c43      	adds	r3, r0, #1
 801ed8c:	d106      	bne.n	801ed9c <__sflush_r+0x68>
 801ed8e:	6829      	ldr	r1, [r5, #0]
 801ed90:	291d      	cmp	r1, #29
 801ed92:	d846      	bhi.n	801ee22 <__sflush_r+0xee>
 801ed94:	4b29      	ldr	r3, [pc, #164]	@ (801ee3c <__sflush_r+0x108>)
 801ed96:	410b      	asrs	r3, r1
 801ed98:	07db      	lsls	r3, r3, #31
 801ed9a:	d442      	bmi.n	801ee22 <__sflush_r+0xee>
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	6063      	str	r3, [r4, #4]
 801eda0:	6923      	ldr	r3, [r4, #16]
 801eda2:	6023      	str	r3, [r4, #0]
 801eda4:	04d2      	lsls	r2, r2, #19
 801eda6:	d505      	bpl.n	801edb4 <__sflush_r+0x80>
 801eda8:	1c43      	adds	r3, r0, #1
 801edaa:	d102      	bne.n	801edb2 <__sflush_r+0x7e>
 801edac:	682b      	ldr	r3, [r5, #0]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d100      	bne.n	801edb4 <__sflush_r+0x80>
 801edb2:	6560      	str	r0, [r4, #84]	@ 0x54
 801edb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801edb6:	602e      	str	r6, [r5, #0]
 801edb8:	2900      	cmp	r1, #0
 801edba:	d017      	beq.n	801edec <__sflush_r+0xb8>
 801edbc:	0023      	movs	r3, r4
 801edbe:	3344      	adds	r3, #68	@ 0x44
 801edc0:	4299      	cmp	r1, r3
 801edc2:	d002      	beq.n	801edca <__sflush_r+0x96>
 801edc4:	0028      	movs	r0, r5
 801edc6:	f7fe fbc9 	bl	801d55c <_free_r>
 801edca:	2300      	movs	r3, #0
 801edcc:	6363      	str	r3, [r4, #52]	@ 0x34
 801edce:	e00d      	b.n	801edec <__sflush_r+0xb8>
 801edd0:	2301      	movs	r3, #1
 801edd2:	0028      	movs	r0, r5
 801edd4:	47b8      	blx	r7
 801edd6:	0002      	movs	r2, r0
 801edd8:	1c43      	adds	r3, r0, #1
 801edda:	d1c6      	bne.n	801ed6a <__sflush_r+0x36>
 801eddc:	682b      	ldr	r3, [r5, #0]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d0c3      	beq.n	801ed6a <__sflush_r+0x36>
 801ede2:	2b1d      	cmp	r3, #29
 801ede4:	d001      	beq.n	801edea <__sflush_r+0xb6>
 801ede6:	2b16      	cmp	r3, #22
 801ede8:	d11a      	bne.n	801ee20 <__sflush_r+0xec>
 801edea:	602e      	str	r6, [r5, #0]
 801edec:	2000      	movs	r0, #0
 801edee:	e01e      	b.n	801ee2e <__sflush_r+0xfa>
 801edf0:	690e      	ldr	r6, [r1, #16]
 801edf2:	2e00      	cmp	r6, #0
 801edf4:	d0fa      	beq.n	801edec <__sflush_r+0xb8>
 801edf6:	680f      	ldr	r7, [r1, #0]
 801edf8:	600e      	str	r6, [r1, #0]
 801edfa:	1bba      	subs	r2, r7, r6
 801edfc:	9201      	str	r2, [sp, #4]
 801edfe:	2200      	movs	r2, #0
 801ee00:	079b      	lsls	r3, r3, #30
 801ee02:	d100      	bne.n	801ee06 <__sflush_r+0xd2>
 801ee04:	694a      	ldr	r2, [r1, #20]
 801ee06:	60a2      	str	r2, [r4, #8]
 801ee08:	9b01      	ldr	r3, [sp, #4]
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	ddee      	ble.n	801edec <__sflush_r+0xb8>
 801ee0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ee10:	0032      	movs	r2, r6
 801ee12:	001f      	movs	r7, r3
 801ee14:	0028      	movs	r0, r5
 801ee16:	9b01      	ldr	r3, [sp, #4]
 801ee18:	6a21      	ldr	r1, [r4, #32]
 801ee1a:	47b8      	blx	r7
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	dc07      	bgt.n	801ee30 <__sflush_r+0xfc>
 801ee20:	89a2      	ldrh	r2, [r4, #12]
 801ee22:	2340      	movs	r3, #64	@ 0x40
 801ee24:	2001      	movs	r0, #1
 801ee26:	4313      	orrs	r3, r2
 801ee28:	b21b      	sxth	r3, r3
 801ee2a:	81a3      	strh	r3, [r4, #12]
 801ee2c:	4240      	negs	r0, r0
 801ee2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ee30:	9b01      	ldr	r3, [sp, #4]
 801ee32:	1836      	adds	r6, r6, r0
 801ee34:	1a1b      	subs	r3, r3, r0
 801ee36:	9301      	str	r3, [sp, #4]
 801ee38:	e7e6      	b.n	801ee08 <__sflush_r+0xd4>
 801ee3a:	46c0      	nop			@ (mov r8, r8)
 801ee3c:	dfbffffe 	.word	0xdfbffffe

0801ee40 <_fflush_r>:
 801ee40:	690b      	ldr	r3, [r1, #16]
 801ee42:	b570      	push	{r4, r5, r6, lr}
 801ee44:	0005      	movs	r5, r0
 801ee46:	000c      	movs	r4, r1
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d102      	bne.n	801ee52 <_fflush_r+0x12>
 801ee4c:	2500      	movs	r5, #0
 801ee4e:	0028      	movs	r0, r5
 801ee50:	bd70      	pop	{r4, r5, r6, pc}
 801ee52:	2800      	cmp	r0, #0
 801ee54:	d004      	beq.n	801ee60 <_fflush_r+0x20>
 801ee56:	6a03      	ldr	r3, [r0, #32]
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d101      	bne.n	801ee60 <_fflush_r+0x20>
 801ee5c:	f7fd fb28 	bl	801c4b0 <__sinit>
 801ee60:	220c      	movs	r2, #12
 801ee62:	5ea3      	ldrsh	r3, [r4, r2]
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	d0f1      	beq.n	801ee4c <_fflush_r+0xc>
 801ee68:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ee6a:	07d2      	lsls	r2, r2, #31
 801ee6c:	d404      	bmi.n	801ee78 <_fflush_r+0x38>
 801ee6e:	059b      	lsls	r3, r3, #22
 801ee70:	d402      	bmi.n	801ee78 <_fflush_r+0x38>
 801ee72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee74:	f7fd fcd3 	bl	801c81e <__retarget_lock_acquire_recursive>
 801ee78:	0028      	movs	r0, r5
 801ee7a:	0021      	movs	r1, r4
 801ee7c:	f7ff ff5a 	bl	801ed34 <__sflush_r>
 801ee80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ee82:	0005      	movs	r5, r0
 801ee84:	07db      	lsls	r3, r3, #31
 801ee86:	d4e2      	bmi.n	801ee4e <_fflush_r+0xe>
 801ee88:	89a3      	ldrh	r3, [r4, #12]
 801ee8a:	059b      	lsls	r3, r3, #22
 801ee8c:	d4df      	bmi.n	801ee4e <_fflush_r+0xe>
 801ee8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee90:	f7fd fcc6 	bl	801c820 <__retarget_lock_release_recursive>
 801ee94:	e7db      	b.n	801ee4e <_fflush_r+0xe>

0801ee96 <__swbuf_r>:
 801ee96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee98:	0006      	movs	r6, r0
 801ee9a:	000d      	movs	r5, r1
 801ee9c:	0014      	movs	r4, r2
 801ee9e:	2800      	cmp	r0, #0
 801eea0:	d004      	beq.n	801eeac <__swbuf_r+0x16>
 801eea2:	6a03      	ldr	r3, [r0, #32]
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	d101      	bne.n	801eeac <__swbuf_r+0x16>
 801eea8:	f7fd fb02 	bl	801c4b0 <__sinit>
 801eeac:	69a3      	ldr	r3, [r4, #24]
 801eeae:	60a3      	str	r3, [r4, #8]
 801eeb0:	89a3      	ldrh	r3, [r4, #12]
 801eeb2:	071b      	lsls	r3, r3, #28
 801eeb4:	d502      	bpl.n	801eebc <__swbuf_r+0x26>
 801eeb6:	6923      	ldr	r3, [r4, #16]
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d109      	bne.n	801eed0 <__swbuf_r+0x3a>
 801eebc:	0021      	movs	r1, r4
 801eebe:	0030      	movs	r0, r6
 801eec0:	f000 f82c 	bl	801ef1c <__swsetup_r>
 801eec4:	2800      	cmp	r0, #0
 801eec6:	d003      	beq.n	801eed0 <__swbuf_r+0x3a>
 801eec8:	2501      	movs	r5, #1
 801eeca:	426d      	negs	r5, r5
 801eecc:	0028      	movs	r0, r5
 801eece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eed0:	6923      	ldr	r3, [r4, #16]
 801eed2:	6820      	ldr	r0, [r4, #0]
 801eed4:	b2ef      	uxtb	r7, r5
 801eed6:	1ac0      	subs	r0, r0, r3
 801eed8:	6963      	ldr	r3, [r4, #20]
 801eeda:	b2ed      	uxtb	r5, r5
 801eedc:	4283      	cmp	r3, r0
 801eede:	dc05      	bgt.n	801eeec <__swbuf_r+0x56>
 801eee0:	0021      	movs	r1, r4
 801eee2:	0030      	movs	r0, r6
 801eee4:	f7ff ffac 	bl	801ee40 <_fflush_r>
 801eee8:	2800      	cmp	r0, #0
 801eeea:	d1ed      	bne.n	801eec8 <__swbuf_r+0x32>
 801eeec:	68a3      	ldr	r3, [r4, #8]
 801eeee:	3001      	adds	r0, #1
 801eef0:	3b01      	subs	r3, #1
 801eef2:	60a3      	str	r3, [r4, #8]
 801eef4:	6823      	ldr	r3, [r4, #0]
 801eef6:	1c5a      	adds	r2, r3, #1
 801eef8:	6022      	str	r2, [r4, #0]
 801eefa:	701f      	strb	r7, [r3, #0]
 801eefc:	6963      	ldr	r3, [r4, #20]
 801eefe:	4283      	cmp	r3, r0
 801ef00:	d004      	beq.n	801ef0c <__swbuf_r+0x76>
 801ef02:	89a3      	ldrh	r3, [r4, #12]
 801ef04:	07db      	lsls	r3, r3, #31
 801ef06:	d5e1      	bpl.n	801eecc <__swbuf_r+0x36>
 801ef08:	2d0a      	cmp	r5, #10
 801ef0a:	d1df      	bne.n	801eecc <__swbuf_r+0x36>
 801ef0c:	0021      	movs	r1, r4
 801ef0e:	0030      	movs	r0, r6
 801ef10:	f7ff ff96 	bl	801ee40 <_fflush_r>
 801ef14:	2800      	cmp	r0, #0
 801ef16:	d0d9      	beq.n	801eecc <__swbuf_r+0x36>
 801ef18:	e7d6      	b.n	801eec8 <__swbuf_r+0x32>
	...

0801ef1c <__swsetup_r>:
 801ef1c:	4b2d      	ldr	r3, [pc, #180]	@ (801efd4 <__swsetup_r+0xb8>)
 801ef1e:	b570      	push	{r4, r5, r6, lr}
 801ef20:	0005      	movs	r5, r0
 801ef22:	6818      	ldr	r0, [r3, #0]
 801ef24:	000c      	movs	r4, r1
 801ef26:	2800      	cmp	r0, #0
 801ef28:	d004      	beq.n	801ef34 <__swsetup_r+0x18>
 801ef2a:	6a03      	ldr	r3, [r0, #32]
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d101      	bne.n	801ef34 <__swsetup_r+0x18>
 801ef30:	f7fd fabe 	bl	801c4b0 <__sinit>
 801ef34:	230c      	movs	r3, #12
 801ef36:	5ee2      	ldrsh	r2, [r4, r3]
 801ef38:	0713      	lsls	r3, r2, #28
 801ef3a:	d423      	bmi.n	801ef84 <__swsetup_r+0x68>
 801ef3c:	06d3      	lsls	r3, r2, #27
 801ef3e:	d407      	bmi.n	801ef50 <__swsetup_r+0x34>
 801ef40:	2309      	movs	r3, #9
 801ef42:	602b      	str	r3, [r5, #0]
 801ef44:	2340      	movs	r3, #64	@ 0x40
 801ef46:	2001      	movs	r0, #1
 801ef48:	4313      	orrs	r3, r2
 801ef4a:	81a3      	strh	r3, [r4, #12]
 801ef4c:	4240      	negs	r0, r0
 801ef4e:	e03a      	b.n	801efc6 <__swsetup_r+0xaa>
 801ef50:	0752      	lsls	r2, r2, #29
 801ef52:	d513      	bpl.n	801ef7c <__swsetup_r+0x60>
 801ef54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ef56:	2900      	cmp	r1, #0
 801ef58:	d008      	beq.n	801ef6c <__swsetup_r+0x50>
 801ef5a:	0023      	movs	r3, r4
 801ef5c:	3344      	adds	r3, #68	@ 0x44
 801ef5e:	4299      	cmp	r1, r3
 801ef60:	d002      	beq.n	801ef68 <__swsetup_r+0x4c>
 801ef62:	0028      	movs	r0, r5
 801ef64:	f7fe fafa 	bl	801d55c <_free_r>
 801ef68:	2300      	movs	r3, #0
 801ef6a:	6363      	str	r3, [r4, #52]	@ 0x34
 801ef6c:	2224      	movs	r2, #36	@ 0x24
 801ef6e:	89a3      	ldrh	r3, [r4, #12]
 801ef70:	4393      	bics	r3, r2
 801ef72:	81a3      	strh	r3, [r4, #12]
 801ef74:	2300      	movs	r3, #0
 801ef76:	6063      	str	r3, [r4, #4]
 801ef78:	6923      	ldr	r3, [r4, #16]
 801ef7a:	6023      	str	r3, [r4, #0]
 801ef7c:	2308      	movs	r3, #8
 801ef7e:	89a2      	ldrh	r2, [r4, #12]
 801ef80:	4313      	orrs	r3, r2
 801ef82:	81a3      	strh	r3, [r4, #12]
 801ef84:	6923      	ldr	r3, [r4, #16]
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d10b      	bne.n	801efa2 <__swsetup_r+0x86>
 801ef8a:	21a0      	movs	r1, #160	@ 0xa0
 801ef8c:	2280      	movs	r2, #128	@ 0x80
 801ef8e:	89a3      	ldrh	r3, [r4, #12]
 801ef90:	0089      	lsls	r1, r1, #2
 801ef92:	0092      	lsls	r2, r2, #2
 801ef94:	400b      	ands	r3, r1
 801ef96:	4293      	cmp	r3, r2
 801ef98:	d003      	beq.n	801efa2 <__swsetup_r+0x86>
 801ef9a:	0021      	movs	r1, r4
 801ef9c:	0028      	movs	r0, r5
 801ef9e:	f000 f8f5 	bl	801f18c <__smakebuf_r>
 801efa2:	230c      	movs	r3, #12
 801efa4:	5ee2      	ldrsh	r2, [r4, r3]
 801efa6:	2101      	movs	r1, #1
 801efa8:	0013      	movs	r3, r2
 801efaa:	400b      	ands	r3, r1
 801efac:	420a      	tst	r2, r1
 801efae:	d00b      	beq.n	801efc8 <__swsetup_r+0xac>
 801efb0:	2300      	movs	r3, #0
 801efb2:	60a3      	str	r3, [r4, #8]
 801efb4:	6963      	ldr	r3, [r4, #20]
 801efb6:	425b      	negs	r3, r3
 801efb8:	61a3      	str	r3, [r4, #24]
 801efba:	2000      	movs	r0, #0
 801efbc:	6923      	ldr	r3, [r4, #16]
 801efbe:	4283      	cmp	r3, r0
 801efc0:	d101      	bne.n	801efc6 <__swsetup_r+0xaa>
 801efc2:	0613      	lsls	r3, r2, #24
 801efc4:	d4be      	bmi.n	801ef44 <__swsetup_r+0x28>
 801efc6:	bd70      	pop	{r4, r5, r6, pc}
 801efc8:	0791      	lsls	r1, r2, #30
 801efca:	d400      	bmi.n	801efce <__swsetup_r+0xb2>
 801efcc:	6963      	ldr	r3, [r4, #20]
 801efce:	60a3      	str	r3, [r4, #8]
 801efd0:	e7f3      	b.n	801efba <__swsetup_r+0x9e>
 801efd2:	46c0      	nop			@ (mov r8, r8)
 801efd4:	200003c4 	.word	0x200003c4

0801efd8 <memmove>:
 801efd8:	b510      	push	{r4, lr}
 801efda:	4288      	cmp	r0, r1
 801efdc:	d806      	bhi.n	801efec <memmove+0x14>
 801efde:	2300      	movs	r3, #0
 801efe0:	429a      	cmp	r2, r3
 801efe2:	d008      	beq.n	801eff6 <memmove+0x1e>
 801efe4:	5ccc      	ldrb	r4, [r1, r3]
 801efe6:	54c4      	strb	r4, [r0, r3]
 801efe8:	3301      	adds	r3, #1
 801efea:	e7f9      	b.n	801efe0 <memmove+0x8>
 801efec:	188b      	adds	r3, r1, r2
 801efee:	4298      	cmp	r0, r3
 801eff0:	d2f5      	bcs.n	801efde <memmove+0x6>
 801eff2:	3a01      	subs	r2, #1
 801eff4:	d200      	bcs.n	801eff8 <memmove+0x20>
 801eff6:	bd10      	pop	{r4, pc}
 801eff8:	5c8b      	ldrb	r3, [r1, r2]
 801effa:	5483      	strb	r3, [r0, r2]
 801effc:	e7f9      	b.n	801eff2 <memmove+0x1a>
	...

0801f000 <_sbrk_r>:
 801f000:	2300      	movs	r3, #0
 801f002:	b570      	push	{r4, r5, r6, lr}
 801f004:	4d06      	ldr	r5, [pc, #24]	@ (801f020 <_sbrk_r+0x20>)
 801f006:	0004      	movs	r4, r0
 801f008:	0008      	movs	r0, r1
 801f00a:	602b      	str	r3, [r5, #0]
 801f00c:	f7ec f834 	bl	800b078 <_sbrk>
 801f010:	1c43      	adds	r3, r0, #1
 801f012:	d103      	bne.n	801f01c <_sbrk_r+0x1c>
 801f014:	682b      	ldr	r3, [r5, #0]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d000      	beq.n	801f01c <_sbrk_r+0x1c>
 801f01a:	6023      	str	r3, [r4, #0]
 801f01c:	bd70      	pop	{r4, r5, r6, pc}
 801f01e:	46c0      	nop			@ (mov r8, r8)
 801f020:	200038b0 	.word	0x200038b0

0801f024 <__assert_func>:
 801f024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801f026:	0014      	movs	r4, r2
 801f028:	001a      	movs	r2, r3
 801f02a:	4b09      	ldr	r3, [pc, #36]	@ (801f050 <__assert_func+0x2c>)
 801f02c:	0005      	movs	r5, r0
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	000e      	movs	r6, r1
 801f032:	68d8      	ldr	r0, [r3, #12]
 801f034:	4b07      	ldr	r3, [pc, #28]	@ (801f054 <__assert_func+0x30>)
 801f036:	2c00      	cmp	r4, #0
 801f038:	d101      	bne.n	801f03e <__assert_func+0x1a>
 801f03a:	4b07      	ldr	r3, [pc, #28]	@ (801f058 <__assert_func+0x34>)
 801f03c:	001c      	movs	r4, r3
 801f03e:	4907      	ldr	r1, [pc, #28]	@ (801f05c <__assert_func+0x38>)
 801f040:	9301      	str	r3, [sp, #4]
 801f042:	9402      	str	r4, [sp, #8]
 801f044:	002b      	movs	r3, r5
 801f046:	9600      	str	r6, [sp, #0]
 801f048:	f000 f866 	bl	801f118 <fiprintf>
 801f04c:	f000 f904 	bl	801f258 <abort>
 801f050:	200003c4 	.word	0x200003c4
 801f054:	08021521 	.word	0x08021521
 801f058:	0802155c 	.word	0x0802155c
 801f05c:	0802152e 	.word	0x0802152e

0801f060 <_calloc_r>:
 801f060:	b570      	push	{r4, r5, r6, lr}
 801f062:	0c0b      	lsrs	r3, r1, #16
 801f064:	0c15      	lsrs	r5, r2, #16
 801f066:	2b00      	cmp	r3, #0
 801f068:	d11e      	bne.n	801f0a8 <_calloc_r+0x48>
 801f06a:	2d00      	cmp	r5, #0
 801f06c:	d10c      	bne.n	801f088 <_calloc_r+0x28>
 801f06e:	b289      	uxth	r1, r1
 801f070:	b294      	uxth	r4, r2
 801f072:	434c      	muls	r4, r1
 801f074:	0021      	movs	r1, r4
 801f076:	f7fe fe41 	bl	801dcfc <_malloc_r>
 801f07a:	1e05      	subs	r5, r0, #0
 801f07c:	d01a      	beq.n	801f0b4 <_calloc_r+0x54>
 801f07e:	0022      	movs	r2, r4
 801f080:	2100      	movs	r1, #0
 801f082:	f7fd fafd 	bl	801c680 <memset>
 801f086:	e016      	b.n	801f0b6 <_calloc_r+0x56>
 801f088:	1c2b      	adds	r3, r5, #0
 801f08a:	1c0c      	adds	r4, r1, #0
 801f08c:	b289      	uxth	r1, r1
 801f08e:	b292      	uxth	r2, r2
 801f090:	434a      	muls	r2, r1
 801f092:	b29b      	uxth	r3, r3
 801f094:	b2a1      	uxth	r1, r4
 801f096:	4359      	muls	r1, r3
 801f098:	0c14      	lsrs	r4, r2, #16
 801f09a:	190c      	adds	r4, r1, r4
 801f09c:	0c23      	lsrs	r3, r4, #16
 801f09e:	d107      	bne.n	801f0b0 <_calloc_r+0x50>
 801f0a0:	0424      	lsls	r4, r4, #16
 801f0a2:	b292      	uxth	r2, r2
 801f0a4:	4314      	orrs	r4, r2
 801f0a6:	e7e5      	b.n	801f074 <_calloc_r+0x14>
 801f0a8:	2d00      	cmp	r5, #0
 801f0aa:	d101      	bne.n	801f0b0 <_calloc_r+0x50>
 801f0ac:	1c14      	adds	r4, r2, #0
 801f0ae:	e7ed      	b.n	801f08c <_calloc_r+0x2c>
 801f0b0:	230c      	movs	r3, #12
 801f0b2:	6003      	str	r3, [r0, #0]
 801f0b4:	2500      	movs	r5, #0
 801f0b6:	0028      	movs	r0, r5
 801f0b8:	bd70      	pop	{r4, r5, r6, pc}

0801f0ba <_realloc_r>:
 801f0ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f0bc:	0006      	movs	r6, r0
 801f0be:	000c      	movs	r4, r1
 801f0c0:	0015      	movs	r5, r2
 801f0c2:	2900      	cmp	r1, #0
 801f0c4:	d105      	bne.n	801f0d2 <_realloc_r+0x18>
 801f0c6:	0011      	movs	r1, r2
 801f0c8:	f7fe fe18 	bl	801dcfc <_malloc_r>
 801f0cc:	0004      	movs	r4, r0
 801f0ce:	0020      	movs	r0, r4
 801f0d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f0d2:	2a00      	cmp	r2, #0
 801f0d4:	d103      	bne.n	801f0de <_realloc_r+0x24>
 801f0d6:	f7fe fa41 	bl	801d55c <_free_r>
 801f0da:	2400      	movs	r4, #0
 801f0dc:	e7f7      	b.n	801f0ce <_realloc_r+0x14>
 801f0de:	f000 f8c2 	bl	801f266 <_malloc_usable_size_r>
 801f0e2:	0007      	movs	r7, r0
 801f0e4:	4285      	cmp	r5, r0
 801f0e6:	d802      	bhi.n	801f0ee <_realloc_r+0x34>
 801f0e8:	0843      	lsrs	r3, r0, #1
 801f0ea:	42ab      	cmp	r3, r5
 801f0ec:	d3ef      	bcc.n	801f0ce <_realloc_r+0x14>
 801f0ee:	0029      	movs	r1, r5
 801f0f0:	0030      	movs	r0, r6
 801f0f2:	f7fe fe03 	bl	801dcfc <_malloc_r>
 801f0f6:	9001      	str	r0, [sp, #4]
 801f0f8:	2800      	cmp	r0, #0
 801f0fa:	d0ee      	beq.n	801f0da <_realloc_r+0x20>
 801f0fc:	002a      	movs	r2, r5
 801f0fe:	42bd      	cmp	r5, r7
 801f100:	d900      	bls.n	801f104 <_realloc_r+0x4a>
 801f102:	003a      	movs	r2, r7
 801f104:	0021      	movs	r1, r4
 801f106:	9801      	ldr	r0, [sp, #4]
 801f108:	f7fd fb96 	bl	801c838 <memcpy>
 801f10c:	0021      	movs	r1, r4
 801f10e:	0030      	movs	r0, r6
 801f110:	f7fe fa24 	bl	801d55c <_free_r>
 801f114:	9c01      	ldr	r4, [sp, #4]
 801f116:	e7da      	b.n	801f0ce <_realloc_r+0x14>

0801f118 <fiprintf>:
 801f118:	b40e      	push	{r1, r2, r3}
 801f11a:	b517      	push	{r0, r1, r2, r4, lr}
 801f11c:	4c05      	ldr	r4, [pc, #20]	@ (801f134 <fiprintf+0x1c>)
 801f11e:	ab05      	add	r3, sp, #20
 801f120:	cb04      	ldmia	r3!, {r2}
 801f122:	0001      	movs	r1, r0
 801f124:	6820      	ldr	r0, [r4, #0]
 801f126:	9301      	str	r3, [sp, #4]
 801f128:	f7ff fce8 	bl	801eafc <_vfiprintf_r>
 801f12c:	bc1e      	pop	{r1, r2, r3, r4}
 801f12e:	bc08      	pop	{r3}
 801f130:	b003      	add	sp, #12
 801f132:	4718      	bx	r3
 801f134:	200003c4 	.word	0x200003c4

0801f138 <__swhatbuf_r>:
 801f138:	b570      	push	{r4, r5, r6, lr}
 801f13a:	000e      	movs	r6, r1
 801f13c:	001d      	movs	r5, r3
 801f13e:	230e      	movs	r3, #14
 801f140:	5ec9      	ldrsh	r1, [r1, r3]
 801f142:	0014      	movs	r4, r2
 801f144:	b096      	sub	sp, #88	@ 0x58
 801f146:	2900      	cmp	r1, #0
 801f148:	da0c      	bge.n	801f164 <__swhatbuf_r+0x2c>
 801f14a:	89b2      	ldrh	r2, [r6, #12]
 801f14c:	2380      	movs	r3, #128	@ 0x80
 801f14e:	0011      	movs	r1, r2
 801f150:	4019      	ands	r1, r3
 801f152:	421a      	tst	r2, r3
 801f154:	d114      	bne.n	801f180 <__swhatbuf_r+0x48>
 801f156:	2380      	movs	r3, #128	@ 0x80
 801f158:	00db      	lsls	r3, r3, #3
 801f15a:	2000      	movs	r0, #0
 801f15c:	6029      	str	r1, [r5, #0]
 801f15e:	6023      	str	r3, [r4, #0]
 801f160:	b016      	add	sp, #88	@ 0x58
 801f162:	bd70      	pop	{r4, r5, r6, pc}
 801f164:	466a      	mov	r2, sp
 801f166:	f000 f853 	bl	801f210 <_fstat_r>
 801f16a:	2800      	cmp	r0, #0
 801f16c:	dbed      	blt.n	801f14a <__swhatbuf_r+0x12>
 801f16e:	23f0      	movs	r3, #240	@ 0xf0
 801f170:	9901      	ldr	r1, [sp, #4]
 801f172:	021b      	lsls	r3, r3, #8
 801f174:	4019      	ands	r1, r3
 801f176:	4b04      	ldr	r3, [pc, #16]	@ (801f188 <__swhatbuf_r+0x50>)
 801f178:	18c9      	adds	r1, r1, r3
 801f17a:	424b      	negs	r3, r1
 801f17c:	4159      	adcs	r1, r3
 801f17e:	e7ea      	b.n	801f156 <__swhatbuf_r+0x1e>
 801f180:	2100      	movs	r1, #0
 801f182:	2340      	movs	r3, #64	@ 0x40
 801f184:	e7e9      	b.n	801f15a <__swhatbuf_r+0x22>
 801f186:	46c0      	nop			@ (mov r8, r8)
 801f188:	ffffe000 	.word	0xffffe000

0801f18c <__smakebuf_r>:
 801f18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f18e:	2602      	movs	r6, #2
 801f190:	898b      	ldrh	r3, [r1, #12]
 801f192:	0005      	movs	r5, r0
 801f194:	000c      	movs	r4, r1
 801f196:	b085      	sub	sp, #20
 801f198:	4233      	tst	r3, r6
 801f19a:	d007      	beq.n	801f1ac <__smakebuf_r+0x20>
 801f19c:	0023      	movs	r3, r4
 801f19e:	3347      	adds	r3, #71	@ 0x47
 801f1a0:	6023      	str	r3, [r4, #0]
 801f1a2:	6123      	str	r3, [r4, #16]
 801f1a4:	2301      	movs	r3, #1
 801f1a6:	6163      	str	r3, [r4, #20]
 801f1a8:	b005      	add	sp, #20
 801f1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1ac:	ab03      	add	r3, sp, #12
 801f1ae:	aa02      	add	r2, sp, #8
 801f1b0:	f7ff ffc2 	bl	801f138 <__swhatbuf_r>
 801f1b4:	9f02      	ldr	r7, [sp, #8]
 801f1b6:	9001      	str	r0, [sp, #4]
 801f1b8:	0039      	movs	r1, r7
 801f1ba:	0028      	movs	r0, r5
 801f1bc:	f7fe fd9e 	bl	801dcfc <_malloc_r>
 801f1c0:	2800      	cmp	r0, #0
 801f1c2:	d108      	bne.n	801f1d6 <__smakebuf_r+0x4a>
 801f1c4:	220c      	movs	r2, #12
 801f1c6:	5ea3      	ldrsh	r3, [r4, r2]
 801f1c8:	059a      	lsls	r2, r3, #22
 801f1ca:	d4ed      	bmi.n	801f1a8 <__smakebuf_r+0x1c>
 801f1cc:	2203      	movs	r2, #3
 801f1ce:	4393      	bics	r3, r2
 801f1d0:	431e      	orrs	r6, r3
 801f1d2:	81a6      	strh	r6, [r4, #12]
 801f1d4:	e7e2      	b.n	801f19c <__smakebuf_r+0x10>
 801f1d6:	2380      	movs	r3, #128	@ 0x80
 801f1d8:	89a2      	ldrh	r2, [r4, #12]
 801f1da:	6020      	str	r0, [r4, #0]
 801f1dc:	4313      	orrs	r3, r2
 801f1de:	81a3      	strh	r3, [r4, #12]
 801f1e0:	9b03      	ldr	r3, [sp, #12]
 801f1e2:	6120      	str	r0, [r4, #16]
 801f1e4:	6167      	str	r7, [r4, #20]
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d00c      	beq.n	801f204 <__smakebuf_r+0x78>
 801f1ea:	0028      	movs	r0, r5
 801f1ec:	230e      	movs	r3, #14
 801f1ee:	5ee1      	ldrsh	r1, [r4, r3]
 801f1f0:	f000 f820 	bl	801f234 <_isatty_r>
 801f1f4:	2800      	cmp	r0, #0
 801f1f6:	d005      	beq.n	801f204 <__smakebuf_r+0x78>
 801f1f8:	2303      	movs	r3, #3
 801f1fa:	89a2      	ldrh	r2, [r4, #12]
 801f1fc:	439a      	bics	r2, r3
 801f1fe:	3b02      	subs	r3, #2
 801f200:	4313      	orrs	r3, r2
 801f202:	81a3      	strh	r3, [r4, #12]
 801f204:	89a3      	ldrh	r3, [r4, #12]
 801f206:	9a01      	ldr	r2, [sp, #4]
 801f208:	4313      	orrs	r3, r2
 801f20a:	81a3      	strh	r3, [r4, #12]
 801f20c:	e7cc      	b.n	801f1a8 <__smakebuf_r+0x1c>
	...

0801f210 <_fstat_r>:
 801f210:	2300      	movs	r3, #0
 801f212:	b570      	push	{r4, r5, r6, lr}
 801f214:	4d06      	ldr	r5, [pc, #24]	@ (801f230 <_fstat_r+0x20>)
 801f216:	0004      	movs	r4, r0
 801f218:	0008      	movs	r0, r1
 801f21a:	0011      	movs	r1, r2
 801f21c:	602b      	str	r3, [r5, #0]
 801f21e:	f7eb ff09 	bl	800b034 <_fstat>
 801f222:	1c43      	adds	r3, r0, #1
 801f224:	d103      	bne.n	801f22e <_fstat_r+0x1e>
 801f226:	682b      	ldr	r3, [r5, #0]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d000      	beq.n	801f22e <_fstat_r+0x1e>
 801f22c:	6023      	str	r3, [r4, #0]
 801f22e:	bd70      	pop	{r4, r5, r6, pc}
 801f230:	200038b0 	.word	0x200038b0

0801f234 <_isatty_r>:
 801f234:	2300      	movs	r3, #0
 801f236:	b570      	push	{r4, r5, r6, lr}
 801f238:	4d06      	ldr	r5, [pc, #24]	@ (801f254 <_isatty_r+0x20>)
 801f23a:	0004      	movs	r4, r0
 801f23c:	0008      	movs	r0, r1
 801f23e:	602b      	str	r3, [r5, #0]
 801f240:	f7eb ff06 	bl	800b050 <_isatty>
 801f244:	1c43      	adds	r3, r0, #1
 801f246:	d103      	bne.n	801f250 <_isatty_r+0x1c>
 801f248:	682b      	ldr	r3, [r5, #0]
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d000      	beq.n	801f250 <_isatty_r+0x1c>
 801f24e:	6023      	str	r3, [r4, #0]
 801f250:	bd70      	pop	{r4, r5, r6, pc}
 801f252:	46c0      	nop			@ (mov r8, r8)
 801f254:	200038b0 	.word	0x200038b0

0801f258 <abort>:
 801f258:	2006      	movs	r0, #6
 801f25a:	b510      	push	{r4, lr}
 801f25c:	f000 f834 	bl	801f2c8 <raise>
 801f260:	2001      	movs	r0, #1
 801f262:	f7eb feb3 	bl	800afcc <_exit>

0801f266 <_malloc_usable_size_r>:
 801f266:	1f0b      	subs	r3, r1, #4
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	1f18      	subs	r0, r3, #4
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	da01      	bge.n	801f274 <_malloc_usable_size_r+0xe>
 801f270:	580b      	ldr	r3, [r1, r0]
 801f272:	18c0      	adds	r0, r0, r3
 801f274:	4770      	bx	lr

0801f276 <_raise_r>:
 801f276:	b570      	push	{r4, r5, r6, lr}
 801f278:	0004      	movs	r4, r0
 801f27a:	000d      	movs	r5, r1
 801f27c:	291f      	cmp	r1, #31
 801f27e:	d904      	bls.n	801f28a <_raise_r+0x14>
 801f280:	2316      	movs	r3, #22
 801f282:	6003      	str	r3, [r0, #0]
 801f284:	2001      	movs	r0, #1
 801f286:	4240      	negs	r0, r0
 801f288:	bd70      	pop	{r4, r5, r6, pc}
 801f28a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d004      	beq.n	801f29a <_raise_r+0x24>
 801f290:	008a      	lsls	r2, r1, #2
 801f292:	189b      	adds	r3, r3, r2
 801f294:	681a      	ldr	r2, [r3, #0]
 801f296:	2a00      	cmp	r2, #0
 801f298:	d108      	bne.n	801f2ac <_raise_r+0x36>
 801f29a:	0020      	movs	r0, r4
 801f29c:	f000 f830 	bl	801f300 <_getpid_r>
 801f2a0:	002a      	movs	r2, r5
 801f2a2:	0001      	movs	r1, r0
 801f2a4:	0020      	movs	r0, r4
 801f2a6:	f000 f819 	bl	801f2dc <_kill_r>
 801f2aa:	e7ed      	b.n	801f288 <_raise_r+0x12>
 801f2ac:	2a01      	cmp	r2, #1
 801f2ae:	d009      	beq.n	801f2c4 <_raise_r+0x4e>
 801f2b0:	1c51      	adds	r1, r2, #1
 801f2b2:	d103      	bne.n	801f2bc <_raise_r+0x46>
 801f2b4:	2316      	movs	r3, #22
 801f2b6:	6003      	str	r3, [r0, #0]
 801f2b8:	2001      	movs	r0, #1
 801f2ba:	e7e5      	b.n	801f288 <_raise_r+0x12>
 801f2bc:	2100      	movs	r1, #0
 801f2be:	0028      	movs	r0, r5
 801f2c0:	6019      	str	r1, [r3, #0]
 801f2c2:	4790      	blx	r2
 801f2c4:	2000      	movs	r0, #0
 801f2c6:	e7df      	b.n	801f288 <_raise_r+0x12>

0801f2c8 <raise>:
 801f2c8:	b510      	push	{r4, lr}
 801f2ca:	4b03      	ldr	r3, [pc, #12]	@ (801f2d8 <raise+0x10>)
 801f2cc:	0001      	movs	r1, r0
 801f2ce:	6818      	ldr	r0, [r3, #0]
 801f2d0:	f7ff ffd1 	bl	801f276 <_raise_r>
 801f2d4:	bd10      	pop	{r4, pc}
 801f2d6:	46c0      	nop			@ (mov r8, r8)
 801f2d8:	200003c4 	.word	0x200003c4

0801f2dc <_kill_r>:
 801f2dc:	2300      	movs	r3, #0
 801f2de:	b570      	push	{r4, r5, r6, lr}
 801f2e0:	4d06      	ldr	r5, [pc, #24]	@ (801f2fc <_kill_r+0x20>)
 801f2e2:	0004      	movs	r4, r0
 801f2e4:	0008      	movs	r0, r1
 801f2e6:	0011      	movs	r1, r2
 801f2e8:	602b      	str	r3, [r5, #0]
 801f2ea:	f7eb fe5f 	bl	800afac <_kill>
 801f2ee:	1c43      	adds	r3, r0, #1
 801f2f0:	d103      	bne.n	801f2fa <_kill_r+0x1e>
 801f2f2:	682b      	ldr	r3, [r5, #0]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d000      	beq.n	801f2fa <_kill_r+0x1e>
 801f2f8:	6023      	str	r3, [r4, #0]
 801f2fa:	bd70      	pop	{r4, r5, r6, pc}
 801f2fc:	200038b0 	.word	0x200038b0

0801f300 <_getpid_r>:
 801f300:	b510      	push	{r4, lr}
 801f302:	f7eb fe4d 	bl	800afa0 <_getpid>
 801f306:	bd10      	pop	{r4, pc}

0801f308 <expf>:
 801f308:	b570      	push	{r4, r5, r6, lr}
 801f30a:	1c04      	adds	r4, r0, #0
 801f30c:	f000 f8e6 	bl	801f4dc <__ieee754_expf>
 801f310:	1c05      	adds	r5, r0, #0
 801f312:	1c20      	adds	r0, r4, #0
 801f314:	f000 f83c 	bl	801f390 <finitef>
 801f318:	2800      	cmp	r0, #0
 801f31a:	d00b      	beq.n	801f334 <expf+0x2c>
 801f31c:	490c      	ldr	r1, [pc, #48]	@ (801f350 <expf+0x48>)
 801f31e:	1c20      	adds	r0, r4, #0
 801f320:	f7e1 f91a 	bl	8000558 <__aeabi_fcmpgt>
 801f324:	2800      	cmp	r0, #0
 801f326:	d007      	beq.n	801f338 <expf+0x30>
 801f328:	f7fd fa4e 	bl	801c7c8 <__errno>
 801f32c:	25ff      	movs	r5, #255	@ 0xff
 801f32e:	2322      	movs	r3, #34	@ 0x22
 801f330:	05ed      	lsls	r5, r5, #23
 801f332:	6003      	str	r3, [r0, #0]
 801f334:	1c28      	adds	r0, r5, #0
 801f336:	bd70      	pop	{r4, r5, r6, pc}
 801f338:	4906      	ldr	r1, [pc, #24]	@ (801f354 <expf+0x4c>)
 801f33a:	1c20      	adds	r0, r4, #0
 801f33c:	f7e1 f8f8 	bl	8000530 <__aeabi_fcmplt>
 801f340:	2800      	cmp	r0, #0
 801f342:	d0f7      	beq.n	801f334 <expf+0x2c>
 801f344:	f7fd fa40 	bl	801c7c8 <__errno>
 801f348:	2322      	movs	r3, #34	@ 0x22
 801f34a:	2500      	movs	r5, #0
 801f34c:	6003      	str	r3, [r0, #0]
 801f34e:	e7f1      	b.n	801f334 <expf+0x2c>
 801f350:	42b17217 	.word	0x42b17217
 801f354:	c2cff1b5 	.word	0xc2cff1b5

0801f358 <sqrtf>:
 801f358:	b570      	push	{r4, r5, r6, lr}
 801f35a:	1c05      	adds	r5, r0, #0
 801f35c:	f000 f822 	bl	801f3a4 <__ieee754_sqrtf>
 801f360:	1c29      	adds	r1, r5, #0
 801f362:	1c04      	adds	r4, r0, #0
 801f364:	1c28      	adds	r0, r5, #0
 801f366:	f7e2 f8fd 	bl	8001564 <__aeabi_fcmpun>
 801f36a:	2800      	cmp	r0, #0
 801f36c:	d10e      	bne.n	801f38c <sqrtf+0x34>
 801f36e:	2100      	movs	r1, #0
 801f370:	1c28      	adds	r0, r5, #0
 801f372:	f7e1 f8dd 	bl	8000530 <__aeabi_fcmplt>
 801f376:	2800      	cmp	r0, #0
 801f378:	d008      	beq.n	801f38c <sqrtf+0x34>
 801f37a:	f7fd fa25 	bl	801c7c8 <__errno>
 801f37e:	2321      	movs	r3, #33	@ 0x21
 801f380:	2100      	movs	r1, #0
 801f382:	6003      	str	r3, [r0, #0]
 801f384:	1c08      	adds	r0, r1, #0
 801f386:	f7e1 fc25 	bl	8000bd4 <__aeabi_fdiv>
 801f38a:	1c04      	adds	r4, r0, #0
 801f38c:	1c20      	adds	r0, r4, #0
 801f38e:	bd70      	pop	{r4, r5, r6, pc}

0801f390 <finitef>:
 801f390:	22ff      	movs	r2, #255	@ 0xff
 801f392:	0043      	lsls	r3, r0, #1
 801f394:	085b      	lsrs	r3, r3, #1
 801f396:	2001      	movs	r0, #1
 801f398:	05d2      	lsls	r2, r2, #23
 801f39a:	4293      	cmp	r3, r2
 801f39c:	db00      	blt.n	801f3a0 <finitef+0x10>
 801f39e:	2000      	movs	r0, #0
 801f3a0:	4770      	bx	lr
	...

0801f3a4 <__ieee754_sqrtf>:
 801f3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f3a6:	0003      	movs	r3, r0
 801f3a8:	0042      	lsls	r2, r0, #1
 801f3aa:	1c04      	adds	r4, r0, #0
 801f3ac:	20ff      	movs	r0, #255	@ 0xff
 801f3ae:	0852      	lsrs	r2, r2, #1
 801f3b0:	05c0      	lsls	r0, r0, #23
 801f3b2:	4282      	cmp	r2, r0
 801f3b4:	d30a      	bcc.n	801f3cc <__ieee754_sqrtf+0x28>
 801f3b6:	1c21      	adds	r1, r4, #0
 801f3b8:	1c20      	adds	r0, r4, #0
 801f3ba:	f7e1 fdf1 	bl	8000fa0 <__aeabi_fmul>
 801f3be:	1c01      	adds	r1, r0, #0
 801f3c0:	1c20      	adds	r0, r4, #0
 801f3c2:	f7e1 fa7d 	bl	80008c0 <__aeabi_fadd>
 801f3c6:	1c04      	adds	r4, r0, #0
 801f3c8:	1c20      	adds	r0, r4, #0
 801f3ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f3cc:	2a00      	cmp	r2, #0
 801f3ce:	d0fb      	beq.n	801f3c8 <__ieee754_sqrtf+0x24>
 801f3d0:	2c00      	cmp	r4, #0
 801f3d2:	da07      	bge.n	801f3e4 <__ieee754_sqrtf+0x40>
 801f3d4:	1c21      	adds	r1, r4, #0
 801f3d6:	1c20      	adds	r0, r4, #0
 801f3d8:	f7e1 ff20 	bl	800121c <__aeabi_fsub>
 801f3dc:	1c01      	adds	r1, r0, #0
 801f3de:	f7e1 fbf9 	bl	8000bd4 <__aeabi_fdiv>
 801f3e2:	e7f0      	b.n	801f3c6 <__ieee754_sqrtf+0x22>
 801f3e4:	0022      	movs	r2, r4
 801f3e6:	15e1      	asrs	r1, r4, #23
 801f3e8:	4002      	ands	r2, r0
 801f3ea:	4204      	tst	r4, r0
 801f3ec:	d046      	beq.n	801f47c <__ieee754_sqrtf+0xd8>
 801f3ee:	2280      	movs	r2, #128	@ 0x80
 801f3f0:	000f      	movs	r7, r1
 801f3f2:	025b      	lsls	r3, r3, #9
 801f3f4:	0a5b      	lsrs	r3, r3, #9
 801f3f6:	0412      	lsls	r2, r2, #16
 801f3f8:	3f7f      	subs	r7, #127	@ 0x7f
 801f3fa:	4313      	orrs	r3, r2
 801f3fc:	07c9      	lsls	r1, r1, #31
 801f3fe:	d400      	bmi.n	801f402 <__ieee754_sqrtf+0x5e>
 801f400:	005b      	lsls	r3, r3, #1
 801f402:	2400      	movs	r4, #0
 801f404:	2180      	movs	r1, #128	@ 0x80
 801f406:	2019      	movs	r0, #25
 801f408:	0026      	movs	r6, r4
 801f40a:	107f      	asrs	r7, r7, #1
 801f40c:	005b      	lsls	r3, r3, #1
 801f40e:	0449      	lsls	r1, r1, #17
 801f410:	1875      	adds	r5, r6, r1
 801f412:	001a      	movs	r2, r3
 801f414:	429d      	cmp	r5, r3
 801f416:	dc02      	bgt.n	801f41e <__ieee754_sqrtf+0x7a>
 801f418:	186e      	adds	r6, r5, r1
 801f41a:	1b5a      	subs	r2, r3, r5
 801f41c:	1864      	adds	r4, r4, r1
 801f41e:	3801      	subs	r0, #1
 801f420:	0053      	lsls	r3, r2, #1
 801f422:	0849      	lsrs	r1, r1, #1
 801f424:	2800      	cmp	r0, #0
 801f426:	d1f3      	bne.n	801f410 <__ieee754_sqrtf+0x6c>
 801f428:	2a00      	cmp	r2, #0
 801f42a:	d019      	beq.n	801f460 <__ieee754_sqrtf+0xbc>
 801f42c:	4d17      	ldr	r5, [pc, #92]	@ (801f48c <__ieee754_sqrtf+0xe8>)
 801f42e:	4e18      	ldr	r6, [pc, #96]	@ (801f490 <__ieee754_sqrtf+0xec>)
 801f430:	6828      	ldr	r0, [r5, #0]
 801f432:	6831      	ldr	r1, [r6, #0]
 801f434:	682b      	ldr	r3, [r5, #0]
 801f436:	9301      	str	r3, [sp, #4]
 801f438:	f7e1 fef0 	bl	800121c <__aeabi_fsub>
 801f43c:	1c01      	adds	r1, r0, #0
 801f43e:	9801      	ldr	r0, [sp, #4]
 801f440:	f7e1 f880 	bl	8000544 <__aeabi_fcmple>
 801f444:	2800      	cmp	r0, #0
 801f446:	d00b      	beq.n	801f460 <__ieee754_sqrtf+0xbc>
 801f448:	6828      	ldr	r0, [r5, #0]
 801f44a:	6831      	ldr	r1, [r6, #0]
 801f44c:	f7e1 fa38 	bl	80008c0 <__aeabi_fadd>
 801f450:	682d      	ldr	r5, [r5, #0]
 801f452:	1c01      	adds	r1, r0, #0
 801f454:	1c28      	adds	r0, r5, #0
 801f456:	f7e1 f86b 	bl	8000530 <__aeabi_fcmplt>
 801f45a:	2800      	cmp	r0, #0
 801f45c:	d011      	beq.n	801f482 <__ieee754_sqrtf+0xde>
 801f45e:	3402      	adds	r4, #2
 801f460:	23fc      	movs	r3, #252	@ 0xfc
 801f462:	1064      	asrs	r4, r4, #1
 801f464:	059b      	lsls	r3, r3, #22
 801f466:	18e3      	adds	r3, r4, r3
 801f468:	05fc      	lsls	r4, r7, #23
 801f46a:	18e4      	adds	r4, r4, r3
 801f46c:	e7ac      	b.n	801f3c8 <__ieee754_sqrtf+0x24>
 801f46e:	005b      	lsls	r3, r3, #1
 801f470:	3201      	adds	r2, #1
 801f472:	4203      	tst	r3, r0
 801f474:	d0fb      	beq.n	801f46e <__ieee754_sqrtf+0xca>
 801f476:	3a01      	subs	r2, #1
 801f478:	1a89      	subs	r1, r1, r2
 801f47a:	e7b8      	b.n	801f3ee <__ieee754_sqrtf+0x4a>
 801f47c:	2080      	movs	r0, #128	@ 0x80
 801f47e:	0400      	lsls	r0, r0, #16
 801f480:	e7f7      	b.n	801f472 <__ieee754_sqrtf+0xce>
 801f482:	2301      	movs	r3, #1
 801f484:	3401      	adds	r4, #1
 801f486:	439c      	bics	r4, r3
 801f488:	e7ea      	b.n	801f460 <__ieee754_sqrtf+0xbc>
 801f48a:	46c0      	nop			@ (mov r8, r8)
 801f48c:	20000418 	.word	0x20000418
 801f490:	20000414 	.word	0x20000414

0801f494 <roundf>:
 801f494:	0dc3      	lsrs	r3, r0, #23
 801f496:	b2db      	uxtb	r3, r3
 801f498:	3b7f      	subs	r3, #127	@ 0x7f
 801f49a:	0002      	movs	r2, r0
 801f49c:	b510      	push	{r4, lr}
 801f49e:	2b16      	cmp	r3, #22
 801f4a0:	dc13      	bgt.n	801f4ca <roundf+0x36>
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	da07      	bge.n	801f4b6 <roundf+0x22>
 801f4a6:	0fc2      	lsrs	r2, r0, #31
 801f4a8:	07d0      	lsls	r0, r2, #31
 801f4aa:	3301      	adds	r3, #1
 801f4ac:	d102      	bne.n	801f4b4 <roundf+0x20>
 801f4ae:	23fe      	movs	r3, #254	@ 0xfe
 801f4b0:	059b      	lsls	r3, r3, #22
 801f4b2:	4318      	orrs	r0, r3
 801f4b4:	bd10      	pop	{r4, pc}
 801f4b6:	4908      	ldr	r1, [pc, #32]	@ (801f4d8 <roundf+0x44>)
 801f4b8:	4119      	asrs	r1, r3
 801f4ba:	4208      	tst	r0, r1
 801f4bc:	d0fa      	beq.n	801f4b4 <roundf+0x20>
 801f4be:	2080      	movs	r0, #128	@ 0x80
 801f4c0:	03c0      	lsls	r0, r0, #15
 801f4c2:	4118      	asrs	r0, r3
 801f4c4:	1880      	adds	r0, r0, r2
 801f4c6:	4388      	bics	r0, r1
 801f4c8:	e7f4      	b.n	801f4b4 <roundf+0x20>
 801f4ca:	2b80      	cmp	r3, #128	@ 0x80
 801f4cc:	d1f2      	bne.n	801f4b4 <roundf+0x20>
 801f4ce:	1c01      	adds	r1, r0, #0
 801f4d0:	f7e1 f9f6 	bl	80008c0 <__aeabi_fadd>
 801f4d4:	e7ee      	b.n	801f4b4 <roundf+0x20>
 801f4d6:	46c0      	nop			@ (mov r8, r8)
 801f4d8:	007fffff 	.word	0x007fffff

0801f4dc <__ieee754_expf>:
 801f4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f4de:	21ff      	movs	r1, #255	@ 0xff
 801f4e0:	0043      	lsls	r3, r0, #1
 801f4e2:	1c04      	adds	r4, r0, #0
 801f4e4:	085b      	lsrs	r3, r3, #1
 801f4e6:	05c9      	lsls	r1, r1, #23
 801f4e8:	428b      	cmp	r3, r1
 801f4ea:	d904      	bls.n	801f4f6 <__ieee754_expf+0x1a>
 801f4ec:	1c01      	adds	r1, r0, #0
 801f4ee:	1c20      	adds	r0, r4, #0
 801f4f0:	f7e1 f9e6 	bl	80008c0 <__aeabi_fadd>
 801f4f4:	e00d      	b.n	801f512 <__ieee754_expf+0x36>
 801f4f6:	0fc6      	lsrs	r6, r0, #31
 801f4f8:	428b      	cmp	r3, r1
 801f4fa:	d104      	bne.n	801f506 <__ieee754_expf+0x2a>
 801f4fc:	2e00      	cmp	r6, #0
 801f4fe:	d000      	beq.n	801f502 <__ieee754_expf+0x26>
 801f500:	e0ba      	b.n	801f678 <__ieee754_expf+0x19c>
 801f502:	1c20      	adds	r0, r4, #0
 801f504:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f506:	495d      	ldr	r1, [pc, #372]	@ (801f67c <__ieee754_expf+0x1a0>)
 801f508:	4288      	cmp	r0, r1
 801f50a:	dd04      	ble.n	801f516 <__ieee754_expf+0x3a>
 801f50c:	2000      	movs	r0, #0
 801f50e:	f000 f8f1 	bl	801f6f4 <__math_oflowf>
 801f512:	1c04      	adds	r4, r0, #0
 801f514:	e7f5      	b.n	801f502 <__ieee754_expf+0x26>
 801f516:	2800      	cmp	r0, #0
 801f518:	da06      	bge.n	801f528 <__ieee754_expf+0x4c>
 801f51a:	4a59      	ldr	r2, [pc, #356]	@ (801f680 <__ieee754_expf+0x1a4>)
 801f51c:	4293      	cmp	r3, r2
 801f51e:	d903      	bls.n	801f528 <__ieee754_expf+0x4c>
 801f520:	2000      	movs	r0, #0
 801f522:	f000 f8e1 	bl	801f6e8 <__math_uflowf>
 801f526:	e7f4      	b.n	801f512 <__ieee754_expf+0x36>
 801f528:	4a56      	ldr	r2, [pc, #344]	@ (801f684 <__ieee754_expf+0x1a8>)
 801f52a:	4293      	cmp	r3, r2
 801f52c:	d96e      	bls.n	801f60c <__ieee754_expf+0x130>
 801f52e:	4a56      	ldr	r2, [pc, #344]	@ (801f688 <__ieee754_expf+0x1ac>)
 801f530:	00b5      	lsls	r5, r6, #2
 801f532:	4293      	cmp	r3, r2
 801f534:	d84e      	bhi.n	801f5d4 <__ieee754_expf+0xf8>
 801f536:	4b55      	ldr	r3, [pc, #340]	@ (801f68c <__ieee754_expf+0x1b0>)
 801f538:	1c20      	adds	r0, r4, #0
 801f53a:	5959      	ldr	r1, [r3, r5]
 801f53c:	f7e1 fe6e 	bl	800121c <__aeabi_fsub>
 801f540:	4b53      	ldr	r3, [pc, #332]	@ (801f690 <__ieee754_expf+0x1b4>)
 801f542:	1c07      	adds	r7, r0, #0
 801f544:	595b      	ldr	r3, [r3, r5]
 801f546:	2501      	movs	r5, #1
 801f548:	1bad      	subs	r5, r5, r6
 801f54a:	9300      	str	r3, [sp, #0]
 801f54c:	1bad      	subs	r5, r5, r6
 801f54e:	9900      	ldr	r1, [sp, #0]
 801f550:	1c38      	adds	r0, r7, #0
 801f552:	f7e1 fe63 	bl	800121c <__aeabi_fsub>
 801f556:	1c04      	adds	r4, r0, #0
 801f558:	1c21      	adds	r1, r4, #0
 801f55a:	1c20      	adds	r0, r4, #0
 801f55c:	f7e1 fd20 	bl	8000fa0 <__aeabi_fmul>
 801f560:	494c      	ldr	r1, [pc, #304]	@ (801f694 <__ieee754_expf+0x1b8>)
 801f562:	1c06      	adds	r6, r0, #0
 801f564:	f7e1 fd1c 	bl	8000fa0 <__aeabi_fmul>
 801f568:	494b      	ldr	r1, [pc, #300]	@ (801f698 <__ieee754_expf+0x1bc>)
 801f56a:	f7e1 fe57 	bl	800121c <__aeabi_fsub>
 801f56e:	1c31      	adds	r1, r6, #0
 801f570:	f7e1 fd16 	bl	8000fa0 <__aeabi_fmul>
 801f574:	4949      	ldr	r1, [pc, #292]	@ (801f69c <__ieee754_expf+0x1c0>)
 801f576:	f7e1 f9a3 	bl	80008c0 <__aeabi_fadd>
 801f57a:	1c31      	adds	r1, r6, #0
 801f57c:	f7e1 fd10 	bl	8000fa0 <__aeabi_fmul>
 801f580:	4947      	ldr	r1, [pc, #284]	@ (801f6a0 <__ieee754_expf+0x1c4>)
 801f582:	f7e1 fe4b 	bl	800121c <__aeabi_fsub>
 801f586:	1c31      	adds	r1, r6, #0
 801f588:	f7e1 fd0a 	bl	8000fa0 <__aeabi_fmul>
 801f58c:	4945      	ldr	r1, [pc, #276]	@ (801f6a4 <__ieee754_expf+0x1c8>)
 801f58e:	f7e1 f997 	bl	80008c0 <__aeabi_fadd>
 801f592:	1c31      	adds	r1, r6, #0
 801f594:	f7e1 fd04 	bl	8000fa0 <__aeabi_fmul>
 801f598:	1c01      	adds	r1, r0, #0
 801f59a:	1c20      	adds	r0, r4, #0
 801f59c:	f7e1 fe3e 	bl	800121c <__aeabi_fsub>
 801f5a0:	1c01      	adds	r1, r0, #0
 801f5a2:	1c06      	adds	r6, r0, #0
 801f5a4:	1c20      	adds	r0, r4, #0
 801f5a6:	f7e1 fcfb 	bl	8000fa0 <__aeabi_fmul>
 801f5aa:	9001      	str	r0, [sp, #4]
 801f5ac:	2d00      	cmp	r5, #0
 801f5ae:	d140      	bne.n	801f632 <__ieee754_expf+0x156>
 801f5b0:	2180      	movs	r1, #128	@ 0x80
 801f5b2:	1c30      	adds	r0, r6, #0
 801f5b4:	05c9      	lsls	r1, r1, #23
 801f5b6:	f7e1 fe31 	bl	800121c <__aeabi_fsub>
 801f5ba:	1c01      	adds	r1, r0, #0
 801f5bc:	9801      	ldr	r0, [sp, #4]
 801f5be:	f7e1 fb09 	bl	8000bd4 <__aeabi_fdiv>
 801f5c2:	1c21      	adds	r1, r4, #0
 801f5c4:	f7e1 fe2a 	bl	800121c <__aeabi_fsub>
 801f5c8:	1c01      	adds	r1, r0, #0
 801f5ca:	20fe      	movs	r0, #254	@ 0xfe
 801f5cc:	0580      	lsls	r0, r0, #22
 801f5ce:	f7e1 fe25 	bl	800121c <__aeabi_fsub>
 801f5d2:	e79e      	b.n	801f512 <__ieee754_expf+0x36>
 801f5d4:	4934      	ldr	r1, [pc, #208]	@ (801f6a8 <__ieee754_expf+0x1cc>)
 801f5d6:	1c20      	adds	r0, r4, #0
 801f5d8:	f7e1 fce2 	bl	8000fa0 <__aeabi_fmul>
 801f5dc:	4b33      	ldr	r3, [pc, #204]	@ (801f6ac <__ieee754_expf+0x1d0>)
 801f5de:	5959      	ldr	r1, [r3, r5]
 801f5e0:	f7e1 f96e 	bl	80008c0 <__aeabi_fadd>
 801f5e4:	f7e1 ffd4 	bl	8001590 <__aeabi_f2iz>
 801f5e8:	0005      	movs	r5, r0
 801f5ea:	f7e1 fff1 	bl	80015d0 <__aeabi_i2f>
 801f5ee:	4930      	ldr	r1, [pc, #192]	@ (801f6b0 <__ieee754_expf+0x1d4>)
 801f5f0:	1c06      	adds	r6, r0, #0
 801f5f2:	f7e1 fcd5 	bl	8000fa0 <__aeabi_fmul>
 801f5f6:	1c01      	adds	r1, r0, #0
 801f5f8:	1c20      	adds	r0, r4, #0
 801f5fa:	f7e1 fe0f 	bl	800121c <__aeabi_fsub>
 801f5fe:	492d      	ldr	r1, [pc, #180]	@ (801f6b4 <__ieee754_expf+0x1d8>)
 801f600:	1c07      	adds	r7, r0, #0
 801f602:	1c30      	adds	r0, r6, #0
 801f604:	f7e1 fccc 	bl	8000fa0 <__aeabi_fmul>
 801f608:	9000      	str	r0, [sp, #0]
 801f60a:	e7a0      	b.n	801f54e <__ieee754_expf+0x72>
 801f60c:	22d0      	movs	r2, #208	@ 0xd0
 801f60e:	0592      	lsls	r2, r2, #22
 801f610:	4293      	cmp	r3, r2
 801f612:	d20c      	bcs.n	801f62e <__ieee754_expf+0x152>
 801f614:	4928      	ldr	r1, [pc, #160]	@ (801f6b8 <__ieee754_expf+0x1dc>)
 801f616:	1c20      	adds	r0, r4, #0
 801f618:	f7e1 f952 	bl	80008c0 <__aeabi_fadd>
 801f61c:	21fe      	movs	r1, #254	@ 0xfe
 801f61e:	0589      	lsls	r1, r1, #22
 801f620:	f7e0 ff9a 	bl	8000558 <__aeabi_fcmpgt>
 801f624:	1e05      	subs	r5, r0, #0
 801f626:	d097      	beq.n	801f558 <__ieee754_expf+0x7c>
 801f628:	21fe      	movs	r1, #254	@ 0xfe
 801f62a:	0589      	lsls	r1, r1, #22
 801f62c:	e75f      	b.n	801f4ee <__ieee754_expf+0x12>
 801f62e:	2500      	movs	r5, #0
 801f630:	e792      	b.n	801f558 <__ieee754_expf+0x7c>
 801f632:	2080      	movs	r0, #128	@ 0x80
 801f634:	1c31      	adds	r1, r6, #0
 801f636:	05c0      	lsls	r0, r0, #23
 801f638:	f7e1 fdf0 	bl	800121c <__aeabi_fsub>
 801f63c:	1c01      	adds	r1, r0, #0
 801f63e:	9801      	ldr	r0, [sp, #4]
 801f640:	f7e1 fac8 	bl	8000bd4 <__aeabi_fdiv>
 801f644:	1c01      	adds	r1, r0, #0
 801f646:	9800      	ldr	r0, [sp, #0]
 801f648:	f7e1 fde8 	bl	800121c <__aeabi_fsub>
 801f64c:	1c39      	adds	r1, r7, #0
 801f64e:	f7e1 fde5 	bl	800121c <__aeabi_fsub>
 801f652:	1c01      	adds	r1, r0, #0
 801f654:	20fe      	movs	r0, #254	@ 0xfe
 801f656:	0580      	lsls	r0, r0, #22
 801f658:	f7e1 fde0 	bl	800121c <__aeabi_fsub>
 801f65c:	002b      	movs	r3, r5
 801f65e:	337d      	adds	r3, #125	@ 0x7d
 801f660:	db02      	blt.n	801f668 <__ieee754_expf+0x18c>
 801f662:	05ec      	lsls	r4, r5, #23
 801f664:	1824      	adds	r4, r4, r0
 801f666:	e74c      	b.n	801f502 <__ieee754_expf+0x26>
 801f668:	21d8      	movs	r1, #216	@ 0xd8
 801f66a:	3564      	adds	r5, #100	@ 0x64
 801f66c:	05ed      	lsls	r5, r5, #23
 801f66e:	1828      	adds	r0, r5, r0
 801f670:	0509      	lsls	r1, r1, #20
 801f672:	f7e1 fc95 	bl	8000fa0 <__aeabi_fmul>
 801f676:	e74c      	b.n	801f512 <__ieee754_expf+0x36>
 801f678:	2400      	movs	r4, #0
 801f67a:	e742      	b.n	801f502 <__ieee754_expf+0x26>
 801f67c:	42b17217 	.word	0x42b17217
 801f680:	42cff1b5 	.word	0x42cff1b5
 801f684:	3eb17218 	.word	0x3eb17218
 801f688:	3f851591 	.word	0x3f851591
 801f68c:	08021568 	.word	0x08021568
 801f690:	08021560 	.word	0x08021560
 801f694:	3331bb4c 	.word	0x3331bb4c
 801f698:	35ddea0e 	.word	0x35ddea0e
 801f69c:	388ab355 	.word	0x388ab355
 801f6a0:	3b360b61 	.word	0x3b360b61
 801f6a4:	3e2aaaab 	.word	0x3e2aaaab
 801f6a8:	3fb8aa3b 	.word	0x3fb8aa3b
 801f6ac:	08021570 	.word	0x08021570
 801f6b0:	3f317180 	.word	0x3f317180
 801f6b4:	3717f7d1 	.word	0x3717f7d1
 801f6b8:	7149f2ca 	.word	0x7149f2ca

0801f6bc <with_errnof>:
 801f6bc:	b570      	push	{r4, r5, r6, lr}
 801f6be:	000d      	movs	r5, r1
 801f6c0:	1c04      	adds	r4, r0, #0
 801f6c2:	f7fd f881 	bl	801c7c8 <__errno>
 801f6c6:	6005      	str	r5, [r0, #0]
 801f6c8:	1c20      	adds	r0, r4, #0
 801f6ca:	bd70      	pop	{r4, r5, r6, pc}

0801f6cc <xflowf>:
 801f6cc:	b510      	push	{r4, lr}
 801f6ce:	1c0b      	adds	r3, r1, #0
 801f6d0:	2800      	cmp	r0, #0
 801f6d2:	d002      	beq.n	801f6da <xflowf+0xe>
 801f6d4:	2380      	movs	r3, #128	@ 0x80
 801f6d6:	061b      	lsls	r3, r3, #24
 801f6d8:	18cb      	adds	r3, r1, r3
 801f6da:	1c18      	adds	r0, r3, #0
 801f6dc:	f7e1 fc60 	bl	8000fa0 <__aeabi_fmul>
 801f6e0:	2122      	movs	r1, #34	@ 0x22
 801f6e2:	f7ff ffeb 	bl	801f6bc <with_errnof>
 801f6e6:	bd10      	pop	{r4, pc}

0801f6e8 <__math_uflowf>:
 801f6e8:	2180      	movs	r1, #128	@ 0x80
 801f6ea:	b510      	push	{r4, lr}
 801f6ec:	0549      	lsls	r1, r1, #21
 801f6ee:	f7ff ffed 	bl	801f6cc <xflowf>
 801f6f2:	bd10      	pop	{r4, pc}

0801f6f4 <__math_oflowf>:
 801f6f4:	21e0      	movs	r1, #224	@ 0xe0
 801f6f6:	b510      	push	{r4, lr}
 801f6f8:	05c9      	lsls	r1, r1, #23
 801f6fa:	f7ff ffe7 	bl	801f6cc <xflowf>
 801f6fe:	bd10      	pop	{r4, pc}

0801f700 <_init>:
 801f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f702:	46c0      	nop			@ (mov r8, r8)
 801f704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f706:	bc08      	pop	{r3}
 801f708:	469e      	mov	lr, r3
 801f70a:	4770      	bx	lr

0801f70c <_fini>:
 801f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f70e:	46c0      	nop			@ (mov r8, r8)
 801f710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f712:	bc08      	pop	{r3}
 801f714:	469e      	mov	lr, r3
 801f716:	4770      	bx	lr
