
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020d8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002220  08020e50  08020e50  00021e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023070  08023070  00025420  2**0
                  CONTENTS
  4 .ARM          00000008  08023070  08023070  00024070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023078  08023078  00025420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023078  08023078  00024078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802307c  0802307c  0002407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08023080  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034ac  20000420  080234a0  00025420  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200038cc  080234a0  000258cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003402e  00000000  00000000  00025448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009618  00000000  00000000  00059476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a80  00000000  00000000  00062a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f65  00000000  00000000  00065510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ff1  00000000  00000000  00067475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042953  00000000  00000000  0008a466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0164  00000000  00000000  000ccdb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016cf1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abdc  00000000  00000000  0016cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00177bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00177c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017a195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08020e34 	.word	0x08020e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	08020e34 	.word	0x08020e34

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08022318 	.word	0x08022318
 8000e0c:	08022358 	.word	0x08022358
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08022394 	.word	0x08022394
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00a fc16 	bl	800de94 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00a fc6d 	bl	800df64 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00a fc20 	bl	800def0 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00a fb9c 	bl	800de94 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00a fbcb 	bl	800df0c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00a fbaf 	bl	800def0 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	2000098c 	.word	0x2000098c

080037b0 <setCharges>:
void setCharges(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037b4:	f002 faf2 	bl	8005d9c <ReadBatteryVoltage>
 80037b8:	1c02      	adds	r2, r0, #0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <setCharges+0x20>)
 80037bc:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037be:	f002 fb4f 	bl	8005e60 <ReadSolarVoltage>
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <setCharges+0x24>)
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	2000056c 	.word	0x2000056c
 80037d4:	20000570 	.word	0x20000570

080037d8 <checkEEprom>:
bool checkEEprom(){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <checkEEprom+0x5c>)
 80037e0:	4815      	ldr	r0, [pc, #84]	@ (8003838 <checkEEprom+0x60>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	0019      	movs	r1, r3
 80037e6:	f7ff ff87 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00e      	b.n	8003810 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <checkEEprom+0x5c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <checkEEprom+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <checkEEprom+0x64>)
 8003804:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	3201      	adds	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b0b      	cmp	r3, #11
 8003816:	d9ec      	bls.n	80037f2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <checkEEprom+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <checkEEprom+0x68>)
 8003824:	701a      	strb	r2, [r3, #0]
  return test;
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <checkEEprom+0x68>)
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	2000099c 	.word	0x2000099c
 8003838:	0808000c 	.word	0x0808000c
 800383c:	200009a8 	.word	0x200009a8
 8003840:	200009ac 	.word	0x200009ac

08003844 <checkName>:
bool checkName(){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <checkName+0x5c>)
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <checkName+0x60>)
 800384e:	221e      	movs	r2, #30
 8003850:	0019      	movs	r1, r3
 8003852:	f7ff ff51 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00e      	b.n	800387c <checkName+0x38>
    configSum += nameConfig[i];
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <checkName+0x5c>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	001a      	movs	r2, r3
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <checkName+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <checkName+0x64>)
 8003870:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	3201      	adds	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d9ec      	bls.n	800385e <checkName+0x1a>
  }
  test = (configSum != 0);
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <checkName+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	4193      	sbcs	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <checkName+0x68>)
 8003890:	701a      	strb	r2, [r3, #0]
  return test;
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <checkName+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	200009b0 	.word	0x200009b0
 80038a4:	08080090 	.word	0x08080090
 80038a8:	200009d0 	.word	0x200009d0
 80038ac:	200009d4 	.word	0x200009d4

080038b0 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <ESP_GetHT+0x20>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <ESP_GetHT+0x24>)
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	20000564 	.word	0x20000564
 80038d4:	20000568 	.word	0x20000568

080038d8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	1dbb      	adds	r3, r7, #6
 80038e4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <setMeasurement+0x2c>)
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <setMeasurement+0x30>)
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setMeasurement+0x34>)
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000564 	.word	0x20000564
 8003908:	20000568 	.word	0x20000568
 800390c:	20000574 	.word	0x20000574

08003910 <setMic>:
void setMic(float dB){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <setMic+0x18>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000578 	.word	0x20000578

0800392c <SetConfigMode>:

void SetConfigMode(){
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <SetConfigMode+0x10>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000054b 	.word	0x2000054b

08003940 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003944:	f009 fad0 	bl	800cee8 <HAL_GetUIDw0>
 8003948:	0002      	movs	r2, r0
 800394a:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <ESP_GetUID+0x28>)
 800394c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800394e:	f009 fad5 	bl	800cefc <HAL_GetUIDw1>
 8003952:	0002      	movs	r2, r0
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <ESP_GetUID+0x28>)
 8003956:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003958:	f009 fada 	bl	800cf10 <HAL_GetUIDw2>
 800395c:	0002      	movs	r2, r0
 800395e:	4b02      	ldr	r3, [pc, #8]	@ (8003968 <ESP_GetUID+0x28>)
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000550 	.word	0x20000550

0800396c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003974:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <ESP_Init+0x2c>)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <ESP_Init+0x30>)
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003980:	f7ff ffde 	bl	8003940 <ESP_GetUID>
  beurs = checkEEprom();
 8003984:	f7ff ff28 	bl	80037d8 <checkEEprom>
 8003988:	0003      	movs	r3, r0
 800398a:	001a      	movs	r2, r3
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <ESP_Init+0x34>)
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000440 	.word	0x20000440
 800399c:	20000028 	.word	0x20000028
 80039a0:	2000054e 	.word	0x2000054e

080039a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039a4:	b5b0      	push	{r4, r5, r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	000a      	movs	r2, r1
 80039ae:	1cbb      	adds	r3, r7, #2
 80039b0:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s", command);
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <ESP_Send+0x54>)
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f01a f947 	bl	801dc4c <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <ESP_Send+0x58>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	250f      	movs	r5, #15
 80039c4:	197c      	adds	r4, r7, r5
 80039c6:	1cbb      	adds	r3, r7, #2
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0019      	movs	r1, r3
 80039ce:	f011 fbc3 	bl	8015158 <HAL_UART_Transmit_DMA>
 80039d2:	0003      	movs	r3, r0
 80039d4:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 80039de:	4a08      	ldr	r2, [pc, #32]	@ (8003a00 <ESP_Send+0x5c>)
 80039e0:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <ESP_Send+0x60>)
 80039e2:	0019      	movs	r1, r3
 80039e4:	2001      	movs	r0, #1
 80039e6:	f008 feb5 	bl	800c754 <CreateLine>
    return false;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <ESP_Send+0x4c>
  }
  return true;
 80039ee:	2301      	movs	r3, #1
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}
 80039f8:	08020e50 	.word	0x08020e50
 80039fc:	20000440 	.word	0x20000440
 8003a00:	08020e60 	.word	0x08020e60
 8003a04:	08020e80 	.word	0x08020e80

08003a08 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	000a      	movs	r2, r1
 8003a12:	1cbb      	adds	r3, r7, #2
 8003a14:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a1c:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <ESP_Receive+0x60>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	250f      	movs	r5, #15
 8003a22:	197c      	adds	r4, r7, r5
 8003a24:	1cbb      	adds	r3, r7, #2
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	f011 fc24 	bl	8015278 <HAL_UART_Receive_DMA>
 8003a30:	0003      	movs	r3, r0
 8003a32:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a34:	197b      	adds	r3, r7, r5
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <ESP_Receive+0x60>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2284      	movs	r2, #132	@ 0x84
 8003a42:	589b      	ldr	r3, [r3, r2]
 8003a44:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <ESP_Receive+0x64>)
 8003a46:	490a      	ldr	r1, [pc, #40]	@ (8003a70 <ESP_Receive+0x68>)
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f008 fe83 	bl	800c754 <CreateLine>
    RxComplete = true;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
    return false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <ESP_Receive+0x52>
  }
  return true;
 8003a58:	2301      	movs	r3, #1
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bdb0      	pop	{r4, r5, r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	20000444 	.word	0x20000444
 8003a68:	20000440 	.word	0x20000440
 8003a6c:	08020e84 	.word	0x08020e84
 8003a70:	08020e80 	.word	0x08020e80

08003a74 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <HAL_UART_ErrorCallback+0x2c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d107      	bne.n	8003a96 <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2284      	movs	r2, #132	@ 0x84
 8003a8a:	589b      	ldr	r3, [r3, r2]
 8003a8c:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <HAL_UART_ErrorCallback+0x30>)
 8003a8e:	4906      	ldr	r1, [pc, #24]	@ (8003aa8 <HAL_UART_ErrorCallback+0x34>)
 8003a90:	2003      	movs	r0, #3
 8003a92:	f008 fe5f 	bl	800c754 <CreateLine>
  }
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	20000440 	.word	0x20000440
 8003aa4:	08020eb4 	.word	0x08020eb4
 8003aa8:	08020ee0 	.word	0x08020ee0

08003aac <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e010      	b.n	8003ade <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1898      	adds	r0, r3, r2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	001a      	movs	r2, r3
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <uint8ArrayToString+0x44>)
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f01a f8ca 	bl	801dc6c <siprintf>
  for (int i = 0; i < 12; i++)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	ddeb      	ble.n	8003abc <uint8ArrayToString+0x10>
  }
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	08020ee4 	.word	0x08020ee4

08003af4 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af6:	b089      	sub	sp, #36	@ 0x24
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	0002      	movs	r2, r0
 8003afc:	1dfb      	adds	r3, r7, #7
 8003afe:	701a      	strb	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b00:	4bb9      	ldr	r3, [pc, #740]	@ (8003de8 <CreateMessage+0x2f4>)
 8003b02:	48ba      	ldr	r0, [pc, #744]	@ (8003dec <CreateMessage+0x2f8>)
 8003b04:	220c      	movs	r2, #12
 8003b06:	0019      	movs	r1, r3
 8003b08:	f7ff fdf6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b0c:	4bb8      	ldr	r3, [pc, #736]	@ (8003df0 <CreateMessage+0x2fc>)
 8003b0e:	48b9      	ldr	r0, [pc, #740]	@ (8003df4 <CreateMessage+0x300>)
 8003b10:	220c      	movs	r2, #12
 8003b12:	0019      	movs	r1, r3
 8003b14:	f7ff fdf0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b18:	4bb7      	ldr	r3, [pc, #732]	@ (8003df8 <CreateMessage+0x304>)
 8003b1a:	48b8      	ldr	r0, [pc, #736]	@ (8003dfc <CreateMessage+0x308>)
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7ff fdea 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b24:	4bb6      	ldr	r3, [pc, #728]	@ (8003e00 <CreateMessage+0x30c>)
 8003b26:	48b7      	ldr	r0, [pc, #732]	@ (8003e04 <CreateMessage+0x310>)
 8003b28:	220c      	movs	r2, #12
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7ff fde4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b30:	4bb5      	ldr	r3, [pc, #724]	@ (8003e08 <CreateMessage+0x314>)
 8003b32:	48b6      	ldr	r0, [pc, #728]	@ (8003e0c <CreateMessage+0x318>)
 8003b34:	220c      	movs	r2, #12
 8003b36:	0019      	movs	r1, r3
 8003b38:	f7ff fdde 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b3c:	4bb4      	ldr	r3, [pc, #720]	@ (8003e10 <CreateMessage+0x31c>)
 8003b3e:	48b5      	ldr	r0, [pc, #724]	@ (8003e14 <CreateMessage+0x320>)
 8003b40:	220c      	movs	r2, #12
 8003b42:	0019      	movs	r1, r3
 8003b44:	f7ff fdd8 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b48:	f7ff fe7c 	bl	8003844 <checkName>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d006      	beq.n	8003b5e <CreateMessage+0x6a>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b50:	4bb1      	ldr	r3, [pc, #708]	@ (8003e18 <CreateMessage+0x324>)
 8003b52:	48b2      	ldr	r0, [pc, #712]	@ (8003e1c <CreateMessage+0x328>)
 8003b54:	221e      	movs	r2, #30
 8003b56:	0019      	movs	r1, r3
 8003b58:	f7ff fdce 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003b5c:	e005      	b.n	8003b6a <CreateMessage+0x76>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b5e:	4bae      	ldr	r3, [pc, #696]	@ (8003e18 <CreateMessage+0x324>)
 8003b60:	4aaf      	ldr	r2, [pc, #700]	@ (8003e20 <CreateMessage+0x32c>)
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	6019      	str	r1, [r3, #0]
 8003b66:	7912      	ldrb	r2, [r2, #4]
 8003b68:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b6a:	f7ff fe21 	bl	80037b0 <setCharges>

  memset(message, '\0', 1024);
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	00da      	lsls	r2, r3, #3
 8003b72:	4bac      	ldr	r3, [pc, #688]	@ (8003e24 <CreateMessage+0x330>)
 8003b74:	2100      	movs	r1, #0
 8003b76:	0018      	movs	r0, r3
 8003b78:	f01a f91c 	bl	801ddb4 <memset>
  uint16_t index = 0;
 8003b7c:	260e      	movs	r6, #14
 8003b7e:	19bb      	adds	r3, r7, r6
 8003b80:	2200      	movs	r2, #0
 8003b82:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b84:	19bb      	adds	r3, r7, r6
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	4ba6      	ldr	r3, [pc, #664]	@ (8003e24 <CreateMessage+0x330>)
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	4aa6      	ldr	r2, [pc, #664]	@ (8003e28 <CreateMessage+0x334>)
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f01a f86b 	bl	801dc6c <siprintf>
  index = strlen(message);
 8003b96:	4ba3      	ldr	r3, [pc, #652]	@ (8003e24 <CreateMessage+0x330>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc fae7 	bl	800016c <strlen>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	19bb      	adds	r3, r7, r6
 8003ba2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003ba4:	4a90      	ldr	r2, [pc, #576]	@ (8003de8 <CreateMessage+0x2f4>)
 8003ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8003e2c <CreateMessage+0x338>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff ff7e 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003bb0:	19bb      	adds	r3, r7, r6
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8003e24 <CreateMessage+0x330>)
 8003bb6:	18d4      	adds	r4, r2, r3
 8003bb8:	4b9d      	ldr	r3, [pc, #628]	@ (8003e30 <CreateMessage+0x33c>)
 8003bba:	689d      	ldr	r5, [r3, #8]
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e34 <CreateMessage+0x340>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1c18      	adds	r0, r3, #0
 8003bc2:	f7ff fc4f 	bl	8003464 <__aeabi_f2d>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	000b      	movs	r3, r1
 8003bca:	4893      	ldr	r0, [pc, #588]	@ (8003e18 <CreateMessage+0x324>)
 8003bcc:	499a      	ldr	r1, [pc, #616]	@ (8003e38 <CreateMessage+0x344>)
 8003bce:	9202      	str	r2, [sp, #8]
 8003bd0:	9303      	str	r3, [sp, #12]
 8003bd2:	4b96      	ldr	r3, [pc, #600]	@ (8003e2c <CreateMessage+0x338>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	002a      	movs	r2, r5
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f01a f846 	bl	801dc6c <siprintf>
  index = strlen(message);
 8003be0:	4b90      	ldr	r3, [pc, #576]	@ (8003e24 <CreateMessage+0x330>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7fc fac2 	bl	800016c <strlen>
 8003be8:	0002      	movs	r2, r0
 8003bea:	19bb      	adds	r3, r7, r6
 8003bec:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003bee:	4a80      	ldr	r2, [pc, #512]	@ (8003df0 <CreateMessage+0x2fc>)
 8003bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8003e2c <CreateMessage+0x338>)
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff ff59 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003bfa:	19bb      	adds	r3, r7, r6
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	4b89      	ldr	r3, [pc, #548]	@ (8003e24 <CreateMessage+0x330>)
 8003c00:	18d4      	adds	r4, r2, r3
 8003c02:	4b8b      	ldr	r3, [pc, #556]	@ (8003e30 <CreateMessage+0x33c>)
 8003c04:	689d      	ldr	r5, [r3, #8]
 8003c06:	4b8d      	ldr	r3, [pc, #564]	@ (8003e3c <CreateMessage+0x348>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1c18      	adds	r0, r3, #0
 8003c0c:	f7ff fc2a 	bl	8003464 <__aeabi_f2d>
 8003c10:	0002      	movs	r2, r0
 8003c12:	000b      	movs	r3, r1
 8003c14:	4880      	ldr	r0, [pc, #512]	@ (8003e18 <CreateMessage+0x324>)
 8003c16:	498a      	ldr	r1, [pc, #552]	@ (8003e40 <CreateMessage+0x34c>)
 8003c18:	9202      	str	r2, [sp, #8]
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	4b83      	ldr	r3, [pc, #524]	@ (8003e2c <CreateMessage+0x338>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	0003      	movs	r3, r0
 8003c22:	002a      	movs	r2, r5
 8003c24:	0020      	movs	r0, r4
 8003c26:	f01a f821 	bl	801dc6c <siprintf>
  index = strlen(message);
 8003c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003e24 <CreateMessage+0x330>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fc fa9d 	bl	800016c <strlen>
 8003c32:	0002      	movs	r2, r0
 8003c34:	19bb      	adds	r3, r7, r6
 8003c36:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c38:	4a6f      	ldr	r2, [pc, #444]	@ (8003df8 <CreateMessage+0x304>)
 8003c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <CreateMessage+0x338>)
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff ff34 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c44:	19bb      	adds	r3, r7, r6
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	4b76      	ldr	r3, [pc, #472]	@ (8003e24 <CreateMessage+0x330>)
 8003c4a:	18d4      	adds	r4, r2, r3
 8003c4c:	4b78      	ldr	r3, [pc, #480]	@ (8003e30 <CreateMessage+0x33c>)
 8003c4e:	689d      	ldr	r5, [r3, #8]
 8003c50:	4b7c      	ldr	r3, [pc, #496]	@ (8003e44 <CreateMessage+0x350>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c18      	adds	r0, r3, #0
 8003c56:	f7ff fc05 	bl	8003464 <__aeabi_f2d>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	000b      	movs	r3, r1
 8003c5e:	486e      	ldr	r0, [pc, #440]	@ (8003e18 <CreateMessage+0x324>)
 8003c60:	4979      	ldr	r1, [pc, #484]	@ (8003e48 <CreateMessage+0x354>)
 8003c62:	9202      	str	r2, [sp, #8]
 8003c64:	9303      	str	r3, [sp, #12]
 8003c66:	4b71      	ldr	r3, [pc, #452]	@ (8003e2c <CreateMessage+0x338>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	002a      	movs	r2, r5
 8003c6e:	0020      	movs	r0, r4
 8003c70:	f019 fffc 	bl	801dc6c <siprintf>
  index = strlen(message);
 8003c74:	4b6b      	ldr	r3, [pc, #428]	@ (8003e24 <CreateMessage+0x330>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fc fa78 	bl	800016c <strlen>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	19bb      	adds	r3, r7, r6
 8003c80:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c82:	4a5f      	ldr	r2, [pc, #380]	@ (8003e00 <CreateMessage+0x30c>)
 8003c84:	4b69      	ldr	r3, [pc, #420]	@ (8003e2c <CreateMessage+0x338>)
 8003c86:	0011      	movs	r1, r2
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff ff0f 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c8e:	19bb      	adds	r3, r7, r6
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	4b64      	ldr	r3, [pc, #400]	@ (8003e24 <CreateMessage+0x330>)
 8003c94:	18d0      	adds	r0, r2, r3
 8003c96:	4b66      	ldr	r3, [pc, #408]	@ (8003e30 <CreateMessage+0x33c>)
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003e4c <CreateMessage+0x358>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	4c5e      	ldr	r4, [pc, #376]	@ (8003e18 <CreateMessage+0x324>)
 8003ca0:	496b      	ldr	r1, [pc, #428]	@ (8003e50 <CreateMessage+0x35c>)
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <CreateMessage+0x338>)
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	0023      	movs	r3, r4
 8003caa:	f019 ffdf 	bl	801dc6c <siprintf>
  index = strlen(message);
 8003cae:	4b5d      	ldr	r3, [pc, #372]	@ (8003e24 <CreateMessage+0x330>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fc fa5b 	bl	800016c <strlen>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	19bb      	adds	r3, r7, r6
 8003cba:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4053      	eors	r3, r2
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04a      	beq.n	8003d60 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003cca:	4a4f      	ldr	r2, [pc, #316]	@ (8003e08 <CreateMessage+0x314>)
 8003ccc:	4b57      	ldr	r3, [pc, #348]	@ (8003e2c <CreateMessage+0x338>)
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff feeb 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003cd6:	19bb      	adds	r3, r7, r6
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	4b52      	ldr	r3, [pc, #328]	@ (8003e24 <CreateMessage+0x330>)
 8003cdc:	18d4      	adds	r4, r2, r3
 8003cde:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <CreateMessage+0x33c>)
 8003ce0:	689d      	ldr	r5, [r3, #8]
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e54 <CreateMessage+0x360>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c18      	adds	r0, r3, #0
 8003ce8:	f7ff fbbc 	bl	8003464 <__aeabi_f2d>
 8003cec:	0002      	movs	r2, r0
 8003cee:	000b      	movs	r3, r1
 8003cf0:	4849      	ldr	r0, [pc, #292]	@ (8003e18 <CreateMessage+0x324>)
 8003cf2:	4959      	ldr	r1, [pc, #356]	@ (8003e58 <CreateMessage+0x364>)
 8003cf4:	9202      	str	r2, [sp, #8]
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <CreateMessage+0x338>)
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	002a      	movs	r2, r5
 8003d00:	0020      	movs	r0, r4
 8003d02:	f019 ffb3 	bl	801dc6c <siprintf>
    index = strlen(message);
 8003d06:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <CreateMessage+0x330>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fc fa2f 	bl	800016c <strlen>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	19bb      	adds	r3, r7, r6
 8003d12:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d14:	4a3e      	ldr	r2, [pc, #248]	@ (8003e10 <CreateMessage+0x31c>)
 8003d16:	4b45      	ldr	r3, [pc, #276]	@ (8003e2c <CreateMessage+0x338>)
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7ff fec6 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d20:	19bb      	adds	r3, r7, r6
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	4b3f      	ldr	r3, [pc, #252]	@ (8003e24 <CreateMessage+0x330>)
 8003d26:	18d4      	adds	r4, r2, r3
 8003d28:	4b41      	ldr	r3, [pc, #260]	@ (8003e30 <CreateMessage+0x33c>)
 8003d2a:	689d      	ldr	r5, [r3, #8]
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <CreateMessage+0x368>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	1c18      	adds	r0, r3, #0
 8003d32:	f7ff fb97 	bl	8003464 <__aeabi_f2d>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	4837      	ldr	r0, [pc, #220]	@ (8003e18 <CreateMessage+0x324>)
 8003d3c:	4948      	ldr	r1, [pc, #288]	@ (8003e60 <CreateMessage+0x36c>)
 8003d3e:	9202      	str	r2, [sp, #8]
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	4b3a      	ldr	r3, [pc, #232]	@ (8003e2c <CreateMessage+0x338>)
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	0003      	movs	r3, r0
 8003d48:	002a      	movs	r2, r5
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f019 ff8e 	bl	801dc6c <siprintf>
    index = strlen(message);
 8003d50:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <CreateMessage+0x330>)
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fc fa0a 	bl	800016c <strlen>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	19bb      	adds	r3, r7, r6
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e025      	b.n	8003dac <CreateMessage+0x2b8>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <CreateMessage+0x314>)
 8003d62:	4b32      	ldr	r3, [pc, #200]	@ (8003e2c <CreateMessage+0x338>)
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fea0 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d6c:	260e      	movs	r6, #14
 8003d6e:	19bb      	adds	r3, r7, r6
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	4b2c      	ldr	r3, [pc, #176]	@ (8003e24 <CreateMessage+0x330>)
 8003d74:	18d4      	adds	r4, r2, r3
 8003d76:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <CreateMessage+0x33c>)
 8003d78:	689d      	ldr	r5, [r3, #8]
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <CreateMessage+0x360>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f7ff fb70 	bl	8003464 <__aeabi_f2d>
 8003d84:	0002      	movs	r2, r0
 8003d86:	000b      	movs	r3, r1
 8003d88:	4823      	ldr	r0, [pc, #140]	@ (8003e18 <CreateMessage+0x324>)
 8003d8a:	4936      	ldr	r1, [pc, #216]	@ (8003e64 <CreateMessage+0x370>)
 8003d8c:	9202      	str	r2, [sp, #8]
 8003d8e:	9303      	str	r3, [sp, #12]
 8003d90:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <CreateMessage+0x338>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	0003      	movs	r3, r0
 8003d96:	002a      	movs	r2, r5
 8003d98:	0020      	movs	r0, r4
 8003d9a:	f019 ff67 	bl	801dc6c <siprintf>
    index = strlen(message);
 8003d9e:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <CreateMessage+0x330>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fc f9e3 	bl	800016c <strlen>
 8003da6:	0002      	movs	r2, r0
 8003da8:	19bb      	adds	r3, r7, r6
 8003daa:	801a      	strh	r2, [r3, #0]
  }

  Debug("Length of datagram: %d", index);
 8003dac:	240e      	movs	r4, #14
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e68 <CreateMessage+0x374>)
 8003db4:	492d      	ldr	r1, [pc, #180]	@ (8003e6c <CreateMessage+0x378>)
 8003db6:	2003      	movs	r0, #3
 8003db8:	f008 fccc 	bl	800c754 <CreateLine>
  index = sprintf(&message[index], "]");
 8003dbc:	193b      	adds	r3, r7, r4
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	4b18      	ldr	r3, [pc, #96]	@ (8003e24 <CreateMessage+0x330>)
 8003dc2:	18d3      	adds	r3, r2, r3
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e70 <CreateMessage+0x37c>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f019 ff4f 	bl	801dc6c <siprintf>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	193b      	adds	r3, r7, r4
 8003dd2:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <CreateMessage+0x330>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fc f9c8 	bl	800016c <strlen>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	b29b      	uxth	r3, r3
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b005      	add	sp, #20
 8003de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de8:	200009d8 	.word	0x200009d8
 8003dec:	0808000c 	.word	0x0808000c
 8003df0:	200009e4 	.word	0x200009e4
 8003df4:	08080018 	.word	0x08080018
 8003df8:	200009f0 	.word	0x200009f0
 8003dfc:	08080048 	.word	0x08080048
 8003e00:	200009fc 	.word	0x200009fc
 8003e04:	08080030 	.word	0x08080030
 8003e08:	20000a08 	.word	0x20000a08
 8003e0c:	0808006c 	.word	0x0808006c
 8003e10:	20000a14 	.word	0x20000a14
 8003e14:	08080078 	.word	0x08080078
 8003e18:	20000a20 	.word	0x20000a20
 8003e1c:	08080090 	.word	0x08080090
 8003e20:	080223f8 	.word	0x080223f8
 8003e24:	2000057c 	.word	0x2000057c
 8003e28:	08020eec 	.word	0x08020eec
 8003e2c:	20000a40 	.word	0x20000a40
 8003e30:	20000550 	.word	0x20000550
 8003e34:	20000564 	.word	0x20000564
 8003e38:	08020ef0 	.word	0x08020ef0
 8003e3c:	20000568 	.word	0x20000568
 8003e40:	08020f44 	.word	0x08020f44
 8003e44:	20000578 	.word	0x20000578
 8003e48:	08020f9c 	.word	0x08020f9c
 8003e4c:	20000574 	.word	0x20000574
 8003e50:	08020ff8 	.word	0x08020ff8
 8003e54:	2000056c 	.word	0x2000056c
 8003e58:	0802104c 	.word	0x0802104c
 8003e5c:	20000570 	.word	0x20000570
 8003e60:	080210ac 	.word	0x080210ac
 8003e64:	08021108 	.word	0x08021108
 8003e68:	08021160 	.word	0x08021160
 8003e6c:	08020ee0 	.word	0x08020ee0
 8003e70:	08021178 	.word	0x08021178

08003e74 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e78:	2064      	movs	r0, #100	@ 0x64
 8003e7a:	f009 f811 	bl	800cea0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ed4 <StartProg+0x60>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	2101      	movs	r1, #1
 8003e84:	0018      	movs	r0, r3
 8003e86:	f00a fa60 	bl	800e34a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e8a:	2064      	movs	r0, #100	@ 0x64
 8003e8c:	f009 f808 	bl	800cea0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e90:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <StartProg+0x60>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	2102      	movs	r1, #2
 8003e96:	0018      	movs	r0, r3
 8003e98:	f00a fa57 	bl	800e34a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e9c:	23fa      	movs	r3, #250	@ 0xfa
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f008 fffd 	bl	800cea0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <StartProg+0x60>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	2101      	movs	r1, #1
 8003eac:	0018      	movs	r0, r3
 8003eae:	f00a fa4c 	bl	800e34a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003eb2:	23fa      	movs	r3, #250	@ 0xfa
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f008 fff2 	bl	800cea0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <StartProg+0x60>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f00a fa41 	bl	800e34a <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ec8:	2028      	movs	r0, #40	@ 0x28
 8003eca:	f008 ffe9 	bl	800cea0 <HAL_Delay>
}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	50001c00 	.word	0x50001c00

08003ed8 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	b0d9      	sub	sp, #356	@ 0x164
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	0008      	movs	r0, r1
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	4ba1      	ldr	r3, [pc, #644]	@ (800416c <ParseBuffer+0x294>)
 8003ee6:	24b0      	movs	r4, #176	@ 0xb0
 8003ee8:	0064      	lsls	r4, r4, #1
 8003eea:	191b      	adds	r3, r3, r4
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	1c02      	adds	r2, r0, #0
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	4b9f      	ldr	r3, [pc, #636]	@ (8004170 <ParseBuffer+0x298>)
 8003ef4:	191b      	adds	r3, r3, r4
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	1c0a      	adds	r2, r1, #0
 8003efa:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	005a      	lsls	r2, r3, #1
 8003f00:	2348      	movs	r3, #72	@ 0x48
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2100      	movs	r1, #0
 8003f06:	0018      	movs	r0, r3
 8003f08:	f019 ff54 	bl	801ddb4 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003f0c:	2360      	movs	r3, #96	@ 0x60
 8003f0e:	33ff      	adds	r3, #255	@ 0xff
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2203      	movs	r2, #3
 8003f14:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003f16:	23ae      	movs	r3, #174	@ 0xae
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e013      	b.n	8003f4a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8003f22:	20ae      	movs	r0, #174	@ 0xae
 8003f24:	0040      	lsls	r0, r0, #1
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	18d2      	adds	r2, r2, r3
 8003f2e:	183b      	adds	r3, r7, r0
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	7811      	ldrb	r1, [r2, #0]
 8003f34:	4a8f      	ldr	r2, [pc, #572]	@ (8004174 <ParseBuffer+0x29c>)
 8003f36:	24b0      	movs	r4, #176	@ 0xb0
 8003f38:	0064      	lsls	r4, r4, #1
 8003f3a:	1912      	adds	r2, r2, r4
 8003f3c:	19d2      	adds	r2, r2, r7
 8003f3e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003f40:	183b      	adds	r3, r7, r0
 8003f42:	881a      	ldrh	r2, [r3, #0]
 8003f44:	183b      	adds	r3, r7, r0
 8003f46:	3201      	adds	r2, #1
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	23ae      	movs	r3, #174	@ 0xae
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	18fa      	adds	r2, r7, r3
 8003f50:	4b86      	ldr	r3, [pc, #536]	@ (800416c <ParseBuffer+0x294>)
 8003f52:	24b0      	movs	r4, #176	@ 0xb0
 8003f54:	0064      	lsls	r4, r4, #1
 8003f56:	191b      	adds	r3, r3, r4
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	8812      	ldrh	r2, [r2, #0]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3df      	bcc.n	8003f22 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8003f62:	4b82      	ldr	r3, [pc, #520]	@ (800416c <ParseBuffer+0x294>)
 8003f64:	191b      	adds	r3, r3, r4
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	4a82      	ldr	r2, [pc, #520]	@ (8004174 <ParseBuffer+0x29c>)
 8003f6c:	1912      	adds	r2, r2, r4
 8003f6e:	19d2      	adds	r2, r2, r7
 8003f70:	2100      	movs	r1, #0
 8003f72:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8003f74:	2648      	movs	r6, #72	@ 0x48
 8003f76:	19ba      	adds	r2, r7, r6
 8003f78:	4b7f      	ldr	r3, [pc, #508]	@ (8004178 <ParseBuffer+0x2a0>)
 8003f7a:	0011      	movs	r1, r2
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f019 fe65 	bl	801dc4c <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  char * ParsePoint = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	22ac      	movs	r2, #172	@ 0xac
 8003f86:	0052      	lsls	r2, r2, #1
 8003f88:	18b9      	adds	r1, r7, r2
 8003f8a:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f8c:	4b7b      	ldr	r3, [pc, #492]	@ (800417c <ParseBuffer+0x2a4>)
 8003f8e:	0025      	movs	r5, r4
 8003f90:	195b      	adds	r3, r3, r5
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	4a7a      	ldr	r2, [pc, #488]	@ (8004180 <ParseBuffer+0x2a8>)
 8003f96:	8811      	ldrh	r1, [r2, #0]
 8003f98:	8019      	strh	r1, [r3, #0]
 8003f9a:	7892      	ldrb	r2, [r2, #2]
 8003f9c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f9e:	4b79      	ldr	r3, [pc, #484]	@ (8004184 <ParseBuffer+0x2ac>)
 8003fa0:	195b      	adds	r3, r3, r5
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	4a78      	ldr	r2, [pc, #480]	@ (8004188 <ParseBuffer+0x2b0>)
 8003fa6:	6811      	ldr	r1, [r2, #0]
 8003fa8:	6019      	str	r1, [r3, #0]
 8003faa:	8892      	ldrh	r2, [r2, #4]
 8003fac:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8003fae:	4b77      	ldr	r3, [pc, #476]	@ (800418c <ParseBuffer+0x2b4>)
 8003fb0:	195b      	adds	r3, r3, r5
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	4a76      	ldr	r2, [pc, #472]	@ (8004190 <ParseBuffer+0x2b8>)
 8003fb6:	6811      	ldr	r1, [r2, #0]
 8003fb8:	6019      	str	r1, [r3, #0]
 8003fba:	7912      	ldrb	r2, [r2, #4]
 8003fbc:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003fbe:	4b75      	ldr	r3, [pc, #468]	@ (8004194 <ParseBuffer+0x2bc>)
 8003fc0:	195b      	adds	r3, r3, r5
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	4a74      	ldr	r2, [pc, #464]	@ (8004198 <ParseBuffer+0x2c0>)
 8003fc6:	6811      	ldr	r1, [r2, #0]
 8003fc8:	6019      	str	r1, [r3, #0]
 8003fca:	8892      	ldrh	r2, [r2, #4]
 8003fcc:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003fce:	4b73      	ldr	r3, [pc, #460]	@ (800419c <ParseBuffer+0x2c4>)
 8003fd0:	195b      	adds	r3, r3, r5
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	223e      	movs	r2, #62	@ 0x3e
 8003fd6:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003fd8:	4b71      	ldr	r3, [pc, #452]	@ (80041a0 <ParseBuffer+0x2c8>)
 8003fda:	195b      	adds	r3, r3, r5
 8003fdc:	19db      	adds	r3, r3, r7
 8003fde:	4a71      	ldr	r2, [pc, #452]	@ (80041a4 <ParseBuffer+0x2cc>)
 8003fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8003fe4:	8811      	ldrh	r1, [r2, #0]
 8003fe6:	8019      	strh	r1, [r3, #0]
 8003fe8:	7892      	ldrb	r2, [r2, #2]
 8003fea:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8003fec:	4b6e      	ldr	r3, [pc, #440]	@ (80041a8 <ParseBuffer+0x2d0>)
 8003fee:	195b      	adds	r3, r3, r5
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80041ac <ParseBuffer+0x2d4>)
 8003ff4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ff6:	c313      	stmia	r3!, {r0, r1, r4}
 8003ff8:	8812      	ldrh	r2, [r2, #0]
 8003ffa:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8004170 <ParseBuffer+0x298>)
 8003ffe:	195b      	adds	r3, r3, r5
 8004000:	19db      	adds	r3, r3, r7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 8004008:	2344      	movs	r3, #68	@ 0x44
 800400a:	18fa      	adds	r2, r7, r3
 800400c:	19bb      	adds	r3, r7, r6
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f019 ff0a 	bl	801de2a <strstr>
 8004016:	0003      	movs	r3, r0
 8004018:	22ac      	movs	r2, #172	@ 0xac
 800401a:	0052      	lsls	r2, r2, #1
 800401c:	18ba      	adds	r2, r7, r2
 800401e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004020:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <ParseBuffer+0x298>)
 8004022:	22b0      	movs	r2, #176	@ 0xb0
 8004024:	0052      	lsls	r2, r2, #1
 8004026:	189b      	adds	r3, r3, r2
 8004028:	19db      	adds	r3, r3, r7
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10c      	bne.n	800404a <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004030:	232c      	movs	r3, #44	@ 0x2c
 8004032:	18fa      	adds	r2, r7, r3
 8004034:	2348      	movs	r3, #72	@ 0x48
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f019 fef5 	bl	801de2a <strstr>
 8004040:	0003      	movs	r3, r0
 8004042:	22ac      	movs	r2, #172	@ 0xac
 8004044:	0052      	lsls	r2, r2, #1
 8004046:	18ba      	adds	r2, r7, r2
 8004048:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800404a:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <ParseBuffer+0x298>)
 800404c:	22b0      	movs	r2, #176	@ 0xb0
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	189b      	adds	r3, r3, r2
 8004052:	19db      	adds	r3, r3, r7
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d10c      	bne.n	8004074 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800405a:	2328      	movs	r3, #40	@ 0x28
 800405c:	18fa      	adds	r2, r7, r3
 800405e:	2348      	movs	r3, #72	@ 0x48
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f019 fee0 	bl	801de2a <strstr>
 800406a:	0003      	movs	r3, r0
 800406c:	22ac      	movs	r2, #172	@ 0xac
 800406e:	0052      	lsls	r2, r2, #1
 8004070:	18ba      	adds	r2, r7, r2
 8004072:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004074:	4b3e      	ldr	r3, [pc, #248]	@ (8004170 <ParseBuffer+0x298>)
 8004076:	22b0      	movs	r2, #176	@ 0xb0
 8004078:	0052      	lsls	r2, r2, #1
 800407a:	189b      	adds	r3, r3, r2
 800407c:	19db      	adds	r3, r3, r7
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d10c      	bne.n	800409e <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 8004084:	2308      	movs	r3, #8
 8004086:	18fa      	adds	r2, r7, r3
 8004088:	2348      	movs	r3, #72	@ 0x48
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f019 fecb 	bl	801de2a <strstr>
 8004094:	0003      	movs	r3, r0
 8004096:	22ac      	movs	r2, #172	@ 0xac
 8004098:	0052      	lsls	r2, r2, #1
 800409a:	18ba      	adds	r2, r7, r2
 800409c:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800409e:	233c      	movs	r3, #60	@ 0x3c
 80040a0:	18fa      	adds	r2, r7, r3
 80040a2:	2448      	movs	r4, #72	@ 0x48
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	0011      	movs	r1, r2
 80040a8:	0018      	movs	r0, r3
 80040aa:	f019 febe 	bl	801de2a <strstr>
 80040ae:	0003      	movs	r3, r0
 80040b0:	22aa      	movs	r2, #170	@ 0xaa
 80040b2:	0052      	lsls	r2, r2, #1
 80040b4:	18ba      	adds	r2, r7, r2
 80040b6:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80040b8:	2318      	movs	r3, #24
 80040ba:	18fa      	adds	r2, r7, r3
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f019 feb2 	bl	801de2a <strstr>
 80040c6:	0003      	movs	r3, r0
 80040c8:	22a8      	movs	r2, #168	@ 0xa8
 80040ca:	0052      	lsls	r2, r2, #1
 80040cc:	18ba      	adds	r2, r7, r2
 80040ce:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80040d0:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <ParseBuffer+0x2d8>)
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f019 fea7 	bl	801de2a <strstr>
 80040dc:	0003      	movs	r3, r0
 80040de:	22a6      	movs	r2, #166	@ 0xa6
 80040e0:	0052      	lsls	r2, r2, #1
 80040e2:	18ba      	adds	r2, r7, r2
 80040e4:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80040e6:	2334      	movs	r3, #52	@ 0x34
 80040e8:	18fa      	adds	r2, r7, r3
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f019 fe9b 	bl	801de2a <strstr>
 80040f4:	0003      	movs	r3, r0
 80040f6:	22a4      	movs	r2, #164	@ 0xa4
 80040f8:	0052      	lsls	r2, r2, #1
 80040fa:	18ba      	adds	r2, r7, r2
 80040fc:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80040fe:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <ParseBuffer+0x294>)
 8004100:	21b0      	movs	r1, #176	@ 0xb0
 8004102:	0049      	lsls	r1, r1, #1
 8004104:	185b      	adds	r3, r3, r1
 8004106:	19db      	adds	r3, r3, r7
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d800      	bhi.n	8004110 <ParseBuffer+0x238>
 800410e:	e0be      	b.n	800428e <ParseBuffer+0x3b6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004110:	22ac      	movs	r2, #172	@ 0xac
 8004112:	0052      	lsls	r2, r2, #1
 8004114:	18bb      	adds	r3, r7, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d051      	beq.n	80041c0 <ParseBuffer+0x2e8>
 800411c:	18bb      	adds	r3, r7, r2
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b4f      	cmp	r3, #79	@ 0x4f
 8004124:	d14c      	bne.n	80041c0 <ParseBuffer+0x2e8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004126:	2360      	movs	r3, #96	@ 0x60
 8004128:	33ff      	adds	r3, #255	@ 0xff
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004130:	4b20      	ldr	r3, [pc, #128]	@ (80041b4 <ParseBuffer+0x2dc>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b12      	cmp	r3, #18
 8004136:	d143      	bne.n	80041c0 <ParseBuffer+0x2e8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <ParseBuffer+0x294>)
 800413a:	185b      	adds	r3, r3, r1
 800413c:	19db      	adds	r3, r3, r7
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2b2b      	cmp	r3, #43	@ 0x2b
 8004142:	d10b      	bne.n	800415c <ParseBuffer+0x284>
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <ParseBuffer+0x29c>)
 8004146:	185b      	adds	r3, r3, r1
 8004148:	19db      	adds	r3, r3, r7
 800414a:	2221      	movs	r2, #33	@ 0x21
 800414c:	5c9b      	ldrb	r3, [r3, r2]
 800414e:	2b32      	cmp	r3, #50	@ 0x32
 8004150:	d104      	bne.n	800415c <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004152:	193b      	adds	r3, r7, r4
 8004154:	0018      	movs	r0, r3
 8004156:	f002 f861 	bl	800621c <ParseTime>
 800415a:	e031      	b.n	80041c0 <ParseBuffer+0x2e8>
        }
        else {
          Error("Error getting time");
 800415c:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <ParseBuffer+0x2e0>)
 800415e:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <ParseBuffer+0x2e4>)
 8004160:	0019      	movs	r1, r3
 8004162:	2001      	movs	r0, #1
 8004164:	f008 faf6 	bl	800c754 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8004168:	2306      	movs	r3, #6
 800416a:	e094      	b.n	8004296 <ParseBuffer+0x3be>
 800416c:	fffffea2 	.word	0xfffffea2
 8004170:	fffffea1 	.word	0xfffffea1
 8004174:	fffffee8 	.word	0xfffffee8
 8004178:	0802117c 	.word	0x0802117c
 800417c:	fffffee4 	.word	0xfffffee4
 8004180:	080211a8 	.word	0x080211a8
 8004184:	fffffedc 	.word	0xfffffedc
 8004188:	080211ac 	.word	0x080211ac
 800418c:	fffffed4 	.word	0xfffffed4
 8004190:	080211b4 	.word	0x080211b4
 8004194:	fffffecc 	.word	0xfffffecc
 8004198:	080211bc 	.word	0x080211bc
 800419c:	fffffec8 	.word	0xfffffec8
 80041a0:	fffffeb8 	.word	0xfffffeb8
 80041a4:	080211c4 	.word	0x080211c4
 80041a8:	fffffea8 	.word	0xfffffea8
 80041ac:	080211d4 	.word	0x080211d4
 80041b0:	080223d4 	.word	0x080223d4
 80041b4:	20000996 	.word	0x20000996
 80041b8:	08021194 	.word	0x08021194
 80041bc:	08020e80 	.word	0x08020e80
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80041c0:	22ac      	movs	r2, #172	@ 0xac
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <ParseBuffer+0x308>
 80041cc:	18bb      	adds	r3, r7, r2
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b72      	cmp	r3, #114	@ 0x72
 80041d4:	d104      	bne.n	80041e0 <ParseBuffer+0x308>
      status = RECEIVE_STATUS_READY;
 80041d6:	2360      	movs	r3, #96	@ 0x60
 80041d8:	33ff      	adds	r3, #255	@ 0xff
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2202      	movs	r2, #2
 80041de:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80041e0:	22ac      	movs	r2, #172	@ 0xac
 80041e2:	0052      	lsls	r2, r2, #1
 80041e4:	18bb      	adds	r3, r7, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <ParseBuffer+0x328>
 80041ec:	18bb      	adds	r3, r7, r2
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80041f4:	d104      	bne.n	8004200 <ParseBuffer+0x328>
      status = RECEIVE_STATUS_START;
 80041f6:	2360      	movs	r3, #96	@ 0x60
 80041f8:	33ff      	adds	r3, #255	@ 0xff
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2205      	movs	r2, #5
 80041fe:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004200:	22ac      	movs	r2, #172	@ 0xac
 8004202:	0052      	lsls	r2, r2, #1
 8004204:	18bb      	adds	r3, r7, r2
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <ParseBuffer+0x348>
 800420c:	18bb      	adds	r3, r7, r2
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b2b      	cmp	r3, #43	@ 0x2b
 8004214:	d104      	bne.n	8004220 <ParseBuffer+0x348>
      status = RECEIVE_STATUS_TIME;
 8004216:	2360      	movs	r3, #96	@ 0x60
 8004218:	33ff      	adds	r3, #255	@ 0xff
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	220b      	movs	r2, #11
 800421e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004220:	22aa      	movs	r2, #170	@ 0xaa
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	18bb      	adds	r3, r7, r2
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <ParseBuffer+0x35e>
 800422c:	18bb      	adds	r3, r7, r2
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b45      	cmp	r3, #69	@ 0x45
 8004234:	d00a      	beq.n	800424c <ParseBuffer+0x374>
 8004236:	22a4      	movs	r2, #164	@ 0xa4
 8004238:	0052      	lsls	r2, r2, #1
 800423a:	18bb      	adds	r3, r7, r2
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <ParseBuffer+0x37e>
 8004242:	18bb      	adds	r3, r7, r2
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b46      	cmp	r3, #70	@ 0x46
 800424a:	d104      	bne.n	8004256 <ParseBuffer+0x37e>
      status = RECEIVE_STATUS_ERROR;
 800424c:	2360      	movs	r3, #96	@ 0x60
 800424e:	33ff      	adds	r3, #255	@ 0xff
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004256:	22a8      	movs	r2, #168	@ 0xa8
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	18bb      	adds	r3, r7, r2
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <ParseBuffer+0x39a>
 8004262:	18bb      	adds	r3, r7, r2
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b57      	cmp	r3, #87	@ 0x57
 800426a:	d102      	bne.n	8004272 <ParseBuffer+0x39a>
      ConnectionMade = true;
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <ParseBuffer+0x3c8>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 8004272:	22a6      	movs	r2, #166	@ 0xa6
 8004274:	0052      	lsls	r2, r2, #1
 8004276:	18bb      	adds	r3, r7, r2
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <ParseBuffer+0x3b6>
 800427e:	18bb      	adds	r3, r7, r2
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b32      	cmp	r3, #50	@ 0x32
 8004286:	d102      	bne.n	800428e <ParseBuffer+0x3b6>
      beurs = true;
 8004288:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <ParseBuffer+0x3cc>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800428e:	2360      	movs	r3, #96	@ 0x60
 8004290:	33ff      	adds	r3, #255	@ 0xff
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]

}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b059      	add	sp, #356	@ 0x164
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	2000054c 	.word	0x2000054c
 80042a4:	2000054e 	.word	0x2000054e

080042a8 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <PollAwake+0x34>)
 80042b0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7fb ff59 	bl	800016c <strlen>
 80042ba:	0003      	movs	r3, r0
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7ff fb6e 	bl	80039a4 <ESP_Send>
 80042c8:	1e03      	subs	r3, r0, #0
 80042ca:	d001      	beq.n	80042d0 <PollAwake+0x28>
    return true;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <PollAwake+0x2a>
  }
  else{
    return false;
 80042d0:	2300      	movs	r3, #0
  }
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	080211e4 	.word	0x080211e4

080042e0 <RFPower>:
bool RFPower(){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80042e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <RFPower+0x34>)
 80042e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7fb ff3d 	bl	800016c <strlen>
 80042f2:	0003      	movs	r3, r0
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff fb52 	bl	80039a4 <ESP_Send>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d001      	beq.n	8004308 <RFPower+0x28>
    return true;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <RFPower+0x2a>
  }
  else{
    return false;
 8004308:	2300      	movs	r3, #0
  }
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	080211ec 	.word	0x080211ec

08004318 <CheckRFPower>:
bool CheckRFPower(){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <CheckRFPower+0x34>)
 8004320:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7fb ff21 	bl	800016c <strlen>
 800432a:	0003      	movs	r3, r0
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0011      	movs	r1, r2
 8004332:	0018      	movs	r0, r3
 8004334:	f7ff fb36 	bl	80039a4 <ESP_Send>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d001      	beq.n	8004340 <CheckRFPower+0x28>
    return true;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004340:	2300      	movs	r3, #0
  }
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b002      	add	sp, #8
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	080211fc 	.word	0x080211fc

08004350 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <ATRestore+0x34>)
 8004358:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0018      	movs	r0, r3
 800435e:	f7fb ff05 	bl	800016c <strlen>
 8004362:	0003      	movs	r3, r0
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0011      	movs	r1, r2
 800436a:	0018      	movs	r0, r3
 800436c:	f7ff fb1a 	bl	80039a4 <ESP_Send>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d001      	beq.n	8004378 <ATRestore+0x28>
    return true;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <ATRestore+0x2a>
  }
  else{
    return false;
 8004378:	2300      	movs	r3, #0
  }
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	0802120c 	.word	0x0802120c

08004388 <CWINIT>:
bool CWINIT(){
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <CWINIT+0x34>)
 8004390:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f7fb fee9 	bl	800016c <strlen>
 800439a:	0003      	movs	r3, r0
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0011      	movs	r1, r2
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fafe 	bl	80039a4 <ESP_Send>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d001      	beq.n	80043b0 <CWINIT+0x28>
    return true;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <CWINIT+0x2a>
  }
  else{
    return false;
 80043b0:	2300      	movs	r3, #0
  }
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b002      	add	sp, #8
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	0802121c 	.word	0x0802121c

080043c0 <CWMODE1>:
bool CWMODE1(){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80043c6:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <CWMODE1+0x34>)
 80043c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fb fecd 	bl	800016c <strlen>
 80043d2:	0003      	movs	r3, r0
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff fae2 	bl	80039a4 <ESP_Send>
 80043e0:	1e03      	subs	r3, r0, #0
 80043e2:	d001      	beq.n	80043e8 <CWMODE1+0x28>
    return true;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <CWMODE1+0x2a>
  }
  else{
    return false;
 80043e8:	2300      	movs	r3, #0
  }
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	0802122c 	.word	0x0802122c

080043f8 <CWMODE2>:
bool CWMODE2(){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80043fe:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <CWMODE2+0x34>)
 8004400:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0018      	movs	r0, r3
 8004406:	f7fb feb1 	bl	800016c <strlen>
 800440a:	0003      	movs	r3, r0
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff fac6 	bl	80039a4 <ESP_Send>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d001      	beq.n	8004420 <CWMODE2+0x28>
    return true;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004420:	2300      	movs	r3, #0
  }
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b002      	add	sp, #8
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	0802123c 	.word	0x0802123c

08004430 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <CWAUTOCONN+0x34>)
 8004438:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f7fb fe95 	bl	800016c <strlen>
 8004442:	0003      	movs	r3, r0
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0011      	movs	r1, r2
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff faaa 	bl	80039a4 <ESP_Send>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d001      	beq.n	8004458 <CWAUTOCONN+0x28>
    return true;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004458:	2300      	movs	r3, #0
  }
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b002      	add	sp, #8
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	0802124c 	.word	0x0802124c

08004468 <CWJAP>:
bool CWJAP(){
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	46c6      	mov	lr, r8
 800446c:	b500      	push	{lr}
 800446e:	b0a2      	sub	sp, #136	@ 0x88
 8004470:	af00      	add	r7, sp, #0
 8004472:	466b      	mov	r3, sp
 8004474:	4698      	mov	r8, r3
  beursTest = true;
 8004476:	4b39      	ldr	r3, [pc, #228]	@ (800455c <CWJAP+0xf4>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 800447c:	2618      	movs	r6, #24
 800447e:	19bb      	adds	r3, r7, r6
 8004480:	2264      	movs	r2, #100	@ 0x64
 8004482:	2100      	movs	r1, #0
 8004484:	0018      	movs	r0, r3
 8004486:	f019 fc95 	bl	801ddb4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800448a:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <CWJAP+0xf8>)
 800448c:	4a35      	ldr	r2, [pc, #212]	@ (8004564 <CWJAP+0xfc>)
 800448e:	4936      	ldr	r1, [pc, #216]	@ (8004568 <CWJAP+0x100>)
 8004490:	19b8      	adds	r0, r7, r6
 8004492:	f019 fbeb 	bl	801dc6c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004496:	19bb      	adds	r3, r7, r6
 8004498:	0018      	movs	r0, r3
 800449a:	f7fb fe67 	bl	800016c <strlen>
 800449e:	0002      	movs	r2, r0
 80044a0:	216f      	movs	r1, #111	@ 0x6f
 80044a2:	0030      	movs	r0, r6
 80044a4:	180b      	adds	r3, r1, r0
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80044aa:	180b      	adds	r3, r1, r0
 80044ac:	19db      	adds	r3, r3, r7
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	2180      	movs	r1, #128	@ 0x80
 80044b6:	1879      	adds	r1, r7, r1
 80044b8:	600a      	str	r2, [r1, #0]
 80044ba:	001a      	movs	r2, r3
 80044bc:	60ba      	str	r2, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	60fa      	str	r2, [r7, #12]
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	0002      	movs	r2, r0
 80044c8:	0f52      	lsrs	r2, r2, #29
 80044ca:	000e      	movs	r6, r1
 80044cc:	00f6      	lsls	r6, r6, #3
 80044ce:	617e      	str	r6, [r7, #20]
 80044d0:	697e      	ldr	r6, [r7, #20]
 80044d2:	4316      	orrs	r6, r2
 80044d4:	617e      	str	r6, [r7, #20]
 80044d6:	0002      	movs	r2, r0
 80044d8:	00d2      	lsls	r2, r2, #3
 80044da:	613a      	str	r2, [r7, #16]
 80044dc:	001a      	movs	r2, r3
 80044de:	603a      	str	r2, [r7, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	0002      	movs	r2, r0
 80044ea:	0f52      	lsrs	r2, r2, #29
 80044ec:	000e      	movs	r6, r1
 80044ee:	00f5      	lsls	r5, r6, #3
 80044f0:	4315      	orrs	r5, r2
 80044f2:	0002      	movs	r2, r0
 80044f4:	00d4      	lsls	r4, r2, #3
 80044f6:	3307      	adds	r3, #7
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	466a      	mov	r2, sp
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	469d      	mov	sp, r3
 8004502:	466b      	mov	r3, sp
 8004504:	3300      	adds	r3, #0
 8004506:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004508:	246f      	movs	r4, #111	@ 0x6f
 800450a:	2518      	movs	r5, #24
 800450c:	1963      	adds	r3, r4, r5
 800450e:	19db      	adds	r3, r3, r7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	001a      	movs	r2, r3
 8004516:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004518:	2100      	movs	r1, #0
 800451a:	0018      	movs	r0, r3
 800451c:	f019 fc4a 	bl	801ddb4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004520:	1963      	adds	r3, r4, r5
 8004522:	19db      	adds	r3, r3, r7
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	1979      	adds	r1, r7, r5
 8004528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800452a:	0018      	movs	r0, r3
 800452c:	f019 fc69 	bl	801de02 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004530:	1963      	adds	r3, r4, r5
 8004532:	19db      	adds	r3, r3, r7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b29a      	uxth	r2, r3
 8004538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800453a:	0011      	movs	r1, r2
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fa31 	bl	80039a4 <ESP_Send>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d001      	beq.n	800454a <CWJAP+0xe2>
    return true;
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <CWJAP+0xe4>
  }
  else{
    return false;
 800454a:	2300      	movs	r3, #0
 800454c:	46c5      	mov	sp, r8
  }
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b022      	add	sp, #136	@ 0x88
 8004554:	bc80      	pop	{r7}
 8004556:	46b8      	mov	r8, r7
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	2000054d 	.word	0x2000054d
 8004560:	080223e0 	.word	0x080223e0
 8004564:	080223d4 	.word	0x080223d4
 8004568:	08021260 	.word	0x08021260

0800456c <CWMODE3>:
bool CWMODE3(){
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <CWMODE3+0x34>)
 8004574:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fb fdf7 	bl	800016c <strlen>
 800457e:	0003      	movs	r3, r0
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0011      	movs	r1, r2
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff fa0c 	bl	80039a4 <ESP_Send>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d001      	beq.n	8004594 <CWMODE3+0x28>
    return true;
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004594:	2300      	movs	r3, #0
  }
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	08021278 	.word	0x08021278

080045a4 <CWSTATE>:
bool CWSTATE(){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <CWSTATE+0x34>)
 80045ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7fb fddb 	bl	800016c <strlen>
 80045b6:	0003      	movs	r3, r0
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0011      	movs	r1, r2
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff f9f0 	bl	80039a4 <ESP_Send>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <CWSTATE+0x28>
    return true;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <CWSTATE+0x2a>
  }
  else{
    return false;
 80045cc:	2300      	movs	r3, #0
  }
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	08021288 	.word	0x08021288

080045dc <CWSAP>:
bool CWSAP(){
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <CWSAP+0x34>)
 80045e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fb fdbf 	bl	800016c <strlen>
 80045ee:	0003      	movs	r3, r0
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0011      	movs	r1, r2
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff f9d4 	bl	80039a4 <ESP_Send>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d001      	beq.n	8004604 <CWSAP+0x28>
    return true;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <CWSAP+0x2a>
  }
  else{
    return false;
 8004604:	2300      	movs	r3, #0
  }
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b002      	add	sp, #8
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	08021298 	.word	0x08021298

08004614 <CIPMUX>:
bool CIPMUX(){
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <CIPMUX+0x34>)
 800461c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f7fb fda3 	bl	800016c <strlen>
 8004626:	0003      	movs	r3, r0
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f7ff f9b8 	bl	80039a4 <ESP_Send>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <CIPMUX+0x28>
    return true;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <CIPMUX+0x2a>
  }
  else{
    return false;
 800463c:	2300      	movs	r3, #0
  }
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	080212bc 	.word	0x080212bc

0800464c <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <WEBSERVER+0x34>)
 8004654:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f7fb fd87 	bl	800016c <strlen>
 800465e:	0003      	movs	r3, r0
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0011      	movs	r1, r2
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff f99c 	bl	80039a4 <ESP_Send>
 800466c:	1e03      	subs	r3, r0, #0
 800466e:	d001      	beq.n	8004674 <WEBSERVER+0x28>
    return true;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	080212cc 	.word	0x080212cc

08004684 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b0c5      	sub	sp, #276	@ 0x114
 8004688:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	2100      	movs	r1, #0
 8004692:	0018      	movs	r0, r3
 8004694:	f019 fb8e 	bl	801ddb4 <memset>
  uint16_t length = CreateMessage(beurs);
 8004698:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <HTTPCPOST+0xa0>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	1dfc      	adds	r4, r7, #7
 800469e:	34ff      	adds	r4, #255	@ 0xff
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff fa27 	bl	8003af4 <CreateMessage>
 80046a6:	0003      	movs	r3, r0
 80046a8:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80046aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004724 <HTTPCPOST+0xa0>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	33ff      	adds	r3, #255	@ 0xff
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <HTTPCPOST+0xa4>)
 80046ba:	491c      	ldr	r1, [pc, #112]	@ (800472c <HTTPCPOST+0xa8>)
 80046bc:	1d38      	adds	r0, r7, #4
 80046be:	f019 fad5 	bl	801dc6c <siprintf>
 80046c2:	e016      	b.n	80046f2 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80046c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <HTTPCPOST+0xac>)
 80046c6:	481b      	ldr	r0, [pc, #108]	@ (8004734 <HTTPCPOST+0xb0>)
 80046c8:	220c      	movs	r2, #12
 80046ca:	0019      	movs	r1, r3
 80046cc:	f7ff f814 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80046d0:	4a17      	ldr	r2, [pc, #92]	@ (8004730 <HTTPCPOST+0xac>)
 80046d2:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HTTPCPOST+0xb4>)
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff f9e8 	bl	8003aac <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	33ff      	adds	r3, #255	@ 0xff
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	4c15      	ldr	r4, [pc, #84]	@ (8004738 <HTTPCPOST+0xb4>)
 80046e4:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HTTPCPOST+0xb8>)
 80046e6:	4916      	ldr	r1, [pc, #88]	@ (8004740 <HTTPCPOST+0xbc>)
 80046e8:	1d38      	adds	r0, r7, #4
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	0023      	movs	r3, r4
 80046ee:	f019 fabd 	bl	801dc6c <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd39 	bl	800016c <strlen>
 80046fa:	0002      	movs	r2, r0
 80046fc:	1d7b      	adds	r3, r7, #5
 80046fe:	33ff      	adds	r3, #255	@ 0xff
 8004700:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004702:	1d7b      	adds	r3, r7, #5
 8004704:	33ff      	adds	r3, #255	@ 0xff
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff f949 	bl	80039a4 <ESP_Send>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d001      	beq.n	800471a <HTTPCPOST+0x96>
    return true;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HTTPCPOST+0x98>
  }
  else{
    return false;
 800471a:	2300      	movs	r3, #0
  }
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b043      	add	sp, #268	@ 0x10c
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	2000054e 	.word	0x2000054e
 8004728:	08022400 	.word	0x08022400
 800472c:	080212e4 	.word	0x080212e4
 8004730:	20000a5c 	.word	0x20000a5c
 8004734:	08080000 	.word	0x08080000
 8004738:	20000a68 	.word	0x20000a68
 800473c:	0802243c 	.word	0x0802243c
 8004740:	0802131c 	.word	0x0802131c

08004744 <SENDDATA>:
bool SENDDATA(){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <SENDDATA+0x34>)
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd0d 	bl	800016c <strlen>
 8004752:	0002      	movs	r2, r0
 8004754:	1dbb      	adds	r3, r7, #6
 8004756:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004758:	1dbb      	adds	r3, r7, #6
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <SENDDATA+0x34>)
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f7ff f91f 	bl	80039a4 <ESP_Send>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <SENDDATA+0x2a>
    return true;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <SENDDATA+0x2c>
  }
  else{
    return false;
 800476e:	2300      	movs	r3, #0
  }
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b002      	add	sp, #8
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000057c 	.word	0x2000057c

0800477c <SLEEP>:
bool SLEEP(){
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <SLEEP+0x34>)
 8004784:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	0018      	movs	r0, r3
 800478a:	f7fb fcef 	bl	800016c <strlen>
 800478e:	0003      	movs	r3, r0
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f7ff f904 	bl	80039a4 <ESP_Send>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d001      	beq.n	80047a4 <SLEEP+0x28>
    return true;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <SLEEP+0x2a>
  }
  else{
    return false;
 80047a4:	2300      	movs	r3, #0
  }
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	0802135c 	.word	0x0802135c

080047b4 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <CIPSNTPCFG+0x3c>)
 80047bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fb fcd3 	bl	800016c <strlen>
 80047c6:	0003      	movs	r3, r0
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0011      	movs	r1, r2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff f8e8 	bl	80039a4 <ESP_Send>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d006      	beq.n	80047e6 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 80047d8:	23fa      	movs	r3, #250	@ 0xfa
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	0018      	movs	r0, r3
 80047de:	f008 fb5f 	bl	800cea0 <HAL_Delay>
    return true;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 80047e6:	2300      	movs	r3, #0
  }
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0802136c 	.word	0x0802136c

080047f4 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <CIPSNTPTIME+0x34>)
 80047fc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f7fb fcb3 	bl	800016c <strlen>
 8004806:	0003      	movs	r3, r0
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f8c8 	bl	80039a4 <ESP_Send>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <CIPSNTPTIME+0x28>
    return true;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 800481c:	2300      	movs	r3, #0
  }
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	080213bc 	.word	0x080213bc

0800482c <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <CIPSNTPINTV+0x34>)
 8004834:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fb fc97 	bl	800016c <strlen>
 800483e:	0003      	movs	r3, r0
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0011      	movs	r1, r2
 8004846:	0018      	movs	r0, r3
 8004848:	f7ff f8ac 	bl	80039a4 <ESP_Send>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d001      	beq.n	8004854 <CIPSNTPINTV+0x28>
    return true;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004854:	2300      	movs	r3, #0
  }
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	080213d0 	.word	0x080213d0

08004864 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af02      	add	r7, sp, #8
 800486a:	0002      	movs	r2, r0
 800486c:	1dfb      	adds	r3, r7, #7
 800486e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004870:	4b73      	ldr	r3, [pc, #460]	@ (8004a40 <DMA_ProcessBuffer+0x1dc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	b29a      	uxth	r2, r3
 8004878:	200e      	movs	r0, #14
 800487a:	183b      	adds	r3, r7, r0
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	0049      	lsls	r1, r1, #1
 8004880:	1a8a      	subs	r2, r1, r2
 8004882:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004884:	230d      	movs	r3, #13
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2203      	movs	r2, #3
 800488a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 800488c:	183b      	adds	r3, r7, r0
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004898:	183b      	adds	r3, r7, r0
 800489a:	2280      	movs	r2, #128	@ 0x80
 800489c:	0052      	lsls	r2, r2, #1
 800489e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 80048a0:	4b68      	ldr	r3, [pc, #416]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	001a      	movs	r2, r3
 80048a8:	230e      	movs	r3, #14
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d131      	bne.n	8004916 <DMA_ProcessBuffer+0xb2>
      if(retry > 30){
 80048b2:	4b65      	ldr	r3, [pc, #404]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b1e      	cmp	r3, #30
 80048b8:	d91b      	bls.n	80048f2 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80048ba:	4b63      	ldr	r3, [pc, #396]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80048c0:	4b62      	ldr	r3, [pc, #392]	@ (8004a4c <DMA_ProcessBuffer+0x1e8>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <DMA_ProcessBuffer+0x74>
 80048c8:	4b61      	ldr	r3, [pc, #388]	@ (8004a50 <DMA_ProcessBuffer+0x1ec>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 80048d0:	230d      	movs	r3, #13
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2207      	movs	r2, #7
 80048d6:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80048d8:	4b5c      	ldr	r3, [pc, #368]	@ (8004a4c <DMA_ProcessBuffer+0x1e8>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d103      	bne.n	80048e8 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 80048e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a54 <DMA_ProcessBuffer+0x1f0>)
 80048e2:	220b      	movs	r2, #11
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e016      	b.n	8004916 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80048e8:	230d      	movs	r3, #13
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	2206      	movs	r2, #6
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e011      	b.n	8004916 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 80048f2:	4b55      	ldr	r3, [pc, #340]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048fc:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 80048fe:	f008 fac5 	bl	800ce8c <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	33f5      	adds	r3, #245	@ 0xf5
 8004906:	33ff      	adds	r3, #255	@ 0xff
 8004908:	001a      	movs	r2, r3
 800490a:	4b53      	ldr	r3, [pc, #332]	@ (8004a58 <DMA_ProcessBuffer+0x1f4>)
 800490c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 800490e:	230d      	movs	r3, #13
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2204      	movs	r2, #4
 8004914:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004916:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	001a      	movs	r2, r3
 800491e:	210e      	movs	r1, #14
 8004920:	187b      	adds	r3, r7, r1
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <DMA_ProcessBuffer+0xc6>
 8004928:	e082      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 800492a:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004930:	4b4a      	ldr	r3, [pc, #296]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4b43      	ldr	r3, [pc, #268]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	429a      	cmp	r2, r3
 800493e:	d109      	bne.n	8004954 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004940:	187b      	adds	r3, r7, r1
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b45      	ldr	r3, [pc, #276]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004948:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800494a:	230d      	movs	r3, #13
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	220a      	movs	r2, #10
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e06d      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004954:	4b41      	ldr	r3, [pc, #260]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	001a      	movs	r2, r3
 800495c:	210e      	movs	r1, #14
 800495e:	187b      	adds	r3, r7, r1
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004966:	187b      	adds	r3, r7, r1
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 800496e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004970:	230d      	movs	r3, #13
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	220a      	movs	r2, #10
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e05a      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 800497a:	4b32      	ldr	r3, [pc, #200]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	001a      	movs	r2, r3
 8004982:	210e      	movs	r1, #14
 8004984:	187b      	adds	r3, r7, r1
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	4293      	cmp	r3, r2
 800498a:	d917      	bls.n	80049bc <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800498c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	001a      	movs	r2, r3
 8004994:	4b32      	ldr	r3, [pc, #200]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 8004996:	18d0      	adds	r0, r2, r3
 8004998:	4b2a      	ldr	r3, [pc, #168]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	001a      	movs	r2, r3
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	b299      	uxth	r1, r3
 80049a8:	230d      	movs	r3, #13
 80049aa:	18fc      	adds	r4, r7, r3
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	001a      	movs	r2, r3
 80049b2:	f7ff fa91 	bl	8003ed8 <ParseBuffer>
 80049b6:	0003      	movs	r3, r0
 80049b8:	7023      	strb	r3, [r4, #0]
 80049ba:	e026      	b.n	8004a0a <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80049bc:	4b21      	ldr	r3, [pc, #132]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	001a      	movs	r2, r3
 80049c4:	4b26      	ldr	r3, [pc, #152]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 80049c6:	18d0      	adds	r0, r2, r3
 80049c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	001a      	movs	r2, r3
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	b299      	uxth	r1, r3
 80049d8:	250d      	movs	r5, #13
 80049da:	197c      	adds	r4, r7, r5
 80049dc:	1dfb      	adds	r3, r7, #7
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	001a      	movs	r2, r3
 80049e2:	f7ff fa79 	bl	8003ed8 <ParseBuffer>
 80049e6:	0003      	movs	r3, r0
 80049e8:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80049ea:	210e      	movs	r1, #14
 80049ec:	187b      	adds	r3, r7, r1
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80049f4:	197c      	adds	r4, r7, r5
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	8819      	ldrh	r1, [r3, #0]
 80049fe:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff fa69 	bl	8003ed8 <ParseBuffer>
 8004a06:	0003      	movs	r3, r0
 8004a08:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	0018      	movs	r0, r3
 8004a12:	240e      	movs	r4, #14
 8004a14:	193b      	adds	r3, r7, r4
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <DMA_ProcessBuffer+0x200>)
 8004a1a:	4913      	ldr	r1, [pc, #76]	@ (8004a68 <DMA_ProcessBuffer+0x204>)
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	0003      	movs	r3, r0
 8004a20:	2003      	movs	r0, #3
 8004a22:	f007 fe97 	bl	800c754 <CreateLine>
          OldPos = pos;
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004a2e:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004a30:	230d      	movs	r3, #13
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	2000241c 	.word	0x2000241c
 8004a44:	20000a81 	.word	0x20000a81
 8004a48:	20000994 	.word	0x20000994
 8004a4c:	20000996 	.word	0x20000996
 8004a50:	20000000 	.word	0x20000000
 8004a54:	20000028 	.word	0x20000028
 8004a58:	20000988 	.word	0x20000988
 8004a5c:	20000a82 	.word	0x20000a82
 8004a60:	20000448 	.word	0x20000448
 8004a64:	080213e8 	.word	0x080213e8
 8004a68:	08020ee0 	.word	0x08020ee0

08004a6c <clearDMABuffer>:

void clearDMABuffer(){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004a70:	2380      	movs	r3, #128	@ 0x80
 8004a72:	005a      	lsls	r2, r3, #1
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <clearDMABuffer+0x18>)
 8004a76:	2100      	movs	r1, #0
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f019 f99b 	bl	801ddb4 <memset>
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000448 	.word	0x20000448

08004a88 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	0002      	movs	r2, r0
 8004a90:	1dfb      	adds	r3, r7, #7
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	1dbb      	adds	r3, r7, #6
 8004a96:	1c0a      	adds	r2, r1, #0
 8004a98:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004a9a:	210f      	movs	r1, #15
 8004a9c:	187b      	adds	r3, r7, r1
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004aa2:	1dbb      	adds	r3, r7, #6
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	1dfa      	adds	r2, r7, #7
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	4251      	negs	r1, r2
 8004ab2:	414a      	adcs	r2, r1
 8004ab4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004ab6:	1dbb      	adds	r3, r7, #6
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004abe:	230f      	movs	r3, #15
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	1dfa      	adds	r2, r7, #7
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	3a02      	subs	r2, #2
 8004ac8:	4251      	negs	r1, r2
 8004aca:	414a      	adcs	r2, r1
 8004acc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004ace:	1dbb      	adds	r3, r7, #6
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	1dfa      	adds	r2, r7, #7
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	3a05      	subs	r2, #5
 8004ae0:	4251      	negs	r1, r2
 8004ae2:	414a      	adcs	r2, r1
 8004ae4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d107      	bne.n	8004afe <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004aee:	230f      	movs	r3, #15
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	1dfa      	adds	r2, r7, #7
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	3a0b      	subs	r2, #11
 8004af8:	4251      	negs	r1, r2
 8004afa:	414a      	adcs	r2, r1
 8004afc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004afe:	230f      	movs	r3, #15
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	781b      	ldrb	r3, [r3, #0]
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b004      	add	sp, #16
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <AT_Send>:

bool AT_Send(AT_Commands state){
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	0002      	movs	r2, r0
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004b18:	230f      	movs	r3, #15
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004b20:	1dfb      	adds	r3, r7, #7
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b13      	cmp	r3, #19
 8004b26:	d900      	bls.n	8004b2a <AT_Send+0x1e>
 8004b28:	e18a      	b.n	8004e40 <AT_Send+0x334>
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	4bc8      	ldr	r3, [pc, #800]	@ (8004e50 <AT_Send+0x344>)
 8004b2e:	18d3      	adds	r3, r2, r3
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004b34:	4bc7      	ldr	r3, [pc, #796]	@ (8004e54 <AT_Send+0x348>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f007 fdb5 	bl	800c6a8 <TimestampIsReached>
 8004b3e:	1e03      	subs	r3, r0, #0
 8004b40:	d100      	bne.n	8004b44 <AT_Send+0x38>
 8004b42:	e17c      	b.n	8004e3e <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004b44:	230f      	movs	r3, #15
 8004b46:	18fc      	adds	r4, r7, r3
 8004b48:	f7ff fbae 	bl	80042a8 <PollAwake>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004b50:	f008 f99c 	bl	800ce8c <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	3332      	adds	r3, #50	@ 0x32
 8004b58:	001a      	movs	r2, r3
 8004b5a:	4bbe      	ldr	r3, [pc, #760]	@ (8004e54 <AT_Send+0x348>)
 8004b5c:	601a      	str	r2, [r3, #0]
  }
  break;
 8004b5e:	e16e      	b.n	8004e3e <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004b60:	4abd      	ldr	r2, [pc, #756]	@ (8004e58 <AT_Send+0x34c>)
 8004b62:	4bbe      	ldr	r3, [pc, #760]	@ (8004e5c <AT_Send+0x350>)
 8004b64:	0019      	movs	r1, r3
 8004b66:	2003      	movs	r0, #3
 8004b68:	f007 fdf4 	bl	800c754 <CreateLine>
    ATCommandSend = RFPower();
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fc      	adds	r4, r7, r3
 8004b70:	f7ff fbb6 	bl	80042e0 <RFPower>
 8004b74:	0003      	movs	r3, r0
 8004b76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b78:	f008 f988 	bl	800ce8c <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	330a      	adds	r3, #10
 8004b80:	001a      	movs	r2, r3
 8004b82:	4bb4      	ldr	r3, [pc, #720]	@ (8004e54 <AT_Send+0x348>)
 8004b84:	601a      	str	r2, [r3, #0]
    break;
 8004b86:	e15b      	b.n	8004e40 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004b88:	4ab5      	ldr	r2, [pc, #724]	@ (8004e60 <AT_Send+0x354>)
 8004b8a:	4bb4      	ldr	r3, [pc, #720]	@ (8004e5c <AT_Send+0x350>)
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	2003      	movs	r0, #3
 8004b90:	f007 fde0 	bl	800c754 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004b94:	230f      	movs	r3, #15
 8004b96:	18fc      	adds	r4, r7, r3
 8004b98:	f7ff fbbe 	bl	8004318 <CheckRFPower>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ba0:	f008 f974 	bl	800ce8c <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	330a      	adds	r3, #10
 8004ba8:	001a      	movs	r2, r3
 8004baa:	4baa      	ldr	r3, [pc, #680]	@ (8004e54 <AT_Send+0x348>)
 8004bac:	601a      	str	r2, [r3, #0]
    break;
 8004bae:	e147      	b.n	8004e40 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004bb0:	4aac      	ldr	r2, [pc, #688]	@ (8004e64 <AT_Send+0x358>)
 8004bb2:	4baa      	ldr	r3, [pc, #680]	@ (8004e5c <AT_Send+0x350>)
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	f007 fdcc 	bl	800c754 <CreateLine>
    ATCommandSend = ATRestore();
 8004bbc:	230f      	movs	r3, #15
 8004bbe:	18fc      	adds	r4, r7, r3
 8004bc0:	f7ff fbc6 	bl	8004350 <ATRestore>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004bc8:	f008 f960 	bl	800ce8c <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	3332      	adds	r3, #50	@ 0x32
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8004e54 <AT_Send+0x348>)
 8004bd4:	601a      	str	r2, [r3, #0]
    break;
 8004bd6:	e133      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004bd8:	4aa3      	ldr	r2, [pc, #652]	@ (8004e68 <AT_Send+0x35c>)
 8004bda:	4ba0      	ldr	r3, [pc, #640]	@ (8004e5c <AT_Send+0x350>)
 8004bdc:	0019      	movs	r1, r3
 8004bde:	2003      	movs	r0, #3
 8004be0:	f007 fdb8 	bl	800c754 <CreateLine>
    ATCommandSend = CWINIT();
 8004be4:	230f      	movs	r3, #15
 8004be6:	18fc      	adds	r4, r7, r3
 8004be8:	f7ff fbce 	bl	8004388 <CWINIT>
 8004bec:	0003      	movs	r3, r0
 8004bee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004bf0:	f008 f94c 	bl	800ce8c <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	33f5      	adds	r3, #245	@ 0xf5
 8004bf8:	33ff      	adds	r3, #255	@ 0xff
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	4b95      	ldr	r3, [pc, #596]	@ (8004e54 <AT_Send+0x348>)
 8004bfe:	601a      	str	r2, [r3, #0]
    break;
 8004c00:	e11e      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004c02:	4a9a      	ldr	r2, [pc, #616]	@ (8004e6c <AT_Send+0x360>)
 8004c04:	4b95      	ldr	r3, [pc, #596]	@ (8004e5c <AT_Send+0x350>)
 8004c06:	0019      	movs	r1, r3
 8004c08:	2003      	movs	r0, #3
 8004c0a:	f007 fda3 	bl	800c754 <CreateLine>
    ATCommandSend = CWSTATE();
 8004c0e:	230f      	movs	r3, #15
 8004c10:	18fc      	adds	r4, r7, r3
 8004c12:	f7ff fcc7 	bl	80045a4 <CWSTATE>
 8004c16:	0003      	movs	r3, r0
 8004c18:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004c1a:	f008 f937 	bl	800ce8c <HAL_GetTick>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	33f5      	adds	r3, #245	@ 0xf5
 8004c22:	33ff      	adds	r3, #255	@ 0xff
 8004c24:	001a      	movs	r2, r3
 8004c26:	4b8b      	ldr	r3, [pc, #556]	@ (8004e54 <AT_Send+0x348>)
 8004c28:	601a      	str	r2, [r3, #0]
    break;
 8004c2a:	e109      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004c2c:	4a90      	ldr	r2, [pc, #576]	@ (8004e70 <AT_Send+0x364>)
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e5c <AT_Send+0x350>)
 8004c30:	0019      	movs	r1, r3
 8004c32:	2003      	movs	r0, #3
 8004c34:	f007 fd8e 	bl	800c754 <CreateLine>
    ATCommandSend = CWMODE1();
 8004c38:	230f      	movs	r3, #15
 8004c3a:	18fc      	adds	r4, r7, r3
 8004c3c:	f7ff fbc0 	bl	80043c0 <CWMODE1>
 8004c40:	0003      	movs	r3, r0
 8004c42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c44:	f008 f922 	bl	800ce8c <HAL_GetTick>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	330a      	adds	r3, #10
 8004c4c:	001a      	movs	r2, r3
 8004c4e:	4b81      	ldr	r3, [pc, #516]	@ (8004e54 <AT_Send+0x348>)
 8004c50:	601a      	str	r2, [r3, #0]
    break;
 8004c52:	e0f5      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004c54:	4a86      	ldr	r2, [pc, #536]	@ (8004e70 <AT_Send+0x364>)
 8004c56:	4b81      	ldr	r3, [pc, #516]	@ (8004e5c <AT_Send+0x350>)
 8004c58:	0019      	movs	r1, r3
 8004c5a:	2003      	movs	r0, #3
 8004c5c:	f007 fd7a 	bl	800c754 <CreateLine>
    ATCommandSend = CWMODE2();
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fc      	adds	r4, r7, r3
 8004c64:	f7ff fbc8 	bl	80043f8 <CWMODE2>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c6c:	f008 f90e 	bl	800ce8c <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	330a      	adds	r3, #10
 8004c74:	001a      	movs	r2, r3
 8004c76:	4b77      	ldr	r3, [pc, #476]	@ (8004e54 <AT_Send+0x348>)
 8004c78:	601a      	str	r2, [r3, #0]
    break;
 8004c7a:	e0e1      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e74 <AT_Send+0x368>)
 8004c7e:	4b77      	ldr	r3, [pc, #476]	@ (8004e5c <AT_Send+0x350>)
 8004c80:	0019      	movs	r1, r3
 8004c82:	2003      	movs	r0, #3
 8004c84:	f007 fd66 	bl	800c754 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004c88:	230f      	movs	r3, #15
 8004c8a:	18fc      	adds	r4, r7, r3
 8004c8c:	f7ff fbd0 	bl	8004430 <CWAUTOCONN>
 8004c90:	0003      	movs	r3, r0
 8004c92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c94:	f008 f8fa 	bl	800ce8c <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	330a      	adds	r3, #10
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <AT_Send+0x348>)
 8004ca0:	601a      	str	r2, [r3, #0]
    break;
 8004ca2:	e0cd      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004ca4:	4a74      	ldr	r2, [pc, #464]	@ (8004e78 <AT_Send+0x36c>)
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e5c <AT_Send+0x350>)
 8004ca8:	0019      	movs	r1, r3
 8004caa:	2003      	movs	r0, #3
 8004cac:	f007 fd52 	bl	800c754 <CreateLine>
    ATCommandSend = CWJAP();
 8004cb0:	230f      	movs	r3, #15
 8004cb2:	18fc      	adds	r4, r7, r3
 8004cb4:	f7ff fbd8 	bl	8004468 <CWJAP>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004cbc:	f008 f8e6 	bl	800ce8c <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	3332      	adds	r3, #50	@ 0x32
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	4b63      	ldr	r3, [pc, #396]	@ (8004e54 <AT_Send+0x348>)
 8004cc8:	601a      	str	r2, [r3, #0]
    break;
 8004cca:	e0b9      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8004e7c <AT_Send+0x370>)
 8004cce:	4b63      	ldr	r3, [pc, #396]	@ (8004e5c <AT_Send+0x350>)
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	f007 fd3e 	bl	800c754 <CreateLine>
    ATCommandSend = CWMODE3();
 8004cd8:	230f      	movs	r3, #15
 8004cda:	18fc      	adds	r4, r7, r3
 8004cdc:	f7ff fc46 	bl	800456c <CWMODE3>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ce4:	f008 f8d2 	bl	800ce8c <HAL_GetTick>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	330a      	adds	r3, #10
 8004cec:	001a      	movs	r2, r3
 8004cee:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <AT_Send+0x348>)
 8004cf0:	601a      	str	r2, [r3, #0]
    break;
 8004cf2:	e0a5      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004cf4:	4a62      	ldr	r2, [pc, #392]	@ (8004e80 <AT_Send+0x374>)
 8004cf6:	4b59      	ldr	r3, [pc, #356]	@ (8004e5c <AT_Send+0x350>)
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f007 fd2a 	bl	800c754 <CreateLine>
    ATCommandSend = CWSAP();
 8004d00:	230f      	movs	r3, #15
 8004d02:	18fc      	adds	r4, r7, r3
 8004d04:	f7ff fc6a 	bl	80045dc <CWSAP>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d0c:	f008 f8be 	bl	800ce8c <HAL_GetTick>
 8004d10:	0003      	movs	r3, r0
 8004d12:	330a      	adds	r3, #10
 8004d14:	001a      	movs	r2, r3
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <AT_Send+0x348>)
 8004d18:	601a      	str	r2, [r3, #0]
    break;
 8004d1a:	e091      	b.n	8004e40 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fc      	adds	r4, r7, r3
 8004d20:	f7ff fc78 	bl	8004614 <CIPMUX>
 8004d24:	0003      	movs	r3, r0
 8004d26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d28:	f008 f8b0 	bl	800ce8c <HAL_GetTick>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	330a      	adds	r3, #10
 8004d30:	001a      	movs	r2, r3
 8004d32:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <AT_Send+0x348>)
 8004d34:	601a      	str	r2, [r3, #0]
    break;
 8004d36:	e083      	b.n	8004e40 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fc      	adds	r4, r7, r3
 8004d3c:	f7ff fc86 	bl	800464c <WEBSERVER>
 8004d40:	0003      	movs	r3, r0
 8004d42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d44:	f008 f8a2 	bl	800ce8c <HAL_GetTick>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	330a      	adds	r3, #10
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <AT_Send+0x348>)
 8004d50:	601a      	str	r2, [r3, #0]
    break;
 8004d52:	e075      	b.n	8004e40 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004d54:	230f      	movs	r3, #15
 8004d56:	18fc      	adds	r4, r7, r3
 8004d58:	f7ff fc94 	bl	8004684 <HTTPCPOST>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d60:	f008 f894 	bl	800ce8c <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	33f5      	adds	r3, #245	@ 0xf5
 8004d68:	33ff      	adds	r3, #255	@ 0xff
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <AT_Send+0x348>)
 8004d6e:	601a      	str	r2, [r3, #0]
    break;
 8004d70:	e066      	b.n	8004e40 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004d72:	4a44      	ldr	r2, [pc, #272]	@ (8004e84 <AT_Send+0x378>)
 8004d74:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <AT_Send+0x350>)
 8004d76:	0019      	movs	r1, r3
 8004d78:	2003      	movs	r0, #3
 8004d7a:	f007 fceb 	bl	800c754 <CreateLine>
    ATCommandSend = SENDDATA();
 8004d7e:	230f      	movs	r3, #15
 8004d80:	18fc      	adds	r4, r7, r3
 8004d82:	f7ff fcdf 	bl	8004744 <SENDDATA>
 8004d86:	0003      	movs	r3, r0
 8004d88:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004d8a:	f008 f87f 	bl	800ce8c <HAL_GetTick>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	33f5      	adds	r3, #245	@ 0xf5
 8004d92:	33ff      	adds	r3, #255	@ 0xff
 8004d94:	001a      	movs	r2, r3
 8004d96:	4b2f      	ldr	r3, [pc, #188]	@ (8004e54 <AT_Send+0x348>)
 8004d98:	601a      	str	r2, [r3, #0]
    break;
 8004d9a:	e051      	b.n	8004e40 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e88 <AT_Send+0x37c>)
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <AT_Send+0x350>)
 8004da0:	0019      	movs	r1, r3
 8004da2:	2003      	movs	r0, #3
 8004da4:	f007 fcd6 	bl	800c754 <CreateLine>
    ATCommandSend = SLEEP();
 8004da8:	230f      	movs	r3, #15
 8004daa:	18fc      	adds	r4, r7, r3
 8004dac:	f7ff fce6 	bl	800477c <SLEEP>
 8004db0:	0003      	movs	r3, r0
 8004db2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004db4:	f008 f86a 	bl	800ce8c <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	330a      	adds	r3, #10
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <AT_Send+0x348>)
 8004dc0:	601a      	str	r2, [r3, #0]
    break;
 8004dc2:	e03d      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004dc4:	4a31      	ldr	r2, [pc, #196]	@ (8004e8c <AT_Send+0x380>)
 8004dc6:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <AT_Send+0x350>)
 8004dc8:	0019      	movs	r1, r3
 8004dca:	2003      	movs	r0, #3
 8004dcc:	f007 fcc2 	bl	800c754 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	18fc      	adds	r4, r7, r3
 8004dd4:	f7ff fcee 	bl	80047b4 <CIPSNTPCFG>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ddc:	f008 f856 	bl	800ce8c <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	330a      	adds	r3, #10
 8004de4:	001a      	movs	r2, r3
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <AT_Send+0x348>)
 8004de8:	601a      	str	r2, [r3, #0]
    break;
 8004dea:	e029      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004dec:	4a28      	ldr	r2, [pc, #160]	@ (8004e90 <AT_Send+0x384>)
 8004dee:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <AT_Send+0x350>)
 8004df0:	0019      	movs	r1, r3
 8004df2:	2003      	movs	r0, #3
 8004df4:	f007 fcae 	bl	800c754 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004df8:	230f      	movs	r3, #15
 8004dfa:	18fc      	adds	r4, r7, r3
 8004dfc:	f7ff fcfa 	bl	80047f4 <CIPSNTPTIME>
 8004e00:	0003      	movs	r3, r0
 8004e02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e04:	f008 f842 	bl	800ce8c <HAL_GetTick>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	33f5      	adds	r3, #245	@ 0xf5
 8004e0c:	33ff      	adds	r3, #255	@ 0xff
 8004e0e:	001a      	movs	r2, r3
 8004e10:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <AT_Send+0x348>)
 8004e12:	601a      	str	r2, [r3, #0]
    break;
 8004e14:	e014      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004e16:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <AT_Send+0x388>)
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <AT_Send+0x350>)
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	2003      	movs	r0, #3
 8004e1e:	f007 fc99 	bl	800c754 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004e22:	230f      	movs	r3, #15
 8004e24:	18fc      	adds	r4, r7, r3
 8004e26:	f7ff fd01 	bl	800482c <CIPSNTPINTV>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e2e:	f008 f82d 	bl	800ce8c <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	330a      	adds	r3, #10
 8004e36:	001a      	movs	r2, r3
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <AT_Send+0x348>)
 8004e3a:	601a      	str	r2, [r3, #0]
    break;
 8004e3c:	e000      	b.n	8004e40 <AT_Send+0x334>
  break;
 8004e3e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004e40:	230f      	movs	r3, #15
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	781b      	ldrb	r3, [r3, #0]
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b005      	add	sp, #20
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	08022464 	.word	0x08022464
 8004e54:	20000988 	.word	0x20000988
 8004e58:	08021410 	.word	0x08021410
 8004e5c:	08020ee0 	.word	0x08020ee0
 8004e60:	08021424 	.word	0x08021424
 8004e64:	08021438 	.word	0x08021438
 8004e68:	08021448 	.word	0x08021448
 8004e6c:	0802145c 	.word	0x0802145c
 8004e70:	08021474 	.word	0x08021474
 8004e74:	0802148c 	.word	0x0802148c
 8004e78:	080214a4 	.word	0x080214a4
 8004e7c:	080214b8 	.word	0x080214b8
 8004e80:	080214d4 	.word	0x080214d4
 8004e84:	080214f0 	.word	0x080214f0
 8004e88:	08021500 	.word	0x08021500
 8004e8c:	08021524 	.word	0x08021524
 8004e90:	08021538 	.word	0x08021538
 8004e94:	08021550 	.word	0x08021550

08004e98 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004e9e:	1dfb      	adds	r3, r7, #7
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d900      	bls.n	8004eae <ESP_WakeTest+0x16>
 8004eac:	e0d6      	b.n	800505c <ESP_WakeTest+0x1c4>
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	4b78      	ldr	r3, [pc, #480]	@ (8005094 <ESP_WakeTest+0x1fc>)
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004eb8:	4b77      	ldr	r3, [pc, #476]	@ (8005098 <ESP_WakeTest+0x200>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4053      	eors	r3, r2
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d036      	beq.n	8004f34 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ec6:	2380      	movs	r3, #128	@ 0x80
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	4874      	ldr	r0, [pc, #464]	@ (800509c <ESP_WakeTest+0x204>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	0019      	movs	r1, r3
 8004ed0:	f009 fa3b 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004ed4:	2032      	movs	r0, #50	@ 0x32
 8004ed6:	f007 ffe3 	bl	800cea0 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004eda:	2380      	movs	r3, #128	@ 0x80
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	486f      	ldr	r0, [pc, #444]	@ (800509c <ESP_WakeTest+0x204>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	f009 fa31 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ee8:	200a      	movs	r0, #10
 8004eea:	f007 ffd9 	bl	800cea0 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004eee:	4b6c      	ldr	r3, [pc, #432]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f009 fa28 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004efa:	200a      	movs	r0, #10
 8004efc:	f007 ffd0 	bl	800cea0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004f00:	4b67      	ldr	r3, [pc, #412]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	2102      	movs	r1, #2
 8004f06:	0018      	movs	r0, r3
 8004f08:	f009 fa1f 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f007 ffc7 	bl	800cea0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004f12:	4b63      	ldr	r3, [pc, #396]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	2101      	movs	r1, #1
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f009 fa16 	bl	800e34a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004f1e:	f007 ffb5 	bl	800ce8c <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	22af      	movs	r2, #175	@ 0xaf
 8004f26:	0092      	lsls	r2, r2, #2
 8004f28:	189a      	adds	r2, r3, r2
 8004f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f2c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005098 <ESP_WakeTest+0x200>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	005a      	lsls	r2, r3, #1
 8004f38:	4b5b      	ldr	r3, [pc, #364]	@ (80050a8 <ESP_WakeTest+0x210>)
 8004f3a:	0011      	movs	r1, r2
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fe fd63 	bl	8003a08 <ESP_Receive>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d100      	bne.n	8004f48 <ESP_WakeTest+0xb0>
 8004f46:	e099      	b.n	800507c <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8004f48:	4b51      	ldr	r3, [pc, #324]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004f4e:	e095      	b.n	800507c <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f50:	4b54      	ldr	r3, [pc, #336]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f007 fba7 	bl	800c6a8 <TimestampIsReached>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d100      	bne.n	8004f60 <ESP_WakeTest+0xc8>
 8004f5e:	e08f      	b.n	8005080 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8004f60:	4b52      	ldr	r3, [pc, #328]	@ (80050ac <ESP_WakeTest+0x214>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	1dfc      	adds	r4, r7, #7
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7ff fdd0 	bl	8004b0c <AT_Send>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004f70:	1dfb      	adds	r3, r7, #7
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d100      	bne.n	8004f7a <ESP_WakeTest+0xe2>
 8004f78:	e082      	b.n	8005080 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8004f7a:	4b45      	ldr	r3, [pc, #276]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f80:	e07e      	b.n	8005080 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f82:	4b48      	ldr	r3, [pc, #288]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f007 fb8e 	bl	800c6a8 <TimestampIsReached>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d100      	bne.n	8004f92 <ESP_WakeTest+0xfa>
 8004f90:	e078      	b.n	8005084 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f92:	4b47      	ldr	r3, [pc, #284]	@ (80050b0 <ESP_WakeTest+0x218>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff fc64 	bl	8004864 <DMA_ProcessBuffer>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	4b44      	ldr	r3, [pc, #272]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fa2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004fa4:	4b43      	ldr	r3, [pc, #268]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	4b41      	ldr	r3, [pc, #260]	@ (80050b0 <ESP_WakeTest+0x218>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	1dbc      	adds	r4, r7, #6
 8004fae:	0019      	movs	r1, r3
 8004fb0:	0010      	movs	r0, r2
 8004fb2:	f7ff fd69 	bl	8004a88 <ATCompare>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004fba:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8004fc2:	4b33      	ldr	r3, [pc, #204]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b07      	cmp	r3, #7
 8004fce:	d104      	bne.n	8004fda <ESP_WakeTest+0x142>
          StartProg();
 8004fd0:	f7fe ff50 	bl	8003e74 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004fda:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d109      	bne.n	8004ff6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004fe2:	f007 ff53 	bl	800ce8c <HAL_GetTick>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	3332      	adds	r3, #50	@ 0x32
 8004fea:	001a      	movs	r2, r3
 8004fec:	4b2d      	ldr	r3, [pc, #180]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004fee:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004ff0:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004ff6:	1dbb      	adds	r3, r7, #6
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d042      	beq.n	8005084 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8005000:	2203      	movs	r2, #3
 8005002:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005004:	e03e      	b.n	8005084 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005006:	4b2c      	ldr	r3, [pc, #176]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005008:	22fa      	movs	r2, #250	@ 0xfa
 800500a:	0112      	lsls	r2, r2, #4
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800500e:	4b2a      	ldr	r3, [pc, #168]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005010:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <ESP_WakeTest+0x224>)
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005014:	4b28      	ldr	r3, [pc, #160]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005016:	22fa      	movs	r2, #250	@ 0xfa
 8005018:	0112      	lsls	r2, r2, #4
 800501a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800501c:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <ESP_WakeTest+0x1f8>)
 800501e:	2204      	movs	r2, #4
 8005020:	701a      	strb	r2, [r3, #0]

      break;
 8005022:	e030      	b.n	8005086 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005024:	4b26      	ldr	r3, [pc, #152]	@ (80050c0 <ESP_WakeTest+0x228>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800502a:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <ESP_WakeTest+0x200>)
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005030:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <ESP_WakeTest+0x208>)
 8005032:	2200      	movs	r2, #0
 8005034:	2101      	movs	r1, #1
 8005036:	0018      	movs	r0, r3
 8005038:	f009 f987 	bl	800e34a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	4816      	ldr	r0, [pc, #88]	@ (800509c <ESP_WakeTest+0x204>)
 8005042:	2200      	movs	r2, #0
 8005044:	0019      	movs	r1, r3
 8005046:	f009 f980 	bl	800e34a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <ESP_WakeTest+0x208>)
 800504c:	2200      	movs	r2, #0
 800504e:	2102      	movs	r1, #2
 8005050:	0018      	movs	r0, r3
 8005052:	f009 f97a 	bl	800e34a <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005056:	f002 fe39 	bl	8007ccc <SetESPMeasurementDone>
      break;
 800505a:	e014      	b.n	8005086 <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 800505c:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <ESP_WakeTest+0x1f8>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
      break;
 8005062:	e010      	b.n	8005086 <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8005064:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005066:	22fa      	movs	r2, #250	@ 0xfa
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <ESP_WakeTest+0x220>)
 800506e:	22fa      	movs	r2, #250	@ 0xfa
 8005070:	0112      	lsls	r2, r2, #4
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005074:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005076:	2200      	movs	r2, #0
 8005078:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 800507a:	e004      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	e002      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	e000      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 8005084:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	46bd      	mov	sp, r7
 800508a:	b003      	add	sp, #12
 800508c:	bd90      	pop	{r4, r7, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	20000998 	.word	0x20000998
 8005094:	080224b4 	.word	0x080224b4
 8005098:	20000548 	.word	0x20000548
 800509c:	50000800 	.word	0x50000800
 80050a0:	50001c00 	.word	0x50001c00
 80050a4:	20000988 	.word	0x20000988
 80050a8:	20000448 	.word	0x20000448
 80050ac:	20000996 	.word	0x20000996
 80050b0:	20000995 	.word	0x20000995
 80050b4:	20000029 	.word	0x20000029
 80050b8:	40000400 	.word	0x40000400
 80050bc:	00000bb8 	.word	0x00000bb8
 80050c0:	20000000 	.word	0x20000000

080050c4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80050c4:	b5b0      	push	{r4, r5, r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80050ca:	1dfb      	adds	r3, r7, #7
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 80050d0:	4bda      	ldr	r3, [pc, #872]	@ (800543c <ESP_Upkeep+0x378>)
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	4bda      	ldr	r3, [pc, #872]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d01f      	beq.n	800511c <ESP_Upkeep+0x58>
    oldEspState = EspState;
 80050dc:	4bd7      	ldr	r3, [pc, #860]	@ (800543c <ESP_Upkeep+0x378>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	4bd7      	ldr	r3, [pc, #860]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050e2:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80050e4:	4bd6      	ldr	r3, [pc, #856]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d103      	bne.n	80050f4 <ESP_Upkeep+0x30>
 80050ec:	4bd5      	ldr	r3, [pc, #852]	@ (8005444 <ESP_Upkeep+0x380>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b0e      	cmp	r3, #14
 80050f2:	d013      	beq.n	800511c <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80050f4:	4bd2      	ldr	r3, [pc, #840]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	001d      	movs	r5, r3
 80050fa:	4bd2      	ldr	r3, [pc, #840]	@ (8005444 <ESP_Upkeep+0x380>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	0018      	movs	r0, r3
 8005100:	4bd1      	ldr	r3, [pc, #836]	@ (8005448 <ESP_Upkeep+0x384>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	001c      	movs	r4, r3
 8005106:	4bd1      	ldr	r3, [pc, #836]	@ (800544c <ESP_Upkeep+0x388>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4ad1      	ldr	r2, [pc, #836]	@ (8005450 <ESP_Upkeep+0x38c>)
 800510c:	49d1      	ldr	r1, [pc, #836]	@ (8005454 <ESP_Upkeep+0x390>)
 800510e:	9302      	str	r3, [sp, #8]
 8005110:	9401      	str	r4, [sp, #4]
 8005112:	9000      	str	r0, [sp, #0]
 8005114:	002b      	movs	r3, r5
 8005116:	2003      	movs	r0, #3
 8005118:	f007 fb1c 	bl	800c754 <CreateLine>
    }
  }

  switch (EspState) {
 800511c:	4bc7      	ldr	r3, [pc, #796]	@ (800543c <ESP_Upkeep+0x378>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b0f      	cmp	r3, #15
 8005122:	d900      	bls.n	8005126 <ESP_Upkeep+0x62>
 8005124:	e355      	b.n	80057d2 <ESP_Upkeep+0x70e>
 8005126:	009a      	lsls	r2, r3, #2
 8005128:	4bcb      	ldr	r3, [pc, #812]	@ (8005458 <ESP_Upkeep+0x394>)
 800512a:	18d3      	adds	r3, r2, r3
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005130:	4bc2      	ldr	r3, [pc, #776]	@ (800543c <ESP_Upkeep+0x378>)
 8005132:	2201      	movs	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
      break;
 8005136:	f000 fba4 	bl	8005882 <ESP_Upkeep+0x7be>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 800513a:	4bc8      	ldr	r3, [pc, #800]	@ (800545c <ESP_Upkeep+0x398>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	4053      	eors	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d036      	beq.n	80051b6 <ESP_Upkeep+0xf2>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005148:	2380      	movs	r3, #128	@ 0x80
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	48c4      	ldr	r0, [pc, #784]	@ (8005460 <ESP_Upkeep+0x39c>)
 800514e:	2200      	movs	r2, #0
 8005150:	0019      	movs	r1, r3
 8005152:	f009 f8fa 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005156:	2001      	movs	r0, #1
 8005158:	f007 fea2 	bl	800cea0 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	48bf      	ldr	r0, [pc, #764]	@ (8005460 <ESP_Upkeep+0x39c>)
 8005162:	2201      	movs	r2, #1
 8005164:	0019      	movs	r1, r3
 8005166:	f009 f8f0 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800516a:	2001      	movs	r0, #1
 800516c:	f007 fe98 	bl	800cea0 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005170:	4bbc      	ldr	r3, [pc, #752]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005172:	2200      	movs	r2, #0
 8005174:	2101      	movs	r1, #1
 8005176:	0018      	movs	r0, r3
 8005178:	f009 f8e7 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800517c:	2001      	movs	r0, #1
 800517e:	f007 fe8f 	bl	800cea0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005182:	4bb8      	ldr	r3, [pc, #736]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005184:	2201      	movs	r2, #1
 8005186:	2102      	movs	r1, #2
 8005188:	0018      	movs	r0, r3
 800518a:	f009 f8de 	bl	800e34a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800518e:	2001      	movs	r0, #1
 8005190:	f007 fe86 	bl	800cea0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005194:	4bb3      	ldr	r3, [pc, #716]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005196:	2201      	movs	r2, #1
 8005198:	2101      	movs	r1, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f009 f8d5 	bl	800e34a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80051a0:	f007 fe74 	bl	800ce8c <HAL_GetTick>
 80051a4:	0003      	movs	r3, r0
 80051a6:	22af      	movs	r2, #175	@ 0xaf
 80051a8:	0092      	lsls	r2, r2, #2
 80051aa:	189a      	adds	r2, r3, r2
 80051ac:	4bae      	ldr	r3, [pc, #696]	@ (8005468 <ESP_Upkeep+0x3a4>)
 80051ae:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80051b0:	4baa      	ldr	r3, [pc, #680]	@ (800545c <ESP_Upkeep+0x398>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	005a      	lsls	r2, r3, #1
 80051ba:	4bac      	ldr	r3, [pc, #688]	@ (800546c <ESP_Upkeep+0x3a8>)
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f7fe fc22 	bl	8003a08 <ESP_Receive>
 80051c4:	1e03      	subs	r3, r0, #0
 80051c6:	d100      	bne.n	80051ca <ESP_Upkeep+0x106>
 80051c8:	e30f      	b.n	80057ea <ESP_Upkeep+0x726>
        EspState = ESP_STATE_WAIT_AWAKE;
 80051ca:	4b9c      	ldr	r3, [pc, #624]	@ (800543c <ESP_Upkeep+0x378>)
 80051cc:	220f      	movs	r2, #15
 80051ce:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80051d0:	f007 fe5c 	bl	800ce8c <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	22fa      	movs	r2, #250	@ 0xfa
 80051d8:	00d2      	lsls	r2, r2, #3
 80051da:	189a      	adds	r2, r3, r2
 80051dc:	4ba4      	ldr	r3, [pc, #656]	@ (8005470 <ESP_Upkeep+0x3ac>)
 80051de:	601a      	str	r2, [r3, #0]
      }
      break;
 80051e0:	e303      	b.n	80057ea <ESP_Upkeep+0x726>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7ff fb3e 	bl	8004864 <DMA_ProcessBuffer>
 80051e8:	0003      	movs	r3, r0
 80051ea:	001a      	movs	r2, r3
 80051ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005474 <ESP_Upkeep+0x3b0>)
 80051ee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80051f0:	4ba0      	ldr	r3, [pc, #640]	@ (8005474 <ESP_Upkeep+0x3b0>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	1dbc      	adds	r4, r7, #6
 80051f6:	2101      	movs	r1, #1
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7ff fc45 	bl	8004a88 <ATCompare>
 80051fe:	0003      	movs	r3, r0
 8005200:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005202:	1dbb      	adds	r3, r7, #6
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <ESP_Upkeep+0x156>
 800520a:	4b99      	ldr	r3, [pc, #612]	@ (8005470 <ESP_Upkeep+0x3ac>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	0018      	movs	r0, r3
 8005210:	f007 fa4a 	bl	800c6a8 <TimestampIsReached>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d100      	bne.n	800521a <ESP_Upkeep+0x156>
 8005218:	e2e9      	b.n	80057ee <ESP_Upkeep+0x72a>
          EspState = ESP_STATE_MODE_SELECT;
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <ESP_Upkeep+0x378>)
 800521c:	220b      	movs	r2, #11
 800521e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005220:	e2e5      	b.n	80057ee <ESP_Upkeep+0x72a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005222:	4b95      	ldr	r3, [pc, #596]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005224:	2209      	movs	r2, #9
 8005226:	2114      	movs	r1, #20
 8005228:	0018      	movs	r0, r3
 800522a:	f018 fdc3 	bl	801ddb4 <memset>
      if(!InitIsDone || WifiReset){
 800522e:	4b93      	ldr	r3, [pc, #588]	@ (800547c <ESP_Upkeep+0x3b8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	4053      	eors	r3, r2
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <ESP_Upkeep+0x180>
 800523c:	4b90      	ldr	r3, [pc, #576]	@ (8005480 <ESP_Upkeep+0x3bc>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01a      	beq.n	800527a <ESP_Upkeep+0x1b6>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005244:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005246:	4a8f      	ldr	r2, [pc, #572]	@ (8005484 <ESP_Upkeep+0x3c0>)
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	6019      	str	r1, [r3, #0]
 800524c:	8891      	ldrh	r1, [r2, #4]
 800524e:	8099      	strh	r1, [r3, #4]
 8005250:	7992      	ldrb	r2, [r2, #6]
 8005252:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005254:	4b79      	ldr	r3, [pc, #484]	@ (800543c <ESP_Upkeep+0x378>)
 8005256:	2204      	movs	r2, #4
 8005258:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800525a:	4b8b      	ldr	r3, [pc, #556]	@ (8005488 <ESP_Upkeep+0x3c4>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005260:	4b79      	ldr	r3, [pc, #484]	@ (8005448 <ESP_Upkeep+0x384>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005266:	4b88      	ldr	r3, [pc, #544]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	001a      	movs	r2, r3
 800526c:	4b82      	ldr	r3, [pc, #520]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800526e:	5c9a      	ldrb	r2, [r3, r2]
 8005270:	4b74      	ldr	r3, [pc, #464]	@ (8005444 <ESP_Upkeep+0x380>)
 8005272:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005274:	4b75      	ldr	r3, [pc, #468]	@ (800544c <ESP_Upkeep+0x388>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800527a:	4b80      	ldr	r3, [pc, #512]	@ (800547c <ESP_Upkeep+0x3b8>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01f      	beq.n	80052c2 <ESP_Upkeep+0x1fe>
 8005282:	4b82      	ldr	r3, [pc, #520]	@ (800548c <ESP_Upkeep+0x3c8>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	4053      	eors	r3, r2
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <ESP_Upkeep+0x1fe>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005290:	4b79      	ldr	r3, [pc, #484]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005292:	4a7f      	ldr	r2, [pc, #508]	@ (8005490 <ESP_Upkeep+0x3cc>)
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	6019      	str	r1, [r3, #0]
 8005298:	8892      	ldrh	r2, [r2, #4]
 800529a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800529c:	4b67      	ldr	r3, [pc, #412]	@ (800543c <ESP_Upkeep+0x378>)
 800529e:	2204      	movs	r2, #4
 80052a0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052a2:	4b79      	ldr	r3, [pc, #484]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80052a8:	4b67      	ldr	r3, [pc, #412]	@ (8005448 <ESP_Upkeep+0x384>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80052ae:	4b76      	ldr	r3, [pc, #472]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	001a      	movs	r2, r3
 80052b4:	4b70      	ldr	r3, [pc, #448]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80052b6:	5c9a      	ldrb	r2, [r3, r2]
 80052b8:	4b62      	ldr	r3, [pc, #392]	@ (8005444 <ESP_Upkeep+0x380>)
 80052ba:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80052bc:	4b63      	ldr	r3, [pc, #396]	@ (800544c <ESP_Upkeep+0x388>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80052c2:	4b6e      	ldr	r3, [pc, #440]	@ (800547c <ESP_Upkeep+0x3b8>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d021      	beq.n	800530e <ESP_Upkeep+0x24a>
 80052ca:	4b70      	ldr	r3, [pc, #448]	@ (800548c <ESP_Upkeep+0x3c8>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01d      	beq.n	800530e <ESP_Upkeep+0x24a>
 80052d2:	4b70      	ldr	r3, [pc, #448]	@ (8005494 <ESP_Upkeep+0x3d0>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2201      	movs	r2, #1
 80052d8:	4053      	eors	r3, r2
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d016      	beq.n	800530e <ESP_Upkeep+0x24a>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80052e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005498 <ESP_Upkeep+0x3d4>)
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	4b64      	ldr	r3, [pc, #400]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80052e6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80052e8:	4b54      	ldr	r3, [pc, #336]	@ (800543c <ESP_Upkeep+0x378>)
 80052ea:	2204      	movs	r2, #4
 80052ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052ee:	4b66      	ldr	r3, [pc, #408]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80052f4:	4b54      	ldr	r3, [pc, #336]	@ (8005448 <ESP_Upkeep+0x384>)
 80052f6:	2204      	movs	r2, #4
 80052f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80052fa:	4b63      	ldr	r3, [pc, #396]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	001a      	movs	r2, r3
 8005300:	4b5d      	ldr	r3, [pc, #372]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005302:	5c9a      	ldrb	r2, [r3, r2]
 8005304:	4b4f      	ldr	r3, [pc, #316]	@ (8005444 <ESP_Upkeep+0x380>)
 8005306:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <ESP_Upkeep+0x388>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800530e:	4b5b      	ldr	r3, [pc, #364]	@ (800547c <ESP_Upkeep+0x3b8>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d02e      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 8005316:	4b5d      	ldr	r3, [pc, #372]	@ (800548c <ESP_Upkeep+0x3c8>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 800531e:	4b5d      	ldr	r3, [pc, #372]	@ (8005494 <ESP_Upkeep+0x3d0>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d026      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 8005326:	4b5d      	ldr	r3, [pc, #372]	@ (800549c <ESP_Upkeep+0x3d8>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4053      	eors	r3, r2
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01f      	beq.n	8005374 <ESP_Upkeep+0x2b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005334:	4b50      	ldr	r3, [pc, #320]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005336:	4a5a      	ldr	r2, [pc, #360]	@ (80054a0 <ESP_Upkeep+0x3dc>)
 8005338:	8811      	ldrh	r1, [r2, #0]
 800533a:	8019      	strh	r1, [r3, #0]
 800533c:	7892      	ldrb	r2, [r2, #2]
 800533e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005340:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <ESP_Upkeep+0x378>)
 8005342:	2204      	movs	r2, #4
 8005344:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005346:	4b50      	ldr	r3, [pc, #320]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800534c:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <ESP_Upkeep+0x384>)
 800534e:	2202      	movs	r2, #2
 8005350:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005352:	f007 fd9b 	bl	800ce8c <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	4b52      	ldr	r3, [pc, #328]	@ (80054a4 <ESP_Upkeep+0x3e0>)
 800535a:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800535c:	f006 fb6a 	bl	800ba34 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005360:	4b49      	ldr	r3, [pc, #292]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	001a      	movs	r2, r3
 8005366:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005368:	5c9a      	ldrb	r2, [r3, r2]
 800536a:	4b36      	ldr	r3, [pc, #216]	@ (8005444 <ESP_Upkeep+0x380>)
 800536c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800536e:	4b37      	ldr	r3, [pc, #220]	@ (800544c <ESP_Upkeep+0x388>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005374:	4b4c      	ldr	r3, [pc, #304]	@ (80054a8 <ESP_Upkeep+0x3e4>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01a      	beq.n	80053b2 <ESP_Upkeep+0x2ee>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800537c:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800537e:	4a4b      	ldr	r2, [pc, #300]	@ (80054ac <ESP_Upkeep+0x3e8>)
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	6019      	str	r1, [r3, #0]
 8005384:	7912      	ldrb	r2, [r2, #4]
 8005386:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005388:	4b2c      	ldr	r3, [pc, #176]	@ (800543c <ESP_Upkeep+0x378>)
 800538a:	2204      	movs	r2, #4
 800538c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800538e:	4b3e      	ldr	r3, [pc, #248]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005394:	4b2c      	ldr	r3, [pc, #176]	@ (8005448 <ESP_Upkeep+0x384>)
 8005396:	2203      	movs	r2, #3
 8005398:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800539a:	f006 fb4b 	bl	800ba34 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800539e:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	001a      	movs	r2, r3
 80053a4:	4b34      	ldr	r3, [pc, #208]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80053a6:	5c9a      	ldrb	r2, [r3, r2]
 80053a8:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <ESP_Upkeep+0x380>)
 80053aa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053ac:	4b27      	ldr	r3, [pc, #156]	@ (800544c <ESP_Upkeep+0x388>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80053b2:	4b32      	ldr	r3, [pc, #200]	@ (800547c <ESP_Upkeep+0x3b8>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d100      	bne.n	80053bc <ESP_Upkeep+0x2f8>
 80053ba:	e21a      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053bc:	4b33      	ldr	r3, [pc, #204]	@ (800548c <ESP_Upkeep+0x3c8>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d100      	bne.n	80053c6 <ESP_Upkeep+0x302>
 80053c4:	e215      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053c6:	4b33      	ldr	r3, [pc, #204]	@ (8005494 <ESP_Upkeep+0x3d0>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d100      	bne.n	80053d0 <ESP_Upkeep+0x30c>
 80053ce:	e210      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053d0:	4b32      	ldr	r3, [pc, #200]	@ (800549c <ESP_Upkeep+0x3d8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d100      	bne.n	80053da <ESP_Upkeep+0x316>
 80053d8:	e20b      	b.n	80057f2 <ESP_Upkeep+0x72e>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80053da:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <ESP_Upkeep+0x3ec>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b26      	ldr	r3, [pc, #152]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80053e0:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80053e2:	4b16      	ldr	r3, [pc, #88]	@ (800543c <ESP_Upkeep+0x378>)
 80053e4:	2204      	movs	r2, #4
 80053e6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053e8:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80053ee:	4b16      	ldr	r3, [pc, #88]	@ (8005448 <ESP_Upkeep+0x384>)
 80053f0:	2205      	movs	r2, #5
 80053f2:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80053f4:	f007 fd4a 	bl	800ce8c <HAL_GetTick>
 80053f8:	0002      	movs	r2, r0
 80053fa:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <ESP_Upkeep+0x3e0>)
 80053fc:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80053fe:	f006 fb19 	bl	800ba34 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005402:	4b21      	ldr	r3, [pc, #132]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	001a      	movs	r2, r3
 8005408:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800540a:	5c9a      	ldrb	r2, [r3, r2]
 800540c:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <ESP_Upkeep+0x380>)
 800540e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005410:	4b0e      	ldr	r3, [pc, #56]	@ (800544c <ESP_Upkeep+0x388>)
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005416:	e1ec      	b.n	80057f2 <ESP_Upkeep+0x72e>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <ESP_Upkeep+0x380>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	1dfc      	adds	r4, r7, #7
 800541e:	0018      	movs	r0, r3
 8005420:	f7ff fb74 	bl	8004b0c <AT_Send>
 8005424:	0003      	movs	r3, r0
 8005426:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005428:	1dfb      	adds	r3, r7, #7
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d100      	bne.n	8005432 <ESP_Upkeep+0x36e>
 8005430:	e1e1      	b.n	80057f6 <ESP_Upkeep+0x732>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005432:	4b02      	ldr	r3, [pc, #8]	@ (800543c <ESP_Upkeep+0x378>)
 8005434:	2203      	movs	r2, #3
 8005436:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005438:	e1dd      	b.n	80057f6 <ESP_Upkeep+0x732>
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	20000028 	.word	0x20000028
 8005440:	20000002 	.word	0x20000002
 8005444:	20000996 	.word	0x20000996
 8005448:	20000997 	.word	0x20000997
 800544c:	20000995 	.word	0x20000995
 8005450:	08021570 	.word	0x08021570
 8005454:	08020ee0 	.word	0x08020ee0
 8005458:	080224cc 	.word	0x080224cc
 800545c:	20000548 	.word	0x20000548
 8005460:	50000800 	.word	0x50000800
 8005464:	50001c00 	.word	0x50001c00
 8005468:	20000988 	.word	0x20000988
 800546c:	20000448 	.word	0x20000448
 8005470:	20000a84 	.word	0x20000a84
 8005474:	2000002a 	.word	0x2000002a
 8005478:	2000097c 	.word	0x2000097c
 800547c:	20000549 	.word	0x20000549
 8005480:	2000054a 	.word	0x2000054a
 8005484:	20000004 	.word	0x20000004
 8005488:	20000986 	.word	0x20000986
 800548c:	2000054c 	.word	0x2000054c
 8005490:	20000014 	.word	0x20000014
 8005494:	2000054d 	.word	0x2000054d
 8005498:	20000010 	.word	0x20000010
 800549c:	20000001 	.word	0x20000001
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	2000055c 	.word	0x2000055c
 80054a8:	2000054b 	.word	0x2000054b
 80054ac:	2000001c 	.word	0x2000001c
 80054b0:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80054b4:	4bd3      	ldr	r3, [pc, #844]	@ (8005804 <ESP_Upkeep+0x740>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f007 f8f5 	bl	800c6a8 <TimestampIsReached>
 80054be:	1e03      	subs	r3, r0, #0
 80054c0:	d100      	bne.n	80054c4 <ESP_Upkeep+0x400>
 80054c2:	e19a      	b.n	80057fa <ESP_Upkeep+0x736>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80054c4:	4bd0      	ldr	r3, [pc, #832]	@ (8005808 <ESP_Upkeep+0x744>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff f9cb 	bl	8004864 <DMA_ProcessBuffer>
 80054ce:	0003      	movs	r3, r0
 80054d0:	001a      	movs	r2, r3
 80054d2:	4bce      	ldr	r3, [pc, #824]	@ (800580c <ESP_Upkeep+0x748>)
 80054d4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80054d6:	4bcd      	ldr	r3, [pc, #820]	@ (800580c <ESP_Upkeep+0x748>)
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	4bcb      	ldr	r3, [pc, #812]	@ (8005808 <ESP_Upkeep+0x744>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	1d7c      	adds	r4, r7, #5
 80054e0:	0019      	movs	r1, r3
 80054e2:	0010      	movs	r0, r2
 80054e4:	f7ff fad0 	bl	8004a88 <ATCompare>
 80054e8:	0003      	movs	r3, r0
 80054ea:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80054ec:	4bc7      	ldr	r3, [pc, #796]	@ (800580c <ESP_Upkeep+0x748>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10f      	bne.n	8005514 <ESP_Upkeep+0x450>
          if(ATCommand == AT_SENDDATA){
 80054f4:	4bc6      	ldr	r3, [pc, #792]	@ (8005810 <ESP_Upkeep+0x74c>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	d108      	bne.n	800550e <ESP_Upkeep+0x44a>
            ATCommand = AT_HTTPCPOST;
 80054fc:	4bc4      	ldr	r3, [pc, #784]	@ (8005810 <ESP_Upkeep+0x74c>)
 80054fe:	220e      	movs	r2, #14
 8005500:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005502:	4bc1      	ldr	r3, [pc, #772]	@ (8005808 <ESP_Upkeep+0x744>)
 8005504:	2202      	movs	r2, #2
 8005506:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005508:	4bc2      	ldr	r3, [pc, #776]	@ (8005814 <ESP_Upkeep+0x750>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800550e:	4bc2      	ldr	r3, [pc, #776]	@ (8005818 <ESP_Upkeep+0x754>)
 8005510:	2204      	movs	r2, #4
 8005512:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005514:	4bbd      	ldr	r3, [pc, #756]	@ (800580c <ESP_Upkeep+0x748>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d106      	bne.n	800552a <ESP_Upkeep+0x466>
          ESPTimeStamp = HAL_GetTick() + 10;
 800551c:	f007 fcb6 	bl	800ce8c <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	330a      	adds	r3, #10
 8005524:	001a      	movs	r2, r3
 8005526:	4bb7      	ldr	r3, [pc, #732]	@ (8005804 <ESP_Upkeep+0x740>)
 8005528:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800552a:	4bb8      	ldr	r3, [pc, #736]	@ (800580c <ESP_Upkeep+0x748>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b0a      	cmp	r3, #10
 8005530:	d106      	bne.n	8005540 <ESP_Upkeep+0x47c>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005532:	f007 fcab 	bl	800ce8c <HAL_GetTick>
 8005536:	0003      	movs	r3, r0
 8005538:	330a      	adds	r3, #10
 800553a:	001a      	movs	r2, r3
 800553c:	4bb1      	ldr	r3, [pc, #708]	@ (8005804 <ESP_Upkeep+0x740>)
 800553e:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005540:	4bb2      	ldr	r3, [pc, #712]	@ (800580c <ESP_Upkeep+0x748>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b06      	cmp	r3, #6
 8005546:	d116      	bne.n	8005576 <ESP_Upkeep+0x4b2>
          if(ATCommand != AT_SENDDATA){
 8005548:	4bb1      	ldr	r3, [pc, #708]	@ (8005810 <ESP_Upkeep+0x74c>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d003      	beq.n	8005558 <ESP_Upkeep+0x494>
            EspState = ESP_STATE_SEND;
 8005550:	4bb1      	ldr	r3, [pc, #708]	@ (8005818 <ESP_Upkeep+0x754>)
 8005552:	2204      	movs	r2, #4
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e00e      	b.n	8005576 <ESP_Upkeep+0x4b2>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005558:	4bad      	ldr	r3, [pc, #692]	@ (8005810 <ESP_Upkeep+0x74c>)
 800555a:	220e      	movs	r2, #14
 800555c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800555e:	4bad      	ldr	r3, [pc, #692]	@ (8005814 <ESP_Upkeep+0x750>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4bab      	ldr	r3, [pc, #684]	@ (8005814 <ESP_Upkeep+0x750>)
 8005568:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800556a:	4ba7      	ldr	r3, [pc, #668]	@ (8005808 <ESP_Upkeep+0x744>)
 800556c:	2202      	movs	r2, #2
 800556e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005570:	4ba9      	ldr	r3, [pc, #676]	@ (8005818 <ESP_Upkeep+0x754>)
 8005572:	2204      	movs	r2, #4
 8005574:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005576:	1d7b      	adds	r3, r7, #5
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d100      	bne.n	8005580 <ESP_Upkeep+0x4bc>
 800557e:	e13c      	b.n	80057fa <ESP_Upkeep+0x736>
          EspState = ESP_STATE_NEXT_AT;
 8005580:	4ba5      	ldr	r3, [pc, #660]	@ (8005818 <ESP_Upkeep+0x754>)
 8005582:	2205      	movs	r2, #5
 8005584:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005586:	e138      	b.n	80057fa <ESP_Upkeep+0x736>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005588:	4ba2      	ldr	r3, [pc, #648]	@ (8005814 <ESP_Upkeep+0x750>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4ba0      	ldr	r3, [pc, #640]	@ (8005814 <ESP_Upkeep+0x750>)
 8005592:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005594:	4b9f      	ldr	r3, [pc, #636]	@ (8005814 <ESP_Upkeep+0x750>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	001a      	movs	r2, r3
 800559a:	4ba0      	ldr	r3, [pc, #640]	@ (800581c <ESP_Upkeep+0x758>)
 800559c:	5c9a      	ldrb	r2, [r3, r2]
 800559e:	4b9c      	ldr	r3, [pc, #624]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055a0:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80055a2:	4b9b      	ldr	r3, [pc, #620]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d102      	bne.n	80055b0 <ESP_Upkeep+0x4ec>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80055aa:	4b97      	ldr	r3, [pc, #604]	@ (8005808 <ESP_Upkeep+0x744>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80055b0:	4b97      	ldr	r3, [pc, #604]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b0e      	cmp	r3, #14
 80055b6:	d102      	bne.n	80055be <ESP_Upkeep+0x4fa>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80055b8:	4b93      	ldr	r3, [pc, #588]	@ (8005808 <ESP_Upkeep+0x744>)
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80055be:	4b94      	ldr	r3, [pc, #592]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b0e      	cmp	r3, #14
 80055c4:	d006      	beq.n	80055d4 <ESP_Upkeep+0x510>
 80055c6:	4b92      	ldr	r3, [pc, #584]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d002      	beq.n	80055d4 <ESP_Upkeep+0x510>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005808 <ESP_Upkeep+0x744>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80055d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b11      	cmp	r3, #17
 80055da:	d102      	bne.n	80055e2 <ESP_Upkeep+0x51e>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80055dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005808 <ESP_Upkeep+0x744>)
 80055de:	2205      	movs	r2, #5
 80055e0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80055e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005818 <ESP_Upkeep+0x754>)
 80055e4:	2204      	movs	r2, #4
 80055e6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80055e8:	4b89      	ldr	r3, [pc, #548]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b14      	cmp	r3, #20
 80055ee:	d000      	beq.n	80055f2 <ESP_Upkeep+0x52e>
 80055f0:	e105      	b.n	80057fe <ESP_Upkeep+0x73a>
        if(Mode == AT_MODE_SEND){
 80055f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005820 <ESP_Upkeep+0x75c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d11d      	bne.n	8005636 <ESP_Upkeep+0x572>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80055fa:	f007 fc47 	bl	800ce8c <HAL_GetTick>
 80055fe:	0003      	movs	r3, r0
 8005600:	4a88      	ldr	r2, [pc, #544]	@ (8005824 <ESP_Upkeep+0x760>)
 8005602:	189a      	adds	r2, r3, r2
 8005604:	4b7f      	ldr	r3, [pc, #508]	@ (8005804 <ESP_Upkeep+0x740>)
 8005606:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005608:	f006 fa2c 	bl	800ba64 <ResetESPIndicator>
          clearDMABuffer();
 800560c:	f7ff fa2e 	bl	8004a6c <clearDMABuffer>
          stop = HAL_GetTick();
 8005610:	f007 fc3c 	bl	800ce8c <HAL_GetTick>
 8005614:	0002      	movs	r2, r0
 8005616:	4b84      	ldr	r3, [pc, #528]	@ (8005828 <ESP_Upkeep+0x764>)
 8005618:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 800561a:	4b83      	ldr	r3, [pc, #524]	@ (8005828 <ESP_Upkeep+0x764>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b83      	ldr	r3, [pc, #524]	@ (800582c <ESP_Upkeep+0x768>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a82      	ldr	r2, [pc, #520]	@ (8005830 <ESP_Upkeep+0x76c>)
 8005626:	4983      	ldr	r1, [pc, #524]	@ (8005834 <ESP_Upkeep+0x770>)
 8005628:	2003      	movs	r0, #3
 800562a:	f007 f893 	bl	800c754 <CreateLine>
          EspState = ESP_STATE_DEINIT;
 800562e:	4b7a      	ldr	r3, [pc, #488]	@ (8005818 <ESP_Upkeep+0x754>)
 8005630:	220d      	movs	r2, #13
 8005632:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005634:	e0e3      	b.n	80057fe <ESP_Upkeep+0x73a>
        else if (Mode == AT_MODE_GETTIME) {
 8005636:	4b7a      	ldr	r3, [pc, #488]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b05      	cmp	r3, #5
 800563c:	d12e      	bne.n	800569c <ESP_Upkeep+0x5d8>
            setTime = false;
 800563e:	4b7e      	ldr	r3, [pc, #504]	@ (8005838 <ESP_Upkeep+0x774>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 8005644:	f007 fc22 	bl	800ce8c <HAL_GetTick>
 8005648:	0003      	movs	r3, r0
 800564a:	4a7c      	ldr	r2, [pc, #496]	@ (800583c <ESP_Upkeep+0x778>)
 800564c:	189a      	adds	r2, r3, r2
 800564e:	4b7c      	ldr	r3, [pc, #496]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005650:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005652:	4b7b      	ldr	r3, [pc, #492]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7b      	ldr	r2, [pc, #492]	@ (8005844 <ESP_Upkeep+0x780>)
 8005658:	4976      	ldr	r1, [pc, #472]	@ (8005834 <ESP_Upkeep+0x770>)
 800565a:	2003      	movs	r0, #3
 800565c:	f007 f87a 	bl	800c754 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005660:	4b79      	ldr	r3, [pc, #484]	@ (8005848 <ESP_Upkeep+0x784>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b67      	ldr	r3, [pc, #412]	@ (8005804 <ESP_Upkeep+0x740>)
 8005666:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005668:	f006 f9fc 	bl	800ba64 <ResetESPIndicator>
            clearDMABuffer();
 800566c:	f7ff f9fe 	bl	8004a6c <clearDMABuffer>
            stop = HAL_GetTick();
 8005670:	f007 fc0c 	bl	800ce8c <HAL_GetTick>
 8005674:	0002      	movs	r2, r0
 8005676:	4b6c      	ldr	r3, [pc, #432]	@ (8005828 <ESP_Upkeep+0x764>)
 8005678:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 800567a:	4b6b      	ldr	r3, [pc, #428]	@ (8005828 <ESP_Upkeep+0x764>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b6b      	ldr	r3, [pc, #428]	@ (800582c <ESP_Upkeep+0x768>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	4a71      	ldr	r2, [pc, #452]	@ (800584c <ESP_Upkeep+0x788>)
 8005686:	496b      	ldr	r1, [pc, #428]	@ (8005834 <ESP_Upkeep+0x770>)
 8005688:	2003      	movs	r0, #3
 800568a:	f007 f863 	bl	800c754 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800568e:	4b62      	ldr	r3, [pc, #392]	@ (8005818 <ESP_Upkeep+0x754>)
 8005690:	220d      	movs	r2, #13
 8005692:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005694:	4b62      	ldr	r3, [pc, #392]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005696:	2202      	movs	r2, #2
 8005698:	701a      	strb	r2, [r3, #0]
    break;
 800569a:	e0b0      	b.n	80057fe <ESP_Upkeep+0x73a>
          EspState = ESP_STATE_RESET;
 800569c:	4b5e      	ldr	r3, [pc, #376]	@ (8005818 <ESP_Upkeep+0x754>)
 800569e:	2209      	movs	r2, #9
 80056a0:	701a      	strb	r2, [r3, #0]
    break;
 80056a2:	e0ac      	b.n	80057fe <ESP_Upkeep+0x73a>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80056a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <ESP_Upkeep+0x78c>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80056aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005854 <ESP_Upkeep+0x790>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	0018      	movs	r0, r3
 80056b2:	f008 fe4a 	bl	800e34a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80056b6:	2001      	movs	r0, #1
 80056b8:	f007 fbf2 	bl	800cea0 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80056bc:	2380      	movs	r3, #128	@ 0x80
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	4865      	ldr	r0, [pc, #404]	@ (8005858 <ESP_Upkeep+0x794>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	0019      	movs	r1, r3
 80056c6:	f008 fe40 	bl	800e34a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80056ca:	2001      	movs	r0, #1
 80056cc:	f007 fbe8 	bl	800cea0 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80056d0:	4b60      	ldr	r3, [pc, #384]	@ (8005854 <ESP_Upkeep+0x790>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	2102      	movs	r1, #2
 80056d6:	0018      	movs	r0, r3
 80056d8:	f008 fe37 	bl	800e34a <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80056dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005818 <ESP_Upkeep+0x754>)
 80056de:	2209      	movs	r2, #9
 80056e0:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80056e2:	2001      	movs	r0, #1
 80056e4:	f007 fbdc 	bl	800cea0 <HAL_Delay>
      break;
 80056e8:	e0cb      	b.n	8005882 <ESP_Upkeep+0x7be>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80056ea:	4b46      	ldr	r3, [pc, #280]	@ (8005804 <ESP_Upkeep+0x740>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0018      	movs	r0, r3
 80056f0:	f006 ffda 	bl	800c6a8 <TimestampIsReached>
 80056f4:	1e03      	subs	r3, r0, #0
 80056f6:	d103      	bne.n	8005700 <ESP_Upkeep+0x63c>
 80056f8:	4b58      	ldr	r3, [pc, #352]	@ (800585c <ESP_Upkeep+0x798>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02f      	beq.n	8005760 <ESP_Upkeep+0x69c>
        if(Mode == AT_MODE_INIT){
 8005700:	4b47      	ldr	r3, [pc, #284]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <ESP_Upkeep+0x650>
          InitIsDone = true;
 8005708:	4b55      	ldr	r3, [pc, #340]	@ (8005860 <ESP_Upkeep+0x79c>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800570e:	4b42      	ldr	r3, [pc, #264]	@ (8005818 <ESP_Upkeep+0x754>)
 8005710:	220b      	movs	r2, #11
 8005712:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005714:	4b42      	ldr	r3, [pc, #264]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <ESP_Upkeep+0x66a>
          ConnectionMade = true;
 800571c:	4b51      	ldr	r3, [pc, #324]	@ (8005864 <ESP_Upkeep+0x7a0>)
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005722:	4b51      	ldr	r3, [pc, #324]	@ (8005868 <ESP_Upkeep+0x7a4>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <ESP_Upkeep+0x754>)
 800572a:	220b      	movs	r2, #11
 800572c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800572e:	4b3c      	ldr	r3, [pc, #240]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d102      	bne.n	800573c <ESP_Upkeep+0x678>
          EspState = ESP_STATE_INIT;
 8005736:	4b38      	ldr	r3, [pc, #224]	@ (8005818 <ESP_Upkeep+0x754>)
 8005738:	2202      	movs	r2, #2
 800573a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800573c:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <ESP_Upkeep+0x75c>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d102      	bne.n	800574a <ESP_Upkeep+0x686>
          EspState = ESP_STATE_CONFIG;
 8005744:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <ESP_Upkeep+0x754>)
 8005746:	220e      	movs	r2, #14
 8005748:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 800574a:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <ESP_Upkeep+0x75c>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d127      	bne.n	80057a2 <ESP_Upkeep+0x6de>
          EspState = ESP_STATE_MODE_SELECT;
 8005752:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <ESP_Upkeep+0x754>)
 8005754:	220b      	movs	r2, #11
 8005756:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005758:	4b44      	ldr	r3, [pc, #272]	@ (800586c <ESP_Upkeep+0x7a8>)
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 800575e:	e020      	b.n	80057a2 <ESP_Upkeep+0x6de>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005760:	4b37      	ldr	r3, [pc, #220]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	0018      	movs	r0, r3
 8005766:	f006 ff9f 	bl	800c6a8 <TimestampIsReached>
 800576a:	1e03      	subs	r3, r0, #0
 800576c:	d100      	bne.n	8005770 <ESP_Upkeep+0x6ac>
 800576e:	e087      	b.n	8005880 <ESP_Upkeep+0x7bc>
        if(Mode == AT_MODE_SEND ) {
 8005770:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d000      	beq.n	800577a <ESP_Upkeep+0x6b6>
 8005778:	e082      	b.n	8005880 <ESP_Upkeep+0x7bc>
            Mode = AT_MODE_GETTIME;
 800577a:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <ESP_Upkeep+0x75c>)
 800577c:	2205      	movs	r2, #5
 800577e:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005780:	4b25      	ldr	r3, [pc, #148]	@ (8005818 <ESP_Upkeep+0x754>)
 8005782:	2202      	movs	r2, #2
 8005784:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005786:	4b1f      	ldr	r3, [pc, #124]	@ (8005804 <ESP_Upkeep+0x740>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b2f      	ldr	r3, [pc, #188]	@ (8005848 <ESP_Upkeep+0x784>)
 800578c:	601a      	str	r2, [r3, #0]
         setTime = true;
 800578e:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <ESP_Upkeep+0x774>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005794:	4a36      	ldr	r2, [pc, #216]	@ (8005870 <ESP_Upkeep+0x7ac>)
 8005796:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <ESP_Upkeep+0x770>)
 8005798:	0019      	movs	r1, r3
 800579a:	2003      	movs	r0, #3
 800579c:	f006 ffda 	bl	800c754 <CreateLine>
        }
      }
      break;
 80057a0:	e06e      	b.n	8005880 <ESP_Upkeep+0x7bc>
 80057a2:	e06d      	b.n	8005880 <ESP_Upkeep+0x7bc>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 80057a4:	4a33      	ldr	r2, [pc, #204]	@ (8005874 <ESP_Upkeep+0x7b0>)
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <ESP_Upkeep+0x770>)
 80057a8:	0019      	movs	r1, r3
 80057aa:	2003      	movs	r0, #3
 80057ac:	f006 ffd2 	bl	800c754 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 80057b0:	f015 f9e8 	bl	801ab84 <GetUsbRxPointer>
 80057b4:	0003      	movs	r3, r0
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f8de 	bl	8005978 <Process_PC_Config>
      break;
 80057bc:	e061      	b.n	8005882 <ESP_Upkeep+0x7be>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80057be:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <ESP_Upkeep+0x7b4>)
 80057c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005834 <ESP_Upkeep+0x770>)
 80057c2:	0019      	movs	r1, r3
 80057c4:	2003      	movs	r0, #3
 80057c6:	f006 ffc5 	bl	800c754 <CreateLine>
      EspState = ESP_STATE_INIT;
 80057ca:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <ESP_Upkeep+0x754>)
 80057cc:	2202      	movs	r2, #2
 80057ce:	701a      	strb	r2, [r3, #0]
      break;
 80057d0:	e057      	b.n	8005882 <ESP_Upkeep+0x7be>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 80057d2:	4a2a      	ldr	r2, [pc, #168]	@ (800587c <ESP_Upkeep+0x7b8>)
 80057d4:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <ESP_Upkeep+0x770>)
 80057d6:	0019      	movs	r1, r3
 80057d8:	2003      	movs	r0, #3
 80057da:	f006 ffbb 	bl	800c754 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <ESP_Upkeep+0x754>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	701a      	strb	r2, [r3, #0]
      break;
 80057e4:	e04d      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	e04b      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	e049      	b.n	8005882 <ESP_Upkeep+0x7be>
        break;
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	e047      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	e045      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	e043      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057fa:	46c0      	nop			@ (mov r8, r8)
 80057fc:	e041      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	e03f      	b.n	8005882 <ESP_Upkeep+0x7be>
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	20000988 	.word	0x20000988
 8005808:	20000995 	.word	0x20000995
 800580c:	2000002a 	.word	0x2000002a
 8005810:	20000996 	.word	0x20000996
 8005814:	20000986 	.word	0x20000986
 8005818:	20000028 	.word	0x20000028
 800581c:	2000097c 	.word	0x2000097c
 8005820:	20000997 	.word	0x20000997
 8005824:	000493e0 	.word	0x000493e0
 8005828:	20000560 	.word	0x20000560
 800582c:	2000055c 	.word	0x2000055c
 8005830:	0802159c 	.word	0x0802159c
 8005834:	08020ee0 	.word	0x08020ee0
 8005838:	20000001 	.word	0x20000001
 800583c:	002c4020 	.word	0x002c4020
 8005840:	2000098c 	.word	0x2000098c
 8005844:	080215b4 	.word	0x080215b4
 8005848:	20000990 	.word	0x20000990
 800584c:	080215f8 	.word	0x080215f8
 8005850:	20000548 	.word	0x20000548
 8005854:	50001c00 	.word	0x50001c00
 8005858:	50000800 	.word	0x50000800
 800585c:	2000054b 	.word	0x2000054b
 8005860:	20000549 	.word	0x20000549
 8005864:	2000054c 	.word	0x2000054c
 8005868:	2000054e 	.word	0x2000054e
 800586c:	2000054d 	.word	0x2000054d
 8005870:	08021618 	.word	0x08021618
 8005874:	08021628 	.word	0x08021628
 8005878:	08021640 	.word	0x08021640
 800587c:	08021654 	.word	0x08021654
      break;
 8005880:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005882:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <ESP_Upkeep+0x7cc>)
 8005884:	781b      	ldrb	r3, [r3, #0]
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bdb0      	pop	{r4, r5, r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	20000028 	.word	0x20000028

08005894 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <I2CSensors_Init+0x30>)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80058a2:	4a09      	ldr	r2, [pc, #36]	@ (80058c8 <I2CSensors_Init+0x34>)
 80058a4:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <I2CSensors_Init+0x38>)
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f001 f985 	bl	8006bb8 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80058ae:	4a06      	ldr	r2, [pc, #24]	@ (80058c8 <I2CSensors_Init+0x34>)
 80058b0:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <I2CSensors_Init+0x38>)
 80058b2:	0011      	movs	r1, r2
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 ffef 	bl	8006898 <Gas_Init>
}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	20000a88 	.word	0x20000a88
 80058c8:	08005925 	.word	0x08005925
 80058cc:	080058d1 	.word	0x080058d1

080058d0 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80058d0:	b5b0      	push	{r4, r5, r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6039      	str	r1, [r7, #0]
 80058d8:	0011      	movs	r1, r2
 80058da:	1dfb      	adds	r3, r7, #7
 80058dc:	1c02      	adds	r2, r0, #0
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	1dbb      	adds	r3, r7, #6
 80058e2:	1c0a      	adds	r2, r1, #0
 80058e4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80058e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <ReadI2C+0x50>)
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	1dfb      	adds	r3, r7, #7
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	18db      	adds	r3, r3, r3
 80058f2:	b299      	uxth	r1, r3
 80058f4:	1dbb      	adds	r3, r7, #6
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	250f      	movs	r5, #15
 80058fc:	197c      	adds	r4, r7, r5
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	f009 f8ec 	bl	800eadc <HAL_I2C_Master_Receive_DMA>
 8005904:	0003      	movs	r3, r0
 8005906:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005908:	197b      	adds	r3, r7, r5
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <ReadI2C+0x44>
        return false;
 8005910:	2300      	movs	r3, #0
 8005912:	e000      	b.n	8005916 <ReadI2C+0x46>
    }
    return true;
 8005914:	2301      	movs	r3, #1
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bdb0      	pop	{r4, r5, r7, pc}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	20000a88 	.word	0x20000a88

08005924 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6039      	str	r1, [r7, #0]
 800592c:	0011      	movs	r1, r2
 800592e:	1dfb      	adds	r3, r7, #7
 8005930:	1c02      	adds	r2, r0, #0
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	1dbb      	adds	r3, r7, #6
 8005936:	1c0a      	adds	r2, r1, #0
 8005938:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800593a:	4b0e      	ldr	r3, [pc, #56]	@ (8005974 <WriteI2C+0x50>)
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	18db      	adds	r3, r3, r3
 8005946:	b299      	uxth	r1, r3
 8005948:	1dbb      	adds	r3, r7, #6
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	250f      	movs	r5, #15
 8005950:	197c      	adds	r4, r7, r5
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	f008 ffbc 	bl	800e8d0 <HAL_I2C_Master_Transmit_DMA>
 8005958:	0003      	movs	r3, r0
 800595a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800595c:	197b      	adds	r3, r7, r5
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <WriteI2C+0x44>
        return false;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <WriteI2C+0x46>
    }
    return true;
 8005968:	2301      	movs	r3, #1
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bdb0      	pop	{r4, r5, r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	20000a88 	.word	0x20000a88

08005978 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b0c3      	sub	sp, #268	@ 0x10c
 800597c:	af3e      	add	r7, sp, #248	@ 0xf8
 800597e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005980:	f015 f920 	bl	801abc4 <GetUsbRxDataSize>
 8005984:	0003      	movs	r3, r0
 8005986:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d971      	bls.n	8005a72 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2123      	movs	r1, #35	@ 0x23
 8005992:	0018      	movs	r0, r3
 8005994:	f018 fa16 	bl	801ddc4 <strchr>
 8005998:	0003      	movs	r3, r0
 800599a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d065      	beq.n	8005a6e <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	785a      	ldrb	r2, [r3, #1]
 80059a6:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <Process_PC_Config+0x100>)
 80059a8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	789a      	ldrb	r2, [r3, #2]
 80059ae:	4b32      	ldr	r3, [pc, #200]	@ (8005a78 <Process_PC_Config+0x100>)
 80059b0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <Process_PC_Config+0x100>)
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	3305      	adds	r3, #5
 80059b8:	001a      	movs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4293      	cmp	r3, r2
 80059be:	d351      	bcc.n	8005a64 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1cd9      	adds	r1, r3, #3
 80059c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005a78 <Process_PC_Config+0x100>)
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	001a      	movs	r2, r3
 80059ca:	4b2c      	ldr	r3, [pc, #176]	@ (8005a7c <Process_PC_Config+0x104>)
 80059cc:	0018      	movs	r0, r3
 80059ce:	f018 facd 	bl	801df6c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80059d2:	4b29      	ldr	r3, [pc, #164]	@ (8005a78 <Process_PC_Config+0x100>)
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	3303      	adds	r3, #3
 80059d8:	001a      	movs	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <Process_PC_Config+0x100>)
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	3304      	adds	r3, #4
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	18cb      	adds	r3, r1, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	b299      	uxth	r1, r3
 80059f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <Process_PC_Config+0x100>)
 80059fa:	2381      	movs	r3, #129	@ 0x81
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005a00:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a02:	2381      	movs	r3, #129	@ 0x81
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	5ad4      	ldrh	r4, [r2, r3]
 8005a08:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	0011      	movs	r1, r2
 8005a14:	0018      	movs	r0, r3
 8005a16:	f000 f975 	bl	8005d04 <CRC16_ARC>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d007      	beq.n	8005a30 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005a20:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a22:	785a      	ldrb	r2, [r3, #1]
 8005a24:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <Process_PC_Config+0x104>)
 8005a26:	0019      	movs	r1, r3
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f000 f919 	bl	8005c60 <Create_Message>
 8005a2e:	e016      	b.n	8005a5e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005a30:	4c11      	ldr	r4, [pc, #68]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a32:	466b      	mov	r3, sp
 8005a34:	0018      	movs	r0, r3
 8005a36:	0023      	movs	r3, r4
 8005a38:	3310      	adds	r3, #16
 8005a3a:	22f4      	movs	r2, #244	@ 0xf4
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	f018 fa95 	bl	801df6c <memcpy>
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	68a2      	ldr	r2, [r4, #8]
 8005a48:	68e3      	ldr	r3, [r4, #12]
 8005a4a:	f000 f819 	bl	8005a80 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a50:	7818      	ldrb	r0, [r3, #0]
 8005a52:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a54:	785a      	ldrb	r2, [r3, #1]
 8005a56:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <Process_PC_Config+0x104>)
 8005a58:	0019      	movs	r1, r3
 8005a5a:	f000 f901 	bl	8005c60 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005a5e:	f015 f899 	bl	801ab94 <ResetUsbRxDataSize>
                return;
 8005a62:	e006      	b.n	8005a72 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f015 f8b6 	bl	801abd8 <GetUsbRxNextChunk>
 8005a6c:	e001      	b.n	8005a72 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005a6e:	f015 f891 	bl	801ab94 <ResetUsbRxDataSize>
        }
    }
}
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b005      	add	sp, #20
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	20000a8c 	.word	0x20000a8c
 8005a7c:	20000a8e 	.word	0x20000a8e

08005a80 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005a80:	b084      	sub	sp, #16
 8005a82:	b5b0      	push	{r4, r5, r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	2518      	movs	r5, #24
 8005a8a:	197c      	adds	r4, r7, r5
 8005a8c:	6020      	str	r0, [r4, #0]
 8005a8e:	6061      	str	r1, [r4, #4]
 8005a90:	60a2      	str	r2, [r4, #8]
 8005a92:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005a94:	197b      	adds	r3, r7, r5
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2bfe      	cmp	r3, #254	@ 0xfe
 8005a9a:	d100      	bne.n	8005a9e <ProcessCmd+0x1e>
 8005a9c:	e09c      	b.n	8005bd8 <ProcessCmd+0x158>
 8005a9e:	dd00      	ble.n	8005aa2 <ProcessCmd+0x22>
 8005aa0:	e0bc      	b.n	8005c1c <ProcessCmd+0x19c>
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	dc0a      	bgt.n	8005abc <ProcessCmd+0x3c>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	da00      	bge.n	8005aac <ProcessCmd+0x2c>
 8005aaa:	e0b7      	b.n	8005c1c <ProcessCmd+0x19c>
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	d900      	bls.n	8005ab2 <ProcessCmd+0x32>
 8005ab0:	e0b4      	b.n	8005c1c <ProcessCmd+0x19c>
 8005ab2:	009a      	lsls	r2, r3, #2
 8005ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c2c <ProcessCmd+0x1ac>)
 8005ab6:	18d3      	adds	r3, r2, r3
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	469f      	mov	pc, r3
 8005abc:	2bfd      	cmp	r3, #253	@ 0xfd
 8005abe:	d100      	bne.n	8005ac2 <ProcessCmd+0x42>
 8005ac0:	e084      	b.n	8005bcc <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005ac2:	e0ab      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ac4:	2118      	movs	r1, #24
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	001a      	movs	r2, r3
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	1c99      	adds	r1, r3, #2
 8005ad0:	4857      	ldr	r0, [pc, #348]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	f7fd fdf4 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ad8:	e0a0      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ada:	2118      	movs	r1, #24
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	001a      	movs	r2, r3
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	1c99      	adds	r1, r3, #2
 8005ae6:	4853      	ldr	r0, [pc, #332]	@ (8005c34 <ProcessCmd+0x1b4>)
 8005ae8:	230c      	movs	r3, #12
 8005aea:	f7fd fde9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005aee:	e095      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005af0:	2118      	movs	r1, #24
 8005af2:	187b      	adds	r3, r7, r1
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	001a      	movs	r2, r3
 8005af8:	187b      	adds	r3, r7, r1
 8005afa:	1c99      	adds	r1, r3, #2
 8005afc:	484e      	ldr	r0, [pc, #312]	@ (8005c38 <ProcessCmd+0x1b8>)
 8005afe:	230c      	movs	r3, #12
 8005b00:	f7fd fdde 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b04:	e08a      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b06:	2118      	movs	r1, #24
 8005b08:	187b      	adds	r3, r7, r1
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	187b      	adds	r3, r7, r1
 8005b10:	1c99      	adds	r1, r3, #2
 8005b12:	484a      	ldr	r0, [pc, #296]	@ (8005c3c <ProcessCmd+0x1bc>)
 8005b14:	230c      	movs	r3, #12
 8005b16:	f7fd fdd3 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b1a:	e07f      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b1c:	2118      	movs	r1, #24
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	001a      	movs	r2, r3
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	1c99      	adds	r1, r3, #2
 8005b28:	4845      	ldr	r0, [pc, #276]	@ (8005c40 <ProcessCmd+0x1c0>)
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f7fd fdc8 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b30:	e074      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b32:	2118      	movs	r1, #24
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	001a      	movs	r2, r3
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	1c99      	adds	r1, r3, #2
 8005b3e:	4841      	ldr	r0, [pc, #260]	@ (8005c44 <ProcessCmd+0x1c4>)
 8005b40:	230c      	movs	r3, #12
 8005b42:	f7fd fdbd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b46:	e069      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b48:	2118      	movs	r1, #24
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	001a      	movs	r2, r3
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	1c99      	adds	r1, r3, #2
 8005b54:	483c      	ldr	r0, [pc, #240]	@ (8005c48 <ProcessCmd+0x1c8>)
 8005b56:	230c      	movs	r3, #12
 8005b58:	f7fd fdb2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b5c:	e05e      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005b5e:	2118      	movs	r1, #24
 8005b60:	187b      	adds	r3, r7, r1
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	001a      	movs	r2, r3
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	1c99      	adds	r1, r3, #2
 8005b6a:	4838      	ldr	r0, [pc, #224]	@ (8005c4c <ProcessCmd+0x1cc>)
 8005b6c:	231e      	movs	r3, #30
 8005b6e:	f7fd fda7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b72:	e053      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b74:	2118      	movs	r1, #24
 8005b76:	187b      	adds	r3, r7, r1
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	187b      	adds	r3, r7, r1
 8005b7e:	1c99      	adds	r1, r3, #2
 8005b80:	4833      	ldr	r0, [pc, #204]	@ (8005c50 <ProcessCmd+0x1d0>)
 8005b82:	230c      	movs	r3, #12
 8005b84:	f7fd fd9c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b88:	e048      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b8a:	2118      	movs	r1, #24
 8005b8c:	187b      	adds	r3, r7, r1
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	001a      	movs	r2, r3
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	1c99      	adds	r1, r3, #2
 8005b96:	482f      	ldr	r0, [pc, #188]	@ (8005c54 <ProcessCmd+0x1d4>)
 8005b98:	230c      	movs	r3, #12
 8005b9a:	f7fd fd91 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b9e:	e03d      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ba0:	2118      	movs	r1, #24
 8005ba2:	187b      	adds	r3, r7, r1
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	187b      	adds	r3, r7, r1
 8005baa:	1c99      	adds	r1, r3, #2
 8005bac:	482a      	ldr	r0, [pc, #168]	@ (8005c58 <ProcessCmd+0x1d8>)
 8005bae:	230c      	movs	r3, #12
 8005bb0:	f7fd fd86 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005bb4:	e032      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005bb6:	2118      	movs	r1, #24
 8005bb8:	187b      	adds	r3, r7, r1
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	1c99      	adds	r1, r3, #2
 8005bc2:	4826      	ldr	r0, [pc, #152]	@ (8005c5c <ProcessCmd+0x1dc>)
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	f7fd fd7b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005bca:	e027      	b.n	8005c1c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005bcc:	4b18      	ldr	r3, [pc, #96]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005bce:	21ba      	movs	r1, #186	@ 0xba
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7fd fdba 	bl	800374a <ClearEEprom>
        break;
 8005bd6:	e021      	b.n	8005c1c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005bd8:	2118      	movs	r1, #24
 8005bda:	187b      	adds	r3, r7, r1
 8005bdc:	789b      	ldrb	r3, [r3, #2]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	b21a      	sxth	r2, r3
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	78db      	ldrb	r3, [r3, #3]
 8005be6:	b21b      	sxth	r3, r3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	b21a      	sxth	r2, r3
 8005bec:	1dbb      	adds	r3, r7, #6
 8005bee:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005bf0:	1dbb      	adds	r3, r7, #6
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	23c0      	movs	r3, #192	@ 0xc0
 8005bf6:	015b      	lsls	r3, r3, #5
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d207      	bcs.n	8005c0c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005bfc:	1dbb      	adds	r3, r7, #6
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	4a0b      	ldr	r2, [pc, #44]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005c02:	0019      	movs	r1, r3
 8005c04:	0010      	movs	r0, r2
 8005c06:	f7fd fda0 	bl	800374a <ClearEEprom>
            break;
 8005c0a:	e006      	b.n	8005c1a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005c0c:	23c0      	movs	r3, #192	@ 0xc0
 8005c0e:	015b      	lsls	r3, r3, #5
 8005c10:	4a07      	ldr	r2, [pc, #28]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005c12:	0019      	movs	r1, r3
 8005c14:	0010      	movs	r0, r2
 8005c16:	f7fd fd98 	bl	800374a <ClearEEprom>
            break;
 8005c1a:	46c0      	nop			@ (mov r8, r8)
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bcb0      	pop	{r4, r5, r7}
 8005c24:	bc08      	pop	{r3}
 8005c26:	b004      	add	sp, #16
 8005c28:	4718      	bx	r3
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	0802250c 	.word	0x0802250c
 8005c30:	08080000 	.word	0x08080000
 8005c34:	0808000c 	.word	0x0808000c
 8005c38:	08080018 	.word	0x08080018
 8005c3c:	08080024 	.word	0x08080024
 8005c40:	08080030 	.word	0x08080030
 8005c44:	0808003c 	.word	0x0808003c
 8005c48:	08080048 	.word	0x08080048
 8005c4c:	08080090 	.word	0x08080090
 8005c50:	08080078 	.word	0x08080078
 8005c54:	0808006c 	.word	0x0808006c
 8005c58:	08080060 	.word	0x08080060
 8005c5c:	08080054 	.word	0x08080054

08005c60 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6039      	str	r1, [r7, #0]
 8005c68:	0011      	movs	r1, r2
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	1c02      	adds	r2, r0, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	1c0a      	adds	r2, r1, #0
 8005c74:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005c76:	2223      	movs	r2, #35	@ 0x23
 8005c78:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <Create_Message+0x9c>)
 8005c7a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cfc <Create_Message+0x9c>)
 8005c7e:	1dfa      	adds	r2, r7, #7
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005c84:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <Create_Message+0x9c>)
 8005c86:	1dba      	adds	r2, r7, #6
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005c8c:	1dbb      	adds	r3, r7, #6
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <Create_Message+0xa0>)
 8005c94:	0018      	movs	r0, r3
 8005c96:	f018 f969 	bl	801df6c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005c9a:	1dbb      	adds	r3, r7, #6
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	250e      	movs	r5, #14
 8005ca2:	197b      	adds	r3, r7, r5
 8005ca4:	3203      	adds	r2, #3
 8005ca6:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005ca8:	260c      	movs	r6, #12
 8005caa:	19bc      	adds	r4, r7, r6
 8005cac:	197b      	adds	r3, r7, r5
 8005cae:	881a      	ldrh	r2, [r3, #0]
 8005cb0:	4b12      	ldr	r3, [pc, #72]	@ (8005cfc <Create_Message+0x9c>)
 8005cb2:	0011      	movs	r1, r2
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f825 	bl	8005d04 <CRC16_ARC>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005cbe:	0030      	movs	r0, r6
 8005cc0:	183b      	adds	r3, r7, r0
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	197b      	adds	r3, r7, r5
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b2d1      	uxtb	r1, r2
 8005cce:	4a0b      	ldr	r2, [pc, #44]	@ (8005cfc <Create_Message+0x9c>)
 8005cd0:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005cd2:	197b      	adds	r3, r7, r5
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	183a      	adds	r2, r7, r0
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	b2d1      	uxtb	r1, r2
 8005cde:	4a07      	ldr	r2, [pc, #28]	@ (8005cfc <Create_Message+0x9c>)
 8005ce0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005ce2:	197b      	adds	r3, r7, r5
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	4b04      	ldr	r3, [pc, #16]	@ (8005cfc <Create_Message+0x9c>)
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f014 ff0e 	bl	801ab10 <CDC_Transmit_FS>
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b005      	add	sp, #20
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfc:	20000b90 	.word	0x20000b90
 8005d00:	20000b93 	.word	0x20000b93

08005d04 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	000a      	movs	r2, r1
 8005d0e:	1cbb      	adds	r3, r7, #2
 8005d10:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005d12:	2316      	movs	r3, #22
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	2200      	movs	r2, #0
 8005d18:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e02e      	b.n	8005d7e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	18d3      	adds	r3, r2, r3
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	0019      	movs	r1, r3
 8005d2a:	2216      	movs	r2, #22
 8005d2c:	18bb      	adds	r3, r7, r2
 8005d2e:	18ba      	adds	r2, r7, r2
 8005d30:	8812      	ldrh	r2, [r2, #0]
 8005d32:	404a      	eors	r2, r1
 8005d34:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e01a      	b.n	8005d72 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005d3c:	2116      	movs	r1, #22
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	2201      	movs	r2, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	187a      	adds	r2, r7, r1
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	0852      	lsrs	r2, r2, #1
 8005d50:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005d52:	187b      	adds	r3, r7, r1
 8005d54:	187a      	adds	r2, r7, r1
 8005d56:	8812      	ldrh	r2, [r2, #0]
 8005d58:	490f      	ldr	r1, [pc, #60]	@ (8005d98 <CRC16_ARC+0x94>)
 8005d5a:	404a      	eors	r2, r1
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e005      	b.n	8005d6c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005d60:	2216      	movs	r2, #22
 8005d62:	18bb      	adds	r3, r7, r2
 8005d64:	18ba      	adds	r2, r7, r2
 8005d66:	8812      	ldrh	r2, [r2, #0]
 8005d68:	0852      	lsrs	r2, r2, #1
 8005d6a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	dde1      	ble.n	8005d3c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	1cbb      	adds	r3, r7, #2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	dbcb      	blt.n	8005d20 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005d88:	2316      	movs	r3, #22
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	881b      	ldrh	r3, [r3, #0]
}
 8005d8e:	0018      	movs	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b006      	add	sp, #24
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	ffffa001 	.word	0xffffa001

08005d9c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005da0:	4b26      	ldr	r3, [pc, #152]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005da2:	4a27      	ldr	r2, [pc, #156]	@ (8005e40 <ReadBatteryVoltage+0xa4>)
 8005da4:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005da6:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005da8:	2280      	movs	r2, #128	@ 0x80
 8005daa:	0152      	lsls	r2, r2, #5
 8005dac:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005dae:	4a23      	ldr	r2, [pc, #140]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005db0:	4b24      	ldr	r3, [pc, #144]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f007 fb25 	bl	800d404 <HAL_ADC_ConfigChannel>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d001      	beq.n	8005dc2 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005dbe:	f001 fb4b 	bl	8007458 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005dc2:	4b20      	ldr	r3, [pc, #128]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f007 fa21 	bl	800d20c <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005dca:	4b1e      	ldr	r3, [pc, #120]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dcc:	2101      	movs	r1, #1
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f007 fa70 	bl	800d2b4 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f007 fb08 	bl	800d3ec <HAL_ADC_GetValue>
 8005ddc:	0002      	movs	r2, r0
 8005dde:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <ReadBatteryVoltage+0xac>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4353      	muls	r3, r2
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	4919      	ldr	r1, [pc, #100]	@ (8005e4c <ReadBatteryVoltage+0xb0>)
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7fa f9db 	bl	80001a4 <__udivsi3>
 8005dee:	0003      	movs	r3, r0
 8005df0:	001a      	movs	r2, r3
 8005df2:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <ReadBatteryVoltage+0xb4>)
 8005df4:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005df6:	4b16      	ldr	r3, [pc, #88]	@ (8005e50 <ReadBatteryVoltage+0xb4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fb fc34 	bl	8001668 <__aeabi_ui2f>
 8005e00:	1c03      	adds	r3, r0, #0
 8005e02:	4914      	ldr	r1, [pc, #80]	@ (8005e54 <ReadBatteryVoltage+0xb8>)
 8005e04:	1c18      	adds	r0, r3, #0
 8005e06:	f7fa fee5 	bl	8000bd4 <__aeabi_fdiv>
 8005e0a:	1c03      	adds	r3, r0, #0
 8005e0c:	1c1a      	adds	r2, r3, #0
 8005e0e:	4b12      	ldr	r3, [pc, #72]	@ (8005e58 <ReadBatteryVoltage+0xbc>)
 8005e10:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005e12:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e14:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <ReadBatteryVoltage+0xa4>)
 8005e16:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005e18:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e1a:	4a10      	ldr	r2, [pc, #64]	@ (8005e5c <ReadBatteryVoltage+0xc0>)
 8005e1c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e1e:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e20:	4b08      	ldr	r3, [pc, #32]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005e22:	0011      	movs	r1, r2
 8005e24:	0018      	movs	r0, r3
 8005e26:	f007 faed 	bl	800d404 <HAL_ADC_ConfigChannel>
 8005e2a:	1e03      	subs	r3, r0, #0
 8005e2c:	d001      	beq.n	8005e32 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005e2e:	f001 fb13 	bl	8007458 <Error_Handler>
   }
   return trueValue;
 8005e32:	4b09      	ldr	r3, [pc, #36]	@ (8005e58 <ReadBatteryVoltage+0xbc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 }
 8005e36:	1c18      	adds	r0, r3, #0
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000c98 	.word	0x20000c98
 8005e40:	38004000 	.word	0x38004000
 8005e44:	20000cbc 	.word	0x20000cbc
 8005e48:	2000002c 	.word	0x2000002c
 8005e4c:	00000fff 	.word	0x00000fff
 8005e50:	20000ca0 	.word	0x20000ca0
 8005e54:	447a0000 	.word	0x447a0000
 8005e58:	20000ca4 	.word	0x20000ca4
 8005e5c:	00001001 	.word	0x00001001

08005e60 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005e64:	4b27      	ldr	r3, [pc, #156]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e66:	4a28      	ldr	r2, [pc, #160]	@ (8005f08 <ReadSolarVoltage+0xa8>)
 8005e68:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005e6a:	4b26      	ldr	r3, [pc, #152]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e6c:	2280      	movs	r2, #128	@ 0x80
 8005e6e:	0152      	lsls	r2, r2, #5
 8005e70:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e72:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e74:	4b25      	ldr	r3, [pc, #148]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f007 fac3 	bl	800d404 <HAL_ADC_ConfigChannel>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d001      	beq.n	8005e86 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005e82:	f001 fae9 	bl	8007458 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005e86:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f007 f9bf 	bl	800d20c <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e90:	2101      	movs	r1, #1
 8005e92:	0018      	movs	r0, r3
 8005e94:	f007 fa0e 	bl	800d2b4 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005e98:	4b1c      	ldr	r3, [pc, #112]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f007 faa6 	bl	800d3ec <HAL_ADC_GetValue>
 8005ea0:	0002      	movs	r2, r0
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <ReadSolarVoltage+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	435a      	muls	r2, r3
 8005ea8:	0013      	movs	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	189b      	adds	r3, r3, r2
 8005eae:	4919      	ldr	r1, [pc, #100]	@ (8005f14 <ReadSolarVoltage+0xb4>)
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7fa f977 	bl	80001a4 <__udivsi3>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	001a      	movs	r2, r3
 8005eba:	4b17      	ldr	r3, [pc, #92]	@ (8005f18 <ReadSolarVoltage+0xb8>)
 8005ebc:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	@ (8005f18 <ReadSolarVoltage+0xb8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fb fbd0 	bl	8001668 <__aeabi_ui2f>
 8005ec8:	1c03      	adds	r3, r0, #0
 8005eca:	4914      	ldr	r1, [pc, #80]	@ (8005f1c <ReadSolarVoltage+0xbc>)
 8005ecc:	1c18      	adds	r0, r3, #0
 8005ece:	f7fa fe81 	bl	8000bd4 <__aeabi_fdiv>
 8005ed2:	1c03      	adds	r3, r0, #0
 8005ed4:	1c1a      	adds	r2, r3, #0
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <ReadSolarVoltage+0xc0>)
 8005ed8:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005eda:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005edc:	4a0a      	ldr	r2, [pc, #40]	@ (8005f08 <ReadSolarVoltage+0xa8>)
 8005ede:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005ee0:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005ee2:	4a10      	ldr	r2, [pc, #64]	@ (8005f24 <ReadSolarVoltage+0xc4>)
 8005ee4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005ee6:	4a07      	ldr	r2, [pc, #28]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005ee8:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f007 fa89 	bl	800d404 <HAL_ADC_ConfigChannel>
 8005ef2:	1e03      	subs	r3, r0, #0
 8005ef4:	d001      	beq.n	8005efa <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005ef6:	f001 faaf 	bl	8007458 <Error_Handler>
   }
   return trueValue;
 8005efa:	4b09      	ldr	r3, [pc, #36]	@ (8005f20 <ReadSolarVoltage+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 }
 8005efe:	1c18      	adds	r0, r3, #0
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000c98 	.word	0x20000c98
 8005f08:	3c008000 	.word	0x3c008000
 8005f0c:	20000cbc 	.word	0x20000cbc
 8005f10:	2000002c 	.word	0x2000002c
 8005f14:	00000fff 	.word	0x00000fff
 8005f18:	20000ca8 	.word	0x20000ca8
 8005f1c:	447a0000 	.word	0x447a0000
 8005f20:	20000cac 	.word	0x20000cac
 8005f24:	00001001 	.word	0x00001001

08005f28 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005f2c:	23a0      	movs	r3, #160	@ 0xa0
 8005f2e:	05db      	lsls	r3, r3, #23
 8005f30:	2180      	movs	r1, #128	@ 0x80
 8005f32:	0018      	movs	r0, r3
 8005f34:	f008 f9ec 	bl	800e310 <HAL_GPIO_ReadPin>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	1e5a      	subs	r2, r3, #1
 8005f3c:	4193      	sbcs	r3, r2
 8005f3e:	b2db      	uxtb	r3, r3
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005f46:	b580      	push	{r7, lr}
 8005f48:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	23a0      	movs	r3, #160	@ 0xa0
 8005f50:	05db      	lsls	r3, r3, #23
 8005f52:	0011      	movs	r1, r2
 8005f54:	0018      	movs	r0, r3
 8005f56:	f008 f9db 	bl	800e310 <HAL_GPIO_ReadPin>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	4193      	sbcs	r3, r2
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <UserButton_Pressed+0x1c>)
 8005f6e:	2104      	movs	r1, #4
 8005f70:	0018      	movs	r0, r3
 8005f72:	f008 f9cd 	bl	800e310 <HAL_GPIO_ReadPin>
 8005f76:	0003      	movs	r3, r0
 8005f78:	425a      	negs	r2, r3
 8005f7a:	4153      	adcs	r3, r2
 8005f7c:	b2db      	uxtb	r3, r3
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	50000c00 	.word	0x50000c00

08005f88 <showTime>:
uint8_t iMinute = 0;
uint8_t myUptimeminute = 0;
uint8_t myUptimehour = 0;
uint16_t myUptimeday = 0;

void showTime() {
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	46ce      	mov	lr, r9
 8005f8c:	4647      	mov	r7, r8
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b08d      	sub	sp, #52	@ 0x34
 8005f92:	af06      	add	r7, sp, #24
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8005f94:	003a      	movs	r2, r7
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	0011      	movs	r1, r2
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 fa04 	bl	80063a8 <RTC_GetTime>
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fa0:	003b      	movs	r3, r7
 8005fa2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fa4:	469c      	mov	ip, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fa6:	003b      	movs	r3, r7
 8005fa8:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005faa:	4698      	mov	r8, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fac:	003b      	movs	r3, r7
 8005fae:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fb0:	4699      	mov	r9, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fb6:	001a      	movs	r2, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fbc:	0019      	movs	r1, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fc2:	001c      	movs	r4, r3
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <showTime+0x74>)
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	001d      	movs	r5, r3
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <showTime+0x78>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	001e      	movs	r6, r3
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006004 <showTime+0x7c>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	480c      	ldr	r0, [pc, #48]	@ (8006008 <showTime+0x80>)
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	9604      	str	r6, [sp, #16]
 8005fda:	9503      	str	r5, [sp, #12]
 8005fdc:	9402      	str	r4, [sp, #8]
 8005fde:	9101      	str	r1, [sp, #4]
 8005fe0:	9200      	str	r2, [sp, #0]
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	4661      	mov	r1, ip
 8005fe8:	f017 fe30 	bl	801dc4c <iprintf>
}
 8005fec:	46c0      	nop			@ (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b007      	add	sp, #28
 8005ff2:	bcc0      	pop	{r6, r7}
 8005ff4:	46b9      	mov	r9, r7
 8005ff6:	46b0      	mov	r8, r6
 8005ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	20000cb8 	.word	0x20000cb8
 8006000:	20000cb6 	.word	0x20000cb6
 8006004:	20000cb5 	.word	0x20000cb5
 8006008:	080216b8 	.word	0x080216b8

0800600c <setiMinute>:

void setiMinute(uint8_t minute) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	0002      	movs	r2, r0
 8006014:	1dfb      	adds	r3, r7, #7
 8006016:	701a      	strb	r2, [r3, #0]
  iMinute = minute;
 8006018:	4b07      	ldr	r3, [pc, #28]	@ (8006038 <setiMinute+0x2c>)
 800601a:	1dfa      	adds	r2, r7, #7
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	701a      	strb	r2, [r3, #0]
  Debug("iMinute set to: %d", iMinute);
 8006020:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <setiMinute+0x2c>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4a05      	ldr	r2, [pc, #20]	@ (800603c <setiMinute+0x30>)
 8006026:	4906      	ldr	r1, [pc, #24]	@ (8006040 <setiMinute+0x34>)
 8006028:	2003      	movs	r0, #3
 800602a:	f006 fb93 	bl	800c754 <CreateLine>
}
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b002      	add	sp, #8
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	20000cb4 	.word	0x20000cb4
 800603c:	0802170c 	.word	0x0802170c
 8006040:	08021720 	.word	0x08021720

08006044 <UpdateSystemUptime>:

void UpdateSystemUptime() {
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b089      	sub	sp, #36	@ 0x24
 8006048:	af02      	add	r7, sp, #8
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800604a:	003a      	movs	r2, r7
 800604c:	1d3b      	adds	r3, r7, #4
 800604e:	0011      	movs	r1, r2
 8006050:	0018      	movs	r0, r3
 8006052:	f000 f9a9 	bl	80063a8 <RTC_GetTime>
  if (iMinute != currentTime.Minutes) {
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	785a      	ldrb	r2, [r3, #1]
 800605a:	4b1e      	ldr	r3, [pc, #120]	@ (80060d4 <UpdateSystemUptime+0x90>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d009      	beq.n	8006076 <UpdateSystemUptime+0x32>
    iMinute = currentTime.Minutes;
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	785a      	ldrb	r2, [r3, #1]
 8006066:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <UpdateSystemUptime+0x90>)
 8006068:	701a      	strb	r2, [r3, #0]
    myUptimeminute++;
 800606a:	4b1b      	ldr	r3, [pc, #108]	@ (80060d8 <UpdateSystemUptime+0x94>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <UpdateSystemUptime+0x94>)
 8006074:	701a      	strb	r2, [r3, #0]
  }
  if (myUptimeminute == 60) {
 8006076:	4b18      	ldr	r3, [pc, #96]	@ (80060d8 <UpdateSystemUptime+0x94>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b3c      	cmp	r3, #60	@ 0x3c
 800607c:	d115      	bne.n	80060aa <UpdateSystemUptime+0x66>
    myUptimeminute = 0;
 800607e:	4b16      	ldr	r3, [pc, #88]	@ (80060d8 <UpdateSystemUptime+0x94>)
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
    myUptimehour++;
 8006084:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <UpdateSystemUptime+0x98>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	b2da      	uxtb	r2, r3
 800608c:	4b13      	ldr	r3, [pc, #76]	@ (80060dc <UpdateSystemUptime+0x98>)
 800608e:	701a      	strb	r2, [r3, #0]
    if (myUptimehour == 24) {
 8006090:	4b12      	ldr	r3, [pc, #72]	@ (80060dc <UpdateSystemUptime+0x98>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b18      	cmp	r3, #24
 8006096:	d108      	bne.n	80060aa <UpdateSystemUptime+0x66>
      myUptimehour = 0;
 8006098:	4b10      	ldr	r3, [pc, #64]	@ (80060dc <UpdateSystemUptime+0x98>)
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
      myUptimeday++;
 800609e:	4b10      	ldr	r3, [pc, #64]	@ (80060e0 <UpdateSystemUptime+0x9c>)
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	4b0e      	ldr	r3, [pc, #56]	@ (80060e0 <UpdateSystemUptime+0x9c>)
 80060a8:	801a      	strh	r2, [r3, #0]
    }
  }
  Debug("System uptime is: %dd %02dh:%02dm", myUptimeday, myUptimehour, myUptimeminute);
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <UpdateSystemUptime+0x9c>)
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	001c      	movs	r4, r3
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <UpdateSystemUptime+0x98>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	0018      	movs	r0, r3
 80060b6:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <UpdateSystemUptime+0x94>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	4a0a      	ldr	r2, [pc, #40]	@ (80060e4 <UpdateSystemUptime+0xa0>)
 80060bc:	490a      	ldr	r1, [pc, #40]	@ (80060e8 <UpdateSystemUptime+0xa4>)
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	9000      	str	r0, [sp, #0]
 80060c2:	0023      	movs	r3, r4
 80060c4:	2003      	movs	r0, #3
 80060c6:	f006 fb45 	bl	800c754 <CreateLine>
}
 80060ca:	46c0      	nop			@ (mov r8, r8)
 80060cc:	46bd      	mov	sp, r7
 80060ce:	b007      	add	sp, #28
 80060d0:	bd90      	pop	{r4, r7, pc}
 80060d2:	46c0      	nop			@ (mov r8, r8)
 80060d4:	20000cb4 	.word	0x20000cb4
 80060d8:	20000cb5 	.word	0x20000cb5
 80060dc:	20000cb6 	.word	0x20000cb6
 80060e0:	20000cb8 	.word	0x20000cb8
 80060e4:	08021724 	.word	0x08021724
 80060e8:	08021720 	.word	0x08021720

080060ec <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	0008      	movs	r0, r1
 80060f6:	0011      	movs	r1, r2
 80060f8:	1cfb      	adds	r3, r7, #3
 80060fa:	1c02      	adds	r2, r0, #0
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	1cbb      	adds	r3, r7, #2
 8006100:	1c0a      	adds	r2, r1, #0
 8006102:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006104:	230e      	movs	r3, #14
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800610c:	230f      	movs	r3, #15
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	1cfa      	adds	r2, r7, #3
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e015      	b.n	8006144 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006118:	200f      	movs	r0, #15
 800611a:	183b      	adds	r3, r7, r0
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	18d2      	adds	r2, r2, r3
 8006122:	240e      	movs	r4, #14
 8006124:	193b      	adds	r3, r7, r4
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	7811      	ldrb	r1, [r2, #0]
 800612a:	2208      	movs	r2, #8
 800612c:	18ba      	adds	r2, r7, r2
 800612e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006130:	193b      	adds	r3, r7, r4
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	193b      	adds	r3, r7, r4
 8006136:	3201      	adds	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800613a:	183b      	adds	r3, r7, r0
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	183b      	adds	r3, r7, r0
 8006140:	3201      	adds	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	200f      	movs	r0, #15
 8006146:	183a      	adds	r2, r7, r0
 8006148:	1cbb      	adds	r3, r7, #2
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d9e2      	bls.n	8006118 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006152:	230e      	movs	r3, #14
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2208      	movs	r2, #8
 800615a:	18ba      	adds	r2, r7, r2
 800615c:	2100      	movs	r1, #0
 800615e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006160:	1cfb      	adds	r3, r7, #3
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b13      	cmp	r3, #19
 8006166:	d849      	bhi.n	80061fc <aBuff2int+0x110>
    if (start == 17) { //month
 8006168:	1cfb      	adds	r3, r7, #3
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b11      	cmp	r3, #17
 800616e:	d122      	bne.n	80061b6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006170:	183b      	adds	r3, r7, r0
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	e018      	b.n	80061aa <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006178:	240f      	movs	r4, #15
 800617a:	193b      	adds	r3, r7, r4
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	4b25      	ldr	r3, [pc, #148]	@ (8006214 <aBuff2int+0x128>)
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	58d2      	ldr	r2, [r2, r3]
 8006184:	2308      	movs	r3, #8
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	0011      	movs	r1, r2
 800618a:	0018      	movs	r0, r3
 800618c:	f7f9 ffe4 	bl	8000158 <strcmp>
 8006190:	1e03      	subs	r3, r0, #0
 8006192:	d104      	bne.n	800619e <aBuff2int+0xb2>
          return i+1;
 8006194:	193b      	adds	r3, r7, r4
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e035      	b.n	800620a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800619e:	210f      	movs	r1, #15
 80061a0:	187b      	adds	r3, r7, r1
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	187b      	adds	r3, r7, r1
 80061a6:	3201      	adds	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	230f      	movs	r3, #15
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b0b      	cmp	r3, #11
 80061b2:	d9e1      	bls.n	8006178 <aBuff2int+0x8c>
 80061b4:	e022      	b.n	80061fc <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80061b6:	230f      	movs	r3, #15
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e018      	b.n	80061f2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80061c0:	240f      	movs	r4, #15
 80061c2:	193b      	adds	r3, r7, r4
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	4b14      	ldr	r3, [pc, #80]	@ (8006218 <aBuff2int+0x12c>)
 80061c8:	0092      	lsls	r2, r2, #2
 80061ca:	58d2      	ldr	r2, [r2, r3]
 80061cc:	2308      	movs	r3, #8
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	0011      	movs	r1, r2
 80061d2:	0018      	movs	r0, r3
 80061d4:	f7f9 ffc0 	bl	8000158 <strcmp>
 80061d8:	1e03      	subs	r3, r0, #0
 80061da:	d104      	bne.n	80061e6 <aBuff2int+0xfa>
          return i+1;
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	e011      	b.n	800620a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80061e6:	210f      	movs	r1, #15
 80061e8:	187b      	adds	r3, r7, r1
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	3201      	adds	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	230f      	movs	r3, #15
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d9e1      	bls.n	80061c0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80061fc:	2308      	movs	r3, #8
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	0018      	movs	r0, r3
 8006202:	f016 f948 	bl	801c496 <atoi>
 8006206:	0003      	movs	r3, r0
 8006208:	b2db      	uxtb	r3, r3
}
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b005      	add	sp, #20
 8006210:	bd90      	pop	{r4, r7, pc}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	20000050 	.word	0x20000050
 8006218:	20000034 	.word	0x20000034

0800621c <ParseTime>:

void ParseTime(char* buffer) {
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	b08b      	sub	sp, #44	@ 0x2c
 8006220:	af02      	add	r7, sp, #8
 8006222:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006224:	2508      	movs	r5, #8
 8006226:	197a      	adds	r2, r7, r5
 8006228:	240c      	movs	r4, #12
 800622a:	193b      	adds	r3, r7, r4
 800622c:	0011      	movs	r1, r2
 800622e:	0018      	movs	r0, r3
 8006230:	f000 f8ba 	bl	80063a8 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2219      	movs	r2, #25
 8006238:	2118      	movs	r1, #24
 800623a:	0018      	movs	r0, r3
 800623c:	f7ff ff56 	bl	80060ec <aBuff2int>
 8006240:	0003      	movs	r3, r0
 8006242:	001a      	movs	r2, r3
 8006244:	193b      	adds	r3, r7, r4
 8006246:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	221c      	movs	r2, #28
 800624c:	211b      	movs	r1, #27
 800624e:	0018      	movs	r0, r3
 8006250:	f7ff ff4c 	bl	80060ec <aBuff2int>
 8006254:	0003      	movs	r3, r0
 8006256:	001a      	movs	r2, r3
 8006258:	193b      	adds	r3, r7, r4
 800625a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	221f      	movs	r2, #31
 8006260:	211e      	movs	r1, #30
 8006262:	0018      	movs	r0, r3
 8006264:	f7ff ff42 	bl	80060ec <aBuff2int>
 8006268:	0003      	movs	r3, r0
 800626a:	001a      	movs	r2, r3
 800626c:	193b      	adds	r3, r7, r4
 800626e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2224      	movs	r2, #36	@ 0x24
 8006274:	2123      	movs	r1, #35	@ 0x23
 8006276:	0018      	movs	r0, r3
 8006278:	f7ff ff38 	bl	80060ec <aBuff2int>
 800627c:	0003      	movs	r3, r0
 800627e:	001a      	movs	r2, r3
 8006280:	002e      	movs	r6, r5
 8006282:	19bb      	adds	r3, r7, r6
 8006284:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2213      	movs	r2, #19
 800628a:	2111      	movs	r1, #17
 800628c:	0018      	movs	r0, r3
 800628e:	f7ff ff2d 	bl	80060ec <aBuff2int>
 8006292:	0003      	movs	r3, r0
 8006294:	001a      	movs	r2, r3
 8006296:	19bb      	adds	r3, r7, r6
 8006298:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2216      	movs	r2, #22
 800629e:	2115      	movs	r1, #21
 80062a0:	0018      	movs	r0, r3
 80062a2:	f7ff ff23 	bl	80060ec <aBuff2int>
 80062a6:	0003      	movs	r3, r0
 80062a8:	001a      	movs	r2, r3
 80062aa:	19bb      	adds	r3, r7, r6
 80062ac:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	220f      	movs	r2, #15
 80062b2:	210d      	movs	r1, #13
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7ff ff19 	bl	80060ec <aBuff2int>
 80062ba:	0003      	movs	r3, r0
 80062bc:	001a      	movs	r2, r3
 80062be:	19bb      	adds	r3, r7, r6
 80062c0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80062c2:	0025      	movs	r5, r4
 80062c4:	197b      	adds	r3, r7, r5
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	001c      	movs	r4, r3
 80062ca:	197b      	adds	r3, r7, r5
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	0018      	movs	r0, r3
 80062d0:	197b      	adds	r3, r7, r5
 80062d2:	789b      	ldrb	r3, [r3, #2]
 80062d4:	4a09      	ldr	r2, [pc, #36]	@ (80062fc <ParseTime+0xe0>)
 80062d6:	490a      	ldr	r1, [pc, #40]	@ (8006300 <ParseTime+0xe4>)
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	9000      	str	r0, [sp, #0]
 80062dc:	0023      	movs	r3, r4
 80062de:	2003      	movs	r0, #3
 80062e0:	f006 fa38 	bl	800c754 <CreateLine>
  RTC_SetTime(&currentTime);
 80062e4:	197b      	adds	r3, r7, r5
 80062e6:	0018      	movs	r0, r3
 80062e8:	f000 f80c 	bl	8006304 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80062ec:	19bb      	adds	r3, r7, r6
 80062ee:	0018      	movs	r0, r3
 80062f0:	f000 f83c 	bl	800636c <RTC_SetDate>
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b009      	add	sp, #36	@ 0x24
 80062fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fc:	08021748 	.word	0x08021748
 8006300:	08021720 	.word	0x08021720

08006304 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800631e:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <RTC_SetTime+0x58>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	0018      	movs	r0, r3
 8006328:	f00d fe00 	bl	8013f2c <HAL_RTC_SetTime>
 800632c:	1e03      	subs	r3, r0, #0
 800632e:	d005      	beq.n	800633c <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006330:	4a0b      	ldr	r2, [pc, #44]	@ (8006360 <RTC_SetTime+0x5c>)
 8006332:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <RTC_SetTime+0x60>)
 8006334:	0019      	movs	r1, r3
 8006336:	2001      	movs	r0, #1
 8006338:	f006 fa0c 	bl	800c754 <CreateLine>
    }
    if (firstTimeUpdate) {
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <RTC_SetTime+0x64>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <RTC_SetTime+0x50>
      firstTimeUpdate = false;
 8006344:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <RTC_SetTime+0x64>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
      setiMinute(sTime->Minutes);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	0018      	movs	r0, r3
 8006350:	f7ff fe5c 	bl	800600c <setiMinute>
    }
}
 8006354:	46c0      	nop			@ (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000cb0 	.word	0x20000cb0
 8006360:	08021780 	.word	0x08021780
 8006364:	0802179c 	.word	0x0802179c
 8006368:	20000030 	.word	0x20000030

0800636c <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006374:	4b09      	ldr	r3, [pc, #36]	@ (800639c <RTC_SetDate+0x30>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	0018      	movs	r0, r3
 800637e:	f00d fedd 	bl	801413c <HAL_RTC_SetDate>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d005      	beq.n	8006392 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 8006386:	4a06      	ldr	r2, [pc, #24]	@ (80063a0 <RTC_SetDate+0x34>)
 8006388:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <RTC_SetDate+0x38>)
 800638a:	0019      	movs	r1, r3
 800638c:	2001      	movs	r0, #1
 800638e:	f006 f9e1 	bl	800c754 <CreateLine>
    }
}
 8006392:	46c0      	nop			@ (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	b002      	add	sp, #8
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	20000cb0 	.word	0x20000cb0
 80063a0:	080217a0 	.word	0x080217a0
 80063a4:	0802179c 	.word	0x0802179c

080063a8 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80063b2:	4b11      	ldr	r3, [pc, #68]	@ (80063f8 <RTC_GetTime+0x50>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	0018      	movs	r0, r3
 80063bc:	f00d fe60 	bl	8014080 <HAL_RTC_GetTime>
 80063c0:	1e03      	subs	r3, r0, #0
 80063c2:	d005      	beq.n	80063d0 <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 80063c4:	4a0d      	ldr	r2, [pc, #52]	@ (80063fc <RTC_GetTime+0x54>)
 80063c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006400 <RTC_GetTime+0x58>)
 80063c8:	0019      	movs	r1, r3
 80063ca:	2001      	movs	r0, #1
 80063cc:	f006 f9c2 	bl	800c754 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80063d0:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <RTC_GetTime+0x50>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	0018      	movs	r0, r3
 80063da:	f00d ff43 	bl	8014264 <HAL_RTC_GetDate>
 80063de:	1e03      	subs	r3, r0, #0
 80063e0:	d005      	beq.n	80063ee <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 80063e2:	4a08      	ldr	r2, [pc, #32]	@ (8006404 <RTC_GetTime+0x5c>)
 80063e4:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <RTC_GetTime+0x58>)
 80063e6:	0019      	movs	r1, r3
 80063e8:	2001      	movs	r0, #1
 80063ea:	f006 f9b3 	bl	800c754 <CreateLine>
    }
}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	20000cb0 	.word	0x20000cb0
 80063fc:	080217bc 	.word	0x080217bc
 8006400:	0802179c 	.word	0x0802179c
 8006404:	080217d8 	.word	0x080217d8

08006408 <InitClock>:

    // Instellen op Stop mode met low-power regulator
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
}

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <InitClock+0x18>)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	46bd      	mov	sp, r7
 800641a:	b002      	add	sp, #8
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	20000cb0 	.word	0x20000cb0

08006424 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800642a:	003b      	movs	r3, r7
 800642c:	0018      	movs	r0, r3
 800642e:	2308      	movs	r3, #8
 8006430:	001a      	movs	r2, r3
 8006432:	2100      	movs	r1, #0
 8006434:	f017 fcbe 	bl	801ddb4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006438:	4b30      	ldr	r3, [pc, #192]	@ (80064fc <MX_ADC_Init+0xd8>)
 800643a:	4a31      	ldr	r2, [pc, #196]	@ (8006500 <MX_ADC_Init+0xdc>)
 800643c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800643e:	4b2f      	ldr	r3, [pc, #188]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006440:	2200      	movs	r2, #0
 8006442:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006444:	4b2d      	ldr	r3, [pc, #180]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006446:	22c0      	movs	r2, #192	@ 0xc0
 8006448:	0612      	lsls	r2, r2, #24
 800644a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800644c:	4b2b      	ldr	r3, [pc, #172]	@ (80064fc <MX_ADC_Init+0xd8>)
 800644e:	2200      	movs	r2, #0
 8006450:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006452:	4b2a      	ldr	r3, [pc, #168]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006454:	2200      	movs	r2, #0
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006458:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <MX_ADC_Init+0xd8>)
 800645a:	2201      	movs	r2, #1
 800645c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800645e:	4b27      	ldr	r3, [pc, #156]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006460:	2200      	movs	r2, #0
 8006462:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006464:	4b25      	ldr	r3, [pc, #148]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006466:	2220      	movs	r2, #32
 8006468:	2100      	movs	r1, #0
 800646a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800646c:	4b23      	ldr	r3, [pc, #140]	@ (80064fc <MX_ADC_Init+0xd8>)
 800646e:	2221      	movs	r2, #33	@ 0x21
 8006470:	2101      	movs	r1, #1
 8006472:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006474:	4b21      	ldr	r3, [pc, #132]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006476:	2200      	movs	r2, #0
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800647a:	4b20      	ldr	r3, [pc, #128]	@ (80064fc <MX_ADC_Init+0xd8>)
 800647c:	22c2      	movs	r2, #194	@ 0xc2
 800647e:	32ff      	adds	r2, #255	@ 0xff
 8006480:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006482:	4b1e      	ldr	r3, [pc, #120]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006484:	222c      	movs	r2, #44	@ 0x2c
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800648a:	4b1c      	ldr	r3, [pc, #112]	@ (80064fc <MX_ADC_Init+0xd8>)
 800648c:	2204      	movs	r2, #4
 800648e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006490:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006496:	4b19      	ldr	r3, [pc, #100]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006498:	2200      	movs	r2, #0
 800649a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800649c:	4b17      	ldr	r3, [pc, #92]	@ (80064fc <MX_ADC_Init+0xd8>)
 800649e:	2200      	movs	r2, #0
 80064a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80064a2:	4b16      	ldr	r3, [pc, #88]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80064a8:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064aa:	0018      	movs	r0, r3
 80064ac:	f006 fd3a 	bl	800cf24 <HAL_ADC_Init>
 80064b0:	1e03      	subs	r3, r0, #0
 80064b2:	d001      	beq.n	80064b8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80064b4:	f000 ffd0 	bl	8007458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80064b8:	003b      	movs	r3, r7
 80064ba:	4a12      	ldr	r2, [pc, #72]	@ (8006504 <MX_ADC_Init+0xe0>)
 80064bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80064be:	003b      	movs	r3, r7
 80064c0:	2280      	movs	r2, #128	@ 0x80
 80064c2:	0152      	lsls	r2, r2, #5
 80064c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80064c6:	003a      	movs	r2, r7
 80064c8:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064ca:	0011      	movs	r1, r2
 80064cc:	0018      	movs	r0, r3
 80064ce:	f006 ff99 	bl	800d404 <HAL_ADC_ConfigChannel>
 80064d2:	1e03      	subs	r3, r0, #0
 80064d4:	d001      	beq.n	80064da <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80064d6:	f000 ffbf 	bl	8007458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80064da:	003b      	movs	r3, r7
 80064dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <MX_ADC_Init+0xe4>)
 80064de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80064e0:	003a      	movs	r2, r7
 80064e2:	4b06      	ldr	r3, [pc, #24]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f006 ff8c 	bl	800d404 <HAL_ADC_ConfigChannel>
 80064ec:	1e03      	subs	r3, r0, #0
 80064ee:	d001      	beq.n	80064f4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80064f0:	f000 ffb2 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80064f4:	46c0      	nop			@ (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000cbc 	.word	0x20000cbc
 8006500:	40012400 	.word	0x40012400
 8006504:	38004000 	.word	0x38004000
 8006508:	3c008000 	.word	0x3c008000

0800650c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b089      	sub	sp, #36	@ 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006514:	240c      	movs	r4, #12
 8006516:	193b      	adds	r3, r7, r4
 8006518:	0018      	movs	r0, r3
 800651a:	2314      	movs	r3, #20
 800651c:	001a      	movs	r2, r3
 800651e:	2100      	movs	r1, #0
 8006520:	f017 fc48 	bl	801ddb4 <memset>
  if(adcHandle->Instance==ADC1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a14      	ldr	r2, [pc, #80]	@ (800657c <HAL_ADC_MspInit+0x70>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d121      	bne.n	8006572 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800652e:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 8006530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006532:	4b13      	ldr	r3, [pc, #76]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 8006534:	2180      	movs	r1, #128	@ 0x80
 8006536:	0089      	lsls	r1, r1, #2
 8006538:	430a      	orrs	r2, r1
 800653a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 800653e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006540:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 8006542:	2104      	movs	r1, #4
 8006544:	430a      	orrs	r2, r1
 8006546:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006548:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 800654a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654c:	2204      	movs	r2, #4
 800654e:	4013      	ands	r3, r2
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006554:	193b      	adds	r3, r7, r4
 8006556:	2230      	movs	r2, #48	@ 0x30
 8006558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800655a:	193b      	adds	r3, r7, r4
 800655c:	2203      	movs	r2, #3
 800655e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006560:	193b      	adds	r3, r7, r4
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006566:	193b      	adds	r3, r7, r4
 8006568:	4a06      	ldr	r2, [pc, #24]	@ (8006584 <HAL_ADC_MspInit+0x78>)
 800656a:	0019      	movs	r1, r3
 800656c:	0010      	movs	r0, r2
 800656e:	f007 fd51 	bl	800e014 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	46bd      	mov	sp, r7
 8006576:	b009      	add	sp, #36	@ 0x24
 8006578:	bd90      	pop	{r4, r7, pc}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	40012400 	.word	0x40012400
 8006580:	40021000 	.word	0x40021000
 8006584:	50000800 	.word	0x50000800

08006588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800658e:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <MX_DMA_Init+0x48>)
 8006590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006592:	4b0f      	ldr	r3, [pc, #60]	@ (80065d0 <MX_DMA_Init+0x48>)
 8006594:	2101      	movs	r1, #1
 8006596:	430a      	orrs	r2, r1
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <MX_DMA_Init+0x48>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659e:	2201      	movs	r2, #1
 80065a0:	4013      	ands	r3, r2
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2100      	movs	r1, #0
 80065aa:	200a      	movs	r0, #10
 80065ac:	f007 f8e4 	bl	800d778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80065b0:	200a      	movs	r0, #10
 80065b2:	f007 f8f6 	bl	800d7a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2103      	movs	r1, #3
 80065ba:	200b      	movs	r0, #11
 80065bc:	f007 f8dc 	bl	800d778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80065c0:	200b      	movs	r0, #11
 80065c2:	f007 f8ee 	bl	800d7a2 <HAL_NVIC_EnableIRQ>

}
 80065c6:	46c0      	nop			@ (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b002      	add	sp, #8
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	46c0      	nop			@ (mov r8, r8)
 80065d0:	40021000 	.word	0x40021000

080065d4 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065e4:	d901      	bls.n	80065ea <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80065e6:	237f      	movs	r3, #127	@ 0x7f
 80065e8:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80065ea:	2017      	movs	r0, #23
 80065ec:	183b      	adds	r3, r7, r0
 80065ee:	490d      	ldr	r1, [pc, #52]	@ (8006624 <accessLUT10log10+0x50>)
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	188a      	adds	r2, r1, r2
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80065f8:	0001      	movs	r1, r0
 80065fa:	187b      	adds	r3, r7, r1
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2206      	movs	r2, #6
 8006600:	4113      	asrs	r3, r2
 8006602:	001a      	movs	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006608:	187b      	adds	r3, r7, r1
 800660a:	781a      	ldrb	r2, [r3, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2106      	movs	r1, #6
 8006612:	408b      	lsls	r3, r1
 8006614:	1ad2      	subs	r2, r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
}
 800661a:	46c0      	nop			@ (mov r8, r8)
 800661c:	46bd      	mov	sp, r7
 800661e:	b006      	add	sp, #24
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	08022540 	.word	0x08022540

08006628 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006628:	b5b0      	push	{r4, r5, r7, lr}
 800662a:	b090      	sub	sp, #64	@ 0x40
 800662c:	af00      	add	r7, sp, #0
 800662e:	6138      	str	r0, [r7, #16]
 8006630:	6179      	str	r1, [r7, #20]
 8006632:	60fa      	str	r2, [r7, #12]
 8006634:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006636:	2308      	movs	r3, #8
 8006638:	001a      	movs	r2, r3
 800663a:	3a20      	subs	r2, #32
 800663c:	2a00      	cmp	r2, #0
 800663e:	db03      	blt.n	8006648 <efficient10log10+0x20>
 8006640:	2101      	movs	r1, #1
 8006642:	4091      	lsls	r1, r2
 8006644:	000d      	movs	r5, r1
 8006646:	e008      	b.n	800665a <efficient10log10+0x32>
 8006648:	2220      	movs	r2, #32
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	2101      	movs	r1, #1
 800664e:	40d1      	lsrs	r1, r2
 8006650:	000a      	movs	r2, r1
 8006652:	2100      	movs	r1, #0
 8006654:	4099      	lsls	r1, r3
 8006656:	000d      	movs	r5, r1
 8006658:	4315      	orrs	r5, r2
 800665a:	2201      	movs	r2, #1
 800665c:	409a      	lsls	r2, r3
 800665e:	0014      	movs	r4, r2
 8006660:	2201      	movs	r2, #1
 8006662:	4252      	negs	r2, r2
 8006664:	17d3      	asrs	r3, r2, #31
 8006666:	1912      	adds	r2, r2, r4
 8006668:	416b      	adcs	r3, r5
 800666a:	633a      	str	r2, [r7, #48]	@ 0x30
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800666e:	2336      	movs	r3, #54	@ 0x36
 8006670:	2208      	movs	r2, #8
 8006672:	189b      	adds	r3, r3, r2
 8006674:	19db      	adds	r3, r3, r7
 8006676:	2200      	movs	r2, #0
 8006678:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800667a:	e017      	b.n	80066ac <efficient10log10+0x84>
    {
        P = P >> 1;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	07db      	lsls	r3, r3, #31
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	0852      	lsrs	r2, r2, #1
 8006684:	603a      	str	r2, [r7, #0]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	431a      	orrs	r2, r3
 800668a:	603a      	str	r2, [r7, #0]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	687c      	ldr	r4, [r7, #4]
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	617c      	str	r4, [r7, #20]
        bShift++;
 800669a:	2136      	movs	r1, #54	@ 0x36
 800669c:	2008      	movs	r0, #8
 800669e:	180b      	adds	r3, r1, r0
 80066a0:	19db      	adds	r3, r3, r7
 80066a2:	881a      	ldrh	r2, [r3, #0]
 80066a4:	180b      	adds	r3, r1, r0
 80066a6:	19db      	adds	r3, r3, r7
 80066a8:	3201      	adds	r2, #1
 80066aa:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d8e3      	bhi.n	800667c <efficient10log10+0x54>
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d103      	bne.n	80066c4 <efficient10log10+0x9c>
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d8db      	bhi.n	800667c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	2308      	movs	r3, #8
 80066c8:	3b01      	subs	r3, #1
 80066ca:	2101      	movs	r1, #1
 80066cc:	4099      	lsls	r1, r3
 80066ce:	000b      	movs	r3, r1
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80066dc:	231c      	movs	r3, #28
 80066de:	2408      	movs	r4, #8
 80066e0:	191b      	adds	r3, r3, r4
 80066e2:	19da      	adds	r2, r3, r7
 80066e4:	2320      	movs	r3, #32
 80066e6:	191b      	adds	r3, r3, r4
 80066e8:	19d9      	adds	r1, r3, r7
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7ff ff71 	bl	80065d4 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80066f2:	2215      	movs	r2, #21
 80066f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f6:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80066f8:	2036      	movs	r0, #54	@ 0x36
 80066fa:	1902      	adds	r2, r0, r4
 80066fc:	19d2      	adds	r2, r2, r7
 80066fe:	8812      	ldrh	r2, [r2, #0]
 8006700:	2103      	movs	r1, #3
 8006702:	434a      	muls	r2, r1
 8006704:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006706:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006708:	0021      	movs	r1, r4
 800670a:	1843      	adds	r3, r0, r1
 800670c:	19db      	adds	r3, r3, r7
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	2201      	movs	r2, #1
 8006712:	4353      	muls	r3, r2
 8006714:	2203      	movs	r2, #3
 8006716:	4113      	asrs	r3, r2
 8006718:	001a      	movs	r2, r3
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800671e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8006720:	2314      	movs	r3, #20
 8006722:	185b      	adds	r3, r3, r1
 8006724:	19da      	adds	r2, r3, r7
 8006726:	2318      	movs	r3, #24
 8006728:	185b      	adds	r3, r3, r1
 800672a:	19db      	adds	r3, r3, r7
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f000 f80a 	bl	8006748 <correctIntFracNumber>
    integerPart[0] = intPart;
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	46c0      	nop			@ (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b010      	add	sp, #64	@ 0x40
 8006746:	bdb0      	pop	{r4, r5, r7, pc}

08006748 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8006752:	e00a      	b.n	800676a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3b0a      	subs	r3, #10
 8006764:	001a      	movs	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b09      	cmp	r3, #9
 8006770:	dcf0      	bgt.n	8006754 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8006772:	e00a      	b.n	800678a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	330a      	adds	r3, #10
 8006784:	001a      	movs	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3309      	adds	r3, #9
 8006790:	dbf0      	blt.n	8006774 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	da0f      	bge.n	80067ba <correctIntFracNumber+0x72>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd0b      	ble.n	80067ba <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3b0a      	subs	r3, #10
 80067b2:	001a      	movs	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80067b8:	e012      	b.n	80067e0 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	dd0e      	ble.n	80067e0 <correctIntFracNumber+0x98>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0a      	bge.n	80067e0 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	1e5a      	subs	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330a      	adds	r3, #10
 80067da:	001a      	movs	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	601a      	str	r2, [r3, #0]
}
 80067e0:	46c0      	nop			@ (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b002      	add	sp, #8
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80067f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006828 <Gadget_Init+0x40>)
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f001 fa19 	bl	8007c30 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	0018      	movs	r0, r3
 8006806:	f000 fe8b 	bl	8007520 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f7fd f8ad 	bl	800396c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8006812:	4a06      	ldr	r2, [pc, #24]	@ (800682c <Gadget_Init+0x44>)
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <Gadget_Init+0x48>)
 8006816:	0019      	movs	r1, r3
 8006818:	2003      	movs	r0, #3
 800681a:	f005 ff9b 	bl	800c754 <CreateLine>
}
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b004      	add	sp, #16
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	20000080 	.word	0x20000080
 800682c:	08021824 	.word	0x08021824
 8006830:	08021838 	.word	0x08021838

08006834 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  Meas_Test();
 8006838:	f000 ffaa 	bl	8007790 <Meas_Test>
}
 800683c:	46c0      	nop			@ (mov r8, r8)
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UpkeepGadget>:

bool UpkeepGadget() {
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 800684a:	f001 f961 	bl	8007b10 <Meas_Upkeep>
 800684e:	0003      	movs	r3, r0
 8006850:	001a      	movs	r2, r3
 8006852:	4b0f      	ldr	r3, [pc, #60]	@ (8006890 <UpkeepGadget+0x4c>)
 8006854:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8006856:	f001 f841 	bl	80078dc <Mic_Upkeep>
 800685a:	0003      	movs	r3, r0
 800685c:	001a      	movs	r2, r3
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <UpkeepGadget+0x50>)
 8006860:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8006862:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <UpkeepGadget+0x4c>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d103      	bne.n	8006872 <UpkeepGadget+0x2e>
 800686a:	4b0a      	ldr	r3, [pc, #40]	@ (8006894 <UpkeepGadget+0x50>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b03      	cmp	r3, #3
 8006870:	d001      	beq.n	8006876 <UpkeepGadget+0x32>
 8006872:	2201      	movs	r2, #1
 8006874:	e000      	b.n	8006878 <UpkeepGadget+0x34>
 8006876:	2200      	movs	r2, #0
 8006878:	1dfb      	adds	r3, r7, #7
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	2101      	movs	r1, #1
 8006880:	400a      	ands	r2, r1
 8006882:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006884:	1dfb      	adds	r3, r7, #7
 8006886:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000d18 	.word	0x20000d18
 8006894:	20000d19 	.word	0x20000d19

08006898 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f003 fb3b 	bl	8009f24 <SGP_Init>
}
 80068ae:	46c0      	nop			@ (mov r8, r8)
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b002      	add	sp, #8
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 80068b6:	b580      	push	{r7, lr}
 80068b8:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 80068ba:	f003 fb4d 	bl	8009f58 <SGP_StartMeasurement>
}
 80068be:	46c0      	nop			@ (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f003 fbb2 	bl	800a038 <SGP_GetMeasurementValues>
 80068d4:	0003      	movs	r3, r0
}
 80068d6:	0018      	movs	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	b002      	add	sp, #8
 80068dc:	bd80      	pop	{r7, pc}

080068de <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80068de:	b580      	push	{r7, lr}
 80068e0:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80068e2:	f003 fdbf 	bl	800a464 <SGP_DeviceConnected>
 80068e6:	0003      	movs	r3, r0
}
 80068e8:	0018      	movs	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b08b      	sub	sp, #44	@ 0x2c
 80068f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f6:	2414      	movs	r4, #20
 80068f8:	193b      	adds	r3, r7, r4
 80068fa:	0018      	movs	r0, r3
 80068fc:	2314      	movs	r3, #20
 80068fe:	001a      	movs	r2, r3
 8006900:	2100      	movs	r1, #0
 8006902:	f017 fa57 	bl	801ddb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006906:	4b7c      	ldr	r3, [pc, #496]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690a:	4b7b      	ldr	r3, [pc, #492]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800690c:	2104      	movs	r1, #4
 800690e:	430a      	orrs	r2, r1
 8006910:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006912:	4b79      	ldr	r3, [pc, #484]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	2204      	movs	r2, #4
 8006918:	4013      	ands	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800691e:	4b76      	ldr	r3, [pc, #472]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006922:	4b75      	ldr	r3, [pc, #468]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006924:	2180      	movs	r1, #128	@ 0x80
 8006926:	430a      	orrs	r2, r1
 8006928:	62da      	str	r2, [r3, #44]	@ 0x2c
 800692a:	4b73      	ldr	r3, [pc, #460]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	2280      	movs	r2, #128	@ 0x80
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006936:	4b70      	ldr	r3, [pc, #448]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693a:	4b6f      	ldr	r3, [pc, #444]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800693c:	2101      	movs	r1, #1
 800693e:	430a      	orrs	r2, r1
 8006940:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006942:	4b6d      	ldr	r3, [pc, #436]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	2201      	movs	r2, #1
 8006948:	4013      	ands	r3, r2
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800694e:	4b6a      	ldr	r3, [pc, #424]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	4b69      	ldr	r3, [pc, #420]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006954:	2102      	movs	r1, #2
 8006956:	430a      	orrs	r2, r1
 8006958:	62da      	str	r2, [r3, #44]	@ 0x2c
 800695a:	4b67      	ldr	r3, [pc, #412]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	2202      	movs	r2, #2
 8006960:	4013      	ands	r3, r2
 8006962:	607b      	str	r3, [r7, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006966:	4b64      	ldr	r3, [pc, #400]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696a:	4b63      	ldr	r3, [pc, #396]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800696c:	2108      	movs	r1, #8
 800696e:	430a      	orrs	r2, r1
 8006970:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006972:	4b61      	ldr	r3, [pc, #388]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006976:	2208      	movs	r2, #8
 8006978:	4013      	ands	r3, r2
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800697e:	4b5f      	ldr	r3, [pc, #380]	@ (8006afc <MX_GPIO_Init+0x20c>)
 8006980:	2201      	movs	r2, #1
 8006982:	2101      	movs	r1, #1
 8006984:	0018      	movs	r0, r3
 8006986:	f007 fce0 	bl	800e34a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800698a:	4b5c      	ldr	r3, [pc, #368]	@ (8006afc <MX_GPIO_Init+0x20c>)
 800698c:	2200      	movs	r2, #0
 800698e:	2102      	movs	r1, #2
 8006990:	0018      	movs	r0, r3
 8006992:	f007 fcda 	bl	800e34a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006996:	495a      	ldr	r1, [pc, #360]	@ (8006b00 <MX_GPIO_Init+0x210>)
 8006998:	4b5a      	ldr	r3, [pc, #360]	@ (8006b04 <MX_GPIO_Init+0x214>)
 800699a:	2201      	movs	r2, #1
 800699c:	0018      	movs	r0, r3
 800699e:	f007 fcd4 	bl	800e34a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80069a2:	2380      	movs	r3, #128	@ 0x80
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4858      	ldr	r0, [pc, #352]	@ (8006b08 <MX_GPIO_Init+0x218>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	0019      	movs	r1, r3
 80069ac:	f007 fccd 	bl	800e34a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80069b0:	2380      	movs	r3, #128	@ 0x80
 80069b2:	015b      	lsls	r3, r3, #5
 80069b4:	4854      	ldr	r0, [pc, #336]	@ (8006b08 <MX_GPIO_Init+0x218>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	0019      	movs	r1, r3
 80069ba:	f007 fcc6 	bl	800e34a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80069be:	193b      	adds	r3, r7, r4
 80069c0:	4a52      	ldr	r2, [pc, #328]	@ (8006b0c <MX_GPIO_Init+0x21c>)
 80069c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069c4:	193b      	adds	r3, r7, r4
 80069c6:	2203      	movs	r2, #3
 80069c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ca:	193b      	adds	r3, r7, r4
 80069cc:	2200      	movs	r2, #0
 80069ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	4a4d      	ldr	r2, [pc, #308]	@ (8006b08 <MX_GPIO_Init+0x218>)
 80069d4:	0019      	movs	r1, r3
 80069d6:	0010      	movs	r0, r2
 80069d8:	f007 fb1c 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80069dc:	193b      	adds	r3, r7, r4
 80069de:	2203      	movs	r2, #3
 80069e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e2:	193b      	adds	r3, r7, r4
 80069e4:	2201      	movs	r2, #1
 80069e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e8:	193b      	adds	r3, r7, r4
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ee:	193b      	adds	r3, r7, r4
 80069f0:	2200      	movs	r2, #0
 80069f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80069f4:	193b      	adds	r3, r7, r4
 80069f6:	4a41      	ldr	r2, [pc, #260]	@ (8006afc <MX_GPIO_Init+0x20c>)
 80069f8:	0019      	movs	r1, r3
 80069fa:	0010      	movs	r0, r2
 80069fc:	f007 fb0a 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006a00:	193b      	adds	r3, r7, r4
 8006a02:	2270      	movs	r2, #112	@ 0x70
 8006a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a06:	193b      	adds	r3, r7, r4
 8006a08:	2203      	movs	r2, #3
 8006a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a0c:	193b      	adds	r3, r7, r4
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a12:	193a      	adds	r2, r7, r4
 8006a14:	23a0      	movs	r3, #160	@ 0xa0
 8006a16:	05db      	lsls	r3, r3, #23
 8006a18:	0011      	movs	r1, r2
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f007 fafa 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	4a3b      	ldr	r2, [pc, #236]	@ (8006b10 <MX_GPIO_Init+0x220>)
 8006a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	2200      	movs	r2, #0
 8006a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2c:	193b      	adds	r3, r7, r4
 8006a2e:	2200      	movs	r2, #0
 8006a30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a32:	193a      	adds	r2, r7, r4
 8006a34:	23a0      	movs	r3, #160	@ 0xa0
 8006a36:	05db      	lsls	r3, r3, #23
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f007 faea 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8006a40:	193b      	adds	r3, r7, r4
 8006a42:	4a2f      	ldr	r2, [pc, #188]	@ (8006b00 <MX_GPIO_Init+0x210>)
 8006a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a46:	193b      	adds	r3, r7, r4
 8006a48:	2201      	movs	r2, #1
 8006a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4c:	193b      	adds	r3, r7, r4
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a52:	193b      	adds	r3, r7, r4
 8006a54:	2200      	movs	r2, #0
 8006a56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a58:	193b      	adds	r3, r7, r4
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <MX_GPIO_Init+0x214>)
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	0010      	movs	r0, r2
 8006a60:	f007 fad8 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8006a64:	193b      	adds	r3, r7, r4
 8006a66:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <MX_GPIO_Init+0x224>)
 8006a68:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a6a:	193b      	adds	r3, r7, r4
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a70:	193b      	adds	r3, r7, r4
 8006a72:	2200      	movs	r2, #0
 8006a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a76:	193b      	adds	r3, r7, r4
 8006a78:	4a22      	ldr	r2, [pc, #136]	@ (8006b04 <MX_GPIO_Init+0x214>)
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	0010      	movs	r0, r2
 8006a7e:	f007 fac9 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006a82:	0021      	movs	r1, r4
 8006a84:	187b      	adds	r3, r7, r1
 8006a86:	2280      	movs	r2, #128	@ 0x80
 8006a88:	0092      	lsls	r2, r2, #2
 8006a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a8c:	000c      	movs	r4, r1
 8006a8e:	193b      	adds	r3, r7, r4
 8006a90:	2200      	movs	r2, #0
 8006a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a94:	193b      	adds	r3, r7, r4
 8006a96:	2200      	movs	r2, #0
 8006a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006a9a:	193b      	adds	r3, r7, r4
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006b08 <MX_GPIO_Init+0x218>)
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	0010      	movs	r0, r2
 8006aa2:	f007 fab7 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006aa6:	0021      	movs	r1, r4
 8006aa8:	187b      	adds	r3, r7, r1
 8006aaa:	22c0      	movs	r2, #192	@ 0xc0
 8006aac:	0152      	lsls	r2, r2, #5
 8006aae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ab0:	000c      	movs	r4, r1
 8006ab2:	193b      	adds	r3, r7, r4
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab8:	193b      	adds	r3, r7, r4
 8006aba:	2200      	movs	r2, #0
 8006abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006abe:	193b      	adds	r3, r7, r4
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ac4:	193b      	adds	r3, r7, r4
 8006ac6:	4a10      	ldr	r2, [pc, #64]	@ (8006b08 <MX_GPIO_Init+0x218>)
 8006ac8:	0019      	movs	r1, r3
 8006aca:	0010      	movs	r0, r2
 8006acc:	f007 faa2 	bl	800e014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006ad0:	0021      	movs	r1, r4
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ad8:	187b      	adds	r3, r7, r1
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b18 <MX_GPIO_Init+0x228>)
 8006ae8:	0019      	movs	r1, r3
 8006aea:	0010      	movs	r0, r2
 8006aec:	f007 fa92 	bl	800e014 <HAL_GPIO_Init>

}
 8006af0:	46c0      	nop			@ (mov r8, r8)
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b00b      	add	sp, #44	@ 0x2c
 8006af6:	bd90      	pop	{r4, r7, pc}
 8006af8:	40021000 	.word	0x40021000
 8006afc:	50001c00 	.word	0x50001c00
 8006b00:	00000301 	.word	0x00000301
 8006b04:	50000400 	.word	0x50000400
 8006b08:	50000800 	.word	0x50000800
 8006b0c:	0000200c 	.word	0x0000200c
 8006b10:	00008180 	.word	0x00008180
 8006b14:	0000403e 	.word	0x0000403e
 8006b18:	50000c00 	.word	0x50000c00

08006b1c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2100      	movs	r1, #0
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f00d fe56 	bl	80147dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2108      	movs	r1, #8
 8006b34:	0018      	movs	r0, r3
 8006b36:	f00d fe51 	bl	80147dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	210c      	movs	r1, #12
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f00d fe4c 	bl	80147dc <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006b44:	2380      	movs	r3, #128	@ 0x80
 8006b46:	05db      	lsls	r3, r3, #23
 8006b48:	22fa      	movs	r2, #250	@ 0xfa
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006b4e:	2380      	movs	r3, #128	@ 0x80
 8006b50:	05db      	lsls	r3, r3, #23
 8006b52:	22fa      	movs	r2, #250	@ 0xfa
 8006b54:	0112      	lsls	r2, r2, #4
 8006b56:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006b58:	2380      	movs	r3, #128	@ 0x80
 8006b5a:	05db      	lsls	r3, r3, #23
 8006b5c:	22fa      	movs	r2, #250	@ 0xfa
 8006b5e:	0112      	lsls	r2, r2, #4
 8006b60:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006b62:	2380      	movs	r3, #128	@ 0x80
 8006b64:	05db      	lsls	r3, r3, #23
 8006b66:	22fa      	movs	r2, #250	@ 0xfa
 8006b68:	0112      	lsls	r2, r2, #4
 8006b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2100      	movs	r1, #0
 8006b70:	0018      	movs	r0, r3
 8006b72:	f00d fe33 	bl	80147dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2104      	movs	r1, #4
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f00d fe2e 	bl	80147dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2108      	movs	r1, #8
 8006b84:	0018      	movs	r0, r3
 8006b86:	f00d fe29 	bl	80147dc <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006b8c:	22fa      	movs	r2, #250	@ 0xfa
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006b92:	4b08      	ldr	r3, [pc, #32]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006b94:	22fa      	movs	r2, #250	@ 0xfa
 8006b96:	0112      	lsls	r2, r2, #4
 8006b98:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006b9c:	22fa      	movs	r2, #250	@ 0xfa
 8006b9e:	0112      	lsls	r2, r2, #4
 8006ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006ba2:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006ba4:	22fa      	movs	r2, #250	@ 0xfa
 8006ba6:	0112      	lsls	r2, r2, #4
 8006ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b002      	add	sp, #8
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	40000400 	.word	0x40000400

08006bb8 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0011      	movs	r1, r2
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f005 ff23 	bl	800ca14 <HIDS_Init>
}
 8006bce:	46c0      	nop			@ (mov r8, r8)
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b002      	add	sp, #8
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006bda:	f005 ff3d 	bl	800ca58 <HIDS_StartMeasurement>
}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	0011      	movs	r1, r2
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f006 f815 	bl	800cc24 <HIDS_GetMeasurementValues>
 8006bfa:	0003      	movs	r3, r0
}
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b002      	add	sp, #8
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006c08:	f005 ffb0 	bl	800cb6c <HIDS_DeviceConnected>
 8006c0c:	0003      	movs	r3, r0
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006c18:	4b1b      	ldr	r3, [pc, #108]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c8c <MX_I2C1_Init+0x78>)
 8006c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c20:	4a1b      	ldr	r2, [pc, #108]	@ (8006c90 <MX_I2C1_Init+0x7c>)
 8006c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006c24:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c2a:	4b17      	ldr	r3, [pc, #92]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c30:	4b15      	ldr	r3, [pc, #84]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006c3c:	4b12      	ldr	r3, [pc, #72]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c42:	4b11      	ldr	r3, [pc, #68]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c48:	4b0f      	ldr	r3, [pc, #60]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c50:	0018      	movs	r0, r3
 8006c52:	f007 fb97 	bl	800e384 <HAL_I2C_Init>
 8006c56:	1e03      	subs	r3, r0, #0
 8006c58:	d001      	beq.n	8006c5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006c5a:	f000 fbfd 	bl	8007458 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c60:	2100      	movs	r1, #0
 8006c62:	0018      	movs	r0, r3
 8006c64:	f009 ff68 	bl	8010b38 <HAL_I2CEx_ConfigAnalogFilter>
 8006c68:	1e03      	subs	r3, r0, #0
 8006c6a:	d001      	beq.n	8006c70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006c6c:	f000 fbf4 	bl	8007458 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006c70:	4b05      	ldr	r3, [pc, #20]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c72:	2100      	movs	r1, #0
 8006c74:	0018      	movs	r0, r3
 8006c76:	f009 ffab 	bl	8010bd0 <HAL_I2CEx_ConfigDigitalFilter>
 8006c7a:	1e03      	subs	r3, r0, #0
 8006c7c:	d001      	beq.n	8006c82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006c7e:	f000 fbeb 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006c82:	46c0      	nop			@ (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000d1c 	.word	0x20000d1c
 8006c8c:	40005400 	.word	0x40005400
 8006c90:	00503d58 	.word	0x00503d58

08006c94 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006c98:	4b1b      	ldr	r3, [pc, #108]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d0c <MX_I2C2_Init+0x78>)
 8006c9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d10 <MX_I2C2_Init+0x7c>)
 8006ca2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006ca4:	4b18      	ldr	r3, [pc, #96]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006caa:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006cb0:	4b15      	ldr	r3, [pc, #84]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006cb6:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006cbc:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006cc2:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006cce:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f007 fb57 	bl	800e384 <HAL_I2C_Init>
 8006cd6:	1e03      	subs	r3, r0, #0
 8006cd8:	d001      	beq.n	8006cde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006cda:	f000 fbbd 	bl	8007458 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f009 ff28 	bl	8010b38 <HAL_I2CEx_ConfigAnalogFilter>
 8006ce8:	1e03      	subs	r3, r0, #0
 8006cea:	d001      	beq.n	8006cf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006cec:	f000 fbb4 	bl	8007458 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f009 ff6b 	bl	8010bd0 <HAL_I2CEx_ConfigDigitalFilter>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d001      	beq.n	8006d02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006cfe:	f000 fbab 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000d70 	.word	0x20000d70
 8006d0c:	40005800 	.word	0x40005800
 8006d10:	00503d58 	.word	0x00503d58

08006d14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b08b      	sub	sp, #44	@ 0x2c
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d1c:	2414      	movs	r4, #20
 8006d1e:	193b      	adds	r3, r7, r4
 8006d20:	0018      	movs	r0, r3
 8006d22:	2314      	movs	r3, #20
 8006d24:	001a      	movs	r2, r3
 8006d26:	2100      	movs	r1, #0
 8006d28:	f017 f844 	bl	801ddb4 <memset>
  if(i2cHandle->Instance==I2C1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5d      	ldr	r2, [pc, #372]	@ (8006ea8 <HAL_I2C_MspInit+0x194>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d000      	beq.n	8006d38 <HAL_I2C_MspInit+0x24>
 8006d36:	e083      	b.n	8006e40 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d38:	4b5c      	ldr	r3, [pc, #368]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d3e:	2102      	movs	r1, #2
 8006d40:	430a      	orrs	r2, r1
 8006d42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d44:	4b59      	ldr	r3, [pc, #356]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	2202      	movs	r2, #2
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d50:	0021      	movs	r1, r4
 8006d52:	187b      	adds	r3, r7, r1
 8006d54:	22c0      	movs	r2, #192	@ 0xc0
 8006d56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	2212      	movs	r2, #18
 8006d5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5e:	187b      	adds	r3, r7, r1
 8006d60:	2200      	movs	r2, #0
 8006d62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	2203      	movs	r2, #3
 8006d68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006d6a:	187b      	adds	r3, r7, r1
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d70:	187b      	adds	r3, r7, r1
 8006d72:	4a4f      	ldr	r2, [pc, #316]	@ (8006eb0 <HAL_I2C_MspInit+0x19c>)
 8006d74:	0019      	movs	r1, r3
 8006d76:	0010      	movs	r0, r2
 8006d78:	f007 f94c 	bl	800e014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d80:	4b4a      	ldr	r3, [pc, #296]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d82:	2180      	movs	r1, #128	@ 0x80
 8006d84:	0389      	lsls	r1, r1, #14
 8006d86:	430a      	orrs	r2, r1
 8006d88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8006eb8 <HAL_I2C_MspInit+0x1a4>)
 8006d8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006d90:	4b48      	ldr	r3, [pc, #288]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d92:	2206      	movs	r2, #6
 8006d94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d96:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d9c:	4b45      	ldr	r3, [pc, #276]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006da2:	4b44      	ldr	r3, [pc, #272]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006da4:	2280      	movs	r2, #128	@ 0x80
 8006da6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006da8:	4b42      	ldr	r3, [pc, #264]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dae:	4b41      	ldr	r3, [pc, #260]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006db4:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006dba:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f006 fd0a 	bl	800d7dc <HAL_DMA_Init>
 8006dc8:	1e03      	subs	r3, r0, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006dcc:	f000 fb44 	bl	8007458 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a38      	ldr	r2, [pc, #224]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006dd6:	4b37      	ldr	r3, [pc, #220]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006ddc:	4b37      	ldr	r3, [pc, #220]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006dde:	4a38      	ldr	r2, [pc, #224]	@ (8006ec0 <HAL_I2C_MspInit+0x1ac>)
 8006de0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006de2:	4b36      	ldr	r3, [pc, #216]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006de4:	2206      	movs	r2, #6
 8006de6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006de8:	4b34      	ldr	r3, [pc, #208]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006dea:	2210      	movs	r2, #16
 8006dec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dee:	4b33      	ldr	r3, [pc, #204]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006df4:	4b31      	ldr	r3, [pc, #196]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006df6:	2280      	movs	r2, #128	@ 0x80
 8006df8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dfa:	4b30      	ldr	r3, [pc, #192]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e00:	4b2e      	ldr	r3, [pc, #184]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006e06:	4b2d      	ldr	r3, [pc, #180]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006e12:	4b2a      	ldr	r3, [pc, #168]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e14:	0018      	movs	r0, r3
 8006e16:	f006 fce1 	bl	800d7dc <HAL_DMA_Init>
 8006e1a:	1e03      	subs	r3, r0, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006e1e:	f000 fb1b 	bl	8007458 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a25      	ldr	r2, [pc, #148]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e26:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e28:	4b24      	ldr	r3, [pc, #144]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	2017      	movs	r0, #23
 8006e34:	f006 fca0 	bl	800d778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006e38:	2017      	movs	r0, #23
 8006e3a:	f006 fcb2 	bl	800d7a2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006e3e:	e02e      	b.n	8006e9e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec4 <HAL_I2C_MspInit+0x1b0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d129      	bne.n	8006e9e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e4a:	4b18      	ldr	r3, [pc, #96]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	4b17      	ldr	r3, [pc, #92]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e50:	2102      	movs	r1, #2
 8006e52:	430a      	orrs	r2, r1
 8006e54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e56:	4b15      	ldr	r3, [pc, #84]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006e62:	2114      	movs	r1, #20
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	22c0      	movs	r2, #192	@ 0xc0
 8006e68:	0112      	lsls	r2, r2, #4
 8006e6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e6c:	187b      	adds	r3, r7, r1
 8006e6e:	2212      	movs	r2, #18
 8006e70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	2200      	movs	r2, #0
 8006e76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006e7e:	187b      	adds	r3, r7, r1
 8006e80:	2206      	movs	r2, #6
 8006e82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e84:	187b      	adds	r3, r7, r1
 8006e86:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb0 <HAL_I2C_MspInit+0x19c>)
 8006e88:	0019      	movs	r1, r3
 8006e8a:	0010      	movs	r0, r2
 8006e8c:	f007 f8c2 	bl	800e014 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e90:	4b06      	ldr	r3, [pc, #24]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e96:	2180      	movs	r1, #128	@ 0x80
 8006e98:	03c9      	lsls	r1, r1, #15
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006e9e:	46c0      	nop			@ (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b00b      	add	sp, #44	@ 0x2c
 8006ea4:	bd90      	pop	{r4, r7, pc}
 8006ea6:	46c0      	nop			@ (mov r8, r8)
 8006ea8:	40005400 	.word	0x40005400
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	50000400 	.word	0x50000400
 8006eb4:	20000dc4 	.word	0x20000dc4
 8006eb8:	40020030 	.word	0x40020030
 8006ebc:	20000e0c 	.word	0x20000e0c
 8006ec0:	4002001c 	.word	0x4002001c
 8006ec4:	40005800 	.word	0x40005800

08006ec8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006ecc:	4b10      	ldr	r3, [pc, #64]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ece:	4a11      	ldr	r2, [pc, #68]	@ (8006f14 <MX_I2S2_Init+0x4c>)
 8006ed0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8006ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ed4:	22c0      	movs	r2, #192	@ 0xc0
 8006ed6:	0092      	lsls	r2, r2, #2
 8006ed8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8006eec:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006eee:	22fa      	movs	r2, #250	@ 0xfa
 8006ef0:	0192      	lsls	r2, r2, #6
 8006ef2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006efa:	4b05      	ldr	r3, [pc, #20]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006efc:	0018      	movs	r0, r3
 8006efe:	f009 feb3 	bl	8010c68 <HAL_I2S_Init>
 8006f02:	1e03      	subs	r3, r0, #0
 8006f04:	d001      	beq.n	8006f0a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8006f06:	f000 faa7 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006f0a:	46c0      	nop			@ (mov r8, r8)
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000e54 	.word	0x20000e54
 8006f14:	40003800 	.word	0x40003800

08006f18 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b089      	sub	sp, #36	@ 0x24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f20:	240c      	movs	r4, #12
 8006f22:	193b      	adds	r3, r7, r4
 8006f24:	0018      	movs	r0, r3
 8006f26:	2314      	movs	r3, #20
 8006f28:	001a      	movs	r2, r3
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f016 ff42 	bl	801ddb4 <memset>
  if(i2sHandle->Instance==SPI2)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2d      	ldr	r2, [pc, #180]	@ (8006fec <HAL_I2S_MspInit+0xd4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d154      	bne.n	8006fe4 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	01c9      	lsls	r1, r1, #7
 8006f44:	430a      	orrs	r2, r1
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f48:	4b29      	ldr	r3, [pc, #164]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4c:	4b28      	ldr	r3, [pc, #160]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f4e:	2102      	movs	r1, #2
 8006f50:	430a      	orrs	r2, r1
 8006f52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006f54:	4b26      	ldr	r3, [pc, #152]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	2202      	movs	r2, #2
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006f60:	193b      	adds	r3, r7, r4
 8006f62:	22b0      	movs	r2, #176	@ 0xb0
 8006f64:	0212      	lsls	r2, r2, #8
 8006f66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f68:	0021      	movs	r1, r4
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f70:	187b      	adds	r3, r7, r1
 8006f72:	2200      	movs	r2, #0
 8006f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	2200      	movs	r2, #0
 8006f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006f7c:	187b      	adds	r3, r7, r1
 8006f7e:	2200      	movs	r2, #0
 8006f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f82:	187b      	adds	r3, r7, r1
 8006f84:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff4 <HAL_I2S_MspInit+0xdc>)
 8006f86:	0019      	movs	r1, r3
 8006f88:	0010      	movs	r0, r2
 8006f8a:	f007 f843 	bl	800e014 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006f90:	4a1a      	ldr	r2, [pc, #104]	@ (8006ffc <HAL_I2S_MspInit+0xe4>)
 8006f92:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006f94:	4b18      	ldr	r3, [pc, #96]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006f96:	2202      	movs	r2, #2
 8006f98:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f9a:	4b17      	ldr	r3, [pc, #92]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fa0:	4b15      	ldr	r3, [pc, #84]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fa6:	4b14      	ldr	r3, [pc, #80]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fa8:	2280      	movs	r2, #128	@ 0x80
 8006faa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006fac:	4b12      	ldr	r3, [pc, #72]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fae:	2280      	movs	r2, #128	@ 0x80
 8006fb0:	0052      	lsls	r2, r2, #1
 8006fb2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006fb4:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fb6:	2280      	movs	r2, #128	@ 0x80
 8006fb8:	00d2      	lsls	r2, r2, #3
 8006fba:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f006 fc06 	bl	800d7dc <HAL_DMA_Init>
 8006fd0:	1e03      	subs	r3, r0, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006fd4:	f000 fa40 	bl	8007458 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a07      	ldr	r2, [pc, #28]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fde:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006fe4:	46c0      	nop			@ (mov r8, r8)
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b009      	add	sp, #36	@ 0x24
 8006fea:	bd90      	pop	{r4, r7, pc}
 8006fec:	40003800 	.word	0x40003800
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	50000400 	.word	0x50000400
 8006ff8:	20000e90 	.word	0x20000e90
 8006ffc:	40020044 	.word	0x40020044

08007000 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  testDone = true;
 8007004:	4b1e      	ldr	r3, [pc, #120]	@ (8007080 <SetTestDone+0x80>)
 8007006:	2201      	movs	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 800700a:	23fa      	movs	r3, #250	@ 0xfa
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	0018      	movs	r0, r3
 8007010:	f005 ff46 	bl	800cea0 <HAL_Delay>
  SetDBLED(false, false, true);
 8007014:	2201      	movs	r2, #1
 8007016:	2100      	movs	r1, #0
 8007018:	2000      	movs	r0, #0
 800701a:	f004 fc31 	bl	800b880 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 800701e:	4a19      	ldr	r2, [pc, #100]	@ (8007084 <SetTestDone+0x84>)
 8007020:	23fa      	movs	r3, #250	@ 0xfa
 8007022:	0119      	lsls	r1, r3, #4
 8007024:	23fa      	movs	r3, #250	@ 0xfa
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	0018      	movs	r0, r3
 800702a:	f004 fbf5 	bl	800b818 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 800702e:	4a15      	ldr	r2, [pc, #84]	@ (8007084 <SetTestDone+0x84>)
 8007030:	23fa      	movs	r3, #250	@ 0xfa
 8007032:	0119      	lsls	r1, r3, #4
 8007034:	23fa      	movs	r3, #250	@ 0xfa
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	0018      	movs	r0, r3
 800703a:	f004 fc6b 	bl	800b914 <SetVocLED>
  HAL_Delay(1000);
 800703e:	23fa      	movs	r3, #250	@ 0xfa
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	0018      	movs	r0, r3
 8007044:	f005 ff2c 	bl	800cea0 <HAL_Delay>
  SetDBLED(false, false, false);
 8007048:	2200      	movs	r2, #0
 800704a:	2100      	movs	r1, #0
 800704c:	2000      	movs	r0, #0
 800704e:	f004 fc17 	bl	800b880 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007052:	23fa      	movs	r3, #250	@ 0xfa
 8007054:	011a      	lsls	r2, r3, #4
 8007056:	23fa      	movs	r3, #250	@ 0xfa
 8007058:	0119      	lsls	r1, r3, #4
 800705a:	23fa      	movs	r3, #250	@ 0xfa
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	0018      	movs	r0, r3
 8007060:	f004 fbda 	bl	800b818 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007064:	23fa      	movs	r3, #250	@ 0xfa
 8007066:	011a      	lsls	r2, r3, #4
 8007068:	23fa      	movs	r3, #250	@ 0xfa
 800706a:	0119      	lsls	r1, r3, #4
 800706c:	23fa      	movs	r3, #250	@ 0xfa
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	0018      	movs	r0, r3
 8007072:	f004 fc4f 	bl	800b914 <SetVocLED>
  InitDone();
 8007076:	f004 fb79 	bl	800b76c <InitDone>
}
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000ed8 	.word	0x20000ed8
 8007084:	00000bb8 	.word	0x00000bb8

08007088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800708c:	f005 fe98 	bl	800cdc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007090:	f000 f910 	bl	80072b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007094:	f7ff fc2c 	bl	80068f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8007098:	f7ff fa76 	bl	8006588 <MX_DMA_Init>
  MX_I2C1_Init();
 800709c:	f7ff fdba 	bl	8006c14 <MX_I2C1_Init>
  MX_I2S2_Init();
 80070a0:	f7ff ff12 	bl	8006ec8 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80070a4:	f005 f964 	bl	800c370 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80070a8:	f7ff fdf4 	bl	8006c94 <MX_I2C2_Init>
  MX_TIM2_Init();
 80070ac:	f004 ff58 	bl	800bf60 <MX_TIM2_Init>
  MX_TIM3_Init();
 80070b0:	f004 ffca 	bl	800c048 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80070b4:	f005 f990 	bl	800c3d8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80070b8:	f7ff f9b4 	bl	8006424 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80070bc:	f013 fc88 	bl	801a9d0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80070c0:	f000 ff82 	bl	8007fc8 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80070c4:	f005 f91e 	bl	800c304 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80070c8:	f005 f83c 	bl	800c144 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80070cc:	4a5e      	ldr	r2, [pc, #376]	@ (8007248 <main+0x1c0>)
 80070ce:	4b5f      	ldr	r3, [pc, #380]	@ (800724c <main+0x1c4>)
 80070d0:	0011      	movs	r1, r2
 80070d2:	0018      	movs	r0, r3
 80070d4:	f7ff fd22 	bl	8006b1c <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80070d8:	f7fe ff46 	bl	8005f68 <UserButton_Pressed>
 80070dc:	1e03      	subs	r3, r0, #0
 80070de:	d004      	beq.n	80070ea <main+0x62>
    EnableESPProg();
 80070e0:	f013 fd46 	bl	801ab70 <EnableESPProg>
    ESP_Programming = true;
 80070e4:	4b5a      	ldr	r3, [pc, #360]	@ (8007250 <main+0x1c8>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 80070ea:	2003      	movs	r0, #3
 80070ec:	f005 fb9c 	bl	800c828 <SetVerboseLevel>
  BinaryReleaseInfo();
 80070f0:	f005 fbb2 	bl	800c858 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80070f4:	4957      	ldr	r1, [pc, #348]	@ (8007254 <main+0x1cc>)
 80070f6:	4b58      	ldr	r3, [pc, #352]	@ (8007258 <main+0x1d0>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	0018      	movs	r0, r3
 80070fc:	f00d ffce 	bl	801509c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007100:	4b56      	ldr	r3, [pc, #344]	@ (800725c <main+0x1d4>)
 8007102:	0018      	movs	r0, r3
 8007104:	f7ff f980 	bl	8006408 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007108:	4a55      	ldr	r2, [pc, #340]	@ (8007260 <main+0x1d8>)
 800710a:	4956      	ldr	r1, [pc, #344]	@ (8007264 <main+0x1dc>)
 800710c:	4856      	ldr	r0, [pc, #344]	@ (8007268 <main+0x1e0>)
 800710e:	230b      	movs	r3, #11
 8007110:	f003 fca2 	bl	800aa58 <soundInit>
 8007114:	0003      	movs	r3, r0
 8007116:	001a      	movs	r2, r3
 8007118:	2301      	movs	r3, #1
 800711a:	4053      	eors	r3, r2
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 8007122:	4a52      	ldr	r2, [pc, #328]	@ (800726c <main+0x1e4>)
 8007124:	4b52      	ldr	r3, [pc, #328]	@ (8007270 <main+0x1e8>)
 8007126:	21db      	movs	r1, #219	@ 0xdb
 8007128:	0018      	movs	r0, r3
 800712a:	f005 fbc7 	bl	800c8bc <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 800712e:	4b51      	ldr	r3, [pc, #324]	@ (8007274 <main+0x1ec>)
 8007130:	4a51      	ldr	r2, [pc, #324]	@ (8007278 <main+0x1f0>)
 8007132:	494c      	ldr	r1, [pc, #304]	@ (8007264 <main+0x1dc>)
 8007134:	4851      	ldr	r0, [pc, #324]	@ (800727c <main+0x1f4>)
 8007136:	f7ff fb57 	bl	80067e8 <Gadget_Init>
  Debug("Clock init done");
 800713a:	4a51      	ldr	r2, [pc, #324]	@ (8007280 <main+0x1f8>)
 800713c:	4b51      	ldr	r3, [pc, #324]	@ (8007284 <main+0x1fc>)
 800713e:	0019      	movs	r1, r3
 8007140:	2003      	movs	r0, #3
 8007142:	f005 fb07 	bl	800c754 <CreateLine>
  if (!probe_sen5x()) {
 8007146:	f000 ffe5 	bl	8008114 <probe_sen5x>
 800714a:	1e03      	subs	r3, r0, #0
 800714c:	d10a      	bne.n	8007164 <main+0xdc>
    sen5x_Present = true; // not present
 800714e:	4b4e      	ldr	r3, [pc, #312]	@ (8007288 <main+0x200>)
 8007150:	2201      	movs	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
    sen5x_Power_Off();      // switch off buck converter
 8007154:	f000 ffd0 	bl	80080f8 <sen5x_Power_Off>
    Debug("sen5x sensor not detected, polling disabled.");
 8007158:	4a4c      	ldr	r2, [pc, #304]	@ (800728c <main+0x204>)
 800715a:	4b4a      	ldr	r3, [pc, #296]	@ (8007284 <main+0x1fc>)
 800715c:	0019      	movs	r1, r3
 800715e:	2003      	movs	r0, #3
 8007160:	f005 faf8 	bl	800c754 <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007164:	4b4a      	ldr	r3, [pc, #296]	@ (8007290 <main+0x208>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d019      	beq.n	80071a0 <main+0x118>
 800716c:	4b38      	ldr	r3, [pc, #224]	@ (8007250 <main+0x1c8>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2201      	movs	r2, #1
 8007172:	4053      	eors	r3, r2
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d012      	beq.n	80071a0 <main+0x118>
 800717a:	4b46      	ldr	r3, [pc, #280]	@ (8007294 <main+0x20c>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	4053      	eors	r3, r2
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <main+0x118>
      MeasurementBusy = UpkeepGadget();
 8007188:	f7ff fb5c 	bl	8006844 <UpkeepGadget>
 800718c:	0003      	movs	r3, r0
 800718e:	001a      	movs	r2, r3
 8007190:	4b41      	ldr	r3, [pc, #260]	@ (8007298 <main+0x210>)
 8007192:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007194:	f7fd ff96 	bl	80050c4 <ESP_Upkeep>
 8007198:	0003      	movs	r3, r0
 800719a:	001a      	movs	r2, r3
 800719c:	4b3f      	ldr	r3, [pc, #252]	@ (800729c <main+0x214>)
 800719e:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80071a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007290 <main+0x208>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2201      	movs	r2, #1
 80071a6:	4053      	eors	r3, r2
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00f      	beq.n	80071ce <main+0x146>
 80071ae:	4b28      	ldr	r3, [pc, #160]	@ (8007250 <main+0x1c8>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2201      	movs	r2, #1
 80071b4:	4053      	eors	r3, r2
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <main+0x146>
 80071bc:	4b35      	ldr	r3, [pc, #212]	@ (8007294 <main+0x20c>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2201      	movs	r2, #1
 80071c2:	4053      	eors	r3, r2
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <main+0x146>
      Gadget_Test();
 80071ca:	f7ff fb33 	bl	8006834 <Gadget_Test>
    }
    Status_Upkeep();
 80071ce:	f004 fd71 	bl	800bcb4 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 80071d2:	4b33      	ldr	r3, [pc, #204]	@ (80072a0 <main+0x218>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f005 fa66 	bl	800c6a8 <TimestampIsReached>
 80071dc:	1e03      	subs	r3, r0, #0
 80071de:	d00c      	beq.n	80071fa <main+0x172>
      charge = Battery_Upkeep();
 80071e0:	f004 fd6f 	bl	800bcc2 <Battery_Upkeep>
 80071e4:	0003      	movs	r3, r0
 80071e6:	001a      	movs	r2, r3
 80071e8:	4b2e      	ldr	r3, [pc, #184]	@ (80072a4 <main+0x21c>)
 80071ea:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 80071ec:	f005 fe4e 	bl	800ce8c <HAL_GetTick>
 80071f0:	0003      	movs	r3, r0
 80071f2:	4a2d      	ldr	r2, [pc, #180]	@ (80072a8 <main+0x220>)
 80071f4:	189a      	adds	r2, r3, r2
 80071f6:	4b2a      	ldr	r3, [pc, #168]	@ (80072a0 <main+0x218>)
 80071f8:	601a      	str	r2, [r3, #0]
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 80071fa:	4b2a      	ldr	r3, [pc, #168]	@ (80072a4 <main+0x21c>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d107      	bne.n	8007212 <main+0x18a>
 8007202:	4b26      	ldr	r3, [pc, #152]	@ (800729c <main+0x214>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b09      	cmp	r3, #9
 8007208:	d103      	bne.n	8007212 <main+0x18a>
      batteryEmpty = true;
 800720a:	4b22      	ldr	r3, [pc, #136]	@ (8007294 <main+0x20c>)
 800720c:	2201      	movs	r2, #1
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	e002      	b.n	8007218 <main+0x190>
    }
    else{
      batteryEmpty = false;
 8007212:	4b20      	ldr	r3, [pc, #128]	@ (8007294 <main+0x20c>)
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
    }
    if(charge == BATTERY_FULL){

    }
    if(TimestampIsReached(timeReadTimer)){
 8007218:	4b24      	ldr	r3, [pc, #144]	@ (80072ac <main+0x224>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	0018      	movs	r0, r3
 800721e:	f005 fa43 	bl	800c6a8 <TimestampIsReached>
 8007222:	1e03      	subs	r3, r0, #0
 8007224:	d008      	beq.n	8007238 <main+0x1b0>
      UpdateSystemUptime();
 8007226:	f7fe ff0d 	bl	8006044 <UpdateSystemUptime>
      timeReadTimer  = HAL_GetTick() + 30000;
 800722a:	f005 fe2f 	bl	800ce8c <HAL_GetTick>
 800722e:	0003      	movs	r3, r0
 8007230:	4a1f      	ldr	r2, [pc, #124]	@ (80072b0 <main+0x228>)
 8007232:	189a      	adds	r2, r3, r2
 8007234:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <main+0x224>)
 8007236:	601a      	str	r2, [r3, #0]
    }

    if(sen5x_Present) {
 8007238:	4b13      	ldr	r3, [pc, #76]	@ (8007288 <main+0x200>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d091      	beq.n	8007164 <main+0xdc>
      sen5x_statemachine();
 8007240:	f001 fa48 	bl	80086d4 <sen5x_statemachine>
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007244:	e78e      	b.n	8007164 <main+0xdc>
 8007246:	46c0      	nop			@ (mov r8, r8)
 8007248:	20002174 	.word	0x20002174
 800724c:	20002134 	.word	0x20002134
 8007250:	20000ed9 	.word	0x20000ed9
 8007254:	20000eec 	.word	0x20000eec
 8007258:	200022ac 	.word	0x200022ac
 800725c:	2000119c 	.word	0x2000119c
 8007260:	200021b4 	.word	0x200021b4
 8007264:	20000e54 	.word	0x20000e54
 8007268:	20000e90 	.word	0x20000e90
 800726c:	0802183c 	.word	0x0802183c
 8007270:	080225c0 	.word	0x080225c0
 8007274:	20000cbc 	.word	0x20000cbc
 8007278:	20002364 	.word	0x20002364
 800727c:	20000d1c 	.word	0x20000d1c
 8007280:	08021850 	.word	0x08021850
 8007284:	08021860 	.word	0x08021860
 8007288:	20000edc 	.word	0x20000edc
 800728c:	08021864 	.word	0x08021864
 8007290:	20000ed8 	.word	0x20000ed8
 8007294:	20000eda 	.word	0x20000eda
 8007298:	20000edb 	.word	0x20000edb
 800729c:	20000ee9 	.word	0x20000ee9
 80072a0:	20000ee0 	.word	0x20000ee0
 80072a4:	20000ee8 	.word	0x20000ee8
 80072a8:	0000ea60 	.word	0x0000ea60
 80072ac:	20000ee4 	.word	0x20000ee4
 80072b0:	00007530 	.word	0x00007530

080072b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b09d      	sub	sp, #116	@ 0x74
 80072b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072ba:	2438      	movs	r4, #56	@ 0x38
 80072bc:	193b      	adds	r3, r7, r4
 80072be:	0018      	movs	r0, r3
 80072c0:	2338      	movs	r3, #56	@ 0x38
 80072c2:	001a      	movs	r2, r3
 80072c4:	2100      	movs	r1, #0
 80072c6:	f016 fd75 	bl	801ddb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072ca:	2324      	movs	r3, #36	@ 0x24
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	0018      	movs	r0, r3
 80072d0:	2314      	movs	r3, #20
 80072d2:	001a      	movs	r2, r3
 80072d4:	2100      	movs	r1, #0
 80072d6:	f016 fd6d 	bl	801ddb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072da:	003b      	movs	r3, r7
 80072dc:	0018      	movs	r0, r3
 80072de:	2324      	movs	r3, #36	@ 0x24
 80072e0:	001a      	movs	r2, r3
 80072e2:	2100      	movs	r1, #0
 80072e4:	f016 fd66 	bl	801ddb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80072e8:	4b34      	ldr	r3, [pc, #208]	@ (80073bc <SystemClock_Config+0x108>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a34      	ldr	r2, [pc, #208]	@ (80073c0 <SystemClock_Config+0x10c>)
 80072ee:	401a      	ands	r2, r3
 80072f0:	4b32      	ldr	r3, [pc, #200]	@ (80073bc <SystemClock_Config+0x108>)
 80072f2:	2180      	movs	r1, #128	@ 0x80
 80072f4:	0109      	lsls	r1, r1, #4
 80072f6:	430a      	orrs	r2, r1
 80072f8:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80072fa:	f00b fe19 	bl	8012f30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80072fe:	4b31      	ldr	r3, [pc, #196]	@ (80073c4 <SystemClock_Config+0x110>)
 8007300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007302:	4a2f      	ldr	r2, [pc, #188]	@ (80073c0 <SystemClock_Config+0x10c>)
 8007304:	401a      	ands	r2, r3
 8007306:	4b2f      	ldr	r3, [pc, #188]	@ (80073c4 <SystemClock_Config+0x110>)
 8007308:	2180      	movs	r1, #128	@ 0x80
 800730a:	0149      	lsls	r1, r1, #5
 800730c:	430a      	orrs	r2, r1
 800730e:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007310:	193b      	adds	r3, r7, r4
 8007312:	2226      	movs	r2, #38	@ 0x26
 8007314:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007316:	193b      	adds	r3, r7, r4
 8007318:	2280      	movs	r2, #128	@ 0x80
 800731a:	0052      	lsls	r2, r2, #1
 800731c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800731e:	0021      	movs	r1, r4
 8007320:	187b      	adds	r3, r7, r1
 8007322:	2201      	movs	r2, #1
 8007324:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007326:	187b      	adds	r3, r7, r1
 8007328:	2210      	movs	r2, #16
 800732a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800732c:	187b      	adds	r3, r7, r1
 800732e:	2201      	movs	r2, #1
 8007330:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007332:	187b      	adds	r3, r7, r1
 8007334:	2200      	movs	r2, #0
 8007336:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007338:	187b      	adds	r3, r7, r1
 800733a:	0018      	movs	r0, r3
 800733c:	f00b fe06 	bl	8012f4c <HAL_RCC_OscConfig>
 8007340:	1e03      	subs	r3, r0, #0
 8007342:	d001      	beq.n	8007348 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007344:	f000 f888 	bl	8007458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007348:	2124      	movs	r1, #36	@ 0x24
 800734a:	187b      	adds	r3, r7, r1
 800734c:	220f      	movs	r2, #15
 800734e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007350:	187b      	adds	r3, r7, r1
 8007352:	2201      	movs	r2, #1
 8007354:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007356:	187b      	adds	r3, r7, r1
 8007358:	2200      	movs	r2, #0
 800735a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800735c:	187b      	adds	r3, r7, r1
 800735e:	2200      	movs	r2, #0
 8007360:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007362:	187b      	adds	r3, r7, r1
 8007364:	2200      	movs	r2, #0
 8007366:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007368:	187b      	adds	r3, r7, r1
 800736a:	2100      	movs	r1, #0
 800736c:	0018      	movs	r0, r3
 800736e:	f00c f9c1 	bl	80136f4 <HAL_RCC_ClockConfig>
 8007372:	1e03      	subs	r3, r0, #0
 8007374:	d001      	beq.n	800737a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007376:	f000 f86f 	bl	8007458 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800737a:	003b      	movs	r3, r7
 800737c:	226d      	movs	r2, #109	@ 0x6d
 800737e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007380:	003b      	movs	r3, r7
 8007382:	2200      	movs	r2, #0
 8007384:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007386:	003b      	movs	r3, r7
 8007388:	2200      	movs	r2, #0
 800738a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800738c:	003b      	movs	r3, r7
 800738e:	2200      	movs	r2, #0
 8007390:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007392:	003b      	movs	r3, r7
 8007394:	2280      	movs	r2, #128	@ 0x80
 8007396:	0252      	lsls	r2, r2, #9
 8007398:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800739a:	003b      	movs	r3, r7
 800739c:	2280      	movs	r2, #128	@ 0x80
 800739e:	04d2      	lsls	r2, r2, #19
 80073a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80073a2:	003b      	movs	r3, r7
 80073a4:	0018      	movs	r0, r3
 80073a6:	f00c fbc9 	bl	8013b3c <HAL_RCCEx_PeriphCLKConfig>
 80073aa:	1e03      	subs	r3, r0, #0
 80073ac:	d001      	beq.n	80073b2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80073ae:	f000 f853 	bl	8007458 <Error_Handler>
  }
}
 80073b2:	46c0      	nop			@ (mov r8, r8)
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b01d      	add	sp, #116	@ 0x74
 80073b8:	bd90      	pop	{r4, r7, pc}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	40007000 	.word	0x40007000
 80073c0:	ffffe7ff 	.word	0xffffe7ff
 80073c4:	40021000 	.word	0x40021000

080073c8 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	000a      	movs	r2, r1
 80073d2:	1cbb      	adds	r3, r7, #2
 80073d4:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 80073d6:	4c06      	ldr	r4, [pc, #24]	@ (80073f0 <printString+0x28>)
 80073d8:	1cbb      	adds	r3, r7, #2
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4805      	ldr	r0, [pc, #20]	@ (80073f4 <printString+0x2c>)
 80073e0:	0023      	movs	r3, r4
 80073e2:	f00d fdbb 	bl	8014f5c <HAL_UART_Transmit>
}
 80073e6:	46c0      	nop			@ (mov r8, r8)
 80073e8:	46bd      	mov	sp, r7
 80073ea:	b003      	add	sp, #12
 80073ec:	bd90      	pop	{r4, r7, pc}
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	0000ffff 	.word	0x0000ffff
 80073f4:	200022ac 	.word	0x200022ac

080073f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007400:	4911      	ldr	r1, [pc, #68]	@ (8007448 <HAL_UART_RxCpltCallback+0x50>)
 8007402:	4b12      	ldr	r3, [pc, #72]	@ (800744c <HAL_UART_RxCpltCallback+0x54>)
 8007404:	2201      	movs	r2, #1
 8007406:	0018      	movs	r0, r3
 8007408:	f00d fe48 	bl	801509c <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 800740c:	4b0e      	ldr	r3, [pc, #56]	@ (8007448 <HAL_UART_RxCpltCallback+0x50>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b3f      	cmp	r3, #63	@ 0x3f
 8007412:	d002      	beq.n	800741a <HAL_UART_RxCpltCallback+0x22>
 8007414:	2b74      	cmp	r3, #116	@ 0x74
 8007416:	d003      	beq.n	8007420 <HAL_UART_RxCpltCallback+0x28>
 8007418:	e005      	b.n	8007426 <HAL_UART_RxCpltCallback+0x2e>

  case (uint8_t)'?':
    showTime();
 800741a:	f7fe fdb5 	bl	8005f88 <showTime>
    break;
 800741e:	e009      	b.n	8007434 <HAL_UART_RxCpltCallback+0x3c>
  case (uint8_t)'t':
    forceNTPupdate();
 8007420:	f7fc f9bc 	bl	800379c <forceNTPupdate>
  break;
 8007424:	e006      	b.n	8007434 <HAL_UART_RxCpltCallback+0x3c>
  default:
     Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007426:	4a0a      	ldr	r2, [pc, #40]	@ (8007450 <HAL_UART_RxCpltCallback+0x58>)
 8007428:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <HAL_UART_RxCpltCallback+0x5c>)
 800742a:	0019      	movs	r1, r3
 800742c:	2001      	movs	r0, #1
 800742e:	f005 f991 	bl	800c754 <CreateLine>
  break;
 8007432:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007434:	4904      	ldr	r1, [pc, #16]	@ (8007448 <HAL_UART_RxCpltCallback+0x50>)
 8007436:	4b05      	ldr	r3, [pc, #20]	@ (800744c <HAL_UART_RxCpltCallback+0x54>)
 8007438:	2201      	movs	r2, #1
 800743a:	0018      	movs	r0, r3
 800743c:	f00d fe2e 	bl	801509c <HAL_UART_Receive_IT>
}
 8007440:	46c0      	nop			@ (mov r8, r8)
 8007442:	46bd      	mov	sp, r7
 8007444:	b002      	add	sp, #8
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20000eec 	.word	0x20000eec
 800744c:	200022ac 	.word	0x200022ac
 8007450:	08021894 	.word	0x08021894
 8007454:	080218c4 	.word	0x080218c4

08007458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 800745c:	4a04      	ldr	r2, [pc, #16]	@ (8007470 <Error_Handler+0x18>)
 800745e:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <Error_Handler+0x1c>)
 8007460:	0019      	movs	r1, r3
 8007462:	2001      	movs	r0, #1
 8007464:	f005 f976 	bl	800c754 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007468:	b672      	cpsid	i
}
 800746a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 800746c:	46c0      	nop			@ (mov r8, r8)
 800746e:	e7fd      	b.n	800746c <Error_Handler+0x14>
 8007470:	080218c8 	.word	0x080218c8
 8007474:	080218c4 	.word	0x080218c4

08007478 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 800747c:	f7ff fbab 	bl	8006bd6 <HT_StartMeasurement>
}
 8007480:	46c0      	nop			@ (mov r8, r8)
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 800748c:	4a04      	ldr	r2, [pc, #16]	@ (80074a0 <HT_IsMeasurementDoneWrapper+0x18>)
 800748e:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <HT_IsMeasurementDoneWrapper+0x1c>)
 8007490:	0011      	movs	r1, r2
 8007492:	0018      	movs	r0, r3
 8007494:	f7ff fba6 	bl	8006be4 <HT_GetMeasurementValues>
 8007498:	0003      	movs	r3, r0
}
 800749a:	0018      	movs	r0, r3
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000f00 	.word	0x20000f00
 80074a4:	20000efc 	.word	0x20000efc

080074a8 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 80074ac:	f7ff fa03 	bl	80068b6 <Gas_StartMeasurement>
}
 80074b0:	46c0      	nop			@ (mov r8, r8)
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 80074bc:	4b03      	ldr	r3, [pc, #12]	@ (80074cc <VOC_IsMeasurementDoneWrapper+0x14>)
 80074be:	0018      	movs	r0, r3
 80074c0:	f7ff fa00 	bl	80068c4 <Gas_GetMeasurementValues>
 80074c4:	0003      	movs	r3, r0
}
 80074c6:	0018      	movs	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000f04 	.word	0x20000f04

080074d0 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
}
 80074d4:	46c0      	nop			@ (mov r8, r8)
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80074da:	b580      	push	{r7, lr}
 80074dc:	af00      	add	r7, sp, #0
  return true;
 80074de:	2301      	movs	r3, #1
}
 80074e0:	0018      	movs	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 80074e6:	b580      	push	{r7, lr}
 80074e8:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 80074ea:	f000 fd1b 	bl	8007f24 <MIC_TestMeasurementDone>
 80074ee:	0003      	movs	r3, r0
}
 80074f0:	0018      	movs	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <testInit>:

void testInit(){
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80074fc:	4b07      	ldr	r3, [pc, #28]	@ (800751c <testInit+0x24>)
 80074fe:	2200      	movs	r2, #0
 8007500:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <testInit+0x24>)
 8007504:	2200      	movs	r2, #0
 8007506:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 8007508:	4b04      	ldr	r3, [pc, #16]	@ (800751c <testInit+0x24>)
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 800750e:	4b03      	ldr	r3, [pc, #12]	@ (800751c <testInit+0x24>)
 8007510:	2200      	movs	r2, #0
 8007512:	705a      	strb	r2, [r3, #1]
}
 8007514:	46c0      	nop			@ (mov r8, r8)
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	20000f40 	.word	0x20000f40

08007520 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8007520:	b5b0      	push	{r4, r5, r7, lr}
 8007522:	b092      	sub	sp, #72	@ 0x48
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 800752c:	f7ff ffe4 	bl	80074f8 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8007530:	4b6e      	ldr	r3, [pc, #440]	@ (80076ec <Meas_Init+0x1cc>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d103      	bne.n	8007540 <Meas_Init+0x20>
 8007538:	4b6c      	ldr	r3, [pc, #432]	@ (80076ec <Meas_Init+0x1cc>)
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d068      	beq.n	8007612 <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	0018      	movs	r0, r3
 8007544:	f7fe f9a6 	bl	8005894 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8007548:	f7ff fb5c 	bl	8006c04 <HT_DeviceConnected>
 800754c:	0003      	movs	r3, r0
 800754e:	001a      	movs	r2, r3
 8007550:	2301      	movs	r3, #1
 8007552:	4053      	eors	r3, r2
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 800755a:	4a65      	ldr	r2, [pc, #404]	@ (80076f0 <Meas_Init+0x1d0>)
 800755c:	4b65      	ldr	r3, [pc, #404]	@ (80076f4 <Meas_Init+0x1d4>)
 800755e:	0019      	movs	r1, r3
 8007560:	2001      	movs	r0, #1
 8007562:	f005 f8f7 	bl	800c754 <CreateLine>
       MeasTest.HT_Tested = false;
 8007566:	4b64      	ldr	r3, [pc, #400]	@ (80076f8 <Meas_Init+0x1d8>)
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 800756c:	4b5f      	ldr	r3, [pc, #380]	@ (80076ec <Meas_Init+0x1cc>)
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	e008      	b.n	8007586 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8007574:	4b60      	ldr	r3, [pc, #384]	@ (80076f8 <Meas_Init+0x1d8>)
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 800757a:	4a60      	ldr	r2, [pc, #384]	@ (80076fc <Meas_Init+0x1dc>)
 800757c:	4b60      	ldr	r3, [pc, #384]	@ (8007700 <Meas_Init+0x1e0>)
 800757e:	0019      	movs	r1, r3
 8007580:	2003      	movs	r0, #3
 8007582:	f005 f8e7 	bl	800c754 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8007586:	f7ff f9aa 	bl	80068de <Gas_DeviceConnected>
 800758a:	0003      	movs	r3, r0
 800758c:	001a      	movs	r2, r3
 800758e:	2301      	movs	r3, #1
 8007590:	4053      	eors	r3, r2
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8007598:	4b57      	ldr	r3, [pc, #348]	@ (80076f8 <Meas_Init+0x1d8>)
 800759a:	2200      	movs	r2, #0
 800759c:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 800759e:	4a59      	ldr	r2, [pc, #356]	@ (8007704 <Meas_Init+0x1e4>)
 80075a0:	4b54      	ldr	r3, [pc, #336]	@ (80076f4 <Meas_Init+0x1d4>)
 80075a2:	0019      	movs	r1, r3
 80075a4:	2001      	movs	r0, #1
 80075a6:	f005 f8d5 	bl	800c754 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 80075aa:	4b50      	ldr	r3, [pc, #320]	@ (80076ec <Meas_Init+0x1cc>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	705a      	strb	r2, [r3, #1]
 80075b0:	e008      	b.n	80075c4 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 80075b2:	4b51      	ldr	r3, [pc, #324]	@ (80076f8 <Meas_Init+0x1d8>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 80075b8:	4a53      	ldr	r2, [pc, #332]	@ (8007708 <Meas_Init+0x1e8>)
 80075ba:	4b51      	ldr	r3, [pc, #324]	@ (8007700 <Meas_Init+0x1e0>)
 80075bc:	0019      	movs	r1, r3
 80075be:	2003      	movs	r0, #3
 80075c0:	f005 f8c8 	bl	800c754 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 80075c4:	4b4c      	ldr	r3, [pc, #304]	@ (80076f8 <Meas_Init+0x1d8>)
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <Meas_Init+0xc0>
 80075cc:	4b4a      	ldr	r3, [pc, #296]	@ (80076f8 <Meas_Init+0x1d8>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 80075d4:	2200      	movs	r2, #0
 80075d6:	2101      	movs	r1, #1
 80075d8:	2000      	movs	r0, #0
 80075da:	f004 f951 	bl	800b880 <SetDBLED>
 80075de:	e018      	b.n	8007612 <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 80075e0:	2200      	movs	r2, #0
 80075e2:	2100      	movs	r1, #0
 80075e4:	2001      	movs	r0, #1
 80075e6:	f004 f94b 	bl	800b880 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80075ea:	4b48      	ldr	r3, [pc, #288]	@ (800770c <Meas_Init+0x1ec>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	2101      	movs	r1, #1
 80075f0:	0018      	movs	r0, r3
 80075f2:	f006 feaa 	bl	800e34a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80075f6:	2380      	movs	r3, #128	@ 0x80
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	4844      	ldr	r0, [pc, #272]	@ (800770c <Meas_Init+0x1ec>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	0019      	movs	r1, r3
 8007600:	f006 fea3 	bl	800e34a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007604:	2380      	movs	r3, #128	@ 0x80
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4840      	ldr	r0, [pc, #256]	@ (800770c <Meas_Init+0x1ec>)
 800760a:	2201      	movs	r2, #1
 800760c:	0019      	movs	r1, r3
 800760e:	f006 fe9c 	bl	800e34a <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8007612:	4b36      	ldr	r3, [pc, #216]	@ (80076ec <Meas_Init+0x1cc>)
 8007614:	78db      	ldrb	r3, [r3, #3]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d008      	beq.n	800762c <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 800761a:	4a3d      	ldr	r2, [pc, #244]	@ (8007710 <Meas_Init+0x1f0>)
 800761c:	4b3d      	ldr	r3, [pc, #244]	@ (8007714 <Meas_Init+0x1f4>)
 800761e:	0019      	movs	r1, r3
 8007620:	2002      	movs	r0, #2
 8007622:	f005 f897 	bl	800c754 <CreateLine>
          enableMicrophone(true);
 8007626:	2001      	movs	r0, #1
 8007628:	f003 fa7e 	bl	800ab28 <enableMicrophone>

  }
  uint8_t offset = 0;
 800762c:	2547      	movs	r5, #71	@ 0x47
 800762e:	197b      	adds	r3, r7, r5
 8007630:	2200      	movs	r2, #0
 8007632:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8007634:	197b      	adds	r3, r7, r5
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	197a      	adds	r2, r7, r5
 800763a:	1c59      	adds	r1, r3, #1
 800763c:	7011      	strb	r1, [r2, #0]
 800763e:	4a2b      	ldr	r2, [pc, #172]	@ (80076ec <Meas_Init+0x1cc>)
 8007640:	7814      	ldrb	r4, [r2, #0]
 8007642:	4a35      	ldr	r2, [pc, #212]	@ (8007718 <Meas_Init+0x1f8>)
 8007644:	0119      	lsls	r1, r3, #4
 8007646:	4835      	ldr	r0, [pc, #212]	@ (800771c <Meas_Init+0x1fc>)
 8007648:	5088      	str	r0, [r1, r2]
 800764a:	4933      	ldr	r1, [pc, #204]	@ (8007718 <Meas_Init+0x1f8>)
 800764c:	011a      	lsls	r2, r3, #4
 800764e:	188a      	adds	r2, r1, r2
 8007650:	3204      	adds	r2, #4
 8007652:	4933      	ldr	r1, [pc, #204]	@ (8007720 <Meas_Init+0x200>)
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	4930      	ldr	r1, [pc, #192]	@ (8007718 <Meas_Init+0x1f8>)
 8007658:	011a      	lsls	r2, r3, #4
 800765a:	188a      	adds	r2, r1, r2
 800765c:	3208      	adds	r2, #8
 800765e:	4931      	ldr	r1, [pc, #196]	@ (8007724 <Meas_Init+0x204>)
 8007660:	6011      	str	r1, [r2, #0]
 8007662:	4a2d      	ldr	r2, [pc, #180]	@ (8007718 <Meas_Init+0x1f8>)
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	18d3      	adds	r3, r2, r3
 8007668:	330c      	adds	r3, #12
 800766a:	1c22      	adds	r2, r4, #0
 800766c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800766e:	197b      	adds	r3, r7, r5
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	197a      	adds	r2, r7, r5
 8007674:	1c59      	adds	r1, r3, #1
 8007676:	7011      	strb	r1, [r2, #0]
 8007678:	4a1c      	ldr	r2, [pc, #112]	@ (80076ec <Meas_Init+0x1cc>)
 800767a:	7854      	ldrb	r4, [r2, #1]
 800767c:	4a26      	ldr	r2, [pc, #152]	@ (8007718 <Meas_Init+0x1f8>)
 800767e:	0119      	lsls	r1, r3, #4
 8007680:	4829      	ldr	r0, [pc, #164]	@ (8007728 <Meas_Init+0x208>)
 8007682:	5088      	str	r0, [r1, r2]
 8007684:	4924      	ldr	r1, [pc, #144]	@ (8007718 <Meas_Init+0x1f8>)
 8007686:	011a      	lsls	r2, r3, #4
 8007688:	188a      	adds	r2, r1, r2
 800768a:	3204      	adds	r2, #4
 800768c:	4927      	ldr	r1, [pc, #156]	@ (800772c <Meas_Init+0x20c>)
 800768e:	6011      	str	r1, [r2, #0]
 8007690:	4921      	ldr	r1, [pc, #132]	@ (8007718 <Meas_Init+0x1f8>)
 8007692:	011a      	lsls	r2, r3, #4
 8007694:	188a      	adds	r2, r1, r2
 8007696:	3208      	adds	r2, #8
 8007698:	4925      	ldr	r1, [pc, #148]	@ (8007730 <Meas_Init+0x210>)
 800769a:	6011      	str	r1, [r2, #0]
 800769c:	4a1e      	ldr	r2, [pc, #120]	@ (8007718 <Meas_Init+0x1f8>)
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	18d3      	adds	r3, r2, r3
 80076a2:	330c      	adds	r3, #12
 80076a4:	1c22      	adds	r2, r4, #0
 80076a6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 80076a8:	197b      	adds	r3, r7, r5
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	197a      	adds	r2, r7, r5
 80076ae:	1c59      	adds	r1, r3, #1
 80076b0:	7011      	strb	r1, [r2, #0]
 80076b2:	4a0e      	ldr	r2, [pc, #56]	@ (80076ec <Meas_Init+0x1cc>)
 80076b4:	7894      	ldrb	r4, [r2, #2]
 80076b6:	4a18      	ldr	r2, [pc, #96]	@ (8007718 <Meas_Init+0x1f8>)
 80076b8:	0119      	lsls	r1, r3, #4
 80076ba:	481e      	ldr	r0, [pc, #120]	@ (8007734 <Meas_Init+0x214>)
 80076bc:	5088      	str	r0, [r1, r2]
 80076be:	4916      	ldr	r1, [pc, #88]	@ (8007718 <Meas_Init+0x1f8>)
 80076c0:	011a      	lsls	r2, r3, #4
 80076c2:	188a      	adds	r2, r1, r2
 80076c4:	3204      	adds	r2, #4
 80076c6:	491c      	ldr	r1, [pc, #112]	@ (8007738 <Meas_Init+0x218>)
 80076c8:	6011      	str	r1, [r2, #0]
 80076ca:	4913      	ldr	r1, [pc, #76]	@ (8007718 <Meas_Init+0x1f8>)
 80076cc:	011a      	lsls	r2, r3, #4
 80076ce:	188a      	adds	r2, r1, r2
 80076d0:	3208      	adds	r2, #8
 80076d2:	491a      	ldr	r1, [pc, #104]	@ (800773c <Meas_Init+0x21c>)
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	4a10      	ldr	r2, [pc, #64]	@ (8007718 <Meas_Init+0x1f8>)
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	18d3      	adds	r3, r2, r3
 80076dc:	330c      	adds	r3, #12
 80076de:	1c22      	adds	r2, r4, #0
 80076e0:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 80076e2:	46c0      	nop			@ (mov r8, r8)
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b012      	add	sp, #72	@ 0x48
 80076e8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ea:	46c0      	nop			@ (mov r8, r8)
 80076ec:	20000f3c 	.word	0x20000f3c
 80076f0:	080218f4 	.word	0x080218f4
 80076f4:	08021924 	.word	0x08021924
 80076f8:	20000f40 	.word	0x20000f40
 80076fc:	08021928 	.word	0x08021928
 8007700:	08021954 	.word	0x08021954
 8007704:	08021958 	.word	0x08021958
 8007708:	08021974 	.word	0x08021974
 800770c:	50000400 	.word	0x50000400
 8007710:	0802198c 	.word	0x0802198c
 8007714:	080219b0 	.word	0x080219b0
 8007718:	20000f0c 	.word	0x20000f0c
 800771c:	08007479 	.word	0x08007479
 8007720:	08007489 	.word	0x08007489
 8007724:	20000f08 	.word	0x20000f08
 8007728:	080074a9 	.word	0x080074a9
 800772c:	080074b9 	.word	0x080074b9
 8007730:	20000f09 	.word	0x20000f09
 8007734:	080074d1 	.word	0x080074d1
 8007738:	080074db 	.word	0x080074db
 800773c:	20000f0a 	.word	0x20000f0a

08007740 <StartMeasurements>:

void StartMeasurements(void) {
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007744:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <StartMeasurements+0x48>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	e015      	b.n	8007778 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 800774c:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <StartMeasurements+0x48>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4a0e      	ldr	r2, [pc, #56]	@ (800778c <StartMeasurements+0x4c>)
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	18d3      	adds	r3, r2, r3
 8007756:	330c      	adds	r3, #12
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d006      	beq.n	800776c <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 800775e:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <StartMeasurements+0x48>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	001a      	movs	r2, r3
 8007764:	4b09      	ldr	r3, [pc, #36]	@ (800778c <StartMeasurements+0x4c>)
 8007766:	0112      	lsls	r2, r2, #4
 8007768:	58d3      	ldr	r3, [r2, r3]
 800776a:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800776c:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <StartMeasurements+0x48>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	3301      	adds	r3, #1
 8007772:	b2da      	uxtb	r2, r3
 8007774:	4b04      	ldr	r3, [pc, #16]	@ (8007788 <StartMeasurements+0x48>)
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	4b03      	ldr	r3, [pc, #12]	@ (8007788 <StartMeasurements+0x48>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d9e5      	bls.n	800774c <StartMeasurements+0xc>
    }
  }
}
 8007780:	46c0      	nop			@ (mov r8, r8)
 8007782:	46c0      	nop			@ (mov r8, r8)
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000f44 	.word	0x20000f44
 800778c:	20000f0c 	.word	0x20000f0c

08007790 <Meas_Test>:

void Meas_Test(){
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007794:	4b23      	ldr	r3, [pc, #140]	@ (8007824 <Meas_Test+0x94>)
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	2201      	movs	r2, #1
 800779a:	4053      	eors	r3, r2
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <Meas_Test+0x16>
    ESP_WakeTest();
 80077a2:	f7fd fb79 	bl	8004e98 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 80077a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007824 <Meas_Test+0x94>)
 80077a8:	789b      	ldrb	r3, [r3, #2]
 80077aa:	2201      	movs	r2, #1
 80077ac:	4053      	eors	r3, r2
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01b      	beq.n	80077ec <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 80077b4:	f7ff fe97 	bl	80074e6 <MIC_IsTestMeasurementDoneWrapper>
 80077b8:	1e03      	subs	r3, r0, #0
 80077ba:	d00b      	beq.n	80077d4 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 80077bc:	4b19      	ldr	r3, [pc, #100]	@ (8007824 <Meas_Test+0x94>)
 80077be:	2201      	movs	r2, #1
 80077c0:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 80077c2:	23fa      	movs	r3, #250	@ 0xfa
 80077c4:	011a      	lsls	r2, r3, #4
 80077c6:	4918      	ldr	r1, [pc, #96]	@ (8007828 <Meas_Test+0x98>)
 80077c8:	23fa      	movs	r3, #250	@ 0xfa
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	0018      	movs	r0, r3
 80077ce:	f004 f823 	bl	800b818 <SetStatusLED>
 80077d2:	e00b      	b.n	80077ec <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 80077d4:	f003 f984 	bl	800aae0 <micSettlingComplete>
 80077d8:	1e03      	subs	r3, r0, #0
 80077da:	d007      	beq.n	80077ec <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 80077dc:	23fa      	movs	r3, #250	@ 0xfa
 80077de:	011a      	lsls	r2, r3, #4
 80077e0:	23fa      	movs	r3, #250	@ 0xfa
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	4810      	ldr	r0, [pc, #64]	@ (8007828 <Meas_Test+0x98>)
 80077e6:	0019      	movs	r1, r3
 80077e8:	f004 f816 	bl	800b818 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 80077ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <Meas_Test+0x94>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d013      	beq.n	800781c <Meas_Test+0x8c>
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <Meas_Test+0x94>)
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00f      	beq.n	800781c <Meas_Test+0x8c>
 80077fc:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <Meas_Test+0x94>)
 80077fe:	78db      	ldrb	r3, [r3, #3]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <Meas_Test+0x8c>
 8007804:	4b07      	ldr	r3, [pc, #28]	@ (8007824 <Meas_Test+0x94>)
 8007806:	789b      	ldrb	r3, [r3, #2]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d007      	beq.n	800781c <Meas_Test+0x8c>
    Info("Test completed");
 800780c:	4a07      	ldr	r2, [pc, #28]	@ (800782c <Meas_Test+0x9c>)
 800780e:	4b08      	ldr	r3, [pc, #32]	@ (8007830 <Meas_Test+0xa0>)
 8007810:	0019      	movs	r1, r3
 8007812:	2002      	movs	r0, #2
 8007814:	f004 ff9e 	bl	800c754 <CreateLine>
    SetTestDone();
 8007818:	f7ff fbf2 	bl	8007000 <SetTestDone>
  }
}
 800781c:	46c0      	nop			@ (mov r8, r8)
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	46c0      	nop			@ (mov r8, r8)
 8007824:	20000f40 	.word	0x20000f40
 8007828:	00000bb8 	.word	0x00000bb8
 800782c:	080219b4 	.word	0x080219b4
 8007830:	080219b0 	.word	0x080219b0

08007834 <ResetMeasurements>:
void ResetMeasurements(void) {
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8007838:	4b0b      	ldr	r3, [pc, #44]	@ (8007868 <ResetMeasurements+0x34>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 800783e:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <ResetMeasurements+0x34>)
 8007840:	2200      	movs	r2, #0
 8007842:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8007844:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <ResetMeasurements+0x34>)
 8007846:	2200      	movs	r2, #0
 8007848:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800784a:	4b07      	ldr	r3, [pc, #28]	@ (8007868 <ResetMeasurements+0x34>)
 800784c:	2200      	movs	r2, #0
 800784e:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8007850:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <ResetMeasurements+0x34>)
 8007852:	2200      	movs	r2, #0
 8007854:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8007856:	4b04      	ldr	r3, [pc, #16]	@ (8007868 <ResetMeasurements+0x34>)
 8007858:	2200      	movs	r2, #0
 800785a:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 800785c:	4b02      	ldr	r3, [pc, #8]	@ (8007868 <ResetMeasurements+0x34>)
 800785e:	2200      	movs	r2, #0
 8007860:	73da      	strb	r2, [r3, #15]
}
 8007862:	46c0      	nop			@ (mov r8, r8)
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000efc 	.word	0x20000efc

0800786c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007870:	4b18      	ldr	r3, [pc, #96]	@ (80078d4 <MeasurementsCompleted+0x68>)
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e024      	b.n	80078c2 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007878:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <MeasurementsCompleted+0x68>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4a16      	ldr	r2, [pc, #88]	@ (80078d8 <MeasurementsCompleted+0x6c>)
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	18d3      	adds	r3, r2, r3
 8007882:	330c      	adds	r3, #12
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d015      	beq.n	80078b6 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800788a:	4b12      	ldr	r3, [pc, #72]	@ (80078d4 <MeasurementsCompleted+0x68>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	4a12      	ldr	r2, [pc, #72]	@ (80078d8 <MeasurementsCompleted+0x6c>)
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	3304      	adds	r3, #4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4798      	blx	r3
 800789a:	1e03      	subs	r3, r0, #0
 800789c:	d009      	beq.n	80078b2 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <MeasurementsCompleted+0x68>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	4a0d      	ldr	r2, [pc, #52]	@ (80078d8 <MeasurementsCompleted+0x6c>)
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	18d3      	adds	r3, r2, r3
 80078a8:	3308      	adds	r3, #8
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2201      	movs	r2, #1
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	e001      	b.n	80078b6 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e00a      	b.n	80078cc <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80078b6:	4b07      	ldr	r3, [pc, #28]	@ (80078d4 <MeasurementsCompleted+0x68>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <MeasurementsCompleted+0x68>)
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	4b04      	ldr	r3, [pc, #16]	@ (80078d4 <MeasurementsCompleted+0x68>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d9d6      	bls.n	8007878 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 80078ca:	2301      	movs	r3, #1
}
 80078cc:	0018      	movs	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	46c0      	nop			@ (mov r8, r8)
 80078d4:	20000f44 	.word	0x20000f44
 80078d8:	20000f0c 	.word	0x20000f0c

080078dc <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 80078dc:	b590      	push	{r4, r7, lr}
 80078de:	b085      	sub	sp, #20
 80078e0:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 80078e2:	4b7d      	ldr	r3, [pc, #500]	@ (8007ad8 <Mic_Upkeep+0x1fc>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d100      	bne.n	80078ec <Mic_Upkeep+0x10>
 80078ea:	e0c0      	b.n	8007a6e <Mic_Upkeep+0x192>
 80078ec:	dd00      	ble.n	80078f0 <Mic_Upkeep+0x14>
 80078ee:	e0dd      	b.n	8007aac <Mic_Upkeep+0x1d0>
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d037      	beq.n	8007964 <Mic_Upkeep+0x88>
 80078f4:	dd00      	ble.n	80078f8 <Mic_Upkeep+0x1c>
 80078f6:	e0d9      	b.n	8007aac <Mic_Upkeep+0x1d0>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <Mic_Upkeep+0x26>
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d014      	beq.n	800792a <Mic_Upkeep+0x4e>
 8007900:	e0d4      	b.n	8007aac <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007902:	2001      	movs	r0, #1
 8007904:	f003 f910 	bl	800ab28 <enableMicrophone>
 8007908:	0003      	movs	r3, r0
 800790a:	001a      	movs	r2, r3
 800790c:	2301      	movs	r3, #1
 800790e:	4053      	eors	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8007916:	4a71      	ldr	r2, [pc, #452]	@ (8007adc <Mic_Upkeep+0x200>)
 8007918:	4b71      	ldr	r3, [pc, #452]	@ (8007ae0 <Mic_Upkeep+0x204>)
 800791a:	21d4      	movs	r1, #212	@ 0xd4
 800791c:	0018      	movs	r0, r3
 800791e:	f004 ffcd 	bl	800c8bc <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8007922:	4b6d      	ldr	r3, [pc, #436]	@ (8007ad8 <Mic_Upkeep+0x1fc>)
 8007924:	2201      	movs	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 8007928:	e0cf      	b.n	8007aca <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 800792a:	f003 f8d9 	bl	800aae0 <micSettlingComplete>
 800792e:	1e03      	subs	r3, r0, #0
 8007930:	d105      	bne.n	800793e <Mic_Upkeep+0x62>
 8007932:	4b6c      	ldr	r3, [pc, #432]	@ (8007ae4 <Mic_Upkeep+0x208>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d100      	bne.n	800793e <Mic_Upkeep+0x62>
 800793c:	e0c0      	b.n	8007ac0 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 800793e:	f003 f95d 	bl	800abfc <startSPLcalculation>
 8007942:	0003      	movs	r3, r0
 8007944:	001a      	movs	r2, r3
 8007946:	2301      	movs	r3, #1
 8007948:	4053      	eors	r3, r2
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 8007950:	4a62      	ldr	r2, [pc, #392]	@ (8007adc <Mic_Upkeep+0x200>)
 8007952:	4b63      	ldr	r3, [pc, #396]	@ (8007ae0 <Mic_Upkeep+0x204>)
 8007954:	21e0      	movs	r1, #224	@ 0xe0
 8007956:	0018      	movs	r0, r3
 8007958:	f004 ffb0 	bl	800c8bc <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800795c:	4b5e      	ldr	r3, [pc, #376]	@ (8007ad8 <Mic_Upkeep+0x1fc>)
 800795e:	2202      	movs	r2, #2
 8007960:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 8007962:	e0ad      	b.n	8007ac0 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 8007964:	4b60      	ldr	r3, [pc, #384]	@ (8007ae8 <Mic_Upkeep+0x20c>)
 8007966:	2201      	movs	r2, #1
 8007968:	2101      	movs	r1, #1
 800796a:	0018      	movs	r0, r3
 800796c:	f002 ff9a 	bl	800a8a4 <getSoundData>
 8007970:	1e03      	subs	r3, r0, #0
 8007972:	d100      	bne.n	8007976 <Mic_Upkeep+0x9a>
 8007974:	e0a6      	b.n	8007ac4 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 8007976:	f003 f893 	bl	800aaa0 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800797a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ae8 <Mic_Upkeep+0x20c>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007980:	4b59      	ldr	r3, [pc, #356]	@ (8007ae8 <Mic_Upkeep+0x20c>)
 8007982:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007984:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007986:	4b58      	ldr	r3, [pc, #352]	@ (8007ae8 <Mic_Upkeep+0x20c>)
 8007988:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800798a:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 800798c:	4b56      	ldr	r3, [pc, #344]	@ (8007ae8 <Mic_Upkeep+0x20c>)
 800798e:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007990:	4856      	ldr	r0, [pc, #344]	@ (8007aec <Mic_Upkeep+0x210>)
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	0023      	movs	r3, r4
 8007996:	f000 faf5 	bl	8007f84 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800799a:	4b53      	ldr	r3, [pc, #332]	@ (8007ae8 <Mic_Upkeep+0x20c>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	001a      	movs	r2, r3
 80079a0:	4b51      	ldr	r3, [pc, #324]	@ (8007ae8 <Mic_Upkeep+0x20c>)
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	4952      	ldr	r1, [pc, #328]	@ (8007af0 <Mic_Upkeep+0x214>)
 80079a6:	0038      	movs	r0, r7
 80079a8:	f016 f960 	bl	801dc6c <siprintf>

      dBValue = atof(dBbuffer);
 80079ac:	003b      	movs	r3, r7
 80079ae:	0018      	movs	r0, r3
 80079b0:	f014 fd6c 	bl	801c48c <atof>
 80079b4:	0002      	movs	r2, r0
 80079b6:	000b      	movs	r3, r1
 80079b8:	0010      	movs	r0, r2
 80079ba:	0019      	movs	r1, r3
 80079bc:	f7fb fd9a 	bl	80034f4 <__aeabi_d2f>
 80079c0:	1c02      	adds	r2, r0, #0
 80079c2:	4b4c      	ldr	r3, [pc, #304]	@ (8007af4 <Mic_Upkeep+0x218>)
 80079c4:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 80079c6:	4b4b      	ldr	r3, [pc, #300]	@ (8007af4 <Mic_Upkeep+0x218>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	494b      	ldr	r1, [pc, #300]	@ (8007af8 <Mic_Upkeep+0x21c>)
 80079cc:	1c18      	adds	r0, r3, #0
 80079ce:	f7f9 fae7 	bl	8000fa0 <__aeabi_fmul>
 80079d2:	1c03      	adds	r3, r0, #0
 80079d4:	1c18      	adds	r0, r3, #0
 80079d6:	f7fb fd45 	bl	8003464 <__aeabi_f2d>
 80079da:	2200      	movs	r2, #0
 80079dc:	4b47      	ldr	r3, [pc, #284]	@ (8007afc <Mic_Upkeep+0x220>)
 80079de:	f7f9 fe85 	bl	80016ec <__aeabi_dadd>
 80079e2:	0002      	movs	r2, r0
 80079e4:	000b      	movs	r3, r1
 80079e6:	0010      	movs	r0, r2
 80079e8:	0019      	movs	r1, r3
 80079ea:	f7fb fcad 	bl	8003348 <__aeabi_d2iz>
 80079ee:	0003      	movs	r3, r0
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7fb fce5 	bl	80033c0 <__aeabi_i2d>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4b41      	ldr	r3, [pc, #260]	@ (8007b00 <Mic_Upkeep+0x224>)
 80079fa:	f7fa f9db 	bl	8001db4 <__aeabi_ddiv>
 80079fe:	0002      	movs	r2, r0
 8007a00:	000b      	movs	r3, r1
 8007a02:	0010      	movs	r0, r2
 8007a04:	0019      	movs	r1, r3
 8007a06:	f7fb fd75 	bl	80034f4 <__aeabi_d2f>
 8007a0a:	1c02      	adds	r2, r0, #0
 8007a0c:	4b39      	ldr	r3, [pc, #228]	@ (8007af4 <Mic_Upkeep+0x218>)
 8007a0e:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8007a10:	f000 f966 	bl	8007ce0 <MIC_Print>
      if (!startSPLcalculation()) {
 8007a14:	f003 f8f2 	bl	800abfc <startSPLcalculation>
 8007a18:	0003      	movs	r3, r0
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4053      	eors	r3, r2
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 8007a26:	4a2d      	ldr	r2, [pc, #180]	@ (8007adc <Mic_Upkeep+0x200>)
 8007a28:	4b2d      	ldr	r3, [pc, #180]	@ (8007ae0 <Mic_Upkeep+0x204>)
 8007a2a:	21f9      	movs	r1, #249	@ 0xf9
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f004 ff45 	bl	800c8bc <errorHandler>
      }
      if (!enableMicrophone(false))
 8007a32:	2000      	movs	r0, #0
 8007a34:	f003 f878 	bl	800ab28 <enableMicrophone>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	001a      	movs	r2, r3
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4053      	eors	r3, r2
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007a46:	4a25      	ldr	r2, [pc, #148]	@ (8007adc <Mic_Upkeep+0x200>)
 8007a48:	4b25      	ldr	r3, [pc, #148]	@ (8007ae0 <Mic_Upkeep+0x204>)
 8007a4a:	21fd      	movs	r1, #253	@ 0xfd
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f004 ff35 	bl	800c8bc <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 8007a52:	f005 fa1b 	bl	800ce8c <HAL_GetTick>
 8007a56:	0003      	movs	r3, r0
 8007a58:	22fa      	movs	r2, #250	@ 0xfa
 8007a5a:	0092      	lsls	r2, r2, #2
 8007a5c:	189a      	adds	r2, r3, r2
 8007a5e:	4b29      	ldr	r3, [pc, #164]	@ (8007b04 <Mic_Upkeep+0x228>)
 8007a60:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8007a62:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad8 <Mic_Upkeep+0x1fc>)
 8007a64:	2203      	movs	r2, #3
 8007a66:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8007a68:	f003 ffce 	bl	800ba08 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 8007a6c:	e02a      	b.n	8007ac4 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007a6e:	4b25      	ldr	r3, [pc, #148]	@ (8007b04 <Mic_Upkeep+0x228>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	0018      	movs	r0, r3
 8007a74:	f004 fe18 	bl	800c6a8 <TimestampIsReached>
 8007a78:	1e03      	subs	r3, r0, #0
 8007a7a:	d025      	beq.n	8007ac8 <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	f003 f853 	bl	800ab28 <enableMicrophone>
 8007a82:	0003      	movs	r3, r0
 8007a84:	001a      	movs	r2, r3
 8007a86:	2301      	movs	r3, #1
 8007a88:	4053      	eors	r3, r2
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007a90:	4a12      	ldr	r2, [pc, #72]	@ (8007adc <Mic_Upkeep+0x200>)
 8007a92:	230c      	movs	r3, #12
 8007a94:	33ff      	adds	r3, #255	@ 0xff
 8007a96:	0019      	movs	r1, r3
 8007a98:	4b11      	ldr	r3, [pc, #68]	@ (8007ae0 <Mic_Upkeep+0x204>)
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f004 ff0e 	bl	800c8bc <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad8 <Mic_Upkeep+0x1fc>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007aa6:	f003 ff97 	bl	800b9d8 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 8007aaa:	e00d      	b.n	8007ac8 <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 8007aac:	4a16      	ldr	r2, [pc, #88]	@ (8007b08 <Mic_Upkeep+0x22c>)
 8007aae:	4b17      	ldr	r3, [pc, #92]	@ (8007b0c <Mic_Upkeep+0x230>)
 8007ab0:	0019      	movs	r1, r3
 8007ab2:	2003      	movs	r0, #3
 8007ab4:	f004 fe4e 	bl	800c754 <CreateLine>
    MicState = MIC_STATE_INIT;
 8007ab8:	4b07      	ldr	r3, [pc, #28]	@ (8007ad8 <Mic_Upkeep+0x1fc>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 8007abe:	e004      	b.n	8007aca <Mic_Upkeep+0x1ee>
    break;
 8007ac0:	46c0      	nop			@ (mov r8, r8)
 8007ac2:	e002      	b.n	8007aca <Mic_Upkeep+0x1ee>
    break;
 8007ac4:	46c0      	nop			@ (mov r8, r8)
 8007ac6:	e000      	b.n	8007aca <Mic_Upkeep+0x1ee>
    break;
 8007ac8:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007aca:	4b03      	ldr	r3, [pc, #12]	@ (8007ad8 <Mic_Upkeep+0x1fc>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
}
 8007ace:	0018      	movs	r0, r3
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b003      	add	sp, #12
 8007ad4:	bd90      	pop	{r4, r7, pc}
 8007ad6:	46c0      	nop			@ (mov r8, r8)
 8007ad8:	20000f62 	.word	0x20000f62
 8007adc:	080219c4 	.word	0x080219c4
 8007ae0:	080225e4 	.word	0x080225e4
 8007ae4:	2000128c 	.word	0x2000128c
 8007ae8:	20000f50 	.word	0x20000f50
 8007aec:	080219e0 	.word	0x080219e0
 8007af0:	08021a0c 	.word	0x08021a0c
 8007af4:	20000f94 	.word	0x20000f94
 8007af8:	42c80000 	.word	0x42c80000
 8007afc:	3fe00000 	.word	0x3fe00000
 8007b00:	40590000 	.word	0x40590000
 8007b04:	20000f4c 	.word	0x20000f4c
 8007b08:	08021a14 	.word	0x08021a14
 8007b0c:	08021954 	.word	0x08021954

08007b10 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007b10:	b5b0      	push	{r4, r5, r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007b16:	4b3c      	ldr	r3, [pc, #240]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d868      	bhi.n	8007bf0 <Meas_Upkeep+0xe0>
 8007b1e:	009a      	lsls	r2, r3, #2
 8007b20:	4b3a      	ldr	r3, [pc, #232]	@ (8007c0c <Meas_Upkeep+0xfc>)
 8007b22:	18d3      	adds	r3, r2, r3
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007b28:	4a39      	ldr	r2, [pc, #228]	@ (8007c10 <Meas_Upkeep+0x100>)
 8007b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8007c14 <Meas_Upkeep+0x104>)
 8007b2c:	0019      	movs	r1, r3
 8007b2e:	2003      	movs	r0, #3
 8007b30:	f004 fe10 	bl	800c754 <CreateLine>
    break;
 8007b34:	e063      	b.n	8007bfe <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007b36:	f7ff fe7d 	bl	8007834 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8007b3a:	4b33      	ldr	r3, [pc, #204]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
    break;
 8007b40:	e05d      	b.n	8007bfe <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8007b42:	f7ff fdfd 	bl	8007740 <StartMeasurements>
    SetMeasurementIndicator();
 8007b46:	f003 ff19 	bl	800b97c <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	701a      	strb	r2, [r3, #0]
   break;
 8007b50:	e055      	b.n	8007bfe <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8007b52:	f7ff fe8b 	bl	800786c <MeasurementsCompleted>
 8007b56:	1e03      	subs	r3, r0, #0
 8007b58:	d04e      	beq.n	8007bf8 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007b60:	e04a      	b.n	8007bf8 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8007b62:	4a2d      	ldr	r2, [pc, #180]	@ (8007c18 <Meas_Upkeep+0x108>)
 8007b64:	4b2b      	ldr	r3, [pc, #172]	@ (8007c14 <Meas_Upkeep+0x104>)
 8007b66:	0019      	movs	r1, r3
 8007b68:	2003      	movs	r0, #3
 8007b6a:	f004 fdf3 	bl	800c754 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8007c1c <Meas_Upkeep+0x10c>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	4a2b      	ldr	r2, [pc, #172]	@ (8007c20 <Meas_Upkeep+0x110>)
 8007b74:	4927      	ldr	r1, [pc, #156]	@ (8007c14 <Meas_Upkeep+0x104>)
 8007b76:	2003      	movs	r0, #3
 8007b78:	f004 fdec 	bl	800c754 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007b7c:	4b27      	ldr	r3, [pc, #156]	@ (8007c1c <Meas_Upkeep+0x10c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	1c18      	adds	r0, r3, #0
 8007b82:	f7fb fc6f 	bl	8003464 <__aeabi_f2d>
 8007b86:	0004      	movs	r4, r0
 8007b88:	000d      	movs	r5, r1
 8007b8a:	4b24      	ldr	r3, [pc, #144]	@ (8007c1c <Meas_Upkeep+0x10c>)
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	1c18      	adds	r0, r3, #0
 8007b90:	f7fb fc68 	bl	8003464 <__aeabi_f2d>
 8007b94:	0002      	movs	r2, r0
 8007b96:	000b      	movs	r3, r1
 8007b98:	4822      	ldr	r0, [pc, #136]	@ (8007c24 <Meas_Upkeep+0x114>)
 8007b9a:	491e      	ldr	r1, [pc, #120]	@ (8007c14 <Meas_Upkeep+0x104>)
 8007b9c:	9202      	str	r2, [sp, #8]
 8007b9e:	9303      	str	r3, [sp, #12]
 8007ba0:	9400      	str	r4, [sp, #0]
 8007ba2:	9501      	str	r5, [sp, #4]
 8007ba4:	0002      	movs	r2, r0
 8007ba6:	2003      	movs	r0, #3
 8007ba8:	f004 fdd4 	bl	800c754 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007bac:	4b1b      	ldr	r3, [pc, #108]	@ (8007c1c <Meas_Upkeep+0x10c>)
 8007bae:	6858      	ldr	r0, [r3, #4]
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c1c <Meas_Upkeep+0x10c>)
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <Meas_Upkeep+0x10c>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	001a      	movs	r2, r3
 8007bbc:	f7fb fe8c 	bl	80038d8 <setMeasurement>
    ResetMeasurementIndicator();
 8007bc0:	f003 fef4 	bl	800b9ac <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007bc4:	f005 f962 	bl	800ce8c <HAL_GetTick>
 8007bc8:	0003      	movs	r3, r0
 8007bca:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <Meas_Upkeep+0x118>)
 8007bcc:	189a      	adds	r2, r3, r2
 8007bce:	4b17      	ldr	r3, [pc, #92]	@ (8007c2c <Meas_Upkeep+0x11c>)
 8007bd0:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007bd4:	2206      	movs	r2, #6
 8007bd6:	701a      	strb	r2, [r3, #0]
    break;
 8007bd8:	e011      	b.n	8007bfe <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007bda:	4b14      	ldr	r3, [pc, #80]	@ (8007c2c <Meas_Upkeep+0x11c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	0018      	movs	r0, r3
 8007be0:	f004 fd62 	bl	800c6a8 <TimestampIsReached>
 8007be4:	1e03      	subs	r3, r0, #0
 8007be6:	d009      	beq.n	8007bfc <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007be8:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007bee:	e005      	b.n	8007bfc <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007bf0:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
    break;
 8007bf6:	e002      	b.n	8007bfe <Meas_Upkeep+0xee>
    break;
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	e000      	b.n	8007bfe <Meas_Upkeep+0xee>
    break;
 8007bfc:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007bfe:	4b02      	ldr	r3, [pc, #8]	@ (8007c08 <Meas_Upkeep+0xf8>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
}
 8007c02:	0018      	movs	r0, r3
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bdb0      	pop	{r4, r5, r7, pc}
 8007c08:	20000f63 	.word	0x20000f63
 8007c0c:	080225c8 	.word	0x080225c8
 8007c10:	08021a34 	.word	0x08021a34
 8007c14:	08021954 	.word	0x08021954
 8007c18:	08021a54 	.word	0x08021a54
 8007c1c:	20000efc 	.word	0x20000efc
 8007c20:	08021a68 	.word	0x08021a68
 8007c24:	08021a80 	.word	0x08021a80
 8007c28:	00002710 	.word	0x00002710
 8007c2c:	20000f48 	.word	0x20000f48

08007c30 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	1d3b      	adds	r3, r7, #4
 8007c38:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007c3a:	240f      	movs	r4, #15
 8007c3c:	193b      	adds	r3, r7, r4
 8007c3e:	2200      	movs	r2, #0
 8007c40:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007c42:	4b20      	ldr	r3, [pc, #128]	@ (8007cc4 <Meas_SetEnabledSensors+0x94>)
 8007c44:	1d3a      	adds	r2, r7, #4
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007c4a:	193b      	adds	r3, r7, r4
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	193a      	adds	r2, r7, r4
 8007c50:	1c59      	adds	r1, r3, #1
 8007c52:	7011      	strb	r1, [r2, #0]
 8007c54:	0018      	movs	r0, r3
 8007c56:	1d3b      	adds	r3, r7, #4
 8007c58:	7819      	ldrb	r1, [r3, #0]
 8007c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cc8 <Meas_SetEnabledSensors+0x98>)
 8007c5c:	0103      	lsls	r3, r0, #4
 8007c5e:	18d3      	adds	r3, r2, r3
 8007c60:	330c      	adds	r3, #12
 8007c62:	1c0a      	adds	r2, r1, #0
 8007c64:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007c66:	193b      	adds	r3, r7, r4
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	193a      	adds	r2, r7, r4
 8007c6c:	1c59      	adds	r1, r3, #1
 8007c6e:	7011      	strb	r1, [r2, #0]
 8007c70:	0018      	movs	r0, r3
 8007c72:	1d3b      	adds	r3, r7, #4
 8007c74:	7859      	ldrb	r1, [r3, #1]
 8007c76:	4a14      	ldr	r2, [pc, #80]	@ (8007cc8 <Meas_SetEnabledSensors+0x98>)
 8007c78:	0103      	lsls	r3, r0, #4
 8007c7a:	18d3      	adds	r3, r2, r3
 8007c7c:	330c      	adds	r3, #12
 8007c7e:	1c0a      	adds	r2, r1, #0
 8007c80:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007c82:	193b      	adds	r3, r7, r4
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	193a      	adds	r2, r7, r4
 8007c88:	1c59      	adds	r1, r3, #1
 8007c8a:	7011      	strb	r1, [r2, #0]
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	1d3b      	adds	r3, r7, #4
 8007c90:	7899      	ldrb	r1, [r3, #2]
 8007c92:	4a0d      	ldr	r2, [pc, #52]	@ (8007cc8 <Meas_SetEnabledSensors+0x98>)
 8007c94:	0103      	lsls	r3, r0, #4
 8007c96:	18d3      	adds	r3, r2, r3
 8007c98:	330c      	adds	r3, #12
 8007c9a:	1c0a      	adds	r2, r1, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007c9e:	193b      	adds	r3, r7, r4
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	193a      	adds	r2, r7, r4
 8007ca4:	1c59      	adds	r1, r3, #1
 8007ca6:	7011      	strb	r1, [r2, #0]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	1d3b      	adds	r3, r7, #4
 8007cac:	78d9      	ldrb	r1, [r3, #3]
 8007cae:	4a06      	ldr	r2, [pc, #24]	@ (8007cc8 <Meas_SetEnabledSensors+0x98>)
 8007cb0:	0103      	lsls	r3, r0, #4
 8007cb2:	18d3      	adds	r3, r2, r3
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	1c0a      	adds	r2, r1, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
}
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	b005      	add	sp, #20
 8007cc0:	bd90      	pop	{r4, r7, pc}
 8007cc2:	46c0      	nop			@ (mov r8, r8)
 8007cc4:	20000f3c 	.word	0x20000f3c
 8007cc8:	20000f0c 	.word	0x20000f0c

08007ccc <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	@ (8007cdc <SetESPMeasurementDone+0x10>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	70da      	strb	r2, [r3, #3]
}
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000f40 	.word	0x20000f40

08007ce0 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007ce6:	4b81      	ldr	r3, [pc, #516]	@ (8007eec <MIC_Print+0x20c>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b81      	ldr	r3, [pc, #516]	@ (8007ef0 <MIC_Print+0x210>)
 8007cec:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007cee:	4b81      	ldr	r3, [pc, #516]	@ (8007ef4 <MIC_Print+0x214>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b09      	cmp	r3, #9
 8007cf4:	d80e      	bhi.n	8007d14 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ef4 <MIC_Print+0x214>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	4b7c      	ldr	r3, [pc, #496]	@ (8007ef0 <MIC_Print+0x210>)
 8007cfe:	6819      	ldr	r1, [r3, #0]
 8007d00:	4b7d      	ldr	r3, [pc, #500]	@ (8007ef8 <MIC_Print+0x218>)
 8007d02:	0092      	lsls	r2, r2, #2
 8007d04:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007d06:	4b7b      	ldr	r3, [pc, #492]	@ (8007ef4 <MIC_Print+0x214>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	4b79      	ldr	r3, [pc, #484]	@ (8007ef4 <MIC_Print+0x214>)
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	e013      	b.n	8007d3c <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007d14:	4b77      	ldr	r3, [pc, #476]	@ (8007ef4 <MIC_Print+0x214>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007d1a:	4b76      	ldr	r3, [pc, #472]	@ (8007ef4 <MIC_Print+0x214>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	001a      	movs	r2, r3
 8007d20:	4b73      	ldr	r3, [pc, #460]	@ (8007ef0 <MIC_Print+0x210>)
 8007d22:	6819      	ldr	r1, [r3, #0]
 8007d24:	4b74      	ldr	r3, [pc, #464]	@ (8007ef8 <MIC_Print+0x218>)
 8007d26:	0092      	lsls	r2, r2, #2
 8007d28:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007d2a:	4b72      	ldr	r3, [pc, #456]	@ (8007ef4 <MIC_Print+0x214>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	4b70      	ldr	r3, [pc, #448]	@ (8007ef4 <MIC_Print+0x214>)
 8007d34:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007d36:	4b71      	ldr	r3, [pc, #452]	@ (8007efc <MIC_Print+0x21c>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8007d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8007efc <MIC_Print+0x21c>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4053      	eors	r3, r2
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 8007d4a:	4b69      	ldr	r3, [pc, #420]	@ (8007ef0 <MIC_Print+0x210>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	1c18      	adds	r0, r3, #0
 8007d50:	f7fb fdde 	bl	8003910 <setMic>
 8007d54:	e02d      	b.n	8007db2 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8007d56:	4b6a      	ldr	r3, [pc, #424]	@ (8007f00 <MIC_Print+0x220>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007d5c:	1dfb      	adds	r3, r7, #7
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	e013      	b.n	8007d8c <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8007d64:	1dfb      	adds	r3, r7, #7
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	4b63      	ldr	r3, [pc, #396]	@ (8007ef8 <MIC_Print+0x218>)
 8007d6a:	0092      	lsls	r2, r2, #2
 8007d6c:	58d2      	ldr	r2, [r2, r3]
 8007d6e:	4b64      	ldr	r3, [pc, #400]	@ (8007f00 <MIC_Print+0x220>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	1c19      	adds	r1, r3, #0
 8007d74:	1c10      	adds	r0, r2, #0
 8007d76:	f7f8 fda3 	bl	80008c0 <__aeabi_fadd>
 8007d7a:	1c03      	adds	r3, r0, #0
 8007d7c:	1c1a      	adds	r2, r3, #0
 8007d7e:	4b60      	ldr	r3, [pc, #384]	@ (8007f00 <MIC_Print+0x220>)
 8007d80:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007d82:	1dfb      	adds	r3, r7, #7
 8007d84:	781a      	ldrb	r2, [r3, #0]
 8007d86:	1dfb      	adds	r3, r7, #7
 8007d88:	3201      	adds	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	1dfb      	adds	r3, r7, #7
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b09      	cmp	r3, #9
 8007d92:	d9e7      	bls.n	8007d64 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8007d94:	4b5a      	ldr	r3, [pc, #360]	@ (8007f00 <MIC_Print+0x220>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	495a      	ldr	r1, [pc, #360]	@ (8007f04 <MIC_Print+0x224>)
 8007d9a:	1c18      	adds	r0, r3, #0
 8007d9c:	f7f8 ff1a 	bl	8000bd4 <__aeabi_fdiv>
 8007da0:	1c03      	adds	r3, r0, #0
 8007da2:	1c1a      	adds	r2, r3, #0
 8007da4:	4b56      	ldr	r3, [pc, #344]	@ (8007f00 <MIC_Print+0x220>)
 8007da6:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007da8:	4b55      	ldr	r3, [pc, #340]	@ (8007f00 <MIC_Print+0x220>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	1c18      	adds	r0, r3, #0
 8007dae:	f7fb fdaf 	bl	8003910 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8007db2:	4b4f      	ldr	r3, [pc, #316]	@ (8007ef0 <MIC_Print+0x210>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4954      	ldr	r1, [pc, #336]	@ (8007f08 <MIC_Print+0x228>)
 8007db8:	1c18      	adds	r0, r3, #0
 8007dba:	f7f8 fbd7 	bl	800056c <__aeabi_fcmpge>
 8007dbe:	1e03      	subs	r3, r0, #0
 8007dc0:	d004      	beq.n	8007dcc <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	f003 fd5a 	bl	800b880 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8007dcc:	4b48      	ldr	r3, [pc, #288]	@ (8007ef0 <MIC_Print+0x210>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	494d      	ldr	r1, [pc, #308]	@ (8007f08 <MIC_Print+0x228>)
 8007dd2:	1c18      	adds	r0, r3, #0
 8007dd4:	f7f8 fbac 	bl	8000530 <__aeabi_fcmplt>
 8007dd8:	1e03      	subs	r3, r0, #0
 8007dda:	d00c      	beq.n	8007df6 <MIC_Print+0x116>
 8007ddc:	4b44      	ldr	r3, [pc, #272]	@ (8007ef0 <MIC_Print+0x210>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	494a      	ldr	r1, [pc, #296]	@ (8007f0c <MIC_Print+0x22c>)
 8007de2:	1c18      	adds	r0, r3, #0
 8007de4:	f7f8 fbc2 	bl	800056c <__aeabi_fcmpge>
 8007de8:	1e03      	subs	r3, r0, #0
 8007dea:	d004      	beq.n	8007df6 <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8007dec:	2200      	movs	r2, #0
 8007dee:	2100      	movs	r1, #0
 8007df0:	2001      	movs	r0, #1
 8007df2:	f003 fd45 	bl	800b880 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 8007df6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef0 <MIC_Print+0x210>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4944      	ldr	r1, [pc, #272]	@ (8007f0c <MIC_Print+0x22c>)
 8007dfc:	1c18      	adds	r0, r3, #0
 8007dfe:	f7f8 fb97 	bl	8000530 <__aeabi_fcmplt>
 8007e02:	1e03      	subs	r3, r0, #0
 8007e04:	d00c      	beq.n	8007e20 <MIC_Print+0x140>
 8007e06:	4b3a      	ldr	r3, [pc, #232]	@ (8007ef0 <MIC_Print+0x210>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4941      	ldr	r1, [pc, #260]	@ (8007f10 <MIC_Print+0x230>)
 8007e0c:	1c18      	adds	r0, r3, #0
 8007e0e:	f7f8 fbad 	bl	800056c <__aeabi_fcmpge>
 8007e12:	1e03      	subs	r3, r0, #0
 8007e14:	d004      	beq.n	8007e20 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2101      	movs	r1, #1
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	f003 fd30 	bl	800b880 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 8007e20:	4b33      	ldr	r3, [pc, #204]	@ (8007ef0 <MIC_Print+0x210>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	493a      	ldr	r1, [pc, #232]	@ (8007f10 <MIC_Print+0x230>)
 8007e26:	1c18      	adds	r0, r3, #0
 8007e28:	f7f8 fb82 	bl	8000530 <__aeabi_fcmplt>
 8007e2c:	1e03      	subs	r3, r0, #0
 8007e2e:	d00c      	beq.n	8007e4a <MIC_Print+0x16a>
 8007e30:	4b2f      	ldr	r3, [pc, #188]	@ (8007ef0 <MIC_Print+0x210>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4937      	ldr	r1, [pc, #220]	@ (8007f14 <MIC_Print+0x234>)
 8007e36:	1c18      	adds	r0, r3, #0
 8007e38:	f7f8 fb98 	bl	800056c <__aeabi_fcmpge>
 8007e3c:	1e03      	subs	r3, r0, #0
 8007e3e:	d004      	beq.n	8007e4a <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 8007e40:	2200      	movs	r2, #0
 8007e42:	2101      	movs	r1, #1
 8007e44:	2000      	movs	r0, #0
 8007e46:	f003 fd1b 	bl	800b880 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 8007e4a:	4b29      	ldr	r3, [pc, #164]	@ (8007ef0 <MIC_Print+0x210>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4931      	ldr	r1, [pc, #196]	@ (8007f14 <MIC_Print+0x234>)
 8007e50:	1c18      	adds	r0, r3, #0
 8007e52:	f7f8 fb6d 	bl	8000530 <__aeabi_fcmplt>
 8007e56:	1e03      	subs	r3, r0, #0
 8007e58:	d00c      	beq.n	8007e74 <MIC_Print+0x194>
 8007e5a:	4b25      	ldr	r3, [pc, #148]	@ (8007ef0 <MIC_Print+0x210>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	492e      	ldr	r1, [pc, #184]	@ (8007f18 <MIC_Print+0x238>)
 8007e60:	1c18      	adds	r0, r3, #0
 8007e62:	f7f8 fb83 	bl	800056c <__aeabi_fcmpge>
 8007e66:	1e03      	subs	r3, r0, #0
 8007e68:	d004      	beq.n	8007e74 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	2000      	movs	r0, #0
 8007e70:	f003 fd06 	bl	800b880 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8007e74:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef0 <MIC_Print+0x210>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4927      	ldr	r1, [pc, #156]	@ (8007f18 <MIC_Print+0x238>)
 8007e7a:	1c18      	adds	r0, r3, #0
 8007e7c:	f7f8 fb58 	bl	8000530 <__aeabi_fcmplt>
 8007e80:	1e03      	subs	r3, r0, #0
 8007e82:	d00c      	beq.n	8007e9e <MIC_Print+0x1be>
 8007e84:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef0 <MIC_Print+0x210>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4924      	ldr	r1, [pc, #144]	@ (8007f1c <MIC_Print+0x23c>)
 8007e8a:	1c18      	adds	r0, r3, #0
 8007e8c:	f7f8 fb6e 	bl	800056c <__aeabi_fcmpge>
 8007e90:	1e03      	subs	r3, r0, #0
 8007e92:	d004      	beq.n	8007e9e <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8007e94:	2201      	movs	r2, #1
 8007e96:	2101      	movs	r1, #1
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f003 fcf1 	bl	800b880 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 8007e9e:	4b14      	ldr	r3, [pc, #80]	@ (8007ef0 <MIC_Print+0x210>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	491e      	ldr	r1, [pc, #120]	@ (8007f1c <MIC_Print+0x23c>)
 8007ea4:	1c18      	adds	r0, r3, #0
 8007ea6:	f7f8 fb43 	bl	8000530 <__aeabi_fcmplt>
 8007eaa:	1e03      	subs	r3, r0, #0
 8007eac:	d00c      	beq.n	8007ec8 <MIC_Print+0x1e8>
 8007eae:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <MIC_Print+0x210>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	491b      	ldr	r1, [pc, #108]	@ (8007f20 <MIC_Print+0x240>)
 8007eb4:	1c18      	adds	r0, r3, #0
 8007eb6:	f7f8 fb59 	bl	800056c <__aeabi_fcmpge>
 8007eba:	1e03      	subs	r3, r0, #0
 8007ebc:	d004      	beq.n	8007ec8 <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	f003 fcdc 	bl	800b880 <SetDBLED>
  }
  if(dBc < 35){//off
 8007ec8:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <MIC_Print+0x210>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4914      	ldr	r1, [pc, #80]	@ (8007f20 <MIC_Print+0x240>)
 8007ece:	1c18      	adds	r0, r3, #0
 8007ed0:	f7f8 fb2e 	bl	8000530 <__aeabi_fcmplt>
 8007ed4:	1e03      	subs	r3, r0, #0
 8007ed6:	d100      	bne.n	8007eda <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 8007ed8:	e004      	b.n	8007ee4 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	2000      	movs	r0, #0
 8007ee0:	f003 fcce 	bl	800b880 <SetDBLED>
}
 8007ee4:	46c0      	nop			@ (mov r8, r8)
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b002      	add	sp, #8
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000f94 	.word	0x20000f94
 8007ef0:	20000f64 	.word	0x20000f64
 8007ef4:	20000f98 	.word	0x20000f98
 8007ef8:	20000f68 	.word	0x20000f68
 8007efc:	20000f99 	.word	0x20000f99
 8007f00:	20000f90 	.word	0x20000f90
 8007f04:	41200000 	.word	0x41200000
 8007f08:	42b40000 	.word	0x42b40000
 8007f0c:	42a00000 	.word	0x42a00000
 8007f10:	428c0000 	.word	0x428c0000
 8007f14:	42700000 	.word	0x42700000
 8007f18:	42480000 	.word	0x42480000
 8007f1c:	42200000 	.word	0x42200000
 8007f20:	420c0000 	.word	0x420c0000

08007f24 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8007f2a:	4b11      	ldr	r3, [pc, #68]	@ (8007f70 <MIC_TestMeasurementDone+0x4c>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	4a10      	ldr	r2, [pc, #64]	@ (8007f74 <MIC_TestMeasurementDone+0x50>)
 8007f32:	4911      	ldr	r1, [pc, #68]	@ (8007f78 <MIC_TestMeasurementDone+0x54>)
 8007f34:	2002      	movs	r0, #2
 8007f36:	f004 fc0d 	bl	800c754 <CreateLine>
  if(DataReady) {
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <MIC_TestMeasurementDone+0x4c>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d010      	beq.n	8007f66 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8007f44:	1dfb      	adds	r3, r7, #7
 8007f46:	4a0d      	ldr	r2, [pc, #52]	@ (8007f7c <MIC_TestMeasurementDone+0x58>)
 8007f48:	7812      	ldrb	r2, [r2, #0]
 8007f4a:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f7c <MIC_TestMeasurementDone+0x58>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4a0b      	ldr	r2, [pc, #44]	@ (8007f80 <MIC_TestMeasurementDone+0x5c>)
 8007f54:	4908      	ldr	r1, [pc, #32]	@ (8007f78 <MIC_TestMeasurementDone+0x54>)
 8007f56:	2002      	movs	r0, #2
 8007f58:	f004 fbfc 	bl	800c754 <CreateLine>
    ResetMICIndicator();
 8007f5c:	f003 fd54 	bl	800ba08 <ResetMICIndicator>
    return Check;
 8007f60:	1dfb      	adds	r3, r7, #7
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	e000      	b.n	8007f68 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	0018      	movs	r0, r3
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b002      	add	sp, #8
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	2000128c 	.word	0x2000128c
 8007f74:	08021ab4 	.word	0x08021ab4
 8007f78:	08021ae0 	.word	0x08021ae0
 8007f7c:	2000128d 	.word	0x2000128d
 8007f80:	08021ae4 	.word	0x08021ae4

08007f84 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8007f84:	b40f      	push	{r0, r1, r2, r3}
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8007f8c:	2314      	movs	r3, #20
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	2180      	movs	r1, #128	@ 0x80
 8007f98:	0089      	lsls	r1, r1, #2
 8007f9a:	480a      	ldr	r0, [pc, #40]	@ (8007fc4 <print+0x40>)
 8007f9c:	f015 fefe 	bl	801dd9c <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8007fa0:	4b08      	ldr	r3, [pc, #32]	@ (8007fc4 <print+0x40>)
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	f7f8 f8e2 	bl	800016c <strlen>
 8007fa8:	0003      	movs	r3, r0
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	4b05      	ldr	r3, [pc, #20]	@ (8007fc4 <print+0x40>)
 8007fae:	0011      	movs	r1, r2
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f7ff fa09 	bl	80073c8 <printString>
}
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b002      	add	sp, #8
 8007fbc:	bc80      	pop	{r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	b004      	add	sp, #16
 8007fc2:	4718      	bx	r3
 8007fc4:	20000f9c 	.word	0x20000f9c

08007fc8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007fce:	1d3b      	adds	r3, r7, #4
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	2314      	movs	r3, #20
 8007fd4:	001a      	movs	r2, r3
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	f015 feec 	bl	801ddb4 <memset>
  RTC_DateTypeDef sDate = {0};
 8007fdc:	003b      	movs	r3, r7
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800809c <MX_RTC_Init+0xd4>)
 8007fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80080a0 <MX_RTC_Init+0xd8>)
 8007fe6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800809c <MX_RTC_Init+0xd4>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007fee:	4b2b      	ldr	r3, [pc, #172]	@ (800809c <MX_RTC_Init+0xd4>)
 8007ff0:	227f      	movs	r2, #127	@ 0x7f
 8007ff2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007ff4:	4b29      	ldr	r3, [pc, #164]	@ (800809c <MX_RTC_Init+0xd4>)
 8007ff6:	22ff      	movs	r2, #255	@ 0xff
 8007ff8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007ffa:	4b28      	ldr	r3, [pc, #160]	@ (800809c <MX_RTC_Init+0xd4>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008000:	4b26      	ldr	r3, [pc, #152]	@ (800809c <MX_RTC_Init+0xd4>)
 8008002:	2200      	movs	r2, #0
 8008004:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008006:	4b25      	ldr	r3, [pc, #148]	@ (800809c <MX_RTC_Init+0xd4>)
 8008008:	2200      	movs	r2, #0
 800800a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800800c:	4b23      	ldr	r3, [pc, #140]	@ (800809c <MX_RTC_Init+0xd4>)
 800800e:	2200      	movs	r2, #0
 8008010:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008012:	4b22      	ldr	r3, [pc, #136]	@ (800809c <MX_RTC_Init+0xd4>)
 8008014:	0018      	movs	r0, r3
 8008016:	f00b feed 	bl	8013df4 <HAL_RTC_Init>
 800801a:	1e03      	subs	r3, r0, #0
 800801c:	d001      	beq.n	8008022 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800801e:	f7ff fa1b 	bl	8007458 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008022:	1d3b      	adds	r3, r7, #4
 8008024:	220d      	movs	r2, #13
 8008026:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008028:	1d3b      	adds	r3, r7, #4
 800802a:	2200      	movs	r2, #0
 800802c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800802e:	1d3b      	adds	r3, r7, #4
 8008030:	2200      	movs	r2, #0
 8008032:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008034:	1d3b      	adds	r3, r7, #4
 8008036:	2200      	movs	r2, #0
 8008038:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800803a:	1d3b      	adds	r3, r7, #4
 800803c:	2200      	movs	r2, #0
 800803e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008040:	1d39      	adds	r1, r7, #4
 8008042:	4b16      	ldr	r3, [pc, #88]	@ (800809c <MX_RTC_Init+0xd4>)
 8008044:	2200      	movs	r2, #0
 8008046:	0018      	movs	r0, r3
 8008048:	f00b ff70 	bl	8013f2c <HAL_RTC_SetTime>
 800804c:	1e03      	subs	r3, r0, #0
 800804e:	d001      	beq.n	8008054 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008050:	f7ff fa02 	bl	8007458 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008054:	003b      	movs	r3, r7
 8008056:	2206      	movs	r2, #6
 8008058:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800805a:	003b      	movs	r3, r7
 800805c:	2211      	movs	r2, #17
 800805e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008060:	003b      	movs	r3, r7
 8008062:	2217      	movs	r2, #23
 8008064:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008066:	003b      	movs	r3, r7
 8008068:	2218      	movs	r2, #24
 800806a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800806c:	0039      	movs	r1, r7
 800806e:	4b0b      	ldr	r3, [pc, #44]	@ (800809c <MX_RTC_Init+0xd4>)
 8008070:	2200      	movs	r2, #0
 8008072:	0018      	movs	r0, r3
 8008074:	f00c f862 	bl	801413c <HAL_RTC_SetDate>
 8008078:	1e03      	subs	r3, r0, #0
 800807a:	d001      	beq.n	8008080 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800807c:	f7ff f9ec 	bl	8007458 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008080:	4b06      	ldr	r3, [pc, #24]	@ (800809c <MX_RTC_Init+0xd4>)
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	0018      	movs	r0, r3
 8008088:	f00c fa12 	bl	80144b0 <HAL_RTCEx_SetWakeUpTimer>
 800808c:	1e03      	subs	r3, r0, #0
 800808e:	d001      	beq.n	8008094 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008090:	f7ff f9e2 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008094:	46c0      	nop			@ (mov r8, r8)
 8008096:	46bd      	mov	sp, r7
 8008098:	b006      	add	sp, #24
 800809a:	bd80      	pop	{r7, pc}
 800809c:	2000119c 	.word	0x2000119c
 80080a0:	40002800 	.word	0x40002800

080080a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a06      	ldr	r2, [pc, #24]	@ (80080cc <HAL_RTC_MspInit+0x28>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d106      	bne.n	80080c4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80080b6:	4b06      	ldr	r3, [pc, #24]	@ (80080d0 <HAL_RTC_MspInit+0x2c>)
 80080b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080ba:	4b05      	ldr	r3, [pc, #20]	@ (80080d0 <HAL_RTC_MspInit+0x2c>)
 80080bc:	2180      	movs	r1, #128	@ 0x80
 80080be:	02c9      	lsls	r1, r1, #11
 80080c0:	430a      	orrs	r2, r1
 80080c2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80080c4:	46c0      	nop			@ (mov r8, r8)
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b002      	add	sp, #8
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40002800 	.word	0x40002800
 80080d0:	40021000 	.word	0x40021000

080080d4 <sen5x_Power_On>:

uint32_t sen5xReadTimer = 0;
uint8_t sen5xSamples = 0;
static sen5x_states samplesState = LIGHT_OUT;

void sen5x_Power_On(void) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
//  Debug("executing sen5x_Power_On");
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80080d8:	2380      	movs	r3, #128	@ 0x80
 80080da:	015b      	lsls	r3, r3, #5
 80080dc:	4805      	ldr	r0, [pc, #20]	@ (80080f4 <sen5x_Power_On+0x20>)
 80080de:	2201      	movs	r2, #1
 80080e0:	0019      	movs	r1, r3
 80080e2:	f006 f932 	bl	800e34a <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80080e6:	20c8      	movs	r0, #200	@ 0xc8
 80080e8:	f004 feda 	bl	800cea0 <HAL_Delay>
  return;
 80080ec:	46c0      	nop			@ (mov r8, r8)
}
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	46c0      	nop			@ (mov r8, r8)
 80080f4:	50000800 	.word	0x50000800

080080f8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
//  Debug("executing sen5x_Power_Off");
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80080fc:	2380      	movs	r3, #128	@ 0x80
 80080fe:	015b      	lsls	r3, r3, #5
 8008100:	4803      	ldr	r0, [pc, #12]	@ (8008110 <sen5x_Power_Off+0x18>)
 8008102:	2200      	movs	r2, #0
 8008104:	0019      	movs	r1, r3
 8008106:	f006 f920 	bl	800e34a <HAL_GPIO_WritePin>
  return;
 800810a:	46c0      	nop			@ (mov r8, r8)
}
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	50000800 	.word	0x50000800

08008114 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008116:	b09b      	sub	sp, #108	@ 0x6c
 8008118:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 800811a:	2456      	movs	r4, #86	@ 0x56
 800811c:	193b      	adds	r3, r7, r4
 800811e:	2200      	movs	r2, #0
 8008120:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008122:	2355      	movs	r3, #85	@ 0x55
 8008124:	18fb      	adds	r3, r7, r3
 8008126:	2220      	movs	r2, #32
 8008128:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 800812a:	2354      	movs	r3, #84	@ 0x54
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	2220      	movs	r2, #32
 8008130:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008132:	f7ff ffcf 	bl	80080d4 <sen5x_Power_On>

  error = sen5x_device_reset();
 8008136:	0025      	movs	r5, r4
 8008138:	193c      	adds	r4, r7, r4
 800813a:	f000 fdb1 	bl	8008ca0 <sen5x_device_reset>
 800813e:	0003      	movs	r3, r0
 8008140:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008142:	002c      	movs	r4, r5
 8008144:	193b      	adds	r3, r7, r4
 8008146:	2200      	movs	r2, #0
 8008148:	5e9b      	ldrsh	r3, [r3, r2]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800814e:	193b      	adds	r3, r7, r4
 8008150:	2200      	movs	r2, #0
 8008152:	5e9b      	ldrsh	r3, [r3, r2]
 8008154:	4a6d      	ldr	r2, [pc, #436]	@ (800830c <probe_sen5x+0x1f8>)
 8008156:	496e      	ldr	r1, [pc, #440]	@ (8008310 <probe_sen5x+0x1fc>)
 8008158:	2001      	movs	r0, #1
 800815a:	f004 fafb 	bl	800c754 <CreateLine>
      return error;
 800815e:	193b      	adds	r3, r7, r4
 8008160:	2200      	movs	r2, #0
 8008162:	5e9b      	ldrsh	r3, [r3, r2]
 8008164:	e0ce      	b.n	8008304 <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008166:	2556      	movs	r5, #86	@ 0x56
 8008168:	197c      	adds	r4, r7, r5
 800816a:	2355      	movs	r3, #85	@ 0x55
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	232c      	movs	r3, #44	@ 0x2c
 8008172:	18fb      	adds	r3, r7, r3
 8008174:	0011      	movs	r1, r2
 8008176:	0018      	movs	r0, r3
 8008178:	f000 fcd0 	bl	8008b1c <sen5x_get_serial_number>
 800817c:	0003      	movs	r3, r0
 800817e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008180:	197b      	adds	r3, r7, r5
 8008182:	2200      	movs	r2, #0
 8008184:	5e9b      	ldrsh	r3, [r3, r2]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800818a:	197b      	adds	r3, r7, r5
 800818c:	2200      	movs	r2, #0
 800818e:	5e9a      	ldrsh	r2, [r3, r2]
 8008190:	4b60      	ldr	r3, [pc, #384]	@ (8008314 <probe_sen5x+0x200>)
 8008192:	0011      	movs	r1, r2
 8008194:	0018      	movs	r0, r3
 8008196:	f015 fd59 	bl	801dc4c <iprintf>
      return error;
 800819a:	197b      	adds	r3, r7, r5
 800819c:	2200      	movs	r2, #0
 800819e:	5e9b      	ldrsh	r3, [r3, r2]
 80081a0:	e0b0      	b.n	8008304 <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80081a2:	232c      	movs	r3, #44	@ 0x2c
 80081a4:	18fa      	adds	r2, r7, r3
 80081a6:	4b5c      	ldr	r3, [pc, #368]	@ (8008318 <probe_sen5x+0x204>)
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f015 fd4e 	bl	801dc4c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 80081b0:	2556      	movs	r5, #86	@ 0x56
 80081b2:	197c      	adds	r4, r7, r5
 80081b4:	2354      	movs	r3, #84	@ 0x54
 80081b6:	18fb      	adds	r3, r7, r3
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	230c      	movs	r3, #12
 80081bc:	18fb      	adds	r3, r7, r3
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f000 fc55 	bl	8008a70 <sen5x_get_product_name>
 80081c6:	0003      	movs	r3, r0
 80081c8:	8023      	strh	r3, [r4, #0]
  if (error) {
 80081ca:	197b      	adds	r3, r7, r5
 80081cc:	2200      	movs	r2, #0
 80081ce:	5e9b      	ldrsh	r3, [r3, r2]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00b      	beq.n	80081ec <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 80081d4:	197b      	adds	r3, r7, r5
 80081d6:	2200      	movs	r2, #0
 80081d8:	5e9a      	ldrsh	r2, [r3, r2]
 80081da:	4b50      	ldr	r3, [pc, #320]	@ (800831c <probe_sen5x+0x208>)
 80081dc:	0011      	movs	r1, r2
 80081de:	0018      	movs	r0, r3
 80081e0:	f015 fd34 	bl	801dc4c <iprintf>
      return error;
 80081e4:	197b      	adds	r3, r7, r5
 80081e6:	2200      	movs	r2, #0
 80081e8:	5e9b      	ldrsh	r3, [r3, r2]
 80081ea:	e08b      	b.n	8008304 <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 80081ec:	230c      	movs	r3, #12
 80081ee:	18fa      	adds	r2, r7, r3
 80081f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008320 <probe_sen5x+0x20c>)
 80081f2:	0011      	movs	r1, r2
 80081f4:	0018      	movs	r0, r3
 80081f6:	f015 fd29 	bl	801dc4c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 80081fa:	2656      	movs	r6, #86	@ 0x56
 80081fc:	19bc      	adds	r4, r7, r6
 80081fe:	2308      	movs	r3, #8
 8008200:	18fd      	adds	r5, r7, r3
 8008202:	2309      	movs	r3, #9
 8008204:	18fa      	adds	r2, r7, r3
 8008206:	230a      	movs	r3, #10
 8008208:	18f9      	adds	r1, r7, r3
 800820a:	230b      	movs	r3, #11
 800820c:	18f8      	adds	r0, r7, r3
 800820e:	1d7b      	adds	r3, r7, #5
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	1dbb      	adds	r3, r7, #6
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	1dfb      	adds	r3, r7, #7
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	002b      	movs	r3, r5
 800821c:	f000 fcd4 	bl	8008bc8 <sen5x_get_version>
 8008220:	0003      	movs	r3, r0
 8008222:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008224:	19bb      	adds	r3, r7, r6
 8008226:	2200      	movs	r2, #0
 8008228:	5e9b      	ldrsh	r3, [r3, r2]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800822e:	19bb      	adds	r3, r7, r6
 8008230:	2200      	movs	r2, #0
 8008232:	5e9a      	ldrsh	r2, [r3, r2]
 8008234:	4b3b      	ldr	r3, [pc, #236]	@ (8008324 <probe_sen5x+0x210>)
 8008236:	0011      	movs	r1, r2
 8008238:	0018      	movs	r0, r3
 800823a:	f015 fd07 	bl	801dc4c <iprintf>
      return error;
 800823e:	19bb      	adds	r3, r7, r6
 8008240:	2200      	movs	r2, #0
 8008242:	5e9b      	ldrsh	r3, [r3, r2]
 8008244:	e05e      	b.n	8008304 <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008246:	230b      	movs	r3, #11
 8008248:	18fb      	adds	r3, r7, r3
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	0019      	movs	r1, r3
 800824e:	230a      	movs	r3, #10
 8008250:	18fb      	adds	r3, r7, r3
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	001a      	movs	r2, r3
 8008256:	2308      	movs	r3, #8
 8008258:	18fb      	adds	r3, r7, r3
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	001c      	movs	r4, r3
 800825e:	1dfb      	adds	r3, r7, #7
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	4831      	ldr	r0, [pc, #196]	@ (8008328 <probe_sen5x+0x214>)
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	0023      	movs	r3, r4
 8008268:	f015 fcf0 	bl	801dc4c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800826c:	2300      	movs	r3, #0
 800826e:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008270:	264e      	movs	r6, #78	@ 0x4e
 8008272:	19bb      	adds	r3, r7, r6
 8008274:	2200      	movs	r2, #0
 8008276:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008278:	234c      	movs	r3, #76	@ 0x4c
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	2200      	movs	r2, #0
 800827e:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008280:	492a      	ldr	r1, [pc, #168]	@ (800832c <probe_sen5x+0x218>)
 8008282:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008284:	f7f8 fe8c 	bl	8000fa0 <__aeabi_fmul>
 8008288:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800828a:	1c18      	adds	r0, r3, #0
 800828c:	f7f9 f980 	bl	8001590 <__aeabi_f2iz>
 8008290:	0003      	movs	r3, r0
 8008292:	b218      	sxth	r0, r3
 8008294:	2556      	movs	r5, #86	@ 0x56
 8008296:	197c      	adds	r4, r7, r5
 8008298:	234c      	movs	r3, #76	@ 0x4c
 800829a:	18fb      	adds	r3, r7, r3
 800829c:	881a      	ldrh	r2, [r3, #0]
 800829e:	19bb      	adds	r3, r7, r6
 80082a0:	2100      	movs	r1, #0
 80082a2:	5e5b      	ldrsh	r3, [r3, r1]
 80082a4:	0019      	movs	r1, r3
 80082a6:	f000 fb7f 	bl	80089a8 <sen5x_set_temperature_offset_parameters>
 80082aa:	0003      	movs	r3, r0
 80082ac:	8023      	strh	r3, [r4, #0]
  if (error) {
 80082ae:	197b      	adds	r3, r7, r5
 80082b0:	2200      	movs	r2, #0
 80082b2:	5e9b      	ldrsh	r3, [r3, r2]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 80082b8:	197b      	adds	r3, r7, r5
 80082ba:	2200      	movs	r2, #0
 80082bc:	5e9b      	ldrsh	r3, [r3, r2]
 80082be:	4a1c      	ldr	r2, [pc, #112]	@ (8008330 <probe_sen5x+0x21c>)
 80082c0:	4913      	ldr	r1, [pc, #76]	@ (8008310 <probe_sen5x+0x1fc>)
 80082c2:	2001      	movs	r0, #1
 80082c4:	f004 fa46 	bl	800c754 <CreateLine>
      return error;
 80082c8:	197b      	adds	r3, r7, r5
 80082ca:	2200      	movs	r2, #0
 80082cc:	5e9b      	ldrsh	r3, [r3, r2]
 80082ce:	e019      	b.n	8008304 <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 80082d0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80082d2:	f7fb f8c7 	bl	8003464 <__aeabi_f2d>
 80082d6:	0002      	movs	r2, r0
 80082d8:	000b      	movs	r3, r1
 80082da:	4816      	ldr	r0, [pc, #88]	@ (8008334 <probe_sen5x+0x220>)
 80082dc:	4916      	ldr	r1, [pc, #88]	@ (8008338 <probe_sen5x+0x224>)
 80082de:	9200      	str	r2, [sp, #0]
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	0002      	movs	r2, r0
 80082e4:	2002      	movs	r0, #2
 80082e6:	f004 fa35 	bl	800c754 <CreateLine>
  }
  sen5x_Power_Off();
 80082ea:	f7ff ff05 	bl	80080f8 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 80082ee:	f004 fdcd 	bl	800ce8c <HAL_GetTick>
 80082f2:	0003      	movs	r3, r0
 80082f4:	4a11      	ldr	r2, [pc, #68]	@ (800833c <probe_sen5x+0x228>)
 80082f6:	189a      	adds	r2, r3, r2
 80082f8:	4b11      	ldr	r3, [pc, #68]	@ (8008340 <probe_sen5x+0x22c>)
 80082fa:	601a      	str	r2, [r3, #0]
  return error;
 80082fc:	2356      	movs	r3, #86	@ 0x56
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	2200      	movs	r2, #0
 8008302:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008304:	0018      	movs	r0, r3
 8008306:	46bd      	mov	sp, r7
 8008308:	b017      	add	sp, #92	@ 0x5c
 800830a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830c:	08021afc 	.word	0x08021afc
 8008310:	08021b28 	.word	0x08021b28
 8008314:	08021b2c 	.word	0x08021b2c
 8008318:	08021b5c 	.word	0x08021b5c
 800831c:	08021b70 	.word	0x08021b70
 8008320:	08021ba0 	.word	0x08021ba0
 8008324:	08021bb4 	.word	0x08021bb4
 8008328:	08021be0 	.word	0x08021be0
 800832c:	43480000 	.word	0x43480000
 8008330:	08021c04 	.word	0x08021c04
 8008334:	08021c44 	.word	0x08021c44
 8008338:	08021c7c 	.word	0x08021c7c
 800833c:	000061a8 	.word	0x000061a8
 8008340:	200011c0 	.word	0x200011c0

08008344 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008344:	b590      	push	{r4, r7, lr}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800834a:	1dbb      	adds	r3, r7, #6
 800834c:	2200      	movs	r2, #0
 800834e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 8008350:	1dbc      	adds	r4, r7, #6
 8008352:	f000 fa37 	bl	80087c4 <sen5x_start_measurement>
 8008356:	0003      	movs	r3, r0
 8008358:	8023      	strh	r3, [r4, #0]
  if (error) {
 800835a:	1dbb      	adds	r3, r7, #6
 800835c:	2200      	movs	r2, #0
 800835e:	5e9b      	ldrsh	r3, [r3, r2]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008364:	1dbb      	adds	r3, r7, #6
 8008366:	2200      	movs	r2, #0
 8008368:	5e9b      	ldrsh	r3, [r3, r2]
 800836a:	4a06      	ldr	r2, [pc, #24]	@ (8008384 <sen5x_lightup_measurement+0x40>)
 800836c:	4906      	ldr	r1, [pc, #24]	@ (8008388 <sen5x_lightup_measurement+0x44>)
 800836e:	2001      	movs	r0, #1
 8008370:	f004 f9f0 	bl	800c754 <CreateLine>
  }
  return error;
 8008374:	1dbb      	adds	r3, r7, #6
 8008376:	2200      	movs	r2, #0
 8008378:	5e9b      	ldrsh	r3, [r3, r2]
}
 800837a:	0018      	movs	r0, r3
 800837c:	46bd      	mov	sp, r7
 800837e:	b003      	add	sp, #12
 8008380:	bd90      	pop	{r4, r7, pc}
 8008382:	46c0      	nop			@ (mov r8, r8)
 8008384:	08021c80 	.word	0x08021c80
 8008388:	08021b28 	.word	0x08021b28

0800838c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008392:	1dbb      	adds	r3, r7, #6
 8008394:	2200      	movs	r2, #0
 8008396:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008398:	1dbc      	adds	r4, r7, #6
 800839a:	f000 fa41 	bl	8008820 <sen5x_stop_measurement>
 800839e:	0003      	movs	r3, r0
 80083a0:	8023      	strh	r3, [r4, #0]
  if (error) {
 80083a2:	1dbb      	adds	r3, r7, #6
 80083a4:	2200      	movs	r2, #0
 80083a6:	5e9b      	ldrsh	r3, [r3, r2]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d007      	beq.n	80083bc <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 80083ac:	1dbb      	adds	r3, r7, #6
 80083ae:	2200      	movs	r2, #0
 80083b0:	5e9b      	ldrsh	r3, [r3, r2]
 80083b2:	4a06      	ldr	r2, [pc, #24]	@ (80083cc <sen5x_extinguish_measurement+0x40>)
 80083b4:	4906      	ldr	r1, [pc, #24]	@ (80083d0 <sen5x_extinguish_measurement+0x44>)
 80083b6:	2001      	movs	r0, #1
 80083b8:	f004 f9cc 	bl	800c754 <CreateLine>
  }
  return error;
 80083bc:	1dbb      	adds	r3, r7, #6
 80083be:	2200      	movs	r2, #0
 80083c0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80083c2:	0018      	movs	r0, r3
 80083c4:	46bd      	mov	sp, r7
 80083c6:	b003      	add	sp, #12
 80083c8:	bd90      	pop	{r4, r7, pc}
 80083ca:	46c0      	nop			@ (mov r8, r8)
 80083cc:	08021cb0 	.word	0x08021cb0
 80083d0:	08021b28 	.word	0x08021b28

080083d4 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 80083d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083d6:	b08b      	sub	sp, #44	@ 0x2c
 80083d8:	af04      	add	r7, sp, #16
  // Read Measurement
  int16_t error = 0;
 80083da:	2616      	movs	r6, #22
 80083dc:	19bb      	adds	r3, r7, r6
 80083de:	2200      	movs	r2, #0
 80083e0:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 80083e2:	19bc      	adds	r4, r7, r6
 80083e4:	230e      	movs	r3, #14
 80083e6:	18fd      	adds	r5, r7, r3
 80083e8:	2310      	movs	r3, #16
 80083ea:	18fa      	adds	r2, r7, r3
 80083ec:	2312      	movs	r3, #18
 80083ee:	18f9      	adds	r1, r7, r3
 80083f0:	2314      	movs	r3, #20
 80083f2:	18f8      	adds	r0, r7, r3
 80083f4:	1dbb      	adds	r3, r7, #6
 80083f6:	9303      	str	r3, [sp, #12]
 80083f8:	2308      	movs	r3, #8
 80083fa:	18fb      	adds	r3, r7, r3
 80083fc:	9302      	str	r3, [sp, #8]
 80083fe:	230a      	movs	r3, #10
 8008400:	18fb      	adds	r3, r7, r3
 8008402:	9301      	str	r3, [sp, #4]
 8008404:	230c      	movs	r3, #12
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	002b      	movs	r3, r5
 800840c:	f000 fa38 	bl	8008880 <sen5x_read_measured_values>
 8008410:	0003      	movs	r3, r0
 8008412:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);

  if (error) {
 8008414:	19bb      	adds	r3, r7, r6
 8008416:	2200      	movs	r2, #0
 8008418:	5e9b      	ldrsh	r3, [r3, r2]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <sen5x_measurement+0x62>
    Error("Error executing sen5x_read_measured_values(): %i", error);
 800841e:	19bb      	adds	r3, r7, r6
 8008420:	2200      	movs	r2, #0
 8008422:	5e9b      	ldrsh	r3, [r3, r2]
 8008424:	4a6c      	ldr	r2, [pc, #432]	@ (80085d8 <sen5x_measurement+0x204>)
 8008426:	496d      	ldr	r1, [pc, #436]	@ (80085dc <sen5x_measurement+0x208>)
 8008428:	2001      	movs	r0, #1
 800842a:	f004 f993 	bl	800c754 <CreateLine>
    return error;
 800842e:	19bb      	adds	r3, r7, r6
 8008430:	2200      	movs	r2, #0
 8008432:	5e9b      	ldrsh	r3, [r3, r2]
 8008434:	e0cc      	b.n	80085d0 <sen5x_measurement+0x1fc>
  } else {
    if (sen5xSamples == 0) {
 8008436:	4b6a      	ldr	r3, [pc, #424]	@ (80085e0 <sen5x_measurement+0x20c>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <sen5x_measurement+0x6e>
      return 0; // first sample reads zero's
 800843e:	2300      	movs	r3, #0
 8008440:	e0c6      	b.n	80085d0 <sen5x_measurement+0x1fc>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", mass_concentration_pm1p0 / 10.0f);
 8008442:	2314      	movs	r3, #20
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	0018      	movs	r0, r3
 800844a:	f7f9 f8c1 	bl	80015d0 <__aeabi_i2f>
 800844e:	1c03      	adds	r3, r0, #0
 8008450:	4964      	ldr	r1, [pc, #400]	@ (80085e4 <sen5x_measurement+0x210>)
 8008452:	1c18      	adds	r0, r3, #0
 8008454:	f7f8 fbbe 	bl	8000bd4 <__aeabi_fdiv>
 8008458:	1c03      	adds	r3, r0, #0
 800845a:	1c18      	adds	r0, r3, #0
 800845c:	f7fb f802 	bl	8003464 <__aeabi_f2d>
 8008460:	0002      	movs	r2, r0
 8008462:	000b      	movs	r3, r1
 8008464:	4960      	ldr	r1, [pc, #384]	@ (80085e8 <sen5x_measurement+0x214>)
 8008466:	0008      	movs	r0, r1
 8008468:	f015 fbf0 	bl	801dc4c <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", mass_concentration_pm2p5 / 10.0f);
 800846c:	2312      	movs	r3, #18
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	0018      	movs	r0, r3
 8008474:	f7f9 f8ac 	bl	80015d0 <__aeabi_i2f>
 8008478:	1c03      	adds	r3, r0, #0
 800847a:	495a      	ldr	r1, [pc, #360]	@ (80085e4 <sen5x_measurement+0x210>)
 800847c:	1c18      	adds	r0, r3, #0
 800847e:	f7f8 fba9 	bl	8000bd4 <__aeabi_fdiv>
 8008482:	1c03      	adds	r3, r0, #0
 8008484:	1c18      	adds	r0, r3, #0
 8008486:	f7fa ffed 	bl	8003464 <__aeabi_f2d>
 800848a:	0002      	movs	r2, r0
 800848c:	000b      	movs	r3, r1
 800848e:	4957      	ldr	r1, [pc, #348]	@ (80085ec <sen5x_measurement+0x218>)
 8008490:	0008      	movs	r0, r1
 8008492:	f015 fbdb 	bl	801dc4c <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", mass_concentration_pm4p0 / 10.0f);
 8008496:	2310      	movs	r3, #16
 8008498:	18fb      	adds	r3, r7, r3
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	0018      	movs	r0, r3
 800849e:	f7f9 f897 	bl	80015d0 <__aeabi_i2f>
 80084a2:	1c03      	adds	r3, r0, #0
 80084a4:	494f      	ldr	r1, [pc, #316]	@ (80085e4 <sen5x_measurement+0x210>)
 80084a6:	1c18      	adds	r0, r3, #0
 80084a8:	f7f8 fb94 	bl	8000bd4 <__aeabi_fdiv>
 80084ac:	1c03      	adds	r3, r0, #0
 80084ae:	1c18      	adds	r0, r3, #0
 80084b0:	f7fa ffd8 	bl	8003464 <__aeabi_f2d>
 80084b4:	0002      	movs	r2, r0
 80084b6:	000b      	movs	r3, r1
 80084b8:	494d      	ldr	r1, [pc, #308]	@ (80085f0 <sen5x_measurement+0x21c>)
 80084ba:	0008      	movs	r0, r1
 80084bc:	f015 fbc6 	bl	801dc4c <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", mass_concentration_pm10p0 / 10.0f);
 80084c0:	230e      	movs	r3, #14
 80084c2:	18fb      	adds	r3, r7, r3
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	0018      	movs	r0, r3
 80084c8:	f7f9 f882 	bl	80015d0 <__aeabi_i2f>
 80084cc:	1c03      	adds	r3, r0, #0
 80084ce:	4945      	ldr	r1, [pc, #276]	@ (80085e4 <sen5x_measurement+0x210>)
 80084d0:	1c18      	adds	r0, r3, #0
 80084d2:	f7f8 fb7f 	bl	8000bd4 <__aeabi_fdiv>
 80084d6:	1c03      	adds	r3, r0, #0
 80084d8:	1c18      	adds	r0, r3, #0
 80084da:	f7fa ffc3 	bl	8003464 <__aeabi_f2d>
 80084de:	0002      	movs	r2, r0
 80084e0:	000b      	movs	r3, r1
 80084e2:	4944      	ldr	r1, [pc, #272]	@ (80085f4 <sen5x_measurement+0x220>)
 80084e4:	0008      	movs	r0, r1
 80084e6:	f015 fbb1 	bl	801dc4c <iprintf>
    if (ambient_humidity != 0x7fff) {
 80084ea:	210c      	movs	r1, #12
 80084ec:	187b      	adds	r3, r7, r1
 80084ee:	2200      	movs	r2, #0
 80084f0:	5e9b      	ldrsh	r3, [r3, r2]
 80084f2:	4a41      	ldr	r2, [pc, #260]	@ (80085f8 <sen5x_measurement+0x224>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d014      	beq.n	8008522 <sen5x_measurement+0x14e>
      printf("Ambient humidity: %.1f %%RH\r\n", ambient_humidity / 100.0f);
 80084f8:	187b      	adds	r3, r7, r1
 80084fa:	2200      	movs	r2, #0
 80084fc:	5e9b      	ldrsh	r3, [r3, r2]
 80084fe:	0018      	movs	r0, r3
 8008500:	f7f9 f866 	bl	80015d0 <__aeabi_i2f>
 8008504:	1c03      	adds	r3, r0, #0
 8008506:	493d      	ldr	r1, [pc, #244]	@ (80085fc <sen5x_measurement+0x228>)
 8008508:	1c18      	adds	r0, r3, #0
 800850a:	f7f8 fb63 	bl	8000bd4 <__aeabi_fdiv>
 800850e:	1c03      	adds	r3, r0, #0
 8008510:	1c18      	adds	r0, r3, #0
 8008512:	f7fa ffa7 	bl	8003464 <__aeabi_f2d>
 8008516:	0002      	movs	r2, r0
 8008518:	000b      	movs	r3, r1
 800851a:	4939      	ldr	r1, [pc, #228]	@ (8008600 <sen5x_measurement+0x22c>)
 800851c:	0008      	movs	r0, r1
 800851e:	f015 fb95 	bl	801dc4c <iprintf>
    }
    if (ambient_temperature != 0x7fff) {
 8008522:	210a      	movs	r1, #10
 8008524:	187b      	adds	r3, r7, r1
 8008526:	2200      	movs	r2, #0
 8008528:	5e9b      	ldrsh	r3, [r3, r2]
 800852a:	4a33      	ldr	r2, [pc, #204]	@ (80085f8 <sen5x_measurement+0x224>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d014      	beq.n	800855a <sen5x_measurement+0x186>
      printf("Ambient temperature: %.1f °C\r\n", ambient_temperature / 200.0f);
 8008530:	187b      	adds	r3, r7, r1
 8008532:	2200      	movs	r2, #0
 8008534:	5e9b      	ldrsh	r3, [r3, r2]
 8008536:	0018      	movs	r0, r3
 8008538:	f7f9 f84a 	bl	80015d0 <__aeabi_i2f>
 800853c:	1c03      	adds	r3, r0, #0
 800853e:	4931      	ldr	r1, [pc, #196]	@ (8008604 <sen5x_measurement+0x230>)
 8008540:	1c18      	adds	r0, r3, #0
 8008542:	f7f8 fb47 	bl	8000bd4 <__aeabi_fdiv>
 8008546:	1c03      	adds	r3, r0, #0
 8008548:	1c18      	adds	r0, r3, #0
 800854a:	f7fa ff8b 	bl	8003464 <__aeabi_f2d>
 800854e:	0002      	movs	r2, r0
 8008550:	000b      	movs	r3, r1
 8008552:	492d      	ldr	r1, [pc, #180]	@ (8008608 <sen5x_measurement+0x234>)
 8008554:	0008      	movs	r0, r1
 8008556:	f015 fb79 	bl	801dc4c <iprintf>
    }
    if (voc_index != 0x7fff) {
 800855a:	2108      	movs	r1, #8
 800855c:	187b      	adds	r3, r7, r1
 800855e:	2200      	movs	r2, #0
 8008560:	5e9b      	ldrsh	r3, [r3, r2]
 8008562:	4a25      	ldr	r2, [pc, #148]	@ (80085f8 <sen5x_measurement+0x224>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d014      	beq.n	8008592 <sen5x_measurement+0x1be>
      printf("Voc index: %.1f\r\n", voc_index / 10.0f);
 8008568:	187b      	adds	r3, r7, r1
 800856a:	2200      	movs	r2, #0
 800856c:	5e9b      	ldrsh	r3, [r3, r2]
 800856e:	0018      	movs	r0, r3
 8008570:	f7f9 f82e 	bl	80015d0 <__aeabi_i2f>
 8008574:	1c03      	adds	r3, r0, #0
 8008576:	491b      	ldr	r1, [pc, #108]	@ (80085e4 <sen5x_measurement+0x210>)
 8008578:	1c18      	adds	r0, r3, #0
 800857a:	f7f8 fb2b 	bl	8000bd4 <__aeabi_fdiv>
 800857e:	1c03      	adds	r3, r0, #0
 8008580:	1c18      	adds	r0, r3, #0
 8008582:	f7fa ff6f 	bl	8003464 <__aeabi_f2d>
 8008586:	0002      	movs	r2, r0
 8008588:	000b      	movs	r3, r1
 800858a:	4920      	ldr	r1, [pc, #128]	@ (800860c <sen5x_measurement+0x238>)
 800858c:	0008      	movs	r0, r1
 800858e:	f015 fb5d 	bl	801dc4c <iprintf>
    }
    if (nox_index != 0x7fff) {
 8008592:	1dbb      	adds	r3, r7, #6
 8008594:	2200      	movs	r2, #0
 8008596:	5e9b      	ldrsh	r3, [r3, r2]
 8008598:	4a17      	ldr	r2, [pc, #92]	@ (80085f8 <sen5x_measurement+0x224>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d014      	beq.n	80085c8 <sen5x_measurement+0x1f4>
      printf("Nox index: %.1f\r\n", nox_index / 10.0f);
 800859e:	1dbb      	adds	r3, r7, #6
 80085a0:	2200      	movs	r2, #0
 80085a2:	5e9b      	ldrsh	r3, [r3, r2]
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7f9 f813 	bl	80015d0 <__aeabi_i2f>
 80085aa:	1c03      	adds	r3, r0, #0
 80085ac:	490d      	ldr	r1, [pc, #52]	@ (80085e4 <sen5x_measurement+0x210>)
 80085ae:	1c18      	adds	r0, r3, #0
 80085b0:	f7f8 fb10 	bl	8000bd4 <__aeabi_fdiv>
 80085b4:	1c03      	adds	r3, r0, #0
 80085b6:	1c18      	adds	r0, r3, #0
 80085b8:	f7fa ff54 	bl	8003464 <__aeabi_f2d>
 80085bc:	0002      	movs	r2, r0
 80085be:	000b      	movs	r3, r1
 80085c0:	4913      	ldr	r1, [pc, #76]	@ (8008610 <sen5x_measurement+0x23c>)
 80085c2:	0008      	movs	r0, r1
 80085c4:	f015 fb42 	bl	801dc4c <iprintf>
    }
  }
  return error;
 80085c8:	2316      	movs	r3, #22
 80085ca:	18fb      	adds	r3, r7, r3
 80085cc:	2200      	movs	r2, #0
 80085ce:	5e9b      	ldrsh	r3, [r3, r2]
}
 80085d0:	0018      	movs	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b007      	add	sp, #28
 80085d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d8:	08021ce0 	.word	0x08021ce0
 80085dc:	08021b28 	.word	0x08021b28
 80085e0:	200011c4 	.word	0x200011c4
 80085e4:	41200000 	.word	0x41200000
 80085e8:	08021d14 	.word	0x08021d14
 80085ec:	08021d40 	.word	0x08021d40
 80085f0:	08021d6c 	.word	0x08021d6c
 80085f4:	08021d98 	.word	0x08021d98
 80085f8:	00007fff 	.word	0x00007fff
 80085fc:	42c80000 	.word	0x42c80000
 8008600:	08021dc4 	.word	0x08021dc4
 8008604:	43480000 	.word	0x43480000
 8008608:	08021de4 	.word	0x08021de4
 800860c:	08021e04 	.word	0x08021e04
 8008610:	08021e18 	.word	0x08021e18

08008614 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8008614:	b590      	push	{r4, r7, lr}
 8008616:	b085      	sub	sp, #20
 8008618:	af02      	add	r7, sp, #8
 800861a:	6039      	str	r1, [r7, #0]
 800861c:	0011      	movs	r1, r2
 800861e:	1dfb      	adds	r3, r7, #7
 8008620:	1c02      	adds	r2, r0, #0
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	1c0a      	adds	r2, r1, #0
 8008628:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800862a:	1dfb      	adds	r3, r7, #7
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	18db      	adds	r3, r3, r3
 8008632:	b299      	uxth	r1, r3
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	4805      	ldr	r0, [pc, #20]	@ (8008650 <sensirion_i2c_hal_read+0x3c>)
 800863c:	2464      	movs	r4, #100	@ 0x64
 800863e:	9400      	str	r4, [sp, #0]
 8008640:	f006 f83e 	bl	800e6c0 <HAL_I2C_Master_Receive>
 8008644:	0003      	movs	r3, r0
 8008646:	b25b      	sxtb	r3, r3
}
 8008648:	0018      	movs	r0, r3
 800864a:	46bd      	mov	sp, r7
 800864c:	b003      	add	sp, #12
 800864e:	bd90      	pop	{r4, r7, pc}
 8008650:	20000d70 	.word	0x20000d70

08008654 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8008654:	b590      	push	{r4, r7, lr}
 8008656:	b085      	sub	sp, #20
 8008658:	af02      	add	r7, sp, #8
 800865a:	6039      	str	r1, [r7, #0]
 800865c:	0011      	movs	r1, r2
 800865e:	1dfb      	adds	r3, r7, #7
 8008660:	1c02      	adds	r2, r0, #0
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	1d3b      	adds	r3, r7, #4
 8008666:	1c0a      	adds	r2, r1, #0
 8008668:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800866a:	1dfb      	adds	r3, r7, #7
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	18db      	adds	r3, r3, r3
 8008672:	b299      	uxth	r1, r3
 8008674:	1d3b      	adds	r3, r7, #4
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	4805      	ldr	r0, [pc, #20]	@ (8008690 <sensirion_i2c_hal_write+0x3c>)
 800867c:	2464      	movs	r4, #100	@ 0x64
 800867e:	9400      	str	r4, [sp, #0]
 8008680:	f005 ff16 	bl	800e4b0 <HAL_I2C_Master_Transmit>
 8008684:	0003      	movs	r3, r0
 8008686:	b25b      	sxtb	r3, r3
}
 8008688:	0018      	movs	r0, r3
 800868a:	46bd      	mov	sp, r7
 800868c:	b003      	add	sp, #12
 800868e:	bd90      	pop	{r4, r7, pc}
 8008690:	20000d70 	.word	0x20000d70

08008694 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	22fa      	movs	r2, #250	@ 0xfa
 80086a0:	0091      	lsls	r1, r2, #2
 80086a2:	0018      	movs	r0, r3
 80086a4:	f7f7 fd7e 	bl	80001a4 <__udivsi3>
 80086a8:	0003      	movs	r3, r0
 80086aa:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	22fa      	movs	r2, #250	@ 0xfa
 80086b0:	0091      	lsls	r1, r2, #2
 80086b2:	0018      	movs	r0, r3
 80086b4:	f7f7 fdfc 	bl	80002b0 <__aeabi_uidivmod>
 80086b8:	1e0b      	subs	r3, r1, #0
 80086ba:	d002      	beq.n	80086c2 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	0018      	movs	r0, r3
 80086c6:	f004 fbeb 	bl	800cea0 <HAL_Delay>
}
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b004      	add	sp, #16
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <sen5x_statemachine>:

void sen5x_statemachine(void) {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
  if (TimestampIsReached(sen5xReadTimer)) {
 80086d8:	4b32      	ldr	r3, [pc, #200]	@ (80087a4 <sen5x_statemachine+0xd0>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	0018      	movs	r0, r3
 80086de:	f003 ffe3 	bl	800c6a8 <TimestampIsReached>
 80086e2:	1e03      	subs	r3, r0, #0
 80086e4:	d05b      	beq.n	800879e <sen5x_statemachine+0xca>
    switch (samplesState) {
 80086e6:	4b30      	ldr	r3, [pc, #192]	@ (80087a8 <sen5x_statemachine+0xd4>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d03d      	beq.n	800876a <sen5x_statemachine+0x96>
 80086ee:	dc56      	bgt.n	800879e <sen5x_statemachine+0xca>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <sen5x_statemachine+0x26>
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d018      	beq.n	800872a <sen5x_statemachine+0x56>
      sen5x_Power_Off();
      sen5xReadTimer = HAL_GetTick() + 59000; //
      samplesState = LIGHT_OUT;
    }
  }
}
 80086f8:	e051      	b.n	800879e <sen5x_statemachine+0xca>
      sen5x_Power_On();
 80086fa:	f7ff fceb 	bl	80080d4 <sen5x_Power_On>
      if (sen5x_lightup_measurement()) {
 80086fe:	f7ff fe21 	bl	8008344 <sen5x_lightup_measurement>
 8008702:	1e03      	subs	r3, r0, #0
 8008704:	d005      	beq.n	8008712 <sen5x_statemachine+0x3e>
        Error("Error executing sen5x_lightup_measurement()");
 8008706:	4a29      	ldr	r2, [pc, #164]	@ (80087ac <sen5x_statemachine+0xd8>)
 8008708:	4b29      	ldr	r3, [pc, #164]	@ (80087b0 <sen5x_statemachine+0xdc>)
 800870a:	0019      	movs	r1, r3
 800870c:	2001      	movs	r0, #1
 800870e:	f004 f821 	bl	800c754 <CreateLine>
      samplesState = LIGHT_ON;
 8008712:	4b25      	ldr	r3, [pc, #148]	@ (80087a8 <sen5x_statemachine+0xd4>)
 8008714:	2201      	movs	r2, #1
 8008716:	701a      	strb	r2, [r3, #0]
      sen5xReadTimer = HAL_GetTick() + 1000;
 8008718:	f004 fbb8 	bl	800ce8c <HAL_GetTick>
 800871c:	0003      	movs	r3, r0
 800871e:	22fa      	movs	r2, #250	@ 0xfa
 8008720:	0092      	lsls	r2, r2, #2
 8008722:	189a      	adds	r2, r3, r2
 8008724:	4b1f      	ldr	r3, [pc, #124]	@ (80087a4 <sen5x_statemachine+0xd0>)
 8008726:	601a      	str	r2, [r3, #0]
      break;
 8008728:	e039      	b.n	800879e <sen5x_statemachine+0xca>
      if (sen5x_measurement()) {
 800872a:	f7ff fe53 	bl	80083d4 <sen5x_measurement>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d005      	beq.n	800873e <sen5x_statemachine+0x6a>
        Error("Error executing sen5x_measurement()");
 8008732:	4a20      	ldr	r2, [pc, #128]	@ (80087b4 <sen5x_statemachine+0xe0>)
 8008734:	4b1e      	ldr	r3, [pc, #120]	@ (80087b0 <sen5x_statemachine+0xdc>)
 8008736:	0019      	movs	r1, r3
 8008738:	2001      	movs	r0, #1
 800873a:	f004 f80b 	bl	800c754 <CreateLine>
      if (sen5xSamples >= 3) { // show 3 samples
 800873e:	4b1e      	ldr	r3, [pc, #120]	@ (80087b8 <sen5x_statemachine+0xe4>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d902      	bls.n	800874c <sen5x_statemachine+0x78>
        samplesState = SAMPLES_TAKEN;
 8008746:	4b18      	ldr	r3, [pc, #96]	@ (80087a8 <sen5x_statemachine+0xd4>)
 8008748:	2202      	movs	r2, #2
 800874a:	701a      	strb	r2, [r3, #0]
      sen5xSamples++;
 800874c:	4b1a      	ldr	r3, [pc, #104]	@ (80087b8 <sen5x_statemachine+0xe4>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	4b18      	ldr	r3, [pc, #96]	@ (80087b8 <sen5x_statemachine+0xe4>)
 8008756:	701a      	strb	r2, [r3, #0]
      sen5xReadTimer = HAL_GetTick() + 1000;
 8008758:	f004 fb98 	bl	800ce8c <HAL_GetTick>
 800875c:	0003      	movs	r3, r0
 800875e:	22fa      	movs	r2, #250	@ 0xfa
 8008760:	0092      	lsls	r2, r2, #2
 8008762:	189a      	adds	r2, r3, r2
 8008764:	4b0f      	ldr	r3, [pc, #60]	@ (80087a4 <sen5x_statemachine+0xd0>)
 8008766:	601a      	str	r2, [r3, #0]
      break;
 8008768:	e019      	b.n	800879e <sen5x_statemachine+0xca>
      sen5xSamples = 0;
 800876a:	4b13      	ldr	r3, [pc, #76]	@ (80087b8 <sen5x_statemachine+0xe4>)
 800876c:	2200      	movs	r2, #0
 800876e:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 8008770:	f7ff fe0c 	bl	800838c <sen5x_extinguish_measurement>
 8008774:	1e03      	subs	r3, r0, #0
 8008776:	d005      	beq.n	8008784 <sen5x_statemachine+0xb0>
        Error("Error executing sen5x_extinguish_measurement()");
 8008778:	4a10      	ldr	r2, [pc, #64]	@ (80087bc <sen5x_statemachine+0xe8>)
 800877a:	4b0d      	ldr	r3, [pc, #52]	@ (80087b0 <sen5x_statemachine+0xdc>)
 800877c:	0019      	movs	r1, r3
 800877e:	2001      	movs	r0, #1
 8008780:	f003 ffe8 	bl	800c754 <CreateLine>
      sen5x_Power_Off();
 8008784:	f7ff fcb8 	bl	80080f8 <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + 59000; //
 8008788:	f004 fb80 	bl	800ce8c <HAL_GetTick>
 800878c:	0003      	movs	r3, r0
 800878e:	4a0c      	ldr	r2, [pc, #48]	@ (80087c0 <sen5x_statemachine+0xec>)
 8008790:	189a      	adds	r2, r3, r2
 8008792:	4b04      	ldr	r3, [pc, #16]	@ (80087a4 <sen5x_statemachine+0xd0>)
 8008794:	601a      	str	r2, [r3, #0]
      samplesState = LIGHT_OUT;
 8008796:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <sen5x_statemachine+0xd4>)
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
}
 800879c:	e7ff      	b.n	800879e <sen5x_statemachine+0xca>
 800879e:	46c0      	nop			@ (mov r8, r8)
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200011c0 	.word	0x200011c0
 80087a8:	200011c5 	.word	0x200011c5
 80087ac:	08021e2c 	.word	0x08021e2c
 80087b0:	08021b28 	.word	0x08021b28
 80087b4:	08021e58 	.word	0x08021e58
 80087b8:	200011c4 	.word	0x200011c4
 80087bc:	08021e7c 	.word	0x08021e7c
 80087c0:	0000e678 	.word	0x0000e678

080087c4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80087c4:	b590      	push	{r4, r7, lr}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80087ca:	1dbb      	adds	r3, r7, #6
 80087cc:	2200      	movs	r2, #0
 80087ce:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 80087d0:	1dbc      	adds	r4, r7, #6
 80087d2:	1dbb      	adds	r3, r7, #6
 80087d4:	8819      	ldrh	r1, [r3, #0]
 80087d6:	003b      	movs	r3, r7
 80087d8:	2221      	movs	r2, #33	@ 0x21
 80087da:	0018      	movs	r0, r3
 80087dc:	f001 fa3a 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 80087e0:	0003      	movs	r3, r0
 80087e2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80087e4:	1d3c      	adds	r4, r7, #4
 80087e6:	1dbb      	adds	r3, r7, #6
 80087e8:	881a      	ldrh	r2, [r3, #0]
 80087ea:	003b      	movs	r3, r7
 80087ec:	0019      	movs	r1, r3
 80087ee:	2069      	movs	r0, #105	@ 0x69
 80087f0:	f001 fab4 	bl	8009d5c <sensirion_i2c_write_data>
 80087f4:	0003      	movs	r3, r0
 80087f6:	8023      	strh	r3, [r4, #0]
    if (error) {
 80087f8:	1d3b      	adds	r3, r7, #4
 80087fa:	2200      	movs	r2, #0
 80087fc:	5e9b      	ldrsh	r3, [r3, r2]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <sen5x_start_measurement+0x46>
        return error;
 8008802:	1d3b      	adds	r3, r7, #4
 8008804:	2200      	movs	r2, #0
 8008806:	5e9b      	ldrsh	r3, [r3, r2]
 8008808:	e004      	b.n	8008814 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800880a:	4b04      	ldr	r3, [pc, #16]	@ (800881c <sen5x_start_measurement+0x58>)
 800880c:	0018      	movs	r0, r3
 800880e:	f7ff ff41 	bl	8008694 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008812:	2300      	movs	r3, #0
}
 8008814:	0018      	movs	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	b003      	add	sp, #12
 800881a:	bd90      	pop	{r4, r7, pc}
 800881c:	0000c350 	.word	0x0000c350

08008820 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8008820:	b590      	push	{r4, r7, lr}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008826:	1dbb      	adds	r3, r7, #6
 8008828:	2200      	movs	r2, #0
 800882a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800882c:	1dbc      	adds	r4, r7, #6
 800882e:	2382      	movs	r3, #130	@ 0x82
 8008830:	005a      	lsls	r2, r3, #1
 8008832:	1dbb      	adds	r3, r7, #6
 8008834:	8819      	ldrh	r1, [r3, #0]
 8008836:	003b      	movs	r3, r7
 8008838:	0018      	movs	r0, r3
 800883a:	f001 fa0b 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 800883e:	0003      	movs	r3, r0
 8008840:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008842:	1d3c      	adds	r4, r7, #4
 8008844:	1dbb      	adds	r3, r7, #6
 8008846:	881a      	ldrh	r2, [r3, #0]
 8008848:	003b      	movs	r3, r7
 800884a:	0019      	movs	r1, r3
 800884c:	2069      	movs	r0, #105	@ 0x69
 800884e:	f001 fa85 	bl	8009d5c <sensirion_i2c_write_data>
 8008852:	0003      	movs	r3, r0
 8008854:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008856:	1d3b      	adds	r3, r7, #4
 8008858:	2200      	movs	r2, #0
 800885a:	5e9b      	ldrsh	r3, [r3, r2]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <sen5x_stop_measurement+0x48>
        return error;
 8008860:	1d3b      	adds	r3, r7, #4
 8008862:	2200      	movs	r2, #0
 8008864:	5e9b      	ldrsh	r3, [r3, r2]
 8008866:	e004      	b.n	8008872 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8008868:	4b04      	ldr	r3, [pc, #16]	@ (800887c <sen5x_stop_measurement+0x5c>)
 800886a:	0018      	movs	r0, r3
 800886c:	f7ff ff12 	bl	8008694 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008870:	2300      	movs	r3, #0
}
 8008872:	0018      	movs	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	b003      	add	sp, #12
 8008878:	bd90      	pop	{r4, r7, pc}
 800887a:	46c0      	nop			@ (mov r8, r8)
 800887c:	00030d40 	.word	0x00030d40

08008880 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8008880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008882:	b08d      	sub	sp, #52	@ 0x34
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800888e:	252e      	movs	r5, #46	@ 0x2e
 8008890:	197b      	adds	r3, r7, r5
 8008892:	2200      	movs	r2, #0
 8008894:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8008896:	197c      	adds	r4, r7, r5
 8008898:	23f1      	movs	r3, #241	@ 0xf1
 800889a:	009a      	lsls	r2, r3, #2
 800889c:	197b      	adds	r3, r7, r5
 800889e:	8819      	ldrh	r1, [r3, #0]
 80088a0:	2314      	movs	r3, #20
 80088a2:	18fb      	adds	r3, r7, r3
 80088a4:	0018      	movs	r0, r3
 80088a6:	f001 f9d5 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 80088aa:	0003      	movs	r3, r0
 80088ac:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80088ae:	262c      	movs	r6, #44	@ 0x2c
 80088b0:	19bc      	adds	r4, r7, r6
 80088b2:	197b      	adds	r3, r7, r5
 80088b4:	881a      	ldrh	r2, [r3, #0]
 80088b6:	2314      	movs	r3, #20
 80088b8:	18fb      	adds	r3, r7, r3
 80088ba:	0019      	movs	r1, r3
 80088bc:	2069      	movs	r0, #105	@ 0x69
 80088be:	f001 fa4d 	bl	8009d5c <sensirion_i2c_write_data>
 80088c2:	0003      	movs	r3, r0
 80088c4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80088c6:	19bb      	adds	r3, r7, r6
 80088c8:	2200      	movs	r2, #0
 80088ca:	5e9b      	ldrsh	r3, [r3, r2]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <sen5x_read_measured_values+0x58>
        return error;
 80088d0:	19bb      	adds	r3, r7, r6
 80088d2:	2200      	movs	r2, #0
 80088d4:	5e9b      	ldrsh	r3, [r3, r2]
 80088d6:	e060      	b.n	800899a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80088d8:	4b32      	ldr	r3, [pc, #200]	@ (80089a4 <sen5x_read_measured_values+0x124>)
 80088da:	0018      	movs	r0, r3
 80088dc:	f7ff feda 	bl	8008694 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 80088e0:	252c      	movs	r5, #44	@ 0x2c
 80088e2:	197c      	adds	r4, r7, r5
 80088e4:	2314      	movs	r3, #20
 80088e6:	18fb      	adds	r3, r7, r3
 80088e8:	2210      	movs	r2, #16
 80088ea:	0019      	movs	r1, r3
 80088ec:	2069      	movs	r0, #105	@ 0x69
 80088ee:	f001 fa4e 	bl	8009d8e <sensirion_i2c_read_data_inplace>
 80088f2:	0003      	movs	r3, r0
 80088f4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80088f6:	197b      	adds	r3, r7, r5
 80088f8:	2200      	movs	r2, #0
 80088fa:	5e9b      	ldrsh	r3, [r3, r2]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <sen5x_read_measured_values+0x88>
        return error;
 8008900:	197b      	adds	r3, r7, r5
 8008902:	2200      	movs	r2, #0
 8008904:	5e9b      	ldrsh	r3, [r3, r2]
 8008906:	e048      	b.n	800899a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8008908:	2414      	movs	r4, #20
 800890a:	193b      	adds	r3, r7, r4
 800890c:	0018      	movs	r0, r3
 800890e:	f000 f9f7 	bl	8008d00 <sensirion_common_bytes_to_uint16_t>
 8008912:	0003      	movs	r3, r0
 8008914:	001a      	movs	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800891a:	193b      	adds	r3, r7, r4
 800891c:	3302      	adds	r3, #2
 800891e:	0018      	movs	r0, r3
 8008920:	f000 f9ee 	bl	8008d00 <sensirion_common_bytes_to_uint16_t>
 8008924:	0003      	movs	r3, r0
 8008926:	001a      	movs	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800892c:	193b      	adds	r3, r7, r4
 800892e:	3304      	adds	r3, #4
 8008930:	0018      	movs	r0, r3
 8008932:	f000 f9e5 	bl	8008d00 <sensirion_common_bytes_to_uint16_t>
 8008936:	0003      	movs	r3, r0
 8008938:	001a      	movs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800893e:	193b      	adds	r3, r7, r4
 8008940:	3306      	adds	r3, #6
 8008942:	0018      	movs	r0, r3
 8008944:	f000 f9dc 	bl	8008d00 <sensirion_common_bytes_to_uint16_t>
 8008948:	0003      	movs	r3, r0
 800894a:	001a      	movs	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8008950:	193b      	adds	r3, r7, r4
 8008952:	3308      	adds	r3, #8
 8008954:	0018      	movs	r0, r3
 8008956:	f000 f9e6 	bl	8008d26 <sensirion_common_bytes_to_int16_t>
 800895a:	0003      	movs	r3, r0
 800895c:	001a      	movs	r2, r3
 800895e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008960:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8008962:	193b      	adds	r3, r7, r4
 8008964:	330a      	adds	r3, #10
 8008966:	0018      	movs	r0, r3
 8008968:	f000 f9dd 	bl	8008d26 <sensirion_common_bytes_to_int16_t>
 800896c:	0003      	movs	r3, r0
 800896e:	001a      	movs	r2, r3
 8008970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008972:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8008974:	193b      	adds	r3, r7, r4
 8008976:	330c      	adds	r3, #12
 8008978:	0018      	movs	r0, r3
 800897a:	f000 f9d4 	bl	8008d26 <sensirion_common_bytes_to_int16_t>
 800897e:	0003      	movs	r3, r0
 8008980:	001a      	movs	r2, r3
 8008982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008984:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8008986:	193b      	adds	r3, r7, r4
 8008988:	330e      	adds	r3, #14
 800898a:	0018      	movs	r0, r3
 800898c:	f000 f9cb 	bl	8008d26 <sensirion_common_bytes_to_int16_t>
 8008990:	0003      	movs	r3, r0
 8008992:	001a      	movs	r2, r3
 8008994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008996:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8008998:	2300      	movs	r3, #0
}
 800899a:	0018      	movs	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	b00d      	add	sp, #52	@ 0x34
 80089a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	00004e20 	.word	0x00004e20

080089a8 <sen5x_set_temperature_offset_parameters>:
    return NO_ERROR;
}

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	0004      	movs	r4, r0
 80089b0:	0008      	movs	r0, r1
 80089b2:	0011      	movs	r1, r2
 80089b4:	1dbb      	adds	r3, r7, #6
 80089b6:	1c22      	adds	r2, r4, #0
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	1c02      	adds	r2, r0, #0
 80089be:	801a      	strh	r2, [r3, #0]
 80089c0:	1cbb      	adds	r3, r7, #2
 80089c2:	1c0a      	adds	r2, r1, #0
 80089c4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 80089c6:	2516      	movs	r5, #22
 80089c8:	197b      	adds	r3, r7, r5
 80089ca:	2200      	movs	r2, #0
 80089cc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 80089ce:	197c      	adds	r4, r7, r5
 80089d0:	4a25      	ldr	r2, [pc, #148]	@ (8008a68 <sen5x_set_temperature_offset_parameters+0xc0>)
 80089d2:	197b      	adds	r3, r7, r5
 80089d4:	8819      	ldrh	r1, [r3, #0]
 80089d6:	2608      	movs	r6, #8
 80089d8:	19bb      	adds	r3, r7, r6
 80089da:	0018      	movs	r0, r3
 80089dc:	f001 f93a 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 80089e0:	0003      	movs	r3, r0
 80089e2:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 80089e4:	197c      	adds	r4, r7, r5
 80089e6:	1dbb      	adds	r3, r7, #6
 80089e8:	2200      	movs	r2, #0
 80089ea:	5e9a      	ldrsh	r2, [r3, r2]
 80089ec:	197b      	adds	r3, r7, r5
 80089ee:	8819      	ldrh	r1, [r3, #0]
 80089f0:	19bb      	adds	r3, r7, r6
 80089f2:	0018      	movs	r0, r3
 80089f4:	f001 f999 	bl	8009d2a <sensirion_i2c_add_int16_t_to_buffer>
 80089f8:	0003      	movs	r3, r0
 80089fa:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 80089fc:	197c      	adds	r4, r7, r5
 80089fe:	1d3b      	adds	r3, r7, #4
 8008a00:	2200      	movs	r2, #0
 8008a02:	5e9a      	ldrsh	r2, [r3, r2]
 8008a04:	197b      	adds	r3, r7, r5
 8008a06:	8819      	ldrh	r1, [r3, #0]
 8008a08:	19bb      	adds	r3, r7, r6
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f001 f98d 	bl	8009d2a <sensirion_i2c_add_int16_t_to_buffer>
 8008a10:	0003      	movs	r3, r0
 8008a12:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8008a14:	197c      	adds	r4, r7, r5
 8008a16:	1cbb      	adds	r3, r7, #2
 8008a18:	881a      	ldrh	r2, [r3, #0]
 8008a1a:	197b      	adds	r3, r7, r5
 8008a1c:	8819      	ldrh	r1, [r3, #0]
 8008a1e:	19bb      	adds	r3, r7, r6
 8008a20:	0018      	movs	r0, r3
 8008a22:	f001 f943 	bl	8009cac <sensirion_i2c_add_uint16_t_to_buffer>
 8008a26:	0003      	movs	r3, r0
 8008a28:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008a2a:	2214      	movs	r2, #20
 8008a2c:	18bc      	adds	r4, r7, r2
 8008a2e:	197b      	adds	r3, r7, r5
 8008a30:	881a      	ldrh	r2, [r3, #0]
 8008a32:	19bb      	adds	r3, r7, r6
 8008a34:	0019      	movs	r1, r3
 8008a36:	2069      	movs	r0, #105	@ 0x69
 8008a38:	f001 f990 	bl	8009d5c <sensirion_i2c_write_data>
 8008a3c:	0003      	movs	r3, r0
 8008a3e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008a40:	2214      	movs	r2, #20
 8008a42:	18bb      	adds	r3, r7, r2
 8008a44:	2100      	movs	r1, #0
 8008a46:	5e5b      	ldrsh	r3, [r3, r1]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d003      	beq.n	8008a54 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8008a4c:	18bb      	adds	r3, r7, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	5e9b      	ldrsh	r3, [r3, r2]
 8008a52:	e004      	b.n	8008a5e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <sen5x_set_temperature_offset_parameters+0xc4>)
 8008a56:	0018      	movs	r0, r3
 8008a58:	f7ff fe1c 	bl	8008694 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	0018      	movs	r0, r3
 8008a60:	46bd      	mov	sp, r7
 8008a62:	b007      	add	sp, #28
 8008a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	000060b2 	.word	0x000060b2
 8008a6c:	00004e20 	.word	0x00004e20

08008a70 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8008a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a72:	b091      	sub	sp, #68	@ 0x44
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	000a      	movs	r2, r1
 8008a7a:	1cfb      	adds	r3, r7, #3
 8008a7c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8008a7e:	253e      	movs	r5, #62	@ 0x3e
 8008a80:	197b      	adds	r3, r7, r5
 8008a82:	2200      	movs	r2, #0
 8008a84:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8008a86:	197c      	adds	r4, r7, r5
 8008a88:	4a22      	ldr	r2, [pc, #136]	@ (8008b14 <sen5x_get_product_name+0xa4>)
 8008a8a:	197b      	adds	r3, r7, r5
 8008a8c:	8819      	ldrh	r1, [r3, #0]
 8008a8e:	230c      	movs	r3, #12
 8008a90:	18fb      	adds	r3, r7, r3
 8008a92:	0018      	movs	r0, r3
 8008a94:	f001 f8de 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 8008a98:	0003      	movs	r3, r0
 8008a9a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008a9c:	263c      	movs	r6, #60	@ 0x3c
 8008a9e:	19bc      	adds	r4, r7, r6
 8008aa0:	197b      	adds	r3, r7, r5
 8008aa2:	881a      	ldrh	r2, [r3, #0]
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	18fb      	adds	r3, r7, r3
 8008aa8:	0019      	movs	r1, r3
 8008aaa:	2069      	movs	r0, #105	@ 0x69
 8008aac:	f001 f956 	bl	8009d5c <sensirion_i2c_write_data>
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008ab4:	19bb      	adds	r3, r7, r6
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <sen5x_get_product_name+0x56>
        return error;
 8008abe:	19bb      	adds	r3, r7, r6
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	5e9b      	ldrsh	r3, [r3, r2]
 8008ac4:	e021      	b.n	8008b0a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8008ac6:	4b14      	ldr	r3, [pc, #80]	@ (8008b18 <sen5x_get_product_name+0xa8>)
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f7ff fde3 	bl	8008694 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8008ace:	253c      	movs	r5, #60	@ 0x3c
 8008ad0:	197c      	adds	r4, r7, r5
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	0019      	movs	r1, r3
 8008ada:	2069      	movs	r0, #105	@ 0x69
 8008adc:	f001 f957 	bl	8009d8e <sensirion_i2c_read_data_inplace>
 8008ae0:	0003      	movs	r3, r0
 8008ae2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008ae4:	197b      	adds	r3, r7, r5
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	5e9b      	ldrsh	r3, [r3, r2]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <sen5x_get_product_name+0x86>
        return error;
 8008aee:	197b      	adds	r3, r7, r5
 8008af0:	2200      	movs	r2, #0
 8008af2:	5e9b      	ldrsh	r3, [r3, r2]
 8008af4:	e009      	b.n	8008b0a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8008af6:	1cfb      	adds	r3, r7, #3
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	230c      	movs	r3, #12
 8008b00:	18fb      	adds	r3, r7, r3
 8008b02:	0018      	movs	r0, r3
 8008b04:	f000 f91d 	bl	8008d42 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	b011      	add	sp, #68	@ 0x44
 8008b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b12:	46c0      	nop			@ (mov r8, r8)
 8008b14:	0000d014 	.word	0x0000d014
 8008b18:	0000c350 	.word	0x0000c350

08008b1c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8008b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1e:	b091      	sub	sp, #68	@ 0x44
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	000a      	movs	r2, r1
 8008b26:	1cfb      	adds	r3, r7, #3
 8008b28:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8008b2a:	253e      	movs	r5, #62	@ 0x3e
 8008b2c:	197b      	adds	r3, r7, r5
 8008b2e:	2200      	movs	r2, #0
 8008b30:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8008b32:	197c      	adds	r4, r7, r5
 8008b34:	4a22      	ldr	r2, [pc, #136]	@ (8008bc0 <sen5x_get_serial_number+0xa4>)
 8008b36:	197b      	adds	r3, r7, r5
 8008b38:	8819      	ldrh	r1, [r3, #0]
 8008b3a:	230c      	movs	r3, #12
 8008b3c:	18fb      	adds	r3, r7, r3
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f001 f888 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 8008b44:	0003      	movs	r3, r0
 8008b46:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008b48:	263c      	movs	r6, #60	@ 0x3c
 8008b4a:	19bc      	adds	r4, r7, r6
 8008b4c:	197b      	adds	r3, r7, r5
 8008b4e:	881a      	ldrh	r2, [r3, #0]
 8008b50:	230c      	movs	r3, #12
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	0019      	movs	r1, r3
 8008b56:	2069      	movs	r0, #105	@ 0x69
 8008b58:	f001 f900 	bl	8009d5c <sensirion_i2c_write_data>
 8008b5c:	0003      	movs	r3, r0
 8008b5e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008b60:	19bb      	adds	r3, r7, r6
 8008b62:	2200      	movs	r2, #0
 8008b64:	5e9b      	ldrsh	r3, [r3, r2]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <sen5x_get_serial_number+0x56>
        return error;
 8008b6a:	19bb      	adds	r3, r7, r6
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	5e9b      	ldrsh	r3, [r3, r2]
 8008b70:	e021      	b.n	8008bb6 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8008b72:	4b14      	ldr	r3, [pc, #80]	@ (8008bc4 <sen5x_get_serial_number+0xa8>)
 8008b74:	0018      	movs	r0, r3
 8008b76:	f7ff fd8d 	bl	8008694 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8008b7a:	253c      	movs	r5, #60	@ 0x3c
 8008b7c:	197c      	adds	r4, r7, r5
 8008b7e:	230c      	movs	r3, #12
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	2220      	movs	r2, #32
 8008b84:	0019      	movs	r1, r3
 8008b86:	2069      	movs	r0, #105	@ 0x69
 8008b88:	f001 f901 	bl	8009d8e <sensirion_i2c_read_data_inplace>
 8008b8c:	0003      	movs	r3, r0
 8008b8e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008b90:	197b      	adds	r3, r7, r5
 8008b92:	2200      	movs	r2, #0
 8008b94:	5e9b      	ldrsh	r3, [r3, r2]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <sen5x_get_serial_number+0x86>
        return error;
 8008b9a:	197b      	adds	r3, r7, r5
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	5e9b      	ldrsh	r3, [r3, r2]
 8008ba0:	e009      	b.n	8008bb6 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8008ba2:	1cfb      	adds	r3, r7, #3
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	6879      	ldr	r1, [r7, #4]
 8008baa:	230c      	movs	r3, #12
 8008bac:	18fb      	adds	r3, r7, r3
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f000 f8c7 	bl	8008d42 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b011      	add	sp, #68	@ 0x44
 8008bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bbe:	46c0      	nop			@ (mov r8, r8)
 8008bc0:	0000d033 	.word	0x0000d033
 8008bc4:	0000c350 	.word	0x0000c350

08008bc8 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8008bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bca:	b089      	sub	sp, #36	@ 0x24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8008bd6:	251e      	movs	r5, #30
 8008bd8:	197b      	adds	r3, r7, r5
 8008bda:	2200      	movs	r2, #0
 8008bdc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8008bde:	197c      	adds	r4, r7, r5
 8008be0:	23d1      	movs	r3, #209	@ 0xd1
 8008be2:	021a      	lsls	r2, r3, #8
 8008be4:	197b      	adds	r3, r7, r5
 8008be6:	8819      	ldrh	r1, [r3, #0]
 8008be8:	2310      	movs	r3, #16
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	0018      	movs	r0, r3
 8008bee:	f001 f831 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 8008bf2:	0003      	movs	r3, r0
 8008bf4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008bf6:	261c      	movs	r6, #28
 8008bf8:	19bc      	adds	r4, r7, r6
 8008bfa:	197b      	adds	r3, r7, r5
 8008bfc:	881a      	ldrh	r2, [r3, #0]
 8008bfe:	2310      	movs	r3, #16
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	0019      	movs	r1, r3
 8008c04:	2069      	movs	r0, #105	@ 0x69
 8008c06:	f001 f8a9 	bl	8009d5c <sensirion_i2c_write_data>
 8008c0a:	0003      	movs	r3, r0
 8008c0c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008c0e:	19bb      	adds	r3, r7, r6
 8008c10:	2200      	movs	r2, #0
 8008c12:	5e9b      	ldrsh	r3, [r3, r2]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <sen5x_get_version+0x58>
        return error;
 8008c18:	19bb      	adds	r3, r7, r6
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	5e9b      	ldrsh	r3, [r3, r2]
 8008c1e:	e038      	b.n	8008c92 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8008c20:	4b1e      	ldr	r3, [pc, #120]	@ (8008c9c <sen5x_get_version+0xd4>)
 8008c22:	0018      	movs	r0, r3
 8008c24:	f7ff fd36 	bl	8008694 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8008c28:	251c      	movs	r5, #28
 8008c2a:	197c      	adds	r4, r7, r5
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	18fb      	adds	r3, r7, r3
 8008c30:	2208      	movs	r2, #8
 8008c32:	0019      	movs	r1, r3
 8008c34:	2069      	movs	r0, #105	@ 0x69
 8008c36:	f001 f8aa 	bl	8009d8e <sensirion_i2c_read_data_inplace>
 8008c3a:	0003      	movs	r3, r0
 8008c3c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008c3e:	197b      	adds	r3, r7, r5
 8008c40:	2200      	movs	r2, #0
 8008c42:	5e9b      	ldrsh	r3, [r3, r2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <sen5x_get_version+0x88>
        return error;
 8008c48:	197b      	adds	r3, r7, r5
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	5e9b      	ldrsh	r3, [r3, r2]
 8008c4e:	e020      	b.n	8008c92 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8008c50:	2110      	movs	r1, #16
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8008c5a:	187b      	adds	r3, r7, r1
 8008c5c:	785a      	ldrb	r2, [r3, #1]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8008c62:	187b      	adds	r3, r7, r1
 8008c64:	789b      	ldrb	r3, [r3, #2]
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	4193      	sbcs	r3, r2
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8008c70:	187b      	adds	r3, r7, r1
 8008c72:	78da      	ldrb	r2, [r3, #3]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8008c78:	187b      	adds	r3, r7, r1
 8008c7a:	791a      	ldrb	r2, [r3, #4]
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	795a      	ldrb	r2, [r3, #5]
 8008c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c86:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8008c88:	187b      	adds	r3, r7, r1
 8008c8a:	799a      	ldrb	r2, [r3, #6]
 8008c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c8e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	0018      	movs	r0, r3
 8008c94:	46bd      	mov	sp, r7
 8008c96:	b009      	add	sp, #36	@ 0x24
 8008c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9a:	46c0      	nop			@ (mov r8, r8)
 8008c9c:	00004e20 	.word	0x00004e20

08008ca0 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8008ca0:	b590      	push	{r4, r7, lr}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008ca6:	1dbb      	adds	r3, r7, #6
 8008ca8:	2200      	movs	r2, #0
 8008caa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8008cac:	1dbc      	adds	r4, r7, #6
 8008cae:	4a12      	ldr	r2, [pc, #72]	@ (8008cf8 <sen5x_device_reset+0x58>)
 8008cb0:	1dbb      	adds	r3, r7, #6
 8008cb2:	8819      	ldrh	r1, [r3, #0]
 8008cb4:	003b      	movs	r3, r7
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f000 ffcc 	bl	8009c54 <sensirion_i2c_add_command_to_buffer>
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008cc0:	1d3c      	adds	r4, r7, #4
 8008cc2:	1dbb      	adds	r3, r7, #6
 8008cc4:	881a      	ldrh	r2, [r3, #0]
 8008cc6:	003b      	movs	r3, r7
 8008cc8:	0019      	movs	r1, r3
 8008cca:	2069      	movs	r0, #105	@ 0x69
 8008ccc:	f001 f846 	bl	8009d5c <sensirion_i2c_write_data>
 8008cd0:	0003      	movs	r3, r0
 8008cd2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008cd4:	1d3b      	adds	r3, r7, #4
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	5e9b      	ldrsh	r3, [r3, r2]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <sen5x_device_reset+0x46>
        return error;
 8008cde:	1d3b      	adds	r3, r7, #4
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	5e9b      	ldrsh	r3, [r3, r2]
 8008ce4:	e004      	b.n	8008cf0 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8008ce6:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <sen5x_device_reset+0x5c>)
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f7ff fcd3 	bl	8008694 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	b003      	add	sp, #12
 8008cf6:	bd90      	pop	{r4, r7, pc}
 8008cf8:	0000d304 	.word	0x0000d304
 8008cfc:	00030d40 	.word	0x00030d40

08008d00 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	b21a      	sxth	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3301      	adds	r3, #1
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	b21b      	sxth	r3, r3
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	b21b      	sxth	r3, r3
 8008d1c:	b29b      	uxth	r3, r3
}
 8008d1e:	0018      	movs	r0, r3
 8008d20:	46bd      	mov	sp, r7
 8008d22:	b002      	add	sp, #8
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <sensirion_common_bytes_to_int16_t>:
uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
}

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	0018      	movs	r0, r3
 8008d32:	f7ff ffe5 	bl	8008d00 <sensirion_common_bytes_to_uint16_t>
 8008d36:	0003      	movs	r3, r0
 8008d38:	b21b      	sxth	r3, r3
}
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b002      	add	sp, #8
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b086      	sub	sp, #24
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	1dbb      	adds	r3, r7, #6
 8008d4e:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8008d50:	2316      	movs	r3, #22
 8008d52:	18fb      	adds	r3, r7, r3
 8008d54:	2200      	movs	r2, #0
 8008d56:	801a      	strh	r2, [r3, #0]
 8008d58:	e00f      	b.n	8008d7a <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8008d5a:	2016      	movs	r0, #22
 8008d5c:	183b      	adds	r3, r7, r0
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	18d2      	adds	r2, r2, r3
 8008d64:	183b      	adds	r3, r7, r0
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	18cb      	adds	r3, r1, r3
 8008d6c:	7812      	ldrb	r2, [r2, #0]
 8008d6e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8008d70:	183b      	adds	r3, r7, r0
 8008d72:	881a      	ldrh	r2, [r3, #0]
 8008d74:	183b      	adds	r3, r7, r0
 8008d76:	3201      	adds	r2, #1
 8008d78:	801a      	strh	r2, [r3, #0]
 8008d7a:	2316      	movs	r3, #22
 8008d7c:	18fa      	adds	r2, r7, r3
 8008d7e:	1dbb      	adds	r3, r7, #6
 8008d80:	8812      	ldrh	r2, [r2, #0]
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d3e8      	bcc.n	8008d5a <sensirion_common_copy_bytes+0x18>
    }
}
 8008d88:	46c0      	nop			@ (mov r8, r8)
 8008d8a:	46c0      	nop			@ (mov r8, r8)
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b006      	add	sp, #24
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d113      	bne.n	8008dda <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	22fe      	movs	r2, #254	@ 0xfe
 8008db6:	0592      	lsls	r2, r2, #22
 8008db8:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8008e28 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8008dbe:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8008e2c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8008dc4:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a19      	ldr	r2, [pc, #100]	@ (8008e30 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8008dca:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4a19      	ldr	r2, [pc, #100]	@ (8008e34 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8008dd0:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4a18      	ldr	r2, [pc, #96]	@ (8008e38 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8008dd6:	61da      	str	r2, [r3, #28]
 8008dd8:	e011      	b.n	8008dfe <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4a17      	ldr	r2, [pc, #92]	@ (8008e3c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8008dde:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a17      	ldr	r2, [pc, #92]	@ (8008e40 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8008de4:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4a16      	ldr	r2, [pc, #88]	@ (8008e44 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8008dea:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a16      	ldr	r2, [pc, #88]	@ (8008e48 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8008df0:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4a15      	ldr	r2, [pc, #84]	@ (8008e4c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8008df6:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4a15      	ldr	r2, [pc, #84]	@ (8008e50 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8008dfc:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4a14      	ldr	r2, [pc, #80]	@ (8008e54 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8008e02:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a14      	ldr	r2, [pc, #80]	@ (8008e58 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8008e08:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4a12      	ldr	r2, [pc, #72]	@ (8008e58 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8008e0e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4a12      	ldr	r2, [pc, #72]	@ (8008e5c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8008e14:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f000 f831 	bl	8008e80 <GasIndexAlgorithm_reset>
}
 8008e1e:	46c0      	nop			@ (mov r8, r8)
 8008e20:	46bd      	mov	sp, r7
 8008e22:	b004      	add	sp, #16
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	46c0      	nop			@ (mov r8, r8)
 8008e28:	00002710 	.word	0x00002710
 8008e2c:	44340000 	.word	0x44340000
 8008e30:	46859800 	.word	0x46859800
 8008e34:	46a05000 	.word	0x46a05000
 8008e38:	41f00000 	.word	0x41f00000
 8008e3c:	42c80000 	.word	0x42c80000
 8008e40:	00004e20 	.word	0x00004e20
 8008e44:	43340000 	.word	0x43340000
 8008e48:	4528c000 	.word	0x4528c000
 8008e4c:	45a32000 	.word	0x45a32000
 8008e50:	43aa0000 	.word	0x43aa0000
 8008e54:	43660000 	.word	0x43660000
 8008e58:	41400000 	.word	0x41400000
 8008e5c:	42480000 	.word	0x42480000

08008e60 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8008e6a:	22fe      	movs	r2, #254	@ 0xfe
 8008e6c:	0592      	lsls	r2, r2, #22
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7ff ff8e 	bl	8008d94 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8008e78:	46c0      	nop			@ (mov r8, r8)
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	b002      	add	sp, #8
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f000 f805 	bl	8008eac <GasIndexAlgorithm__init_instances>
}
 8008ea2:	46c0      	nop			@ (mov r8, r8)
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b002      	add	sp, #8
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f000 f8e8 	bl	800908c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f000 f9a6 	bl	8009210 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8008ec4:	1c04      	adds	r4, r0, #0
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f000 f9ab 	bl	8009224 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8008ece:	1c02      	adds	r2, r0, #0
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	1c21      	adds	r1, r4, #0
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f000 fc3b 	bl	8009750 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d107      	bne.n	8008ef2 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8008ee2:	23fe      	movs	r3, #254	@ 0xfe
 8008ee4:	059b      	lsls	r3, r3, #22
 8008ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8008f10 <GasIndexAlgorithm__init_instances+0x64>)
 8008ee8:	490a      	ldr	r1, [pc, #40]	@ (8008f14 <GasIndexAlgorithm__init_instances+0x68>)
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fc86 	bl	80097fc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8008ef0:	e005      	b.n	8008efe <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8008ef2:	4b09      	ldr	r3, [pc, #36]	@ (8008f18 <GasIndexAlgorithm__init_instances+0x6c>)
 8008ef4:	4a09      	ldr	r2, [pc, #36]	@ (8008f1c <GasIndexAlgorithm__init_instances+0x70>)
 8008ef6:	490a      	ldr	r1, [pc, #40]	@ (8008f20 <GasIndexAlgorithm__init_instances+0x74>)
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fc7f 	bl	80097fc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	0018      	movs	r0, r3
 8008f02:	f000 fd35 	bl	8009970 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8008f06:	46c0      	nop			@ (mov r8, r8)
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	b003      	add	sp, #12
 8008f0c:	bd90      	pop	{r4, r7, pc}
 8008f0e:	46c0      	nop			@ (mov r8, r8)
 8008f10:	bc257a78 	.word	0xbc257a78
 8008f14:	44198000 	.word	0x44198000
 8008f18:	42c80000 	.word	0x42c80000
 8008f1c:	bbd4fdf4 	.word	0xbbd4fdf4
 8008f20:	43550000 	.word	0x43550000

08008f24 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8008f24:	b590      	push	{r4, r7, lr}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f34:	4952      	ldr	r1, [pc, #328]	@ (8009080 <GasIndexAlgorithm_process+0x15c>)
 8008f36:	1c18      	adds	r0, r3, #0
 8008f38:	f7f7 fb04 	bl	8000544 <__aeabi_fcmple>
 8008f3c:	1e03      	subs	r3, r0, #0
 8008f3e:	d00c      	beq.n	8008f5a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	1c19      	adds	r1, r3, #0
 8008f4a:	1c10      	adds	r0, r2, #0
 8008f4c:	f7f7 fcb8 	bl	80008c0 <__aeabi_fadd>
 8008f50:	1c03      	adds	r3, r0, #0
 8008f52:	1c1a      	adds	r2, r3, #0
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f58:	e080      	b.n	800905c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dd25      	ble.n	8008fac <GasIndexAlgorithm_process+0x88>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4a48      	ldr	r2, [pc, #288]	@ (8009084 <GasIndexAlgorithm_process+0x160>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	dc21      	bgt.n	8008fac <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	dc04      	bgt.n	8008f7c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	3301      	adds	r3, #1
 8008f78:	60bb      	str	r3, [r7, #8]
 8008f7a:	e00d      	b.n	8008f98 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	4a41      	ldr	r2, [pc, #260]	@ (8009088 <GasIndexAlgorithm_process+0x164>)
 8008f82:	4694      	mov	ip, r2
 8008f84:	4463      	add	r3, ip
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	dd05      	ble.n	8008f98 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	4a3d      	ldr	r2, [pc, #244]	@ (8009088 <GasIndexAlgorithm_process+0x164>)
 8008f92:	4694      	mov	ip, r2
 8008f94:	4463      	add	r3, ip
 8008f96:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f7f8 fb15 	bl	80015d0 <__aeabi_i2f>
 8008fa6:	1c02      	adds	r2, r0, #0
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f000 f945 	bl	8009246 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8008fbc:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8008fbe:	d014      	beq.n	8008fea <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	1c11      	adds	r1, r2, #0
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f000 fbd1 	bl	8009770 <GasIndexAlgorithm__mox_model__process>
 8008fce:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	1c11      	adds	r1, r2, #0
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f000 fc25 	bl	800982c <GasIndexAlgorithm__sigmoid_scaled__process>
 8008fe2:	1c02      	adds	r2, r0, #0
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008fe8:	e003      	b.n	8008ff2 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	1c11      	adds	r1, r2, #0
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	f000 fcec 	bl	80099d8 <GasIndexAlgorithm__adaptive_lowpass__process>
 8009000:	1c02      	adds	r2, r0, #0
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900a:	21fc      	movs	r1, #252	@ 0xfc
 800900c:	0589      	lsls	r1, r1, #22
 800900e:	1c18      	adds	r0, r3, #0
 8009010:	f7f7 fa8e 	bl	8000530 <__aeabi_fcmplt>
 8009014:	1e03      	subs	r3, r0, #0
 8009016:	d003      	beq.n	8009020 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	22fc      	movs	r2, #252	@ 0xfc
 800901c:	0592      	lsls	r2, r2, #22
 800901e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	2100      	movs	r1, #0
 8009026:	1c18      	adds	r0, r3, #0
 8009028:	f7f7 fa96 	bl	8000558 <__aeabi_fcmpgt>
 800902c:	1e03      	subs	r3, r0, #0
 800902e:	d015      	beq.n	800905c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	1c11      	adds	r1, r2, #0
 8009038:	0018      	movs	r0, r3
 800903a:	f000 fa4f 	bl	80094dc <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	0018      	movs	r0, r3
 8009042:	f000 f8e5 	bl	8009210 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009046:	1c04      	adds	r4, r0, #0
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	0018      	movs	r0, r3
 800904c:	f000 f8ea 	bl	8009224 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009050:	1c02      	adds	r2, r0, #0
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1c21      	adds	r1, r4, #0
 8009056:	0018      	movs	r0, r3
 8009058:	f000 fb7a 	bl	8009750 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009060:	21fc      	movs	r1, #252	@ 0xfc
 8009062:	0589      	lsls	r1, r1, #22
 8009064:	1c18      	adds	r0, r3, #0
 8009066:	f7f7 fc2b 	bl	80008c0 <__aeabi_fadd>
 800906a:	1c03      	adds	r3, r0, #0
 800906c:	1c18      	adds	r0, r3, #0
 800906e:	f7f8 fa8f 	bl	8001590 <__aeabi_f2iz>
 8009072:	0002      	movs	r2, r0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]
    return;
 8009078:	46c0      	nop			@ (mov r8, r8)
}
 800907a:	46bd      	mov	sp, r7
 800907c:	b005      	add	sp, #20
 800907e:	bd90      	pop	{r4, r7, pc}
 8009080:	42340000 	.word	0x42340000
 8009084:	0000fde7 	.word	0x0000fde7
 8009088:	00007fff 	.word	0x00007fff

0800908c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800908c:	b5b0      	push	{r4, r5, r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	223c      	movs	r2, #60	@ 0x3c
 8009098:	2100      	movs	r1, #0
 800909a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4952      	ldr	r1, [pc, #328]	@ (8009200 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80090b6:	1c18      	adds	r0, r3, #0
 80090b8:	f7f7 fd8c 	bl	8000bd4 <__aeabi_fdiv>
 80090bc:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80090be:	2188      	movs	r1, #136	@ 0x88
 80090c0:	05c9      	lsls	r1, r1, #23
 80090c2:	1c18      	adds	r0, r3, #0
 80090c4:	f7f7 ff6c 	bl	8000fa0 <__aeabi_fmul>
 80090c8:	1c03      	adds	r3, r0, #0
 80090ca:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	494a      	ldr	r1, [pc, #296]	@ (8009200 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80090d6:	1c18      	adds	r0, r3, #0
 80090d8:	f7f7 fd7c 	bl	8000bd4 <__aeabi_fdiv>
 80090dc:	1c03      	adds	r3, r0, #0
 80090de:	1c19      	adds	r1, r3, #0
 80090e0:	1c20      	adds	r0, r4, #0
 80090e2:	f7f7 fbed 	bl	80008c0 <__aeabi_fadd>
 80090e6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80090e8:	1c19      	adds	r1, r3, #0
 80090ea:	1c28      	adds	r0, r5, #0
 80090ec:	f7f7 fd72 	bl	8000bd4 <__aeabi_fdiv>
 80090f0:	1c03      	adds	r3, r0, #0
 80090f2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	4940      	ldr	r1, [pc, #256]	@ (8009200 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80090fe:	1c18      	adds	r0, r3, #0
 8009100:	f7f7 fd68 	bl	8000bd4 <__aeabi_fdiv>
 8009104:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009106:	2185      	movs	r1, #133	@ 0x85
 8009108:	05c9      	lsls	r1, r1, #23
 800910a:	1c18      	adds	r0, r3, #0
 800910c:	f7f7 ff48 	bl	8000fa0 <__aeabi_fmul>
 8009110:	1c03      	adds	r3, r0, #0
 8009112:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	4938      	ldr	r1, [pc, #224]	@ (8009200 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800911e:	1c18      	adds	r0, r3, #0
 8009120:	f7f7 fd58 	bl	8000bd4 <__aeabi_fdiv>
 8009124:	1c03      	adds	r3, r0, #0
 8009126:	1c19      	adds	r1, r3, #0
 8009128:	1c20      	adds	r0, r4, #0
 800912a:	f7f7 fbc9 	bl	80008c0 <__aeabi_fadd>
 800912e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8009130:	1c19      	adds	r1, r3, #0
 8009132:	1c28      	adds	r0, r5, #0
 8009134:	f7f7 fd4e 	bl	8000bd4 <__aeabi_fdiv>
 8009138:	1c03      	adds	r3, r0, #0
 800913a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d118      	bne.n	800917a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800914c:	2188      	movs	r1, #136	@ 0x88
 800914e:	05c9      	lsls	r1, r1, #23
 8009150:	1c18      	adds	r0, r3, #0
 8009152:	f7f7 ff25 	bl	8000fa0 <__aeabi_fmul>
 8009156:	1c03      	adds	r3, r0, #0
 8009158:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800915e:	4929      	ldr	r1, [pc, #164]	@ (8009204 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8009160:	1c18      	adds	r0, r3, #0
 8009162:	f7f7 fbad 	bl	80008c0 <__aeabi_fadd>
 8009166:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8009168:	1c19      	adds	r1, r3, #0
 800916a:	1c20      	adds	r0, r4, #0
 800916c:	f7f7 fd32 	bl	8000bd4 <__aeabi_fdiv>
 8009170:	1c03      	adds	r3, r0, #0
 8009172:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	655a      	str	r2, [r3, #84]	@ 0x54
 8009178:	e017      	b.n	80091aa <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800917e:	2188      	movs	r1, #136	@ 0x88
 8009180:	05c9      	lsls	r1, r1, #23
 8009182:	1c18      	adds	r0, r3, #0
 8009184:	f7f7 ff0c 	bl	8000fa0 <__aeabi_fmul>
 8009188:	1c03      	adds	r3, r0, #0
 800918a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8009190:	491d      	ldr	r1, [pc, #116]	@ (8009208 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8009192:	1c18      	adds	r0, r3, #0
 8009194:	f7f7 fb94 	bl	80008c0 <__aeabi_fadd>
 8009198:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800919a:	1c19      	adds	r1, r3, #0
 800919c:	1c20      	adds	r0, r4, #0
 800919e:	f7f7 fd19 	bl	8000bd4 <__aeabi_fdiv>
 80091a2:	1c03      	adds	r3, r0, #0
 80091a4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80091ae:	2185      	movs	r1, #133	@ 0x85
 80091b0:	05c9      	lsls	r1, r1, #23
 80091b2:	1c18      	adds	r0, r3, #0
 80091b4:	f7f7 fef4 	bl	8000fa0 <__aeabi_fmul>
 80091b8:	1c03      	adds	r3, r0, #0
 80091ba:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4912      	ldr	r1, [pc, #72]	@ (800920c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80091c2:	1c18      	adds	r0, r3, #0
 80091c4:	f7f7 fb7c 	bl	80008c0 <__aeabi_fadd>
 80091c8:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80091ca:	1c19      	adds	r1, r3, #0
 80091cc:	1c20      	adds	r0, r4, #0
 80091ce:	f7f7 fd01 	bl	8000bd4 <__aeabi_fdiv>
 80091d2:	1c03      	adds	r3, r0, #0
 80091d4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80091f8:	46c0      	nop			@ (mov r8, r8)
 80091fa:	46bd      	mov	sp, r7
 80091fc:	b002      	add	sp, #8
 80091fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009200:	45610000 	.word	0x45610000
 8009204:	44960000 	.word	0x44960000
 8009208:	41a00000 	.word	0x41a00000
 800920c:	451c4000 	.word	0x451c4000

08009210 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800921c:	1c18      	adds	r0, r3, #0
 800921e:	46bd      	mov	sp, r7
 8009220:	b002      	add	sp, #8
 8009222:	bd80      	pop	{r7, pc}

08009224 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8009234:	1c19      	adds	r1, r3, #0
 8009236:	1c10      	adds	r0, r2, #0
 8009238:	f7f7 fb42 	bl	80008c0 <__aeabi_fadd>
 800923c:	1c03      	adds	r3, r0, #0
}
 800923e:	1c18      	adds	r0, r3, #0
 8009240:	46bd      	mov	sp, r7
 8009242:	b002      	add	sp, #8
 8009244:	bd80      	pop	{r7, pc}

08009246 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	223c      	movs	r2, #60	@ 0x3c
 8009252:	5c9b      	ldrb	r3, [r3, r2]
}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b002      	add	sp, #8
 800925a:	bd80      	pop	{r7, pc}

0800925c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800925c:	b5b0      	push	{r4, r5, r7, lr}
 800925e:	b08c      	sub	sp, #48	@ 0x30
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8009268:	1c19      	adds	r1, r3, #0
 800926a:	4895      	ldr	r0, [pc, #596]	@ (80094c0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800926c:	f7f7 ffd6 	bl	800121c <__aeabi_fsub>
 8009270:	1c03      	adds	r3, r0, #0
 8009272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009278:	1c19      	adds	r1, r3, #0
 800927a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800927c:	f7f7 f96c 	bl	8000558 <__aeabi_fcmpgt>
 8009280:	1e03      	subs	r3, r0, #0
 8009282:	d00b      	beq.n	800929c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800928c:	1c19      	adds	r1, r3, #0
 800928e:	1c10      	adds	r0, r2, #0
 8009290:	f7f7 fb16 	bl	80008c0 <__aeabi_fadd>
 8009294:	1c03      	adds	r3, r0, #0
 8009296:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092a0:	1c19      	adds	r1, r3, #0
 80092a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092a4:	f7f7 f958 	bl	8000558 <__aeabi_fcmpgt>
 80092a8:	1e03      	subs	r3, r0, #0
 80092aa:	d00b      	beq.n	80092c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80092b4:	1c19      	adds	r1, r3, #0
 80092b6:	1c10      	adds	r0, r2, #0
 80092b8:	f7f7 fb02 	bl	80008c0 <__aeabi_fadd>
 80092bc:	1c03      	adds	r3, r0, #0
 80092be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6959      	ldr	r1, [r3, #20]
 80092c8:	4a7e      	ldr	r2, [pc, #504]	@ (80094c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	0018      	movs	r0, r3
 80092ce:	f000 f9f1 	bl	80096b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	1c11      	adds	r1, r2, #0
 80092da:	0018      	movs	r0, r3
 80092dc:	f000 f9fa 	bl	80096d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80092e0:	1c03      	adds	r3, r0, #0
 80092e2:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80092f0:	1c19      	adds	r1, r3, #0
 80092f2:	1c10      	adds	r0, r2, #0
 80092f4:	f7f7 ff92 	bl	800121c <__aeabi_fsub>
 80092f8:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80092fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092fc:	1c18      	adds	r0, r3, #0
 80092fe:	f7f7 fe4f 	bl	8000fa0 <__aeabi_fmul>
 8009302:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009304:	1c19      	adds	r1, r3, #0
 8009306:	1c20      	adds	r0, r4, #0
 8009308:	f7f7 fada 	bl	80008c0 <__aeabi_fadd>
 800930c:	1c03      	adds	r3, r0, #0
 800930e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8009318:	1c19      	adds	r1, r3, #0
 800931a:	486b      	ldr	r0, [pc, #428]	@ (80094c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800931c:	f7f7 ff7e 	bl	800121c <__aeabi_fsub>
 8009320:	1c03      	adds	r3, r0, #0
 8009322:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	1c11      	adds	r1, r2, #0
 800932c:	0018      	movs	r0, r3
 800932e:	f000 f9d1 	bl	80096d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009332:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8009334:	1c19      	adds	r1, r3, #0
 8009336:	1c28      	adds	r0, r5, #0
 8009338:	f7f7 fe32 	bl	8000fa0 <__aeabi_fmul>
 800933c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800933e:	1c19      	adds	r1, r3, #0
 8009340:	1c20      	adds	r0, r4, #0
 8009342:	f7f7 fabd 	bl	80008c0 <__aeabi_fadd>
 8009346:	1c03      	adds	r3, r0, #0
 8009348:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800934a:	4a60      	ldr	r2, [pc, #384]	@ (80094cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800934c:	6a39      	ldr	r1, [r7, #32]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	0018      	movs	r0, r3
 8009352:	f000 f9af 	bl	80096b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	1c11      	adds	r1, r2, #0
 800935e:	0018      	movs	r0, r3
 8009360:	f000 f9b8 	bl	80096d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009364:	1c03      	adds	r3, r0, #0
 8009366:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8009368:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800936a:	69f8      	ldr	r0, [r7, #28]
 800936c:	f7f7 fe18 	bl	8000fa0 <__aeabi_fmul>
 8009370:	1c03      	adds	r3, r0, #0
 8009372:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6999      	ldr	r1, [r3, #24]
 800937c:	4a51      	ldr	r2, [pc, #324]	@ (80094c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	0018      	movs	r0, r3
 8009382:	f000 f997 	bl	80096b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	1c11      	adds	r1, r2, #0
 800938e:	0018      	movs	r0, r3
 8009390:	f000 f9a0 	bl	80096d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009394:	1c03      	adds	r3, r0, #0
 8009396:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80093a4:	1c19      	adds	r1, r3, #0
 80093a6:	1c10      	adds	r0, r2, #0
 80093a8:	f7f7 ff38 	bl	800121c <__aeabi_fsub>
 80093ac:	1c03      	adds	r3, r0, #0
 80093ae:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80093b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093b2:	69b8      	ldr	r0, [r7, #24]
 80093b4:	f7f7 ff32 	bl	800121c <__aeabi_fsub>
 80093b8:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80093ba:	1c19      	adds	r1, r3, #0
 80093bc:	1c28      	adds	r0, r5, #0
 80093be:	f7f7 fdef 	bl	8000fa0 <__aeabi_fmul>
 80093c2:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80093c4:	1c19      	adds	r1, r3, #0
 80093c6:	1c20      	adds	r0, r4, #0
 80093c8:	f7f7 fa7a 	bl	80008c0 <__aeabi_fadd>
 80093cc:	1c03      	adds	r3, r0, #0
 80093ce:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80093d8:	1c19      	adds	r1, r3, #0
 80093da:	483b      	ldr	r0, [pc, #236]	@ (80094c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80093dc:	f7f7 ff1e 	bl	800121c <__aeabi_fsub>
 80093e0:	1c03      	adds	r3, r0, #0
 80093e2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	1c11      	adds	r1, r2, #0
 80093ec:	0018      	movs	r0, r3
 80093ee:	f000 f971 	bl	80096d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80093f2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80093f4:	1c19      	adds	r1, r3, #0
 80093f6:	1c28      	adds	r0, r5, #0
 80093f8:	f7f7 fdd2 	bl	8000fa0 <__aeabi_fmul>
 80093fc:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80093fe:	1c19      	adds	r1, r3, #0
 8009400:	1c20      	adds	r0, r4, #0
 8009402:	f7f7 fa5d 	bl	80008c0 <__aeabi_fadd>
 8009406:	1c03      	adds	r3, r0, #0
 8009408:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800940a:	4a30      	ldr	r2, [pc, #192]	@ (80094cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800940c:	6939      	ldr	r1, [r7, #16]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	0018      	movs	r0, r3
 8009412:	f000 f94f 	bl	80096b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	1c11      	adds	r1, r2, #0
 800941e:	0018      	movs	r0, r3
 8009420:	f000 f958 	bl	80096d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009424:	1c03      	adds	r3, r0, #0
 8009426:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8009428:	6979      	ldr	r1, [r7, #20]
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7f7 fdb8 	bl	8000fa0 <__aeabi_fmul>
 8009430:	1c03      	adds	r3, r0, #0
 8009432:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	4923      	ldr	r1, [pc, #140]	@ (80094d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8009442:	1c18      	adds	r0, r3, #0
 8009444:	f7f7 fbc6 	bl	8000bd4 <__aeabi_fdiv>
 8009448:	1c03      	adds	r3, r0, #0
 800944a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800944c:	69f9      	ldr	r1, [r7, #28]
 800944e:	20fe      	movs	r0, #254	@ 0xfe
 8009450:	0580      	lsls	r0, r0, #22
 8009452:	f7f7 fee3 	bl	800121c <__aeabi_fsub>
 8009456:	1c03      	adds	r3, r0, #0
 8009458:	491e      	ldr	r1, [pc, #120]	@ (80094d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800945a:	1c18      	adds	r0, r3, #0
 800945c:	f7f7 fda0 	bl	8000fa0 <__aeabi_fmul>
 8009460:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8009462:	491d      	ldr	r1, [pc, #116]	@ (80094d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8009464:	1c18      	adds	r0, r3, #0
 8009466:	f7f7 fed9 	bl	800121c <__aeabi_fsub>
 800946a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800946c:	1c19      	adds	r1, r3, #0
 800946e:	1c28      	adds	r0, r5, #0
 8009470:	f7f7 fd96 	bl	8000fa0 <__aeabi_fmul>
 8009474:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009476:	1c19      	adds	r1, r3, #0
 8009478:	1c20      	adds	r0, r4, #0
 800947a:	f7f7 fa21 	bl	80008c0 <__aeabi_fadd>
 800947e:	1c03      	adds	r3, r0, #0
 8009480:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800948a:	2100      	movs	r1, #0
 800948c:	1c18      	adds	r0, r3, #0
 800948e:	f7f7 f84f 	bl	8000530 <__aeabi_fcmplt>
 8009492:	1e03      	subs	r3, r0, #0
 8009494:	d002      	beq.n	800949c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80094a4:	1c19      	adds	r1, r3, #0
 80094a6:	1c10      	adds	r0, r2, #0
 80094a8:	f7f7 f856 	bl	8000558 <__aeabi_fcmpgt>
 80094ac:	1e03      	subs	r3, r0, #0
 80094ae:	d100      	bne.n	80094b2 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80094b0:	e002      	b.n	80094b8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80094b8:	46c0      	nop			@ (mov r8, r8)
 80094ba:	46bd      	mov	sp, r7
 80094bc:	b00c      	add	sp, #48	@ 0x30
 80094be:	bdb0      	pop	{r4, r5, r7, pc}
 80094c0:	46fffe00 	.word	0x46fffe00
 80094c4:	3c23d70a 	.word	0x3c23d70a
 80094c8:	43ff0000 	.word	0x43ff0000
 80094cc:	3db851ec 	.word	0x3db851ec
 80094d0:	42700000 	.word	0x42700000
 80094d4:	3fa66666 	.word	0x3fa66666
 80094d8:	3e99999a 	.word	0x3e99999a

080094dc <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	223c      	movs	r2, #60	@ 0x3c
 80094ea:	5c9b      	ldrb	r3, [r3, r2]
 80094ec:	2201      	movs	r2, #1
 80094ee:	4053      	eors	r3, r2
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	223c      	movs	r2, #60	@ 0x3c
 80094fa:	2101      	movs	r1, #1
 80094fc:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800950a:	e0c8      	b.n	800969e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009510:	4965      	ldr	r1, [pc, #404]	@ (80096a8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8009512:	1c18      	adds	r0, r3, #0
 8009514:	f7f7 f82a 	bl	800056c <__aeabi_fcmpge>
 8009518:	1e03      	subs	r3, r0, #0
 800951a:	d107      	bne.n	800952c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8009520:	4962      	ldr	r1, [pc, #392]	@ (80096ac <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8009522:	1c18      	adds	r0, r3, #0
 8009524:	f7f7 f80e 	bl	8000544 <__aeabi_fcmple>
 8009528:	1e03      	subs	r3, r0, #0
 800952a:	d00e      	beq.n	800954a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8009534:	1c19      	adds	r1, r3, #0
 8009536:	1c10      	adds	r0, r2, #0
 8009538:	f7f7 f9c2 	bl	80008c0 <__aeabi_fadd>
 800953c:	1c03      	adds	r3, r0, #0
 800953e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954e:	1c19      	adds	r1, r3, #0
 8009550:	6838      	ldr	r0, [r7, #0]
 8009552:	f7f7 fe63 	bl	800121c <__aeabi_fsub>
 8009556:	1c03      	adds	r3, r0, #0
 8009558:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	0018      	movs	r0, r3
 800955e:	f7ff fe7d 	bl	800925c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009566:	1c19      	adds	r1, r3, #0
 8009568:	6838      	ldr	r0, [r7, #0]
 800956a:	f7f7 fe57 	bl	800121c <__aeabi_fsub>
 800956e:	1c03      	adds	r3, r0, #0
 8009570:	2185      	movs	r1, #133	@ 0x85
 8009572:	05c9      	lsls	r1, r1, #23
 8009574:	1c18      	adds	r0, r3, #0
 8009576:	f7f7 fb2d 	bl	8000bd4 <__aeabi_fdiv>
 800957a:	1c03      	adds	r3, r0, #0
 800957c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800957e:	2100      	movs	r1, #0
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7f6 ffd5 	bl	8000530 <__aeabi_fcmplt>
 8009586:	1e03      	subs	r3, r0, #0
 8009588:	d008      	beq.n	800959c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	1c18      	adds	r0, r3, #0
 8009592:	f7f7 fe43 	bl	800121c <__aeabi_fsub>
 8009596:	1c03      	adds	r3, r0, #0
 8009598:	617b      	str	r3, [r7, #20]
 800959a:	e007      	b.n	80095ac <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a0:	1c19      	adds	r1, r3, #0
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7f7 f98c 	bl	80008c0 <__aeabi_fadd>
 80095a8:	1c03      	adds	r3, r0, #0
 80095aa:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80095ac:	23fe      	movs	r3, #254	@ 0xfe
 80095ae:	059b      	lsls	r3, r3, #22
 80095b0:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80095b2:	493f      	ldr	r1, [pc, #252]	@ (80096b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80095b4:	6978      	ldr	r0, [r7, #20]
 80095b6:	f7f6 ffcf 	bl	8000558 <__aeabi_fcmpgt>
 80095ba:	1e03      	subs	r3, r0, #0
 80095bc:	d010      	beq.n	80095e0 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80095be:	493c      	ldr	r1, [pc, #240]	@ (80096b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80095c0:	6978      	ldr	r0, [r7, #20]
 80095c2:	f7f7 fb07 	bl	8000bd4 <__aeabi_fdiv>
 80095c6:	1c03      	adds	r3, r0, #0
 80095c8:	1c1c      	adds	r4, r3, #0
 80095ca:	4939      	ldr	r1, [pc, #228]	@ (80096b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80095cc:	6978      	ldr	r0, [r7, #20]
 80095ce:	f7f7 fb01 	bl	8000bd4 <__aeabi_fdiv>
 80095d2:	1c03      	adds	r3, r0, #0
 80095d4:	1c19      	adds	r1, r3, #0
 80095d6:	1c20      	adds	r0, r4, #0
 80095d8:	f7f7 fce2 	bl	8000fa0 <__aeabi_fmul>
 80095dc:	1c03      	adds	r3, r0, #0
 80095de:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80095e4:	1c19      	adds	r1, r3, #0
 80095e6:	2085      	movs	r0, #133	@ 0x85
 80095e8:	05c0      	lsls	r0, r0, #23
 80095ea:	f7f7 fe17 	bl	800121c <__aeabi_fsub>
 80095ee:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80095f0:	6939      	ldr	r1, [r7, #16]
 80095f2:	1c18      	adds	r0, r3, #0
 80095f4:	f7f7 fcd4 	bl	8000fa0 <__aeabi_fmul>
 80095f8:	1c03      	adds	r3, r0, #0
 80095fa:	1c18      	adds	r0, r3, #0
 80095fc:	f017 fa46 	bl	8020a8c <sqrtf>
 8009600:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800960a:	2185      	movs	r1, #133	@ 0x85
 800960c:	05c9      	lsls	r1, r1, #23
 800960e:	6938      	ldr	r0, [r7, #16]
 8009610:	f7f7 fcc6 	bl	8000fa0 <__aeabi_fmul>
 8009614:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8009616:	1c19      	adds	r1, r3, #0
 8009618:	1c28      	adds	r0, r5, #0
 800961a:	f7f7 fadb 	bl	8000bd4 <__aeabi_fdiv>
 800961e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8009620:	1c19      	adds	r1, r3, #0
 8009622:	1c20      	adds	r0, r4, #0
 8009624:	f7f7 fcbc 	bl	8000fa0 <__aeabi_fmul>
 8009628:	1c03      	adds	r3, r0, #0
 800962a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009630:	68f9      	ldr	r1, [r7, #12]
 8009632:	1c18      	adds	r0, r3, #0
 8009634:	f7f7 fcb4 	bl	8000fa0 <__aeabi_fmul>
 8009638:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800963a:	6939      	ldr	r1, [r7, #16]
 800963c:	1c18      	adds	r0, r3, #0
 800963e:	f7f7 fac9 	bl	8000bd4 <__aeabi_fdiv>
 8009642:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8009644:	68f9      	ldr	r1, [r7, #12]
 8009646:	1c18      	adds	r0, r3, #0
 8009648:	f7f7 fcaa 	bl	8000fa0 <__aeabi_fmul>
 800964c:	1c03      	adds	r3, r0, #0
             sqrtf(
 800964e:	1c19      	adds	r1, r3, #0
 8009650:	1c20      	adds	r0, r4, #0
 8009652:	f7f7 f935 	bl	80008c0 <__aeabi_fadd>
 8009656:	1c03      	adds	r3, r0, #0
 8009658:	1c18      	adds	r0, r3, #0
 800965a:	f017 fa17 	bl	8020a8c <sqrtf>
 800965e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8009660:	1c19      	adds	r1, r3, #0
 8009662:	1c30      	adds	r0, r6, #0
 8009664:	f7f7 fc9c 	bl	8000fa0 <__aeabi_fmul>
 8009668:	1c03      	adds	r3, r0, #0
 800966a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009678:	68f9      	ldr	r1, [r7, #12]
 800967a:	1c18      	adds	r0, r3, #0
 800967c:	f7f7 fc90 	bl	8000fa0 <__aeabi_fmul>
 8009680:	1c03      	adds	r3, r0, #0
 8009682:	2182      	movs	r1, #130	@ 0x82
 8009684:	05c9      	lsls	r1, r1, #23
 8009686:	1c18      	adds	r0, r3, #0
 8009688:	f7f7 faa4 	bl	8000bd4 <__aeabi_fdiv>
 800968c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800968e:	1c19      	adds	r1, r3, #0
 8009690:	1c20      	adds	r0, r4, #0
 8009692:	f7f7 f915 	bl	80008c0 <__aeabi_fadd>
 8009696:	1c03      	adds	r3, r0, #0
 8009698:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800969e:	46c0      	nop			@ (mov r8, r8)
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b007      	add	sp, #28
 80096a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a6:	46c0      	nop			@ (mov r8, r8)
 80096a8:	42c80000 	.word	0x42c80000
 80096ac:	c2c80000 	.word	0xc2c80000
 80096b0:	44b40000 	.word	0x44b40000

080096b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80096cc:	46c0      	nop			@ (mov r8, r8)
 80096ce:	46bd      	mov	sp, r7
 80096d0:	b004      	add	sp, #16
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80096d4:	b590      	push	{r4, r7, lr}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096e6:	1c19      	adds	r1, r3, #0
 80096e8:	6838      	ldr	r0, [r7, #0]
 80096ea:	f7f7 fd97 	bl	800121c <__aeabi_fsub>
 80096ee:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80096f0:	1c19      	adds	r1, r3, #0
 80096f2:	1c20      	adds	r0, r4, #0
 80096f4:	f7f7 fc54 	bl	8000fa0 <__aeabi_fmul>
 80096f8:	1c03      	adds	r3, r0, #0
 80096fa:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80096fc:	4912      	ldr	r1, [pc, #72]	@ (8009748 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7f6 ff16 	bl	8000530 <__aeabi_fcmplt>
 8009704:	1e03      	subs	r3, r0, #0
 8009706:	d002      	beq.n	800970e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8009708:	23fe      	movs	r3, #254	@ 0xfe
 800970a:	059b      	lsls	r3, r3, #22
 800970c:	e018      	b.n	8009740 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800970e:	490f      	ldr	r1, [pc, #60]	@ (800974c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7f6 ff21 	bl	8000558 <__aeabi_fcmpgt>
 8009716:	1e03      	subs	r3, r0, #0
 8009718:	d001      	beq.n	800971e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800971a:	2300      	movs	r3, #0
 800971c:	e010      	b.n	8009740 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1c18      	adds	r0, r3, #0
 8009722:	f017 f98b 	bl	8020a3c <expf>
 8009726:	1c03      	adds	r3, r0, #0
 8009728:	21fe      	movs	r1, #254	@ 0xfe
 800972a:	0589      	lsls	r1, r1, #22
 800972c:	1c18      	adds	r0, r3, #0
 800972e:	f7f7 f8c7 	bl	80008c0 <__aeabi_fadd>
 8009732:	1c03      	adds	r3, r0, #0
 8009734:	1c19      	adds	r1, r3, #0
 8009736:	20fe      	movs	r0, #254	@ 0xfe
 8009738:	0580      	lsls	r0, r0, #22
 800973a:	f7f7 fa4b 	bl	8000bd4 <__aeabi_fdiv>
 800973e:	1c03      	adds	r3, r0, #0
    }
}
 8009740:	1c18      	adds	r0, r3, #0
 8009742:	46bd      	mov	sp, r7
 8009744:	b005      	add	sp, #20
 8009746:	bd90      	pop	{r4, r7, pc}
 8009748:	c2480000 	.word	0xc2480000
 800974c:	42480000 	.word	0x42480000

08009750 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009768:	46c0      	nop			@ (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	b004      	add	sp, #16
 800976e:	bd80      	pop	{r7, pc}

08009770 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8009770:	b590      	push	{r4, r7, lr}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d114      	bne.n	80097ac <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009786:	1c19      	adds	r1, r3, #0
 8009788:	6838      	ldr	r0, [r7, #0]
 800978a:	f7f7 fd47 	bl	800121c <__aeabi_fsub>
 800978e:	1c03      	adds	r3, r0, #0
 8009790:	4918      	ldr	r1, [pc, #96]	@ (80097f4 <GasIndexAlgorithm__mox_model__process+0x84>)
 8009792:	1c18      	adds	r0, r3, #0
 8009794:	f7f7 fa1e 	bl	8000bd4 <__aeabi_fdiv>
 8009798:	1c03      	adds	r3, r0, #0
 800979a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80097a0:	1c19      	adds	r1, r3, #0
 80097a2:	1c10      	adds	r0, r2, #0
 80097a4:	f7f7 fbfc 	bl	8000fa0 <__aeabi_fmul>
 80097a8:	1c03      	adds	r3, r0, #0
 80097aa:	e01f      	b.n	80097ec <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097b0:	1c19      	adds	r1, r3, #0
 80097b2:	6838      	ldr	r0, [r7, #0]
 80097b4:	f7f7 fd32 	bl	800121c <__aeabi_fsub>
 80097b8:	1c03      	adds	r3, r0, #0
 80097ba:	1c1a      	adds	r2, r3, #0
 80097bc:	2380      	movs	r3, #128	@ 0x80
 80097be:	061b      	lsls	r3, r3, #24
 80097c0:	4053      	eors	r3, r2
 80097c2:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097c8:	490b      	ldr	r1, [pc, #44]	@ (80097f8 <GasIndexAlgorithm__mox_model__process+0x88>)
 80097ca:	1c18      	adds	r0, r3, #0
 80097cc:	f7f7 f878 	bl	80008c0 <__aeabi_fadd>
 80097d0:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80097d2:	1c19      	adds	r1, r3, #0
 80097d4:	1c20      	adds	r0, r4, #0
 80097d6:	f7f7 f9fd 	bl	8000bd4 <__aeabi_fdiv>
 80097da:	1c03      	adds	r3, r0, #0
 80097dc:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80097e2:	1c19      	adds	r1, r3, #0
 80097e4:	1c10      	adds	r0, r2, #0
 80097e6:	f7f7 fbdb 	bl	8000fa0 <__aeabi_fmul>
 80097ea:	1c03      	adds	r3, r0, #0
    }
}
 80097ec:	1c18      	adds	r0, r3, #0
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b003      	add	sp, #12
 80097f2:	bd90      	pop	{r4, r7, pc}
 80097f4:	44fa0000 	.word	0x44fa0000
 80097f8:	435c0000 	.word	0x435c0000

080097fc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2180      	movs	r1, #128	@ 0x80
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2184      	movs	r1, #132	@ 0x84
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2188      	movs	r1, #136	@ 0x88
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	505a      	str	r2, [r3, r1]
}
 8009822:	46c0      	nop			@ (mov r8, r8)
 8009824:	46bd      	mov	sp, r7
 8009826:	b004      	add	sp, #16
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800982c:	b590      	push	{r4, r7, lr}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2280      	movs	r2, #128	@ 0x80
 800983a:	589c      	ldr	r4, [r3, r2]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2284      	movs	r2, #132	@ 0x84
 8009840:	589b      	ldr	r3, [r3, r2]
 8009842:	1c19      	adds	r1, r3, #0
 8009844:	6838      	ldr	r0, [r7, #0]
 8009846:	f7f7 fce9 	bl	800121c <__aeabi_fsub>
 800984a:	1c03      	adds	r3, r0, #0
 800984c:	1c19      	adds	r1, r3, #0
 800984e:	1c20      	adds	r0, r4, #0
 8009850:	f7f7 fba6 	bl	8000fa0 <__aeabi_fmul>
 8009854:	1c03      	adds	r3, r0, #0
 8009856:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8009858:	4940      	ldr	r1, [pc, #256]	@ (800995c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800985a:	68b8      	ldr	r0, [r7, #8]
 800985c:	f7f6 fe68 	bl	8000530 <__aeabi_fcmplt>
 8009860:	1e03      	subs	r3, r0, #0
 8009862:	d001      	beq.n	8009868 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8009864:	4b3e      	ldr	r3, [pc, #248]	@ (8009960 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8009866:	e075      	b.n	8009954 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8009868:	493e      	ldr	r1, [pc, #248]	@ (8009964 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800986a:	68b8      	ldr	r0, [r7, #8]
 800986c:	f7f6 fe74 	bl	8000558 <__aeabi_fcmpgt>
 8009870:	1e03      	subs	r3, r0, #0
 8009872:	d001      	beq.n	8009878 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8009874:	2300      	movs	r3, #0
 8009876:	e06d      	b.n	8009954 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8009878:	2100      	movs	r1, #0
 800987a:	6838      	ldr	r0, [r7, #0]
 800987c:	f7f6 fe76 	bl	800056c <__aeabi_fcmpge>
 8009880:	1e03      	subs	r3, r0, #0
 8009882:	d047      	beq.n	8009914 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2288      	movs	r2, #136	@ 0x88
 8009888:	589b      	ldr	r3, [r3, r2]
 800988a:	21fe      	movs	r1, #254	@ 0xfe
 800988c:	0589      	lsls	r1, r1, #22
 800988e:	1c18      	adds	r0, r3, #0
 8009890:	f7f6 fe48 	bl	8000524 <__aeabi_fcmpeq>
 8009894:	1e03      	subs	r3, r0, #0
 8009896:	d00e      	beq.n	80098b6 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	1c19      	adds	r1, r3, #0
 800989e:	20fe      	movs	r0, #254	@ 0xfe
 80098a0:	0580      	lsls	r0, r0, #22
 80098a2:	f7f7 fcbb 	bl	800121c <__aeabi_fsub>
 80098a6:	1c03      	adds	r3, r0, #0
 80098a8:	492f      	ldr	r1, [pc, #188]	@ (8009968 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80098aa:	1c18      	adds	r0, r3, #0
 80098ac:	f7f7 fb78 	bl	8000fa0 <__aeabi_fmul>
 80098b0:	1c03      	adds	r3, r0, #0
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e012      	b.n	80098dc <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	492c      	ldr	r1, [pc, #176]	@ (800996c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80098bc:	1c18      	adds	r0, r3, #0
 80098be:	f7f7 fb6f 	bl	8000fa0 <__aeabi_fmul>
 80098c2:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80098c4:	1c19      	adds	r1, r3, #0
 80098c6:	4826      	ldr	r0, [pc, #152]	@ (8009960 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80098c8:	f7f7 fca8 	bl	800121c <__aeabi_fsub>
 80098cc:	1c03      	adds	r3, r0, #0
 80098ce:	2181      	movs	r1, #129	@ 0x81
 80098d0:	05c9      	lsls	r1, r1, #23
 80098d2:	1c18      	adds	r0, r3, #0
 80098d4:	f7f7 f97e 	bl	8000bd4 <__aeabi_fdiv>
 80098d8:	1c03      	adds	r3, r0, #0
 80098da:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80098dc:	4920      	ldr	r1, [pc, #128]	@ (8009960 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7f6 ffee 	bl	80008c0 <__aeabi_fadd>
 80098e4:	1c03      	adds	r3, r0, #0
 80098e6:	1c1c      	adds	r4, r3, #0
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	1c18      	adds	r0, r3, #0
 80098ec:	f017 f8a6 	bl	8020a3c <expf>
 80098f0:	1c03      	adds	r3, r0, #0
 80098f2:	21fe      	movs	r1, #254	@ 0xfe
 80098f4:	0589      	lsls	r1, r1, #22
 80098f6:	1c18      	adds	r0, r3, #0
 80098f8:	f7f6 ffe2 	bl	80008c0 <__aeabi_fadd>
 80098fc:	1c03      	adds	r3, r0, #0
 80098fe:	1c19      	adds	r1, r3, #0
 8009900:	1c20      	adds	r0, r4, #0
 8009902:	f7f7 f967 	bl	8000bd4 <__aeabi_fdiv>
 8009906:	1c03      	adds	r3, r0, #0
 8009908:	68f9      	ldr	r1, [r7, #12]
 800990a:	1c18      	adds	r0, r3, #0
 800990c:	f7f7 fc86 	bl	800121c <__aeabi_fsub>
 8009910:	1c03      	adds	r3, r0, #0
 8009912:	e01f      	b.n	8009954 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2188      	movs	r1, #136	@ 0x88
 800991c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800991e:	1c19      	adds	r1, r3, #0
 8009920:	1c10      	adds	r0, r2, #0
 8009922:	f7f7 f957 	bl	8000bd4 <__aeabi_fdiv>
 8009926:	1c03      	adds	r3, r0, #0
 8009928:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	1c18      	adds	r0, r3, #0
 800992e:	f017 f885 	bl	8020a3c <expf>
 8009932:	1c03      	adds	r3, r0, #0
 8009934:	21fe      	movs	r1, #254	@ 0xfe
 8009936:	0589      	lsls	r1, r1, #22
 8009938:	1c18      	adds	r0, r3, #0
 800993a:	f7f6 ffc1 	bl	80008c0 <__aeabi_fadd>
 800993e:	1c03      	adds	r3, r0, #0
 8009940:	1c19      	adds	r1, r3, #0
 8009942:	4807      	ldr	r0, [pc, #28]	@ (8009960 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8009944:	f7f7 f946 	bl	8000bd4 <__aeabi_fdiv>
 8009948:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800994a:	1c19      	adds	r1, r3, #0
 800994c:	1c20      	adds	r0, r4, #0
 800994e:	f7f7 fb27 	bl	8000fa0 <__aeabi_fmul>
 8009952:	1c03      	adds	r3, r0, #0
        }
    }
}
 8009954:	1c18      	adds	r0, r3, #0
 8009956:	46bd      	mov	sp, r7
 8009958:	b005      	add	sp, #20
 800995a:	bd90      	pop	{r4, r7, pc}
 800995c:	c2480000 	.word	0xc2480000
 8009960:	43fa0000 	.word	0x43fa0000
 8009964:	42480000 	.word	0x42480000
 8009968:	3f8041ab 	.word	0x3f8041ab
 800996c:	40a00000 	.word	0x40a00000

08009970 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	4913      	ldr	r1, [pc, #76]	@ (80099d0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8009982:	1c18      	adds	r0, r3, #0
 8009984:	f7f6 ff9c 	bl	80008c0 <__aeabi_fadd>
 8009988:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800998a:	1c19      	adds	r1, r3, #0
 800998c:	1c20      	adds	r0, r4, #0
 800998e:	f7f7 f921 	bl	8000bd4 <__aeabi_fdiv>
 8009992:	1c03      	adds	r3, r0, #0
 8009994:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	228c      	movs	r2, #140	@ 0x8c
 800999a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	490b      	ldr	r1, [pc, #44]	@ (80099d4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80099a6:	1c18      	adds	r0, r3, #0
 80099a8:	f7f6 ff8a 	bl	80008c0 <__aeabi_fadd>
 80099ac:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80099ae:	1c19      	adds	r1, r3, #0
 80099b0:	1c20      	adds	r0, r4, #0
 80099b2:	f7f7 f90f 	bl	8000bd4 <__aeabi_fdiv>
 80099b6:	1c03      	adds	r3, r0, #0
 80099b8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2290      	movs	r2, #144	@ 0x90
 80099be:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2294      	movs	r2, #148	@ 0x94
 80099c4:	2100      	movs	r1, #0
 80099c6:	5499      	strb	r1, [r3, r2]
}
 80099c8:	46c0      	nop			@ (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b003      	add	sp, #12
 80099ce:	bd90      	pop	{r4, r7, pc}
 80099d0:	41a00000 	.word	0x41a00000
 80099d4:	43fa0000 	.word	0x43fa0000

080099d8 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80099d8:	b590      	push	{r4, r7, lr}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2294      	movs	r2, #148	@ 0x94
 80099e6:	5c9b      	ldrb	r3, [r3, r2]
 80099e8:	2201      	movs	r2, #1
 80099ea:	4053      	eors	r3, r2
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00f      	beq.n	8009a12 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2198      	movs	r1, #152	@ 0x98
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	219c      	movs	r1, #156	@ 0x9c
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	21a0      	movs	r1, #160	@ 0xa0
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2294      	movs	r2, #148	@ 0x94
 8009a0e:	2101      	movs	r1, #1
 8009a10:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	228c      	movs	r2, #140	@ 0x8c
 8009a16:	589b      	ldr	r3, [r3, r2]
 8009a18:	1c19      	adds	r1, r3, #0
 8009a1a:	20fe      	movs	r0, #254	@ 0xfe
 8009a1c:	0580      	lsls	r0, r0, #22
 8009a1e:	f7f7 fbfd 	bl	800121c <__aeabi_fsub>
 8009a22:	1c03      	adds	r3, r0, #0
 8009a24:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2298      	movs	r2, #152	@ 0x98
 8009a2a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8009a2c:	1c19      	adds	r1, r3, #0
 8009a2e:	f7f7 fab7 	bl	8000fa0 <__aeabi_fmul>
 8009a32:	1c03      	adds	r3, r0, #0
 8009a34:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	228c      	movs	r2, #140	@ 0x8c
 8009a3a:	589b      	ldr	r3, [r3, r2]
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	1c18      	adds	r0, r3, #0
 8009a40:	f7f7 faae 	bl	8000fa0 <__aeabi_fmul>
 8009a44:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8009a46:	1c19      	adds	r1, r3, #0
 8009a48:	1c20      	adds	r0, r4, #0
 8009a4a:	f7f6 ff39 	bl	80008c0 <__aeabi_fadd>
 8009a4e:	1c03      	adds	r3, r0, #0
 8009a50:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2298      	movs	r2, #152	@ 0x98
 8009a56:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2290      	movs	r2, #144	@ 0x90
 8009a5c:	589b      	ldr	r3, [r3, r2]
 8009a5e:	1c19      	adds	r1, r3, #0
 8009a60:	20fe      	movs	r0, #254	@ 0xfe
 8009a62:	0580      	lsls	r0, r0, #22
 8009a64:	f7f7 fbda 	bl	800121c <__aeabi_fsub>
 8009a68:	1c03      	adds	r3, r0, #0
 8009a6a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	229c      	movs	r2, #156	@ 0x9c
 8009a70:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8009a72:	1c19      	adds	r1, r3, #0
 8009a74:	f7f7 fa94 	bl	8000fa0 <__aeabi_fmul>
 8009a78:	1c03      	adds	r3, r0, #0
 8009a7a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2290      	movs	r2, #144	@ 0x90
 8009a80:	589b      	ldr	r3, [r3, r2]
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	1c18      	adds	r0, r3, #0
 8009a86:	f7f7 fa8b 	bl	8000fa0 <__aeabi_fmul>
 8009a8a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8009a8c:	1c19      	adds	r1, r3, #0
 8009a8e:	1c20      	adds	r0, r4, #0
 8009a90:	f7f6 ff16 	bl	80008c0 <__aeabi_fadd>
 8009a94:	1c03      	adds	r3, r0, #0
 8009a96:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	229c      	movs	r2, #156	@ 0x9c
 8009a9c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2298      	movs	r2, #152	@ 0x98
 8009aa2:	589a      	ldr	r2, [r3, r2]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	219c      	movs	r1, #156	@ 0x9c
 8009aa8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8009aaa:	1c19      	adds	r1, r3, #0
 8009aac:	1c10      	adds	r0, r2, #0
 8009aae:	f7f7 fbb5 	bl	800121c <__aeabi_fsub>
 8009ab2:	1c03      	adds	r3, r0, #0
 8009ab4:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	6978      	ldr	r0, [r7, #20]
 8009aba:	f7f6 fd39 	bl	8000530 <__aeabi_fcmplt>
 8009abe:	1e03      	subs	r3, r0, #0
 8009ac0:	d004      	beq.n	8009acc <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2280      	movs	r2, #128	@ 0x80
 8009ac6:	0612      	lsls	r2, r2, #24
 8009ac8:	4053      	eors	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8009acc:	4923      	ldr	r1, [pc, #140]	@ (8009b5c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f7f7 fa66 	bl	8000fa0 <__aeabi_fmul>
 8009ad4:	1c03      	adds	r3, r0, #0
 8009ad6:	1c18      	adds	r0, r3, #0
 8009ad8:	f016 ffb0 	bl	8020a3c <expf>
 8009adc:	1c03      	adds	r3, r0, #0
 8009ade:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8009ae0:	491f      	ldr	r1, [pc, #124]	@ (8009b60 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8009ae2:	6938      	ldr	r0, [r7, #16]
 8009ae4:	f7f7 fa5c 	bl	8000fa0 <__aeabi_fmul>
 8009ae8:	1c03      	adds	r3, r0, #0
 8009aea:	491e      	ldr	r1, [pc, #120]	@ (8009b64 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8009aec:	1c18      	adds	r0, r3, #0
 8009aee:	f7f6 fee7 	bl	80008c0 <__aeabi_fadd>
 8009af2:	1c03      	adds	r3, r0, #0
 8009af4:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685c      	ldr	r4, [r3, #4]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	1c18      	adds	r0, r3, #0
 8009b02:	f7f6 fedd 	bl	80008c0 <__aeabi_fadd>
 8009b06:	1c03      	adds	r3, r0, #0
 8009b08:	1c19      	adds	r1, r3, #0
 8009b0a:	1c20      	adds	r0, r4, #0
 8009b0c:	f7f7 f862 	bl	8000bd4 <__aeabi_fdiv>
 8009b10:	1c03      	adds	r3, r0, #0
 8009b12:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8009b14:	68b9      	ldr	r1, [r7, #8]
 8009b16:	20fe      	movs	r0, #254	@ 0xfe
 8009b18:	0580      	lsls	r0, r0, #22
 8009b1a:	f7f7 fb7f 	bl	800121c <__aeabi_fsub>
 8009b1e:	1c03      	adds	r3, r0, #0
 8009b20:	1c18      	adds	r0, r3, #0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	22a0      	movs	r2, #160	@ 0xa0
 8009b26:	589b      	ldr	r3, [r3, r2]
 8009b28:	1c19      	adds	r1, r3, #0
 8009b2a:	f7f7 fa39 	bl	8000fa0 <__aeabi_fmul>
 8009b2e:	1c03      	adds	r3, r0, #0
 8009b30:	1c1c      	adds	r4, r3, #0
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	68b8      	ldr	r0, [r7, #8]
 8009b36:	f7f7 fa33 	bl	8000fa0 <__aeabi_fmul>
 8009b3a:	1c03      	adds	r3, r0, #0
 8009b3c:	1c19      	adds	r1, r3, #0
 8009b3e:	1c20      	adds	r0, r4, #0
 8009b40:	f7f6 febe 	bl	80008c0 <__aeabi_fadd>
 8009b44:	1c03      	adds	r3, r0, #0
 8009b46:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	22a0      	movs	r2, #160	@ 0xa0
 8009b4c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	22a0      	movs	r2, #160	@ 0xa0
 8009b52:	589b      	ldr	r3, [r3, r2]
}
 8009b54:	1c18      	adds	r0, r3, #0
 8009b56:	46bd      	mov	sp, r7
 8009b58:	b007      	add	sp, #28
 8009b5a:	bd90      	pop	{r4, r7, pc}
 8009b5c:	be4ccccd 	.word	0xbe4ccccd
 8009b60:	43f00000 	.word	0x43f00000
 8009b64:	41a00000 	.word	0x41a00000

08009b68 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "main.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	000a      	movs	r2, r1
 8009b72:	1cbb      	adds	r3, r7, #2
 8009b74:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8009b76:	230d      	movs	r3, #13
 8009b78:	18fb      	adds	r3, r7, r3
 8009b7a:	22ff      	movs	r2, #255	@ 0xff
 8009b7c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8009b7e:	230e      	movs	r3, #14
 8009b80:	18fb      	adds	r3, r7, r3
 8009b82:	2200      	movs	r2, #0
 8009b84:	801a      	strh	r2, [r3, #0]
 8009b86:	e037      	b.n	8009bf8 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 8009b88:	230e      	movs	r3, #14
 8009b8a:	18fb      	adds	r3, r7, r3
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	18d3      	adds	r3, r2, r3
 8009b92:	7819      	ldrb	r1, [r3, #0]
 8009b94:	220d      	movs	r2, #13
 8009b96:	18bb      	adds	r3, r7, r2
 8009b98:	18ba      	adds	r2, r7, r2
 8009b9a:	7812      	ldrb	r2, [r2, #0]
 8009b9c:	404a      	eors	r2, r1
 8009b9e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	701a      	strb	r2, [r3, #0]
 8009ba8:	e01b      	b.n	8009be2 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 8009baa:	210d      	movs	r1, #13
 8009bac:	187b      	adds	r3, r7, r1
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	b25b      	sxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da09      	bge.n	8009bca <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8009bb6:	187b      	adds	r3, r7, r1
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	b25b      	sxtb	r3, r3
 8009bbe:	2231      	movs	r2, #49	@ 0x31
 8009bc0:	4053      	eors	r3, r2
 8009bc2:	b25a      	sxtb	r2, r3
 8009bc4:	187b      	adds	r3, r7, r1
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e005      	b.n	8009bd6 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8009bca:	230d      	movs	r3, #13
 8009bcc:	18fa      	adds	r2, r7, r3
 8009bce:	18fb      	adds	r3, r7, r3
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	18db      	adds	r3, r3, r3
 8009bd4:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8009bd6:	220c      	movs	r2, #12
 8009bd8:	18bb      	adds	r3, r7, r2
 8009bda:	18ba      	adds	r2, r7, r2
 8009bdc:	7812      	ldrb	r2, [r2, #0]
 8009bde:	3a01      	subs	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	230c      	movs	r3, #12
 8009be4:	18fb      	adds	r3, r7, r3
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1de      	bne.n	8009baa <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8009bec:	220e      	movs	r2, #14
 8009bee:	18bb      	adds	r3, r7, r2
 8009bf0:	18ba      	adds	r2, r7, r2
 8009bf2:	8812      	ldrh	r2, [r2, #0]
 8009bf4:	3201      	adds	r2, #1
 8009bf6:	801a      	strh	r2, [r3, #0]
 8009bf8:	230e      	movs	r3, #14
 8009bfa:	18fa      	adds	r2, r7, r3
 8009bfc:	1cbb      	adds	r3, r7, #2
 8009bfe:	8812      	ldrh	r2, [r2, #0]
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d3c0      	bcc.n	8009b88 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8009c06:	230d      	movs	r3, #13
 8009c08:	18fb      	adds	r3, r7, r3
 8009c0a:	781b      	ldrb	r3, [r3, #0]
}
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	b004      	add	sp, #16
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	0008      	movs	r0, r1
 8009c1e:	0011      	movs	r1, r2
 8009c20:	1cbb      	adds	r3, r7, #2
 8009c22:	1c02      	adds	r2, r0, #0
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	1c7b      	adds	r3, r7, #1
 8009c28:	1c0a      	adds	r2, r1, #0
 8009c2a:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8009c2c:	1cbb      	adds	r3, r7, #2
 8009c2e:	881a      	ldrh	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	0011      	movs	r1, r2
 8009c34:	0018      	movs	r0, r3
 8009c36:	f7ff ff97 	bl	8009b68 <sensirion_i2c_generate_crc>
 8009c3a:	0003      	movs	r3, r0
 8009c3c:	001a      	movs	r2, r3
 8009c3e:	1c7b      	adds	r3, r7, #1
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d001      	beq.n	8009c4a <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e000      	b.n	8009c4c <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b002      	add	sp, #8
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	0008      	movs	r0, r1
 8009c5e:	0011      	movs	r1, r2
 8009c60:	1cbb      	adds	r3, r7, #2
 8009c62:	1c02      	adds	r2, r0, #0
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	003b      	movs	r3, r7
 8009c68:	1c0a      	adds	r2, r1, #0
 8009c6a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8009c6c:	003b      	movs	r3, r7
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	0a1b      	lsrs	r3, r3, #8
 8009c72:	b299      	uxth	r1, r3
 8009c74:	1cbb      	adds	r3, r7, #2
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	1cba      	adds	r2, r7, #2
 8009c7a:	1c58      	adds	r0, r3, #1
 8009c7c:	8010      	strh	r0, [r2, #0]
 8009c7e:	001a      	movs	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	189b      	adds	r3, r3, r2
 8009c84:	b2ca      	uxtb	r2, r1
 8009c86:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8009c88:	1cbb      	adds	r3, r7, #2
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	1cba      	adds	r2, r7, #2
 8009c8e:	1c59      	adds	r1, r3, #1
 8009c90:	8011      	strh	r1, [r2, #0]
 8009c92:	001a      	movs	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	189b      	adds	r3, r3, r2
 8009c98:	003a      	movs	r2, r7
 8009c9a:	8812      	ldrh	r2, [r2, #0]
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	701a      	strb	r2, [r3, #0]
    return offset;
 8009ca0:	1cbb      	adds	r3, r7, #2
 8009ca2:	881b      	ldrh	r3, [r3, #0]
}
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	b002      	add	sp, #8
 8009caa:	bd80      	pop	{r7, pc}

08009cac <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8009cac:	b590      	push	{r4, r7, lr}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	0008      	movs	r0, r1
 8009cb6:	0011      	movs	r1, r2
 8009cb8:	1cbb      	adds	r3, r7, #2
 8009cba:	1c02      	adds	r2, r0, #0
 8009cbc:	801a      	strh	r2, [r3, #0]
 8009cbe:	003b      	movs	r3, r7
 8009cc0:	1c0a      	adds	r2, r1, #0
 8009cc2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8009cc4:	003b      	movs	r3, r7
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	0a1b      	lsrs	r3, r3, #8
 8009cca:	b299      	uxth	r1, r3
 8009ccc:	1cbb      	adds	r3, r7, #2
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	1cba      	adds	r2, r7, #2
 8009cd2:	1c58      	adds	r0, r3, #1
 8009cd4:	8010      	strh	r0, [r2, #0]
 8009cd6:	001a      	movs	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	189b      	adds	r3, r3, r2
 8009cdc:	b2ca      	uxtb	r2, r1
 8009cde:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8009ce0:	1cbb      	adds	r3, r7, #2
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	1cba      	adds	r2, r7, #2
 8009ce6:	1c59      	adds	r1, r3, #1
 8009ce8:	8011      	strh	r1, [r2, #0]
 8009cea:	001a      	movs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	189b      	adds	r3, r3, r2
 8009cf0:	003a      	movs	r2, r7
 8009cf2:	8812      	ldrh	r2, [r2, #0]
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8009cf8:	1cbb      	adds	r3, r7, #2
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	3b02      	subs	r3, #2
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8009d02:	1cbb      	adds	r3, r7, #2
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	18d4      	adds	r4, r2, r3
 8009d0a:	2102      	movs	r1, #2
 8009d0c:	f7ff ff2c 	bl	8009b68 <sensirion_i2c_generate_crc>
 8009d10:	0003      	movs	r3, r0
 8009d12:	7023      	strb	r3, [r4, #0]
    offset++;
 8009d14:	1cbb      	adds	r3, r7, #2
 8009d16:	881a      	ldrh	r2, [r3, #0]
 8009d18:	1cbb      	adds	r3, r7, #2
 8009d1a:	3201      	adds	r2, #1
 8009d1c:	801a      	strh	r2, [r3, #0]

    return offset;
 8009d1e:	1cbb      	adds	r3, r7, #2
 8009d20:	881b      	ldrh	r3, [r3, #0]
}
 8009d22:	0018      	movs	r0, r3
 8009d24:	46bd      	mov	sp, r7
 8009d26:	b003      	add	sp, #12
 8009d28:	bd90      	pop	{r4, r7, pc}

08009d2a <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	0008      	movs	r0, r1
 8009d34:	0011      	movs	r1, r2
 8009d36:	1cbb      	adds	r3, r7, #2
 8009d38:	1c02      	adds	r2, r0, #0
 8009d3a:	801a      	strh	r2, [r3, #0]
 8009d3c:	003b      	movs	r3, r7
 8009d3e:	1c0a      	adds	r2, r1, #0
 8009d40:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8009d42:	003b      	movs	r3, r7
 8009d44:	881a      	ldrh	r2, [r3, #0]
 8009d46:	1cbb      	adds	r3, r7, #2
 8009d48:	8819      	ldrh	r1, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7ff ffad 	bl	8009cac <sensirion_i2c_add_uint16_t_to_buffer>
 8009d52:	0003      	movs	r3, r0
}
 8009d54:	0018      	movs	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b002      	add	sp, #8
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6039      	str	r1, [r7, #0]
 8009d64:	0011      	movs	r1, r2
 8009d66:	1dfb      	adds	r3, r7, #7
 8009d68:	1c02      	adds	r2, r0, #0
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	1d3b      	adds	r3, r7, #4
 8009d6e:	1c0a      	adds	r2, r1, #0
 8009d70:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8009d72:	1dfb      	adds	r3, r7, #7
 8009d74:	7818      	ldrb	r0, [r3, #0]
 8009d76:	1d3b      	adds	r3, r7, #4
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	0019      	movs	r1, r3
 8009d7e:	f7fe fc69 	bl	8008654 <sensirion_i2c_hal_write>
 8009d82:	0003      	movs	r3, r0
 8009d84:	b21b      	sxth	r3, r3
}
 8009d86:	0018      	movs	r0, r3
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	b002      	add	sp, #8
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8009d8e:	b5b0      	push	{r4, r5, r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6039      	str	r1, [r7, #0]
 8009d96:	0011      	movs	r1, r2
 8009d98:	1dfb      	adds	r3, r7, #7
 8009d9a:	1c02      	adds	r2, r0, #0
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	1d3b      	adds	r3, r7, #4
 8009da0:	1c0a      	adds	r2, r1, #0
 8009da2:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8009da4:	1d3b      	adds	r3, r7, #4
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	220a      	movs	r2, #10
 8009dae:	18ba      	adds	r2, r7, r2
 8009db0:	1c19      	adds	r1, r3, #0
 8009db2:	1c0b      	adds	r3, r1, #0
 8009db4:	18db      	adds	r3, r3, r3
 8009db6:	185b      	adds	r3, r3, r1
 8009db8:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8009dba:	1d3b      	adds	r3, r7, #4
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8009dc8:	2304      	movs	r3, #4
 8009dca:	e06a      	b.n	8009ea2 <sensirion_i2c_read_data_inplace+0x114>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8009dcc:	1dfb      	adds	r3, r7, #7
 8009dce:	7818      	ldrb	r0, [r3, #0]
 8009dd0:	230a      	movs	r3, #10
 8009dd2:	18fb      	adds	r3, r7, r3
 8009dd4:	881a      	ldrh	r2, [r3, #0]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	0019      	movs	r1, r3
 8009dda:	f7fe fc1b 	bl	8008614 <sensirion_i2c_hal_read>
 8009dde:	0002      	movs	r2, r0
 8009de0:	2108      	movs	r1, #8
 8009de2:	187b      	adds	r3, r7, r1
 8009de4:	801a      	strh	r2, [r3, #0]
    if (error) {
 8009de6:	000a      	movs	r2, r1
 8009de8:	18bb      	adds	r3, r7, r2
 8009dea:	2100      	movs	r1, #0
 8009dec:	5e5b      	ldrsh	r3, [r3, r1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <sensirion_i2c_read_data_inplace+0x6c>
        return error;
 8009df2:	18bb      	adds	r3, r7, r2
 8009df4:	2200      	movs	r2, #0
 8009df6:	5e9b      	ldrsh	r3, [r3, r2]
 8009df8:	e053      	b.n	8009ea2 <sensirion_i2c_read_data_inplace+0x114>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8009dfa:	230e      	movs	r3, #14
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	2200      	movs	r2, #0
 8009e00:	801a      	strh	r2, [r3, #0]
 8009e02:	230c      	movs	r3, #12
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	2200      	movs	r2, #0
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	e041      	b.n	8009e90 <sensirion_i2c_read_data_inplace+0x102>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8009e0c:	210e      	movs	r1, #14
 8009e0e:	187b      	adds	r3, r7, r1
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8009e16:	187b      	adds	r3, r7, r1
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	3302      	adds	r3, #2
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	001a      	movs	r2, r3
 8009e24:	2102      	movs	r1, #2
 8009e26:	f7ff fef5 	bl	8009c14 <sensirion_i2c_check_crc>
 8009e2a:	0003      	movs	r3, r0
 8009e2c:	001a      	movs	r2, r3
 8009e2e:	2108      	movs	r1, #8
 8009e30:	187b      	adds	r3, r7, r1
 8009e32:	801a      	strh	r2, [r3, #0]
        if (error) {
 8009e34:	000a      	movs	r2, r1
 8009e36:	18bb      	adds	r3, r7, r2
 8009e38:	2100      	movs	r1, #0
 8009e3a:	5e5b      	ldrsh	r3, [r3, r1]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <sensirion_i2c_read_data_inplace+0xba>
            return error;
 8009e40:	18bb      	adds	r3, r7, r2
 8009e42:	2200      	movs	r2, #0
 8009e44:	5e9b      	ldrsh	r3, [r3, r2]
 8009e46:	e02c      	b.n	8009ea2 <sensirion_i2c_read_data_inplace+0x114>
        }
        buffer[j++] = buffer[i];
 8009e48:	240e      	movs	r4, #14
 8009e4a:	193b      	adds	r3, r7, r4
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	18d2      	adds	r2, r2, r3
 8009e52:	250c      	movs	r5, #12
 8009e54:	197b      	adds	r3, r7, r5
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	1979      	adds	r1, r7, r5
 8009e5a:	1c58      	adds	r0, r3, #1
 8009e5c:	8008      	strh	r0, [r1, #0]
 8009e5e:	0019      	movs	r1, r3
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	185b      	adds	r3, r3, r1
 8009e64:	7812      	ldrb	r2, [r2, #0]
 8009e66:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8009e68:	193b      	adds	r3, r7, r4
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	18d2      	adds	r2, r2, r3
 8009e72:	197b      	adds	r3, r7, r5
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	1979      	adds	r1, r7, r5
 8009e78:	1c58      	adds	r0, r3, #1
 8009e7a:	8008      	strh	r0, [r1, #0]
 8009e7c:	0019      	movs	r1, r3
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	185b      	adds	r3, r3, r1
 8009e82:	7812      	ldrb	r2, [r2, #0]
 8009e84:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8009e86:	193b      	adds	r3, r7, r4
 8009e88:	193a      	adds	r2, r7, r4
 8009e8a:	8812      	ldrh	r2, [r2, #0]
 8009e8c:	3203      	adds	r2, #3
 8009e8e:	801a      	strh	r2, [r3, #0]
 8009e90:	230e      	movs	r3, #14
 8009e92:	18fa      	adds	r2, r7, r3
 8009e94:	230a      	movs	r3, #10
 8009e96:	18fb      	adds	r3, r7, r3
 8009e98:	8812      	ldrh	r2, [r2, #0]
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d3b5      	bcc.n	8009e0c <sensirion_i2c_read_data_inplace+0x7e>
    }

    return NO_ERROR;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	b004      	add	sp, #16
 8009ea8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009eac <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6039      	str	r1, [r7, #0]
 8009eb4:	0011      	movs	r1, r2
 8009eb6:	1dfb      	adds	r3, r7, #7
 8009eb8:	1c02      	adds	r2, r0, #0
 8009eba:	701a      	strb	r2, [r3, #0]
 8009ebc:	1dbb      	adds	r3, r7, #6
 8009ebe:	1c0a      	adds	r2, r1, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8009ec2:	4b08      	ldr	r3, [pc, #32]	@ (8009ee4 <ReadRegister+0x38>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d008      	beq.n	8009edc <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8009eca:	4b06      	ldr	r3, [pc, #24]	@ (8009ee4 <ReadRegister+0x38>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	1dba      	adds	r2, r7, #6
 8009ed0:	7814      	ldrb	r4, [r2, #0]
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	1dfa      	adds	r2, r7, #7
 8009ed6:	7810      	ldrb	r0, [r2, #0]
 8009ed8:	0022      	movs	r2, r4
 8009eda:	4798      	blx	r3
  }
}
 8009edc:	46c0      	nop			@ (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b003      	add	sp, #12
 8009ee2:	bd90      	pop	{r4, r7, pc}
 8009ee4:	200011c8 	.word	0x200011c8

08009ee8 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8009ee8:	b590      	push	{r4, r7, lr}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6039      	str	r1, [r7, #0]
 8009ef0:	0011      	movs	r1, r2
 8009ef2:	1dfb      	adds	r3, r7, #7
 8009ef4:	1c02      	adds	r2, r0, #0
 8009ef6:	701a      	strb	r2, [r3, #0]
 8009ef8:	1dbb      	adds	r3, r7, #6
 8009efa:	1c0a      	adds	r2, r1, #0
 8009efc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009efe:	4b08      	ldr	r3, [pc, #32]	@ (8009f20 <WriteRegister+0x38>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d008      	beq.n	8009f18 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8009f06:	4b06      	ldr	r3, [pc, #24]	@ (8009f20 <WriteRegister+0x38>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	1dba      	adds	r2, r7, #6
 8009f0c:	7814      	ldrb	r4, [r2, #0]
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	1dfa      	adds	r2, r7, #7
 8009f12:	7810      	ldrb	r0, [r2, #0]
 8009f14:	0022      	movs	r2, r4
 8009f16:	4798      	blx	r3
  }
}
 8009f18:	46c0      	nop			@ (mov r8, r8)
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b003      	add	sp, #12
 8009f1e:	bd90      	pop	{r4, r7, pc}
 8009f20:	200011cc 	.word	0x200011cc

08009f24 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8009f2e:	4b07      	ldr	r3, [pc, #28]	@ (8009f4c <SGP_Init+0x28>)
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8009f34:	4b06      	ldr	r3, [pc, #24]	@ (8009f50 <SGP_Init+0x2c>)
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8009f3a:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <SGP_Init+0x30>)
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f7fe ff8e 	bl	8008e60 <GasIndexAlgorithm_init>
}
 8009f44:	46c0      	nop			@ (mov r8, r8)
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	200011c8 	.word	0x200011c8
 8009f50:	200011cc 	.word	0x200011cc
 8009f54:	200011dc 	.word	0x200011dc

08009f58 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8009f5c:	4b13      	ldr	r3, [pc, #76]	@ (8009fac <SGP_StartMeasurement+0x54>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00d      	beq.n	8009f80 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8009f64:	4b12      	ldr	r3, [pc, #72]	@ (8009fb0 <SGP_StartMeasurement+0x58>)
 8009f66:	2208      	movs	r2, #8
 8009f68:	0019      	movs	r1, r3
 8009f6a:	2059      	movs	r0, #89	@ 0x59
 8009f6c:	f7ff ffbc 	bl	8009ee8 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8009f70:	f002 fc6a 	bl	800c848 <GetCurrentHalTicks>
 8009f74:	0003      	movs	r3, r0
 8009f76:	331e      	adds	r3, #30
 8009f78:	001a      	movs	r2, r3
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <SGP_StartMeasurement+0x5c>)
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	e00c      	b.n	8009f9a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8009f80:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb8 <SGP_StartMeasurement+0x60>)
 8009f82:	2208      	movs	r2, #8
 8009f84:	0019      	movs	r1, r3
 8009f86:	2059      	movs	r0, #89	@ 0x59
 8009f88:	f7ff ffae 	bl	8009ee8 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8009f8c:	f002 fc5c 	bl	800c848 <GetCurrentHalTicks>
 8009f90:	0003      	movs	r3, r0
 8009f92:	33aa      	adds	r3, #170	@ 0xaa
 8009f94:	001a      	movs	r2, r3
 8009f96:	4b09      	ldr	r3, [pc, #36]	@ (8009fbc <SGP_StartMeasurement+0x64>)
 8009f98:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8009f9a:	4b09      	ldr	r3, [pc, #36]	@ (8009fc0 <SGP_StartMeasurement+0x68>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8009fa0:	4b08      	ldr	r3, [pc, #32]	@ (8009fc4 <SGP_StartMeasurement+0x6c>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
}
 8009fa6:	46c0      	nop			@ (mov r8, r8)
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20001284 	.word	0x20001284
 8009fb0:	20000094 	.word	0x20000094
 8009fb4:	200000a8 	.word	0x200000a8
 8009fb8:	2000008c 	.word	0x2000008c
 8009fbc:	200000a0 	.word	0x200000a0
 8009fc0:	200011da 	.word	0x200011da
 8009fc4:	200011db 	.word	0x200011db

08009fc8 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	4b04      	ldr	r3, [pc, #16]	@ (8009fe0 <SGP_HeatedUp+0x18>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f002 fb69 	bl	800c6a8 <TimestampIsReached>
 8009fd6:	0003      	movs	r3, r0
 8009fd8:	0018      	movs	r0, r3
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	46c0      	nop			@ (mov r8, r8)
 8009fe0:	200000a0 	.word	0x200000a0

08009fe4 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8009fe8:	4b04      	ldr	r3, [pc, #16]	@ (8009ffc <SGP_MeasurementReady+0x18>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	0018      	movs	r0, r3
 8009fee:	f002 fb5b 	bl	800c6a8 <TimestampIsReached>
 8009ff2:	0003      	movs	r3, r0
}
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	46c0      	nop			@ (mov r8, r8)
 8009ffc:	200000a8 	.word	0x200000a8

0800a000 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800a004:	4b04      	ldr	r3, [pc, #16]	@ (800a018 <SGP_MeasurementDone+0x18>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	0018      	movs	r0, r3
 800a00a:	f002 fb4d 	bl	800c6a8 <TimestampIsReached>
 800a00e:	0003      	movs	r3, r0
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	46c0      	nop			@ (mov r8, r8)
 800a018:	200000a4 	.word	0x200000a4

0800a01c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800a020:	4b04      	ldr	r3, [pc, #16]	@ (800a034 <SGP_TurnHeaterOff+0x18>)
 800a022:	2202      	movs	r2, #2
 800a024:	0019      	movs	r1, r3
 800a026:	2059      	movs	r0, #89	@ 0x59
 800a028:	f7ff ff5e 	bl	8009ee8 <WriteRegister>
}
 800a02c:	46c0      	nop			@ (mov r8, r8)
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	46c0      	nop			@ (mov r8, r8)
 800a034:	20000084 	.word	0x20000084

0800a038 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800a038:	b5b0      	push	{r4, r5, r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800a040:	f7ff ffc2 	bl	8009fc8 <SGP_HeatedUp>
 800a044:	1e03      	subs	r3, r0, #0
 800a046:	d038      	beq.n	800a0ba <SGP_GetMeasurementValues+0x82>
 800a048:	4bd5      	ldr	r3, [pc, #852]	@ (800a3a0 <SGP_GetMeasurementValues+0x368>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2201      	movs	r2, #1
 800a04e:	4053      	eors	r3, r2
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d031      	beq.n	800a0ba <SGP_GetMeasurementValues+0x82>
 800a056:	4bd3      	ldr	r3, [pc, #844]	@ (800a3a4 <SGP_GetMeasurementValues+0x36c>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	2201      	movs	r2, #1
 800a05c:	4053      	eors	r3, r2
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d02a      	beq.n	800a0ba <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 800a064:	4ad0      	ldr	r2, [pc, #832]	@ (800a3a8 <SGP_GetMeasurementValues+0x370>)
 800a066:	4bd1      	ldr	r3, [pc, #836]	@ (800a3ac <SGP_GetMeasurementValues+0x374>)
 800a068:	0019      	movs	r1, r3
 800a06a:	2003      	movs	r0, #3
 800a06c:	f002 fb72 	bl	800c754 <CreateLine>
    HeatUpIsDone = true;
 800a070:	4bcb      	ldr	r3, [pc, #812]	@ (800a3a0 <SGP_GetMeasurementValues+0x368>)
 800a072:	2201      	movs	r2, #1
 800a074:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800a076:	4bce      	ldr	r3, [pc, #824]	@ (800a3b0 <SGP_GetMeasurementValues+0x378>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00d      	beq.n	800a09a <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a07e:	4bcd      	ldr	r3, [pc, #820]	@ (800a3b4 <SGP_GetMeasurementValues+0x37c>)
 800a080:	2208      	movs	r2, #8
 800a082:	0019      	movs	r1, r3
 800a084:	2059      	movs	r0, #89	@ 0x59
 800a086:	f7ff ff2f 	bl	8009ee8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a08a:	f002 fbdd 	bl	800c848 <GetCurrentHalTicks>
 800a08e:	0003      	movs	r3, r0
 800a090:	331e      	adds	r3, #30
 800a092:	001a      	movs	r2, r3
 800a094:	4bc8      	ldr	r3, [pc, #800]	@ (800a3b8 <SGP_GetMeasurementValues+0x380>)
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	e00c      	b.n	800a0b4 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a09a:	4bc8      	ldr	r3, [pc, #800]	@ (800a3bc <SGP_GetMeasurementValues+0x384>)
 800a09c:	2208      	movs	r2, #8
 800a09e:	0019      	movs	r1, r3
 800a0a0:	2059      	movs	r0, #89	@ 0x59
 800a0a2:	f7ff ff21 	bl	8009ee8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a0a6:	f002 fbcf 	bl	800c848 <GetCurrentHalTicks>
 800a0aa:	0003      	movs	r3, r0
 800a0ac:	331e      	adds	r3, #30
 800a0ae:	001a      	movs	r2, r3
 800a0b0:	4bc1      	ldr	r3, [pc, #772]	@ (800a3b8 <SGP_GetMeasurementValues+0x380>)
 800a0b2:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800a0b4:	4bbb      	ldr	r3, [pc, #748]	@ (800a3a4 <SGP_GetMeasurementValues+0x36c>)
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800a0ba:	4bb9      	ldr	r3, [pc, #740]	@ (800a3a0 <SGP_GetMeasurementValues+0x368>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d100      	bne.n	800a0c4 <SGP_GetMeasurementValues+0x8c>
 800a0c2:	e1a9      	b.n	800a418 <SGP_GetMeasurementValues+0x3e0>
 800a0c4:	f7ff ff8e 	bl	8009fe4 <SGP_MeasurementReady>
 800a0c8:	1e03      	subs	r3, r0, #0
 800a0ca:	d100      	bne.n	800a0ce <SGP_GetMeasurementValues+0x96>
 800a0cc:	e1a4      	b.n	800a418 <SGP_GetMeasurementValues+0x3e0>
 800a0ce:	4bbc      	ldr	r3, [pc, #752]	@ (800a3c0 <SGP_GetMeasurementValues+0x388>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	4053      	eors	r3, r2
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d100      	bne.n	800a0de <SGP_GetMeasurementValues+0xa6>
 800a0dc:	e19c      	b.n	800a418 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800a0de:	4bb9      	ldr	r3, [pc, #740]	@ (800a3c4 <SGP_GetMeasurementValues+0x38c>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	4ab8      	ldr	r2, [pc, #736]	@ (800a3c8 <SGP_GetMeasurementValues+0x390>)
 800a0e6:	49b1      	ldr	r1, [pc, #708]	@ (800a3ac <SGP_GetMeasurementValues+0x374>)
 800a0e8:	2003      	movs	r0, #3
 800a0ea:	f002 fb33 	bl	800c754 <CreateLine>
    MeasurementIsReady = true;
 800a0ee:	4bb4      	ldr	r3, [pc, #720]	@ (800a3c0 <SGP_GetMeasurementValues+0x388>)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800a0f4:	4bb5      	ldr	r3, [pc, #724]	@ (800a3cc <SGP_GetMeasurementValues+0x394>)
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	0019      	movs	r1, r3
 800a0fa:	2059      	movs	r0, #89	@ 0x59
 800a0fc:	f7ff fed6 	bl	8009eac <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800a100:	4bb2      	ldr	r3, [pc, #712]	@ (800a3cc <SGP_GetMeasurementValues+0x394>)
 800a102:	2203      	movs	r2, #3
 800a104:	2103      	movs	r1, #3
 800a106:	0018      	movs	r0, r3
 800a108:	f000 f9ec 	bl	800a4e4 <CheckCRC>
 800a10c:	0003      	movs	r3, r0
 800a10e:	001a      	movs	r2, r3
 800a110:	2301      	movs	r3, #1
 800a112:	4053      	eors	r3, r2
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d02a      	beq.n	800a170 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800a11a:	4aad      	ldr	r2, [pc, #692]	@ (800a3d0 <SGP_GetMeasurementValues+0x398>)
 800a11c:	4bad      	ldr	r3, [pc, #692]	@ (800a3d4 <SGP_GetMeasurementValues+0x39c>)
 800a11e:	0019      	movs	r1, r3
 800a120:	2001      	movs	r0, #1
 800a122:	f002 fb17 	bl	800c754 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800a126:	4aac      	ldr	r2, [pc, #688]	@ (800a3d8 <SGP_GetMeasurementValues+0x3a0>)
 800a128:	4bac      	ldr	r3, [pc, #688]	@ (800a3dc <SGP_GetMeasurementValues+0x3a4>)
 800a12a:	0019      	movs	r1, r3
 800a12c:	2002      	movs	r0, #2
 800a12e:	f002 fb11 	bl	800c754 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800a132:	230f      	movs	r3, #15
 800a134:	18fb      	adds	r3, r7, r3
 800a136:	2200      	movs	r2, #0
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	e012      	b.n	800a162 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800a13c:	240f      	movs	r4, #15
 800a13e:	193b      	adds	r3, r7, r4
 800a140:	7818      	ldrb	r0, [r3, #0]
 800a142:	193b      	adds	r3, r7, r4
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	4aa1      	ldr	r2, [pc, #644]	@ (800a3cc <SGP_GetMeasurementValues+0x394>)
 800a148:	5cd3      	ldrb	r3, [r2, r3]
 800a14a:	4aa5      	ldr	r2, [pc, #660]	@ (800a3e0 <SGP_GetMeasurementValues+0x3a8>)
 800a14c:	4997      	ldr	r1, [pc, #604]	@ (800a3ac <SGP_GetMeasurementValues+0x374>)
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	0003      	movs	r3, r0
 800a152:	2003      	movs	r0, #3
 800a154:	f002 fafe 	bl	800c754 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800a158:	193b      	adds	r3, r7, r4
 800a15a:	781a      	ldrb	r2, [r3, #0]
 800a15c:	193b      	adds	r3, r7, r4
 800a15e:	3201      	adds	r2, #1
 800a160:	701a      	strb	r2, [r3, #0]
 800a162:	230f      	movs	r3, #15
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d9e7      	bls.n	800a13c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800a16c:	2300      	movs	r3, #0
 800a16e:	e16b      	b.n	800a448 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800a170:	f002 fb6a 	bl	800c848 <GetCurrentHalTicks>
 800a174:	0003      	movs	r3, r0
 800a176:	22fa      	movs	r2, #250	@ 0xfa
 800a178:	0092      	lsls	r2, r2, #2
 800a17a:	189a      	adds	r2, r3, r2
 800a17c:	4b99      	ldr	r3, [pc, #612]	@ (800a3e4 <SGP_GetMeasurementValues+0x3ac>)
 800a17e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800a180:	f7ff ff4c 	bl	800a01c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 800a184:	4b8f      	ldr	r3, [pc, #572]	@ (800a3c4 <SGP_GetMeasurementValues+0x38c>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	3301      	adds	r3, #1
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	4b8d      	ldr	r3, [pc, #564]	@ (800a3c4 <SGP_GetMeasurementValues+0x38c>)
 800a18e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800a190:	4b8c      	ldr	r3, [pc, #560]	@ (800a3c4 <SGP_GetMeasurementValues+0x38c>)
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	4b94      	ldr	r3, [pc, #592]	@ (800a3e8 <SGP_GetMeasurementValues+0x3b0>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d200      	bcs.n	800a19e <SGP_GetMeasurementValues+0x166>
 800a19c:	e13c      	b.n	800a418 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800a19e:	4b8b      	ldr	r3, [pc, #556]	@ (800a3cc <SGP_GetMeasurementValues+0x394>)
 800a1a0:	785b      	ldrb	r3, [r3, #1]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	b21a      	sxth	r2, r3
 800a1a6:	4b89      	ldr	r3, [pc, #548]	@ (800a3cc <SGP_GetMeasurementValues+0x394>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	b21b      	sxth	r3, r3
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	b21a      	sxth	r2, r3
 800a1b0:	240c      	movs	r4, #12
 800a1b2:	193b      	adds	r3, r7, r4
 800a1b4:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800a1b6:	193b      	adds	r3, r7, r4
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	4a8c      	ldr	r2, [pc, #560]	@ (800a3ec <SGP_GetMeasurementValues+0x3b4>)
 800a1bc:	497b      	ldr	r1, [pc, #492]	@ (800a3ac <SGP_GetMeasurementValues+0x374>)
 800a1be:	2003      	movs	r0, #3
 800a1c0:	f002 fac8 	bl	800c754 <CreateLine>
      int32_t tempVocIndex = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800a1c8:	193b      	adds	r3, r7, r4
 800a1ca:	8819      	ldrh	r1, [r3, #0]
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	18fa      	adds	r2, r7, r3
 800a1d0:	4b87      	ldr	r3, [pc, #540]	@ (800a3f0 <SGP_GetMeasurementValues+0x3b8>)
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f7fe fea6 	bl	8008f24 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	4a86      	ldr	r2, [pc, #536]	@ (800a3f4 <SGP_GetMeasurementValues+0x3bc>)
 800a1dc:	4973      	ldr	r1, [pc, #460]	@ (800a3ac <SGP_GetMeasurementValues+0x374>)
 800a1de:	2003      	movs	r0, #3
 800a1e0:	f002 fab8 	bl	800c754 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dd5a      	ble.n	800a2a8 <SGP_GetMeasurementValues+0x270>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b64      	cmp	r3, #100	@ 0x64
 800a1f8:	dc56      	bgt.n	800a2a8 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	0018      	movs	r0, r3
 800a200:	f7f9 f8de 	bl	80033c0 <__aeabi_i2d>
 800a204:	2200      	movs	r2, #0
 800a206:	4b7c      	ldr	r3, [pc, #496]	@ (800a3f8 <SGP_GetMeasurementValues+0x3c0>)
 800a208:	f7f7 fdd4 	bl	8001db4 <__aeabi_ddiv>
 800a20c:	0002      	movs	r2, r0
 800a20e:	000b      	movs	r3, r1
 800a210:	2000      	movs	r0, #0
 800a212:	497a      	ldr	r1, [pc, #488]	@ (800a3fc <SGP_GetMeasurementValues+0x3c4>)
 800a214:	f7f8 fcda 	bl	8002bcc <__aeabi_dsub>
 800a218:	0002      	movs	r2, r0
 800a21a:	000b      	movs	r3, r1
 800a21c:	0014      	movs	r4, r2
 800a21e:	001d      	movs	r5, r3
 800a220:	4b77      	ldr	r3, [pc, #476]	@ (800a400 <SGP_GetMeasurementValues+0x3c8>)
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	0018      	movs	r0, r3
 800a226:	f7f9 f8cb 	bl	80033c0 <__aeabi_i2d>
 800a22a:	0002      	movs	r2, r0
 800a22c:	000b      	movs	r3, r1
 800a22e:	0020      	movs	r0, r4
 800a230:	0029      	movs	r1, r5
 800a232:	f7f8 fa03 	bl	800263c <__aeabi_dmul>
 800a236:	0002      	movs	r2, r0
 800a238:	000b      	movs	r3, r1
 800a23a:	0010      	movs	r0, r2
 800a23c:	0019      	movs	r1, r3
 800a23e:	f7f6 fa05 	bl	800064c <__aeabi_d2uiz>
 800a242:	0003      	movs	r3, r0
 800a244:	b29a      	uxth	r2, r3
 800a246:	4b6f      	ldr	r3, [pc, #444]	@ (800a404 <SGP_GetMeasurementValues+0x3cc>)
 800a248:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	0018      	movs	r0, r3
 800a250:	f7f9 f8b6 	bl	80033c0 <__aeabi_i2d>
 800a254:	2200      	movs	r2, #0
 800a256:	4b68      	ldr	r3, [pc, #416]	@ (800a3f8 <SGP_GetMeasurementValues+0x3c0>)
 800a258:	f7f7 fdac 	bl	8001db4 <__aeabi_ddiv>
 800a25c:	0002      	movs	r2, r0
 800a25e:	000b      	movs	r3, r1
 800a260:	0014      	movs	r4, r2
 800a262:	001d      	movs	r5, r3
 800a264:	4b66      	ldr	r3, [pc, #408]	@ (800a400 <SGP_GetMeasurementValues+0x3c8>)
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	0018      	movs	r0, r3
 800a26a:	f7f9 f8a9 	bl	80033c0 <__aeabi_i2d>
 800a26e:	0002      	movs	r2, r0
 800a270:	000b      	movs	r3, r1
 800a272:	0020      	movs	r0, r4
 800a274:	0029      	movs	r1, r5
 800a276:	f7f8 f9e1 	bl	800263c <__aeabi_dmul>
 800a27a:	0002      	movs	r2, r0
 800a27c:	000b      	movs	r3, r1
 800a27e:	0010      	movs	r0, r2
 800a280:	0019      	movs	r1, r3
 800a282:	f7f6 f9e3 	bl	800064c <__aeabi_d2uiz>
 800a286:	0003      	movs	r3, r0
 800a288:	b29a      	uxth	r2, r3
 800a28a:	4b5f      	ldr	r3, [pc, #380]	@ (800a408 <SGP_GetMeasurementValues+0x3d0>)
 800a28c:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800a28e:	4b5c      	ldr	r3, [pc, #368]	@ (800a400 <SGP_GetMeasurementValues+0x3c8>)
 800a290:	881a      	ldrh	r2, [r3, #0]
 800a292:	4b5e      	ldr	r3, [pc, #376]	@ (800a40c <SGP_GetMeasurementValues+0x3d4>)
 800a294:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800a296:	4b5d      	ldr	r3, [pc, #372]	@ (800a40c <SGP_GetMeasurementValues+0x3d4>)
 800a298:	8818      	ldrh	r0, [r3, #0]
 800a29a:	4b5a      	ldr	r3, [pc, #360]	@ (800a404 <SGP_GetMeasurementValues+0x3cc>)
 800a29c:	8819      	ldrh	r1, [r3, #0]
 800a29e:	4b5a      	ldr	r3, [pc, #360]	@ (800a408 <SGP_GetMeasurementValues+0x3d0>)
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	001a      	movs	r2, r3
 800a2a4:	f001 fb36 	bl	800b914 <SetVocLED>
      }
      if(*vocIndex > 100){
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b64      	cmp	r3, #100	@ 0x64
 800a2ae:	dd66      	ble.n	800a37e <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f7f9 f883 	bl	80033c0 <__aeabi_i2d>
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	4b4e      	ldr	r3, [pc, #312]	@ (800a3f8 <SGP_GetMeasurementValues+0x3c0>)
 800a2be:	f7f8 fc85 	bl	8002bcc <__aeabi_dsub>
 800a2c2:	0002      	movs	r2, r0
 800a2c4:	000b      	movs	r3, r1
 800a2c6:	0010      	movs	r0, r2
 800a2c8:	0019      	movs	r1, r3
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	4b50      	ldr	r3, [pc, #320]	@ (800a410 <SGP_GetMeasurementValues+0x3d8>)
 800a2ce:	f7f7 fd71 	bl	8001db4 <__aeabi_ddiv>
 800a2d2:	0002      	movs	r2, r0
 800a2d4:	000b      	movs	r3, r1
 800a2d6:	0014      	movs	r4, r2
 800a2d8:	001d      	movs	r5, r3
 800a2da:	4b49      	ldr	r3, [pc, #292]	@ (800a400 <SGP_GetMeasurementValues+0x3c8>)
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f7f9 f86e 	bl	80033c0 <__aeabi_i2d>
 800a2e4:	0002      	movs	r2, r0
 800a2e6:	000b      	movs	r3, r1
 800a2e8:	0020      	movs	r0, r4
 800a2ea:	0029      	movs	r1, r5
 800a2ec:	f7f8 f9a6 	bl	800263c <__aeabi_dmul>
 800a2f0:	0002      	movs	r2, r0
 800a2f2:	000b      	movs	r3, r1
 800a2f4:	0010      	movs	r0, r2
 800a2f6:	0019      	movs	r1, r3
 800a2f8:	f7f6 f9a8 	bl	800064c <__aeabi_d2uiz>
 800a2fc:	0003      	movs	r3, r0
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	4b40      	ldr	r3, [pc, #256]	@ (800a404 <SGP_GetMeasurementValues+0x3cc>)
 800a302:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	0018      	movs	r0, r3
 800a30a:	f7f9 f859 	bl	80033c0 <__aeabi_i2d>
 800a30e:	2200      	movs	r2, #0
 800a310:	4b39      	ldr	r3, [pc, #228]	@ (800a3f8 <SGP_GetMeasurementValues+0x3c0>)
 800a312:	f7f8 fc5b 	bl	8002bcc <__aeabi_dsub>
 800a316:	0002      	movs	r2, r0
 800a318:	000b      	movs	r3, r1
 800a31a:	0010      	movs	r0, r2
 800a31c:	0019      	movs	r1, r3
 800a31e:	2200      	movs	r2, #0
 800a320:	4b3b      	ldr	r3, [pc, #236]	@ (800a410 <SGP_GetMeasurementValues+0x3d8>)
 800a322:	f7f7 fd47 	bl	8001db4 <__aeabi_ddiv>
 800a326:	0002      	movs	r2, r0
 800a328:	000b      	movs	r3, r1
 800a32a:	2000      	movs	r0, #0
 800a32c:	4933      	ldr	r1, [pc, #204]	@ (800a3fc <SGP_GetMeasurementValues+0x3c4>)
 800a32e:	f7f8 fc4d 	bl	8002bcc <__aeabi_dsub>
 800a332:	0002      	movs	r2, r0
 800a334:	000b      	movs	r3, r1
 800a336:	0014      	movs	r4, r2
 800a338:	001d      	movs	r5, r3
 800a33a:	4b31      	ldr	r3, [pc, #196]	@ (800a400 <SGP_GetMeasurementValues+0x3c8>)
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	0018      	movs	r0, r3
 800a340:	f7f9 f83e 	bl	80033c0 <__aeabi_i2d>
 800a344:	0002      	movs	r2, r0
 800a346:	000b      	movs	r3, r1
 800a348:	0020      	movs	r0, r4
 800a34a:	0029      	movs	r1, r5
 800a34c:	f7f8 f976 	bl	800263c <__aeabi_dmul>
 800a350:	0002      	movs	r2, r0
 800a352:	000b      	movs	r3, r1
 800a354:	0010      	movs	r0, r2
 800a356:	0019      	movs	r1, r3
 800a358:	f7f6 f978 	bl	800064c <__aeabi_d2uiz>
 800a35c:	0003      	movs	r3, r0
 800a35e:	b29a      	uxth	r2, r3
 800a360:	4b2a      	ldr	r3, [pc, #168]	@ (800a40c <SGP_GetMeasurementValues+0x3d4>)
 800a362:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800a364:	4b26      	ldr	r3, [pc, #152]	@ (800a400 <SGP_GetMeasurementValues+0x3c8>)
 800a366:	881a      	ldrh	r2, [r3, #0]
 800a368:	4b27      	ldr	r3, [pc, #156]	@ (800a408 <SGP_GetMeasurementValues+0x3d0>)
 800a36a:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800a36c:	4b27      	ldr	r3, [pc, #156]	@ (800a40c <SGP_GetMeasurementValues+0x3d4>)
 800a36e:	8818      	ldrh	r0, [r3, #0]
 800a370:	4b24      	ldr	r3, [pc, #144]	@ (800a404 <SGP_GetMeasurementValues+0x3cc>)
 800a372:	8819      	ldrh	r1, [r3, #0]
 800a374:	4b24      	ldr	r3, [pc, #144]	@ (800a408 <SGP_GetMeasurementValues+0x3d0>)
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	001a      	movs	r2, r3
 800a37a:	f001 facb 	bl	800b914 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800a37e:	4b11      	ldr	r3, [pc, #68]	@ (800a3c4 <SGP_GetMeasurementValues+0x38c>)
 800a380:	2200      	movs	r2, #0
 800a382:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 800a384:	4a23      	ldr	r2, [pc, #140]	@ (800a414 <SGP_GetMeasurementValues+0x3dc>)
 800a386:	4b09      	ldr	r3, [pc, #36]	@ (800a3ac <SGP_GetMeasurementValues+0x374>)
 800a388:	0019      	movs	r1, r3
 800a38a:	2003      	movs	r0, #3
 800a38c:	f002 f9e2 	bl	800c754 <CreateLine>
      HT_MeasurementReceived = false;
 800a390:	4b07      	ldr	r3, [pc, #28]	@ (800a3b0 <SGP_GetMeasurementValues+0x378>)
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800a396:	4b03      	ldr	r3, [pc, #12]	@ (800a3a4 <SGP_GetMeasurementValues+0x36c>)
 800a398:	2200      	movs	r2, #0
 800a39a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e053      	b.n	800a448 <SGP_GetMeasurementValues+0x410>
 800a3a0:	200011da 	.word	0x200011da
 800a3a4:	20001285 	.word	0x20001285
 800a3a8:	08021eac 	.word	0x08021eac
 800a3ac:	08021ed8 	.word	0x08021ed8
 800a3b0:	20001284 	.word	0x20001284
 800a3b4:	20000094 	.word	0x20000094
 800a3b8:	200000a8 	.word	0x200000a8
 800a3bc:	2000008c 	.word	0x2000008c
 800a3c0:	200011db 	.word	0x200011db
 800a3c4:	200011d9 	.word	0x200011d9
 800a3c8:	08021edc 	.word	0x08021edc
 800a3cc:	200011d0 	.word	0x200011d0
 800a3d0:	08021f0c 	.word	0x08021f0c
 800a3d4:	08021f30 	.word	0x08021f30
 800a3d8:	08021f34 	.word	0x08021f34
 800a3dc:	08021f54 	.word	0x08021f54
 800a3e0:	08021f58 	.word	0x08021f58
 800a3e4:	200000a4 	.word	0x200000a4
 800a3e8:	2000009c 	.word	0x2000009c
 800a3ec:	08021f78 	.word	0x08021f78
 800a3f0:	200011dc 	.word	0x200011dc
 800a3f4:	08021f8c 	.word	0x08021f8c
 800a3f8:	40590000 	.word	0x40590000
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	200000ac 	.word	0x200000ac
 800a404:	2000128a 	.word	0x2000128a
 800a408:	20001288 	.word	0x20001288
 800a40c:	20001286 	.word	0x20001286
 800a410:	40790000 	.word	0x40790000
 800a414:	08021fa0 	.word	0x08021fa0
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800a418:	f7ff fdf2 	bl	800a000 <SGP_MeasurementDone>
 800a41c:	1e03      	subs	r3, r0, #0
 800a41e:	d012      	beq.n	800a446 <SGP_GetMeasurementValues+0x40e>
 800a420:	4b0b      	ldr	r3, [pc, #44]	@ (800a450 <SGP_GetMeasurementValues+0x418>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00e      	beq.n	800a446 <SGP_GetMeasurementValues+0x40e>
 800a428:	4b0a      	ldr	r3, [pc, #40]	@ (800a454 <SGP_GetMeasurementValues+0x41c>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00a      	beq.n	800a446 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800a430:	4a09      	ldr	r2, [pc, #36]	@ (800a458 <SGP_GetMeasurementValues+0x420>)
 800a432:	4b0a      	ldr	r3, [pc, #40]	@ (800a45c <SGP_GetMeasurementValues+0x424>)
 800a434:	0019      	movs	r1, r3
 800a436:	2003      	movs	r0, #3
 800a438:	f002 f98c 	bl	800c754 <CreateLine>
    SGP_StartMeasurement();
 800a43c:	f7ff fd8c 	bl	8009f58 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800a440:	4b07      	ldr	r3, [pc, #28]	@ (800a460 <SGP_GetMeasurementValues+0x428>)
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800a446:	2300      	movs	r3, #0
}
 800a448:	0018      	movs	r0, r3
 800a44a:	46bd      	mov	sp, r7
 800a44c:	b004      	add	sp, #16
 800a44e:	bdb0      	pop	{r4, r5, r7, pc}
 800a450:	200011da 	.word	0x200011da
 800a454:	200011db 	.word	0x200011db
 800a458:	08021fc4 	.word	0x08021fc4
 800a45c:	08021ed8 	.word	0x08021ed8
 800a460:	20001285 	.word	0x20001285

0800a464 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800a46a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d4 <SGP_DeviceConnected+0x70>)
 800a46c:	2202      	movs	r2, #2
 800a46e:	0019      	movs	r1, r3
 800a470:	2059      	movs	r0, #89	@ 0x59
 800a472:	f7ff fd39 	bl	8009ee8 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800a476:	2001      	movs	r0, #1
 800a478:	f002 fd12 	bl	800cea0 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800a47c:	4b16      	ldr	r3, [pc, #88]	@ (800a4d8 <SGP_DeviceConnected+0x74>)
 800a47e:	2209      	movs	r2, #9
 800a480:	0019      	movs	r1, r3
 800a482:	2059      	movs	r0, #89	@ 0x59
 800a484:	f7ff fd12 	bl	8009eac <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800a488:	1dfb      	adds	r3, r7, #7
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e011      	b.n	800a4b4 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800a490:	1dfb      	adds	r3, r7, #7
 800a492:	7818      	ldrb	r0, [r3, #0]
 800a494:	1dfb      	adds	r3, r7, #7
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	4a0f      	ldr	r2, [pc, #60]	@ (800a4d8 <SGP_DeviceConnected+0x74>)
 800a49a:	5cd3      	ldrb	r3, [r2, r3]
 800a49c:	4a0f      	ldr	r2, [pc, #60]	@ (800a4dc <SGP_DeviceConnected+0x78>)
 800a49e:	4910      	ldr	r1, [pc, #64]	@ (800a4e0 <SGP_DeviceConnected+0x7c>)
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	0003      	movs	r3, r0
 800a4a4:	2002      	movs	r0, #2
 800a4a6:	f002 f955 	bl	800c754 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800a4aa:	1dfb      	adds	r3, r7, #7
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	1dfb      	adds	r3, r7, #7
 800a4b0:	3201      	adds	r2, #1
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	1dfb      	adds	r3, r7, #7
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b08      	cmp	r3, #8
 800a4ba:	d9e9      	bls.n	800a490 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800a4bc:	4b06      	ldr	r3, [pc, #24]	@ (800a4d8 <SGP_DeviceConnected+0x74>)
 800a4be:	2203      	movs	r2, #3
 800a4c0:	2109      	movs	r1, #9
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	f000 f80e 	bl	800a4e4 <CheckCRC>
 800a4c8:	0003      	movs	r3, r0
}
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b002      	add	sp, #8
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	46c0      	nop			@ (mov r8, r8)
 800a4d4:	20000088 	.word	0x20000088
 800a4d8:	200011d0 	.word	0x200011d0
 800a4dc:	08021fe4 	.word	0x08021fe4
 800a4e0:	08021f54 	.word	0x08021f54

0800a4e4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800a4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e6:	b08f      	sub	sp, #60	@ 0x3c
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6278      	str	r0, [r7, #36]	@ 0x24
 800a4ec:	0008      	movs	r0, r1
 800a4ee:	0011      	movs	r1, r2
 800a4f0:	2323      	movs	r3, #35	@ 0x23
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	1c02      	adds	r2, r0, #0
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	2322      	movs	r3, #34	@ 0x22
 800a4fa:	18fb      	adds	r3, r7, r3
 800a4fc:	1c0a      	adds	r2, r1, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800a500:	2317      	movs	r3, #23
 800a502:	2220      	movs	r2, #32
 800a504:	189b      	adds	r3, r3, r2
 800a506:	19db      	adds	r3, r3, r7
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
 800a50c:	e09f      	b.n	800a64e <CheckCRC+0x16a>
 800a50e:	466b      	mov	r3, sp
 800a510:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800a512:	2322      	movs	r3, #34	@ 0x22
 800a514:	18fb      	adds	r3, r7, r3
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	001a      	movs	r2, r3
 800a51a:	3a01      	subs	r2, #1
 800a51c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a51e:	60bb      	str	r3, [r7, #8]
 800a520:	2200      	movs	r2, #0
 800a522:	60fa      	str	r2, [r7, #12]
 800a524:	68b8      	ldr	r0, [r7, #8]
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	0002      	movs	r2, r0
 800a52a:	0f52      	lsrs	r2, r2, #29
 800a52c:	000c      	movs	r4, r1
 800a52e:	00e4      	lsls	r4, r4, #3
 800a530:	61fc      	str	r4, [r7, #28]
 800a532:	69fc      	ldr	r4, [r7, #28]
 800a534:	4314      	orrs	r4, r2
 800a536:	61fc      	str	r4, [r7, #28]
 800a538:	0002      	movs	r2, r0
 800a53a:	00d2      	lsls	r2, r2, #3
 800a53c:	61ba      	str	r2, [r7, #24]
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	2200      	movs	r2, #0
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	6838      	ldr	r0, [r7, #0]
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	0002      	movs	r2, r0
 800a54a:	0f52      	lsrs	r2, r2, #29
 800a54c:	000c      	movs	r4, r1
 800a54e:	00e4      	lsls	r4, r4, #3
 800a550:	617c      	str	r4, [r7, #20]
 800a552:	697c      	ldr	r4, [r7, #20]
 800a554:	4314      	orrs	r4, r2
 800a556:	617c      	str	r4, [r7, #20]
 800a558:	0002      	movs	r2, r0
 800a55a:	00d2      	lsls	r2, r2, #3
 800a55c:	613a      	str	r2, [r7, #16]
 800a55e:	3307      	adds	r3, #7
 800a560:	08db      	lsrs	r3, r3, #3
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	466a      	mov	r2, sp
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	469d      	mov	sp, r3
 800a56a:	466b      	mov	r3, sp
 800a56c:	3300      	adds	r3, #0
 800a56e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800a570:	2316      	movs	r3, #22
 800a572:	2220      	movs	r2, #32
 800a574:	189b      	adds	r3, r3, r2
 800a576:	19db      	adds	r3, r3, r7
 800a578:	2200      	movs	r2, #0
 800a57a:	701a      	strb	r2, [r3, #0]
 800a57c:	e01e      	b.n	800a5bc <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800a57e:	2317      	movs	r3, #23
 800a580:	2220      	movs	r2, #32
 800a582:	189b      	adds	r3, r3, r2
 800a584:	19db      	adds	r3, r3, r7
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	2116      	movs	r1, #22
 800a58a:	2320      	movs	r3, #32
 800a58c:	18cb      	adds	r3, r1, r3
 800a58e:	19db      	adds	r3, r3, r7
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	18d3      	adds	r3, r2, r3
 800a594:	001a      	movs	r2, r3
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	189a      	adds	r2, r3, r2
 800a59a:	0008      	movs	r0, r1
 800a59c:	2320      	movs	r3, #32
 800a59e:	18cb      	adds	r3, r1, r3
 800a5a0:	19db      	adds	r3, r3, r7
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	7811      	ldrb	r1, [r2, #0]
 800a5a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5a8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800a5aa:	2320      	movs	r3, #32
 800a5ac:	18c3      	adds	r3, r0, r3
 800a5ae:	19db      	adds	r3, r3, r7
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	2320      	movs	r3, #32
 800a5b4:	18c3      	adds	r3, r0, r3
 800a5b6:	19db      	adds	r3, r3, r7
 800a5b8:	3201      	adds	r2, #1
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	2316      	movs	r3, #22
 800a5be:	2220      	movs	r2, #32
 800a5c0:	189b      	adds	r3, r3, r2
 800a5c2:	19da      	adds	r2, r3, r7
 800a5c4:	2322      	movs	r3, #34	@ 0x22
 800a5c6:	18fb      	adds	r3, r7, r3
 800a5c8:	7812      	ldrb	r2, [r2, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d3d6      	bcc.n	800a57e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800a5d0:	2417      	movs	r4, #23
 800a5d2:	2320      	movs	r3, #32
 800a5d4:	18e3      	adds	r3, r4, r3
 800a5d6:	19db      	adds	r3, r3, r7
 800a5d8:	781a      	ldrb	r2, [r3, #0]
 800a5da:	2322      	movs	r3, #34	@ 0x22
 800a5dc:	18fb      	adds	r3, r7, r3
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	18d3      	adds	r3, r2, r3
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e6:	18d2      	adds	r2, r2, r3
 800a5e8:	250b      	movs	r5, #11
 800a5ea:	2320      	movs	r3, #32
 800a5ec:	18eb      	adds	r3, r5, r3
 800a5ee:	19db      	adds	r3, r3, r7
 800a5f0:	7812      	ldrb	r2, [r2, #0]
 800a5f2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800a5f4:	2322      	movs	r3, #34	@ 0x22
 800a5f6:	18fb      	adds	r3, r7, r3
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a600:	0011      	movs	r1, r2
 800a602:	0018      	movs	r0, r3
 800a604:	f000 f838 	bl	800a678 <CalculateCRC>
 800a608:	0003      	movs	r3, r0
 800a60a:	001a      	movs	r2, r3
 800a60c:	2320      	movs	r3, #32
 800a60e:	18eb      	adds	r3, r5, r3
 800a610:	19db      	adds	r3, r3, r7
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	4293      	cmp	r3, r2
 800a616:	d00c      	beq.n	800a632 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800a618:	2320      	movs	r3, #32
 800a61a:	18e3      	adds	r3, r4, r3
 800a61c:	19db      	adds	r3, r3, r7
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	3301      	adds	r3, #1
 800a622:	4a13      	ldr	r2, [pc, #76]	@ (800a670 <CheckCRC+0x18c>)
 800a624:	4913      	ldr	r1, [pc, #76]	@ (800a674 <CheckCRC+0x190>)
 800a626:	2001      	movs	r0, #1
 800a628:	f002 f894 	bl	800c754 <CreateLine>
      return false;
 800a62c:	2300      	movs	r3, #0
 800a62e:	46b5      	mov	sp, r6
 800a630:	e019      	b.n	800a666 <CheckCRC+0x182>
 800a632:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800a634:	2217      	movs	r2, #23
 800a636:	2320      	movs	r3, #32
 800a638:	18d3      	adds	r3, r2, r3
 800a63a:	19db      	adds	r3, r3, r7
 800a63c:	2120      	movs	r1, #32
 800a63e:	1852      	adds	r2, r2, r1
 800a640:	19d1      	adds	r1, r2, r7
 800a642:	2222      	movs	r2, #34	@ 0x22
 800a644:	18ba      	adds	r2, r7, r2
 800a646:	7809      	ldrb	r1, [r1, #0]
 800a648:	7812      	ldrb	r2, [r2, #0]
 800a64a:	188a      	adds	r2, r1, r2
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	2317      	movs	r3, #23
 800a650:	2220      	movs	r2, #32
 800a652:	189b      	adds	r3, r3, r2
 800a654:	19da      	adds	r2, r3, r7
 800a656:	2323      	movs	r3, #35	@ 0x23
 800a658:	18fb      	adds	r3, r7, r3
 800a65a:	7812      	ldrb	r2, [r2, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d200      	bcs.n	800a664 <CheckCRC+0x180>
 800a662:	e754      	b.n	800a50e <CheckCRC+0x2a>
    }
  }
  return true;
 800a664:	2301      	movs	r3, #1
}
 800a666:	0018      	movs	r0, r3
 800a668:	46bd      	mov	sp, r7
 800a66a:	b00f      	add	sp, #60	@ 0x3c
 800a66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a66e:	46c0      	nop			@ (mov r8, r8)
 800a670:	08022004 	.word	0x08022004
 800a674:	08021f30 	.word	0x08021f30

0800a678 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	000a      	movs	r2, r1
 800a682:	1cfb      	adds	r3, r7, #3
 800a684:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800a686:	230f      	movs	r3, #15
 800a688:	18fb      	adds	r3, r7, r3
 800a68a:	22ff      	movs	r2, #255	@ 0xff
 800a68c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800a68e:	230e      	movs	r3, #14
 800a690:	18fb      	adds	r3, r7, r3
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
 800a696:	e037      	b.n	800a708 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800a698:	230e      	movs	r3, #14
 800a69a:	18fb      	adds	r3, r7, r3
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	18d3      	adds	r3, r2, r3
 800a6a2:	7819      	ldrb	r1, [r3, #0]
 800a6a4:	220f      	movs	r2, #15
 800a6a6:	18bb      	adds	r3, r7, r2
 800a6a8:	18ba      	adds	r2, r7, r2
 800a6aa:	7812      	ldrb	r2, [r2, #0]
 800a6ac:	404a      	eors	r2, r1
 800a6ae:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800a6b0:	230d      	movs	r3, #13
 800a6b2:	18fb      	adds	r3, r7, r3
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	701a      	strb	r2, [r3, #0]
 800a6b8:	e01b      	b.n	800a6f2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800a6ba:	210f      	movs	r1, #15
 800a6bc:	187b      	adds	r3, r7, r1
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	b25b      	sxtb	r3, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	da09      	bge.n	800a6da <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800a6c6:	187b      	adds	r3, r7, r1
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	b25b      	sxtb	r3, r3
 800a6ce:	2231      	movs	r2, #49	@ 0x31
 800a6d0:	4053      	eors	r3, r2
 800a6d2:	b25a      	sxtb	r2, r3
 800a6d4:	187b      	adds	r3, r7, r1
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	e005      	b.n	800a6e6 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800a6da:	230f      	movs	r3, #15
 800a6dc:	18fa      	adds	r2, r7, r3
 800a6de:	18fb      	adds	r3, r7, r3
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	18db      	adds	r3, r3, r3
 800a6e4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800a6e6:	210d      	movs	r1, #13
 800a6e8:	187b      	adds	r3, r7, r1
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	187b      	adds	r3, r7, r1
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	230d      	movs	r3, #13
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2b07      	cmp	r3, #7
 800a6fa:	d9de      	bls.n	800a6ba <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800a6fc:	210e      	movs	r1, #14
 800a6fe:	187b      	adds	r3, r7, r1
 800a700:	781a      	ldrb	r2, [r3, #0]
 800a702:	187b      	adds	r3, r7, r1
 800a704:	3201      	adds	r2, #1
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	230e      	movs	r3, #14
 800a70a:	18fa      	adds	r2, r7, r3
 800a70c:	1cfb      	adds	r3, r7, #3
 800a70e:	7812      	ldrb	r2, [r2, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	d3c0      	bcc.n	800a698 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800a716:	230f      	movs	r3, #15
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	781b      	ldrb	r3, [r3, #0]
}
 800a71c:	0018      	movs	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	b004      	add	sp, #16
 800a722:	bd80      	pop	{r7, pc}

0800a724 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4936      	ldr	r1, [pc, #216]	@ (800a80c <SGP_GetHT+0xe8>)
 800a734:	1c18      	adds	r0, r3, #0
 800a736:	f7f6 f8c3 	bl	80008c0 <__aeabi_fadd>
 800a73a:	1c03      	adds	r3, r0, #0
 800a73c:	4934      	ldr	r1, [pc, #208]	@ (800a810 <SGP_GetHT+0xec>)
 800a73e:	1c18      	adds	r0, r3, #0
 800a740:	f7f6 fa48 	bl	8000bd4 <__aeabi_fdiv>
 800a744:	1c03      	adds	r3, r0, #0
 800a746:	4933      	ldr	r1, [pc, #204]	@ (800a814 <SGP_GetHT+0xf0>)
 800a748:	1c18      	adds	r0, r3, #0
 800a74a:	f7f6 fc29 	bl	8000fa0 <__aeabi_fmul>
 800a74e:	1c03      	adds	r3, r0, #0
 800a750:	1c18      	adds	r0, r3, #0
 800a752:	f7f5 ff63 	bl	800061c <__aeabi_f2uiz>
 800a756:	0003      	movs	r3, r0
 800a758:	b29a      	uxth	r2, r3
 800a75a:	4b2f      	ldr	r3, [pc, #188]	@ (800a818 <SGP_GetHT+0xf4>)
 800a75c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	492e      	ldr	r1, [pc, #184]	@ (800a81c <SGP_GetHT+0xf8>)
 800a764:	1c18      	adds	r0, r3, #0
 800a766:	f7f6 fa35 	bl	8000bd4 <__aeabi_fdiv>
 800a76a:	1c03      	adds	r3, r0, #0
 800a76c:	4929      	ldr	r1, [pc, #164]	@ (800a814 <SGP_GetHT+0xf0>)
 800a76e:	1c18      	adds	r0, r3, #0
 800a770:	f7f6 fc16 	bl	8000fa0 <__aeabi_fmul>
 800a774:	1c03      	adds	r3, r0, #0
 800a776:	1c18      	adds	r0, r3, #0
 800a778:	f7f5 ff50 	bl	800061c <__aeabi_f2uiz>
 800a77c:	0003      	movs	r3, r0
 800a77e:	b29a      	uxth	r2, r3
 800a780:	4b27      	ldr	r3, [pc, #156]	@ (800a820 <SGP_GetHT+0xfc>)
 800a782:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800a784:	4b26      	ldr	r3, [pc, #152]	@ (800a820 <SGP_GetHT+0xfc>)
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	0a1b      	lsrs	r3, r3, #8
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	4b25      	ldr	r3, [pc, #148]	@ (800a824 <SGP_GetHT+0x100>)
 800a790:	709a      	strb	r2, [r3, #2]
 800a792:	4b24      	ldr	r3, [pc, #144]	@ (800a824 <SGP_GetHT+0x100>)
 800a794:	789a      	ldrb	r2, [r3, #2]
 800a796:	210c      	movs	r1, #12
 800a798:	187b      	adds	r3, r7, r1
 800a79a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800a79c:	4b20      	ldr	r3, [pc, #128]	@ (800a820 <SGP_GetHT+0xfc>)
 800a79e:	881b      	ldrh	r3, [r3, #0]
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	4b20      	ldr	r3, [pc, #128]	@ (800a824 <SGP_GetHT+0x100>)
 800a7a4:	70da      	strb	r2, [r3, #3]
 800a7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a824 <SGP_GetHT+0x100>)
 800a7a8:	78da      	ldrb	r2, [r3, #3]
 800a7aa:	187b      	adds	r3, r7, r1
 800a7ac:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800a7ae:	187b      	adds	r3, r7, r1
 800a7b0:	2102      	movs	r1, #2
 800a7b2:	0018      	movs	r0, r3
 800a7b4:	f7ff ff60 	bl	800a678 <CalculateCRC>
 800a7b8:	0003      	movs	r3, r0
 800a7ba:	001a      	movs	r2, r3
 800a7bc:	4b19      	ldr	r3, [pc, #100]	@ (800a824 <SGP_GetHT+0x100>)
 800a7be:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800a7c0:	4b15      	ldr	r3, [pc, #84]	@ (800a818 <SGP_GetHT+0xf4>)
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	0a1b      	lsrs	r3, r3, #8
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	4b16      	ldr	r3, [pc, #88]	@ (800a824 <SGP_GetHT+0x100>)
 800a7cc:	715a      	strb	r2, [r3, #5]
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <SGP_GetHT+0x100>)
 800a7d0:	795a      	ldrb	r2, [r3, #5]
 800a7d2:	2108      	movs	r1, #8
 800a7d4:	187b      	adds	r3, r7, r1
 800a7d6:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a818 <SGP_GetHT+0xf4>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	4b11      	ldr	r3, [pc, #68]	@ (800a824 <SGP_GetHT+0x100>)
 800a7e0:	719a      	strb	r2, [r3, #6]
 800a7e2:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <SGP_GetHT+0x100>)
 800a7e4:	799a      	ldrb	r2, [r3, #6]
 800a7e6:	187b      	adds	r3, r7, r1
 800a7e8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800a7ea:	187b      	adds	r3, r7, r1
 800a7ec:	2102      	movs	r1, #2
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	f7ff ff42 	bl	800a678 <CalculateCRC>
 800a7f4:	0003      	movs	r3, r0
 800a7f6:	001a      	movs	r2, r3
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a824 <SGP_GetHT+0x100>)
 800a7fa:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a828 <SGP_GetHT+0x104>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	701a      	strb	r2, [r3, #0]
}
 800a802:	46c0      	nop			@ (mov r8, r8)
 800a804:	46bd      	mov	sp, r7
 800a806:	b004      	add	sp, #16
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	46c0      	nop			@ (mov r8, r8)
 800a80c:	42340000 	.word	0x42340000
 800a810:	432f0000 	.word	0x432f0000
 800a814:	477fff00 	.word	0x477fff00
 800a818:	20001282 	.word	0x20001282
 800a81c:	42c80000 	.word	0x42c80000
 800a820:	20001280 	.word	0x20001280
 800a824:	20000094 	.word	0x20000094
 800a828:	20001284 	.word	0x20001284

0800a82c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	0002      	movs	r2, r0
 800a834:	1dfb      	adds	r3, r7, #7
 800a836:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a838:	1dfb      	adds	r3, r7, #7
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a83e:	d809      	bhi.n	800a854 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a840:	1dfb      	adds	r3, r7, #7
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	001a      	movs	r2, r3
 800a846:	231f      	movs	r3, #31
 800a848:	401a      	ands	r2, r3
 800a84a:	4b04      	ldr	r3, [pc, #16]	@ (800a85c <__NVIC_EnableIRQ+0x30>)
 800a84c:	2101      	movs	r1, #1
 800a84e:	4091      	lsls	r1, r2
 800a850:	000a      	movs	r2, r1
 800a852:	601a      	str	r2, [r3, #0]
  }
}
 800a854:	46c0      	nop			@ (mov r8, r8)
 800a856:	46bd      	mov	sp, r7
 800a858:	b002      	add	sp, #8
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	e000e100 	.word	0xe000e100

0800a860 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	0002      	movs	r2, r0
 800a868:	1dfb      	adds	r3, r7, #7
 800a86a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a86c:	1dfb      	adds	r3, r7, #7
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b7f      	cmp	r3, #127	@ 0x7f
 800a872:	d810      	bhi.n	800a896 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a874:	1dfb      	adds	r3, r7, #7
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	001a      	movs	r2, r3
 800a87a:	231f      	movs	r3, #31
 800a87c:	4013      	ands	r3, r2
 800a87e:	4908      	ldr	r1, [pc, #32]	@ (800a8a0 <__NVIC_DisableIRQ+0x40>)
 800a880:	2201      	movs	r2, #1
 800a882:	409a      	lsls	r2, r3
 800a884:	0013      	movs	r3, r2
 800a886:	2280      	movs	r2, #128	@ 0x80
 800a888:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a88a:	f3bf 8f4f 	dsb	sy
}
 800a88e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800a890:	f3bf 8f6f 	isb	sy
}
 800a894:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800a896:	46c0      	nop			@ (mov r8, r8)
 800a898:	46bd      	mov	sp, r7
 800a89a:	b002      	add	sp, #8
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	46c0      	nop			@ (mov r8, r8)
 800a8a0:	e000e100 	.word	0xe000e100

0800a8a4 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800a8a4:	b5b0      	push	{r4, r5, r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	0008      	movs	r0, r1
 800a8ae:	0011      	movs	r1, r2
 800a8b0:	1cfb      	adds	r3, r7, #3
 800a8b2:	1c02      	adds	r2, r0, #0
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	1cbb      	adds	r3, r7, #2
 800a8b8:	1c0a      	adds	r2, r1, #0
 800a8ba:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800a8bc:	4b5b      	ldr	r3, [pc, #364]	@ (800aa2c <getSoundData+0x188>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4053      	eors	r3, r2
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d107      	bne.n	800a8dc <getSoundData+0x38>
 800a8cc:	4b58      	ldr	r3, [pc, #352]	@ (800aa30 <getSoundData+0x18c>)
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	4053      	eors	r3, r2
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <getSoundData+0x3c>
    {
        return false;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e0a0      	b.n	800aa22 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800a8e0:	4b54      	ldr	r3, [pc, #336]	@ (800aa34 <getSoundData+0x190>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d005      	beq.n	800a8f6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800a8ea:	4b53      	ldr	r3, [pc, #332]	@ (800aa38 <getSoundData+0x194>)
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	b25b      	sxtb	r3, r3
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	f7ff ffb5 	bl	800a860 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800a8f6:	f3bf 8f4f 	dsb	sy
}
 800a8fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800a8fc:	f3bf 8f6f 	isb	sy
}
 800a900:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800a902:	1cfb      	adds	r3, r7, #3
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d04c      	beq.n	800a9a4 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800a90a:	4b4c      	ldr	r3, [pc, #304]	@ (800aa3c <getSoundData+0x198>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d11b      	bne.n	800a94a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	e00e      	b.n	800a942 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	18d3      	adds	r3, r2, r3
 800a92a:	3302      	adds	r3, #2
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	18d3      	adds	r3, r2, r3
 800a936:	3308      	adds	r3, #8
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	3301      	adds	r3, #1
 800a940:	617b      	str	r3, [r7, #20]
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b05      	cmp	r3, #5
 800a946:	d9ed      	bls.n	800a924 <getSoundData+0x80>
 800a948:	e02c      	b.n	800a9a4 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	1c59      	adds	r1, r3, #1
 800a950:	4b3b      	ldr	r3, [pc, #236]	@ (800aa40 <getSoundData+0x19c>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b3b      	ldr	r3, [pc, #236]	@ (800aa44 <getSoundData+0x1a0>)
 800a956:	681c      	ldr	r4, [r3, #0]
 800a958:	4b38      	ldr	r3, [pc, #224]	@ (800aa3c <getSoundData+0x198>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	0023      	movs	r3, r4
 800a960:	f000 fde8 	bl	800b534 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a964:	2300      	movs	r3, #0
 800a966:	613b      	str	r3, [r7, #16]
 800a968:	e019      	b.n	800a99e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	18d3      	adds	r3, r2, r3
 800a970:	1c98      	adds	r0, r3, #2
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	3308      	adds	r3, #8
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800a97a:	4b33      	ldr	r3, [pc, #204]	@ (800aa48 <getSoundData+0x1a4>)
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	0092      	lsls	r2, r2, #2
 800a980:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800a982:	4b32      	ldr	r3, [pc, #200]	@ (800aa4c <getSoundData+0x1a8>)
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800a98a:	4b2c      	ldr	r3, [pc, #176]	@ (800aa3c <getSoundData+0x198>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	0013      	movs	r3, r2
 800a992:	0022      	movs	r2, r4
 800a994:	f000 fdce 	bl	800b534 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	3301      	adds	r3, #1
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b05      	cmp	r3, #5
 800a9a2:	d9e2      	bls.n	800a96a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800a9a4:	1cbb      	adds	r3, r7, #2
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d028      	beq.n	800a9fe <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800a9ac:	240e      	movs	r4, #14
 800a9ae:	193b      	adds	r3, r7, r4
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800a9b4:	250d      	movs	r5, #13
 800a9b6:	197b      	adds	r3, r7, r5
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800a9bc:	4b24      	ldr	r3, [pc, #144]	@ (800aa50 <getSoundData+0x1ac>)
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	4924      	ldr	r1, [pc, #144]	@ (800aa54 <getSoundData+0x1b0>)
 800a9c2:	197b      	adds	r3, r7, r5
 800a9c4:	193a      	adds	r2, r7, r4
 800a9c6:	f000 fe59 	bl	800b67c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800a9ca:	193b      	adds	r3, r7, r4
 800a9cc:	881a      	ldrh	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	21ff      	movs	r1, #255	@ 0xff
 800a9d2:	4011      	ands	r1, r2
 800a9d4:	000c      	movs	r4, r1
 800a9d6:	7b99      	ldrb	r1, [r3, #14]
 800a9d8:	2000      	movs	r0, #0
 800a9da:	4001      	ands	r1, r0
 800a9dc:	1c08      	adds	r0, r1, #0
 800a9de:	1c21      	adds	r1, r4, #0
 800a9e0:	4301      	orrs	r1, r0
 800a9e2:	7399      	strb	r1, [r3, #14]
 800a9e4:	0a12      	lsrs	r2, r2, #8
 800a9e6:	b290      	uxth	r0, r2
 800a9e8:	7bda      	ldrb	r2, [r3, #15]
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	400a      	ands	r2, r1
 800a9ee:	1c11      	adds	r1, r2, #0
 800a9f0:	1c02      	adds	r2, r0, #0
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800a9f6:	197b      	adds	r3, r7, r5
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800a9fe:	f000 f86f 	bl	800aae0 <micSettlingComplete>
 800aa02:	0003      	movs	r3, r0
 800aa04:	001a      	movs	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800aa0a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa34 <getSoundData+0x190>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800aa14:	4b08      	ldr	r3, [pc, #32]	@ (800aa38 <getSoundData+0x194>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	f7ff ff06 	bl	800a82c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800aa20:	2301      	movs	r3, #1
}
 800aa22:	0018      	movs	r0, r3
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b006      	add	sp, #24
 800aa28:	bdb0      	pop	{r4, r5, r7, pc}
 800aa2a:	46c0      	nop			@ (mov r8, r8)
 800aa2c:	2000128d 	.word	0x2000128d
 800aa30:	20001290 	.word	0x20001290
 800aa34:	2000128f 	.word	0x2000128f
 800aa38:	20001ce0 	.word	0x20001ce0
 800aa3c:	20001d1c 	.word	0x20001d1c
 800aa40:	20001ce4 	.word	0x20001ce4
 800aa44:	20001ce8 	.word	0x20001ce8
 800aa48:	20001cec 	.word	0x20001cec
 800aa4c:	20001d04 	.word	0x20001d04
 800aa50:	20001298 	.word	0x20001298
 800aa54:	3b5c7333 	.word	0x3b5c7333

0800aa58 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	001a      	movs	r2, r3
 800aa66:	1cfb      	adds	r3, r7, #3
 800aa68:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800aa6a:	4b09      	ldr	r3, [pc, #36]	@ (800aa90 <soundInit+0x38>)
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800aa70:	4b08      	ldr	r3, [pc, #32]	@ (800aa94 <soundInit+0x3c>)
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800aa76:	4b08      	ldr	r3, [pc, #32]	@ (800aa98 <soundInit+0x40>)
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800aa7c:	4b07      	ldr	r3, [pc, #28]	@ (800aa9c <soundInit+0x44>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	569a      	ldrsb	r2, [r3, r2]
 800aa82:	4b06      	ldr	r3, [pc, #24]	@ (800aa9c <soundInit+0x44>)
 800aa84:	701a      	strb	r2, [r3, #0]

    return true;
 800aa86:	2301      	movs	r3, #1
}
 800aa88:	0018      	movs	r0, r3
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b004      	add	sp, #16
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20001cd8 	.word	0x20001cd8
 800aa94:	20001cd4 	.word	0x20001cd4
 800aa98:	20001cdc 	.word	0x20001cdc
 800aa9c:	20001ce0 	.word	0x20001ce0

0800aaa0 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800aaa4:	4b02      	ldr	r3, [pc, #8]	@ (800aab0 <clearMaximumAmplitude+0x10>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
}
 800aaaa:	46c0      	nop			@ (mov r8, r8)
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20001298 	.word	0x20001298

0800aab4 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800aab8:	4b08      	ldr	r3, [pc, #32]	@ (800aadc <startMicSettlingPeriod+0x28>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800aac2:	4b06      	ldr	r3, [pc, #24]	@ (800aadc <startMicSettlingPeriod+0x28>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	0018      	movs	r0, r3
 800aac8:	f009 fde0 	bl	801468c <HAL_TIM_Base_Start>
 800aacc:	1e03      	subs	r3, r0, #0
 800aace:	d001      	beq.n	800aad4 <startMicSettlingPeriod+0x20>
    {
        return false;
 800aad0:	2300      	movs	r3, #0
 800aad2:	e000      	b.n	800aad6 <startMicSettlingPeriod+0x22>
    }
    return true;
 800aad4:	2301      	movs	r3, #1
}
 800aad6:	0018      	movs	r0, r3
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20001cd4 	.word	0x20001cd4

0800aae0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800aae6:	4b0e      	ldr	r3, [pc, #56]	@ (800ab20 <micSettlingComplete+0x40>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	401a      	ands	r2, r3
 800aaf2:	1dfb      	adds	r3, r7, #7
 800aaf4:	3a01      	subs	r2, #1
 800aaf6:	4251      	negs	r1, r2
 800aaf8:	414a      	adcs	r2, r1
 800aafa:	701a      	strb	r2, [r3, #0]
    if (complete)
 800aafc:	1dfb      	adds	r3, r7, #7
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800ab04:	4b06      	ldr	r3, [pc, #24]	@ (800ab20 <micSettlingComplete+0x40>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	0018      	movs	r0, r3
 800ab0a:	f009 fe09 	bl	8014720 <HAL_TIM_Base_Stop>
      DataReady = true;
 800ab0e:	4b05      	ldr	r3, [pc, #20]	@ (800ab24 <micSettlingComplete+0x44>)
 800ab10:	2201      	movs	r2, #1
 800ab12:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800ab14:	1dfb      	adds	r3, r7, #7
 800ab16:	781b      	ldrb	r3, [r3, #0]
}
 800ab18:	0018      	movs	r0, r3
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	b002      	add	sp, #8
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20001cd4 	.word	0x20001cd4
 800ab24:	2000128c 	.word	0x2000128c

0800ab28 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	0002      	movs	r2, r0
 800ab30:	1dfb      	adds	r3, r7, #7
 800ab32:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800ab34:	4b29      	ldr	r3, [pc, #164]	@ (800abdc <enableMicrophone+0xb4>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	1dfa      	adds	r2, r7, #7
 800ab3c:	7812      	ldrb	r2, [r2, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d101      	bne.n	800ab46 <enableMicrophone+0x1e>
    {
        return true;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e045      	b.n	800abd2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800ab46:	1dfb      	adds	r3, r7, #7
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d025      	beq.n	800ab9a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800ab4e:	f7ff ffb1 	bl	800aab4 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800ab52:	4b23      	ldr	r3, [pc, #140]	@ (800abe0 <enableMicrophone+0xb8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2280      	movs	r2, #128	@ 0x80
 800ab58:	0092      	lsls	r2, r2, #2
 800ab5a:	4922      	ldr	r1, [pc, #136]	@ (800abe4 <enableMicrophone+0xbc>)
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	f006 f975 	bl	8010e4c <HAL_I2S_Receive_DMA>
 800ab62:	1e03      	subs	r3, r0, #0
 800ab64:	d001      	beq.n	800ab6a <enableMicrophone+0x42>
        {
            return false;
 800ab66:	2300      	movs	r3, #0
 800ab68:	e033      	b.n	800abd2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800ab6a:	f7ff ff99 	bl	800aaa0 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	@ (800abe8 <enableMicrophone+0xc0>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800ab74:	4b1d      	ldr	r3, [pc, #116]	@ (800abec <enableMicrophone+0xc4>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	f7ff fe56 	bl	800a82c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800ab80:	4b1b      	ldr	r3, [pc, #108]	@ (800abf0 <enableMicrophone+0xc8>)
 800ab82:	2201      	movs	r2, #1
 800ab84:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800ab86:	4b15      	ldr	r3, [pc, #84]	@ (800abdc <enableMicrophone+0xb4>)
 800ab88:	2201      	movs	r2, #1
 800ab8a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ab8c:	4b19      	ldr	r3, [pc, #100]	@ (800abf4 <enableMicrophone+0xcc>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800ab92:	4b19      	ldr	r3, [pc, #100]	@ (800abf8 <enableMicrophone+0xd0>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	701a      	strb	r2, [r3, #0]
 800ab98:	e01a      	b.n	800abd0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800ab9a:	4b14      	ldr	r3, [pc, #80]	@ (800abec <enableMicrophone+0xc4>)
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	b25b      	sxtb	r3, r3
 800aba0:	0018      	movs	r0, r3
 800aba2:	f7ff fe5d 	bl	800a860 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800aba6:	4b12      	ldr	r3, [pc, #72]	@ (800abf0 <enableMicrophone+0xc8>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800abac:	4b11      	ldr	r3, [pc, #68]	@ (800abf4 <enableMicrophone+0xcc>)
 800abae:	2200      	movs	r2, #0
 800abb0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800abb2:	4b11      	ldr	r3, [pc, #68]	@ (800abf8 <enableMicrophone+0xd0>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800abb8:	4b09      	ldr	r3, [pc, #36]	@ (800abe0 <enableMicrophone+0xb8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	0018      	movs	r0, r3
 800abbe:	f006 fa07 	bl	8010fd0 <HAL_I2S_DMAStop>
 800abc2:	1e03      	subs	r3, r0, #0
 800abc4:	d001      	beq.n	800abca <enableMicrophone+0xa2>
        {
            return false;
 800abc6:	2300      	movs	r3, #0
 800abc8:	e003      	b.n	800abd2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800abca:	4b04      	ldr	r3, [pc, #16]	@ (800abdc <enableMicrophone+0xb4>)
 800abcc:	2200      	movs	r2, #0
 800abce:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800abd0:	2301      	movs	r3, #1
}
 800abd2:	0018      	movs	r0, r3
 800abd4:	46bd      	mov	sp, r7
 800abd6:	b002      	add	sp, #8
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	46c0      	nop			@ (mov r8, r8)
 800abdc:	2000128d 	.word	0x2000128d
 800abe0:	20001cd8 	.word	0x20001cd8
 800abe4:	200012d4 	.word	0x200012d4
 800abe8:	20001294 	.word	0x20001294
 800abec:	20001ce0 	.word	0x20001ce0
 800abf0:	2000128f 	.word	0x2000128f
 800abf4:	2000128e 	.word	0x2000128e
 800abf8:	20001290 	.word	0x20001290

0800abfc <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800ac00:	4b0c      	ldr	r3, [pc, #48]	@ (800ac34 <startSPLcalculation+0x38>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2201      	movs	r2, #1
 800ac08:	4053      	eors	r3, r2
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <startSPLcalculation+0x18>
    {
        return false;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e00c      	b.n	800ac2e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800ac14:	4b08      	ldr	r3, [pc, #32]	@ (800ac38 <startSPLcalculation+0x3c>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <startSPLcalculation+0x26>
    {
        return true;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e005      	b.n	800ac2e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800ac22:	f000 fb63 	bl	800b2ec <resetSPLstate>
    SPLcalcEnabled = true;
 800ac26:	4b04      	ldr	r3, [pc, #16]	@ (800ac38 <startSPLcalculation+0x3c>)
 800ac28:	2201      	movs	r2, #1
 800ac2a:	701a      	strb	r2, [r3, #0]
    return true;
 800ac2c:	2301      	movs	r3, #1
}
 800ac2e:	0018      	movs	r0, r3
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	2000128d 	.word	0x2000128d
 800ac38:	2000128e 	.word	0x2000128e

0800ac3c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800ac44:	4b05      	ldr	r3, [pc, #20]	@ (800ac5c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d102      	bne.n	800ac54 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800ac4e:	2000      	movs	r0, #0
 800ac50:	f000 f81a 	bl	800ac88 <processHalfDMAbuffer>
  }
}
 800ac54:	46c0      	nop			@ (mov r8, r8)
 800ac56:	46bd      	mov	sp, r7
 800ac58:	b002      	add	sp, #8
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20001cd8 	.word	0x20001cd8

0800ac60 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800ac68:	4b06      	ldr	r3, [pc, #24]	@ (800ac84 <HAL_I2S_RxCpltCallback+0x24>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d104      	bne.n	800ac7c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800ac72:	2380      	movs	r3, #128	@ 0x80
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	0018      	movs	r0, r3
 800ac78:	f000 f806 	bl	800ac88 <processHalfDMAbuffer>
  }
}
 800ac7c:	46c0      	nop			@ (mov r8, r8)
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	b002      	add	sp, #8
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20001cd8 	.word	0x20001cd8

0800ac88 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	005a      	lsls	r2, r3, #1
 800ac94:	4b15      	ldr	r3, [pc, #84]	@ (800acec <processHalfDMAbuffer+0x64>)
 800ac96:	18d3      	adds	r3, r2, r3
 800ac98:	4a15      	ldr	r2, [pc, #84]	@ (800acf0 <processHalfDMAbuffer+0x68>)
 800ac9a:	2180      	movs	r1, #128	@ 0x80
 800ac9c:	0089      	lsls	r1, r1, #2
 800ac9e:	0018      	movs	r0, r3
 800aca0:	f000 fd35 	bl	800b70e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800aca4:	4b13      	ldr	r3, [pc, #76]	@ (800acf4 <processHalfDMAbuffer+0x6c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	425a      	negs	r2, r3
 800acaa:	4153      	adcs	r3, r2
 800acac:	b2da      	uxtb	r2, r3
 800acae:	4b11      	ldr	r3, [pc, #68]	@ (800acf4 <processHalfDMAbuffer+0x6c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2109      	movs	r1, #9
 800acb4:	4299      	cmp	r1, r3
 800acb6:	419b      	sbcs	r3, r3
 800acb8:	425b      	negs	r3, r3
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	480c      	ldr	r0, [pc, #48]	@ (800acf0 <processHalfDMAbuffer+0x68>)
 800acbe:	2180      	movs	r1, #128	@ 0x80
 800acc0:	f000 fb46 	bl	800b350 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800acc4:	4b0b      	ldr	r3, [pc, #44]	@ (800acf4 <processHalfDMAbuffer+0x6c>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b09      	cmp	r3, #9
 800acca:	d804      	bhi.n	800acd6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800accc:	4b09      	ldr	r3, [pc, #36]	@ (800acf4 <processHalfDMAbuffer+0x6c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	4b08      	ldr	r3, [pc, #32]	@ (800acf4 <processHalfDMAbuffer+0x6c>)
 800acd4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800acd6:	4b08      	ldr	r3, [pc, #32]	@ (800acf8 <processHalfDMAbuffer+0x70>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800ace0:	f000 f826 	bl	800ad30 <calculateSPLQ31>
    }
}
 800ace4:	46c0      	nop			@ (mov r8, r8)
 800ace6:	46bd      	mov	sp, r7
 800ace8:	b002      	add	sp, #8
 800acea:	bd80      	pop	{r7, pc}
 800acec:	200012d4 	.word	0x200012d4
 800acf0:	20001ad4 	.word	0x20001ad4
 800acf4:	20001294 	.word	0x20001294
 800acf8:	2000128e 	.word	0x2000128e

0800acfc <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800ad04:	4b07      	ldr	r3, [pc, #28]	@ (800ad24 <HAL_I2S_ErrorCallback+0x28>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d106      	bne.n	800ad1c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800ad0e:	4a06      	ldr	r2, [pc, #24]	@ (800ad28 <HAL_I2S_ErrorCallback+0x2c>)
 800ad10:	239f      	movs	r3, #159	@ 0x9f
 800ad12:	0059      	lsls	r1, r3, #1
 800ad14:	4b05      	ldr	r3, [pc, #20]	@ (800ad2c <HAL_I2S_ErrorCallback+0x30>)
 800ad16:	0018      	movs	r0, r3
 800ad18:	f001 fdd0 	bl	800c8bc <errorHandler>
  }
}
 800ad1c:	46c0      	nop			@ (mov r8, r8)
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b002      	add	sp, #8
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	20001cd8 	.word	0x20001cd8
 800ad28:	080220ac 	.word	0x080220ac
 800ad2c:	080226c0 	.word	0x080226c0

0800ad30 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800ad30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad32:	b0b3      	sub	sp, #204	@ 0xcc
 800ad34:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800ad36:	4ae2      	ldr	r2, [pc, #904]	@ (800b0c0 <calculateSPLQ31+0x390>)
 800ad38:	2338      	movs	r3, #56	@ 0x38
 800ad3a:	2030      	movs	r0, #48	@ 0x30
 800ad3c:	181b      	adds	r3, r3, r0
 800ad3e:	19d9      	adds	r1, r3, r7
 800ad40:	2334      	movs	r3, #52	@ 0x34
 800ad42:	181b      	adds	r3, r3, r0
 800ad44:	19d8      	adds	r0, r3, r7
 800ad46:	2380      	movs	r3, #128	@ 0x80
 800ad48:	f000 fc36 	bl	800b5b8 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800ad4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	da00      	bge.n	800ad54 <calculateSPLQ31+0x24>
 800ad52:	3301      	adds	r3, #1
 800ad54:	105b      	asrs	r3, r3, #1
 800ad56:	001a      	movs	r2, r3
 800ad58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	da00      	bge.n	800ad60 <calculateSPLQ31+0x30>
 800ad5e:	3301      	adds	r3, #1
 800ad60:	105b      	asrs	r3, r3, #1
 800ad62:	18d3      	adds	r3, r2, r3
 800ad64:	2188      	movs	r1, #136	@ 0x88
 800ad66:	187a      	adds	r2, r7, r1
 800ad68:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800ad6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad6c:	187b      	adds	r3, r7, r1
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	3304      	adds	r3, #4
 800ad74:	2284      	movs	r2, #132	@ 0x84
 800ad76:	18b9      	adds	r1, r7, r2
 800ad78:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800ad7a:	18bb      	adds	r3, r7, r2
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4ad1      	ldr	r2, [pc, #836]	@ (800b0c4 <calculateSPLQ31+0x394>)
 800ad80:	0019      	movs	r1, r3
 800ad82:	0010      	movs	r0, r2
 800ad84:	f000 fc58 	bl	800b638 <getPo2factor>
 800ad88:	0003      	movs	r3, r0
 800ad8a:	2280      	movs	r2, #128	@ 0x80
 800ad8c:	18ba      	adds	r2, r7, r2
 800ad8e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	2284      	movs	r2, #132	@ 0x84
 800ad94:	2130      	movs	r1, #48	@ 0x30
 800ad96:	1852      	adds	r2, r2, r1
 800ad98:	19d2      	adds	r2, r2, r7
 800ad9a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2280      	movs	r2, #128	@ 0x80
 800ada0:	1852      	adds	r2, r2, r1
 800ada2:	19d2      	adds	r2, r2, r7
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	e032      	b.n	800ae0e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800ada8:	4ac5      	ldr	r2, [pc, #788]	@ (800b0c0 <calculateSPLQ31+0x390>)
 800adaa:	2680      	movs	r6, #128	@ 0x80
 800adac:	2330      	movs	r3, #48	@ 0x30
 800adae:	18f1      	adds	r1, r6, r3
 800adb0:	19cb      	adds	r3, r1, r7
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	589a      	ldr	r2, [r3, r2]
 800adb8:	2188      	movs	r1, #136	@ 0x88
 800adba:	1879      	adds	r1, r7, r1
 800adbc:	680b      	ldr	r3, [r1, #0]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	2180      	movs	r1, #128	@ 0x80
 800adc2:	1879      	adds	r1, r7, r1
 800adc4:	680b      	ldr	r3, [r1, #0]
 800adc6:	409a      	lsls	r2, r3
 800adc8:	0011      	movs	r1, r2
 800adca:	4abf      	ldr	r2, [pc, #764]	@ (800b0c8 <calculateSPLQ31+0x398>)
 800adcc:	2084      	movs	r0, #132	@ 0x84
 800adce:	2330      	movs	r3, #48	@ 0x30
 800add0:	18c3      	adds	r3, r0, r3
 800add2:	19db      	adds	r3, r3, r7
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800adda:	2230      	movs	r2, #48	@ 0x30
 800addc:	1883      	adds	r3, r0, r2
 800adde:	19db      	adds	r3, r3, r7
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	49b8      	ldr	r1, [pc, #736]	@ (800b0c8 <calculateSPLQ31+0x398>)
 800ade6:	009a      	lsls	r2, r3, #2
 800ade8:	2300      	movs	r3, #0
 800adea:	5053      	str	r3, [r2, r1]
        count += 2;
 800adec:	2230      	movs	r2, #48	@ 0x30
 800adee:	1883      	adds	r3, r0, r2
 800adf0:	19db      	adds	r3, r3, r7
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3302      	adds	r3, #2
 800adf6:	0011      	movs	r1, r2
 800adf8:	1882      	adds	r2, r0, r2
 800adfa:	19d2      	adds	r2, r2, r7
 800adfc:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800adfe:	000a      	movs	r2, r1
 800ae00:	18b3      	adds	r3, r6, r2
 800ae02:	19db      	adds	r3, r3, r7
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3301      	adds	r3, #1
 800ae08:	18b2      	adds	r2, r6, r2
 800ae0a:	19d2      	adds	r2, r2, r7
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	2380      	movs	r3, #128	@ 0x80
 800ae10:	2630      	movs	r6, #48	@ 0x30
 800ae12:	199b      	adds	r3, r3, r6
 800ae14:	19db      	adds	r3, r3, r7
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae1a:	d9c5      	bls.n	800ada8 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800ae1c:	4bab      	ldr	r3, [pc, #684]	@ (800b0cc <calculateSPLQ31+0x39c>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	49a9      	ldr	r1, [pc, #676]	@ (800b0c8 <calculateSPLQ31+0x398>)
 800ae22:	2301      	movs	r3, #1
 800ae24:	2200      	movs	r2, #0
 800ae26:	f010 fcf7 	bl	801b818 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800ae2a:	4aa9      	ldr	r2, [pc, #676]	@ (800b0d0 <calculateSPLQ31+0x3a0>)
 800ae2c:	2338      	movs	r3, #56	@ 0x38
 800ae2e:	199b      	adds	r3, r3, r6
 800ae30:	19d9      	adds	r1, r3, r7
 800ae32:	2334      	movs	r3, #52	@ 0x34
 800ae34:	199b      	adds	r3, r3, r6
 800ae36:	19d8      	adds	r0, r3, r7
 800ae38:	237e      	movs	r3, #126	@ 0x7e
 800ae3a:	f000 fbbd 	bl	800b5b8 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800ae3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae40:	2380      	movs	r3, #128	@ 0x80
 800ae42:	061b      	lsls	r3, r3, #24
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d101      	bne.n	800ae4c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800ae48:	4b9e      	ldr	r3, [pc, #632]	@ (800b0c4 <calculateSPLQ31+0x394>)
 800ae4a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800ae4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ae4e:	2380      	movs	r3, #128	@ 0x80
 800ae50:	061b      	lsls	r3, r3, #24
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d101      	bne.n	800ae5a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800ae56:	4b9b      	ldr	r3, [pc, #620]	@ (800b0c4 <calculateSPLQ31+0x394>)
 800ae58:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800ae5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae5c:	17da      	asrs	r2, r3, #31
 800ae5e:	189b      	adds	r3, r3, r2
 800ae60:	4053      	eors	r3, r2
 800ae62:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800ae64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae66:	17da      	asrs	r2, r3, #31
 800ae68:	189b      	adds	r3, r3, r2
 800ae6a:	4053      	eors	r3, r2
 800ae6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800ae6e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae72:	429a      	cmp	r2, r3
 800ae74:	dd01      	ble.n	800ae7a <calculateSPLQ31+0x14a>
    {
        max = min;
 800ae76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae78:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800ae7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800ae80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae82:	4a90      	ldr	r2, [pc, #576]	@ (800b0c4 <calculateSPLQ31+0x394>)
 800ae84:	0019      	movs	r1, r3
 800ae86:	0010      	movs	r0, r2
 800ae88:	f000 fbd6 	bl	800b638 <getPo2factor>
 800ae8c:	0003      	movs	r3, r0
 800ae8e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800ae90:	2302      	movs	r3, #2
 800ae92:	22ac      	movs	r2, #172	@ 0xac
 800ae94:	18ba      	adds	r2, r7, r2
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	e012      	b.n	800aec0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800ae9a:	4a8b      	ldr	r2, [pc, #556]	@ (800b0c8 <calculateSPLQ31+0x398>)
 800ae9c:	20ac      	movs	r0, #172	@ 0xac
 800ae9e:	183b      	adds	r3, r7, r0
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	589a      	ldr	r2, [r3, r2]
 800aea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aea8:	409a      	lsls	r2, r3
 800aeaa:	0011      	movs	r1, r2
 800aeac:	4a86      	ldr	r2, [pc, #536]	@ (800b0c8 <calculateSPLQ31+0x398>)
 800aeae:	183b      	adds	r3, r7, r0
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800aeb6:	183b      	adds	r3, r7, r0
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3301      	adds	r3, #1
 800aebc:	183a      	adds	r2, r7, r0
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	23ac      	movs	r3, #172	@ 0xac
 800aec2:	18fb      	adds	r3, r7, r3
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b7f      	cmp	r3, #127	@ 0x7f
 800aec8:	d9e7      	bls.n	800ae9a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800aeca:	4b7d      	ldr	r3, [pc, #500]	@ (800b0c0 <calculateSPLQ31+0x390>)
 800aecc:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800aece:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800aed0:	4b7d      	ldr	r3, [pc, #500]	@ (800b0c8 <calculateSPLQ31+0x398>)
 800aed2:	2240      	movs	r2, #64	@ 0x40
 800aed4:	0018      	movs	r0, r3
 800aed6:	f011 fa49 	bl	801c36c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800aeda:	2330      	movs	r3, #48	@ 0x30
 800aedc:	18fb      	adds	r3, r7, r3
 800aede:	0018      	movs	r0, r3
 800aee0:	2330      	movs	r3, #48	@ 0x30
 800aee2:	001a      	movs	r2, r3
 800aee4:	2100      	movs	r1, #0
 800aee6:	f012 ff65 	bl	801ddb4 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800aeea:	2200      	movs	r2, #0
 800aeec:	2300      	movs	r3, #0
 800aeee:	21a0      	movs	r1, #160	@ 0xa0
 800aef0:	1879      	adds	r1, r7, r1
 800aef2:	600a      	str	r2, [r1, #0]
 800aef4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800aef6:	2301      	movs	r3, #1
 800aef8:	229c      	movs	r2, #156	@ 0x9c
 800aefa:	18ba      	adds	r2, r7, r2
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	e05b      	b.n	800afb8 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800af00:	269c      	movs	r6, #156	@ 0x9c
 800af02:	19bb      	adds	r3, r7, r6
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	009a      	lsls	r2, r3, #2
 800af08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af0a:	189b      	adds	r3, r3, r2
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	17db      	asrs	r3, r3, #31
 800af12:	617b      	str	r3, [r7, #20]
 800af14:	4b6f      	ldr	r3, [pc, #444]	@ (800b0d4 <calculateSPLQ31+0x3a4>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	19bb      	adds	r3, r7, r6
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	18d3      	adds	r3, r2, r3
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	60bb      	str	r3, [r7, #8]
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6938      	ldr	r0, [r7, #16]
 800af2e:	6979      	ldr	r1, [r7, #20]
 800af30:	f7f5 fb46 	bl	80005c0 <__aeabi_lmul>
 800af34:	0002      	movs	r2, r0
 800af36:	000b      	movs	r3, r1
 800af38:	0010      	movs	r0, r2
 800af3a:	0019      	movs	r1, r3
 800af3c:	23a0      	movs	r3, #160	@ 0xa0
 800af3e:	18fa      	adds	r2, r7, r3
 800af40:	6853      	ldr	r3, [r2, #4]
 800af42:	6812      	ldr	r2, [r2, #0]
 800af44:	1812      	adds	r2, r2, r0
 800af46:	414b      	adcs	r3, r1
 800af48:	21a0      	movs	r1, #160	@ 0xa0
 800af4a:	1879      	adds	r1, r7, r1
 800af4c:	600a      	str	r2, [r1, #0]
 800af4e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800af50:	4b61      	ldr	r3, [pc, #388]	@ (800b0d8 <calculateSPLQ31+0x3a8>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	19bb      	adds	r3, r7, r6
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	18d3      	adds	r3, r2, r3
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b06      	cmp	r3, #6
 800af5e:	d025      	beq.n	800afac <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800af60:	4b5d      	ldr	r3, [pc, #372]	@ (800b0d8 <calculateSPLQ31+0x3a8>)
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	19bb      	adds	r3, r7, r6
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	18d3      	adds	r3, r2, r3
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2230      	movs	r2, #48	@ 0x30
 800af6e:	18ba      	adds	r2, r7, r2
 800af70:	00db      	lsls	r3, r3, #3
 800af72:	18d3      	adds	r3, r2, r3
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	6859      	ldr	r1, [r3, #4]
 800af78:	19bb      	adds	r3, r7, r6
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	009a      	lsls	r2, r3, #2
 800af7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af80:	189b      	adds	r3, r3, r2
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	603b      	str	r3, [r7, #0]
 800af86:	17db      	asrs	r3, r3, #31
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	4b53      	ldr	r3, [pc, #332]	@ (800b0d8 <calculateSPLQ31+0x3a8>)
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	19be      	adds	r6, r7, r6
 800af90:	6833      	ldr	r3, [r6, #0]
 800af92:	18d3      	adds	r3, r2, r3
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	001e      	movs	r6, r3
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	1880      	adds	r0, r0, r2
 800af9e:	4159      	adcs	r1, r3
 800afa0:	2330      	movs	r3, #48	@ 0x30
 800afa2:	18fa      	adds	r2, r7, r3
 800afa4:	00f3      	lsls	r3, r6, #3
 800afa6:	18d3      	adds	r3, r2, r3
 800afa8:	6018      	str	r0, [r3, #0]
 800afaa:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800afac:	229c      	movs	r2, #156	@ 0x9c
 800afae:	18bb      	adds	r3, r7, r2
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	18ba      	adds	r2, r7, r2
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	239c      	movs	r3, #156	@ 0x9c
 800afba:	18fb      	adds	r3, r7, r3
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b3f      	cmp	r3, #63	@ 0x3f
 800afc0:	d99e      	bls.n	800af00 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800afc2:	2380      	movs	r3, #128	@ 0x80
 800afc4:	18fb      	adds	r3, r7, r3
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	001a      	movs	r2, r3
 800afcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	18d3      	adds	r3, r2, r3
 800afd2:	3b22      	subs	r3, #34	@ 0x22
 800afd4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800afd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afd8:	17da      	asrs	r2, r3, #31
 800afda:	189b      	adds	r3, r3, r2
 800afdc:	4053      	eors	r3, r2
 800afde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800afe0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	da62      	bge.n	800b0ac <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800afe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afe8:	3b20      	subs	r3, #32
 800afea:	2b00      	cmp	r3, #0
 800afec:	db05      	blt.n	800affa <calculateSPLQ31+0x2ca>
 800afee:	22a0      	movs	r2, #160	@ 0xa0
 800aff0:	18ba      	adds	r2, r7, r2
 800aff2:	6812      	ldr	r2, [r2, #0]
 800aff4:	409a      	lsls	r2, r3
 800aff6:	627a      	str	r2, [r7, #36]	@ 0x24
 800aff8:	e010      	b.n	800b01c <calculateSPLQ31+0x2ec>
 800affa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800affc:	2220      	movs	r2, #32
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	22a0      	movs	r2, #160	@ 0xa0
 800b002:	18ba      	adds	r2, r7, r2
 800b004:	6812      	ldr	r2, [r2, #0]
 800b006:	40da      	lsrs	r2, r3
 800b008:	0013      	movs	r3, r2
 800b00a:	22a4      	movs	r2, #164	@ 0xa4
 800b00c:	18ba      	adds	r2, r7, r2
 800b00e:	6811      	ldr	r1, [r2, #0]
 800b010:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b012:	4091      	lsls	r1, r2
 800b014:	6279      	str	r1, [r7, #36]	@ 0x24
 800b016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b018:	431a      	orrs	r2, r3
 800b01a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b01c:	21a0      	movs	r1, #160	@ 0xa0
 800b01e:	187b      	adds	r3, r7, r1
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b024:	409a      	lsls	r2, r3
 800b026:	623a      	str	r2, [r7, #32]
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800b02c:	187a      	adds	r2, r7, r1
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b032:	2300      	movs	r3, #0
 800b034:	2298      	movs	r2, #152	@ 0x98
 800b036:	18ba      	adds	r2, r7, r2
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	e031      	b.n	800b0a0 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800b03c:	2330      	movs	r3, #48	@ 0x30
 800b03e:	18fa      	adds	r2, r7, r3
 800b040:	2398      	movs	r3, #152	@ 0x98
 800b042:	18fb      	adds	r3, r7, r3
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	00db      	lsls	r3, r3, #3
 800b048:	18d3      	adds	r3, r2, r3
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b050:	3920      	subs	r1, #32
 800b052:	2900      	cmp	r1, #0
 800b054:	db03      	blt.n	800b05e <calculateSPLQ31+0x32e>
 800b056:	0010      	movs	r0, r2
 800b058:	4088      	lsls	r0, r1
 800b05a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b05c:	e00c      	b.n	800b078 <calculateSPLQ31+0x348>
 800b05e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b060:	2020      	movs	r0, #32
 800b062:	1a41      	subs	r1, r0, r1
 800b064:	0010      	movs	r0, r2
 800b066:	40c8      	lsrs	r0, r1
 800b068:	0001      	movs	r1, r0
 800b06a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b06c:	001c      	movs	r4, r3
 800b06e:	4084      	lsls	r4, r0
 800b070:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800b072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b074:	4308      	orrs	r0, r1
 800b076:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b078:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b07a:	0013      	movs	r3, r2
 800b07c:	408b      	lsls	r3, r1
 800b07e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b080:	2330      	movs	r3, #48	@ 0x30
 800b082:	18fa      	adds	r2, r7, r3
 800b084:	2098      	movs	r0, #152	@ 0x98
 800b086:	183b      	adds	r3, r7, r0
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	18d3      	adds	r3, r2, r3
 800b08e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b092:	6019      	str	r1, [r3, #0]
 800b094:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b096:	183b      	adds	r3, r7, r0
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3301      	adds	r3, #1
 800b09c:	183a      	adds	r2, r7, r0
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	2398      	movs	r3, #152	@ 0x98
 800b0a2:	18fb      	adds	r3, r7, r3
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b05      	cmp	r3, #5
 800b0a8:	d9c8      	bls.n	800b03c <calculateSPLQ31+0x30c>
 800b0aa:	e06b      	b.n	800b184 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800b0ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ae:	3b20      	subs	r3, #32
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	db13      	blt.n	800b0dc <calculateSPLQ31+0x3ac>
 800b0b4:	22a4      	movs	r2, #164	@ 0xa4
 800b0b6:	18ba      	adds	r2, r7, r2
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	40da      	lsrs	r2, r3
 800b0bc:	61ba      	str	r2, [r7, #24]
 800b0be:	e01e      	b.n	800b0fe <calculateSPLQ31+0x3ce>
 800b0c0:	20001ad4 	.word	0x20001ad4
 800b0c4:	7fffffff 	.word	0x7fffffff
 800b0c8:	20001d20 	.word	0x20001d20
 800b0cc:	200000b0 	.word	0x200000b0
 800b0d0:	20001d28 	.word	0x20001d28
 800b0d4:	200000b4 	.word	0x200000b4
 800b0d8:	200000c0 	.word	0x200000c0
 800b0dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0de:	2220      	movs	r2, #32
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	22a4      	movs	r2, #164	@ 0xa4
 800b0e4:	18ba      	adds	r2, r7, r2
 800b0e6:	6812      	ldr	r2, [r2, #0]
 800b0e8:	409a      	lsls	r2, r3
 800b0ea:	0013      	movs	r3, r2
 800b0ec:	22a0      	movs	r2, #160	@ 0xa0
 800b0ee:	18ba      	adds	r2, r7, r2
 800b0f0:	6811      	ldr	r1, [r2, #0]
 800b0f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0f4:	40d1      	lsrs	r1, r2
 800b0f6:	61b9      	str	r1, [r7, #24]
 800b0f8:	69ba      	ldr	r2, [r7, #24]
 800b0fa:	431a      	orrs	r2, r3
 800b0fc:	61ba      	str	r2, [r7, #24]
 800b0fe:	23a4      	movs	r3, #164	@ 0xa4
 800b100:	18fb      	adds	r3, r7, r3
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b106:	40da      	lsrs	r2, r3
 800b108:	61fa      	str	r2, [r7, #28]
 800b10a:	69ba      	ldr	r2, [r7, #24]
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	21a0      	movs	r1, #160	@ 0xa0
 800b110:	1879      	adds	r1, r7, r1
 800b112:	600a      	str	r2, [r1, #0]
 800b114:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b116:	2300      	movs	r3, #0
 800b118:	2294      	movs	r2, #148	@ 0x94
 800b11a:	18ba      	adds	r2, r7, r2
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	e02c      	b.n	800b17a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800b120:	2330      	movs	r3, #48	@ 0x30
 800b122:	18fa      	adds	r2, r7, r3
 800b124:	2394      	movs	r3, #148	@ 0x94
 800b126:	18fb      	adds	r3, r7, r3
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	18d3      	adds	r3, r2, r3
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b134:	3920      	subs	r1, #32
 800b136:	2900      	cmp	r1, #0
 800b138:	db03      	blt.n	800b142 <calculateSPLQ31+0x412>
 800b13a:	0018      	movs	r0, r3
 800b13c:	40c8      	lsrs	r0, r1
 800b13e:	0004      	movs	r4, r0
 800b140:	e00a      	b.n	800b158 <calculateSPLQ31+0x428>
 800b142:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b144:	2020      	movs	r0, #32
 800b146:	1a41      	subs	r1, r0, r1
 800b148:	0018      	movs	r0, r3
 800b14a:	4088      	lsls	r0, r1
 800b14c:	0001      	movs	r1, r0
 800b14e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b150:	0016      	movs	r6, r2
 800b152:	40c6      	lsrs	r6, r0
 800b154:	0034      	movs	r4, r6
 800b156:	430c      	orrs	r4, r1
 800b158:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b15a:	40cb      	lsrs	r3, r1
 800b15c:	001d      	movs	r5, r3
 800b15e:	2330      	movs	r3, #48	@ 0x30
 800b160:	18fa      	adds	r2, r7, r3
 800b162:	2194      	movs	r1, #148	@ 0x94
 800b164:	187b      	adds	r3, r7, r1
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	18d3      	adds	r3, r2, r3
 800b16c:	601c      	str	r4, [r3, #0]
 800b16e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b170:	187b      	adds	r3, r7, r1
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	187a      	adds	r2, r7, r1
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	2394      	movs	r3, #148	@ 0x94
 800b17c:	18fb      	adds	r3, r7, r3
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b05      	cmp	r3, #5
 800b182:	d9cd      	bls.n	800b120 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800b184:	230f      	movs	r3, #15
 800b186:	425d      	negs	r5, r3
 800b188:	2305      	movs	r3, #5
 800b18a:	425e      	negs	r6, r3
 800b18c:	4b4a      	ldr	r3, [pc, #296]	@ (800b2b8 <calculateSPLQ31+0x588>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	4b4a      	ldr	r3, [pc, #296]	@ (800b2bc <calculateSPLQ31+0x58c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	21a0      	movs	r1, #160	@ 0xa0
 800b19a:	1879      	adds	r1, r7, r1
 800b19c:	6808      	ldr	r0, [r1, #0]
 800b19e:	6849      	ldr	r1, [r1, #4]
 800b1a0:	4c47      	ldr	r4, [pc, #284]	@ (800b2c0 <calculateSPLQ31+0x590>)
 800b1a2:	9403      	str	r4, [sp, #12]
 800b1a4:	4c47      	ldr	r4, [pc, #284]	@ (800b2c4 <calculateSPLQ31+0x594>)
 800b1a6:	9402      	str	r4, [sp, #8]
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	9200      	str	r2, [sp, #0]
 800b1ac:	0033      	movs	r3, r6
 800b1ae:	002a      	movs	r2, r5
 800b1b0:	f000 fa86 	bl	800b6c0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	2290      	movs	r2, #144	@ 0x90
 800b1b8:	18ba      	adds	r2, r7, r2
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	e026      	b.n	800b20c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800b1be:	2330      	movs	r3, #48	@ 0x30
 800b1c0:	18fa      	adds	r2, r7, r3
 800b1c2:	2490      	movs	r4, #144	@ 0x90
 800b1c4:	193b      	adds	r3, r7, r4
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	18d3      	adds	r3, r2, r3
 800b1cc:	6818      	ldr	r0, [r3, #0]
 800b1ce:	6859      	ldr	r1, [r3, #4]
 800b1d0:	230f      	movs	r3, #15
 800b1d2:	425d      	negs	r5, r3
 800b1d4:	2305      	movs	r3, #5
 800b1d6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800b1d8:	193b      	adds	r3, r7, r4
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	009a      	lsls	r2, r3, #2
 800b1de:	4b3a      	ldr	r3, [pc, #232]	@ (800b2c8 <calculateSPLQ31+0x598>)
 800b1e0:	18d3      	adds	r3, r2, r3
 800b1e2:	193a      	adds	r2, r7, r4
 800b1e4:	6812      	ldr	r2, [r2, #0]
 800b1e6:	0094      	lsls	r4, r2, #2
 800b1e8:	4a38      	ldr	r2, [pc, #224]	@ (800b2cc <calculateSPLQ31+0x59c>)
 800b1ea:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800b1ec:	9203      	str	r2, [sp, #12]
 800b1ee:	9302      	str	r3, [sp, #8]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9301      	str	r3, [sp, #4]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	0033      	movs	r3, r6
 800b1fa:	002a      	movs	r2, r5
 800b1fc:	f000 fa60 	bl	800b6c0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b200:	2490      	movs	r4, #144	@ 0x90
 800b202:	193b      	adds	r3, r7, r4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3301      	adds	r3, #1
 800b208:	193a      	adds	r2, r7, r4
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	2390      	movs	r3, #144	@ 0x90
 800b20e:	18fb      	adds	r3, r7, r3
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b05      	cmp	r3, #5
 800b214:	d9d3      	bls.n	800b1be <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800b216:	4b2b      	ldr	r3, [pc, #172]	@ (800b2c4 <calculateSPLQ31+0x594>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d0 <calculateSPLQ31+0x5a0>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	18d2      	adds	r2, r2, r3
 800b220:	4b2b      	ldr	r3, [pc, #172]	@ (800b2d0 <calculateSPLQ31+0x5a0>)
 800b222:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800b224:	4b26      	ldr	r3, [pc, #152]	@ (800b2c0 <calculateSPLQ31+0x590>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	4b2a      	ldr	r3, [pc, #168]	@ (800b2d4 <calculateSPLQ31+0x5a4>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	18d2      	adds	r2, r2, r3
 800b22e:	4b29      	ldr	r3, [pc, #164]	@ (800b2d4 <calculateSPLQ31+0x5a4>)
 800b230:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b232:	2300      	movs	r3, #0
 800b234:	228c      	movs	r2, #140	@ 0x8c
 800b236:	18ba      	adds	r2, r7, r2
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	e025      	b.n	800b288 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800b23c:	4b22      	ldr	r3, [pc, #136]	@ (800b2c8 <calculateSPLQ31+0x598>)
 800b23e:	208c      	movs	r0, #140	@ 0x8c
 800b240:	183a      	adds	r2, r7, r0
 800b242:	6812      	ldr	r2, [r2, #0]
 800b244:	0092      	lsls	r2, r2, #2
 800b246:	58d2      	ldr	r2, [r2, r3]
 800b248:	4b23      	ldr	r3, [pc, #140]	@ (800b2d8 <calculateSPLQ31+0x5a8>)
 800b24a:	1839      	adds	r1, r7, r0
 800b24c:	6809      	ldr	r1, [r1, #0]
 800b24e:	0089      	lsls	r1, r1, #2
 800b250:	58cb      	ldr	r3, [r1, r3]
 800b252:	18d1      	adds	r1, r2, r3
 800b254:	4b20      	ldr	r3, [pc, #128]	@ (800b2d8 <calculateSPLQ31+0x5a8>)
 800b256:	183a      	adds	r2, r7, r0
 800b258:	6812      	ldr	r2, [r2, #0]
 800b25a:	0092      	lsls	r2, r2, #2
 800b25c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800b25e:	4b1b      	ldr	r3, [pc, #108]	@ (800b2cc <calculateSPLQ31+0x59c>)
 800b260:	183a      	adds	r2, r7, r0
 800b262:	6812      	ldr	r2, [r2, #0]
 800b264:	0092      	lsls	r2, r2, #2
 800b266:	58d2      	ldr	r2, [r2, r3]
 800b268:	4b1c      	ldr	r3, [pc, #112]	@ (800b2dc <calculateSPLQ31+0x5ac>)
 800b26a:	1839      	adds	r1, r7, r0
 800b26c:	6809      	ldr	r1, [r1, #0]
 800b26e:	0089      	lsls	r1, r1, #2
 800b270:	58cb      	ldr	r3, [r1, r3]
 800b272:	18d1      	adds	r1, r2, r3
 800b274:	4b19      	ldr	r3, [pc, #100]	@ (800b2dc <calculateSPLQ31+0x5ac>)
 800b276:	183a      	adds	r2, r7, r0
 800b278:	6812      	ldr	r2, [r2, #0]
 800b27a:	0092      	lsls	r2, r2, #2
 800b27c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b27e:	183b      	adds	r3, r7, r0
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	183a      	adds	r2, r7, r0
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	238c      	movs	r3, #140	@ 0x8c
 800b28a:	18fb      	adds	r3, r7, r3
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d9d4      	bls.n	800b23c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800b292:	4b13      	ldr	r3, [pc, #76]	@ (800b2e0 <calculateSPLQ31+0x5b0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	4b11      	ldr	r3, [pc, #68]	@ (800b2e0 <calculateSPLQ31+0x5b0>)
 800b29a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800b29c:	4b10      	ldr	r3, [pc, #64]	@ (800b2e0 <calculateSPLQ31+0x5b0>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b0f      	cmp	r3, #15
 800b2a2:	d905      	bls.n	800b2b0 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800b2a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e4 <calculateSPLQ31+0x5b4>)
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b2aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e8 <calculateSPLQ31+0x5b8>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	701a      	strb	r2, [r3, #0]
    }
}
 800b2b0:	46c0      	nop			@ (mov r8, r8)
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	b02f      	add	sp, #188	@ 0xbc
 800b2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b8:	200000b8 	.word	0x200000b8
 800b2bc:	200000bc 	.word	0x200000bc
 800b2c0:	200012a0 	.word	0x200012a0
 800b2c4:	2000129c 	.word	0x2000129c
 800b2c8:	200012a4 	.word	0x200012a4
 800b2cc:	200012bc 	.word	0x200012bc
 800b2d0:	20001ce4 	.word	0x20001ce4
 800b2d4:	20001ce8 	.word	0x20001ce8
 800b2d8:	20001cec 	.word	0x20001cec
 800b2dc:	20001d04 	.word	0x20001d04
 800b2e0:	20001d1c 	.word	0x20001d1c
 800b2e4:	20001290 	.word	0x20001290
 800b2e8:	2000128e 	.word	0x2000128e

0800b2ec <resetSPLstate>:

static void resetSPLstate(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800b2f2:	4b11      	ldr	r3, [pc, #68]	@ (800b338 <resetSPLstate+0x4c>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800b2f8:	4b10      	ldr	r3, [pc, #64]	@ (800b33c <resetSPLstate+0x50>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800b2fe:	4b10      	ldr	r3, [pc, #64]	@ (800b340 <resetSPLstate+0x54>)
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b304:	2300      	movs	r3, #0
 800b306:	607b      	str	r3, [r7, #4]
 800b308:	e00c      	b.n	800b324 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800b30a:	4b0e      	ldr	r3, [pc, #56]	@ (800b344 <resetSPLstate+0x58>)
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	2100      	movs	r1, #0
 800b312:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800b314:	4b0c      	ldr	r3, [pc, #48]	@ (800b348 <resetSPLstate+0x5c>)
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	0092      	lsls	r2, r2, #2
 800b31a:	2100      	movs	r1, #0
 800b31c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3301      	adds	r3, #1
 800b322:	607b      	str	r3, [r7, #4]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b05      	cmp	r3, #5
 800b328:	d9ef      	bls.n	800b30a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800b32a:	4b08      	ldr	r3, [pc, #32]	@ (800b34c <resetSPLstate+0x60>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
}
 800b330:	46c0      	nop			@ (mov r8, r8)
 800b332:	46bd      	mov	sp, r7
 800b334:	b002      	add	sp, #8
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20001ce4 	.word	0x20001ce4
 800b33c:	20001ce8 	.word	0x20001ce8
 800b340:	20001d1c 	.word	0x20001d1c
 800b344:	20001cec 	.word	0x20001cec
 800b348:	20001d04 	.word	0x20001d04
 800b34c:	20001290 	.word	0x20001290

0800b350 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800b350:	b5b0      	push	{r4, r5, r7, lr}
 800b352:	b090      	sub	sp, #64	@ 0x40
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	0019      	movs	r1, r3
 800b35c:	1dfb      	adds	r3, r7, #7
 800b35e:	701a      	strb	r2, [r3, #0]
 800b360:	1dbb      	adds	r3, r7, #6
 800b362:	1c0a      	adds	r2, r1, #0
 800b364:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800b366:	1dfb      	adds	r3, r7, #7
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800b36e:	4b3b      	ldr	r3, [pc, #236]	@ (800b45c <getFilteredMaxAmplitudeQ31+0x10c>)
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800b374:	4b3a      	ldr	r3, [pc, #232]	@ (800b460 <getFilteredMaxAmplitudeQ31+0x110>)
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800b382:	2305      	movs	r3, #5
 800b384:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800b386:	2300      	movs	r3, #0
 800b388:	637b      	str	r3, [r7, #52]	@ 0x34
 800b38a:	e040      	b.n	800b40e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800b38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	18d3      	adds	r3, r2, r3
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b398:	409a      	lsls	r2, r3
 800b39a:	0013      	movs	r3, r2
 800b39c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800b39e:	4b30      	ldr	r3, [pc, #192]	@ (800b460 <getFilteredMaxAmplitudeQ31+0x110>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	425a      	negs	r2, r3
 800b3a4:	4b2e      	ldr	r3, [pc, #184]	@ (800b460 <getFilteredMaxAmplitudeQ31+0x110>)
 800b3a6:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800b3a8:	2418      	movs	r4, #24
 800b3aa:	193a      	adds	r2, r7, r4
 800b3ac:	492c      	ldr	r1, [pc, #176]	@ (800b460 <getFilteredMaxAmplitudeQ31+0x110>)
 800b3ae:	231c      	movs	r3, #28
 800b3b0:	18f8      	adds	r0, r7, r3
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	f011 f832 	bl	801c41c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800b3b8:	2514      	movs	r5, #20
 800b3ba:	197a      	adds	r2, r7, r5
 800b3bc:	1939      	adds	r1, r7, r4
 800b3be:	4829      	ldr	r0, [pc, #164]	@ (800b464 <getFilteredMaxAmplitudeQ31+0x114>)
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	f010 fff9 	bl	801c3b8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800b3c6:	2410      	movs	r4, #16
 800b3c8:	193a      	adds	r2, r7, r4
 800b3ca:	4924      	ldr	r1, [pc, #144]	@ (800b45c <getFilteredMaxAmplitudeQ31+0x10c>)
 800b3cc:	4826      	ldr	r0, [pc, #152]	@ (800b468 <getFilteredMaxAmplitudeQ31+0x118>)
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	f010 fff2 	bl	801c3b8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800b3d4:	4a21      	ldr	r2, [pc, #132]	@ (800b45c <getFilteredMaxAmplitudeQ31+0x10c>)
 800b3d6:	1939      	adds	r1, r7, r4
 800b3d8:	1978      	adds	r0, r7, r5
 800b3da:	2301      	movs	r3, #1
 800b3dc:	f011 f81e 	bl	801c41c <arm_add_q31>

        lastData = fx;
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	4b1f      	ldr	r3, [pc, #124]	@ (800b460 <getFilteredMaxAmplitudeQ31+0x110>)
 800b3e4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800b3e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b45c <getFilteredMaxAmplitudeQ31+0x10c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	da03      	bge.n	800b3f8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800b3f0:	4b1a      	ldr	r3, [pc, #104]	@ (800b45c <getFilteredMaxAmplitudeQ31+0x10c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f6:	e007      	b.n	800b408 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800b3f8:	4b18      	ldr	r3, [pc, #96]	@ (800b45c <getFilteredMaxAmplitudeQ31+0x10c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3fe:	429a      	cmp	r2, r3
 800b400:	dd02      	ble.n	800b408 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800b402:	4b16      	ldr	r3, [pc, #88]	@ (800b45c <getFilteredMaxAmplitudeQ31+0x10c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800b408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b40a:	3301      	adds	r3, #1
 800b40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b40e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	429a      	cmp	r2, r3
 800b414:	d3ba      	bcc.n	800b38c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	17da      	asrs	r2, r3, #31
 800b41a:	189b      	adds	r3, r3, r2
 800b41c:	4053      	eors	r3, r2
 800b41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800b420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b422:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800b424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b428:	4293      	cmp	r3, r2
 800b42a:	d200      	bcs.n	800b42e <getFilteredMaxAmplitudeQ31+0xde>
 800b42c:	0013      	movs	r3, r2
 800b42e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800b430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	40da      	lsrs	r2, r3
 800b436:	0013      	movs	r3, r2
 800b438:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800b43a:	1dbb      	adds	r3, r7, #6
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d007      	beq.n	800b452 <getFilteredMaxAmplitudeQ31+0x102>
 800b442:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <getFilteredMaxAmplitudeQ31+0x11c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6a3a      	ldr	r2, [r7, #32]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d902      	bls.n	800b452 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800b44c:	4b07      	ldr	r3, [pc, #28]	@ (800b46c <getFilteredMaxAmplitudeQ31+0x11c>)
 800b44e:	6a3a      	ldr	r2, [r7, #32]
 800b450:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800b452:	6a3b      	ldr	r3, [r7, #32]
}
 800b454:	0018      	movs	r0, r3
 800b456:	46bd      	mov	sp, r7
 800b458:	b010      	add	sp, #64	@ 0x40
 800b45a:	bdb0      	pop	{r4, r5, r7, pc}
 800b45c:	20002120 	.word	0x20002120
 800b460:	20002124 	.word	0x20002124
 800b464:	080226b8 	.word	0x080226b8
 800b468:	080226bc 	.word	0x080226bc
 800b46c:	20001298 	.word	0x20001298

0800b470 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800b47c:	4913      	ldr	r1, [pc, #76]	@ (800b4cc <floatToIntAndFrac2dp+0x5c>)
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7f5 fd8e 	bl	8000fa0 <__aeabi_fmul>
 800b484:	1c03      	adds	r3, r0, #0
 800b486:	1c18      	adds	r0, r3, #0
 800b488:	f015 fb9e 	bl	8020bc8 <roundf>
 800b48c:	1c03      	adds	r3, r0, #0
 800b48e:	1c18      	adds	r0, r3, #0
 800b490:	f7f5 f8c4 	bl	800061c <__aeabi_f2uiz>
 800b494:	0003      	movs	r3, r0
 800b496:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2164      	movs	r1, #100	@ 0x64
 800b49c:	0018      	movs	r0, r3
 800b49e:	f7f4 fe81 	bl	80001a4 <__udivsi3>
 800b4a2:	0003      	movs	r3, r0
 800b4a4:	001a      	movs	r2, r3
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2164      	movs	r1, #100	@ 0x64
 800b4b6:	434b      	muls	r3, r1
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	701a      	strb	r2, [r3, #0]
}
 800b4c2:	46c0      	nop			@ (mov r8, r8)
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	b006      	add	sp, #24
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	46c0      	nop			@ (mov r8, r8)
 800b4cc:	42c80000 	.word	0x42c80000

0800b4d0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800b4dc:	4914      	ldr	r1, [pc, #80]	@ (800b530 <floatToIntAndFrac1dp+0x60>)
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7f5 fd5e 	bl	8000fa0 <__aeabi_fmul>
 800b4e4:	1c03      	adds	r3, r0, #0
 800b4e6:	1c18      	adds	r0, r3, #0
 800b4e8:	f015 fb6e 	bl	8020bc8 <roundf>
 800b4ec:	1c03      	adds	r3, r0, #0
 800b4ee:	1c18      	adds	r0, r3, #0
 800b4f0:	f7f5 f894 	bl	800061c <__aeabi_f2uiz>
 800b4f4:	0003      	movs	r3, r0
 800b4f6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	210a      	movs	r1, #10
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	f7f4 fe51 	bl	80001a4 <__udivsi3>
 800b502:	0003      	movs	r3, r0
 800b504:	001a      	movs	r2, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	1c19      	adds	r1, r3, #0
 800b516:	0089      	lsls	r1, r1, #2
 800b518:	18cb      	adds	r3, r1, r3
 800b51a:	18db      	adds	r3, r3, r3
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	b2da      	uxtb	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	701a      	strb	r2, [r3, #0]
}
 800b526:	46c0      	nop			@ (mov r8, r8)
 800b528:	46bd      	mov	sp, r7
 800b52a:	b006      	add	sp, #24
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	46c0      	nop			@ (mov r8, r8)
 800b530:	41200000 	.word	0x41200000

0800b534 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7f6 f844 	bl	80015d0 <__aeabi_i2f>
 800b548:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800b54a:	6838      	ldr	r0, [r7, #0]
 800b54c:	f7f6 f840 	bl	80015d0 <__aeabi_i2f>
 800b550:	1c03      	adds	r3, r0, #0
 800b552:	4918      	ldr	r1, [pc, #96]	@ (800b5b4 <sumToIntAverage+0x80>)
 800b554:	1c18      	adds	r0, r3, #0
 800b556:	f7f5 fb3d 	bl	8000bd4 <__aeabi_fdiv>
 800b55a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800b55c:	1c19      	adds	r1, r3, #0
 800b55e:	1c20      	adds	r0, r4, #0
 800b560:	f7f5 f9ae 	bl	80008c0 <__aeabi_fadd>
 800b564:	1c03      	adds	r3, r0, #0
 800b566:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800b568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b56a:	f7f6 f87d 	bl	8001668 <__aeabi_ui2f>
 800b56e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800b570:	1c19      	adds	r1, r3, #0
 800b572:	1c20      	adds	r0, r4, #0
 800b574:	f7f5 fb2e 	bl	8000bd4 <__aeabi_fdiv>
 800b578:	1c03      	adds	r3, r0, #0
 800b57a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	2310      	movs	r3, #16
 800b584:	18f9      	adds	r1, r7, r3
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	1c18      	adds	r0, r3, #0
 800b58a:	f7ff ffa1 	bl	800b4d0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2bff      	cmp	r3, #255	@ 0xff
 800b592:	d906      	bls.n	800b5a2 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	22ff      	movs	r2, #255	@ 0xff
 800b598:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2209      	movs	r2, #9
 800b59e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800b5a0:	e003      	b.n	800b5aa <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	701a      	strb	r2, [r3, #0]
}
 800b5aa:	46c0      	nop			@ (mov r8, r8)
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	b007      	add	sp, #28
 800b5b0:	bd90      	pop	{r4, r7, pc}
 800b5b2:	46c0      	nop			@ (mov r8, r8)
 800b5b4:	41200000 	.word	0x41200000

0800b5b8 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2280      	movs	r2, #128	@ 0x80
 800b5ca:	0612      	lsls	r2, r2, #24
 800b5cc:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4a18      	ldr	r2, [pc, #96]	@ (800b634 <findMinMax+0x7c>)
 800b5d2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	e022      	b.n	800b620 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	18d3      	adds	r3, r2, r3
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	da06      	bge.n	800b5fa <findMinMax+0x42>
        {
            min[0] = array[i];
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	18d3      	adds	r3, r2, r3
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	18d3      	adds	r3, r2, r3
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	dd06      	ble.n	800b61a <findMinMax+0x62>
        {
            max[0] = array[i];
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	18d3      	adds	r3, r2, r3
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	3301      	adds	r3, #1
 800b61e:	617b      	str	r3, [r7, #20]
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d3d8      	bcc.n	800b5da <findMinMax+0x22>
        }
    }
}
 800b628:	46c0      	nop			@ (mov r8, r8)
 800b62a:	46c0      	nop			@ (mov r8, r8)
 800b62c:	46bd      	mov	sp, r7
 800b62e:	b006      	add	sp, #24
 800b630:	bd80      	pop	{r7, pc}
 800b632:	46c0      	nop			@ (mov r8, r8)
 800b634:	7fffffff 	.word	0x7fffffff

0800b638 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d302      	bcc.n	800b654 <getPo2factor+0x1c>
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d107      	bne.n	800b664 <getPo2factor+0x2c>
    {
        return 0;
 800b654:	2300      	movs	r3, #0
 800b656:	e00d      	b.n	800b674 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	085b      	lsrs	r3, r3, #1
 800b65c:	607b      	str	r3, [r7, #4]
        bitShift++;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3301      	adds	r3, #1
 800b662:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d2f5      	bcs.n	800b658 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	3b01      	subs	r3, #1
 800b670:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800b672:	68fb      	ldr	r3, [r7, #12]
}
 800b674:	0018      	movs	r0, r3
 800b676:	46bd      	mov	sp, r7
 800b678:	b004      	add	sp, #16
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7f5 ffec 	bl	8001668 <__aeabi_ui2f>
 800b690:	1c03      	adds	r3, r0, #0
 800b692:	1c19      	adds	r1, r3, #0
 800b694:	68b8      	ldr	r0, [r7, #8]
 800b696:	f7f5 fc83 	bl	8000fa0 <__aeabi_fmul>
 800b69a:	1c03      	adds	r3, r0, #0
 800b69c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	18f9      	adds	r1, r7, r3
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	1c18      	adds	r0, r3, #0
 800b6ac:	f7ff fee0 	bl	800b470 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	801a      	strh	r2, [r3, #0]
}
 800b6b8:	46c0      	nop			@ (mov r8, r8)
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	b006      	add	sp, #24
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60b8      	str	r0, [r7, #8]
 800b6c8:	60f9      	str	r1, [r7, #12]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d0:	6a3a      	ldr	r2, [r7, #32]
 800b6d2:	68b8      	ldr	r0, [r7, #8]
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	f7fa ffa7 	bl	8006628 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	18d2      	adds	r2, r2, r3
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	18d2      	adds	r2, r2, r3
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	18d2      	adds	r2, r2, r3
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	18d2      	adds	r2, r2, r3
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800b6fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	0011      	movs	r1, r2
 800b700:	0018      	movs	r0, r3
 800b702:	f7fb f821 	bl	8006748 <correctIntFracNumber>
}
 800b706:	46c0      	nop			@ (mov r8, r8)
 800b708:	46bd      	mov	sp, r7
 800b70a:	b004      	add	sp, #16
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b086      	sub	sp, #24
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800b71e:	2300      	movs	r3, #0
 800b720:	613b      	str	r3, [r7, #16]
 800b722:	e019      	b.n	800b758 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	005b      	lsls	r3, r3, #1
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	18d3      	adds	r3, r2, r3
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	3201      	adds	r2, #1
 800b734:	0052      	lsls	r2, r2, #1
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	188a      	adds	r2, r1, r2
 800b73a:	8812      	ldrh	r2, [r2, #0]
 800b73c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800b73e:	0019      	movs	r1, r3
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800b748:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800b74a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	3301      	adds	r3, #1
 800b750:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	3304      	adds	r3, #4
 800b756:	613b      	str	r3, [r7, #16]
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d3e1      	bcc.n	800b724 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800b760:	46c0      	nop			@ (mov r8, r8)
 800b762:	46c0      	nop			@ (mov r8, r8)
 800b764:	46bd      	mov	sp, r7
 800b766:	b006      	add	sp, #24
 800b768:	bd80      	pop	{r7, pc}
	...

0800b76c <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800b76c:	b580      	push	{r7, lr}
 800b76e:	af00      	add	r7, sp, #0
  init = false;
 800b770:	4b02      	ldr	r3, [pc, #8]	@ (800b77c <InitDone+0x10>)
 800b772:	2200      	movs	r2, #0
 800b774:	701a      	strb	r2, [r3, #0]
}
 800b776:	46c0      	nop			@ (mov r8, r8)
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200000c4 	.word	0x200000c4

0800b780 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800b786:	f7fa fb09 	bl	8005d9c <ReadBatteryVoltage>
 800b78a:	1c03      	adds	r3, r0, #0
 800b78c:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800b78e:	491f      	ldr	r1, [pc, #124]	@ (800b80c <batteryChargeCheck+0x8c>)
 800b790:	6838      	ldr	r0, [r7, #0]
 800b792:	f7f4 fecd 	bl	8000530 <__aeabi_fcmplt>
 800b796:	1e03      	subs	r3, r0, #0
 800b798:	d002      	beq.n	800b7a0 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800b79a:	1dfb      	adds	r3, r7, #7
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800b7a0:	6838      	ldr	r0, [r7, #0]
 800b7a2:	f7f7 fe5f 	bl	8003464 <__aeabi_f2d>
 800b7a6:	4a1a      	ldr	r2, [pc, #104]	@ (800b810 <batteryChargeCheck+0x90>)
 800b7a8:	4b1a      	ldr	r3, [pc, #104]	@ (800b814 <batteryChargeCheck+0x94>)
 800b7aa:	f7f4 fe87 	bl	80004bc <__aeabi_dcmplt>
 800b7ae:	1e03      	subs	r3, r0, #0
 800b7b0:	d008      	beq.n	800b7c4 <batteryChargeCheck+0x44>
 800b7b2:	4916      	ldr	r1, [pc, #88]	@ (800b80c <batteryChargeCheck+0x8c>)
 800b7b4:	6838      	ldr	r0, [r7, #0]
 800b7b6:	f7f4 fed9 	bl	800056c <__aeabi_fcmpge>
 800b7ba:	1e03      	subs	r3, r0, #0
 800b7bc:	d002      	beq.n	800b7c4 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800b7be:	1dfb      	adds	r3, r7, #7
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800b7c4:	2181      	movs	r1, #129	@ 0x81
 800b7c6:	05c9      	lsls	r1, r1, #23
 800b7c8:	6838      	ldr	r0, [r7, #0]
 800b7ca:	f7f4 feb1 	bl	8000530 <__aeabi_fcmplt>
 800b7ce:	1e03      	subs	r3, r0, #0
 800b7d0:	d00b      	beq.n	800b7ea <batteryChargeCheck+0x6a>
 800b7d2:	6838      	ldr	r0, [r7, #0]
 800b7d4:	f7f7 fe46 	bl	8003464 <__aeabi_f2d>
 800b7d8:	4a0d      	ldr	r2, [pc, #52]	@ (800b810 <batteryChargeCheck+0x90>)
 800b7da:	4b0e      	ldr	r3, [pc, #56]	@ (800b814 <batteryChargeCheck+0x94>)
 800b7dc:	f7f4 fe8c 	bl	80004f8 <__aeabi_dcmpge>
 800b7e0:	1e03      	subs	r3, r0, #0
 800b7e2:	d002      	beq.n	800b7ea <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800b7e4:	1dfb      	adds	r3, r7, #7
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800b7ea:	2181      	movs	r1, #129	@ 0x81
 800b7ec:	05c9      	lsls	r1, r1, #23
 800b7ee:	6838      	ldr	r0, [r7, #0]
 800b7f0:	f7f4 febc 	bl	800056c <__aeabi_fcmpge>
 800b7f4:	1e03      	subs	r3, r0, #0
 800b7f6:	d002      	beq.n	800b7fe <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800b7f8:	1dfb      	adds	r3, r7, #7
 800b7fa:	2204      	movs	r2, #4
 800b7fc:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800b7fe:	1dfb      	adds	r3, r7, #7
 800b800:	781b      	ldrb	r3, [r3, #0]
}
 800b802:	0018      	movs	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	b002      	add	sp, #8
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	40600000 	.word	0x40600000
 800b810:	9999999a 	.word	0x9999999a
 800b814:	400d9999 	.word	0x400d9999

0800b818 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	0004      	movs	r4, r0
 800b820:	0008      	movs	r0, r1
 800b822:	0011      	movs	r1, r2
 800b824:	1dbb      	adds	r3, r7, #6
 800b826:	1c22      	adds	r2, r4, #0
 800b828:	801a      	strh	r2, [r3, #0]
 800b82a:	1d3b      	adds	r3, r7, #4
 800b82c:	1c02      	adds	r2, r0, #0
 800b82e:	801a      	strh	r2, [r3, #0]
 800b830:	1cbb      	adds	r3, r7, #2
 800b832:	1c0a      	adds	r2, r1, #0
 800b834:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800b836:	4b0f      	ldr	r3, [pc, #60]	@ (800b874 <SetStatusLED+0x5c>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d107      	bne.n	800b84e <SetStatusLED+0x36>
 800b83e:	4b0e      	ldr	r3, [pc, #56]	@ (800b878 <SetStatusLED+0x60>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d103      	bne.n	800b84e <SetStatusLED+0x36>
 800b846:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <SetStatusLED+0x64>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00e      	beq.n	800b86c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800b84e:	2380      	movs	r3, #128	@ 0x80
 800b850:	05db      	lsls	r3, r3, #23
 800b852:	1dba      	adds	r2, r7, #6
 800b854:	8812      	ldrh	r2, [r2, #0]
 800b856:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800b858:	2380      	movs	r3, #128	@ 0x80
 800b85a:	05db      	lsls	r3, r3, #23
 800b85c:	1d3a      	adds	r2, r7, #4
 800b85e:	8812      	ldrh	r2, [r2, #0]
 800b860:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800b862:	2380      	movs	r3, #128	@ 0x80
 800b864:	05db      	lsls	r3, r3, #23
 800b866:	1cba      	adds	r2, r7, #2
 800b868:	8812      	ldrh	r2, [r2, #0]
 800b86a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800b86c:	46c0      	nop			@ (mov r8, r8)
 800b86e:	46bd      	mov	sp, r7
 800b870:	b003      	add	sp, #12
 800b872:	bd90      	pop	{r4, r7, pc}
 800b874:	20002129 	.word	0x20002129
 800b878:	200000c4 	.word	0x200000c4
 800b87c:	2000212a 	.word	0x2000212a

0800b880 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	0004      	movs	r4, r0
 800b888:	0008      	movs	r0, r1
 800b88a:	0011      	movs	r1, r2
 800b88c:	1dfb      	adds	r3, r7, #7
 800b88e:	1c22      	adds	r2, r4, #0
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	1dbb      	adds	r3, r7, #6
 800b894:	1c02      	adds	r2, r0, #0
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	1d7b      	adds	r3, r7, #5
 800b89a:	1c0a      	adds	r2, r1, #0
 800b89c:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800b89e:	4b19      	ldr	r3, [pc, #100]	@ (800b904 <SetDBLED+0x84>)
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d107      	bne.n	800b8b6 <SetDBLED+0x36>
 800b8a6:	4b18      	ldr	r3, [pc, #96]	@ (800b908 <SetDBLED+0x88>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d103      	bne.n	800b8b6 <SetDBLED+0x36>
 800b8ae:	4b17      	ldr	r3, [pc, #92]	@ (800b90c <SetDBLED+0x8c>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d022      	beq.n	800b8fc <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800b8b6:	1dfb      	adds	r3, r7, #7
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	4053      	eors	r3, r2
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	001a      	movs	r2, r3
 800b8c2:	4b13      	ldr	r3, [pc, #76]	@ (800b910 <SetDBLED+0x90>)
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	f002 fd3f 	bl	800e34a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800b8cc:	1dbb      	adds	r3, r7, #6
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	4053      	eors	r3, r2
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	001a      	movs	r2, r3
 800b8d8:	2380      	movs	r3, #128	@ 0x80
 800b8da:	005b      	lsls	r3, r3, #1
 800b8dc:	480c      	ldr	r0, [pc, #48]	@ (800b910 <SetDBLED+0x90>)
 800b8de:	0019      	movs	r1, r3
 800b8e0:	f002 fd33 	bl	800e34a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800b8e4:	1d7b      	adds	r3, r7, #5
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	4053      	eors	r3, r2
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	001a      	movs	r2, r3
 800b8f0:	2380      	movs	r3, #128	@ 0x80
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4806      	ldr	r0, [pc, #24]	@ (800b910 <SetDBLED+0x90>)
 800b8f6:	0019      	movs	r1, r3
 800b8f8:	f002 fd27 	bl	800e34a <HAL_GPIO_WritePin>
  }
}
 800b8fc:	46c0      	nop			@ (mov r8, r8)
 800b8fe:	46bd      	mov	sp, r7
 800b900:	b003      	add	sp, #12
 800b902:	bd90      	pop	{r4, r7, pc}
 800b904:	20002129 	.word	0x20002129
 800b908:	200000c4 	.word	0x200000c4
 800b90c:	2000212a 	.word	0x2000212a
 800b910:	50000400 	.word	0x50000400

0800b914 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800b914:	b590      	push	{r4, r7, lr}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	0004      	movs	r4, r0
 800b91c:	0008      	movs	r0, r1
 800b91e:	0011      	movs	r1, r2
 800b920:	1dbb      	adds	r3, r7, #6
 800b922:	1c22      	adds	r2, r4, #0
 800b924:	801a      	strh	r2, [r3, #0]
 800b926:	1d3b      	adds	r3, r7, #4
 800b928:	1c02      	adds	r2, r0, #0
 800b92a:	801a      	strh	r2, [r3, #0]
 800b92c:	1cbb      	adds	r3, r7, #2
 800b92e:	1c0a      	adds	r2, r1, #0
 800b930:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800b932:	4b0e      	ldr	r3, [pc, #56]	@ (800b96c <SetVocLED+0x58>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d107      	bne.n	800b94a <SetVocLED+0x36>
 800b93a:	4b0d      	ldr	r3, [pc, #52]	@ (800b970 <SetVocLED+0x5c>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d103      	bne.n	800b94a <SetVocLED+0x36>
 800b942:	4b0c      	ldr	r3, [pc, #48]	@ (800b974 <SetVocLED+0x60>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00b      	beq.n	800b962 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800b94a:	4b0b      	ldr	r3, [pc, #44]	@ (800b978 <SetVocLED+0x64>)
 800b94c:	1dba      	adds	r2, r7, #6
 800b94e:	8812      	ldrh	r2, [r2, #0]
 800b950:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800b952:	4b09      	ldr	r3, [pc, #36]	@ (800b978 <SetVocLED+0x64>)
 800b954:	1d3a      	adds	r2, r7, #4
 800b956:	8812      	ldrh	r2, [r2, #0]
 800b958:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800b95a:	4b07      	ldr	r3, [pc, #28]	@ (800b978 <SetVocLED+0x64>)
 800b95c:	1cba      	adds	r2, r7, #2
 800b95e:	8812      	ldrh	r2, [r2, #0]
 800b960:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800b962:	46c0      	nop			@ (mov r8, r8)
 800b964:	46bd      	mov	sp, r7
 800b966:	b003      	add	sp, #12
 800b968:	bd90      	pop	{r4, r7, pc}
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	20002129 	.word	0x20002129
 800b970:	200000c4 	.word	0x200000c4
 800b974:	2000212a 	.word	0x2000212a
 800b978:	40000400 	.word	0x40000400

0800b97c <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800b980:	4b07      	ldr	r3, [pc, #28]	@ (800b9a0 <SetMeasurementIndicator+0x24>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d103      	bne.n	800b990 <SetMeasurementIndicator+0x14>
 800b988:	4b06      	ldr	r3, [pc, #24]	@ (800b9a4 <SetMeasurementIndicator+0x28>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800b990:	2380      	movs	r3, #128	@ 0x80
 800b992:	05db      	lsls	r3, r3, #23
 800b994:	4a04      	ldr	r2, [pc, #16]	@ (800b9a8 <SetMeasurementIndicator+0x2c>)
 800b996:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800b998:	46c0      	nop			@ (mov r8, r8)
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	46c0      	nop			@ (mov r8, r8)
 800b9a0:	20002129 	.word	0x20002129
 800b9a4:	2000212a 	.word	0x2000212a
 800b9a8:	00000bb8 	.word	0x00000bb8

0800b9ac <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800b9b0:	4b07      	ldr	r3, [pc, #28]	@ (800b9d0 <ResetMeasurementIndicator+0x24>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d103      	bne.n	800b9c0 <ResetMeasurementIndicator+0x14>
 800b9b8:	4b06      	ldr	r3, [pc, #24]	@ (800b9d4 <ResetMeasurementIndicator+0x28>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800b9c0:	2380      	movs	r3, #128	@ 0x80
 800b9c2:	05db      	lsls	r3, r3, #23
 800b9c4:	22fa      	movs	r2, #250	@ 0xfa
 800b9c6:	0112      	lsls	r2, r2, #4
 800b9c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800b9ca:	46c0      	nop			@ (mov r8, r8)
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20002129 	.word	0x20002129
 800b9d4:	2000212a 	.word	0x2000212a

0800b9d8 <SetMICIndicator>:
void SetMICIndicator(){
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800b9dc:	4b07      	ldr	r3, [pc, #28]	@ (800b9fc <SetMICIndicator+0x24>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d103      	bne.n	800b9ec <SetMICIndicator+0x14>
 800b9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ba00 <SetMICIndicator+0x28>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800b9ec:	2380      	movs	r3, #128	@ 0x80
 800b9ee:	05db      	lsls	r3, r3, #23
 800b9f0:	4a04      	ldr	r2, [pc, #16]	@ (800ba04 <SetMICIndicator+0x2c>)
 800b9f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800b9f4:	46c0      	nop			@ (mov r8, r8)
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	46c0      	nop			@ (mov r8, r8)
 800b9fc:	20002129 	.word	0x20002129
 800ba00:	2000212a 	.word	0x2000212a
 800ba04:	00000bb8 	.word	0x00000bb8

0800ba08 <ResetMICIndicator>:
void ResetMICIndicator(){
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ba0c:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <ResetMICIndicator+0x24>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d103      	bne.n	800ba1c <ResetMICIndicator+0x14>
 800ba14:	4b06      	ldr	r3, [pc, #24]	@ (800ba30 <ResetMICIndicator+0x28>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d004      	beq.n	800ba26 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800ba1c:	2380      	movs	r3, #128	@ 0x80
 800ba1e:	05db      	lsls	r3, r3, #23
 800ba20:	22fa      	movs	r2, #250	@ 0xfa
 800ba22:	0112      	lsls	r2, r2, #4
 800ba24:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800ba26:	46c0      	nop			@ (mov r8, r8)
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	20002129 	.word	0x20002129
 800ba30:	2000212a 	.word	0x2000212a

0800ba34 <SetESPIndicator>:
void SetESPIndicator(){
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ba38:	4b07      	ldr	r3, [pc, #28]	@ (800ba58 <SetESPIndicator+0x24>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d103      	bne.n	800ba48 <SetESPIndicator+0x14>
 800ba40:	4b06      	ldr	r3, [pc, #24]	@ (800ba5c <SetESPIndicator+0x28>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800ba48:	2380      	movs	r3, #128	@ 0x80
 800ba4a:	05db      	lsls	r3, r3, #23
 800ba4c:	4a04      	ldr	r2, [pc, #16]	@ (800ba60 <SetESPIndicator+0x2c>)
 800ba4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ba50:	46c0      	nop			@ (mov r8, r8)
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	46c0      	nop			@ (mov r8, r8)
 800ba58:	20002129 	.word	0x20002129
 800ba5c:	2000212a 	.word	0x2000212a
 800ba60:	00000bb8 	.word	0x00000bb8

0800ba64 <ResetESPIndicator>:
void ResetESPIndicator(){
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ba68:	4b07      	ldr	r3, [pc, #28]	@ (800ba88 <ResetESPIndicator+0x24>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d103      	bne.n	800ba78 <ResetESPIndicator+0x14>
 800ba70:	4b06      	ldr	r3, [pc, #24]	@ (800ba8c <ResetESPIndicator+0x28>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d004      	beq.n	800ba82 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800ba78:	2380      	movs	r3, #128	@ 0x80
 800ba7a:	05db      	lsls	r3, r3, #23
 800ba7c:	22fa      	movs	r2, #250	@ 0xfa
 800ba7e:	0112      	lsls	r2, r2, #4
 800ba80:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ba82:	46c0      	nop			@ (mov r8, r8)
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	20002129 	.word	0x20002129
 800ba8c:	2000212a 	.word	0x2000212a

0800ba90 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800ba94:	23fa      	movs	r3, #250	@ 0xfa
 800ba96:	011a      	lsls	r2, r3, #4
 800ba98:	23fa      	movs	r3, #250	@ 0xfa
 800ba9a:	0119      	lsls	r1, r3, #4
 800ba9c:	23fa      	movs	r3, #250	@ 0xfa
 800ba9e:	011b      	lsls	r3, r3, #4
 800baa0:	0018      	movs	r0, r3
 800baa2:	f7ff feb9 	bl	800b818 <SetStatusLED>
  SetDBLED(false,false,false);
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	2000      	movs	r0, #0
 800baac:	f7ff fee8 	bl	800b880 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800bab0:	23fa      	movs	r3, #250	@ 0xfa
 800bab2:	011a      	lsls	r2, r3, #4
 800bab4:	23fa      	movs	r3, #250	@ 0xfa
 800bab6:	0119      	lsls	r1, r3, #4
 800bab8:	23fa      	movs	r3, #250	@ 0xfa
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	0018      	movs	r0, r3
 800babe:	f7ff ff29 	bl	800b914 <SetVocLED>
return;
 800bac2:	46c0      	nop			@ (mov r8, r8)
}
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <powerCheck>:

Battery_Status powerCheck(){
 800bac8:	b590      	push	{r4, r7, lr}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800bace:	f7fa fa2b 	bl	8005f28 <Check_USB_PowerOn>
 800bad2:	0003      	movs	r3, r0
 800bad4:	001a      	movs	r2, r3
 800bad6:	2301      	movs	r3, #1
 800bad8:	4053      	eors	r3, r2
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d005      	beq.n	800baec <powerCheck+0x24>
    status = batteryChargeCheck();
 800bae0:	1dfc      	adds	r4, r7, #7
 800bae2:	f7ff fe4d 	bl	800b780 <batteryChargeCheck>
 800bae6:	0003      	movs	r3, r0
 800bae8:	7023      	strb	r3, [r4, #0]
 800baea:	e002      	b.n	800baf2 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800baec:	1dfb      	adds	r3, r7, #7
 800baee:	2201      	movs	r2, #1
 800baf0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800baf2:	1dfb      	adds	r3, r7, #7
 800baf4:	781b      	ldrb	r3, [r3, #0]
}
 800baf6:	0018      	movs	r0, r3
 800baf8:	46bd      	mov	sp, r7
 800bafa:	b003      	add	sp, #12
 800bafc:	bd90      	pop	{r4, r7, pc}
	...

0800bb00 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	0002      	movs	r2, r0
 800bb08:	1dfb      	adds	r3, r7, #7
 800bb0a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800bb0c:	1dfb      	adds	r3, r7, #7
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d105      	bne.n	800bb20 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800bb14:	4a18      	ldr	r2, [pc, #96]	@ (800bb78 <powerDisplay+0x78>)
 800bb16:	4b19      	ldr	r3, [pc, #100]	@ (800bb7c <powerDisplay+0x7c>)
 800bb18:	0019      	movs	r1, r3
 800bb1a:	2003      	movs	r0, #3
 800bb1c:	f000 fe1a 	bl	800c754 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800bb20:	1dfb      	adds	r3, r7, #7
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d105      	bne.n	800bb34 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800bb28:	4a15      	ldr	r2, [pc, #84]	@ (800bb80 <powerDisplay+0x80>)
 800bb2a:	4b14      	ldr	r3, [pc, #80]	@ (800bb7c <powerDisplay+0x7c>)
 800bb2c:	0019      	movs	r1, r3
 800bb2e:	2003      	movs	r0, #3
 800bb30:	f000 fe10 	bl	800c754 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800bb34:	1dfb      	adds	r3, r7, #7
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d105      	bne.n	800bb48 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800bb3c:	4a11      	ldr	r2, [pc, #68]	@ (800bb84 <powerDisplay+0x84>)
 800bb3e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb7c <powerDisplay+0x7c>)
 800bb40:	0019      	movs	r1, r3
 800bb42:	2003      	movs	r0, #3
 800bb44:	f000 fe06 	bl	800c754 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800bb48:	1dfb      	adds	r3, r7, #7
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d105      	bne.n	800bb5c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800bb50:	4a0d      	ldr	r2, [pc, #52]	@ (800bb88 <powerDisplay+0x88>)
 800bb52:	4b0a      	ldr	r3, [pc, #40]	@ (800bb7c <powerDisplay+0x7c>)
 800bb54:	0019      	movs	r1, r3
 800bb56:	2003      	movs	r0, #3
 800bb58:	f000 fdfc 	bl	800c754 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800bb5c:	1dfb      	adds	r3, r7, #7
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d105      	bne.n	800bb70 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800bb64:	4a09      	ldr	r2, [pc, #36]	@ (800bb8c <powerDisplay+0x8c>)
 800bb66:	4b05      	ldr	r3, [pc, #20]	@ (800bb7c <powerDisplay+0x7c>)
 800bb68:	0019      	movs	r1, r3
 800bb6a:	2003      	movs	r0, #3
 800bb6c:	f000 fdf2 	bl	800c754 <CreateLine>
  }
}
 800bb70:	46c0      	nop			@ (mov r8, r8)
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b002      	add	sp, #8
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	080220cc 	.word	0x080220cc
 800bb7c:	080220dc 	.word	0x080220dc
 800bb80:	080220e0 	.word	0x080220e0
 800bb84:	080220f8 	.word	0x080220f8
 800bb88:	08022118 	.word	0x08022118
 800bb8c:	08022130 	.word	0x08022130

0800bb90 <configCheck>:

void configCheck(){
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800bb94:	f7fa f9d7 	bl	8005f46 <BootButton_Pressed>
 800bb98:	1e03      	subs	r3, r0, #0
 800bb9a:	d007      	beq.n	800bbac <configCheck+0x1c>
 800bb9c:	f7fa f9e4 	bl	8005f68 <UserButton_Pressed>
 800bba0:	1e03      	subs	r3, r0, #0
 800bba2:	d003      	beq.n	800bbac <configCheck+0x1c>
    configSet = true;
 800bba4:	4b3d      	ldr	r3, [pc, #244]	@ (800bc9c <configCheck+0x10c>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	e00a      	b.n	800bbc2 <configCheck+0x32>
  }
  else{
    configSet = false;
 800bbac:	4b3b      	ldr	r3, [pc, #236]	@ (800bc9c <configCheck+0x10c>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800bbb2:	f001 f96b 	bl	800ce8c <HAL_GetTick>
 800bbb6:	0003      	movs	r3, r0
 800bbb8:	22fa      	movs	r2, #250	@ 0xfa
 800bbba:	00d2      	lsls	r2, r2, #3
 800bbbc:	189a      	adds	r2, r3, r2
 800bbbe:	4b38      	ldr	r3, [pc, #224]	@ (800bca0 <configCheck+0x110>)
 800bbc0:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800bbc2:	4b36      	ldr	r3, [pc, #216]	@ (800bc9c <configCheck+0x10c>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00d      	beq.n	800bbe6 <configCheck+0x56>
 800bbca:	4b35      	ldr	r3, [pc, #212]	@ (800bca0 <configCheck+0x110>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f000 fd6a 	bl	800c6a8 <TimestampIsReached>
 800bbd4:	1e03      	subs	r3, r0, #0
 800bbd6:	d006      	beq.n	800bbe6 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800bbd8:	f7f7 fea8 	bl	800392c <SetConfigMode>
    SetDBLED(true, true, true);
 800bbdc:	2201      	movs	r2, #1
 800bbde:	2101      	movs	r1, #1
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	f7ff fe4d 	bl	800b880 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800bbe6:	f7fa f9ae 	bl	8005f46 <BootButton_Pressed>
 800bbea:	0003      	movs	r3, r0
 800bbec:	001a      	movs	r2, r3
 800bbee:	2301      	movs	r3, #1
 800bbf0:	4053      	eors	r3, r2
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d01d      	beq.n	800bc34 <configCheck+0xa4>
 800bbf8:	f7fa f9b6 	bl	8005f68 <UserButton_Pressed>
 800bbfc:	1e03      	subs	r3, r0, #0
 800bbfe:	d019      	beq.n	800bc34 <configCheck+0xa4>
 800bc00:	4b28      	ldr	r3, [pc, #160]	@ (800bca4 <configCheck+0x114>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2201      	movs	r2, #1
 800bc06:	4053      	eors	r3, r2
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d012      	beq.n	800bc34 <configCheck+0xa4>
    SetLEDsOff();
 800bc0e:	f7ff ff3f 	bl	800ba90 <SetLEDsOff>
    userToggle = !userToggle;
 800bc12:	4b25      	ldr	r3, [pc, #148]	@ (800bca8 <configCheck+0x118>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	1e5a      	subs	r2, r3, #1
 800bc18:	4193      	sbcs	r3, r2
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	4053      	eors	r3, r2
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	1c1a      	adds	r2, r3, #0
 800bc24:	2301      	movs	r3, #1
 800bc26:	4013      	ands	r3, r2
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4b1f      	ldr	r3, [pc, #124]	@ (800bca8 <configCheck+0x118>)
 800bc2c:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800bc2e:	4b1d      	ldr	r3, [pc, #116]	@ (800bca4 <configCheck+0x114>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800bc34:	f7fa f987 	bl	8005f46 <BootButton_Pressed>
 800bc38:	0003      	movs	r3, r0
 800bc3a:	001a      	movs	r2, r3
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4053      	eors	r3, r2
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00b      	beq.n	800bc5e <configCheck+0xce>
 800bc46:	f7fa f98f 	bl	8005f68 <UserButton_Pressed>
 800bc4a:	0003      	movs	r3, r0
 800bc4c:	001a      	movs	r2, r3
 800bc4e:	2301      	movs	r3, #1
 800bc50:	4053      	eors	r3, r2
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <configCheck+0xce>
    buttonHeld = false;
 800bc58:	4b12      	ldr	r3, [pc, #72]	@ (800bca4 <configCheck+0x114>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800bc5e:	f7fa f963 	bl	8005f28 <Check_USB_PowerOn>
 800bc62:	1e03      	subs	r3, r0, #0
 800bc64:	d003      	beq.n	800bc6e <configCheck+0xde>
    usbPluggedIn = true;
 800bc66:	4b11      	ldr	r3, [pc, #68]	@ (800bcac <configCheck+0x11c>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800bc6c:	e012      	b.n	800bc94 <configCheck+0x104>
    if(!userToggle && !init){
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	@ (800bca8 <configCheck+0x118>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	2201      	movs	r2, #1
 800bc74:	4053      	eors	r3, r2
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d008      	beq.n	800bc8e <configCheck+0xfe>
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb0 <configCheck+0x120>)
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2201      	movs	r2, #1
 800bc82:	4053      	eors	r3, r2
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <configCheck+0xfe>
      SetLEDsOff();
 800bc8a:	f7ff ff01 	bl	800ba90 <SetLEDsOff>
    usbPluggedIn = false;
 800bc8e:	4b07      	ldr	r3, [pc, #28]	@ (800bcac <configCheck+0x11c>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	701a      	strb	r2, [r3, #0]
}
 800bc94:	46c0      	nop			@ (mov r8, r8)
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	46c0      	nop			@ (mov r8, r8)
 800bc9c:	20002128 	.word	0x20002128
 800bca0:	2000212c 	.word	0x2000212c
 800bca4:	2000212b 	.word	0x2000212b
 800bca8:	2000212a 	.word	0x2000212a
 800bcac:	20002129 	.word	0x20002129
 800bcb0:	200000c4 	.word	0x200000c4

0800bcb4 <Status_Upkeep>:
  RTC_SetWakeUpTimer(sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  configCheck();
 800bcb8:	f7ff ff6a 	bl	800bb90 <configCheck>
}
 800bcbc:	46c0      	nop			@ (mov r8, r8)
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800bcc2:	b590      	push	{r4, r7, lr}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800bcc8:	1dfc      	adds	r4, r7, #7
 800bcca:	f7ff fefd 	bl	800bac8 <powerCheck>
 800bcce:	0003      	movs	r3, r0
 800bcd0:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800bcd2:	1dfb      	adds	r3, r7, #7
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	0018      	movs	r0, r3
 800bcd8:	f7ff ff12 	bl	800bb00 <powerDisplay>
  return status;
 800bcdc:	1dfb      	adds	r3, r7, #7
 800bcde:	781b      	ldrb	r3, [r3, #0]

}
 800bce0:	0018      	movs	r0, r3
 800bce2:	46bd      	mov	sp, r7
 800bce4:	b003      	add	sp, #12
 800bce6:	bd90      	pop	{r4, r7, pc}

0800bce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bcec:	4b07      	ldr	r3, [pc, #28]	@ (800bd0c <HAL_MspInit+0x24>)
 800bcee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcf0:	4b06      	ldr	r3, [pc, #24]	@ (800bd0c <HAL_MspInit+0x24>)
 800bcf2:	2101      	movs	r1, #1
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800bcf8:	4b04      	ldr	r3, [pc, #16]	@ (800bd0c <HAL_MspInit+0x24>)
 800bcfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcfc:	4b03      	ldr	r3, [pc, #12]	@ (800bd0c <HAL_MspInit+0x24>)
 800bcfe:	2180      	movs	r1, #128	@ 0x80
 800bd00:	0549      	lsls	r1, r1, #21
 800bd02:	430a      	orrs	r2, r1
 800bd04:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd06:	46c0      	nop			@ (mov r8, r8)
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	40021000 	.word	0x40021000

0800bd10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800bd14:	46c0      	nop			@ (mov r8, r8)
 800bd16:	e7fd      	b.n	800bd14 <NMI_Handler+0x4>

0800bd18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bd1c:	46c0      	nop			@ (mov r8, r8)
 800bd1e:	e7fd      	b.n	800bd1c <HardFault_Handler+0x4>

0800bd20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800bd24:	46c0      	nop			@ (mov r8, r8)
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bd38:	f001 f896 	bl	800ce68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bd3c:	46c0      	nop			@ (mov r8, r8)
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
	...

0800bd44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800bd48:	4b05      	ldr	r3, [pc, #20]	@ (800bd60 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f001 feab 	bl	800daa6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800bd50:	4b04      	ldr	r3, [pc, #16]	@ (800bd64 <DMA1_Channel2_3_IRQHandler+0x20>)
 800bd52:	0018      	movs	r0, r3
 800bd54:	f001 fea7 	bl	800daa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800bd58:	46c0      	nop			@ (mov r8, r8)
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	46c0      	nop			@ (mov r8, r8)
 800bd60:	20000e0c 	.word	0x20000e0c
 800bd64:	20000dc4 	.word	0x20000dc4

0800bd68 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800bd6c:	4b07      	ldr	r3, [pc, #28]	@ (800bd8c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800bd6e:	0018      	movs	r0, r3
 800bd70:	f001 fe99 	bl	800daa6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800bd74:	4b06      	ldr	r3, [pc, #24]	@ (800bd90 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800bd76:	0018      	movs	r0, r3
 800bd78:	f001 fe95 	bl	800daa6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800bd7c:	4b05      	ldr	r3, [pc, #20]	@ (800bd94 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800bd7e:	0018      	movs	r0, r3
 800bd80:	f001 fe91 	bl	800daa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800bd84:	46c0      	nop			@ (mov r8, r8)
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	46c0      	nop			@ (mov r8, r8)
 800bd8c:	20000e90 	.word	0x20000e90
 800bd90:	2000241c 	.word	0x2000241c
 800bd94:	20002464 	.word	0x20002464

0800bd98 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800bd9c:	4b03      	ldr	r3, [pc, #12]	@ (800bdac <USART4_5_IRQHandler+0x14>)
 800bd9e:	0018      	movs	r0, r3
 800bda0:	f009 fac8 	bl	8015334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800bda4:	46c0      	nop			@ (mov r8, r8)
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	46c0      	nop			@ (mov r8, r8)
 800bdac:	20002364 	.word	0x20002364

0800bdb0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800bdb4:	4b09      	ldr	r3, [pc, #36]	@ (800bddc <I2C1_IRQHandler+0x2c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	699a      	ldr	r2, [r3, #24]
 800bdba:	23e0      	movs	r3, #224	@ 0xe0
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	d004      	beq.n	800bdcc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800bdc2:	4b06      	ldr	r3, [pc, #24]	@ (800bddc <I2C1_IRQHandler+0x2c>)
 800bdc4:	0018      	movs	r0, r3
 800bdc6:	f002 ffa9 	bl	800ed1c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800bdca:	e003      	b.n	800bdd4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800bdcc:	4b03      	ldr	r3, [pc, #12]	@ (800bddc <I2C1_IRQHandler+0x2c>)
 800bdce:	0018      	movs	r0, r3
 800bdd0:	f002 ff8a 	bl	800ece8 <HAL_I2C_EV_IRQHandler>
}
 800bdd4:	46c0      	nop			@ (mov r8, r8)
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	46c0      	nop			@ (mov r8, r8)
 800bddc:	20000d1c 	.word	0x20000d1c

0800bde0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bde4:	4b03      	ldr	r3, [pc, #12]	@ (800bdf4 <USART1_IRQHandler+0x14>)
 800bde6:	0018      	movs	r0, r3
 800bde8:	f009 faa4 	bl	8015334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bdec:	46c0      	nop			@ (mov r8, r8)
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	46c0      	nop			@ (mov r8, r8)
 800bdf4:	200022ac 	.word	0x200022ac

0800bdf8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800bdfc:	4b03      	ldr	r3, [pc, #12]	@ (800be0c <USB_IRQHandler+0x14>)
 800bdfe:	0018      	movs	r0, r3
 800be00:	f005 fb6a 	bl	80114d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800be04:	46c0      	nop			@ (mov r8, r8)
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	46c0      	nop			@ (mov r8, r8)
 800be0c:	2000326c 	.word	0x2000326c

0800be10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  return 1;
 800be14:	2301      	movs	r3, #1
}
 800be16:	0018      	movs	r0, r3
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <_kill>:

int _kill(int pid, int sig)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800be26:	f012 f869 	bl	801defc <__errno>
 800be2a:	0003      	movs	r3, r0
 800be2c:	2216      	movs	r2, #22
 800be2e:	601a      	str	r2, [r3, #0]
  return -1;
 800be30:	2301      	movs	r3, #1
 800be32:	425b      	negs	r3, r3
}
 800be34:	0018      	movs	r0, r3
 800be36:	46bd      	mov	sp, r7
 800be38:	b002      	add	sp, #8
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_exit>:

void _exit (int status)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800be44:	2301      	movs	r3, #1
 800be46:	425a      	negs	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	0011      	movs	r1, r2
 800be4c:	0018      	movs	r0, r3
 800be4e:	f7ff ffe5 	bl	800be1c <_kill>
  while (1) {}    /* Make sure we hang here */
 800be52:	46c0      	nop			@ (mov r8, r8)
 800be54:	e7fd      	b.n	800be52 <_exit+0x16>

0800be56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b086      	sub	sp, #24
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	60b9      	str	r1, [r7, #8]
 800be60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800be62:	2300      	movs	r3, #0
 800be64:	617b      	str	r3, [r7, #20]
 800be66:	e00a      	b.n	800be7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800be68:	e000      	b.n	800be6c <_read+0x16>
 800be6a:	bf00      	nop
 800be6c:	0001      	movs	r1, r0
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	60ba      	str	r2, [r7, #8]
 800be74:	b2ca      	uxtb	r2, r1
 800be76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	3301      	adds	r3, #1
 800be7c:	617b      	str	r3, [r7, #20]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	429a      	cmp	r2, r3
 800be84:	dbf0      	blt.n	800be68 <_read+0x12>
  }

  return len;
 800be86:	687b      	ldr	r3, [r7, #4]
}
 800be88:	0018      	movs	r0, r3
 800be8a:	46bd      	mov	sp, r7
 800be8c:	b006      	add	sp, #24
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <_close>:
  }
  return len;
}

int _close(int file)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800be98:	2301      	movs	r3, #1
 800be9a:	425b      	negs	r3, r3
}
 800be9c:	0018      	movs	r0, r3
 800be9e:	46bd      	mov	sp, r7
 800bea0:	b002      	add	sp, #8
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2280      	movs	r2, #128	@ 0x80
 800beb2:	0192      	lsls	r2, r2, #6
 800beb4:	605a      	str	r2, [r3, #4]
  return 0;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b002      	add	sp, #8
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <_isatty>:

int _isatty(int file)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bec8:	2301      	movs	r3, #1
}
 800beca:	0018      	movs	r0, r3
 800becc:	46bd      	mov	sp, r7
 800bece:	b002      	add	sp, #8
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	60f8      	str	r0, [r7, #12]
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	0018      	movs	r0, r3
 800bee2:	46bd      	mov	sp, r7
 800bee4:	b004      	add	sp, #16
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bef0:	4a14      	ldr	r2, [pc, #80]	@ (800bf44 <_sbrk+0x5c>)
 800bef2:	4b15      	ldr	r3, [pc, #84]	@ (800bf48 <_sbrk+0x60>)
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800befc:	4b13      	ldr	r3, [pc, #76]	@ (800bf4c <_sbrk+0x64>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bf04:	4b11      	ldr	r3, [pc, #68]	@ (800bf4c <_sbrk+0x64>)
 800bf06:	4a12      	ldr	r2, [pc, #72]	@ (800bf50 <_sbrk+0x68>)
 800bf08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bf0a:	4b10      	ldr	r3, [pc, #64]	@ (800bf4c <_sbrk+0x64>)
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	18d3      	adds	r3, r2, r3
 800bf12:	693a      	ldr	r2, [r7, #16]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d207      	bcs.n	800bf28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bf18:	f011 fff0 	bl	801defc <__errno>
 800bf1c:	0003      	movs	r3, r0
 800bf1e:	220c      	movs	r2, #12
 800bf20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bf22:	2301      	movs	r3, #1
 800bf24:	425b      	negs	r3, r3
 800bf26:	e009      	b.n	800bf3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bf28:	4b08      	ldr	r3, [pc, #32]	@ (800bf4c <_sbrk+0x64>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bf2e:	4b07      	ldr	r3, [pc, #28]	@ (800bf4c <_sbrk+0x64>)
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	18d2      	adds	r2, r2, r3
 800bf36:	4b05      	ldr	r3, [pc, #20]	@ (800bf4c <_sbrk+0x64>)
 800bf38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
}
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	b006      	add	sp, #24
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	20005000 	.word	0x20005000
 800bf48:	00000400 	.word	0x00000400
 800bf4c:	20002130 	.word	0x20002130
 800bf50:	200038d0 	.word	0x200038d0

0800bf54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800bf58:	46c0      	nop			@ (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf66:	2310      	movs	r3, #16
 800bf68:	18fb      	adds	r3, r7, r3
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	2308      	movs	r3, #8
 800bf6e:	001a      	movs	r2, r3
 800bf70:	2100      	movs	r1, #0
 800bf72:	f011 ff1f 	bl	801ddb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bf76:	003b      	movs	r3, r7
 800bf78:	0018      	movs	r0, r3
 800bf7a:	2310      	movs	r3, #16
 800bf7c:	001a      	movs	r2, r3
 800bf7e:	2100      	movs	r1, #0
 800bf80:	f011 ff18 	bl	801ddb4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800bf84:	4b2e      	ldr	r3, [pc, #184]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bf86:	2280      	movs	r2, #128	@ 0x80
 800bf88:	05d2      	lsls	r2, r2, #23
 800bf8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800bf8c:	4b2c      	ldr	r3, [pc, #176]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf92:	4b2b      	ldr	r3, [pc, #172]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800bf98:	4b29      	ldr	r3, [pc, #164]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bf9a:	4a2a      	ldr	r2, [pc, #168]	@ (800c044 <MX_TIM2_Init+0xe4>)
 800bf9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf9e:	4b28      	ldr	r3, [pc, #160]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bfa4:	4b26      	ldr	r3, [pc, #152]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800bfaa:	4b25      	ldr	r3, [pc, #148]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bfac:	0018      	movs	r0, r3
 800bfae:	f008 fbd5 	bl	801475c <HAL_TIM_PWM_Init>
 800bfb2:	1e03      	subs	r3, r0, #0
 800bfb4:	d001      	beq.n	800bfba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800bfb6:	f7fb fa4f 	bl	8007458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bfba:	2110      	movs	r1, #16
 800bfbc:	187b      	adds	r3, r7, r1
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bfc2:	187b      	adds	r3, r7, r1
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bfc8:	187a      	adds	r2, r7, r1
 800bfca:	4b1d      	ldr	r3, [pc, #116]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bfcc:	0011      	movs	r1, r2
 800bfce:	0018      	movs	r0, r3
 800bfd0:	f008 fee2 	bl	8014d98 <HAL_TIMEx_MasterConfigSynchronization>
 800bfd4:	1e03      	subs	r3, r0, #0
 800bfd6:	d001      	beq.n	800bfdc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800bfd8:	f7fb fa3e 	bl	8007458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bfdc:	003b      	movs	r3, r7
 800bfde:	2260      	movs	r2, #96	@ 0x60
 800bfe0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800bfe2:	003b      	movs	r3, r7
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bfe8:	003b      	movs	r3, r7
 800bfea:	2200      	movs	r2, #0
 800bfec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bfee:	003b      	movs	r3, r7
 800bff0:	2200      	movs	r2, #0
 800bff2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bff4:	0039      	movs	r1, r7
 800bff6:	4b12      	ldr	r3, [pc, #72]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	0018      	movs	r0, r3
 800bffc:	f008 fc80 	bl	8014900 <HAL_TIM_PWM_ConfigChannel>
 800c000:	1e03      	subs	r3, r0, #0
 800c002:	d001      	beq.n	800c008 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800c004:	f7fb fa28 	bl	8007458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c008:	0039      	movs	r1, r7
 800c00a:	4b0d      	ldr	r3, [pc, #52]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800c00c:	2208      	movs	r2, #8
 800c00e:	0018      	movs	r0, r3
 800c010:	f008 fc76 	bl	8014900 <HAL_TIM_PWM_ConfigChannel>
 800c014:	1e03      	subs	r3, r0, #0
 800c016:	d001      	beq.n	800c01c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800c018:	f7fb fa1e 	bl	8007458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c01c:	0039      	movs	r1, r7
 800c01e:	4b08      	ldr	r3, [pc, #32]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800c020:	220c      	movs	r2, #12
 800c022:	0018      	movs	r0, r3
 800c024:	f008 fc6c 	bl	8014900 <HAL_TIM_PWM_ConfigChannel>
 800c028:	1e03      	subs	r3, r0, #0
 800c02a:	d001      	beq.n	800c030 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800c02c:	f7fb fa14 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800c030:	4b03      	ldr	r3, [pc, #12]	@ (800c040 <MX_TIM2_Init+0xe0>)
 800c032:	0018      	movs	r0, r3
 800c034:	f000 f8fe 	bl	800c234 <HAL_TIM_MspPostInit>

}
 800c038:	46c0      	nop			@ (mov r8, r8)
 800c03a:	46bd      	mov	sp, r7
 800c03c:	b006      	add	sp, #24
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	20002134 	.word	0x20002134
 800c044:	0000ffff 	.word	0x0000ffff

0800c048 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c04e:	2310      	movs	r3, #16
 800c050:	18fb      	adds	r3, r7, r3
 800c052:	0018      	movs	r0, r3
 800c054:	2308      	movs	r3, #8
 800c056:	001a      	movs	r2, r3
 800c058:	2100      	movs	r1, #0
 800c05a:	f011 feab 	bl	801ddb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c05e:	003b      	movs	r3, r7
 800c060:	0018      	movs	r0, r3
 800c062:	2310      	movs	r3, #16
 800c064:	001a      	movs	r2, r3
 800c066:	2100      	movs	r1, #0
 800c068:	f011 fea4 	bl	801ddb4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c06c:	4b32      	ldr	r3, [pc, #200]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c06e:	4a33      	ldr	r2, [pc, #204]	@ (800c13c <MX_TIM3_Init+0xf4>)
 800c070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800c072:	4b31      	ldr	r3, [pc, #196]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c074:	2200      	movs	r2, #0
 800c076:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c078:	4b2f      	ldr	r3, [pc, #188]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800c07e:	4b2e      	ldr	r3, [pc, #184]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c080:	4a2f      	ldr	r2, [pc, #188]	@ (800c140 <MX_TIM3_Init+0xf8>)
 800c082:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c084:	4b2c      	ldr	r3, [pc, #176]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c086:	2200      	movs	r2, #0
 800c088:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c08a:	4b2b      	ldr	r3, [pc, #172]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800c090:	4b29      	ldr	r3, [pc, #164]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c092:	0018      	movs	r0, r3
 800c094:	f008 fb62 	bl	801475c <HAL_TIM_PWM_Init>
 800c098:	1e03      	subs	r3, r0, #0
 800c09a:	d001      	beq.n	800c0a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800c09c:	f7fb f9dc 	bl	8007458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c0a0:	2110      	movs	r1, #16
 800c0a2:	187b      	adds	r3, r7, r1
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c0a8:	187b      	adds	r3, r7, r1
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c0ae:	187a      	adds	r2, r7, r1
 800c0b0:	4b21      	ldr	r3, [pc, #132]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c0b2:	0011      	movs	r1, r2
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	f008 fe6f 	bl	8014d98 <HAL_TIMEx_MasterConfigSynchronization>
 800c0ba:	1e03      	subs	r3, r0, #0
 800c0bc:	d001      	beq.n	800c0c2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800c0be:	f7fb f9cb 	bl	8007458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c0c2:	003b      	movs	r3, r7
 800c0c4:	2260      	movs	r2, #96	@ 0x60
 800c0c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800c0c8:	003b      	movs	r3, r7
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c0ce:	003b      	movs	r3, r7
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c0d4:	003b      	movs	r3, r7
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c0da:	0039      	movs	r1, r7
 800c0dc:	4b16      	ldr	r3, [pc, #88]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	0018      	movs	r0, r3
 800c0e2:	f008 fc0d 	bl	8014900 <HAL_TIM_PWM_ConfigChannel>
 800c0e6:	1e03      	subs	r3, r0, #0
 800c0e8:	d001      	beq.n	800c0ee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800c0ea:	f7fb f9b5 	bl	8007458 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800c0ee:	4b12      	ldr	r3, [pc, #72]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c0f0:	2104      	movs	r1, #4
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f008 feae 	bl	8014e54 <HAL_TIMEx_RemapConfig>
 800c0f8:	1e03      	subs	r3, r0, #0
 800c0fa:	d001      	beq.n	800c100 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800c0fc:	f7fb f9ac 	bl	8007458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c100:	0039      	movs	r1, r7
 800c102:	4b0d      	ldr	r3, [pc, #52]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c104:	2204      	movs	r2, #4
 800c106:	0018      	movs	r0, r3
 800c108:	f008 fbfa 	bl	8014900 <HAL_TIM_PWM_ConfigChannel>
 800c10c:	1e03      	subs	r3, r0, #0
 800c10e:	d001      	beq.n	800c114 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800c110:	f7fb f9a2 	bl	8007458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c114:	0039      	movs	r1, r7
 800c116:	4b08      	ldr	r3, [pc, #32]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c118:	2208      	movs	r2, #8
 800c11a:	0018      	movs	r0, r3
 800c11c:	f008 fbf0 	bl	8014900 <HAL_TIM_PWM_ConfigChannel>
 800c120:	1e03      	subs	r3, r0, #0
 800c122:	d001      	beq.n	800c128 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800c124:	f7fb f998 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800c128:	4b03      	ldr	r3, [pc, #12]	@ (800c138 <MX_TIM3_Init+0xf0>)
 800c12a:	0018      	movs	r0, r3
 800c12c:	f000 f882 	bl	800c234 <HAL_TIM_MspPostInit>

}
 800c130:	46c0      	nop			@ (mov r8, r8)
 800c132:	46bd      	mov	sp, r7
 800c134:	b006      	add	sp, #24
 800c136:	bd80      	pop	{r7, pc}
 800c138:	20002174 	.word	0x20002174
 800c13c:	40000400 	.word	0x40000400
 800c140:	0000ffff 	.word	0x0000ffff

0800c144 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c14a:	003b      	movs	r3, r7
 800c14c:	0018      	movs	r0, r3
 800c14e:	2308      	movs	r3, #8
 800c150:	001a      	movs	r2, r3
 800c152:	2100      	movs	r1, #0
 800c154:	f011 fe2e 	bl	801ddb4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800c158:	4b15      	ldr	r3, [pc, #84]	@ (800c1b0 <MX_TIM6_Init+0x6c>)
 800c15a:	4a16      	ldr	r2, [pc, #88]	@ (800c1b4 <MX_TIM6_Init+0x70>)
 800c15c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800c15e:	4b14      	ldr	r3, [pc, #80]	@ (800c1b0 <MX_TIM6_Init+0x6c>)
 800c160:	220a      	movs	r2, #10
 800c162:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c164:	4b12      	ldr	r3, [pc, #72]	@ (800c1b0 <MX_TIM6_Init+0x6c>)
 800c166:	2200      	movs	r2, #0
 800c168:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800c16a:	4b11      	ldr	r3, [pc, #68]	@ (800c1b0 <MX_TIM6_Init+0x6c>)
 800c16c:	4a12      	ldr	r2, [pc, #72]	@ (800c1b8 <MX_TIM6_Init+0x74>)
 800c16e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c170:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b0 <MX_TIM6_Init+0x6c>)
 800c172:	2200      	movs	r2, #0
 800c174:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c176:	4b0e      	ldr	r3, [pc, #56]	@ (800c1b0 <MX_TIM6_Init+0x6c>)
 800c178:	0018      	movs	r0, r3
 800c17a:	f008 fa47 	bl	801460c <HAL_TIM_Base_Init>
 800c17e:	1e03      	subs	r3, r0, #0
 800c180:	d001      	beq.n	800c186 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800c182:	f7fb f969 	bl	8007458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c186:	003b      	movs	r3, r7
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c18c:	003b      	movs	r3, r7
 800c18e:	2200      	movs	r2, #0
 800c190:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c192:	003a      	movs	r2, r7
 800c194:	4b06      	ldr	r3, [pc, #24]	@ (800c1b0 <MX_TIM6_Init+0x6c>)
 800c196:	0011      	movs	r1, r2
 800c198:	0018      	movs	r0, r3
 800c19a:	f008 fdfd 	bl	8014d98 <HAL_TIMEx_MasterConfigSynchronization>
 800c19e:	1e03      	subs	r3, r0, #0
 800c1a0:	d001      	beq.n	800c1a6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800c1a2:	f7fb f959 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800c1a6:	46c0      	nop			@ (mov r8, r8)
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	b002      	add	sp, #8
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	46c0      	nop			@ (mov r8, r8)
 800c1b0:	200021b4 	.word	0x200021b4
 800c1b4:	40001000 	.word	0x40001000
 800c1b8:	0000ffff 	.word	0x0000ffff

0800c1bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	2380      	movs	r3, #128	@ 0x80
 800c1ca:	05db      	lsls	r3, r3, #23
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d106      	bne.n	800c1de <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c1fc <HAL_TIM_PWM_MspInit+0x40>)
 800c1d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1d4:	4b09      	ldr	r3, [pc, #36]	@ (800c1fc <HAL_TIM_PWM_MspInit+0x40>)
 800c1d6:	2101      	movs	r1, #1
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800c1dc:	e00a      	b.n	800c1f4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a07      	ldr	r2, [pc, #28]	@ (800c200 <HAL_TIM_PWM_MspInit+0x44>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d105      	bne.n	800c1f4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c1e8:	4b04      	ldr	r3, [pc, #16]	@ (800c1fc <HAL_TIM_PWM_MspInit+0x40>)
 800c1ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1ec:	4b03      	ldr	r3, [pc, #12]	@ (800c1fc <HAL_TIM_PWM_MspInit+0x40>)
 800c1ee:	2102      	movs	r1, #2
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c1f4:	46c0      	nop			@ (mov r8, r8)
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	b002      	add	sp, #8
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	40021000 	.word	0x40021000
 800c200:	40000400 	.word	0x40000400

0800c204 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a06      	ldr	r2, [pc, #24]	@ (800c22c <HAL_TIM_Base_MspInit+0x28>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d105      	bne.n	800c222 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c216:	4b06      	ldr	r3, [pc, #24]	@ (800c230 <HAL_TIM_Base_MspInit+0x2c>)
 800c218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c21a:	4b05      	ldr	r3, [pc, #20]	@ (800c230 <HAL_TIM_Base_MspInit+0x2c>)
 800c21c:	2110      	movs	r1, #16
 800c21e:	430a      	orrs	r2, r1
 800c220:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800c222:	46c0      	nop			@ (mov r8, r8)
 800c224:	46bd      	mov	sp, r7
 800c226:	b002      	add	sp, #8
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	46c0      	nop			@ (mov r8, r8)
 800c22c:	40001000 	.word	0x40001000
 800c230:	40021000 	.word	0x40021000

0800c234 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c234:	b590      	push	{r4, r7, lr}
 800c236:	b08b      	sub	sp, #44	@ 0x2c
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c23c:	2414      	movs	r4, #20
 800c23e:	193b      	adds	r3, r7, r4
 800c240:	0018      	movs	r0, r3
 800c242:	2314      	movs	r3, #20
 800c244:	001a      	movs	r2, r3
 800c246:	2100      	movs	r1, #0
 800c248:	f011 fdb4 	bl	801ddb4 <memset>
  if(timHandle->Instance==TIM2)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	2380      	movs	r3, #128	@ 0x80
 800c252:	05db      	lsls	r3, r3, #23
 800c254:	429a      	cmp	r2, r3
 800c256:	d123      	bne.n	800c2a0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c258:	4b27      	ldr	r3, [pc, #156]	@ (800c2f8 <HAL_TIM_MspPostInit+0xc4>)
 800c25a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c25c:	4b26      	ldr	r3, [pc, #152]	@ (800c2f8 <HAL_TIM_MspPostInit+0xc4>)
 800c25e:	2101      	movs	r1, #1
 800c260:	430a      	orrs	r2, r1
 800c262:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c264:	4b24      	ldr	r3, [pc, #144]	@ (800c2f8 <HAL_TIM_MspPostInit+0xc4>)
 800c266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c268:	2201      	movs	r2, #1
 800c26a:	4013      	ands	r3, r2
 800c26c:	613b      	str	r3, [r7, #16]
 800c26e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800c270:	0021      	movs	r1, r4
 800c272:	187b      	adds	r3, r7, r1
 800c274:	220d      	movs	r2, #13
 800c276:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c278:	187b      	adds	r3, r7, r1
 800c27a:	2202      	movs	r2, #2
 800c27c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c27e:	187b      	adds	r3, r7, r1
 800c280:	2200      	movs	r2, #0
 800c282:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c284:	187b      	adds	r3, r7, r1
 800c286:	2200      	movs	r2, #0
 800c288:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800c28a:	187b      	adds	r3, r7, r1
 800c28c:	2202      	movs	r2, #2
 800c28e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c290:	187a      	adds	r2, r7, r1
 800c292:	23a0      	movs	r3, #160	@ 0xa0
 800c294:	05db      	lsls	r3, r3, #23
 800c296:	0011      	movs	r1, r2
 800c298:	0018      	movs	r0, r3
 800c29a:	f001 febb 	bl	800e014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c29e:	e027      	b.n	800c2f0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a15      	ldr	r2, [pc, #84]	@ (800c2fc <HAL_TIM_MspPostInit+0xc8>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d122      	bne.n	800c2f0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c2aa:	4b13      	ldr	r3, [pc, #76]	@ (800c2f8 <HAL_TIM_MspPostInit+0xc4>)
 800c2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ae:	4b12      	ldr	r3, [pc, #72]	@ (800c2f8 <HAL_TIM_MspPostInit+0xc4>)
 800c2b0:	2104      	movs	r1, #4
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c2b6:	4b10      	ldr	r3, [pc, #64]	@ (800c2f8 <HAL_TIM_MspPostInit+0xc4>)
 800c2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ba:	2204      	movs	r2, #4
 800c2bc:	4013      	ands	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800c2c2:	2114      	movs	r1, #20
 800c2c4:	187b      	adds	r3, r7, r1
 800c2c6:	22e0      	movs	r2, #224	@ 0xe0
 800c2c8:	0052      	lsls	r2, r2, #1
 800c2ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2cc:	187b      	adds	r3, r7, r1
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d2:	187b      	adds	r3, r7, r1
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2d8:	187b      	adds	r3, r7, r1
 800c2da:	2200      	movs	r2, #0
 800c2dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c2de:	187b      	adds	r3, r7, r1
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c2e4:	187b      	adds	r3, r7, r1
 800c2e6:	4a06      	ldr	r2, [pc, #24]	@ (800c300 <HAL_TIM_MspPostInit+0xcc>)
 800c2e8:	0019      	movs	r1, r3
 800c2ea:	0010      	movs	r0, r2
 800c2ec:	f001 fe92 	bl	800e014 <HAL_GPIO_Init>
}
 800c2f0:	46c0      	nop			@ (mov r8, r8)
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	b00b      	add	sp, #44	@ 0x2c
 800c2f6:	bd90      	pop	{r4, r7, pc}
 800c2f8:	40021000 	.word	0x40021000
 800c2fc:	40000400 	.word	0x40000400
 800c300:	50000800 	.word	0x50000800

0800c304 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800c308:	4b17      	ldr	r3, [pc, #92]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c30a:	4a18      	ldr	r2, [pc, #96]	@ (800c36c <MX_LPUART1_UART_Init+0x68>)
 800c30c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800c30e:	4b16      	ldr	r3, [pc, #88]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c310:	22e1      	movs	r2, #225	@ 0xe1
 800c312:	0252      	lsls	r2, r2, #9
 800c314:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c316:	4b14      	ldr	r3, [pc, #80]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c318:	2200      	movs	r2, #0
 800c31a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800c31c:	4b12      	ldr	r3, [pc, #72]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c31e:	2200      	movs	r2, #0
 800c320:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800c322:	4b11      	ldr	r3, [pc, #68]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c324:	2200      	movs	r2, #0
 800c326:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800c328:	4b0f      	ldr	r3, [pc, #60]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c32a:	220c      	movs	r2, #12
 800c32c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c32e:	4b0e      	ldr	r3, [pc, #56]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c330:	2200      	movs	r2, #0
 800c332:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c334:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c336:	2200      	movs	r2, #0
 800c338:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800c33a:	4b0b      	ldr	r3, [pc, #44]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c33c:	2218      	movs	r2, #24
 800c33e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c340:	4b09      	ldr	r3, [pc, #36]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c342:	2280      	movs	r2, #128	@ 0x80
 800c344:	0212      	lsls	r2, r2, #8
 800c346:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800c348:	4b07      	ldr	r3, [pc, #28]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c34a:	2280      	movs	r2, #128	@ 0x80
 800c34c:	0152      	lsls	r2, r2, #5
 800c34e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800c350:	4b05      	ldr	r3, [pc, #20]	@ (800c368 <MX_LPUART1_UART_Init+0x64>)
 800c352:	0018      	movs	r0, r3
 800c354:	f008 fd9c 	bl	8014e90 <HAL_UART_Init>
 800c358:	1e03      	subs	r3, r0, #0
 800c35a:	d001      	beq.n	800c360 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800c35c:	f7fb f87c 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800c360:	46c0      	nop			@ (mov r8, r8)
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	46c0      	nop			@ (mov r8, r8)
 800c368:	200021f4 	.word	0x200021f4
 800c36c:	40004800 	.word	0x40004800

0800c370 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c374:	4b16      	ldr	r3, [pc, #88]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c376:	4a17      	ldr	r2, [pc, #92]	@ (800c3d4 <MX_USART1_UART_Init+0x64>)
 800c378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c37a:	4b15      	ldr	r3, [pc, #84]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c37c:	22e1      	movs	r2, #225	@ 0xe1
 800c37e:	0252      	lsls	r2, r2, #9
 800c380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c382:	4b13      	ldr	r3, [pc, #76]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c384:	2200      	movs	r2, #0
 800c386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c388:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c38e:	4b10      	ldr	r3, [pc, #64]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c390:	2200      	movs	r2, #0
 800c392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c394:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c396:	220c      	movs	r2, #12
 800c398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c39a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c3ac:	4b08      	ldr	r3, [pc, #32]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c3ae:	2208      	movs	r2, #8
 800c3b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c3b2:	4b07      	ldr	r3, [pc, #28]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c3b4:	2280      	movs	r2, #128	@ 0x80
 800c3b6:	0212      	lsls	r2, r2, #8
 800c3b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c3ba:	4b05      	ldr	r3, [pc, #20]	@ (800c3d0 <MX_USART1_UART_Init+0x60>)
 800c3bc:	0018      	movs	r0, r3
 800c3be:	f008 fd67 	bl	8014e90 <HAL_UART_Init>
 800c3c2:	1e03      	subs	r3, r0, #0
 800c3c4:	d001      	beq.n	800c3ca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800c3c6:	f7fb f847 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c3ca:	46c0      	nop			@ (mov r8, r8)
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	200022ac 	.word	0x200022ac
 800c3d4:	40013800 	.word	0x40013800

0800c3d8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800c3dc:	4b14      	ldr	r3, [pc, #80]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c3de:	4a15      	ldr	r2, [pc, #84]	@ (800c434 <MX_USART4_UART_Init+0x5c>)
 800c3e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800c3e2:	4b13      	ldr	r3, [pc, #76]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c3e4:	22e1      	movs	r2, #225	@ 0xe1
 800c3e6:	0252      	lsls	r2, r2, #9
 800c3e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c3ea:	4b11      	ldr	r3, [pc, #68]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c3f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c3f6:	4b0e      	ldr	r3, [pc, #56]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c3fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c3fe:	220c      	movs	r2, #12
 800c400:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c402:	4b0b      	ldr	r3, [pc, #44]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c404:	2200      	movs	r2, #0
 800c406:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c408:	4b09      	ldr	r3, [pc, #36]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c40e:	4b08      	ldr	r3, [pc, #32]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c410:	2200      	movs	r2, #0
 800c412:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c414:	4b06      	ldr	r3, [pc, #24]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c416:	2200      	movs	r2, #0
 800c418:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800c41a:	4b05      	ldr	r3, [pc, #20]	@ (800c430 <MX_USART4_UART_Init+0x58>)
 800c41c:	0018      	movs	r0, r3
 800c41e:	f008 fd37 	bl	8014e90 <HAL_UART_Init>
 800c422:	1e03      	subs	r3, r0, #0
 800c424:	d001      	beq.n	800c42a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800c426:	f7fb f817 	bl	8007458 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800c42a:	46c0      	nop			@ (mov r8, r8)
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	20002364 	.word	0x20002364
 800c434:	40004c00 	.word	0x40004c00

0800c438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c438:	b590      	push	{r4, r7, lr}
 800c43a:	b08d      	sub	sp, #52	@ 0x34
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c440:	241c      	movs	r4, #28
 800c442:	193b      	adds	r3, r7, r4
 800c444:	0018      	movs	r0, r3
 800c446:	2314      	movs	r3, #20
 800c448:	001a      	movs	r2, r3
 800c44a:	2100      	movs	r1, #0
 800c44c:	f011 fcb2 	bl	801ddb4 <memset>
  if(uartHandle->Instance==LPUART1)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a8b      	ldr	r2, [pc, #556]	@ (800c684 <HAL_UART_MspInit+0x24c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d129      	bne.n	800c4ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800c45a:	4b8b      	ldr	r3, [pc, #556]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c45c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c45e:	4b8a      	ldr	r3, [pc, #552]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c460:	2180      	movs	r1, #128	@ 0x80
 800c462:	02c9      	lsls	r1, r1, #11
 800c464:	430a      	orrs	r2, r1
 800c466:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c468:	4b87      	ldr	r3, [pc, #540]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c46a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c46c:	4b86      	ldr	r3, [pc, #536]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c46e:	2104      	movs	r1, #4
 800c470:	430a      	orrs	r2, r1
 800c472:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c474:	4b84      	ldr	r3, [pc, #528]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c478:	2204      	movs	r2, #4
 800c47a:	4013      	ands	r3, r2
 800c47c:	61bb      	str	r3, [r7, #24]
 800c47e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c480:	0021      	movs	r1, r4
 800c482:	187b      	adds	r3, r7, r1
 800c484:	2203      	movs	r2, #3
 800c486:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c488:	187b      	adds	r3, r7, r1
 800c48a:	2202      	movs	r2, #2
 800c48c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c48e:	187b      	adds	r3, r7, r1
 800c490:	2200      	movs	r2, #0
 800c492:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c494:	187b      	adds	r3, r7, r1
 800c496:	2203      	movs	r2, #3
 800c498:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800c49a:	187b      	adds	r3, r7, r1
 800c49c:	2206      	movs	r2, #6
 800c49e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c4a0:	187b      	adds	r3, r7, r1
 800c4a2:	4a7a      	ldr	r2, [pc, #488]	@ (800c68c <HAL_UART_MspInit+0x254>)
 800c4a4:	0019      	movs	r1, r3
 800c4a6:	0010      	movs	r0, r2
 800c4a8:	f001 fdb4 	bl	800e014 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800c4ac:	e0e5      	b.n	800c67a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a77      	ldr	r2, [pc, #476]	@ (800c690 <HAL_UART_MspInit+0x258>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d133      	bne.n	800c520 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800c4b8:	4b73      	ldr	r3, [pc, #460]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c4ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4bc:	4b72      	ldr	r3, [pc, #456]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c4be:	2180      	movs	r1, #128	@ 0x80
 800c4c0:	01c9      	lsls	r1, r1, #7
 800c4c2:	430a      	orrs	r2, r1
 800c4c4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4c6:	4b70      	ldr	r3, [pc, #448]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ca:	4b6f      	ldr	r3, [pc, #444]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4d2:	4b6d      	ldr	r3, [pc, #436]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	4013      	ands	r3, r2
 800c4da:	617b      	str	r3, [r7, #20]
 800c4dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c4de:	211c      	movs	r1, #28
 800c4e0:	187b      	adds	r3, r7, r1
 800c4e2:	22c0      	movs	r2, #192	@ 0xc0
 800c4e4:	00d2      	lsls	r2, r2, #3
 800c4e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4e8:	187b      	adds	r3, r7, r1
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ee:	187b      	adds	r3, r7, r1
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4f4:	187b      	adds	r3, r7, r1
 800c4f6:	2203      	movs	r2, #3
 800c4f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800c4fa:	187b      	adds	r3, r7, r1
 800c4fc:	2204      	movs	r2, #4
 800c4fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c500:	187a      	adds	r2, r7, r1
 800c502:	23a0      	movs	r3, #160	@ 0xa0
 800c504:	05db      	lsls	r3, r3, #23
 800c506:	0011      	movs	r1, r2
 800c508:	0018      	movs	r0, r3
 800c50a:	f001 fd83 	bl	800e014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c50e:	2200      	movs	r2, #0
 800c510:	2100      	movs	r1, #0
 800c512:	201b      	movs	r0, #27
 800c514:	f001 f930 	bl	800d778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c518:	201b      	movs	r0, #27
 800c51a:	f001 f942 	bl	800d7a2 <HAL_NVIC_EnableIRQ>
}
 800c51e:	e0ac      	b.n	800c67a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a5b      	ldr	r2, [pc, #364]	@ (800c694 <HAL_UART_MspInit+0x25c>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d000      	beq.n	800c52c <HAL_UART_MspInit+0xf4>
 800c52a:	e0a6      	b.n	800c67a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800c52c:	4b56      	ldr	r3, [pc, #344]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c52e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c530:	4b55      	ldr	r3, [pc, #340]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c532:	2180      	movs	r1, #128	@ 0x80
 800c534:	0309      	lsls	r1, r1, #12
 800c536:	430a      	orrs	r2, r1
 800c538:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c53a:	4b53      	ldr	r3, [pc, #332]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c53e:	4b52      	ldr	r3, [pc, #328]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c540:	2101      	movs	r1, #1
 800c542:	430a      	orrs	r2, r1
 800c544:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c546:	4b50      	ldr	r3, [pc, #320]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54a:	2201      	movs	r2, #1
 800c54c:	4013      	ands	r3, r2
 800c54e:	613b      	str	r3, [r7, #16]
 800c550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c552:	4b4d      	ldr	r3, [pc, #308]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c556:	4b4c      	ldr	r3, [pc, #304]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c558:	2104      	movs	r1, #4
 800c55a:	430a      	orrs	r2, r1
 800c55c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c55e:	4b4a      	ldr	r3, [pc, #296]	@ (800c688 <HAL_UART_MspInit+0x250>)
 800c560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c562:	2204      	movs	r2, #4
 800c564:	4013      	ands	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c56a:	241c      	movs	r4, #28
 800c56c:	193b      	adds	r3, r7, r4
 800c56e:	2202      	movs	r2, #2
 800c570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c572:	193b      	adds	r3, r7, r4
 800c574:	2202      	movs	r2, #2
 800c576:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c578:	193b      	adds	r3, r7, r4
 800c57a:	2200      	movs	r2, #0
 800c57c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c57e:	193b      	adds	r3, r7, r4
 800c580:	2203      	movs	r2, #3
 800c582:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800c584:	193b      	adds	r3, r7, r4
 800c586:	2206      	movs	r2, #6
 800c588:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c58a:	193a      	adds	r2, r7, r4
 800c58c:	23a0      	movs	r3, #160	@ 0xa0
 800c58e:	05db      	lsls	r3, r3, #23
 800c590:	0011      	movs	r1, r2
 800c592:	0018      	movs	r0, r3
 800c594:	f001 fd3e 	bl	800e014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c598:	0021      	movs	r1, r4
 800c59a:	187b      	adds	r3, r7, r1
 800c59c:	2280      	movs	r2, #128	@ 0x80
 800c59e:	00d2      	lsls	r2, r2, #3
 800c5a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5a2:	187b      	adds	r3, r7, r1
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5a8:	187b      	adds	r3, r7, r1
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5ae:	187b      	adds	r3, r7, r1
 800c5b0:	2203      	movs	r2, #3
 800c5b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800c5b4:	187b      	adds	r3, r7, r1
 800c5b6:	2206      	movs	r2, #6
 800c5b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5ba:	187b      	adds	r3, r7, r1
 800c5bc:	4a33      	ldr	r2, [pc, #204]	@ (800c68c <HAL_UART_MspInit+0x254>)
 800c5be:	0019      	movs	r1, r3
 800c5c0:	0010      	movs	r0, r2
 800c5c2:	f001 fd27 	bl	800e014 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800c5c6:	4b34      	ldr	r3, [pc, #208]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5c8:	4a34      	ldr	r2, [pc, #208]	@ (800c69c <HAL_UART_MspInit+0x264>)
 800c5ca:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800c5cc:	4b32      	ldr	r3, [pc, #200]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5ce:	220c      	movs	r2, #12
 800c5d0:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5d2:	4b31      	ldr	r3, [pc, #196]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5d8:	4b2f      	ldr	r3, [pc, #188]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c5de:	4b2e      	ldr	r3, [pc, #184]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5e0:	2280      	movs	r2, #128	@ 0x80
 800c5e2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5e4:	4b2c      	ldr	r3, [pc, #176]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c5ea:	4b2b      	ldr	r3, [pc, #172]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800c5f0:	4b29      	ldr	r3, [pc, #164]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5f2:	2220      	movs	r2, #32
 800c5f4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c5f6:	4b28      	ldr	r3, [pc, #160]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800c5fc:	4b26      	ldr	r3, [pc, #152]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c5fe:	0018      	movs	r0, r3
 800c600:	f001 f8ec 	bl	800d7dc <HAL_DMA_Init>
 800c604:	1e03      	subs	r3, r0, #0
 800c606:	d001      	beq.n	800c60c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800c608:	f7fa ff26 	bl	8007458 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a22      	ldr	r2, [pc, #136]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c610:	675a      	str	r2, [r3, #116]	@ 0x74
 800c612:	4b21      	ldr	r3, [pc, #132]	@ (800c698 <HAL_UART_MspInit+0x260>)
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800c618:	4b21      	ldr	r3, [pc, #132]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c61a:	4a22      	ldr	r2, [pc, #136]	@ (800c6a4 <HAL_UART_MspInit+0x26c>)
 800c61c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800c61e:	4b20      	ldr	r3, [pc, #128]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c620:	220c      	movs	r2, #12
 800c622:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c624:	4b1e      	ldr	r3, [pc, #120]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c626:	2210      	movs	r2, #16
 800c628:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c62a:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c630:	4b1b      	ldr	r3, [pc, #108]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c632:	2280      	movs	r2, #128	@ 0x80
 800c634:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c636:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c638:	2200      	movs	r2, #0
 800c63a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c63c:	4b18      	ldr	r3, [pc, #96]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c63e:	2200      	movs	r2, #0
 800c640:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800c642:	4b17      	ldr	r3, [pc, #92]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c644:	2200      	movs	r2, #0
 800c646:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c648:	4b15      	ldr	r3, [pc, #84]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800c64e:	4b14      	ldr	r3, [pc, #80]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c650:	0018      	movs	r0, r3
 800c652:	f001 f8c3 	bl	800d7dc <HAL_DMA_Init>
 800c656:	1e03      	subs	r3, r0, #0
 800c658:	d001      	beq.n	800c65e <HAL_UART_MspInit+0x226>
      Error_Handler();
 800c65a:	f7fa fefd 	bl	8007458 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a0f      	ldr	r2, [pc, #60]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c662:	671a      	str	r2, [r3, #112]	@ 0x70
 800c664:	4b0e      	ldr	r3, [pc, #56]	@ (800c6a0 <HAL_UART_MspInit+0x268>)
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800c66a:	2200      	movs	r2, #0
 800c66c:	2100      	movs	r1, #0
 800c66e:	200e      	movs	r0, #14
 800c670:	f001 f882 	bl	800d778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800c674:	200e      	movs	r0, #14
 800c676:	f001 f894 	bl	800d7a2 <HAL_NVIC_EnableIRQ>
}
 800c67a:	46c0      	nop			@ (mov r8, r8)
 800c67c:	46bd      	mov	sp, r7
 800c67e:	b00d      	add	sp, #52	@ 0x34
 800c680:	bd90      	pop	{r4, r7, pc}
 800c682:	46c0      	nop			@ (mov r8, r8)
 800c684:	40004800 	.word	0x40004800
 800c688:	40021000 	.word	0x40021000
 800c68c:	50000800 	.word	0x50000800
 800c690:	40013800 	.word	0x40013800
 800c694:	40004c00 	.word	0x40004c00
 800c698:	2000241c 	.word	0x2000241c
 800c69c:	4002006c 	.word	0x4002006c
 800c6a0:	20002464 	.word	0x20002464
 800c6a4:	40020080 	.word	0x40020080

0800c6a8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800c6b0:	f000 fbec 	bl	800ce8c <HAL_GetTick>
 800c6b4:	0003      	movs	r3, r0
 800c6b6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800c6b8:	4b1c      	ldr	r3, [pc, #112]	@ (800c72c <TimestampIsReached+0x84>)
 800c6ba:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800c6bc:	697a      	ldr	r2, [r7, #20]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d307      	bcc.n	800c6d4 <TimestampIsReached+0x2c>
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d901      	bls.n	800c6d4 <TimestampIsReached+0x2c>
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	e000      	b.n	800c6d6 <TimestampIsReached+0x2e>
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	230f      	movs	r3, #15
 800c6d8:	18fb      	adds	r3, r7, r3
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	781a      	ldrb	r2, [r3, #0]
 800c6de:	2101      	movs	r1, #1
 800c6e0:	400a      	ands	r2, r1
 800c6e2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d207      	bcs.n	800c6fc <TimestampIsReached+0x54>
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d201      	bcs.n	800c6fc <TimestampIsReached+0x54>
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	e000      	b.n	800c6fe <TimestampIsReached+0x56>
 800c6fc:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800c6fe:	200e      	movs	r0, #14
 800c700:	183b      	adds	r3, r7, r0
 800c702:	701a      	strb	r2, [r3, #0]
 800c704:	781a      	ldrb	r2, [r3, #0]
 800c706:	2101      	movs	r1, #1
 800c708:	400a      	ands	r2, r1
 800c70a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800c70c:	230f      	movs	r3, #15
 800c70e:	18fb      	adds	r3, r7, r3
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d103      	bne.n	800c71e <TimestampIsReached+0x76>
 800c716:	183b      	adds	r3, r7, r0
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800c71e:	2301      	movs	r3, #1
 800c720:	e000      	b.n	800c724 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800c722:	2300      	movs	r3, #0
}
 800c724:	0018      	movs	r0, r3
 800c726:	46bd      	mov	sp, r7
 800c728:	b006      	add	sp, #24
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	7fffffff 	.word	0x7fffffff

0800c730 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800c738:	f000 fba8 	bl	800ce8c <HAL_GetTick>
 800c73c:	0002      	movs	r2, r0
 800c73e:	4904      	ldr	r1, [pc, #16]	@ (800c750 <AddTimestamp+0x20>)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	0018      	movs	r0, r3
 800c744:	f011 fa92 	bl	801dc6c <siprintf>
}
 800c748:	46c0      	nop			@ (mov r8, r8)
 800c74a:	46bd      	mov	sp, r7
 800c74c:	b002      	add	sp, #8
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	08022154 	.word	0x08022154

0800c754 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800c754:	b40c      	push	{r2, r3}
 800c756:	b5b0      	push	{r4, r5, r7, lr}
 800c758:	b0a4      	sub	sp, #144	@ 0x90
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	0002      	movs	r2, r0
 800c75e:	6039      	str	r1, [r7, #0]
 800c760:	1dfb      	adds	r3, r7, #7
 800c762:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800c764:	4b23      	ldr	r3, [pc, #140]	@ (800c7f4 <CreateLine+0xa0>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	1dfa      	adds	r2, r7, #7
 800c76a:	7812      	ldrb	r2, [r2, #0]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d839      	bhi.n	800c7e4 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	4921      	ldr	r1, [pc, #132]	@ (800c7f8 <CreateLine+0xa4>)
 800c774:	240c      	movs	r4, #12
 800c776:	193b      	adds	r3, r7, r4
 800c778:	0018      	movs	r0, r3
 800c77a:	f011 fa77 	bl	801dc6c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800c77e:	4b1d      	ldr	r3, [pc, #116]	@ (800c7f4 <CreateLine+0xa0>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d909      	bls.n	800c79a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800c786:	193b      	adds	r3, r7, r4
 800c788:	0018      	movs	r0, r3
 800c78a:	f7f3 fcef 	bl	800016c <strlen>
 800c78e:	0002      	movs	r2, r0
 800c790:	193b      	adds	r3, r7, r4
 800c792:	189b      	adds	r3, r3, r2
 800c794:	0018      	movs	r0, r3
 800c796:	f7ff ffcb 	bl	800c730 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800c79a:	240c      	movs	r4, #12
 800c79c:	193b      	adds	r3, r7, r4
 800c79e:	0018      	movs	r0, r3
 800c7a0:	f7f3 fce4 	bl	800016c <strlen>
 800c7a4:	0003      	movs	r3, r0
 800c7a6:	218c      	movs	r1, #140	@ 0x8c
 800c7a8:	187a      	adds	r2, r7, r1
 800c7aa:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800c7ac:	239c      	movs	r3, #156	@ 0x9c
 800c7ae:	2508      	movs	r5, #8
 800c7b0:	195b      	adds	r3, r3, r5
 800c7b2:	19db      	adds	r3, r3, r7
 800c7b4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800c7b6:	193a      	adds	r2, r7, r4
 800c7b8:	187b      	adds	r3, r7, r1
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	18d0      	adds	r0, r2, r3
 800c7be:	187b      	adds	r3, r7, r1
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2280      	movs	r2, #128	@ 0x80
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	0019      	movs	r1, r3
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2298      	movs	r2, #152	@ 0x98
 800c7cc:	1952      	adds	r2, r2, r5
 800c7ce:	19d2      	adds	r2, r2, r7
 800c7d0:	6812      	ldr	r2, [r2, #0]
 800c7d2:	f011 fae3 	bl	801dd9c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800c7d6:	193a      	adds	r2, r7, r4
 800c7d8:	4b08      	ldr	r3, [pc, #32]	@ (800c7fc <CreateLine+0xa8>)
 800c7da:	0011      	movs	r1, r2
 800c7dc:	0018      	movs	r0, r3
 800c7de:	f011 fa35 	bl	801dc4c <iprintf>
 800c7e2:	e000      	b.n	800c7e6 <CreateLine+0x92>
    return;
 800c7e4:	46c0      	nop			@ (mov r8, r8)
}
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	b024      	add	sp, #144	@ 0x90
 800c7ea:	bcb0      	pop	{r4, r5, r7}
 800c7ec:	bc08      	pop	{r3}
 800c7ee:	b002      	add	sp, #8
 800c7f0:	4718      	bx	r3
 800c7f2:	46c0      	nop			@ (mov r8, r8)
 800c7f4:	200000cc 	.word	0x200000cc
 800c7f8:	08022160 	.word	0x08022160
 800c7fc:	08022164 	.word	0x08022164

0800c800 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	b29a      	uxth	r2, r3
 800c810:	68b9      	ldr	r1, [r7, #8]
 800c812:	4804      	ldr	r0, [pc, #16]	@ (800c824 <_write+0x24>)
 800c814:	2364      	movs	r3, #100	@ 0x64
 800c816:	f008 fba1 	bl	8014f5c <HAL_UART_Transmit>
  return count;
 800c81a:	687b      	ldr	r3, [r7, #4]
}
 800c81c:	0018      	movs	r0, r3
 800c81e:	46bd      	mov	sp, r7
 800c820:	b004      	add	sp, #16
 800c822:	bd80      	pop	{r7, pc}
 800c824:	200022ac 	.word	0x200022ac

0800c828 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	0002      	movs	r2, r0
 800c830:	1dfb      	adds	r3, r7, #7
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	4b03      	ldr	r3, [pc, #12]	@ (800c844 <SetVerboseLevel+0x1c>)
 800c836:	1dfa      	adds	r2, r7, #7
 800c838:	7812      	ldrb	r2, [r2, #0]
 800c83a:	701a      	strb	r2, [r3, #0]
 800c83c:	46c0      	nop			@ (mov r8, r8)
 800c83e:	46bd      	mov	sp, r7
 800c840:	b002      	add	sp, #8
 800c842:	bd80      	pop	{r7, pc}
 800c844:	200000cc 	.word	0x200000cc

0800c848 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c84c:	f000 fb1e 	bl	800ce8c <HAL_GetTick>
 800c850:	0003      	movs	r3, r0
}
 800c852:	0018      	movs	r0, r3
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800c85e:	4a0f      	ldr	r2, [pc, #60]	@ (800c89c <BinaryReleaseInfo+0x44>)
 800c860:	4b0f      	ldr	r3, [pc, #60]	@ (800c8a0 <BinaryReleaseInfo+0x48>)
 800c862:	0019      	movs	r1, r3
 800c864:	2002      	movs	r0, #2
 800c866:	f7ff ff75 	bl	800c754 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800c86a:	480e      	ldr	r0, [pc, #56]	@ (800c8a4 <BinaryReleaseInfo+0x4c>)
 800c86c:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a8 <BinaryReleaseInfo+0x50>)
 800c86e:	490c      	ldr	r1, [pc, #48]	@ (800c8a0 <BinaryReleaseInfo+0x48>)
 800c870:	4b0e      	ldr	r3, [pc, #56]	@ (800c8ac <BinaryReleaseInfo+0x54>)
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	0003      	movs	r3, r0
 800c876:	2002      	movs	r0, #2
 800c878:	f7ff ff6c 	bl	800c754 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w49");
 800c87c:	4a0c      	ldr	r2, [pc, #48]	@ (800c8b0 <BinaryReleaseInfo+0x58>)
 800c87e:	4b08      	ldr	r3, [pc, #32]	@ (800c8a0 <BinaryReleaseInfo+0x48>)
 800c880:	0019      	movs	r1, r3
 800c882:	2002      	movs	r0, #2
 800c884:	f7ff ff66 	bl	800c754 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800c888:	4b0a      	ldr	r3, [pc, #40]	@ (800c8b4 <BinaryReleaseInfo+0x5c>)
 800c88a:	4a0b      	ldr	r2, [pc, #44]	@ (800c8b8 <BinaryReleaseInfo+0x60>)
 800c88c:	4904      	ldr	r1, [pc, #16]	@ (800c8a0 <BinaryReleaseInfo+0x48>)
 800c88e:	2002      	movs	r0, #2
 800c890:	f7ff ff60 	bl	800c754 <CreateLine>
}
 800c894:	46c0      	nop			@ (mov r8, r8)
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	46c0      	nop			@ (mov r8, r8)
 800c89c:	0802216c 	.word	0x0802216c
 800c8a0:	08022198 	.word	0x08022198
 800c8a4:	0802219c 	.word	0x0802219c
 800c8a8:	080221a8 	.word	0x080221a8
 800c8ac:	080221bc 	.word	0x080221bc
 800c8b0:	080221c8 	.word	0x080221c8
 800c8b4:	080221d4 	.word	0x080221d4
 800c8b8:	080221dc 	.word	0x080221dc

0800c8bc <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	68f9      	ldr	r1, [r7, #12]
 800c8ce:	4803      	ldr	r0, [pc, #12]	@ (800c8dc <errorHandler+0x20>)
 800c8d0:	f011 f9bc 	bl	801dc4c <iprintf>
//    while (true)
//    {
//    }
}
 800c8d4:	46c0      	nop			@ (mov r8, r8)
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	b004      	add	sp, #16
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	080221f4 	.word	0x080221f4

0800c8e0 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800c8e0:	b590      	push	{r4, r7, lr}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6039      	str	r1, [r7, #0]
 800c8e8:	0011      	movs	r1, r2
 800c8ea:	1dfb      	adds	r3, r7, #7
 800c8ec:	1c02      	adds	r2, r0, #0
 800c8ee:	701a      	strb	r2, [r3, #0]
 800c8f0:	1dbb      	adds	r3, r7, #6
 800c8f2:	1c0a      	adds	r2, r1, #0
 800c8f4:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800c8f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c920 <ReadRegister+0x40>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00a      	beq.n	800c914 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800c8fe:	4b08      	ldr	r3, [pc, #32]	@ (800c920 <ReadRegister+0x40>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	1dba      	adds	r2, r7, #6
 800c904:	7814      	ldrb	r4, [r2, #0]
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	1dfa      	adds	r2, r7, #7
 800c90a:	7810      	ldrb	r0, [r2, #0]
 800c90c:	0022      	movs	r2, r4
 800c90e:	4798      	blx	r3
 800c910:	0003      	movs	r3, r0
 800c912:	e000      	b.n	800c916 <ReadRegister+0x36>
	}
	return false;
 800c914:	2300      	movs	r3, #0
}
 800c916:	0018      	movs	r0, r3
 800c918:	46bd      	mov	sp, r7
 800c91a:	b003      	add	sp, #12
 800c91c:	bd90      	pop	{r4, r7, pc}
 800c91e:	46c0      	nop			@ (mov r8, r8)
 800c920:	200024ac 	.word	0x200024ac

0800c924 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6039      	str	r1, [r7, #0]
 800c92c:	0011      	movs	r1, r2
 800c92e:	1dfb      	adds	r3, r7, #7
 800c930:	1c02      	adds	r2, r0, #0
 800c932:	701a      	strb	r2, [r3, #0]
 800c934:	1dbb      	adds	r3, r7, #6
 800c936:	1c0a      	adds	r2, r1, #0
 800c938:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800c93a:	4b0a      	ldr	r3, [pc, #40]	@ (800c964 <WriteRegister+0x40>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00a      	beq.n	800c958 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800c942:	4b08      	ldr	r3, [pc, #32]	@ (800c964 <WriteRegister+0x40>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	1dba      	adds	r2, r7, #6
 800c948:	7814      	ldrb	r4, [r2, #0]
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	1dfa      	adds	r2, r7, #7
 800c94e:	7810      	ldrb	r0, [r2, #0]
 800c950:	0022      	movs	r2, r4
 800c952:	4798      	blx	r3
 800c954:	0003      	movs	r3, r0
 800c956:	e000      	b.n	800c95a <WriteRegister+0x36>
  }
  return false;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	0018      	movs	r0, r3
 800c95c:	46bd      	mov	sp, r7
 800c95e:	b003      	add	sp, #12
 800c960:	bd90      	pop	{r4, r7, pc}
 800c962:	46c0      	nop			@ (mov r8, r8)
 800c964:	200024b0 	.word	0x200024b0

0800c968 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	000a      	movs	r2, r1
 800c972:	1cfb      	adds	r3, r7, #3
 800c974:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800c976:	230f      	movs	r3, #15
 800c978:	18fb      	adds	r3, r7, r3
 800c97a:	22ff      	movs	r2, #255	@ 0xff
 800c97c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800c97e:	230e      	movs	r3, #14
 800c980:	18fb      	adds	r3, r7, r3
 800c982:	2200      	movs	r2, #0
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	e037      	b.n	800c9f8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800c988:	230e      	movs	r3, #14
 800c98a:	18fb      	adds	r3, r7, r3
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	18d3      	adds	r3, r2, r3
 800c992:	7819      	ldrb	r1, [r3, #0]
 800c994:	220f      	movs	r2, #15
 800c996:	18bb      	adds	r3, r7, r2
 800c998:	18ba      	adds	r2, r7, r2
 800c99a:	7812      	ldrb	r2, [r2, #0]
 800c99c:	404a      	eors	r2, r1
 800c99e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800c9a0:	230d      	movs	r3, #13
 800c9a2:	18fb      	adds	r3, r7, r3
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	e01b      	b.n	800c9e2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800c9aa:	210f      	movs	r1, #15
 800c9ac:	187b      	adds	r3, r7, r1
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	b25b      	sxtb	r3, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	da09      	bge.n	800c9ca <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800c9b6:	187b      	adds	r3, r7, r1
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	b25b      	sxtb	r3, r3
 800c9be:	2231      	movs	r2, #49	@ 0x31
 800c9c0:	4053      	eors	r3, r2
 800c9c2:	b25a      	sxtb	r2, r3
 800c9c4:	187b      	adds	r3, r7, r1
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	e005      	b.n	800c9d6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800c9ca:	230f      	movs	r3, #15
 800c9cc:	18fa      	adds	r2, r7, r3
 800c9ce:	18fb      	adds	r3, r7, r3
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	18db      	adds	r3, r3, r3
 800c9d4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800c9d6:	210d      	movs	r1, #13
 800c9d8:	187b      	adds	r3, r7, r1
 800c9da:	781a      	ldrb	r2, [r3, #0]
 800c9dc:	187b      	adds	r3, r7, r1
 800c9de:	3201      	adds	r2, #1
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	230d      	movs	r3, #13
 800c9e4:	18fb      	adds	r3, r7, r3
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b07      	cmp	r3, #7
 800c9ea:	d9de      	bls.n	800c9aa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800c9ec:	210e      	movs	r1, #14
 800c9ee:	187b      	adds	r3, r7, r1
 800c9f0:	781a      	ldrb	r2, [r3, #0]
 800c9f2:	187b      	adds	r3, r7, r1
 800c9f4:	3201      	adds	r2, #1
 800c9f6:	701a      	strb	r2, [r3, #0]
 800c9f8:	230e      	movs	r3, #14
 800c9fa:	18fa      	adds	r2, r7, r3
 800c9fc:	1cfb      	adds	r3, r7, #3
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d3c0      	bcc.n	800c988 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800ca06:	230f      	movs	r3, #15
 800ca08:	18fb      	adds	r3, r7, r3
 800ca0a:	781b      	ldrb	r3, [r3, #0]
}
 800ca0c:	0018      	movs	r0, r3
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	b004      	add	sp, #16
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800ca1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca48 <HIDS_Init+0x34>)
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800ca24:	4b09      	ldr	r3, [pc, #36]	@ (800ca4c <HIDS_Init+0x38>)
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800ca2a:	4b09      	ldr	r3, [pc, #36]	@ (800ca50 <HIDS_Init+0x3c>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	0018      	movs	r0, r3
 800ca30:	f000 f8da 	bl	800cbe8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800ca34:	4b07      	ldr	r3, [pc, #28]	@ (800ca54 <HIDS_Init+0x40>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	0018      	movs	r0, r3
 800ca3a:	f000 f82b 	bl	800ca94 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800ca3e:	46c0      	nop			@ (mov r8, r8)
 800ca40:	46bd      	mov	sp, r7
 800ca42:	b002      	add	sp, #8
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	46c0      	nop			@ (mov r8, r8)
 800ca48:	200024ac 	.word	0x200024ac
 800ca4c:	200024b0 	.word	0x200024b0
 800ca50:	200000ce 	.word	0x200000ce
 800ca54:	200000cd 	.word	0x200000cd

0800ca58 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800ca5c:	f7ff fef4 	bl	800c848 <GetCurrentHalTicks>
 800ca60:	0002      	movs	r2, r0
 800ca62:	4b08      	ldr	r3, [pc, #32]	@ (800ca84 <HIDS_StartMeasurement+0x2c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	18d2      	adds	r2, r2, r3
 800ca68:	4b07      	ldr	r3, [pc, #28]	@ (800ca88 <HIDS_StartMeasurement+0x30>)
 800ca6a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800ca6c:	4b07      	ldr	r3, [pc, #28]	@ (800ca8c <HIDS_StartMeasurement+0x34>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	0019      	movs	r1, r3
 800ca72:	2044      	movs	r0, #68	@ 0x44
 800ca74:	f7ff ff56 	bl	800c924 <WriteRegister>
  MeasurementDone = false;
 800ca78:	4b05      	ldr	r3, [pc, #20]	@ (800ca90 <HIDS_StartMeasurement+0x38>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	701a      	strb	r2, [r3, #0]
}
 800ca7e:	46c0      	nop			@ (mov r8, r8)
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	200000d4 	.word	0x200000d4
 800ca88:	200000d0 	.word	0x200000d0
 800ca8c:	200000ce 	.word	0x200000ce
 800ca90:	200024c2 	.word	0x200024c2

0800ca94 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	0002      	movs	r2, r0
 800ca9c:	1dfb      	adds	r3, r7, #7
 800ca9e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800caa0:	4b03      	ldr	r3, [pc, #12]	@ (800cab0 <HIDS_SetHeaterMode+0x1c>)
 800caa2:	1dfa      	adds	r2, r7, #7
 800caa4:	7812      	ldrb	r2, [r2, #0]
 800caa6:	701a      	strb	r2, [r3, #0]
}
 800caa8:	46c0      	nop			@ (mov r8, r8)
 800caaa:	46bd      	mov	sp, r7
 800caac:	b002      	add	sp, #8
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	200000cd 	.word	0x200000cd

0800cab4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800cab4:	b590      	push	{r4, r7, lr}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	781a      	ldrb	r2, [r3, #0]
 800cac0:	210c      	movs	r1, #12
 800cac2:	187b      	adds	r3, r7, r1
 800cac4:	701a      	strb	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	785a      	ldrb	r2, [r3, #1]
 800caca:	187b      	adds	r3, r7, r1
 800cacc:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800cace:	240f      	movs	r4, #15
 800cad0:	193b      	adds	r3, r7, r4
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	7892      	ldrb	r2, [r2, #2]
 800cad6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800cad8:	187b      	adds	r3, r7, r1
 800cada:	2102      	movs	r1, #2
 800cadc:	0018      	movs	r0, r3
 800cade:	f7ff ff43 	bl	800c968 <CalculateCRC>
 800cae2:	0003      	movs	r3, r0
 800cae4:	001a      	movs	r2, r3
 800cae6:	193b      	adds	r3, r7, r4
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	4293      	cmp	r3, r2
 800caec:	d007      	beq.n	800cafe <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800caee:	4a1a      	ldr	r2, [pc, #104]	@ (800cb58 <CheckCRC+0xa4>)
 800caf0:	4b1a      	ldr	r3, [pc, #104]	@ (800cb5c <CheckCRC+0xa8>)
 800caf2:	0019      	movs	r1, r3
 800caf4:	2001      	movs	r0, #1
 800caf6:	f7ff fe2d 	bl	800c754 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e027      	b.n	800cb4e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	78da      	ldrb	r2, [r3, #3]
 800cb02:	2108      	movs	r1, #8
 800cb04:	187b      	adds	r3, r7, r1
 800cb06:	701a      	strb	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	791a      	ldrb	r2, [r3, #4]
 800cb0c:	187b      	adds	r3, r7, r1
 800cb0e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800cb10:	240e      	movs	r4, #14
 800cb12:	193b      	adds	r3, r7, r4
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	7952      	ldrb	r2, [r2, #5]
 800cb18:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800cb1a:	187b      	adds	r3, r7, r1
 800cb1c:	2102      	movs	r1, #2
 800cb1e:	0018      	movs	r0, r3
 800cb20:	f7ff ff22 	bl	800c968 <CalculateCRC>
 800cb24:	0003      	movs	r3, r0
 800cb26:	001a      	movs	r2, r3
 800cb28:	193b      	adds	r3, r7, r4
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d00d      	beq.n	800cb4c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800cb30:	4a0b      	ldr	r2, [pc, #44]	@ (800cb60 <CheckCRC+0xac>)
 800cb32:	4b0a      	ldr	r3, [pc, #40]	@ (800cb5c <CheckCRC+0xa8>)
 800cb34:	0019      	movs	r1, r3
 800cb36:	2001      	movs	r0, #1
 800cb38:	f7ff fe0c 	bl	800c754 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800cb3c:	4a09      	ldr	r2, [pc, #36]	@ (800cb64 <CheckCRC+0xb0>)
 800cb3e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb68 <CheckCRC+0xb4>)
 800cb40:	2170      	movs	r1, #112	@ 0x70
 800cb42:	0018      	movs	r0, r3
 800cb44:	f7ff feba 	bl	800c8bc <errorHandler>
		return false;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e000      	b.n	800cb4e <CheckCRC+0x9a>
	}
	return true;
 800cb4c:	2301      	movs	r3, #1
}
 800cb4e:	0018      	movs	r0, r3
 800cb50:	46bd      	mov	sp, r7
 800cb52:	b005      	add	sp, #20
 800cb54:	bd90      	pop	{r4, r7, pc}
 800cb56:	46c0      	nop			@ (mov r8, r8)
 800cb58:	08022240 	.word	0x08022240
 800cb5c:	08022268 	.word	0x08022268
 800cb60:	0802226c 	.word	0x0802226c
 800cb64:	08022298 	.word	0x08022298
 800cb68:	080226fc 	.word	0x080226fc

0800cb6c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800cb72:	1dbb      	adds	r3, r7, #6
 800cb74:	2289      	movs	r2, #137	@ 0x89
 800cb76:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800cb78:	1dbb      	adds	r3, r7, #6
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	0019      	movs	r1, r3
 800cb7e:	2044      	movs	r0, #68	@ 0x44
 800cb80:	f7ff fed0 	bl	800c924 <WriteRegister>
	HAL_Delay(30);
 800cb84:	201e      	movs	r0, #30
 800cb86:	f000 f98b 	bl	800cea0 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800cb8a:	4b14      	ldr	r3, [pc, #80]	@ (800cbdc <HIDS_DeviceConnected+0x70>)
 800cb8c:	2206      	movs	r2, #6
 800cb8e:	0019      	movs	r1, r3
 800cb90:	2044      	movs	r0, #68	@ 0x44
 800cb92:	f7ff fea5 	bl	800c8e0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800cb96:	1dfb      	adds	r3, r7, #7
 800cb98:	2200      	movs	r2, #0
 800cb9a:	701a      	strb	r2, [r3, #0]
 800cb9c:	e011      	b.n	800cbc2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800cb9e:	1dfb      	adds	r3, r7, #7
 800cba0:	7818      	ldrb	r0, [r3, #0]
 800cba2:	1dfb      	adds	r3, r7, #7
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	4a0d      	ldr	r2, [pc, #52]	@ (800cbdc <HIDS_DeviceConnected+0x70>)
 800cba8:	5cd3      	ldrb	r3, [r2, r3]
 800cbaa:	4a0d      	ldr	r2, [pc, #52]	@ (800cbe0 <HIDS_DeviceConnected+0x74>)
 800cbac:	490d      	ldr	r1, [pc, #52]	@ (800cbe4 <HIDS_DeviceConnected+0x78>)
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	0003      	movs	r3, r0
 800cbb2:	2002      	movs	r0, #2
 800cbb4:	f7ff fdce 	bl	800c754 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800cbb8:	1dfb      	adds	r3, r7, #7
 800cbba:	781a      	ldrb	r2, [r3, #0]
 800cbbc:	1dfb      	adds	r3, r7, #7
 800cbbe:	3201      	adds	r2, #1
 800cbc0:	701a      	strb	r2, [r3, #0]
 800cbc2:	1dfb      	adds	r3, r7, #7
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	2b05      	cmp	r3, #5
 800cbc8:	d9e9      	bls.n	800cb9e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800cbca:	4b04      	ldr	r3, [pc, #16]	@ (800cbdc <HIDS_DeviceConnected+0x70>)
 800cbcc:	0018      	movs	r0, r3
 800cbce:	f7ff ff71 	bl	800cab4 <CheckCRC>
 800cbd2:	0003      	movs	r3, r0
}
 800cbd4:	0018      	movs	r0, r3
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	b002      	add	sp, #8
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	200024b4 	.word	0x200024b4
 800cbe0:	080222b0 	.word	0x080222b0
 800cbe4:	0802223c 	.word	0x0802223c

0800cbe8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	0002      	movs	r2, r0
 800cbf0:	1dfb      	adds	r3, r7, #7
 800cbf2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800cbf4:	4b03      	ldr	r3, [pc, #12]	@ (800cc04 <HIDS_SetMeasurementMode+0x1c>)
 800cbf6:	1dfa      	adds	r2, r7, #7
 800cbf8:	7812      	ldrb	r2, [r2, #0]
 800cbfa:	701a      	strb	r2, [r3, #0]
}
 800cbfc:	46c0      	nop			@ (mov r8, r8)
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	b002      	add	sp, #8
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	200000ce 	.word	0x200000ce

0800cc08 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800cc0c:	4b04      	ldr	r3, [pc, #16]	@ (800cc20 <HIDS_MeasurementReady+0x18>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	0018      	movs	r0, r3
 800cc12:	f7ff fd49 	bl	800c6a8 <TimestampIsReached>
 800cc16:	0003      	movs	r3, r0
}
 800cc18:	0018      	movs	r0, r3
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	46c0      	nop			@ (mov r8, r8)
 800cc20:	200000d0 	.word	0x200000d0

0800cc24 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800cc2e:	4b49      	ldr	r3, [pc, #292]	@ (800cd54 <HIDS_GetMeasurementValues+0x130>)
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d001      	beq.n	800cc3a <HIDS_GetMeasurementValues+0x16>
 800cc36:	2301      	movs	r3, #1
 800cc38:	e087      	b.n	800cd4a <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800cc3a:	f7ff ffe5 	bl	800cc08 <HIDS_MeasurementReady>
 800cc3e:	0003      	movs	r3, r0
 800cc40:	001a      	movs	r2, r3
 800cc42:	2301      	movs	r3, #1
 800cc44:	4053      	eors	r3, r2
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <HIDS_GetMeasurementValues+0x2c>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e07c      	b.n	800cd4a <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800cc50:	2316      	movs	r3, #22
 800cc52:	18fc      	adds	r4, r7, r3
 800cc54:	4b40      	ldr	r3, [pc, #256]	@ (800cd58 <HIDS_GetMeasurementValues+0x134>)
 800cc56:	2206      	movs	r2, #6
 800cc58:	0019      	movs	r1, r3
 800cc5a:	2044      	movs	r0, #68	@ 0x44
 800cc5c:	f7ff fe40 	bl	800c8e0 <ReadRegister>
 800cc60:	0003      	movs	r3, r0
 800cc62:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800cc64:	4b3c      	ldr	r3, [pc, #240]	@ (800cd58 <HIDS_GetMeasurementValues+0x134>)
 800cc66:	0018      	movs	r0, r3
 800cc68:	f7ff ff24 	bl	800cab4 <CheckCRC>
 800cc6c:	0003      	movs	r3, r0
 800cc6e:	001a      	movs	r2, r3
 800cc70:	2301      	movs	r3, #1
 800cc72:	4053      	eors	r3, r2
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d011      	beq.n	800cc9e <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800cc7a:	2317      	movs	r3, #23
 800cc7c:	18fb      	adds	r3, r7, r3
 800cc7e:	2200      	movs	r2, #0
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	e005      	b.n	800cc90 <HIDS_GetMeasurementValues+0x6c>
 800cc84:	2117      	movs	r1, #23
 800cc86:	187b      	adds	r3, r7, r1
 800cc88:	781a      	ldrb	r2, [r3, #0]
 800cc8a:	187b      	adds	r3, r7, r1
 800cc8c:	3201      	adds	r2, #1
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	2317      	movs	r3, #23
 800cc92:	18fb      	adds	r3, r7, r3
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b05      	cmp	r3, #5
 800cc98:	d9f4      	bls.n	800cc84 <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e055      	b.n	800cd4a <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800cc9e:	4b2e      	ldr	r3, [pc, #184]	@ (800cd58 <HIDS_GetMeasurementValues+0x134>)
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	021b      	lsls	r3, r3, #8
 800cca4:	4a2c      	ldr	r2, [pc, #176]	@ (800cd58 <HIDS_GetMeasurementValues+0x134>)
 800cca6:	7852      	ldrb	r2, [r2, #1]
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	22af      	movs	r2, #175	@ 0xaf
 800ccac:	4353      	muls	r3, r2
 800ccae:	0018      	movs	r0, r3
 800ccb0:	f7f6 fb86 	bl	80033c0 <__aeabi_i2d>
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	4b29      	ldr	r3, [pc, #164]	@ (800cd5c <HIDS_GetMeasurementValues+0x138>)
 800ccb8:	f7f5 f87c 	bl	8001db4 <__aeabi_ddiv>
 800ccbc:	0002      	movs	r2, r0
 800ccbe:	000b      	movs	r3, r1
 800ccc0:	0010      	movs	r0, r2
 800ccc2:	0019      	movs	r1, r3
 800ccc4:	f7f6 fc16 	bl	80034f4 <__aeabi_d2f>
 800ccc8:	1c03      	adds	r3, r0, #0
 800ccca:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800cccc:	4924      	ldr	r1, [pc, #144]	@ (800cd60 <HIDS_GetMeasurementValues+0x13c>)
 800ccce:	6938      	ldr	r0, [r7, #16]
 800ccd0:	f7f4 faa4 	bl	800121c <__aeabi_fsub>
 800ccd4:	1c03      	adds	r3, r0, #0
 800ccd6:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ccd8:	4b1f      	ldr	r3, [pc, #124]	@ (800cd58 <HIDS_GetMeasurementValues+0x134>)
 800ccda:	78db      	ldrb	r3, [r3, #3]
 800ccdc:	021b      	lsls	r3, r3, #8
 800ccde:	4a1e      	ldr	r2, [pc, #120]	@ (800cd58 <HIDS_GetMeasurementValues+0x134>)
 800cce0:	7912      	ldrb	r2, [r2, #4]
 800cce2:	431a      	orrs	r2, r3
 800cce4:	0013      	movs	r3, r2
 800cce6:	015b      	lsls	r3, r3, #5
 800cce8:	1a9b      	subs	r3, r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	189b      	adds	r3, r3, r2
 800ccee:	0018      	movs	r0, r3
 800ccf0:	f7f6 fb66 	bl	80033c0 <__aeabi_i2d>
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4b19      	ldr	r3, [pc, #100]	@ (800cd5c <HIDS_GetMeasurementValues+0x138>)
 800ccf8:	f7f5 f85c 	bl	8001db4 <__aeabi_ddiv>
 800ccfc:	0002      	movs	r2, r0
 800ccfe:	000b      	movs	r3, r1
 800cd00:	0010      	movs	r0, r2
 800cd02:	0019      	movs	r1, r3
 800cd04:	f7f6 fbf6 	bl	80034f4 <__aeabi_d2f>
 800cd08:	1c03      	adds	r3, r0, #0
 800cd0a:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800cd0c:	4915      	ldr	r1, [pc, #84]	@ (800cd64 <HIDS_GetMeasurementValues+0x140>)
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f7f4 fa84 	bl	800121c <__aeabi_fsub>
 800cd14:	1c03      	adds	r3, r0, #0
 800cd16:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	0011      	movs	r1, r2
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	f7fd fcfa 	bl	800a724 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	1c11      	adds	r1, r2, #0
 800cd36:	1c18      	adds	r0, r3, #0
 800cd38:	f7f6 fdba 	bl	80038b0 <ESP_GetHT>

   measurements = 0;
 800cd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd68 <HIDS_GetMeasurementValues+0x144>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800cd42:	4b04      	ldr	r3, [pc, #16]	@ (800cd54 <HIDS_GetMeasurementValues+0x130>)
 800cd44:	2201      	movs	r2, #1
 800cd46:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800cd48:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	b007      	add	sp, #28
 800cd50:	bd90      	pop	{r4, r7, pc}
 800cd52:	46c0      	nop			@ (mov r8, r8)
 800cd54:	200024c2 	.word	0x200024c2
 800cd58:	200024bc 	.word	0x200024bc
 800cd5c:	40efffe0 	.word	0x40efffe0
 800cd60:	42340000 	.word	0x42340000
 800cd64:	40c00000 	.word	0x40c00000
 800cd68:	200024c4 	.word	0x200024c4

0800cd6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800cd6c:	480d      	ldr	r0, [pc, #52]	@ (800cda4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800cd6e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800cd70:	f7ff f8f0 	bl	800bf54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800cd74:	480c      	ldr	r0, [pc, #48]	@ (800cda8 <LoopForever+0x6>)
  ldr r1, =_edata
 800cd76:	490d      	ldr	r1, [pc, #52]	@ (800cdac <LoopForever+0xa>)
  ldr r2, =_sidata
 800cd78:	4a0d      	ldr	r2, [pc, #52]	@ (800cdb0 <LoopForever+0xe>)
  movs r3, #0
 800cd7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cd7c:	e002      	b.n	800cd84 <LoopCopyDataInit>

0800cd7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cd7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cd80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cd82:	3304      	adds	r3, #4

0800cd84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cd84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cd86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cd88:	d3f9      	bcc.n	800cd7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cd8a:	4a0a      	ldr	r2, [pc, #40]	@ (800cdb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800cd8c:	4c0a      	ldr	r4, [pc, #40]	@ (800cdb8 <LoopForever+0x16>)
  movs r3, #0
 800cd8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cd90:	e001      	b.n	800cd96 <LoopFillZerobss>

0800cd92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cd92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cd94:	3204      	adds	r2, #4

0800cd96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cd96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cd98:	d3fb      	bcc.n	800cd92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800cd9a:	f011 f8b5 	bl	801df08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cd9e:	f7fa f973 	bl	8007088 <main>

0800cda2 <LoopForever>:

LoopForever:
    b LoopForever
 800cda2:	e7fe      	b.n	800cda2 <LoopForever>
   ldr   r0, =_estack
 800cda4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800cda8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cdac:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800cdb0:	08023080 	.word	0x08023080
  ldr r2, =_sbss
 800cdb4:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800cdb8:	200038cc 	.word	0x200038cc

0800cdbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cdbc:	e7fe      	b.n	800cdbc <ADC1_COMP_IRQHandler>
	...

0800cdc0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800cdc6:	1dfb      	adds	r3, r7, #7
 800cdc8:	2200      	movs	r2, #0
 800cdca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800cdcc:	4b0b      	ldr	r3, [pc, #44]	@ (800cdfc <HAL_Init+0x3c>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	@ (800cdfc <HAL_Init+0x3c>)
 800cdd2:	2140      	movs	r1, #64	@ 0x40
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cdd8:	2003      	movs	r0, #3
 800cdda:	f000 f811 	bl	800ce00 <HAL_InitTick>
 800cdde:	1e03      	subs	r3, r0, #0
 800cde0:	d003      	beq.n	800cdea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800cde2:	1dfb      	adds	r3, r7, #7
 800cde4:	2201      	movs	r2, #1
 800cde6:	701a      	strb	r2, [r3, #0]
 800cde8:	e001      	b.n	800cdee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800cdea:	f7fe ff7d 	bl	800bce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800cdee:	1dfb      	adds	r3, r7, #7
 800cdf0:	781b      	ldrb	r3, [r3, #0]
}
 800cdf2:	0018      	movs	r0, r3
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	b002      	add	sp, #8
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	46c0      	nop			@ (mov r8, r8)
 800cdfc:	40022000 	.word	0x40022000

0800ce00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ce00:	b590      	push	{r4, r7, lr}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ce08:	4b14      	ldr	r3, [pc, #80]	@ (800ce5c <HAL_InitTick+0x5c>)
 800ce0a:	681c      	ldr	r4, [r3, #0]
 800ce0c:	4b14      	ldr	r3, [pc, #80]	@ (800ce60 <HAL_InitTick+0x60>)
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	0019      	movs	r1, r3
 800ce12:	23fa      	movs	r3, #250	@ 0xfa
 800ce14:	0098      	lsls	r0, r3, #2
 800ce16:	f7f3 f9c5 	bl	80001a4 <__udivsi3>
 800ce1a:	0003      	movs	r3, r0
 800ce1c:	0019      	movs	r1, r3
 800ce1e:	0020      	movs	r0, r4
 800ce20:	f7f3 f9c0 	bl	80001a4 <__udivsi3>
 800ce24:	0003      	movs	r3, r0
 800ce26:	0018      	movs	r0, r3
 800ce28:	f000 fccb 	bl	800d7c2 <HAL_SYSTICK_Config>
 800ce2c:	1e03      	subs	r3, r0, #0
 800ce2e:	d001      	beq.n	800ce34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e00f      	b.n	800ce54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d80b      	bhi.n	800ce52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ce3a:	6879      	ldr	r1, [r7, #4]
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	425b      	negs	r3, r3
 800ce40:	2200      	movs	r2, #0
 800ce42:	0018      	movs	r0, r3
 800ce44:	f000 fc98 	bl	800d778 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ce48:	4b06      	ldr	r3, [pc, #24]	@ (800ce64 <HAL_InitTick+0x64>)
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	e000      	b.n	800ce54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
}
 800ce54:	0018      	movs	r0, r3
 800ce56:	46bd      	mov	sp, r7
 800ce58:	b003      	add	sp, #12
 800ce5a:	bd90      	pop	{r4, r7, pc}
 800ce5c:	200000c8 	.word	0x200000c8
 800ce60:	200000dc 	.word	0x200000dc
 800ce64:	200000d8 	.word	0x200000d8

0800ce68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ce6c:	4b05      	ldr	r3, [pc, #20]	@ (800ce84 <HAL_IncTick+0x1c>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	001a      	movs	r2, r3
 800ce72:	4b05      	ldr	r3, [pc, #20]	@ (800ce88 <HAL_IncTick+0x20>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	18d2      	adds	r2, r2, r3
 800ce78:	4b03      	ldr	r3, [pc, #12]	@ (800ce88 <HAL_IncTick+0x20>)
 800ce7a:	601a      	str	r2, [r3, #0]
}
 800ce7c:	46c0      	nop			@ (mov r8, r8)
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	200000dc 	.word	0x200000dc
 800ce88:	200024c8 	.word	0x200024c8

0800ce8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
  return uwTick;
 800ce90:	4b02      	ldr	r3, [pc, #8]	@ (800ce9c <HAL_GetTick+0x10>)
 800ce92:	681b      	ldr	r3, [r3, #0]
}
 800ce94:	0018      	movs	r0, r3
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	46c0      	nop			@ (mov r8, r8)
 800ce9c:	200024c8 	.word	0x200024c8

0800cea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cea8:	f7ff fff0 	bl	800ce8c <HAL_GetTick>
 800ceac:	0003      	movs	r3, r0
 800ceae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	d005      	beq.n	800cec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ceba:	4b0a      	ldr	r3, [pc, #40]	@ (800cee4 <HAL_Delay+0x44>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	001a      	movs	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	189b      	adds	r3, r3, r2
 800cec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cec6:	46c0      	nop			@ (mov r8, r8)
 800cec8:	f7ff ffe0 	bl	800ce8c <HAL_GetTick>
 800cecc:	0002      	movs	r2, r0
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d8f7      	bhi.n	800cec8 <HAL_Delay+0x28>
  {
  }
}
 800ced8:	46c0      	nop			@ (mov r8, r8)
 800ceda:	46c0      	nop			@ (mov r8, r8)
 800cedc:	46bd      	mov	sp, r7
 800cede:	b004      	add	sp, #16
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	46c0      	nop			@ (mov r8, r8)
 800cee4:	200000dc 	.word	0x200000dc

0800cee8 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ceec:	4b02      	ldr	r3, [pc, #8]	@ (800cef8 <HAL_GetUIDw0+0x10>)
 800ceee:	681b      	ldr	r3, [r3, #0]
}
 800cef0:	0018      	movs	r0, r3
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	46c0      	nop			@ (mov r8, r8)
 800cef8:	1ff80050 	.word	0x1ff80050

0800cefc <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800cf00:	4b02      	ldr	r3, [pc, #8]	@ (800cf0c <HAL_GetUIDw1+0x10>)
 800cf02:	681b      	ldr	r3, [r3, #0]
}
 800cf04:	0018      	movs	r0, r3
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	46c0      	nop			@ (mov r8, r8)
 800cf0c:	1ff80054 	.word	0x1ff80054

0800cf10 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800cf14:	4b02      	ldr	r3, [pc, #8]	@ (800cf20 <HAL_GetUIDw2+0x10>)
 800cf16:	681b      	ldr	r3, [r3, #0]
}
 800cf18:	0018      	movs	r0, r3
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	46c0      	nop			@ (mov r8, r8)
 800cf20:	1ff80064 	.word	0x1ff80064

0800cf24 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e159      	b.n	800d1ea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10a      	bne.n	800cf54 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2250      	movs	r2, #80	@ 0x50
 800cf48:	2100      	movs	r1, #0
 800cf4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f7f9 fadc 	bl	800650c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf58:	2210      	movs	r2, #16
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	2b10      	cmp	r3, #16
 800cf5e:	d005      	beq.n	800cf6c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	2204      	movs	r2, #4
 800cf68:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800cf6a:	d00b      	beq.n	800cf84 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf70:	2210      	movs	r2, #16
 800cf72:	431a      	orrs	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2250      	movs	r2, #80	@ 0x50
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e132      	b.n	800d1ea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf88:	4a9a      	ldr	r2, [pc, #616]	@ (800d1f4 <HAL_ADC_Init+0x2d0>)
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	2202      	movs	r2, #2
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	2203      	movs	r2, #3
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d108      	bne.n	800cfb4 <HAL_ADC_Init+0x90>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	4013      	ands	r3, r2
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_ADC_Init+0x90>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e000      	b.n	800cfb6 <HAL_ADC_Init+0x92>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d149      	bne.n	800d04e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	23c0      	movs	r3, #192	@ 0xc0
 800cfc0:	061b      	lsls	r3, r3, #24
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d00b      	beq.n	800cfde <HAL_ADC_Init+0xba>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	2380      	movs	r3, #128	@ 0x80
 800cfcc:	05db      	lsls	r3, r3, #23
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d005      	beq.n	800cfde <HAL_ADC_Init+0xba>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	2380      	movs	r3, #128	@ 0x80
 800cfd8:	061b      	lsls	r3, r3, #24
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d111      	bne.n	800d002 <HAL_ADC_Init+0xde>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	691a      	ldr	r2, [r3, #16]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	0092      	lsls	r2, r2, #2
 800cfea:	0892      	lsrs	r2, r2, #2
 800cfec:	611a      	str	r2, [r3, #16]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6919      	ldr	r1, [r3, #16]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	685a      	ldr	r2, [r3, #4]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	430a      	orrs	r2, r1
 800cffe:	611a      	str	r2, [r3, #16]
 800d000:	e014      	b.n	800d02c <HAL_ADC_Init+0x108>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	691a      	ldr	r2, [r3, #16]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	0092      	lsls	r2, r2, #2
 800d00e:	0892      	lsrs	r2, r2, #2
 800d010:	611a      	str	r2, [r3, #16]
 800d012:	4b79      	ldr	r3, [pc, #484]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	4b78      	ldr	r3, [pc, #480]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d018:	4978      	ldr	r1, [pc, #480]	@ (800d1fc <HAL_ADC_Init+0x2d8>)
 800d01a:	400a      	ands	r2, r1
 800d01c:	601a      	str	r2, [r3, #0]
 800d01e:	4b76      	ldr	r3, [pc, #472]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d020:	6819      	ldr	r1, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	4b74      	ldr	r3, [pc, #464]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d028:	430a      	orrs	r2, r1
 800d02a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68da      	ldr	r2, [r3, #12]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2118      	movs	r1, #24
 800d038:	438a      	bics	r2, r1
 800d03a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68d9      	ldr	r1, [r3, #12]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	430a      	orrs	r2, r1
 800d04c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800d04e:	4b6a      	ldr	r3, [pc, #424]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	4b69      	ldr	r3, [pc, #420]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d054:	496a      	ldr	r1, [pc, #424]	@ (800d200 <HAL_ADC_Init+0x2dc>)
 800d056:	400a      	ands	r2, r1
 800d058:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800d05a:	4b67      	ldr	r3, [pc, #412]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d05c:	6819      	ldr	r1, [r3, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d062:	065a      	lsls	r2, r3, #25
 800d064:	4b64      	ldr	r3, [pc, #400]	@ (800d1f8 <HAL_ADC_Init+0x2d4>)
 800d066:	430a      	orrs	r2, r1
 800d068:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	2380      	movs	r3, #128	@ 0x80
 800d072:	055b      	lsls	r3, r3, #21
 800d074:	4013      	ands	r3, r2
 800d076:	d108      	bne.n	800d08a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	689a      	ldr	r2, [r3, #8]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2180      	movs	r1, #128	@ 0x80
 800d084:	0549      	lsls	r1, r1, #21
 800d086:	430a      	orrs	r2, r1
 800d088:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	68da      	ldr	r2, [r3, #12]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	495b      	ldr	r1, [pc, #364]	@ (800d204 <HAL_ADC_Init+0x2e0>)
 800d096:	400a      	ands	r2, r1
 800d098:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68d9      	ldr	r1, [r3, #12]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d101      	bne.n	800d0b0 <HAL_ADC_Init+0x18c>
 800d0ac:	2304      	movs	r3, #4
 800d0ae:	e000      	b.n	800d0b2 <HAL_ADC_Init+0x18e>
 800d0b0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d0b2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2020      	movs	r0, #32
 800d0b8:	5c1b      	ldrb	r3, [r3, r0]
 800d0ba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800d0bc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	202c      	movs	r0, #44	@ 0x2c
 800d0c2:	5c1b      	ldrb	r3, [r3, r0]
 800d0c4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800d0c6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d0cc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800d0d4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800d0dc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0ea:	23c2      	movs	r3, #194	@ 0xc2
 800d0ec:	33ff      	adds	r3, #255	@ 0xff
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d00b      	beq.n	800d10a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68d9      	ldr	r1, [r3, #12]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800d100:	431a      	orrs	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	430a      	orrs	r2, r1
 800d108:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2221      	movs	r2, #33	@ 0x21
 800d10e:	5c9b      	ldrb	r3, [r3, r2]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d11a      	bne.n	800d14a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2220      	movs	r2, #32
 800d118:	5c9b      	ldrb	r3, [r3, r2]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68da      	ldr	r2, [r3, #12]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2180      	movs	r1, #128	@ 0x80
 800d12a:	0249      	lsls	r1, r1, #9
 800d12c:	430a      	orrs	r2, r1
 800d12e:	60da      	str	r2, [r3, #12]
 800d130:	e00b      	b.n	800d14a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d136:	2220      	movs	r2, #32
 800d138:	431a      	orrs	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d142:	2201      	movs	r2, #1
 800d144:	431a      	orrs	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d11f      	bne.n	800d192 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	691a      	ldr	r2, [r3, #16]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	492a      	ldr	r1, [pc, #168]	@ (800d208 <HAL_ADC_Init+0x2e4>)
 800d15e:	400a      	ands	r2, r1
 800d160:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6919      	ldr	r1, [r3, #16]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d170:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800d176:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	430a      	orrs	r2, r1
 800d17e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	691a      	ldr	r2, [r3, #16]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2101      	movs	r1, #1
 800d18c:	430a      	orrs	r2, r1
 800d18e:	611a      	str	r2, [r3, #16]
 800d190:	e00e      	b.n	800d1b0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	2201      	movs	r2, #1
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d107      	bne.n	800d1b0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	691a      	ldr	r2, [r3, #16]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2101      	movs	r1, #1
 800d1ac:	438a      	bics	r2, r1
 800d1ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	695a      	ldr	r2, [r3, #20]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2107      	movs	r1, #7
 800d1bc:	438a      	bics	r2, r1
 800d1be:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6959      	ldr	r1, [r3, #20]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	430a      	orrs	r2, r1
 800d1d0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1dc:	2203      	movs	r2, #3
 800d1de:	4393      	bics	r3, r2
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	0018      	movs	r0, r3
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	b002      	add	sp, #8
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	46c0      	nop			@ (mov r8, r8)
 800d1f4:	fffffefd 	.word	0xfffffefd
 800d1f8:	40012708 	.word	0x40012708
 800d1fc:	ffc3ffff 	.word	0xffc3ffff
 800d200:	fdffffff 	.word	0xfdffffff
 800d204:	fffe0219 	.word	0xfffe0219
 800d208:	fffffc03 	.word	0xfffffc03

0800d20c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d214:	230f      	movs	r3, #15
 800d216:	18fb      	adds	r3, r7, r3
 800d218:	2200      	movs	r2, #0
 800d21a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	2204      	movs	r2, #4
 800d224:	4013      	ands	r3, r2
 800d226:	d138      	bne.n	800d29a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2250      	movs	r2, #80	@ 0x50
 800d22c:	5c9b      	ldrb	r3, [r3, r2]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d101      	bne.n	800d236 <HAL_ADC_Start+0x2a>
 800d232:	2302      	movs	r3, #2
 800d234:	e038      	b.n	800d2a8 <HAL_ADC_Start+0x9c>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2250      	movs	r2, #80	@ 0x50
 800d23a:	2101      	movs	r1, #1
 800d23c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d007      	beq.n	800d256 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800d246:	230f      	movs	r3, #15
 800d248:	18fc      	adds	r4, r7, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	0018      	movs	r0, r3
 800d24e:	f000 f95f 	bl	800d510 <ADC_Enable>
 800d252:	0003      	movs	r3, r0
 800d254:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800d256:	230f      	movs	r3, #15
 800d258:	18fb      	adds	r3, r7, r3
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d120      	bne.n	800d2a2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d264:	4a12      	ldr	r2, [pc, #72]	@ (800d2b0 <HAL_ADC_Start+0xa4>)
 800d266:	4013      	ands	r3, r2
 800d268:	2280      	movs	r2, #128	@ 0x80
 800d26a:	0052      	lsls	r2, r2, #1
 800d26c:	431a      	orrs	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2250      	movs	r2, #80	@ 0x50
 800d27c:	2100      	movs	r1, #0
 800d27e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	221c      	movs	r2, #28
 800d286:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	689a      	ldr	r2, [r3, #8]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2104      	movs	r1, #4
 800d294:	430a      	orrs	r2, r1
 800d296:	609a      	str	r2, [r3, #8]
 800d298:	e003      	b.n	800d2a2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d29a:	230f      	movs	r3, #15
 800d29c:	18fb      	adds	r3, r7, r3
 800d29e:	2202      	movs	r2, #2
 800d2a0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800d2a2:	230f      	movs	r3, #15
 800d2a4:	18fb      	adds	r3, r7, r3
 800d2a6:	781b      	ldrb	r3, [r3, #0]
}
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	b005      	add	sp, #20
 800d2ae:	bd90      	pop	{r4, r7, pc}
 800d2b0:	fffff0fe 	.word	0xfffff0fe

0800d2b4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	2b08      	cmp	r3, #8
 800d2cc:	d102      	bne.n	800d2d4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800d2ce:	2308      	movs	r3, #8
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	e014      	b.n	800d2fe <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	4013      	ands	r3, r2
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d10b      	bne.n	800d2fa <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2e6:	2220      	movs	r2, #32
 800d2e8:	431a      	orrs	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2250      	movs	r2, #80	@ 0x50
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e072      	b.n	800d3e0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800d2fa:	230c      	movs	r3, #12
 800d2fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800d2fe:	f7ff fdc5 	bl	800ce8c <HAL_GetTick>
 800d302:	0003      	movs	r3, r0
 800d304:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800d306:	e01f      	b.n	800d348 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	3301      	adds	r3, #1
 800d30c:	d01c      	beq.n	800d348 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d007      	beq.n	800d324 <HAL_ADC_PollForConversion+0x70>
 800d314:	f7ff fdba 	bl	800ce8c <HAL_GetTick>
 800d318:	0002      	movs	r2, r0
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d211      	bcs.n	800d348 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4013      	ands	r3, r2
 800d32e:	d10b      	bne.n	800d348 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d334:	2204      	movs	r2, #4
 800d336:	431a      	orrs	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2250      	movs	r2, #80	@ 0x50
 800d340:	2100      	movs	r1, #0
 800d342:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e04b      	b.n	800d3e0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68fa      	ldr	r2, [r7, #12]
 800d350:	4013      	ands	r3, r2
 800d352:	d0d9      	beq.n	800d308 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d358:	2280      	movs	r2, #128	@ 0x80
 800d35a:	0092      	lsls	r2, r2, #2
 800d35c:	431a      	orrs	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68da      	ldr	r2, [r3, #12]
 800d368:	23c0      	movs	r3, #192	@ 0xc0
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	4013      	ands	r3, r2
 800d36e:	d12e      	bne.n	800d3ce <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2220      	movs	r2, #32
 800d374:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800d376:	2b00      	cmp	r3, #0
 800d378:	d129      	bne.n	800d3ce <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2208      	movs	r2, #8
 800d382:	4013      	ands	r3, r2
 800d384:	2b08      	cmp	r3, #8
 800d386:	d122      	bne.n	800d3ce <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	2204      	movs	r2, #4
 800d390:	4013      	ands	r3, r2
 800d392:	d110      	bne.n	800d3b6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	210c      	movs	r1, #12
 800d3a0:	438a      	bics	r2, r1
 800d3a2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3a8:	4a0f      	ldr	r2, [pc, #60]	@ (800d3e8 <HAL_ADC_PollForConversion+0x134>)
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	431a      	orrs	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	655a      	str	r2, [r3, #84]	@ 0x54
 800d3b4:	e00b      	b.n	800d3ce <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	431a      	orrs	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d103      	bne.n	800d3de <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	220c      	movs	r2, #12
 800d3dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	b004      	add	sp, #16
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	fffffefe 	.word	0xfffffefe

0800d3ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	b002      	add	sp, #8
 800d400:	bd80      	pop	{r7, pc}
	...

0800d404 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2250      	movs	r2, #80	@ 0x50
 800d412:	5c9b      	ldrb	r3, [r3, r2]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d101      	bne.n	800d41c <HAL_ADC_ConfigChannel+0x18>
 800d418:	2302      	movs	r3, #2
 800d41a:	e06c      	b.n	800d4f6 <HAL_ADC_ConfigChannel+0xf2>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2250      	movs	r2, #80	@ 0x50
 800d420:	2101      	movs	r1, #1
 800d422:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	2204      	movs	r2, #4
 800d42c:	4013      	ands	r3, r2
 800d42e:	d00b      	beq.n	800d448 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d434:	2220      	movs	r2, #32
 800d436:	431a      	orrs	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2250      	movs	r2, #80	@ 0x50
 800d440:	2100      	movs	r1, #0
 800d442:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e056      	b.n	800d4f6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	4a2c      	ldr	r2, [pc, #176]	@ (800d500 <HAL_ADC_ConfigChannel+0xfc>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d028      	beq.n	800d4a4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	035b      	lsls	r3, r3, #13
 800d45e:	0b5a      	lsrs	r2, r3, #13
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	430a      	orrs	r2, r1
 800d466:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	2380      	movs	r3, #128	@ 0x80
 800d46e:	02db      	lsls	r3, r3, #11
 800d470:	4013      	ands	r3, r2
 800d472:	d009      	beq.n	800d488 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800d474:	4b23      	ldr	r3, [pc, #140]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	4b22      	ldr	r3, [pc, #136]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d47a:	2180      	movs	r1, #128	@ 0x80
 800d47c:	0409      	lsls	r1, r1, #16
 800d47e:	430a      	orrs	r2, r1
 800d480:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800d482:	200a      	movs	r0, #10
 800d484:	f000 f8ac 	bl	800d5e0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	2380      	movs	r3, #128	@ 0x80
 800d48e:	029b      	lsls	r3, r3, #10
 800d490:	4013      	ands	r3, r2
 800d492:	d02b      	beq.n	800d4ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800d494:	4b1b      	ldr	r3, [pc, #108]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	4b1a      	ldr	r3, [pc, #104]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d49a:	2180      	movs	r1, #128	@ 0x80
 800d49c:	03c9      	lsls	r1, r1, #15
 800d49e:	430a      	orrs	r2, r1
 800d4a0:	601a      	str	r2, [r3, #0]
 800d4a2:	e023      	b.n	800d4ec <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	035b      	lsls	r3, r3, #13
 800d4b0:	0b5b      	lsrs	r3, r3, #13
 800d4b2:	43d9      	mvns	r1, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	400a      	ands	r2, r1
 800d4ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	2380      	movs	r3, #128	@ 0x80
 800d4c2:	02db      	lsls	r3, r3, #11
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	d005      	beq.n	800d4d4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800d4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d4ce:	490e      	ldr	r1, [pc, #56]	@ (800d508 <HAL_ADC_ConfigChannel+0x104>)
 800d4d0:	400a      	ands	r2, r1
 800d4d2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	2380      	movs	r3, #128	@ 0x80
 800d4da:	029b      	lsls	r3, r3, #10
 800d4dc:	4013      	ands	r3, r2
 800d4de:	d005      	beq.n	800d4ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800d4e0:	4b08      	ldr	r3, [pc, #32]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	4b07      	ldr	r3, [pc, #28]	@ (800d504 <HAL_ADC_ConfigChannel+0x100>)
 800d4e6:	4909      	ldr	r1, [pc, #36]	@ (800d50c <HAL_ADC_ConfigChannel+0x108>)
 800d4e8:	400a      	ands	r2, r1
 800d4ea:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2250      	movs	r2, #80	@ 0x50
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	b002      	add	sp, #8
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	46c0      	nop			@ (mov r8, r8)
 800d500:	00001001 	.word	0x00001001
 800d504:	40012708 	.word	0x40012708
 800d508:	ff7fffff 	.word	0xff7fffff
 800d50c:	ffbfffff 	.word	0xffbfffff

0800d510 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	2203      	movs	r2, #3
 800d524:	4013      	ands	r3, r2
 800d526:	2b01      	cmp	r3, #1
 800d528:	d108      	bne.n	800d53c <ADC_Enable+0x2c>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2201      	movs	r2, #1
 800d532:	4013      	ands	r3, r2
 800d534:	2b01      	cmp	r3, #1
 800d536:	d101      	bne.n	800d53c <ADC_Enable+0x2c>
 800d538:	2301      	movs	r3, #1
 800d53a:	e000      	b.n	800d53e <ADC_Enable+0x2e>
 800d53c:	2300      	movs	r3, #0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d146      	bne.n	800d5d0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	4a24      	ldr	r2, [pc, #144]	@ (800d5dc <ADC_Enable+0xcc>)
 800d54a:	4013      	ands	r3, r2
 800d54c:	d00d      	beq.n	800d56a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d552:	2210      	movs	r2, #16
 800d554:	431a      	orrs	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d55e:	2201      	movs	r2, #1
 800d560:	431a      	orrs	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	e033      	b.n	800d5d2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	689a      	ldr	r2, [r3, #8]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2101      	movs	r1, #1
 800d576:	430a      	orrs	r2, r1
 800d578:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800d57a:	2001      	movs	r0, #1
 800d57c:	f000 f830 	bl	800d5e0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800d580:	f7ff fc84 	bl	800ce8c <HAL_GetTick>
 800d584:	0003      	movs	r3, r0
 800d586:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d588:	e01b      	b.n	800d5c2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d58a:	f7ff fc7f 	bl	800ce8c <HAL_GetTick>
 800d58e:	0002      	movs	r2, r0
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	2b0a      	cmp	r3, #10
 800d596:	d914      	bls.n	800d5c2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d00d      	beq.n	800d5c2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5aa:	2210      	movs	r2, #16
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e007      	b.n	800d5d2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d1dc      	bne.n	800d58a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	0018      	movs	r0, r3
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	b004      	add	sp, #16
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	46c0      	nop			@ (mov r8, r8)
 800d5dc:	80000017 	.word	0x80000017

0800d5e0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800d5e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d618 <ADC_DelayMicroSecond+0x38>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	490b      	ldr	r1, [pc, #44]	@ (800d61c <ADC_DelayMicroSecond+0x3c>)
 800d5ee:	0018      	movs	r0, r3
 800d5f0:	f7f2 fdd8 	bl	80001a4 <__udivsi3>
 800d5f4:	0003      	movs	r3, r0
 800d5f6:	001a      	movs	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4353      	muls	r3, r2
 800d5fc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800d5fe:	e002      	b.n	800d606 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	3b01      	subs	r3, #1
 800d604:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1f9      	bne.n	800d600 <ADC_DelayMicroSecond+0x20>
  }
}
 800d60c:	46c0      	nop			@ (mov r8, r8)
 800d60e:	46c0      	nop			@ (mov r8, r8)
 800d610:	46bd      	mov	sp, r7
 800d612:	b004      	add	sp, #16
 800d614:	bd80      	pop	{r7, pc}
 800d616:	46c0      	nop			@ (mov r8, r8)
 800d618:	200000c8 	.word	0x200000c8
 800d61c:	000f4240 	.word	0x000f4240

0800d620 <__NVIC_EnableIRQ>:
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	0002      	movs	r2, r0
 800d628:	1dfb      	adds	r3, r7, #7
 800d62a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d62c:	1dfb      	adds	r3, r7, #7
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b7f      	cmp	r3, #127	@ 0x7f
 800d632:	d809      	bhi.n	800d648 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d634:	1dfb      	adds	r3, r7, #7
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	001a      	movs	r2, r3
 800d63a:	231f      	movs	r3, #31
 800d63c:	401a      	ands	r2, r3
 800d63e:	4b04      	ldr	r3, [pc, #16]	@ (800d650 <__NVIC_EnableIRQ+0x30>)
 800d640:	2101      	movs	r1, #1
 800d642:	4091      	lsls	r1, r2
 800d644:	000a      	movs	r2, r1
 800d646:	601a      	str	r2, [r3, #0]
}
 800d648:	46c0      	nop			@ (mov r8, r8)
 800d64a:	46bd      	mov	sp, r7
 800d64c:	b002      	add	sp, #8
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	e000e100 	.word	0xe000e100

0800d654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d654:	b590      	push	{r4, r7, lr}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	0002      	movs	r2, r0
 800d65c:	6039      	str	r1, [r7, #0]
 800d65e:	1dfb      	adds	r3, r7, #7
 800d660:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d662:	1dfb      	adds	r3, r7, #7
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	2b7f      	cmp	r3, #127	@ 0x7f
 800d668:	d828      	bhi.n	800d6bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d66a:	4a2f      	ldr	r2, [pc, #188]	@ (800d728 <__NVIC_SetPriority+0xd4>)
 800d66c:	1dfb      	adds	r3, r7, #7
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	b25b      	sxtb	r3, r3
 800d672:	089b      	lsrs	r3, r3, #2
 800d674:	33c0      	adds	r3, #192	@ 0xc0
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	589b      	ldr	r3, [r3, r2]
 800d67a:	1dfa      	adds	r2, r7, #7
 800d67c:	7812      	ldrb	r2, [r2, #0]
 800d67e:	0011      	movs	r1, r2
 800d680:	2203      	movs	r2, #3
 800d682:	400a      	ands	r2, r1
 800d684:	00d2      	lsls	r2, r2, #3
 800d686:	21ff      	movs	r1, #255	@ 0xff
 800d688:	4091      	lsls	r1, r2
 800d68a:	000a      	movs	r2, r1
 800d68c:	43d2      	mvns	r2, r2
 800d68e:	401a      	ands	r2, r3
 800d690:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	019b      	lsls	r3, r3, #6
 800d696:	22ff      	movs	r2, #255	@ 0xff
 800d698:	401a      	ands	r2, r3
 800d69a:	1dfb      	adds	r3, r7, #7
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	0018      	movs	r0, r3
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	4003      	ands	r3, r0
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d6a8:	481f      	ldr	r0, [pc, #124]	@ (800d728 <__NVIC_SetPriority+0xd4>)
 800d6aa:	1dfb      	adds	r3, r7, #7
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	b25b      	sxtb	r3, r3
 800d6b0:	089b      	lsrs	r3, r3, #2
 800d6b2:	430a      	orrs	r2, r1
 800d6b4:	33c0      	adds	r3, #192	@ 0xc0
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800d6ba:	e031      	b.n	800d720 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d6bc:	4a1b      	ldr	r2, [pc, #108]	@ (800d72c <__NVIC_SetPriority+0xd8>)
 800d6be:	1dfb      	adds	r3, r7, #7
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	0019      	movs	r1, r3
 800d6c4:	230f      	movs	r3, #15
 800d6c6:	400b      	ands	r3, r1
 800d6c8:	3b08      	subs	r3, #8
 800d6ca:	089b      	lsrs	r3, r3, #2
 800d6cc:	3306      	adds	r3, #6
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	18d3      	adds	r3, r2, r3
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	1dfa      	adds	r2, r7, #7
 800d6d8:	7812      	ldrb	r2, [r2, #0]
 800d6da:	0011      	movs	r1, r2
 800d6dc:	2203      	movs	r2, #3
 800d6de:	400a      	ands	r2, r1
 800d6e0:	00d2      	lsls	r2, r2, #3
 800d6e2:	21ff      	movs	r1, #255	@ 0xff
 800d6e4:	4091      	lsls	r1, r2
 800d6e6:	000a      	movs	r2, r1
 800d6e8:	43d2      	mvns	r2, r2
 800d6ea:	401a      	ands	r2, r3
 800d6ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	019b      	lsls	r3, r3, #6
 800d6f2:	22ff      	movs	r2, #255	@ 0xff
 800d6f4:	401a      	ands	r2, r3
 800d6f6:	1dfb      	adds	r3, r7, #7
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	0018      	movs	r0, r3
 800d6fc:	2303      	movs	r3, #3
 800d6fe:	4003      	ands	r3, r0
 800d700:	00db      	lsls	r3, r3, #3
 800d702:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d704:	4809      	ldr	r0, [pc, #36]	@ (800d72c <__NVIC_SetPriority+0xd8>)
 800d706:	1dfb      	adds	r3, r7, #7
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	001c      	movs	r4, r3
 800d70c:	230f      	movs	r3, #15
 800d70e:	4023      	ands	r3, r4
 800d710:	3b08      	subs	r3, #8
 800d712:	089b      	lsrs	r3, r3, #2
 800d714:	430a      	orrs	r2, r1
 800d716:	3306      	adds	r3, #6
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	18c3      	adds	r3, r0, r3
 800d71c:	3304      	adds	r3, #4
 800d71e:	601a      	str	r2, [r3, #0]
}
 800d720:	46c0      	nop			@ (mov r8, r8)
 800d722:	46bd      	mov	sp, r7
 800d724:	b003      	add	sp, #12
 800d726:	bd90      	pop	{r4, r7, pc}
 800d728:	e000e100 	.word	0xe000e100
 800d72c:	e000ed00 	.word	0xe000ed00

0800d730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	1e5a      	subs	r2, r3, #1
 800d73c:	2380      	movs	r3, #128	@ 0x80
 800d73e:	045b      	lsls	r3, r3, #17
 800d740:	429a      	cmp	r2, r3
 800d742:	d301      	bcc.n	800d748 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d744:	2301      	movs	r3, #1
 800d746:	e010      	b.n	800d76a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d748:	4b0a      	ldr	r3, [pc, #40]	@ (800d774 <SysTick_Config+0x44>)
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	3a01      	subs	r2, #1
 800d74e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d750:	2301      	movs	r3, #1
 800d752:	425b      	negs	r3, r3
 800d754:	2103      	movs	r1, #3
 800d756:	0018      	movs	r0, r3
 800d758:	f7ff ff7c 	bl	800d654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d75c:	4b05      	ldr	r3, [pc, #20]	@ (800d774 <SysTick_Config+0x44>)
 800d75e:	2200      	movs	r2, #0
 800d760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d762:	4b04      	ldr	r3, [pc, #16]	@ (800d774 <SysTick_Config+0x44>)
 800d764:	2207      	movs	r2, #7
 800d766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d768:	2300      	movs	r3, #0
}
 800d76a:	0018      	movs	r0, r3
 800d76c:	46bd      	mov	sp, r7
 800d76e:	b002      	add	sp, #8
 800d770:	bd80      	pop	{r7, pc}
 800d772:	46c0      	nop			@ (mov r8, r8)
 800d774:	e000e010 	.word	0xe000e010

0800d778 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60b9      	str	r1, [r7, #8]
 800d780:	607a      	str	r2, [r7, #4]
 800d782:	210f      	movs	r1, #15
 800d784:	187b      	adds	r3, r7, r1
 800d786:	1c02      	adds	r2, r0, #0
 800d788:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	187b      	adds	r3, r7, r1
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	b25b      	sxtb	r3, r3
 800d792:	0011      	movs	r1, r2
 800d794:	0018      	movs	r0, r3
 800d796:	f7ff ff5d 	bl	800d654 <__NVIC_SetPriority>
}
 800d79a:	46c0      	nop			@ (mov r8, r8)
 800d79c:	46bd      	mov	sp, r7
 800d79e:	b004      	add	sp, #16
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	0002      	movs	r2, r0
 800d7aa:	1dfb      	adds	r3, r7, #7
 800d7ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d7ae:	1dfb      	adds	r3, r7, #7
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	b25b      	sxtb	r3, r3
 800d7b4:	0018      	movs	r0, r3
 800d7b6:	f7ff ff33 	bl	800d620 <__NVIC_EnableIRQ>
}
 800d7ba:	46c0      	nop			@ (mov r8, r8)
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	b002      	add	sp, #8
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	0018      	movs	r0, r3
 800d7ce:	f7ff ffaf 	bl	800d730 <SysTick_Config>
 800d7d2:	0003      	movs	r3, r0
}
 800d7d4:	0018      	movs	r0, r3
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	b002      	add	sp, #8
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e061      	b.n	800d8b2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a32      	ldr	r2, [pc, #200]	@ (800d8bc <HAL_DMA_Init+0xe0>)
 800d7f4:	4694      	mov	ip, r2
 800d7f6:	4463      	add	r3, ip
 800d7f8:	2114      	movs	r1, #20
 800d7fa:	0018      	movs	r0, r3
 800d7fc:	f7f2 fcd2 	bl	80001a4 <__udivsi3>
 800d800:	0003      	movs	r3, r0
 800d802:	009a      	lsls	r2, r3, #2
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a2d      	ldr	r2, [pc, #180]	@ (800d8c0 <HAL_DMA_Init+0xe4>)
 800d80c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2225      	movs	r2, #37	@ 0x25
 800d812:	2102      	movs	r1, #2
 800d814:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4a28      	ldr	r2, [pc, #160]	@ (800d8c4 <HAL_DMA_Init+0xe8>)
 800d822:	4013      	ands	r3, r2
 800d824:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800d82e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d83a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	699b      	ldr	r3, [r3, #24]
 800d840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a1b      	ldr	r3, [r3, #32]
 800d84c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	4313      	orrs	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	689a      	ldr	r2, [r3, #8]
 800d860:	2380      	movs	r3, #128	@ 0x80
 800d862:	01db      	lsls	r3, r3, #7
 800d864:	429a      	cmp	r2, r3
 800d866:	d018      	beq.n	800d89a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800d868:	4b17      	ldr	r3, [pc, #92]	@ (800d8c8 <HAL_DMA_Init+0xec>)
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d870:	211c      	movs	r1, #28
 800d872:	400b      	ands	r3, r1
 800d874:	210f      	movs	r1, #15
 800d876:	4099      	lsls	r1, r3
 800d878:	000b      	movs	r3, r1
 800d87a:	43d9      	mvns	r1, r3
 800d87c:	4b12      	ldr	r3, [pc, #72]	@ (800d8c8 <HAL_DMA_Init+0xec>)
 800d87e:	400a      	ands	r2, r1
 800d880:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800d882:	4b11      	ldr	r3, [pc, #68]	@ (800d8c8 <HAL_DMA_Init+0xec>)
 800d884:	6819      	ldr	r1, [r3, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685a      	ldr	r2, [r3, #4]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d88e:	201c      	movs	r0, #28
 800d890:	4003      	ands	r3, r0
 800d892:	409a      	lsls	r2, r3
 800d894:	4b0c      	ldr	r3, [pc, #48]	@ (800d8c8 <HAL_DMA_Init+0xec>)
 800d896:	430a      	orrs	r2, r1
 800d898:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2225      	movs	r2, #37	@ 0x25
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2224      	movs	r2, #36	@ 0x24
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	0018      	movs	r0, r3
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	b004      	add	sp, #16
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	bffdfff8 	.word	0xbffdfff8
 800d8c0:	40020000 	.word	0x40020000
 800d8c4:	ffff800f 	.word	0xffff800f
 800d8c8:	400200a8 	.word	0x400200a8

0800d8cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8da:	2317      	movs	r3, #23
 800d8dc:	18fb      	adds	r3, r7, r3
 800d8de:	2200      	movs	r2, #0
 800d8e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2224      	movs	r2, #36	@ 0x24
 800d8e6:	5c9b      	ldrb	r3, [r3, r2]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d101      	bne.n	800d8f0 <HAL_DMA_Start_IT+0x24>
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	e04f      	b.n	800d990 <HAL_DMA_Start_IT+0xc4>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2224      	movs	r2, #36	@ 0x24
 800d8f4:	2101      	movs	r1, #1
 800d8f6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2225      	movs	r2, #37	@ 0x25
 800d8fc:	5c9b      	ldrb	r3, [r3, r2]
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b01      	cmp	r3, #1
 800d902:	d13a      	bne.n	800d97a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2225      	movs	r2, #37	@ 0x25
 800d908:	2102      	movs	r1, #2
 800d90a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2101      	movs	r1, #1
 800d91e:	438a      	bics	r2, r1
 800d920:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	68b9      	ldr	r1, [r7, #8]
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f000 f976 	bl	800dc1a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d932:	2b00      	cmp	r3, #0
 800d934:	d008      	beq.n	800d948 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	210e      	movs	r1, #14
 800d942:	430a      	orrs	r2, r1
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	e00f      	b.n	800d968 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2104      	movs	r1, #4
 800d954:	438a      	bics	r2, r1
 800d956:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	210a      	movs	r1, #10
 800d964:	430a      	orrs	r2, r1
 800d966:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2101      	movs	r1, #1
 800d974:	430a      	orrs	r2, r1
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	e007      	b.n	800d98a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2224      	movs	r2, #36	@ 0x24
 800d97e:	2100      	movs	r1, #0
 800d980:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800d982:	2317      	movs	r3, #23
 800d984:	18fb      	adds	r3, r7, r3
 800d986:	2202      	movs	r2, #2
 800d988:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800d98a:	2317      	movs	r3, #23
 800d98c:	18fb      	adds	r3, r7, r3
 800d98e:	781b      	ldrb	r3, [r3, #0]
}
 800d990:	0018      	movs	r0, r3
 800d992:	46bd      	mov	sp, r7
 800d994:	b006      	add	sp, #24
 800d996:	bd80      	pop	{r7, pc}

0800d998 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9a0:	230f      	movs	r3, #15
 800d9a2:	18fb      	adds	r3, r7, r3
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2225      	movs	r2, #37	@ 0x25
 800d9ac:	5c9b      	ldrb	r3, [r3, r2]
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d008      	beq.n	800d9c6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2204      	movs	r2, #4
 800d9b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2224      	movs	r2, #36	@ 0x24
 800d9be:	2100      	movs	r1, #0
 800d9c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e024      	b.n	800da10 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	210e      	movs	r1, #14
 800d9d2:	438a      	bics	r2, r1
 800d9d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	438a      	bics	r2, r1
 800d9e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ea:	221c      	movs	r2, #28
 800d9ec:	401a      	ands	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	4091      	lsls	r1, r2
 800d9f6:	000a      	movs	r2, r1
 800d9f8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2225      	movs	r2, #37	@ 0x25
 800d9fe:	2101      	movs	r1, #1
 800da00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2224      	movs	r2, #36	@ 0x24
 800da06:	2100      	movs	r1, #0
 800da08:	5499      	strb	r1, [r3, r2]

    return status;
 800da0a:	230f      	movs	r3, #15
 800da0c:	18fb      	adds	r3, r7, r3
 800da0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da10:	0018      	movs	r0, r3
 800da12:	46bd      	mov	sp, r7
 800da14:	b004      	add	sp, #16
 800da16:	bd80      	pop	{r7, pc}

0800da18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da20:	210f      	movs	r1, #15
 800da22:	187b      	adds	r3, r7, r1
 800da24:	2200      	movs	r2, #0
 800da26:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2225      	movs	r2, #37	@ 0x25
 800da2c:	5c9b      	ldrb	r3, [r3, r2]
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b02      	cmp	r3, #2
 800da32:	d006      	beq.n	800da42 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2204      	movs	r2, #4
 800da38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800da3a:	187b      	adds	r3, r7, r1
 800da3c:	2201      	movs	r2, #1
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	e02a      	b.n	800da98 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	210e      	movs	r1, #14
 800da4e:	438a      	bics	r2, r1
 800da50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2101      	movs	r1, #1
 800da5e:	438a      	bics	r2, r1
 800da60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da66:	221c      	movs	r2, #28
 800da68:	401a      	ands	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6e:	2101      	movs	r1, #1
 800da70:	4091      	lsls	r1, r2
 800da72:	000a      	movs	r2, r1
 800da74:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2225      	movs	r2, #37	@ 0x25
 800da7a:	2101      	movs	r1, #1
 800da7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2224      	movs	r2, #36	@ 0x24
 800da82:	2100      	movs	r1, #0
 800da84:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d004      	beq.n	800da98 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	0010      	movs	r0, r2
 800da96:	4798      	blx	r3
    }
  }
  return status;
 800da98:	230f      	movs	r3, #15
 800da9a:	18fb      	adds	r3, r7, r3
 800da9c:	781b      	ldrb	r3, [r3, #0]
}
 800da9e:	0018      	movs	r0, r3
 800daa0:	46bd      	mov	sp, r7
 800daa2:	b004      	add	sp, #16
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dac2:	221c      	movs	r2, #28
 800dac4:	4013      	ands	r3, r2
 800dac6:	2204      	movs	r2, #4
 800dac8:	409a      	lsls	r2, r3
 800daca:	0013      	movs	r3, r2
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	4013      	ands	r3, r2
 800dad0:	d026      	beq.n	800db20 <HAL_DMA_IRQHandler+0x7a>
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	2204      	movs	r2, #4
 800dad6:	4013      	ands	r3, r2
 800dad8:	d022      	beq.n	800db20 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2220      	movs	r2, #32
 800dae2:	4013      	ands	r3, r2
 800dae4:	d107      	bne.n	800daf6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2104      	movs	r1, #4
 800daf2:	438a      	bics	r2, r1
 800daf4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dafa:	221c      	movs	r2, #28
 800dafc:	401a      	ands	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db02:	2104      	movs	r1, #4
 800db04:	4091      	lsls	r1, r2
 800db06:	000a      	movs	r2, r1
 800db08:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d100      	bne.n	800db14 <HAL_DMA_IRQHandler+0x6e>
 800db12:	e071      	b.n	800dbf8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	0010      	movs	r0, r2
 800db1c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800db1e:	e06b      	b.n	800dbf8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db24:	221c      	movs	r2, #28
 800db26:	4013      	ands	r3, r2
 800db28:	2202      	movs	r2, #2
 800db2a:	409a      	lsls	r2, r3
 800db2c:	0013      	movs	r3, r2
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	4013      	ands	r3, r2
 800db32:	d02d      	beq.n	800db90 <HAL_DMA_IRQHandler+0xea>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2202      	movs	r2, #2
 800db38:	4013      	ands	r3, r2
 800db3a:	d029      	beq.n	800db90 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2220      	movs	r2, #32
 800db44:	4013      	ands	r3, r2
 800db46:	d10b      	bne.n	800db60 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	210a      	movs	r1, #10
 800db54:	438a      	bics	r2, r1
 800db56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2225      	movs	r2, #37	@ 0x25
 800db5c:	2101      	movs	r1, #1
 800db5e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db64:	221c      	movs	r2, #28
 800db66:	401a      	ands	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db6c:	2102      	movs	r1, #2
 800db6e:	4091      	lsls	r1, r2
 800db70:	000a      	movs	r2, r1
 800db72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2224      	movs	r2, #36	@ 0x24
 800db78:	2100      	movs	r1, #0
 800db7a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d039      	beq.n	800dbf8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	0010      	movs	r0, r2
 800db8c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800db8e:	e033      	b.n	800dbf8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db94:	221c      	movs	r2, #28
 800db96:	4013      	ands	r3, r2
 800db98:	2208      	movs	r2, #8
 800db9a:	409a      	lsls	r2, r3
 800db9c:	0013      	movs	r3, r2
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4013      	ands	r3, r2
 800dba2:	d02a      	beq.n	800dbfa <HAL_DMA_IRQHandler+0x154>
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	2208      	movs	r2, #8
 800dba8:	4013      	ands	r3, r2
 800dbaa:	d026      	beq.n	800dbfa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	210e      	movs	r1, #14
 800dbb8:	438a      	bics	r2, r1
 800dbba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbc0:	221c      	movs	r2, #28
 800dbc2:	401a      	ands	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbc8:	2101      	movs	r1, #1
 800dbca:	4091      	lsls	r1, r2
 800dbcc:	000a      	movs	r2, r1
 800dbce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2225      	movs	r2, #37	@ 0x25
 800dbda:	2101      	movs	r1, #1
 800dbdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2224      	movs	r2, #36	@ 0x24
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d005      	beq.n	800dbfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	0010      	movs	r0, r2
 800dbf6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800dbf8:	46c0      	nop			@ (mov r8, r8)
 800dbfa:	46c0      	nop			@ (mov r8, r8)
}
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	b004      	add	sp, #16
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2225      	movs	r2, #37	@ 0x25
 800dc0e:	5c9b      	ldrb	r3, [r3, r2]
 800dc10:	b2db      	uxtb	r3, r3
}
 800dc12:	0018      	movs	r0, r3
 800dc14:	46bd      	mov	sp, r7
 800dc16:	b002      	add	sp, #8
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	60f8      	str	r0, [r7, #12]
 800dc22:	60b9      	str	r1, [r7, #8]
 800dc24:	607a      	str	r2, [r7, #4]
 800dc26:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc2c:	221c      	movs	r2, #28
 800dc2e:	401a      	ands	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc34:	2101      	movs	r1, #1
 800dc36:	4091      	lsls	r1, r2
 800dc38:	000a      	movs	r2, r1
 800dc3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	2b10      	cmp	r3, #16
 800dc4a:	d108      	bne.n	800dc5e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800dc5c:	e007      	b.n	800dc6e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	60da      	str	r2, [r3, #12]
}
 800dc6e:	46c0      	nop			@ (mov r8, r8)
 800dc70:	46bd      	mov	sp, r7
 800dc72:	b004      	add	sp, #16
 800dc74:	bd80      	pop	{r7, pc}
	...

0800dc78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800dc80:	f7ff f904 	bl	800ce8c <HAL_GetTick>
 800dc84:	0003      	movs	r3, r0
 800dc86:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800dc88:	e00f      	b.n	800dcaa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	d00c      	beq.n	800dcaa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d007      	beq.n	800dca6 <FLASH_WaitForLastOperation+0x2e>
 800dc96:	f7ff f8f9 	bl	800ce8c <HAL_GetTick>
 800dc9a:	0002      	movs	r2, r0
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d201      	bcs.n	800dcaa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e052      	b.n	800dd50 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800dcaa:	4b2b      	ldr	r3, [pc, #172]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d0e9      	beq.n	800dc8a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800dcb6:	4b28      	ldr	r3, [pc, #160]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dcb8:	699b      	ldr	r3, [r3, #24]
 800dcba:	2202      	movs	r2, #2
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d102      	bne.n	800dcc8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800dcc2:	4b25      	ldr	r3, [pc, #148]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800dcc8:	4b23      	ldr	r3, [pc, #140]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dcca:	699a      	ldr	r2, [r3, #24]
 800dccc:	2380      	movs	r3, #128	@ 0x80
 800dcce:	005b      	lsls	r3, r3, #1
 800dcd0:	401a      	ands	r2, r3
 800dcd2:	2380      	movs	r3, #128	@ 0x80
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d035      	beq.n	800dd46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800dcda:	4b1f      	ldr	r3, [pc, #124]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dcdc:	699a      	ldr	r2, [r3, #24]
 800dcde:	2380      	movs	r3, #128	@ 0x80
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800dce4:	2380      	movs	r3, #128	@ 0x80
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d02c      	beq.n	800dd46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800dcec:	4b1a      	ldr	r3, [pc, #104]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dcee:	699a      	ldr	r2, [r3, #24]
 800dcf0:	2380      	movs	r3, #128	@ 0x80
 800dcf2:	00db      	lsls	r3, r3, #3
 800dcf4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800dcf6:	2380      	movs	r3, #128	@ 0x80
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d023      	beq.n	800dd46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800dcfe:	4b16      	ldr	r3, [pc, #88]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dd00:	699a      	ldr	r2, [r3, #24]
 800dd02:	2380      	movs	r3, #128	@ 0x80
 800dd04:	011b      	lsls	r3, r3, #4
 800dd06:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800dd08:	2380      	movs	r3, #128	@ 0x80
 800dd0a:	011b      	lsls	r3, r3, #4
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d01a      	beq.n	800dd46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800dd10:	4b11      	ldr	r3, [pc, #68]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dd12:	699a      	ldr	r2, [r3, #24]
 800dd14:	2380      	movs	r3, #128	@ 0x80
 800dd16:	019b      	lsls	r3, r3, #6
 800dd18:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800dd1a:	2380      	movs	r3, #128	@ 0x80
 800dd1c:	019b      	lsls	r3, r3, #6
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d011      	beq.n	800dd46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800dd22:	4b0d      	ldr	r3, [pc, #52]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dd24:	699a      	ldr	r2, [r3, #24]
 800dd26:	2380      	movs	r3, #128	@ 0x80
 800dd28:	029b      	lsls	r3, r3, #10
 800dd2a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800dd2c:	2380      	movs	r3, #128	@ 0x80
 800dd2e:	029b      	lsls	r3, r3, #10
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d008      	beq.n	800dd46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800dd34:	4b08      	ldr	r3, [pc, #32]	@ (800dd58 <FLASH_WaitForLastOperation+0xe0>)
 800dd36:	699a      	ldr	r2, [r3, #24]
 800dd38:	2380      	movs	r3, #128	@ 0x80
 800dd3a:	025b      	lsls	r3, r3, #9
 800dd3c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800dd3e:	2380      	movs	r3, #128	@ 0x80
 800dd40:	025b      	lsls	r3, r3, #9
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d103      	bne.n	800dd4e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800dd46:	f000 f809 	bl	800dd5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e000      	b.n	800dd50 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	0018      	movs	r0, r3
 800dd52:	46bd      	mov	sp, r7
 800dd54:	b004      	add	sp, #16
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	40022000 	.word	0x40022000

0800dd5c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800dd66:	4b49      	ldr	r3, [pc, #292]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800dd68:	699a      	ldr	r2, [r3, #24]
 800dd6a:	2380      	movs	r3, #128	@ 0x80
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	401a      	ands	r2, r3
 800dd70:	2380      	movs	r3, #128	@ 0x80
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d10a      	bne.n	800dd8e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800dd78:	4b45      	ldr	r3, [pc, #276]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800dd7a:	695b      	ldr	r3, [r3, #20]
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	431a      	orrs	r2, r3
 800dd80:	4b43      	ldr	r3, [pc, #268]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800dd82:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2280      	movs	r2, #128	@ 0x80
 800dd88:	0052      	lsls	r2, r2, #1
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800dd8e:	4b3f      	ldr	r3, [pc, #252]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800dd90:	699a      	ldr	r2, [r3, #24]
 800dd92:	2380      	movs	r3, #128	@ 0x80
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	401a      	ands	r2, r3
 800dd98:	2380      	movs	r3, #128	@ 0x80
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d10a      	bne.n	800ddb6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800dda0:	4b3b      	ldr	r3, [pc, #236]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	2201      	movs	r2, #1
 800dda6:	431a      	orrs	r2, r3
 800dda8:	4b39      	ldr	r3, [pc, #228]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800ddaa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2280      	movs	r2, #128	@ 0x80
 800ddb0:	0092      	lsls	r2, r2, #2
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ddb6:	4b35      	ldr	r3, [pc, #212]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800ddb8:	699a      	ldr	r2, [r3, #24]
 800ddba:	2380      	movs	r3, #128	@ 0x80
 800ddbc:	00db      	lsls	r3, r3, #3
 800ddbe:	401a      	ands	r2, r3
 800ddc0:	2380      	movs	r3, #128	@ 0x80
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d10a      	bne.n	800ddde <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ddc8:	4b31      	ldr	r3, [pc, #196]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800ddca:	695b      	ldr	r3, [r3, #20]
 800ddcc:	2208      	movs	r2, #8
 800ddce:	431a      	orrs	r2, r3
 800ddd0:	4b2f      	ldr	r3, [pc, #188]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800ddd2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2280      	movs	r2, #128	@ 0x80
 800ddd8:	00d2      	lsls	r2, r2, #3
 800ddda:	4313      	orrs	r3, r2
 800dddc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ddde:	4b2b      	ldr	r3, [pc, #172]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800dde0:	699a      	ldr	r2, [r3, #24]
 800dde2:	2380      	movs	r3, #128	@ 0x80
 800dde4:	011b      	lsls	r3, r3, #4
 800dde6:	401a      	ands	r2, r3
 800dde8:	2380      	movs	r3, #128	@ 0x80
 800ddea:	011b      	lsls	r3, r3, #4
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d10a      	bne.n	800de06 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800ddf0:	4b27      	ldr	r3, [pc, #156]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	2204      	movs	r2, #4
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	4b25      	ldr	r3, [pc, #148]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800ddfa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2280      	movs	r2, #128	@ 0x80
 800de00:	0112      	lsls	r2, r2, #4
 800de02:	4313      	orrs	r3, r2
 800de04:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800de06:	4b21      	ldr	r3, [pc, #132]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800de08:	699a      	ldr	r2, [r3, #24]
 800de0a:	2380      	movs	r3, #128	@ 0x80
 800de0c:	019b      	lsls	r3, r3, #6
 800de0e:	401a      	ands	r2, r3
 800de10:	2380      	movs	r3, #128	@ 0x80
 800de12:	019b      	lsls	r3, r3, #6
 800de14:	429a      	cmp	r2, r3
 800de16:	d10a      	bne.n	800de2e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800de18:	4b1d      	ldr	r3, [pc, #116]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	2210      	movs	r2, #16
 800de1e:	431a      	orrs	r2, r3
 800de20:	4b1b      	ldr	r3, [pc, #108]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800de22:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2280      	movs	r2, #128	@ 0x80
 800de28:	0192      	lsls	r2, r2, #6
 800de2a:	4313      	orrs	r3, r2
 800de2c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800de2e:	4b17      	ldr	r3, [pc, #92]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800de30:	699a      	ldr	r2, [r3, #24]
 800de32:	2380      	movs	r3, #128	@ 0x80
 800de34:	029b      	lsls	r3, r3, #10
 800de36:	401a      	ands	r2, r3
 800de38:	2380      	movs	r3, #128	@ 0x80
 800de3a:	029b      	lsls	r3, r3, #10
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d109      	bne.n	800de54 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800de40:	4b13      	ldr	r3, [pc, #76]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800de42:	695b      	ldr	r3, [r3, #20]
 800de44:	2220      	movs	r2, #32
 800de46:	431a      	orrs	r2, r3
 800de48:	4b11      	ldr	r3, [pc, #68]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800de4a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2220      	movs	r2, #32
 800de50:	4313      	orrs	r3, r2
 800de52:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800de54:	4b0d      	ldr	r3, [pc, #52]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800de56:	699a      	ldr	r2, [r3, #24]
 800de58:	2380      	movs	r3, #128	@ 0x80
 800de5a:	025b      	lsls	r3, r3, #9
 800de5c:	401a      	ands	r2, r3
 800de5e:	2380      	movs	r3, #128	@ 0x80
 800de60:	025b      	lsls	r3, r3, #9
 800de62:	429a      	cmp	r2, r3
 800de64:	d10a      	bne.n	800de7c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800de66:	4b0a      	ldr	r3, [pc, #40]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800de68:	695b      	ldr	r3, [r3, #20]
 800de6a:	2240      	movs	r2, #64	@ 0x40
 800de6c:	431a      	orrs	r2, r3
 800de6e:	4b08      	ldr	r3, [pc, #32]	@ (800de90 <FLASH_SetErrorCode+0x134>)
 800de70:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2280      	movs	r2, #128	@ 0x80
 800de76:	0252      	lsls	r2, r2, #9
 800de78:	4313      	orrs	r3, r2
 800de7a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800de7c:	4b03      	ldr	r3, [pc, #12]	@ (800de8c <FLASH_SetErrorCode+0x130>)
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	619a      	str	r2, [r3, #24]
}  
 800de82:	46c0      	nop			@ (mov r8, r8)
 800de84:	46bd      	mov	sp, r7
 800de86:	b002      	add	sp, #8
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	46c0      	nop			@ (mov r8, r8)
 800de8c:	40022000 	.word	0x40022000
 800de90:	200024cc 	.word	0x200024cc

0800de94 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800de9a:	4b12      	ldr	r3, [pc, #72]	@ (800dee4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	2201      	movs	r2, #1
 800dea0:	4013      	ands	r3, r2
 800dea2:	d019      	beq.n	800ded8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dea4:	f3ef 8310 	mrs	r3, PRIMASK
 800dea8:	607b      	str	r3, [r7, #4]
  return(result);
 800deaa:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800deac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800deae:	b672      	cpsid	i
}
 800deb0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800deb2:	4b0c      	ldr	r3, [pc, #48]	@ (800dee4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800deb4:	4a0c      	ldr	r2, [pc, #48]	@ (800dee8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800deb6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800deb8:	4b0a      	ldr	r3, [pc, #40]	@ (800dee4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800deba:	4a0c      	ldr	r2, [pc, #48]	@ (800deec <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800debc:	60da      	str	r2, [r3, #12]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	f383 8810 	msr	PRIMASK, r3
}
 800dec8:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800deca:	4b06      	ldr	r3, [pc, #24]	@ (800dee4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	4013      	ands	r3, r2
 800ded2:	d001      	beq.n	800ded8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e000      	b.n	800deda <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ded8:	2300      	movs	r3, #0
}
 800deda:	0018      	movs	r0, r3
 800dedc:	46bd      	mov	sp, r7
 800dede:	b004      	add	sp, #16
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	46c0      	nop			@ (mov r8, r8)
 800dee4:	40022000 	.word	0x40022000
 800dee8:	89abcdef 	.word	0x89abcdef
 800deec:	02030405 	.word	0x02030405

0800def0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800def4:	4b04      	ldr	r3, [pc, #16]	@ (800df08 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800def6:	685a      	ldr	r2, [r3, #4]
 800def8:	4b03      	ldr	r3, [pc, #12]	@ (800df08 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800defa:	2101      	movs	r1, #1
 800defc:	430a      	orrs	r2, r1
 800defe:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	0018      	movs	r0, r3
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	40022000 	.word	0x40022000

0800df0c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800df0c:	b5b0      	push	{r4, r5, r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df14:	250f      	movs	r5, #15
 800df16:	197b      	adds	r3, r7, r5
 800df18:	2200      	movs	r2, #0
 800df1a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800df1c:	197c      	adds	r4, r7, r5
 800df1e:	4b0f      	ldr	r3, [pc, #60]	@ (800df5c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800df20:	0018      	movs	r0, r3
 800df22:	f7ff fea9 	bl	800dc78 <FLASH_WaitForLastOperation>
 800df26:	0003      	movs	r3, r0
 800df28:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800df2a:	0029      	movs	r1, r5
 800df2c:	187b      	adds	r3, r7, r1
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10c      	bne.n	800df4e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800df34:	4b0a      	ldr	r3, [pc, #40]	@ (800df60 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800df36:	2200      	movs	r2, #0
 800df38:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800df40:	187c      	adds	r4, r7, r1
 800df42:	4b06      	ldr	r3, [pc, #24]	@ (800df5c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800df44:	0018      	movs	r0, r3
 800df46:	f7ff fe97 	bl	800dc78 <FLASH_WaitForLastOperation>
 800df4a:	0003      	movs	r3, r0
 800df4c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800df4e:	230f      	movs	r3, #15
 800df50:	18fb      	adds	r3, r7, r3
 800df52:	781b      	ldrb	r3, [r3, #0]
}  
 800df54:	0018      	movs	r0, r3
 800df56:	46bd      	mov	sp, r7
 800df58:	b004      	add	sp, #16
 800df5a:	bdb0      	pop	{r4, r5, r7, pc}
 800df5c:	0000c350 	.word	0x0000c350
 800df60:	200024cc 	.word	0x200024cc

0800df64 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800df64:	b5b0      	push	{r4, r5, r7, lr}
 800df66:	b086      	sub	sp, #24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800df70:	2317      	movs	r3, #23
 800df72:	18fb      	adds	r3, r7, r3
 800df74:	2201      	movs	r2, #1
 800df76:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800df78:	4b24      	ldr	r3, [pc, #144]	@ (800e00c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800df7a:	7c1b      	ldrb	r3, [r3, #16]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d101      	bne.n	800df84 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800df80:	2302      	movs	r3, #2
 800df82:	e03e      	b.n	800e002 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800df84:	4b21      	ldr	r3, [pc, #132]	@ (800e00c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800df86:	2201      	movs	r2, #1
 800df88:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800df8a:	2517      	movs	r5, #23
 800df8c:	197c      	adds	r4, r7, r5
 800df8e:	4b20      	ldr	r3, [pc, #128]	@ (800e010 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800df90:	0018      	movs	r0, r3
 800df92:	f7ff fe71 	bl	800dc78 <FLASH_WaitForLastOperation>
 800df96:	0003      	movs	r3, r0
 800df98:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800df9a:	197b      	adds	r3, r7, r5
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d129      	bne.n	800dff6 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800dfa2:	4b1a      	ldr	r3, [pc, #104]	@ (800e00c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2b02      	cmp	r3, #2
 800dfac:	d103      	bne.n	800dfb6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	e013      	b.n	800dfde <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d104      	bne.n	800dfc6 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	b292      	uxth	r2, r2
 800dfc2:	801a      	strh	r2, [r3, #0]
 800dfc4:	e00b      	b.n	800dfde <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d104      	bne.n	800dfd6 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	b2d2      	uxtb	r2, r2
 800dfd2:	701a      	strb	r2, [r3, #0]
 800dfd4:	e003      	b.n	800dfde <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800dfd6:	2317      	movs	r3, #23
 800dfd8:	18fb      	adds	r3, r7, r3
 800dfda:	2201      	movs	r2, #1
 800dfdc:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800dfde:	2217      	movs	r2, #23
 800dfe0:	18bb      	adds	r3, r7, r2
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d106      	bne.n	800dff6 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dfe8:	18bc      	adds	r4, r7, r2
 800dfea:	4b09      	ldr	r3, [pc, #36]	@ (800e010 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800dfec:	0018      	movs	r0, r3
 800dfee:	f7ff fe43 	bl	800dc78 <FLASH_WaitForLastOperation>
 800dff2:	0003      	movs	r3, r0
 800dff4:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800dff6:	4b05      	ldr	r3, [pc, #20]	@ (800e00c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	741a      	strb	r2, [r3, #16]

  return status;
 800dffc:	2317      	movs	r3, #23
 800dffe:	18fb      	adds	r3, r7, r3
 800e000:	781b      	ldrb	r3, [r3, #0]
}
 800e002:	0018      	movs	r0, r3
 800e004:	46bd      	mov	sp, r7
 800e006:	b006      	add	sp, #24
 800e008:	bdb0      	pop	{r4, r5, r7, pc}
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	200024cc 	.word	0x200024cc
 800e010:	0000c350 	.word	0x0000c350

0800e014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b086      	sub	sp, #24
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e01e:	2300      	movs	r3, #0
 800e020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e022:	2300      	movs	r3, #0
 800e024:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800e026:	2300      	movs	r3, #0
 800e028:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800e02a:	e155      	b.n	800e2d8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2101      	movs	r1, #1
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	4091      	lsls	r1, r2
 800e036:	000a      	movs	r2, r1
 800e038:	4013      	ands	r3, r2
 800e03a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d100      	bne.n	800e044 <HAL_GPIO_Init+0x30>
 800e042:	e146      	b.n	800e2d2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	2203      	movs	r2, #3
 800e04a:	4013      	ands	r3, r2
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d005      	beq.n	800e05c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	2203      	movs	r2, #3
 800e056:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d130      	bne.n	800e0be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	2203      	movs	r2, #3
 800e068:	409a      	lsls	r2, r3
 800e06a:	0013      	movs	r3, r2
 800e06c:	43da      	mvns	r2, r3
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	4013      	ands	r3, r2
 800e072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	68da      	ldr	r2, [r3, #12]
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	409a      	lsls	r2, r3
 800e07e:	0013      	movs	r3, r2
 800e080:	693a      	ldr	r2, [r7, #16]
 800e082:	4313      	orrs	r3, r2
 800e084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	693a      	ldr	r2, [r7, #16]
 800e08a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e092:	2201      	movs	r2, #1
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	409a      	lsls	r2, r3
 800e098:	0013      	movs	r3, r2
 800e09a:	43da      	mvns	r2, r3
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	4013      	ands	r3, r2
 800e0a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	091b      	lsrs	r3, r3, #4
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	401a      	ands	r2, r3
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	409a      	lsls	r2, r3
 800e0b0:	0013      	movs	r3, r2
 800e0b2:	693a      	ldr	r2, [r7, #16]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	2203      	movs	r2, #3
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	2b03      	cmp	r3, #3
 800e0c8:	d017      	beq.n	800e0fa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	2203      	movs	r2, #3
 800e0d6:	409a      	lsls	r2, r3
 800e0d8:	0013      	movs	r3, r2
 800e0da:	43da      	mvns	r2, r3
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	4013      	ands	r3, r2
 800e0e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	689a      	ldr	r2, [r3, #8]
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	005b      	lsls	r3, r3, #1
 800e0ea:	409a      	lsls	r2, r3
 800e0ec:	0013      	movs	r3, r2
 800e0ee:	693a      	ldr	r2, [r7, #16]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	2203      	movs	r2, #3
 800e100:	4013      	ands	r3, r2
 800e102:	2b02      	cmp	r3, #2
 800e104:	d123      	bne.n	800e14e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	08da      	lsrs	r2, r3, #3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3208      	adds	r2, #8
 800e10e:	0092      	lsls	r2, r2, #2
 800e110:	58d3      	ldr	r3, [r2, r3]
 800e112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	2207      	movs	r2, #7
 800e118:	4013      	ands	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	220f      	movs	r2, #15
 800e11e:	409a      	lsls	r2, r3
 800e120:	0013      	movs	r3, r2
 800e122:	43da      	mvns	r2, r3
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	4013      	ands	r3, r2
 800e128:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	691a      	ldr	r2, [r3, #16]
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	2107      	movs	r1, #7
 800e132:	400b      	ands	r3, r1
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	409a      	lsls	r2, r3
 800e138:	0013      	movs	r3, r2
 800e13a:	693a      	ldr	r2, [r7, #16]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	08da      	lsrs	r2, r3, #3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	3208      	adds	r2, #8
 800e148:	0092      	lsls	r2, r2, #2
 800e14a:	6939      	ldr	r1, [r7, #16]
 800e14c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	2203      	movs	r2, #3
 800e15a:	409a      	lsls	r2, r3
 800e15c:	0013      	movs	r3, r2
 800e15e:	43da      	mvns	r2, r3
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	4013      	ands	r3, r2
 800e164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	2203      	movs	r2, #3
 800e16c:	401a      	ands	r2, r3
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	409a      	lsls	r2, r3
 800e174:	0013      	movs	r3, r2
 800e176:	693a      	ldr	r2, [r7, #16]
 800e178:	4313      	orrs	r3, r2
 800e17a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	693a      	ldr	r2, [r7, #16]
 800e180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	685a      	ldr	r2, [r3, #4]
 800e186:	23c0      	movs	r3, #192	@ 0xc0
 800e188:	029b      	lsls	r3, r3, #10
 800e18a:	4013      	ands	r3, r2
 800e18c:	d100      	bne.n	800e190 <HAL_GPIO_Init+0x17c>
 800e18e:	e0a0      	b.n	800e2d2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e190:	4b57      	ldr	r3, [pc, #348]	@ (800e2f0 <HAL_GPIO_Init+0x2dc>)
 800e192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e194:	4b56      	ldr	r3, [pc, #344]	@ (800e2f0 <HAL_GPIO_Init+0x2dc>)
 800e196:	2101      	movs	r1, #1
 800e198:	430a      	orrs	r2, r1
 800e19a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800e19c:	4a55      	ldr	r2, [pc, #340]	@ (800e2f4 <HAL_GPIO_Init+0x2e0>)
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	089b      	lsrs	r3, r3, #2
 800e1a2:	3302      	adds	r3, #2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	589b      	ldr	r3, [r3, r2]
 800e1a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2203      	movs	r2, #3
 800e1ae:	4013      	ands	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	220f      	movs	r2, #15
 800e1b4:	409a      	lsls	r2, r3
 800e1b6:	0013      	movs	r3, r2
 800e1b8:	43da      	mvns	r2, r3
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	4013      	ands	r3, r2
 800e1be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	23a0      	movs	r3, #160	@ 0xa0
 800e1c4:	05db      	lsls	r3, r3, #23
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d01f      	beq.n	800e20a <HAL_GPIO_Init+0x1f6>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4a4a      	ldr	r2, [pc, #296]	@ (800e2f8 <HAL_GPIO_Init+0x2e4>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d019      	beq.n	800e206 <HAL_GPIO_Init+0x1f2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a49      	ldr	r2, [pc, #292]	@ (800e2fc <HAL_GPIO_Init+0x2e8>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d013      	beq.n	800e202 <HAL_GPIO_Init+0x1ee>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a48      	ldr	r2, [pc, #288]	@ (800e300 <HAL_GPIO_Init+0x2ec>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d00d      	beq.n	800e1fe <HAL_GPIO_Init+0x1ea>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4a47      	ldr	r2, [pc, #284]	@ (800e304 <HAL_GPIO_Init+0x2f0>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d007      	beq.n	800e1fa <HAL_GPIO_Init+0x1e6>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4a46      	ldr	r2, [pc, #280]	@ (800e308 <HAL_GPIO_Init+0x2f4>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d101      	bne.n	800e1f6 <HAL_GPIO_Init+0x1e2>
 800e1f2:	2305      	movs	r3, #5
 800e1f4:	e00a      	b.n	800e20c <HAL_GPIO_Init+0x1f8>
 800e1f6:	2306      	movs	r3, #6
 800e1f8:	e008      	b.n	800e20c <HAL_GPIO_Init+0x1f8>
 800e1fa:	2304      	movs	r3, #4
 800e1fc:	e006      	b.n	800e20c <HAL_GPIO_Init+0x1f8>
 800e1fe:	2303      	movs	r3, #3
 800e200:	e004      	b.n	800e20c <HAL_GPIO_Init+0x1f8>
 800e202:	2302      	movs	r3, #2
 800e204:	e002      	b.n	800e20c <HAL_GPIO_Init+0x1f8>
 800e206:	2301      	movs	r3, #1
 800e208:	e000      	b.n	800e20c <HAL_GPIO_Init+0x1f8>
 800e20a:	2300      	movs	r3, #0
 800e20c:	697a      	ldr	r2, [r7, #20]
 800e20e:	2103      	movs	r1, #3
 800e210:	400a      	ands	r2, r1
 800e212:	0092      	lsls	r2, r2, #2
 800e214:	4093      	lsls	r3, r2
 800e216:	693a      	ldr	r2, [r7, #16]
 800e218:	4313      	orrs	r3, r2
 800e21a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e21c:	4935      	ldr	r1, [pc, #212]	@ (800e2f4 <HAL_GPIO_Init+0x2e0>)
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	089b      	lsrs	r3, r3, #2
 800e222:	3302      	adds	r3, #2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	693a      	ldr	r2, [r7, #16]
 800e228:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e22a:	4b38      	ldr	r3, [pc, #224]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	43da      	mvns	r2, r3
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	4013      	ands	r3, r2
 800e238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	685a      	ldr	r2, [r3, #4]
 800e23e:	2380      	movs	r3, #128	@ 0x80
 800e240:	035b      	lsls	r3, r3, #13
 800e242:	4013      	ands	r3, r2
 800e244:	d003      	beq.n	800e24e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800e246:	693a      	ldr	r2, [r7, #16]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800e24e:	4b2f      	ldr	r3, [pc, #188]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e250:	693a      	ldr	r2, [r7, #16]
 800e252:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800e254:	4b2d      	ldr	r3, [pc, #180]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	43da      	mvns	r2, r3
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	4013      	ands	r3, r2
 800e262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	685a      	ldr	r2, [r3, #4]
 800e268:	2380      	movs	r3, #128	@ 0x80
 800e26a:	039b      	lsls	r3, r3, #14
 800e26c:	4013      	ands	r3, r2
 800e26e:	d003      	beq.n	800e278 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	4313      	orrs	r3, r2
 800e276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800e278:	4b24      	ldr	r3, [pc, #144]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800e27e:	4b23      	ldr	r3, [pc, #140]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	43da      	mvns	r2, r3
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	4013      	ands	r3, r2
 800e28c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	685a      	ldr	r2, [r3, #4]
 800e292:	2380      	movs	r3, #128	@ 0x80
 800e294:	029b      	lsls	r3, r3, #10
 800e296:	4013      	ands	r3, r2
 800e298:	d003      	beq.n	800e2a2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800e2a2:	4b1a      	ldr	r3, [pc, #104]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e2a8:	4b18      	ldr	r3, [pc, #96]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	43da      	mvns	r2, r3
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	2380      	movs	r3, #128	@ 0x80
 800e2be:	025b      	lsls	r3, r3, #9
 800e2c0:	4013      	ands	r3, r2
 800e2c2:	d003      	beq.n	800e2cc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800e2cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e30c <HAL_GPIO_Init+0x2f8>)
 800e2ce:	693a      	ldr	r2, [r7, #16]
 800e2d0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	40da      	lsrs	r2, r3
 800e2e0:	1e13      	subs	r3, r2, #0
 800e2e2:	d000      	beq.n	800e2e6 <HAL_GPIO_Init+0x2d2>
 800e2e4:	e6a2      	b.n	800e02c <HAL_GPIO_Init+0x18>
  }
}
 800e2e6:	46c0      	nop			@ (mov r8, r8)
 800e2e8:	46c0      	nop			@ (mov r8, r8)
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	b006      	add	sp, #24
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	40021000 	.word	0x40021000
 800e2f4:	40010000 	.word	0x40010000
 800e2f8:	50000400 	.word	0x50000400
 800e2fc:	50000800 	.word	0x50000800
 800e300:	50000c00 	.word	0x50000c00
 800e304:	50001000 	.word	0x50001000
 800e308:	50001c00 	.word	0x50001c00
 800e30c:	40010400 	.word	0x40010400

0800e310 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	000a      	movs	r2, r1
 800e31a:	1cbb      	adds	r3, r7, #2
 800e31c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	1cba      	adds	r2, r7, #2
 800e324:	8812      	ldrh	r2, [r2, #0]
 800e326:	4013      	ands	r3, r2
 800e328:	d004      	beq.n	800e334 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800e32a:	230f      	movs	r3, #15
 800e32c:	18fb      	adds	r3, r7, r3
 800e32e:	2201      	movs	r2, #1
 800e330:	701a      	strb	r2, [r3, #0]
 800e332:	e003      	b.n	800e33c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e334:	230f      	movs	r3, #15
 800e336:	18fb      	adds	r3, r7, r3
 800e338:	2200      	movs	r2, #0
 800e33a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800e33c:	230f      	movs	r3, #15
 800e33e:	18fb      	adds	r3, r7, r3
 800e340:	781b      	ldrb	r3, [r3, #0]
}
 800e342:	0018      	movs	r0, r3
 800e344:	46bd      	mov	sp, r7
 800e346:	b004      	add	sp, #16
 800e348:	bd80      	pop	{r7, pc}

0800e34a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b082      	sub	sp, #8
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	0008      	movs	r0, r1
 800e354:	0011      	movs	r1, r2
 800e356:	1cbb      	adds	r3, r7, #2
 800e358:	1c02      	adds	r2, r0, #0
 800e35a:	801a      	strh	r2, [r3, #0]
 800e35c:	1c7b      	adds	r3, r7, #1
 800e35e:	1c0a      	adds	r2, r1, #0
 800e360:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e362:	1c7b      	adds	r3, r7, #1
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d004      	beq.n	800e374 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e36a:	1cbb      	adds	r3, r7, #2
 800e36c:	881a      	ldrh	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800e372:	e003      	b.n	800e37c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800e374:	1cbb      	adds	r3, r7, #2
 800e376:	881a      	ldrh	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e37c:	46c0      	nop			@ (mov r8, r8)
 800e37e:	46bd      	mov	sp, r7
 800e380:	b002      	add	sp, #8
 800e382:	bd80      	pop	{r7, pc}

0800e384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e082      	b.n	800e49c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2241      	movs	r2, #65	@ 0x41
 800e39a:	5c9b      	ldrb	r3, [r3, r2]
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d107      	bne.n	800e3b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2240      	movs	r2, #64	@ 0x40
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	0018      	movs	r0, r3
 800e3ae:	f7f8 fcb1 	bl	8006d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2241      	movs	r2, #65	@ 0x41
 800e3b6:	2124      	movs	r1, #36	@ 0x24
 800e3b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	438a      	bics	r2, r1
 800e3c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	685a      	ldr	r2, [r3, #4]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4934      	ldr	r1, [pc, #208]	@ (800e4a4 <HAL_I2C_Init+0x120>)
 800e3d4:	400a      	ands	r2, r1
 800e3d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	689a      	ldr	r2, [r3, #8]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4931      	ldr	r1, [pc, #196]	@ (800e4a8 <HAL_I2C_Init+0x124>)
 800e3e4:	400a      	ands	r2, r1
 800e3e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d108      	bne.n	800e402 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	689a      	ldr	r2, [r3, #8]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2180      	movs	r1, #128	@ 0x80
 800e3fa:	0209      	lsls	r1, r1, #8
 800e3fc:	430a      	orrs	r2, r1
 800e3fe:	609a      	str	r2, [r3, #8]
 800e400:	e007      	b.n	800e412 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	689a      	ldr	r2, [r3, #8]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2184      	movs	r1, #132	@ 0x84
 800e40c:	0209      	lsls	r1, r1, #8
 800e40e:	430a      	orrs	r2, r1
 800e410:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	2b02      	cmp	r3, #2
 800e418:	d104      	bne.n	800e424 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2280      	movs	r2, #128	@ 0x80
 800e420:	0112      	lsls	r2, r2, #4
 800e422:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685a      	ldr	r2, [r3, #4]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	491f      	ldr	r1, [pc, #124]	@ (800e4ac <HAL_I2C_Init+0x128>)
 800e430:	430a      	orrs	r2, r1
 800e432:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	68da      	ldr	r2, [r3, #12]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	491a      	ldr	r1, [pc, #104]	@ (800e4a8 <HAL_I2C_Init+0x124>)
 800e440:	400a      	ands	r2, r1
 800e442:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	691a      	ldr	r2, [r3, #16]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	695b      	ldr	r3, [r3, #20]
 800e44c:	431a      	orrs	r2, r3
 800e44e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	430a      	orrs	r2, r1
 800e45c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	69d9      	ldr	r1, [r3, #28]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a1a      	ldr	r2, [r3, #32]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	430a      	orrs	r2, r1
 800e46c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2101      	movs	r1, #1
 800e47a:	430a      	orrs	r2, r1
 800e47c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2241      	movs	r2, #65	@ 0x41
 800e488:	2120      	movs	r1, #32
 800e48a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2242      	movs	r2, #66	@ 0x42
 800e496:	2100      	movs	r1, #0
 800e498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	0018      	movs	r0, r3
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	b002      	add	sp, #8
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	f0ffffff 	.word	0xf0ffffff
 800e4a8:	ffff7fff 	.word	0xffff7fff
 800e4ac:	02008000 	.word	0x02008000

0800e4b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e4b0:	b590      	push	{r4, r7, lr}
 800e4b2:	b089      	sub	sp, #36	@ 0x24
 800e4b4:	af02      	add	r7, sp, #8
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	0008      	movs	r0, r1
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	0019      	movs	r1, r3
 800e4be:	230a      	movs	r3, #10
 800e4c0:	18fb      	adds	r3, r7, r3
 800e4c2:	1c02      	adds	r2, r0, #0
 800e4c4:	801a      	strh	r2, [r3, #0]
 800e4c6:	2308      	movs	r3, #8
 800e4c8:	18fb      	adds	r3, r7, r3
 800e4ca:	1c0a      	adds	r2, r1, #0
 800e4cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2241      	movs	r2, #65	@ 0x41
 800e4d2:	5c9b      	ldrb	r3, [r3, r2]
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	2b20      	cmp	r3, #32
 800e4d8:	d000      	beq.n	800e4dc <HAL_I2C_Master_Transmit+0x2c>
 800e4da:	e0e7      	b.n	800e6ac <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2240      	movs	r2, #64	@ 0x40
 800e4e0:	5c9b      	ldrb	r3, [r3, r2]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d101      	bne.n	800e4ea <HAL_I2C_Master_Transmit+0x3a>
 800e4e6:	2302      	movs	r3, #2
 800e4e8:	e0e1      	b.n	800e6ae <HAL_I2C_Master_Transmit+0x1fe>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2240      	movs	r2, #64	@ 0x40
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e4f2:	f7fe fccb 	bl	800ce8c <HAL_GetTick>
 800e4f6:	0003      	movs	r3, r0
 800e4f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e4fa:	2380      	movs	r3, #128	@ 0x80
 800e4fc:	0219      	lsls	r1, r3, #8
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	2319      	movs	r3, #25
 800e506:	2201      	movs	r2, #1
 800e508:	f001 ff98 	bl	801043c <I2C_WaitOnFlagUntilTimeout>
 800e50c:	1e03      	subs	r3, r0, #0
 800e50e:	d001      	beq.n	800e514 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800e510:	2301      	movs	r3, #1
 800e512:	e0cc      	b.n	800e6ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2241      	movs	r2, #65	@ 0x41
 800e518:	2121      	movs	r1, #33	@ 0x21
 800e51a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2242      	movs	r2, #66	@ 0x42
 800e520:	2110      	movs	r1, #16
 800e522:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2200      	movs	r2, #0
 800e528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2208      	movs	r2, #8
 800e534:	18ba      	adds	r2, r7, r2
 800e536:	8812      	ldrh	r2, [r2, #0]
 800e538:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e544:	b29b      	uxth	r3, r3
 800e546:	2bff      	cmp	r3, #255	@ 0xff
 800e548:	d911      	bls.n	800e56e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	22ff      	movs	r2, #255	@ 0xff
 800e54e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e554:	b2da      	uxtb	r2, r3
 800e556:	2380      	movs	r3, #128	@ 0x80
 800e558:	045c      	lsls	r4, r3, #17
 800e55a:	230a      	movs	r3, #10
 800e55c:	18fb      	adds	r3, r7, r3
 800e55e:	8819      	ldrh	r1, [r3, #0]
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	4b55      	ldr	r3, [pc, #340]	@ (800e6b8 <HAL_I2C_Master_Transmit+0x208>)
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	0023      	movs	r3, r4
 800e568:	f002 f9ba 	bl	80108e0 <I2C_TransferConfig>
 800e56c:	e075      	b.n	800e65a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e572:	b29a      	uxth	r2, r3
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	2380      	movs	r3, #128	@ 0x80
 800e580:	049c      	lsls	r4, r3, #18
 800e582:	230a      	movs	r3, #10
 800e584:	18fb      	adds	r3, r7, r3
 800e586:	8819      	ldrh	r1, [r3, #0]
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	4b4b      	ldr	r3, [pc, #300]	@ (800e6b8 <HAL_I2C_Master_Transmit+0x208>)
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	0023      	movs	r3, r4
 800e590:	f002 f9a6 	bl	80108e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e594:	e061      	b.n	800e65a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	0018      	movs	r0, r3
 800e59e:	f001 ff9b 	bl	80104d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e5a2:	1e03      	subs	r3, r0, #0
 800e5a4:	d001      	beq.n	800e5aa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e081      	b.n	800e6ae <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ae:	781a      	ldrb	r2, [r3, #0]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d03a      	beq.n	800e65a <HAL_I2C_Master_Transmit+0x1aa>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d136      	bne.n	800e65a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e5ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	0013      	movs	r3, r2
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2180      	movs	r1, #128	@ 0x80
 800e5fa:	f001 ff1f 	bl	801043c <I2C_WaitOnFlagUntilTimeout>
 800e5fe:	1e03      	subs	r3, r0, #0
 800e600:	d001      	beq.n	800e606 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800e602:	2301      	movs	r3, #1
 800e604:	e053      	b.n	800e6ae <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	2bff      	cmp	r3, #255	@ 0xff
 800e60e:	d911      	bls.n	800e634 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	22ff      	movs	r2, #255	@ 0xff
 800e614:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	2380      	movs	r3, #128	@ 0x80
 800e61e:	045c      	lsls	r4, r3, #17
 800e620:	230a      	movs	r3, #10
 800e622:	18fb      	adds	r3, r7, r3
 800e624:	8819      	ldrh	r1, [r3, #0]
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	2300      	movs	r3, #0
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	0023      	movs	r3, r4
 800e62e:	f002 f957 	bl	80108e0 <I2C_TransferConfig>
 800e632:	e012      	b.n	800e65a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e638:	b29a      	uxth	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e642:	b2da      	uxtb	r2, r3
 800e644:	2380      	movs	r3, #128	@ 0x80
 800e646:	049c      	lsls	r4, r3, #18
 800e648:	230a      	movs	r3, #10
 800e64a:	18fb      	adds	r3, r7, r3
 800e64c:	8819      	ldrh	r1, [r3, #0]
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	2300      	movs	r3, #0
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	0023      	movs	r3, r4
 800e656:	f002 f943 	bl	80108e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e65e:	b29b      	uxth	r3, r3
 800e660:	2b00      	cmp	r3, #0
 800e662:	d198      	bne.n	800e596 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e664:	697a      	ldr	r2, [r7, #20]
 800e666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	0018      	movs	r0, r3
 800e66c:	f001 ff7a 	bl	8010564 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e670:	1e03      	subs	r3, r0, #0
 800e672:	d001      	beq.n	800e678 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	e01a      	b.n	800e6ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2220      	movs	r2, #32
 800e67e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	685a      	ldr	r2, [r3, #4]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	490c      	ldr	r1, [pc, #48]	@ (800e6bc <HAL_I2C_Master_Transmit+0x20c>)
 800e68c:	400a      	ands	r2, r1
 800e68e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2241      	movs	r2, #65	@ 0x41
 800e694:	2120      	movs	r1, #32
 800e696:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2242      	movs	r2, #66	@ 0x42
 800e69c:	2100      	movs	r1, #0
 800e69e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2240      	movs	r2, #64	@ 0x40
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	e000      	b.n	800e6ae <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800e6ac:	2302      	movs	r3, #2
  }
}
 800e6ae:	0018      	movs	r0, r3
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	b007      	add	sp, #28
 800e6b4:	bd90      	pop	{r4, r7, pc}
 800e6b6:	46c0      	nop			@ (mov r8, r8)
 800e6b8:	80002000 	.word	0x80002000
 800e6bc:	fe00e800 	.word	0xfe00e800

0800e6c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e6c0:	b590      	push	{r4, r7, lr}
 800e6c2:	b089      	sub	sp, #36	@ 0x24
 800e6c4:	af02      	add	r7, sp, #8
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	0008      	movs	r0, r1
 800e6ca:	607a      	str	r2, [r7, #4]
 800e6cc:	0019      	movs	r1, r3
 800e6ce:	230a      	movs	r3, #10
 800e6d0:	18fb      	adds	r3, r7, r3
 800e6d2:	1c02      	adds	r2, r0, #0
 800e6d4:	801a      	strh	r2, [r3, #0]
 800e6d6:	2308      	movs	r3, #8
 800e6d8:	18fb      	adds	r3, r7, r3
 800e6da:	1c0a      	adds	r2, r1, #0
 800e6dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2241      	movs	r2, #65	@ 0x41
 800e6e2:	5c9b      	ldrb	r3, [r3, r2]
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b20      	cmp	r3, #32
 800e6e8:	d000      	beq.n	800e6ec <HAL_I2C_Master_Receive+0x2c>
 800e6ea:	e0e8      	b.n	800e8be <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2240      	movs	r2, #64	@ 0x40
 800e6f0:	5c9b      	ldrb	r3, [r3, r2]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d101      	bne.n	800e6fa <HAL_I2C_Master_Receive+0x3a>
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	e0e2      	b.n	800e8c0 <HAL_I2C_Master_Receive+0x200>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2240      	movs	r2, #64	@ 0x40
 800e6fe:	2101      	movs	r1, #1
 800e700:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e702:	f7fe fbc3 	bl	800ce8c <HAL_GetTick>
 800e706:	0003      	movs	r3, r0
 800e708:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e70a:	2380      	movs	r3, #128	@ 0x80
 800e70c:	0219      	lsls	r1, r3, #8
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	2319      	movs	r3, #25
 800e716:	2201      	movs	r2, #1
 800e718:	f001 fe90 	bl	801043c <I2C_WaitOnFlagUntilTimeout>
 800e71c:	1e03      	subs	r3, r0, #0
 800e71e:	d001      	beq.n	800e724 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	e0cd      	b.n	800e8c0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2241      	movs	r2, #65	@ 0x41
 800e728:	2122      	movs	r1, #34	@ 0x22
 800e72a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2242      	movs	r2, #66	@ 0x42
 800e730:	2110      	movs	r1, #16
 800e732:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2208      	movs	r2, #8
 800e744:	18ba      	adds	r2, r7, r2
 800e746:	8812      	ldrh	r2, [r2, #0]
 800e748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e754:	b29b      	uxth	r3, r3
 800e756:	2bff      	cmp	r3, #255	@ 0xff
 800e758:	d911      	bls.n	800e77e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	22ff      	movs	r2, #255	@ 0xff
 800e75e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e764:	b2da      	uxtb	r2, r3
 800e766:	2380      	movs	r3, #128	@ 0x80
 800e768:	045c      	lsls	r4, r3, #17
 800e76a:	230a      	movs	r3, #10
 800e76c:	18fb      	adds	r3, r7, r3
 800e76e:	8819      	ldrh	r1, [r3, #0]
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	4b55      	ldr	r3, [pc, #340]	@ (800e8c8 <HAL_I2C_Master_Receive+0x208>)
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	0023      	movs	r3, r4
 800e778:	f002 f8b2 	bl	80108e0 <I2C_TransferConfig>
 800e77c:	e076      	b.n	800e86c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e782:	b29a      	uxth	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	2380      	movs	r3, #128	@ 0x80
 800e790:	049c      	lsls	r4, r3, #18
 800e792:	230a      	movs	r3, #10
 800e794:	18fb      	adds	r3, r7, r3
 800e796:	8819      	ldrh	r1, [r3, #0]
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	4b4b      	ldr	r3, [pc, #300]	@ (800e8c8 <HAL_I2C_Master_Receive+0x208>)
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	0023      	movs	r3, r4
 800e7a0:	f002 f89e 	bl	80108e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e7a4:	e062      	b.n	800e86c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e7a6:	697a      	ldr	r2, [r7, #20]
 800e7a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	0018      	movs	r0, r3
 800e7ae:	f001 ff1d 	bl	80105ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800e7b2:	1e03      	subs	r3, r0, #0
 800e7b4:	d001      	beq.n	800e7ba <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e082      	b.n	800e8c0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7c4:	b2d2      	uxtb	r2, r2
 800e7c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	b29a      	uxth	r2, r3
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d03a      	beq.n	800e86c <HAL_I2C_Master_Receive+0x1ac>
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d136      	bne.n	800e86c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e7fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	0013      	movs	r3, r2
 800e808:	2200      	movs	r2, #0
 800e80a:	2180      	movs	r1, #128	@ 0x80
 800e80c:	f001 fe16 	bl	801043c <I2C_WaitOnFlagUntilTimeout>
 800e810:	1e03      	subs	r3, r0, #0
 800e812:	d001      	beq.n	800e818 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	e053      	b.n	800e8c0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	2bff      	cmp	r3, #255	@ 0xff
 800e820:	d911      	bls.n	800e846 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	22ff      	movs	r2, #255	@ 0xff
 800e826:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e82c:	b2da      	uxtb	r2, r3
 800e82e:	2380      	movs	r3, #128	@ 0x80
 800e830:	045c      	lsls	r4, r3, #17
 800e832:	230a      	movs	r3, #10
 800e834:	18fb      	adds	r3, r7, r3
 800e836:	8819      	ldrh	r1, [r3, #0]
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	2300      	movs	r3, #0
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	0023      	movs	r3, r4
 800e840:	f002 f84e 	bl	80108e0 <I2C_TransferConfig>
 800e844:	e012      	b.n	800e86c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e854:	b2da      	uxtb	r2, r3
 800e856:	2380      	movs	r3, #128	@ 0x80
 800e858:	049c      	lsls	r4, r3, #18
 800e85a:	230a      	movs	r3, #10
 800e85c:	18fb      	adds	r3, r7, r3
 800e85e:	8819      	ldrh	r1, [r3, #0]
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	2300      	movs	r3, #0
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	0023      	movs	r3, r4
 800e868:	f002 f83a 	bl	80108e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e870:	b29b      	uxth	r3, r3
 800e872:	2b00      	cmp	r3, #0
 800e874:	d197      	bne.n	800e7a6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	0018      	movs	r0, r3
 800e87e:	f001 fe71 	bl	8010564 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e882:	1e03      	subs	r3, r0, #0
 800e884:	d001      	beq.n	800e88a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e01a      	b.n	800e8c0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2220      	movs	r2, #32
 800e890:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	685a      	ldr	r2, [r3, #4]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	490b      	ldr	r1, [pc, #44]	@ (800e8cc <HAL_I2C_Master_Receive+0x20c>)
 800e89e:	400a      	ands	r2, r1
 800e8a0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2241      	movs	r2, #65	@ 0x41
 800e8a6:	2120      	movs	r1, #32
 800e8a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2242      	movs	r2, #66	@ 0x42
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2240      	movs	r2, #64	@ 0x40
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e000      	b.n	800e8c0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800e8be:	2302      	movs	r3, #2
  }
}
 800e8c0:	0018      	movs	r0, r3
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	b007      	add	sp, #28
 800e8c6:	bd90      	pop	{r4, r7, pc}
 800e8c8:	80002400 	.word	0x80002400
 800e8cc:	fe00e800 	.word	0xfe00e800

0800e8d0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800e8d0:	b5b0      	push	{r4, r5, r7, lr}
 800e8d2:	b088      	sub	sp, #32
 800e8d4:	af02      	add	r7, sp, #8
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	0008      	movs	r0, r1
 800e8da:	607a      	str	r2, [r7, #4]
 800e8dc:	0019      	movs	r1, r3
 800e8de:	230a      	movs	r3, #10
 800e8e0:	18fb      	adds	r3, r7, r3
 800e8e2:	1c02      	adds	r2, r0, #0
 800e8e4:	801a      	strh	r2, [r3, #0]
 800e8e6:	2308      	movs	r3, #8
 800e8e8:	18fb      	adds	r3, r7, r3
 800e8ea:	1c0a      	adds	r2, r1, #0
 800e8ec:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2241      	movs	r2, #65	@ 0x41
 800e8f2:	5c9b      	ldrb	r3, [r3, r2]
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b20      	cmp	r3, #32
 800e8f8:	d000      	beq.n	800e8fc <HAL_I2C_Master_Transmit_DMA+0x2c>
 800e8fa:	e0dd      	b.n	800eab8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	699a      	ldr	r2, [r3, #24]
 800e902:	2380      	movs	r3, #128	@ 0x80
 800e904:	021b      	lsls	r3, r3, #8
 800e906:	401a      	ands	r2, r3
 800e908:	2380      	movs	r3, #128	@ 0x80
 800e90a:	021b      	lsls	r3, r3, #8
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d101      	bne.n	800e914 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800e910:	2302      	movs	r3, #2
 800e912:	e0d2      	b.n	800eaba <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2240      	movs	r2, #64	@ 0x40
 800e918:	5c9b      	ldrb	r3, [r3, r2]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d101      	bne.n	800e922 <HAL_I2C_Master_Transmit_DMA+0x52>
 800e91e:	2302      	movs	r3, #2
 800e920:	e0cb      	b.n	800eaba <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2240      	movs	r2, #64	@ 0x40
 800e926:	2101      	movs	r1, #1
 800e928:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2241      	movs	r2, #65	@ 0x41
 800e92e:	2121      	movs	r1, #33	@ 0x21
 800e930:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2242      	movs	r2, #66	@ 0x42
 800e936:	2110      	movs	r1, #16
 800e938:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2208      	movs	r2, #8
 800e94a:	18ba      	adds	r2, r7, r2
 800e94c:	8812      	ldrh	r2, [r2, #0]
 800e94e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4a5c      	ldr	r2, [pc, #368]	@ (800eac4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800e954:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	4a5b      	ldr	r2, [pc, #364]	@ (800eac8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800e95a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e960:	b29b      	uxth	r3, r3
 800e962:	2bff      	cmp	r3, #255	@ 0xff
 800e964:	d906      	bls.n	800e974 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	22ff      	movs	r2, #255	@ 0xff
 800e96a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e96c:	2380      	movs	r3, #128	@ 0x80
 800e96e:	045b      	lsls	r3, r3, #17
 800e970:	617b      	str	r3, [r7, #20]
 800e972:	e007      	b.n	800e984 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e978:	b29a      	uxth	r2, r3
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e97e:	2380      	movs	r3, #128	@ 0x80
 800e980:	049b      	lsls	r3, r3, #18
 800e982:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d100      	bne.n	800e98e <HAL_I2C_Master_Transmit_DMA+0xbe>
 800e98c:	e078      	b.n	800ea80 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e992:	2b00      	cmp	r3, #0
 800e994:	d023      	beq.n	800e9de <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e99a:	4a4c      	ldr	r2, [pc, #304]	@ (800eacc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800e99c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9a2:	4a4b      	ldr	r2, [pc, #300]	@ (800ead0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800e9a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e9ba:	6879      	ldr	r1, [r7, #4]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	3328      	adds	r3, #40	@ 0x28
 800e9c2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800e9c8:	2513      	movs	r5, #19
 800e9ca:	197c      	adds	r4, r7, r5
 800e9cc:	f7fe ff7e 	bl	800d8cc <HAL_DMA_Start_IT>
 800e9d0:	0003      	movs	r3, r0
 800e9d2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800e9d4:	197b      	adds	r3, r7, r5
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d13d      	bne.n	800ea58 <HAL_I2C_Master_Transmit_DMA+0x188>
 800e9dc:	e013      	b.n	800ea06 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2241      	movs	r2, #65	@ 0x41
 800e9e2:	2120      	movs	r1, #32
 800e9e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2242      	movs	r2, #66	@ 0x42
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9f2:	2280      	movs	r2, #128	@ 0x80
 800e9f4:	431a      	orrs	r2, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2240      	movs	r2, #64	@ 0x40
 800e9fe:	2100      	movs	r1, #0
 800ea00:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e059      	b.n	800eaba <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	697c      	ldr	r4, [r7, #20]
 800ea0e:	230a      	movs	r3, #10
 800ea10:	18fb      	adds	r3, r7, r3
 800ea12:	8819      	ldrh	r1, [r3, #0]
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	4b2f      	ldr	r3, [pc, #188]	@ (800ead4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	0023      	movs	r3, r4
 800ea1c:	f001 ff60 	bl	80108e0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2240      	movs	r2, #64	@ 0x40
 800ea36:	2100      	movs	r1, #0
 800ea38:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2110      	movs	r1, #16
 800ea3e:	0018      	movs	r0, r3
 800ea40:	f001 ff88 	bl	8010954 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2180      	movs	r1, #128	@ 0x80
 800ea50:	01c9      	lsls	r1, r1, #7
 800ea52:	430a      	orrs	r2, r1
 800ea54:	601a      	str	r2, [r3, #0]
 800ea56:	e02d      	b.n	800eab4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2241      	movs	r2, #65	@ 0x41
 800ea5c:	2120      	movs	r1, #32
 800ea5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2242      	movs	r2, #66	@ 0x42
 800ea64:	2100      	movs	r1, #0
 800ea66:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea6c:	2210      	movs	r2, #16
 800ea6e:	431a      	orrs	r2, r3
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2240      	movs	r2, #64	@ 0x40
 800ea78:	2100      	movs	r1, #0
 800ea7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e01c      	b.n	800eaba <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4a15      	ldr	r2, [pc, #84]	@ (800ead8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800ea84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	2380      	movs	r3, #128	@ 0x80
 800ea8e:	049c      	lsls	r4, r3, #18
 800ea90:	230a      	movs	r3, #10
 800ea92:	18fb      	adds	r3, r7, r3
 800ea94:	8819      	ldrh	r1, [r3, #0]
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	4b0e      	ldr	r3, [pc, #56]	@ (800ead4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	0023      	movs	r3, r4
 800ea9e:	f001 ff1f 	bl	80108e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2240      	movs	r2, #64	@ 0x40
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2101      	movs	r1, #1
 800eaae:	0018      	movs	r0, r3
 800eab0:	f001 ff50 	bl	8010954 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	e000      	b.n	800eaba <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800eab8:	2302      	movs	r3, #2
  }
}
 800eaba:	0018      	movs	r0, r3
 800eabc:	46bd      	mov	sp, r7
 800eabe:	b006      	add	sp, #24
 800eac0:	bdb0      	pop	{r4, r5, r7, pc}
 800eac2:	46c0      	nop			@ (mov r8, r8)
 800eac4:	ffff0000 	.word	0xffff0000
 800eac8:	0800f2d5 	.word	0x0800f2d5
 800eacc:	0801028d 	.word	0x0801028d
 800ead0:	080103cd 	.word	0x080103cd
 800ead4:	80002000 	.word	0x80002000
 800ead8:	0800ee81 	.word	0x0800ee81

0800eadc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800eadc:	b5b0      	push	{r4, r5, r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af02      	add	r7, sp, #8
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	0008      	movs	r0, r1
 800eae6:	607a      	str	r2, [r7, #4]
 800eae8:	0019      	movs	r1, r3
 800eaea:	230a      	movs	r3, #10
 800eaec:	18fb      	adds	r3, r7, r3
 800eaee:	1c02      	adds	r2, r0, #0
 800eaf0:	801a      	strh	r2, [r3, #0]
 800eaf2:	2308      	movs	r3, #8
 800eaf4:	18fb      	adds	r3, r7, r3
 800eaf6:	1c0a      	adds	r2, r1, #0
 800eaf8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2241      	movs	r2, #65	@ 0x41
 800eafe:	5c9b      	ldrb	r3, [r3, r2]
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2b20      	cmp	r3, #32
 800eb04:	d000      	beq.n	800eb08 <HAL_I2C_Master_Receive_DMA+0x2c>
 800eb06:	e0dd      	b.n	800ecc4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	699a      	ldr	r2, [r3, #24]
 800eb0e:	2380      	movs	r3, #128	@ 0x80
 800eb10:	021b      	lsls	r3, r3, #8
 800eb12:	401a      	ands	r2, r3
 800eb14:	2380      	movs	r3, #128	@ 0x80
 800eb16:	021b      	lsls	r3, r3, #8
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d101      	bne.n	800eb20 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	e0d2      	b.n	800ecc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2240      	movs	r2, #64	@ 0x40
 800eb24:	5c9b      	ldrb	r3, [r3, r2]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d101      	bne.n	800eb2e <HAL_I2C_Master_Receive_DMA+0x52>
 800eb2a:	2302      	movs	r3, #2
 800eb2c:	e0cb      	b.n	800ecc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2240      	movs	r2, #64	@ 0x40
 800eb32:	2101      	movs	r1, #1
 800eb34:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2241      	movs	r2, #65	@ 0x41
 800eb3a:	2122      	movs	r1, #34	@ 0x22
 800eb3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2242      	movs	r2, #66	@ 0x42
 800eb42:	2110      	movs	r1, #16
 800eb44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2208      	movs	r2, #8
 800eb56:	18ba      	adds	r2, r7, r2
 800eb58:	8812      	ldrh	r2, [r2, #0]
 800eb5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	4a5c      	ldr	r2, [pc, #368]	@ (800ecd0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800eb60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	4a5b      	ldr	r2, [pc, #364]	@ (800ecd4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800eb66:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	2bff      	cmp	r3, #255	@ 0xff
 800eb70:	d906      	bls.n	800eb80 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	22ff      	movs	r2, #255	@ 0xff
 800eb76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800eb78:	2380      	movs	r3, #128	@ 0x80
 800eb7a:	045b      	lsls	r3, r3, #17
 800eb7c:	617b      	str	r3, [r7, #20]
 800eb7e:	e007      	b.n	800eb90 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800eb8a:	2380      	movs	r3, #128	@ 0x80
 800eb8c:	049b      	lsls	r3, r3, #18
 800eb8e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d100      	bne.n	800eb9a <HAL_I2C_Master_Receive_DMA+0xbe>
 800eb98:	e078      	b.n	800ec8c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d023      	beq.n	800ebea <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eba6:	4a4c      	ldr	r2, [pc, #304]	@ (800ecd8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800eba8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebae:	4a4b      	ldr	r2, [pc, #300]	@ (800ecdc <HAL_I2C_Master_Receive_DMA+0x200>)
 800ebb0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	3324      	adds	r3, #36	@ 0x24
 800ebcc:	0019      	movs	r1, r3
 800ebce:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ebd4:	2513      	movs	r5, #19
 800ebd6:	197c      	adds	r4, r7, r5
 800ebd8:	f7fe fe78 	bl	800d8cc <HAL_DMA_Start_IT>
 800ebdc:	0003      	movs	r3, r0
 800ebde:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ebe0:	197b      	adds	r3, r7, r5
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d13d      	bne.n	800ec64 <HAL_I2C_Master_Receive_DMA+0x188>
 800ebe8:	e013      	b.n	800ec12 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2241      	movs	r2, #65	@ 0x41
 800ebee:	2120      	movs	r1, #32
 800ebf0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2242      	movs	r2, #66	@ 0x42
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebfe:	2280      	movs	r2, #128	@ 0x80
 800ec00:	431a      	orrs	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2240      	movs	r2, #64	@ 0x40
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e059      	b.n	800ecc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec16:	b2da      	uxtb	r2, r3
 800ec18:	697c      	ldr	r4, [r7, #20]
 800ec1a:	230a      	movs	r3, #10
 800ec1c:	18fb      	adds	r3, r7, r3
 800ec1e:	8819      	ldrh	r1, [r3, #0]
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	4b2f      	ldr	r3, [pc, #188]	@ (800ece0 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	0023      	movs	r3, r4
 800ec28:	f001 fe5a 	bl	80108e0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec30:	b29a      	uxth	r2, r3
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2240      	movs	r2, #64	@ 0x40
 800ec42:	2100      	movs	r1, #0
 800ec44:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2110      	movs	r1, #16
 800ec4a:	0018      	movs	r0, r3
 800ec4c:	f001 fe82 	bl	8010954 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2180      	movs	r1, #128	@ 0x80
 800ec5c:	0209      	lsls	r1, r1, #8
 800ec5e:	430a      	orrs	r2, r1
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	e02d      	b.n	800ecc0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2241      	movs	r2, #65	@ 0x41
 800ec68:	2120      	movs	r1, #32
 800ec6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2242      	movs	r2, #66	@ 0x42
 800ec70:	2100      	movs	r1, #0
 800ec72:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec78:	2210      	movs	r2, #16
 800ec7a:	431a      	orrs	r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2240      	movs	r2, #64	@ 0x40
 800ec84:	2100      	movs	r1, #0
 800ec86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e01c      	b.n	800ecc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4a15      	ldr	r2, [pc, #84]	@ (800ece4 <HAL_I2C_Master_Receive_DMA+0x208>)
 800ec90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	2380      	movs	r3, #128	@ 0x80
 800ec9a:	049c      	lsls	r4, r3, #18
 800ec9c:	230a      	movs	r3, #10
 800ec9e:	18fb      	adds	r3, r7, r3
 800eca0:	8819      	ldrh	r1, [r3, #0]
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	4b0e      	ldr	r3, [pc, #56]	@ (800ece0 <HAL_I2C_Master_Receive_DMA+0x204>)
 800eca6:	9300      	str	r3, [sp, #0]
 800eca8:	0023      	movs	r3, r4
 800ecaa:	f001 fe19 	bl	80108e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2240      	movs	r2, #64	@ 0x40
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2101      	movs	r1, #1
 800ecba:	0018      	movs	r0, r3
 800ecbc:	f001 fe4a 	bl	8010954 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	e000      	b.n	800ecc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ecc4:	2302      	movs	r3, #2
  }
}
 800ecc6:	0018      	movs	r0, r3
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	b006      	add	sp, #24
 800eccc:	bdb0      	pop	{r4, r5, r7, pc}
 800ecce:	46c0      	nop			@ (mov r8, r8)
 800ecd0:	ffff0000 	.word	0xffff0000
 800ecd4:	0800f2d5 	.word	0x0800f2d5
 800ecd8:	0801032d 	.word	0x0801032d
 800ecdc:	080103cd 	.word	0x080103cd
 800ece0:	80002400 	.word	0x80002400
 800ece4:	0800ee81 	.word	0x0800ee81

0800ece8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	699b      	ldr	r3, [r3, #24]
 800ecf6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d005      	beq.n	800ed14 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	68f9      	ldr	r1, [r7, #12]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	4798      	blx	r3
  }
}
 800ed14:	46c0      	nop			@ (mov r8, r8)
 800ed16:	46bd      	mov	sp, r7
 800ed18:	b004      	add	sp, #16
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	699b      	ldr	r3, [r3, #24]
 800ed2a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	2380      	movs	r3, #128	@ 0x80
 800ed38:	005b      	lsls	r3, r3, #1
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	d00e      	beq.n	800ed5c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	2280      	movs	r2, #128	@ 0x80
 800ed42:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ed44:	d00a      	beq.n	800ed5c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	431a      	orrs	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2280      	movs	r2, #128	@ 0x80
 800ed58:	0052      	lsls	r2, r2, #1
 800ed5a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	2380      	movs	r3, #128	@ 0x80
 800ed60:	00db      	lsls	r3, r3, #3
 800ed62:	4013      	ands	r3, r2
 800ed64:	d00e      	beq.n	800ed84 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	2280      	movs	r2, #128	@ 0x80
 800ed6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ed6c:	d00a      	beq.n	800ed84 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed72:	2208      	movs	r2, #8
 800ed74:	431a      	orrs	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2280      	movs	r2, #128	@ 0x80
 800ed80:	00d2      	lsls	r2, r2, #3
 800ed82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	2380      	movs	r3, #128	@ 0x80
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4013      	ands	r3, r2
 800ed8c:	d00e      	beq.n	800edac <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	2280      	movs	r2, #128	@ 0x80
 800ed92:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ed94:	d00a      	beq.n	800edac <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	431a      	orrs	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2280      	movs	r2, #128	@ 0x80
 800eda8:	0092      	lsls	r2, r2, #2
 800edaa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edb0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	220b      	movs	r2, #11
 800edb6:	4013      	ands	r3, r2
 800edb8:	d005      	beq.n	800edc6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800edba:	68fa      	ldr	r2, [r7, #12]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	0011      	movs	r1, r2
 800edc0:	0018      	movs	r0, r3
 800edc2:	f001 f915 	bl	800fff0 <I2C_ITError>
  }
}
 800edc6:	46c0      	nop			@ (mov r8, r8)
 800edc8:	46bd      	mov	sp, r7
 800edca:	b006      	add	sp, #24
 800edcc:	bd80      	pop	{r7, pc}

0800edce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b082      	sub	sp, #8
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800edd6:	46c0      	nop			@ (mov r8, r8)
 800edd8:	46bd      	mov	sp, r7
 800edda:	b002      	add	sp, #8
 800eddc:	bd80      	pop	{r7, pc}

0800edde <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b082      	sub	sp, #8
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ede6:	46c0      	nop			@ (mov r8, r8)
 800ede8:	46bd      	mov	sp, r7
 800edea:	b002      	add	sp, #8
 800edec:	bd80      	pop	{r7, pc}

0800edee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b082      	sub	sp, #8
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800edf6:	46c0      	nop			@ (mov r8, r8)
 800edf8:	46bd      	mov	sp, r7
 800edfa:	b002      	add	sp, #8
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b082      	sub	sp, #8
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ee06:	46c0      	nop			@ (mov r8, r8)
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	b002      	add	sp, #8
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b082      	sub	sp, #8
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	0008      	movs	r0, r1
 800ee18:	0011      	movs	r1, r2
 800ee1a:	1cfb      	adds	r3, r7, #3
 800ee1c:	1c02      	adds	r2, r0, #0
 800ee1e:	701a      	strb	r2, [r3, #0]
 800ee20:	003b      	movs	r3, r7
 800ee22:	1c0a      	adds	r2, r1, #0
 800ee24:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ee26:	46c0      	nop			@ (mov r8, r8)
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	b002      	add	sp, #8
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b082      	sub	sp, #8
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ee36:	46c0      	nop			@ (mov r8, r8)
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	b002      	add	sp, #8
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ee46:	46c0      	nop			@ (mov r8, r8)
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	b002      	add	sp, #8
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b082      	sub	sp, #8
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ee56:	46c0      	nop			@ (mov r8, r8)
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	b002      	add	sp, #8
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ee66:	46c0      	nop			@ (mov r8, r8)
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	b002      	add	sp, #8
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b082      	sub	sp, #8
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ee76:	46c0      	nop			@ (mov r8, r8)
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	b002      	add	sp, #8
 800ee7c:	bd80      	pop	{r7, pc}
	...

0800ee80 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ee80:	b590      	push	{r4, r7, lr}
 800ee82:	b089      	sub	sp, #36	@ 0x24
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2240      	movs	r2, #64	@ 0x40
 800ee94:	5c9b      	ldrb	r3, [r3, r2]
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d101      	bne.n	800ee9e <I2C_Master_ISR_IT+0x1e>
 800ee9a:	2302      	movs	r3, #2
 800ee9c:	e113      	b.n	800f0c6 <I2C_Master_ISR_IT+0x246>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2240      	movs	r2, #64	@ 0x40
 800eea2:	2101      	movs	r1, #1
 800eea4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	2210      	movs	r2, #16
 800eeaa:	4013      	ands	r3, r2
 800eeac:	d012      	beq.n	800eed4 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2210      	movs	r2, #16
 800eeb2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800eeb4:	d00e      	beq.n	800eed4 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2210      	movs	r2, #16
 800eebc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eec2:	2204      	movs	r2, #4
 800eec4:	431a      	orrs	r2, r3
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	0018      	movs	r0, r3
 800eece:	f001 f9ba 	bl	8010246 <I2C_Flush_TXDR>
 800eed2:	e0e5      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	2204      	movs	r2, #4
 800eed8:	4013      	ands	r3, r2
 800eeda:	d021      	beq.n	800ef20 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2204      	movs	r2, #4
 800eee0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800eee2:	d01d      	beq.n	800ef20 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	2204      	movs	r2, #4
 800eee8:	4393      	bics	r3, r2
 800eeea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef6:	b2d2      	uxtb	r2, r2
 800eef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eefe:	1c5a      	adds	r2, r3, #1
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	3b01      	subs	r3, #1
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ef1e:	e0bf      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	2202      	movs	r2, #2
 800ef24:	4013      	ands	r3, r2
 800ef26:	d01c      	beq.n	800ef62 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ef2e:	d018      	beq.n	800ef62 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef34:	781a      	ldrb	r2, [r3, #0]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ef60:	e09e      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2280      	movs	r2, #128	@ 0x80
 800ef66:	4013      	ands	r3, r2
 800ef68:	d100      	bne.n	800ef6c <I2C_Master_ISR_IT+0xec>
 800ef6a:	e069      	b.n	800f040 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2240      	movs	r2, #64	@ 0x40
 800ef70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ef72:	d065      	beq.n	800f040 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d04a      	beq.n	800f014 <I2C_Master_ISR_IT+0x194>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d146      	bne.n	800f014 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	2112      	movs	r1, #18
 800ef90:	187b      	adds	r3, r7, r1
 800ef92:	0592      	lsls	r2, r2, #22
 800ef94:	0d92      	lsrs	r2, r2, #22
 800ef96:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	2bff      	cmp	r3, #255	@ 0xff
 800efa0:	d910      	bls.n	800efc4 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	22ff      	movs	r2, #255	@ 0xff
 800efa6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efac:	b2da      	uxtb	r2, r3
 800efae:	2380      	movs	r3, #128	@ 0x80
 800efb0:	045c      	lsls	r4, r3, #17
 800efb2:	187b      	adds	r3, r7, r1
 800efb4:	8819      	ldrh	r1, [r3, #0]
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	2300      	movs	r3, #0
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	0023      	movs	r3, r4
 800efbe:	f001 fc8f 	bl	80108e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800efc2:	e03c      	b.n	800f03e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efc8:	b29a      	uxth	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efd2:	4a3f      	ldr	r2, [pc, #252]	@ (800f0d0 <I2C_Master_ISR_IT+0x250>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d00e      	beq.n	800eff6 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efdc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800efe2:	2312      	movs	r3, #18
 800efe4:	18fb      	adds	r3, r7, r3
 800efe6:	8819      	ldrh	r1, [r3, #0]
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	2300      	movs	r3, #0
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	0023      	movs	r3, r4
 800eff0:	f001 fc76 	bl	80108e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eff4:	e023      	b.n	800f03e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800effa:	b2da      	uxtb	r2, r3
 800effc:	2380      	movs	r3, #128	@ 0x80
 800effe:	049c      	lsls	r4, r3, #18
 800f000:	2312      	movs	r3, #18
 800f002:	18fb      	adds	r3, r7, r3
 800f004:	8819      	ldrh	r1, [r3, #0]
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	2300      	movs	r3, #0
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	0023      	movs	r3, r4
 800f00e:	f001 fc67 	bl	80108e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f012:	e014      	b.n	800f03e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	685a      	ldr	r2, [r3, #4]
 800f01a:	2380      	movs	r3, #128	@ 0x80
 800f01c:	049b      	lsls	r3, r3, #18
 800f01e:	401a      	ands	r2, r3
 800f020:	2380      	movs	r3, #128	@ 0x80
 800f022:	049b      	lsls	r3, r3, #18
 800f024:	429a      	cmp	r2, r3
 800f026:	d004      	beq.n	800f032 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	0018      	movs	r0, r3
 800f02c:	f000 fcf4 	bl	800fa18 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f030:	e036      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2140      	movs	r1, #64	@ 0x40
 800f036:	0018      	movs	r0, r3
 800f038:	f000 ffda 	bl	800fff0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f03c:	e030      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
 800f03e:	e02f      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2240      	movs	r2, #64	@ 0x40
 800f044:	4013      	ands	r3, r2
 800f046:	d02b      	beq.n	800f0a0 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2240      	movs	r2, #64	@ 0x40
 800f04c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f04e:	d027      	beq.n	800f0a0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f054:	b29b      	uxth	r3, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d11d      	bne.n	800f096 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	2380      	movs	r3, #128	@ 0x80
 800f062:	049b      	lsls	r3, r3, #18
 800f064:	401a      	ands	r2, r3
 800f066:	2380      	movs	r3, #128	@ 0x80
 800f068:	049b      	lsls	r3, r3, #18
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d018      	beq.n	800f0a0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f072:	4a17      	ldr	r2, [pc, #92]	@ (800f0d0 <I2C_Master_ISR_IT+0x250>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d109      	bne.n	800f08c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	685a      	ldr	r2, [r3, #4]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2180      	movs	r1, #128	@ 0x80
 800f084:	01c9      	lsls	r1, r1, #7
 800f086:	430a      	orrs	r2, r1
 800f088:	605a      	str	r2, [r3, #4]
 800f08a:	e009      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	0018      	movs	r0, r3
 800f090:	f000 fcc2 	bl	800fa18 <I2C_ITMasterSeqCplt>
 800f094:	e004      	b.n	800f0a0 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2140      	movs	r1, #64	@ 0x40
 800f09a:	0018      	movs	r0, r3
 800f09c:	f000 ffa8 	bl	800fff0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	2220      	movs	r2, #32
 800f0a4:	4013      	ands	r3, r2
 800f0a6:	d009      	beq.n	800f0bc <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2220      	movs	r2, #32
 800f0ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f0ae:	d005      	beq.n	800f0bc <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	0011      	movs	r1, r2
 800f0b6:	0018      	movs	r0, r3
 800f0b8:	f000 fd54 	bl	800fb64 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2240      	movs	r2, #64	@ 0x40
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	0018      	movs	r0, r3
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	b007      	add	sp, #28
 800f0cc:	bd90      	pop	{r4, r7, pc}
 800f0ce:	46c0      	nop			@ (mov r8, r8)
 800f0d0:	ffff0000 	.word	0xffff0000

0800f0d4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2240      	movs	r2, #64	@ 0x40
 800f0ee:	5c9b      	ldrb	r3, [r3, r2]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d101      	bne.n	800f0f8 <I2C_Slave_ISR_IT+0x24>
 800f0f4:	2302      	movs	r3, #2
 800f0f6:	e0e6      	b.n	800f2c6 <I2C_Slave_ISR_IT+0x1f2>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2240      	movs	r2, #64	@ 0x40
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	2220      	movs	r2, #32
 800f104:	4013      	ands	r3, r2
 800f106:	d009      	beq.n	800f11c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2220      	movs	r2, #32
 800f10c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f10e:	d005      	beq.n	800f11c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f110:	693a      	ldr	r2, [r7, #16]
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	0011      	movs	r1, r2
 800f116:	0018      	movs	r0, r3
 800f118:	f000 fdf2 	bl	800fd00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	2210      	movs	r2, #16
 800f120:	4013      	ands	r3, r2
 800f122:	d052      	beq.n	800f1ca <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2210      	movs	r2, #16
 800f128:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f12a:	d04e      	beq.n	800f1ca <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f130:	b29b      	uxth	r3, r3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d12d      	bne.n	800f192 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2241      	movs	r2, #65	@ 0x41
 800f13a:	5c9b      	ldrb	r3, [r3, r2]
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	2b28      	cmp	r3, #40	@ 0x28
 800f140:	d10b      	bne.n	800f15a <I2C_Slave_ISR_IT+0x86>
 800f142:	697a      	ldr	r2, [r7, #20]
 800f144:	2380      	movs	r3, #128	@ 0x80
 800f146:	049b      	lsls	r3, r3, #18
 800f148:	429a      	cmp	r2, r3
 800f14a:	d106      	bne.n	800f15a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f14c:	693a      	ldr	r2, [r7, #16]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	0011      	movs	r1, r2
 800f152:	0018      	movs	r0, r3
 800f154:	f000 fef4 	bl	800ff40 <I2C_ITListenCplt>
 800f158:	e036      	b.n	800f1c8 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2241      	movs	r2, #65	@ 0x41
 800f15e:	5c9b      	ldrb	r3, [r3, r2]
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b29      	cmp	r3, #41	@ 0x29
 800f164:	d110      	bne.n	800f188 <I2C_Slave_ISR_IT+0xb4>
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	4a59      	ldr	r2, [pc, #356]	@ (800f2d0 <I2C_Slave_ISR_IT+0x1fc>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d00c      	beq.n	800f188 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2210      	movs	r2, #16
 800f174:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	0018      	movs	r0, r3
 800f17a:	f001 f864 	bl	8010246 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	0018      	movs	r0, r3
 800f182:	f000 fc8b 	bl	800fa9c <I2C_ITSlaveSeqCplt>
 800f186:	e01f      	b.n	800f1c8 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2210      	movs	r2, #16
 800f18e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f190:	e091      	b.n	800f2b6 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2210      	movs	r2, #16
 800f198:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f19e:	2204      	movs	r2, #4
 800f1a0:	431a      	orrs	r2, r3
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d005      	beq.n	800f1b8 <I2C_Slave_ISR_IT+0xe4>
 800f1ac:	697a      	ldr	r2, [r7, #20]
 800f1ae:	2380      	movs	r3, #128	@ 0x80
 800f1b0:	045b      	lsls	r3, r3, #17
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d000      	beq.n	800f1b8 <I2C_Slave_ISR_IT+0xe4>
 800f1b6:	e07e      	b.n	800f2b6 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	0011      	movs	r1, r2
 800f1c0:	0018      	movs	r0, r3
 800f1c2:	f000 ff15 	bl	800fff0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f1c6:	e076      	b.n	800f2b6 <I2C_Slave_ISR_IT+0x1e2>
 800f1c8:	e075      	b.n	800f2b6 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	2204      	movs	r2, #4
 800f1ce:	4013      	ands	r3, r2
 800f1d0:	d02f      	beq.n	800f232 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2204      	movs	r2, #4
 800f1d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f1d8:	d02b      	beq.n	800f232 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d018      	beq.n	800f216 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ee:	b2d2      	uxtb	r2, r2
 800f1f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1f6:	1c5a      	adds	r2, r3, #1
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f200:	3b01      	subs	r3, #1
 800f202:	b29a      	uxth	r2, r3
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	3b01      	subs	r3, #1
 800f210:	b29a      	uxth	r2, r3
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d14c      	bne.n	800f2ba <I2C_Slave_ISR_IT+0x1e6>
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	4a2b      	ldr	r2, [pc, #172]	@ (800f2d0 <I2C_Slave_ISR_IT+0x1fc>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d048      	beq.n	800f2ba <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	0018      	movs	r0, r3
 800f22c:	f000 fc36 	bl	800fa9c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f230:	e043      	b.n	800f2ba <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	2208      	movs	r2, #8
 800f236:	4013      	ands	r3, r2
 800f238:	d00a      	beq.n	800f250 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2208      	movs	r2, #8
 800f23e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f240:	d006      	beq.n	800f250 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f242:	693a      	ldr	r2, [r7, #16]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	0011      	movs	r1, r2
 800f248:	0018      	movs	r0, r3
 800f24a:	f000 fb41 	bl	800f8d0 <I2C_ITAddrCplt>
 800f24e:	e035      	b.n	800f2bc <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	2202      	movs	r2, #2
 800f254:	4013      	ands	r3, r2
 800f256:	d031      	beq.n	800f2bc <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2202      	movs	r2, #2
 800f25c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f25e:	d02d      	beq.n	800f2bc <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f264:	b29b      	uxth	r3, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	d018      	beq.n	800f29c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f26e:	781a      	ldrb	r2, [r3, #0]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f27a:	1c5a      	adds	r2, r3, #1
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f284:	b29b      	uxth	r3, r3
 800f286:	3b01      	subs	r3, #1
 800f288:	b29a      	uxth	r2, r3
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f292:	3b01      	subs	r3, #1
 800f294:	b29a      	uxth	r2, r3
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f29a:	e00f      	b.n	800f2bc <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f29c:	697a      	ldr	r2, [r7, #20]
 800f29e:	2380      	movs	r3, #128	@ 0x80
 800f2a0:	045b      	lsls	r3, r3, #17
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d002      	beq.n	800f2ac <I2C_Slave_ISR_IT+0x1d8>
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d107      	bne.n	800f2bc <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	0018      	movs	r0, r3
 800f2b0:	f000 fbf4 	bl	800fa9c <I2C_ITSlaveSeqCplt>
 800f2b4:	e002      	b.n	800f2bc <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800f2b6:	46c0      	nop			@ (mov r8, r8)
 800f2b8:	e000      	b.n	800f2bc <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800f2ba:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2240      	movs	r2, #64	@ 0x40
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f2c4:	2300      	movs	r3, #0
}
 800f2c6:	0018      	movs	r0, r3
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	b006      	add	sp, #24
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	46c0      	nop			@ (mov r8, r8)
 800f2d0:	ffff0000 	.word	0xffff0000

0800f2d4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f2d4:	b590      	push	{r4, r7, lr}
 800f2d6:	b089      	sub	sp, #36	@ 0x24
 800f2d8:	af02      	add	r7, sp, #8
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2240      	movs	r2, #64	@ 0x40
 800f2e4:	5c9b      	ldrb	r3, [r3, r2]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d101      	bne.n	800f2ee <I2C_Master_ISR_DMA+0x1a>
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	e0e7      	b.n	800f4be <I2C_Master_ISR_DMA+0x1ea>
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2240      	movs	r2, #64	@ 0x40
 800f2f2:	2101      	movs	r1, #1
 800f2f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	2210      	movs	r2, #16
 800f2fa:	4013      	ands	r3, r2
 800f2fc:	d017      	beq.n	800f32e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2210      	movs	r2, #16
 800f302:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f304:	d013      	beq.n	800f32e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2210      	movs	r2, #16
 800f30c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f312:	2204      	movs	r2, #4
 800f314:	431a      	orrs	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2120      	movs	r1, #32
 800f31e:	0018      	movs	r0, r3
 800f320:	f001 fb18 	bl	8010954 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	0018      	movs	r0, r3
 800f328:	f000 ff8d 	bl	8010246 <I2C_Flush_TXDR>
 800f32c:	e0c2      	b.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2280      	movs	r2, #128	@ 0x80
 800f332:	4013      	ands	r3, r2
 800f334:	d100      	bne.n	800f338 <I2C_Master_ISR_DMA+0x64>
 800f336:	e07c      	b.n	800f432 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2240      	movs	r2, #64	@ 0x40
 800f33c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f33e:	d100      	bne.n	800f342 <I2C_Master_ISR_DMA+0x6e>
 800f340:	e077      	b.n	800f432 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2140      	movs	r1, #64	@ 0x40
 800f34e:	438a      	bics	r2, r1
 800f350:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f356:	b29b      	uxth	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d055      	beq.n	800f408 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	b29a      	uxth	r2, r3
 800f364:	2312      	movs	r3, #18
 800f366:	18fb      	adds	r3, r7, r3
 800f368:	0592      	lsls	r2, r2, #22
 800f36a:	0d92      	lsrs	r2, r2, #22
 800f36c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f372:	b29b      	uxth	r3, r3
 800f374:	2bff      	cmp	r3, #255	@ 0xff
 800f376:	d906      	bls.n	800f386 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	22ff      	movs	r2, #255	@ 0xff
 800f37c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f37e:	2380      	movs	r3, #128	@ 0x80
 800f380:	045b      	lsls	r3, r3, #17
 800f382:	617b      	str	r3, [r7, #20]
 800f384:	e010      	b.n	800f3a8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f394:	4a4c      	ldr	r2, [pc, #304]	@ (800f4c8 <I2C_Master_ISR_DMA+0x1f4>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d003      	beq.n	800f3a2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f39e:	617b      	str	r3, [r7, #20]
 800f3a0:	e002      	b.n	800f3a8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f3a2:	2380      	movs	r3, #128	@ 0x80
 800f3a4:	049b      	lsls	r3, r3, #18
 800f3a6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	697c      	ldr	r4, [r7, #20]
 800f3b0:	2312      	movs	r3, #18
 800f3b2:	18fb      	adds	r3, r7, r3
 800f3b4:	8819      	ldrh	r1, [r3, #0]
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	0023      	movs	r3, r4
 800f3be:	f001 fa8f 	bl	80108e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3c6:	b29a      	uxth	r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2241      	movs	r2, #65	@ 0x41
 800f3d8:	5c9b      	ldrb	r3, [r3, r2]
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	2b22      	cmp	r3, #34	@ 0x22
 800f3de:	d109      	bne.n	800f3f4 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2180      	movs	r1, #128	@ 0x80
 800f3ec:	0209      	lsls	r1, r1, #8
 800f3ee:	430a      	orrs	r2, r1
 800f3f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f3f2:	e05f      	b.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2180      	movs	r1, #128	@ 0x80
 800f400:	01c9      	lsls	r1, r1, #7
 800f402:	430a      	orrs	r2, r1
 800f404:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f406:	e055      	b.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	2380      	movs	r3, #128	@ 0x80
 800f410:	049b      	lsls	r3, r3, #18
 800f412:	401a      	ands	r2, r3
 800f414:	2380      	movs	r3, #128	@ 0x80
 800f416:	049b      	lsls	r3, r3, #18
 800f418:	429a      	cmp	r2, r3
 800f41a:	d004      	beq.n	800f426 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	0018      	movs	r0, r3
 800f420:	f000 fafa 	bl	800fa18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f424:	e046      	b.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2140      	movs	r1, #64	@ 0x40
 800f42a:	0018      	movs	r0, r3
 800f42c:	f000 fde0 	bl	800fff0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f430:	e040      	b.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	2240      	movs	r2, #64	@ 0x40
 800f436:	4013      	ands	r3, r2
 800f438:	d02c      	beq.n	800f494 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2240      	movs	r2, #64	@ 0x40
 800f43e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f440:	d028      	beq.n	800f494 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f446:	b29b      	uxth	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d11d      	bne.n	800f488 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	2380      	movs	r3, #128	@ 0x80
 800f454:	049b      	lsls	r3, r3, #18
 800f456:	401a      	ands	r2, r3
 800f458:	2380      	movs	r3, #128	@ 0x80
 800f45a:	049b      	lsls	r3, r3, #18
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d028      	beq.n	800f4b2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f464:	4a18      	ldr	r2, [pc, #96]	@ (800f4c8 <I2C_Master_ISR_DMA+0x1f4>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d109      	bne.n	800f47e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	685a      	ldr	r2, [r3, #4]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2180      	movs	r1, #128	@ 0x80
 800f476:	01c9      	lsls	r1, r1, #7
 800f478:	430a      	orrs	r2, r1
 800f47a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f47c:	e019      	b.n	800f4b2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	0018      	movs	r0, r3
 800f482:	f000 fac9 	bl	800fa18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f486:	e014      	b.n	800f4b2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2140      	movs	r1, #64	@ 0x40
 800f48c:	0018      	movs	r0, r3
 800f48e:	f000 fdaf 	bl	800fff0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f492:	e00e      	b.n	800f4b2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	2220      	movs	r2, #32
 800f498:	4013      	ands	r3, r2
 800f49a:	d00b      	beq.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2220      	movs	r2, #32
 800f4a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f4a2:	d007      	beq.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	0011      	movs	r1, r2
 800f4aa:	0018      	movs	r0, r3
 800f4ac:	f000 fb5a 	bl	800fb64 <I2C_ITMasterCplt>
 800f4b0:	e000      	b.n	800f4b4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800f4b2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2240      	movs	r2, #64	@ 0x40
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	0018      	movs	r0, r3
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	b007      	add	sp, #28
 800f4c4:	bd90      	pop	{r4, r7, pc}
 800f4c6:	46c0      	nop			@ (mov r8, r8)
 800f4c8:	ffff0000 	.word	0xffff0000

0800f4cc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f4cc:	b590      	push	{r4, r7, lr}
 800f4ce:	b089      	sub	sp, #36	@ 0x24
 800f4d0:	af02      	add	r7, sp, #8
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f4d8:	4b88      	ldr	r3, [pc, #544]	@ (800f6fc <I2C_Mem_ISR_DMA+0x230>)
 800f4da:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2240      	movs	r2, #64	@ 0x40
 800f4e0:	5c9b      	ldrb	r3, [r3, r2]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d101      	bne.n	800f4ea <I2C_Mem_ISR_DMA+0x1e>
 800f4e6:	2302      	movs	r3, #2
 800f4e8:	e104      	b.n	800f6f4 <I2C_Mem_ISR_DMA+0x228>
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2240      	movs	r2, #64	@ 0x40
 800f4ee:	2101      	movs	r1, #1
 800f4f0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2210      	movs	r2, #16
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	d017      	beq.n	800f52a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2210      	movs	r2, #16
 800f4fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f500:	d013      	beq.n	800f52a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2210      	movs	r2, #16
 800f508:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f50e:	2204      	movs	r2, #4
 800f510:	431a      	orrs	r2, r3
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2120      	movs	r1, #32
 800f51a:	0018      	movs	r0, r3
 800f51c:	f001 fa1a 	bl	8010954 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	0018      	movs	r0, r3
 800f524:	f000 fe8f 	bl	8010246 <I2C_Flush_TXDR>
 800f528:	e0df      	b.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	2202      	movs	r2, #2
 800f52e:	4013      	ands	r3, r2
 800f530:	d00d      	beq.n	800f54e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2202      	movs	r2, #2
 800f536:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f538:	d009      	beq.n	800f54e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f542:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2201      	movs	r2, #1
 800f548:	4252      	negs	r2, r2
 800f54a:	651a      	str	r2, [r3, #80]	@ 0x50
 800f54c:	e0cd      	b.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	2280      	movs	r2, #128	@ 0x80
 800f552:	4013      	ands	r3, r2
 800f554:	d05e      	beq.n	800f614 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2240      	movs	r2, #64	@ 0x40
 800f55a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f55c:	d05a      	beq.n	800f614 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2110      	movs	r1, #16
 800f562:	0018      	movs	r0, r3
 800f564:	f001 f9f6 	bl	8010954 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d04a      	beq.n	800f608 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f576:	b29b      	uxth	r3, r3
 800f578:	2bff      	cmp	r3, #255	@ 0xff
 800f57a:	d910      	bls.n	800f59e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	22ff      	movs	r2, #255	@ 0xff
 800f580:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f586:	b299      	uxth	r1, r3
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f58c:	b2da      	uxtb	r2, r3
 800f58e:	2380      	movs	r3, #128	@ 0x80
 800f590:	045b      	lsls	r3, r3, #17
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	2400      	movs	r4, #0
 800f596:	9400      	str	r4, [sp, #0]
 800f598:	f001 f9a2 	bl	80108e0 <I2C_TransferConfig>
 800f59c:	e011      	b.n	800f5c2 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5ac:	b299      	uxth	r1, r3
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5b2:	b2da      	uxtb	r2, r3
 800f5b4:	2380      	movs	r3, #128	@ 0x80
 800f5b6:	049b      	lsls	r3, r3, #18
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	2400      	movs	r4, #0
 800f5bc:	9400      	str	r4, [sp, #0]
 800f5be:	f001 f98f 	bl	80108e0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2241      	movs	r2, #65	@ 0x41
 800f5d8:	5c9b      	ldrb	r3, [r3, r2]
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	2b22      	cmp	r3, #34	@ 0x22
 800f5de:	d109      	bne.n	800f5f4 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2180      	movs	r1, #128	@ 0x80
 800f5ec:	0209      	lsls	r1, r1, #8
 800f5ee:	430a      	orrs	r2, r1
 800f5f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f5f2:	e07a      	b.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2180      	movs	r1, #128	@ 0x80
 800f600:	01c9      	lsls	r1, r1, #7
 800f602:	430a      	orrs	r2, r1
 800f604:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f606:	e070      	b.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2140      	movs	r1, #64	@ 0x40
 800f60c:	0018      	movs	r0, r3
 800f60e:	f000 fcef 	bl	800fff0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f612:	e06a      	b.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	2240      	movs	r2, #64	@ 0x40
 800f618:	4013      	ands	r3, r2
 800f61a:	d058      	beq.n	800f6ce <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2240      	movs	r2, #64	@ 0x40
 800f620:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f622:	d054      	beq.n	800f6ce <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2241      	movs	r2, #65	@ 0x41
 800f628:	5c9b      	ldrb	r3, [r3, r2]
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b22      	cmp	r3, #34	@ 0x22
 800f62e:	d101      	bne.n	800f634 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800f630:	4b33      	ldr	r3, [pc, #204]	@ (800f700 <I2C_Mem_ISR_DMA+0x234>)
 800f632:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f638:	b29b      	uxth	r3, r3
 800f63a:	2bff      	cmp	r3, #255	@ 0xff
 800f63c:	d911      	bls.n	800f662 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	22ff      	movs	r2, #255	@ 0xff
 800f642:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f648:	b299      	uxth	r1, r3
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f64e:	b2da      	uxtb	r2, r3
 800f650:	2380      	movs	r3, #128	@ 0x80
 800f652:	045c      	lsls	r4, r3, #17
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	0023      	movs	r3, r4
 800f65c:	f001 f940 	bl	80108e0 <I2C_TransferConfig>
 800f660:	e012      	b.n	800f688 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f666:	b29a      	uxth	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f670:	b299      	uxth	r1, r3
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f676:	b2da      	uxtb	r2, r3
 800f678:	2380      	movs	r3, #128	@ 0x80
 800f67a:	049c      	lsls	r4, r3, #18
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	0023      	movs	r3, r4
 800f684:	f001 f92c 	bl	80108e0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	b29a      	uxth	r2, r3
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2241      	movs	r2, #65	@ 0x41
 800f69e:	5c9b      	ldrb	r3, [r3, r2]
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b22      	cmp	r3, #34	@ 0x22
 800f6a4:	d109      	bne.n	800f6ba <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2180      	movs	r1, #128	@ 0x80
 800f6b2:	0209      	lsls	r1, r1, #8
 800f6b4:	430a      	orrs	r2, r1
 800f6b6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f6b8:	e017      	b.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2180      	movs	r1, #128	@ 0x80
 800f6c6:	01c9      	lsls	r1, r1, #7
 800f6c8:	430a      	orrs	r2, r1
 800f6ca:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f6cc:	e00d      	b.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	2220      	movs	r2, #32
 800f6d2:	4013      	ands	r3, r2
 800f6d4:	d009      	beq.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2220      	movs	r2, #32
 800f6da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6dc:	d005      	beq.n	800f6ea <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f6de:	68ba      	ldr	r2, [r7, #8]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	0011      	movs	r1, r2
 800f6e4:	0018      	movs	r0, r3
 800f6e6:	f000 fa3d 	bl	800fb64 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2240      	movs	r2, #64	@ 0x40
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	0018      	movs	r0, r3
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	b007      	add	sp, #28
 800f6fa:	bd90      	pop	{r4, r7, pc}
 800f6fc:	80002000 	.word	0x80002000
 800f700:	80002400 	.word	0x80002400

0800f704 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b088      	sub	sp, #32
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f714:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f716:	2300      	movs	r3, #0
 800f718:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2240      	movs	r2, #64	@ 0x40
 800f71e:	5c9b      	ldrb	r3, [r3, r2]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d101      	bne.n	800f728 <I2C_Slave_ISR_DMA+0x24>
 800f724:	2302      	movs	r3, #2
 800f726:	e0cd      	b.n	800f8c4 <I2C_Slave_ISR_DMA+0x1c0>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2240      	movs	r2, #64	@ 0x40
 800f72c:	2101      	movs	r1, #1
 800f72e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	2220      	movs	r2, #32
 800f734:	4013      	ands	r3, r2
 800f736:	d009      	beq.n	800f74c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2220      	movs	r2, #32
 800f73c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f73e:	d005      	beq.n	800f74c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	0011      	movs	r1, r2
 800f746:	0018      	movs	r0, r3
 800f748:	f000 fada 	bl	800fd00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2210      	movs	r2, #16
 800f750:	4013      	ands	r3, r2
 800f752:	d100      	bne.n	800f756 <I2C_Slave_ISR_DMA+0x52>
 800f754:	e0a3      	b.n	800f89e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2210      	movs	r2, #16
 800f75a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f75c:	d100      	bne.n	800f760 <I2C_Slave_ISR_DMA+0x5c>
 800f75e:	e09e      	b.n	800f89e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	2380      	movs	r3, #128	@ 0x80
 800f764:	01db      	lsls	r3, r3, #7
 800f766:	4013      	ands	r3, r2
 800f768:	d105      	bne.n	800f776 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	2380      	movs	r3, #128	@ 0x80
 800f76e:	021b      	lsls	r3, r3, #8
 800f770:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f772:	d100      	bne.n	800f776 <I2C_Slave_ISR_DMA+0x72>
 800f774:	e08c      	b.n	800f890 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00c      	beq.n	800f798 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	2380      	movs	r3, #128	@ 0x80
 800f782:	021b      	lsls	r3, r3, #8
 800f784:	4013      	ands	r3, r2
 800f786:	d007      	beq.n	800f798 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800f794:	2301      	movs	r3, #1
 800f796:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00c      	beq.n	800f7ba <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	2380      	movs	r3, #128	@ 0x80
 800f7a4:	01db      	lsls	r3, r3, #7
 800f7a6:	4013      	ands	r3, r2
 800f7a8:	d007      	beq.n	800f7ba <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d101      	bne.n	800f7ba <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d12d      	bne.n	800f81c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2241      	movs	r2, #65	@ 0x41
 800f7c4:	5c9b      	ldrb	r3, [r3, r2]
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b28      	cmp	r3, #40	@ 0x28
 800f7ca:	d10b      	bne.n	800f7e4 <I2C_Slave_ISR_DMA+0xe0>
 800f7cc:	69ba      	ldr	r2, [r7, #24]
 800f7ce:	2380      	movs	r3, #128	@ 0x80
 800f7d0:	049b      	lsls	r3, r3, #18
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d106      	bne.n	800f7e4 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	0011      	movs	r1, r2
 800f7dc:	0018      	movs	r0, r3
 800f7de:	f000 fbaf 	bl	800ff40 <I2C_ITListenCplt>
 800f7e2:	e054      	b.n	800f88e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2241      	movs	r2, #65	@ 0x41
 800f7e8:	5c9b      	ldrb	r3, [r3, r2]
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	2b29      	cmp	r3, #41	@ 0x29
 800f7ee:	d110      	bne.n	800f812 <I2C_Slave_ISR_DMA+0x10e>
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	4a36      	ldr	r2, [pc, #216]	@ (800f8cc <I2C_Slave_ISR_DMA+0x1c8>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d00c      	beq.n	800f812 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2210      	movs	r2, #16
 800f7fe:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	0018      	movs	r0, r3
 800f804:	f000 fd1f 	bl	8010246 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	0018      	movs	r0, r3
 800f80c:	f000 f946 	bl	800fa9c <I2C_ITSlaveSeqCplt>
 800f810:	e03d      	b.n	800f88e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2210      	movs	r2, #16
 800f818:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f81a:	e03e      	b.n	800f89a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2210      	movs	r2, #16
 800f822:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f828:	2204      	movs	r2, #4
 800f82a:	431a      	orrs	r2, r3
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f830:	2317      	movs	r3, #23
 800f832:	18fb      	adds	r3, r7, r3
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	2141      	movs	r1, #65	@ 0x41
 800f838:	5c52      	ldrb	r2, [r2, r1]
 800f83a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d004      	beq.n	800f84c <I2C_Slave_ISR_DMA+0x148>
 800f842:	69ba      	ldr	r2, [r7, #24]
 800f844:	2380      	movs	r3, #128	@ 0x80
 800f846:	045b      	lsls	r3, r3, #17
 800f848:	429a      	cmp	r2, r3
 800f84a:	d126      	bne.n	800f89a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f84c:	2217      	movs	r2, #23
 800f84e:	18bb      	adds	r3, r7, r2
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	2b21      	cmp	r3, #33	@ 0x21
 800f854:	d003      	beq.n	800f85e <I2C_Slave_ISR_DMA+0x15a>
 800f856:	18bb      	adds	r3, r7, r2
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	2b29      	cmp	r3, #41	@ 0x29
 800f85c:	d103      	bne.n	800f866 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2221      	movs	r2, #33	@ 0x21
 800f862:	631a      	str	r2, [r3, #48]	@ 0x30
 800f864:	e00b      	b.n	800f87e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f866:	2217      	movs	r2, #23
 800f868:	18bb      	adds	r3, r7, r2
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	2b22      	cmp	r3, #34	@ 0x22
 800f86e:	d003      	beq.n	800f878 <I2C_Slave_ISR_DMA+0x174>
 800f870:	18bb      	adds	r3, r7, r2
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	2b2a      	cmp	r3, #42	@ 0x2a
 800f876:	d102      	bne.n	800f87e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2222      	movs	r2, #34	@ 0x22
 800f87c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	0011      	movs	r1, r2
 800f886:	0018      	movs	r0, r3
 800f888:	f000 fbb2 	bl	800fff0 <I2C_ITError>
      if (treatdmanack == 1U)
 800f88c:	e005      	b.n	800f89a <I2C_Slave_ISR_DMA+0x196>
 800f88e:	e004      	b.n	800f89a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2210      	movs	r2, #16
 800f896:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f898:	e00f      	b.n	800f8ba <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800f89a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f89c:	e00d      	b.n	800f8ba <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	2208      	movs	r2, #8
 800f8a2:	4013      	ands	r3, r2
 800f8a4:	d009      	beq.n	800f8ba <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2208      	movs	r2, #8
 800f8aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f8ac:	d005      	beq.n	800f8ba <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	0011      	movs	r1, r2
 800f8b4:	0018      	movs	r0, r3
 800f8b6:	f000 f80b 	bl	800f8d0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2240      	movs	r2, #64	@ 0x40
 800f8be:	2100      	movs	r1, #0
 800f8c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	0018      	movs	r0, r3
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	b008      	add	sp, #32
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	ffff0000 	.word	0xffff0000

0800f8d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f8d0:	b5b0      	push	{r4, r5, r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2241      	movs	r2, #65	@ 0x41
 800f8de:	5c9b      	ldrb	r3, [r3, r2]
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	001a      	movs	r2, r3
 800f8e4:	2328      	movs	r3, #40	@ 0x28
 800f8e6:	4013      	ands	r3, r2
 800f8e8:	2b28      	cmp	r3, #40	@ 0x28
 800f8ea:	d000      	beq.n	800f8ee <I2C_ITAddrCplt+0x1e>
 800f8ec:	e088      	b.n	800fa00 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	699b      	ldr	r3, [r3, #24]
 800f8f4:	0c1b      	lsrs	r3, r3, #16
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	250f      	movs	r5, #15
 800f8fa:	197b      	adds	r3, r7, r5
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	400a      	ands	r2, r1
 800f900:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	0c1b      	lsrs	r3, r3, #16
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	200c      	movs	r0, #12
 800f90e:	183b      	adds	r3, r7, r0
 800f910:	21fe      	movs	r1, #254	@ 0xfe
 800f912:	400a      	ands	r2, r1
 800f914:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	240a      	movs	r4, #10
 800f920:	193b      	adds	r3, r7, r4
 800f922:	0592      	lsls	r2, r2, #22
 800f924:	0d92      	lsrs	r2, r2, #22
 800f926:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	b29a      	uxth	r2, r3
 800f930:	2308      	movs	r3, #8
 800f932:	18fb      	adds	r3, r7, r3
 800f934:	21fe      	movs	r1, #254	@ 0xfe
 800f936:	400a      	ands	r2, r1
 800f938:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	2b02      	cmp	r3, #2
 800f940:	d148      	bne.n	800f9d4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800f942:	0021      	movs	r1, r4
 800f944:	187b      	adds	r3, r7, r1
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	09db      	lsrs	r3, r3, #7
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	183b      	adds	r3, r7, r0
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	4053      	eors	r3, r2
 800f952:	b29b      	uxth	r3, r3
 800f954:	001a      	movs	r2, r3
 800f956:	2306      	movs	r3, #6
 800f958:	4013      	ands	r3, r2
 800f95a:	d120      	bne.n	800f99e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800f95c:	183b      	adds	r3, r7, r0
 800f95e:	187a      	adds	r2, r7, r1
 800f960:	8812      	ldrh	r2, [r2, #0]
 800f962:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f968:	1c5a      	adds	r2, r3, #1
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f972:	2b02      	cmp	r3, #2
 800f974:	d14c      	bne.n	800fa10 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2208      	movs	r2, #8
 800f982:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2240      	movs	r2, #64	@ 0x40
 800f988:	2100      	movs	r1, #0
 800f98a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f98c:	183b      	adds	r3, r7, r0
 800f98e:	881a      	ldrh	r2, [r3, #0]
 800f990:	197b      	adds	r3, r7, r5
 800f992:	7819      	ldrb	r1, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	0018      	movs	r0, r3
 800f998:	f7ff fa39 	bl	800ee0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f99c:	e038      	b.n	800fa10 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800f99e:	240c      	movs	r4, #12
 800f9a0:	193b      	adds	r3, r7, r4
 800f9a2:	2208      	movs	r2, #8
 800f9a4:	18ba      	adds	r2, r7, r2
 800f9a6:	8812      	ldrh	r2, [r2, #0]
 800f9a8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f9aa:	2380      	movs	r3, #128	@ 0x80
 800f9ac:	021a      	lsls	r2, r3, #8
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	0011      	movs	r1, r2
 800f9b2:	0018      	movs	r0, r3
 800f9b4:	f001 f85c 	bl	8010a70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2240      	movs	r2, #64	@ 0x40
 800f9bc:	2100      	movs	r1, #0
 800f9be:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f9c0:	193b      	adds	r3, r7, r4
 800f9c2:	881a      	ldrh	r2, [r3, #0]
 800f9c4:	230f      	movs	r3, #15
 800f9c6:	18fb      	adds	r3, r7, r3
 800f9c8:	7819      	ldrb	r1, [r3, #0]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	0018      	movs	r0, r3
 800f9ce:	f7ff fa1e 	bl	800ee0e <HAL_I2C_AddrCallback>
}
 800f9d2:	e01d      	b.n	800fa10 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f9d4:	2380      	movs	r3, #128	@ 0x80
 800f9d6:	021a      	lsls	r2, r3, #8
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	0011      	movs	r1, r2
 800f9dc:	0018      	movs	r0, r3
 800f9de:	f001 f847 	bl	8010a70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2240      	movs	r2, #64	@ 0x40
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f9ea:	230c      	movs	r3, #12
 800f9ec:	18fb      	adds	r3, r7, r3
 800f9ee:	881a      	ldrh	r2, [r3, #0]
 800f9f0:	230f      	movs	r3, #15
 800f9f2:	18fb      	adds	r3, r7, r3
 800f9f4:	7819      	ldrb	r1, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	0018      	movs	r0, r3
 800f9fa:	f7ff fa08 	bl	800ee0e <HAL_I2C_AddrCallback>
}
 800f9fe:	e007      	b.n	800fa10 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2208      	movs	r2, #8
 800fa06:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2240      	movs	r2, #64	@ 0x40
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	5499      	strb	r1, [r3, r2]
}
 800fa10:	46c0      	nop			@ (mov r8, r8)
 800fa12:	46bd      	mov	sp, r7
 800fa14:	b004      	add	sp, #16
 800fa16:	bdb0      	pop	{r4, r5, r7, pc}

0800fa18 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2242      	movs	r2, #66	@ 0x42
 800fa24:	2100      	movs	r1, #0
 800fa26:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2241      	movs	r2, #65	@ 0x41
 800fa2c:	5c9b      	ldrb	r3, [r3, r2]
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	2b21      	cmp	r3, #33	@ 0x21
 800fa32:	d117      	bne.n	800fa64 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2241      	movs	r2, #65	@ 0x41
 800fa38:	2120      	movs	r1, #32
 800fa3a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2211      	movs	r2, #17
 800fa40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2101      	movs	r1, #1
 800fa4c:	0018      	movs	r0, r3
 800fa4e:	f001 f80f 	bl	8010a70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2240      	movs	r2, #64	@ 0x40
 800fa56:	2100      	movs	r1, #0
 800fa58:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	0018      	movs	r0, r3
 800fa5e:	f7ff f9b6 	bl	800edce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fa62:	e016      	b.n	800fa92 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2241      	movs	r2, #65	@ 0x41
 800fa68:	2120      	movs	r1, #32
 800fa6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2212      	movs	r2, #18
 800fa70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2102      	movs	r1, #2
 800fa7c:	0018      	movs	r0, r3
 800fa7e:	f000 fff7 	bl	8010a70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2240      	movs	r2, #64	@ 0x40
 800fa86:	2100      	movs	r1, #0
 800fa88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	0018      	movs	r0, r3
 800fa8e:	f7ff f9a6 	bl	800edde <HAL_I2C_MasterRxCpltCallback>
}
 800fa92:	46c0      	nop			@ (mov r8, r8)
 800fa94:	46bd      	mov	sp, r7
 800fa96:	b002      	add	sp, #8
 800fa98:	bd80      	pop	{r7, pc}
	...

0800fa9c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2242      	movs	r2, #66	@ 0x42
 800fab0:	2100      	movs	r1, #0
 800fab2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	2380      	movs	r3, #128	@ 0x80
 800fab8:	01db      	lsls	r3, r3, #7
 800faba:	4013      	ands	r3, r2
 800fabc:	d008      	beq.n	800fad0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4924      	ldr	r1, [pc, #144]	@ (800fb5c <I2C_ITSlaveSeqCplt+0xc0>)
 800faca:	400a      	ands	r2, r1
 800facc:	601a      	str	r2, [r3, #0]
 800face:	e00c      	b.n	800faea <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	2380      	movs	r3, #128	@ 0x80
 800fad4:	021b      	lsls	r3, r3, #8
 800fad6:	4013      	ands	r3, r2
 800fad8:	d007      	beq.n	800faea <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	491e      	ldr	r1, [pc, #120]	@ (800fb60 <I2C_ITSlaveSeqCplt+0xc4>)
 800fae6:	400a      	ands	r2, r1
 800fae8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2241      	movs	r2, #65	@ 0x41
 800faee:	5c9b      	ldrb	r3, [r3, r2]
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	2b29      	cmp	r3, #41	@ 0x29
 800faf4:	d114      	bne.n	800fb20 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2241      	movs	r2, #65	@ 0x41
 800fafa:	2128      	movs	r1, #40	@ 0x28
 800fafc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2221      	movs	r2, #33	@ 0x21
 800fb02:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2101      	movs	r1, #1
 800fb08:	0018      	movs	r0, r3
 800fb0a:	f000 ffb1 	bl	8010a70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2240      	movs	r2, #64	@ 0x40
 800fb12:	2100      	movs	r1, #0
 800fb14:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	0018      	movs	r0, r3
 800fb1a:	f7ff f968 	bl	800edee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fb1e:	e019      	b.n	800fb54 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2241      	movs	r2, #65	@ 0x41
 800fb24:	5c9b      	ldrb	r3, [r3, r2]
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb2a:	d113      	bne.n	800fb54 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2241      	movs	r2, #65	@ 0x41
 800fb30:	2128      	movs	r1, #40	@ 0x28
 800fb32:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2222      	movs	r2, #34	@ 0x22
 800fb38:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2102      	movs	r1, #2
 800fb3e:	0018      	movs	r0, r3
 800fb40:	f000 ff96 	bl	8010a70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2240      	movs	r2, #64	@ 0x40
 800fb48:	2100      	movs	r1, #0
 800fb4a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	0018      	movs	r0, r3
 800fb50:	f7ff f955 	bl	800edfe <HAL_I2C_SlaveRxCpltCallback>
}
 800fb54:	46c0      	nop			@ (mov r8, r8)
 800fb56:	46bd      	mov	sp, r7
 800fb58:	b004      	add	sp, #16
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	ffffbfff 	.word	0xffffbfff
 800fb60:	ffff7fff 	.word	0xffff7fff

0800fb64 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2220      	movs	r2, #32
 800fb78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2241      	movs	r2, #65	@ 0x41
 800fb7e:	5c9b      	ldrb	r3, [r3, r2]
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	2b21      	cmp	r3, #33	@ 0x21
 800fb84:	d108      	bne.n	800fb98 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2101      	movs	r1, #1
 800fb8a:	0018      	movs	r0, r3
 800fb8c:	f000 ff70 	bl	8010a70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2211      	movs	r2, #17
 800fb94:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb96:	e00d      	b.n	800fbb4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2241      	movs	r2, #65	@ 0x41
 800fb9c:	5c9b      	ldrb	r3, [r3, r2]
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	2b22      	cmp	r3, #34	@ 0x22
 800fba2:	d107      	bne.n	800fbb4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2102      	movs	r1, #2
 800fba8:	0018      	movs	r0, r3
 800fbaa:	f000 ff61 	bl	8010a70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2212      	movs	r2, #18
 800fbb2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	494e      	ldr	r1, [pc, #312]	@ (800fcf8 <I2C_ITMasterCplt+0x194>)
 800fbc0:	400a      	ands	r2, r1
 800fbc2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a4b      	ldr	r2, [pc, #300]	@ (800fcfc <I2C_ITMasterCplt+0x198>)
 800fbce:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2210      	movs	r2, #16
 800fbd4:	4013      	ands	r3, r2
 800fbd6:	d009      	beq.n	800fbec <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2210      	movs	r2, #16
 800fbde:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbe4:	2204      	movs	r2, #4
 800fbe6:	431a      	orrs	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2241      	movs	r2, #65	@ 0x41
 800fbf0:	5c9b      	ldrb	r3, [r3, r2]
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	2b60      	cmp	r3, #96	@ 0x60
 800fbf6:	d109      	bne.n	800fc0c <I2C_ITMasterCplt+0xa8>
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	2204      	movs	r2, #4
 800fbfc:	4013      	ands	r3, r2
 800fbfe:	d005      	beq.n	800fc0c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	0018      	movs	r0, r3
 800fc10:	f000 fb19 	bl	8010246 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc18:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2241      	movs	r2, #65	@ 0x41
 800fc1e:	5c9b      	ldrb	r3, [r3, r2]
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	2b60      	cmp	r3, #96	@ 0x60
 800fc24:	d002      	beq.n	800fc2c <I2C_ITMasterCplt+0xc8>
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d007      	beq.n	800fc3c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	0011      	movs	r1, r2
 800fc34:	0018      	movs	r0, r3
 800fc36:	f000 f9db 	bl	800fff0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fc3a:	e058      	b.n	800fcee <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2241      	movs	r2, #65	@ 0x41
 800fc40:	5c9b      	ldrb	r3, [r3, r2]
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	2b21      	cmp	r3, #33	@ 0x21
 800fc46:	d126      	bne.n	800fc96 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2241      	movs	r2, #65	@ 0x41
 800fc4c:	2120      	movs	r1, #32
 800fc4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2242      	movs	r2, #66	@ 0x42
 800fc5a:	5c9b      	ldrb	r3, [r3, r2]
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	2b40      	cmp	r3, #64	@ 0x40
 800fc60:	d10c      	bne.n	800fc7c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2242      	movs	r2, #66	@ 0x42
 800fc66:	2100      	movs	r1, #0
 800fc68:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2240      	movs	r2, #64	@ 0x40
 800fc6e:	2100      	movs	r1, #0
 800fc70:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	0018      	movs	r0, r3
 800fc76:	f7ff f8e2 	bl	800ee3e <HAL_I2C_MemTxCpltCallback>
}
 800fc7a:	e038      	b.n	800fcee <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2242      	movs	r2, #66	@ 0x42
 800fc80:	2100      	movs	r1, #0
 800fc82:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2240      	movs	r2, #64	@ 0x40
 800fc88:	2100      	movs	r1, #0
 800fc8a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	0018      	movs	r0, r3
 800fc90:	f7ff f89d 	bl	800edce <HAL_I2C_MasterTxCpltCallback>
}
 800fc94:	e02b      	b.n	800fcee <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2241      	movs	r2, #65	@ 0x41
 800fc9a:	5c9b      	ldrb	r3, [r3, r2]
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	2b22      	cmp	r3, #34	@ 0x22
 800fca0:	d125      	bne.n	800fcee <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2241      	movs	r2, #65	@ 0x41
 800fca6:	2120      	movs	r1, #32
 800fca8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2200      	movs	r2, #0
 800fcae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2242      	movs	r2, #66	@ 0x42
 800fcb4:	5c9b      	ldrb	r3, [r3, r2]
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	2b40      	cmp	r3, #64	@ 0x40
 800fcba:	d10c      	bne.n	800fcd6 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2242      	movs	r2, #66	@ 0x42
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2240      	movs	r2, #64	@ 0x40
 800fcc8:	2100      	movs	r1, #0
 800fcca:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	0018      	movs	r0, r3
 800fcd0:	f7ff f8bd 	bl	800ee4e <HAL_I2C_MemRxCpltCallback>
}
 800fcd4:	e00b      	b.n	800fcee <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2242      	movs	r2, #66	@ 0x42
 800fcda:	2100      	movs	r1, #0
 800fcdc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2240      	movs	r2, #64	@ 0x40
 800fce2:	2100      	movs	r1, #0
 800fce4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	0018      	movs	r0, r3
 800fcea:	f7ff f878 	bl	800edde <HAL_I2C_MasterRxCpltCallback>
}
 800fcee:	46c0      	nop			@ (mov r8, r8)
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	b006      	add	sp, #24
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	46c0      	nop			@ (mov r8, r8)
 800fcf8:	fe00e800 	.word	0xfe00e800
 800fcfc:	ffff0000 	.word	0xffff0000

0800fd00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fd16:	200f      	movs	r0, #15
 800fd18:	183b      	adds	r3, r7, r0
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	2141      	movs	r1, #65	@ 0x41
 800fd1e:	5c52      	ldrb	r2, [r2, r1]
 800fd20:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2220      	movs	r2, #32
 800fd28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fd2a:	183b      	adds	r3, r7, r0
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	2b21      	cmp	r3, #33	@ 0x21
 800fd30:	d003      	beq.n	800fd3a <I2C_ITSlaveCplt+0x3a>
 800fd32:	183b      	adds	r3, r7, r0
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b29      	cmp	r3, #41	@ 0x29
 800fd38:	d109      	bne.n	800fd4e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800fd3a:	4a7b      	ldr	r2, [pc, #492]	@ (800ff28 <I2C_ITSlaveCplt+0x228>)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	0011      	movs	r1, r2
 800fd40:	0018      	movs	r0, r3
 800fd42:	f000 fe95 	bl	8010a70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2221      	movs	r2, #33	@ 0x21
 800fd4a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd4c:	e011      	b.n	800fd72 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fd4e:	220f      	movs	r2, #15
 800fd50:	18bb      	adds	r3, r7, r2
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	2b22      	cmp	r3, #34	@ 0x22
 800fd56:	d003      	beq.n	800fd60 <I2C_ITSlaveCplt+0x60>
 800fd58:	18bb      	adds	r3, r7, r2
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd5e:	d108      	bne.n	800fd72 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800fd60:	4a72      	ldr	r2, [pc, #456]	@ (800ff2c <I2C_ITSlaveCplt+0x22c>)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	0011      	movs	r1, r2
 800fd66:	0018      	movs	r0, r3
 800fd68:	f000 fe82 	bl	8010a70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2222      	movs	r2, #34	@ 0x22
 800fd70:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	685a      	ldr	r2, [r3, #4]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2180      	movs	r1, #128	@ 0x80
 800fd7e:	0209      	lsls	r1, r1, #8
 800fd80:	430a      	orrs	r2, r1
 800fd82:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	685a      	ldr	r2, [r3, #4]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4968      	ldr	r1, [pc, #416]	@ (800ff30 <I2C_ITSlaveCplt+0x230>)
 800fd90:	400a      	ands	r2, r1
 800fd92:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	0018      	movs	r0, r3
 800fd98:	f000 fa55 	bl	8010246 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fd9c:	693a      	ldr	r2, [r7, #16]
 800fd9e:	2380      	movs	r3, #128	@ 0x80
 800fda0:	01db      	lsls	r3, r3, #7
 800fda2:	4013      	ands	r3, r2
 800fda4:	d013      	beq.n	800fdce <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4960      	ldr	r1, [pc, #384]	@ (800ff34 <I2C_ITSlaveCplt+0x234>)
 800fdb2:	400a      	ands	r2, r1
 800fdb4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d01f      	beq.n	800fdfe <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fdcc:	e017      	b.n	800fdfe <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fdce:	693a      	ldr	r2, [r7, #16]
 800fdd0:	2380      	movs	r3, #128	@ 0x80
 800fdd2:	021b      	lsls	r3, r3, #8
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	d012      	beq.n	800fdfe <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4955      	ldr	r1, [pc, #340]	@ (800ff38 <I2C_ITSlaveCplt+0x238>)
 800fde4:	400a      	ands	r2, r1
 800fde6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d006      	beq.n	800fdfe <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	2204      	movs	r2, #4
 800fe02:	4013      	ands	r3, r2
 800fe04:	d020      	beq.n	800fe48 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	2204      	movs	r2, #4
 800fe0a:	4393      	bics	r3, r2
 800fe0c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe18:	b2d2      	uxtb	r2, r2
 800fe1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe20:	1c5a      	adds	r2, r3, #1
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00c      	beq.n	800fe48 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe32:	3b01      	subs	r3, #1
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	3b01      	subs	r3, #1
 800fe42:	b29a      	uxth	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d005      	beq.n	800fe5e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe56:	2204      	movs	r2, #4
 800fe58:	431a      	orrs	r2, r3
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2242      	movs	r2, #66	@ 0x42
 800fe62:	2100      	movs	r1, #0
 800fe64:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d013      	beq.n	800fe9c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	0011      	movs	r1, r2
 800fe7c:	0018      	movs	r0, r3
 800fe7e:	f000 f8b7 	bl	800fff0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2241      	movs	r2, #65	@ 0x41
 800fe86:	5c9b      	ldrb	r3, [r3, r2]
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	2b28      	cmp	r3, #40	@ 0x28
 800fe8c:	d147      	bne.n	800ff1e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	0011      	movs	r1, r2
 800fe94:	0018      	movs	r0, r3
 800fe96:	f000 f853 	bl	800ff40 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fe9a:	e040      	b.n	800ff1e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea0:	4a26      	ldr	r2, [pc, #152]	@ (800ff3c <I2C_ITSlaveCplt+0x23c>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d016      	beq.n	800fed4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	0018      	movs	r0, r3
 800feaa:	f7ff fdf7 	bl	800fa9c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4a22      	ldr	r2, [pc, #136]	@ (800ff3c <I2C_ITSlaveCplt+0x23c>)
 800feb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2241      	movs	r2, #65	@ 0x41
 800feb8:	2120      	movs	r1, #32
 800feba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2240      	movs	r2, #64	@ 0x40
 800fec6:	2100      	movs	r1, #0
 800fec8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	0018      	movs	r0, r3
 800fece:	f7fe ffae 	bl	800ee2e <HAL_I2C_ListenCpltCallback>
}
 800fed2:	e024      	b.n	800ff1e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2241      	movs	r2, #65	@ 0x41
 800fed8:	5c9b      	ldrb	r3, [r3, r2]
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	2b22      	cmp	r3, #34	@ 0x22
 800fede:	d10f      	bne.n	800ff00 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2241      	movs	r2, #65	@ 0x41
 800fee4:	2120      	movs	r1, #32
 800fee6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2240      	movs	r2, #64	@ 0x40
 800fef2:	2100      	movs	r1, #0
 800fef4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	0018      	movs	r0, r3
 800fefa:	f7fe ff80 	bl	800edfe <HAL_I2C_SlaveRxCpltCallback>
}
 800fefe:	e00e      	b.n	800ff1e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2241      	movs	r2, #65	@ 0x41
 800ff04:	2120      	movs	r1, #32
 800ff06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2240      	movs	r2, #64	@ 0x40
 800ff12:	2100      	movs	r1, #0
 800ff14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	0018      	movs	r0, r3
 800ff1a:	f7fe ff68 	bl	800edee <HAL_I2C_SlaveTxCpltCallback>
}
 800ff1e:	46c0      	nop			@ (mov r8, r8)
 800ff20:	46bd      	mov	sp, r7
 800ff22:	b006      	add	sp, #24
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	46c0      	nop			@ (mov r8, r8)
 800ff28:	00008001 	.word	0x00008001
 800ff2c:	00008002 	.word	0x00008002
 800ff30:	fe00e800 	.word	0xfe00e800
 800ff34:	ffffbfff 	.word	0xffffbfff
 800ff38:	ffff7fff 	.word	0xffff7fff
 800ff3c:	ffff0000 	.word	0xffff0000

0800ff40 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4a26      	ldr	r2, [pc, #152]	@ (800ffe8 <I2C_ITListenCplt+0xa8>)
 800ff4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2241      	movs	r2, #65	@ 0x41
 800ff5a:	2120      	movs	r1, #32
 800ff5c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2242      	movs	r2, #66	@ 0x42
 800ff62:	2100      	movs	r1, #0
 800ff64:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	2204      	movs	r2, #4
 800ff70:	4013      	ands	r3, r2
 800ff72:	d022      	beq.n	800ffba <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff7e:	b2d2      	uxtb	r2, r2
 800ff80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff86:	1c5a      	adds	r2, r3, #1
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d012      	beq.n	800ffba <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffb2:	2204      	movs	r2, #4
 800ffb4:	431a      	orrs	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ffba:	4a0c      	ldr	r2, [pc, #48]	@ (800ffec <I2C_ITListenCplt+0xac>)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	0011      	movs	r1, r2
 800ffc0:	0018      	movs	r0, r3
 800ffc2:	f000 fd55 	bl	8010a70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2210      	movs	r2, #16
 800ffcc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2240      	movs	r2, #64	@ 0x40
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	0018      	movs	r0, r3
 800ffda:	f7fe ff28 	bl	800ee2e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ffde:	46c0      	nop			@ (mov r8, r8)
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	b002      	add	sp, #8
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	46c0      	nop			@ (mov r8, r8)
 800ffe8:	ffff0000 	.word	0xffff0000
 800ffec:	00008003 	.word	0x00008003

0800fff0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fffa:	200f      	movs	r0, #15
 800fffc:	183b      	adds	r3, r7, r0
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	2141      	movs	r1, #65	@ 0x41
 8010002:	5c52      	ldrb	r2, [r2, r1]
 8010004:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2242      	movs	r2, #66	@ 0x42
 801000a:	2100      	movs	r1, #0
 801000c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4a72      	ldr	r2, [pc, #456]	@ (80101dc <I2C_ITError+0x1ec>)
 8010012:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2200      	movs	r2, #0
 8010018:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	431a      	orrs	r2, r3
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010026:	183b      	adds	r3, r7, r0
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	2b28      	cmp	r3, #40	@ 0x28
 801002c:	d007      	beq.n	801003e <I2C_ITError+0x4e>
 801002e:	183b      	adds	r3, r7, r0
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	2b29      	cmp	r3, #41	@ 0x29
 8010034:	d003      	beq.n	801003e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010036:	183b      	adds	r3, r7, r0
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	2b2a      	cmp	r3, #42	@ 0x2a
 801003c:	d10c      	bne.n	8010058 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2103      	movs	r1, #3
 8010042:	0018      	movs	r0, r3
 8010044:	f000 fd14 	bl	8010a70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2241      	movs	r2, #65	@ 0x41
 801004c:	2128      	movs	r1, #40	@ 0x28
 801004e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4a63      	ldr	r2, [pc, #396]	@ (80101e0 <I2C_ITError+0x1f0>)
 8010054:	635a      	str	r2, [r3, #52]	@ 0x34
 8010056:	e032      	b.n	80100be <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010058:	4a62      	ldr	r2, [pc, #392]	@ (80101e4 <I2C_ITError+0x1f4>)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	0011      	movs	r1, r2
 801005e:	0018      	movs	r0, r3
 8010060:	f000 fd06 	bl	8010a70 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	0018      	movs	r0, r3
 8010068:	f000 f8ed 	bl	8010246 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2241      	movs	r2, #65	@ 0x41
 8010070:	5c9b      	ldrb	r3, [r3, r2]
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b60      	cmp	r3, #96	@ 0x60
 8010076:	d01f      	beq.n	80100b8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2241      	movs	r2, #65	@ 0x41
 801007c:	2120      	movs	r1, #32
 801007e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	699b      	ldr	r3, [r3, #24]
 8010086:	2220      	movs	r2, #32
 8010088:	4013      	ands	r3, r2
 801008a:	2b20      	cmp	r3, #32
 801008c:	d114      	bne.n	80100b8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	699b      	ldr	r3, [r3, #24]
 8010094:	2210      	movs	r2, #16
 8010096:	4013      	ands	r3, r2
 8010098:	2b10      	cmp	r3, #16
 801009a:	d109      	bne.n	80100b0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	2210      	movs	r2, #16
 80100a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100a8:	2204      	movs	r2, #4
 80100aa:	431a      	orrs	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2220      	movs	r2, #32
 80100b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d03b      	beq.n	8010144 <I2C_ITError+0x154>
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	2b11      	cmp	r3, #17
 80100d0:	d002      	beq.n	80100d8 <I2C_ITError+0xe8>
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	2b21      	cmp	r3, #33	@ 0x21
 80100d6:	d135      	bne.n	8010144 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	2380      	movs	r3, #128	@ 0x80
 80100e0:	01db      	lsls	r3, r3, #7
 80100e2:	401a      	ands	r2, r3
 80100e4:	2380      	movs	r3, #128	@ 0x80
 80100e6:	01db      	lsls	r3, r3, #7
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d107      	bne.n	80100fc <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	493c      	ldr	r1, [pc, #240]	@ (80101e8 <I2C_ITError+0x1f8>)
 80100f8:	400a      	ands	r2, r1
 80100fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010100:	0018      	movs	r0, r3
 8010102:	f7fd fd7e 	bl	800dc02 <HAL_DMA_GetState>
 8010106:	0003      	movs	r3, r0
 8010108:	2b01      	cmp	r3, #1
 801010a:	d016      	beq.n	801013a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010110:	4a36      	ldr	r2, [pc, #216]	@ (80101ec <I2C_ITError+0x1fc>)
 8010112:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2240      	movs	r2, #64	@ 0x40
 8010118:	2100      	movs	r1, #0
 801011a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010120:	0018      	movs	r0, r3
 8010122:	f7fd fc79 	bl	800da18 <HAL_DMA_Abort_IT>
 8010126:	1e03      	subs	r3, r0, #0
 8010128:	d051      	beq.n	80101ce <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801012e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010134:	0018      	movs	r0, r3
 8010136:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010138:	e049      	b.n	80101ce <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	0018      	movs	r0, r3
 801013e:	f000 f859 	bl	80101f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010142:	e044      	b.n	80101ce <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010148:	2b00      	cmp	r3, #0
 801014a:	d03b      	beq.n	80101c4 <I2C_ITError+0x1d4>
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	2b12      	cmp	r3, #18
 8010150:	d002      	beq.n	8010158 <I2C_ITError+0x168>
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b22      	cmp	r3, #34	@ 0x22
 8010156:	d135      	bne.n	80101c4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	2380      	movs	r3, #128	@ 0x80
 8010160:	021b      	lsls	r3, r3, #8
 8010162:	401a      	ands	r2, r3
 8010164:	2380      	movs	r3, #128	@ 0x80
 8010166:	021b      	lsls	r3, r3, #8
 8010168:	429a      	cmp	r2, r3
 801016a:	d107      	bne.n	801017c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	491e      	ldr	r1, [pc, #120]	@ (80101f0 <I2C_ITError+0x200>)
 8010178:	400a      	ands	r2, r1
 801017a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010180:	0018      	movs	r0, r3
 8010182:	f7fd fd3e 	bl	800dc02 <HAL_DMA_GetState>
 8010186:	0003      	movs	r3, r0
 8010188:	2b01      	cmp	r3, #1
 801018a:	d016      	beq.n	80101ba <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010190:	4a16      	ldr	r2, [pc, #88]	@ (80101ec <I2C_ITError+0x1fc>)
 8010192:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2240      	movs	r2, #64	@ 0x40
 8010198:	2100      	movs	r1, #0
 801019a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101a0:	0018      	movs	r0, r3
 80101a2:	f7fd fc39 	bl	800da18 <HAL_DMA_Abort_IT>
 80101a6:	1e03      	subs	r3, r0, #0
 80101a8:	d013      	beq.n	80101d2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101b4:	0018      	movs	r0, r3
 80101b6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80101b8:	e00b      	b.n	80101d2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	0018      	movs	r0, r3
 80101be:	f000 f819 	bl	80101f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80101c2:	e006      	b.n	80101d2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	0018      	movs	r0, r3
 80101c8:	f000 f814 	bl	80101f4 <I2C_TreatErrorCallback>
  }
}
 80101cc:	e002      	b.n	80101d4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80101ce:	46c0      	nop			@ (mov r8, r8)
 80101d0:	e000      	b.n	80101d4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80101d2:	46c0      	nop			@ (mov r8, r8)
}
 80101d4:	46c0      	nop			@ (mov r8, r8)
 80101d6:	46bd      	mov	sp, r7
 80101d8:	b004      	add	sp, #16
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	ffff0000 	.word	0xffff0000
 80101e0:	0800f0d5 	.word	0x0800f0d5
 80101e4:	00008003 	.word	0x00008003
 80101e8:	ffffbfff 	.word	0xffffbfff
 80101ec:	080103ff 	.word	0x080103ff
 80101f0:	ffff7fff 	.word	0xffff7fff

080101f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2241      	movs	r2, #65	@ 0x41
 8010200:	5c9b      	ldrb	r3, [r3, r2]
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b60      	cmp	r3, #96	@ 0x60
 8010206:	d10f      	bne.n	8010228 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2241      	movs	r2, #65	@ 0x41
 801020c:	2120      	movs	r1, #32
 801020e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2240      	movs	r2, #64	@ 0x40
 801021a:	2100      	movs	r1, #0
 801021c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	0018      	movs	r0, r3
 8010222:	f7fe fe24 	bl	800ee6e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010226:	e00a      	b.n	801023e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2240      	movs	r2, #64	@ 0x40
 8010232:	2100      	movs	r1, #0
 8010234:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	0018      	movs	r0, r3
 801023a:	f7fe fe10 	bl	800ee5e <HAL_I2C_ErrorCallback>
}
 801023e:	46c0      	nop			@ (mov r8, r8)
 8010240:	46bd      	mov	sp, r7
 8010242:	b002      	add	sp, #8
 8010244:	bd80      	pop	{r7, pc}

08010246 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010246:	b580      	push	{r7, lr}
 8010248:	b082      	sub	sp, #8
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	2202      	movs	r2, #2
 8010256:	4013      	ands	r3, r2
 8010258:	2b02      	cmp	r3, #2
 801025a:	d103      	bne.n	8010264 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2200      	movs	r2, #0
 8010262:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	2201      	movs	r2, #1
 801026c:	4013      	ands	r3, r2
 801026e:	2b01      	cmp	r3, #1
 8010270:	d007      	beq.n	8010282 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	699a      	ldr	r2, [r3, #24]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2101      	movs	r1, #1
 801027e:	430a      	orrs	r2, r1
 8010280:	619a      	str	r2, [r3, #24]
  }
}
 8010282:	46c0      	nop			@ (mov r8, r8)
 8010284:	46bd      	mov	sp, r7
 8010286:	b002      	add	sp, #8
 8010288:	bd80      	pop	{r7, pc}
	...

0801028c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010298:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4920      	ldr	r1, [pc, #128]	@ (8010328 <I2C_DMAMasterTransmitCplt+0x9c>)
 80102a6:	400a      	ands	r2, r1
 80102a8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d105      	bne.n	80102c0 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2120      	movs	r1, #32
 80102b8:	0018      	movs	r0, r3
 80102ba:	f000 fb4b 	bl	8010954 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80102be:	e02e      	b.n	801031e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80102c8:	189a      	adds	r2, r3, r2
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	2bff      	cmp	r3, #255	@ 0xff
 80102d6:	d903      	bls.n	80102e0 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	22ff      	movs	r2, #255	@ 0xff
 80102dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80102de:	e004      	b.n	80102ea <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102e4:	b29a      	uxth	r2, r3
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102f2:	0019      	movs	r1, r3
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	3328      	adds	r3, #40	@ 0x28
 80102fa:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8010300:	f7fd fae4 	bl	800d8cc <HAL_DMA_Start_IT>
 8010304:	1e03      	subs	r3, r0, #0
 8010306:	d005      	beq.n	8010314 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2110      	movs	r1, #16
 801030c:	0018      	movs	r0, r3
 801030e:	f7ff fe6f 	bl	800fff0 <I2C_ITError>
}
 8010312:	e004      	b.n	801031e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2140      	movs	r1, #64	@ 0x40
 8010318:	0018      	movs	r0, r3
 801031a:	f000 fb1b 	bl	8010954 <I2C_Enable_IRQ>
}
 801031e:	46c0      	nop			@ (mov r8, r8)
 8010320:	46bd      	mov	sp, r7
 8010322:	b004      	add	sp, #16
 8010324:	bd80      	pop	{r7, pc}
 8010326:	46c0      	nop			@ (mov r8, r8)
 8010328:	ffffbfff 	.word	0xffffbfff

0801032c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010338:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4920      	ldr	r1, [pc, #128]	@ (80103c8 <I2C_DMAMasterReceiveCplt+0x9c>)
 8010346:	400a      	ands	r2, r1
 8010348:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801034e:	b29b      	uxth	r3, r3
 8010350:	2b00      	cmp	r3, #0
 8010352:	d105      	bne.n	8010360 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2120      	movs	r1, #32
 8010358:	0018      	movs	r0, r3
 801035a:	f000 fafb 	bl	8010954 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801035e:	e02e      	b.n	80103be <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010368:	189a      	adds	r2, r3, r2
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010372:	b29b      	uxth	r3, r3
 8010374:	2bff      	cmp	r3, #255	@ 0xff
 8010376:	d903      	bls.n	8010380 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	22ff      	movs	r2, #255	@ 0xff
 801037c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801037e:	e004      	b.n	801038a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010384:	b29a      	uxth	r2, r3
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	3324      	adds	r3, #36	@ 0x24
 8010394:	0019      	movs	r1, r3
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801039a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80103a0:	f7fd fa94 	bl	800d8cc <HAL_DMA_Start_IT>
 80103a4:	1e03      	subs	r3, r0, #0
 80103a6:	d005      	beq.n	80103b4 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2110      	movs	r1, #16
 80103ac:	0018      	movs	r0, r3
 80103ae:	f7ff fe1f 	bl	800fff0 <I2C_ITError>
}
 80103b2:	e004      	b.n	80103be <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2140      	movs	r1, #64	@ 0x40
 80103b8:	0018      	movs	r0, r3
 80103ba:	f000 facb 	bl	8010954 <I2C_Enable_IRQ>
}
 80103be:	46c0      	nop			@ (mov r8, r8)
 80103c0:	46bd      	mov	sp, r7
 80103c2:	b004      	add	sp, #16
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	46c0      	nop			@ (mov r8, r8)
 80103c8:	ffff7fff 	.word	0xffff7fff

080103cc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103d8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	685a      	ldr	r2, [r3, #4]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2180      	movs	r1, #128	@ 0x80
 80103e6:	0209      	lsls	r1, r1, #8
 80103e8:	430a      	orrs	r2, r1
 80103ea:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2110      	movs	r1, #16
 80103f0:	0018      	movs	r0, r3
 80103f2:	f7ff fdfd 	bl	800fff0 <I2C_ITError>
}
 80103f6:	46c0      	nop			@ (mov r8, r8)
 80103f8:	46bd      	mov	sp, r7
 80103fa:	b004      	add	sp, #16
 80103fc:	bd80      	pop	{r7, pc}

080103fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b084      	sub	sp, #16
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801040a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010410:	2b00      	cmp	r3, #0
 8010412:	d003      	beq.n	801041c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010418:	2200      	movs	r2, #0
 801041a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010420:	2b00      	cmp	r3, #0
 8010422:	d003      	beq.n	801042c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010428:	2200      	movs	r2, #0
 801042a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	0018      	movs	r0, r3
 8010430:	f7ff fee0 	bl	80101f4 <I2C_TreatErrorCallback>
}
 8010434:	46c0      	nop			@ (mov r8, r8)
 8010436:	46bd      	mov	sp, r7
 8010438:	b004      	add	sp, #16
 801043a:	bd80      	pop	{r7, pc}

0801043c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	603b      	str	r3, [r7, #0]
 8010448:	1dfb      	adds	r3, r7, #7
 801044a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801044c:	e030      	b.n	80104b0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	3301      	adds	r3, #1
 8010452:	d02d      	beq.n	80104b0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010454:	f7fc fd1a 	bl	800ce8c <HAL_GetTick>
 8010458:	0002      	movs	r2, r0
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	429a      	cmp	r2, r3
 8010462:	d302      	bcc.n	801046a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d122      	bne.n	80104b0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	699b      	ldr	r3, [r3, #24]
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	4013      	ands	r3, r2
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	1ad3      	subs	r3, r2, r3
 8010478:	425a      	negs	r2, r3
 801047a:	4153      	adcs	r3, r2
 801047c:	b2db      	uxtb	r3, r3
 801047e:	001a      	movs	r2, r3
 8010480:	1dfb      	adds	r3, r7, #7
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	429a      	cmp	r2, r3
 8010486:	d113      	bne.n	80104b0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801048c:	2220      	movs	r2, #32
 801048e:	431a      	orrs	r2, r3
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2241      	movs	r2, #65	@ 0x41
 8010498:	2120      	movs	r1, #32
 801049a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2242      	movs	r2, #66	@ 0x42
 80104a0:	2100      	movs	r1, #0
 80104a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2240      	movs	r2, #64	@ 0x40
 80104a8:	2100      	movs	r1, #0
 80104aa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80104ac:	2301      	movs	r3, #1
 80104ae:	e00f      	b.n	80104d0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	68ba      	ldr	r2, [r7, #8]
 80104b8:	4013      	ands	r3, r2
 80104ba:	68ba      	ldr	r2, [r7, #8]
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	425a      	negs	r2, r3
 80104c0:	4153      	adcs	r3, r2
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	001a      	movs	r2, r3
 80104c6:	1dfb      	adds	r3, r7, #7
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d0bf      	beq.n	801044e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104ce:	2300      	movs	r3, #0
}
 80104d0:	0018      	movs	r0, r3
 80104d2:	46bd      	mov	sp, r7
 80104d4:	b004      	add	sp, #16
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80104e4:	e032      	b.n	801054c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	68b9      	ldr	r1, [r7, #8]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	0018      	movs	r0, r3
 80104ee:	f000 f8ff 	bl	80106f0 <I2C_IsErrorOccurred>
 80104f2:	1e03      	subs	r3, r0, #0
 80104f4:	d001      	beq.n	80104fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e030      	b.n	801055c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	3301      	adds	r3, #1
 80104fe:	d025      	beq.n	801054c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010500:	f7fc fcc4 	bl	800ce8c <HAL_GetTick>
 8010504:	0002      	movs	r2, r0
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	429a      	cmp	r2, r3
 801050e:	d302      	bcc.n	8010516 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d11a      	bne.n	801054c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	699b      	ldr	r3, [r3, #24]
 801051c:	2202      	movs	r2, #2
 801051e:	4013      	ands	r3, r2
 8010520:	2b02      	cmp	r3, #2
 8010522:	d013      	beq.n	801054c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010528:	2220      	movs	r2, #32
 801052a:	431a      	orrs	r2, r3
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2241      	movs	r2, #65	@ 0x41
 8010534:	2120      	movs	r1, #32
 8010536:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2242      	movs	r2, #66	@ 0x42
 801053c:	2100      	movs	r1, #0
 801053e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2240      	movs	r2, #64	@ 0x40
 8010544:	2100      	movs	r1, #0
 8010546:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8010548:	2301      	movs	r3, #1
 801054a:	e007      	b.n	801055c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	2202      	movs	r2, #2
 8010554:	4013      	ands	r3, r2
 8010556:	2b02      	cmp	r3, #2
 8010558:	d1c5      	bne.n	80104e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801055a:	2300      	movs	r3, #0
}
 801055c:	0018      	movs	r0, r3
 801055e:	46bd      	mov	sp, r7
 8010560:	b004      	add	sp, #16
 8010562:	bd80      	pop	{r7, pc}

08010564 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010570:	e02f      	b.n	80105d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	68b9      	ldr	r1, [r7, #8]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	0018      	movs	r0, r3
 801057a:	f000 f8b9 	bl	80106f0 <I2C_IsErrorOccurred>
 801057e:	1e03      	subs	r3, r0, #0
 8010580:	d001      	beq.n	8010586 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e02d      	b.n	80105e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010586:	f7fc fc81 	bl	800ce8c <HAL_GetTick>
 801058a:	0002      	movs	r2, r0
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	68ba      	ldr	r2, [r7, #8]
 8010592:	429a      	cmp	r2, r3
 8010594:	d302      	bcc.n	801059c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d11a      	bne.n	80105d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	699b      	ldr	r3, [r3, #24]
 80105a2:	2220      	movs	r2, #32
 80105a4:	4013      	ands	r3, r2
 80105a6:	2b20      	cmp	r3, #32
 80105a8:	d013      	beq.n	80105d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105ae:	2220      	movs	r2, #32
 80105b0:	431a      	orrs	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2241      	movs	r2, #65	@ 0x41
 80105ba:	2120      	movs	r1, #32
 80105bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2242      	movs	r2, #66	@ 0x42
 80105c2:	2100      	movs	r1, #0
 80105c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2240      	movs	r2, #64	@ 0x40
 80105ca:	2100      	movs	r1, #0
 80105cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80105ce:	2301      	movs	r3, #1
 80105d0:	e007      	b.n	80105e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	699b      	ldr	r3, [r3, #24]
 80105d8:	2220      	movs	r2, #32
 80105da:	4013      	ands	r3, r2
 80105dc:	2b20      	cmp	r3, #32
 80105de:	d1c8      	bne.n	8010572 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80105e0:	2300      	movs	r3, #0
}
 80105e2:	0018      	movs	r0, r3
 80105e4:	46bd      	mov	sp, r7
 80105e6:	b004      	add	sp, #16
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80105f8:	e06b      	b.n	80106d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	68b9      	ldr	r1, [r7, #8]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	0018      	movs	r0, r3
 8010602:	f000 f875 	bl	80106f0 <I2C_IsErrorOccurred>
 8010606:	1e03      	subs	r3, r0, #0
 8010608:	d001      	beq.n	801060e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801060a:	2301      	movs	r3, #1
 801060c:	e069      	b.n	80106e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	699b      	ldr	r3, [r3, #24]
 8010614:	2220      	movs	r2, #32
 8010616:	4013      	ands	r3, r2
 8010618:	2b20      	cmp	r3, #32
 801061a:	d138      	bne.n	801068e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	699b      	ldr	r3, [r3, #24]
 8010622:	2204      	movs	r2, #4
 8010624:	4013      	ands	r3, r2
 8010626:	2b04      	cmp	r3, #4
 8010628:	d105      	bne.n	8010636 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8010632:	2300      	movs	r3, #0
 8010634:	e055      	b.n	80106e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	699b      	ldr	r3, [r3, #24]
 801063c:	2210      	movs	r2, #16
 801063e:	4013      	ands	r3, r2
 8010640:	2b10      	cmp	r3, #16
 8010642:	d107      	bne.n	8010654 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2210      	movs	r2, #16
 801064a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2204      	movs	r2, #4
 8010650:	645a      	str	r2, [r3, #68]	@ 0x44
 8010652:	e002      	b.n	801065a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2200      	movs	r2, #0
 8010658:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2220      	movs	r2, #32
 8010660:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	685a      	ldr	r2, [r3, #4]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	491f      	ldr	r1, [pc, #124]	@ (80106ec <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801066e:	400a      	ands	r2, r1
 8010670:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2241      	movs	r2, #65	@ 0x41
 8010676:	2120      	movs	r1, #32
 8010678:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2242      	movs	r2, #66	@ 0x42
 801067e:	2100      	movs	r1, #0
 8010680:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2240      	movs	r2, #64	@ 0x40
 8010686:	2100      	movs	r1, #0
 8010688:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801068a:	2301      	movs	r3, #1
 801068c:	e029      	b.n	80106e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801068e:	f7fc fbfd 	bl	800ce8c <HAL_GetTick>
 8010692:	0002      	movs	r2, r0
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	1ad3      	subs	r3, r2, r3
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	429a      	cmp	r2, r3
 801069c:	d302      	bcc.n	80106a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d116      	bne.n	80106d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	2204      	movs	r2, #4
 80106ac:	4013      	ands	r3, r2
 80106ae:	2b04      	cmp	r3, #4
 80106b0:	d00f      	beq.n	80106d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106b6:	2220      	movs	r2, #32
 80106b8:	431a      	orrs	r2, r3
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2241      	movs	r2, #65	@ 0x41
 80106c2:	2120      	movs	r1, #32
 80106c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2240      	movs	r2, #64	@ 0x40
 80106ca:	2100      	movs	r1, #0
 80106cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80106ce:	2301      	movs	r3, #1
 80106d0:	e007      	b.n	80106e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	699b      	ldr	r3, [r3, #24]
 80106d8:	2204      	movs	r2, #4
 80106da:	4013      	ands	r3, r2
 80106dc:	2b04      	cmp	r3, #4
 80106de:	d18c      	bne.n	80105fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	0018      	movs	r0, r3
 80106e4:	46bd      	mov	sp, r7
 80106e6:	b004      	add	sp, #16
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	46c0      	nop			@ (mov r8, r8)
 80106ec:	fe00e800 	.word	0xfe00e800

080106f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b08a      	sub	sp, #40	@ 0x28
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80106fc:	2327      	movs	r3, #39	@ 0x27
 80106fe:	18fb      	adds	r3, r7, r3
 8010700:	2200      	movs	r2, #0
 8010702:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	699b      	ldr	r3, [r3, #24]
 801070a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801070c:	2300      	movs	r3, #0
 801070e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	2210      	movs	r2, #16
 8010718:	4013      	ands	r3, r2
 801071a:	d100      	bne.n	801071e <I2C_IsErrorOccurred+0x2e>
 801071c:	e079      	b.n	8010812 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	2210      	movs	r2, #16
 8010724:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010726:	e057      	b.n	80107d8 <I2C_IsErrorOccurred+0xe8>
 8010728:	2227      	movs	r2, #39	@ 0x27
 801072a:	18bb      	adds	r3, r7, r2
 801072c:	18ba      	adds	r2, r7, r2
 801072e:	7812      	ldrb	r2, [r2, #0]
 8010730:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	3301      	adds	r3, #1
 8010736:	d04f      	beq.n	80107d8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010738:	f7fc fba8 	bl	800ce8c <HAL_GetTick>
 801073c:	0002      	movs	r2, r0
 801073e:	69fb      	ldr	r3, [r7, #28]
 8010740:	1ad3      	subs	r3, r2, r3
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	429a      	cmp	r2, r3
 8010746:	d302      	bcc.n	801074e <I2C_IsErrorOccurred+0x5e>
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d144      	bne.n	80107d8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	685a      	ldr	r2, [r3, #4]
 8010754:	2380      	movs	r3, #128	@ 0x80
 8010756:	01db      	lsls	r3, r3, #7
 8010758:	4013      	ands	r3, r2
 801075a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801075c:	2013      	movs	r0, #19
 801075e:	183b      	adds	r3, r7, r0
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	2142      	movs	r1, #66	@ 0x42
 8010764:	5c52      	ldrb	r2, [r2, r1]
 8010766:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	699a      	ldr	r2, [r3, #24]
 801076e:	2380      	movs	r3, #128	@ 0x80
 8010770:	021b      	lsls	r3, r3, #8
 8010772:	401a      	ands	r2, r3
 8010774:	2380      	movs	r3, #128	@ 0x80
 8010776:	021b      	lsls	r3, r3, #8
 8010778:	429a      	cmp	r2, r3
 801077a:	d126      	bne.n	80107ca <I2C_IsErrorOccurred+0xda>
 801077c:	697a      	ldr	r2, [r7, #20]
 801077e:	2380      	movs	r3, #128	@ 0x80
 8010780:	01db      	lsls	r3, r3, #7
 8010782:	429a      	cmp	r2, r3
 8010784:	d021      	beq.n	80107ca <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8010786:	183b      	adds	r3, r7, r0
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	2b20      	cmp	r3, #32
 801078c:	d01d      	beq.n	80107ca <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2180      	movs	r1, #128	@ 0x80
 801079a:	01c9      	lsls	r1, r1, #7
 801079c:	430a      	orrs	r2, r1
 801079e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80107a0:	f7fc fb74 	bl	800ce8c <HAL_GetTick>
 80107a4:	0003      	movs	r3, r0
 80107a6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80107a8:	e00f      	b.n	80107ca <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80107aa:	f7fc fb6f 	bl	800ce8c <HAL_GetTick>
 80107ae:	0002      	movs	r2, r0
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	2b19      	cmp	r3, #25
 80107b6:	d908      	bls.n	80107ca <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80107b8:	6a3b      	ldr	r3, [r7, #32]
 80107ba:	2220      	movs	r2, #32
 80107bc:	4313      	orrs	r3, r2
 80107be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80107c0:	2327      	movs	r3, #39	@ 0x27
 80107c2:	18fb      	adds	r3, r7, r3
 80107c4:	2201      	movs	r2, #1
 80107c6:	701a      	strb	r2, [r3, #0]

              break;
 80107c8:	e006      	b.n	80107d8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	699b      	ldr	r3, [r3, #24]
 80107d0:	2220      	movs	r2, #32
 80107d2:	4013      	ands	r3, r2
 80107d4:	2b20      	cmp	r3, #32
 80107d6:	d1e8      	bne.n	80107aa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	2220      	movs	r2, #32
 80107e0:	4013      	ands	r3, r2
 80107e2:	2b20      	cmp	r3, #32
 80107e4:	d004      	beq.n	80107f0 <I2C_IsErrorOccurred+0x100>
 80107e6:	2327      	movs	r3, #39	@ 0x27
 80107e8:	18fb      	adds	r3, r7, r3
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d09b      	beq.n	8010728 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80107f0:	2327      	movs	r3, #39	@ 0x27
 80107f2:	18fb      	adds	r3, r7, r3
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d103      	bne.n	8010802 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2220      	movs	r2, #32
 8010800:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	2204      	movs	r2, #4
 8010806:	4313      	orrs	r3, r2
 8010808:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801080a:	2327      	movs	r3, #39	@ 0x27
 801080c:	18fb      	adds	r3, r7, r3
 801080e:	2201      	movs	r2, #1
 8010810:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801081a:	69ba      	ldr	r2, [r7, #24]
 801081c:	2380      	movs	r3, #128	@ 0x80
 801081e:	005b      	lsls	r3, r3, #1
 8010820:	4013      	ands	r3, r2
 8010822:	d00c      	beq.n	801083e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010824:	6a3b      	ldr	r3, [r7, #32]
 8010826:	2201      	movs	r2, #1
 8010828:	4313      	orrs	r3, r2
 801082a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2280      	movs	r2, #128	@ 0x80
 8010832:	0052      	lsls	r2, r2, #1
 8010834:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010836:	2327      	movs	r3, #39	@ 0x27
 8010838:	18fb      	adds	r3, r7, r3
 801083a:	2201      	movs	r2, #1
 801083c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801083e:	69ba      	ldr	r2, [r7, #24]
 8010840:	2380      	movs	r3, #128	@ 0x80
 8010842:	00db      	lsls	r3, r3, #3
 8010844:	4013      	ands	r3, r2
 8010846:	d00c      	beq.n	8010862 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010848:	6a3b      	ldr	r3, [r7, #32]
 801084a:	2208      	movs	r2, #8
 801084c:	4313      	orrs	r3, r2
 801084e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2280      	movs	r2, #128	@ 0x80
 8010856:	00d2      	lsls	r2, r2, #3
 8010858:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801085a:	2327      	movs	r3, #39	@ 0x27
 801085c:	18fb      	adds	r3, r7, r3
 801085e:	2201      	movs	r2, #1
 8010860:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010862:	69ba      	ldr	r2, [r7, #24]
 8010864:	2380      	movs	r3, #128	@ 0x80
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	4013      	ands	r3, r2
 801086a:	d00c      	beq.n	8010886 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801086c:	6a3b      	ldr	r3, [r7, #32]
 801086e:	2202      	movs	r2, #2
 8010870:	4313      	orrs	r3, r2
 8010872:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2280      	movs	r2, #128	@ 0x80
 801087a:	0092      	lsls	r2, r2, #2
 801087c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801087e:	2327      	movs	r3, #39	@ 0x27
 8010880:	18fb      	adds	r3, r7, r3
 8010882:	2201      	movs	r2, #1
 8010884:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8010886:	2327      	movs	r3, #39	@ 0x27
 8010888:	18fb      	adds	r3, r7, r3
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d01d      	beq.n	80108cc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	0018      	movs	r0, r3
 8010894:	f7ff fcd7 	bl	8010246 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	685a      	ldr	r2, [r3, #4]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	490e      	ldr	r1, [pc, #56]	@ (80108dc <I2C_IsErrorOccurred+0x1ec>)
 80108a4:	400a      	ands	r2, r1
 80108a6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80108ac:	6a3b      	ldr	r3, [r7, #32]
 80108ae:	431a      	orrs	r2, r3
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2241      	movs	r2, #65	@ 0x41
 80108b8:	2120      	movs	r1, #32
 80108ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2242      	movs	r2, #66	@ 0x42
 80108c0:	2100      	movs	r1, #0
 80108c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2240      	movs	r2, #64	@ 0x40
 80108c8:	2100      	movs	r1, #0
 80108ca:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80108cc:	2327      	movs	r3, #39	@ 0x27
 80108ce:	18fb      	adds	r3, r7, r3
 80108d0:	781b      	ldrb	r3, [r3, #0]
}
 80108d2:	0018      	movs	r0, r3
 80108d4:	46bd      	mov	sp, r7
 80108d6:	b00a      	add	sp, #40	@ 0x28
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	46c0      	nop			@ (mov r8, r8)
 80108dc:	fe00e800 	.word	0xfe00e800

080108e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b087      	sub	sp, #28
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	0008      	movs	r0, r1
 80108ea:	0011      	movs	r1, r2
 80108ec:	607b      	str	r3, [r7, #4]
 80108ee:	240a      	movs	r4, #10
 80108f0:	193b      	adds	r3, r7, r4
 80108f2:	1c02      	adds	r2, r0, #0
 80108f4:	801a      	strh	r2, [r3, #0]
 80108f6:	2009      	movs	r0, #9
 80108f8:	183b      	adds	r3, r7, r0
 80108fa:	1c0a      	adds	r2, r1, #0
 80108fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80108fe:	193b      	adds	r3, r7, r4
 8010900:	881b      	ldrh	r3, [r3, #0]
 8010902:	059b      	lsls	r3, r3, #22
 8010904:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010906:	183b      	adds	r3, r7, r0
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	0419      	lsls	r1, r3, #16
 801090c:	23ff      	movs	r3, #255	@ 0xff
 801090e:	041b      	lsls	r3, r3, #16
 8010910:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010912:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801091a:	4313      	orrs	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	085b      	lsrs	r3, r3, #1
 8010920:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801092a:	0d51      	lsrs	r1, r2, #21
 801092c:	2280      	movs	r2, #128	@ 0x80
 801092e:	00d2      	lsls	r2, r2, #3
 8010930:	400a      	ands	r2, r1
 8010932:	4907      	ldr	r1, [pc, #28]	@ (8010950 <I2C_TransferConfig+0x70>)
 8010934:	430a      	orrs	r2, r1
 8010936:	43d2      	mvns	r2, r2
 8010938:	401a      	ands	r2, r3
 801093a:	0011      	movs	r1, r2
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	697a      	ldr	r2, [r7, #20]
 8010942:	430a      	orrs	r2, r1
 8010944:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010946:	46c0      	nop			@ (mov r8, r8)
 8010948:	46bd      	mov	sp, r7
 801094a:	b007      	add	sp, #28
 801094c:	bd90      	pop	{r4, r7, pc}
 801094e:	46c0      	nop			@ (mov r8, r8)
 8010950:	03ff63ff 	.word	0x03ff63ff

08010954 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	000a      	movs	r2, r1
 801095e:	1cbb      	adds	r3, r7, #2
 8010960:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8010962:	2300      	movs	r3, #0
 8010964:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801096a:	4b3e      	ldr	r3, [pc, #248]	@ (8010a64 <I2C_Enable_IRQ+0x110>)
 801096c:	429a      	cmp	r2, r3
 801096e:	d035      	beq.n	80109dc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010974:	4b3c      	ldr	r3, [pc, #240]	@ (8010a68 <I2C_Enable_IRQ+0x114>)
 8010976:	429a      	cmp	r2, r3
 8010978:	d030      	beq.n	80109dc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801097e:	4b3b      	ldr	r3, [pc, #236]	@ (8010a6c <I2C_Enable_IRQ+0x118>)
 8010980:	429a      	cmp	r2, r3
 8010982:	d02b      	beq.n	80109dc <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010984:	1cbb      	adds	r3, r7, #2
 8010986:	2200      	movs	r2, #0
 8010988:	5e9b      	ldrsh	r3, [r3, r2]
 801098a:	2b00      	cmp	r3, #0
 801098c:	da03      	bge.n	8010996 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	22b8      	movs	r2, #184	@ 0xb8
 8010992:	4313      	orrs	r3, r2
 8010994:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010996:	1cbb      	adds	r3, r7, #2
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	2201      	movs	r2, #1
 801099c:	4013      	ands	r3, r2
 801099e:	d003      	beq.n	80109a8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	22f2      	movs	r2, #242	@ 0xf2
 80109a4:	4313      	orrs	r3, r2
 80109a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80109a8:	1cbb      	adds	r3, r7, #2
 80109aa:	881b      	ldrh	r3, [r3, #0]
 80109ac:	2202      	movs	r2, #2
 80109ae:	4013      	ands	r3, r2
 80109b0:	d003      	beq.n	80109ba <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	22f4      	movs	r2, #244	@ 0xf4
 80109b6:	4313      	orrs	r3, r2
 80109b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80109ba:	1cbb      	adds	r3, r7, #2
 80109bc:	881b      	ldrh	r3, [r3, #0]
 80109be:	2b10      	cmp	r3, #16
 80109c0:	d103      	bne.n	80109ca <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2290      	movs	r2, #144	@ 0x90
 80109c6:	4313      	orrs	r3, r2
 80109c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80109ca:	1cbb      	adds	r3, r7, #2
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	2b20      	cmp	r3, #32
 80109d0:	d13c      	bne.n	8010a4c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2220      	movs	r2, #32
 80109d6:	4313      	orrs	r3, r2
 80109d8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80109da:	e037      	b.n	8010a4c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80109dc:	1cbb      	adds	r3, r7, #2
 80109de:	2200      	movs	r2, #0
 80109e0:	5e9b      	ldrsh	r3, [r3, r2]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	da03      	bge.n	80109ee <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	22b8      	movs	r2, #184	@ 0xb8
 80109ea:	4313      	orrs	r3, r2
 80109ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80109ee:	1cbb      	adds	r3, r7, #2
 80109f0:	881b      	ldrh	r3, [r3, #0]
 80109f2:	2201      	movs	r2, #1
 80109f4:	4013      	ands	r3, r2
 80109f6:	d003      	beq.n	8010a00 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	22f2      	movs	r2, #242	@ 0xf2
 80109fc:	4313      	orrs	r3, r2
 80109fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010a00:	1cbb      	adds	r3, r7, #2
 8010a02:	881b      	ldrh	r3, [r3, #0]
 8010a04:	2202      	movs	r2, #2
 8010a06:	4013      	ands	r3, r2
 8010a08:	d003      	beq.n	8010a12 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	22f4      	movs	r2, #244	@ 0xf4
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010a12:	1cbb      	adds	r3, r7, #2
 8010a14:	881b      	ldrh	r3, [r3, #0]
 8010a16:	2b10      	cmp	r3, #16
 8010a18:	d103      	bne.n	8010a22 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2290      	movs	r2, #144	@ 0x90
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010a22:	1cbb      	adds	r3, r7, #2
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	2b20      	cmp	r3, #32
 8010a28:	d103      	bne.n	8010a32 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2260      	movs	r2, #96	@ 0x60
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a36:	4b0d      	ldr	r3, [pc, #52]	@ (8010a6c <I2C_Enable_IRQ+0x118>)
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d007      	beq.n	8010a4c <I2C_Enable_IRQ+0xf8>
 8010a3c:	1cbb      	adds	r3, r7, #2
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	2b40      	cmp	r3, #64	@ 0x40
 8010a42:	d103      	bne.n	8010a4c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2240      	movs	r2, #64	@ 0x40
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	6819      	ldr	r1, [r3, #0]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	68fa      	ldr	r2, [r7, #12]
 8010a58:	430a      	orrs	r2, r1
 8010a5a:	601a      	str	r2, [r3, #0]
}
 8010a5c:	46c0      	nop			@ (mov r8, r8)
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	b004      	add	sp, #16
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	0800f2d5 	.word	0x0800f2d5
 8010a68:	0800f705 	.word	0x0800f705
 8010a6c:	0800f4cd 	.word	0x0800f4cd

08010a70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	000a      	movs	r2, r1
 8010a7a:	1cbb      	adds	r3, r7, #2
 8010a7c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010a82:	1cbb      	adds	r3, r7, #2
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	2201      	movs	r2, #1
 8010a88:	4013      	ands	r3, r2
 8010a8a:	d010      	beq.n	8010aae <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2242      	movs	r2, #66	@ 0x42
 8010a90:	4313      	orrs	r3, r2
 8010a92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2241      	movs	r2, #65	@ 0x41
 8010a98:	5c9b      	ldrb	r3, [r3, r2]
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	001a      	movs	r2, r3
 8010a9e:	2328      	movs	r3, #40	@ 0x28
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	2b28      	cmp	r3, #40	@ 0x28
 8010aa4:	d003      	beq.n	8010aae <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	22b0      	movs	r2, #176	@ 0xb0
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010aae:	1cbb      	adds	r3, r7, #2
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	4013      	ands	r3, r2
 8010ab6:	d010      	beq.n	8010ada <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2244      	movs	r2, #68	@ 0x44
 8010abc:	4313      	orrs	r3, r2
 8010abe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2241      	movs	r2, #65	@ 0x41
 8010ac4:	5c9b      	ldrb	r3, [r3, r2]
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	001a      	movs	r2, r3
 8010aca:	2328      	movs	r3, #40	@ 0x28
 8010acc:	4013      	ands	r3, r2
 8010ace:	2b28      	cmp	r3, #40	@ 0x28
 8010ad0:	d003      	beq.n	8010ada <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	22b0      	movs	r2, #176	@ 0xb0
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010ada:	1cbb      	adds	r3, r7, #2
 8010adc:	2200      	movs	r2, #0
 8010ade:	5e9b      	ldrsh	r3, [r3, r2]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	da03      	bge.n	8010aec <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	22b8      	movs	r2, #184	@ 0xb8
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010aec:	1cbb      	adds	r3, r7, #2
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	2b10      	cmp	r3, #16
 8010af2:	d103      	bne.n	8010afc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2290      	movs	r2, #144	@ 0x90
 8010af8:	4313      	orrs	r3, r2
 8010afa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010afc:	1cbb      	adds	r3, r7, #2
 8010afe:	881b      	ldrh	r3, [r3, #0]
 8010b00:	2b20      	cmp	r3, #32
 8010b02:	d103      	bne.n	8010b0c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2220      	movs	r2, #32
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010b0c:	1cbb      	adds	r3, r7, #2
 8010b0e:	881b      	ldrh	r3, [r3, #0]
 8010b10:	2b40      	cmp	r3, #64	@ 0x40
 8010b12:	d103      	bne.n	8010b1c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2240      	movs	r2, #64	@ 0x40
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	43d9      	mvns	r1, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	400a      	ands	r2, r1
 8010b2c:	601a      	str	r2, [r3, #0]
}
 8010b2e:	46c0      	nop			@ (mov r8, r8)
 8010b30:	46bd      	mov	sp, r7
 8010b32:	b004      	add	sp, #16
 8010b34:	bd80      	pop	{r7, pc}
	...

08010b38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2241      	movs	r2, #65	@ 0x41
 8010b46:	5c9b      	ldrb	r3, [r3, r2]
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	2b20      	cmp	r3, #32
 8010b4c:	d138      	bne.n	8010bc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2240      	movs	r2, #64	@ 0x40
 8010b52:	5c9b      	ldrb	r3, [r3, r2]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d101      	bne.n	8010b5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010b58:	2302      	movs	r3, #2
 8010b5a:	e032      	b.n	8010bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2240      	movs	r2, #64	@ 0x40
 8010b60:	2101      	movs	r1, #1
 8010b62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2241      	movs	r2, #65	@ 0x41
 8010b68:	2124      	movs	r1, #36	@ 0x24
 8010b6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2101      	movs	r1, #1
 8010b78:	438a      	bics	r2, r1
 8010b7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4911      	ldr	r1, [pc, #68]	@ (8010bcc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8010b88:	400a      	ands	r2, r1
 8010b8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	6819      	ldr	r1, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	683a      	ldr	r2, [r7, #0]
 8010b98:	430a      	orrs	r2, r1
 8010b9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	430a      	orrs	r2, r1
 8010baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2241      	movs	r2, #65	@ 0x41
 8010bb0:	2120      	movs	r1, #32
 8010bb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2240      	movs	r2, #64	@ 0x40
 8010bb8:	2100      	movs	r1, #0
 8010bba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	e000      	b.n	8010bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010bc0:	2302      	movs	r3, #2
  }
}
 8010bc2:	0018      	movs	r0, r3
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	b002      	add	sp, #8
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	46c0      	nop			@ (mov r8, r8)
 8010bcc:	ffffefff 	.word	0xffffefff

08010bd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2241      	movs	r2, #65	@ 0x41
 8010bde:	5c9b      	ldrb	r3, [r3, r2]
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	2b20      	cmp	r3, #32
 8010be4:	d139      	bne.n	8010c5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2240      	movs	r2, #64	@ 0x40
 8010bea:	5c9b      	ldrb	r3, [r3, r2]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d101      	bne.n	8010bf4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010bf0:	2302      	movs	r3, #2
 8010bf2:	e033      	b.n	8010c5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2240      	movs	r2, #64	@ 0x40
 8010bf8:	2101      	movs	r1, #1
 8010bfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2241      	movs	r2, #65	@ 0x41
 8010c00:	2124      	movs	r1, #36	@ 0x24
 8010c02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2101      	movs	r1, #1
 8010c10:	438a      	bics	r2, r1
 8010c12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	4a11      	ldr	r2, [pc, #68]	@ (8010c64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8010c20:	4013      	ands	r3, r2
 8010c22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	021b      	lsls	r3, r3, #8
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	68fa      	ldr	r2, [r7, #12]
 8010c34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2101      	movs	r1, #1
 8010c42:	430a      	orrs	r2, r1
 8010c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2241      	movs	r2, #65	@ 0x41
 8010c4a:	2120      	movs	r1, #32
 8010c4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2240      	movs	r2, #64	@ 0x40
 8010c52:	2100      	movs	r1, #0
 8010c54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010c56:	2300      	movs	r3, #0
 8010c58:	e000      	b.n	8010c5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010c5a:	2302      	movs	r3, #2
  }
}
 8010c5c:	0018      	movs	r0, r3
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	b004      	add	sp, #16
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	fffff0ff 	.word	0xfffff0ff

08010c68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b088      	sub	sp, #32
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8010c76:	2301      	movs	r3, #1
 8010c78:	e0e1      	b.n	8010e3e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2235      	movs	r2, #53	@ 0x35
 8010c7e:	5c9b      	ldrb	r3, [r3, r2]
 8010c80:	b2db      	uxtb	r3, r3
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d107      	bne.n	8010c96 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2234      	movs	r2, #52	@ 0x34
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	0018      	movs	r0, r3
 8010c92:	f7f6 f941 	bl	8006f18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2235      	movs	r2, #53	@ 0x35
 8010c9a:	2102      	movs	r1, #2
 8010c9c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	69da      	ldr	r2, [r3, #28]
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4967      	ldr	r1, [pc, #412]	@ (8010e48 <HAL_I2S_Init+0x1e0>)
 8010caa:	400a      	ands	r2, r1
 8010cac:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2202      	movs	r2, #2
 8010cb4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d073      	beq.n	8010da6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d102      	bne.n	8010ccc <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8010cc6:	2310      	movs	r3, #16
 8010cc8:	617b      	str	r3, [r7, #20]
 8010cca:	e001      	b.n	8010cd0 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8010ccc:	2320      	movs	r3, #32
 8010cce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	2b20      	cmp	r3, #32
 8010cd6:	d802      	bhi.n	8010cde <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	005b      	lsls	r3, r3, #1
 8010cdc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8010cde:	f002 fe51 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 8010ce2:	0003      	movs	r3, r0
 8010ce4:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	691a      	ldr	r2, [r3, #16]
 8010cea:	2380      	movs	r3, #128	@ 0x80
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d131      	bne.n	8010d56 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d016      	beq.n	8010d28 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	0019      	movs	r1, r3
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f7ef fa4f 	bl	80001a4 <__udivsi3>
 8010d06:	0003      	movs	r3, r0
 8010d08:	001a      	movs	r2, r3
 8010d0a:	0013      	movs	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	189b      	adds	r3, r3, r2
 8010d10:	005b      	lsls	r3, r3, #1
 8010d12:	001a      	movs	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	695b      	ldr	r3, [r3, #20]
 8010d18:	0019      	movs	r1, r3
 8010d1a:	0010      	movs	r0, r2
 8010d1c:	f7ef fa42 	bl	80001a4 <__udivsi3>
 8010d20:	0003      	movs	r3, r0
 8010d22:	3305      	adds	r3, #5
 8010d24:	613b      	str	r3, [r7, #16]
 8010d26:	e02a      	b.n	8010d7e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	00db      	lsls	r3, r3, #3
 8010d2c:	0019      	movs	r1, r3
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f7ef fa38 	bl	80001a4 <__udivsi3>
 8010d34:	0003      	movs	r3, r0
 8010d36:	001a      	movs	r2, r3
 8010d38:	0013      	movs	r3, r2
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	189b      	adds	r3, r3, r2
 8010d3e:	005b      	lsls	r3, r3, #1
 8010d40:	001a      	movs	r2, r3
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	695b      	ldr	r3, [r3, #20]
 8010d46:	0019      	movs	r1, r3
 8010d48:	0010      	movs	r0, r2
 8010d4a:	f7ef fa2b 	bl	80001a4 <__udivsi3>
 8010d4e:	0003      	movs	r3, r0
 8010d50:	3305      	adds	r3, #5
 8010d52:	613b      	str	r3, [r7, #16]
 8010d54:	e013      	b.n	8010d7e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8010d56:	6979      	ldr	r1, [r7, #20]
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f7ef fa23 	bl	80001a4 <__udivsi3>
 8010d5e:	0003      	movs	r3, r0
 8010d60:	001a      	movs	r2, r3
 8010d62:	0013      	movs	r3, r2
 8010d64:	009b      	lsls	r3, r3, #2
 8010d66:	189b      	adds	r3, r3, r2
 8010d68:	005b      	lsls	r3, r3, #1
 8010d6a:	001a      	movs	r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	695b      	ldr	r3, [r3, #20]
 8010d70:	0019      	movs	r1, r3
 8010d72:	0010      	movs	r0, r2
 8010d74:	f7ef fa16 	bl	80001a4 <__udivsi3>
 8010d78:	0003      	movs	r3, r0
 8010d7a:	3305      	adds	r3, #5
 8010d7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	210a      	movs	r1, #10
 8010d82:	0018      	movs	r0, r3
 8010d84:	f7ef fa0e 	bl	80001a4 <__udivsi3>
 8010d88:	0003      	movs	r3, r0
 8010d8a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	4013      	ands	r3, r2
 8010d92:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	085b      	lsrs	r3, r3, #1
 8010d9c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	021b      	lsls	r3, r3, #8
 8010da2:	61bb      	str	r3, [r7, #24]
 8010da4:	e003      	b.n	8010dae <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8010da6:	2302      	movs	r3, #2
 8010da8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8010daa:	2300      	movs	r3, #0
 8010dac:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d902      	bls.n	8010dba <HAL_I2S_Init+0x152>
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	2bff      	cmp	r3, #255	@ 0xff
 8010db8:	d907      	bls.n	8010dca <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dbe:	2210      	movs	r2, #16
 8010dc0:	431a      	orrs	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	e039      	b.n	8010e3e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	691a      	ldr	r2, [r3, #16]
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	431a      	orrs	r2, r3
 8010dd2:	0011      	movs	r1, r2
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	69fa      	ldr	r2, [r7, #28]
 8010dda:	430a      	orrs	r2, r1
 8010ddc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	69db      	ldr	r3, [r3, #28]
 8010de4:	4a18      	ldr	r2, [pc, #96]	@ (8010e48 <HAL_I2S_Init+0x1e0>)
 8010de6:	401a      	ands	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6859      	ldr	r1, [r3, #4]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	4319      	orrs	r1, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	4319      	orrs	r1, r3
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	699b      	ldr	r3, [r3, #24]
 8010dfc:	430b      	orrs	r3, r1
 8010dfe:	431a      	orrs	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2180      	movs	r1, #128	@ 0x80
 8010e06:	0109      	lsls	r1, r1, #4
 8010e08:	430a      	orrs	r2, r1
 8010e0a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	689b      	ldr	r3, [r3, #8]
 8010e10:	2b30      	cmp	r3, #48	@ 0x30
 8010e12:	d003      	beq.n	8010e1c <HAL_I2S_Init+0x1b4>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	689b      	ldr	r3, [r3, #8]
 8010e18:	2bb0      	cmp	r3, #176	@ 0xb0
 8010e1a:	d108      	bne.n	8010e2e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	69da      	ldr	r2, [r3, #28]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2180      	movs	r1, #128	@ 0x80
 8010e28:	0149      	lsls	r1, r1, #5
 8010e2a:	430a      	orrs	r2, r1
 8010e2c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2235      	movs	r2, #53	@ 0x35
 8010e38:	2101      	movs	r1, #1
 8010e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010e3c:	2300      	movs	r3, #0
}
 8010e3e:	0018      	movs	r0, r3
 8010e40:	46bd      	mov	sp, r7
 8010e42:	b008      	add	sp, #32
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	46c0      	nop			@ (mov r8, r8)
 8010e48:	fffff040 	.word	0xfffff040

08010e4c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	1dbb      	adds	r3, r7, #6
 8010e58:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d003      	beq.n	8010e68 <HAL_I2S_Receive_DMA+0x1c>
 8010e60:	1dbb      	adds	r3, r7, #6
 8010e62:	881b      	ldrh	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d101      	bne.n	8010e6c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	e0a6      	b.n	8010fba <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2234      	movs	r2, #52	@ 0x34
 8010e70:	5c9b      	ldrb	r3, [r3, r2]
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d101      	bne.n	8010e7c <HAL_I2S_Receive_DMA+0x30>
 8010e78:	2302      	movs	r3, #2
 8010e7a:	e09e      	b.n	8010fba <HAL_I2S_Receive_DMA+0x16e>
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	2234      	movs	r2, #52	@ 0x34
 8010e80:	2101      	movs	r1, #1
 8010e82:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2235      	movs	r2, #53	@ 0x35
 8010e88:	5c9b      	ldrb	r3, [r3, r2]
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d005      	beq.n	8010e9c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2234      	movs	r2, #52	@ 0x34
 8010e94:	2100      	movs	r1, #0
 8010e96:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8010e98:	2302      	movs	r3, #2
 8010e9a:	e08e      	b.n	8010fba <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2235      	movs	r2, #53	@ 0x35
 8010ea0:	2104      	movs	r1, #4
 8010ea2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	68ba      	ldr	r2, [r7, #8]
 8010eae:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	69db      	ldr	r3, [r3, #28]
 8010eb6:	2207      	movs	r2, #7
 8010eb8:	4013      	ands	r3, r2
 8010eba:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	2b03      	cmp	r3, #3
 8010ec0:	d002      	beq.n	8010ec8 <HAL_I2S_Receive_DMA+0x7c>
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b05      	cmp	r3, #5
 8010ec6:	d10c      	bne.n	8010ee2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8010ec8:	1dbb      	adds	r3, r7, #6
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	18db      	adds	r3, r3, r3
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8010ed4:	1dbb      	adds	r3, r7, #6
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	18db      	adds	r3, r3, r3
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010ee0:	e007      	b.n	8010ef2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	1dba      	adds	r2, r7, #6
 8010ee6:	8812      	ldrh	r2, [r2, #0]
 8010ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	1dba      	adds	r2, r7, #6
 8010eee:	8812      	ldrh	r2, [r2, #0]
 8010ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ef6:	4a33      	ldr	r2, [pc, #204]	@ (8010fc4 <HAL_I2S_Receive_DMA+0x178>)
 8010ef8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010efe:	4a32      	ldr	r2, [pc, #200]	@ (8010fc8 <HAL_I2S_Receive_DMA+0x17c>)
 8010f00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f06:	4a31      	ldr	r2, [pc, #196]	@ (8010fcc <HAL_I2S_Receive_DMA+0x180>)
 8010f08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	69da      	ldr	r2, [r3, #28]
 8010f10:	23c0      	movs	r3, #192	@ 0xc0
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	401a      	ands	r2, r3
 8010f16:	23c0      	movs	r3, #192	@ 0xc0
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d10a      	bne.n	8010f34 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8010f1e:	2300      	movs	r3, #0
 8010f20:	613b      	str	r3, [r7, #16]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	613b      	str	r3, [r7, #16]
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	689b      	ldr	r3, [r3, #8]
 8010f30:	613b      	str	r3, [r7, #16]
 8010f32:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	330c      	adds	r3, #12
 8010f3e:	0019      	movs	r1, r3
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f44:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8010f4c:	f7fc fcbe 	bl	800d8cc <HAL_DMA_Start_IT>
 8010f50:	1e03      	subs	r3, r0, #0
 8010f52:	d00f      	beq.n	8010f74 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f58:	2208      	movs	r2, #8
 8010f5a:	431a      	orrs	r2, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2235      	movs	r2, #53	@ 0x35
 8010f64:	2101      	movs	r1, #1
 8010f66:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2234      	movs	r2, #52	@ 0x34
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8010f70:	2301      	movs	r3, #1
 8010f72:	e022      	b.n	8010fba <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	69da      	ldr	r2, [r3, #28]
 8010f7a:	2380      	movs	r3, #128	@ 0x80
 8010f7c:	00db      	lsls	r3, r3, #3
 8010f7e:	4013      	ands	r3, r2
 8010f80:	d108      	bne.n	8010f94 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	69da      	ldr	r2, [r3, #28]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2180      	movs	r1, #128	@ 0x80
 8010f8e:	00c9      	lsls	r1, r1, #3
 8010f90:	430a      	orrs	r2, r1
 8010f92:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	4013      	ands	r3, r2
 8010f9e:	d107      	bne.n	8010fb0 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	685a      	ldr	r2, [r3, #4]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2101      	movs	r1, #1
 8010fac:	430a      	orrs	r2, r1
 8010fae:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2234      	movs	r2, #52	@ 0x34
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	0018      	movs	r0, r3
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	b006      	add	sp, #24
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	46c0      	nop			@ (mov r8, r8)
 8010fc4:	080111ad 	.word	0x080111ad
 8010fc8:	08011169 	.word	0x08011169
 8010fcc:	080111cb 	.word	0x080111cb

08010fd0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b086      	sub	sp, #24
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010fd8:	2317      	movs	r3, #23
 8010fda:	18fb      	adds	r3, r7, r3
 8010fdc:	2200      	movs	r2, #0
 8010fde:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	685a      	ldr	r2, [r3, #4]
 8010fe4:	2380      	movs	r3, #128	@ 0x80
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d003      	beq.n	8010ff4 <HAL_I2S_DMAStop+0x24>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d158      	bne.n	80110a6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d010      	beq.n	801101e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011000:	0018      	movs	r0, r3
 8011002:	f7fc fcc9 	bl	800d998 <HAL_DMA_Abort>
 8011006:	1e03      	subs	r3, r0, #0
 8011008:	d009      	beq.n	801101e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801100e:	2208      	movs	r2, #8
 8011010:	431a      	orrs	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8011016:	2317      	movs	r3, #23
 8011018:	18fb      	adds	r3, r7, r3
 801101a:	2201      	movs	r2, #1
 801101c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	2364      	movs	r3, #100	@ 0x64
 8011022:	2201      	movs	r2, #1
 8011024:	2102      	movs	r1, #2
 8011026:	f000 f8f7 	bl	8011218 <I2S_WaitFlagStateUntilTimeout>
 801102a:	1e03      	subs	r3, r0, #0
 801102c:	d00d      	beq.n	801104a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011032:	2201      	movs	r2, #1
 8011034:	431a      	orrs	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2235      	movs	r2, #53	@ 0x35
 801103e:	2101      	movs	r1, #1
 8011040:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8011042:	2317      	movs	r3, #23
 8011044:	18fb      	adds	r3, r7, r3
 8011046:	2201      	movs	r2, #1
 8011048:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	2364      	movs	r3, #100	@ 0x64
 801104e:	2200      	movs	r2, #0
 8011050:	2180      	movs	r1, #128	@ 0x80
 8011052:	f000 f8e1 	bl	8011218 <I2S_WaitFlagStateUntilTimeout>
 8011056:	1e03      	subs	r3, r0, #0
 8011058:	d00d      	beq.n	8011076 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801105e:	2201      	movs	r2, #1
 8011060:	431a      	orrs	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2235      	movs	r2, #53	@ 0x35
 801106a:	2101      	movs	r1, #1
 801106c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801106e:	2317      	movs	r3, #23
 8011070:	18fb      	adds	r3, r7, r3
 8011072:	2201      	movs	r2, #1
 8011074:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	69da      	ldr	r2, [r3, #28]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	4938      	ldr	r1, [pc, #224]	@ (8011164 <HAL_I2S_DMAStop+0x194>)
 8011082:	400a      	ands	r2, r1
 8011084:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011086:	2300      	movs	r3, #0
 8011088:	613b      	str	r3, [r7, #16]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	689b      	ldr	r3, [r3, #8]
 8011090:	613b      	str	r3, [r7, #16]
 8011092:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2102      	movs	r1, #2
 80110a0:	438a      	bics	r2, r1
 80110a2:	605a      	str	r2, [r3, #4]
 80110a4:	e053      	b.n	801114e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	685a      	ldr	r2, [r3, #4]
 80110aa:	23c0      	movs	r3, #192	@ 0xc0
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d005      	beq.n	80110be <HAL_I2S_DMAStop+0xee>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	685a      	ldr	r2, [r3, #4]
 80110b6:	2380      	movs	r3, #128	@ 0x80
 80110b8:	005b      	lsls	r3, r3, #1
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d147      	bne.n	801114e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d010      	beq.n	80110e8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110ca:	0018      	movs	r0, r3
 80110cc:	f7fc fc64 	bl	800d998 <HAL_DMA_Abort>
 80110d0:	1e03      	subs	r3, r0, #0
 80110d2:	d009      	beq.n	80110e8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110d8:	2208      	movs	r2, #8
 80110da:	431a      	orrs	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80110e0:	2317      	movs	r3, #23
 80110e2:	18fb      	adds	r3, r7, r3
 80110e4:	2201      	movs	r2, #1
 80110e6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	69da      	ldr	r2, [r3, #28]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	491c      	ldr	r1, [pc, #112]	@ (8011164 <HAL_I2S_DMAStop+0x194>)
 80110f4:	400a      	ands	r2, r1
 80110f6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80110f8:	2300      	movs	r3, #0
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	60fb      	str	r3, [r7, #12]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	689b      	ldr	r3, [r3, #8]
 801110a:	60fb      	str	r3, [r7, #12]
 801110c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	685a      	ldr	r2, [r3, #4]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2101      	movs	r1, #1
 801111a:	438a      	bics	r2, r1
 801111c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	685a      	ldr	r2, [r3, #4]
 8011122:	2380      	movs	r3, #128	@ 0x80
 8011124:	005b      	lsls	r3, r3, #1
 8011126:	429a      	cmp	r2, r3
 8011128:	d10e      	bne.n	8011148 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801112e:	2240      	movs	r2, #64	@ 0x40
 8011130:	431a      	orrs	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2235      	movs	r2, #53	@ 0x35
 801113a:	2101      	movs	r1, #1
 801113c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801113e:	2317      	movs	r3, #23
 8011140:	18fb      	adds	r3, r7, r3
 8011142:	2201      	movs	r2, #1
 8011144:	701a      	strb	r2, [r3, #0]
 8011146:	e002      	b.n	801114e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2235      	movs	r2, #53	@ 0x35
 8011152:	2101      	movs	r1, #1
 8011154:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8011156:	2317      	movs	r3, #23
 8011158:	18fb      	adds	r3, r7, r3
 801115a:	781b      	ldrb	r3, [r3, #0]
}
 801115c:	0018      	movs	r0, r3
 801115e:	46bd      	mov	sp, r7
 8011160:	b006      	add	sp, #24
 8011162:	bd80      	pop	{r7, pc}
 8011164:	fffffbff 	.word	0xfffffbff

08011168 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011174:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	69db      	ldr	r3, [r3, #28]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d10e      	bne.n	801119c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	685a      	ldr	r2, [r3, #4]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2101      	movs	r1, #1
 801118a:	438a      	bics	r2, r1
 801118c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2200      	movs	r2, #0
 8011192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2235      	movs	r2, #53	@ 0x35
 8011198:	2101      	movs	r1, #1
 801119a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	0018      	movs	r0, r3
 80111a0:	f7f9 fd5e 	bl	800ac60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80111a4:	46c0      	nop			@ (mov r8, r8)
 80111a6:	46bd      	mov	sp, r7
 80111a8:	b004      	add	sp, #16
 80111aa:	bd80      	pop	{r7, pc}

080111ac <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111b8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	0018      	movs	r0, r3
 80111be:	f7f9 fd3d 	bl	800ac3c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80111c2:	46c0      	nop			@ (mov r8, r8)
 80111c4:	46bd      	mov	sp, r7
 80111c6:	b004      	add	sp, #16
 80111c8:	bd80      	pop	{r7, pc}

080111ca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b084      	sub	sp, #16
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111d6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	685a      	ldr	r2, [r3, #4]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2103      	movs	r1, #3
 80111e4:	438a      	bics	r2, r1
 80111e6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2200      	movs	r2, #0
 80111ec:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2200      	movs	r2, #0
 80111f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2235      	movs	r2, #53	@ 0x35
 80111f8:	2101      	movs	r1, #1
 80111fa:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011200:	2208      	movs	r2, #8
 8011202:	431a      	orrs	r2, r3
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	0018      	movs	r0, r3
 801120c:	f7f9 fd76 	bl	800acfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011210:	46c0      	nop			@ (mov r8, r8)
 8011212:	46bd      	mov	sp, r7
 8011214:	b004      	add	sp, #16
 8011216:	bd80      	pop	{r7, pc}

08011218 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	603b      	str	r3, [r7, #0]
 8011224:	1dfb      	adds	r3, r7, #7
 8011226:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8011228:	f7fb fe30 	bl	800ce8c <HAL_GetTick>
 801122c:	0003      	movs	r3, r0
 801122e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011230:	e017      	b.n	8011262 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	3301      	adds	r3, #1
 8011236:	d014      	beq.n	8011262 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8011238:	f7fb fe28 	bl	800ce8c <HAL_GetTick>
 801123c:	0002      	movs	r2, r0
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	683a      	ldr	r2, [r7, #0]
 8011244:	429a      	cmp	r2, r3
 8011246:	d902      	bls.n	801124e <I2S_WaitFlagStateUntilTimeout+0x36>
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d109      	bne.n	8011262 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2235      	movs	r2, #53	@ 0x35
 8011252:	2101      	movs	r1, #1
 8011254:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2234      	movs	r2, #52	@ 0x34
 801125a:	2100      	movs	r1, #0
 801125c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801125e:	2303      	movs	r3, #3
 8011260:	e00f      	b.n	8011282 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	68ba      	ldr	r2, [r7, #8]
 801126a:	4013      	ands	r3, r2
 801126c:	68ba      	ldr	r2, [r7, #8]
 801126e:	1ad3      	subs	r3, r2, r3
 8011270:	425a      	negs	r2, r3
 8011272:	4153      	adcs	r3, r2
 8011274:	b2db      	uxtb	r3, r3
 8011276:	001a      	movs	r2, r3
 8011278:	1dfb      	adds	r3, r7, #7
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	429a      	cmp	r2, r3
 801127e:	d1d8      	bne.n	8011232 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8011280:	2300      	movs	r3, #0
}
 8011282:	0018      	movs	r0, r3
 8011284:	46bd      	mov	sp, r7
 8011286:	b006      	add	sp, #24
 8011288:	bd80      	pop	{r7, pc}
	...

0801128c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801128e:	b08b      	sub	sp, #44	@ 0x2c
 8011290:	af06      	add	r7, sp, #24
 8011292:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d101      	bne.n	801129e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801129a:	2301      	movs	r3, #1
 801129c:	e0f0      	b.n	8011480 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4a79      	ldr	r2, [pc, #484]	@ (8011488 <HAL_PCD_Init+0x1fc>)
 80112a2:	5c9b      	ldrb	r3, [r3, r2]
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d108      	bne.n	80112bc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	23aa      	movs	r3, #170	@ 0xaa
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	2100      	movs	r1, #0
 80112b2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	0018      	movs	r0, r3
 80112b8:	f009 fdd4 	bl	801ae64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4a72      	ldr	r2, [pc, #456]	@ (8011488 <HAL_PCD_Init+0x1fc>)
 80112c0:	2103      	movs	r1, #3
 80112c2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	0018      	movs	r0, r3
 80112ca:	f005 fd87 	bl	8016ddc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80112ce:	230f      	movs	r3, #15
 80112d0:	18fb      	adds	r3, r7, r3
 80112d2:	2200      	movs	r2, #0
 80112d4:	701a      	strb	r2, [r3, #0]
 80112d6:	e049      	b.n	801136c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80112d8:	200f      	movs	r0, #15
 80112da:	183b      	adds	r3, r7, r0
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	6879      	ldr	r1, [r7, #4]
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	0013      	movs	r3, r2
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	189b      	adds	r3, r3, r2
 80112e8:	00db      	lsls	r3, r3, #3
 80112ea:	18cb      	adds	r3, r1, r3
 80112ec:	3301      	adds	r3, #1
 80112ee:	2201      	movs	r2, #1
 80112f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80112f2:	183b      	adds	r3, r7, r0
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	1c5a      	adds	r2, r3, #1
 80112fa:	0013      	movs	r3, r2
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	189b      	adds	r3, r3, r2
 8011300:	00db      	lsls	r3, r3, #3
 8011302:	183a      	adds	r2, r7, r0
 8011304:	7812      	ldrb	r2, [r2, #0]
 8011306:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011308:	183b      	adds	r3, r7, r0
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	6879      	ldr	r1, [r7, #4]
 801130e:	1c5a      	adds	r2, r3, #1
 8011310:	0013      	movs	r3, r2
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	189b      	adds	r3, r3, r2
 8011316:	00db      	lsls	r3, r3, #3
 8011318:	18cb      	adds	r3, r1, r3
 801131a:	3303      	adds	r3, #3
 801131c:	2200      	movs	r2, #0
 801131e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011320:	183b      	adds	r3, r7, r0
 8011322:	781a      	ldrb	r2, [r3, #0]
 8011324:	6879      	ldr	r1, [r7, #4]
 8011326:	0013      	movs	r3, r2
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	189b      	adds	r3, r3, r2
 801132c:	00db      	lsls	r3, r3, #3
 801132e:	18cb      	adds	r3, r1, r3
 8011330:	3338      	adds	r3, #56	@ 0x38
 8011332:	2200      	movs	r2, #0
 8011334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011336:	183b      	adds	r3, r7, r0
 8011338:	781a      	ldrb	r2, [r3, #0]
 801133a:	6879      	ldr	r1, [r7, #4]
 801133c:	0013      	movs	r3, r2
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	189b      	adds	r3, r3, r2
 8011342:	00db      	lsls	r3, r3, #3
 8011344:	18cb      	adds	r3, r1, r3
 8011346:	333c      	adds	r3, #60	@ 0x3c
 8011348:	2200      	movs	r2, #0
 801134a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801134c:	183b      	adds	r3, r7, r0
 801134e:	781a      	ldrb	r2, [r3, #0]
 8011350:	6879      	ldr	r1, [r7, #4]
 8011352:	0013      	movs	r3, r2
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	189b      	adds	r3, r3, r2
 8011358:	00db      	lsls	r3, r3, #3
 801135a:	18cb      	adds	r3, r1, r3
 801135c:	3340      	adds	r3, #64	@ 0x40
 801135e:	2200      	movs	r2, #0
 8011360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011362:	183b      	adds	r3, r7, r0
 8011364:	781a      	ldrb	r2, [r3, #0]
 8011366:	183b      	adds	r3, r7, r0
 8011368:	3201      	adds	r2, #1
 801136a:	701a      	strb	r2, [r3, #0]
 801136c:	210f      	movs	r1, #15
 801136e:	187b      	adds	r3, r7, r1
 8011370:	781a      	ldrb	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	429a      	cmp	r2, r3
 8011378:	d3ae      	bcc.n	80112d8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801137a:	187b      	adds	r3, r7, r1
 801137c:	2200      	movs	r2, #0
 801137e:	701a      	strb	r2, [r3, #0]
 8011380:	e056      	b.n	8011430 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011382:	240f      	movs	r4, #15
 8011384:	193b      	adds	r3, r7, r4
 8011386:	781a      	ldrb	r2, [r3, #0]
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	236a      	movs	r3, #106	@ 0x6a
 801138c:	33ff      	adds	r3, #255	@ 0xff
 801138e:	0019      	movs	r1, r3
 8011390:	0013      	movs	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	189b      	adds	r3, r3, r2
 8011396:	00db      	lsls	r3, r3, #3
 8011398:	18c3      	adds	r3, r0, r3
 801139a:	185b      	adds	r3, r3, r1
 801139c:	2200      	movs	r2, #0
 801139e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80113a0:	193b      	adds	r3, r7, r4
 80113a2:	781a      	ldrb	r2, [r3, #0]
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	23b4      	movs	r3, #180	@ 0xb4
 80113a8:	0059      	lsls	r1, r3, #1
 80113aa:	0013      	movs	r3, r2
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	189b      	adds	r3, r3, r2
 80113b0:	00db      	lsls	r3, r3, #3
 80113b2:	18c3      	adds	r3, r0, r3
 80113b4:	185b      	adds	r3, r3, r1
 80113b6:	193a      	adds	r2, r7, r4
 80113b8:	7812      	ldrb	r2, [r2, #0]
 80113ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80113bc:	193b      	adds	r3, r7, r4
 80113be:	781a      	ldrb	r2, [r3, #0]
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	236c      	movs	r3, #108	@ 0x6c
 80113c4:	33ff      	adds	r3, #255	@ 0xff
 80113c6:	0019      	movs	r1, r3
 80113c8:	0013      	movs	r3, r2
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	189b      	adds	r3, r3, r2
 80113ce:	00db      	lsls	r3, r3, #3
 80113d0:	18c3      	adds	r3, r0, r3
 80113d2:	185b      	adds	r3, r3, r1
 80113d4:	2200      	movs	r2, #0
 80113d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80113d8:	193b      	adds	r3, r7, r4
 80113da:	781a      	ldrb	r2, [r3, #0]
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	23bc      	movs	r3, #188	@ 0xbc
 80113e0:	0059      	lsls	r1, r3, #1
 80113e2:	0013      	movs	r3, r2
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	189b      	adds	r3, r3, r2
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	18c3      	adds	r3, r0, r3
 80113ec:	185b      	adds	r3, r3, r1
 80113ee:	2200      	movs	r2, #0
 80113f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80113f2:	193b      	adds	r3, r7, r4
 80113f4:	781a      	ldrb	r2, [r3, #0]
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	23be      	movs	r3, #190	@ 0xbe
 80113fa:	0059      	lsls	r1, r3, #1
 80113fc:	0013      	movs	r3, r2
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	189b      	adds	r3, r3, r2
 8011402:	00db      	lsls	r3, r3, #3
 8011404:	18c3      	adds	r3, r0, r3
 8011406:	185b      	adds	r3, r3, r1
 8011408:	2200      	movs	r2, #0
 801140a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801140c:	193b      	adds	r3, r7, r4
 801140e:	781a      	ldrb	r2, [r3, #0]
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	23c0      	movs	r3, #192	@ 0xc0
 8011414:	0059      	lsls	r1, r3, #1
 8011416:	0013      	movs	r3, r2
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	189b      	adds	r3, r3, r2
 801141c:	00db      	lsls	r3, r3, #3
 801141e:	18c3      	adds	r3, r0, r3
 8011420:	185b      	adds	r3, r3, r1
 8011422:	2200      	movs	r2, #0
 8011424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011426:	193b      	adds	r3, r7, r4
 8011428:	781a      	ldrb	r2, [r3, #0]
 801142a:	193b      	adds	r3, r7, r4
 801142c:	3201      	adds	r2, #1
 801142e:	701a      	strb	r2, [r3, #0]
 8011430:	230f      	movs	r3, #15
 8011432:	18fb      	adds	r3, r7, r3
 8011434:	781a      	ldrb	r2, [r3, #0]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	429a      	cmp	r2, r3
 801143c:	d3a1      	bcc.n	8011382 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6818      	ldr	r0, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	466a      	mov	r2, sp
 8011446:	0011      	movs	r1, r2
 8011448:	001a      	movs	r2, r3
 801144a:	3210      	adds	r2, #16
 801144c:	ca70      	ldmia	r2!, {r4, r5, r6}
 801144e:	c170      	stmia	r1!, {r4, r5, r6}
 8011450:	ca30      	ldmia	r2!, {r4, r5}
 8011452:	c130      	stmia	r1!, {r4, r5}
 8011454:	6859      	ldr	r1, [r3, #4]
 8011456:	689a      	ldr	r2, [r3, #8]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	f005 fcd9 	bl	8016e10 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2224      	movs	r2, #36	@ 0x24
 8011462:	2100      	movs	r1, #0
 8011464:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4a07      	ldr	r2, [pc, #28]	@ (8011488 <HAL_PCD_Init+0x1fc>)
 801146a:	2101      	movs	r1, #1
 801146c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	69db      	ldr	r3, [r3, #28]
 8011472:	2b01      	cmp	r3, #1
 8011474:	d103      	bne.n	801147e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	0018      	movs	r0, r3
 801147a:	f001 fd23 	bl	8012ec4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	0018      	movs	r0, r3
 8011482:	46bd      	mov	sp, r7
 8011484:	b005      	add	sp, #20
 8011486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011488:	000002a9 	.word	0x000002a9

0801148c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	23aa      	movs	r3, #170	@ 0xaa
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	5cd3      	ldrb	r3, [r2, r3]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d101      	bne.n	80114a4 <HAL_PCD_Start+0x18>
 80114a0:	2302      	movs	r3, #2
 80114a2:	e014      	b.n	80114ce <HAL_PCD_Start+0x42>
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	23aa      	movs	r3, #170	@ 0xaa
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	2101      	movs	r1, #1
 80114ac:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	0018      	movs	r0, r3
 80114b4:	f005 fc7c 	bl	8016db0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	0018      	movs	r0, r3
 80114be:	f007 fc7f 	bl	8018dc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	23aa      	movs	r3, #170	@ 0xaa
 80114c6:	009b      	lsls	r3, r3, #2
 80114c8:	2100      	movs	r1, #0
 80114ca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80114cc:	2300      	movs	r3, #0
}
 80114ce:	0018      	movs	r0, r3
 80114d0:	46bd      	mov	sp, r7
 80114d2:	b002      	add	sp, #8
 80114d4:	bd80      	pop	{r7, pc}
	...

080114d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	0018      	movs	r0, r3
 80114e6:	f007 fc81 	bl	8018dec <USB_ReadInterrupts>
 80114ea:	0003      	movs	r3, r0
 80114ec:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80114ee:	68fa      	ldr	r2, [r7, #12]
 80114f0:	2380      	movs	r3, #128	@ 0x80
 80114f2:	021b      	lsls	r3, r3, #8
 80114f4:	4013      	ands	r3, r2
 80114f6:	d004      	beq.n	8011502 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	0018      	movs	r0, r3
 80114fc:	f000 fb62 	bl	8011bc4 <PCD_EP_ISR_Handler>

    return;
 8011500:	e11d      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	2380      	movs	r3, #128	@ 0x80
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	4013      	ands	r3, r2
 801150a:	d015      	beq.n	8011538 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2244      	movs	r2, #68	@ 0x44
 8011512:	5a9b      	ldrh	r3, [r3, r2]
 8011514:	b29a      	uxth	r2, r3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	498a      	ldr	r1, [pc, #552]	@ (8011744 <HAL_PCD_IRQHandler+0x26c>)
 801151c:	400a      	ands	r2, r1
 801151e:	b291      	uxth	r1, r2
 8011520:	2244      	movs	r2, #68	@ 0x44
 8011522:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	0018      	movs	r0, r3
 8011528:	f009 fd1f 	bl	801af6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2100      	movs	r1, #0
 8011530:	0018      	movs	r0, r3
 8011532:	f000 f915 	bl	8011760 <HAL_PCD_SetAddress>

    return;
 8011536:	e102      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	2380      	movs	r3, #128	@ 0x80
 801153c:	01db      	lsls	r3, r3, #7
 801153e:	4013      	ands	r3, r2
 8011540:	d00c      	beq.n	801155c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	2244      	movs	r2, #68	@ 0x44
 8011548:	5a9b      	ldrh	r3, [r3, r2]
 801154a:	b29a      	uxth	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	497d      	ldr	r1, [pc, #500]	@ (8011748 <HAL_PCD_IRQHandler+0x270>)
 8011552:	400a      	ands	r2, r1
 8011554:	b291      	uxth	r1, r2
 8011556:	2244      	movs	r2, #68	@ 0x44
 8011558:	5299      	strh	r1, [r3, r2]

    return;
 801155a:	e0f0      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 801155c:	68fa      	ldr	r2, [r7, #12]
 801155e:	2380      	movs	r3, #128	@ 0x80
 8011560:	019b      	lsls	r3, r3, #6
 8011562:	4013      	ands	r3, r2
 8011564:	d00c      	beq.n	8011580 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2244      	movs	r2, #68	@ 0x44
 801156c:	5a9b      	ldrh	r3, [r3, r2]
 801156e:	b29a      	uxth	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4975      	ldr	r1, [pc, #468]	@ (801174c <HAL_PCD_IRQHandler+0x274>)
 8011576:	400a      	ands	r2, r1
 8011578:	b291      	uxth	r1, r2
 801157a:	2244      	movs	r2, #68	@ 0x44
 801157c:	5299      	strh	r1, [r3, r2]

    return;
 801157e:	e0de      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8011580:	68fa      	ldr	r2, [r7, #12]
 8011582:	2380      	movs	r3, #128	@ 0x80
 8011584:	015b      	lsls	r3, r3, #5
 8011586:	4013      	ands	r3, r2
 8011588:	d038      	beq.n	80115fc <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	2240      	movs	r2, #64	@ 0x40
 8011590:	5a9b      	ldrh	r3, [r3, r2]
 8011592:	b29a      	uxth	r2, r3
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2104      	movs	r1, #4
 801159a:	438a      	bics	r2, r1
 801159c:	b291      	uxth	r1, r2
 801159e:	2240      	movs	r2, #64	@ 0x40
 80115a0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2240      	movs	r2, #64	@ 0x40
 80115a8:	5a9b      	ldrh	r3, [r3, r2]
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2108      	movs	r1, #8
 80115b2:	438a      	bics	r2, r1
 80115b4:	b291      	uxth	r1, r2
 80115b6:	2240      	movs	r2, #64	@ 0x40
 80115b8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	23b8      	movs	r3, #184	@ 0xb8
 80115be:	009b      	lsls	r3, r3, #2
 80115c0:	5cd3      	ldrb	r3, [r2, r3]
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d109      	bne.n	80115da <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	23b8      	movs	r3, #184	@ 0xb8
 80115ca:	009b      	lsls	r3, r3, #2
 80115cc:	2100      	movs	r1, #0
 80115ce:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2100      	movs	r1, #0
 80115d4:	0018      	movs	r0, r3
 80115d6:	f001 fc9f 	bl	8012f18 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	0018      	movs	r0, r3
 80115de:	f009 fd05 	bl	801afec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2244      	movs	r2, #68	@ 0x44
 80115e8:	5a9b      	ldrh	r3, [r3, r2]
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4957      	ldr	r1, [pc, #348]	@ (8011750 <HAL_PCD_IRQHandler+0x278>)
 80115f2:	400a      	ands	r2, r1
 80115f4:	b291      	uxth	r1, r2
 80115f6:	2244      	movs	r2, #68	@ 0x44
 80115f8:	5299      	strh	r1, [r3, r2]

    return;
 80115fa:	e0a0      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80115fc:	68fa      	ldr	r2, [r7, #12]
 80115fe:	2380      	movs	r3, #128	@ 0x80
 8011600:	011b      	lsls	r3, r3, #4
 8011602:	4013      	ands	r3, r2
 8011604:	d028      	beq.n	8011658 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2240      	movs	r2, #64	@ 0x40
 801160c:	5a9b      	ldrh	r3, [r3, r2]
 801160e:	b29a      	uxth	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2108      	movs	r1, #8
 8011616:	430a      	orrs	r2, r1
 8011618:	b291      	uxth	r1, r2
 801161a:	2240      	movs	r2, #64	@ 0x40
 801161c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2244      	movs	r2, #68	@ 0x44
 8011624:	5a9b      	ldrh	r3, [r3, r2]
 8011626:	b29a      	uxth	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4949      	ldr	r1, [pc, #292]	@ (8011754 <HAL_PCD_IRQHandler+0x27c>)
 801162e:	400a      	ands	r2, r1
 8011630:	b291      	uxth	r1, r2
 8011632:	2244      	movs	r2, #68	@ 0x44
 8011634:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2240      	movs	r2, #64	@ 0x40
 801163c:	5a9b      	ldrh	r3, [r3, r2]
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	2104      	movs	r1, #4
 8011646:	430a      	orrs	r2, r1
 8011648:	b291      	uxth	r1, r2
 801164a:	2240      	movs	r2, #64	@ 0x40
 801164c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	0018      	movs	r0, r3
 8011652:	f009 fcaf 	bl	801afb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011656:	e072      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2280      	movs	r2, #128	@ 0x80
 801165c:	4013      	ands	r3, r2
 801165e:	d046      	beq.n	80116ee <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2244      	movs	r2, #68	@ 0x44
 8011666:	5a9b      	ldrh	r3, [r3, r2]
 8011668:	b29a      	uxth	r2, r3
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2180      	movs	r1, #128	@ 0x80
 8011670:	438a      	bics	r2, r1
 8011672:	b291      	uxth	r1, r2
 8011674:	2244      	movs	r2, #68	@ 0x44
 8011676:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	23b8      	movs	r3, #184	@ 0xb8
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	5cd3      	ldrb	r3, [r2, r3]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d12f      	bne.n	80116e4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2240      	movs	r2, #64	@ 0x40
 801168a:	5a9b      	ldrh	r3, [r3, r2]
 801168c:	b29a      	uxth	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	2104      	movs	r1, #4
 8011694:	430a      	orrs	r2, r1
 8011696:	b291      	uxth	r1, r2
 8011698:	2240      	movs	r2, #64	@ 0x40
 801169a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2240      	movs	r2, #64	@ 0x40
 80116a2:	5a9b      	ldrh	r3, [r3, r2]
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2108      	movs	r1, #8
 80116ac:	430a      	orrs	r2, r1
 80116ae:	b291      	uxth	r1, r2
 80116b0:	2240      	movs	r2, #64	@ 0x40
 80116b2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	23b8      	movs	r3, #184	@ 0xb8
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	2101      	movs	r1, #1
 80116bc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2254      	movs	r2, #84	@ 0x54
 80116c4:	5a9b      	ldrh	r3, [r3, r2]
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	089b      	lsrs	r3, r3, #2
 80116ca:	223c      	movs	r2, #60	@ 0x3c
 80116cc:	4013      	ands	r3, r2
 80116ce:	0019      	movs	r1, r3
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	23b9      	movs	r3, #185	@ 0xb9
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2101      	movs	r1, #1
 80116dc:	0018      	movs	r0, r3
 80116de:	f001 fc1b 	bl	8012f18 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80116e2:	e02c      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	0018      	movs	r0, r3
 80116e8:	f009 fc64 	bl	801afb4 <HAL_PCD_SuspendCallback>
    return;
 80116ec:	e027      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	2380      	movs	r3, #128	@ 0x80
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4013      	ands	r3, r2
 80116f6:	d010      	beq.n	801171a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2244      	movs	r2, #68	@ 0x44
 80116fe:	5a9b      	ldrh	r3, [r3, r2]
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4914      	ldr	r1, [pc, #80]	@ (8011758 <HAL_PCD_IRQHandler+0x280>)
 8011708:	400a      	ands	r2, r1
 801170a:	b291      	uxth	r1, r2
 801170c:	2244      	movs	r2, #68	@ 0x44
 801170e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	0018      	movs	r0, r3
 8011714:	f009 fc1a 	bl	801af4c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011718:	e011      	b.n	801173e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801171a:	68fa      	ldr	r2, [r7, #12]
 801171c:	2380      	movs	r3, #128	@ 0x80
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	4013      	ands	r3, r2
 8011722:	d00c      	beq.n	801173e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2244      	movs	r2, #68	@ 0x44
 801172a:	5a9b      	ldrh	r3, [r3, r2]
 801172c:	b29a      	uxth	r2, r3
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	490a      	ldr	r1, [pc, #40]	@ (801175c <HAL_PCD_IRQHandler+0x284>)
 8011734:	400a      	ands	r2, r1
 8011736:	b291      	uxth	r1, r2
 8011738:	2244      	movs	r2, #68	@ 0x44
 801173a:	5299      	strh	r1, [r3, r2]

    return;
 801173c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801173e:	46bd      	mov	sp, r7
 8011740:	b004      	add	sp, #16
 8011742:	bd80      	pop	{r7, pc}
 8011744:	fffffbff 	.word	0xfffffbff
 8011748:	ffffbfff 	.word	0xffffbfff
 801174c:	ffffdfff 	.word	0xffffdfff
 8011750:	ffffefff 	.word	0xffffefff
 8011754:	fffff7ff 	.word	0xfffff7ff
 8011758:	fffffdff 	.word	0xfffffdff
 801175c:	fffffeff 	.word	0xfffffeff

08011760 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	000a      	movs	r2, r1
 801176a:	1cfb      	adds	r3, r7, #3
 801176c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	23aa      	movs	r3, #170	@ 0xaa
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	5cd3      	ldrb	r3, [r2, r3]
 8011776:	2b01      	cmp	r3, #1
 8011778:	d101      	bne.n	801177e <HAL_PCD_SetAddress+0x1e>
 801177a:	2302      	movs	r3, #2
 801177c:	e017      	b.n	80117ae <HAL_PCD_SetAddress+0x4e>
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	23aa      	movs	r3, #170	@ 0xaa
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	2101      	movs	r1, #1
 8011786:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	1cfa      	adds	r2, r7, #3
 801178c:	2124      	movs	r1, #36	@ 0x24
 801178e:	7812      	ldrb	r2, [r2, #0]
 8011790:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	1cfb      	adds	r3, r7, #3
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	0019      	movs	r1, r3
 801179c:	0010      	movs	r0, r2
 801179e:	f007 fafb 	bl	8018d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	23aa      	movs	r3, #170	@ 0xaa
 80117a6:	009b      	lsls	r3, r3, #2
 80117a8:	2100      	movs	r1, #0
 80117aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80117ac:	2300      	movs	r3, #0
}
 80117ae:	0018      	movs	r0, r3
 80117b0:	46bd      	mov	sp, r7
 80117b2:	b002      	add	sp, #8
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80117b6:	b590      	push	{r4, r7, lr}
 80117b8:	b085      	sub	sp, #20
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	000c      	movs	r4, r1
 80117c0:	0010      	movs	r0, r2
 80117c2:	0019      	movs	r1, r3
 80117c4:	1cfb      	adds	r3, r7, #3
 80117c6:	1c22      	adds	r2, r4, #0
 80117c8:	701a      	strb	r2, [r3, #0]
 80117ca:	003b      	movs	r3, r7
 80117cc:	1c02      	adds	r2, r0, #0
 80117ce:	801a      	strh	r2, [r3, #0]
 80117d0:	1cbb      	adds	r3, r7, #2
 80117d2:	1c0a      	adds	r2, r1, #0
 80117d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80117d6:	230b      	movs	r3, #11
 80117d8:	18fb      	adds	r3, r7, r3
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80117de:	1cfb      	adds	r3, r7, #3
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	b25b      	sxtb	r3, r3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	da0f      	bge.n	8011808 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80117e8:	1cfb      	adds	r3, r7, #3
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	2207      	movs	r2, #7
 80117ee:	4013      	ands	r3, r2
 80117f0:	1c5a      	adds	r2, r3, #1
 80117f2:	0013      	movs	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	189b      	adds	r3, r3, r2
 80117f8:	00db      	lsls	r3, r3, #3
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	18d3      	adds	r3, r2, r3
 80117fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2201      	movs	r2, #1
 8011804:	705a      	strb	r2, [r3, #1]
 8011806:	e00f      	b.n	8011828 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011808:	1cfb      	adds	r3, r7, #3
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2207      	movs	r2, #7
 801180e:	401a      	ands	r2, r3
 8011810:	0013      	movs	r3, r2
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	189b      	adds	r3, r3, r2
 8011816:	00db      	lsls	r3, r3, #3
 8011818:	3369      	adds	r3, #105	@ 0x69
 801181a:	33ff      	adds	r3, #255	@ 0xff
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	18d3      	adds	r3, r2, r3
 8011820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	2200      	movs	r2, #0
 8011826:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011828:	1cfb      	adds	r3, r7, #3
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2207      	movs	r2, #7
 801182e:	4013      	ands	r3, r2
 8011830:	b2da      	uxtb	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011836:	003b      	movs	r3, r7
 8011838:	881a      	ldrh	r2, [r3, #0]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	1cba      	adds	r2, r7, #2
 8011842:	7812      	ldrb	r2, [r2, #0]
 8011844:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011846:	1cbb      	adds	r3, r7, #2
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	2b02      	cmp	r3, #2
 801184c:	d102      	bne.n	8011854 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2200      	movs	r2, #0
 8011852:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	23aa      	movs	r3, #170	@ 0xaa
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	5cd3      	ldrb	r3, [r2, r3]
 801185c:	2b01      	cmp	r3, #1
 801185e:	d101      	bne.n	8011864 <HAL_PCD_EP_Open+0xae>
 8011860:	2302      	movs	r3, #2
 8011862:	e013      	b.n	801188c <HAL_PCD_EP_Open+0xd6>
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	23aa      	movs	r3, #170	@ 0xaa
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	2101      	movs	r1, #1
 801186c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	0011      	movs	r1, r2
 8011876:	0018      	movs	r0, r3
 8011878:	f005 faf2 	bl	8016e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	23aa      	movs	r3, #170	@ 0xaa
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	2100      	movs	r1, #0
 8011884:	54d1      	strb	r1, [r2, r3]

  return ret;
 8011886:	230b      	movs	r3, #11
 8011888:	18fb      	adds	r3, r7, r3
 801188a:	781b      	ldrb	r3, [r3, #0]
}
 801188c:	0018      	movs	r0, r3
 801188e:	46bd      	mov	sp, r7
 8011890:	b005      	add	sp, #20
 8011892:	bd90      	pop	{r4, r7, pc}

08011894 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b084      	sub	sp, #16
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	000a      	movs	r2, r1
 801189e:	1cfb      	adds	r3, r7, #3
 80118a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80118a2:	1cfb      	adds	r3, r7, #3
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	b25b      	sxtb	r3, r3
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	da0f      	bge.n	80118cc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80118ac:	1cfb      	adds	r3, r7, #3
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	2207      	movs	r2, #7
 80118b2:	4013      	ands	r3, r2
 80118b4:	1c5a      	adds	r2, r3, #1
 80118b6:	0013      	movs	r3, r2
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	189b      	adds	r3, r3, r2
 80118bc:	00db      	lsls	r3, r3, #3
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	18d3      	adds	r3, r2, r3
 80118c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2201      	movs	r2, #1
 80118c8:	705a      	strb	r2, [r3, #1]
 80118ca:	e00f      	b.n	80118ec <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80118cc:	1cfb      	adds	r3, r7, #3
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	2207      	movs	r2, #7
 80118d2:	401a      	ands	r2, r3
 80118d4:	0013      	movs	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	189b      	adds	r3, r3, r2
 80118da:	00db      	lsls	r3, r3, #3
 80118dc:	3369      	adds	r3, #105	@ 0x69
 80118de:	33ff      	adds	r3, #255	@ 0xff
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	18d3      	adds	r3, r2, r3
 80118e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2200      	movs	r2, #0
 80118ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80118ec:	1cfb      	adds	r3, r7, #3
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	2207      	movs	r2, #7
 80118f2:	4013      	ands	r3, r2
 80118f4:	b2da      	uxtb	r2, r3
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	23aa      	movs	r3, #170	@ 0xaa
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	5cd3      	ldrb	r3, [r2, r3]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d101      	bne.n	801190a <HAL_PCD_EP_Close+0x76>
 8011906:	2302      	movs	r3, #2
 8011908:	e011      	b.n	801192e <HAL_PCD_EP_Close+0x9a>
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	23aa      	movs	r3, #170	@ 0xaa
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	2101      	movs	r1, #1
 8011912:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	0011      	movs	r1, r2
 801191c:	0018      	movs	r0, r3
 801191e:	f005 fe41 	bl	80175a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	23aa      	movs	r3, #170	@ 0xaa
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	2100      	movs	r1, #0
 801192a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 801192c:	2300      	movs	r3, #0
}
 801192e:	0018      	movs	r0, r3
 8011930:	46bd      	mov	sp, r7
 8011932:	b004      	add	sp, #16
 8011934:	bd80      	pop	{r7, pc}

08011936 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b086      	sub	sp, #24
 801193a:	af00      	add	r7, sp, #0
 801193c:	60f8      	str	r0, [r7, #12]
 801193e:	607a      	str	r2, [r7, #4]
 8011940:	603b      	str	r3, [r7, #0]
 8011942:	200b      	movs	r0, #11
 8011944:	183b      	adds	r3, r7, r0
 8011946:	1c0a      	adds	r2, r1, #0
 8011948:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801194a:	0001      	movs	r1, r0
 801194c:	187b      	adds	r3, r7, r1
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	2207      	movs	r2, #7
 8011952:	401a      	ands	r2, r3
 8011954:	0013      	movs	r3, r2
 8011956:	009b      	lsls	r3, r3, #2
 8011958:	189b      	adds	r3, r3, r2
 801195a:	00db      	lsls	r3, r3, #3
 801195c:	3369      	adds	r3, #105	@ 0x69
 801195e:	33ff      	adds	r3, #255	@ 0xff
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	18d3      	adds	r3, r2, r3
 8011964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	2200      	movs	r2, #0
 8011976:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2200      	movs	r2, #0
 801197c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801197e:	187b      	adds	r3, r7, r1
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	2207      	movs	r2, #7
 8011984:	4013      	ands	r3, r2
 8011986:	b2da      	uxtb	r2, r3
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	697a      	ldr	r2, [r7, #20]
 8011992:	0011      	movs	r1, r2
 8011994:	0018      	movs	r0, r3
 8011996:	f005 ffc5 	bl	8017924 <USB_EPStartXfer>

  return HAL_OK;
 801199a:	2300      	movs	r3, #0
}
 801199c:	0018      	movs	r0, r3
 801199e:	46bd      	mov	sp, r7
 80119a0:	b006      	add	sp, #24
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	000a      	movs	r2, r1
 80119ae:	1cfb      	adds	r3, r7, #3
 80119b0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80119b2:	1cfb      	adds	r3, r7, #3
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	2207      	movs	r2, #7
 80119b8:	401a      	ands	r2, r3
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	23c2      	movs	r3, #194	@ 0xc2
 80119be:	0059      	lsls	r1, r3, #1
 80119c0:	0013      	movs	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	189b      	adds	r3, r3, r2
 80119c6:	00db      	lsls	r3, r3, #3
 80119c8:	18c3      	adds	r3, r0, r3
 80119ca:	185b      	adds	r3, r3, r1
 80119cc:	681b      	ldr	r3, [r3, #0]
}
 80119ce:	0018      	movs	r0, r3
 80119d0:	46bd      	mov	sp, r7
 80119d2:	b002      	add	sp, #8
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b086      	sub	sp, #24
 80119da:	af00      	add	r7, sp, #0
 80119dc:	60f8      	str	r0, [r7, #12]
 80119de:	607a      	str	r2, [r7, #4]
 80119e0:	603b      	str	r3, [r7, #0]
 80119e2:	200b      	movs	r0, #11
 80119e4:	183b      	adds	r3, r7, r0
 80119e6:	1c0a      	adds	r2, r1, #0
 80119e8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80119ea:	183b      	adds	r3, r7, r0
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	2207      	movs	r2, #7
 80119f0:	4013      	ands	r3, r2
 80119f2:	1c5a      	adds	r2, r3, #1
 80119f4:	0013      	movs	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	189b      	adds	r3, r3, r2
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	68fa      	ldr	r2, [r7, #12]
 80119fe:	18d3      	adds	r3, r2, r3
 8011a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	683a      	ldr	r2, [r7, #0]
 8011a0c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	2224      	movs	r2, #36	@ 0x24
 8011a12:	2101      	movs	r1, #1
 8011a14:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	683a      	ldr	r2, [r7, #0]
 8011a1a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2201      	movs	r2, #1
 8011a26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011a28:	183b      	adds	r3, r7, r0
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	2207      	movs	r2, #7
 8011a2e:	4013      	ands	r3, r2
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	697a      	ldr	r2, [r7, #20]
 8011a3c:	0011      	movs	r1, r2
 8011a3e:	0018      	movs	r0, r3
 8011a40:	f005 ff70 	bl	8017924 <USB_EPStartXfer>

  return HAL_OK;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	0018      	movs	r0, r3
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	b006      	add	sp, #24
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b084      	sub	sp, #16
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
 8011a56:	000a      	movs	r2, r1
 8011a58:	1cfb      	adds	r3, r7, #3
 8011a5a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8011a5c:	1cfb      	adds	r3, r7, #3
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	2207      	movs	r2, #7
 8011a62:	401a      	ands	r2, r3
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d901      	bls.n	8011a70 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	e046      	b.n	8011afe <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011a70:	1cfb      	adds	r3, r7, #3
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	b25b      	sxtb	r3, r3
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	da0f      	bge.n	8011a9a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011a7a:	1cfb      	adds	r3, r7, #3
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	2207      	movs	r2, #7
 8011a80:	4013      	ands	r3, r2
 8011a82:	1c5a      	adds	r2, r3, #1
 8011a84:	0013      	movs	r3, r2
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	189b      	adds	r3, r3, r2
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	18d3      	adds	r3, r2, r3
 8011a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2201      	movs	r2, #1
 8011a96:	705a      	strb	r2, [r3, #1]
 8011a98:	e00d      	b.n	8011ab6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011a9a:	1cfb      	adds	r3, r7, #3
 8011a9c:	781a      	ldrb	r2, [r3, #0]
 8011a9e:	0013      	movs	r3, r2
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	189b      	adds	r3, r3, r2
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	3369      	adds	r3, #105	@ 0x69
 8011aa8:	33ff      	adds	r3, #255	@ 0xff
 8011aaa:	687a      	ldr	r2, [r7, #4]
 8011aac:	18d3      	adds	r3, r2, r3
 8011aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2201      	movs	r2, #1
 8011aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011abc:	1cfb      	adds	r3, r7, #3
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	2207      	movs	r2, #7
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	23aa      	movs	r3, #170	@ 0xaa
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	5cd3      	ldrb	r3, [r2, r3]
 8011ad2:	2b01      	cmp	r3, #1
 8011ad4:	d101      	bne.n	8011ada <HAL_PCD_EP_SetStall+0x8c>
 8011ad6:	2302      	movs	r3, #2
 8011ad8:	e011      	b.n	8011afe <HAL_PCD_EP_SetStall+0xb0>
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	23aa      	movs	r3, #170	@ 0xaa
 8011ade:	009b      	lsls	r3, r3, #2
 8011ae0:	2101      	movs	r1, #1
 8011ae2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	68fa      	ldr	r2, [r7, #12]
 8011aea:	0011      	movs	r1, r2
 8011aec:	0018      	movs	r0, r3
 8011aee:	f007 f851 	bl	8018b94 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	23aa      	movs	r3, #170	@ 0xaa
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	2100      	movs	r1, #0
 8011afa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	0018      	movs	r0, r3
 8011b00:	46bd      	mov	sp, r7
 8011b02:	b004      	add	sp, #16
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	000a      	movs	r2, r1
 8011b10:	1cfb      	adds	r3, r7, #3
 8011b12:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011b14:	1cfb      	adds	r3, r7, #3
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	220f      	movs	r2, #15
 8011b1a:	401a      	ands	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d901      	bls.n	8011b28 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8011b24:	2301      	movs	r3, #1
 8011b26:	e048      	b.n	8011bba <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011b28:	1cfb      	adds	r3, r7, #3
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	b25b      	sxtb	r3, r3
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	da0f      	bge.n	8011b52 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011b32:	1cfb      	adds	r3, r7, #3
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	2207      	movs	r2, #7
 8011b38:	4013      	ands	r3, r2
 8011b3a:	1c5a      	adds	r2, r3, #1
 8011b3c:	0013      	movs	r3, r2
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	189b      	adds	r3, r3, r2
 8011b42:	00db      	lsls	r3, r3, #3
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	18d3      	adds	r3, r2, r3
 8011b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	705a      	strb	r2, [r3, #1]
 8011b50:	e00f      	b.n	8011b72 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011b52:	1cfb      	adds	r3, r7, #3
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	2207      	movs	r2, #7
 8011b58:	401a      	ands	r2, r3
 8011b5a:	0013      	movs	r3, r2
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	189b      	adds	r3, r3, r2
 8011b60:	00db      	lsls	r3, r3, #3
 8011b62:	3369      	adds	r3, #105	@ 0x69
 8011b64:	33ff      	adds	r3, #255	@ 0xff
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	18d3      	adds	r3, r2, r3
 8011b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011b78:	1cfb      	adds	r3, r7, #3
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	2207      	movs	r2, #7
 8011b7e:	4013      	ands	r3, r2
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	23aa      	movs	r3, #170	@ 0xaa
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	5cd3      	ldrb	r3, [r2, r3]
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d101      	bne.n	8011b96 <HAL_PCD_EP_ClrStall+0x90>
 8011b92:	2302      	movs	r3, #2
 8011b94:	e011      	b.n	8011bba <HAL_PCD_EP_ClrStall+0xb4>
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	23aa      	movs	r3, #170	@ 0xaa
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	2101      	movs	r1, #1
 8011b9e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	68fa      	ldr	r2, [r7, #12]
 8011ba6:	0011      	movs	r1, r2
 8011ba8:	0018      	movs	r0, r3
 8011baa:	f007 f843 	bl	8018c34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	23aa      	movs	r3, #170	@ 0xaa
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8011bb8:	2300      	movs	r3, #0
}
 8011bba:	0018      	movs	r0, r3
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	b004      	add	sp, #16
 8011bc0:	bd80      	pop	{r7, pc}
	...

08011bc4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8011bc4:	b5b0      	push	{r4, r5, r7, lr}
 8011bc6:	b096      	sub	sp, #88	@ 0x58
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8011bcc:	f000 fbec 	bl	80123a8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	204e      	movs	r0, #78	@ 0x4e
 8011bd6:	183b      	adds	r3, r7, r0
 8011bd8:	2144      	movs	r1, #68	@ 0x44
 8011bda:	5a52      	ldrh	r2, [r2, r1]
 8011bdc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8011bde:	183b      	adds	r3, r7, r0
 8011be0:	881b      	ldrh	r3, [r3, #0]
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	244d      	movs	r4, #77	@ 0x4d
 8011be6:	193b      	adds	r3, r7, r4
 8011be8:	210f      	movs	r1, #15
 8011bea:	400a      	ands	r2, r1
 8011bec:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8011bee:	193b      	adds	r3, r7, r4
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d000      	beq.n	8011bf8 <PCD_EP_ISR_Handler+0x34>
 8011bf6:	e18f      	b.n	8011f18 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8011bf8:	183b      	adds	r3, r7, r0
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	2210      	movs	r2, #16
 8011bfe:	4013      	ands	r3, r2
 8011c00:	d155      	bne.n	8011cae <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	881b      	ldrh	r3, [r3, #0]
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	200e      	movs	r0, #14
 8011c0c:	183b      	adds	r3, r7, r0
 8011c0e:	49bb      	ldr	r1, [pc, #748]	@ (8011efc <PCD_EP_ISR_Handler+0x338>)
 8011c10:	400a      	ands	r2, r1
 8011c12:	801a      	strh	r2, [r3, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	183a      	adds	r2, r7, r0
 8011c1a:	8812      	ldrh	r2, [r2, #0]
 8011c1c:	49b8      	ldr	r1, [pc, #736]	@ (8011f00 <PCD_EP_ISR_Handler+0x33c>)
 8011c1e:	430a      	orrs	r2, r1
 8011c20:	b292      	uxth	r2, r2
 8011c22:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	3328      	adds	r3, #40	@ 0x28
 8011c28:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2250      	movs	r2, #80	@ 0x50
 8011c30:	5a9b      	ldrh	r3, [r3, r2]
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	001a      	movs	r2, r3
 8011c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	18d2      	adds	r2, r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	18d3      	adds	r3, r2, r3
 8011c44:	4aaf      	ldr	r2, [pc, #700]	@ (8011f04 <PCD_EP_ISR_Handler+0x340>)
 8011c46:	4694      	mov	ip, r2
 8011c48:	4463      	add	r3, ip
 8011c4a:	881b      	ldrh	r3, [r3, #0]
 8011c4c:	059b      	lsls	r3, r3, #22
 8011c4e:	0d9a      	lsrs	r2, r3, #22
 8011c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8011c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c56:	695a      	ldr	r2, [r3, #20]
 8011c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	18d2      	adds	r2, r2, r3
 8011c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c60:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2100      	movs	r1, #0
 8011c66:	0018      	movs	r0, r3
 8011c68:	f009 f952 	bl	801af10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2224      	movs	r2, #36	@ 0x24
 8011c70:	5c9b      	ldrb	r3, [r3, r2]
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d101      	bne.n	8011c7c <PCD_EP_ISR_Handler+0xb8>
 8011c78:	f000 fb96 	bl	80123a8 <PCD_EP_ISR_Handler+0x7e4>
 8011c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c7e:	699b      	ldr	r3, [r3, #24]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <PCD_EP_ISR_Handler+0xc4>
 8011c84:	f000 fb90 	bl	80123a8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2224      	movs	r2, #36	@ 0x24
 8011c8c:	5c9b      	ldrb	r3, [r3, r2]
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	2280      	movs	r2, #128	@ 0x80
 8011c92:	4252      	negs	r2, r2
 8011c94:	4313      	orrs	r3, r2
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	0011      	movs	r1, r2
 8011c9e:	224c      	movs	r2, #76	@ 0x4c
 8011ca0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2224      	movs	r2, #36	@ 0x24
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	5499      	strb	r1, [r3, r2]
 8011caa:	f000 fb7d 	bl	80123a8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	3369      	adds	r3, #105	@ 0x69
 8011cb2:	33ff      	adds	r3, #255	@ 0xff
 8011cb4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	214a      	movs	r1, #74	@ 0x4a
 8011cbc:	187b      	adds	r3, r7, r1
 8011cbe:	8812      	ldrh	r2, [r2, #0]
 8011cc0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8011cc2:	187b      	adds	r3, r7, r1
 8011cc4:	881a      	ldrh	r2, [r3, #0]
 8011cc6:	2380      	movs	r3, #128	@ 0x80
 8011cc8:	011b      	lsls	r3, r3, #4
 8011cca:	4013      	ands	r3, r2
 8011ccc:	d037      	beq.n	8011d3e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2250      	movs	r2, #80	@ 0x50
 8011cd4:	5a9b      	ldrh	r3, [r3, r2]
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	001a      	movs	r2, r3
 8011cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	18d2      	adds	r2, r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	18d3      	adds	r3, r2, r3
 8011ce8:	4a87      	ldr	r2, [pc, #540]	@ (8011f08 <PCD_EP_ISR_Handler+0x344>)
 8011cea:	4694      	mov	ip, r2
 8011cec:	4463      	add	r3, ip
 8011cee:	881b      	ldrh	r3, [r3, #0]
 8011cf0:	059b      	lsls	r3, r3, #22
 8011cf2:	0d9a      	lsrs	r2, r3, #22
 8011cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011cf6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6818      	ldr	r0, [r3, #0]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	22ac      	movs	r2, #172	@ 0xac
 8011d00:	0092      	lsls	r2, r2, #2
 8011d02:	1899      	adds	r1, r3, r2
 8011d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8011d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	f007 f8c4 	bl	8018e9a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	2010      	movs	r0, #16
 8011d1c:	183b      	adds	r3, r7, r0
 8011d1e:	497b      	ldr	r1, [pc, #492]	@ (8011f0c <PCD_EP_ISR_Handler+0x348>)
 8011d20:	400a      	ands	r2, r1
 8011d22:	801a      	strh	r2, [r3, #0]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	183a      	adds	r2, r7, r0
 8011d2a:	8812      	ldrh	r2, [r2, #0]
 8011d2c:	2180      	movs	r1, #128	@ 0x80
 8011d2e:	430a      	orrs	r2, r1
 8011d30:	b292      	uxth	r2, r2
 8011d32:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	0018      	movs	r0, r3
 8011d38:	f009 f8b4 	bl	801aea4 <HAL_PCD_SetupStageCallback>
 8011d3c:	e334      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8011d3e:	234a      	movs	r3, #74	@ 0x4a
 8011d40:	18fb      	adds	r3, r7, r3
 8011d42:	2200      	movs	r2, #0
 8011d44:	5e9b      	ldrsh	r3, [r3, r2]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	db00      	blt.n	8011d4c <PCD_EP_ISR_Handler+0x188>
 8011d4a:	e32d      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	201e      	movs	r0, #30
 8011d56:	183b      	adds	r3, r7, r0
 8011d58:	496c      	ldr	r1, [pc, #432]	@ (8011f0c <PCD_EP_ISR_Handler+0x348>)
 8011d5a:	400a      	ands	r2, r1
 8011d5c:	801a      	strh	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	183a      	adds	r2, r7, r0
 8011d64:	8812      	ldrh	r2, [r2, #0]
 8011d66:	2180      	movs	r1, #128	@ 0x80
 8011d68:	430a      	orrs	r2, r1
 8011d6a:	b292      	uxth	r2, r2
 8011d6c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2250      	movs	r2, #80	@ 0x50
 8011d74:	5a9b      	ldrh	r3, [r3, r2]
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	001a      	movs	r2, r3
 8011d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	00db      	lsls	r3, r3, #3
 8011d80:	18d2      	adds	r2, r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	18d3      	adds	r3, r2, r3
 8011d88:	4a5f      	ldr	r2, [pc, #380]	@ (8011f08 <PCD_EP_ISR_Handler+0x344>)
 8011d8a:	4694      	mov	ip, r2
 8011d8c:	4463      	add	r3, ip
 8011d8e:	881b      	ldrh	r3, [r3, #0]
 8011d90:	059b      	lsls	r3, r3, #22
 8011d92:	0d9a      	lsrs	r2, r3, #22
 8011d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8011d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d9a:	69db      	ldr	r3, [r3, #28]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d01a      	beq.n	8011dd6 <PCD_EP_ISR_Handler+0x212>
 8011da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011da2:	695b      	ldr	r3, [r3, #20]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d016      	beq.n	8011dd6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6818      	ldr	r0, [r3, #0]
 8011dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dae:	6959      	ldr	r1, [r3, #20]
 8011db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011db2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8011db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011db6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	f007 f86e 	bl	8018e9a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8011dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dc0:	695a      	ldr	r2, [r3, #20]
 8011dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dc4:	69db      	ldr	r3, [r3, #28]
 8011dc6:	18d2      	adds	r2, r2, r3
 8011dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2100      	movs	r1, #0
 8011dd0:	0018      	movs	r0, r3
 8011dd2:	f009 f87c 	bl	801aece <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	214a      	movs	r1, #74	@ 0x4a
 8011ddc:	187b      	adds	r3, r7, r1
 8011dde:	8812      	ldrh	r2, [r2, #0]
 8011de0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8011de2:	187b      	adds	r3, r7, r1
 8011de4:	881a      	ldrh	r2, [r3, #0]
 8011de6:	2380      	movs	r3, #128	@ 0x80
 8011de8:	011b      	lsls	r3, r3, #4
 8011dea:	4013      	ands	r3, r2
 8011dec:	d000      	beq.n	8011df0 <PCD_EP_ISR_Handler+0x22c>
 8011dee:	e2db      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
 8011df0:	187b      	adds	r3, r7, r1
 8011df2:	881a      	ldrh	r2, [r3, #0]
 8011df4:	23c0      	movs	r3, #192	@ 0xc0
 8011df6:	019b      	lsls	r3, r3, #6
 8011df8:	401a      	ands	r2, r3
 8011dfa:	23c0      	movs	r3, #192	@ 0xc0
 8011dfc:	019b      	lsls	r3, r3, #6
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d100      	bne.n	8011e04 <PCD_EP_ISR_Handler+0x240>
 8011e02:	e2d1      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	61bb      	str	r3, [r7, #24]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	2250      	movs	r2, #80	@ 0x50
 8011e10:	5a9b      	ldrh	r3, [r3, r2]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	001a      	movs	r2, r3
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	189b      	adds	r3, r3, r2
 8011e1a:	61bb      	str	r3, [r7, #24]
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	4a3a      	ldr	r2, [pc, #232]	@ (8011f08 <PCD_EP_ISR_Handler+0x344>)
 8011e20:	4694      	mov	ip, r2
 8011e22:	4463      	add	r3, ip
 8011e24:	617b      	str	r3, [r7, #20]
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	881b      	ldrh	r3, [r3, #0]
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	059b      	lsls	r3, r3, #22
 8011e2e:	0d9b      	lsrs	r3, r3, #22
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	801a      	strh	r2, [r3, #0]
 8011e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e38:	691b      	ldr	r3, [r3, #16]
 8011e3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8011e3c:	d91a      	bls.n	8011e74 <PCD_EP_ISR_Handler+0x2b0>
 8011e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e40:	691b      	ldr	r3, [r3, #16]
 8011e42:	095b      	lsrs	r3, r3, #5
 8011e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e48:	691b      	ldr	r3, [r3, #16]
 8011e4a:	221f      	movs	r2, #31
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	d102      	bne.n	8011e56 <PCD_EP_ISR_Handler+0x292>
 8011e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e52:	3b01      	subs	r3, #1
 8011e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	029b      	lsls	r3, r3, #10
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	4313      	orrs	r3, r2
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	4a25      	ldr	r2, [pc, #148]	@ (8011f00 <PCD_EP_ISR_Handler+0x33c>)
 8011e6a:	4313      	orrs	r3, r2
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	801a      	strh	r2, [r3, #0]
 8011e72:	e023      	b.n	8011ebc <PCD_EP_ISR_Handler+0x2f8>
 8011e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d108      	bne.n	8011e8e <PCD_EP_ISR_Handler+0x2ca>
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	881b      	ldrh	r3, [r3, #0]
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	4a1f      	ldr	r2, [pc, #124]	@ (8011f00 <PCD_EP_ISR_Handler+0x33c>)
 8011e84:	4313      	orrs	r3, r2
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	801a      	strh	r2, [r3, #0]
 8011e8c:	e016      	b.n	8011ebc <PCD_EP_ISR_Handler+0x2f8>
 8011e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e90:	691b      	ldr	r3, [r3, #16]
 8011e92:	085b      	lsrs	r3, r3, #1
 8011e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	4013      	ands	r3, r2
 8011e9e:	d002      	beq.n	8011ea6 <PCD_EP_ISR_Handler+0x2e2>
 8011ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	881b      	ldrh	r3, [r3, #0]
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	029b      	lsls	r3, r3, #10
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	4313      	orrs	r3, r2
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	881b      	ldrh	r3, [r3, #0]
 8011ec2:	b29a      	uxth	r2, r3
 8011ec4:	2012      	movs	r0, #18
 8011ec6:	183b      	adds	r3, r7, r0
 8011ec8:	4911      	ldr	r1, [pc, #68]	@ (8011f10 <PCD_EP_ISR_Handler+0x34c>)
 8011eca:	400a      	ands	r2, r1
 8011ecc:	801a      	strh	r2, [r3, #0]
 8011ece:	183b      	adds	r3, r7, r0
 8011ed0:	183a      	adds	r2, r7, r0
 8011ed2:	8812      	ldrh	r2, [r2, #0]
 8011ed4:	2180      	movs	r1, #128	@ 0x80
 8011ed6:	0149      	lsls	r1, r1, #5
 8011ed8:	404a      	eors	r2, r1
 8011eda:	801a      	strh	r2, [r3, #0]
 8011edc:	183b      	adds	r3, r7, r0
 8011ede:	183a      	adds	r2, r7, r0
 8011ee0:	8812      	ldrh	r2, [r2, #0]
 8011ee2:	2180      	movs	r1, #128	@ 0x80
 8011ee4:	0189      	lsls	r1, r1, #6
 8011ee6:	404a      	eors	r2, r1
 8011ee8:	801a      	strh	r2, [r3, #0]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	183a      	adds	r2, r7, r0
 8011ef0:	8812      	ldrh	r2, [r2, #0]
 8011ef2:	4908      	ldr	r1, [pc, #32]	@ (8011f14 <PCD_EP_ISR_Handler+0x350>)
 8011ef4:	430a      	orrs	r2, r1
 8011ef6:	b292      	uxth	r2, r2
 8011ef8:	801a      	strh	r2, [r3, #0]
 8011efa:	e255      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
 8011efc:	ffff8f0f 	.word	0xffff8f0f
 8011f00:	ffff8000 	.word	0xffff8000
 8011f04:	00000402 	.word	0x00000402
 8011f08:	00000406 	.word	0x00000406
 8011f0c:	00000f8f 	.word	0x00000f8f
 8011f10:	ffffbf8f 	.word	0xffffbf8f
 8011f14:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	001a      	movs	r2, r3
 8011f1e:	204d      	movs	r0, #77	@ 0x4d
 8011f20:	183b      	adds	r3, r7, r0
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	18d2      	adds	r2, r2, r3
 8011f28:	214a      	movs	r1, #74	@ 0x4a
 8011f2a:	187b      	adds	r3, r7, r1
 8011f2c:	8812      	ldrh	r2, [r2, #0]
 8011f2e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8011f30:	187b      	adds	r3, r7, r1
 8011f32:	2200      	movs	r2, #0
 8011f34:	5e9b      	ldrsh	r3, [r3, r2]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	db00      	blt.n	8011f3c <PCD_EP_ISR_Handler+0x378>
 8011f3a:	e0fa      	b.n	8012132 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	001a      	movs	r2, r3
 8011f42:	183b      	adds	r3, r7, r0
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	009b      	lsls	r3, r3, #2
 8011f48:	18d3      	adds	r3, r2, r3
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	2448      	movs	r4, #72	@ 0x48
 8011f50:	193b      	adds	r3, r7, r4
 8011f52:	49d1      	ldr	r1, [pc, #836]	@ (8012298 <PCD_EP_ISR_Handler+0x6d4>)
 8011f54:	400a      	ands	r2, r1
 8011f56:	801a      	strh	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	001a      	movs	r2, r3
 8011f5e:	183b      	adds	r3, r7, r0
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	18d3      	adds	r3, r2, r3
 8011f66:	193a      	adds	r2, r7, r4
 8011f68:	8812      	ldrh	r2, [r2, #0]
 8011f6a:	2180      	movs	r1, #128	@ 0x80
 8011f6c:	430a      	orrs	r2, r1
 8011f6e:	b292      	uxth	r2, r2
 8011f70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8011f72:	183b      	adds	r3, r7, r0
 8011f74:	781a      	ldrb	r2, [r3, #0]
 8011f76:	0013      	movs	r3, r2
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	189b      	adds	r3, r3, r2
 8011f7c:	00db      	lsls	r3, r3, #3
 8011f7e:	3369      	adds	r3, #105	@ 0x69
 8011f80:	33ff      	adds	r3, #255	@ 0xff
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	18d3      	adds	r3, r2, r3
 8011f86:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8011f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f8a:	7b1b      	ldrb	r3, [r3, #12]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d125      	bne.n	8011fdc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2250      	movs	r2, #80	@ 0x50
 8011f96:	5a9b      	ldrh	r3, [r3, r2]
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	001a      	movs	r2, r3
 8011f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	00db      	lsls	r3, r3, #3
 8011fa2:	18d2      	adds	r2, r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	18d3      	adds	r3, r2, r3
 8011faa:	4abc      	ldr	r2, [pc, #752]	@ (801229c <PCD_EP_ISR_Handler+0x6d8>)
 8011fac:	4694      	mov	ip, r2
 8011fae:	4463      	add	r3, ip
 8011fb0:	881a      	ldrh	r2, [r3, #0]
 8011fb2:	2450      	movs	r4, #80	@ 0x50
 8011fb4:	193b      	adds	r3, r7, r4
 8011fb6:	0592      	lsls	r2, r2, #22
 8011fb8:	0d92      	lsrs	r2, r2, #22
 8011fba:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8011fbc:	193b      	adds	r3, r7, r4
 8011fbe:	881b      	ldrh	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d100      	bne.n	8011fc6 <PCD_EP_ISR_Handler+0x402>
 8011fc4:	e08d      	b.n	80120e2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6818      	ldr	r0, [r3, #0]
 8011fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fcc:	6959      	ldr	r1, [r3, #20]
 8011fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fd0:	88da      	ldrh	r2, [r3, #6]
 8011fd2:	193b      	adds	r3, r7, r4
 8011fd4:	881b      	ldrh	r3, [r3, #0]
 8011fd6:	f006 ff60 	bl	8018e9a <USB_ReadPMA>
 8011fda:	e082      	b.n	80120e2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8011fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fde:	78db      	ldrb	r3, [r3, #3]
 8011fe0:	2b02      	cmp	r3, #2
 8011fe2:	d10c      	bne.n	8011ffe <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8011fe4:	2350      	movs	r3, #80	@ 0x50
 8011fe6:	18fc      	adds	r4, r7, r3
 8011fe8:	234a      	movs	r3, #74	@ 0x4a
 8011fea:	18fb      	adds	r3, r7, r3
 8011fec:	881a      	ldrh	r2, [r3, #0]
 8011fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	0018      	movs	r0, r3
 8011ff4:	f000 f9ec 	bl	80123d0 <HAL_PCD_EP_DB_Receive>
 8011ff8:	0003      	movs	r3, r0
 8011ffa:	8023      	strh	r3, [r4, #0]
 8011ffc:	e071      	b.n	80120e2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	001a      	movs	r2, r3
 8012004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	009b      	lsls	r3, r3, #2
 801200a:	18d3      	adds	r3, r2, r3
 801200c:	881b      	ldrh	r3, [r3, #0]
 801200e:	b29a      	uxth	r2, r3
 8012010:	2052      	movs	r0, #82	@ 0x52
 8012012:	183b      	adds	r3, r7, r0
 8012014:	49a2      	ldr	r1, [pc, #648]	@ (80122a0 <PCD_EP_ISR_Handler+0x6dc>)
 8012016:	400a      	ands	r2, r1
 8012018:	801a      	strh	r2, [r3, #0]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	001a      	movs	r2, r3
 8012020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	18d3      	adds	r3, r2, r3
 8012028:	183a      	adds	r2, r7, r0
 801202a:	8812      	ldrh	r2, [r2, #0]
 801202c:	499d      	ldr	r1, [pc, #628]	@ (80122a4 <PCD_EP_ISR_Handler+0x6e0>)
 801202e:	430a      	orrs	r2, r1
 8012030:	b292      	uxth	r2, r2
 8012032:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	001a      	movs	r2, r3
 801203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	009b      	lsls	r3, r3, #2
 8012040:	18d3      	adds	r3, r2, r3
 8012042:	881b      	ldrh	r3, [r3, #0]
 8012044:	b29b      	uxth	r3, r3
 8012046:	001a      	movs	r2, r3
 8012048:	2380      	movs	r3, #128	@ 0x80
 801204a:	01db      	lsls	r3, r3, #7
 801204c:	4013      	ands	r3, r2
 801204e:	d024      	beq.n	801209a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2250      	movs	r2, #80	@ 0x50
 8012056:	5a9b      	ldrh	r3, [r3, r2]
 8012058:	b29b      	uxth	r3, r3
 801205a:	001a      	movs	r2, r3
 801205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	00db      	lsls	r3, r3, #3
 8012062:	18d2      	adds	r2, r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	18d3      	adds	r3, r2, r3
 801206a:	4a8f      	ldr	r2, [pc, #572]	@ (80122a8 <PCD_EP_ISR_Handler+0x6e4>)
 801206c:	4694      	mov	ip, r2
 801206e:	4463      	add	r3, ip
 8012070:	881a      	ldrh	r2, [r3, #0]
 8012072:	2450      	movs	r4, #80	@ 0x50
 8012074:	193b      	adds	r3, r7, r4
 8012076:	0592      	lsls	r2, r2, #22
 8012078:	0d92      	lsrs	r2, r2, #22
 801207a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801207c:	193b      	adds	r3, r7, r4
 801207e:	881b      	ldrh	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d02e      	beq.n	80120e2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6818      	ldr	r0, [r3, #0]
 8012088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801208a:	6959      	ldr	r1, [r3, #20]
 801208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801208e:	891a      	ldrh	r2, [r3, #8]
 8012090:	193b      	adds	r3, r7, r4
 8012092:	881b      	ldrh	r3, [r3, #0]
 8012094:	f006 ff01 	bl	8018e9a <USB_ReadPMA>
 8012098:	e023      	b.n	80120e2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2250      	movs	r2, #80	@ 0x50
 80120a0:	5a9b      	ldrh	r3, [r3, r2]
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	001a      	movs	r2, r3
 80120a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	00db      	lsls	r3, r3, #3
 80120ac:	18d2      	adds	r2, r2, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	18d3      	adds	r3, r2, r3
 80120b4:	4a79      	ldr	r2, [pc, #484]	@ (801229c <PCD_EP_ISR_Handler+0x6d8>)
 80120b6:	4694      	mov	ip, r2
 80120b8:	4463      	add	r3, ip
 80120ba:	881a      	ldrh	r2, [r3, #0]
 80120bc:	2450      	movs	r4, #80	@ 0x50
 80120be:	193b      	adds	r3, r7, r4
 80120c0:	0592      	lsls	r2, r2, #22
 80120c2:	0d92      	lsrs	r2, r2, #22
 80120c4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80120c6:	193b      	adds	r3, r7, r4
 80120c8:	881b      	ldrh	r3, [r3, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d009      	beq.n	80120e2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6818      	ldr	r0, [r3, #0]
 80120d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120d4:	6959      	ldr	r1, [r3, #20]
 80120d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120d8:	895a      	ldrh	r2, [r3, #10]
 80120da:	193b      	adds	r3, r7, r4
 80120dc:	881b      	ldrh	r3, [r3, #0]
 80120de:	f006 fedc 	bl	8018e9a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80120e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120e4:	69da      	ldr	r2, [r3, #28]
 80120e6:	2150      	movs	r1, #80	@ 0x50
 80120e8:	187b      	adds	r3, r7, r1
 80120ea:	881b      	ldrh	r3, [r3, #0]
 80120ec:	18d2      	adds	r2, r2, r3
 80120ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80120f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120f4:	695a      	ldr	r2, [r3, #20]
 80120f6:	187b      	adds	r3, r7, r1
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	18d2      	adds	r2, r2, r3
 80120fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8012100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012102:	699b      	ldr	r3, [r3, #24]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d005      	beq.n	8012114 <PCD_EP_ISR_Handler+0x550>
 8012108:	187b      	adds	r3, r7, r1
 801210a:	881a      	ldrh	r2, [r3, #0]
 801210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801210e:	691b      	ldr	r3, [r3, #16]
 8012110:	429a      	cmp	r2, r3
 8012112:	d207      	bcs.n	8012124 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8012114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012116:	781a      	ldrb	r2, [r3, #0]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	0011      	movs	r1, r2
 801211c:	0018      	movs	r0, r3
 801211e:	f008 fed6 	bl	801aece <HAL_PCD_DataOutStageCallback>
 8012122:	e006      	b.n	8012132 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801212a:	0011      	movs	r1, r2
 801212c:	0018      	movs	r0, r3
 801212e:	f005 fbf9 	bl	8017924 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8012132:	244a      	movs	r4, #74	@ 0x4a
 8012134:	193b      	adds	r3, r7, r4
 8012136:	881b      	ldrh	r3, [r3, #0]
 8012138:	2280      	movs	r2, #128	@ 0x80
 801213a:	4013      	ands	r3, r2
 801213c:	d100      	bne.n	8012140 <PCD_EP_ISR_Handler+0x57c>
 801213e:	e133      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8012140:	204d      	movs	r0, #77	@ 0x4d
 8012142:	183b      	adds	r3, r7, r0
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	0013      	movs	r3, r2
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	189b      	adds	r3, r3, r2
 801214e:	00db      	lsls	r3, r3, #3
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	18d3      	adds	r3, r2, r3
 8012154:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	001a      	movs	r2, r3
 801215c:	183b      	adds	r3, r7, r0
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	18d3      	adds	r3, r2, r3
 8012164:	881b      	ldrh	r3, [r3, #0]
 8012166:	b29a      	uxth	r2, r3
 8012168:	2542      	movs	r5, #66	@ 0x42
 801216a:	197b      	adds	r3, r7, r5
 801216c:	494f      	ldr	r1, [pc, #316]	@ (80122ac <PCD_EP_ISR_Handler+0x6e8>)
 801216e:	400a      	ands	r2, r1
 8012170:	801a      	strh	r2, [r3, #0]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	001a      	movs	r2, r3
 8012178:	183b      	adds	r3, r7, r0
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	009b      	lsls	r3, r3, #2
 801217e:	18d3      	adds	r3, r2, r3
 8012180:	197a      	adds	r2, r7, r5
 8012182:	8812      	ldrh	r2, [r2, #0]
 8012184:	494a      	ldr	r1, [pc, #296]	@ (80122b0 <PCD_EP_ISR_Handler+0x6ec>)
 8012186:	430a      	orrs	r2, r1
 8012188:	b292      	uxth	r2, r2
 801218a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801218c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801218e:	78db      	ldrb	r3, [r3, #3]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d000      	beq.n	8012196 <PCD_EP_ISR_Handler+0x5d2>
 8012194:	e0af      	b.n	80122f6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8012196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012198:	2200      	movs	r2, #0
 801219a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801219c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801219e:	7b1b      	ldrb	r3, [r3, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d100      	bne.n	80121a6 <PCD_EP_ISR_Handler+0x5e2>
 80121a4:	e09f      	b.n	80122e6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80121a6:	193b      	adds	r3, r7, r4
 80121a8:	881b      	ldrh	r3, [r3, #0]
 80121aa:	2240      	movs	r2, #64	@ 0x40
 80121ac:	4013      	ands	r3, r2
 80121ae:	d046      	beq.n	801223e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80121b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121b2:	785b      	ldrb	r3, [r3, #1]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d125      	bne.n	8012204 <PCD_EP_ISR_Handler+0x640>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2250      	movs	r2, #80	@ 0x50
 80121c4:	5a9b      	ldrh	r3, [r3, r2]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	001a      	movs	r2, r3
 80121ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121cc:	189b      	adds	r3, r3, r2
 80121ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80121d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	00da      	lsls	r2, r3, #3
 80121d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d8:	18d3      	adds	r3, r2, r3
 80121da:	4a33      	ldr	r2, [pc, #204]	@ (80122a8 <PCD_EP_ISR_Handler+0x6e4>)
 80121dc:	4694      	mov	ip, r2
 80121de:	4463      	add	r3, ip
 80121e0:	623b      	str	r3, [r7, #32]
 80121e2:	6a3b      	ldr	r3, [r7, #32]
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	059b      	lsls	r3, r3, #22
 80121ea:	0d9b      	lsrs	r3, r3, #22
 80121ec:	b29a      	uxth	r2, r3
 80121ee:	6a3b      	ldr	r3, [r7, #32]
 80121f0:	801a      	strh	r2, [r3, #0]
 80121f2:	6a3b      	ldr	r3, [r7, #32]
 80121f4:	881b      	ldrh	r3, [r3, #0]
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	4a2d      	ldr	r2, [pc, #180]	@ (80122b0 <PCD_EP_ISR_Handler+0x6ec>)
 80121fa:	4313      	orrs	r3, r2
 80121fc:	b29a      	uxth	r2, r3
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	801a      	strh	r2, [r3, #0]
 8012202:	e070      	b.n	80122e6 <PCD_EP_ISR_Handler+0x722>
 8012204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012206:	785b      	ldrb	r3, [r3, #1]
 8012208:	2b01      	cmp	r3, #1
 801220a:	d16c      	bne.n	80122e6 <PCD_EP_ISR_Handler+0x722>
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2250      	movs	r2, #80	@ 0x50
 8012218:	5a9b      	ldrh	r3, [r3, r2]
 801221a:	b29b      	uxth	r3, r3
 801221c:	001a      	movs	r2, r3
 801221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012220:	189b      	adds	r3, r3, r2
 8012222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	00da      	lsls	r2, r3, #3
 801222a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222c:	18d3      	adds	r3, r2, r3
 801222e:	4a1e      	ldr	r2, [pc, #120]	@ (80122a8 <PCD_EP_ISR_Handler+0x6e4>)
 8012230:	4694      	mov	ip, r2
 8012232:	4463      	add	r3, ip
 8012234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012238:	2200      	movs	r2, #0
 801223a:	801a      	strh	r2, [r3, #0]
 801223c:	e053      	b.n	80122e6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012246:	785b      	ldrb	r3, [r3, #1]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d133      	bne.n	80122b4 <PCD_EP_ISR_Handler+0x6f0>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	637b      	str	r3, [r7, #52]	@ 0x34
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	2250      	movs	r2, #80	@ 0x50
 8012258:	5a9b      	ldrh	r3, [r3, r2]
 801225a:	b29b      	uxth	r3, r3
 801225c:	001a      	movs	r2, r3
 801225e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012260:	189b      	adds	r3, r3, r2
 8012262:	637b      	str	r3, [r7, #52]	@ 0x34
 8012264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	00da      	lsls	r2, r3, #3
 801226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801226c:	18d3      	adds	r3, r2, r3
 801226e:	4a0b      	ldr	r2, [pc, #44]	@ (801229c <PCD_EP_ISR_Handler+0x6d8>)
 8012270:	4694      	mov	ip, r2
 8012272:	4463      	add	r3, ip
 8012274:	633b      	str	r3, [r7, #48]	@ 0x30
 8012276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012278:	881b      	ldrh	r3, [r3, #0]
 801227a:	b29b      	uxth	r3, r3
 801227c:	059b      	lsls	r3, r3, #22
 801227e:	0d9b      	lsrs	r3, r3, #22
 8012280:	b29a      	uxth	r2, r3
 8012282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012284:	801a      	strh	r2, [r3, #0]
 8012286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012288:	881b      	ldrh	r3, [r3, #0]
 801228a:	b29b      	uxth	r3, r3
 801228c:	4a08      	ldr	r2, [pc, #32]	@ (80122b0 <PCD_EP_ISR_Handler+0x6ec>)
 801228e:	4313      	orrs	r3, r2
 8012290:	b29a      	uxth	r2, r3
 8012292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012294:	801a      	strh	r2, [r3, #0]
 8012296:	e026      	b.n	80122e6 <PCD_EP_ISR_Handler+0x722>
 8012298:	00000f8f 	.word	0x00000f8f
 801229c:	00000406 	.word	0x00000406
 80122a0:	ffff8f8f 	.word	0xffff8f8f
 80122a4:	ffff80c0 	.word	0xffff80c0
 80122a8:	00000402 	.word	0x00000402
 80122ac:	ffff8f0f 	.word	0xffff8f0f
 80122b0:	ffff8000 	.word	0xffff8000
 80122b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80122b6:	785b      	ldrb	r3, [r3, #1]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d114      	bne.n	80122e6 <PCD_EP_ISR_Handler+0x722>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2250      	movs	r2, #80	@ 0x50
 80122c2:	5a9b      	ldrh	r3, [r3, r2]
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	001a      	movs	r2, r3
 80122c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122ca:	189b      	adds	r3, r3, r2
 80122cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	00da      	lsls	r2, r3, #3
 80122d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122d6:	18d3      	adds	r3, r2, r3
 80122d8:	4a3b      	ldr	r2, [pc, #236]	@ (80123c8 <PCD_EP_ISR_Handler+0x804>)
 80122da:	4694      	mov	ip, r2
 80122dc:	4463      	add	r3, ip
 80122de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80122e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122e2:	2200      	movs	r2, #0
 80122e4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80122e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80122e8:	781a      	ldrb	r2, [r3, #0]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	0011      	movs	r1, r2
 80122ee:	0018      	movs	r0, r3
 80122f0:	f008 fe0e 	bl	801af10 <HAL_PCD_DataInStageCallback>
 80122f4:	e058      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80122f6:	234a      	movs	r3, #74	@ 0x4a
 80122f8:	18fb      	adds	r3, r7, r3
 80122fa:	881a      	ldrh	r2, [r3, #0]
 80122fc:	2380      	movs	r3, #128	@ 0x80
 80122fe:	005b      	lsls	r3, r3, #1
 8012300:	4013      	ands	r3, r2
 8012302:	d149      	bne.n	8012398 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	2250      	movs	r2, #80	@ 0x50
 801230a:	5a9b      	ldrh	r3, [r3, r2]
 801230c:	b29b      	uxth	r3, r3
 801230e:	001a      	movs	r2, r3
 8012310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	00db      	lsls	r3, r3, #3
 8012316:	18d2      	adds	r2, r2, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	18d3      	adds	r3, r2, r3
 801231e:	4a2b      	ldr	r2, [pc, #172]	@ (80123cc <PCD_EP_ISR_Handler+0x808>)
 8012320:	4694      	mov	ip, r2
 8012322:	4463      	add	r3, ip
 8012324:	881a      	ldrh	r2, [r3, #0]
 8012326:	2140      	movs	r1, #64	@ 0x40
 8012328:	187b      	adds	r3, r7, r1
 801232a:	0592      	lsls	r2, r2, #22
 801232c:	0d92      	lsrs	r2, r2, #22
 801232e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8012330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012332:	699a      	ldr	r2, [r3, #24]
 8012334:	187b      	adds	r3, r7, r1
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	429a      	cmp	r2, r3
 801233a:	d907      	bls.n	801234c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801233c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801233e:	699a      	ldr	r2, [r3, #24]
 8012340:	187b      	adds	r3, r7, r1
 8012342:	881b      	ldrh	r3, [r3, #0]
 8012344:	1ad2      	subs	r2, r2, r3
 8012346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012348:	619a      	str	r2, [r3, #24]
 801234a:	e002      	b.n	8012352 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801234c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801234e:	2200      	movs	r2, #0
 8012350:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8012352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012354:	699b      	ldr	r3, [r3, #24]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d107      	bne.n	801236a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801235a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801235c:	781a      	ldrb	r2, [r3, #0]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	0011      	movs	r1, r2
 8012362:	0018      	movs	r0, r3
 8012364:	f008 fdd4 	bl	801af10 <HAL_PCD_DataInStageCallback>
 8012368:	e01e      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801236a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801236c:	695a      	ldr	r2, [r3, #20]
 801236e:	2140      	movs	r1, #64	@ 0x40
 8012370:	187b      	adds	r3, r7, r1
 8012372:	881b      	ldrh	r3, [r3, #0]
 8012374:	18d2      	adds	r2, r2, r3
 8012376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012378:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801237a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801237c:	69da      	ldr	r2, [r3, #28]
 801237e:	187b      	adds	r3, r7, r1
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	18d2      	adds	r2, r2, r3
 8012384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012386:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801238e:	0011      	movs	r1, r2
 8012390:	0018      	movs	r0, r3
 8012392:	f005 fac7 	bl	8017924 <USB_EPStartXfer>
 8012396:	e007      	b.n	80123a8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8012398:	234a      	movs	r3, #74	@ 0x4a
 801239a:	18fb      	adds	r3, r7, r3
 801239c:	881a      	ldrh	r2, [r3, #0]
 801239e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	0018      	movs	r0, r3
 80123a4:	f000 f930 	bl	8012608 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	2244      	movs	r2, #68	@ 0x44
 80123ae:	5a9b      	ldrh	r3, [r3, r2]
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	b21b      	sxth	r3, r3
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	da01      	bge.n	80123bc <PCD_EP_ISR_Handler+0x7f8>
 80123b8:	f7ff fc0a 	bl	8011bd0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80123bc:	2300      	movs	r3, #0
}
 80123be:	0018      	movs	r0, r3
 80123c0:	46bd      	mov	sp, r7
 80123c2:	b016      	add	sp, #88	@ 0x58
 80123c4:	bdb0      	pop	{r4, r5, r7, pc}
 80123c6:	46c0      	nop			@ (mov r8, r8)
 80123c8:	00000406 	.word	0x00000406
 80123cc:	00000402 	.word	0x00000402

080123d0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80123d0:	b590      	push	{r4, r7, lr}
 80123d2:	b089      	sub	sp, #36	@ 0x24
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	1dbb      	adds	r3, r7, #6
 80123dc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80123de:	1dbb      	adds	r3, r7, #6
 80123e0:	881a      	ldrh	r2, [r3, #0]
 80123e2:	2380      	movs	r3, #128	@ 0x80
 80123e4:	01db      	lsls	r3, r3, #7
 80123e6:	4013      	ands	r3, r2
 80123e8:	d100      	bne.n	80123ec <HAL_PCD_EP_DB_Receive+0x1c>
 80123ea:	e07d      	b.n	80124e8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2250      	movs	r2, #80	@ 0x50
 80123f2:	5a9b      	ldrh	r3, [r3, r2]
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	001a      	movs	r2, r3
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	18d2      	adds	r2, r2, r3
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	18d3      	adds	r3, r2, r3
 8012406:	4a7a      	ldr	r2, [pc, #488]	@ (80125f0 <HAL_PCD_EP_DB_Receive+0x220>)
 8012408:	4694      	mov	ip, r2
 801240a:	4463      	add	r3, ip
 801240c:	881a      	ldrh	r2, [r3, #0]
 801240e:	211a      	movs	r1, #26
 8012410:	187b      	adds	r3, r7, r1
 8012412:	0592      	lsls	r2, r2, #22
 8012414:	0d92      	lsrs	r2, r2, #22
 8012416:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	699a      	ldr	r2, [r3, #24]
 801241c:	187b      	adds	r3, r7, r1
 801241e:	881b      	ldrh	r3, [r3, #0]
 8012420:	429a      	cmp	r2, r3
 8012422:	d307      	bcc.n	8012434 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	699a      	ldr	r2, [r3, #24]
 8012428:	187b      	adds	r3, r7, r1
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	1ad2      	subs	r2, r2, r3
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	619a      	str	r2, [r3, #24]
 8012432:	e002      	b.n	801243a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	2200      	movs	r2, #0
 8012438:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	699b      	ldr	r3, [r3, #24]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d121      	bne.n	8012486 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	001a      	movs	r2, r3
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	18d3      	adds	r3, r2, r3
 8012450:	881b      	ldrh	r3, [r3, #0]
 8012452:	b29a      	uxth	r2, r3
 8012454:	2018      	movs	r0, #24
 8012456:	183b      	adds	r3, r7, r0
 8012458:	4966      	ldr	r1, [pc, #408]	@ (80125f4 <HAL_PCD_EP_DB_Receive+0x224>)
 801245a:	400a      	ands	r2, r1
 801245c:	801a      	strh	r2, [r3, #0]
 801245e:	183b      	adds	r3, r7, r0
 8012460:	183a      	adds	r2, r7, r0
 8012462:	8812      	ldrh	r2, [r2, #0]
 8012464:	2180      	movs	r1, #128	@ 0x80
 8012466:	0189      	lsls	r1, r1, #6
 8012468:	404a      	eors	r2, r1
 801246a:	801a      	strh	r2, [r3, #0]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	001a      	movs	r2, r3
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	18d3      	adds	r3, r2, r3
 801247a:	183a      	adds	r2, r7, r0
 801247c:	8812      	ldrh	r2, [r2, #0]
 801247e:	495e      	ldr	r1, [pc, #376]	@ (80125f8 <HAL_PCD_EP_DB_Receive+0x228>)
 8012480:	430a      	orrs	r2, r1
 8012482:	b292      	uxth	r2, r2
 8012484:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012486:	1dbb      	adds	r3, r7, #6
 8012488:	881b      	ldrh	r3, [r3, #0]
 801248a:	2240      	movs	r2, #64	@ 0x40
 801248c:	4013      	ands	r3, r2
 801248e:	d01a      	beq.n	80124c6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	001a      	movs	r2, r3
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	009b      	lsls	r3, r3, #2
 801249c:	18d3      	adds	r3, r2, r3
 801249e:	881b      	ldrh	r3, [r3, #0]
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	2016      	movs	r0, #22
 80124a4:	183b      	adds	r3, r7, r0
 80124a6:	4955      	ldr	r1, [pc, #340]	@ (80125fc <HAL_PCD_EP_DB_Receive+0x22c>)
 80124a8:	400a      	ands	r2, r1
 80124aa:	801a      	strh	r2, [r3, #0]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	001a      	movs	r2, r3
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	18d3      	adds	r3, r2, r3
 80124ba:	183a      	adds	r2, r7, r0
 80124bc:	8812      	ldrh	r2, [r2, #0]
 80124be:	4950      	ldr	r1, [pc, #320]	@ (8012600 <HAL_PCD_EP_DB_Receive+0x230>)
 80124c0:	430a      	orrs	r2, r1
 80124c2:	b292      	uxth	r2, r2
 80124c4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80124c6:	241a      	movs	r4, #26
 80124c8:	193b      	adds	r3, r7, r4
 80124ca:	881b      	ldrh	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d100      	bne.n	80124d2 <HAL_PCD_EP_DB_Receive+0x102>
 80124d0:	e086      	b.n	80125e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	6818      	ldr	r0, [r3, #0]
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	6959      	ldr	r1, [r3, #20]
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	891a      	ldrh	r2, [r3, #8]
 80124de:	193b      	adds	r3, r7, r4
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	f006 fcda 	bl	8018e9a <USB_ReadPMA>
 80124e6:	e07b      	b.n	80125e0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	2250      	movs	r2, #80	@ 0x50
 80124ee:	5a9b      	ldrh	r3, [r3, r2]
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	001a      	movs	r2, r3
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	00db      	lsls	r3, r3, #3
 80124fa:	18d2      	adds	r2, r2, r3
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	18d3      	adds	r3, r2, r3
 8012502:	4a40      	ldr	r2, [pc, #256]	@ (8012604 <HAL_PCD_EP_DB_Receive+0x234>)
 8012504:	4694      	mov	ip, r2
 8012506:	4463      	add	r3, ip
 8012508:	881a      	ldrh	r2, [r3, #0]
 801250a:	211a      	movs	r1, #26
 801250c:	187b      	adds	r3, r7, r1
 801250e:	0592      	lsls	r2, r2, #22
 8012510:	0d92      	lsrs	r2, r2, #22
 8012512:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	699a      	ldr	r2, [r3, #24]
 8012518:	187b      	adds	r3, r7, r1
 801251a:	881b      	ldrh	r3, [r3, #0]
 801251c:	429a      	cmp	r2, r3
 801251e:	d307      	bcc.n	8012530 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	699a      	ldr	r2, [r3, #24]
 8012524:	187b      	adds	r3, r7, r1
 8012526:	881b      	ldrh	r3, [r3, #0]
 8012528:	1ad2      	subs	r2, r2, r3
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	619a      	str	r2, [r3, #24]
 801252e:	e002      	b.n	8012536 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	2200      	movs	r2, #0
 8012534:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	699b      	ldr	r3, [r3, #24]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d121      	bne.n	8012582 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	001a      	movs	r2, r3
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	18d3      	adds	r3, r2, r3
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	b29a      	uxth	r2, r3
 8012550:	201e      	movs	r0, #30
 8012552:	183b      	adds	r3, r7, r0
 8012554:	4927      	ldr	r1, [pc, #156]	@ (80125f4 <HAL_PCD_EP_DB_Receive+0x224>)
 8012556:	400a      	ands	r2, r1
 8012558:	801a      	strh	r2, [r3, #0]
 801255a:	183b      	adds	r3, r7, r0
 801255c:	183a      	adds	r2, r7, r0
 801255e:	8812      	ldrh	r2, [r2, #0]
 8012560:	2180      	movs	r1, #128	@ 0x80
 8012562:	0189      	lsls	r1, r1, #6
 8012564:	404a      	eors	r2, r1
 8012566:	801a      	strh	r2, [r3, #0]
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	001a      	movs	r2, r3
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	18d3      	adds	r3, r2, r3
 8012576:	183a      	adds	r2, r7, r0
 8012578:	8812      	ldrh	r2, [r2, #0]
 801257a:	491f      	ldr	r1, [pc, #124]	@ (80125f8 <HAL_PCD_EP_DB_Receive+0x228>)
 801257c:	430a      	orrs	r2, r1
 801257e:	b292      	uxth	r2, r2
 8012580:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8012582:	1dbb      	adds	r3, r7, #6
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	2240      	movs	r2, #64	@ 0x40
 8012588:	4013      	ands	r3, r2
 801258a:	d11a      	bne.n	80125c2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	001a      	movs	r2, r3
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	009b      	lsls	r3, r3, #2
 8012598:	18d3      	adds	r3, r2, r3
 801259a:	881b      	ldrh	r3, [r3, #0]
 801259c:	b29a      	uxth	r2, r3
 801259e:	201c      	movs	r0, #28
 80125a0:	183b      	adds	r3, r7, r0
 80125a2:	4916      	ldr	r1, [pc, #88]	@ (80125fc <HAL_PCD_EP_DB_Receive+0x22c>)
 80125a4:	400a      	ands	r2, r1
 80125a6:	801a      	strh	r2, [r3, #0]
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	001a      	movs	r2, r3
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	18d3      	adds	r3, r2, r3
 80125b6:	183a      	adds	r2, r7, r0
 80125b8:	8812      	ldrh	r2, [r2, #0]
 80125ba:	4911      	ldr	r1, [pc, #68]	@ (8012600 <HAL_PCD_EP_DB_Receive+0x230>)
 80125bc:	430a      	orrs	r2, r1
 80125be:	b292      	uxth	r2, r2
 80125c0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80125c2:	241a      	movs	r4, #26
 80125c4:	193b      	adds	r3, r7, r4
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d009      	beq.n	80125e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	6818      	ldr	r0, [r3, #0]
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	6959      	ldr	r1, [r3, #20]
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	895a      	ldrh	r2, [r3, #10]
 80125d8:	193b      	adds	r3, r7, r4
 80125da:	881b      	ldrh	r3, [r3, #0]
 80125dc:	f006 fc5d 	bl	8018e9a <USB_ReadPMA>
    }
  }

  return count;
 80125e0:	231a      	movs	r3, #26
 80125e2:	18fb      	adds	r3, r7, r3
 80125e4:	881b      	ldrh	r3, [r3, #0]
}
 80125e6:	0018      	movs	r0, r3
 80125e8:	46bd      	mov	sp, r7
 80125ea:	b009      	add	sp, #36	@ 0x24
 80125ec:	bd90      	pop	{r4, r7, pc}
 80125ee:	46c0      	nop			@ (mov r8, r8)
 80125f0:	00000402 	.word	0x00000402
 80125f4:	ffffbf8f 	.word	0xffffbf8f
 80125f8:	ffff8080 	.word	0xffff8080
 80125fc:	ffff8f8f 	.word	0xffff8f8f
 8012600:	ffff80c0 	.word	0xffff80c0
 8012604:	00000406 	.word	0x00000406

08012608 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b0a4      	sub	sp, #144	@ 0x90
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	1dbb      	adds	r3, r7, #6
 8012614:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012616:	1dbb      	adds	r3, r7, #6
 8012618:	881b      	ldrh	r3, [r3, #0]
 801261a:	2240      	movs	r2, #64	@ 0x40
 801261c:	4013      	ands	r3, r2
 801261e:	d100      	bne.n	8012622 <HAL_PCD_EP_DB_Transmit+0x1a>
 8012620:	e1e4      	b.n	80129ec <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2250      	movs	r2, #80	@ 0x50
 8012628:	5a9b      	ldrh	r3, [r3, r2]
 801262a:	b29b      	uxth	r3, r3
 801262c:	001a      	movs	r2, r3
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	18d2      	adds	r2, r2, r3
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	18d3      	adds	r3, r2, r3
 801263c:	4ad0      	ldr	r2, [pc, #832]	@ (8012980 <HAL_PCD_EP_DB_Transmit+0x378>)
 801263e:	4694      	mov	ip, r2
 8012640:	4463      	add	r3, ip
 8012642:	881a      	ldrh	r2, [r3, #0]
 8012644:	2186      	movs	r1, #134	@ 0x86
 8012646:	187b      	adds	r3, r7, r1
 8012648:	0592      	lsls	r2, r2, #22
 801264a:	0d92      	lsrs	r2, r2, #22
 801264c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	699a      	ldr	r2, [r3, #24]
 8012652:	187b      	adds	r3, r7, r1
 8012654:	881b      	ldrh	r3, [r3, #0]
 8012656:	429a      	cmp	r2, r3
 8012658:	d907      	bls.n	801266a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	699a      	ldr	r2, [r3, #24]
 801265e:	187b      	adds	r3, r7, r1
 8012660:	881b      	ldrh	r3, [r3, #0]
 8012662:	1ad2      	subs	r2, r2, r3
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	619a      	str	r2, [r3, #24]
 8012668:	e002      	b.n	8012670 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	2200      	movs	r2, #0
 801266e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	699b      	ldr	r3, [r3, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d000      	beq.n	801267a <HAL_PCD_EP_DB_Transmit+0x72>
 8012678:	e0b5      	b.n	80127e6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	785b      	ldrb	r3, [r3, #1]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d125      	bne.n	80126ce <HAL_PCD_EP_DB_Transmit+0xc6>
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2250      	movs	r2, #80	@ 0x50
 801268e:	5a9b      	ldrh	r3, [r3, r2]
 8012690:	b29b      	uxth	r3, r3
 8012692:	001a      	movs	r2, r3
 8012694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012696:	189b      	adds	r3, r3, r2
 8012698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	00da      	lsls	r2, r3, #3
 80126a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a2:	18d3      	adds	r3, r2, r3
 80126a4:	4ab6      	ldr	r2, [pc, #728]	@ (8012980 <HAL_PCD_EP_DB_Transmit+0x378>)
 80126a6:	4694      	mov	ip, r2
 80126a8:	4463      	add	r3, ip
 80126aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80126ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ae:	881b      	ldrh	r3, [r3, #0]
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	059b      	lsls	r3, r3, #22
 80126b4:	0d9b      	lsrs	r3, r3, #22
 80126b6:	b29a      	uxth	r2, r3
 80126b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ba:	801a      	strh	r2, [r3, #0]
 80126bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126be:	881b      	ldrh	r3, [r3, #0]
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	4ab0      	ldr	r2, [pc, #704]	@ (8012984 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80126c4:	4313      	orrs	r3, r2
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ca:	801a      	strh	r2, [r3, #0]
 80126cc:	e01b      	b.n	8012706 <HAL_PCD_EP_DB_Transmit+0xfe>
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	785b      	ldrb	r3, [r3, #1]
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d117      	bne.n	8012706 <HAL_PCD_EP_DB_Transmit+0xfe>
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	637b      	str	r3, [r7, #52]	@ 0x34
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2250      	movs	r2, #80	@ 0x50
 80126e2:	5a9b      	ldrh	r3, [r3, r2]
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	001a      	movs	r2, r3
 80126e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126ea:	189b      	adds	r3, r3, r2
 80126ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	00da      	lsls	r2, r3, #3
 80126f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126f6:	18d3      	adds	r3, r2, r3
 80126f8:	4aa1      	ldr	r2, [pc, #644]	@ (8012980 <HAL_PCD_EP_DB_Transmit+0x378>)
 80126fa:	4694      	mov	ip, r2
 80126fc:	4463      	add	r3, ip
 80126fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8012700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012702:	2200      	movs	r2, #0
 8012704:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	627b      	str	r3, [r7, #36]	@ 0x24
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	785b      	ldrb	r3, [r3, #1]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d125      	bne.n	8012760 <HAL_PCD_EP_DB_Transmit+0x158>
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	61fb      	str	r3, [r7, #28]
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2250      	movs	r2, #80	@ 0x50
 8012720:	5a9b      	ldrh	r3, [r3, r2]
 8012722:	b29b      	uxth	r3, r3
 8012724:	001a      	movs	r2, r3
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	189b      	adds	r3, r3, r2
 801272a:	61fb      	str	r3, [r7, #28]
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	00da      	lsls	r2, r3, #3
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	18d3      	adds	r3, r2, r3
 8012736:	4a94      	ldr	r2, [pc, #592]	@ (8012988 <HAL_PCD_EP_DB_Transmit+0x380>)
 8012738:	4694      	mov	ip, r2
 801273a:	4463      	add	r3, ip
 801273c:	61bb      	str	r3, [r7, #24]
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	881b      	ldrh	r3, [r3, #0]
 8012742:	b29b      	uxth	r3, r3
 8012744:	059b      	lsls	r3, r3, #22
 8012746:	0d9b      	lsrs	r3, r3, #22
 8012748:	b29a      	uxth	r2, r3
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	801a      	strh	r2, [r3, #0]
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	b29b      	uxth	r3, r3
 8012754:	4a8b      	ldr	r2, [pc, #556]	@ (8012984 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8012756:	4313      	orrs	r3, r2
 8012758:	b29a      	uxth	r2, r3
 801275a:	69bb      	ldr	r3, [r7, #24]
 801275c:	801a      	strh	r2, [r3, #0]
 801275e:	e018      	b.n	8012792 <HAL_PCD_EP_DB_Transmit+0x18a>
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	785b      	ldrb	r3, [r3, #1]
 8012764:	2b01      	cmp	r3, #1
 8012766:	d114      	bne.n	8012792 <HAL_PCD_EP_DB_Transmit+0x18a>
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2250      	movs	r2, #80	@ 0x50
 801276e:	5a9b      	ldrh	r3, [r3, r2]
 8012770:	b29b      	uxth	r3, r3
 8012772:	001a      	movs	r2, r3
 8012774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012776:	189b      	adds	r3, r3, r2
 8012778:	627b      	str	r3, [r7, #36]	@ 0x24
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	00da      	lsls	r2, r3, #3
 8012780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012782:	18d3      	adds	r3, r2, r3
 8012784:	4a80      	ldr	r2, [pc, #512]	@ (8012988 <HAL_PCD_EP_DB_Transmit+0x380>)
 8012786:	4694      	mov	ip, r2
 8012788:	4463      	add	r3, ip
 801278a:	623b      	str	r3, [r7, #32]
 801278c:	6a3b      	ldr	r3, [r7, #32]
 801278e:	2200      	movs	r2, #0
 8012790:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	781a      	ldrb	r2, [r3, #0]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	0011      	movs	r1, r2
 801279a:	0018      	movs	r0, r3
 801279c:	f008 fbb8 	bl	801af10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80127a0:	1dbb      	adds	r3, r7, #6
 80127a2:	881a      	ldrh	r2, [r3, #0]
 80127a4:	2380      	movs	r3, #128	@ 0x80
 80127a6:	01db      	lsls	r3, r3, #7
 80127a8:	4013      	ands	r3, r2
 80127aa:	d100      	bne.n	80127ae <HAL_PCD_EP_DB_Transmit+0x1a6>
 80127ac:	e309      	b.n	8012dc2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	001a      	movs	r2, r3
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	18d3      	adds	r3, r2, r3
 80127bc:	881b      	ldrh	r3, [r3, #0]
 80127be:	b29a      	uxth	r2, r3
 80127c0:	2016      	movs	r0, #22
 80127c2:	183b      	adds	r3, r7, r0
 80127c4:	4971      	ldr	r1, [pc, #452]	@ (801298c <HAL_PCD_EP_DB_Transmit+0x384>)
 80127c6:	400a      	ands	r2, r1
 80127c8:	801a      	strh	r2, [r3, #0]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	001a      	movs	r2, r3
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	18d3      	adds	r3, r2, r3
 80127d8:	183a      	adds	r2, r7, r0
 80127da:	8812      	ldrh	r2, [r2, #0]
 80127dc:	496c      	ldr	r1, [pc, #432]	@ (8012990 <HAL_PCD_EP_DB_Transmit+0x388>)
 80127de:	430a      	orrs	r2, r1
 80127e0:	b292      	uxth	r2, r2
 80127e2:	801a      	strh	r2, [r3, #0]
 80127e4:	e2ed      	b.n	8012dc2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80127e6:	1dbb      	adds	r3, r7, #6
 80127e8:	881a      	ldrh	r2, [r3, #0]
 80127ea:	2380      	movs	r3, #128	@ 0x80
 80127ec:	01db      	lsls	r3, r3, #7
 80127ee:	4013      	ands	r3, r2
 80127f0:	d01a      	beq.n	8012828 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	001a      	movs	r2, r3
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	18d3      	adds	r3, r2, r3
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	b29a      	uxth	r2, r3
 8012804:	208a      	movs	r0, #138	@ 0x8a
 8012806:	183b      	adds	r3, r7, r0
 8012808:	4960      	ldr	r1, [pc, #384]	@ (801298c <HAL_PCD_EP_DB_Transmit+0x384>)
 801280a:	400a      	ands	r2, r1
 801280c:	801a      	strh	r2, [r3, #0]
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	001a      	movs	r2, r3
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	18d3      	adds	r3, r2, r3
 801281c:	183a      	adds	r2, r7, r0
 801281e:	8812      	ldrh	r2, [r2, #0]
 8012820:	495b      	ldr	r1, [pc, #364]	@ (8012990 <HAL_PCD_EP_DB_Transmit+0x388>)
 8012822:	430a      	orrs	r2, r1
 8012824:	b292      	uxth	r2, r2
 8012826:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	2224      	movs	r2, #36	@ 0x24
 801282c:	5c9b      	ldrb	r3, [r3, r2]
 801282e:	2b01      	cmp	r3, #1
 8012830:	d000      	beq.n	8012834 <HAL_PCD_EP_DB_Transmit+0x22c>
 8012832:	e2c6      	b.n	8012dc2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	695a      	ldr	r2, [r3, #20]
 8012838:	2186      	movs	r1, #134	@ 0x86
 801283a:	187b      	adds	r3, r7, r1
 801283c:	881b      	ldrh	r3, [r3, #0]
 801283e:	18d2      	adds	r2, r2, r3
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	69da      	ldr	r2, [r3, #28]
 8012848:	187b      	adds	r3, r7, r1
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	18d2      	adds	r2, r2, r3
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	6a1a      	ldr	r2, [r3, #32]
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	691b      	ldr	r3, [r3, #16]
 801285a:	429a      	cmp	r2, r3
 801285c:	d30c      	bcc.n	8012878 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	691b      	ldr	r3, [r3, #16]
 8012862:	218c      	movs	r1, #140	@ 0x8c
 8012864:	187a      	adds	r2, r7, r1
 8012866:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	6a1a      	ldr	r2, [r3, #32]
 801286c:	187b      	adds	r3, r7, r1
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	1ad2      	subs	r2, r2, r3
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	621a      	str	r2, [r3, #32]
 8012876:	e01a      	b.n	80128ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	6a1b      	ldr	r3, [r3, #32]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d10a      	bne.n	8012896 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8012880:	2386      	movs	r3, #134	@ 0x86
 8012882:	18fb      	adds	r3, r7, r3
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	228c      	movs	r2, #140	@ 0x8c
 8012888:	18ba      	adds	r2, r7, r2
 801288a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	2224      	movs	r2, #36	@ 0x24
 8012890:	2100      	movs	r1, #0
 8012892:	5499      	strb	r1, [r3, r2]
 8012894:	e00b      	b.n	80128ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	2224      	movs	r2, #36	@ 0x24
 801289a:	2100      	movs	r1, #0
 801289c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	6a1b      	ldr	r3, [r3, #32]
 80128a2:	228c      	movs	r2, #140	@ 0x8c
 80128a4:	18ba      	adds	r2, r7, r2
 80128a6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	2200      	movs	r2, #0
 80128ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	785b      	ldrb	r3, [r3, #1]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d000      	beq.n	80128b8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80128b6:	e06d      	b.n	8012994 <HAL_PCD_EP_DB_Transmit+0x38c>
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2250      	movs	r2, #80	@ 0x50
 80128c4:	5a9b      	ldrh	r3, [r3, r2]
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	001a      	movs	r2, r3
 80128ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128cc:	189b      	adds	r3, r3, r2
 80128ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	00da      	lsls	r2, r3, #3
 80128d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128d8:	18d3      	adds	r3, r2, r3
 80128da:	4a29      	ldr	r2, [pc, #164]	@ (8012980 <HAL_PCD_EP_DB_Transmit+0x378>)
 80128dc:	4694      	mov	ip, r2
 80128de:	4463      	add	r3, ip
 80128e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80128e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e4:	881b      	ldrh	r3, [r3, #0]
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	059b      	lsls	r3, r3, #22
 80128ea:	0d9b      	lsrs	r3, r3, #22
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128f0:	801a      	strh	r2, [r3, #0]
 80128f2:	228c      	movs	r2, #140	@ 0x8c
 80128f4:	18bb      	adds	r3, r7, r2
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80128fa:	d91a      	bls.n	8012932 <HAL_PCD_EP_DB_Transmit+0x32a>
 80128fc:	18bb      	adds	r3, r7, r2
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	095b      	lsrs	r3, r3, #5
 8012902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012904:	18bb      	adds	r3, r7, r2
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	221f      	movs	r2, #31
 801290a:	4013      	ands	r3, r2
 801290c:	d102      	bne.n	8012914 <HAL_PCD_EP_DB_Transmit+0x30c>
 801290e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012910:	3b01      	subs	r3, #1
 8012912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012916:	881b      	ldrh	r3, [r3, #0]
 8012918:	b29a      	uxth	r2, r3
 801291a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801291c:	b29b      	uxth	r3, r3
 801291e:	029b      	lsls	r3, r3, #10
 8012920:	b29b      	uxth	r3, r3
 8012922:	4313      	orrs	r3, r2
 8012924:	b29b      	uxth	r3, r3
 8012926:	4a17      	ldr	r2, [pc, #92]	@ (8012984 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8012928:	4313      	orrs	r3, r2
 801292a:	b29a      	uxth	r2, r3
 801292c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801292e:	801a      	strh	r2, [r3, #0]
 8012930:	e04f      	b.n	80129d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8012932:	238c      	movs	r3, #140	@ 0x8c
 8012934:	18fb      	adds	r3, r7, r3
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d108      	bne.n	801294e <HAL_PCD_EP_DB_Transmit+0x346>
 801293c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801293e:	881b      	ldrh	r3, [r3, #0]
 8012940:	b29b      	uxth	r3, r3
 8012942:	4a10      	ldr	r2, [pc, #64]	@ (8012984 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8012944:	4313      	orrs	r3, r2
 8012946:	b29a      	uxth	r2, r3
 8012948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801294a:	801a      	strh	r2, [r3, #0]
 801294c:	e041      	b.n	80129d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801294e:	228c      	movs	r2, #140	@ 0x8c
 8012950:	18bb      	adds	r3, r7, r2
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	085b      	lsrs	r3, r3, #1
 8012956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012958:	18bb      	adds	r3, r7, r2
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2201      	movs	r2, #1
 801295e:	4013      	ands	r3, r2
 8012960:	d002      	beq.n	8012968 <HAL_PCD_EP_DB_Transmit+0x360>
 8012962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012964:	3301      	adds	r3, #1
 8012966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801296a:	881b      	ldrh	r3, [r3, #0]
 801296c:	b29a      	uxth	r2, r3
 801296e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012970:	b29b      	uxth	r3, r3
 8012972:	029b      	lsls	r3, r3, #10
 8012974:	b29b      	uxth	r3, r3
 8012976:	4313      	orrs	r3, r2
 8012978:	b29a      	uxth	r2, r3
 801297a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297c:	801a      	strh	r2, [r3, #0]
 801297e:	e028      	b.n	80129d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8012980:	00000402 	.word	0x00000402
 8012984:	ffff8000 	.word	0xffff8000
 8012988:	00000406 	.word	0x00000406
 801298c:	ffff8f8f 	.word	0xffff8f8f
 8012990:	ffffc080 	.word	0xffffc080
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	785b      	ldrb	r3, [r3, #1]
 8012998:	2b01      	cmp	r3, #1
 801299a:	d11a      	bne.n	80129d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2250      	movs	r2, #80	@ 0x50
 80129a8:	5a9b      	ldrh	r3, [r3, r2]
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	001a      	movs	r2, r3
 80129ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80129b0:	189b      	adds	r3, r3, r2
 80129b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	00da      	lsls	r2, r3, #3
 80129ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80129bc:	18d3      	adds	r3, r2, r3
 80129be:	4adb      	ldr	r2, [pc, #876]	@ (8012d2c <HAL_PCD_EP_DB_Transmit+0x724>)
 80129c0:	4694      	mov	ip, r2
 80129c2:	4463      	add	r3, ip
 80129c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80129c6:	238c      	movs	r3, #140	@ 0x8c
 80129c8:	18fb      	adds	r3, r7, r3
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80129d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	6818      	ldr	r0, [r3, #0]
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	6959      	ldr	r1, [r3, #20]
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	891a      	ldrh	r2, [r3, #8]
 80129de:	238c      	movs	r3, #140	@ 0x8c
 80129e0:	18fb      	adds	r3, r7, r3
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	b29b      	uxth	r3, r3
 80129e6:	f006 fa0f 	bl	8018e08 <USB_WritePMA>
 80129ea:	e1ea      	b.n	8012dc2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2250      	movs	r2, #80	@ 0x50
 80129f2:	5a9b      	ldrh	r3, [r3, r2]
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	001a      	movs	r2, r3
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	00db      	lsls	r3, r3, #3
 80129fe:	18d2      	adds	r2, r2, r3
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	18d3      	adds	r3, r2, r3
 8012a06:	4aca      	ldr	r2, [pc, #808]	@ (8012d30 <HAL_PCD_EP_DB_Transmit+0x728>)
 8012a08:	4694      	mov	ip, r2
 8012a0a:	4463      	add	r3, ip
 8012a0c:	881a      	ldrh	r2, [r3, #0]
 8012a0e:	2186      	movs	r1, #134	@ 0x86
 8012a10:	187b      	adds	r3, r7, r1
 8012a12:	0592      	lsls	r2, r2, #22
 8012a14:	0d92      	lsrs	r2, r2, #22
 8012a16:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	699a      	ldr	r2, [r3, #24]
 8012a1c:	187b      	adds	r3, r7, r1
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d307      	bcc.n	8012a34 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	699a      	ldr	r2, [r3, #24]
 8012a28:	187b      	adds	r3, r7, r1
 8012a2a:	881b      	ldrh	r3, [r3, #0]
 8012a2c:	1ad2      	subs	r2, r2, r3
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	619a      	str	r2, [r3, #24]
 8012a32:	e002      	b.n	8012a3a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	2200      	movs	r2, #0
 8012a38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	699b      	ldr	r3, [r3, #24]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d000      	beq.n	8012a44 <HAL_PCD_EP_DB_Transmit+0x43c>
 8012a42:	e0bb      	b.n	8012bbc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	785b      	ldrb	r3, [r3, #1]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d125      	bne.n	8012a98 <HAL_PCD_EP_DB_Transmit+0x490>
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2250      	movs	r2, #80	@ 0x50
 8012a58:	5a9b      	ldrh	r3, [r3, r2]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	001a      	movs	r2, r3
 8012a5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012a60:	189b      	adds	r3, r3, r2
 8012a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	00da      	lsls	r2, r3, #3
 8012a6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012a6c:	18d3      	adds	r3, r2, r3
 8012a6e:	4aaf      	ldr	r2, [pc, #700]	@ (8012d2c <HAL_PCD_EP_DB_Transmit+0x724>)
 8012a70:	4694      	mov	ip, r2
 8012a72:	4463      	add	r3, ip
 8012a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	059b      	lsls	r3, r3, #22
 8012a7e:	0d9b      	lsrs	r3, r3, #22
 8012a80:	b29a      	uxth	r2, r3
 8012a82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a84:	801a      	strh	r2, [r3, #0]
 8012a86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	4aa9      	ldr	r2, [pc, #676]	@ (8012d34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a94:	801a      	strh	r2, [r3, #0]
 8012a96:	e01b      	b.n	8012ad0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	785b      	ldrb	r3, [r3, #1]
 8012a9c:	2b01      	cmp	r3, #1
 8012a9e:	d117      	bne.n	8012ad0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2250      	movs	r2, #80	@ 0x50
 8012aac:	5a9b      	ldrh	r3, [r3, r2]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	001a      	movs	r2, r3
 8012ab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ab4:	189b      	adds	r3, r3, r2
 8012ab6:	667b      	str	r3, [r7, #100]	@ 0x64
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	00da      	lsls	r2, r3, #3
 8012abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ac0:	18d3      	adds	r3, r2, r3
 8012ac2:	4a9a      	ldr	r2, [pc, #616]	@ (8012d2c <HAL_PCD_EP_DB_Transmit+0x724>)
 8012ac4:	4694      	mov	ip, r2
 8012ac6:	4463      	add	r3, ip
 8012ac8:	663b      	str	r3, [r7, #96]	@ 0x60
 8012aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012acc:	2200      	movs	r2, #0
 8012ace:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	677b      	str	r3, [r7, #116]	@ 0x74
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	785b      	ldrb	r3, [r3, #1]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d12b      	bne.n	8012b36 <HAL_PCD_EP_DB_Transmit+0x52e>
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2250      	movs	r2, #80	@ 0x50
 8012aea:	5a9b      	ldrh	r3, [r3, r2]
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	001a      	movs	r2, r3
 8012af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012af2:	189b      	adds	r3, r3, r2
 8012af4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	00da      	lsls	r2, r3, #3
 8012afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012afe:	18d3      	adds	r3, r2, r3
 8012b00:	4a8b      	ldr	r2, [pc, #556]	@ (8012d30 <HAL_PCD_EP_DB_Transmit+0x728>)
 8012b02:	4694      	mov	ip, r2
 8012b04:	4463      	add	r3, ip
 8012b06:	2180      	movs	r1, #128	@ 0x80
 8012b08:	187a      	adds	r2, r7, r1
 8012b0a:	6013      	str	r3, [r2, #0]
 8012b0c:	187b      	adds	r3, r7, r1
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	059b      	lsls	r3, r3, #22
 8012b16:	0d9b      	lsrs	r3, r3, #22
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	187b      	adds	r3, r7, r1
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	801a      	strh	r2, [r3, #0]
 8012b20:	187b      	adds	r3, r7, r1
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	4a82      	ldr	r2, [pc, #520]	@ (8012d34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	187b      	adds	r3, r7, r1
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	801a      	strh	r2, [r3, #0]
 8012b34:	e018      	b.n	8012b68 <HAL_PCD_EP_DB_Transmit+0x560>
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	785b      	ldrb	r3, [r3, #1]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d114      	bne.n	8012b68 <HAL_PCD_EP_DB_Transmit+0x560>
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2250      	movs	r2, #80	@ 0x50
 8012b44:	5a9b      	ldrh	r3, [r3, r2]
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	001a      	movs	r2, r3
 8012b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b4c:	189b      	adds	r3, r3, r2
 8012b4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	00da      	lsls	r2, r3, #3
 8012b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b58:	18d3      	adds	r3, r2, r3
 8012b5a:	4a75      	ldr	r2, [pc, #468]	@ (8012d30 <HAL_PCD_EP_DB_Transmit+0x728>)
 8012b5c:	4694      	mov	ip, r2
 8012b5e:	4463      	add	r3, ip
 8012b60:	673b      	str	r3, [r7, #112]	@ 0x70
 8012b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b64:	2200      	movs	r2, #0
 8012b66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	781a      	ldrb	r2, [r3, #0]
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	0011      	movs	r1, r2
 8012b70:	0018      	movs	r0, r3
 8012b72:	f008 f9cd 	bl	801af10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8012b76:	1dbb      	adds	r3, r7, #6
 8012b78:	881a      	ldrh	r2, [r3, #0]
 8012b7a:	2380      	movs	r3, #128	@ 0x80
 8012b7c:	01db      	lsls	r3, r3, #7
 8012b7e:	4013      	ands	r3, r2
 8012b80:	d000      	beq.n	8012b84 <HAL_PCD_EP_DB_Transmit+0x57c>
 8012b82:	e11e      	b.n	8012dc2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	001a      	movs	r2, r3
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	18d3      	adds	r3, r2, r3
 8012b92:	881b      	ldrh	r3, [r3, #0]
 8012b94:	b29a      	uxth	r2, r3
 8012b96:	2088      	movs	r0, #136	@ 0x88
 8012b98:	183b      	adds	r3, r7, r0
 8012b9a:	4967      	ldr	r1, [pc, #412]	@ (8012d38 <HAL_PCD_EP_DB_Transmit+0x730>)
 8012b9c:	400a      	ands	r2, r1
 8012b9e:	801a      	strh	r2, [r3, #0]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	001a      	movs	r2, r3
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	18d3      	adds	r3, r2, r3
 8012bae:	183a      	adds	r2, r7, r0
 8012bb0:	8812      	ldrh	r2, [r2, #0]
 8012bb2:	4962      	ldr	r1, [pc, #392]	@ (8012d3c <HAL_PCD_EP_DB_Transmit+0x734>)
 8012bb4:	430a      	orrs	r2, r1
 8012bb6:	b292      	uxth	r2, r2
 8012bb8:	801a      	strh	r2, [r3, #0]
 8012bba:	e102      	b.n	8012dc2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8012bbc:	1dbb      	adds	r3, r7, #6
 8012bbe:	881a      	ldrh	r2, [r3, #0]
 8012bc0:	2380      	movs	r3, #128	@ 0x80
 8012bc2:	01db      	lsls	r3, r3, #7
 8012bc4:	4013      	ands	r3, r2
 8012bc6:	d11a      	bne.n	8012bfe <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	001a      	movs	r2, r3
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	18d3      	adds	r3, r2, r3
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	204e      	movs	r0, #78	@ 0x4e
 8012bdc:	183b      	adds	r3, r7, r0
 8012bde:	4956      	ldr	r1, [pc, #344]	@ (8012d38 <HAL_PCD_EP_DB_Transmit+0x730>)
 8012be0:	400a      	ands	r2, r1
 8012be2:	801a      	strh	r2, [r3, #0]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	001a      	movs	r2, r3
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	18d3      	adds	r3, r2, r3
 8012bf2:	183a      	adds	r2, r7, r0
 8012bf4:	8812      	ldrh	r2, [r2, #0]
 8012bf6:	4951      	ldr	r1, [pc, #324]	@ (8012d3c <HAL_PCD_EP_DB_Transmit+0x734>)
 8012bf8:	430a      	orrs	r2, r1
 8012bfa:	b292      	uxth	r2, r2
 8012bfc:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	2224      	movs	r2, #36	@ 0x24
 8012c02:	5c9b      	ldrb	r3, [r3, r2]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d000      	beq.n	8012c0a <HAL_PCD_EP_DB_Transmit+0x602>
 8012c08:	e0db      	b.n	8012dc2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	695a      	ldr	r2, [r3, #20]
 8012c0e:	2186      	movs	r1, #134	@ 0x86
 8012c10:	187b      	adds	r3, r7, r1
 8012c12:	881b      	ldrh	r3, [r3, #0]
 8012c14:	18d2      	adds	r2, r2, r3
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	69da      	ldr	r2, [r3, #28]
 8012c1e:	187b      	adds	r3, r7, r1
 8012c20:	881b      	ldrh	r3, [r3, #0]
 8012c22:	18d2      	adds	r2, r2, r3
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	6a1a      	ldr	r2, [r3, #32]
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	691b      	ldr	r3, [r3, #16]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d30c      	bcc.n	8012c4e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	691b      	ldr	r3, [r3, #16]
 8012c38:	218c      	movs	r1, #140	@ 0x8c
 8012c3a:	187a      	adds	r2, r7, r1
 8012c3c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	6a1a      	ldr	r2, [r3, #32]
 8012c42:	187b      	adds	r3, r7, r1
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	1ad2      	subs	r2, r2, r3
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	621a      	str	r2, [r3, #32]
 8012c4c:	e01a      	b.n	8012c84 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	6a1b      	ldr	r3, [r3, #32]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10a      	bne.n	8012c6c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8012c56:	2386      	movs	r3, #134	@ 0x86
 8012c58:	18fb      	adds	r3, r7, r3
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	228c      	movs	r2, #140	@ 0x8c
 8012c5e:	18ba      	adds	r2, r7, r2
 8012c60:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	2224      	movs	r2, #36	@ 0x24
 8012c66:	2100      	movs	r1, #0
 8012c68:	5499      	strb	r1, [r3, r2]
 8012c6a:	e00b      	b.n	8012c84 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	6a1b      	ldr	r3, [r3, #32]
 8012c70:	228c      	movs	r2, #140	@ 0x8c
 8012c72:	18ba      	adds	r2, r7, r2
 8012c74:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	2224      	movs	r2, #36	@ 0x24
 8012c80:	2100      	movs	r1, #0
 8012c82:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	657b      	str	r3, [r7, #84]	@ 0x54
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	785b      	ldrb	r3, [r3, #1]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d000      	beq.n	8012c94 <HAL_PCD_EP_DB_Transmit+0x68c>
 8012c92:	e06e      	b.n	8012d72 <HAL_PCD_EP_DB_Transmit+0x76a>
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2250      	movs	r2, #80	@ 0x50
 8012ca0:	5a9b      	ldrh	r3, [r3, r2]
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	001a      	movs	r2, r3
 8012ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ca8:	189b      	adds	r3, r3, r2
 8012caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	00da      	lsls	r2, r3, #3
 8012cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cb4:	18d3      	adds	r3, r2, r3
 8012cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8012d30 <HAL_PCD_EP_DB_Transmit+0x728>)
 8012cb8:	4694      	mov	ip, r2
 8012cba:	4463      	add	r3, ip
 8012cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	059b      	lsls	r3, r3, #22
 8012cc6:	0d9b      	lsrs	r3, r3, #22
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ccc:	801a      	strh	r2, [r3, #0]
 8012cce:	228c      	movs	r2, #140	@ 0x8c
 8012cd0:	18bb      	adds	r3, r7, r2
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8012cd6:	d91a      	bls.n	8012d0e <HAL_PCD_EP_DB_Transmit+0x706>
 8012cd8:	18bb      	adds	r3, r7, r2
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	095b      	lsrs	r3, r3, #5
 8012cde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ce0:	18bb      	adds	r3, r7, r2
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	221f      	movs	r2, #31
 8012ce6:	4013      	ands	r3, r2
 8012ce8:	d102      	bne.n	8012cf0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8012cea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012cec:	3b01      	subs	r3, #1
 8012cee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012cf2:	881b      	ldrh	r3, [r3, #0]
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	029b      	lsls	r3, r3, #10
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	4313      	orrs	r3, r2
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	4a0c      	ldr	r2, [pc, #48]	@ (8012d34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8012d04:	4313      	orrs	r3, r2
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d0a:	801a      	strh	r2, [r3, #0]
 8012d0c:	e04d      	b.n	8012daa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8012d0e:	238c      	movs	r3, #140	@ 0x8c
 8012d10:	18fb      	adds	r3, r7, r3
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d113      	bne.n	8012d40 <HAL_PCD_EP_DB_Transmit+0x738>
 8012d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d1a:	881b      	ldrh	r3, [r3, #0]
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	4a05      	ldr	r2, [pc, #20]	@ (8012d34 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8012d20:	4313      	orrs	r3, r2
 8012d22:	b29a      	uxth	r2, r3
 8012d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d26:	801a      	strh	r2, [r3, #0]
 8012d28:	e03f      	b.n	8012daa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8012d2a:	46c0      	nop			@ (mov r8, r8)
 8012d2c:	00000402 	.word	0x00000402
 8012d30:	00000406 	.word	0x00000406
 8012d34:	ffff8000 	.word	0xffff8000
 8012d38:	ffff8f8f 	.word	0xffff8f8f
 8012d3c:	ffffc080 	.word	0xffffc080
 8012d40:	228c      	movs	r2, #140	@ 0x8c
 8012d42:	18bb      	adds	r3, r7, r2
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	085b      	lsrs	r3, r3, #1
 8012d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012d4a:	18bb      	adds	r3, r7, r2
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	4013      	ands	r3, r2
 8012d52:	d002      	beq.n	8012d5a <HAL_PCD_EP_DB_Transmit+0x752>
 8012d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012d56:	3301      	adds	r3, #1
 8012d58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	b29a      	uxth	r2, r3
 8012d60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	029b      	lsls	r3, r3, #10
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	4313      	orrs	r3, r2
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d6e:	801a      	strh	r2, [r3, #0]
 8012d70:	e01b      	b.n	8012daa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	785b      	ldrb	r3, [r3, #1]
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	d117      	bne.n	8012daa <HAL_PCD_EP_DB_Transmit+0x7a2>
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	2250      	movs	r2, #80	@ 0x50
 8012d80:	5a9b      	ldrh	r3, [r3, r2]
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	001a      	movs	r2, r3
 8012d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d88:	189b      	adds	r3, r3, r2
 8012d8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	00da      	lsls	r2, r3, #3
 8012d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d94:	18d3      	adds	r3, r2, r3
 8012d96:	4a21      	ldr	r2, [pc, #132]	@ (8012e1c <HAL_PCD_EP_DB_Transmit+0x814>)
 8012d98:	4694      	mov	ip, r2
 8012d9a:	4463      	add	r3, ip
 8012d9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8012d9e:	238c      	movs	r3, #140	@ 0x8c
 8012da0:	18fb      	adds	r3, r7, r3
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012da8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	6818      	ldr	r0, [r3, #0]
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	6959      	ldr	r1, [r3, #20]
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	895a      	ldrh	r2, [r3, #10]
 8012db6:	238c      	movs	r3, #140	@ 0x8c
 8012db8:	18fb      	adds	r3, r7, r3
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	b29b      	uxth	r3, r3
 8012dbe:	f006 f823 	bl	8018e08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	001a      	movs	r2, r3
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	18d3      	adds	r3, r2, r3
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	2014      	movs	r0, #20
 8012dd6:	183b      	adds	r3, r7, r0
 8012dd8:	4911      	ldr	r1, [pc, #68]	@ (8012e20 <HAL_PCD_EP_DB_Transmit+0x818>)
 8012dda:	400a      	ands	r2, r1
 8012ddc:	801a      	strh	r2, [r3, #0]
 8012dde:	183b      	adds	r3, r7, r0
 8012de0:	183a      	adds	r2, r7, r0
 8012de2:	8812      	ldrh	r2, [r2, #0]
 8012de4:	2110      	movs	r1, #16
 8012de6:	404a      	eors	r2, r1
 8012de8:	801a      	strh	r2, [r3, #0]
 8012dea:	183b      	adds	r3, r7, r0
 8012dec:	183a      	adds	r2, r7, r0
 8012dee:	8812      	ldrh	r2, [r2, #0]
 8012df0:	2120      	movs	r1, #32
 8012df2:	404a      	eors	r2, r1
 8012df4:	801a      	strh	r2, [r3, #0]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	001a      	movs	r2, r3
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	18d3      	adds	r3, r2, r3
 8012e04:	183a      	adds	r2, r7, r0
 8012e06:	8812      	ldrh	r2, [r2, #0]
 8012e08:	4906      	ldr	r1, [pc, #24]	@ (8012e24 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8012e0a:	430a      	orrs	r2, r1
 8012e0c:	b292      	uxth	r2, r2
 8012e0e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	0018      	movs	r0, r3
 8012e14:	46bd      	mov	sp, r7
 8012e16:	b024      	add	sp, #144	@ 0x90
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	46c0      	nop			@ (mov r8, r8)
 8012e1c:	00000406 	.word	0x00000406
 8012e20:	ffff8fbf 	.word	0xffff8fbf
 8012e24:	ffff8080 	.word	0xffff8080

08012e28 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8012e28:	b590      	push	{r4, r7, lr}
 8012e2a:	b087      	sub	sp, #28
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	0008      	movs	r0, r1
 8012e32:	0011      	movs	r1, r2
 8012e34:	607b      	str	r3, [r7, #4]
 8012e36:	240a      	movs	r4, #10
 8012e38:	193b      	adds	r3, r7, r4
 8012e3a:	1c02      	adds	r2, r0, #0
 8012e3c:	801a      	strh	r2, [r3, #0]
 8012e3e:	2308      	movs	r3, #8
 8012e40:	18fb      	adds	r3, r7, r3
 8012e42:	1c0a      	adds	r2, r1, #0
 8012e44:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8012e46:	0021      	movs	r1, r4
 8012e48:	187b      	adds	r3, r7, r1
 8012e4a:	881b      	ldrh	r3, [r3, #0]
 8012e4c:	2280      	movs	r2, #128	@ 0x80
 8012e4e:	4013      	ands	r3, r2
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d00c      	beq.n	8012e70 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012e56:	187b      	adds	r3, r7, r1
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	2207      	movs	r2, #7
 8012e5c:	4013      	ands	r3, r2
 8012e5e:	1c5a      	adds	r2, r3, #1
 8012e60:	0013      	movs	r3, r2
 8012e62:	009b      	lsls	r3, r3, #2
 8012e64:	189b      	adds	r3, r3, r2
 8012e66:	00db      	lsls	r3, r3, #3
 8012e68:	68fa      	ldr	r2, [r7, #12]
 8012e6a:	18d3      	adds	r3, r2, r3
 8012e6c:	617b      	str	r3, [r7, #20]
 8012e6e:	e00b      	b.n	8012e88 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012e70:	230a      	movs	r3, #10
 8012e72:	18fb      	adds	r3, r7, r3
 8012e74:	881a      	ldrh	r2, [r3, #0]
 8012e76:	0013      	movs	r3, r2
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	189b      	adds	r3, r3, r2
 8012e7c:	00db      	lsls	r3, r3, #3
 8012e7e:	3369      	adds	r3, #105	@ 0x69
 8012e80:	33ff      	adds	r3, #255	@ 0xff
 8012e82:	68fa      	ldr	r2, [r7, #12]
 8012e84:	18d3      	adds	r3, r2, r3
 8012e86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8012e88:	2308      	movs	r3, #8
 8012e8a:	18fb      	adds	r3, r7, r3
 8012e8c:	881b      	ldrh	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d107      	bne.n	8012ea2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	2200      	movs	r2, #0
 8012e96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	80da      	strh	r2, [r3, #6]
 8012ea0:	e00b      	b.n	8012eba <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	b29a      	uxth	r2, r3
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	0c1b      	lsrs	r3, r3, #16
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012eba:	2300      	movs	r3, #0
}
 8012ebc:	0018      	movs	r0, r3
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	b007      	add	sp, #28
 8012ec2:	bd90      	pop	{r4, r7, pc}

08012ec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	23ba      	movs	r3, #186	@ 0xba
 8012ed6:	009b      	lsls	r3, r3, #2
 8012ed8:	2101      	movs	r1, #1
 8012eda:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	23b8      	movs	r3, #184	@ 0xb8
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2254      	movs	r2, #84	@ 0x54
 8012eea:	5a9b      	ldrh	r3, [r3, r2]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	2201      	movs	r2, #1
 8012ef0:	4313      	orrs	r3, r2
 8012ef2:	b299      	uxth	r1, r3
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2254      	movs	r2, #84	@ 0x54
 8012ef8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2254      	movs	r2, #84	@ 0x54
 8012efe:	5a9b      	ldrh	r3, [r3, r2]
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	2202      	movs	r2, #2
 8012f04:	4313      	orrs	r3, r2
 8012f06:	b299      	uxth	r1, r3
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	2254      	movs	r2, #84	@ 0x54
 8012f0c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012f0e:	2300      	movs	r3, #0
}
 8012f10:	0018      	movs	r0, r3
 8012f12:	46bd      	mov	sp, r7
 8012f14:	b004      	add	sp, #16
 8012f16:	bd80      	pop	{r7, pc}

08012f18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	000a      	movs	r2, r1
 8012f22:	1cfb      	adds	r3, r7, #3
 8012f24:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8012f26:	46c0      	nop			@ (mov r8, r8)
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	b002      	add	sp, #8
 8012f2c:	bd80      	pop	{r7, pc}
	...

08012f30 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8012f34:	4b04      	ldr	r3, [pc, #16]	@ (8012f48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	4b03      	ldr	r3, [pc, #12]	@ (8012f48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8012f3a:	2180      	movs	r1, #128	@ 0x80
 8012f3c:	0049      	lsls	r1, r1, #1
 8012f3e:	430a      	orrs	r2, r1
 8012f40:	601a      	str	r2, [r3, #0]
}
 8012f42:	46c0      	nop			@ (mov r8, r8)
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	40007000 	.word	0x40007000

08012f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012f4c:	b5b0      	push	{r4, r5, r7, lr}
 8012f4e:	b08a      	sub	sp, #40	@ 0x28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d102      	bne.n	8012f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	f000 fbbf 	bl	80136de <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012f60:	4bc9      	ldr	r3, [pc, #804]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	220c      	movs	r2, #12
 8012f66:	4013      	ands	r3, r2
 8012f68:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012f6a:	4bc7      	ldr	r3, [pc, #796]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012f6c:	68da      	ldr	r2, [r3, #12]
 8012f6e:	2380      	movs	r3, #128	@ 0x80
 8012f70:	025b      	lsls	r3, r3, #9
 8012f72:	4013      	ands	r3, r2
 8012f74:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	4013      	ands	r3, r2
 8012f7e:	d100      	bne.n	8012f82 <HAL_RCC_OscConfig+0x36>
 8012f80:	e07e      	b.n	8013080 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	2b08      	cmp	r3, #8
 8012f86:	d007      	beq.n	8012f98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	2b0c      	cmp	r3, #12
 8012f8c:	d112      	bne.n	8012fb4 <HAL_RCC_OscConfig+0x68>
 8012f8e:	69ba      	ldr	r2, [r7, #24]
 8012f90:	2380      	movs	r3, #128	@ 0x80
 8012f92:	025b      	lsls	r3, r3, #9
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d10d      	bne.n	8012fb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012f98:	4bbb      	ldr	r3, [pc, #748]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	2380      	movs	r3, #128	@ 0x80
 8012f9e:	029b      	lsls	r3, r3, #10
 8012fa0:	4013      	ands	r3, r2
 8012fa2:	d100      	bne.n	8012fa6 <HAL_RCC_OscConfig+0x5a>
 8012fa4:	e06b      	b.n	801307e <HAL_RCC_OscConfig+0x132>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d167      	bne.n	801307e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8012fae:	2301      	movs	r3, #1
 8012fb0:	f000 fb95 	bl	80136de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685a      	ldr	r2, [r3, #4]
 8012fb8:	2380      	movs	r3, #128	@ 0x80
 8012fba:	025b      	lsls	r3, r3, #9
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d107      	bne.n	8012fd0 <HAL_RCC_OscConfig+0x84>
 8012fc0:	4bb1      	ldr	r3, [pc, #708]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	4bb0      	ldr	r3, [pc, #704]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012fc6:	2180      	movs	r1, #128	@ 0x80
 8012fc8:	0249      	lsls	r1, r1, #9
 8012fca:	430a      	orrs	r2, r1
 8012fcc:	601a      	str	r2, [r3, #0]
 8012fce:	e027      	b.n	8013020 <HAL_RCC_OscConfig+0xd4>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	685a      	ldr	r2, [r3, #4]
 8012fd4:	23a0      	movs	r3, #160	@ 0xa0
 8012fd6:	02db      	lsls	r3, r3, #11
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d10e      	bne.n	8012ffa <HAL_RCC_OscConfig+0xae>
 8012fdc:	4baa      	ldr	r3, [pc, #680]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	4ba9      	ldr	r3, [pc, #676]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012fe2:	2180      	movs	r1, #128	@ 0x80
 8012fe4:	02c9      	lsls	r1, r1, #11
 8012fe6:	430a      	orrs	r2, r1
 8012fe8:	601a      	str	r2, [r3, #0]
 8012fea:	4ba7      	ldr	r3, [pc, #668]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	4ba6      	ldr	r3, [pc, #664]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012ff0:	2180      	movs	r1, #128	@ 0x80
 8012ff2:	0249      	lsls	r1, r1, #9
 8012ff4:	430a      	orrs	r2, r1
 8012ff6:	601a      	str	r2, [r3, #0]
 8012ff8:	e012      	b.n	8013020 <HAL_RCC_OscConfig+0xd4>
 8012ffa:	4ba3      	ldr	r3, [pc, #652]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	4ba2      	ldr	r3, [pc, #648]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013000:	49a2      	ldr	r1, [pc, #648]	@ (801328c <HAL_RCC_OscConfig+0x340>)
 8013002:	400a      	ands	r2, r1
 8013004:	601a      	str	r2, [r3, #0]
 8013006:	4ba0      	ldr	r3, [pc, #640]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	2380      	movs	r3, #128	@ 0x80
 801300c:	025b      	lsls	r3, r3, #9
 801300e:	4013      	ands	r3, r2
 8013010:	60fb      	str	r3, [r7, #12]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	4b9c      	ldr	r3, [pc, #624]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013016:	681a      	ldr	r2, [r3, #0]
 8013018:	4b9b      	ldr	r3, [pc, #620]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 801301a:	499d      	ldr	r1, [pc, #628]	@ (8013290 <HAL_RCC_OscConfig+0x344>)
 801301c:	400a      	ands	r2, r1
 801301e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d015      	beq.n	8013054 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013028:	f7f9 ff30 	bl	800ce8c <HAL_GetTick>
 801302c:	0003      	movs	r3, r0
 801302e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013030:	e009      	b.n	8013046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013032:	f7f9 ff2b 	bl	800ce8c <HAL_GetTick>
 8013036:	0002      	movs	r2, r0
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	1ad3      	subs	r3, r2, r3
 801303c:	2b64      	cmp	r3, #100	@ 0x64
 801303e:	d902      	bls.n	8013046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013040:	2303      	movs	r3, #3
 8013042:	f000 fb4c 	bl	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013046:	4b90      	ldr	r3, [pc, #576]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	2380      	movs	r3, #128	@ 0x80
 801304c:	029b      	lsls	r3, r3, #10
 801304e:	4013      	ands	r3, r2
 8013050:	d0ef      	beq.n	8013032 <HAL_RCC_OscConfig+0xe6>
 8013052:	e015      	b.n	8013080 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013054:	f7f9 ff1a 	bl	800ce8c <HAL_GetTick>
 8013058:	0003      	movs	r3, r0
 801305a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801305c:	e008      	b.n	8013070 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801305e:	f7f9 ff15 	bl	800ce8c <HAL_GetTick>
 8013062:	0002      	movs	r2, r0
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	1ad3      	subs	r3, r2, r3
 8013068:	2b64      	cmp	r3, #100	@ 0x64
 801306a:	d901      	bls.n	8013070 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801306c:	2303      	movs	r3, #3
 801306e:	e336      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013070:	4b85      	ldr	r3, [pc, #532]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	2380      	movs	r3, #128	@ 0x80
 8013076:	029b      	lsls	r3, r3, #10
 8013078:	4013      	ands	r3, r2
 801307a:	d1f0      	bne.n	801305e <HAL_RCC_OscConfig+0x112>
 801307c:	e000      	b.n	8013080 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801307e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2202      	movs	r2, #2
 8013086:	4013      	ands	r3, r2
 8013088:	d100      	bne.n	801308c <HAL_RCC_OscConfig+0x140>
 801308a:	e099      	b.n	80131c0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8013092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013094:	2220      	movs	r2, #32
 8013096:	4013      	ands	r3, r2
 8013098:	d009      	beq.n	80130ae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801309a:	4b7b      	ldr	r3, [pc, #492]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	4b7a      	ldr	r3, [pc, #488]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80130a0:	2120      	movs	r1, #32
 80130a2:	430a      	orrs	r2, r1
 80130a4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80130a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a8:	2220      	movs	r2, #32
 80130aa:	4393      	bics	r3, r2
 80130ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	2b04      	cmp	r3, #4
 80130b2:	d005      	beq.n	80130c0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	2b0c      	cmp	r3, #12
 80130b8:	d13e      	bne.n	8013138 <HAL_RCC_OscConfig+0x1ec>
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d13b      	bne.n	8013138 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80130c0:	4b71      	ldr	r3, [pc, #452]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2204      	movs	r2, #4
 80130c6:	4013      	ands	r3, r2
 80130c8:	d004      	beq.n	80130d4 <HAL_RCC_OscConfig+0x188>
 80130ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d101      	bne.n	80130d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80130d0:	2301      	movs	r3, #1
 80130d2:	e304      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80130d4:	4b6c      	ldr	r3, [pc, #432]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	4a6e      	ldr	r2, [pc, #440]	@ (8013294 <HAL_RCC_OscConfig+0x348>)
 80130da:	4013      	ands	r3, r2
 80130dc:	0019      	movs	r1, r3
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	021a      	lsls	r2, r3, #8
 80130e4:	4b68      	ldr	r3, [pc, #416]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80130e6:	430a      	orrs	r2, r1
 80130e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80130ea:	4b67      	ldr	r3, [pc, #412]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2209      	movs	r2, #9
 80130f0:	4393      	bics	r3, r2
 80130f2:	0019      	movs	r1, r3
 80130f4:	4b64      	ldr	r3, [pc, #400]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80130f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130f8:	430a      	orrs	r2, r1
 80130fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80130fc:	f000 fc42 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 8013100:	0001      	movs	r1, r0
 8013102:	4b61      	ldr	r3, [pc, #388]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	091b      	lsrs	r3, r3, #4
 8013108:	220f      	movs	r2, #15
 801310a:	4013      	ands	r3, r2
 801310c:	4a62      	ldr	r2, [pc, #392]	@ (8013298 <HAL_RCC_OscConfig+0x34c>)
 801310e:	5cd3      	ldrb	r3, [r2, r3]
 8013110:	000a      	movs	r2, r1
 8013112:	40da      	lsrs	r2, r3
 8013114:	4b61      	ldr	r3, [pc, #388]	@ (801329c <HAL_RCC_OscConfig+0x350>)
 8013116:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8013118:	4b61      	ldr	r3, [pc, #388]	@ (80132a0 <HAL_RCC_OscConfig+0x354>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2513      	movs	r5, #19
 801311e:	197c      	adds	r4, r7, r5
 8013120:	0018      	movs	r0, r3
 8013122:	f7f9 fe6d 	bl	800ce00 <HAL_InitTick>
 8013126:	0003      	movs	r3, r0
 8013128:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801312a:	197b      	adds	r3, r7, r5
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d046      	beq.n	80131c0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8013132:	197b      	adds	r3, r7, r5
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	e2d2      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8013138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801313a:	2b00      	cmp	r3, #0
 801313c:	d027      	beq.n	801318e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801313e:	4b52      	ldr	r3, [pc, #328]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2209      	movs	r2, #9
 8013144:	4393      	bics	r3, r2
 8013146:	0019      	movs	r1, r3
 8013148:	4b4f      	ldr	r3, [pc, #316]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 801314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801314c:	430a      	orrs	r2, r1
 801314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013150:	f7f9 fe9c 	bl	800ce8c <HAL_GetTick>
 8013154:	0003      	movs	r3, r0
 8013156:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013158:	e008      	b.n	801316c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801315a:	f7f9 fe97 	bl	800ce8c <HAL_GetTick>
 801315e:	0002      	movs	r2, r0
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	1ad3      	subs	r3, r2, r3
 8013164:	2b02      	cmp	r3, #2
 8013166:	d901      	bls.n	801316c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8013168:	2303      	movs	r3, #3
 801316a:	e2b8      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801316c:	4b46      	ldr	r3, [pc, #280]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2204      	movs	r2, #4
 8013172:	4013      	ands	r3, r2
 8013174:	d0f1      	beq.n	801315a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013176:	4b44      	ldr	r3, [pc, #272]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	4a46      	ldr	r2, [pc, #280]	@ (8013294 <HAL_RCC_OscConfig+0x348>)
 801317c:	4013      	ands	r3, r2
 801317e:	0019      	movs	r1, r3
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	691b      	ldr	r3, [r3, #16]
 8013184:	021a      	lsls	r2, r3, #8
 8013186:	4b40      	ldr	r3, [pc, #256]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013188:	430a      	orrs	r2, r1
 801318a:	605a      	str	r2, [r3, #4]
 801318c:	e018      	b.n	80131c0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801318e:	4b3e      	ldr	r3, [pc, #248]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	4b3d      	ldr	r3, [pc, #244]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013194:	2101      	movs	r1, #1
 8013196:	438a      	bics	r2, r1
 8013198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801319a:	f7f9 fe77 	bl	800ce8c <HAL_GetTick>
 801319e:	0003      	movs	r3, r0
 80131a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80131a2:	e008      	b.n	80131b6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80131a4:	f7f9 fe72 	bl	800ce8c <HAL_GetTick>
 80131a8:	0002      	movs	r2, r0
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	1ad3      	subs	r3, r2, r3
 80131ae:	2b02      	cmp	r3, #2
 80131b0:	d901      	bls.n	80131b6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80131b2:	2303      	movs	r3, #3
 80131b4:	e293      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80131b6:	4b34      	ldr	r3, [pc, #208]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2204      	movs	r2, #4
 80131bc:	4013      	ands	r3, r2
 80131be:	d1f1      	bne.n	80131a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2210      	movs	r2, #16
 80131c6:	4013      	ands	r3, r2
 80131c8:	d100      	bne.n	80131cc <HAL_RCC_OscConfig+0x280>
 80131ca:	e0a2      	b.n	8013312 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d140      	bne.n	8013254 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80131d2:	4b2d      	ldr	r3, [pc, #180]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	2380      	movs	r3, #128	@ 0x80
 80131d8:	009b      	lsls	r3, r3, #2
 80131da:	4013      	ands	r3, r2
 80131dc:	d005      	beq.n	80131ea <HAL_RCC_OscConfig+0x29e>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	69db      	ldr	r3, [r3, #28]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d101      	bne.n	80131ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80131e6:	2301      	movs	r3, #1
 80131e8:	e279      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80131ea:	4b27      	ldr	r3, [pc, #156]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	4a2d      	ldr	r2, [pc, #180]	@ (80132a4 <HAL_RCC_OscConfig+0x358>)
 80131f0:	4013      	ands	r3, r2
 80131f2:	0019      	movs	r1, r3
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80131f8:	4b23      	ldr	r3, [pc, #140]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 80131fa:	430a      	orrs	r2, r1
 80131fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80131fe:	4b22      	ldr	r3, [pc, #136]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	021b      	lsls	r3, r3, #8
 8013204:	0a19      	lsrs	r1, r3, #8
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6a1b      	ldr	r3, [r3, #32]
 801320a:	061a      	lsls	r2, r3, #24
 801320c:	4b1e      	ldr	r3, [pc, #120]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 801320e:	430a      	orrs	r2, r1
 8013210:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013216:	0b5b      	lsrs	r3, r3, #13
 8013218:	3301      	adds	r3, #1
 801321a:	2280      	movs	r2, #128	@ 0x80
 801321c:	0212      	lsls	r2, r2, #8
 801321e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8013220:	4b19      	ldr	r3, [pc, #100]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	091b      	lsrs	r3, r3, #4
 8013226:	210f      	movs	r1, #15
 8013228:	400b      	ands	r3, r1
 801322a:	491b      	ldr	r1, [pc, #108]	@ (8013298 <HAL_RCC_OscConfig+0x34c>)
 801322c:	5ccb      	ldrb	r3, [r1, r3]
 801322e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8013230:	4b1a      	ldr	r3, [pc, #104]	@ (801329c <HAL_RCC_OscConfig+0x350>)
 8013232:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8013234:	4b1a      	ldr	r3, [pc, #104]	@ (80132a0 <HAL_RCC_OscConfig+0x354>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2513      	movs	r5, #19
 801323a:	197c      	adds	r4, r7, r5
 801323c:	0018      	movs	r0, r3
 801323e:	f7f9 fddf 	bl	800ce00 <HAL_InitTick>
 8013242:	0003      	movs	r3, r0
 8013244:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8013246:	197b      	adds	r3, r7, r5
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d061      	beq.n	8013312 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801324e:	197b      	adds	r3, r7, r5
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	e244      	b.n	80136de <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	69db      	ldr	r3, [r3, #28]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d040      	beq.n	80132de <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801325c:	4b0a      	ldr	r3, [pc, #40]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	4b09      	ldr	r3, [pc, #36]	@ (8013288 <HAL_RCC_OscConfig+0x33c>)
 8013262:	2180      	movs	r1, #128	@ 0x80
 8013264:	0049      	lsls	r1, r1, #1
 8013266:	430a      	orrs	r2, r1
 8013268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801326a:	f7f9 fe0f 	bl	800ce8c <HAL_GetTick>
 801326e:	0003      	movs	r3, r0
 8013270:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8013272:	e019      	b.n	80132a8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013274:	f7f9 fe0a 	bl	800ce8c <HAL_GetTick>
 8013278:	0002      	movs	r2, r0
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	1ad3      	subs	r3, r2, r3
 801327e:	2b02      	cmp	r3, #2
 8013280:	d912      	bls.n	80132a8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8013282:	2303      	movs	r3, #3
 8013284:	e22b      	b.n	80136de <HAL_RCC_OscConfig+0x792>
 8013286:	46c0      	nop			@ (mov r8, r8)
 8013288:	40021000 	.word	0x40021000
 801328c:	fffeffff 	.word	0xfffeffff
 8013290:	fffbffff 	.word	0xfffbffff
 8013294:	ffffe0ff 	.word	0xffffe0ff
 8013298:	080226d8 	.word	0x080226d8
 801329c:	200000c8 	.word	0x200000c8
 80132a0:	200000d8 	.word	0x200000d8
 80132a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80132a8:	4bca      	ldr	r3, [pc, #808]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	2380      	movs	r3, #128	@ 0x80
 80132ae:	009b      	lsls	r3, r3, #2
 80132b0:	4013      	ands	r3, r2
 80132b2:	d0df      	beq.n	8013274 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80132b4:	4bc7      	ldr	r3, [pc, #796]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	4ac7      	ldr	r2, [pc, #796]	@ (80135d8 <HAL_RCC_OscConfig+0x68c>)
 80132ba:	4013      	ands	r3, r2
 80132bc:	0019      	movs	r1, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132c2:	4bc4      	ldr	r3, [pc, #784]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80132c4:	430a      	orrs	r2, r1
 80132c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80132c8:	4bc2      	ldr	r3, [pc, #776]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	021b      	lsls	r3, r3, #8
 80132ce:	0a19      	lsrs	r1, r3, #8
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6a1b      	ldr	r3, [r3, #32]
 80132d4:	061a      	lsls	r2, r3, #24
 80132d6:	4bbf      	ldr	r3, [pc, #764]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80132d8:	430a      	orrs	r2, r1
 80132da:	605a      	str	r2, [r3, #4]
 80132dc:	e019      	b.n	8013312 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80132de:	4bbd      	ldr	r3, [pc, #756]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	4bbc      	ldr	r3, [pc, #752]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80132e4:	49bd      	ldr	r1, [pc, #756]	@ (80135dc <HAL_RCC_OscConfig+0x690>)
 80132e6:	400a      	ands	r2, r1
 80132e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80132ea:	f7f9 fdcf 	bl	800ce8c <HAL_GetTick>
 80132ee:	0003      	movs	r3, r0
 80132f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80132f2:	e008      	b.n	8013306 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80132f4:	f7f9 fdca 	bl	800ce8c <HAL_GetTick>
 80132f8:	0002      	movs	r2, r0
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	1ad3      	subs	r3, r2, r3
 80132fe:	2b02      	cmp	r3, #2
 8013300:	d901      	bls.n	8013306 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8013302:	2303      	movs	r3, #3
 8013304:	e1eb      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8013306:	4bb3      	ldr	r3, [pc, #716]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013308:	681a      	ldr	r2, [r3, #0]
 801330a:	2380      	movs	r3, #128	@ 0x80
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	4013      	ands	r3, r2
 8013310:	d1f0      	bne.n	80132f4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	2208      	movs	r2, #8
 8013318:	4013      	ands	r3, r2
 801331a:	d036      	beq.n	801338a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	695b      	ldr	r3, [r3, #20]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d019      	beq.n	8013358 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013324:	4bab      	ldr	r3, [pc, #684]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013326:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013328:	4baa      	ldr	r3, [pc, #680]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801332a:	2101      	movs	r1, #1
 801332c:	430a      	orrs	r2, r1
 801332e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013330:	f7f9 fdac 	bl	800ce8c <HAL_GetTick>
 8013334:	0003      	movs	r3, r0
 8013336:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013338:	e008      	b.n	801334c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801333a:	f7f9 fda7 	bl	800ce8c <HAL_GetTick>
 801333e:	0002      	movs	r2, r0
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	1ad3      	subs	r3, r2, r3
 8013344:	2b02      	cmp	r3, #2
 8013346:	d901      	bls.n	801334c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8013348:	2303      	movs	r3, #3
 801334a:	e1c8      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801334c:	4ba1      	ldr	r3, [pc, #644]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801334e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013350:	2202      	movs	r2, #2
 8013352:	4013      	ands	r3, r2
 8013354:	d0f1      	beq.n	801333a <HAL_RCC_OscConfig+0x3ee>
 8013356:	e018      	b.n	801338a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013358:	4b9e      	ldr	r3, [pc, #632]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801335a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801335c:	4b9d      	ldr	r3, [pc, #628]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801335e:	2101      	movs	r1, #1
 8013360:	438a      	bics	r2, r1
 8013362:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013364:	f7f9 fd92 	bl	800ce8c <HAL_GetTick>
 8013368:	0003      	movs	r3, r0
 801336a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801336c:	e008      	b.n	8013380 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801336e:	f7f9 fd8d 	bl	800ce8c <HAL_GetTick>
 8013372:	0002      	movs	r2, r0
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	2b02      	cmp	r3, #2
 801337a:	d901      	bls.n	8013380 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801337c:	2303      	movs	r3, #3
 801337e:	e1ae      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013380:	4b94      	ldr	r3, [pc, #592]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013384:	2202      	movs	r2, #2
 8013386:	4013      	ands	r3, r2
 8013388:	d1f1      	bne.n	801336e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	2204      	movs	r2, #4
 8013390:	4013      	ands	r3, r2
 8013392:	d100      	bne.n	8013396 <HAL_RCC_OscConfig+0x44a>
 8013394:	e0ae      	b.n	80134f4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013396:	2023      	movs	r0, #35	@ 0x23
 8013398:	183b      	adds	r3, r7, r0
 801339a:	2200      	movs	r2, #0
 801339c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801339e:	4b8d      	ldr	r3, [pc, #564]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80133a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133a2:	2380      	movs	r3, #128	@ 0x80
 80133a4:	055b      	lsls	r3, r3, #21
 80133a6:	4013      	ands	r3, r2
 80133a8:	d109      	bne.n	80133be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80133aa:	4b8a      	ldr	r3, [pc, #552]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80133ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133ae:	4b89      	ldr	r3, [pc, #548]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80133b0:	2180      	movs	r1, #128	@ 0x80
 80133b2:	0549      	lsls	r1, r1, #21
 80133b4:	430a      	orrs	r2, r1
 80133b6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80133b8:	183b      	adds	r3, r7, r0
 80133ba:	2201      	movs	r2, #1
 80133bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80133be:	4b88      	ldr	r3, [pc, #544]	@ (80135e0 <HAL_RCC_OscConfig+0x694>)
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	2380      	movs	r3, #128	@ 0x80
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	4013      	ands	r3, r2
 80133c8:	d11a      	bne.n	8013400 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80133ca:	4b85      	ldr	r3, [pc, #532]	@ (80135e0 <HAL_RCC_OscConfig+0x694>)
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	4b84      	ldr	r3, [pc, #528]	@ (80135e0 <HAL_RCC_OscConfig+0x694>)
 80133d0:	2180      	movs	r1, #128	@ 0x80
 80133d2:	0049      	lsls	r1, r1, #1
 80133d4:	430a      	orrs	r2, r1
 80133d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80133d8:	f7f9 fd58 	bl	800ce8c <HAL_GetTick>
 80133dc:	0003      	movs	r3, r0
 80133de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80133e0:	e008      	b.n	80133f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80133e2:	f7f9 fd53 	bl	800ce8c <HAL_GetTick>
 80133e6:	0002      	movs	r2, r0
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	2b64      	cmp	r3, #100	@ 0x64
 80133ee:	d901      	bls.n	80133f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80133f0:	2303      	movs	r3, #3
 80133f2:	e174      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80133f4:	4b7a      	ldr	r3, [pc, #488]	@ (80135e0 <HAL_RCC_OscConfig+0x694>)
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	2380      	movs	r3, #128	@ 0x80
 80133fa:	005b      	lsls	r3, r3, #1
 80133fc:	4013      	ands	r3, r2
 80133fe:	d0f0      	beq.n	80133e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	689a      	ldr	r2, [r3, #8]
 8013404:	2380      	movs	r3, #128	@ 0x80
 8013406:	005b      	lsls	r3, r3, #1
 8013408:	429a      	cmp	r2, r3
 801340a:	d107      	bne.n	801341c <HAL_RCC_OscConfig+0x4d0>
 801340c:	4b71      	ldr	r3, [pc, #452]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801340e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013410:	4b70      	ldr	r3, [pc, #448]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013412:	2180      	movs	r1, #128	@ 0x80
 8013414:	0049      	lsls	r1, r1, #1
 8013416:	430a      	orrs	r2, r1
 8013418:	651a      	str	r2, [r3, #80]	@ 0x50
 801341a:	e031      	b.n	8013480 <HAL_RCC_OscConfig+0x534>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	689b      	ldr	r3, [r3, #8]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d10c      	bne.n	801343e <HAL_RCC_OscConfig+0x4f2>
 8013424:	4b6b      	ldr	r3, [pc, #428]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013428:	4b6a      	ldr	r3, [pc, #424]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801342a:	496c      	ldr	r1, [pc, #432]	@ (80135dc <HAL_RCC_OscConfig+0x690>)
 801342c:	400a      	ands	r2, r1
 801342e:	651a      	str	r2, [r3, #80]	@ 0x50
 8013430:	4b68      	ldr	r3, [pc, #416]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013434:	4b67      	ldr	r3, [pc, #412]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013436:	496b      	ldr	r1, [pc, #428]	@ (80135e4 <HAL_RCC_OscConfig+0x698>)
 8013438:	400a      	ands	r2, r1
 801343a:	651a      	str	r2, [r3, #80]	@ 0x50
 801343c:	e020      	b.n	8013480 <HAL_RCC_OscConfig+0x534>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	689a      	ldr	r2, [r3, #8]
 8013442:	23a0      	movs	r3, #160	@ 0xa0
 8013444:	00db      	lsls	r3, r3, #3
 8013446:	429a      	cmp	r2, r3
 8013448:	d10e      	bne.n	8013468 <HAL_RCC_OscConfig+0x51c>
 801344a:	4b62      	ldr	r3, [pc, #392]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801344c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801344e:	4b61      	ldr	r3, [pc, #388]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013450:	2180      	movs	r1, #128	@ 0x80
 8013452:	00c9      	lsls	r1, r1, #3
 8013454:	430a      	orrs	r2, r1
 8013456:	651a      	str	r2, [r3, #80]	@ 0x50
 8013458:	4b5e      	ldr	r3, [pc, #376]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801345a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801345c:	4b5d      	ldr	r3, [pc, #372]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801345e:	2180      	movs	r1, #128	@ 0x80
 8013460:	0049      	lsls	r1, r1, #1
 8013462:	430a      	orrs	r2, r1
 8013464:	651a      	str	r2, [r3, #80]	@ 0x50
 8013466:	e00b      	b.n	8013480 <HAL_RCC_OscConfig+0x534>
 8013468:	4b5a      	ldr	r3, [pc, #360]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801346a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801346c:	4b59      	ldr	r3, [pc, #356]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801346e:	495b      	ldr	r1, [pc, #364]	@ (80135dc <HAL_RCC_OscConfig+0x690>)
 8013470:	400a      	ands	r2, r1
 8013472:	651a      	str	r2, [r3, #80]	@ 0x50
 8013474:	4b57      	ldr	r3, [pc, #348]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013478:	4b56      	ldr	r3, [pc, #344]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801347a:	495a      	ldr	r1, [pc, #360]	@ (80135e4 <HAL_RCC_OscConfig+0x698>)
 801347c:	400a      	ands	r2, r1
 801347e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	689b      	ldr	r3, [r3, #8]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d015      	beq.n	80134b4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013488:	f7f9 fd00 	bl	800ce8c <HAL_GetTick>
 801348c:	0003      	movs	r3, r0
 801348e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013490:	e009      	b.n	80134a6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013492:	f7f9 fcfb 	bl	800ce8c <HAL_GetTick>
 8013496:	0002      	movs	r2, r0
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	1ad3      	subs	r3, r2, r3
 801349c:	4a52      	ldr	r2, [pc, #328]	@ (80135e8 <HAL_RCC_OscConfig+0x69c>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d901      	bls.n	80134a6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80134a2:	2303      	movs	r3, #3
 80134a4:	e11b      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80134a6:	4b4b      	ldr	r3, [pc, #300]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80134a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80134aa:	2380      	movs	r3, #128	@ 0x80
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	4013      	ands	r3, r2
 80134b0:	d0ef      	beq.n	8013492 <HAL_RCC_OscConfig+0x546>
 80134b2:	e014      	b.n	80134de <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80134b4:	f7f9 fcea 	bl	800ce8c <HAL_GetTick>
 80134b8:	0003      	movs	r3, r0
 80134ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80134bc:	e009      	b.n	80134d2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80134be:	f7f9 fce5 	bl	800ce8c <HAL_GetTick>
 80134c2:	0002      	movs	r2, r0
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	1ad3      	subs	r3, r2, r3
 80134c8:	4a47      	ldr	r2, [pc, #284]	@ (80135e8 <HAL_RCC_OscConfig+0x69c>)
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d901      	bls.n	80134d2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80134ce:	2303      	movs	r3, #3
 80134d0:	e105      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80134d2:	4b40      	ldr	r3, [pc, #256]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80134d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80134d6:	2380      	movs	r3, #128	@ 0x80
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	4013      	ands	r3, r2
 80134dc:	d1ef      	bne.n	80134be <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80134de:	2323      	movs	r3, #35	@ 0x23
 80134e0:	18fb      	adds	r3, r7, r3
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b01      	cmp	r3, #1
 80134e6:	d105      	bne.n	80134f4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80134e8:	4b3a      	ldr	r3, [pc, #232]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80134ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80134ec:	4b39      	ldr	r3, [pc, #228]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80134ee:	493f      	ldr	r1, [pc, #252]	@ (80135ec <HAL_RCC_OscConfig+0x6a0>)
 80134f0:	400a      	ands	r2, r1
 80134f2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	2220      	movs	r2, #32
 80134fa:	4013      	ands	r3, r2
 80134fc:	d049      	beq.n	8013592 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	699b      	ldr	r3, [r3, #24]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d026      	beq.n	8013554 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8013506:	4b33      	ldr	r3, [pc, #204]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013508:	689a      	ldr	r2, [r3, #8]
 801350a:	4b32      	ldr	r3, [pc, #200]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801350c:	2101      	movs	r1, #1
 801350e:	430a      	orrs	r2, r1
 8013510:	609a      	str	r2, [r3, #8]
 8013512:	4b30      	ldr	r3, [pc, #192]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013516:	4b2f      	ldr	r3, [pc, #188]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013518:	2101      	movs	r1, #1
 801351a:	430a      	orrs	r2, r1
 801351c:	635a      	str	r2, [r3, #52]	@ 0x34
 801351e:	4b34      	ldr	r3, [pc, #208]	@ (80135f0 <HAL_RCC_OscConfig+0x6a4>)
 8013520:	6a1a      	ldr	r2, [r3, #32]
 8013522:	4b33      	ldr	r3, [pc, #204]	@ (80135f0 <HAL_RCC_OscConfig+0x6a4>)
 8013524:	2180      	movs	r1, #128	@ 0x80
 8013526:	0189      	lsls	r1, r1, #6
 8013528:	430a      	orrs	r2, r1
 801352a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801352c:	f7f9 fcae 	bl	800ce8c <HAL_GetTick>
 8013530:	0003      	movs	r3, r0
 8013532:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013534:	e008      	b.n	8013548 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013536:	f7f9 fca9 	bl	800ce8c <HAL_GetTick>
 801353a:	0002      	movs	r2, r0
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	2b02      	cmp	r3, #2
 8013542:	d901      	bls.n	8013548 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8013544:	2303      	movs	r3, #3
 8013546:	e0ca      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013548:	4b22      	ldr	r3, [pc, #136]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801354a:	689b      	ldr	r3, [r3, #8]
 801354c:	2202      	movs	r2, #2
 801354e:	4013      	ands	r3, r2
 8013550:	d0f1      	beq.n	8013536 <HAL_RCC_OscConfig+0x5ea>
 8013552:	e01e      	b.n	8013592 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8013554:	4b1f      	ldr	r3, [pc, #124]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 8013556:	689a      	ldr	r2, [r3, #8]
 8013558:	4b1e      	ldr	r3, [pc, #120]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801355a:	2101      	movs	r1, #1
 801355c:	438a      	bics	r2, r1
 801355e:	609a      	str	r2, [r3, #8]
 8013560:	4b23      	ldr	r3, [pc, #140]	@ (80135f0 <HAL_RCC_OscConfig+0x6a4>)
 8013562:	6a1a      	ldr	r2, [r3, #32]
 8013564:	4b22      	ldr	r3, [pc, #136]	@ (80135f0 <HAL_RCC_OscConfig+0x6a4>)
 8013566:	4923      	ldr	r1, [pc, #140]	@ (80135f4 <HAL_RCC_OscConfig+0x6a8>)
 8013568:	400a      	ands	r2, r1
 801356a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801356c:	f7f9 fc8e 	bl	800ce8c <HAL_GetTick>
 8013570:	0003      	movs	r3, r0
 8013572:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013574:	e008      	b.n	8013588 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013576:	f7f9 fc89 	bl	800ce8c <HAL_GetTick>
 801357a:	0002      	movs	r2, r0
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	1ad3      	subs	r3, r2, r3
 8013580:	2b02      	cmp	r3, #2
 8013582:	d901      	bls.n	8013588 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8013584:	2303      	movs	r3, #3
 8013586:	e0aa      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013588:	4b12      	ldr	r3, [pc, #72]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	2202      	movs	r2, #2
 801358e:	4013      	ands	r3, r2
 8013590:	d1f1      	bne.n	8013576 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013596:	2b00      	cmp	r3, #0
 8013598:	d100      	bne.n	801359c <HAL_RCC_OscConfig+0x650>
 801359a:	e09f      	b.n	80136dc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	2b0c      	cmp	r3, #12
 80135a0:	d100      	bne.n	80135a4 <HAL_RCC_OscConfig+0x658>
 80135a2:	e078      	b.n	8013696 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135a8:	2b02      	cmp	r3, #2
 80135aa:	d159      	bne.n	8013660 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80135ac:	4b09      	ldr	r3, [pc, #36]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	4b08      	ldr	r3, [pc, #32]	@ (80135d4 <HAL_RCC_OscConfig+0x688>)
 80135b2:	4911      	ldr	r1, [pc, #68]	@ (80135f8 <HAL_RCC_OscConfig+0x6ac>)
 80135b4:	400a      	ands	r2, r1
 80135b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80135b8:	f7f9 fc68 	bl	800ce8c <HAL_GetTick>
 80135bc:	0003      	movs	r3, r0
 80135be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80135c0:	e01c      	b.n	80135fc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80135c2:	f7f9 fc63 	bl	800ce8c <HAL_GetTick>
 80135c6:	0002      	movs	r2, r0
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	2b02      	cmp	r3, #2
 80135ce:	d915      	bls.n	80135fc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80135d0:	2303      	movs	r3, #3
 80135d2:	e084      	b.n	80136de <HAL_RCC_OscConfig+0x792>
 80135d4:	40021000 	.word	0x40021000
 80135d8:	ffff1fff 	.word	0xffff1fff
 80135dc:	fffffeff 	.word	0xfffffeff
 80135e0:	40007000 	.word	0x40007000
 80135e4:	fffffbff 	.word	0xfffffbff
 80135e8:	00001388 	.word	0x00001388
 80135ec:	efffffff 	.word	0xefffffff
 80135f0:	40010000 	.word	0x40010000
 80135f4:	ffffdfff 	.word	0xffffdfff
 80135f8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80135fc:	4b3a      	ldr	r3, [pc, #232]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	2380      	movs	r3, #128	@ 0x80
 8013602:	049b      	lsls	r3, r3, #18
 8013604:	4013      	ands	r3, r2
 8013606:	d1dc      	bne.n	80135c2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013608:	4b37      	ldr	r3, [pc, #220]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	4a37      	ldr	r2, [pc, #220]	@ (80136ec <HAL_RCC_OscConfig+0x7a0>)
 801360e:	4013      	ands	r3, r2
 8013610:	0019      	movs	r1, r3
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801361a:	431a      	orrs	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013620:	431a      	orrs	r2, r3
 8013622:	4b31      	ldr	r3, [pc, #196]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 8013624:	430a      	orrs	r2, r1
 8013626:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013628:	4b2f      	ldr	r3, [pc, #188]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	4b2e      	ldr	r3, [pc, #184]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 801362e:	2180      	movs	r1, #128	@ 0x80
 8013630:	0449      	lsls	r1, r1, #17
 8013632:	430a      	orrs	r2, r1
 8013634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013636:	f7f9 fc29 	bl	800ce8c <HAL_GetTick>
 801363a:	0003      	movs	r3, r0
 801363c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801363e:	e008      	b.n	8013652 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013640:	f7f9 fc24 	bl	800ce8c <HAL_GetTick>
 8013644:	0002      	movs	r2, r0
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	2b02      	cmp	r3, #2
 801364c:	d901      	bls.n	8013652 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801364e:	2303      	movs	r3, #3
 8013650:	e045      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8013652:	4b25      	ldr	r3, [pc, #148]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	2380      	movs	r3, #128	@ 0x80
 8013658:	049b      	lsls	r3, r3, #18
 801365a:	4013      	ands	r3, r2
 801365c:	d0f0      	beq.n	8013640 <HAL_RCC_OscConfig+0x6f4>
 801365e:	e03d      	b.n	80136dc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013660:	4b21      	ldr	r3, [pc, #132]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 8013662:	681a      	ldr	r2, [r3, #0]
 8013664:	4b20      	ldr	r3, [pc, #128]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 8013666:	4922      	ldr	r1, [pc, #136]	@ (80136f0 <HAL_RCC_OscConfig+0x7a4>)
 8013668:	400a      	ands	r2, r1
 801366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801366c:	f7f9 fc0e 	bl	800ce8c <HAL_GetTick>
 8013670:	0003      	movs	r3, r0
 8013672:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013674:	e008      	b.n	8013688 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013676:	f7f9 fc09 	bl	800ce8c <HAL_GetTick>
 801367a:	0002      	movs	r2, r0
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	1ad3      	subs	r3, r2, r3
 8013680:	2b02      	cmp	r3, #2
 8013682:	d901      	bls.n	8013688 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8013684:	2303      	movs	r3, #3
 8013686:	e02a      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013688:	4b17      	ldr	r3, [pc, #92]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 801368a:	681a      	ldr	r2, [r3, #0]
 801368c:	2380      	movs	r3, #128	@ 0x80
 801368e:	049b      	lsls	r3, r3, #18
 8013690:	4013      	ands	r3, r2
 8013692:	d1f0      	bne.n	8013676 <HAL_RCC_OscConfig+0x72a>
 8013694:	e022      	b.n	80136dc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801369a:	2b01      	cmp	r3, #1
 801369c:	d101      	bne.n	80136a2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801369e:	2301      	movs	r3, #1
 80136a0:	e01d      	b.n	80136de <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80136a2:	4b11      	ldr	r3, [pc, #68]	@ (80136e8 <HAL_RCC_OscConfig+0x79c>)
 80136a4:	68db      	ldr	r3, [r3, #12]
 80136a6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80136a8:	69ba      	ldr	r2, [r7, #24]
 80136aa:	2380      	movs	r3, #128	@ 0x80
 80136ac:	025b      	lsls	r3, r3, #9
 80136ae:	401a      	ands	r2, r3
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d10f      	bne.n	80136d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80136b8:	69ba      	ldr	r2, [r7, #24]
 80136ba:	23f0      	movs	r3, #240	@ 0xf0
 80136bc:	039b      	lsls	r3, r3, #14
 80136be:	401a      	ands	r2, r3
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d107      	bne.n	80136d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80136c8:	69ba      	ldr	r2, [r7, #24]
 80136ca:	23c0      	movs	r3, #192	@ 0xc0
 80136cc:	041b      	lsls	r3, r3, #16
 80136ce:	401a      	ands	r2, r3
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d001      	beq.n	80136dc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80136d8:	2301      	movs	r3, #1
 80136da:	e000      	b.n	80136de <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	0018      	movs	r0, r3
 80136e0:	46bd      	mov	sp, r7
 80136e2:	b00a      	add	sp, #40	@ 0x28
 80136e4:	bdb0      	pop	{r4, r5, r7, pc}
 80136e6:	46c0      	nop			@ (mov r8, r8)
 80136e8:	40021000 	.word	0x40021000
 80136ec:	ff02ffff 	.word	0xff02ffff
 80136f0:	feffffff 	.word	0xfeffffff

080136f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80136f4:	b5b0      	push	{r4, r5, r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d101      	bne.n	8013708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013704:	2301      	movs	r3, #1
 8013706:	e128      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013708:	4b96      	ldr	r3, [pc, #600]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2201      	movs	r2, #1
 801370e:	4013      	ands	r3, r2
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	429a      	cmp	r2, r3
 8013714:	d91e      	bls.n	8013754 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013716:	4b93      	ldr	r3, [pc, #588]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	2201      	movs	r2, #1
 801371c:	4393      	bics	r3, r2
 801371e:	0019      	movs	r1, r3
 8013720:	4b90      	ldr	r3, [pc, #576]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 8013722:	683a      	ldr	r2, [r7, #0]
 8013724:	430a      	orrs	r2, r1
 8013726:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8013728:	f7f9 fbb0 	bl	800ce8c <HAL_GetTick>
 801372c:	0003      	movs	r3, r0
 801372e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013730:	e009      	b.n	8013746 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013732:	f7f9 fbab 	bl	800ce8c <HAL_GetTick>
 8013736:	0002      	movs	r2, r0
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	1ad3      	subs	r3, r2, r3
 801373c:	4a8a      	ldr	r2, [pc, #552]	@ (8013968 <HAL_RCC_ClockConfig+0x274>)
 801373e:	4293      	cmp	r3, r2
 8013740:	d901      	bls.n	8013746 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8013742:	2303      	movs	r3, #3
 8013744:	e109      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013746:	4b87      	ldr	r3, [pc, #540]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2201      	movs	r2, #1
 801374c:	4013      	ands	r3, r2
 801374e:	683a      	ldr	r2, [r7, #0]
 8013750:	429a      	cmp	r2, r3
 8013752:	d1ee      	bne.n	8013732 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2202      	movs	r2, #2
 801375a:	4013      	ands	r3, r2
 801375c:	d009      	beq.n	8013772 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801375e:	4b83      	ldr	r3, [pc, #524]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	22f0      	movs	r2, #240	@ 0xf0
 8013764:	4393      	bics	r3, r2
 8013766:	0019      	movs	r1, r3
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	689a      	ldr	r2, [r3, #8]
 801376c:	4b7f      	ldr	r3, [pc, #508]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 801376e:	430a      	orrs	r2, r1
 8013770:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2201      	movs	r2, #1
 8013778:	4013      	ands	r3, r2
 801377a:	d100      	bne.n	801377e <HAL_RCC_ClockConfig+0x8a>
 801377c:	e089      	b.n	8013892 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	2b02      	cmp	r3, #2
 8013784:	d107      	bne.n	8013796 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013786:	4b79      	ldr	r3, [pc, #484]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	2380      	movs	r3, #128	@ 0x80
 801378c:	029b      	lsls	r3, r3, #10
 801378e:	4013      	ands	r3, r2
 8013790:	d120      	bne.n	80137d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013792:	2301      	movs	r3, #1
 8013794:	e0e1      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	2b03      	cmp	r3, #3
 801379c:	d107      	bne.n	80137ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801379e:	4b73      	ldr	r3, [pc, #460]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 80137a0:	681a      	ldr	r2, [r3, #0]
 80137a2:	2380      	movs	r3, #128	@ 0x80
 80137a4:	049b      	lsls	r3, r3, #18
 80137a6:	4013      	ands	r3, r2
 80137a8:	d114      	bne.n	80137d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80137aa:	2301      	movs	r3, #1
 80137ac:	e0d5      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	2b01      	cmp	r3, #1
 80137b4:	d106      	bne.n	80137c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80137b6:	4b6d      	ldr	r3, [pc, #436]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2204      	movs	r2, #4
 80137bc:	4013      	ands	r3, r2
 80137be:	d109      	bne.n	80137d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80137c0:	2301      	movs	r3, #1
 80137c2:	e0ca      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80137c4:	4b69      	ldr	r3, [pc, #420]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	2380      	movs	r3, #128	@ 0x80
 80137ca:	009b      	lsls	r3, r3, #2
 80137cc:	4013      	ands	r3, r2
 80137ce:	d101      	bne.n	80137d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80137d0:	2301      	movs	r3, #1
 80137d2:	e0c2      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80137d4:	4b65      	ldr	r3, [pc, #404]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	2203      	movs	r2, #3
 80137da:	4393      	bics	r3, r2
 80137dc:	0019      	movs	r1, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	685a      	ldr	r2, [r3, #4]
 80137e2:	4b62      	ldr	r3, [pc, #392]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 80137e4:	430a      	orrs	r2, r1
 80137e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80137e8:	f7f9 fb50 	bl	800ce8c <HAL_GetTick>
 80137ec:	0003      	movs	r3, r0
 80137ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	2b02      	cmp	r3, #2
 80137f6:	d111      	bne.n	801381c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80137f8:	e009      	b.n	801380e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80137fa:	f7f9 fb47 	bl	800ce8c <HAL_GetTick>
 80137fe:	0002      	movs	r2, r0
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	1ad3      	subs	r3, r2, r3
 8013804:	4a58      	ldr	r2, [pc, #352]	@ (8013968 <HAL_RCC_ClockConfig+0x274>)
 8013806:	4293      	cmp	r3, r2
 8013808:	d901      	bls.n	801380e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801380a:	2303      	movs	r3, #3
 801380c:	e0a5      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801380e:	4b57      	ldr	r3, [pc, #348]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 8013810:	68db      	ldr	r3, [r3, #12]
 8013812:	220c      	movs	r2, #12
 8013814:	4013      	ands	r3, r2
 8013816:	2b08      	cmp	r3, #8
 8013818:	d1ef      	bne.n	80137fa <HAL_RCC_ClockConfig+0x106>
 801381a:	e03a      	b.n	8013892 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	685b      	ldr	r3, [r3, #4]
 8013820:	2b03      	cmp	r3, #3
 8013822:	d111      	bne.n	8013848 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013824:	e009      	b.n	801383a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013826:	f7f9 fb31 	bl	800ce8c <HAL_GetTick>
 801382a:	0002      	movs	r2, r0
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	1ad3      	subs	r3, r2, r3
 8013830:	4a4d      	ldr	r2, [pc, #308]	@ (8013968 <HAL_RCC_ClockConfig+0x274>)
 8013832:	4293      	cmp	r3, r2
 8013834:	d901      	bls.n	801383a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8013836:	2303      	movs	r3, #3
 8013838:	e08f      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801383a:	4b4c      	ldr	r3, [pc, #304]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	220c      	movs	r2, #12
 8013840:	4013      	ands	r3, r2
 8013842:	2b0c      	cmp	r3, #12
 8013844:	d1ef      	bne.n	8013826 <HAL_RCC_ClockConfig+0x132>
 8013846:	e024      	b.n	8013892 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d11b      	bne.n	8013888 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013850:	e009      	b.n	8013866 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013852:	f7f9 fb1b 	bl	800ce8c <HAL_GetTick>
 8013856:	0002      	movs	r2, r0
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	1ad3      	subs	r3, r2, r3
 801385c:	4a42      	ldr	r2, [pc, #264]	@ (8013968 <HAL_RCC_ClockConfig+0x274>)
 801385e:	4293      	cmp	r3, r2
 8013860:	d901      	bls.n	8013866 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8013862:	2303      	movs	r3, #3
 8013864:	e079      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013866:	4b41      	ldr	r3, [pc, #260]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	220c      	movs	r2, #12
 801386c:	4013      	ands	r3, r2
 801386e:	2b04      	cmp	r3, #4
 8013870:	d1ef      	bne.n	8013852 <HAL_RCC_ClockConfig+0x15e>
 8013872:	e00e      	b.n	8013892 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013874:	f7f9 fb0a 	bl	800ce8c <HAL_GetTick>
 8013878:	0002      	movs	r2, r0
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	1ad3      	subs	r3, r2, r3
 801387e:	4a3a      	ldr	r2, [pc, #232]	@ (8013968 <HAL_RCC_ClockConfig+0x274>)
 8013880:	4293      	cmp	r3, r2
 8013882:	d901      	bls.n	8013888 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8013884:	2303      	movs	r3, #3
 8013886:	e068      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8013888:	4b38      	ldr	r3, [pc, #224]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	220c      	movs	r2, #12
 801388e:	4013      	ands	r3, r2
 8013890:	d1f0      	bne.n	8013874 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013892:	4b34      	ldr	r3, [pc, #208]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	2201      	movs	r2, #1
 8013898:	4013      	ands	r3, r2
 801389a:	683a      	ldr	r2, [r7, #0]
 801389c:	429a      	cmp	r2, r3
 801389e:	d21e      	bcs.n	80138de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80138a0:	4b30      	ldr	r3, [pc, #192]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	2201      	movs	r2, #1
 80138a6:	4393      	bics	r3, r2
 80138a8:	0019      	movs	r1, r3
 80138aa:	4b2e      	ldr	r3, [pc, #184]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 80138ac:	683a      	ldr	r2, [r7, #0]
 80138ae:	430a      	orrs	r2, r1
 80138b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80138b2:	f7f9 faeb 	bl	800ce8c <HAL_GetTick>
 80138b6:	0003      	movs	r3, r0
 80138b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80138ba:	e009      	b.n	80138d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138bc:	f7f9 fae6 	bl	800ce8c <HAL_GetTick>
 80138c0:	0002      	movs	r2, r0
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	4a28      	ldr	r2, [pc, #160]	@ (8013968 <HAL_RCC_ClockConfig+0x274>)
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d901      	bls.n	80138d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80138cc:	2303      	movs	r3, #3
 80138ce:	e044      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80138d0:	4b24      	ldr	r3, [pc, #144]	@ (8013964 <HAL_RCC_ClockConfig+0x270>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2201      	movs	r2, #1
 80138d6:	4013      	ands	r3, r2
 80138d8:	683a      	ldr	r2, [r7, #0]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d1ee      	bne.n	80138bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2204      	movs	r2, #4
 80138e4:	4013      	ands	r3, r2
 80138e6:	d009      	beq.n	80138fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80138e8:	4b20      	ldr	r3, [pc, #128]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	4a20      	ldr	r2, [pc, #128]	@ (8013970 <HAL_RCC_ClockConfig+0x27c>)
 80138ee:	4013      	ands	r3, r2
 80138f0:	0019      	movs	r1, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	68da      	ldr	r2, [r3, #12]
 80138f6:	4b1d      	ldr	r3, [pc, #116]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 80138f8:	430a      	orrs	r2, r1
 80138fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2208      	movs	r2, #8
 8013902:	4013      	ands	r3, r2
 8013904:	d00a      	beq.n	801391c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8013906:	4b19      	ldr	r3, [pc, #100]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	4a1a      	ldr	r2, [pc, #104]	@ (8013974 <HAL_RCC_ClockConfig+0x280>)
 801390c:	4013      	ands	r3, r2
 801390e:	0019      	movs	r1, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	00da      	lsls	r2, r3, #3
 8013916:	4b15      	ldr	r3, [pc, #84]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 8013918:	430a      	orrs	r2, r1
 801391a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801391c:	f000 f832 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 8013920:	0001      	movs	r1, r0
 8013922:	4b12      	ldr	r3, [pc, #72]	@ (801396c <HAL_RCC_ClockConfig+0x278>)
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	091b      	lsrs	r3, r3, #4
 8013928:	220f      	movs	r2, #15
 801392a:	4013      	ands	r3, r2
 801392c:	4a12      	ldr	r2, [pc, #72]	@ (8013978 <HAL_RCC_ClockConfig+0x284>)
 801392e:	5cd3      	ldrb	r3, [r2, r3]
 8013930:	000a      	movs	r2, r1
 8013932:	40da      	lsrs	r2, r3
 8013934:	4b11      	ldr	r3, [pc, #68]	@ (801397c <HAL_RCC_ClockConfig+0x288>)
 8013936:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8013938:	4b11      	ldr	r3, [pc, #68]	@ (8013980 <HAL_RCC_ClockConfig+0x28c>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	250b      	movs	r5, #11
 801393e:	197c      	adds	r4, r7, r5
 8013940:	0018      	movs	r0, r3
 8013942:	f7f9 fa5d 	bl	800ce00 <HAL_InitTick>
 8013946:	0003      	movs	r3, r0
 8013948:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801394a:	197b      	adds	r3, r7, r5
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d002      	beq.n	8013958 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8013952:	197b      	adds	r3, r7, r5
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	e000      	b.n	801395a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8013958:	2300      	movs	r3, #0
}
 801395a:	0018      	movs	r0, r3
 801395c:	46bd      	mov	sp, r7
 801395e:	b004      	add	sp, #16
 8013960:	bdb0      	pop	{r4, r5, r7, pc}
 8013962:	46c0      	nop			@ (mov r8, r8)
 8013964:	40022000 	.word	0x40022000
 8013968:	00001388 	.word	0x00001388
 801396c:	40021000 	.word	0x40021000
 8013970:	fffff8ff 	.word	0xfffff8ff
 8013974:	ffffc7ff 	.word	0xffffc7ff
 8013978:	080226d8 	.word	0x080226d8
 801397c:	200000c8 	.word	0x200000c8
 8013980:	200000d8 	.word	0x200000d8

08013984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013984:	b5b0      	push	{r4, r5, r7, lr}
 8013986:	b08e      	sub	sp, #56	@ 0x38
 8013988:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801398a:	4b4c      	ldr	r3, [pc, #304]	@ (8013abc <HAL_RCC_GetSysClockFreq+0x138>)
 801398c:	68db      	ldr	r3, [r3, #12]
 801398e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8013990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013992:	230c      	movs	r3, #12
 8013994:	4013      	ands	r3, r2
 8013996:	2b0c      	cmp	r3, #12
 8013998:	d014      	beq.n	80139c4 <HAL_RCC_GetSysClockFreq+0x40>
 801399a:	d900      	bls.n	801399e <HAL_RCC_GetSysClockFreq+0x1a>
 801399c:	e07b      	b.n	8013a96 <HAL_RCC_GetSysClockFreq+0x112>
 801399e:	2b04      	cmp	r3, #4
 80139a0:	d002      	beq.n	80139a8 <HAL_RCC_GetSysClockFreq+0x24>
 80139a2:	2b08      	cmp	r3, #8
 80139a4:	d00b      	beq.n	80139be <HAL_RCC_GetSysClockFreq+0x3a>
 80139a6:	e076      	b.n	8013a96 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80139a8:	4b44      	ldr	r3, [pc, #272]	@ (8013abc <HAL_RCC_GetSysClockFreq+0x138>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2210      	movs	r2, #16
 80139ae:	4013      	ands	r3, r2
 80139b0:	d002      	beq.n	80139b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80139b2:	4b43      	ldr	r3, [pc, #268]	@ (8013ac0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80139b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80139b6:	e07c      	b.n	8013ab2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80139b8:	4b42      	ldr	r3, [pc, #264]	@ (8013ac4 <HAL_RCC_GetSysClockFreq+0x140>)
 80139ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80139bc:	e079      	b.n	8013ab2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80139be:	4b42      	ldr	r3, [pc, #264]	@ (8013ac8 <HAL_RCC_GetSysClockFreq+0x144>)
 80139c0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80139c2:	e076      	b.n	8013ab2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80139c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139c6:	0c9a      	lsrs	r2, r3, #18
 80139c8:	230f      	movs	r3, #15
 80139ca:	401a      	ands	r2, r3
 80139cc:	4b3f      	ldr	r3, [pc, #252]	@ (8013acc <HAL_RCC_GetSysClockFreq+0x148>)
 80139ce:	5c9b      	ldrb	r3, [r3, r2]
 80139d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80139d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139d4:	0d9a      	lsrs	r2, r3, #22
 80139d6:	2303      	movs	r3, #3
 80139d8:	4013      	ands	r3, r2
 80139da:	3301      	adds	r3, #1
 80139dc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80139de:	4b37      	ldr	r3, [pc, #220]	@ (8013abc <HAL_RCC_GetSysClockFreq+0x138>)
 80139e0:	68da      	ldr	r2, [r3, #12]
 80139e2:	2380      	movs	r3, #128	@ 0x80
 80139e4:	025b      	lsls	r3, r3, #9
 80139e6:	4013      	ands	r3, r2
 80139e8:	d01a      	beq.n	8013a20 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80139ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ec:	61bb      	str	r3, [r7, #24]
 80139ee:	2300      	movs	r3, #0
 80139f0:	61fb      	str	r3, [r7, #28]
 80139f2:	4a35      	ldr	r2, [pc, #212]	@ (8013ac8 <HAL_RCC_GetSysClockFreq+0x144>)
 80139f4:	2300      	movs	r3, #0
 80139f6:	69b8      	ldr	r0, [r7, #24]
 80139f8:	69f9      	ldr	r1, [r7, #28]
 80139fa:	f7ec fde1 	bl	80005c0 <__aeabi_lmul>
 80139fe:	0002      	movs	r2, r0
 8013a00:	000b      	movs	r3, r1
 8013a02:	0010      	movs	r0, r2
 8013a04:	0019      	movs	r1, r3
 8013a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a08:	613b      	str	r3, [r7, #16]
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	617b      	str	r3, [r7, #20]
 8013a0e:	693a      	ldr	r2, [r7, #16]
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	f7ec fdb5 	bl	8000580 <__aeabi_uldivmod>
 8013a16:	0002      	movs	r2, r0
 8013a18:	000b      	movs	r3, r1
 8013a1a:	0013      	movs	r3, r2
 8013a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a1e:	e037      	b.n	8013a90 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8013a20:	4b26      	ldr	r3, [pc, #152]	@ (8013abc <HAL_RCC_GetSysClockFreq+0x138>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2210      	movs	r2, #16
 8013a26:	4013      	ands	r3, r2
 8013a28:	d01a      	beq.n	8013a60 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8013a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2c:	60bb      	str	r3, [r7, #8]
 8013a2e:	2300      	movs	r3, #0
 8013a30:	60fb      	str	r3, [r7, #12]
 8013a32:	4a23      	ldr	r2, [pc, #140]	@ (8013ac0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8013a34:	2300      	movs	r3, #0
 8013a36:	68b8      	ldr	r0, [r7, #8]
 8013a38:	68f9      	ldr	r1, [r7, #12]
 8013a3a:	f7ec fdc1 	bl	80005c0 <__aeabi_lmul>
 8013a3e:	0002      	movs	r2, r0
 8013a40:	000b      	movs	r3, r1
 8013a42:	0010      	movs	r0, r2
 8013a44:	0019      	movs	r1, r3
 8013a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a48:	603b      	str	r3, [r7, #0]
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	607b      	str	r3, [r7, #4]
 8013a4e:	683a      	ldr	r2, [r7, #0]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f7ec fd95 	bl	8000580 <__aeabi_uldivmod>
 8013a56:	0002      	movs	r2, r0
 8013a58:	000b      	movs	r3, r1
 8013a5a:	0013      	movs	r3, r2
 8013a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a5e:	e017      	b.n	8013a90 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8013a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a62:	0018      	movs	r0, r3
 8013a64:	2300      	movs	r3, #0
 8013a66:	0019      	movs	r1, r3
 8013a68:	4a16      	ldr	r2, [pc, #88]	@ (8013ac4 <HAL_RCC_GetSysClockFreq+0x140>)
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	f7ec fda8 	bl	80005c0 <__aeabi_lmul>
 8013a70:	0002      	movs	r2, r0
 8013a72:	000b      	movs	r3, r1
 8013a74:	0010      	movs	r0, r2
 8013a76:	0019      	movs	r1, r3
 8013a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a7a:	001c      	movs	r4, r3
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	001d      	movs	r5, r3
 8013a80:	0022      	movs	r2, r4
 8013a82:	002b      	movs	r3, r5
 8013a84:	f7ec fd7c 	bl	8000580 <__aeabi_uldivmod>
 8013a88:	0002      	movs	r2, r0
 8013a8a:	000b      	movs	r3, r1
 8013a8c:	0013      	movs	r3, r2
 8013a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8013a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a92:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8013a94:	e00d      	b.n	8013ab2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8013a96:	4b09      	ldr	r3, [pc, #36]	@ (8013abc <HAL_RCC_GetSysClockFreq+0x138>)
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	0b5b      	lsrs	r3, r3, #13
 8013a9c:	2207      	movs	r2, #7
 8013a9e:	4013      	ands	r3, r2
 8013aa0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	2280      	movs	r2, #128	@ 0x80
 8013aa8:	0212      	lsls	r2, r2, #8
 8013aaa:	409a      	lsls	r2, r3
 8013aac:	0013      	movs	r3, r2
 8013aae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8013ab0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8013ab4:	0018      	movs	r0, r3
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	b00e      	add	sp, #56	@ 0x38
 8013aba:	bdb0      	pop	{r4, r5, r7, pc}
 8013abc:	40021000 	.word	0x40021000
 8013ac0:	003d0900 	.word	0x003d0900
 8013ac4:	00f42400 	.word	0x00f42400
 8013ac8:	007a1200 	.word	0x007a1200
 8013acc:	080226f0 	.word	0x080226f0

08013ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013ad4:	4b02      	ldr	r3, [pc, #8]	@ (8013ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
}
 8013ad8:	0018      	movs	r0, r3
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	46c0      	nop			@ (mov r8, r8)
 8013ae0:	200000c8 	.word	0x200000c8

08013ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013ae8:	f7ff fff2 	bl	8013ad0 <HAL_RCC_GetHCLKFreq>
 8013aec:	0001      	movs	r1, r0
 8013aee:	4b06      	ldr	r3, [pc, #24]	@ (8013b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	0a1b      	lsrs	r3, r3, #8
 8013af4:	2207      	movs	r2, #7
 8013af6:	4013      	ands	r3, r2
 8013af8:	4a04      	ldr	r2, [pc, #16]	@ (8013b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8013afa:	5cd3      	ldrb	r3, [r2, r3]
 8013afc:	40d9      	lsrs	r1, r3
 8013afe:	000b      	movs	r3, r1
}
 8013b00:	0018      	movs	r0, r3
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	46c0      	nop			@ (mov r8, r8)
 8013b08:	40021000 	.word	0x40021000
 8013b0c:	080226e8 	.word	0x080226e8

08013b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8013b14:	f7ff ffdc 	bl	8013ad0 <HAL_RCC_GetHCLKFreq>
 8013b18:	0001      	movs	r1, r0
 8013b1a:	4b06      	ldr	r3, [pc, #24]	@ (8013b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013b1c:	68db      	ldr	r3, [r3, #12]
 8013b1e:	0adb      	lsrs	r3, r3, #11
 8013b20:	2207      	movs	r2, #7
 8013b22:	4013      	ands	r3, r2
 8013b24:	4a04      	ldr	r2, [pc, #16]	@ (8013b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8013b26:	5cd3      	ldrb	r3, [r2, r3]
 8013b28:	40d9      	lsrs	r1, r3
 8013b2a:	000b      	movs	r3, r1
}
 8013b2c:	0018      	movs	r0, r3
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	46c0      	nop			@ (mov r8, r8)
 8013b34:	40021000 	.word	0x40021000
 8013b38:	080226e8 	.word	0x080226e8

08013b3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8013b44:	2017      	movs	r0, #23
 8013b46:	183b      	adds	r3, r7, r0
 8013b48:	2200      	movs	r2, #0
 8013b4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2220      	movs	r2, #32
 8013b52:	4013      	ands	r3, r2
 8013b54:	d100      	bne.n	8013b58 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8013b56:	e0c7      	b.n	8013ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013b58:	4b9b      	ldr	r3, [pc, #620]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013b5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b5c:	2380      	movs	r3, #128	@ 0x80
 8013b5e:	055b      	lsls	r3, r3, #21
 8013b60:	4013      	ands	r3, r2
 8013b62:	d109      	bne.n	8013b78 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013b64:	4b98      	ldr	r3, [pc, #608]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013b66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b68:	4b97      	ldr	r3, [pc, #604]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013b6a:	2180      	movs	r1, #128	@ 0x80
 8013b6c:	0549      	lsls	r1, r1, #21
 8013b6e:	430a      	orrs	r2, r1
 8013b70:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8013b72:	183b      	adds	r3, r7, r0
 8013b74:	2201      	movs	r2, #1
 8013b76:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b78:	4b94      	ldr	r3, [pc, #592]	@ (8013dcc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	2380      	movs	r3, #128	@ 0x80
 8013b7e:	005b      	lsls	r3, r3, #1
 8013b80:	4013      	ands	r3, r2
 8013b82:	d11a      	bne.n	8013bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013b84:	4b91      	ldr	r3, [pc, #580]	@ (8013dcc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	4b90      	ldr	r3, [pc, #576]	@ (8013dcc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8013b8a:	2180      	movs	r1, #128	@ 0x80
 8013b8c:	0049      	lsls	r1, r1, #1
 8013b8e:	430a      	orrs	r2, r1
 8013b90:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013b92:	f7f9 f97b 	bl	800ce8c <HAL_GetTick>
 8013b96:	0003      	movs	r3, r0
 8013b98:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b9a:	e008      	b.n	8013bae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013b9c:	f7f9 f976 	bl	800ce8c <HAL_GetTick>
 8013ba0:	0002      	movs	r2, r0
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	1ad3      	subs	r3, r2, r3
 8013ba6:	2b64      	cmp	r3, #100	@ 0x64
 8013ba8:	d901      	bls.n	8013bae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8013baa:	2303      	movs	r3, #3
 8013bac:	e107      	b.n	8013dbe <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013bae:	4b87      	ldr	r3, [pc, #540]	@ (8013dcc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	2380      	movs	r3, #128	@ 0x80
 8013bb4:	005b      	lsls	r3, r3, #1
 8013bb6:	4013      	ands	r3, r2
 8013bb8:	d0f0      	beq.n	8013b9c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8013bba:	4b83      	ldr	r3, [pc, #524]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	23c0      	movs	r3, #192	@ 0xc0
 8013bc0:	039b      	lsls	r3, r3, #14
 8013bc2:	4013      	ands	r3, r2
 8013bc4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	685a      	ldr	r2, [r3, #4]
 8013bca:	23c0      	movs	r3, #192	@ 0xc0
 8013bcc:	039b      	lsls	r3, r3, #14
 8013bce:	4013      	ands	r3, r2
 8013bd0:	68fa      	ldr	r2, [r7, #12]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d013      	beq.n	8013bfe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	685a      	ldr	r2, [r3, #4]
 8013bda:	23c0      	movs	r3, #192	@ 0xc0
 8013bdc:	029b      	lsls	r3, r3, #10
 8013bde:	401a      	ands	r2, r3
 8013be0:	23c0      	movs	r3, #192	@ 0xc0
 8013be2:	029b      	lsls	r3, r3, #10
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d10a      	bne.n	8013bfe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013be8:	4b77      	ldr	r3, [pc, #476]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	2380      	movs	r3, #128	@ 0x80
 8013bee:	029b      	lsls	r3, r3, #10
 8013bf0:	401a      	ands	r2, r3
 8013bf2:	2380      	movs	r3, #128	@ 0x80
 8013bf4:	029b      	lsls	r3, r3, #10
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d101      	bne.n	8013bfe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	e0df      	b.n	8013dbe <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8013bfe:	4b72      	ldr	r3, [pc, #456]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c02:	23c0      	movs	r3, #192	@ 0xc0
 8013c04:	029b      	lsls	r3, r3, #10
 8013c06:	4013      	ands	r3, r2
 8013c08:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d03b      	beq.n	8013c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	685a      	ldr	r2, [r3, #4]
 8013c14:	23c0      	movs	r3, #192	@ 0xc0
 8013c16:	029b      	lsls	r3, r3, #10
 8013c18:	4013      	ands	r3, r2
 8013c1a:	68fa      	ldr	r2, [r7, #12]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d033      	beq.n	8013c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2220      	movs	r2, #32
 8013c26:	4013      	ands	r3, r2
 8013c28:	d02e      	beq.n	8013c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8013c2a:	4b67      	ldr	r3, [pc, #412]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013c2e:	4a68      	ldr	r2, [pc, #416]	@ (8013dd0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8013c30:	4013      	ands	r3, r2
 8013c32:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013c34:	4b64      	ldr	r3, [pc, #400]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c38:	4b63      	ldr	r3, [pc, #396]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c3a:	2180      	movs	r1, #128	@ 0x80
 8013c3c:	0309      	lsls	r1, r1, #12
 8013c3e:	430a      	orrs	r2, r1
 8013c40:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013c42:	4b61      	ldr	r3, [pc, #388]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c46:	4b60      	ldr	r3, [pc, #384]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c48:	4962      	ldr	r1, [pc, #392]	@ (8013dd4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8013c4a:	400a      	ands	r2, r1
 8013c4c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8013c4e:	4b5e      	ldr	r3, [pc, #376]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8013c54:	68fa      	ldr	r2, [r7, #12]
 8013c56:	2380      	movs	r3, #128	@ 0x80
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	4013      	ands	r3, r2
 8013c5c:	d014      	beq.n	8013c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c5e:	f7f9 f915 	bl	800ce8c <HAL_GetTick>
 8013c62:	0003      	movs	r3, r0
 8013c64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013c66:	e009      	b.n	8013c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013c68:	f7f9 f910 	bl	800ce8c <HAL_GetTick>
 8013c6c:	0002      	movs	r2, r0
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	1ad3      	subs	r3, r2, r3
 8013c72:	4a59      	ldr	r2, [pc, #356]	@ (8013dd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8013c74:	4293      	cmp	r3, r2
 8013c76:	d901      	bls.n	8013c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8013c78:	2303      	movs	r3, #3
 8013c7a:	e0a0      	b.n	8013dbe <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013c7c:	4b52      	ldr	r3, [pc, #328]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013c7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c80:	2380      	movs	r3, #128	@ 0x80
 8013c82:	009b      	lsls	r3, r3, #2
 8013c84:	4013      	ands	r3, r2
 8013c86:	d0ef      	beq.n	8013c68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2220      	movs	r2, #32
 8013c8e:	4013      	ands	r3, r2
 8013c90:	d01f      	beq.n	8013cd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	685a      	ldr	r2, [r3, #4]
 8013c96:	23c0      	movs	r3, #192	@ 0xc0
 8013c98:	029b      	lsls	r3, r3, #10
 8013c9a:	401a      	ands	r2, r3
 8013c9c:	23c0      	movs	r3, #192	@ 0xc0
 8013c9e:	029b      	lsls	r3, r3, #10
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d10c      	bne.n	8013cbe <HAL_RCCEx_PeriphCLKConfig+0x182>
 8013ca4:	4b48      	ldr	r3, [pc, #288]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8013ddc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8013caa:	4013      	ands	r3, r2
 8013cac:	0019      	movs	r1, r3
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	685a      	ldr	r2, [r3, #4]
 8013cb2:	23c0      	movs	r3, #192	@ 0xc0
 8013cb4:	039b      	lsls	r3, r3, #14
 8013cb6:	401a      	ands	r2, r3
 8013cb8:	4b43      	ldr	r3, [pc, #268]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013cba:	430a      	orrs	r2, r1
 8013cbc:	601a      	str	r2, [r3, #0]
 8013cbe:	4b42      	ldr	r3, [pc, #264]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013cc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	685a      	ldr	r2, [r3, #4]
 8013cc6:	23c0      	movs	r3, #192	@ 0xc0
 8013cc8:	029b      	lsls	r3, r3, #10
 8013cca:	401a      	ands	r2, r3
 8013ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013cce:	430a      	orrs	r2, r1
 8013cd0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8013cd2:	2317      	movs	r3, #23
 8013cd4:	18fb      	adds	r3, r7, r3
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	2b01      	cmp	r3, #1
 8013cda:	d105      	bne.n	8013ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013cde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ce0:	4b39      	ldr	r3, [pc, #228]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013ce2:	493f      	ldr	r1, [pc, #252]	@ (8013de0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8013ce4:	400a      	ands	r2, r1
 8013ce6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2201      	movs	r2, #1
 8013cee:	4013      	ands	r3, r2
 8013cf0:	d009      	beq.n	8013d06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013cf2:	4b35      	ldr	r3, [pc, #212]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013cf6:	2203      	movs	r2, #3
 8013cf8:	4393      	bics	r3, r2
 8013cfa:	0019      	movs	r1, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	689a      	ldr	r2, [r3, #8]
 8013d00:	4b31      	ldr	r3, [pc, #196]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d02:	430a      	orrs	r2, r1
 8013d04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	2202      	movs	r2, #2
 8013d0c:	4013      	ands	r3, r2
 8013d0e:	d009      	beq.n	8013d24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013d10:	4b2d      	ldr	r3, [pc, #180]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d14:	220c      	movs	r2, #12
 8013d16:	4393      	bics	r3, r2
 8013d18:	0019      	movs	r1, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	68da      	ldr	r2, [r3, #12]
 8013d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d20:	430a      	orrs	r2, r1
 8013d22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2204      	movs	r2, #4
 8013d2a:	4013      	ands	r3, r2
 8013d2c:	d009      	beq.n	8013d42 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013d2e:	4b26      	ldr	r3, [pc, #152]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d32:	4a2c      	ldr	r2, [pc, #176]	@ (8013de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8013d34:	4013      	ands	r3, r2
 8013d36:	0019      	movs	r1, r3
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	691a      	ldr	r2, [r3, #16]
 8013d3c:	4b22      	ldr	r3, [pc, #136]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d3e:	430a      	orrs	r2, r1
 8013d40:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2208      	movs	r2, #8
 8013d48:	4013      	ands	r3, r2
 8013d4a:	d009      	beq.n	8013d60 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d50:	4a25      	ldr	r2, [pc, #148]	@ (8013de8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8013d52:	4013      	ands	r3, r2
 8013d54:	0019      	movs	r1, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	695a      	ldr	r2, [r3, #20]
 8013d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d5c:	430a      	orrs	r2, r1
 8013d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	2380      	movs	r3, #128	@ 0x80
 8013d66:	005b      	lsls	r3, r3, #1
 8013d68:	4013      	ands	r3, r2
 8013d6a:	d009      	beq.n	8013d80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8013d6c:	4b16      	ldr	r3, [pc, #88]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d70:	4a17      	ldr	r2, [pc, #92]	@ (8013dd0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8013d72:	4013      	ands	r3, r2
 8013d74:	0019      	movs	r1, r3
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	699a      	ldr	r2, [r3, #24]
 8013d7a:	4b13      	ldr	r3, [pc, #76]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d7c:	430a      	orrs	r2, r1
 8013d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2240      	movs	r2, #64	@ 0x40
 8013d86:	4013      	ands	r3, r2
 8013d88:	d009      	beq.n	8013d9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d8e:	4a17      	ldr	r2, [pc, #92]	@ (8013dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8013d90:	4013      	ands	r3, r2
 8013d92:	0019      	movs	r1, r3
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6a1a      	ldr	r2, [r3, #32]
 8013d98:	4b0b      	ldr	r3, [pc, #44]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013d9a:	430a      	orrs	r2, r1
 8013d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2280      	movs	r2, #128	@ 0x80
 8013da4:	4013      	ands	r3, r2
 8013da6:	d009      	beq.n	8013dbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8013da8:	4b07      	ldr	r3, [pc, #28]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013dac:	4a10      	ldr	r2, [pc, #64]	@ (8013df0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8013dae:	4013      	ands	r3, r2
 8013db0:	0019      	movs	r1, r3
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	69da      	ldr	r2, [r3, #28]
 8013db6:	4b04      	ldr	r3, [pc, #16]	@ (8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8013db8:	430a      	orrs	r2, r1
 8013dba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	0018      	movs	r0, r3
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	b006      	add	sp, #24
 8013dc4:	bd80      	pop	{r7, pc}
 8013dc6:	46c0      	nop			@ (mov r8, r8)
 8013dc8:	40021000 	.word	0x40021000
 8013dcc:	40007000 	.word	0x40007000
 8013dd0:	fffcffff 	.word	0xfffcffff
 8013dd4:	fff7ffff 	.word	0xfff7ffff
 8013dd8:	00001388 	.word	0x00001388
 8013ddc:	ffcfffff 	.word	0xffcfffff
 8013de0:	efffffff 	.word	0xefffffff
 8013de4:	fffff3ff 	.word	0xfffff3ff
 8013de8:	ffffcfff 	.word	0xffffcfff
 8013dec:	fbffffff 	.word	0xfbffffff
 8013df0:	fff3ffff 	.word	0xfff3ffff

08013df4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013df4:	b5b0      	push	{r4, r5, r7, lr}
 8013df6:	b084      	sub	sp, #16
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013dfc:	230f      	movs	r3, #15
 8013dfe:	18fb      	adds	r3, r7, r3
 8013e00:	2201      	movs	r2, #1
 8013e02:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d101      	bne.n	8013e0e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	e088      	b.n	8013f20 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2221      	movs	r2, #33	@ 0x21
 8013e12:	5c9b      	ldrb	r3, [r3, r2]
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d107      	bne.n	8013e2a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2220      	movs	r2, #32
 8013e1e:	2100      	movs	r1, #0
 8013e20:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	0018      	movs	r0, r3
 8013e26:	f7f4 f93d 	bl	80080a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2221      	movs	r2, #33	@ 0x21
 8013e2e:	2102      	movs	r1, #2
 8013e30:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	2210      	movs	r2, #16
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	2b10      	cmp	r3, #16
 8013e3e:	d05f      	beq.n	8013f00 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	22ca      	movs	r2, #202	@ 0xca
 8013e46:	625a      	str	r2, [r3, #36]	@ 0x24
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2253      	movs	r2, #83	@ 0x53
 8013e4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8013e50:	250f      	movs	r5, #15
 8013e52:	197c      	adds	r4, r7, r5
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	0018      	movs	r0, r3
 8013e58:	f000 fa7c 	bl	8014354 <RTC_EnterInitMode>
 8013e5c:	0003      	movs	r3, r0
 8013e5e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8013e60:	0028      	movs	r0, r5
 8013e62:	183b      	adds	r3, r7, r0
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d12c      	bne.n	8013ec4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	689a      	ldr	r2, [r3, #8]
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	492c      	ldr	r1, [pc, #176]	@ (8013f28 <HAL_RTC_Init+0x134>)
 8013e76:	400a      	ands	r2, r1
 8013e78:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	6899      	ldr	r1, [r3, #8]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	685a      	ldr	r2, [r3, #4]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	691b      	ldr	r3, [r3, #16]
 8013e88:	431a      	orrs	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	699b      	ldr	r3, [r3, #24]
 8013e8e:	431a      	orrs	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	430a      	orrs	r2, r1
 8013e96:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	68d2      	ldr	r2, [r2, #12]
 8013ea0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	6919      	ldr	r1, [r3, #16]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	689b      	ldr	r3, [r3, #8]
 8013eac:	041a      	lsls	r2, r3, #16
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	430a      	orrs	r2, r1
 8013eb4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8013eb6:	183c      	adds	r4, r7, r0
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	0018      	movs	r0, r3
 8013ebc:	f000 fa8e 	bl	80143dc <RTC_ExitInitMode>
 8013ec0:	0003      	movs	r3, r0
 8013ec2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8013ec4:	230f      	movs	r3, #15
 8013ec6:	18fb      	adds	r3, r7, r3
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d113      	bne.n	8013ef6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	2103      	movs	r1, #3
 8013eda:	438a      	bics	r2, r1
 8013edc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	69da      	ldr	r2, [r3, #28]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	695b      	ldr	r3, [r3, #20]
 8013eec:	431a      	orrs	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	430a      	orrs	r2, r1
 8013ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	22ff      	movs	r2, #255	@ 0xff
 8013efc:	625a      	str	r2, [r3, #36]	@ 0x24
 8013efe:	e003      	b.n	8013f08 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8013f00:	230f      	movs	r3, #15
 8013f02:	18fb      	adds	r3, r7, r3
 8013f04:	2200      	movs	r2, #0
 8013f06:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8013f08:	230f      	movs	r3, #15
 8013f0a:	18fb      	adds	r3, r7, r3
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d103      	bne.n	8013f1a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2221      	movs	r2, #33	@ 0x21
 8013f16:	2101      	movs	r1, #1
 8013f18:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8013f1a:	230f      	movs	r3, #15
 8013f1c:	18fb      	adds	r3, r7, r3
 8013f1e:	781b      	ldrb	r3, [r3, #0]
}
 8013f20:	0018      	movs	r0, r3
 8013f22:	46bd      	mov	sp, r7
 8013f24:	b004      	add	sp, #16
 8013f26:	bdb0      	pop	{r4, r5, r7, pc}
 8013f28:	ff8fffbf 	.word	0xff8fffbf

08013f2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013f2c:	b5b0      	push	{r4, r5, r7, lr}
 8013f2e:	b086      	sub	sp, #24
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	60f8      	str	r0, [r7, #12]
 8013f34:	60b9      	str	r1, [r7, #8]
 8013f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2220      	movs	r2, #32
 8013f40:	5c9b      	ldrb	r3, [r3, r2]
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d101      	bne.n	8013f4a <HAL_RTC_SetTime+0x1e>
 8013f46:	2302      	movs	r3, #2
 8013f48:	e092      	b.n	8014070 <HAL_RTC_SetTime+0x144>
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2220      	movs	r2, #32
 8013f4e:	2101      	movs	r1, #1
 8013f50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2221      	movs	r2, #33	@ 0x21
 8013f56:	2102      	movs	r1, #2
 8013f58:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d125      	bne.n	8013fac <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	2240      	movs	r2, #64	@ 0x40
 8013f68:	4013      	ands	r3, r2
 8013f6a:	d102      	bne.n	8013f72 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	0018      	movs	r0, r3
 8013f78:	f000 fa5a 	bl	8014430 <RTC_ByteToBcd2>
 8013f7c:	0003      	movs	r3, r0
 8013f7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	785b      	ldrb	r3, [r3, #1]
 8013f84:	0018      	movs	r0, r3
 8013f86:	f000 fa53 	bl	8014430 <RTC_ByteToBcd2>
 8013f8a:	0003      	movs	r3, r0
 8013f8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013f8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	789b      	ldrb	r3, [r3, #2]
 8013f94:	0018      	movs	r0, r3
 8013f96:	f000 fa4b 	bl	8014430 <RTC_ByteToBcd2>
 8013f9a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013f9c:	0022      	movs	r2, r4
 8013f9e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	78db      	ldrb	r3, [r3, #3]
 8013fa4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013fa6:	4313      	orrs	r3, r2
 8013fa8:	617b      	str	r3, [r7, #20]
 8013faa:	e017      	b.n	8013fdc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	689b      	ldr	r3, [r3, #8]
 8013fb2:	2240      	movs	r2, #64	@ 0x40
 8013fb4:	4013      	ands	r3, r2
 8013fb6:	d102      	bne.n	8013fbe <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	785b      	ldrb	r3, [r3, #1]
 8013fc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013fca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8013fcc:	68ba      	ldr	r2, [r7, #8]
 8013fce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013fd0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	78db      	ldrb	r3, [r3, #3]
 8013fd6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	22ca      	movs	r2, #202	@ 0xca
 8013fe2:	625a      	str	r2, [r3, #36]	@ 0x24
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	2253      	movs	r2, #83	@ 0x53
 8013fea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013fec:	2513      	movs	r5, #19
 8013fee:	197c      	adds	r4, r7, r5
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	0018      	movs	r0, r3
 8013ff4:	f000 f9ae 	bl	8014354 <RTC_EnterInitMode>
 8013ff8:	0003      	movs	r3, r0
 8013ffa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8013ffc:	0028      	movs	r0, r5
 8013ffe:	183b      	adds	r3, r7, r0
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d120      	bne.n	8014048 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	697a      	ldr	r2, [r7, #20]
 801400c:	491a      	ldr	r1, [pc, #104]	@ (8014078 <HAL_RTC_SetTime+0x14c>)
 801400e:	400a      	ands	r2, r1
 8014010:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	689a      	ldr	r2, [r3, #8]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	4917      	ldr	r1, [pc, #92]	@ (801407c <HAL_RTC_SetTime+0x150>)
 801401e:	400a      	ands	r2, r1
 8014020:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	6899      	ldr	r1, [r3, #8]
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	68da      	ldr	r2, [r3, #12]
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	691b      	ldr	r3, [r3, #16]
 8014030:	431a      	orrs	r2, r3
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	430a      	orrs	r2, r1
 8014038:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801403a:	183c      	adds	r4, r7, r0
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	0018      	movs	r0, r3
 8014040:	f000 f9cc 	bl	80143dc <RTC_ExitInitMode>
 8014044:	0003      	movs	r3, r0
 8014046:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014048:	2313      	movs	r3, #19
 801404a:	18fb      	adds	r3, r7, r3
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d103      	bne.n	801405a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	2221      	movs	r2, #33	@ 0x21
 8014056:	2101      	movs	r1, #1
 8014058:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	22ff      	movs	r2, #255	@ 0xff
 8014060:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	2220      	movs	r2, #32
 8014066:	2100      	movs	r1, #0
 8014068:	5499      	strb	r1, [r3, r2]

  return status;
 801406a:	2313      	movs	r3, #19
 801406c:	18fb      	adds	r3, r7, r3
 801406e:	781b      	ldrb	r3, [r3, #0]
}
 8014070:	0018      	movs	r0, r3
 8014072:	46bd      	mov	sp, r7
 8014074:	b006      	add	sp, #24
 8014076:	bdb0      	pop	{r4, r5, r7, pc}
 8014078:	007f7f7f 	.word	0x007f7f7f
 801407c:	fffbffff 	.word	0xfffbffff

08014080 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b086      	sub	sp, #24
 8014084:	af00      	add	r7, sp, #0
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801408c:	2300      	movs	r3, #0
 801408e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	691b      	ldr	r3, [r3, #16]
 80140a0:	045b      	lsls	r3, r3, #17
 80140a2:	0c5a      	lsrs	r2, r3, #17
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4a22      	ldr	r2, [pc, #136]	@ (8014138 <HAL_RTC_GetTime+0xb8>)
 80140b0:	4013      	ands	r3, r2
 80140b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	0c1b      	lsrs	r3, r3, #16
 80140b8:	b2db      	uxtb	r3, r3
 80140ba:	223f      	movs	r2, #63	@ 0x3f
 80140bc:	4013      	ands	r3, r2
 80140be:	b2da      	uxtb	r2, r3
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	0a1b      	lsrs	r3, r3, #8
 80140c8:	b2db      	uxtb	r3, r3
 80140ca:	227f      	movs	r2, #127	@ 0x7f
 80140cc:	4013      	ands	r3, r2
 80140ce:	b2da      	uxtb	r2, r3
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	227f      	movs	r2, #127	@ 0x7f
 80140da:	4013      	ands	r3, r2
 80140dc:	b2da      	uxtb	r2, r3
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80140e2:	697b      	ldr	r3, [r7, #20]
 80140e4:	0d9b      	lsrs	r3, r3, #22
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	2201      	movs	r2, #1
 80140ea:	4013      	ands	r3, r2
 80140ec:	b2da      	uxtb	r2, r3
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d11a      	bne.n	801412e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	0018      	movs	r0, r3
 80140fe:	f000 f9b8 	bl	8014472 <RTC_Bcd2ToByte>
 8014102:	0003      	movs	r3, r0
 8014104:	001a      	movs	r2, r3
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	785b      	ldrb	r3, [r3, #1]
 801410e:	0018      	movs	r0, r3
 8014110:	f000 f9af 	bl	8014472 <RTC_Bcd2ToByte>
 8014114:	0003      	movs	r3, r0
 8014116:	001a      	movs	r2, r3
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	789b      	ldrb	r3, [r3, #2]
 8014120:	0018      	movs	r0, r3
 8014122:	f000 f9a6 	bl	8014472 <RTC_Bcd2ToByte>
 8014126:	0003      	movs	r3, r0
 8014128:	001a      	movs	r2, r3
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801412e:	2300      	movs	r3, #0
}
 8014130:	0018      	movs	r0, r3
 8014132:	46bd      	mov	sp, r7
 8014134:	b006      	add	sp, #24
 8014136:	bd80      	pop	{r7, pc}
 8014138:	007f7f7f 	.word	0x007f7f7f

0801413c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801413c:	b5b0      	push	{r4, r5, r7, lr}
 801413e:	b086      	sub	sp, #24
 8014140:	af00      	add	r7, sp, #0
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	60b9      	str	r1, [r7, #8]
 8014146:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014148:	2300      	movs	r3, #0
 801414a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2220      	movs	r2, #32
 8014150:	5c9b      	ldrb	r3, [r3, r2]
 8014152:	2b01      	cmp	r3, #1
 8014154:	d101      	bne.n	801415a <HAL_RTC_SetDate+0x1e>
 8014156:	2302      	movs	r3, #2
 8014158:	e07e      	b.n	8014258 <HAL_RTC_SetDate+0x11c>
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2220      	movs	r2, #32
 801415e:	2101      	movs	r1, #1
 8014160:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2221      	movs	r2, #33	@ 0x21
 8014166:	2102      	movs	r1, #2
 8014168:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d10e      	bne.n	801418e <HAL_RTC_SetDate+0x52>
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	785b      	ldrb	r3, [r3, #1]
 8014174:	001a      	movs	r2, r3
 8014176:	2310      	movs	r3, #16
 8014178:	4013      	ands	r3, r2
 801417a:	d008      	beq.n	801418e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	785b      	ldrb	r3, [r3, #1]
 8014180:	2210      	movs	r2, #16
 8014182:	4393      	bics	r3, r2
 8014184:	b2db      	uxtb	r3, r3
 8014186:	330a      	adds	r3, #10
 8014188:	b2da      	uxtb	r2, r3
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d11c      	bne.n	80141ce <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	78db      	ldrb	r3, [r3, #3]
 8014198:	0018      	movs	r0, r3
 801419a:	f000 f949 	bl	8014430 <RTC_ByteToBcd2>
 801419e:	0003      	movs	r3, r0
 80141a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	785b      	ldrb	r3, [r3, #1]
 80141a6:	0018      	movs	r0, r3
 80141a8:	f000 f942 	bl	8014430 <RTC_ByteToBcd2>
 80141ac:	0003      	movs	r3, r0
 80141ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80141b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	789b      	ldrb	r3, [r3, #2]
 80141b6:	0018      	movs	r0, r3
 80141b8:	f000 f93a 	bl	8014430 <RTC_ByteToBcd2>
 80141bc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80141be:	0022      	movs	r2, r4
 80141c0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	781b      	ldrb	r3, [r3, #0]
 80141c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80141c8:	4313      	orrs	r3, r2
 80141ca:	617b      	str	r3, [r7, #20]
 80141cc:	e00e      	b.n	80141ec <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	78db      	ldrb	r3, [r3, #3]
 80141d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	785b      	ldrb	r3, [r3, #1]
 80141d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80141da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80141dc:	68ba      	ldr	r2, [r7, #8]
 80141de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80141e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80141e8:	4313      	orrs	r3, r2
 80141ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	22ca      	movs	r2, #202	@ 0xca
 80141f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	2253      	movs	r2, #83	@ 0x53
 80141fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80141fc:	2513      	movs	r5, #19
 80141fe:	197c      	adds	r4, r7, r5
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	0018      	movs	r0, r3
 8014204:	f000 f8a6 	bl	8014354 <RTC_EnterInitMode>
 8014208:	0003      	movs	r3, r0
 801420a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801420c:	0028      	movs	r0, r5
 801420e:	183b      	adds	r3, r7, r0
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d10c      	bne.n	8014230 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	4910      	ldr	r1, [pc, #64]	@ (8014260 <HAL_RTC_SetDate+0x124>)
 801421e:	400a      	ands	r2, r1
 8014220:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014222:	183c      	adds	r4, r7, r0
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	0018      	movs	r0, r3
 8014228:	f000 f8d8 	bl	80143dc <RTC_ExitInitMode>
 801422c:	0003      	movs	r3, r0
 801422e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014230:	2313      	movs	r3, #19
 8014232:	18fb      	adds	r3, r7, r3
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d103      	bne.n	8014242 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2221      	movs	r2, #33	@ 0x21
 801423e:	2101      	movs	r1, #1
 8014240:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	22ff      	movs	r2, #255	@ 0xff
 8014248:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	2220      	movs	r2, #32
 801424e:	2100      	movs	r1, #0
 8014250:	5499      	strb	r1, [r3, r2]

  return status;
 8014252:	2313      	movs	r3, #19
 8014254:	18fb      	adds	r3, r7, r3
 8014256:	781b      	ldrb	r3, [r3, #0]
}
 8014258:	0018      	movs	r0, r3
 801425a:	46bd      	mov	sp, r7
 801425c:	b006      	add	sp, #24
 801425e:	bdb0      	pop	{r4, r5, r7, pc}
 8014260:	00ffff3f 	.word	0x00ffff3f

08014264 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b086      	sub	sp, #24
 8014268:	af00      	add	r7, sp, #0
 801426a:	60f8      	str	r0, [r7, #12]
 801426c:	60b9      	str	r1, [r7, #8]
 801426e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014270:	2300      	movs	r3, #0
 8014272:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	4a21      	ldr	r2, [pc, #132]	@ (8014300 <HAL_RTC_GetDate+0x9c>)
 801427c:	4013      	ands	r3, r2
 801427e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	0c1b      	lsrs	r3, r3, #16
 8014284:	b2da      	uxtb	r2, r3
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	0a1b      	lsrs	r3, r3, #8
 801428e:	b2db      	uxtb	r3, r3
 8014290:	221f      	movs	r2, #31
 8014292:	4013      	ands	r3, r2
 8014294:	b2da      	uxtb	r2, r3
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	b2db      	uxtb	r3, r3
 801429e:	223f      	movs	r2, #63	@ 0x3f
 80142a0:	4013      	ands	r3, r2
 80142a2:	b2da      	uxtb	r2, r3
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	0b5b      	lsrs	r3, r3, #13
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	2207      	movs	r2, #7
 80142b0:	4013      	ands	r3, r2
 80142b2:	b2da      	uxtb	r2, r3
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d11a      	bne.n	80142f4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	78db      	ldrb	r3, [r3, #3]
 80142c2:	0018      	movs	r0, r3
 80142c4:	f000 f8d5 	bl	8014472 <RTC_Bcd2ToByte>
 80142c8:	0003      	movs	r3, r0
 80142ca:	001a      	movs	r2, r3
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	785b      	ldrb	r3, [r3, #1]
 80142d4:	0018      	movs	r0, r3
 80142d6:	f000 f8cc 	bl	8014472 <RTC_Bcd2ToByte>
 80142da:	0003      	movs	r3, r0
 80142dc:	001a      	movs	r2, r3
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	789b      	ldrb	r3, [r3, #2]
 80142e6:	0018      	movs	r0, r3
 80142e8:	f000 f8c3 	bl	8014472 <RTC_Bcd2ToByte>
 80142ec:	0003      	movs	r3, r0
 80142ee:	001a      	movs	r2, r3
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80142f4:	2300      	movs	r3, #0
}
 80142f6:	0018      	movs	r0, r3
 80142f8:	46bd      	mov	sp, r7
 80142fa:	b006      	add	sp, #24
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	46c0      	nop			@ (mov r8, r8)
 8014300:	00ffff3f 	.word	0x00ffff3f

08014304 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801430c:	2300      	movs	r3, #0
 801430e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	4a0e      	ldr	r2, [pc, #56]	@ (8014350 <HAL_RTC_WaitForSynchro+0x4c>)
 8014316:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014318:	f7f8 fdb8 	bl	800ce8c <HAL_GetTick>
 801431c:	0003      	movs	r3, r0
 801431e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014320:	e00a      	b.n	8014338 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014322:	f7f8 fdb3 	bl	800ce8c <HAL_GetTick>
 8014326:	0002      	movs	r2, r0
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	1ad2      	subs	r2, r2, r3
 801432c:	23fa      	movs	r3, #250	@ 0xfa
 801432e:	009b      	lsls	r3, r3, #2
 8014330:	429a      	cmp	r2, r3
 8014332:	d901      	bls.n	8014338 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8014334:	2303      	movs	r3, #3
 8014336:	e006      	b.n	8014346 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	2220      	movs	r2, #32
 8014340:	4013      	ands	r3, r2
 8014342:	d0ee      	beq.n	8014322 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8014344:	2300      	movs	r3, #0
}
 8014346:	0018      	movs	r0, r3
 8014348:	46bd      	mov	sp, r7
 801434a:	b004      	add	sp, #16
 801434c:	bd80      	pop	{r7, pc}
 801434e:	46c0      	nop			@ (mov r8, r8)
 8014350:	0001ff5f 	.word	0x0001ff5f

08014354 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801435c:	2300      	movs	r3, #0
 801435e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8014360:	230f      	movs	r3, #15
 8014362:	18fb      	adds	r3, r7, r3
 8014364:	2200      	movs	r2, #0
 8014366:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	68db      	ldr	r3, [r3, #12]
 801436e:	2240      	movs	r2, #64	@ 0x40
 8014370:	4013      	ands	r3, r2
 8014372:	d12c      	bne.n	80143ce <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	68da      	ldr	r2, [r3, #12]
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	2180      	movs	r1, #128	@ 0x80
 8014380:	430a      	orrs	r2, r1
 8014382:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014384:	f7f8 fd82 	bl	800ce8c <HAL_GetTick>
 8014388:	0003      	movs	r3, r0
 801438a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801438c:	e014      	b.n	80143b8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801438e:	f7f8 fd7d 	bl	800ce8c <HAL_GetTick>
 8014392:	0002      	movs	r2, r0
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	1ad2      	subs	r2, r2, r3
 8014398:	200f      	movs	r0, #15
 801439a:	183b      	adds	r3, r7, r0
 801439c:	1839      	adds	r1, r7, r0
 801439e:	7809      	ldrb	r1, [r1, #0]
 80143a0:	7019      	strb	r1, [r3, #0]
 80143a2:	23fa      	movs	r3, #250	@ 0xfa
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d906      	bls.n	80143b8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2221      	movs	r2, #33	@ 0x21
 80143ae:	2104      	movs	r1, #4
 80143b0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80143b2:	183b      	adds	r3, r7, r0
 80143b4:	2201      	movs	r2, #1
 80143b6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	68db      	ldr	r3, [r3, #12]
 80143be:	2240      	movs	r2, #64	@ 0x40
 80143c0:	4013      	ands	r3, r2
 80143c2:	d104      	bne.n	80143ce <RTC_EnterInitMode+0x7a>
 80143c4:	230f      	movs	r3, #15
 80143c6:	18fb      	adds	r3, r7, r3
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d1df      	bne.n	801438e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80143ce:	230f      	movs	r3, #15
 80143d0:	18fb      	adds	r3, r7, r3
 80143d2:	781b      	ldrb	r3, [r3, #0]
}
 80143d4:	0018      	movs	r0, r3
 80143d6:	46bd      	mov	sp, r7
 80143d8:	b004      	add	sp, #16
 80143da:	bd80      	pop	{r7, pc}

080143dc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80143dc:	b590      	push	{r4, r7, lr}
 80143de:	b085      	sub	sp, #20
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80143e4:	240f      	movs	r4, #15
 80143e6:	193b      	adds	r3, r7, r4
 80143e8:	2200      	movs	r2, #0
 80143ea:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	68da      	ldr	r2, [r3, #12]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2180      	movs	r1, #128	@ 0x80
 80143f8:	438a      	bics	r2, r1
 80143fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	2220      	movs	r2, #32
 8014404:	4013      	ands	r3, r2
 8014406:	d10c      	bne.n	8014422 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	0018      	movs	r0, r3
 801440c:	f7ff ff7a 	bl	8014304 <HAL_RTC_WaitForSynchro>
 8014410:	1e03      	subs	r3, r0, #0
 8014412:	d006      	beq.n	8014422 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2221      	movs	r2, #33	@ 0x21
 8014418:	2104      	movs	r1, #4
 801441a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801441c:	193b      	adds	r3, r7, r4
 801441e:	2201      	movs	r2, #1
 8014420:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8014422:	230f      	movs	r3, #15
 8014424:	18fb      	adds	r3, r7, r3
 8014426:	781b      	ldrb	r3, [r3, #0]
}
 8014428:	0018      	movs	r0, r3
 801442a:	46bd      	mov	sp, r7
 801442c:	b005      	add	sp, #20
 801442e:	bd90      	pop	{r4, r7, pc}

08014430 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	0002      	movs	r2, r0
 8014438:	1dfb      	adds	r3, r7, #7
 801443a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801443c:	2300      	movs	r3, #0
 801443e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8014440:	e007      	b.n	8014452 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	3301      	adds	r3, #1
 8014446:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8014448:	1dfb      	adds	r3, r7, #7
 801444a:	1dfa      	adds	r2, r7, #7
 801444c:	7812      	ldrb	r2, [r2, #0]
 801444e:	3a0a      	subs	r2, #10
 8014450:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8014452:	1dfb      	adds	r3, r7, #7
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	2b09      	cmp	r3, #9
 8014458:	d8f3      	bhi.n	8014442 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	b2db      	uxtb	r3, r3
 801445e:	011b      	lsls	r3, r3, #4
 8014460:	b2da      	uxtb	r2, r3
 8014462:	1dfb      	adds	r3, r7, #7
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	4313      	orrs	r3, r2
 8014468:	b2db      	uxtb	r3, r3
}
 801446a:	0018      	movs	r0, r3
 801446c:	46bd      	mov	sp, r7
 801446e:	b004      	add	sp, #16
 8014470:	bd80      	pop	{r7, pc}

08014472 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8014472:	b580      	push	{r7, lr}
 8014474:	b084      	sub	sp, #16
 8014476:	af00      	add	r7, sp, #0
 8014478:	0002      	movs	r2, r0
 801447a:	1dfb      	adds	r3, r7, #7
 801447c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801447e:	2300      	movs	r3, #0
 8014480:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8014482:	1dfb      	adds	r3, r7, #7
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	091b      	lsrs	r3, r3, #4
 8014488:	b2db      	uxtb	r3, r3
 801448a:	001a      	movs	r2, r3
 801448c:	0013      	movs	r3, r2
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	189b      	adds	r3, r3, r2
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	b2da      	uxtb	r2, r3
 801449a:	1dfb      	adds	r3, r7, #7
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	210f      	movs	r1, #15
 80144a0:	400b      	ands	r3, r1
 80144a2:	b2db      	uxtb	r3, r3
 80144a4:	18d3      	adds	r3, r2, r3
 80144a6:	b2db      	uxtb	r3, r3
}
 80144a8:	0018      	movs	r0, r3
 80144aa:	46bd      	mov	sp, r7
 80144ac:	b004      	add	sp, #16
 80144ae:	bd80      	pop	{r7, pc}

080144b0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80144bc:	2300      	movs	r3, #0
 80144be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2220      	movs	r2, #32
 80144c4:	5c9b      	ldrb	r3, [r3, r2]
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d101      	bne.n	80144ce <HAL_RTCEx_SetWakeUpTimer+0x1e>
 80144ca:	2302      	movs	r3, #2
 80144cc:	e096      	b.n	80145fc <HAL_RTCEx_SetWakeUpTimer+0x14c>
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	2220      	movs	r2, #32
 80144d2:	2101      	movs	r1, #1
 80144d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	2221      	movs	r2, #33	@ 0x21
 80144da:	2102      	movs	r1, #2
 80144dc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	22ca      	movs	r2, #202	@ 0xca
 80144e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2253      	movs	r2, #83	@ 0x53
 80144ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	689a      	ldr	r2, [r3, #8]
 80144f4:	2380      	movs	r3, #128	@ 0x80
 80144f6:	00db      	lsls	r3, r3, #3
 80144f8:	4013      	ands	r3, r2
 80144fa:	d021      	beq.n	8014540 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 80144fc:	f7f8 fcc6 	bl	800ce8c <HAL_GetTick>
 8014500:	0003      	movs	r3, r0
 8014502:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8014504:	e016      	b.n	8014534 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014506:	f7f8 fcc1 	bl	800ce8c <HAL_GetTick>
 801450a:	0002      	movs	r2, r0
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	1ad2      	subs	r2, r2, r3
 8014510:	23fa      	movs	r3, #250	@ 0xfa
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	429a      	cmp	r2, r3
 8014516:	d90d      	bls.n	8014534 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	22ff      	movs	r2, #255	@ 0xff
 801451e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	2221      	movs	r2, #33	@ 0x21
 8014524:	2103      	movs	r1, #3
 8014526:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2220      	movs	r2, #32
 801452c:	2100      	movs	r1, #0
 801452e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8014530:	2303      	movs	r3, #3
 8014532:	e063      	b.n	80145fc <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	68db      	ldr	r3, [r3, #12]
 801453a:	2204      	movs	r2, #4
 801453c:	4013      	ands	r3, r2
 801453e:	d1e2      	bne.n	8014506 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	689a      	ldr	r2, [r3, #8]
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	492e      	ldr	r1, [pc, #184]	@ (8014604 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 801454c:	400a      	ands	r2, r1
 801454e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	68db      	ldr	r3, [r3, #12]
 8014556:	22ff      	movs	r2, #255	@ 0xff
 8014558:	401a      	ands	r2, r3
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	492a      	ldr	r1, [pc, #168]	@ (8014608 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8014560:	430a      	orrs	r2, r1
 8014562:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014564:	f7f8 fc92 	bl	800ce8c <HAL_GetTick>
 8014568:	0003      	movs	r3, r0
 801456a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801456c:	e016      	b.n	801459c <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801456e:	f7f8 fc8d 	bl	800ce8c <HAL_GetTick>
 8014572:	0002      	movs	r2, r0
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	1ad2      	subs	r2, r2, r3
 8014578:	23fa      	movs	r3, #250	@ 0xfa
 801457a:	009b      	lsls	r3, r3, #2
 801457c:	429a      	cmp	r2, r3
 801457e:	d90d      	bls.n	801459c <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	22ff      	movs	r2, #255	@ 0xff
 8014586:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2221      	movs	r2, #33	@ 0x21
 801458c:	2103      	movs	r1, #3
 801458e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	2220      	movs	r2, #32
 8014594:	2100      	movs	r1, #0
 8014596:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8014598:	2303      	movs	r3, #3
 801459a:	e02f      	b.n	80145fc <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	68db      	ldr	r3, [r3, #12]
 80145a2:	2204      	movs	r2, #4
 80145a4:	4013      	ands	r3, r2
 80145a6:	d0e2      	beq.n	801456e <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	689a      	ldr	r2, [r3, #8]
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2107      	movs	r1, #7
 80145b4:	438a      	bics	r2, r1
 80145b6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	6899      	ldr	r1, [r3, #8]
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	430a      	orrs	r2, r1
 80145c6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	68ba      	ldr	r2, [r7, #8]
 80145ce:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	689a      	ldr	r2, [r3, #8]
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2180      	movs	r1, #128	@ 0x80
 80145dc:	00c9      	lsls	r1, r1, #3
 80145de:	430a      	orrs	r2, r1
 80145e0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	22ff      	movs	r2, #255	@ 0xff
 80145e8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2221      	movs	r2, #33	@ 0x21
 80145ee:	2101      	movs	r1, #1
 80145f0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2220      	movs	r2, #32
 80145f6:	2100      	movs	r1, #0
 80145f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80145fa:	2300      	movs	r3, #0
}
 80145fc:	0018      	movs	r0, r3
 80145fe:	46bd      	mov	sp, r7
 8014600:	b006      	add	sp, #24
 8014602:	bd80      	pop	{r7, pc}
 8014604:	fffffbff 	.word	0xfffffbff
 8014608:	fffffb7f 	.word	0xfffffb7f

0801460c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d101      	bne.n	801461e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801461a:	2301      	movs	r3, #1
 801461c:	e032      	b.n	8014684 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2239      	movs	r2, #57	@ 0x39
 8014622:	5c9b      	ldrb	r3, [r3, r2]
 8014624:	b2db      	uxtb	r3, r3
 8014626:	2b00      	cmp	r3, #0
 8014628:	d107      	bne.n	801463a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2238      	movs	r2, #56	@ 0x38
 801462e:	2100      	movs	r1, #0
 8014630:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	0018      	movs	r0, r3
 8014636:	f7f7 fde5 	bl	800c204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2239      	movs	r2, #57	@ 0x39
 801463e:	2102      	movs	r1, #2
 8014640:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	3304      	adds	r3, #4
 801464a:	0019      	movs	r1, r3
 801464c:	0010      	movs	r0, r2
 801464e:	f000 fa1d 	bl	8014a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	223e      	movs	r2, #62	@ 0x3e
 8014656:	2101      	movs	r1, #1
 8014658:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	223a      	movs	r2, #58	@ 0x3a
 801465e:	2101      	movs	r1, #1
 8014660:	5499      	strb	r1, [r3, r2]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	223b      	movs	r2, #59	@ 0x3b
 8014666:	2101      	movs	r1, #1
 8014668:	5499      	strb	r1, [r3, r2]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	223c      	movs	r2, #60	@ 0x3c
 801466e:	2101      	movs	r1, #1
 8014670:	5499      	strb	r1, [r3, r2]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	223d      	movs	r2, #61	@ 0x3d
 8014676:	2101      	movs	r1, #1
 8014678:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2239      	movs	r2, #57	@ 0x39
 801467e:	2101      	movs	r1, #1
 8014680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014682:	2300      	movs	r3, #0
}
 8014684:	0018      	movs	r0, r3
 8014686:	46bd      	mov	sp, r7
 8014688:	b002      	add	sp, #8
 801468a:	bd80      	pop	{r7, pc}

0801468c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2239      	movs	r2, #57	@ 0x39
 8014698:	5c9b      	ldrb	r3, [r3, r2]
 801469a:	b2db      	uxtb	r3, r3
 801469c:	2b01      	cmp	r3, #1
 801469e:	d001      	beq.n	80146a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80146a0:	2301      	movs	r3, #1
 80146a2:	e033      	b.n	801470c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2239      	movs	r2, #57	@ 0x39
 80146a8:	2102      	movs	r1, #2
 80146aa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	2380      	movs	r3, #128	@ 0x80
 80146b2:	05db      	lsls	r3, r3, #23
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d00e      	beq.n	80146d6 <HAL_TIM_Base_Start+0x4a>
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4a15      	ldr	r2, [pc, #84]	@ (8014714 <HAL_TIM_Base_Start+0x88>)
 80146be:	4293      	cmp	r3, r2
 80146c0:	d009      	beq.n	80146d6 <HAL_TIM_Base_Start+0x4a>
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	4a14      	ldr	r2, [pc, #80]	@ (8014718 <HAL_TIM_Base_Start+0x8c>)
 80146c8:	4293      	cmp	r3, r2
 80146ca:	d004      	beq.n	80146d6 <HAL_TIM_Base_Start+0x4a>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	4a12      	ldr	r2, [pc, #72]	@ (801471c <HAL_TIM_Base_Start+0x90>)
 80146d2:	4293      	cmp	r3, r2
 80146d4:	d111      	bne.n	80146fa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	689b      	ldr	r3, [r3, #8]
 80146dc:	2207      	movs	r2, #7
 80146de:	4013      	ands	r3, r2
 80146e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2b06      	cmp	r3, #6
 80146e6:	d010      	beq.n	801470a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	2101      	movs	r1, #1
 80146f4:	430a      	orrs	r2, r1
 80146f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80146f8:	e007      	b.n	801470a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	2101      	movs	r1, #1
 8014706:	430a      	orrs	r2, r1
 8014708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801470a:	2300      	movs	r3, #0
}
 801470c:	0018      	movs	r0, r3
 801470e:	46bd      	mov	sp, r7
 8014710:	b004      	add	sp, #16
 8014712:	bd80      	pop	{r7, pc}
 8014714:	40000400 	.word	0x40000400
 8014718:	40010800 	.word	0x40010800
 801471c:	40011400 	.word	0x40011400

08014720 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	6a1b      	ldr	r3, [r3, #32]
 801472e:	4a0a      	ldr	r2, [pc, #40]	@ (8014758 <HAL_TIM_Base_Stop+0x38>)
 8014730:	4013      	ands	r3, r2
 8014732:	d107      	bne.n	8014744 <HAL_TIM_Base_Stop+0x24>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2101      	movs	r1, #1
 8014740:	438a      	bics	r2, r1
 8014742:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2239      	movs	r2, #57	@ 0x39
 8014748:	2101      	movs	r1, #1
 801474a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801474c:	2300      	movs	r3, #0
}
 801474e:	0018      	movs	r0, r3
 8014750:	46bd      	mov	sp, r7
 8014752:	b002      	add	sp, #8
 8014754:	bd80      	pop	{r7, pc}
 8014756:	46c0      	nop			@ (mov r8, r8)
 8014758:	00001111 	.word	0x00001111

0801475c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d101      	bne.n	801476e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801476a:	2301      	movs	r3, #1
 801476c:	e032      	b.n	80147d4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2239      	movs	r2, #57	@ 0x39
 8014772:	5c9b      	ldrb	r3, [r3, r2]
 8014774:	b2db      	uxtb	r3, r3
 8014776:	2b00      	cmp	r3, #0
 8014778:	d107      	bne.n	801478a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2238      	movs	r2, #56	@ 0x38
 801477e:	2100      	movs	r1, #0
 8014780:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	0018      	movs	r0, r3
 8014786:	f7f7 fd19 	bl	800c1bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2239      	movs	r2, #57	@ 0x39
 801478e:	2102      	movs	r1, #2
 8014790:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	3304      	adds	r3, #4
 801479a:	0019      	movs	r1, r3
 801479c:	0010      	movs	r0, r2
 801479e:	f000 f975 	bl	8014a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	223e      	movs	r2, #62	@ 0x3e
 80147a6:	2101      	movs	r1, #1
 80147a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	223a      	movs	r2, #58	@ 0x3a
 80147ae:	2101      	movs	r1, #1
 80147b0:	5499      	strb	r1, [r3, r2]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	223b      	movs	r2, #59	@ 0x3b
 80147b6:	2101      	movs	r1, #1
 80147b8:	5499      	strb	r1, [r3, r2]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	223c      	movs	r2, #60	@ 0x3c
 80147be:	2101      	movs	r1, #1
 80147c0:	5499      	strb	r1, [r3, r2]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	223d      	movs	r2, #61	@ 0x3d
 80147c6:	2101      	movs	r1, #1
 80147c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	2239      	movs	r2, #57	@ 0x39
 80147ce:	2101      	movs	r1, #1
 80147d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80147d2:	2300      	movs	r3, #0
}
 80147d4:	0018      	movs	r0, r3
 80147d6:	46bd      	mov	sp, r7
 80147d8:	b002      	add	sp, #8
 80147da:	bd80      	pop	{r7, pc}

080147dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d108      	bne.n	80147fe <HAL_TIM_PWM_Start+0x22>
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	223a      	movs	r2, #58	@ 0x3a
 80147f0:	5c9b      	ldrb	r3, [r3, r2]
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	3b01      	subs	r3, #1
 80147f6:	1e5a      	subs	r2, r3, #1
 80147f8:	4193      	sbcs	r3, r2
 80147fa:	b2db      	uxtb	r3, r3
 80147fc:	e01f      	b.n	801483e <HAL_TIM_PWM_Start+0x62>
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	2b04      	cmp	r3, #4
 8014802:	d108      	bne.n	8014816 <HAL_TIM_PWM_Start+0x3a>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	223b      	movs	r2, #59	@ 0x3b
 8014808:	5c9b      	ldrb	r3, [r3, r2]
 801480a:	b2db      	uxtb	r3, r3
 801480c:	3b01      	subs	r3, #1
 801480e:	1e5a      	subs	r2, r3, #1
 8014810:	4193      	sbcs	r3, r2
 8014812:	b2db      	uxtb	r3, r3
 8014814:	e013      	b.n	801483e <HAL_TIM_PWM_Start+0x62>
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	2b08      	cmp	r3, #8
 801481a:	d108      	bne.n	801482e <HAL_TIM_PWM_Start+0x52>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	223c      	movs	r2, #60	@ 0x3c
 8014820:	5c9b      	ldrb	r3, [r3, r2]
 8014822:	b2db      	uxtb	r3, r3
 8014824:	3b01      	subs	r3, #1
 8014826:	1e5a      	subs	r2, r3, #1
 8014828:	4193      	sbcs	r3, r2
 801482a:	b2db      	uxtb	r3, r3
 801482c:	e007      	b.n	801483e <HAL_TIM_PWM_Start+0x62>
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	223d      	movs	r2, #61	@ 0x3d
 8014832:	5c9b      	ldrb	r3, [r3, r2]
 8014834:	b2db      	uxtb	r3, r3
 8014836:	3b01      	subs	r3, #1
 8014838:	1e5a      	subs	r2, r3, #1
 801483a:	4193      	sbcs	r3, r2
 801483c:	b2db      	uxtb	r3, r3
 801483e:	2b00      	cmp	r3, #0
 8014840:	d001      	beq.n	8014846 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8014842:	2301      	movs	r3, #1
 8014844:	e052      	b.n	80148ec <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d104      	bne.n	8014856 <HAL_TIM_PWM_Start+0x7a>
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	223a      	movs	r2, #58	@ 0x3a
 8014850:	2102      	movs	r1, #2
 8014852:	5499      	strb	r1, [r3, r2]
 8014854:	e013      	b.n	801487e <HAL_TIM_PWM_Start+0xa2>
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	2b04      	cmp	r3, #4
 801485a:	d104      	bne.n	8014866 <HAL_TIM_PWM_Start+0x8a>
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	223b      	movs	r2, #59	@ 0x3b
 8014860:	2102      	movs	r1, #2
 8014862:	5499      	strb	r1, [r3, r2]
 8014864:	e00b      	b.n	801487e <HAL_TIM_PWM_Start+0xa2>
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	2b08      	cmp	r3, #8
 801486a:	d104      	bne.n	8014876 <HAL_TIM_PWM_Start+0x9a>
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	223c      	movs	r2, #60	@ 0x3c
 8014870:	2102      	movs	r1, #2
 8014872:	5499      	strb	r1, [r3, r2]
 8014874:	e003      	b.n	801487e <HAL_TIM_PWM_Start+0xa2>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	223d      	movs	r2, #61	@ 0x3d
 801487a:	2102      	movs	r1, #2
 801487c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	6839      	ldr	r1, [r7, #0]
 8014884:	2201      	movs	r2, #1
 8014886:	0018      	movs	r0, r3
 8014888:	f000 fa62 	bl	8014d50 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	2380      	movs	r3, #128	@ 0x80
 8014892:	05db      	lsls	r3, r3, #23
 8014894:	429a      	cmp	r2, r3
 8014896:	d00e      	beq.n	80148b6 <HAL_TIM_PWM_Start+0xda>
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	4a15      	ldr	r2, [pc, #84]	@ (80148f4 <HAL_TIM_PWM_Start+0x118>)
 801489e:	4293      	cmp	r3, r2
 80148a0:	d009      	beq.n	80148b6 <HAL_TIM_PWM_Start+0xda>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	4a14      	ldr	r2, [pc, #80]	@ (80148f8 <HAL_TIM_PWM_Start+0x11c>)
 80148a8:	4293      	cmp	r3, r2
 80148aa:	d004      	beq.n	80148b6 <HAL_TIM_PWM_Start+0xda>
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4a12      	ldr	r2, [pc, #72]	@ (80148fc <HAL_TIM_PWM_Start+0x120>)
 80148b2:	4293      	cmp	r3, r2
 80148b4:	d111      	bne.n	80148da <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	689b      	ldr	r3, [r3, #8]
 80148bc:	2207      	movs	r2, #7
 80148be:	4013      	ands	r3, r2
 80148c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	2b06      	cmp	r3, #6
 80148c6:	d010      	beq.n	80148ea <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2101      	movs	r1, #1
 80148d4:	430a      	orrs	r2, r1
 80148d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80148d8:	e007      	b.n	80148ea <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2101      	movs	r1, #1
 80148e6:	430a      	orrs	r2, r1
 80148e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80148ea:	2300      	movs	r3, #0
}
 80148ec:	0018      	movs	r0, r3
 80148ee:	46bd      	mov	sp, r7
 80148f0:	b004      	add	sp, #16
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	40000400 	.word	0x40000400
 80148f8:	40010800 	.word	0x40010800
 80148fc:	40011400 	.word	0x40011400

08014900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b086      	sub	sp, #24
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801490c:	2317      	movs	r3, #23
 801490e:	18fb      	adds	r3, r7, r3
 8014910:	2200      	movs	r2, #0
 8014912:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2238      	movs	r2, #56	@ 0x38
 8014918:	5c9b      	ldrb	r3, [r3, r2]
 801491a:	2b01      	cmp	r3, #1
 801491c:	d101      	bne.n	8014922 <HAL_TIM_PWM_ConfigChannel+0x22>
 801491e:	2302      	movs	r3, #2
 8014920:	e0ad      	b.n	8014a7e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2238      	movs	r2, #56	@ 0x38
 8014926:	2101      	movs	r1, #1
 8014928:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2b0c      	cmp	r3, #12
 801492e:	d100      	bne.n	8014932 <HAL_TIM_PWM_ConfigChannel+0x32>
 8014930:	e076      	b.n	8014a20 <HAL_TIM_PWM_ConfigChannel+0x120>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2b0c      	cmp	r3, #12
 8014936:	d900      	bls.n	801493a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8014938:	e095      	b.n	8014a66 <HAL_TIM_PWM_ConfigChannel+0x166>
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2b08      	cmp	r3, #8
 801493e:	d04e      	beq.n	80149de <HAL_TIM_PWM_ConfigChannel+0xde>
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2b08      	cmp	r3, #8
 8014944:	d900      	bls.n	8014948 <HAL_TIM_PWM_ConfigChannel+0x48>
 8014946:	e08e      	b.n	8014a66 <HAL_TIM_PWM_ConfigChannel+0x166>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d003      	beq.n	8014956 <HAL_TIM_PWM_ConfigChannel+0x56>
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2b04      	cmp	r3, #4
 8014952:	d021      	beq.n	8014998 <HAL_TIM_PWM_ConfigChannel+0x98>
 8014954:	e087      	b.n	8014a66 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	68ba      	ldr	r2, [r7, #8]
 801495c:	0011      	movs	r1, r2
 801495e:	0018      	movs	r0, r3
 8014960:	f000 f8f2 	bl	8014b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	699a      	ldr	r2, [r3, #24]
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2108      	movs	r1, #8
 8014970:	430a      	orrs	r2, r1
 8014972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	699a      	ldr	r2, [r3, #24]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	2104      	movs	r1, #4
 8014980:	438a      	bics	r2, r1
 8014982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	6999      	ldr	r1, [r3, #24]
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	68da      	ldr	r2, [r3, #12]
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	430a      	orrs	r2, r1
 8014994:	619a      	str	r2, [r3, #24]
      break;
 8014996:	e06b      	b.n	8014a70 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	68ba      	ldr	r2, [r7, #8]
 801499e:	0011      	movs	r1, r2
 80149a0:	0018      	movs	r0, r3
 80149a2:	f000 f90d 	bl	8014bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	699a      	ldr	r2, [r3, #24]
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2180      	movs	r1, #128	@ 0x80
 80149b2:	0109      	lsls	r1, r1, #4
 80149b4:	430a      	orrs	r2, r1
 80149b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	699a      	ldr	r2, [r3, #24]
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	4931      	ldr	r1, [pc, #196]	@ (8014a88 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80149c4:	400a      	ands	r2, r1
 80149c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	6999      	ldr	r1, [r3, #24]
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	021a      	lsls	r2, r3, #8
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	430a      	orrs	r2, r1
 80149da:	619a      	str	r2, [r3, #24]
      break;
 80149dc:	e048      	b.n	8014a70 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	68ba      	ldr	r2, [r7, #8]
 80149e4:	0011      	movs	r1, r2
 80149e6:	0018      	movs	r0, r3
 80149e8:	f000 f92c 	bl	8014c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	69da      	ldr	r2, [r3, #28]
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2108      	movs	r1, #8
 80149f8:	430a      	orrs	r2, r1
 80149fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	69da      	ldr	r2, [r3, #28]
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	2104      	movs	r1, #4
 8014a08:	438a      	bics	r2, r1
 8014a0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	69d9      	ldr	r1, [r3, #28]
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	68da      	ldr	r2, [r3, #12]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	430a      	orrs	r2, r1
 8014a1c:	61da      	str	r2, [r3, #28]
      break;
 8014a1e:	e027      	b.n	8014a70 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	68ba      	ldr	r2, [r7, #8]
 8014a26:	0011      	movs	r1, r2
 8014a28:	0018      	movs	r0, r3
 8014a2a:	f000 f94b 	bl	8014cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	69da      	ldr	r2, [r3, #28]
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2180      	movs	r1, #128	@ 0x80
 8014a3a:	0109      	lsls	r1, r1, #4
 8014a3c:	430a      	orrs	r2, r1
 8014a3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	69da      	ldr	r2, [r3, #28]
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	490f      	ldr	r1, [pc, #60]	@ (8014a88 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8014a4c:	400a      	ands	r2, r1
 8014a4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	69d9      	ldr	r1, [r3, #28]
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	68db      	ldr	r3, [r3, #12]
 8014a5a:	021a      	lsls	r2, r3, #8
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	430a      	orrs	r2, r1
 8014a62:	61da      	str	r2, [r3, #28]
      break;
 8014a64:	e004      	b.n	8014a70 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8014a66:	2317      	movs	r3, #23
 8014a68:	18fb      	adds	r3, r7, r3
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	701a      	strb	r2, [r3, #0]
      break;
 8014a6e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	2238      	movs	r2, #56	@ 0x38
 8014a74:	2100      	movs	r1, #0
 8014a76:	5499      	strb	r1, [r3, r2]

  return status;
 8014a78:	2317      	movs	r3, #23
 8014a7a:	18fb      	adds	r3, r7, r3
 8014a7c:	781b      	ldrb	r3, [r3, #0]
}
 8014a7e:	0018      	movs	r0, r3
 8014a80:	46bd      	mov	sp, r7
 8014a82:	b006      	add	sp, #24
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	46c0      	nop			@ (mov r8, r8)
 8014a88:	fffffbff 	.word	0xfffffbff

08014a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	2380      	movs	r3, #128	@ 0x80
 8014aa0:	05db      	lsls	r3, r3, #23
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d00b      	beq.n	8014abe <TIM_Base_SetConfig+0x32>
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	4a23      	ldr	r2, [pc, #140]	@ (8014b38 <TIM_Base_SetConfig+0xac>)
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d007      	beq.n	8014abe <TIM_Base_SetConfig+0x32>
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4a22      	ldr	r2, [pc, #136]	@ (8014b3c <TIM_Base_SetConfig+0xb0>)
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	d003      	beq.n	8014abe <TIM_Base_SetConfig+0x32>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	4a21      	ldr	r2, [pc, #132]	@ (8014b40 <TIM_Base_SetConfig+0xb4>)
 8014aba:	4293      	cmp	r3, r2
 8014abc:	d108      	bne.n	8014ad0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2270      	movs	r2, #112	@ 0x70
 8014ac2:	4393      	bics	r3, r2
 8014ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	68fa      	ldr	r2, [r7, #12]
 8014acc:	4313      	orrs	r3, r2
 8014ace:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	2380      	movs	r3, #128	@ 0x80
 8014ad4:	05db      	lsls	r3, r3, #23
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d00b      	beq.n	8014af2 <TIM_Base_SetConfig+0x66>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4a16      	ldr	r2, [pc, #88]	@ (8014b38 <TIM_Base_SetConfig+0xac>)
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d007      	beq.n	8014af2 <TIM_Base_SetConfig+0x66>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	4a15      	ldr	r2, [pc, #84]	@ (8014b3c <TIM_Base_SetConfig+0xb0>)
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d003      	beq.n	8014af2 <TIM_Base_SetConfig+0x66>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	4a14      	ldr	r2, [pc, #80]	@ (8014b40 <TIM_Base_SetConfig+0xb4>)
 8014aee:	4293      	cmp	r3, r2
 8014af0:	d108      	bne.n	8014b04 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	4a13      	ldr	r2, [pc, #76]	@ (8014b44 <TIM_Base_SetConfig+0xb8>)
 8014af6:	4013      	ands	r3, r2
 8014af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	68fa      	ldr	r2, [r7, #12]
 8014b00:	4313      	orrs	r3, r2
 8014b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2280      	movs	r2, #128	@ 0x80
 8014b08:	4393      	bics	r3, r2
 8014b0a:	001a      	movs	r2, r3
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	691b      	ldr	r3, [r3, #16]
 8014b10:	4313      	orrs	r3, r2
 8014b12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	68fa      	ldr	r2, [r7, #12]
 8014b18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	689a      	ldr	r2, [r3, #8]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	615a      	str	r2, [r3, #20]
}
 8014b30:	46c0      	nop			@ (mov r8, r8)
 8014b32:	46bd      	mov	sp, r7
 8014b34:	b004      	add	sp, #16
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	40000400 	.word	0x40000400
 8014b3c:	40010800 	.word	0x40010800
 8014b40:	40011400 	.word	0x40011400
 8014b44:	fffffcff 	.word	0xfffffcff

08014b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b086      	sub	sp, #24
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	6a1b      	ldr	r3, [r3, #32]
 8014b56:	2201      	movs	r2, #1
 8014b58:	4393      	bics	r3, r2
 8014b5a:	001a      	movs	r2, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6a1b      	ldr	r3, [r3, #32]
 8014b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	685b      	ldr	r3, [r3, #4]
 8014b6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	699b      	ldr	r3, [r3, #24]
 8014b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2270      	movs	r2, #112	@ 0x70
 8014b76:	4393      	bics	r3, r2
 8014b78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	2203      	movs	r2, #3
 8014b7e:	4393      	bics	r3, r2
 8014b80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	68fa      	ldr	r2, [r7, #12]
 8014b88:	4313      	orrs	r3, r2
 8014b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	2202      	movs	r2, #2
 8014b90:	4393      	bics	r3, r2
 8014b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	689b      	ldr	r3, [r3, #8]
 8014b98:	697a      	ldr	r2, [r7, #20]
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	693a      	ldr	r2, [r7, #16]
 8014ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	68fa      	ldr	r2, [r7, #12]
 8014ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	685a      	ldr	r2, [r3, #4]
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	697a      	ldr	r2, [r7, #20]
 8014bb6:	621a      	str	r2, [r3, #32]
}
 8014bb8:	46c0      	nop			@ (mov r8, r8)
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	b006      	add	sp, #24
 8014bbe:	bd80      	pop	{r7, pc}

08014bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b086      	sub	sp, #24
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6a1b      	ldr	r3, [r3, #32]
 8014bce:	2210      	movs	r2, #16
 8014bd0:	4393      	bics	r3, r2
 8014bd2:	001a      	movs	r2, r3
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6a1b      	ldr	r3, [r3, #32]
 8014bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	685b      	ldr	r3, [r3, #4]
 8014be2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	699b      	ldr	r3, [r3, #24]
 8014be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	4a13      	ldr	r2, [pc, #76]	@ (8014c3c <TIM_OC2_SetConfig+0x7c>)
 8014bee:	4013      	ands	r3, r2
 8014bf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	4a12      	ldr	r2, [pc, #72]	@ (8014c40 <TIM_OC2_SetConfig+0x80>)
 8014bf6:	4013      	ands	r3, r2
 8014bf8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	021b      	lsls	r3, r3, #8
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	4313      	orrs	r3, r2
 8014c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014c06:	697b      	ldr	r3, [r7, #20]
 8014c08:	2220      	movs	r2, #32
 8014c0a:	4393      	bics	r3, r2
 8014c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	689b      	ldr	r3, [r3, #8]
 8014c12:	011b      	lsls	r3, r3, #4
 8014c14:	697a      	ldr	r2, [r7, #20]
 8014c16:	4313      	orrs	r3, r2
 8014c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	693a      	ldr	r2, [r7, #16]
 8014c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	68fa      	ldr	r2, [r7, #12]
 8014c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	685a      	ldr	r2, [r3, #4]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	697a      	ldr	r2, [r7, #20]
 8014c32:	621a      	str	r2, [r3, #32]
}
 8014c34:	46c0      	nop			@ (mov r8, r8)
 8014c36:	46bd      	mov	sp, r7
 8014c38:	b006      	add	sp, #24
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	ffff8fff 	.word	0xffff8fff
 8014c40:	fffffcff 	.word	0xfffffcff

08014c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b086      	sub	sp, #24
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6a1b      	ldr	r3, [r3, #32]
 8014c52:	4a1a      	ldr	r2, [pc, #104]	@ (8014cbc <TIM_OC3_SetConfig+0x78>)
 8014c54:	401a      	ands	r2, r3
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6a1b      	ldr	r3, [r3, #32]
 8014c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	69db      	ldr	r3, [r3, #28]
 8014c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2270      	movs	r2, #112	@ 0x70
 8014c70:	4393      	bics	r3, r2
 8014c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2203      	movs	r2, #3
 8014c78:	4393      	bics	r3, r2
 8014c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	4313      	orrs	r3, r2
 8014c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	4a0d      	ldr	r2, [pc, #52]	@ (8014cc0 <TIM_OC3_SetConfig+0x7c>)
 8014c8a:	4013      	ands	r3, r2
 8014c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	689b      	ldr	r3, [r3, #8]
 8014c92:	021b      	lsls	r3, r3, #8
 8014c94:	697a      	ldr	r2, [r7, #20]
 8014c96:	4313      	orrs	r3, r2
 8014c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	68fa      	ldr	r2, [r7, #12]
 8014ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	685a      	ldr	r2, [r3, #4]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	697a      	ldr	r2, [r7, #20]
 8014cb2:	621a      	str	r2, [r3, #32]
}
 8014cb4:	46c0      	nop			@ (mov r8, r8)
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	b006      	add	sp, #24
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	fffffeff 	.word	0xfffffeff
 8014cc0:	fffffdff 	.word	0xfffffdff

08014cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b086      	sub	sp, #24
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6a1b      	ldr	r3, [r3, #32]
 8014cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8014d40 <TIM_OC4_SetConfig+0x7c>)
 8014cd4:	401a      	ands	r2, r3
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6a1b      	ldr	r3, [r3, #32]
 8014cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	69db      	ldr	r3, [r3, #28]
 8014cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	4a15      	ldr	r2, [pc, #84]	@ (8014d44 <TIM_OC4_SetConfig+0x80>)
 8014cf0:	4013      	ands	r3, r2
 8014cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	4a14      	ldr	r2, [pc, #80]	@ (8014d48 <TIM_OC4_SetConfig+0x84>)
 8014cf8:	4013      	ands	r3, r2
 8014cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	021b      	lsls	r3, r3, #8
 8014d02:	68fa      	ldr	r2, [r7, #12]
 8014d04:	4313      	orrs	r3, r2
 8014d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	4a10      	ldr	r2, [pc, #64]	@ (8014d4c <TIM_OC4_SetConfig+0x88>)
 8014d0c:	4013      	ands	r3, r2
 8014d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	031b      	lsls	r3, r3, #12
 8014d16:	697a      	ldr	r2, [r7, #20]
 8014d18:	4313      	orrs	r3, r2
 8014d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	693a      	ldr	r2, [r7, #16]
 8014d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	68fa      	ldr	r2, [r7, #12]
 8014d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	685a      	ldr	r2, [r3, #4]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	697a      	ldr	r2, [r7, #20]
 8014d34:	621a      	str	r2, [r3, #32]
}
 8014d36:	46c0      	nop			@ (mov r8, r8)
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	b006      	add	sp, #24
 8014d3c:	bd80      	pop	{r7, pc}
 8014d3e:	46c0      	nop			@ (mov r8, r8)
 8014d40:	ffffefff 	.word	0xffffefff
 8014d44:	ffff8fff 	.word	0xffff8fff
 8014d48:	fffffcff 	.word	0xfffffcff
 8014d4c:	ffffdfff 	.word	0xffffdfff

08014d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	221f      	movs	r2, #31
 8014d60:	4013      	ands	r3, r2
 8014d62:	2201      	movs	r2, #1
 8014d64:	409a      	lsls	r2, r3
 8014d66:	0013      	movs	r3, r2
 8014d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	6a1b      	ldr	r3, [r3, #32]
 8014d6e:	697a      	ldr	r2, [r7, #20]
 8014d70:	43d2      	mvns	r2, r2
 8014d72:	401a      	ands	r2, r3
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	6a1a      	ldr	r2, [r3, #32]
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	211f      	movs	r1, #31
 8014d80:	400b      	ands	r3, r1
 8014d82:	6879      	ldr	r1, [r7, #4]
 8014d84:	4099      	lsls	r1, r3
 8014d86:	000b      	movs	r3, r1
 8014d88:	431a      	orrs	r2, r3
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	621a      	str	r2, [r3, #32]
}
 8014d8e:	46c0      	nop			@ (mov r8, r8)
 8014d90:	46bd      	mov	sp, r7
 8014d92:	b006      	add	sp, #24
 8014d94:	bd80      	pop	{r7, pc}
	...

08014d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b084      	sub	sp, #16
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2238      	movs	r2, #56	@ 0x38
 8014da6:	5c9b      	ldrb	r3, [r3, r2]
 8014da8:	2b01      	cmp	r3, #1
 8014daa:	d101      	bne.n	8014db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014dac:	2302      	movs	r3, #2
 8014dae:	e047      	b.n	8014e40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2238      	movs	r2, #56	@ 0x38
 8014db4:	2101      	movs	r1, #1
 8014db6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2239      	movs	r2, #57	@ 0x39
 8014dbc:	2102      	movs	r1, #2
 8014dbe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	689b      	ldr	r3, [r3, #8]
 8014dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2270      	movs	r2, #112	@ 0x70
 8014dd4:	4393      	bics	r3, r2
 8014dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	68fa      	ldr	r2, [r7, #12]
 8014dde:	4313      	orrs	r3, r2
 8014de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	68fa      	ldr	r2, [r7, #12]
 8014de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	681a      	ldr	r2, [r3, #0]
 8014dee:	2380      	movs	r3, #128	@ 0x80
 8014df0:	05db      	lsls	r3, r3, #23
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d00e      	beq.n	8014e14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	4a13      	ldr	r2, [pc, #76]	@ (8014e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8014dfc:	4293      	cmp	r3, r2
 8014dfe:	d009      	beq.n	8014e14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	4a11      	ldr	r2, [pc, #68]	@ (8014e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d004      	beq.n	8014e14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	4a10      	ldr	r2, [pc, #64]	@ (8014e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8014e10:	4293      	cmp	r3, r2
 8014e12:	d10c      	bne.n	8014e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	2280      	movs	r2, #128	@ 0x80
 8014e18:	4393      	bics	r3, r2
 8014e1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	4313      	orrs	r3, r2
 8014e24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	68ba      	ldr	r2, [r7, #8]
 8014e2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2239      	movs	r2, #57	@ 0x39
 8014e32:	2101      	movs	r1, #1
 8014e34:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2238      	movs	r2, #56	@ 0x38
 8014e3a:	2100      	movs	r1, #0
 8014e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014e3e:	2300      	movs	r3, #0
}
 8014e40:	0018      	movs	r0, r3
 8014e42:	46bd      	mov	sp, r7
 8014e44:	b004      	add	sp, #16
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	40000400 	.word	0x40000400
 8014e4c:	40010800 	.word	0x40010800
 8014e50:	40011400 	.word	0x40011400

08014e54 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	2238      	movs	r2, #56	@ 0x38
 8014e62:	5c9b      	ldrb	r3, [r3, r2]
 8014e64:	2b01      	cmp	r3, #1
 8014e66:	d101      	bne.n	8014e6c <HAL_TIMEx_RemapConfig+0x18>
 8014e68:	2302      	movs	r3, #2
 8014e6a:	e00c      	b.n	8014e86 <HAL_TIMEx_RemapConfig+0x32>
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2238      	movs	r2, #56	@ 0x38
 8014e70:	2101      	movs	r1, #1
 8014e72:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	683a      	ldr	r2, [r7, #0]
 8014e7a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2238      	movs	r2, #56	@ 0x38
 8014e80:	2100      	movs	r1, #0
 8014e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014e84:	2300      	movs	r3, #0
}
 8014e86:	0018      	movs	r0, r3
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	b002      	add	sp, #8
 8014e8c:	bd80      	pop	{r7, pc}
	...

08014e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d101      	bne.n	8014ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	e053      	b.n	8014f4a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d116      	bne.n	8014ed8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2278      	movs	r2, #120	@ 0x78
 8014eae:	2100      	movs	r1, #0
 8014eb0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	0018      	movs	r0, r3
 8014eb6:	f000 fd65 	bl	8015984 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	22b0      	movs	r2, #176	@ 0xb0
 8014ebe:	589b      	ldr	r3, [r3, r2]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d103      	bne.n	8014ecc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	21b0      	movs	r1, #176	@ 0xb0
 8014ec8:	4a22      	ldr	r2, [pc, #136]	@ (8014f54 <HAL_UART_Init+0xc4>)
 8014eca:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	22b0      	movs	r2, #176	@ 0xb0
 8014ed0:	589b      	ldr	r3, [r3, r2]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	0010      	movs	r0, r2
 8014ed6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2224      	movs	r2, #36	@ 0x24
 8014edc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2101      	movs	r1, #1
 8014eea:	438a      	bics	r2, r1
 8014eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	0018      	movs	r0, r3
 8014ef2:	f000 fd8b 	bl	8015a0c <UART_SetConfig>
 8014ef6:	0003      	movs	r3, r0
 8014ef8:	2b01      	cmp	r3, #1
 8014efa:	d101      	bne.n	8014f00 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8014efc:	2301      	movs	r3, #1
 8014efe:	e024      	b.n	8014f4a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d003      	beq.n	8014f10 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	0018      	movs	r0, r3
 8014f0c:	f001 f81c 	bl	8015f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	685a      	ldr	r2, [r3, #4]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	490f      	ldr	r1, [pc, #60]	@ (8014f58 <HAL_UART_Init+0xc8>)
 8014f1c:	400a      	ands	r2, r1
 8014f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	689a      	ldr	r2, [r3, #8]
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	212a      	movs	r1, #42	@ 0x2a
 8014f2c:	438a      	bics	r2, r1
 8014f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	2101      	movs	r1, #1
 8014f3c:	430a      	orrs	r2, r1
 8014f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	0018      	movs	r0, r3
 8014f44:	f001 f8b4 	bl	80160b0 <UART_CheckIdleState>
 8014f48:	0003      	movs	r3, r0
}
 8014f4a:	0018      	movs	r0, r3
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	b002      	add	sp, #8
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	46c0      	nop			@ (mov r8, r8)
 8014f54:	0800c439 	.word	0x0800c439
 8014f58:	ffffb7ff 	.word	0xffffb7ff

08014f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b08a      	sub	sp, #40	@ 0x28
 8014f60:	af02      	add	r7, sp, #8
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	603b      	str	r3, [r7, #0]
 8014f68:	1dbb      	adds	r3, r7, #6
 8014f6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f70:	2b20      	cmp	r3, #32
 8014f72:	d000      	beq.n	8014f76 <HAL_UART_Transmit+0x1a>
 8014f74:	e08c      	b.n	8015090 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d003      	beq.n	8014f84 <HAL_UART_Transmit+0x28>
 8014f7c:	1dbb      	adds	r3, r7, #6
 8014f7e:	881b      	ldrh	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d101      	bne.n	8014f88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8014f84:	2301      	movs	r3, #1
 8014f86:	e084      	b.n	8015092 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	689a      	ldr	r2, [r3, #8]
 8014f8c:	2380      	movs	r3, #128	@ 0x80
 8014f8e:	015b      	lsls	r3, r3, #5
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d109      	bne.n	8014fa8 <HAL_UART_Transmit+0x4c>
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	691b      	ldr	r3, [r3, #16]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d105      	bne.n	8014fa8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	4013      	ands	r3, r2
 8014fa2:	d001      	beq.n	8014fa8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	e074      	b.n	8015092 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2284      	movs	r2, #132	@ 0x84
 8014fac:	2100      	movs	r1, #0
 8014fae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2221      	movs	r2, #33	@ 0x21
 8014fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014fb6:	f7f7 ff69 	bl	800ce8c <HAL_GetTick>
 8014fba:	0003      	movs	r3, r0
 8014fbc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	1dba      	adds	r2, r7, #6
 8014fc2:	2150      	movs	r1, #80	@ 0x50
 8014fc4:	8812      	ldrh	r2, [r2, #0]
 8014fc6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	1dba      	adds	r2, r7, #6
 8014fcc:	2152      	movs	r1, #82	@ 0x52
 8014fce:	8812      	ldrh	r2, [r2, #0]
 8014fd0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	689a      	ldr	r2, [r3, #8]
 8014fd6:	2380      	movs	r3, #128	@ 0x80
 8014fd8:	015b      	lsls	r3, r3, #5
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d108      	bne.n	8014ff0 <HAL_UART_Transmit+0x94>
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	691b      	ldr	r3, [r3, #16]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d104      	bne.n	8014ff0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	61bb      	str	r3, [r7, #24]
 8014fee:	e003      	b.n	8014ff8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014ff8:	e02f      	b.n	801505a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014ffa:	697a      	ldr	r2, [r7, #20]
 8014ffc:	68f8      	ldr	r0, [r7, #12]
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	9300      	str	r3, [sp, #0]
 8015002:	0013      	movs	r3, r2
 8015004:	2200      	movs	r2, #0
 8015006:	2180      	movs	r1, #128	@ 0x80
 8015008:	f001 f8fa 	bl	8016200 <UART_WaitOnFlagUntilTimeout>
 801500c:	1e03      	subs	r3, r0, #0
 801500e:	d004      	beq.n	801501a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	2220      	movs	r2, #32
 8015014:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8015016:	2303      	movs	r3, #3
 8015018:	e03b      	b.n	8015092 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801501a:	69fb      	ldr	r3, [r7, #28]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d10b      	bne.n	8015038 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	881b      	ldrh	r3, [r3, #0]
 8015024:	001a      	movs	r2, r3
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	05d2      	lsls	r2, r2, #23
 801502c:	0dd2      	lsrs	r2, r2, #23
 801502e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015030:	69bb      	ldr	r3, [r7, #24]
 8015032:	3302      	adds	r3, #2
 8015034:	61bb      	str	r3, [r7, #24]
 8015036:	e007      	b.n	8015048 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	781a      	ldrb	r2, [r3, #0]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8015042:	69fb      	ldr	r3, [r7, #28]
 8015044:	3301      	adds	r3, #1
 8015046:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2252      	movs	r2, #82	@ 0x52
 801504c:	5a9b      	ldrh	r3, [r3, r2]
 801504e:	b29b      	uxth	r3, r3
 8015050:	3b01      	subs	r3, #1
 8015052:	b299      	uxth	r1, r3
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2252      	movs	r2, #82	@ 0x52
 8015058:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2252      	movs	r2, #82	@ 0x52
 801505e:	5a9b      	ldrh	r3, [r3, r2]
 8015060:	b29b      	uxth	r3, r3
 8015062:	2b00      	cmp	r3, #0
 8015064:	d1c9      	bne.n	8014ffa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015066:	697a      	ldr	r2, [r7, #20]
 8015068:	68f8      	ldr	r0, [r7, #12]
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	9300      	str	r3, [sp, #0]
 801506e:	0013      	movs	r3, r2
 8015070:	2200      	movs	r2, #0
 8015072:	2140      	movs	r1, #64	@ 0x40
 8015074:	f001 f8c4 	bl	8016200 <UART_WaitOnFlagUntilTimeout>
 8015078:	1e03      	subs	r3, r0, #0
 801507a:	d004      	beq.n	8015086 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	2220      	movs	r2, #32
 8015080:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8015082:	2303      	movs	r3, #3
 8015084:	e005      	b.n	8015092 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	2220      	movs	r2, #32
 801508a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801508c:	2300      	movs	r3, #0
 801508e:	e000      	b.n	8015092 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8015090:	2302      	movs	r3, #2
  }
}
 8015092:	0018      	movs	r0, r3
 8015094:	46bd      	mov	sp, r7
 8015096:	b008      	add	sp, #32
 8015098:	bd80      	pop	{r7, pc}
	...

0801509c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b088      	sub	sp, #32
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	1dbb      	adds	r3, r7, #6
 80150a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	2280      	movs	r2, #128	@ 0x80
 80150ae:	589b      	ldr	r3, [r3, r2]
 80150b0:	2b20      	cmp	r3, #32
 80150b2:	d14a      	bne.n	801514a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80150b4:	68bb      	ldr	r3, [r7, #8]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d003      	beq.n	80150c2 <HAL_UART_Receive_IT+0x26>
 80150ba:	1dbb      	adds	r3, r7, #6
 80150bc:	881b      	ldrh	r3, [r3, #0]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d101      	bne.n	80150c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
 80150c4:	e042      	b.n	801514c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	689a      	ldr	r2, [r3, #8]
 80150ca:	2380      	movs	r3, #128	@ 0x80
 80150cc:	015b      	lsls	r3, r3, #5
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d109      	bne.n	80150e6 <HAL_UART_Receive_IT+0x4a>
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	691b      	ldr	r3, [r3, #16]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d105      	bne.n	80150e6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	2201      	movs	r2, #1
 80150de:	4013      	ands	r3, r2
 80150e0:	d001      	beq.n	80150e6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80150e2:	2301      	movs	r3, #1
 80150e4:	e032      	b.n	801514c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	2200      	movs	r2, #0
 80150ea:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4a18      	ldr	r2, [pc, #96]	@ (8015154 <HAL_UART_Receive_IT+0xb8>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d020      	beq.n	8015138 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	685a      	ldr	r2, [r3, #4]
 80150fc:	2380      	movs	r3, #128	@ 0x80
 80150fe:	041b      	lsls	r3, r3, #16
 8015100:	4013      	ands	r3, r2
 8015102:	d019      	beq.n	8015138 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015104:	f3ef 8310 	mrs	r3, PRIMASK
 8015108:	613b      	str	r3, [r7, #16]
  return(result);
 801510a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801510c:	61fb      	str	r3, [r7, #28]
 801510e:	2301      	movs	r3, #1
 8015110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	f383 8810 	msr	PRIMASK, r3
}
 8015118:	46c0      	nop			@ (mov r8, r8)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2180      	movs	r1, #128	@ 0x80
 8015126:	04c9      	lsls	r1, r1, #19
 8015128:	430a      	orrs	r2, r1
 801512a:	601a      	str	r2, [r3, #0]
 801512c:	69fb      	ldr	r3, [r7, #28]
 801512e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	f383 8810 	msr	PRIMASK, r3
}
 8015136:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015138:	1dbb      	adds	r3, r7, #6
 801513a:	881a      	ldrh	r2, [r3, #0]
 801513c:	68b9      	ldr	r1, [r7, #8]
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	0018      	movs	r0, r3
 8015142:	f001 f8c7 	bl	80162d4 <UART_Start_Receive_IT>
 8015146:	0003      	movs	r3, r0
 8015148:	e000      	b.n	801514c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801514a:	2302      	movs	r3, #2
  }
}
 801514c:	0018      	movs	r0, r3
 801514e:	46bd      	mov	sp, r7
 8015150:	b008      	add	sp, #32
 8015152:	bd80      	pop	{r7, pc}
 8015154:	40004800 	.word	0x40004800

08015158 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b088      	sub	sp, #32
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	1dbb      	adds	r3, r7, #6
 8015164:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801516a:	2b20      	cmp	r3, #32
 801516c:	d000      	beq.n	8015170 <HAL_UART_Transmit_DMA+0x18>
 801516e:	e077      	b.n	8015260 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d003      	beq.n	801517e <HAL_UART_Transmit_DMA+0x26>
 8015176:	1dbb      	adds	r3, r7, #6
 8015178:	881b      	ldrh	r3, [r3, #0]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d101      	bne.n	8015182 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801517e:	2301      	movs	r3, #1
 8015180:	e06f      	b.n	8015262 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	689a      	ldr	r2, [r3, #8]
 8015186:	2380      	movs	r3, #128	@ 0x80
 8015188:	015b      	lsls	r3, r3, #5
 801518a:	429a      	cmp	r2, r3
 801518c:	d109      	bne.n	80151a2 <HAL_UART_Transmit_DMA+0x4a>
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	691b      	ldr	r3, [r3, #16]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d105      	bne.n	80151a2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	2201      	movs	r2, #1
 801519a:	4013      	ands	r3, r2
 801519c:	d001      	beq.n	80151a2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801519e:	2301      	movs	r3, #1
 80151a0:	e05f      	b.n	8015262 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	68ba      	ldr	r2, [r7, #8]
 80151a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	1dba      	adds	r2, r7, #6
 80151ac:	2150      	movs	r1, #80	@ 0x50
 80151ae:	8812      	ldrh	r2, [r2, #0]
 80151b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	1dba      	adds	r2, r7, #6
 80151b6:	2152      	movs	r1, #82	@ 0x52
 80151b8:	8812      	ldrh	r2, [r2, #0]
 80151ba:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2284      	movs	r2, #132	@ 0x84
 80151c0:	2100      	movs	r1, #0
 80151c2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	2221      	movs	r2, #33	@ 0x21
 80151c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d027      	beq.n	8015222 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151d6:	4a25      	ldr	r2, [pc, #148]	@ (801526c <HAL_UART_Transmit_DMA+0x114>)
 80151d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151de:	4a24      	ldr	r2, [pc, #144]	@ (8015270 <HAL_UART_Transmit_DMA+0x118>)
 80151e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151e6:	4a23      	ldr	r2, [pc, #140]	@ (8015274 <HAL_UART_Transmit_DMA+0x11c>)
 80151e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151ee:	2200      	movs	r2, #0
 80151f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151fa:	0019      	movs	r1, r3
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	3328      	adds	r3, #40	@ 0x28
 8015202:	001a      	movs	r2, r3
 8015204:	1dbb      	adds	r3, r7, #6
 8015206:	881b      	ldrh	r3, [r3, #0]
 8015208:	f7f8 fb60 	bl	800d8cc <HAL_DMA_Start_IT>
 801520c:	1e03      	subs	r3, r0, #0
 801520e:	d008      	beq.n	8015222 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2284      	movs	r2, #132	@ 0x84
 8015214:	2110      	movs	r1, #16
 8015216:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2220      	movs	r2, #32
 801521c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801521e:	2301      	movs	r3, #1
 8015220:	e01f      	b.n	8015262 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2240      	movs	r2, #64	@ 0x40
 8015228:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801522a:	f3ef 8310 	mrs	r3, PRIMASK
 801522e:	613b      	str	r3, [r7, #16]
  return(result);
 8015230:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015232:	61fb      	str	r3, [r7, #28]
 8015234:	2301      	movs	r3, #1
 8015236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	f383 8810 	msr	PRIMASK, r3
}
 801523e:	46c0      	nop			@ (mov r8, r8)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	689a      	ldr	r2, [r3, #8]
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2180      	movs	r1, #128	@ 0x80
 801524c:	430a      	orrs	r2, r1
 801524e:	609a      	str	r2, [r3, #8]
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015254:	69bb      	ldr	r3, [r7, #24]
 8015256:	f383 8810 	msr	PRIMASK, r3
}
 801525a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801525c:	2300      	movs	r3, #0
 801525e:	e000      	b.n	8015262 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8015260:	2302      	movs	r3, #2
  }
}
 8015262:	0018      	movs	r0, r3
 8015264:	46bd      	mov	sp, r7
 8015266:	b008      	add	sp, #32
 8015268:	bd80      	pop	{r7, pc}
 801526a:	46c0      	nop			@ (mov r8, r8)
 801526c:	080166b9 	.word	0x080166b9
 8015270:	08016755 	.word	0x08016755
 8015274:	080168f5 	.word	0x080168f5

08015278 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b088      	sub	sp, #32
 801527c:	af00      	add	r7, sp, #0
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	1dbb      	adds	r3, r7, #6
 8015284:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2280      	movs	r2, #128	@ 0x80
 801528a:	589b      	ldr	r3, [r3, r2]
 801528c:	2b20      	cmp	r3, #32
 801528e:	d14a      	bne.n	8015326 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d003      	beq.n	801529e <HAL_UART_Receive_DMA+0x26>
 8015296:	1dbb      	adds	r3, r7, #6
 8015298:	881b      	ldrh	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d101      	bne.n	80152a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801529e:	2301      	movs	r3, #1
 80152a0:	e042      	b.n	8015328 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	689a      	ldr	r2, [r3, #8]
 80152a6:	2380      	movs	r3, #128	@ 0x80
 80152a8:	015b      	lsls	r3, r3, #5
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d109      	bne.n	80152c2 <HAL_UART_Receive_DMA+0x4a>
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	691b      	ldr	r3, [r3, #16]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d105      	bne.n	80152c2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	2201      	movs	r2, #1
 80152ba:	4013      	ands	r3, r2
 80152bc:	d001      	beq.n	80152c2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80152be:	2301      	movs	r3, #1
 80152c0:	e032      	b.n	8015328 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2200      	movs	r2, #0
 80152c6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	4a18      	ldr	r2, [pc, #96]	@ (8015330 <HAL_UART_Receive_DMA+0xb8>)
 80152ce:	4293      	cmp	r3, r2
 80152d0:	d020      	beq.n	8015314 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	685a      	ldr	r2, [r3, #4]
 80152d8:	2380      	movs	r3, #128	@ 0x80
 80152da:	041b      	lsls	r3, r3, #16
 80152dc:	4013      	ands	r3, r2
 80152de:	d019      	beq.n	8015314 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152e0:	f3ef 8310 	mrs	r3, PRIMASK
 80152e4:	613b      	str	r3, [r7, #16]
  return(result);
 80152e6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80152e8:	61fb      	str	r3, [r7, #28]
 80152ea:	2301      	movs	r3, #1
 80152ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	f383 8810 	msr	PRIMASK, r3
}
 80152f4:	46c0      	nop			@ (mov r8, r8)
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2180      	movs	r1, #128	@ 0x80
 8015302:	04c9      	lsls	r1, r1, #19
 8015304:	430a      	orrs	r2, r1
 8015306:	601a      	str	r2, [r3, #0]
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	f383 8810 	msr	PRIMASK, r3
}
 8015312:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015314:	1dbb      	adds	r3, r7, #6
 8015316:	881a      	ldrh	r2, [r3, #0]
 8015318:	68b9      	ldr	r1, [r7, #8]
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	0018      	movs	r0, r3
 801531e:	f001 f8a3 	bl	8016468 <UART_Start_Receive_DMA>
 8015322:	0003      	movs	r3, r0
 8015324:	e000      	b.n	8015328 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8015326:	2302      	movs	r3, #2
  }
}
 8015328:	0018      	movs	r0, r3
 801532a:	46bd      	mov	sp, r7
 801532c:	b008      	add	sp, #32
 801532e:	bd80      	pop	{r7, pc}
 8015330:	40004800 	.word	0x40004800

08015334 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015334:	b590      	push	{r4, r7, lr}
 8015336:	b0ab      	sub	sp, #172	@ 0xac
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	69db      	ldr	r3, [r3, #28]
 8015342:	22a4      	movs	r2, #164	@ 0xa4
 8015344:	18b9      	adds	r1, r7, r2
 8015346:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	20a0      	movs	r0, #160	@ 0xa0
 8015350:	1839      	adds	r1, r7, r0
 8015352:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	689b      	ldr	r3, [r3, #8]
 801535a:	219c      	movs	r1, #156	@ 0x9c
 801535c:	1879      	adds	r1, r7, r1
 801535e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015360:	0011      	movs	r1, r2
 8015362:	18bb      	adds	r3, r7, r2
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4a9c      	ldr	r2, [pc, #624]	@ (80155d8 <HAL_UART_IRQHandler+0x2a4>)
 8015368:	4013      	ands	r3, r2
 801536a:	2298      	movs	r2, #152	@ 0x98
 801536c:	18bc      	adds	r4, r7, r2
 801536e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8015370:	18bb      	adds	r3, r7, r2
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d114      	bne.n	80153a2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8015378:	187b      	adds	r3, r7, r1
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	2220      	movs	r2, #32
 801537e:	4013      	ands	r3, r2
 8015380:	d00f      	beq.n	80153a2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015382:	183b      	adds	r3, r7, r0
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	2220      	movs	r2, #32
 8015388:	4013      	ands	r3, r2
 801538a:	d00a      	beq.n	80153a2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015390:	2b00      	cmp	r3, #0
 8015392:	d100      	bne.n	8015396 <HAL_UART_IRQHandler+0x62>
 8015394:	e2aa      	b.n	80158ec <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	0010      	movs	r0, r2
 801539e:	4798      	blx	r3
      }
      return;
 80153a0:	e2a4      	b.n	80158ec <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80153a2:	2398      	movs	r3, #152	@ 0x98
 80153a4:	18fb      	adds	r3, r7, r3
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d100      	bne.n	80153ae <HAL_UART_IRQHandler+0x7a>
 80153ac:	e11a      	b.n	80155e4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80153ae:	239c      	movs	r3, #156	@ 0x9c
 80153b0:	18fb      	adds	r3, r7, r3
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2201      	movs	r2, #1
 80153b6:	4013      	ands	r3, r2
 80153b8:	d106      	bne.n	80153c8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80153ba:	23a0      	movs	r3, #160	@ 0xa0
 80153bc:	18fb      	adds	r3, r7, r3
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4a86      	ldr	r2, [pc, #536]	@ (80155dc <HAL_UART_IRQHandler+0x2a8>)
 80153c2:	4013      	ands	r3, r2
 80153c4:	d100      	bne.n	80153c8 <HAL_UART_IRQHandler+0x94>
 80153c6:	e10d      	b.n	80155e4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80153c8:	23a4      	movs	r3, #164	@ 0xa4
 80153ca:	18fb      	adds	r3, r7, r3
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2201      	movs	r2, #1
 80153d0:	4013      	ands	r3, r2
 80153d2:	d012      	beq.n	80153fa <HAL_UART_IRQHandler+0xc6>
 80153d4:	23a0      	movs	r3, #160	@ 0xa0
 80153d6:	18fb      	adds	r3, r7, r3
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	2380      	movs	r3, #128	@ 0x80
 80153dc:	005b      	lsls	r3, r3, #1
 80153de:	4013      	ands	r3, r2
 80153e0:	d00b      	beq.n	80153fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2201      	movs	r2, #1
 80153e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2284      	movs	r2, #132	@ 0x84
 80153ee:	589b      	ldr	r3, [r3, r2]
 80153f0:	2201      	movs	r2, #1
 80153f2:	431a      	orrs	r2, r3
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2184      	movs	r1, #132	@ 0x84
 80153f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80153fa:	23a4      	movs	r3, #164	@ 0xa4
 80153fc:	18fb      	adds	r3, r7, r3
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	2202      	movs	r2, #2
 8015402:	4013      	ands	r3, r2
 8015404:	d011      	beq.n	801542a <HAL_UART_IRQHandler+0xf6>
 8015406:	239c      	movs	r3, #156	@ 0x9c
 8015408:	18fb      	adds	r3, r7, r3
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2201      	movs	r2, #1
 801540e:	4013      	ands	r3, r2
 8015410:	d00b      	beq.n	801542a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	2202      	movs	r2, #2
 8015418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2284      	movs	r2, #132	@ 0x84
 801541e:	589b      	ldr	r3, [r3, r2]
 8015420:	2204      	movs	r2, #4
 8015422:	431a      	orrs	r2, r3
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2184      	movs	r1, #132	@ 0x84
 8015428:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801542a:	23a4      	movs	r3, #164	@ 0xa4
 801542c:	18fb      	adds	r3, r7, r3
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2204      	movs	r2, #4
 8015432:	4013      	ands	r3, r2
 8015434:	d011      	beq.n	801545a <HAL_UART_IRQHandler+0x126>
 8015436:	239c      	movs	r3, #156	@ 0x9c
 8015438:	18fb      	adds	r3, r7, r3
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	2201      	movs	r2, #1
 801543e:	4013      	ands	r3, r2
 8015440:	d00b      	beq.n	801545a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2204      	movs	r2, #4
 8015448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2284      	movs	r2, #132	@ 0x84
 801544e:	589b      	ldr	r3, [r3, r2]
 8015450:	2202      	movs	r2, #2
 8015452:	431a      	orrs	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2184      	movs	r1, #132	@ 0x84
 8015458:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801545a:	23a4      	movs	r3, #164	@ 0xa4
 801545c:	18fb      	adds	r3, r7, r3
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	2208      	movs	r2, #8
 8015462:	4013      	ands	r3, r2
 8015464:	d017      	beq.n	8015496 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8015466:	23a0      	movs	r3, #160	@ 0xa0
 8015468:	18fb      	adds	r3, r7, r3
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2220      	movs	r2, #32
 801546e:	4013      	ands	r3, r2
 8015470:	d105      	bne.n	801547e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8015472:	239c      	movs	r3, #156	@ 0x9c
 8015474:	18fb      	adds	r3, r7, r3
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2201      	movs	r2, #1
 801547a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801547c:	d00b      	beq.n	8015496 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	2208      	movs	r2, #8
 8015484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2284      	movs	r2, #132	@ 0x84
 801548a:	589b      	ldr	r3, [r3, r2]
 801548c:	2208      	movs	r2, #8
 801548e:	431a      	orrs	r2, r3
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2184      	movs	r1, #132	@ 0x84
 8015494:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015496:	23a4      	movs	r3, #164	@ 0xa4
 8015498:	18fb      	adds	r3, r7, r3
 801549a:	681a      	ldr	r2, [r3, #0]
 801549c:	2380      	movs	r3, #128	@ 0x80
 801549e:	011b      	lsls	r3, r3, #4
 80154a0:	4013      	ands	r3, r2
 80154a2:	d013      	beq.n	80154cc <HAL_UART_IRQHandler+0x198>
 80154a4:	23a0      	movs	r3, #160	@ 0xa0
 80154a6:	18fb      	adds	r3, r7, r3
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	2380      	movs	r3, #128	@ 0x80
 80154ac:	04db      	lsls	r3, r3, #19
 80154ae:	4013      	ands	r3, r2
 80154b0:	d00c      	beq.n	80154cc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	2280      	movs	r2, #128	@ 0x80
 80154b8:	0112      	lsls	r2, r2, #4
 80154ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2284      	movs	r2, #132	@ 0x84
 80154c0:	589b      	ldr	r3, [r3, r2]
 80154c2:	2220      	movs	r2, #32
 80154c4:	431a      	orrs	r2, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	2184      	movs	r1, #132	@ 0x84
 80154ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2284      	movs	r2, #132	@ 0x84
 80154d0:	589b      	ldr	r3, [r3, r2]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d100      	bne.n	80154d8 <HAL_UART_IRQHandler+0x1a4>
 80154d6:	e20b      	b.n	80158f0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80154d8:	23a4      	movs	r3, #164	@ 0xa4
 80154da:	18fb      	adds	r3, r7, r3
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	2220      	movs	r2, #32
 80154e0:	4013      	ands	r3, r2
 80154e2:	d00e      	beq.n	8015502 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80154e4:	23a0      	movs	r3, #160	@ 0xa0
 80154e6:	18fb      	adds	r3, r7, r3
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2220      	movs	r2, #32
 80154ec:	4013      	ands	r3, r2
 80154ee:	d008      	beq.n	8015502 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d004      	beq.n	8015502 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	0010      	movs	r0, r2
 8015500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2284      	movs	r2, #132	@ 0x84
 8015506:	589b      	ldr	r3, [r3, r2]
 8015508:	2194      	movs	r1, #148	@ 0x94
 801550a:	187a      	adds	r2, r7, r1
 801550c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	689b      	ldr	r3, [r3, #8]
 8015514:	2240      	movs	r2, #64	@ 0x40
 8015516:	4013      	ands	r3, r2
 8015518:	2b40      	cmp	r3, #64	@ 0x40
 801551a:	d004      	beq.n	8015526 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801551c:	187b      	adds	r3, r7, r1
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2228      	movs	r2, #40	@ 0x28
 8015522:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015524:	d04b      	beq.n	80155be <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	0018      	movs	r0, r3
 801552a:	f001 f861 	bl	80165f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	689b      	ldr	r3, [r3, #8]
 8015534:	2240      	movs	r2, #64	@ 0x40
 8015536:	4013      	ands	r3, r2
 8015538:	2b40      	cmp	r3, #64	@ 0x40
 801553a:	d139      	bne.n	80155b0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801553c:	f3ef 8310 	mrs	r3, PRIMASK
 8015540:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8015542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015544:	2090      	movs	r0, #144	@ 0x90
 8015546:	183a      	adds	r2, r7, r0
 8015548:	6013      	str	r3, [r2, #0]
 801554a:	2301      	movs	r3, #1
 801554c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801554e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015550:	f383 8810 	msr	PRIMASK, r3
}
 8015554:	46c0      	nop			@ (mov r8, r8)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	689a      	ldr	r2, [r3, #8]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2140      	movs	r1, #64	@ 0x40
 8015562:	438a      	bics	r2, r1
 8015564:	609a      	str	r2, [r3, #8]
 8015566:	183b      	adds	r3, r7, r0
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801556c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801556e:	f383 8810 	msr	PRIMASK, r3
}
 8015572:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015578:	2b00      	cmp	r3, #0
 801557a:	d012      	beq.n	80155a2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015580:	4a17      	ldr	r2, [pc, #92]	@ (80155e0 <HAL_UART_IRQHandler+0x2ac>)
 8015582:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015588:	0018      	movs	r0, r3
 801558a:	f7f8 fa45 	bl	800da18 <HAL_DMA_Abort_IT>
 801558e:	1e03      	subs	r3, r0, #0
 8015590:	d020      	beq.n	80155d4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801559c:	0018      	movs	r0, r3
 801559e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80155a0:	e018      	b.n	80155d4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2298      	movs	r2, #152	@ 0x98
 80155a6:	589b      	ldr	r3, [r3, r2]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	0010      	movs	r0, r2
 80155ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80155ae:	e011      	b.n	80155d4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2298      	movs	r2, #152	@ 0x98
 80155b4:	589b      	ldr	r3, [r3, r2]
 80155b6:	687a      	ldr	r2, [r7, #4]
 80155b8:	0010      	movs	r0, r2
 80155ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80155bc:	e00a      	b.n	80155d4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2298      	movs	r2, #152	@ 0x98
 80155c2:	589b      	ldr	r3, [r3, r2]
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	0010      	movs	r0, r2
 80155c8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2284      	movs	r2, #132	@ 0x84
 80155ce:	2100      	movs	r1, #0
 80155d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80155d2:	e18d      	b.n	80158f0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80155d4:	46c0      	nop			@ (mov r8, r8)
    return;
 80155d6:	e18b      	b.n	80158f0 <HAL_UART_IRQHandler+0x5bc>
 80155d8:	0000080f 	.word	0x0000080f
 80155dc:	04000120 	.word	0x04000120
 80155e0:	0801697d 	.word	0x0801697d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80155e8:	2b01      	cmp	r3, #1
 80155ea:	d000      	beq.n	80155ee <HAL_UART_IRQHandler+0x2ba>
 80155ec:	e13d      	b.n	801586a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80155ee:	23a4      	movs	r3, #164	@ 0xa4
 80155f0:	18fb      	adds	r3, r7, r3
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2210      	movs	r2, #16
 80155f6:	4013      	ands	r3, r2
 80155f8:	d100      	bne.n	80155fc <HAL_UART_IRQHandler+0x2c8>
 80155fa:	e136      	b.n	801586a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80155fc:	23a0      	movs	r3, #160	@ 0xa0
 80155fe:	18fb      	adds	r3, r7, r3
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	2210      	movs	r2, #16
 8015604:	4013      	ands	r3, r2
 8015606:	d100      	bne.n	801560a <HAL_UART_IRQHandler+0x2d6>
 8015608:	e12f      	b.n	801586a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2210      	movs	r2, #16
 8015610:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	689b      	ldr	r3, [r3, #8]
 8015618:	2240      	movs	r2, #64	@ 0x40
 801561a:	4013      	ands	r3, r2
 801561c:	2b40      	cmp	r3, #64	@ 0x40
 801561e:	d000      	beq.n	8015622 <HAL_UART_IRQHandler+0x2ee>
 8015620:	e0a2      	b.n	8015768 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	685a      	ldr	r2, [r3, #4]
 801562a:	217e      	movs	r1, #126	@ 0x7e
 801562c:	187b      	adds	r3, r7, r1
 801562e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8015630:	187b      	adds	r3, r7, r1
 8015632:	881b      	ldrh	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d100      	bne.n	801563a <HAL_UART_IRQHandler+0x306>
 8015638:	e15c      	b.n	80158f4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2258      	movs	r2, #88	@ 0x58
 801563e:	5a9b      	ldrh	r3, [r3, r2]
 8015640:	187a      	adds	r2, r7, r1
 8015642:	8812      	ldrh	r2, [r2, #0]
 8015644:	429a      	cmp	r2, r3
 8015646:	d300      	bcc.n	801564a <HAL_UART_IRQHandler+0x316>
 8015648:	e154      	b.n	80158f4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	187a      	adds	r2, r7, r1
 801564e:	215a      	movs	r1, #90	@ 0x5a
 8015650:	8812      	ldrh	r2, [r2, #0]
 8015652:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2220      	movs	r2, #32
 801565e:	4013      	ands	r3, r2
 8015660:	d16f      	bne.n	8015742 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015662:	f3ef 8310 	mrs	r3, PRIMASK
 8015666:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801566a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801566c:	2301      	movs	r3, #1
 801566e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015672:	f383 8810 	msr	PRIMASK, r3
}
 8015676:	46c0      	nop			@ (mov r8, r8)
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	681a      	ldr	r2, [r3, #0]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	49a0      	ldr	r1, [pc, #640]	@ (8015904 <HAL_UART_IRQHandler+0x5d0>)
 8015684:	400a      	ands	r2, r1
 8015686:	601a      	str	r2, [r3, #0]
 8015688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801568a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801568e:	f383 8810 	msr	PRIMASK, r3
}
 8015692:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015694:	f3ef 8310 	mrs	r3, PRIMASK
 8015698:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801569c:	677b      	str	r3, [r7, #116]	@ 0x74
 801569e:	2301      	movs	r3, #1
 80156a0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156a4:	f383 8810 	msr	PRIMASK, r3
}
 80156a8:	46c0      	nop			@ (mov r8, r8)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	689a      	ldr	r2, [r3, #8]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	2101      	movs	r1, #1
 80156b6:	438a      	bics	r2, r1
 80156b8:	609a      	str	r2, [r3, #8]
 80156ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80156bc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80156c0:	f383 8810 	msr	PRIMASK, r3
}
 80156c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156c6:	f3ef 8310 	mrs	r3, PRIMASK
 80156ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80156cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80156ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80156d0:	2301      	movs	r3, #1
 80156d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156d6:	f383 8810 	msr	PRIMASK, r3
}
 80156da:	46c0      	nop			@ (mov r8, r8)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	689a      	ldr	r2, [r3, #8]
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	2140      	movs	r1, #64	@ 0x40
 80156e8:	438a      	bics	r2, r1
 80156ea:	609a      	str	r2, [r3, #8]
 80156ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80156ee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80156f2:	f383 8810 	msr	PRIMASK, r3
}
 80156f6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2280      	movs	r2, #128	@ 0x80
 80156fc:	2120      	movs	r1, #32
 80156fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2200      	movs	r2, #0
 8015704:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015706:	f3ef 8310 	mrs	r3, PRIMASK
 801570a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801570c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801570e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015710:	2301      	movs	r3, #1
 8015712:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015714:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015716:	f383 8810 	msr	PRIMASK, r3
}
 801571a:	46c0      	nop			@ (mov r8, r8)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	2110      	movs	r1, #16
 8015728:	438a      	bics	r2, r1
 801572a:	601a      	str	r2, [r3, #0]
 801572c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801572e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015732:	f383 8810 	msr	PRIMASK, r3
}
 8015736:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801573c:	0018      	movs	r0, r3
 801573e:	f7f8 f92b 	bl	800d998 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2202      	movs	r2, #2
 8015746:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	22ac      	movs	r2, #172	@ 0xac
 801574c:	589b      	ldr	r3, [r3, r2]
 801574e:	687a      	ldr	r2, [r7, #4]
 8015750:	2158      	movs	r1, #88	@ 0x58
 8015752:	5a51      	ldrh	r1, [r2, r1]
 8015754:	687a      	ldr	r2, [r7, #4]
 8015756:	205a      	movs	r0, #90	@ 0x5a
 8015758:	5a12      	ldrh	r2, [r2, r0]
 801575a:	b292      	uxth	r2, r2
 801575c:	1a8a      	subs	r2, r1, r2
 801575e:	b291      	uxth	r1, r2
 8015760:	687a      	ldr	r2, [r7, #4]
 8015762:	0010      	movs	r0, r2
 8015764:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015766:	e0c5      	b.n	80158f4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2258      	movs	r2, #88	@ 0x58
 801576c:	5a99      	ldrh	r1, [r3, r2]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	225a      	movs	r2, #90	@ 0x5a
 8015772:	5a9b      	ldrh	r3, [r3, r2]
 8015774:	b29a      	uxth	r2, r3
 8015776:	208e      	movs	r0, #142	@ 0x8e
 8015778:	183b      	adds	r3, r7, r0
 801577a:	1a8a      	subs	r2, r1, r2
 801577c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	225a      	movs	r2, #90	@ 0x5a
 8015782:	5a9b      	ldrh	r3, [r3, r2]
 8015784:	b29b      	uxth	r3, r3
 8015786:	2b00      	cmp	r3, #0
 8015788:	d100      	bne.n	801578c <HAL_UART_IRQHandler+0x458>
 801578a:	e0b5      	b.n	80158f8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801578c:	183b      	adds	r3, r7, r0
 801578e:	881b      	ldrh	r3, [r3, #0]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d100      	bne.n	8015796 <HAL_UART_IRQHandler+0x462>
 8015794:	e0b0      	b.n	80158f8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015796:	f3ef 8310 	mrs	r3, PRIMASK
 801579a:	60fb      	str	r3, [r7, #12]
  return(result);
 801579c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801579e:	2488      	movs	r4, #136	@ 0x88
 80157a0:	193a      	adds	r2, r7, r4
 80157a2:	6013      	str	r3, [r2, #0]
 80157a4:	2301      	movs	r3, #1
 80157a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157a8:	693b      	ldr	r3, [r7, #16]
 80157aa:	f383 8810 	msr	PRIMASK, r3
}
 80157ae:	46c0      	nop			@ (mov r8, r8)
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	681a      	ldr	r2, [r3, #0]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	4953      	ldr	r1, [pc, #332]	@ (8015908 <HAL_UART_IRQHandler+0x5d4>)
 80157bc:	400a      	ands	r2, r1
 80157be:	601a      	str	r2, [r3, #0]
 80157c0:	193b      	adds	r3, r7, r4
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	f383 8810 	msr	PRIMASK, r3
}
 80157cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80157ce:	f3ef 8310 	mrs	r3, PRIMASK
 80157d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80157d4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80157d6:	2484      	movs	r4, #132	@ 0x84
 80157d8:	193a      	adds	r2, r7, r4
 80157da:	6013      	str	r3, [r2, #0]
 80157dc:	2301      	movs	r3, #1
 80157de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	f383 8810 	msr	PRIMASK, r3
}
 80157e6:	46c0      	nop			@ (mov r8, r8)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	689a      	ldr	r2, [r3, #8]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2101      	movs	r1, #1
 80157f4:	438a      	bics	r2, r1
 80157f6:	609a      	str	r2, [r3, #8]
 80157f8:	193b      	adds	r3, r7, r4
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157fe:	6a3b      	ldr	r3, [r7, #32]
 8015800:	f383 8810 	msr	PRIMASK, r3
}
 8015804:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2280      	movs	r2, #128	@ 0x80
 801580a:	2120      	movs	r1, #32
 801580c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2200      	movs	r2, #0
 8015812:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2200      	movs	r2, #0
 8015818:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801581a:	f3ef 8310 	mrs	r3, PRIMASK
 801581e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015822:	2480      	movs	r4, #128	@ 0x80
 8015824:	193a      	adds	r2, r7, r4
 8015826:	6013      	str	r3, [r2, #0]
 8015828:	2301      	movs	r3, #1
 801582a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801582c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801582e:	f383 8810 	msr	PRIMASK, r3
}
 8015832:	46c0      	nop			@ (mov r8, r8)
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2110      	movs	r1, #16
 8015840:	438a      	bics	r2, r1
 8015842:	601a      	str	r2, [r3, #0]
 8015844:	193b      	adds	r3, r7, r4
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801584c:	f383 8810 	msr	PRIMASK, r3
}
 8015850:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2202      	movs	r2, #2
 8015856:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	22ac      	movs	r2, #172	@ 0xac
 801585c:	589b      	ldr	r3, [r3, r2]
 801585e:	183a      	adds	r2, r7, r0
 8015860:	8811      	ldrh	r1, [r2, #0]
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	0010      	movs	r0, r2
 8015866:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015868:	e046      	b.n	80158f8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801586a:	23a4      	movs	r3, #164	@ 0xa4
 801586c:	18fb      	adds	r3, r7, r3
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	2380      	movs	r3, #128	@ 0x80
 8015872:	035b      	lsls	r3, r3, #13
 8015874:	4013      	ands	r3, r2
 8015876:	d012      	beq.n	801589e <HAL_UART_IRQHandler+0x56a>
 8015878:	239c      	movs	r3, #156	@ 0x9c
 801587a:	18fb      	adds	r3, r7, r3
 801587c:	681a      	ldr	r2, [r3, #0]
 801587e:	2380      	movs	r3, #128	@ 0x80
 8015880:	03db      	lsls	r3, r3, #15
 8015882:	4013      	ands	r3, r2
 8015884:	d00b      	beq.n	801589e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	2280      	movs	r2, #128	@ 0x80
 801588c:	0352      	lsls	r2, r2, #13
 801588e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	22a8      	movs	r2, #168	@ 0xa8
 8015894:	589b      	ldr	r3, [r3, r2]
 8015896:	687a      	ldr	r2, [r7, #4]
 8015898:	0010      	movs	r0, r2
 801589a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801589c:	e02f      	b.n	80158fe <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801589e:	23a4      	movs	r3, #164	@ 0xa4
 80158a0:	18fb      	adds	r3, r7, r3
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	2280      	movs	r2, #128	@ 0x80
 80158a6:	4013      	ands	r3, r2
 80158a8:	d00f      	beq.n	80158ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80158aa:	23a0      	movs	r3, #160	@ 0xa0
 80158ac:	18fb      	adds	r3, r7, r3
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	2280      	movs	r2, #128	@ 0x80
 80158b2:	4013      	ands	r3, r2
 80158b4:	d009      	beq.n	80158ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d01e      	beq.n	80158fc <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	0010      	movs	r0, r2
 80158c6:	4798      	blx	r3
    }
    return;
 80158c8:	e018      	b.n	80158fc <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80158ca:	23a4      	movs	r3, #164	@ 0xa4
 80158cc:	18fb      	adds	r3, r7, r3
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2240      	movs	r2, #64	@ 0x40
 80158d2:	4013      	ands	r3, r2
 80158d4:	d013      	beq.n	80158fe <HAL_UART_IRQHandler+0x5ca>
 80158d6:	23a0      	movs	r3, #160	@ 0xa0
 80158d8:	18fb      	adds	r3, r7, r3
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	2240      	movs	r2, #64	@ 0x40
 80158de:	4013      	ands	r3, r2
 80158e0:	d00d      	beq.n	80158fe <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	0018      	movs	r0, r3
 80158e6:	f001 f862 	bl	80169ae <UART_EndTransmit_IT>
    return;
 80158ea:	e008      	b.n	80158fe <HAL_UART_IRQHandler+0x5ca>
      return;
 80158ec:	46c0      	nop			@ (mov r8, r8)
 80158ee:	e006      	b.n	80158fe <HAL_UART_IRQHandler+0x5ca>
    return;
 80158f0:	46c0      	nop			@ (mov r8, r8)
 80158f2:	e004      	b.n	80158fe <HAL_UART_IRQHandler+0x5ca>
      return;
 80158f4:	46c0      	nop			@ (mov r8, r8)
 80158f6:	e002      	b.n	80158fe <HAL_UART_IRQHandler+0x5ca>
      return;
 80158f8:	46c0      	nop			@ (mov r8, r8)
 80158fa:	e000      	b.n	80158fe <HAL_UART_IRQHandler+0x5ca>
    return;
 80158fc:	46c0      	nop			@ (mov r8, r8)
  }

}
 80158fe:	46bd      	mov	sp, r7
 8015900:	b02b      	add	sp, #172	@ 0xac
 8015902:	bd90      	pop	{r4, r7, pc}
 8015904:	fffffeff 	.word	0xfffffeff
 8015908:	fffffedf 	.word	0xfffffedf

0801590c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8015914:	46c0      	nop			@ (mov r8, r8)
 8015916:	46bd      	mov	sp, r7
 8015918:	b002      	add	sp, #8
 801591a:	bd80      	pop	{r7, pc}

0801591c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8015924:	46c0      	nop			@ (mov r8, r8)
 8015926:	46bd      	mov	sp, r7
 8015928:	b002      	add	sp, #8
 801592a:	bd80      	pop	{r7, pc}

0801592c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b082      	sub	sp, #8
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8015934:	46c0      	nop			@ (mov r8, r8)
 8015936:	46bd      	mov	sp, r7
 8015938:	b002      	add	sp, #8
 801593a:	bd80      	pop	{r7, pc}

0801593c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8015944:	46c0      	nop			@ (mov r8, r8)
 8015946:	46bd      	mov	sp, r7
 8015948:	b002      	add	sp, #8
 801594a:	bd80      	pop	{r7, pc}

0801594c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8015954:	46c0      	nop			@ (mov r8, r8)
 8015956:	46bd      	mov	sp, r7
 8015958:	b002      	add	sp, #8
 801595a:	bd80      	pop	{r7, pc}

0801595c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b082      	sub	sp, #8
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8015964:	46c0      	nop			@ (mov r8, r8)
 8015966:	46bd      	mov	sp, r7
 8015968:	b002      	add	sp, #8
 801596a:	bd80      	pop	{r7, pc}

0801596c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b082      	sub	sp, #8
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	000a      	movs	r2, r1
 8015976:	1cbb      	adds	r3, r7, #2
 8015978:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801597a:	46c0      	nop			@ (mov r8, r8)
 801597c:	46bd      	mov	sp, r7
 801597e:	b002      	add	sp, #8
 8015980:	bd80      	pop	{r7, pc}
	...

08015984 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2188      	movs	r1, #136	@ 0x88
 8015990:	4a14      	ldr	r2, [pc, #80]	@ (80159e4 <UART_InitCallbacksToDefault+0x60>)
 8015992:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	218c      	movs	r1, #140	@ 0x8c
 8015998:	4a13      	ldr	r2, [pc, #76]	@ (80159e8 <UART_InitCallbacksToDefault+0x64>)
 801599a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2190      	movs	r1, #144	@ 0x90
 80159a0:	4a12      	ldr	r2, [pc, #72]	@ (80159ec <UART_InitCallbacksToDefault+0x68>)
 80159a2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2194      	movs	r1, #148	@ 0x94
 80159a8:	4a11      	ldr	r2, [pc, #68]	@ (80159f0 <UART_InitCallbacksToDefault+0x6c>)
 80159aa:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2198      	movs	r1, #152	@ 0x98
 80159b0:	4a10      	ldr	r2, [pc, #64]	@ (80159f4 <UART_InitCallbacksToDefault+0x70>)
 80159b2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	219c      	movs	r1, #156	@ 0x9c
 80159b8:	4a0f      	ldr	r2, [pc, #60]	@ (80159f8 <UART_InitCallbacksToDefault+0x74>)
 80159ba:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	21a0      	movs	r1, #160	@ 0xa0
 80159c0:	4a0e      	ldr	r2, [pc, #56]	@ (80159fc <UART_InitCallbacksToDefault+0x78>)
 80159c2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	21a4      	movs	r1, #164	@ 0xa4
 80159c8:	4a0d      	ldr	r2, [pc, #52]	@ (8015a00 <UART_InitCallbacksToDefault+0x7c>)
 80159ca:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	21a8      	movs	r1, #168	@ 0xa8
 80159d0:	4a0c      	ldr	r2, [pc, #48]	@ (8015a04 <UART_InitCallbacksToDefault+0x80>)
 80159d2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	21ac      	movs	r1, #172	@ 0xac
 80159d8:	4a0b      	ldr	r2, [pc, #44]	@ (8015a08 <UART_InitCallbacksToDefault+0x84>)
 80159da:	505a      	str	r2, [r3, r1]

}
 80159dc:	46c0      	nop			@ (mov r8, r8)
 80159de:	46bd      	mov	sp, r7
 80159e0:	b002      	add	sp, #8
 80159e2:	bd80      	pop	{r7, pc}
 80159e4:	0801591d 	.word	0x0801591d
 80159e8:	0801590d 	.word	0x0801590d
 80159ec:	0801592d 	.word	0x0801592d
 80159f0:	080073f9 	.word	0x080073f9
 80159f4:	08003a75 	.word	0x08003a75
 80159f8:	0801593d 	.word	0x0801593d
 80159fc:	0801594d 	.word	0x0801594d
 8015a00:	0801595d 	.word	0x0801595d
 8015a04:	08016da1 	.word	0x08016da1
 8015a08:	0801596d 	.word	0x0801596d

08015a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015a0c:	b5b0      	push	{r4, r5, r7, lr}
 8015a0e:	b08e      	sub	sp, #56	@ 0x38
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015a14:	231a      	movs	r3, #26
 8015a16:	2218      	movs	r2, #24
 8015a18:	189b      	adds	r3, r3, r2
 8015a1a:	19db      	adds	r3, r3, r7
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015a20:	69fb      	ldr	r3, [r7, #28]
 8015a22:	689a      	ldr	r2, [r3, #8]
 8015a24:	69fb      	ldr	r3, [r7, #28]
 8015a26:	691b      	ldr	r3, [r3, #16]
 8015a28:	431a      	orrs	r2, r3
 8015a2a:	69fb      	ldr	r3, [r7, #28]
 8015a2c:	695b      	ldr	r3, [r3, #20]
 8015a2e:	431a      	orrs	r2, r3
 8015a30:	69fb      	ldr	r3, [r7, #28]
 8015a32:	69db      	ldr	r3, [r3, #28]
 8015a34:	4313      	orrs	r3, r2
 8015a36:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	4ac3      	ldr	r2, [pc, #780]	@ (8015d4c <UART_SetConfig+0x340>)
 8015a40:	4013      	ands	r3, r2
 8015a42:	0019      	movs	r1, r3
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015a4a:	430a      	orrs	r2, r1
 8015a4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015a4e:	69fb      	ldr	r3, [r7, #28]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	4abe      	ldr	r2, [pc, #760]	@ (8015d50 <UART_SetConfig+0x344>)
 8015a56:	4013      	ands	r3, r2
 8015a58:	0019      	movs	r1, r3
 8015a5a:	69fb      	ldr	r3, [r7, #28]
 8015a5c:	68da      	ldr	r2, [r3, #12]
 8015a5e:	69fb      	ldr	r3, [r7, #28]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	430a      	orrs	r2, r1
 8015a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015a66:	69fb      	ldr	r3, [r7, #28]
 8015a68:	699b      	ldr	r3, [r3, #24]
 8015a6a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015a6c:	69fb      	ldr	r3, [r7, #28]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	4ab8      	ldr	r2, [pc, #736]	@ (8015d54 <UART_SetConfig+0x348>)
 8015a72:	4293      	cmp	r3, r2
 8015a74:	d004      	beq.n	8015a80 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015a76:	69fb      	ldr	r3, [r7, #28]
 8015a78:	6a1b      	ldr	r3, [r3, #32]
 8015a7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015a7c:	4313      	orrs	r3, r2
 8015a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015a80:	69fb      	ldr	r3, [r7, #28]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	689b      	ldr	r3, [r3, #8]
 8015a86:	4ab4      	ldr	r2, [pc, #720]	@ (8015d58 <UART_SetConfig+0x34c>)
 8015a88:	4013      	ands	r3, r2
 8015a8a:	0019      	movs	r1, r3
 8015a8c:	69fb      	ldr	r3, [r7, #28]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015a92:	430a      	orrs	r2, r1
 8015a94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	4ab0      	ldr	r2, [pc, #704]	@ (8015d5c <UART_SetConfig+0x350>)
 8015a9c:	4293      	cmp	r3, r2
 8015a9e:	d131      	bne.n	8015b04 <UART_SetConfig+0xf8>
 8015aa0:	4baf      	ldr	r3, [pc, #700]	@ (8015d60 <UART_SetConfig+0x354>)
 8015aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015aa4:	2203      	movs	r2, #3
 8015aa6:	4013      	ands	r3, r2
 8015aa8:	2b03      	cmp	r3, #3
 8015aaa:	d01d      	beq.n	8015ae8 <UART_SetConfig+0xdc>
 8015aac:	d823      	bhi.n	8015af6 <UART_SetConfig+0xea>
 8015aae:	2b02      	cmp	r3, #2
 8015ab0:	d00c      	beq.n	8015acc <UART_SetConfig+0xc0>
 8015ab2:	d820      	bhi.n	8015af6 <UART_SetConfig+0xea>
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d002      	beq.n	8015abe <UART_SetConfig+0xb2>
 8015ab8:	2b01      	cmp	r3, #1
 8015aba:	d00e      	beq.n	8015ada <UART_SetConfig+0xce>
 8015abc:	e01b      	b.n	8015af6 <UART_SetConfig+0xea>
 8015abe:	231b      	movs	r3, #27
 8015ac0:	2218      	movs	r2, #24
 8015ac2:	189b      	adds	r3, r3, r2
 8015ac4:	19db      	adds	r3, r3, r7
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	701a      	strb	r2, [r3, #0]
 8015aca:	e0b4      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015acc:	231b      	movs	r3, #27
 8015ace:	2218      	movs	r2, #24
 8015ad0:	189b      	adds	r3, r3, r2
 8015ad2:	19db      	adds	r3, r3, r7
 8015ad4:	2202      	movs	r2, #2
 8015ad6:	701a      	strb	r2, [r3, #0]
 8015ad8:	e0ad      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015ada:	231b      	movs	r3, #27
 8015adc:	2218      	movs	r2, #24
 8015ade:	189b      	adds	r3, r3, r2
 8015ae0:	19db      	adds	r3, r3, r7
 8015ae2:	2204      	movs	r2, #4
 8015ae4:	701a      	strb	r2, [r3, #0]
 8015ae6:	e0a6      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015ae8:	231b      	movs	r3, #27
 8015aea:	2218      	movs	r2, #24
 8015aec:	189b      	adds	r3, r3, r2
 8015aee:	19db      	adds	r3, r3, r7
 8015af0:	2208      	movs	r2, #8
 8015af2:	701a      	strb	r2, [r3, #0]
 8015af4:	e09f      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015af6:	231b      	movs	r3, #27
 8015af8:	2218      	movs	r2, #24
 8015afa:	189b      	adds	r3, r3, r2
 8015afc:	19db      	adds	r3, r3, r7
 8015afe:	2210      	movs	r2, #16
 8015b00:	701a      	strb	r2, [r3, #0]
 8015b02:	e098      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015b04:	69fb      	ldr	r3, [r7, #28]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	4a96      	ldr	r2, [pc, #600]	@ (8015d64 <UART_SetConfig+0x358>)
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d131      	bne.n	8015b72 <UART_SetConfig+0x166>
 8015b0e:	4b94      	ldr	r3, [pc, #592]	@ (8015d60 <UART_SetConfig+0x354>)
 8015b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015b12:	220c      	movs	r2, #12
 8015b14:	4013      	ands	r3, r2
 8015b16:	2b0c      	cmp	r3, #12
 8015b18:	d01d      	beq.n	8015b56 <UART_SetConfig+0x14a>
 8015b1a:	d823      	bhi.n	8015b64 <UART_SetConfig+0x158>
 8015b1c:	2b08      	cmp	r3, #8
 8015b1e:	d00c      	beq.n	8015b3a <UART_SetConfig+0x12e>
 8015b20:	d820      	bhi.n	8015b64 <UART_SetConfig+0x158>
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d002      	beq.n	8015b2c <UART_SetConfig+0x120>
 8015b26:	2b04      	cmp	r3, #4
 8015b28:	d00e      	beq.n	8015b48 <UART_SetConfig+0x13c>
 8015b2a:	e01b      	b.n	8015b64 <UART_SetConfig+0x158>
 8015b2c:	231b      	movs	r3, #27
 8015b2e:	2218      	movs	r2, #24
 8015b30:	189b      	adds	r3, r3, r2
 8015b32:	19db      	adds	r3, r3, r7
 8015b34:	2200      	movs	r2, #0
 8015b36:	701a      	strb	r2, [r3, #0]
 8015b38:	e07d      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015b3a:	231b      	movs	r3, #27
 8015b3c:	2218      	movs	r2, #24
 8015b3e:	189b      	adds	r3, r3, r2
 8015b40:	19db      	adds	r3, r3, r7
 8015b42:	2202      	movs	r2, #2
 8015b44:	701a      	strb	r2, [r3, #0]
 8015b46:	e076      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015b48:	231b      	movs	r3, #27
 8015b4a:	2218      	movs	r2, #24
 8015b4c:	189b      	adds	r3, r3, r2
 8015b4e:	19db      	adds	r3, r3, r7
 8015b50:	2204      	movs	r2, #4
 8015b52:	701a      	strb	r2, [r3, #0]
 8015b54:	e06f      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015b56:	231b      	movs	r3, #27
 8015b58:	2218      	movs	r2, #24
 8015b5a:	189b      	adds	r3, r3, r2
 8015b5c:	19db      	adds	r3, r3, r7
 8015b5e:	2208      	movs	r2, #8
 8015b60:	701a      	strb	r2, [r3, #0]
 8015b62:	e068      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015b64:	231b      	movs	r3, #27
 8015b66:	2218      	movs	r2, #24
 8015b68:	189b      	adds	r3, r3, r2
 8015b6a:	19db      	adds	r3, r3, r7
 8015b6c:	2210      	movs	r2, #16
 8015b6e:	701a      	strb	r2, [r3, #0]
 8015b70:	e061      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015b72:	69fb      	ldr	r3, [r7, #28]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	4a7c      	ldr	r2, [pc, #496]	@ (8015d68 <UART_SetConfig+0x35c>)
 8015b78:	4293      	cmp	r3, r2
 8015b7a:	d106      	bne.n	8015b8a <UART_SetConfig+0x17e>
 8015b7c:	231b      	movs	r3, #27
 8015b7e:	2218      	movs	r2, #24
 8015b80:	189b      	adds	r3, r3, r2
 8015b82:	19db      	adds	r3, r3, r7
 8015b84:	2200      	movs	r2, #0
 8015b86:	701a      	strb	r2, [r3, #0]
 8015b88:	e055      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4a77      	ldr	r2, [pc, #476]	@ (8015d6c <UART_SetConfig+0x360>)
 8015b90:	4293      	cmp	r3, r2
 8015b92:	d106      	bne.n	8015ba2 <UART_SetConfig+0x196>
 8015b94:	231b      	movs	r3, #27
 8015b96:	2218      	movs	r2, #24
 8015b98:	189b      	adds	r3, r3, r2
 8015b9a:	19db      	adds	r3, r3, r7
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	701a      	strb	r2, [r3, #0]
 8015ba0:	e049      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	4a6b      	ldr	r2, [pc, #428]	@ (8015d54 <UART_SetConfig+0x348>)
 8015ba8:	4293      	cmp	r3, r2
 8015baa:	d13e      	bne.n	8015c2a <UART_SetConfig+0x21e>
 8015bac:	4b6c      	ldr	r3, [pc, #432]	@ (8015d60 <UART_SetConfig+0x354>)
 8015bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015bb0:	23c0      	movs	r3, #192	@ 0xc0
 8015bb2:	011b      	lsls	r3, r3, #4
 8015bb4:	4013      	ands	r3, r2
 8015bb6:	22c0      	movs	r2, #192	@ 0xc0
 8015bb8:	0112      	lsls	r2, r2, #4
 8015bba:	4293      	cmp	r3, r2
 8015bbc:	d027      	beq.n	8015c0e <UART_SetConfig+0x202>
 8015bbe:	22c0      	movs	r2, #192	@ 0xc0
 8015bc0:	0112      	lsls	r2, r2, #4
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	d82a      	bhi.n	8015c1c <UART_SetConfig+0x210>
 8015bc6:	2280      	movs	r2, #128	@ 0x80
 8015bc8:	0112      	lsls	r2, r2, #4
 8015bca:	4293      	cmp	r3, r2
 8015bcc:	d011      	beq.n	8015bf2 <UART_SetConfig+0x1e6>
 8015bce:	2280      	movs	r2, #128	@ 0x80
 8015bd0:	0112      	lsls	r2, r2, #4
 8015bd2:	4293      	cmp	r3, r2
 8015bd4:	d822      	bhi.n	8015c1c <UART_SetConfig+0x210>
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d004      	beq.n	8015be4 <UART_SetConfig+0x1d8>
 8015bda:	2280      	movs	r2, #128	@ 0x80
 8015bdc:	00d2      	lsls	r2, r2, #3
 8015bde:	4293      	cmp	r3, r2
 8015be0:	d00e      	beq.n	8015c00 <UART_SetConfig+0x1f4>
 8015be2:	e01b      	b.n	8015c1c <UART_SetConfig+0x210>
 8015be4:	231b      	movs	r3, #27
 8015be6:	2218      	movs	r2, #24
 8015be8:	189b      	adds	r3, r3, r2
 8015bea:	19db      	adds	r3, r3, r7
 8015bec:	2200      	movs	r2, #0
 8015bee:	701a      	strb	r2, [r3, #0]
 8015bf0:	e021      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015bf2:	231b      	movs	r3, #27
 8015bf4:	2218      	movs	r2, #24
 8015bf6:	189b      	adds	r3, r3, r2
 8015bf8:	19db      	adds	r3, r3, r7
 8015bfa:	2202      	movs	r2, #2
 8015bfc:	701a      	strb	r2, [r3, #0]
 8015bfe:	e01a      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015c00:	231b      	movs	r3, #27
 8015c02:	2218      	movs	r2, #24
 8015c04:	189b      	adds	r3, r3, r2
 8015c06:	19db      	adds	r3, r3, r7
 8015c08:	2204      	movs	r2, #4
 8015c0a:	701a      	strb	r2, [r3, #0]
 8015c0c:	e013      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015c0e:	231b      	movs	r3, #27
 8015c10:	2218      	movs	r2, #24
 8015c12:	189b      	adds	r3, r3, r2
 8015c14:	19db      	adds	r3, r3, r7
 8015c16:	2208      	movs	r2, #8
 8015c18:	701a      	strb	r2, [r3, #0]
 8015c1a:	e00c      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015c1c:	231b      	movs	r3, #27
 8015c1e:	2218      	movs	r2, #24
 8015c20:	189b      	adds	r3, r3, r2
 8015c22:	19db      	adds	r3, r3, r7
 8015c24:	2210      	movs	r2, #16
 8015c26:	701a      	strb	r2, [r3, #0]
 8015c28:	e005      	b.n	8015c36 <UART_SetConfig+0x22a>
 8015c2a:	231b      	movs	r3, #27
 8015c2c:	2218      	movs	r2, #24
 8015c2e:	189b      	adds	r3, r3, r2
 8015c30:	19db      	adds	r3, r3, r7
 8015c32:	2210      	movs	r2, #16
 8015c34:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015c36:	69fb      	ldr	r3, [r7, #28]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	4a46      	ldr	r2, [pc, #280]	@ (8015d54 <UART_SetConfig+0x348>)
 8015c3c:	4293      	cmp	r3, r2
 8015c3e:	d000      	beq.n	8015c42 <UART_SetConfig+0x236>
 8015c40:	e09a      	b.n	8015d78 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015c42:	231b      	movs	r3, #27
 8015c44:	2218      	movs	r2, #24
 8015c46:	189b      	adds	r3, r3, r2
 8015c48:	19db      	adds	r3, r3, r7
 8015c4a:	781b      	ldrb	r3, [r3, #0]
 8015c4c:	2b08      	cmp	r3, #8
 8015c4e:	d01d      	beq.n	8015c8c <UART_SetConfig+0x280>
 8015c50:	dc20      	bgt.n	8015c94 <UART_SetConfig+0x288>
 8015c52:	2b04      	cmp	r3, #4
 8015c54:	d015      	beq.n	8015c82 <UART_SetConfig+0x276>
 8015c56:	dc1d      	bgt.n	8015c94 <UART_SetConfig+0x288>
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d002      	beq.n	8015c62 <UART_SetConfig+0x256>
 8015c5c:	2b02      	cmp	r3, #2
 8015c5e:	d005      	beq.n	8015c6c <UART_SetConfig+0x260>
 8015c60:	e018      	b.n	8015c94 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c62:	f7fd ff3f 	bl	8013ae4 <HAL_RCC_GetPCLK1Freq>
 8015c66:	0003      	movs	r3, r0
 8015c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015c6a:	e01c      	b.n	8015ca6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8015d60 <UART_SetConfig+0x354>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2210      	movs	r2, #16
 8015c72:	4013      	ands	r3, r2
 8015c74:	d002      	beq.n	8015c7c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8015c76:	4b3e      	ldr	r3, [pc, #248]	@ (8015d70 <UART_SetConfig+0x364>)
 8015c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015c7a:	e014      	b.n	8015ca6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8015c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8015d74 <UART_SetConfig+0x368>)
 8015c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015c80:	e011      	b.n	8015ca6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015c82:	f7fd fe7f 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 8015c86:	0003      	movs	r3, r0
 8015c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015c8a:	e00c      	b.n	8015ca6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015c8c:	2380      	movs	r3, #128	@ 0x80
 8015c8e:	021b      	lsls	r3, r3, #8
 8015c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015c92:	e008      	b.n	8015ca6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8015c94:	2300      	movs	r3, #0
 8015c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8015c98:	231a      	movs	r3, #26
 8015c9a:	2218      	movs	r2, #24
 8015c9c:	189b      	adds	r3, r3, r2
 8015c9e:	19db      	adds	r3, r3, r7
 8015ca0:	2201      	movs	r2, #1
 8015ca2:	701a      	strb	r2, [r3, #0]
        break;
 8015ca4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d100      	bne.n	8015cae <UART_SetConfig+0x2a2>
 8015cac:	e133      	b.n	8015f16 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015cae:	69fb      	ldr	r3, [r7, #28]
 8015cb0:	685a      	ldr	r2, [r3, #4]
 8015cb2:	0013      	movs	r3, r2
 8015cb4:	005b      	lsls	r3, r3, #1
 8015cb6:	189b      	adds	r3, r3, r2
 8015cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d305      	bcc.n	8015cca <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d906      	bls.n	8015cd8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8015cca:	231a      	movs	r3, #26
 8015ccc:	2218      	movs	r2, #24
 8015cce:	189b      	adds	r3, r3, r2
 8015cd0:	19db      	adds	r3, r3, r7
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	701a      	strb	r2, [r3, #0]
 8015cd6:	e11e      	b.n	8015f16 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8015cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cda:	613b      	str	r3, [r7, #16]
 8015cdc:	2300      	movs	r3, #0
 8015cde:	617b      	str	r3, [r7, #20]
 8015ce0:	6939      	ldr	r1, [r7, #16]
 8015ce2:	697a      	ldr	r2, [r7, #20]
 8015ce4:	000b      	movs	r3, r1
 8015ce6:	0e1b      	lsrs	r3, r3, #24
 8015ce8:	0010      	movs	r0, r2
 8015cea:	0205      	lsls	r5, r0, #8
 8015cec:	431d      	orrs	r5, r3
 8015cee:	000b      	movs	r3, r1
 8015cf0:	021c      	lsls	r4, r3, #8
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	085b      	lsrs	r3, r3, #1
 8015cf8:	60bb      	str	r3, [r7, #8]
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	60fb      	str	r3, [r7, #12]
 8015cfe:	68b8      	ldr	r0, [r7, #8]
 8015d00:	68f9      	ldr	r1, [r7, #12]
 8015d02:	1900      	adds	r0, r0, r4
 8015d04:	4169      	adcs	r1, r5
 8015d06:	69fb      	ldr	r3, [r7, #28]
 8015d08:	685b      	ldr	r3, [r3, #4]
 8015d0a:	603b      	str	r3, [r7, #0]
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	607b      	str	r3, [r7, #4]
 8015d10:	683a      	ldr	r2, [r7, #0]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f7ea fc34 	bl	8000580 <__aeabi_uldivmod>
 8015d18:	0002      	movs	r2, r0
 8015d1a:	000b      	movs	r3, r1
 8015d1c:	0013      	movs	r3, r2
 8015d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d22:	23c0      	movs	r3, #192	@ 0xc0
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d309      	bcc.n	8015d3e <UART_SetConfig+0x332>
 8015d2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d2c:	2380      	movs	r3, #128	@ 0x80
 8015d2e:	035b      	lsls	r3, r3, #13
 8015d30:	429a      	cmp	r2, r3
 8015d32:	d204      	bcs.n	8015d3e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8015d34:	69fb      	ldr	r3, [r7, #28]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d3a:	60da      	str	r2, [r3, #12]
 8015d3c:	e0eb      	b.n	8015f16 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8015d3e:	231a      	movs	r3, #26
 8015d40:	2218      	movs	r2, #24
 8015d42:	189b      	adds	r3, r3, r2
 8015d44:	19db      	adds	r3, r3, r7
 8015d46:	2201      	movs	r2, #1
 8015d48:	701a      	strb	r2, [r3, #0]
 8015d4a:	e0e4      	b.n	8015f16 <UART_SetConfig+0x50a>
 8015d4c:	efff69f3 	.word	0xefff69f3
 8015d50:	ffffcfff 	.word	0xffffcfff
 8015d54:	40004800 	.word	0x40004800
 8015d58:	fffff4ff 	.word	0xfffff4ff
 8015d5c:	40013800 	.word	0x40013800
 8015d60:	40021000 	.word	0x40021000
 8015d64:	40004400 	.word	0x40004400
 8015d68:	40004c00 	.word	0x40004c00
 8015d6c:	40005000 	.word	0x40005000
 8015d70:	003d0900 	.word	0x003d0900
 8015d74:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	69da      	ldr	r2, [r3, #28]
 8015d7c:	2380      	movs	r3, #128	@ 0x80
 8015d7e:	021b      	lsls	r3, r3, #8
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d000      	beq.n	8015d86 <UART_SetConfig+0x37a>
 8015d84:	e070      	b.n	8015e68 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8015d86:	231b      	movs	r3, #27
 8015d88:	2218      	movs	r2, #24
 8015d8a:	189b      	adds	r3, r3, r2
 8015d8c:	19db      	adds	r3, r3, r7
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	2b08      	cmp	r3, #8
 8015d92:	d822      	bhi.n	8015dda <UART_SetConfig+0x3ce>
 8015d94:	009a      	lsls	r2, r3, #2
 8015d96:	4b67      	ldr	r3, [pc, #412]	@ (8015f34 <UART_SetConfig+0x528>)
 8015d98:	18d3      	adds	r3, r2, r3
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015d9e:	f7fd fea1 	bl	8013ae4 <HAL_RCC_GetPCLK1Freq>
 8015da2:	0003      	movs	r3, r0
 8015da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015da6:	e021      	b.n	8015dec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015da8:	f7fd feb2 	bl	8013b10 <HAL_RCC_GetPCLK2Freq>
 8015dac:	0003      	movs	r3, r0
 8015dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015db0:	e01c      	b.n	8015dec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015db2:	4b61      	ldr	r3, [pc, #388]	@ (8015f38 <UART_SetConfig+0x52c>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	2210      	movs	r2, #16
 8015db8:	4013      	ands	r3, r2
 8015dba:	d002      	beq.n	8015dc2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8015dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8015f3c <UART_SetConfig+0x530>)
 8015dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015dc0:	e014      	b.n	8015dec <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8015dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8015f40 <UART_SetConfig+0x534>)
 8015dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015dc6:	e011      	b.n	8015dec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015dc8:	f7fd fddc 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 8015dcc:	0003      	movs	r3, r0
 8015dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015dd0:	e00c      	b.n	8015dec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015dd2:	2380      	movs	r3, #128	@ 0x80
 8015dd4:	021b      	lsls	r3, r3, #8
 8015dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015dd8:	e008      	b.n	8015dec <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8015dde:	231a      	movs	r3, #26
 8015de0:	2218      	movs	r2, #24
 8015de2:	189b      	adds	r3, r3, r2
 8015de4:	19db      	adds	r3, r3, r7
 8015de6:	2201      	movs	r2, #1
 8015de8:	701a      	strb	r2, [r3, #0]
        break;
 8015dea:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d100      	bne.n	8015df4 <UART_SetConfig+0x3e8>
 8015df2:	e090      	b.n	8015f16 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df6:	005a      	lsls	r2, r3, #1
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	085b      	lsrs	r3, r3, #1
 8015dfe:	18d2      	adds	r2, r2, r3
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	685b      	ldr	r3, [r3, #4]
 8015e04:	0019      	movs	r1, r3
 8015e06:	0010      	movs	r0, r2
 8015e08:	f7ea f9cc 	bl	80001a4 <__udivsi3>
 8015e0c:	0003      	movs	r3, r0
 8015e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e12:	2b0f      	cmp	r3, #15
 8015e14:	d921      	bls.n	8015e5a <UART_SetConfig+0x44e>
 8015e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e18:	2380      	movs	r3, #128	@ 0x80
 8015e1a:	025b      	lsls	r3, r3, #9
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d21c      	bcs.n	8015e5a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	200e      	movs	r0, #14
 8015e26:	2418      	movs	r4, #24
 8015e28:	1903      	adds	r3, r0, r4
 8015e2a:	19db      	adds	r3, r3, r7
 8015e2c:	210f      	movs	r1, #15
 8015e2e:	438a      	bics	r2, r1
 8015e30:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e34:	085b      	lsrs	r3, r3, #1
 8015e36:	b29b      	uxth	r3, r3
 8015e38:	2207      	movs	r2, #7
 8015e3a:	4013      	ands	r3, r2
 8015e3c:	b299      	uxth	r1, r3
 8015e3e:	1903      	adds	r3, r0, r4
 8015e40:	19db      	adds	r3, r3, r7
 8015e42:	1902      	adds	r2, r0, r4
 8015e44:	19d2      	adds	r2, r2, r7
 8015e46:	8812      	ldrh	r2, [r2, #0]
 8015e48:	430a      	orrs	r2, r1
 8015e4a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	1902      	adds	r2, r0, r4
 8015e52:	19d2      	adds	r2, r2, r7
 8015e54:	8812      	ldrh	r2, [r2, #0]
 8015e56:	60da      	str	r2, [r3, #12]
 8015e58:	e05d      	b.n	8015f16 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8015e5a:	231a      	movs	r3, #26
 8015e5c:	2218      	movs	r2, #24
 8015e5e:	189b      	adds	r3, r3, r2
 8015e60:	19db      	adds	r3, r3, r7
 8015e62:	2201      	movs	r2, #1
 8015e64:	701a      	strb	r2, [r3, #0]
 8015e66:	e056      	b.n	8015f16 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015e68:	231b      	movs	r3, #27
 8015e6a:	2218      	movs	r2, #24
 8015e6c:	189b      	adds	r3, r3, r2
 8015e6e:	19db      	adds	r3, r3, r7
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	2b08      	cmp	r3, #8
 8015e74:	d822      	bhi.n	8015ebc <UART_SetConfig+0x4b0>
 8015e76:	009a      	lsls	r2, r3, #2
 8015e78:	4b32      	ldr	r3, [pc, #200]	@ (8015f44 <UART_SetConfig+0x538>)
 8015e7a:	18d3      	adds	r3, r2, r3
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015e80:	f7fd fe30 	bl	8013ae4 <HAL_RCC_GetPCLK1Freq>
 8015e84:	0003      	movs	r3, r0
 8015e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015e88:	e021      	b.n	8015ece <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015e8a:	f7fd fe41 	bl	8013b10 <HAL_RCC_GetPCLK2Freq>
 8015e8e:	0003      	movs	r3, r0
 8015e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015e92:	e01c      	b.n	8015ece <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015e94:	4b28      	ldr	r3, [pc, #160]	@ (8015f38 <UART_SetConfig+0x52c>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2210      	movs	r2, #16
 8015e9a:	4013      	ands	r3, r2
 8015e9c:	d002      	beq.n	8015ea4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8015e9e:	4b27      	ldr	r3, [pc, #156]	@ (8015f3c <UART_SetConfig+0x530>)
 8015ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015ea2:	e014      	b.n	8015ece <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8015ea4:	4b26      	ldr	r3, [pc, #152]	@ (8015f40 <UART_SetConfig+0x534>)
 8015ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015ea8:	e011      	b.n	8015ece <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015eaa:	f7fd fd6b 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 8015eae:	0003      	movs	r3, r0
 8015eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015eb2:	e00c      	b.n	8015ece <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015eb4:	2380      	movs	r3, #128	@ 0x80
 8015eb6:	021b      	lsls	r3, r3, #8
 8015eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8015eba:	e008      	b.n	8015ece <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8015ec0:	231a      	movs	r3, #26
 8015ec2:	2218      	movs	r2, #24
 8015ec4:	189b      	adds	r3, r3, r2
 8015ec6:	19db      	adds	r3, r3, r7
 8015ec8:	2201      	movs	r2, #1
 8015eca:	701a      	strb	r2, [r3, #0]
        break;
 8015ecc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8015ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d020      	beq.n	8015f16 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015ed4:	69fb      	ldr	r3, [r7, #28]
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	085a      	lsrs	r2, r3, #1
 8015eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015edc:	18d2      	adds	r2, r2, r3
 8015ede:	69fb      	ldr	r3, [r7, #28]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	0019      	movs	r1, r3
 8015ee4:	0010      	movs	r0, r2
 8015ee6:	f7ea f95d 	bl	80001a4 <__udivsi3>
 8015eea:	0003      	movs	r3, r0
 8015eec:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ef0:	2b0f      	cmp	r3, #15
 8015ef2:	d90a      	bls.n	8015f0a <UART_SetConfig+0x4fe>
 8015ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ef6:	2380      	movs	r3, #128	@ 0x80
 8015ef8:	025b      	lsls	r3, r3, #9
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d205      	bcs.n	8015f0a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f00:	b29a      	uxth	r2, r3
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	60da      	str	r2, [r3, #12]
 8015f08:	e005      	b.n	8015f16 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8015f0a:	231a      	movs	r3, #26
 8015f0c:	2218      	movs	r2, #24
 8015f0e:	189b      	adds	r3, r3, r2
 8015f10:	19db      	adds	r3, r3, r7
 8015f12:	2201      	movs	r2, #1
 8015f14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015f16:	69fb      	ldr	r3, [r7, #28]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8015f22:	231a      	movs	r3, #26
 8015f24:	2218      	movs	r2, #24
 8015f26:	189b      	adds	r3, r3, r2
 8015f28:	19db      	adds	r3, r3, r7
 8015f2a:	781b      	ldrb	r3, [r3, #0]
}
 8015f2c:	0018      	movs	r0, r3
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	b00e      	add	sp, #56	@ 0x38
 8015f32:	bdb0      	pop	{r4, r5, r7, pc}
 8015f34:	08022708 	.word	0x08022708
 8015f38:	40021000 	.word	0x40021000
 8015f3c:	003d0900 	.word	0x003d0900
 8015f40:	00f42400 	.word	0x00f42400
 8015f44:	0802272c 	.word	0x0802272c

08015f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f54:	2201      	movs	r2, #1
 8015f56:	4013      	ands	r3, r2
 8015f58:	d00b      	beq.n	8015f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	4a4a      	ldr	r2, [pc, #296]	@ (801608c <UART_AdvFeatureConfig+0x144>)
 8015f62:	4013      	ands	r3, r2
 8015f64:	0019      	movs	r1, r3
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	430a      	orrs	r2, r1
 8015f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f76:	2202      	movs	r2, #2
 8015f78:	4013      	ands	r3, r2
 8015f7a:	d00b      	beq.n	8015f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	4a43      	ldr	r2, [pc, #268]	@ (8016090 <UART_AdvFeatureConfig+0x148>)
 8015f84:	4013      	ands	r3, r2
 8015f86:	0019      	movs	r1, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	430a      	orrs	r2, r1
 8015f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f98:	2204      	movs	r2, #4
 8015f9a:	4013      	ands	r3, r2
 8015f9c:	d00b      	beq.n	8015fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8016094 <UART_AdvFeatureConfig+0x14c>)
 8015fa6:	4013      	ands	r3, r2
 8015fa8:	0019      	movs	r1, r3
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	430a      	orrs	r2, r1
 8015fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fba:	2208      	movs	r2, #8
 8015fbc:	4013      	ands	r3, r2
 8015fbe:	d00b      	beq.n	8015fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	685b      	ldr	r3, [r3, #4]
 8015fc6:	4a34      	ldr	r2, [pc, #208]	@ (8016098 <UART_AdvFeatureConfig+0x150>)
 8015fc8:	4013      	ands	r3, r2
 8015fca:	0019      	movs	r1, r3
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	430a      	orrs	r2, r1
 8015fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fdc:	2210      	movs	r2, #16
 8015fde:	4013      	ands	r3, r2
 8015fe0:	d00b      	beq.n	8015ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	689b      	ldr	r3, [r3, #8]
 8015fe8:	4a2c      	ldr	r2, [pc, #176]	@ (801609c <UART_AdvFeatureConfig+0x154>)
 8015fea:	4013      	ands	r3, r2
 8015fec:	0019      	movs	r1, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	430a      	orrs	r2, r1
 8015ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ffe:	2220      	movs	r2, #32
 8016000:	4013      	ands	r3, r2
 8016002:	d00b      	beq.n	801601c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	689b      	ldr	r3, [r3, #8]
 801600a:	4a25      	ldr	r2, [pc, #148]	@ (80160a0 <UART_AdvFeatureConfig+0x158>)
 801600c:	4013      	ands	r3, r2
 801600e:	0019      	movs	r1, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	430a      	orrs	r2, r1
 801601a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016020:	2240      	movs	r2, #64	@ 0x40
 8016022:	4013      	ands	r3, r2
 8016024:	d01d      	beq.n	8016062 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	4a1d      	ldr	r2, [pc, #116]	@ (80160a4 <UART_AdvFeatureConfig+0x15c>)
 801602e:	4013      	ands	r3, r2
 8016030:	0019      	movs	r1, r3
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	430a      	orrs	r2, r1
 801603c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016042:	2380      	movs	r3, #128	@ 0x80
 8016044:	035b      	lsls	r3, r3, #13
 8016046:	429a      	cmp	r2, r3
 8016048:	d10b      	bne.n	8016062 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	4a15      	ldr	r2, [pc, #84]	@ (80160a8 <UART_AdvFeatureConfig+0x160>)
 8016052:	4013      	ands	r3, r2
 8016054:	0019      	movs	r1, r3
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	430a      	orrs	r2, r1
 8016060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016066:	2280      	movs	r2, #128	@ 0x80
 8016068:	4013      	ands	r3, r2
 801606a:	d00b      	beq.n	8016084 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	4a0e      	ldr	r2, [pc, #56]	@ (80160ac <UART_AdvFeatureConfig+0x164>)
 8016074:	4013      	ands	r3, r2
 8016076:	0019      	movs	r1, r3
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	430a      	orrs	r2, r1
 8016082:	605a      	str	r2, [r3, #4]
  }
}
 8016084:	46c0      	nop			@ (mov r8, r8)
 8016086:	46bd      	mov	sp, r7
 8016088:	b002      	add	sp, #8
 801608a:	bd80      	pop	{r7, pc}
 801608c:	fffdffff 	.word	0xfffdffff
 8016090:	fffeffff 	.word	0xfffeffff
 8016094:	fffbffff 	.word	0xfffbffff
 8016098:	ffff7fff 	.word	0xffff7fff
 801609c:	ffffefff 	.word	0xffffefff
 80160a0:	ffffdfff 	.word	0xffffdfff
 80160a4:	ffefffff 	.word	0xffefffff
 80160a8:	ff9fffff 	.word	0xff9fffff
 80160ac:	fff7ffff 	.word	0xfff7ffff

080160b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b092      	sub	sp, #72	@ 0x48
 80160b4:	af02      	add	r7, sp, #8
 80160b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2284      	movs	r2, #132	@ 0x84
 80160bc:	2100      	movs	r1, #0
 80160be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80160c0:	f7f6 fee4 	bl	800ce8c <HAL_GetTick>
 80160c4:	0003      	movs	r3, r0
 80160c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	2208      	movs	r2, #8
 80160d0:	4013      	ands	r3, r2
 80160d2:	2b08      	cmp	r3, #8
 80160d4:	d12c      	bne.n	8016130 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80160d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80160d8:	2280      	movs	r2, #128	@ 0x80
 80160da:	0391      	lsls	r1, r2, #14
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	4a46      	ldr	r2, [pc, #280]	@ (80161f8 <UART_CheckIdleState+0x148>)
 80160e0:	9200      	str	r2, [sp, #0]
 80160e2:	2200      	movs	r2, #0
 80160e4:	f000 f88c 	bl	8016200 <UART_WaitOnFlagUntilTimeout>
 80160e8:	1e03      	subs	r3, r0, #0
 80160ea:	d021      	beq.n	8016130 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160ec:	f3ef 8310 	mrs	r3, PRIMASK
 80160f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80160f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80160f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80160f6:	2301      	movs	r3, #1
 80160f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160fc:	f383 8810 	msr	PRIMASK, r3
}
 8016100:	46c0      	nop			@ (mov r8, r8)
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	2180      	movs	r1, #128	@ 0x80
 801610e:	438a      	bics	r2, r1
 8016110:	601a      	str	r2, [r3, #0]
 8016112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016118:	f383 8810 	msr	PRIMASK, r3
}
 801611c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	2220      	movs	r2, #32
 8016122:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2278      	movs	r2, #120	@ 0x78
 8016128:	2100      	movs	r1, #0
 801612a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801612c:	2303      	movs	r3, #3
 801612e:	e05f      	b.n	80161f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	2204      	movs	r2, #4
 8016138:	4013      	ands	r3, r2
 801613a:	2b04      	cmp	r3, #4
 801613c:	d146      	bne.n	80161cc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801613e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016140:	2280      	movs	r2, #128	@ 0x80
 8016142:	03d1      	lsls	r1, r2, #15
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	4a2c      	ldr	r2, [pc, #176]	@ (80161f8 <UART_CheckIdleState+0x148>)
 8016148:	9200      	str	r2, [sp, #0]
 801614a:	2200      	movs	r2, #0
 801614c:	f000 f858 	bl	8016200 <UART_WaitOnFlagUntilTimeout>
 8016150:	1e03      	subs	r3, r0, #0
 8016152:	d03b      	beq.n	80161cc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016154:	f3ef 8310 	mrs	r3, PRIMASK
 8016158:	60fb      	str	r3, [r7, #12]
  return(result);
 801615a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801615c:	637b      	str	r3, [r7, #52]	@ 0x34
 801615e:	2301      	movs	r3, #1
 8016160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	f383 8810 	msr	PRIMASK, r3
}
 8016168:	46c0      	nop			@ (mov r8, r8)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	681a      	ldr	r2, [r3, #0]
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	4921      	ldr	r1, [pc, #132]	@ (80161fc <UART_CheckIdleState+0x14c>)
 8016176:	400a      	ands	r2, r1
 8016178:	601a      	str	r2, [r3, #0]
 801617a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801617c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801617e:	697b      	ldr	r3, [r7, #20]
 8016180:	f383 8810 	msr	PRIMASK, r3
}
 8016184:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016186:	f3ef 8310 	mrs	r3, PRIMASK
 801618a:	61bb      	str	r3, [r7, #24]
  return(result);
 801618c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801618e:	633b      	str	r3, [r7, #48]	@ 0x30
 8016190:	2301      	movs	r3, #1
 8016192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016194:	69fb      	ldr	r3, [r7, #28]
 8016196:	f383 8810 	msr	PRIMASK, r3
}
 801619a:	46c0      	nop			@ (mov r8, r8)
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	689a      	ldr	r2, [r3, #8]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	2101      	movs	r1, #1
 80161a8:	438a      	bics	r2, r1
 80161aa:	609a      	str	r2, [r3, #8]
 80161ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80161b0:	6a3b      	ldr	r3, [r7, #32]
 80161b2:	f383 8810 	msr	PRIMASK, r3
}
 80161b6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	2280      	movs	r2, #128	@ 0x80
 80161bc:	2120      	movs	r1, #32
 80161be:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2278      	movs	r2, #120	@ 0x78
 80161c4:	2100      	movs	r1, #0
 80161c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80161c8:	2303      	movs	r3, #3
 80161ca:	e011      	b.n	80161f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2220      	movs	r2, #32
 80161d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2280      	movs	r2, #128	@ 0x80
 80161d6:	2120      	movs	r1, #32
 80161d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2200      	movs	r2, #0
 80161de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2200      	movs	r2, #0
 80161e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2278      	movs	r2, #120	@ 0x78
 80161ea:	2100      	movs	r1, #0
 80161ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80161ee:	2300      	movs	r3, #0
}
 80161f0:	0018      	movs	r0, r3
 80161f2:	46bd      	mov	sp, r7
 80161f4:	b010      	add	sp, #64	@ 0x40
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	01ffffff 	.word	0x01ffffff
 80161fc:	fffffedf 	.word	0xfffffedf

08016200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	603b      	str	r3, [r7, #0]
 801620c:	1dfb      	adds	r3, r7, #7
 801620e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016210:	e04b      	b.n	80162aa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016212:	69bb      	ldr	r3, [r7, #24]
 8016214:	3301      	adds	r3, #1
 8016216:	d048      	beq.n	80162aa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016218:	f7f6 fe38 	bl	800ce8c <HAL_GetTick>
 801621c:	0002      	movs	r2, r0
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	1ad3      	subs	r3, r2, r3
 8016222:	69ba      	ldr	r2, [r7, #24]
 8016224:	429a      	cmp	r2, r3
 8016226:	d302      	bcc.n	801622e <UART_WaitOnFlagUntilTimeout+0x2e>
 8016228:	69bb      	ldr	r3, [r7, #24]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d101      	bne.n	8016232 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801622e:	2303      	movs	r3, #3
 8016230:	e04b      	b.n	80162ca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	2204      	movs	r2, #4
 801623a:	4013      	ands	r3, r2
 801623c:	d035      	beq.n	80162aa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	69db      	ldr	r3, [r3, #28]
 8016244:	2208      	movs	r2, #8
 8016246:	4013      	ands	r3, r2
 8016248:	2b08      	cmp	r3, #8
 801624a:	d111      	bne.n	8016270 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	2208      	movs	r2, #8
 8016252:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	0018      	movs	r0, r3
 8016258:	f000 f9ca 	bl	80165f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2284      	movs	r2, #132	@ 0x84
 8016260:	2108      	movs	r1, #8
 8016262:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2278      	movs	r2, #120	@ 0x78
 8016268:	2100      	movs	r1, #0
 801626a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801626c:	2301      	movs	r3, #1
 801626e:	e02c      	b.n	80162ca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	69da      	ldr	r2, [r3, #28]
 8016276:	2380      	movs	r3, #128	@ 0x80
 8016278:	011b      	lsls	r3, r3, #4
 801627a:	401a      	ands	r2, r3
 801627c:	2380      	movs	r3, #128	@ 0x80
 801627e:	011b      	lsls	r3, r3, #4
 8016280:	429a      	cmp	r2, r3
 8016282:	d112      	bne.n	80162aa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2280      	movs	r2, #128	@ 0x80
 801628a:	0112      	lsls	r2, r2, #4
 801628c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	0018      	movs	r0, r3
 8016292:	f000 f9ad 	bl	80165f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2284      	movs	r2, #132	@ 0x84
 801629a:	2120      	movs	r1, #32
 801629c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2278      	movs	r2, #120	@ 0x78
 80162a2:	2100      	movs	r1, #0
 80162a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80162a6:	2303      	movs	r3, #3
 80162a8:	e00f      	b.n	80162ca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	69db      	ldr	r3, [r3, #28]
 80162b0:	68ba      	ldr	r2, [r7, #8]
 80162b2:	4013      	ands	r3, r2
 80162b4:	68ba      	ldr	r2, [r7, #8]
 80162b6:	1ad3      	subs	r3, r2, r3
 80162b8:	425a      	negs	r2, r3
 80162ba:	4153      	adcs	r3, r2
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	001a      	movs	r2, r3
 80162c0:	1dfb      	adds	r3, r7, #7
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d0a4      	beq.n	8016212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	0018      	movs	r0, r3
 80162cc:	46bd      	mov	sp, r7
 80162ce:	b004      	add	sp, #16
 80162d0:	bd80      	pop	{r7, pc}
	...

080162d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b090      	sub	sp, #64	@ 0x40
 80162d8:	af00      	add	r7, sp, #0
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	60b9      	str	r1, [r7, #8]
 80162de:	1dbb      	adds	r3, r7, #6
 80162e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	68ba      	ldr	r2, [r7, #8]
 80162e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	1dba      	adds	r2, r7, #6
 80162ec:	2158      	movs	r1, #88	@ 0x58
 80162ee:	8812      	ldrh	r2, [r2, #0]
 80162f0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	1dba      	adds	r2, r7, #6
 80162f6:	215a      	movs	r1, #90	@ 0x5a
 80162f8:	8812      	ldrh	r2, [r2, #0]
 80162fa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	2200      	movs	r2, #0
 8016300:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	689a      	ldr	r2, [r3, #8]
 8016306:	2380      	movs	r3, #128	@ 0x80
 8016308:	015b      	lsls	r3, r3, #5
 801630a:	429a      	cmp	r2, r3
 801630c:	d10d      	bne.n	801632a <UART_Start_Receive_IT+0x56>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	691b      	ldr	r3, [r3, #16]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d104      	bne.n	8016320 <UART_Start_Receive_IT+0x4c>
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	225c      	movs	r2, #92	@ 0x5c
 801631a:	4950      	ldr	r1, [pc, #320]	@ (801645c <UART_Start_Receive_IT+0x188>)
 801631c:	5299      	strh	r1, [r3, r2]
 801631e:	e02e      	b.n	801637e <UART_Start_Receive_IT+0xaa>
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	225c      	movs	r2, #92	@ 0x5c
 8016324:	21ff      	movs	r1, #255	@ 0xff
 8016326:	5299      	strh	r1, [r3, r2]
 8016328:	e029      	b.n	801637e <UART_Start_Receive_IT+0xaa>
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	689b      	ldr	r3, [r3, #8]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d10d      	bne.n	801634e <UART_Start_Receive_IT+0x7a>
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	691b      	ldr	r3, [r3, #16]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d104      	bne.n	8016344 <UART_Start_Receive_IT+0x70>
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	225c      	movs	r2, #92	@ 0x5c
 801633e:	21ff      	movs	r1, #255	@ 0xff
 8016340:	5299      	strh	r1, [r3, r2]
 8016342:	e01c      	b.n	801637e <UART_Start_Receive_IT+0xaa>
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	225c      	movs	r2, #92	@ 0x5c
 8016348:	217f      	movs	r1, #127	@ 0x7f
 801634a:	5299      	strh	r1, [r3, r2]
 801634c:	e017      	b.n	801637e <UART_Start_Receive_IT+0xaa>
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	689a      	ldr	r2, [r3, #8]
 8016352:	2380      	movs	r3, #128	@ 0x80
 8016354:	055b      	lsls	r3, r3, #21
 8016356:	429a      	cmp	r2, r3
 8016358:	d10d      	bne.n	8016376 <UART_Start_Receive_IT+0xa2>
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	691b      	ldr	r3, [r3, #16]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d104      	bne.n	801636c <UART_Start_Receive_IT+0x98>
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	225c      	movs	r2, #92	@ 0x5c
 8016366:	217f      	movs	r1, #127	@ 0x7f
 8016368:	5299      	strh	r1, [r3, r2]
 801636a:	e008      	b.n	801637e <UART_Start_Receive_IT+0xaa>
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	225c      	movs	r2, #92	@ 0x5c
 8016370:	213f      	movs	r1, #63	@ 0x3f
 8016372:	5299      	strh	r1, [r3, r2]
 8016374:	e003      	b.n	801637e <UART_Start_Receive_IT+0xaa>
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	225c      	movs	r2, #92	@ 0x5c
 801637a:	2100      	movs	r1, #0
 801637c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	2284      	movs	r2, #132	@ 0x84
 8016382:	2100      	movs	r1, #0
 8016384:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	2280      	movs	r2, #128	@ 0x80
 801638a:	2122      	movs	r1, #34	@ 0x22
 801638c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801638e:	f3ef 8310 	mrs	r3, PRIMASK
 8016392:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8016394:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016398:	2301      	movs	r3, #1
 801639a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801639c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801639e:	f383 8810 	msr	PRIMASK, r3
}
 80163a2:	46c0      	nop			@ (mov r8, r8)
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	689a      	ldr	r2, [r3, #8]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	2101      	movs	r1, #1
 80163b0:	430a      	orrs	r2, r1
 80163b2:	609a      	str	r2, [r3, #8]
 80163b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80163b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ba:	f383 8810 	msr	PRIMASK, r3
}
 80163be:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	689a      	ldr	r2, [r3, #8]
 80163c4:	2380      	movs	r3, #128	@ 0x80
 80163c6:	015b      	lsls	r3, r3, #5
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d107      	bne.n	80163dc <UART_Start_Receive_IT+0x108>
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	691b      	ldr	r3, [r3, #16]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d103      	bne.n	80163dc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	4a22      	ldr	r2, [pc, #136]	@ (8016460 <UART_Start_Receive_IT+0x18c>)
 80163d8:	669a      	str	r2, [r3, #104]	@ 0x68
 80163da:	e002      	b.n	80163e2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	4a21      	ldr	r2, [pc, #132]	@ (8016464 <UART_Start_Receive_IT+0x190>)
 80163e0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	691b      	ldr	r3, [r3, #16]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d019      	beq.n	801641e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163ea:	f3ef 8310 	mrs	r3, PRIMASK
 80163ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80163f0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80163f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80163f4:	2301      	movs	r3, #1
 80163f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80163f8:	6a3b      	ldr	r3, [r7, #32]
 80163fa:	f383 8810 	msr	PRIMASK, r3
}
 80163fe:	46c0      	nop			@ (mov r8, r8)
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	681a      	ldr	r2, [r3, #0]
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	2190      	movs	r1, #144	@ 0x90
 801640c:	0049      	lsls	r1, r1, #1
 801640e:	430a      	orrs	r2, r1
 8016410:	601a      	str	r2, [r3, #0]
 8016412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016414:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016418:	f383 8810 	msr	PRIMASK, r3
}
 801641c:	e018      	b.n	8016450 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801641e:	f3ef 8310 	mrs	r3, PRIMASK
 8016422:	613b      	str	r3, [r7, #16]
  return(result);
 8016424:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8016426:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016428:	2301      	movs	r3, #1
 801642a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801642c:	697b      	ldr	r3, [r7, #20]
 801642e:	f383 8810 	msr	PRIMASK, r3
}
 8016432:	46c0      	nop			@ (mov r8, r8)
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	681a      	ldr	r2, [r3, #0]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	2120      	movs	r1, #32
 8016440:	430a      	orrs	r2, r1
 8016442:	601a      	str	r2, [r3, #0]
 8016444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016446:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016448:	69bb      	ldr	r3, [r7, #24]
 801644a:	f383 8810 	msr	PRIMASK, r3
}
 801644e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8016450:	2300      	movs	r3, #0
}
 8016452:	0018      	movs	r0, r3
 8016454:	46bd      	mov	sp, r7
 8016456:	b010      	add	sp, #64	@ 0x40
 8016458:	bd80      	pop	{r7, pc}
 801645a:	46c0      	nop			@ (mov r8, r8)
 801645c:	000001ff 	.word	0x000001ff
 8016460:	08016bd5 	.word	0x08016bd5
 8016464:	08016a09 	.word	0x08016a09

08016468 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b090      	sub	sp, #64	@ 0x40
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	1dbb      	adds	r3, r7, #6
 8016474:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	1dba      	adds	r2, r7, #6
 8016480:	2158      	movs	r1, #88	@ 0x58
 8016482:	8812      	ldrh	r2, [r2, #0]
 8016484:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	2284      	movs	r2, #132	@ 0x84
 801648a:	2100      	movs	r1, #0
 801648c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	2280      	movs	r2, #128	@ 0x80
 8016492:	2122      	movs	r1, #34	@ 0x22
 8016494:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801649a:	2b00      	cmp	r3, #0
 801649c:	d028      	beq.n	80164f0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164a2:	4a3e      	ldr	r2, [pc, #248]	@ (801659c <UART_Start_Receive_DMA+0x134>)
 80164a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164aa:	4a3d      	ldr	r2, [pc, #244]	@ (80165a0 <UART_Start_Receive_DMA+0x138>)
 80164ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164b2:	4a3c      	ldr	r2, [pc, #240]	@ (80165a4 <UART_Start_Receive_DMA+0x13c>)
 80164b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164ba:	2200      	movs	r2, #0
 80164bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	3324      	adds	r3, #36	@ 0x24
 80164c8:	0019      	movs	r1, r3
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80164ce:	001a      	movs	r2, r3
 80164d0:	1dbb      	adds	r3, r7, #6
 80164d2:	881b      	ldrh	r3, [r3, #0]
 80164d4:	f7f7 f9fa 	bl	800d8cc <HAL_DMA_Start_IT>
 80164d8:	1e03      	subs	r3, r0, #0
 80164da:	d009      	beq.n	80164f0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	2284      	movs	r2, #132	@ 0x84
 80164e0:	2110      	movs	r1, #16
 80164e2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	2280      	movs	r2, #128	@ 0x80
 80164e8:	2120      	movs	r1, #32
 80164ea:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80164ec:	2301      	movs	r3, #1
 80164ee:	e050      	b.n	8016592 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	691b      	ldr	r3, [r3, #16]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d019      	beq.n	801652c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164f8:	f3ef 8310 	mrs	r3, PRIMASK
 80164fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80164fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016502:	2301      	movs	r3, #1
 8016504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016508:	f383 8810 	msr	PRIMASK, r3
}
 801650c:	46c0      	nop			@ (mov r8, r8)
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	681a      	ldr	r2, [r3, #0]
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	2180      	movs	r1, #128	@ 0x80
 801651a:	0049      	lsls	r1, r1, #1
 801651c:	430a      	orrs	r2, r1
 801651e:	601a      	str	r2, [r3, #0]
 8016520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016522:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016526:	f383 8810 	msr	PRIMASK, r3
}
 801652a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801652c:	f3ef 8310 	mrs	r3, PRIMASK
 8016530:	613b      	str	r3, [r7, #16]
  return(result);
 8016532:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016536:	2301      	movs	r3, #1
 8016538:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	f383 8810 	msr	PRIMASK, r3
}
 8016540:	46c0      	nop			@ (mov r8, r8)
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	689a      	ldr	r2, [r3, #8]
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	2101      	movs	r1, #1
 801654e:	430a      	orrs	r2, r1
 8016550:	609a      	str	r2, [r3, #8]
 8016552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	f383 8810 	msr	PRIMASK, r3
}
 801655c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801655e:	f3ef 8310 	mrs	r3, PRIMASK
 8016562:	61fb      	str	r3, [r7, #28]
  return(result);
 8016564:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016566:	637b      	str	r3, [r7, #52]	@ 0x34
 8016568:	2301      	movs	r3, #1
 801656a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801656c:	6a3b      	ldr	r3, [r7, #32]
 801656e:	f383 8810 	msr	PRIMASK, r3
}
 8016572:	46c0      	nop			@ (mov r8, r8)
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	689a      	ldr	r2, [r3, #8]
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	2140      	movs	r1, #64	@ 0x40
 8016580:	430a      	orrs	r2, r1
 8016582:	609a      	str	r2, [r3, #8]
 8016584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016586:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801658a:	f383 8810 	msr	PRIMASK, r3
}
 801658e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8016590:	2300      	movs	r3, #0
}
 8016592:	0018      	movs	r0, r3
 8016594:	46bd      	mov	sp, r7
 8016596:	b010      	add	sp, #64	@ 0x40
 8016598:	bd80      	pop	{r7, pc}
 801659a:	46c0      	nop			@ (mov r8, r8)
 801659c:	08016779 	.word	0x08016779
 80165a0:	080168ad 	.word	0x080168ad
 80165a4:	080168f5 	.word	0x080168f5

080165a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b086      	sub	sp, #24
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165b0:	f3ef 8310 	mrs	r3, PRIMASK
 80165b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80165b6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80165b8:	617b      	str	r3, [r7, #20]
 80165ba:	2301      	movs	r3, #1
 80165bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	f383 8810 	msr	PRIMASK, r3
}
 80165c4:	46c0      	nop			@ (mov r8, r8)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	21c0      	movs	r1, #192	@ 0xc0
 80165d2:	438a      	bics	r2, r1
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	f383 8810 	msr	PRIMASK, r3
}
 80165e0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2220      	movs	r2, #32
 80165e6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80165e8:	46c0      	nop			@ (mov r8, r8)
 80165ea:	46bd      	mov	sp, r7
 80165ec:	b006      	add	sp, #24
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b08e      	sub	sp, #56	@ 0x38
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165f8:	f3ef 8310 	mrs	r3, PRIMASK
 80165fc:	617b      	str	r3, [r7, #20]
  return(result);
 80165fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016600:	637b      	str	r3, [r7, #52]	@ 0x34
 8016602:	2301      	movs	r3, #1
 8016604:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	f383 8810 	msr	PRIMASK, r3
}
 801660c:	46c0      	nop			@ (mov r8, r8)
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	681a      	ldr	r2, [r3, #0]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	4926      	ldr	r1, [pc, #152]	@ (80166b4 <UART_EndRxTransfer+0xc4>)
 801661a:	400a      	ands	r2, r1
 801661c:	601a      	str	r2, [r3, #0]
 801661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016622:	69fb      	ldr	r3, [r7, #28]
 8016624:	f383 8810 	msr	PRIMASK, r3
}
 8016628:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801662a:	f3ef 8310 	mrs	r3, PRIMASK
 801662e:	623b      	str	r3, [r7, #32]
  return(result);
 8016630:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016632:	633b      	str	r3, [r7, #48]	@ 0x30
 8016634:	2301      	movs	r3, #1
 8016636:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801663a:	f383 8810 	msr	PRIMASK, r3
}
 801663e:	46c0      	nop			@ (mov r8, r8)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	689a      	ldr	r2, [r3, #8]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	2101      	movs	r1, #1
 801664c:	438a      	bics	r2, r1
 801664e:	609a      	str	r2, [r3, #8]
 8016650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016652:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016656:	f383 8810 	msr	PRIMASK, r3
}
 801665a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016660:	2b01      	cmp	r3, #1
 8016662:	d118      	bne.n	8016696 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016664:	f3ef 8310 	mrs	r3, PRIMASK
 8016668:	60bb      	str	r3, [r7, #8]
  return(result);
 801666a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801666e:	2301      	movs	r3, #1
 8016670:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	f383 8810 	msr	PRIMASK, r3
}
 8016678:	46c0      	nop			@ (mov r8, r8)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	681a      	ldr	r2, [r3, #0]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	2110      	movs	r1, #16
 8016686:	438a      	bics	r2, r1
 8016688:	601a      	str	r2, [r3, #0]
 801668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801668c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	f383 8810 	msr	PRIMASK, r3
}
 8016694:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2280      	movs	r2, #128	@ 0x80
 801669a:	2120      	movs	r1, #32
 801669c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	2200      	movs	r2, #0
 80166a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2200      	movs	r2, #0
 80166a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80166aa:	46c0      	nop			@ (mov r8, r8)
 80166ac:	46bd      	mov	sp, r7
 80166ae:	b00e      	add	sp, #56	@ 0x38
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	46c0      	nop			@ (mov r8, r8)
 80166b4:	fffffedf 	.word	0xfffffedf

080166b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b08c      	sub	sp, #48	@ 0x30
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2220      	movs	r2, #32
 80166ce:	4013      	ands	r3, r2
 80166d0:	d135      	bne.n	801673e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80166d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d4:	2252      	movs	r2, #82	@ 0x52
 80166d6:	2100      	movs	r1, #0
 80166d8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166da:	f3ef 8310 	mrs	r3, PRIMASK
 80166de:	60fb      	str	r3, [r7, #12]
  return(result);
 80166e0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80166e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166e4:	2301      	movs	r3, #1
 80166e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166e8:	693b      	ldr	r3, [r7, #16]
 80166ea:	f383 8810 	msr	PRIMASK, r3
}
 80166ee:	46c0      	nop			@ (mov r8, r8)
 80166f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	689a      	ldr	r2, [r3, #8]
 80166f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	2180      	movs	r1, #128	@ 0x80
 80166fc:	438a      	bics	r2, r1
 80166fe:	609a      	str	r2, [r3, #8]
 8016700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016702:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	f383 8810 	msr	PRIMASK, r3
}
 801670a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801670c:	f3ef 8310 	mrs	r3, PRIMASK
 8016710:	61bb      	str	r3, [r7, #24]
  return(result);
 8016712:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016714:	627b      	str	r3, [r7, #36]	@ 0x24
 8016716:	2301      	movs	r3, #1
 8016718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801671a:	69fb      	ldr	r3, [r7, #28]
 801671c:	f383 8810 	msr	PRIMASK, r3
}
 8016720:	46c0      	nop			@ (mov r8, r8)
 8016722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2140      	movs	r1, #64	@ 0x40
 801672e:	430a      	orrs	r2, r1
 8016730:	601a      	str	r2, [r3, #0]
 8016732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016734:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016736:	6a3b      	ldr	r3, [r7, #32]
 8016738:	f383 8810 	msr	PRIMASK, r3
}
 801673c:	e006      	b.n	801674c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016740:	228c      	movs	r2, #140	@ 0x8c
 8016742:	589b      	ldr	r3, [r3, r2]
 8016744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016746:	0010      	movs	r0, r2
 8016748:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801674a:	46c0      	nop			@ (mov r8, r8)
 801674c:	46c0      	nop			@ (mov r8, r8)
 801674e:	46bd      	mov	sp, r7
 8016750:	b00c      	add	sp, #48	@ 0x30
 8016752:	bd80      	pop	{r7, pc}

08016754 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b084      	sub	sp, #16
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016760:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	2288      	movs	r2, #136	@ 0x88
 8016766:	589b      	ldr	r3, [r3, r2]
 8016768:	68fa      	ldr	r2, [r7, #12]
 801676a:	0010      	movs	r0, r2
 801676c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801676e:	46c0      	nop			@ (mov r8, r8)
 8016770:	46bd      	mov	sp, r7
 8016772:	b004      	add	sp, #16
 8016774:	bd80      	pop	{r7, pc}
	...

08016778 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b094      	sub	sp, #80	@ 0x50
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016784:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2220      	movs	r2, #32
 801678e:	4013      	ands	r3, r2
 8016790:	d16f      	bne.n	8016872 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8016792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016794:	225a      	movs	r2, #90	@ 0x5a
 8016796:	2100      	movs	r1, #0
 8016798:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801679a:	f3ef 8310 	mrs	r3, PRIMASK
 801679e:	61bb      	str	r3, [r7, #24]
  return(result);
 80167a0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80167a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80167a4:	2301      	movs	r3, #1
 80167a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	f383 8810 	msr	PRIMASK, r3
}
 80167ae:	46c0      	nop			@ (mov r8, r8)
 80167b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	681a      	ldr	r2, [r3, #0]
 80167b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	493b      	ldr	r1, [pc, #236]	@ (80168a8 <UART_DMAReceiveCplt+0x130>)
 80167bc:	400a      	ands	r2, r1
 80167be:	601a      	str	r2, [r3, #0]
 80167c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80167c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167c4:	6a3b      	ldr	r3, [r7, #32]
 80167c6:	f383 8810 	msr	PRIMASK, r3
}
 80167ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167cc:	f3ef 8310 	mrs	r3, PRIMASK
 80167d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80167d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80167d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80167d6:	2301      	movs	r3, #1
 80167d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167dc:	f383 8810 	msr	PRIMASK, r3
}
 80167e0:	46c0      	nop			@ (mov r8, r8)
 80167e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	689a      	ldr	r2, [r3, #8]
 80167e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	2101      	movs	r1, #1
 80167ee:	438a      	bics	r2, r1
 80167f0:	609a      	str	r2, [r3, #8]
 80167f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80167f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167f8:	f383 8810 	msr	PRIMASK, r3
}
 80167fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167fe:	f3ef 8310 	mrs	r3, PRIMASK
 8016802:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016806:	643b      	str	r3, [r7, #64]	@ 0x40
 8016808:	2301      	movs	r3, #1
 801680a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801680e:	f383 8810 	msr	PRIMASK, r3
}
 8016812:	46c0      	nop			@ (mov r8, r8)
 8016814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	689a      	ldr	r2, [r3, #8]
 801681a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	2140      	movs	r1, #64	@ 0x40
 8016820:	438a      	bics	r2, r1
 8016822:	609a      	str	r2, [r3, #8]
 8016824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016826:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801682a:	f383 8810 	msr	PRIMASK, r3
}
 801682e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016832:	2280      	movs	r2, #128	@ 0x80
 8016834:	2120      	movs	r1, #32
 8016836:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801683a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801683c:	2b01      	cmp	r3, #1
 801683e:	d118      	bne.n	8016872 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016840:	f3ef 8310 	mrs	r3, PRIMASK
 8016844:	60fb      	str	r3, [r7, #12]
  return(result);
 8016846:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801684a:	2301      	movs	r3, #1
 801684c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	f383 8810 	msr	PRIMASK, r3
}
 8016854:	46c0      	nop			@ (mov r8, r8)
 8016856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2110      	movs	r1, #16
 8016862:	438a      	bics	r2, r1
 8016864:	601a      	str	r2, [r3, #0]
 8016866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801686a:	697b      	ldr	r3, [r7, #20]
 801686c:	f383 8810 	msr	PRIMASK, r3
}
 8016870:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016874:	2200      	movs	r2, #0
 8016876:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801687a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801687c:	2b01      	cmp	r3, #1
 801687e:	d109      	bne.n	8016894 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8016880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016882:	22ac      	movs	r2, #172	@ 0xac
 8016884:	589b      	ldr	r3, [r3, r2]
 8016886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016888:	2158      	movs	r1, #88	@ 0x58
 801688a:	5a51      	ldrh	r1, [r2, r1]
 801688c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801688e:	0010      	movs	r0, r2
 8016890:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016892:	e005      	b.n	80168a0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8016894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016896:	2294      	movs	r2, #148	@ 0x94
 8016898:	589b      	ldr	r3, [r3, r2]
 801689a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801689c:	0010      	movs	r0, r2
 801689e:	4798      	blx	r3
}
 80168a0:	46c0      	nop			@ (mov r8, r8)
 80168a2:	46bd      	mov	sp, r7
 80168a4:	b014      	add	sp, #80	@ 0x50
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	fffffeff 	.word	0xfffffeff

080168ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2201      	movs	r2, #1
 80168be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80168c4:	2b01      	cmp	r3, #1
 80168c6:	d10b      	bne.n	80168e0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	22ac      	movs	r2, #172	@ 0xac
 80168cc:	589b      	ldr	r3, [r3, r2]
 80168ce:	68fa      	ldr	r2, [r7, #12]
 80168d0:	2158      	movs	r1, #88	@ 0x58
 80168d2:	5a52      	ldrh	r2, [r2, r1]
 80168d4:	0852      	lsrs	r2, r2, #1
 80168d6:	b291      	uxth	r1, r2
 80168d8:	68fa      	ldr	r2, [r7, #12]
 80168da:	0010      	movs	r0, r2
 80168dc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80168de:	e005      	b.n	80168ec <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2290      	movs	r2, #144	@ 0x90
 80168e4:	589b      	ldr	r3, [r3, r2]
 80168e6:	68fa      	ldr	r2, [r7, #12]
 80168e8:	0010      	movs	r0, r2
 80168ea:	4798      	blx	r3
}
 80168ec:	46c0      	nop			@ (mov r8, r8)
 80168ee:	46bd      	mov	sp, r7
 80168f0:	b004      	add	sp, #16
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b086      	sub	sp, #24
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016900:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016906:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	2280      	movs	r2, #128	@ 0x80
 801690c:	589b      	ldr	r3, [r3, r2]
 801690e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	689b      	ldr	r3, [r3, #8]
 8016916:	2280      	movs	r2, #128	@ 0x80
 8016918:	4013      	ands	r3, r2
 801691a:	2b80      	cmp	r3, #128	@ 0x80
 801691c:	d10a      	bne.n	8016934 <UART_DMAError+0x40>
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	2b21      	cmp	r3, #33	@ 0x21
 8016922:	d107      	bne.n	8016934 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	2252      	movs	r2, #82	@ 0x52
 8016928:	2100      	movs	r1, #0
 801692a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	0018      	movs	r0, r3
 8016930:	f7ff fe3a 	bl	80165a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	2240      	movs	r2, #64	@ 0x40
 801693c:	4013      	ands	r3, r2
 801693e:	2b40      	cmp	r3, #64	@ 0x40
 8016940:	d10a      	bne.n	8016958 <UART_DMAError+0x64>
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	2b22      	cmp	r3, #34	@ 0x22
 8016946:	d107      	bne.n	8016958 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	225a      	movs	r2, #90	@ 0x5a
 801694c:	2100      	movs	r1, #0
 801694e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	0018      	movs	r0, r3
 8016954:	f7ff fe4c 	bl	80165f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8016958:	697b      	ldr	r3, [r7, #20]
 801695a:	2284      	movs	r2, #132	@ 0x84
 801695c:	589b      	ldr	r3, [r3, r2]
 801695e:	2210      	movs	r2, #16
 8016960:	431a      	orrs	r2, r3
 8016962:	697b      	ldr	r3, [r7, #20]
 8016964:	2184      	movs	r1, #132	@ 0x84
 8016966:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	2298      	movs	r2, #152	@ 0x98
 801696c:	589b      	ldr	r3, [r3, r2]
 801696e:	697a      	ldr	r2, [r7, #20]
 8016970:	0010      	movs	r0, r2
 8016972:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016974:	46c0      	nop			@ (mov r8, r8)
 8016976:	46bd      	mov	sp, r7
 8016978:	b006      	add	sp, #24
 801697a:	bd80      	pop	{r7, pc}

0801697c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b084      	sub	sp, #16
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016988:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	225a      	movs	r2, #90	@ 0x5a
 801698e:	2100      	movs	r1, #0
 8016990:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	2252      	movs	r2, #82	@ 0x52
 8016996:	2100      	movs	r1, #0
 8016998:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	2298      	movs	r2, #152	@ 0x98
 801699e:	589b      	ldr	r3, [r3, r2]
 80169a0:	68fa      	ldr	r2, [r7, #12]
 80169a2:	0010      	movs	r0, r2
 80169a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80169a6:	46c0      	nop			@ (mov r8, r8)
 80169a8:	46bd      	mov	sp, r7
 80169aa:	b004      	add	sp, #16
 80169ac:	bd80      	pop	{r7, pc}

080169ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b086      	sub	sp, #24
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169b6:	f3ef 8310 	mrs	r3, PRIMASK
 80169ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80169bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80169be:	617b      	str	r3, [r7, #20]
 80169c0:	2301      	movs	r3, #1
 80169c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f383 8810 	msr	PRIMASK, r3
}
 80169ca:	46c0      	nop			@ (mov r8, r8)
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	681a      	ldr	r2, [r3, #0]
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2140      	movs	r1, #64	@ 0x40
 80169d8:	438a      	bics	r2, r1
 80169da:	601a      	str	r2, [r3, #0]
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169e0:	693b      	ldr	r3, [r7, #16]
 80169e2:	f383 8810 	msr	PRIMASK, r3
}
 80169e6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2220      	movs	r2, #32
 80169ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2200      	movs	r2, #0
 80169f2:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	228c      	movs	r2, #140	@ 0x8c
 80169f8:	589b      	ldr	r3, [r3, r2]
 80169fa:	687a      	ldr	r2, [r7, #4]
 80169fc:	0010      	movs	r0, r2
 80169fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016a00:	46c0      	nop			@ (mov r8, r8)
 8016a02:	46bd      	mov	sp, r7
 8016a04:	b006      	add	sp, #24
 8016a06:	bd80      	pop	{r7, pc}

08016a08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b094      	sub	sp, #80	@ 0x50
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8016a10:	204e      	movs	r0, #78	@ 0x4e
 8016a12:	183b      	adds	r3, r7, r0
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	215c      	movs	r1, #92	@ 0x5c
 8016a18:	5a52      	ldrh	r2, [r2, r1]
 8016a1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2280      	movs	r2, #128	@ 0x80
 8016a20:	589b      	ldr	r3, [r3, r2]
 8016a22:	2b22      	cmp	r3, #34	@ 0x22
 8016a24:	d000      	beq.n	8016a28 <UART_RxISR_8BIT+0x20>
 8016a26:	e0c2      	b.n	8016bae <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a2e:	214c      	movs	r1, #76	@ 0x4c
 8016a30:	187b      	adds	r3, r7, r1
 8016a32:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016a34:	187b      	adds	r3, r7, r1
 8016a36:	881b      	ldrh	r3, [r3, #0]
 8016a38:	b2da      	uxtb	r2, r3
 8016a3a:	183b      	adds	r3, r7, r0
 8016a3c:	881b      	ldrh	r3, [r3, #0]
 8016a3e:	b2d9      	uxtb	r1, r3
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016a44:	400a      	ands	r2, r1
 8016a46:	b2d2      	uxtb	r2, r2
 8016a48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016a4e:	1c5a      	adds	r2, r3, #1
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	225a      	movs	r2, #90	@ 0x5a
 8016a58:	5a9b      	ldrh	r3, [r3, r2]
 8016a5a:	b29b      	uxth	r3, r3
 8016a5c:	3b01      	subs	r3, #1
 8016a5e:	b299      	uxth	r1, r3
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	225a      	movs	r2, #90	@ 0x5a
 8016a64:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	225a      	movs	r2, #90	@ 0x5a
 8016a6a:	5a9b      	ldrh	r3, [r3, r2]
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d000      	beq.n	8016a74 <UART_RxISR_8BIT+0x6c>
 8016a72:	e0a4      	b.n	8016bbe <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a74:	f3ef 8310 	mrs	r3, PRIMASK
 8016a78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016a7e:	2301      	movs	r3, #1
 8016a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a84:	f383 8810 	msr	PRIMASK, r3
}
 8016a88:	46c0      	nop			@ (mov r8, r8)
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	494c      	ldr	r1, [pc, #304]	@ (8016bc8 <UART_RxISR_8BIT+0x1c0>)
 8016a96:	400a      	ands	r2, r1
 8016a98:	601a      	str	r2, [r3, #0]
 8016a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aa0:	f383 8810 	msr	PRIMASK, r3
}
 8016aa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8016aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ab6:	f383 8810 	msr	PRIMASK, r3
}
 8016aba:	46c0      	nop			@ (mov r8, r8)
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	689a      	ldr	r2, [r3, #8]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	2101      	movs	r1, #1
 8016ac8:	438a      	bics	r2, r1
 8016aca:	609a      	str	r2, [r3, #8]
 8016acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ad2:	f383 8810 	msr	PRIMASK, r3
}
 8016ad6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	2280      	movs	r2, #128	@ 0x80
 8016adc:	2120      	movs	r1, #32
 8016ade:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2200      	movs	r2, #0
 8016aea:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	4a36      	ldr	r2, [pc, #216]	@ (8016bcc <UART_RxISR_8BIT+0x1c4>)
 8016af2:	4293      	cmp	r3, r2
 8016af4:	d01f      	beq.n	8016b36 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	685a      	ldr	r2, [r3, #4]
 8016afc:	2380      	movs	r3, #128	@ 0x80
 8016afe:	041b      	lsls	r3, r3, #16
 8016b00:	4013      	ands	r3, r2
 8016b02:	d018      	beq.n	8016b36 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b04:	f3ef 8310 	mrs	r3, PRIMASK
 8016b08:	61bb      	str	r3, [r7, #24]
  return(result);
 8016b0a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8016b0e:	2301      	movs	r3, #1
 8016b10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	f383 8810 	msr	PRIMASK, r3
}
 8016b18:	46c0      	nop			@ (mov r8, r8)
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	492a      	ldr	r1, [pc, #168]	@ (8016bd0 <UART_RxISR_8BIT+0x1c8>)
 8016b26:	400a      	ands	r2, r1
 8016b28:	601a      	str	r2, [r3, #0]
 8016b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016b2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b2e:	6a3b      	ldr	r3, [r7, #32]
 8016b30:	f383 8810 	msr	PRIMASK, r3
}
 8016b34:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016b3a:	2b01      	cmp	r3, #1
 8016b3c:	d130      	bne.n	8016ba0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	2200      	movs	r2, #0
 8016b42:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b44:	f3ef 8310 	mrs	r3, PRIMASK
 8016b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b4a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016b4e:	2301      	movs	r3, #1
 8016b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	f383 8810 	msr	PRIMASK, r3
}
 8016b58:	46c0      	nop			@ (mov r8, r8)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	681a      	ldr	r2, [r3, #0]
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2110      	movs	r1, #16
 8016b66:	438a      	bics	r2, r1
 8016b68:	601a      	str	r2, [r3, #0]
 8016b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	f383 8810 	msr	PRIMASK, r3
}
 8016b74:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	69db      	ldr	r3, [r3, #28]
 8016b7c:	2210      	movs	r2, #16
 8016b7e:	4013      	ands	r3, r2
 8016b80:	2b10      	cmp	r3, #16
 8016b82:	d103      	bne.n	8016b8c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	2210      	movs	r2, #16
 8016b8a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	22ac      	movs	r2, #172	@ 0xac
 8016b90:	589b      	ldr	r3, [r3, r2]
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	2158      	movs	r1, #88	@ 0x58
 8016b96:	5a51      	ldrh	r1, [r2, r1]
 8016b98:	687a      	ldr	r2, [r7, #4]
 8016b9a:	0010      	movs	r0, r2
 8016b9c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016b9e:	e00e      	b.n	8016bbe <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2294      	movs	r2, #148	@ 0x94
 8016ba4:	589b      	ldr	r3, [r3, r2]
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	0010      	movs	r0, r2
 8016baa:	4798      	blx	r3
}
 8016bac:	e007      	b.n	8016bbe <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	699a      	ldr	r2, [r3, #24]
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	2108      	movs	r1, #8
 8016bba:	430a      	orrs	r2, r1
 8016bbc:	619a      	str	r2, [r3, #24]
}
 8016bbe:	46c0      	nop			@ (mov r8, r8)
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	b014      	add	sp, #80	@ 0x50
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	46c0      	nop			@ (mov r8, r8)
 8016bc8:	fffffedf 	.word	0xfffffedf
 8016bcc:	40004800 	.word	0x40004800
 8016bd0:	fbffffff 	.word	0xfbffffff

08016bd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b094      	sub	sp, #80	@ 0x50
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8016bdc:	204e      	movs	r0, #78	@ 0x4e
 8016bde:	183b      	adds	r3, r7, r0
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	215c      	movs	r1, #92	@ 0x5c
 8016be4:	5a52      	ldrh	r2, [r2, r1]
 8016be6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2280      	movs	r2, #128	@ 0x80
 8016bec:	589b      	ldr	r3, [r3, r2]
 8016bee:	2b22      	cmp	r3, #34	@ 0x22
 8016bf0:	d000      	beq.n	8016bf4 <UART_RxISR_16BIT+0x20>
 8016bf2:	e0c2      	b.n	8016d7a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bfa:	214c      	movs	r1, #76	@ 0x4c
 8016bfc:	187b      	adds	r3, r7, r1
 8016bfe:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016c04:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8016c06:	187b      	adds	r3, r7, r1
 8016c08:	183a      	adds	r2, r7, r0
 8016c0a:	881b      	ldrh	r3, [r3, #0]
 8016c0c:	8812      	ldrh	r2, [r2, #0]
 8016c0e:	4013      	ands	r3, r2
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016c14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016c1a:	1c9a      	adds	r2, r3, #2
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	225a      	movs	r2, #90	@ 0x5a
 8016c24:	5a9b      	ldrh	r3, [r3, r2]
 8016c26:	b29b      	uxth	r3, r3
 8016c28:	3b01      	subs	r3, #1
 8016c2a:	b299      	uxth	r1, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	225a      	movs	r2, #90	@ 0x5a
 8016c30:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	225a      	movs	r2, #90	@ 0x5a
 8016c36:	5a9b      	ldrh	r3, [r3, r2]
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d000      	beq.n	8016c40 <UART_RxISR_16BIT+0x6c>
 8016c3e:	e0a4      	b.n	8016d8a <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c40:	f3ef 8310 	mrs	r3, PRIMASK
 8016c44:	623b      	str	r3, [r7, #32]
  return(result);
 8016c46:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8016c4a:	2301      	movs	r3, #1
 8016c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c50:	f383 8810 	msr	PRIMASK, r3
}
 8016c54:	46c0      	nop			@ (mov r8, r8)
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	681a      	ldr	r2, [r3, #0]
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	494c      	ldr	r1, [pc, #304]	@ (8016d94 <UART_RxISR_16BIT+0x1c0>)
 8016c62:	400a      	ands	r2, r1
 8016c64:	601a      	str	r2, [r3, #0]
 8016c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c6c:	f383 8810 	msr	PRIMASK, r3
}
 8016c70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c72:	f3ef 8310 	mrs	r3, PRIMASK
 8016c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8016c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8016c7c:	2301      	movs	r3, #1
 8016c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c82:	f383 8810 	msr	PRIMASK, r3
}
 8016c86:	46c0      	nop			@ (mov r8, r8)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	689a      	ldr	r2, [r3, #8]
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	2101      	movs	r1, #1
 8016c94:	438a      	bics	r2, r1
 8016c96:	609a      	str	r2, [r3, #8]
 8016c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c9e:	f383 8810 	msr	PRIMASK, r3
}
 8016ca2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2280      	movs	r2, #128	@ 0x80
 8016ca8:	2120      	movs	r1, #32
 8016caa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	4a36      	ldr	r2, [pc, #216]	@ (8016d98 <UART_RxISR_16BIT+0x1c4>)
 8016cbe:	4293      	cmp	r3, r2
 8016cc0:	d01f      	beq.n	8016d02 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	685a      	ldr	r2, [r3, #4]
 8016cc8:	2380      	movs	r3, #128	@ 0x80
 8016cca:	041b      	lsls	r3, r3, #16
 8016ccc:	4013      	ands	r3, r2
 8016cce:	d018      	beq.n	8016d02 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8016cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8016cd6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016cda:	2301      	movs	r3, #1
 8016cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cde:	69bb      	ldr	r3, [r7, #24]
 8016ce0:	f383 8810 	msr	PRIMASK, r3
}
 8016ce4:	46c0      	nop			@ (mov r8, r8)
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	681a      	ldr	r2, [r3, #0]
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	492a      	ldr	r1, [pc, #168]	@ (8016d9c <UART_RxISR_16BIT+0x1c8>)
 8016cf2:	400a      	ands	r2, r1
 8016cf4:	601a      	str	r2, [r3, #0]
 8016cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cfa:	69fb      	ldr	r3, [r7, #28]
 8016cfc:	f383 8810 	msr	PRIMASK, r3
}
 8016d00:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016d06:	2b01      	cmp	r3, #1
 8016d08:	d130      	bne.n	8016d6c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d10:	f3ef 8310 	mrs	r3, PRIMASK
 8016d14:	60bb      	str	r3, [r7, #8]
  return(result);
 8016d16:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016d18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	f383 8810 	msr	PRIMASK, r3
}
 8016d24:	46c0      	nop			@ (mov r8, r8)
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	2110      	movs	r1, #16
 8016d32:	438a      	bics	r2, r1
 8016d34:	601a      	str	r2, [r3, #0]
 8016d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	f383 8810 	msr	PRIMASK, r3
}
 8016d40:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	69db      	ldr	r3, [r3, #28]
 8016d48:	2210      	movs	r2, #16
 8016d4a:	4013      	ands	r3, r2
 8016d4c:	2b10      	cmp	r3, #16
 8016d4e:	d103      	bne.n	8016d58 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	2210      	movs	r2, #16
 8016d56:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	22ac      	movs	r2, #172	@ 0xac
 8016d5c:	589b      	ldr	r3, [r3, r2]
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	2158      	movs	r1, #88	@ 0x58
 8016d62:	5a51      	ldrh	r1, [r2, r1]
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	0010      	movs	r0, r2
 8016d68:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016d6a:	e00e      	b.n	8016d8a <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2294      	movs	r2, #148	@ 0x94
 8016d70:	589b      	ldr	r3, [r3, r2]
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	0010      	movs	r0, r2
 8016d76:	4798      	blx	r3
}
 8016d78:	e007      	b.n	8016d8a <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	699a      	ldr	r2, [r3, #24]
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	2108      	movs	r1, #8
 8016d86:	430a      	orrs	r2, r1
 8016d88:	619a      	str	r2, [r3, #24]
}
 8016d8a:	46c0      	nop			@ (mov r8, r8)
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	b014      	add	sp, #80	@ 0x50
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	46c0      	nop			@ (mov r8, r8)
 8016d94:	fffffedf 	.word	0xfffffedf
 8016d98:	40004800 	.word	0x40004800
 8016d9c:	fbffffff 	.word	0xfbffffff

08016da0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016da8:	46c0      	nop			@ (mov r8, r8)
 8016daa:	46bd      	mov	sp, r7
 8016dac:	b002      	add	sp, #8
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b084      	sub	sp, #16
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2244      	movs	r2, #68	@ 0x44
 8016dbc:	2100      	movs	r1, #0
 8016dbe:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8016dc0:	4b05      	ldr	r3, [pc, #20]	@ (8016dd8 <USB_EnableGlobalInt+0x28>)
 8016dc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	b299      	uxth	r1, r3
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2240      	movs	r2, #64	@ 0x40
 8016dcc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8016dce:	2300      	movs	r3, #0
}
 8016dd0:	0018      	movs	r0, r3
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	b004      	add	sp, #16
 8016dd6:	bd80      	pop	{r7, pc}
 8016dd8:	0000bf80 	.word	0x0000bf80

08016ddc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b084      	sub	sp, #16
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8016de4:	4b09      	ldr	r3, [pc, #36]	@ (8016e0c <USB_DisableGlobalInt+0x30>)
 8016de6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2240      	movs	r2, #64	@ 0x40
 8016dec:	5a9b      	ldrh	r3, [r3, r2]
 8016dee:	b29b      	uxth	r3, r3
 8016df0:	68fa      	ldr	r2, [r7, #12]
 8016df2:	b292      	uxth	r2, r2
 8016df4:	43d2      	mvns	r2, r2
 8016df6:	b292      	uxth	r2, r2
 8016df8:	4013      	ands	r3, r2
 8016dfa:	b299      	uxth	r1, r3
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2240      	movs	r2, #64	@ 0x40
 8016e00:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8016e02:	2300      	movs	r3, #0
}
 8016e04:	0018      	movs	r0, r3
 8016e06:	46bd      	mov	sp, r7
 8016e08:	b004      	add	sp, #16
 8016e0a:	bd80      	pop	{r7, pc}
 8016e0c:	0000bf80 	.word	0x0000bf80

08016e10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8016e10:	b084      	sub	sp, #16
 8016e12:	b590      	push	{r4, r7, lr}
 8016e14:	b083      	sub	sp, #12
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	6078      	str	r0, [r7, #4]
 8016e1a:	2004      	movs	r0, #4
 8016e1c:	2410      	movs	r4, #16
 8016e1e:	1900      	adds	r0, r0, r4
 8016e20:	2408      	movs	r4, #8
 8016e22:	46a4      	mov	ip, r4
 8016e24:	44bc      	add	ip, r7
 8016e26:	4460      	add	r0, ip
 8016e28:	6001      	str	r1, [r0, #0]
 8016e2a:	6042      	str	r2, [r0, #4]
 8016e2c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	2240      	movs	r2, #64	@ 0x40
 8016e32:	2101      	movs	r1, #1
 8016e34:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2240      	movs	r2, #64	@ 0x40
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2244      	movs	r2, #68	@ 0x44
 8016e42:	2100      	movs	r1, #0
 8016e44:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2250      	movs	r2, #80	@ 0x50
 8016e4a:	2100      	movs	r1, #0
 8016e4c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8016e4e:	2300      	movs	r3, #0
}
 8016e50:	0018      	movs	r0, r3
 8016e52:	46bd      	mov	sp, r7
 8016e54:	b003      	add	sp, #12
 8016e56:	bc90      	pop	{r4, r7}
 8016e58:	bc08      	pop	{r3}
 8016e5a:	b004      	add	sp, #16
 8016e5c:	4718      	bx	r3
	...

08016e60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b09c      	sub	sp, #112	@ 0x70
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
 8016e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8016e6a:	236f      	movs	r3, #111	@ 0x6f
 8016e6c:	18fb      	adds	r3, r7, r3
 8016e6e:	2200      	movs	r2, #0
 8016e70:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8016e72:	687a      	ldr	r2, [r7, #4]
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	009b      	lsls	r3, r3, #2
 8016e7a:	18d3      	adds	r3, r2, r3
 8016e7c:	881b      	ldrh	r3, [r3, #0]
 8016e7e:	b29a      	uxth	r2, r3
 8016e80:	236c      	movs	r3, #108	@ 0x6c
 8016e82:	18fb      	adds	r3, r7, r3
 8016e84:	49a3      	ldr	r1, [pc, #652]	@ (8017114 <USB_ActivateEndpoint+0x2b4>)
 8016e86:	400a      	ands	r2, r1
 8016e88:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	78db      	ldrb	r3, [r3, #3]
 8016e8e:	2b03      	cmp	r3, #3
 8016e90:	d017      	beq.n	8016ec2 <USB_ActivateEndpoint+0x62>
 8016e92:	dc28      	bgt.n	8016ee6 <USB_ActivateEndpoint+0x86>
 8016e94:	2b02      	cmp	r3, #2
 8016e96:	d00e      	beq.n	8016eb6 <USB_ActivateEndpoint+0x56>
 8016e98:	dc25      	bgt.n	8016ee6 <USB_ActivateEndpoint+0x86>
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d002      	beq.n	8016ea4 <USB_ActivateEndpoint+0x44>
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d018      	beq.n	8016ed4 <USB_ActivateEndpoint+0x74>
 8016ea2:	e020      	b.n	8016ee6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8016ea4:	226c      	movs	r2, #108	@ 0x6c
 8016ea6:	18bb      	adds	r3, r7, r2
 8016ea8:	18ba      	adds	r2, r7, r2
 8016eaa:	8812      	ldrh	r2, [r2, #0]
 8016eac:	2180      	movs	r1, #128	@ 0x80
 8016eae:	0089      	lsls	r1, r1, #2
 8016eb0:	430a      	orrs	r2, r1
 8016eb2:	801a      	strh	r2, [r3, #0]
      break;
 8016eb4:	e01c      	b.n	8016ef0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8016eb6:	226c      	movs	r2, #108	@ 0x6c
 8016eb8:	18bb      	adds	r3, r7, r2
 8016eba:	18ba      	adds	r2, r7, r2
 8016ebc:	8812      	ldrh	r2, [r2, #0]
 8016ebe:	801a      	strh	r2, [r3, #0]
      break;
 8016ec0:	e016      	b.n	8016ef0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8016ec2:	226c      	movs	r2, #108	@ 0x6c
 8016ec4:	18bb      	adds	r3, r7, r2
 8016ec6:	18ba      	adds	r2, r7, r2
 8016ec8:	8812      	ldrh	r2, [r2, #0]
 8016eca:	21c0      	movs	r1, #192	@ 0xc0
 8016ecc:	00c9      	lsls	r1, r1, #3
 8016ece:	430a      	orrs	r2, r1
 8016ed0:	801a      	strh	r2, [r3, #0]
      break;
 8016ed2:	e00d      	b.n	8016ef0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8016ed4:	226c      	movs	r2, #108	@ 0x6c
 8016ed6:	18bb      	adds	r3, r7, r2
 8016ed8:	18ba      	adds	r2, r7, r2
 8016eda:	8812      	ldrh	r2, [r2, #0]
 8016edc:	2180      	movs	r1, #128	@ 0x80
 8016ede:	00c9      	lsls	r1, r1, #3
 8016ee0:	430a      	orrs	r2, r1
 8016ee2:	801a      	strh	r2, [r3, #0]
      break;
 8016ee4:	e004      	b.n	8016ef0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8016ee6:	236f      	movs	r3, #111	@ 0x6f
 8016ee8:	18fb      	adds	r3, r7, r3
 8016eea:	2201      	movs	r2, #1
 8016eec:	701a      	strb	r2, [r3, #0]
      break;
 8016eee:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8016ef0:	687a      	ldr	r2, [r7, #4]
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	18d3      	adds	r3, r2, r3
 8016efa:	226c      	movs	r2, #108	@ 0x6c
 8016efc:	18ba      	adds	r2, r7, r2
 8016efe:	8812      	ldrh	r2, [r2, #0]
 8016f00:	4985      	ldr	r1, [pc, #532]	@ (8017118 <USB_ActivateEndpoint+0x2b8>)
 8016f02:	430a      	orrs	r2, r1
 8016f04:	b292      	uxth	r2, r2
 8016f06:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	18d3      	adds	r3, r2, r3
 8016f12:	881b      	ldrh	r3, [r3, #0]
 8016f14:	b29b      	uxth	r3, r3
 8016f16:	b21b      	sxth	r3, r3
 8016f18:	4a80      	ldr	r2, [pc, #512]	@ (801711c <USB_ActivateEndpoint+0x2bc>)
 8016f1a:	4013      	ands	r3, r2
 8016f1c:	b21a      	sxth	r2, r3
 8016f1e:	683b      	ldr	r3, [r7, #0]
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	b21b      	sxth	r3, r3
 8016f24:	4313      	orrs	r3, r2
 8016f26:	b21a      	sxth	r2, r3
 8016f28:	2166      	movs	r1, #102	@ 0x66
 8016f2a:	187b      	adds	r3, r7, r1
 8016f2c:	801a      	strh	r2, [r3, #0]
 8016f2e:	687a      	ldr	r2, [r7, #4]
 8016f30:	683b      	ldr	r3, [r7, #0]
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	009b      	lsls	r3, r3, #2
 8016f36:	18d3      	adds	r3, r2, r3
 8016f38:	187a      	adds	r2, r7, r1
 8016f3a:	8812      	ldrh	r2, [r2, #0]
 8016f3c:	4976      	ldr	r1, [pc, #472]	@ (8017118 <USB_ActivateEndpoint+0x2b8>)
 8016f3e:	430a      	orrs	r2, r1
 8016f40:	b292      	uxth	r2, r2
 8016f42:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	7b1b      	ldrb	r3, [r3, #12]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d000      	beq.n	8016f4e <USB_ActivateEndpoint+0xee>
 8016f4c:	e178      	b.n	8017240 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	785b      	ldrb	r3, [r3, #1]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d100      	bne.n	8016f58 <USB_ActivateEndpoint+0xf8>
 8016f56:	e07a      	b.n	801704e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	61bb      	str	r3, [r7, #24]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2250      	movs	r2, #80	@ 0x50
 8016f60:	5a9b      	ldrh	r3, [r3, r2]
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	001a      	movs	r2, r3
 8016f66:	69bb      	ldr	r3, [r7, #24]
 8016f68:	189b      	adds	r3, r3, r2
 8016f6a:	61bb      	str	r3, [r7, #24]
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	00da      	lsls	r2, r3, #3
 8016f72:	69bb      	ldr	r3, [r7, #24]
 8016f74:	18d3      	adds	r3, r2, r3
 8016f76:	2280      	movs	r2, #128	@ 0x80
 8016f78:	00d2      	lsls	r2, r2, #3
 8016f7a:	4694      	mov	ip, r2
 8016f7c:	4463      	add	r3, ip
 8016f7e:	617b      	str	r3, [r7, #20]
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	88db      	ldrh	r3, [r3, #6]
 8016f84:	085b      	lsrs	r3, r3, #1
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	18db      	adds	r3, r3, r3
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	697b      	ldr	r3, [r7, #20]
 8016f8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	683b      	ldr	r3, [r7, #0]
 8016f94:	781b      	ldrb	r3, [r3, #0]
 8016f96:	009b      	lsls	r3, r3, #2
 8016f98:	18d2      	adds	r2, r2, r3
 8016f9a:	2112      	movs	r1, #18
 8016f9c:	187b      	adds	r3, r7, r1
 8016f9e:	8812      	ldrh	r2, [r2, #0]
 8016fa0:	801a      	strh	r2, [r3, #0]
 8016fa2:	187b      	adds	r3, r7, r1
 8016fa4:	881b      	ldrh	r3, [r3, #0]
 8016fa6:	2240      	movs	r2, #64	@ 0x40
 8016fa8:	4013      	ands	r3, r2
 8016faa:	d016      	beq.n	8016fda <USB_ActivateEndpoint+0x17a>
 8016fac:	687a      	ldr	r2, [r7, #4]
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	009b      	lsls	r3, r3, #2
 8016fb4:	18d3      	adds	r3, r2, r3
 8016fb6:	881b      	ldrh	r3, [r3, #0]
 8016fb8:	b29a      	uxth	r2, r3
 8016fba:	2010      	movs	r0, #16
 8016fbc:	183b      	adds	r3, r7, r0
 8016fbe:	4957      	ldr	r1, [pc, #348]	@ (801711c <USB_ActivateEndpoint+0x2bc>)
 8016fc0:	400a      	ands	r2, r1
 8016fc2:	801a      	strh	r2, [r3, #0]
 8016fc4:	687a      	ldr	r2, [r7, #4]
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	009b      	lsls	r3, r3, #2
 8016fcc:	18d3      	adds	r3, r2, r3
 8016fce:	183a      	adds	r2, r7, r0
 8016fd0:	8812      	ldrh	r2, [r2, #0]
 8016fd2:	4953      	ldr	r1, [pc, #332]	@ (8017120 <USB_ActivateEndpoint+0x2c0>)
 8016fd4:	430a      	orrs	r2, r1
 8016fd6:	b292      	uxth	r2, r2
 8016fd8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	78db      	ldrb	r3, [r3, #3]
 8016fde:	2b01      	cmp	r3, #1
 8016fe0:	d01d      	beq.n	801701e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8016fe2:	687a      	ldr	r2, [r7, #4]
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	009b      	lsls	r3, r3, #2
 8016fea:	18d3      	adds	r3, r2, r3
 8016fec:	881b      	ldrh	r3, [r3, #0]
 8016fee:	b29a      	uxth	r2, r3
 8016ff0:	200c      	movs	r0, #12
 8016ff2:	183b      	adds	r3, r7, r0
 8016ff4:	494b      	ldr	r1, [pc, #300]	@ (8017124 <USB_ActivateEndpoint+0x2c4>)
 8016ff6:	400a      	ands	r2, r1
 8016ff8:	801a      	strh	r2, [r3, #0]
 8016ffa:	183b      	adds	r3, r7, r0
 8016ffc:	183a      	adds	r2, r7, r0
 8016ffe:	8812      	ldrh	r2, [r2, #0]
 8017000:	2120      	movs	r1, #32
 8017002:	404a      	eors	r2, r1
 8017004:	801a      	strh	r2, [r3, #0]
 8017006:	687a      	ldr	r2, [r7, #4]
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	009b      	lsls	r3, r3, #2
 801700e:	18d3      	adds	r3, r2, r3
 8017010:	183a      	adds	r2, r7, r0
 8017012:	8812      	ldrh	r2, [r2, #0]
 8017014:	4940      	ldr	r1, [pc, #256]	@ (8017118 <USB_ActivateEndpoint+0x2b8>)
 8017016:	430a      	orrs	r2, r1
 8017018:	b292      	uxth	r2, r2
 801701a:	801a      	strh	r2, [r3, #0]
 801701c:	e2b4      	b.n	8017588 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	009b      	lsls	r3, r3, #2
 8017026:	18d3      	adds	r3, r2, r3
 8017028:	881b      	ldrh	r3, [r3, #0]
 801702a:	b29a      	uxth	r2, r3
 801702c:	200e      	movs	r0, #14
 801702e:	183b      	adds	r3, r7, r0
 8017030:	493c      	ldr	r1, [pc, #240]	@ (8017124 <USB_ActivateEndpoint+0x2c4>)
 8017032:	400a      	ands	r2, r1
 8017034:	801a      	strh	r2, [r3, #0]
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	009b      	lsls	r3, r3, #2
 801703e:	18d3      	adds	r3, r2, r3
 8017040:	183a      	adds	r2, r7, r0
 8017042:	8812      	ldrh	r2, [r2, #0]
 8017044:	4934      	ldr	r1, [pc, #208]	@ (8017118 <USB_ActivateEndpoint+0x2b8>)
 8017046:	430a      	orrs	r2, r1
 8017048:	b292      	uxth	r2, r2
 801704a:	801a      	strh	r2, [r3, #0]
 801704c:	e29c      	b.n	8017588 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	633b      	str	r3, [r7, #48]	@ 0x30
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2250      	movs	r2, #80	@ 0x50
 8017056:	5a9b      	ldrh	r3, [r3, r2]
 8017058:	b29b      	uxth	r3, r3
 801705a:	001a      	movs	r2, r3
 801705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801705e:	189b      	adds	r3, r3, r2
 8017060:	633b      	str	r3, [r7, #48]	@ 0x30
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	00da      	lsls	r2, r3, #3
 8017068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801706a:	18d3      	adds	r3, r2, r3
 801706c:	4a2e      	ldr	r2, [pc, #184]	@ (8017128 <USB_ActivateEndpoint+0x2c8>)
 801706e:	4694      	mov	ip, r2
 8017070:	4463      	add	r3, ip
 8017072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	88db      	ldrh	r3, [r3, #6]
 8017078:	085b      	lsrs	r3, r3, #1
 801707a:	b29b      	uxth	r3, r3
 801707c:	18db      	adds	r3, r3, r3
 801707e:	b29a      	uxth	r2, r3
 8017080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017082:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	2250      	movs	r2, #80	@ 0x50
 801708c:	5a9b      	ldrh	r3, [r3, r2]
 801708e:	b29b      	uxth	r3, r3
 8017090:	001a      	movs	r2, r3
 8017092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017094:	189b      	adds	r3, r3, r2
 8017096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	00da      	lsls	r2, r3, #3
 801709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170a0:	18d3      	adds	r3, r2, r3
 80170a2:	4a22      	ldr	r2, [pc, #136]	@ (801712c <USB_ActivateEndpoint+0x2cc>)
 80170a4:	4694      	mov	ip, r2
 80170a6:	4463      	add	r3, ip
 80170a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80170aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170ac:	881b      	ldrh	r3, [r3, #0]
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	059b      	lsls	r3, r3, #22
 80170b2:	0d9b      	lsrs	r3, r3, #22
 80170b4:	b29a      	uxth	r2, r3
 80170b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170b8:	801a      	strh	r2, [r3, #0]
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	691b      	ldr	r3, [r3, #16]
 80170be:	2b3e      	cmp	r3, #62	@ 0x3e
 80170c0:	d91a      	bls.n	80170f8 <USB_ActivateEndpoint+0x298>
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	691b      	ldr	r3, [r3, #16]
 80170c6:	095b      	lsrs	r3, r3, #5
 80170c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80170ca:	683b      	ldr	r3, [r7, #0]
 80170cc:	691b      	ldr	r3, [r3, #16]
 80170ce:	221f      	movs	r2, #31
 80170d0:	4013      	ands	r3, r2
 80170d2:	d102      	bne.n	80170da <USB_ActivateEndpoint+0x27a>
 80170d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80170d6:	3b01      	subs	r3, #1
 80170d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80170da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170dc:	881b      	ldrh	r3, [r3, #0]
 80170de:	b29a      	uxth	r2, r3
 80170e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80170e2:	b29b      	uxth	r3, r3
 80170e4:	029b      	lsls	r3, r3, #10
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	4313      	orrs	r3, r2
 80170ea:	b29b      	uxth	r3, r3
 80170ec:	4a10      	ldr	r2, [pc, #64]	@ (8017130 <USB_ActivateEndpoint+0x2d0>)
 80170ee:	4313      	orrs	r3, r2
 80170f0:	b29a      	uxth	r2, r3
 80170f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170f4:	801a      	strh	r2, [r3, #0]
 80170f6:	e034      	b.n	8017162 <USB_ActivateEndpoint+0x302>
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	691b      	ldr	r3, [r3, #16]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d119      	bne.n	8017134 <USB_ActivateEndpoint+0x2d4>
 8017100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017102:	881b      	ldrh	r3, [r3, #0]
 8017104:	b29b      	uxth	r3, r3
 8017106:	4a0a      	ldr	r2, [pc, #40]	@ (8017130 <USB_ActivateEndpoint+0x2d0>)
 8017108:	4313      	orrs	r3, r2
 801710a:	b29a      	uxth	r2, r3
 801710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801710e:	801a      	strh	r2, [r3, #0]
 8017110:	e027      	b.n	8017162 <USB_ActivateEndpoint+0x302>
 8017112:	46c0      	nop			@ (mov r8, r8)
 8017114:	ffff898f 	.word	0xffff898f
 8017118:	ffff8080 	.word	0xffff8080
 801711c:	ffff8f8f 	.word	0xffff8f8f
 8017120:	ffff80c0 	.word	0xffff80c0
 8017124:	ffff8fbf 	.word	0xffff8fbf
 8017128:	00000404 	.word	0x00000404
 801712c:	00000406 	.word	0x00000406
 8017130:	ffff8000 	.word	0xffff8000
 8017134:	683b      	ldr	r3, [r7, #0]
 8017136:	691b      	ldr	r3, [r3, #16]
 8017138:	085b      	lsrs	r3, r3, #1
 801713a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	691b      	ldr	r3, [r3, #16]
 8017140:	2201      	movs	r2, #1
 8017142:	4013      	ands	r3, r2
 8017144:	d002      	beq.n	801714c <USB_ActivateEndpoint+0x2ec>
 8017146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017148:	3301      	adds	r3, #1
 801714a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801714e:	881b      	ldrh	r3, [r3, #0]
 8017150:	b29a      	uxth	r2, r3
 8017152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017154:	b29b      	uxth	r3, r3
 8017156:	029b      	lsls	r3, r3, #10
 8017158:	b29b      	uxth	r3, r3
 801715a:	4313      	orrs	r3, r2
 801715c:	b29a      	uxth	r2, r3
 801715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017160:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017162:	687a      	ldr	r2, [r7, #4]
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	781b      	ldrb	r3, [r3, #0]
 8017168:	009b      	lsls	r3, r3, #2
 801716a:	18d2      	adds	r2, r2, r3
 801716c:	2122      	movs	r1, #34	@ 0x22
 801716e:	187b      	adds	r3, r7, r1
 8017170:	8812      	ldrh	r2, [r2, #0]
 8017172:	801a      	strh	r2, [r3, #0]
 8017174:	187b      	adds	r3, r7, r1
 8017176:	881a      	ldrh	r2, [r3, #0]
 8017178:	2380      	movs	r3, #128	@ 0x80
 801717a:	01db      	lsls	r3, r3, #7
 801717c:	4013      	ands	r3, r2
 801717e:	d016      	beq.n	80171ae <USB_ActivateEndpoint+0x34e>
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	781b      	ldrb	r3, [r3, #0]
 8017186:	009b      	lsls	r3, r3, #2
 8017188:	18d3      	adds	r3, r2, r3
 801718a:	881b      	ldrh	r3, [r3, #0]
 801718c:	b29a      	uxth	r2, r3
 801718e:	2020      	movs	r0, #32
 8017190:	183b      	adds	r3, r7, r0
 8017192:	49dd      	ldr	r1, [pc, #884]	@ (8017508 <USB_ActivateEndpoint+0x6a8>)
 8017194:	400a      	ands	r2, r1
 8017196:	801a      	strh	r2, [r3, #0]
 8017198:	687a      	ldr	r2, [r7, #4]
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	781b      	ldrb	r3, [r3, #0]
 801719e:	009b      	lsls	r3, r3, #2
 80171a0:	18d3      	adds	r3, r2, r3
 80171a2:	183a      	adds	r2, r7, r0
 80171a4:	8812      	ldrh	r2, [r2, #0]
 80171a6:	49d9      	ldr	r1, [pc, #868]	@ (801750c <USB_ActivateEndpoint+0x6ac>)
 80171a8:	430a      	orrs	r2, r1
 80171aa:	b292      	uxth	r2, r2
 80171ac:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d125      	bne.n	8017202 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80171b6:	687a      	ldr	r2, [r7, #4]
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	781b      	ldrb	r3, [r3, #0]
 80171bc:	009b      	lsls	r3, r3, #2
 80171be:	18d3      	adds	r3, r2, r3
 80171c0:	881b      	ldrh	r3, [r3, #0]
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	201c      	movs	r0, #28
 80171c6:	183b      	adds	r3, r7, r0
 80171c8:	49d1      	ldr	r1, [pc, #836]	@ (8017510 <USB_ActivateEndpoint+0x6b0>)
 80171ca:	400a      	ands	r2, r1
 80171cc:	801a      	strh	r2, [r3, #0]
 80171ce:	183b      	adds	r3, r7, r0
 80171d0:	183a      	adds	r2, r7, r0
 80171d2:	8812      	ldrh	r2, [r2, #0]
 80171d4:	2180      	movs	r1, #128	@ 0x80
 80171d6:	0149      	lsls	r1, r1, #5
 80171d8:	404a      	eors	r2, r1
 80171da:	801a      	strh	r2, [r3, #0]
 80171dc:	183b      	adds	r3, r7, r0
 80171de:	183a      	adds	r2, r7, r0
 80171e0:	8812      	ldrh	r2, [r2, #0]
 80171e2:	2180      	movs	r1, #128	@ 0x80
 80171e4:	0189      	lsls	r1, r1, #6
 80171e6:	404a      	eors	r2, r1
 80171e8:	801a      	strh	r2, [r3, #0]
 80171ea:	687a      	ldr	r2, [r7, #4]
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	009b      	lsls	r3, r3, #2
 80171f2:	18d3      	adds	r3, r2, r3
 80171f4:	183a      	adds	r2, r7, r0
 80171f6:	8812      	ldrh	r2, [r2, #0]
 80171f8:	49c6      	ldr	r1, [pc, #792]	@ (8017514 <USB_ActivateEndpoint+0x6b4>)
 80171fa:	430a      	orrs	r2, r1
 80171fc:	b292      	uxth	r2, r2
 80171fe:	801a      	strh	r2, [r3, #0]
 8017200:	e1c2      	b.n	8017588 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8017202:	687a      	ldr	r2, [r7, #4]
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	009b      	lsls	r3, r3, #2
 801720a:	18d3      	adds	r3, r2, r3
 801720c:	881b      	ldrh	r3, [r3, #0]
 801720e:	b29a      	uxth	r2, r3
 8017210:	201e      	movs	r0, #30
 8017212:	183b      	adds	r3, r7, r0
 8017214:	49be      	ldr	r1, [pc, #760]	@ (8017510 <USB_ActivateEndpoint+0x6b0>)
 8017216:	400a      	ands	r2, r1
 8017218:	801a      	strh	r2, [r3, #0]
 801721a:	183b      	adds	r3, r7, r0
 801721c:	183a      	adds	r2, r7, r0
 801721e:	8812      	ldrh	r2, [r2, #0]
 8017220:	2180      	movs	r1, #128	@ 0x80
 8017222:	0189      	lsls	r1, r1, #6
 8017224:	404a      	eors	r2, r1
 8017226:	801a      	strh	r2, [r3, #0]
 8017228:	687a      	ldr	r2, [r7, #4]
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	009b      	lsls	r3, r3, #2
 8017230:	18d3      	adds	r3, r2, r3
 8017232:	183a      	adds	r2, r7, r0
 8017234:	8812      	ldrh	r2, [r2, #0]
 8017236:	49b7      	ldr	r1, [pc, #732]	@ (8017514 <USB_ActivateEndpoint+0x6b4>)
 8017238:	430a      	orrs	r2, r1
 801723a:	b292      	uxth	r2, r2
 801723c:	801a      	strh	r2, [r3, #0]
 801723e:	e1a3      	b.n	8017588 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	78db      	ldrb	r3, [r3, #3]
 8017244:	2b02      	cmp	r3, #2
 8017246:	d117      	bne.n	8017278 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	009b      	lsls	r3, r3, #2
 8017250:	18d3      	adds	r3, r2, r3
 8017252:	881b      	ldrh	r3, [r3, #0]
 8017254:	b29a      	uxth	r2, r3
 8017256:	2062      	movs	r0, #98	@ 0x62
 8017258:	183b      	adds	r3, r7, r0
 801725a:	49ab      	ldr	r1, [pc, #684]	@ (8017508 <USB_ActivateEndpoint+0x6a8>)
 801725c:	400a      	ands	r2, r1
 801725e:	801a      	strh	r2, [r3, #0]
 8017260:	687a      	ldr	r2, [r7, #4]
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	009b      	lsls	r3, r3, #2
 8017268:	18d3      	adds	r3, r2, r3
 801726a:	183a      	adds	r2, r7, r0
 801726c:	8812      	ldrh	r2, [r2, #0]
 801726e:	49aa      	ldr	r1, [pc, #680]	@ (8017518 <USB_ActivateEndpoint+0x6b8>)
 8017270:	430a      	orrs	r2, r1
 8017272:	b292      	uxth	r2, r2
 8017274:	801a      	strh	r2, [r3, #0]
 8017276:	e016      	b.n	80172a6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8017278:	687a      	ldr	r2, [r7, #4]
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	781b      	ldrb	r3, [r3, #0]
 801727e:	009b      	lsls	r3, r3, #2
 8017280:	18d3      	adds	r3, r2, r3
 8017282:	881b      	ldrh	r3, [r3, #0]
 8017284:	b29a      	uxth	r2, r3
 8017286:	2064      	movs	r0, #100	@ 0x64
 8017288:	183b      	adds	r3, r7, r0
 801728a:	49a4      	ldr	r1, [pc, #656]	@ (801751c <USB_ActivateEndpoint+0x6bc>)
 801728c:	400a      	ands	r2, r1
 801728e:	801a      	strh	r2, [r3, #0]
 8017290:	687a      	ldr	r2, [r7, #4]
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	009b      	lsls	r3, r3, #2
 8017298:	18d3      	adds	r3, r2, r3
 801729a:	183a      	adds	r2, r7, r0
 801729c:	8812      	ldrh	r2, [r2, #0]
 801729e:	499d      	ldr	r1, [pc, #628]	@ (8017514 <USB_ActivateEndpoint+0x6b4>)
 80172a0:	430a      	orrs	r2, r1
 80172a2:	b292      	uxth	r2, r2
 80172a4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2250      	movs	r2, #80	@ 0x50
 80172ae:	5a9b      	ldrh	r3, [r3, r2]
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	001a      	movs	r2, r3
 80172b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80172b6:	189b      	adds	r3, r3, r2
 80172b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	00da      	lsls	r2, r3, #3
 80172c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80172c2:	18d3      	adds	r3, r2, r3
 80172c4:	2280      	movs	r2, #128	@ 0x80
 80172c6:	00d2      	lsls	r2, r2, #3
 80172c8:	4694      	mov	ip, r2
 80172ca:	4463      	add	r3, ip
 80172cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	891b      	ldrh	r3, [r3, #8]
 80172d2:	085b      	lsrs	r3, r3, #1
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	18db      	adds	r3, r3, r3
 80172d8:	b29a      	uxth	r2, r3
 80172da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80172dc:	801a      	strh	r2, [r3, #0]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2250      	movs	r2, #80	@ 0x50
 80172e6:	5a9b      	ldrh	r3, [r3, r2]
 80172e8:	b29b      	uxth	r3, r3
 80172ea:	001a      	movs	r2, r3
 80172ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172ee:	189b      	adds	r3, r3, r2
 80172f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	781b      	ldrb	r3, [r3, #0]
 80172f6:	00da      	lsls	r2, r3, #3
 80172f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172fa:	18d3      	adds	r3, r2, r3
 80172fc:	4a88      	ldr	r2, [pc, #544]	@ (8017520 <USB_ActivateEndpoint+0x6c0>)
 80172fe:	4694      	mov	ip, r2
 8017300:	4463      	add	r3, ip
 8017302:	653b      	str	r3, [r7, #80]	@ 0x50
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	895b      	ldrh	r3, [r3, #10]
 8017308:	085b      	lsrs	r3, r3, #1
 801730a:	b29b      	uxth	r3, r3
 801730c:	18db      	adds	r3, r3, r3
 801730e:	b29a      	uxth	r2, r3
 8017310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017312:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	785b      	ldrb	r3, [r3, #1]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d000      	beq.n	801731e <USB_ActivateEndpoint+0x4be>
 801731c:	e087      	b.n	801742e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	18d2      	adds	r2, r2, r3
 8017328:	2140      	movs	r1, #64	@ 0x40
 801732a:	187b      	adds	r3, r7, r1
 801732c:	8812      	ldrh	r2, [r2, #0]
 801732e:	801a      	strh	r2, [r3, #0]
 8017330:	187b      	adds	r3, r7, r1
 8017332:	881a      	ldrh	r2, [r3, #0]
 8017334:	2380      	movs	r3, #128	@ 0x80
 8017336:	01db      	lsls	r3, r3, #7
 8017338:	4013      	ands	r3, r2
 801733a:	d016      	beq.n	801736a <USB_ActivateEndpoint+0x50a>
 801733c:	687a      	ldr	r2, [r7, #4]
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	009b      	lsls	r3, r3, #2
 8017344:	18d3      	adds	r3, r2, r3
 8017346:	881b      	ldrh	r3, [r3, #0]
 8017348:	b29a      	uxth	r2, r3
 801734a:	203e      	movs	r0, #62	@ 0x3e
 801734c:	183b      	adds	r3, r7, r0
 801734e:	496e      	ldr	r1, [pc, #440]	@ (8017508 <USB_ActivateEndpoint+0x6a8>)
 8017350:	400a      	ands	r2, r1
 8017352:	801a      	strh	r2, [r3, #0]
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	18d3      	adds	r3, r2, r3
 801735e:	183a      	adds	r2, r7, r0
 8017360:	8812      	ldrh	r2, [r2, #0]
 8017362:	496a      	ldr	r1, [pc, #424]	@ (801750c <USB_ActivateEndpoint+0x6ac>)
 8017364:	430a      	orrs	r2, r1
 8017366:	b292      	uxth	r2, r2
 8017368:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801736a:	687a      	ldr	r2, [r7, #4]
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	009b      	lsls	r3, r3, #2
 8017372:	18d2      	adds	r2, r2, r3
 8017374:	213c      	movs	r1, #60	@ 0x3c
 8017376:	187b      	adds	r3, r7, r1
 8017378:	8812      	ldrh	r2, [r2, #0]
 801737a:	801a      	strh	r2, [r3, #0]
 801737c:	187b      	adds	r3, r7, r1
 801737e:	881b      	ldrh	r3, [r3, #0]
 8017380:	2240      	movs	r2, #64	@ 0x40
 8017382:	4013      	ands	r3, r2
 8017384:	d016      	beq.n	80173b4 <USB_ActivateEndpoint+0x554>
 8017386:	687a      	ldr	r2, [r7, #4]
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	18d3      	adds	r3, r2, r3
 8017390:	881b      	ldrh	r3, [r3, #0]
 8017392:	b29a      	uxth	r2, r3
 8017394:	203a      	movs	r0, #58	@ 0x3a
 8017396:	183b      	adds	r3, r7, r0
 8017398:	495b      	ldr	r1, [pc, #364]	@ (8017508 <USB_ActivateEndpoint+0x6a8>)
 801739a:	400a      	ands	r2, r1
 801739c:	801a      	strh	r2, [r3, #0]
 801739e:	687a      	ldr	r2, [r7, #4]
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	781b      	ldrb	r3, [r3, #0]
 80173a4:	009b      	lsls	r3, r3, #2
 80173a6:	18d3      	adds	r3, r2, r3
 80173a8:	183a      	adds	r2, r7, r0
 80173aa:	8812      	ldrh	r2, [r2, #0]
 80173ac:	495d      	ldr	r1, [pc, #372]	@ (8017524 <USB_ActivateEndpoint+0x6c4>)
 80173ae:	430a      	orrs	r2, r1
 80173b0:	b292      	uxth	r2, r2
 80173b2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80173b4:	687a      	ldr	r2, [r7, #4]
 80173b6:	683b      	ldr	r3, [r7, #0]
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	009b      	lsls	r3, r3, #2
 80173bc:	18d3      	adds	r3, r2, r3
 80173be:	881b      	ldrh	r3, [r3, #0]
 80173c0:	b29a      	uxth	r2, r3
 80173c2:	2038      	movs	r0, #56	@ 0x38
 80173c4:	183b      	adds	r3, r7, r0
 80173c6:	4952      	ldr	r1, [pc, #328]	@ (8017510 <USB_ActivateEndpoint+0x6b0>)
 80173c8:	400a      	ands	r2, r1
 80173ca:	801a      	strh	r2, [r3, #0]
 80173cc:	183b      	adds	r3, r7, r0
 80173ce:	183a      	adds	r2, r7, r0
 80173d0:	8812      	ldrh	r2, [r2, #0]
 80173d2:	2180      	movs	r1, #128	@ 0x80
 80173d4:	0149      	lsls	r1, r1, #5
 80173d6:	404a      	eors	r2, r1
 80173d8:	801a      	strh	r2, [r3, #0]
 80173da:	183b      	adds	r3, r7, r0
 80173dc:	183a      	adds	r2, r7, r0
 80173de:	8812      	ldrh	r2, [r2, #0]
 80173e0:	2180      	movs	r1, #128	@ 0x80
 80173e2:	0189      	lsls	r1, r1, #6
 80173e4:	404a      	eors	r2, r1
 80173e6:	801a      	strh	r2, [r3, #0]
 80173e8:	687a      	ldr	r2, [r7, #4]
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	009b      	lsls	r3, r3, #2
 80173f0:	18d3      	adds	r3, r2, r3
 80173f2:	183a      	adds	r2, r7, r0
 80173f4:	8812      	ldrh	r2, [r2, #0]
 80173f6:	4947      	ldr	r1, [pc, #284]	@ (8017514 <USB_ActivateEndpoint+0x6b4>)
 80173f8:	430a      	orrs	r2, r1
 80173fa:	b292      	uxth	r2, r2
 80173fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	009b      	lsls	r3, r3, #2
 8017406:	18d3      	adds	r3, r2, r3
 8017408:	881b      	ldrh	r3, [r3, #0]
 801740a:	b29a      	uxth	r2, r3
 801740c:	2036      	movs	r0, #54	@ 0x36
 801740e:	183b      	adds	r3, r7, r0
 8017410:	4945      	ldr	r1, [pc, #276]	@ (8017528 <USB_ActivateEndpoint+0x6c8>)
 8017412:	400a      	ands	r2, r1
 8017414:	801a      	strh	r2, [r3, #0]
 8017416:	687a      	ldr	r2, [r7, #4]
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	18d3      	adds	r3, r2, r3
 8017420:	183a      	adds	r2, r7, r0
 8017422:	8812      	ldrh	r2, [r2, #0]
 8017424:	493b      	ldr	r1, [pc, #236]	@ (8017514 <USB_ActivateEndpoint+0x6b4>)
 8017426:	430a      	orrs	r2, r1
 8017428:	b292      	uxth	r2, r2
 801742a:	801a      	strh	r2, [r3, #0]
 801742c:	e0ac      	b.n	8017588 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	18d2      	adds	r2, r2, r3
 8017438:	214e      	movs	r1, #78	@ 0x4e
 801743a:	187b      	adds	r3, r7, r1
 801743c:	8812      	ldrh	r2, [r2, #0]
 801743e:	801a      	strh	r2, [r3, #0]
 8017440:	187b      	adds	r3, r7, r1
 8017442:	881a      	ldrh	r2, [r3, #0]
 8017444:	2380      	movs	r3, #128	@ 0x80
 8017446:	01db      	lsls	r3, r3, #7
 8017448:	4013      	ands	r3, r2
 801744a:	d016      	beq.n	801747a <USB_ActivateEndpoint+0x61a>
 801744c:	687a      	ldr	r2, [r7, #4]
 801744e:	683b      	ldr	r3, [r7, #0]
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	009b      	lsls	r3, r3, #2
 8017454:	18d3      	adds	r3, r2, r3
 8017456:	881b      	ldrh	r3, [r3, #0]
 8017458:	b29a      	uxth	r2, r3
 801745a:	204c      	movs	r0, #76	@ 0x4c
 801745c:	183b      	adds	r3, r7, r0
 801745e:	492a      	ldr	r1, [pc, #168]	@ (8017508 <USB_ActivateEndpoint+0x6a8>)
 8017460:	400a      	ands	r2, r1
 8017462:	801a      	strh	r2, [r3, #0]
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	009b      	lsls	r3, r3, #2
 801746c:	18d3      	adds	r3, r2, r3
 801746e:	183a      	adds	r2, r7, r0
 8017470:	8812      	ldrh	r2, [r2, #0]
 8017472:	4926      	ldr	r1, [pc, #152]	@ (801750c <USB_ActivateEndpoint+0x6ac>)
 8017474:	430a      	orrs	r2, r1
 8017476:	b292      	uxth	r2, r2
 8017478:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801747a:	687a      	ldr	r2, [r7, #4]
 801747c:	683b      	ldr	r3, [r7, #0]
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	009b      	lsls	r3, r3, #2
 8017482:	18d2      	adds	r2, r2, r3
 8017484:	214a      	movs	r1, #74	@ 0x4a
 8017486:	187b      	adds	r3, r7, r1
 8017488:	8812      	ldrh	r2, [r2, #0]
 801748a:	801a      	strh	r2, [r3, #0]
 801748c:	187b      	adds	r3, r7, r1
 801748e:	881b      	ldrh	r3, [r3, #0]
 8017490:	2240      	movs	r2, #64	@ 0x40
 8017492:	4013      	ands	r3, r2
 8017494:	d016      	beq.n	80174c4 <USB_ActivateEndpoint+0x664>
 8017496:	687a      	ldr	r2, [r7, #4]
 8017498:	683b      	ldr	r3, [r7, #0]
 801749a:	781b      	ldrb	r3, [r3, #0]
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	18d3      	adds	r3, r2, r3
 80174a0:	881b      	ldrh	r3, [r3, #0]
 80174a2:	b29a      	uxth	r2, r3
 80174a4:	2048      	movs	r0, #72	@ 0x48
 80174a6:	183b      	adds	r3, r7, r0
 80174a8:	4917      	ldr	r1, [pc, #92]	@ (8017508 <USB_ActivateEndpoint+0x6a8>)
 80174aa:	400a      	ands	r2, r1
 80174ac:	801a      	strh	r2, [r3, #0]
 80174ae:	687a      	ldr	r2, [r7, #4]
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	781b      	ldrb	r3, [r3, #0]
 80174b4:	009b      	lsls	r3, r3, #2
 80174b6:	18d3      	adds	r3, r2, r3
 80174b8:	183a      	adds	r2, r7, r0
 80174ba:	8812      	ldrh	r2, [r2, #0]
 80174bc:	4919      	ldr	r1, [pc, #100]	@ (8017524 <USB_ActivateEndpoint+0x6c4>)
 80174be:	430a      	orrs	r2, r1
 80174c0:	b292      	uxth	r2, r2
 80174c2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	78db      	ldrb	r3, [r3, #3]
 80174c8:	2b01      	cmp	r3, #1
 80174ca:	d02f      	beq.n	801752c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	009b      	lsls	r3, r3, #2
 80174d4:	18d3      	adds	r3, r2, r3
 80174d6:	881b      	ldrh	r3, [r3, #0]
 80174d8:	b29a      	uxth	r2, r3
 80174da:	2044      	movs	r0, #68	@ 0x44
 80174dc:	183b      	adds	r3, r7, r0
 80174de:	4912      	ldr	r1, [pc, #72]	@ (8017528 <USB_ActivateEndpoint+0x6c8>)
 80174e0:	400a      	ands	r2, r1
 80174e2:	801a      	strh	r2, [r3, #0]
 80174e4:	183b      	adds	r3, r7, r0
 80174e6:	183a      	adds	r2, r7, r0
 80174e8:	8812      	ldrh	r2, [r2, #0]
 80174ea:	2120      	movs	r1, #32
 80174ec:	404a      	eors	r2, r1
 80174ee:	801a      	strh	r2, [r3, #0]
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	781b      	ldrb	r3, [r3, #0]
 80174f6:	009b      	lsls	r3, r3, #2
 80174f8:	18d3      	adds	r3, r2, r3
 80174fa:	183a      	adds	r2, r7, r0
 80174fc:	8812      	ldrh	r2, [r2, #0]
 80174fe:	4905      	ldr	r1, [pc, #20]	@ (8017514 <USB_ActivateEndpoint+0x6b4>)
 8017500:	430a      	orrs	r2, r1
 8017502:	b292      	uxth	r2, r2
 8017504:	801a      	strh	r2, [r3, #0]
 8017506:	e028      	b.n	801755a <USB_ActivateEndpoint+0x6fa>
 8017508:	ffff8f8f 	.word	0xffff8f8f
 801750c:	ffffc080 	.word	0xffffc080
 8017510:	ffffbf8f 	.word	0xffffbf8f
 8017514:	ffff8080 	.word	0xffff8080
 8017518:	ffff8180 	.word	0xffff8180
 801751c:	ffff8e8f 	.word	0xffff8e8f
 8017520:	00000404 	.word	0x00000404
 8017524:	ffff80c0 	.word	0xffff80c0
 8017528:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801752c:	687a      	ldr	r2, [r7, #4]
 801752e:	683b      	ldr	r3, [r7, #0]
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	009b      	lsls	r3, r3, #2
 8017534:	18d3      	adds	r3, r2, r3
 8017536:	881b      	ldrh	r3, [r3, #0]
 8017538:	b29a      	uxth	r2, r3
 801753a:	2046      	movs	r0, #70	@ 0x46
 801753c:	183b      	adds	r3, r7, r0
 801753e:	4916      	ldr	r1, [pc, #88]	@ (8017598 <USB_ActivateEndpoint+0x738>)
 8017540:	400a      	ands	r2, r1
 8017542:	801a      	strh	r2, [r3, #0]
 8017544:	687a      	ldr	r2, [r7, #4]
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	781b      	ldrb	r3, [r3, #0]
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	18d3      	adds	r3, r2, r3
 801754e:	183a      	adds	r2, r7, r0
 8017550:	8812      	ldrh	r2, [r2, #0]
 8017552:	4912      	ldr	r1, [pc, #72]	@ (801759c <USB_ActivateEndpoint+0x73c>)
 8017554:	430a      	orrs	r2, r1
 8017556:	b292      	uxth	r2, r2
 8017558:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801755a:	687a      	ldr	r2, [r7, #4]
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	009b      	lsls	r3, r3, #2
 8017562:	18d3      	adds	r3, r2, r3
 8017564:	881b      	ldrh	r3, [r3, #0]
 8017566:	b29a      	uxth	r2, r3
 8017568:	2042      	movs	r0, #66	@ 0x42
 801756a:	183b      	adds	r3, r7, r0
 801756c:	490c      	ldr	r1, [pc, #48]	@ (80175a0 <USB_ActivateEndpoint+0x740>)
 801756e:	400a      	ands	r2, r1
 8017570:	801a      	strh	r2, [r3, #0]
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	009b      	lsls	r3, r3, #2
 801757a:	18d3      	adds	r3, r2, r3
 801757c:	183a      	adds	r2, r7, r0
 801757e:	8812      	ldrh	r2, [r2, #0]
 8017580:	4906      	ldr	r1, [pc, #24]	@ (801759c <USB_ActivateEndpoint+0x73c>)
 8017582:	430a      	orrs	r2, r1
 8017584:	b292      	uxth	r2, r2
 8017586:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8017588:	236f      	movs	r3, #111	@ 0x6f
 801758a:	18fb      	adds	r3, r7, r3
 801758c:	781b      	ldrb	r3, [r3, #0]
}
 801758e:	0018      	movs	r0, r3
 8017590:	46bd      	mov	sp, r7
 8017592:	b01c      	add	sp, #112	@ 0x70
 8017594:	bd80      	pop	{r7, pc}
 8017596:	46c0      	nop			@ (mov r8, r8)
 8017598:	ffff8fbf 	.word	0xffff8fbf
 801759c:	ffff8080 	.word	0xffff8080
 80175a0:	ffffbf8f 	.word	0xffffbf8f

080175a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b08c      	sub	sp, #48	@ 0x30
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
 80175ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80175ae:	683b      	ldr	r3, [r7, #0]
 80175b0:	7b1b      	ldrb	r3, [r3, #12]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d000      	beq.n	80175b8 <USB_DeactivateEndpoint+0x14>
 80175b6:	e07e      	b.n	80176b6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80175b8:	683b      	ldr	r3, [r7, #0]
 80175ba:	785b      	ldrb	r3, [r3, #1]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d03c      	beq.n	801763a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80175c0:	687a      	ldr	r2, [r7, #4]
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	781b      	ldrb	r3, [r3, #0]
 80175c6:	009b      	lsls	r3, r3, #2
 80175c8:	18d2      	adds	r2, r2, r3
 80175ca:	210c      	movs	r1, #12
 80175cc:	187b      	adds	r3, r7, r1
 80175ce:	8812      	ldrh	r2, [r2, #0]
 80175d0:	801a      	strh	r2, [r3, #0]
 80175d2:	187b      	adds	r3, r7, r1
 80175d4:	881b      	ldrh	r3, [r3, #0]
 80175d6:	2240      	movs	r2, #64	@ 0x40
 80175d8:	4013      	ands	r3, r2
 80175da:	d016      	beq.n	801760a <USB_DeactivateEndpoint+0x66>
 80175dc:	687a      	ldr	r2, [r7, #4]
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	781b      	ldrb	r3, [r3, #0]
 80175e2:	009b      	lsls	r3, r3, #2
 80175e4:	18d3      	adds	r3, r2, r3
 80175e6:	881b      	ldrh	r3, [r3, #0]
 80175e8:	b29a      	uxth	r2, r3
 80175ea:	200a      	movs	r0, #10
 80175ec:	183b      	adds	r3, r7, r0
 80175ee:	49c7      	ldr	r1, [pc, #796]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 80175f0:	400a      	ands	r2, r1
 80175f2:	801a      	strh	r2, [r3, #0]
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	781b      	ldrb	r3, [r3, #0]
 80175fa:	009b      	lsls	r3, r3, #2
 80175fc:	18d3      	adds	r3, r2, r3
 80175fe:	183a      	adds	r2, r7, r0
 8017600:	8812      	ldrh	r2, [r2, #0]
 8017602:	49c3      	ldr	r1, [pc, #780]	@ (8017910 <USB_DeactivateEndpoint+0x36c>)
 8017604:	430a      	orrs	r2, r1
 8017606:	b292      	uxth	r2, r2
 8017608:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	009b      	lsls	r3, r3, #2
 8017612:	18d3      	adds	r3, r2, r3
 8017614:	881b      	ldrh	r3, [r3, #0]
 8017616:	b29a      	uxth	r2, r3
 8017618:	2008      	movs	r0, #8
 801761a:	183b      	adds	r3, r7, r0
 801761c:	49bd      	ldr	r1, [pc, #756]	@ (8017914 <USB_DeactivateEndpoint+0x370>)
 801761e:	400a      	ands	r2, r1
 8017620:	801a      	strh	r2, [r3, #0]
 8017622:	687a      	ldr	r2, [r7, #4]
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	009b      	lsls	r3, r3, #2
 801762a:	18d3      	adds	r3, r2, r3
 801762c:	183a      	adds	r2, r7, r0
 801762e:	8812      	ldrh	r2, [r2, #0]
 8017630:	49b9      	ldr	r1, [pc, #740]	@ (8017918 <USB_DeactivateEndpoint+0x374>)
 8017632:	430a      	orrs	r2, r1
 8017634:	b292      	uxth	r2, r2
 8017636:	801a      	strh	r2, [r3, #0]
 8017638:	e163      	b.n	8017902 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	683b      	ldr	r3, [r7, #0]
 801763e:	781b      	ldrb	r3, [r3, #0]
 8017640:	009b      	lsls	r3, r3, #2
 8017642:	18d2      	adds	r2, r2, r3
 8017644:	2112      	movs	r1, #18
 8017646:	187b      	adds	r3, r7, r1
 8017648:	8812      	ldrh	r2, [r2, #0]
 801764a:	801a      	strh	r2, [r3, #0]
 801764c:	187b      	adds	r3, r7, r1
 801764e:	881a      	ldrh	r2, [r3, #0]
 8017650:	2380      	movs	r3, #128	@ 0x80
 8017652:	01db      	lsls	r3, r3, #7
 8017654:	4013      	ands	r3, r2
 8017656:	d016      	beq.n	8017686 <USB_DeactivateEndpoint+0xe2>
 8017658:	687a      	ldr	r2, [r7, #4]
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	18d3      	adds	r3, r2, r3
 8017662:	881b      	ldrh	r3, [r3, #0]
 8017664:	b29a      	uxth	r2, r3
 8017666:	2010      	movs	r0, #16
 8017668:	183b      	adds	r3, r7, r0
 801766a:	49a8      	ldr	r1, [pc, #672]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 801766c:	400a      	ands	r2, r1
 801766e:	801a      	strh	r2, [r3, #0]
 8017670:	687a      	ldr	r2, [r7, #4]
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	781b      	ldrb	r3, [r3, #0]
 8017676:	009b      	lsls	r3, r3, #2
 8017678:	18d3      	adds	r3, r2, r3
 801767a:	183a      	adds	r2, r7, r0
 801767c:	8812      	ldrh	r2, [r2, #0]
 801767e:	49a7      	ldr	r1, [pc, #668]	@ (801791c <USB_DeactivateEndpoint+0x378>)
 8017680:	430a      	orrs	r2, r1
 8017682:	b292      	uxth	r2, r2
 8017684:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	683b      	ldr	r3, [r7, #0]
 801768a:	781b      	ldrb	r3, [r3, #0]
 801768c:	009b      	lsls	r3, r3, #2
 801768e:	18d3      	adds	r3, r2, r3
 8017690:	881b      	ldrh	r3, [r3, #0]
 8017692:	b29a      	uxth	r2, r3
 8017694:	200e      	movs	r0, #14
 8017696:	183b      	adds	r3, r7, r0
 8017698:	49a1      	ldr	r1, [pc, #644]	@ (8017920 <USB_DeactivateEndpoint+0x37c>)
 801769a:	400a      	ands	r2, r1
 801769c:	801a      	strh	r2, [r3, #0]
 801769e:	687a      	ldr	r2, [r7, #4]
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	009b      	lsls	r3, r3, #2
 80176a6:	18d3      	adds	r3, r2, r3
 80176a8:	183a      	adds	r2, r7, r0
 80176aa:	8812      	ldrh	r2, [r2, #0]
 80176ac:	499a      	ldr	r1, [pc, #616]	@ (8017918 <USB_DeactivateEndpoint+0x374>)
 80176ae:	430a      	orrs	r2, r1
 80176b0:	b292      	uxth	r2, r2
 80176b2:	801a      	strh	r2, [r3, #0]
 80176b4:	e125      	b.n	8017902 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	785b      	ldrb	r3, [r3, #1]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d000      	beq.n	80176c0 <USB_DeactivateEndpoint+0x11c>
 80176be:	e090      	b.n	80177e2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80176c0:	687a      	ldr	r2, [r7, #4]
 80176c2:	683b      	ldr	r3, [r7, #0]
 80176c4:	781b      	ldrb	r3, [r3, #0]
 80176c6:	009b      	lsls	r3, r3, #2
 80176c8:	18d2      	adds	r2, r2, r3
 80176ca:	2120      	movs	r1, #32
 80176cc:	187b      	adds	r3, r7, r1
 80176ce:	8812      	ldrh	r2, [r2, #0]
 80176d0:	801a      	strh	r2, [r3, #0]
 80176d2:	187b      	adds	r3, r7, r1
 80176d4:	881a      	ldrh	r2, [r3, #0]
 80176d6:	2380      	movs	r3, #128	@ 0x80
 80176d8:	01db      	lsls	r3, r3, #7
 80176da:	4013      	ands	r3, r2
 80176dc:	d016      	beq.n	801770c <USB_DeactivateEndpoint+0x168>
 80176de:	687a      	ldr	r2, [r7, #4]
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	009b      	lsls	r3, r3, #2
 80176e6:	18d3      	adds	r3, r2, r3
 80176e8:	881b      	ldrh	r3, [r3, #0]
 80176ea:	b29a      	uxth	r2, r3
 80176ec:	201e      	movs	r0, #30
 80176ee:	183b      	adds	r3, r7, r0
 80176f0:	4986      	ldr	r1, [pc, #536]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 80176f2:	400a      	ands	r2, r1
 80176f4:	801a      	strh	r2, [r3, #0]
 80176f6:	687a      	ldr	r2, [r7, #4]
 80176f8:	683b      	ldr	r3, [r7, #0]
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	009b      	lsls	r3, r3, #2
 80176fe:	18d3      	adds	r3, r2, r3
 8017700:	183a      	adds	r2, r7, r0
 8017702:	8812      	ldrh	r2, [r2, #0]
 8017704:	4985      	ldr	r1, [pc, #532]	@ (801791c <USB_DeactivateEndpoint+0x378>)
 8017706:	430a      	orrs	r2, r1
 8017708:	b292      	uxth	r2, r2
 801770a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	683b      	ldr	r3, [r7, #0]
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	009b      	lsls	r3, r3, #2
 8017714:	18d2      	adds	r2, r2, r3
 8017716:	211c      	movs	r1, #28
 8017718:	187b      	adds	r3, r7, r1
 801771a:	8812      	ldrh	r2, [r2, #0]
 801771c:	801a      	strh	r2, [r3, #0]
 801771e:	187b      	adds	r3, r7, r1
 8017720:	881b      	ldrh	r3, [r3, #0]
 8017722:	2240      	movs	r2, #64	@ 0x40
 8017724:	4013      	ands	r3, r2
 8017726:	d016      	beq.n	8017756 <USB_DeactivateEndpoint+0x1b2>
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	781b      	ldrb	r3, [r3, #0]
 801772e:	009b      	lsls	r3, r3, #2
 8017730:	18d3      	adds	r3, r2, r3
 8017732:	881b      	ldrh	r3, [r3, #0]
 8017734:	b29a      	uxth	r2, r3
 8017736:	201a      	movs	r0, #26
 8017738:	183b      	adds	r3, r7, r0
 801773a:	4974      	ldr	r1, [pc, #464]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 801773c:	400a      	ands	r2, r1
 801773e:	801a      	strh	r2, [r3, #0]
 8017740:	687a      	ldr	r2, [r7, #4]
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	009b      	lsls	r3, r3, #2
 8017748:	18d3      	adds	r3, r2, r3
 801774a:	183a      	adds	r2, r7, r0
 801774c:	8812      	ldrh	r2, [r2, #0]
 801774e:	4970      	ldr	r1, [pc, #448]	@ (8017910 <USB_DeactivateEndpoint+0x36c>)
 8017750:	430a      	orrs	r2, r1
 8017752:	b292      	uxth	r2, r2
 8017754:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8017756:	687a      	ldr	r2, [r7, #4]
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	009b      	lsls	r3, r3, #2
 801775e:	18d3      	adds	r3, r2, r3
 8017760:	881b      	ldrh	r3, [r3, #0]
 8017762:	b29a      	uxth	r2, r3
 8017764:	2018      	movs	r0, #24
 8017766:	183b      	adds	r3, r7, r0
 8017768:	4968      	ldr	r1, [pc, #416]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 801776a:	400a      	ands	r2, r1
 801776c:	801a      	strh	r2, [r3, #0]
 801776e:	687a      	ldr	r2, [r7, #4]
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	009b      	lsls	r3, r3, #2
 8017776:	18d3      	adds	r3, r2, r3
 8017778:	183a      	adds	r2, r7, r0
 801777a:	8812      	ldrh	r2, [r2, #0]
 801777c:	4964      	ldr	r1, [pc, #400]	@ (8017910 <USB_DeactivateEndpoint+0x36c>)
 801777e:	430a      	orrs	r2, r1
 8017780:	b292      	uxth	r2, r2
 8017782:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	683b      	ldr	r3, [r7, #0]
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	009b      	lsls	r3, r3, #2
 801778c:	18d3      	adds	r3, r2, r3
 801778e:	881b      	ldrh	r3, [r3, #0]
 8017790:	b29a      	uxth	r2, r3
 8017792:	2016      	movs	r0, #22
 8017794:	183b      	adds	r3, r7, r0
 8017796:	4962      	ldr	r1, [pc, #392]	@ (8017920 <USB_DeactivateEndpoint+0x37c>)
 8017798:	400a      	ands	r2, r1
 801779a:	801a      	strh	r2, [r3, #0]
 801779c:	687a      	ldr	r2, [r7, #4]
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	18d3      	adds	r3, r2, r3
 80177a6:	183a      	adds	r2, r7, r0
 80177a8:	8812      	ldrh	r2, [r2, #0]
 80177aa:	495b      	ldr	r1, [pc, #364]	@ (8017918 <USB_DeactivateEndpoint+0x374>)
 80177ac:	430a      	orrs	r2, r1
 80177ae:	b292      	uxth	r2, r2
 80177b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80177b2:	687a      	ldr	r2, [r7, #4]
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	781b      	ldrb	r3, [r3, #0]
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	18d3      	adds	r3, r2, r3
 80177bc:	881b      	ldrh	r3, [r3, #0]
 80177be:	b29a      	uxth	r2, r3
 80177c0:	2014      	movs	r0, #20
 80177c2:	183b      	adds	r3, r7, r0
 80177c4:	4953      	ldr	r1, [pc, #332]	@ (8017914 <USB_DeactivateEndpoint+0x370>)
 80177c6:	400a      	ands	r2, r1
 80177c8:	801a      	strh	r2, [r3, #0]
 80177ca:	687a      	ldr	r2, [r7, #4]
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	009b      	lsls	r3, r3, #2
 80177d2:	18d3      	adds	r3, r2, r3
 80177d4:	183a      	adds	r2, r7, r0
 80177d6:	8812      	ldrh	r2, [r2, #0]
 80177d8:	494f      	ldr	r1, [pc, #316]	@ (8017918 <USB_DeactivateEndpoint+0x374>)
 80177da:	430a      	orrs	r2, r1
 80177dc:	b292      	uxth	r2, r2
 80177de:	801a      	strh	r2, [r3, #0]
 80177e0:	e08f      	b.n	8017902 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80177e2:	687a      	ldr	r2, [r7, #4]
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	18d2      	adds	r2, r2, r3
 80177ec:	212e      	movs	r1, #46	@ 0x2e
 80177ee:	187b      	adds	r3, r7, r1
 80177f0:	8812      	ldrh	r2, [r2, #0]
 80177f2:	801a      	strh	r2, [r3, #0]
 80177f4:	187b      	adds	r3, r7, r1
 80177f6:	881a      	ldrh	r2, [r3, #0]
 80177f8:	2380      	movs	r3, #128	@ 0x80
 80177fa:	01db      	lsls	r3, r3, #7
 80177fc:	4013      	ands	r3, r2
 80177fe:	d016      	beq.n	801782e <USB_DeactivateEndpoint+0x28a>
 8017800:	687a      	ldr	r2, [r7, #4]
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	781b      	ldrb	r3, [r3, #0]
 8017806:	009b      	lsls	r3, r3, #2
 8017808:	18d3      	adds	r3, r2, r3
 801780a:	881b      	ldrh	r3, [r3, #0]
 801780c:	b29a      	uxth	r2, r3
 801780e:	202c      	movs	r0, #44	@ 0x2c
 8017810:	183b      	adds	r3, r7, r0
 8017812:	493e      	ldr	r1, [pc, #248]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 8017814:	400a      	ands	r2, r1
 8017816:	801a      	strh	r2, [r3, #0]
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	781b      	ldrb	r3, [r3, #0]
 801781e:	009b      	lsls	r3, r3, #2
 8017820:	18d3      	adds	r3, r2, r3
 8017822:	183a      	adds	r2, r7, r0
 8017824:	8812      	ldrh	r2, [r2, #0]
 8017826:	493d      	ldr	r1, [pc, #244]	@ (801791c <USB_DeactivateEndpoint+0x378>)
 8017828:	430a      	orrs	r2, r1
 801782a:	b292      	uxth	r2, r2
 801782c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	009b      	lsls	r3, r3, #2
 8017836:	18d2      	adds	r2, r2, r3
 8017838:	212a      	movs	r1, #42	@ 0x2a
 801783a:	187b      	adds	r3, r7, r1
 801783c:	8812      	ldrh	r2, [r2, #0]
 801783e:	801a      	strh	r2, [r3, #0]
 8017840:	187b      	adds	r3, r7, r1
 8017842:	881b      	ldrh	r3, [r3, #0]
 8017844:	2240      	movs	r2, #64	@ 0x40
 8017846:	4013      	ands	r3, r2
 8017848:	d016      	beq.n	8017878 <USB_DeactivateEndpoint+0x2d4>
 801784a:	687a      	ldr	r2, [r7, #4]
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	009b      	lsls	r3, r3, #2
 8017852:	18d3      	adds	r3, r2, r3
 8017854:	881b      	ldrh	r3, [r3, #0]
 8017856:	b29a      	uxth	r2, r3
 8017858:	2028      	movs	r0, #40	@ 0x28
 801785a:	183b      	adds	r3, r7, r0
 801785c:	492b      	ldr	r1, [pc, #172]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 801785e:	400a      	ands	r2, r1
 8017860:	801a      	strh	r2, [r3, #0]
 8017862:	687a      	ldr	r2, [r7, #4]
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	009b      	lsls	r3, r3, #2
 801786a:	18d3      	adds	r3, r2, r3
 801786c:	183a      	adds	r2, r7, r0
 801786e:	8812      	ldrh	r2, [r2, #0]
 8017870:	4927      	ldr	r1, [pc, #156]	@ (8017910 <USB_DeactivateEndpoint+0x36c>)
 8017872:	430a      	orrs	r2, r1
 8017874:	b292      	uxth	r2, r2
 8017876:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8017878:	687a      	ldr	r2, [r7, #4]
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	781b      	ldrb	r3, [r3, #0]
 801787e:	009b      	lsls	r3, r3, #2
 8017880:	18d3      	adds	r3, r2, r3
 8017882:	881b      	ldrh	r3, [r3, #0]
 8017884:	b29a      	uxth	r2, r3
 8017886:	2026      	movs	r0, #38	@ 0x26
 8017888:	183b      	adds	r3, r7, r0
 801788a:	4920      	ldr	r1, [pc, #128]	@ (801790c <USB_DeactivateEndpoint+0x368>)
 801788c:	400a      	ands	r2, r1
 801788e:	801a      	strh	r2, [r3, #0]
 8017890:	687a      	ldr	r2, [r7, #4]
 8017892:	683b      	ldr	r3, [r7, #0]
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	009b      	lsls	r3, r3, #2
 8017898:	18d3      	adds	r3, r2, r3
 801789a:	183a      	adds	r2, r7, r0
 801789c:	8812      	ldrh	r2, [r2, #0]
 801789e:	491f      	ldr	r1, [pc, #124]	@ (801791c <USB_DeactivateEndpoint+0x378>)
 80178a0:	430a      	orrs	r2, r1
 80178a2:	b292      	uxth	r2, r2
 80178a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80178a6:	687a      	ldr	r2, [r7, #4]
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	781b      	ldrb	r3, [r3, #0]
 80178ac:	009b      	lsls	r3, r3, #2
 80178ae:	18d3      	adds	r3, r2, r3
 80178b0:	881b      	ldrh	r3, [r3, #0]
 80178b2:	b29a      	uxth	r2, r3
 80178b4:	2024      	movs	r0, #36	@ 0x24
 80178b6:	183b      	adds	r3, r7, r0
 80178b8:	4916      	ldr	r1, [pc, #88]	@ (8017914 <USB_DeactivateEndpoint+0x370>)
 80178ba:	400a      	ands	r2, r1
 80178bc:	801a      	strh	r2, [r3, #0]
 80178be:	687a      	ldr	r2, [r7, #4]
 80178c0:	683b      	ldr	r3, [r7, #0]
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	009b      	lsls	r3, r3, #2
 80178c6:	18d3      	adds	r3, r2, r3
 80178c8:	183a      	adds	r2, r7, r0
 80178ca:	8812      	ldrh	r2, [r2, #0]
 80178cc:	4912      	ldr	r1, [pc, #72]	@ (8017918 <USB_DeactivateEndpoint+0x374>)
 80178ce:	430a      	orrs	r2, r1
 80178d0:	b292      	uxth	r2, r2
 80178d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80178d4:	687a      	ldr	r2, [r7, #4]
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	009b      	lsls	r3, r3, #2
 80178dc:	18d3      	adds	r3, r2, r3
 80178de:	881b      	ldrh	r3, [r3, #0]
 80178e0:	b29a      	uxth	r2, r3
 80178e2:	2022      	movs	r0, #34	@ 0x22
 80178e4:	183b      	adds	r3, r7, r0
 80178e6:	490e      	ldr	r1, [pc, #56]	@ (8017920 <USB_DeactivateEndpoint+0x37c>)
 80178e8:	400a      	ands	r2, r1
 80178ea:	801a      	strh	r2, [r3, #0]
 80178ec:	687a      	ldr	r2, [r7, #4]
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	009b      	lsls	r3, r3, #2
 80178f4:	18d3      	adds	r3, r2, r3
 80178f6:	183a      	adds	r2, r7, r0
 80178f8:	8812      	ldrh	r2, [r2, #0]
 80178fa:	4907      	ldr	r1, [pc, #28]	@ (8017918 <USB_DeactivateEndpoint+0x374>)
 80178fc:	430a      	orrs	r2, r1
 80178fe:	b292      	uxth	r2, r2
 8017900:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8017902:	2300      	movs	r3, #0
}
 8017904:	0018      	movs	r0, r3
 8017906:	46bd      	mov	sp, r7
 8017908:	b00c      	add	sp, #48	@ 0x30
 801790a:	bd80      	pop	{r7, pc}
 801790c:	ffff8f8f 	.word	0xffff8f8f
 8017910:	ffff80c0 	.word	0xffff80c0
 8017914:	ffff8fbf 	.word	0xffff8fbf
 8017918:	ffff8080 	.word	0xffff8080
 801791c:	ffffc080 	.word	0xffffc080
 8017920:	ffffbf8f 	.word	0xffffbf8f

08017924 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017924:	b590      	push	{r4, r7, lr}
 8017926:	b0c3      	sub	sp, #268	@ 0x10c
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	785b      	ldrb	r3, [r3, #1]
 8017932:	2b01      	cmp	r3, #1
 8017934:	d001      	beq.n	801793a <USB_EPStartXfer+0x16>
 8017936:	f000 fd2d 	bl	8018394 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801793a:	683b      	ldr	r3, [r7, #0]
 801793c:	699a      	ldr	r2, [r3, #24]
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	691b      	ldr	r3, [r3, #16]
 8017942:	429a      	cmp	r2, r3
 8017944:	d905      	bls.n	8017952 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	691b      	ldr	r3, [r3, #16]
 801794a:	1d7a      	adds	r2, r7, #5
 801794c:	32ff      	adds	r2, #255	@ 0xff
 801794e:	6013      	str	r3, [r2, #0]
 8017950:	e004      	b.n	801795c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	699b      	ldr	r3, [r3, #24]
 8017956:	1d7a      	adds	r2, r7, #5
 8017958:	32ff      	adds	r2, #255	@ 0xff
 801795a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	7b1b      	ldrb	r3, [r3, #12]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d125      	bne.n	80179b0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8017964:	683b      	ldr	r3, [r7, #0]
 8017966:	6959      	ldr	r1, [r3, #20]
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	88da      	ldrh	r2, [r3, #6]
 801796c:	1d7b      	adds	r3, r7, #5
 801796e:	33ff      	adds	r3, #255	@ 0xff
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	b29b      	uxth	r3, r3
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f001 fa47 	bl	8018e08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	613b      	str	r3, [r7, #16]
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	2250      	movs	r2, #80	@ 0x50
 8017982:	5a9b      	ldrh	r3, [r3, r2]
 8017984:	b29b      	uxth	r3, r3
 8017986:	001a      	movs	r2, r3
 8017988:	693b      	ldr	r3, [r7, #16]
 801798a:	189b      	adds	r3, r3, r2
 801798c:	613b      	str	r3, [r7, #16]
 801798e:	683b      	ldr	r3, [r7, #0]
 8017990:	781b      	ldrb	r3, [r3, #0]
 8017992:	00da      	lsls	r2, r3, #3
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	18d3      	adds	r3, r2, r3
 8017998:	4ad7      	ldr	r2, [pc, #860]	@ (8017cf8 <USB_EPStartXfer+0x3d4>)
 801799a:	4694      	mov	ip, r2
 801799c:	4463      	add	r3, ip
 801799e:	60fb      	str	r3, [r7, #12]
 80179a0:	1d7b      	adds	r3, r7, #5
 80179a2:	33ff      	adds	r3, #255	@ 0xff
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	b29a      	uxth	r2, r3
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	801a      	strh	r2, [r3, #0]
 80179ac:	f000 fccd 	bl	801834a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	78db      	ldrb	r3, [r3, #3]
 80179b4:	2b02      	cmp	r3, #2
 80179b6:	d000      	beq.n	80179ba <USB_EPStartXfer+0x96>
 80179b8:	e362      	b.n	8018080 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	6a1a      	ldr	r2, [r3, #32]
 80179be:	683b      	ldr	r3, [r7, #0]
 80179c0:	691b      	ldr	r3, [r3, #16]
 80179c2:	429a      	cmp	r2, r3
 80179c4:	d800      	bhi.n	80179c8 <USB_EPStartXfer+0xa4>
 80179c6:	e309      	b.n	8017fdc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	683b      	ldr	r3, [r7, #0]
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	009b      	lsls	r3, r3, #2
 80179d0:	18d3      	adds	r3, r2, r3
 80179d2:	881b      	ldrh	r3, [r3, #0]
 80179d4:	b29a      	uxth	r2, r3
 80179d6:	2056      	movs	r0, #86	@ 0x56
 80179d8:	183b      	adds	r3, r7, r0
 80179da:	49c8      	ldr	r1, [pc, #800]	@ (8017cfc <USB_EPStartXfer+0x3d8>)
 80179dc:	400a      	ands	r2, r1
 80179de:	801a      	strh	r2, [r3, #0]
 80179e0:	687a      	ldr	r2, [r7, #4]
 80179e2:	683b      	ldr	r3, [r7, #0]
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	009b      	lsls	r3, r3, #2
 80179e8:	18d3      	adds	r3, r2, r3
 80179ea:	183a      	adds	r2, r7, r0
 80179ec:	8812      	ldrh	r2, [r2, #0]
 80179ee:	49c4      	ldr	r1, [pc, #784]	@ (8017d00 <USB_EPStartXfer+0x3dc>)
 80179f0:	430a      	orrs	r2, r1
 80179f2:	b292      	uxth	r2, r2
 80179f4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	6a1a      	ldr	r2, [r3, #32]
 80179fa:	1d7b      	adds	r3, r7, #5
 80179fc:	33ff      	adds	r3, #255	@ 0xff
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	1ad2      	subs	r2, r2, r3
 8017a02:	683b      	ldr	r3, [r7, #0]
 8017a04:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8017a06:	687a      	ldr	r2, [r7, #4]
 8017a08:	683b      	ldr	r3, [r7, #0]
 8017a0a:	781b      	ldrb	r3, [r3, #0]
 8017a0c:	009b      	lsls	r3, r3, #2
 8017a0e:	18d3      	adds	r3, r2, r3
 8017a10:	881b      	ldrh	r3, [r3, #0]
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	001a      	movs	r2, r3
 8017a16:	2340      	movs	r3, #64	@ 0x40
 8017a18:	4013      	ands	r3, r2
 8017a1a:	d100      	bne.n	8017a1e <USB_EPStartXfer+0xfa>
 8017a1c:	e176      	b.n	8017d0c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	785b      	ldrb	r3, [r3, #1]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d000      	beq.n	8017a2c <USB_EPStartXfer+0x108>
 8017a2a:	e074      	b.n	8017b16 <USB_EPStartXfer+0x1f2>
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	2250      	movs	r2, #80	@ 0x50
 8017a34:	5a9b      	ldrh	r3, [r3, r2]
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	001a      	movs	r2, r3
 8017a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a3c:	189b      	adds	r3, r3, r2
 8017a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a40:	683b      	ldr	r3, [r7, #0]
 8017a42:	781b      	ldrb	r3, [r3, #0]
 8017a44:	00da      	lsls	r2, r3, #3
 8017a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a48:	18d3      	adds	r3, r2, r3
 8017a4a:	4aae      	ldr	r2, [pc, #696]	@ (8017d04 <USB_EPStartXfer+0x3e0>)
 8017a4c:	4694      	mov	ip, r2
 8017a4e:	4463      	add	r3, ip
 8017a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a54:	881b      	ldrh	r3, [r3, #0]
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	059b      	lsls	r3, r3, #22
 8017a5a:	0d9b      	lsrs	r3, r3, #22
 8017a5c:	b29a      	uxth	r2, r3
 8017a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a60:	801a      	strh	r2, [r3, #0]
 8017a62:	1d7b      	adds	r3, r7, #5
 8017a64:	33ff      	adds	r3, #255	@ 0xff
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	2b3e      	cmp	r3, #62	@ 0x3e
 8017a6a:	d924      	bls.n	8017ab6 <USB_EPStartXfer+0x192>
 8017a6c:	1d7b      	adds	r3, r7, #5
 8017a6e:	33ff      	adds	r3, #255	@ 0xff
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	095b      	lsrs	r3, r3, #5
 8017a74:	1c7a      	adds	r2, r7, #1
 8017a76:	32ff      	adds	r2, #255	@ 0xff
 8017a78:	6013      	str	r3, [r2, #0]
 8017a7a:	1d7b      	adds	r3, r7, #5
 8017a7c:	33ff      	adds	r3, #255	@ 0xff
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	221f      	movs	r2, #31
 8017a82:	4013      	ands	r3, r2
 8017a84:	d106      	bne.n	8017a94 <USB_EPStartXfer+0x170>
 8017a86:	1c7b      	adds	r3, r7, #1
 8017a88:	33ff      	adds	r3, #255	@ 0xff
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	3b01      	subs	r3, #1
 8017a8e:	1c7a      	adds	r2, r7, #1
 8017a90:	32ff      	adds	r2, #255	@ 0xff
 8017a92:	6013      	str	r3, [r2, #0]
 8017a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a96:	881b      	ldrh	r3, [r3, #0]
 8017a98:	b29a      	uxth	r2, r3
 8017a9a:	1c7b      	adds	r3, r7, #1
 8017a9c:	33ff      	adds	r3, #255	@ 0xff
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	029b      	lsls	r3, r3, #10
 8017aa4:	b29b      	uxth	r3, r3
 8017aa6:	4313      	orrs	r3, r2
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	4a97      	ldr	r2, [pc, #604]	@ (8017d08 <USB_EPStartXfer+0x3e4>)
 8017aac:	4313      	orrs	r3, r2
 8017aae:	b29a      	uxth	r2, r3
 8017ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ab2:	801a      	strh	r2, [r3, #0]
 8017ab4:	e04a      	b.n	8017b4c <USB_EPStartXfer+0x228>
 8017ab6:	1d7b      	adds	r3, r7, #5
 8017ab8:	33ff      	adds	r3, #255	@ 0xff
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d108      	bne.n	8017ad2 <USB_EPStartXfer+0x1ae>
 8017ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ac2:	881b      	ldrh	r3, [r3, #0]
 8017ac4:	b29b      	uxth	r3, r3
 8017ac6:	4a90      	ldr	r2, [pc, #576]	@ (8017d08 <USB_EPStartXfer+0x3e4>)
 8017ac8:	4313      	orrs	r3, r2
 8017aca:	b29a      	uxth	r2, r3
 8017acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ace:	801a      	strh	r2, [r3, #0]
 8017ad0:	e03c      	b.n	8017b4c <USB_EPStartXfer+0x228>
 8017ad2:	1d7b      	adds	r3, r7, #5
 8017ad4:	33ff      	adds	r3, #255	@ 0xff
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	085b      	lsrs	r3, r3, #1
 8017ada:	1c7a      	adds	r2, r7, #1
 8017adc:	32ff      	adds	r2, #255	@ 0xff
 8017ade:	6013      	str	r3, [r2, #0]
 8017ae0:	1d7b      	adds	r3, r7, #5
 8017ae2:	33ff      	adds	r3, #255	@ 0xff
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	4013      	ands	r3, r2
 8017aea:	d006      	beq.n	8017afa <USB_EPStartXfer+0x1d6>
 8017aec:	1c7b      	adds	r3, r7, #1
 8017aee:	33ff      	adds	r3, #255	@ 0xff
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	3301      	adds	r3, #1
 8017af4:	1c7a      	adds	r2, r7, #1
 8017af6:	32ff      	adds	r2, #255	@ 0xff
 8017af8:	6013      	str	r3, [r2, #0]
 8017afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017afc:	881b      	ldrh	r3, [r3, #0]
 8017afe:	b29a      	uxth	r2, r3
 8017b00:	1c7b      	adds	r3, r7, #1
 8017b02:	33ff      	adds	r3, #255	@ 0xff
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	029b      	lsls	r3, r3, #10
 8017b0a:	b29b      	uxth	r3, r3
 8017b0c:	4313      	orrs	r3, r2
 8017b0e:	b29a      	uxth	r2, r3
 8017b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b12:	801a      	strh	r2, [r3, #0]
 8017b14:	e01a      	b.n	8017b4c <USB_EPStartXfer+0x228>
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	785b      	ldrb	r3, [r3, #1]
 8017b1a:	2b01      	cmp	r3, #1
 8017b1c:	d116      	bne.n	8017b4c <USB_EPStartXfer+0x228>
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2250      	movs	r2, #80	@ 0x50
 8017b22:	5a9b      	ldrh	r3, [r3, r2]
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	001a      	movs	r2, r3
 8017b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b2a:	189b      	adds	r3, r3, r2
 8017b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8017b2e:	683b      	ldr	r3, [r7, #0]
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	00da      	lsls	r2, r3, #3
 8017b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b36:	18d3      	adds	r3, r2, r3
 8017b38:	4a72      	ldr	r2, [pc, #456]	@ (8017d04 <USB_EPStartXfer+0x3e0>)
 8017b3a:	4694      	mov	ip, r2
 8017b3c:	4463      	add	r3, ip
 8017b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017b40:	1d7b      	adds	r3, r7, #5
 8017b42:	33ff      	adds	r3, #255	@ 0xff
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	b29a      	uxth	r2, r3
 8017b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8017b4c:	2076      	movs	r0, #118	@ 0x76
 8017b4e:	183b      	adds	r3, r7, r0
 8017b50:	683a      	ldr	r2, [r7, #0]
 8017b52:	8952      	ldrh	r2, [r2, #10]
 8017b54:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	6959      	ldr	r1, [r3, #20]
 8017b5a:	1d7b      	adds	r3, r7, #5
 8017b5c:	33ff      	adds	r3, #255	@ 0xff
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	b29c      	uxth	r4, r3
 8017b62:	183b      	adds	r3, r7, r0
 8017b64:	881a      	ldrh	r2, [r3, #0]
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	0023      	movs	r3, r4
 8017b6a:	f001 f94d 	bl	8018e08 <USB_WritePMA>
            ep->xfer_buff += len;
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	695a      	ldr	r2, [r3, #20]
 8017b72:	1d7b      	adds	r3, r7, #5
 8017b74:	33ff      	adds	r3, #255	@ 0xff
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	18d2      	adds	r2, r2, r3
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8017b7e:	683b      	ldr	r3, [r7, #0]
 8017b80:	6a1a      	ldr	r2, [r3, #32]
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	691b      	ldr	r3, [r3, #16]
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d908      	bls.n	8017b9c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	6a1a      	ldr	r2, [r3, #32]
 8017b8e:	1d7b      	adds	r3, r7, #5
 8017b90:	33ff      	adds	r3, #255	@ 0xff
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	1ad2      	subs	r2, r2, r3
 8017b96:	683b      	ldr	r3, [r7, #0]
 8017b98:	621a      	str	r2, [r3, #32]
 8017b9a:	e007      	b.n	8017bac <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	6a1b      	ldr	r3, [r3, #32]
 8017ba0:	1d7a      	adds	r2, r7, #5
 8017ba2:	32ff      	adds	r2, #255	@ 0xff
 8017ba4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8017ba6:	683b      	ldr	r3, [r7, #0]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	785b      	ldrb	r3, [r3, #1]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d000      	beq.n	8017bb6 <USB_EPStartXfer+0x292>
 8017bb4:	e070      	b.n	8017c98 <USB_EPStartXfer+0x374>
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	61bb      	str	r3, [r7, #24]
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	2250      	movs	r2, #80	@ 0x50
 8017bbe:	5a9b      	ldrh	r3, [r3, r2]
 8017bc0:	b29b      	uxth	r3, r3
 8017bc2:	001a      	movs	r2, r3
 8017bc4:	69bb      	ldr	r3, [r7, #24]
 8017bc6:	189b      	adds	r3, r3, r2
 8017bc8:	61bb      	str	r3, [r7, #24]
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	00da      	lsls	r2, r3, #3
 8017bd0:	69bb      	ldr	r3, [r7, #24]
 8017bd2:	18d3      	adds	r3, r2, r3
 8017bd4:	4a48      	ldr	r2, [pc, #288]	@ (8017cf8 <USB_EPStartXfer+0x3d4>)
 8017bd6:	4694      	mov	ip, r2
 8017bd8:	4463      	add	r3, ip
 8017bda:	617b      	str	r3, [r7, #20]
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	881b      	ldrh	r3, [r3, #0]
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	059b      	lsls	r3, r3, #22
 8017be4:	0d9b      	lsrs	r3, r3, #22
 8017be6:	b29a      	uxth	r2, r3
 8017be8:	697b      	ldr	r3, [r7, #20]
 8017bea:	801a      	strh	r2, [r3, #0]
 8017bec:	1d7b      	adds	r3, r7, #5
 8017bee:	33ff      	adds	r3, #255	@ 0xff
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8017bf4:	d922      	bls.n	8017c3c <USB_EPStartXfer+0x318>
 8017bf6:	1d7b      	adds	r3, r7, #5
 8017bf8:	33ff      	adds	r3, #255	@ 0xff
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	095b      	lsrs	r3, r3, #5
 8017bfe:	21fc      	movs	r1, #252	@ 0xfc
 8017c00:	187a      	adds	r2, r7, r1
 8017c02:	6013      	str	r3, [r2, #0]
 8017c04:	1d7b      	adds	r3, r7, #5
 8017c06:	33ff      	adds	r3, #255	@ 0xff
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	221f      	movs	r2, #31
 8017c0c:	4013      	ands	r3, r2
 8017c0e:	d104      	bne.n	8017c1a <USB_EPStartXfer+0x2f6>
 8017c10:	187b      	adds	r3, r7, r1
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	3b01      	subs	r3, #1
 8017c16:	187a      	adds	r2, r7, r1
 8017c18:	6013      	str	r3, [r2, #0]
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	881b      	ldrh	r3, [r3, #0]
 8017c1e:	b29a      	uxth	r2, r3
 8017c20:	23fc      	movs	r3, #252	@ 0xfc
 8017c22:	18fb      	adds	r3, r7, r3
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	b29b      	uxth	r3, r3
 8017c28:	029b      	lsls	r3, r3, #10
 8017c2a:	b29b      	uxth	r3, r3
 8017c2c:	4313      	orrs	r3, r2
 8017c2e:	b29b      	uxth	r3, r3
 8017c30:	4a35      	ldr	r2, [pc, #212]	@ (8017d08 <USB_EPStartXfer+0x3e4>)
 8017c32:	4313      	orrs	r3, r2
 8017c34:	b29a      	uxth	r2, r3
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	801a      	strh	r2, [r3, #0]
 8017c3a:	e04a      	b.n	8017cd2 <USB_EPStartXfer+0x3ae>
 8017c3c:	1d7b      	adds	r3, r7, #5
 8017c3e:	33ff      	adds	r3, #255	@ 0xff
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d108      	bne.n	8017c58 <USB_EPStartXfer+0x334>
 8017c46:	697b      	ldr	r3, [r7, #20]
 8017c48:	881b      	ldrh	r3, [r3, #0]
 8017c4a:	b29b      	uxth	r3, r3
 8017c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8017d08 <USB_EPStartXfer+0x3e4>)
 8017c4e:	4313      	orrs	r3, r2
 8017c50:	b29a      	uxth	r2, r3
 8017c52:	697b      	ldr	r3, [r7, #20]
 8017c54:	801a      	strh	r2, [r3, #0]
 8017c56:	e03c      	b.n	8017cd2 <USB_EPStartXfer+0x3ae>
 8017c58:	1d7b      	adds	r3, r7, #5
 8017c5a:	33ff      	adds	r3, #255	@ 0xff
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	085b      	lsrs	r3, r3, #1
 8017c60:	21fc      	movs	r1, #252	@ 0xfc
 8017c62:	187a      	adds	r2, r7, r1
 8017c64:	6013      	str	r3, [r2, #0]
 8017c66:	1d7b      	adds	r3, r7, #5
 8017c68:	33ff      	adds	r3, #255	@ 0xff
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	2201      	movs	r2, #1
 8017c6e:	4013      	ands	r3, r2
 8017c70:	d004      	beq.n	8017c7c <USB_EPStartXfer+0x358>
 8017c72:	187b      	adds	r3, r7, r1
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	3301      	adds	r3, #1
 8017c78:	187a      	adds	r2, r7, r1
 8017c7a:	6013      	str	r3, [r2, #0]
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	881b      	ldrh	r3, [r3, #0]
 8017c80:	b29a      	uxth	r2, r3
 8017c82:	23fc      	movs	r3, #252	@ 0xfc
 8017c84:	18fb      	adds	r3, r7, r3
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	b29b      	uxth	r3, r3
 8017c8a:	029b      	lsls	r3, r3, #10
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	4313      	orrs	r3, r2
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	697b      	ldr	r3, [r7, #20]
 8017c94:	801a      	strh	r2, [r3, #0]
 8017c96:	e01c      	b.n	8017cd2 <USB_EPStartXfer+0x3ae>
 8017c98:	683b      	ldr	r3, [r7, #0]
 8017c9a:	785b      	ldrb	r3, [r3, #1]
 8017c9c:	2b01      	cmp	r3, #1
 8017c9e:	d118      	bne.n	8017cd2 <USB_EPStartXfer+0x3ae>
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	623b      	str	r3, [r7, #32]
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2250      	movs	r2, #80	@ 0x50
 8017ca8:	5a9b      	ldrh	r3, [r3, r2]
 8017caa:	b29b      	uxth	r3, r3
 8017cac:	001a      	movs	r2, r3
 8017cae:	6a3b      	ldr	r3, [r7, #32]
 8017cb0:	189b      	adds	r3, r3, r2
 8017cb2:	623b      	str	r3, [r7, #32]
 8017cb4:	683b      	ldr	r3, [r7, #0]
 8017cb6:	781b      	ldrb	r3, [r3, #0]
 8017cb8:	00da      	lsls	r2, r3, #3
 8017cba:	6a3b      	ldr	r3, [r7, #32]
 8017cbc:	18d3      	adds	r3, r2, r3
 8017cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8017cf8 <USB_EPStartXfer+0x3d4>)
 8017cc0:	4694      	mov	ip, r2
 8017cc2:	4463      	add	r3, ip
 8017cc4:	61fb      	str	r3, [r7, #28]
 8017cc6:	1d7b      	adds	r3, r7, #5
 8017cc8:	33ff      	adds	r3, #255	@ 0xff
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	b29a      	uxth	r2, r3
 8017cce:	69fb      	ldr	r3, [r7, #28]
 8017cd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8017cd2:	2076      	movs	r0, #118	@ 0x76
 8017cd4:	183b      	adds	r3, r7, r0
 8017cd6:	683a      	ldr	r2, [r7, #0]
 8017cd8:	8912      	ldrh	r2, [r2, #8]
 8017cda:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	6959      	ldr	r1, [r3, #20]
 8017ce0:	1d7b      	adds	r3, r7, #5
 8017ce2:	33ff      	adds	r3, #255	@ 0xff
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	b29c      	uxth	r4, r3
 8017ce8:	183b      	adds	r3, r7, r0
 8017cea:	881a      	ldrh	r2, [r3, #0]
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	0023      	movs	r3, r4
 8017cf0:	f001 f88a 	bl	8018e08 <USB_WritePMA>
 8017cf4:	e329      	b.n	801834a <USB_EPStartXfer+0xa26>
 8017cf6:	46c0      	nop			@ (mov r8, r8)
 8017cf8:	00000402 	.word	0x00000402
 8017cfc:	ffff8f8f 	.word	0xffff8f8f
 8017d00:	ffff8180 	.word	0xffff8180
 8017d04:	00000406 	.word	0x00000406
 8017d08:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	785b      	ldrb	r3, [r3, #1]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d000      	beq.n	8017d16 <USB_EPStartXfer+0x3f2>
 8017d14:	e070      	b.n	8017df8 <USB_EPStartXfer+0x4d4>
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2250      	movs	r2, #80	@ 0x50
 8017d1e:	5a9b      	ldrh	r3, [r3, r2]
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	001a      	movs	r2, r3
 8017d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017d26:	189b      	adds	r3, r3, r2
 8017d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	781b      	ldrb	r3, [r3, #0]
 8017d2e:	00da      	lsls	r2, r3, #3
 8017d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017d32:	18d3      	adds	r3, r2, r3
 8017d34:	4acd      	ldr	r2, [pc, #820]	@ (801806c <USB_EPStartXfer+0x748>)
 8017d36:	4694      	mov	ip, r2
 8017d38:	4463      	add	r3, ip
 8017d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8017d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d3e:	881b      	ldrh	r3, [r3, #0]
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	059b      	lsls	r3, r3, #22
 8017d44:	0d9b      	lsrs	r3, r3, #22
 8017d46:	b29a      	uxth	r2, r3
 8017d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d4a:	801a      	strh	r2, [r3, #0]
 8017d4c:	1d7b      	adds	r3, r7, #5
 8017d4e:	33ff      	adds	r3, #255	@ 0xff
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	2b3e      	cmp	r3, #62	@ 0x3e
 8017d54:	d922      	bls.n	8017d9c <USB_EPStartXfer+0x478>
 8017d56:	1d7b      	adds	r3, r7, #5
 8017d58:	33ff      	adds	r3, #255	@ 0xff
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	095b      	lsrs	r3, r3, #5
 8017d5e:	21f8      	movs	r1, #248	@ 0xf8
 8017d60:	187a      	adds	r2, r7, r1
 8017d62:	6013      	str	r3, [r2, #0]
 8017d64:	1d7b      	adds	r3, r7, #5
 8017d66:	33ff      	adds	r3, #255	@ 0xff
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	221f      	movs	r2, #31
 8017d6c:	4013      	ands	r3, r2
 8017d6e:	d104      	bne.n	8017d7a <USB_EPStartXfer+0x456>
 8017d70:	187b      	adds	r3, r7, r1
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	3b01      	subs	r3, #1
 8017d76:	187a      	adds	r2, r7, r1
 8017d78:	6013      	str	r3, [r2, #0]
 8017d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d7c:	881b      	ldrh	r3, [r3, #0]
 8017d7e:	b29a      	uxth	r2, r3
 8017d80:	23f8      	movs	r3, #248	@ 0xf8
 8017d82:	18fb      	adds	r3, r7, r3
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	b29b      	uxth	r3, r3
 8017d88:	029b      	lsls	r3, r3, #10
 8017d8a:	b29b      	uxth	r3, r3
 8017d8c:	4313      	orrs	r3, r2
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	4ab7      	ldr	r2, [pc, #732]	@ (8018070 <USB_EPStartXfer+0x74c>)
 8017d92:	4313      	orrs	r3, r2
 8017d94:	b29a      	uxth	r2, r3
 8017d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d98:	801a      	strh	r2, [r3, #0]
 8017d9a:	e04a      	b.n	8017e32 <USB_EPStartXfer+0x50e>
 8017d9c:	1d7b      	adds	r3, r7, #5
 8017d9e:	33ff      	adds	r3, #255	@ 0xff
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d108      	bne.n	8017db8 <USB_EPStartXfer+0x494>
 8017da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017da8:	881b      	ldrh	r3, [r3, #0]
 8017daa:	b29b      	uxth	r3, r3
 8017dac:	4ab0      	ldr	r2, [pc, #704]	@ (8018070 <USB_EPStartXfer+0x74c>)
 8017dae:	4313      	orrs	r3, r2
 8017db0:	b29a      	uxth	r2, r3
 8017db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017db4:	801a      	strh	r2, [r3, #0]
 8017db6:	e03c      	b.n	8017e32 <USB_EPStartXfer+0x50e>
 8017db8:	1d7b      	adds	r3, r7, #5
 8017dba:	33ff      	adds	r3, #255	@ 0xff
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	085b      	lsrs	r3, r3, #1
 8017dc0:	21f8      	movs	r1, #248	@ 0xf8
 8017dc2:	187a      	adds	r2, r7, r1
 8017dc4:	6013      	str	r3, [r2, #0]
 8017dc6:	1d7b      	adds	r3, r7, #5
 8017dc8:	33ff      	adds	r3, #255	@ 0xff
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2201      	movs	r2, #1
 8017dce:	4013      	ands	r3, r2
 8017dd0:	d004      	beq.n	8017ddc <USB_EPStartXfer+0x4b8>
 8017dd2:	187b      	adds	r3, r7, r1
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	187a      	adds	r2, r7, r1
 8017dda:	6013      	str	r3, [r2, #0]
 8017ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	b29a      	uxth	r2, r3
 8017de2:	23f8      	movs	r3, #248	@ 0xf8
 8017de4:	18fb      	adds	r3, r7, r3
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	029b      	lsls	r3, r3, #10
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	4313      	orrs	r3, r2
 8017df0:	b29a      	uxth	r2, r3
 8017df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017df4:	801a      	strh	r2, [r3, #0]
 8017df6:	e01c      	b.n	8017e32 <USB_EPStartXfer+0x50e>
 8017df8:	683b      	ldr	r3, [r7, #0]
 8017dfa:	785b      	ldrb	r3, [r3, #1]
 8017dfc:	2b01      	cmp	r3, #1
 8017dfe:	d118      	bne.n	8017e32 <USB_EPStartXfer+0x50e>
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	2250      	movs	r2, #80	@ 0x50
 8017e08:	5a9b      	ldrh	r3, [r3, r2]
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	001a      	movs	r2, r3
 8017e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e10:	189b      	adds	r3, r3, r2
 8017e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8017e14:	683b      	ldr	r3, [r7, #0]
 8017e16:	781b      	ldrb	r3, [r3, #0]
 8017e18:	00da      	lsls	r2, r3, #3
 8017e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e1c:	18d3      	adds	r3, r2, r3
 8017e1e:	4a93      	ldr	r2, [pc, #588]	@ (801806c <USB_EPStartXfer+0x748>)
 8017e20:	4694      	mov	ip, r2
 8017e22:	4463      	add	r3, ip
 8017e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017e26:	1d7b      	adds	r3, r7, #5
 8017e28:	33ff      	adds	r3, #255	@ 0xff
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	b29a      	uxth	r2, r3
 8017e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8017e32:	2076      	movs	r0, #118	@ 0x76
 8017e34:	183b      	adds	r3, r7, r0
 8017e36:	683a      	ldr	r2, [r7, #0]
 8017e38:	8912      	ldrh	r2, [r2, #8]
 8017e3a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	6959      	ldr	r1, [r3, #20]
 8017e40:	1d7b      	adds	r3, r7, #5
 8017e42:	33ff      	adds	r3, #255	@ 0xff
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	b29c      	uxth	r4, r3
 8017e48:	183b      	adds	r3, r7, r0
 8017e4a:	881a      	ldrh	r2, [r3, #0]
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	0023      	movs	r3, r4
 8017e50:	f000 ffda 	bl	8018e08 <USB_WritePMA>
            ep->xfer_buff += len;
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	695a      	ldr	r2, [r3, #20]
 8017e58:	1d7b      	adds	r3, r7, #5
 8017e5a:	33ff      	adds	r3, #255	@ 0xff
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	18d2      	adds	r2, r2, r3
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8017e64:	683b      	ldr	r3, [r7, #0]
 8017e66:	6a1a      	ldr	r2, [r3, #32]
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	691b      	ldr	r3, [r3, #16]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d908      	bls.n	8017e82 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	6a1a      	ldr	r2, [r3, #32]
 8017e74:	1d7b      	adds	r3, r7, #5
 8017e76:	33ff      	adds	r3, #255	@ 0xff
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	1ad2      	subs	r2, r2, r3
 8017e7c:	683b      	ldr	r3, [r7, #0]
 8017e7e:	621a      	str	r2, [r3, #32]
 8017e80:	e007      	b.n	8017e92 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	6a1b      	ldr	r3, [r3, #32]
 8017e86:	1d7a      	adds	r2, r7, #5
 8017e88:	32ff      	adds	r2, #255	@ 0xff
 8017e8a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	643b      	str	r3, [r7, #64]	@ 0x40
 8017e96:	683b      	ldr	r3, [r7, #0]
 8017e98:	785b      	ldrb	r3, [r3, #1]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d000      	beq.n	8017ea0 <USB_EPStartXfer+0x57c>
 8017e9e:	e070      	b.n	8017f82 <USB_EPStartXfer+0x65e>
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2250      	movs	r2, #80	@ 0x50
 8017ea8:	5a9b      	ldrh	r3, [r3, r2]
 8017eaa:	b29b      	uxth	r3, r3
 8017eac:	001a      	movs	r2, r3
 8017eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eb0:	189b      	adds	r3, r3, r2
 8017eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	781b      	ldrb	r3, [r3, #0]
 8017eb8:	00da      	lsls	r2, r3, #3
 8017eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ebc:	18d3      	adds	r3, r2, r3
 8017ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8018074 <USB_EPStartXfer+0x750>)
 8017ec0:	4694      	mov	ip, r2
 8017ec2:	4463      	add	r3, ip
 8017ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ec8:	881b      	ldrh	r3, [r3, #0]
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	059b      	lsls	r3, r3, #22
 8017ece:	0d9b      	lsrs	r3, r3, #22
 8017ed0:	b29a      	uxth	r2, r3
 8017ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ed4:	801a      	strh	r2, [r3, #0]
 8017ed6:	1d7b      	adds	r3, r7, #5
 8017ed8:	33ff      	adds	r3, #255	@ 0xff
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	2b3e      	cmp	r3, #62	@ 0x3e
 8017ede:	d922      	bls.n	8017f26 <USB_EPStartXfer+0x602>
 8017ee0:	1d7b      	adds	r3, r7, #5
 8017ee2:	33ff      	adds	r3, #255	@ 0xff
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	095b      	lsrs	r3, r3, #5
 8017ee8:	21f4      	movs	r1, #244	@ 0xf4
 8017eea:	187a      	adds	r2, r7, r1
 8017eec:	6013      	str	r3, [r2, #0]
 8017eee:	1d7b      	adds	r3, r7, #5
 8017ef0:	33ff      	adds	r3, #255	@ 0xff
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	221f      	movs	r2, #31
 8017ef6:	4013      	ands	r3, r2
 8017ef8:	d104      	bne.n	8017f04 <USB_EPStartXfer+0x5e0>
 8017efa:	187b      	adds	r3, r7, r1
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	3b01      	subs	r3, #1
 8017f00:	187a      	adds	r2, r7, r1
 8017f02:	6013      	str	r3, [r2, #0]
 8017f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f06:	881b      	ldrh	r3, [r3, #0]
 8017f08:	b29a      	uxth	r2, r3
 8017f0a:	23f4      	movs	r3, #244	@ 0xf4
 8017f0c:	18fb      	adds	r3, r7, r3
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	029b      	lsls	r3, r3, #10
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	4313      	orrs	r3, r2
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	4a55      	ldr	r2, [pc, #340]	@ (8018070 <USB_EPStartXfer+0x74c>)
 8017f1c:	4313      	orrs	r3, r2
 8017f1e:	b29a      	uxth	r2, r3
 8017f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f22:	801a      	strh	r2, [r3, #0]
 8017f24:	e048      	b.n	8017fb8 <USB_EPStartXfer+0x694>
 8017f26:	1d7b      	adds	r3, r7, #5
 8017f28:	33ff      	adds	r3, #255	@ 0xff
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d108      	bne.n	8017f42 <USB_EPStartXfer+0x61e>
 8017f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f32:	881b      	ldrh	r3, [r3, #0]
 8017f34:	b29b      	uxth	r3, r3
 8017f36:	4a4e      	ldr	r2, [pc, #312]	@ (8018070 <USB_EPStartXfer+0x74c>)
 8017f38:	4313      	orrs	r3, r2
 8017f3a:	b29a      	uxth	r2, r3
 8017f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f3e:	801a      	strh	r2, [r3, #0]
 8017f40:	e03a      	b.n	8017fb8 <USB_EPStartXfer+0x694>
 8017f42:	1d7b      	adds	r3, r7, #5
 8017f44:	33ff      	adds	r3, #255	@ 0xff
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	085b      	lsrs	r3, r3, #1
 8017f4a:	21f4      	movs	r1, #244	@ 0xf4
 8017f4c:	187a      	adds	r2, r7, r1
 8017f4e:	6013      	str	r3, [r2, #0]
 8017f50:	1d7b      	adds	r3, r7, #5
 8017f52:	33ff      	adds	r3, #255	@ 0xff
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	2201      	movs	r2, #1
 8017f58:	4013      	ands	r3, r2
 8017f5a:	d004      	beq.n	8017f66 <USB_EPStartXfer+0x642>
 8017f5c:	187b      	adds	r3, r7, r1
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	3301      	adds	r3, #1
 8017f62:	187a      	adds	r2, r7, r1
 8017f64:	6013      	str	r3, [r2, #0]
 8017f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f68:	881b      	ldrh	r3, [r3, #0]
 8017f6a:	b29a      	uxth	r2, r3
 8017f6c:	23f4      	movs	r3, #244	@ 0xf4
 8017f6e:	18fb      	adds	r3, r7, r3
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	029b      	lsls	r3, r3, #10
 8017f76:	b29b      	uxth	r3, r3
 8017f78:	4313      	orrs	r3, r2
 8017f7a:	b29a      	uxth	r2, r3
 8017f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f7e:	801a      	strh	r2, [r3, #0]
 8017f80:	e01a      	b.n	8017fb8 <USB_EPStartXfer+0x694>
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	785b      	ldrb	r3, [r3, #1]
 8017f86:	2b01      	cmp	r3, #1
 8017f88:	d116      	bne.n	8017fb8 <USB_EPStartXfer+0x694>
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2250      	movs	r2, #80	@ 0x50
 8017f8e:	5a9b      	ldrh	r3, [r3, r2]
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	001a      	movs	r2, r3
 8017f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017f96:	189b      	adds	r3, r3, r2
 8017f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	781b      	ldrb	r3, [r3, #0]
 8017f9e:	00da      	lsls	r2, r3, #3
 8017fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017fa2:	18d3      	adds	r3, r2, r3
 8017fa4:	4a33      	ldr	r2, [pc, #204]	@ (8018074 <USB_EPStartXfer+0x750>)
 8017fa6:	4694      	mov	ip, r2
 8017fa8:	4463      	add	r3, ip
 8017faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017fac:	1d7b      	adds	r3, r7, #5
 8017fae:	33ff      	adds	r3, #255	@ 0xff
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8017fb8:	2076      	movs	r0, #118	@ 0x76
 8017fba:	183b      	adds	r3, r7, r0
 8017fbc:	683a      	ldr	r2, [r7, #0]
 8017fbe:	8952      	ldrh	r2, [r2, #10]
 8017fc0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	6959      	ldr	r1, [r3, #20]
 8017fc6:	1d7b      	adds	r3, r7, #5
 8017fc8:	33ff      	adds	r3, #255	@ 0xff
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	b29c      	uxth	r4, r3
 8017fce:	183b      	adds	r3, r7, r0
 8017fd0:	881a      	ldrh	r2, [r3, #0]
 8017fd2:	6878      	ldr	r0, [r7, #4]
 8017fd4:	0023      	movs	r3, r4
 8017fd6:	f000 ff17 	bl	8018e08 <USB_WritePMA>
 8017fda:	e1b6      	b.n	801834a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8017fdc:	683b      	ldr	r3, [r7, #0]
 8017fde:	6a1b      	ldr	r3, [r3, #32]
 8017fe0:	1d7a      	adds	r2, r7, #5
 8017fe2:	32ff      	adds	r2, #255	@ 0xff
 8017fe4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8017fe6:	687a      	ldr	r2, [r7, #4]
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	781b      	ldrb	r3, [r3, #0]
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	18d3      	adds	r3, r2, r3
 8017ff0:	881b      	ldrh	r3, [r3, #0]
 8017ff2:	b29a      	uxth	r2, r3
 8017ff4:	2062      	movs	r0, #98	@ 0x62
 8017ff6:	183b      	adds	r3, r7, r0
 8017ff8:	491f      	ldr	r1, [pc, #124]	@ (8018078 <USB_EPStartXfer+0x754>)
 8017ffa:	400a      	ands	r2, r1
 8017ffc:	801a      	strh	r2, [r3, #0]
 8017ffe:	687a      	ldr	r2, [r7, #4]
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	781b      	ldrb	r3, [r3, #0]
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	18d3      	adds	r3, r2, r3
 8018008:	183a      	adds	r2, r7, r0
 801800a:	8812      	ldrh	r2, [r2, #0]
 801800c:	491b      	ldr	r1, [pc, #108]	@ (801807c <USB_EPStartXfer+0x758>)
 801800e:	430a      	orrs	r2, r1
 8018010:	b292      	uxth	r2, r2
 8018012:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	2250      	movs	r2, #80	@ 0x50
 801801c:	5a9b      	ldrh	r3, [r3, r2]
 801801e:	b29b      	uxth	r3, r3
 8018020:	001a      	movs	r2, r3
 8018022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018024:	189b      	adds	r3, r3, r2
 8018026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	00da      	lsls	r2, r3, #3
 801802e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018030:	18d3      	adds	r3, r2, r3
 8018032:	4a0e      	ldr	r2, [pc, #56]	@ (801806c <USB_EPStartXfer+0x748>)
 8018034:	4694      	mov	ip, r2
 8018036:	4463      	add	r3, ip
 8018038:	65bb      	str	r3, [r7, #88]	@ 0x58
 801803a:	1d7b      	adds	r3, r7, #5
 801803c:	33ff      	adds	r3, #255	@ 0xff
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	b29a      	uxth	r2, r3
 8018042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018044:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8018046:	2076      	movs	r0, #118	@ 0x76
 8018048:	183b      	adds	r3, r7, r0
 801804a:	683a      	ldr	r2, [r7, #0]
 801804c:	8912      	ldrh	r2, [r2, #8]
 801804e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018050:	683b      	ldr	r3, [r7, #0]
 8018052:	6959      	ldr	r1, [r3, #20]
 8018054:	1d7b      	adds	r3, r7, #5
 8018056:	33ff      	adds	r3, #255	@ 0xff
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	b29c      	uxth	r4, r3
 801805c:	183b      	adds	r3, r7, r0
 801805e:	881a      	ldrh	r2, [r3, #0]
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	0023      	movs	r3, r4
 8018064:	f000 fed0 	bl	8018e08 <USB_WritePMA>
 8018068:	e16f      	b.n	801834a <USB_EPStartXfer+0xa26>
 801806a:	46c0      	nop			@ (mov r8, r8)
 801806c:	00000402 	.word	0x00000402
 8018070:	ffff8000 	.word	0xffff8000
 8018074:	00000406 	.word	0x00000406
 8018078:	ffff8e8f 	.word	0xffff8e8f
 801807c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	6a1a      	ldr	r2, [r3, #32]
 8018084:	1d7b      	adds	r3, r7, #5
 8018086:	33ff      	adds	r3, #255	@ 0xff
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	1ad2      	subs	r2, r2, r3
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8018090:	687a      	ldr	r2, [r7, #4]
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	009b      	lsls	r3, r3, #2
 8018098:	18d3      	adds	r3, r2, r3
 801809a:	881b      	ldrh	r3, [r3, #0]
 801809c:	b29b      	uxth	r3, r3
 801809e:	001a      	movs	r2, r3
 80180a0:	2340      	movs	r3, #64	@ 0x40
 80180a2:	4013      	ands	r3, r2
 80180a4:	d100      	bne.n	80180a8 <USB_EPStartXfer+0x784>
 80180a6:	e0a4      	b.n	80181f2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	785b      	ldrb	r3, [r3, #1]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d000      	beq.n	80180b6 <USB_EPStartXfer+0x792>
 80180b4:	e070      	b.n	8018198 <USB_EPStartXfer+0x874>
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	2250      	movs	r2, #80	@ 0x50
 80180be:	5a9b      	ldrh	r3, [r3, r2]
 80180c0:	b29b      	uxth	r3, r3
 80180c2:	001a      	movs	r2, r3
 80180c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80180c6:	189b      	adds	r3, r3, r2
 80180c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80180ca:	683b      	ldr	r3, [r7, #0]
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	00da      	lsls	r2, r3, #3
 80180d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80180d2:	18d3      	adds	r3, r2, r3
 80180d4:	4abc      	ldr	r2, [pc, #752]	@ (80183c8 <USB_EPStartXfer+0xaa4>)
 80180d6:	4694      	mov	ip, r2
 80180d8:	4463      	add	r3, ip
 80180da:	667b      	str	r3, [r7, #100]	@ 0x64
 80180dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80180de:	881b      	ldrh	r3, [r3, #0]
 80180e0:	b29b      	uxth	r3, r3
 80180e2:	059b      	lsls	r3, r3, #22
 80180e4:	0d9b      	lsrs	r3, r3, #22
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80180ea:	801a      	strh	r2, [r3, #0]
 80180ec:	1d7b      	adds	r3, r7, #5
 80180ee:	33ff      	adds	r3, #255	@ 0xff
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80180f4:	d922      	bls.n	801813c <USB_EPStartXfer+0x818>
 80180f6:	1d7b      	adds	r3, r7, #5
 80180f8:	33ff      	adds	r3, #255	@ 0xff
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	095b      	lsrs	r3, r3, #5
 80180fe:	21f0      	movs	r1, #240	@ 0xf0
 8018100:	187a      	adds	r2, r7, r1
 8018102:	6013      	str	r3, [r2, #0]
 8018104:	1d7b      	adds	r3, r7, #5
 8018106:	33ff      	adds	r3, #255	@ 0xff
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	221f      	movs	r2, #31
 801810c:	4013      	ands	r3, r2
 801810e:	d104      	bne.n	801811a <USB_EPStartXfer+0x7f6>
 8018110:	187b      	adds	r3, r7, r1
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	3b01      	subs	r3, #1
 8018116:	187a      	adds	r2, r7, r1
 8018118:	6013      	str	r3, [r2, #0]
 801811a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801811c:	881b      	ldrh	r3, [r3, #0]
 801811e:	b29a      	uxth	r2, r3
 8018120:	23f0      	movs	r3, #240	@ 0xf0
 8018122:	18fb      	adds	r3, r7, r3
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	b29b      	uxth	r3, r3
 8018128:	029b      	lsls	r3, r3, #10
 801812a:	b29b      	uxth	r3, r3
 801812c:	4313      	orrs	r3, r2
 801812e:	b29b      	uxth	r3, r3
 8018130:	4aa6      	ldr	r2, [pc, #664]	@ (80183cc <USB_EPStartXfer+0xaa8>)
 8018132:	4313      	orrs	r3, r2
 8018134:	b29a      	uxth	r2, r3
 8018136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018138:	801a      	strh	r2, [r3, #0]
 801813a:	e048      	b.n	80181ce <USB_EPStartXfer+0x8aa>
 801813c:	1d7b      	adds	r3, r7, #5
 801813e:	33ff      	adds	r3, #255	@ 0xff
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d108      	bne.n	8018158 <USB_EPStartXfer+0x834>
 8018146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018148:	881b      	ldrh	r3, [r3, #0]
 801814a:	b29b      	uxth	r3, r3
 801814c:	4a9f      	ldr	r2, [pc, #636]	@ (80183cc <USB_EPStartXfer+0xaa8>)
 801814e:	4313      	orrs	r3, r2
 8018150:	b29a      	uxth	r2, r3
 8018152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018154:	801a      	strh	r2, [r3, #0]
 8018156:	e03a      	b.n	80181ce <USB_EPStartXfer+0x8aa>
 8018158:	1d7b      	adds	r3, r7, #5
 801815a:	33ff      	adds	r3, #255	@ 0xff
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	085b      	lsrs	r3, r3, #1
 8018160:	21f0      	movs	r1, #240	@ 0xf0
 8018162:	187a      	adds	r2, r7, r1
 8018164:	6013      	str	r3, [r2, #0]
 8018166:	1d7b      	adds	r3, r7, #5
 8018168:	33ff      	adds	r3, #255	@ 0xff
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2201      	movs	r2, #1
 801816e:	4013      	ands	r3, r2
 8018170:	d004      	beq.n	801817c <USB_EPStartXfer+0x858>
 8018172:	187b      	adds	r3, r7, r1
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	3301      	adds	r3, #1
 8018178:	187a      	adds	r2, r7, r1
 801817a:	6013      	str	r3, [r2, #0]
 801817c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801817e:	881b      	ldrh	r3, [r3, #0]
 8018180:	b29a      	uxth	r2, r3
 8018182:	23f0      	movs	r3, #240	@ 0xf0
 8018184:	18fb      	adds	r3, r7, r3
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	b29b      	uxth	r3, r3
 801818a:	029b      	lsls	r3, r3, #10
 801818c:	b29b      	uxth	r3, r3
 801818e:	4313      	orrs	r3, r2
 8018190:	b29a      	uxth	r2, r3
 8018192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018194:	801a      	strh	r2, [r3, #0]
 8018196:	e01a      	b.n	80181ce <USB_EPStartXfer+0x8aa>
 8018198:	683b      	ldr	r3, [r7, #0]
 801819a:	785b      	ldrb	r3, [r3, #1]
 801819c:	2b01      	cmp	r3, #1
 801819e:	d116      	bne.n	80181ce <USB_EPStartXfer+0x8aa>
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2250      	movs	r2, #80	@ 0x50
 80181a4:	5a9b      	ldrh	r3, [r3, r2]
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	001a      	movs	r2, r3
 80181aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80181ac:	189b      	adds	r3, r3, r2
 80181ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	781b      	ldrb	r3, [r3, #0]
 80181b4:	00da      	lsls	r2, r3, #3
 80181b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80181b8:	18d3      	adds	r3, r2, r3
 80181ba:	4a83      	ldr	r2, [pc, #524]	@ (80183c8 <USB_EPStartXfer+0xaa4>)
 80181bc:	4694      	mov	ip, r2
 80181be:	4463      	add	r3, ip
 80181c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80181c2:	1d7b      	adds	r3, r7, #5
 80181c4:	33ff      	adds	r3, #255	@ 0xff
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	b29a      	uxth	r2, r3
 80181ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80181cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80181ce:	2076      	movs	r0, #118	@ 0x76
 80181d0:	183b      	adds	r3, r7, r0
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	8952      	ldrh	r2, [r2, #10]
 80181d6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	6959      	ldr	r1, [r3, #20]
 80181dc:	1d7b      	adds	r3, r7, #5
 80181de:	33ff      	adds	r3, #255	@ 0xff
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	b29c      	uxth	r4, r3
 80181e4:	183b      	adds	r3, r7, r0
 80181e6:	881a      	ldrh	r2, [r3, #0]
 80181e8:	6878      	ldr	r0, [r7, #4]
 80181ea:	0023      	movs	r3, r4
 80181ec:	f000 fe0c 	bl	8018e08 <USB_WritePMA>
 80181f0:	e0ab      	b.n	801834a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	785b      	ldrb	r3, [r3, #1]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d000      	beq.n	80181fc <USB_EPStartXfer+0x8d8>
 80181fa:	e070      	b.n	80182de <USB_EPStartXfer+0x9ba>
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2250      	movs	r2, #80	@ 0x50
 8018204:	5a9b      	ldrh	r3, [r3, r2]
 8018206:	b29b      	uxth	r3, r3
 8018208:	001a      	movs	r2, r3
 801820a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801820c:	189b      	adds	r3, r3, r2
 801820e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	781b      	ldrb	r3, [r3, #0]
 8018214:	00da      	lsls	r2, r3, #3
 8018216:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018218:	18d3      	adds	r3, r2, r3
 801821a:	4a6d      	ldr	r2, [pc, #436]	@ (80183d0 <USB_EPStartXfer+0xaac>)
 801821c:	4694      	mov	ip, r2
 801821e:	4463      	add	r3, ip
 8018220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8018222:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018224:	881b      	ldrh	r3, [r3, #0]
 8018226:	b29b      	uxth	r3, r3
 8018228:	059b      	lsls	r3, r3, #22
 801822a:	0d9b      	lsrs	r3, r3, #22
 801822c:	b29a      	uxth	r2, r3
 801822e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018230:	801a      	strh	r2, [r3, #0]
 8018232:	1d7b      	adds	r3, r7, #5
 8018234:	33ff      	adds	r3, #255	@ 0xff
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	2b3e      	cmp	r3, #62	@ 0x3e
 801823a:	d922      	bls.n	8018282 <USB_EPStartXfer+0x95e>
 801823c:	1d7b      	adds	r3, r7, #5
 801823e:	33ff      	adds	r3, #255	@ 0xff
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	095b      	lsrs	r3, r3, #5
 8018244:	21ec      	movs	r1, #236	@ 0xec
 8018246:	187a      	adds	r2, r7, r1
 8018248:	6013      	str	r3, [r2, #0]
 801824a:	1d7b      	adds	r3, r7, #5
 801824c:	33ff      	adds	r3, #255	@ 0xff
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	221f      	movs	r2, #31
 8018252:	4013      	ands	r3, r2
 8018254:	d104      	bne.n	8018260 <USB_EPStartXfer+0x93c>
 8018256:	187b      	adds	r3, r7, r1
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	3b01      	subs	r3, #1
 801825c:	187a      	adds	r2, r7, r1
 801825e:	6013      	str	r3, [r2, #0]
 8018260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018262:	881b      	ldrh	r3, [r3, #0]
 8018264:	b29a      	uxth	r2, r3
 8018266:	23ec      	movs	r3, #236	@ 0xec
 8018268:	18fb      	adds	r3, r7, r3
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	b29b      	uxth	r3, r3
 801826e:	029b      	lsls	r3, r3, #10
 8018270:	b29b      	uxth	r3, r3
 8018272:	4313      	orrs	r3, r2
 8018274:	b29b      	uxth	r3, r3
 8018276:	4a55      	ldr	r2, [pc, #340]	@ (80183cc <USB_EPStartXfer+0xaa8>)
 8018278:	4313      	orrs	r3, r2
 801827a:	b29a      	uxth	r2, r3
 801827c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801827e:	801a      	strh	r2, [r3, #0]
 8018280:	e052      	b.n	8018328 <USB_EPStartXfer+0xa04>
 8018282:	1d7b      	adds	r3, r7, #5
 8018284:	33ff      	adds	r3, #255	@ 0xff
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d108      	bne.n	801829e <USB_EPStartXfer+0x97a>
 801828c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801828e:	881b      	ldrh	r3, [r3, #0]
 8018290:	b29b      	uxth	r3, r3
 8018292:	4a4e      	ldr	r2, [pc, #312]	@ (80183cc <USB_EPStartXfer+0xaa8>)
 8018294:	4313      	orrs	r3, r2
 8018296:	b29a      	uxth	r2, r3
 8018298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801829a:	801a      	strh	r2, [r3, #0]
 801829c:	e044      	b.n	8018328 <USB_EPStartXfer+0xa04>
 801829e:	1d7b      	adds	r3, r7, #5
 80182a0:	33ff      	adds	r3, #255	@ 0xff
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	085b      	lsrs	r3, r3, #1
 80182a6:	21ec      	movs	r1, #236	@ 0xec
 80182a8:	187a      	adds	r2, r7, r1
 80182aa:	6013      	str	r3, [r2, #0]
 80182ac:	1d7b      	adds	r3, r7, #5
 80182ae:	33ff      	adds	r3, #255	@ 0xff
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	2201      	movs	r2, #1
 80182b4:	4013      	ands	r3, r2
 80182b6:	d004      	beq.n	80182c2 <USB_EPStartXfer+0x99e>
 80182b8:	187b      	adds	r3, r7, r1
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	3301      	adds	r3, #1
 80182be:	187a      	adds	r2, r7, r1
 80182c0:	6013      	str	r3, [r2, #0]
 80182c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182c4:	881b      	ldrh	r3, [r3, #0]
 80182c6:	b29a      	uxth	r2, r3
 80182c8:	23ec      	movs	r3, #236	@ 0xec
 80182ca:	18fb      	adds	r3, r7, r3
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	b29b      	uxth	r3, r3
 80182d0:	029b      	lsls	r3, r3, #10
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	4313      	orrs	r3, r2
 80182d6:	b29a      	uxth	r2, r3
 80182d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182da:	801a      	strh	r2, [r3, #0]
 80182dc:	e024      	b.n	8018328 <USB_EPStartXfer+0xa04>
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	785b      	ldrb	r3, [r3, #1]
 80182e2:	2b01      	cmp	r3, #1
 80182e4:	d120      	bne.n	8018328 <USB_EPStartXfer+0xa04>
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2184      	movs	r1, #132	@ 0x84
 80182ea:	187a      	adds	r2, r7, r1
 80182ec:	6013      	str	r3, [r2, #0]
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	2250      	movs	r2, #80	@ 0x50
 80182f2:	5a9b      	ldrh	r3, [r3, r2]
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	001a      	movs	r2, r3
 80182f8:	187b      	adds	r3, r7, r1
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	189b      	adds	r3, r3, r2
 80182fe:	187a      	adds	r2, r7, r1
 8018300:	6013      	str	r3, [r2, #0]
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	781b      	ldrb	r3, [r3, #0]
 8018306:	00da      	lsls	r2, r3, #3
 8018308:	187b      	adds	r3, r7, r1
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	18d3      	adds	r3, r2, r3
 801830e:	4a30      	ldr	r2, [pc, #192]	@ (80183d0 <USB_EPStartXfer+0xaac>)
 8018310:	4694      	mov	ip, r2
 8018312:	4463      	add	r3, ip
 8018314:	2180      	movs	r1, #128	@ 0x80
 8018316:	187a      	adds	r2, r7, r1
 8018318:	6013      	str	r3, [r2, #0]
 801831a:	1d7b      	adds	r3, r7, #5
 801831c:	33ff      	adds	r3, #255	@ 0xff
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	b29a      	uxth	r2, r3
 8018322:	187b      	adds	r3, r7, r1
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8018328:	2076      	movs	r0, #118	@ 0x76
 801832a:	183b      	adds	r3, r7, r0
 801832c:	683a      	ldr	r2, [r7, #0]
 801832e:	8912      	ldrh	r2, [r2, #8]
 8018330:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018332:	683b      	ldr	r3, [r7, #0]
 8018334:	6959      	ldr	r1, [r3, #20]
 8018336:	1d7b      	adds	r3, r7, #5
 8018338:	33ff      	adds	r3, #255	@ 0xff
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	b29c      	uxth	r4, r3
 801833e:	183b      	adds	r3, r7, r0
 8018340:	881a      	ldrh	r2, [r3, #0]
 8018342:	6878      	ldr	r0, [r7, #4]
 8018344:	0023      	movs	r3, r4
 8018346:	f000 fd5f 	bl	8018e08 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801834a:	687a      	ldr	r2, [r7, #4]
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	009b      	lsls	r3, r3, #2
 8018352:	18d3      	adds	r3, r2, r3
 8018354:	881b      	ldrh	r3, [r3, #0]
 8018356:	b29a      	uxth	r2, r3
 8018358:	200a      	movs	r0, #10
 801835a:	183b      	adds	r3, r7, r0
 801835c:	491d      	ldr	r1, [pc, #116]	@ (80183d4 <USB_EPStartXfer+0xab0>)
 801835e:	400a      	ands	r2, r1
 8018360:	801a      	strh	r2, [r3, #0]
 8018362:	183b      	adds	r3, r7, r0
 8018364:	183a      	adds	r2, r7, r0
 8018366:	8812      	ldrh	r2, [r2, #0]
 8018368:	2110      	movs	r1, #16
 801836a:	404a      	eors	r2, r1
 801836c:	801a      	strh	r2, [r3, #0]
 801836e:	183b      	adds	r3, r7, r0
 8018370:	183a      	adds	r2, r7, r0
 8018372:	8812      	ldrh	r2, [r2, #0]
 8018374:	2120      	movs	r1, #32
 8018376:	404a      	eors	r2, r1
 8018378:	801a      	strh	r2, [r3, #0]
 801837a:	687a      	ldr	r2, [r7, #4]
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	781b      	ldrb	r3, [r3, #0]
 8018380:	009b      	lsls	r3, r3, #2
 8018382:	18d3      	adds	r3, r2, r3
 8018384:	183a      	adds	r2, r7, r0
 8018386:	8812      	ldrh	r2, [r2, #0]
 8018388:	4913      	ldr	r1, [pc, #76]	@ (80183d8 <USB_EPStartXfer+0xab4>)
 801838a:	430a      	orrs	r2, r1
 801838c:	b292      	uxth	r2, r2
 801838e:	801a      	strh	r2, [r3, #0]
 8018390:	f000 fbf4 	bl	8018b7c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	7b1b      	ldrb	r3, [r3, #12]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d000      	beq.n	801839e <USB_EPStartXfer+0xa7a>
 801839c:	e0a9      	b.n	80184f2 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	699a      	ldr	r2, [r3, #24]
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	691b      	ldr	r3, [r3, #16]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d918      	bls.n	80183dc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80183aa:	683b      	ldr	r3, [r7, #0]
 80183ac:	691b      	ldr	r3, [r3, #16]
 80183ae:	1d7a      	adds	r2, r7, #5
 80183b0:	32ff      	adds	r2, #255	@ 0xff
 80183b2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	699a      	ldr	r2, [r3, #24]
 80183b8:	1d7b      	adds	r3, r7, #5
 80183ba:	33ff      	adds	r3, #255	@ 0xff
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	1ad2      	subs	r2, r2, r3
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	619a      	str	r2, [r3, #24]
 80183c4:	e012      	b.n	80183ec <USB_EPStartXfer+0xac8>
 80183c6:	46c0      	nop			@ (mov r8, r8)
 80183c8:	00000406 	.word	0x00000406
 80183cc:	ffff8000 	.word	0xffff8000
 80183d0:	00000402 	.word	0x00000402
 80183d4:	ffff8fbf 	.word	0xffff8fbf
 80183d8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	699b      	ldr	r3, [r3, #24]
 80183e0:	1d7a      	adds	r2, r7, #5
 80183e2:	32ff      	adds	r2, #255	@ 0xff
 80183e4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	2200      	movs	r2, #0
 80183ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2190      	movs	r1, #144	@ 0x90
 80183f0:	187a      	adds	r2, r7, r1
 80183f2:	6013      	str	r3, [r2, #0]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2250      	movs	r2, #80	@ 0x50
 80183f8:	5a9b      	ldrh	r3, [r3, r2]
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	001a      	movs	r2, r3
 80183fe:	187b      	adds	r3, r7, r1
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	189b      	adds	r3, r3, r2
 8018404:	187a      	adds	r2, r7, r1
 8018406:	6013      	str	r3, [r2, #0]
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	00da      	lsls	r2, r3, #3
 801840e:	187b      	adds	r3, r7, r1
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	18d3      	adds	r3, r2, r3
 8018414:	4acf      	ldr	r2, [pc, #828]	@ (8018754 <USB_EPStartXfer+0xe30>)
 8018416:	4694      	mov	ip, r2
 8018418:	4463      	add	r3, ip
 801841a:	218c      	movs	r1, #140	@ 0x8c
 801841c:	187a      	adds	r2, r7, r1
 801841e:	6013      	str	r3, [r2, #0]
 8018420:	187b      	adds	r3, r7, r1
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	881b      	ldrh	r3, [r3, #0]
 8018426:	b29b      	uxth	r3, r3
 8018428:	059b      	lsls	r3, r3, #22
 801842a:	0d9b      	lsrs	r3, r3, #22
 801842c:	b29a      	uxth	r2, r3
 801842e:	187b      	adds	r3, r7, r1
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	801a      	strh	r2, [r3, #0]
 8018434:	1d7b      	adds	r3, r7, #5
 8018436:	33ff      	adds	r3, #255	@ 0xff
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	2b3e      	cmp	r3, #62	@ 0x3e
 801843c:	d925      	bls.n	801848a <USB_EPStartXfer+0xb66>
 801843e:	1d7b      	adds	r3, r7, #5
 8018440:	33ff      	adds	r3, #255	@ 0xff
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	095b      	lsrs	r3, r3, #5
 8018446:	21e8      	movs	r1, #232	@ 0xe8
 8018448:	187a      	adds	r2, r7, r1
 801844a:	6013      	str	r3, [r2, #0]
 801844c:	1d7b      	adds	r3, r7, #5
 801844e:	33ff      	adds	r3, #255	@ 0xff
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	221f      	movs	r2, #31
 8018454:	4013      	ands	r3, r2
 8018456:	d104      	bne.n	8018462 <USB_EPStartXfer+0xb3e>
 8018458:	187b      	adds	r3, r7, r1
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	3b01      	subs	r3, #1
 801845e:	187a      	adds	r2, r7, r1
 8018460:	6013      	str	r3, [r2, #0]
 8018462:	218c      	movs	r1, #140	@ 0x8c
 8018464:	187b      	adds	r3, r7, r1
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	881b      	ldrh	r3, [r3, #0]
 801846a:	b29a      	uxth	r2, r3
 801846c:	23e8      	movs	r3, #232	@ 0xe8
 801846e:	18fb      	adds	r3, r7, r3
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	b29b      	uxth	r3, r3
 8018474:	029b      	lsls	r3, r3, #10
 8018476:	b29b      	uxth	r3, r3
 8018478:	4313      	orrs	r3, r2
 801847a:	b29b      	uxth	r3, r3
 801847c:	4ab6      	ldr	r2, [pc, #728]	@ (8018758 <USB_EPStartXfer+0xe34>)
 801847e:	4313      	orrs	r3, r2
 8018480:	b29a      	uxth	r2, r3
 8018482:	187b      	adds	r3, r7, r1
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	801a      	strh	r2, [r3, #0]
 8018488:	e353      	b.n	8018b32 <USB_EPStartXfer+0x120e>
 801848a:	1d7b      	adds	r3, r7, #5
 801848c:	33ff      	adds	r3, #255	@ 0xff
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d10b      	bne.n	80184ac <USB_EPStartXfer+0xb88>
 8018494:	218c      	movs	r1, #140	@ 0x8c
 8018496:	187b      	adds	r3, r7, r1
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	881b      	ldrh	r3, [r3, #0]
 801849c:	b29b      	uxth	r3, r3
 801849e:	4aae      	ldr	r2, [pc, #696]	@ (8018758 <USB_EPStartXfer+0xe34>)
 80184a0:	4313      	orrs	r3, r2
 80184a2:	b29a      	uxth	r2, r3
 80184a4:	187b      	adds	r3, r7, r1
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	801a      	strh	r2, [r3, #0]
 80184aa:	e342      	b.n	8018b32 <USB_EPStartXfer+0x120e>
 80184ac:	1d7b      	adds	r3, r7, #5
 80184ae:	33ff      	adds	r3, #255	@ 0xff
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	085b      	lsrs	r3, r3, #1
 80184b4:	21e8      	movs	r1, #232	@ 0xe8
 80184b6:	187a      	adds	r2, r7, r1
 80184b8:	6013      	str	r3, [r2, #0]
 80184ba:	1d7b      	adds	r3, r7, #5
 80184bc:	33ff      	adds	r3, #255	@ 0xff
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	2201      	movs	r2, #1
 80184c2:	4013      	ands	r3, r2
 80184c4:	d004      	beq.n	80184d0 <USB_EPStartXfer+0xbac>
 80184c6:	187b      	adds	r3, r7, r1
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	3301      	adds	r3, #1
 80184cc:	187a      	adds	r2, r7, r1
 80184ce:	6013      	str	r3, [r2, #0]
 80184d0:	218c      	movs	r1, #140	@ 0x8c
 80184d2:	187b      	adds	r3, r7, r1
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	881b      	ldrh	r3, [r3, #0]
 80184d8:	b29a      	uxth	r2, r3
 80184da:	23e8      	movs	r3, #232	@ 0xe8
 80184dc:	18fb      	adds	r3, r7, r3
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	b29b      	uxth	r3, r3
 80184e2:	029b      	lsls	r3, r3, #10
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	4313      	orrs	r3, r2
 80184e8:	b29a      	uxth	r2, r3
 80184ea:	187b      	adds	r3, r7, r1
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	801a      	strh	r2, [r3, #0]
 80184f0:	e31f      	b.n	8018b32 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80184f2:	683b      	ldr	r3, [r7, #0]
 80184f4:	78db      	ldrb	r3, [r3, #3]
 80184f6:	2b02      	cmp	r3, #2
 80184f8:	d000      	beq.n	80184fc <USB_EPStartXfer+0xbd8>
 80184fa:	e191      	b.n	8018820 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	785b      	ldrb	r3, [r3, #1]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d000      	beq.n	8018506 <USB_EPStartXfer+0xbe2>
 8018504:	e07c      	b.n	8018600 <USB_EPStartXfer+0xcdc>
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	21ac      	movs	r1, #172	@ 0xac
 801850a:	187a      	adds	r2, r7, r1
 801850c:	6013      	str	r3, [r2, #0]
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2250      	movs	r2, #80	@ 0x50
 8018512:	5a9b      	ldrh	r3, [r3, r2]
 8018514:	b29b      	uxth	r3, r3
 8018516:	001a      	movs	r2, r3
 8018518:	187b      	adds	r3, r7, r1
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	189b      	adds	r3, r3, r2
 801851e:	187a      	adds	r2, r7, r1
 8018520:	6013      	str	r3, [r2, #0]
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	00da      	lsls	r2, r3, #3
 8018528:	187b      	adds	r3, r7, r1
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	18d3      	adds	r3, r2, r3
 801852e:	4a8b      	ldr	r2, [pc, #556]	@ (801875c <USB_EPStartXfer+0xe38>)
 8018530:	4694      	mov	ip, r2
 8018532:	4463      	add	r3, ip
 8018534:	21a8      	movs	r1, #168	@ 0xa8
 8018536:	187a      	adds	r2, r7, r1
 8018538:	6013      	str	r3, [r2, #0]
 801853a:	187b      	adds	r3, r7, r1
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	881b      	ldrh	r3, [r3, #0]
 8018540:	b29b      	uxth	r3, r3
 8018542:	059b      	lsls	r3, r3, #22
 8018544:	0d9b      	lsrs	r3, r3, #22
 8018546:	b29a      	uxth	r2, r3
 8018548:	187b      	adds	r3, r7, r1
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	801a      	strh	r2, [r3, #0]
 801854e:	683b      	ldr	r3, [r7, #0]
 8018550:	691b      	ldr	r3, [r3, #16]
 8018552:	2b3e      	cmp	r3, #62	@ 0x3e
 8018554:	d923      	bls.n	801859e <USB_EPStartXfer+0xc7a>
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	691b      	ldr	r3, [r3, #16]
 801855a:	095b      	lsrs	r3, r3, #5
 801855c:	21e4      	movs	r1, #228	@ 0xe4
 801855e:	187a      	adds	r2, r7, r1
 8018560:	6013      	str	r3, [r2, #0]
 8018562:	683b      	ldr	r3, [r7, #0]
 8018564:	691b      	ldr	r3, [r3, #16]
 8018566:	221f      	movs	r2, #31
 8018568:	4013      	ands	r3, r2
 801856a:	d104      	bne.n	8018576 <USB_EPStartXfer+0xc52>
 801856c:	187b      	adds	r3, r7, r1
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	3b01      	subs	r3, #1
 8018572:	187a      	adds	r2, r7, r1
 8018574:	6013      	str	r3, [r2, #0]
 8018576:	21a8      	movs	r1, #168	@ 0xa8
 8018578:	187b      	adds	r3, r7, r1
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	881b      	ldrh	r3, [r3, #0]
 801857e:	b29a      	uxth	r2, r3
 8018580:	23e4      	movs	r3, #228	@ 0xe4
 8018582:	18fb      	adds	r3, r7, r3
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	b29b      	uxth	r3, r3
 8018588:	029b      	lsls	r3, r3, #10
 801858a:	b29b      	uxth	r3, r3
 801858c:	4313      	orrs	r3, r2
 801858e:	b29b      	uxth	r3, r3
 8018590:	4a71      	ldr	r2, [pc, #452]	@ (8018758 <USB_EPStartXfer+0xe34>)
 8018592:	4313      	orrs	r3, r2
 8018594:	b29a      	uxth	r2, r3
 8018596:	187b      	adds	r3, r7, r1
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	801a      	strh	r2, [r3, #0]
 801859c:	e054      	b.n	8018648 <USB_EPStartXfer+0xd24>
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	691b      	ldr	r3, [r3, #16]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d10b      	bne.n	80185be <USB_EPStartXfer+0xc9a>
 80185a6:	21a8      	movs	r1, #168	@ 0xa8
 80185a8:	187b      	adds	r3, r7, r1
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	881b      	ldrh	r3, [r3, #0]
 80185ae:	b29b      	uxth	r3, r3
 80185b0:	4a69      	ldr	r2, [pc, #420]	@ (8018758 <USB_EPStartXfer+0xe34>)
 80185b2:	4313      	orrs	r3, r2
 80185b4:	b29a      	uxth	r2, r3
 80185b6:	187b      	adds	r3, r7, r1
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	801a      	strh	r2, [r3, #0]
 80185bc:	e044      	b.n	8018648 <USB_EPStartXfer+0xd24>
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	691b      	ldr	r3, [r3, #16]
 80185c2:	085b      	lsrs	r3, r3, #1
 80185c4:	21e4      	movs	r1, #228	@ 0xe4
 80185c6:	187a      	adds	r2, r7, r1
 80185c8:	6013      	str	r3, [r2, #0]
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	691b      	ldr	r3, [r3, #16]
 80185ce:	2201      	movs	r2, #1
 80185d0:	4013      	ands	r3, r2
 80185d2:	d004      	beq.n	80185de <USB_EPStartXfer+0xcba>
 80185d4:	187b      	adds	r3, r7, r1
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	3301      	adds	r3, #1
 80185da:	187a      	adds	r2, r7, r1
 80185dc:	6013      	str	r3, [r2, #0]
 80185de:	21a8      	movs	r1, #168	@ 0xa8
 80185e0:	187b      	adds	r3, r7, r1
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	881b      	ldrh	r3, [r3, #0]
 80185e6:	b29a      	uxth	r2, r3
 80185e8:	23e4      	movs	r3, #228	@ 0xe4
 80185ea:	18fb      	adds	r3, r7, r3
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	b29b      	uxth	r3, r3
 80185f0:	029b      	lsls	r3, r3, #10
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	4313      	orrs	r3, r2
 80185f6:	b29a      	uxth	r2, r3
 80185f8:	187b      	adds	r3, r7, r1
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	801a      	strh	r2, [r3, #0]
 80185fe:	e023      	b.n	8018648 <USB_EPStartXfer+0xd24>
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	785b      	ldrb	r3, [r3, #1]
 8018604:	2b01      	cmp	r3, #1
 8018606:	d11f      	bne.n	8018648 <USB_EPStartXfer+0xd24>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	21b4      	movs	r1, #180	@ 0xb4
 801860c:	187a      	adds	r2, r7, r1
 801860e:	6013      	str	r3, [r2, #0]
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	2250      	movs	r2, #80	@ 0x50
 8018614:	5a9b      	ldrh	r3, [r3, r2]
 8018616:	b29b      	uxth	r3, r3
 8018618:	001a      	movs	r2, r3
 801861a:	187b      	adds	r3, r7, r1
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	189b      	adds	r3, r3, r2
 8018620:	187a      	adds	r2, r7, r1
 8018622:	6013      	str	r3, [r2, #0]
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	781b      	ldrb	r3, [r3, #0]
 8018628:	00da      	lsls	r2, r3, #3
 801862a:	187b      	adds	r3, r7, r1
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	18d3      	adds	r3, r2, r3
 8018630:	4a4a      	ldr	r2, [pc, #296]	@ (801875c <USB_EPStartXfer+0xe38>)
 8018632:	4694      	mov	ip, r2
 8018634:	4463      	add	r3, ip
 8018636:	21b0      	movs	r1, #176	@ 0xb0
 8018638:	187a      	adds	r2, r7, r1
 801863a:	6013      	str	r3, [r2, #0]
 801863c:	683b      	ldr	r3, [r7, #0]
 801863e:	691b      	ldr	r3, [r3, #16]
 8018640:	b29a      	uxth	r2, r3
 8018642:	187b      	adds	r3, r7, r1
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	801a      	strh	r2, [r3, #0]
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	22a4      	movs	r2, #164	@ 0xa4
 801864c:	18ba      	adds	r2, r7, r2
 801864e:	6013      	str	r3, [r2, #0]
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	785b      	ldrb	r3, [r3, #1]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d000      	beq.n	801865a <USB_EPStartXfer+0xd36>
 8018658:	e082      	b.n	8018760 <USB_EPStartXfer+0xe3c>
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	219c      	movs	r1, #156	@ 0x9c
 801865e:	187a      	adds	r2, r7, r1
 8018660:	6013      	str	r3, [r2, #0]
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2250      	movs	r2, #80	@ 0x50
 8018666:	5a9b      	ldrh	r3, [r3, r2]
 8018668:	b29b      	uxth	r3, r3
 801866a:	001a      	movs	r2, r3
 801866c:	187b      	adds	r3, r7, r1
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	189b      	adds	r3, r3, r2
 8018672:	187a      	adds	r2, r7, r1
 8018674:	6013      	str	r3, [r2, #0]
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	781b      	ldrb	r3, [r3, #0]
 801867a:	00da      	lsls	r2, r3, #3
 801867c:	187b      	adds	r3, r7, r1
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	18d3      	adds	r3, r2, r3
 8018682:	4a34      	ldr	r2, [pc, #208]	@ (8018754 <USB_EPStartXfer+0xe30>)
 8018684:	4694      	mov	ip, r2
 8018686:	4463      	add	r3, ip
 8018688:	2198      	movs	r1, #152	@ 0x98
 801868a:	187a      	adds	r2, r7, r1
 801868c:	6013      	str	r3, [r2, #0]
 801868e:	187b      	adds	r3, r7, r1
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	881b      	ldrh	r3, [r3, #0]
 8018694:	b29b      	uxth	r3, r3
 8018696:	059b      	lsls	r3, r3, #22
 8018698:	0d9b      	lsrs	r3, r3, #22
 801869a:	b29a      	uxth	r2, r3
 801869c:	187b      	adds	r3, r7, r1
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	801a      	strh	r2, [r3, #0]
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	691b      	ldr	r3, [r3, #16]
 80186a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80186a8:	d923      	bls.n	80186f2 <USB_EPStartXfer+0xdce>
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	691b      	ldr	r3, [r3, #16]
 80186ae:	095b      	lsrs	r3, r3, #5
 80186b0:	21e0      	movs	r1, #224	@ 0xe0
 80186b2:	187a      	adds	r2, r7, r1
 80186b4:	6013      	str	r3, [r2, #0]
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	691b      	ldr	r3, [r3, #16]
 80186ba:	221f      	movs	r2, #31
 80186bc:	4013      	ands	r3, r2
 80186be:	d104      	bne.n	80186ca <USB_EPStartXfer+0xda6>
 80186c0:	187b      	adds	r3, r7, r1
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	3b01      	subs	r3, #1
 80186c6:	187a      	adds	r2, r7, r1
 80186c8:	6013      	str	r3, [r2, #0]
 80186ca:	2198      	movs	r1, #152	@ 0x98
 80186cc:	187b      	adds	r3, r7, r1
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	881b      	ldrh	r3, [r3, #0]
 80186d2:	b29a      	uxth	r2, r3
 80186d4:	23e0      	movs	r3, #224	@ 0xe0
 80186d6:	18fb      	adds	r3, r7, r3
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	b29b      	uxth	r3, r3
 80186dc:	029b      	lsls	r3, r3, #10
 80186de:	b29b      	uxth	r3, r3
 80186e0:	4313      	orrs	r3, r2
 80186e2:	b29b      	uxth	r3, r3
 80186e4:	4a1c      	ldr	r2, [pc, #112]	@ (8018758 <USB_EPStartXfer+0xe34>)
 80186e6:	4313      	orrs	r3, r2
 80186e8:	b29a      	uxth	r2, r3
 80186ea:	187b      	adds	r3, r7, r1
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	801a      	strh	r2, [r3, #0]
 80186f0:	e057      	b.n	80187a2 <USB_EPStartXfer+0xe7e>
 80186f2:	683b      	ldr	r3, [r7, #0]
 80186f4:	691b      	ldr	r3, [r3, #16]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d10b      	bne.n	8018712 <USB_EPStartXfer+0xdee>
 80186fa:	2198      	movs	r1, #152	@ 0x98
 80186fc:	187b      	adds	r3, r7, r1
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	881b      	ldrh	r3, [r3, #0]
 8018702:	b29b      	uxth	r3, r3
 8018704:	4a14      	ldr	r2, [pc, #80]	@ (8018758 <USB_EPStartXfer+0xe34>)
 8018706:	4313      	orrs	r3, r2
 8018708:	b29a      	uxth	r2, r3
 801870a:	187b      	adds	r3, r7, r1
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	801a      	strh	r2, [r3, #0]
 8018710:	e047      	b.n	80187a2 <USB_EPStartXfer+0xe7e>
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	691b      	ldr	r3, [r3, #16]
 8018716:	085b      	lsrs	r3, r3, #1
 8018718:	21e0      	movs	r1, #224	@ 0xe0
 801871a:	187a      	adds	r2, r7, r1
 801871c:	6013      	str	r3, [r2, #0]
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	691b      	ldr	r3, [r3, #16]
 8018722:	2201      	movs	r2, #1
 8018724:	4013      	ands	r3, r2
 8018726:	d004      	beq.n	8018732 <USB_EPStartXfer+0xe0e>
 8018728:	187b      	adds	r3, r7, r1
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	3301      	adds	r3, #1
 801872e:	187a      	adds	r2, r7, r1
 8018730:	6013      	str	r3, [r2, #0]
 8018732:	2198      	movs	r1, #152	@ 0x98
 8018734:	187b      	adds	r3, r7, r1
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	881b      	ldrh	r3, [r3, #0]
 801873a:	b29a      	uxth	r2, r3
 801873c:	23e0      	movs	r3, #224	@ 0xe0
 801873e:	18fb      	adds	r3, r7, r3
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	b29b      	uxth	r3, r3
 8018744:	029b      	lsls	r3, r3, #10
 8018746:	b29b      	uxth	r3, r3
 8018748:	4313      	orrs	r3, r2
 801874a:	b29a      	uxth	r2, r3
 801874c:	187b      	adds	r3, r7, r1
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	801a      	strh	r2, [r3, #0]
 8018752:	e026      	b.n	80187a2 <USB_EPStartXfer+0xe7e>
 8018754:	00000406 	.word	0x00000406
 8018758:	ffff8000 	.word	0xffff8000
 801875c:	00000402 	.word	0x00000402
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	785b      	ldrb	r3, [r3, #1]
 8018764:	2b01      	cmp	r3, #1
 8018766:	d11c      	bne.n	80187a2 <USB_EPStartXfer+0xe7e>
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	2250      	movs	r2, #80	@ 0x50
 801876c:	5a9b      	ldrh	r3, [r3, r2]
 801876e:	b29b      	uxth	r3, r3
 8018770:	001a      	movs	r2, r3
 8018772:	21a4      	movs	r1, #164	@ 0xa4
 8018774:	187b      	adds	r3, r7, r1
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	189b      	adds	r3, r3, r2
 801877a:	187a      	adds	r2, r7, r1
 801877c:	6013      	str	r3, [r2, #0]
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	00da      	lsls	r2, r3, #3
 8018784:	187b      	adds	r3, r7, r1
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	18d3      	adds	r3, r2, r3
 801878a:	4ad2      	ldr	r2, [pc, #840]	@ (8018ad4 <USB_EPStartXfer+0x11b0>)
 801878c:	4694      	mov	ip, r2
 801878e:	4463      	add	r3, ip
 8018790:	21a0      	movs	r1, #160	@ 0xa0
 8018792:	187a      	adds	r2, r7, r1
 8018794:	6013      	str	r3, [r2, #0]
 8018796:	683b      	ldr	r3, [r7, #0]
 8018798:	691b      	ldr	r3, [r3, #16]
 801879a:	b29a      	uxth	r2, r3
 801879c:	187b      	adds	r3, r7, r1
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	69db      	ldr	r3, [r3, #28]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d100      	bne.n	80187ac <USB_EPStartXfer+0xe88>
 80187aa:	e1c2      	b.n	8018b32 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80187ac:	687a      	ldr	r2, [r7, #4]
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	18d2      	adds	r2, r2, r3
 80187b6:	2196      	movs	r1, #150	@ 0x96
 80187b8:	187b      	adds	r3, r7, r1
 80187ba:	8812      	ldrh	r2, [r2, #0]
 80187bc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80187be:	187b      	adds	r3, r7, r1
 80187c0:	881a      	ldrh	r2, [r3, #0]
 80187c2:	2380      	movs	r3, #128	@ 0x80
 80187c4:	01db      	lsls	r3, r3, #7
 80187c6:	4013      	ands	r3, r2
 80187c8:	d004      	beq.n	80187d4 <USB_EPStartXfer+0xeb0>
 80187ca:	187b      	adds	r3, r7, r1
 80187cc:	881b      	ldrh	r3, [r3, #0]
 80187ce:	2240      	movs	r2, #64	@ 0x40
 80187d0:	4013      	ands	r3, r2
 80187d2:	d10d      	bne.n	80187f0 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80187d4:	2196      	movs	r1, #150	@ 0x96
 80187d6:	187b      	adds	r3, r7, r1
 80187d8:	881a      	ldrh	r2, [r3, #0]
 80187da:	2380      	movs	r3, #128	@ 0x80
 80187dc:	01db      	lsls	r3, r3, #7
 80187de:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80187e0:	d000      	beq.n	80187e4 <USB_EPStartXfer+0xec0>
 80187e2:	e1a6      	b.n	8018b32 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80187e4:	187b      	adds	r3, r7, r1
 80187e6:	881b      	ldrh	r3, [r3, #0]
 80187e8:	2240      	movs	r2, #64	@ 0x40
 80187ea:	4013      	ands	r3, r2
 80187ec:	d000      	beq.n	80187f0 <USB_EPStartXfer+0xecc>
 80187ee:	e1a0      	b.n	8018b32 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80187f0:	687a      	ldr	r2, [r7, #4]
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	781b      	ldrb	r3, [r3, #0]
 80187f6:	009b      	lsls	r3, r3, #2
 80187f8:	18d3      	adds	r3, r2, r3
 80187fa:	881b      	ldrh	r3, [r3, #0]
 80187fc:	b29a      	uxth	r2, r3
 80187fe:	2094      	movs	r0, #148	@ 0x94
 8018800:	183b      	adds	r3, r7, r0
 8018802:	49b5      	ldr	r1, [pc, #724]	@ (8018ad8 <USB_EPStartXfer+0x11b4>)
 8018804:	400a      	ands	r2, r1
 8018806:	801a      	strh	r2, [r3, #0]
 8018808:	687a      	ldr	r2, [r7, #4]
 801880a:	683b      	ldr	r3, [r7, #0]
 801880c:	781b      	ldrb	r3, [r3, #0]
 801880e:	009b      	lsls	r3, r3, #2
 8018810:	18d3      	adds	r3, r2, r3
 8018812:	183a      	adds	r2, r7, r0
 8018814:	8812      	ldrh	r2, [r2, #0]
 8018816:	49b1      	ldr	r1, [pc, #708]	@ (8018adc <USB_EPStartXfer+0x11b8>)
 8018818:	430a      	orrs	r2, r1
 801881a:	b292      	uxth	r2, r2
 801881c:	801a      	strh	r2, [r3, #0]
 801881e:	e188      	b.n	8018b32 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8018820:	683b      	ldr	r3, [r7, #0]
 8018822:	78db      	ldrb	r3, [r3, #3]
 8018824:	2b01      	cmp	r3, #1
 8018826:	d000      	beq.n	801882a <USB_EPStartXfer+0xf06>
 8018828:	e181      	b.n	8018b2e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	699a      	ldr	r2, [r3, #24]
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	691b      	ldr	r3, [r3, #16]
 8018832:	429a      	cmp	r2, r3
 8018834:	d90d      	bls.n	8018852 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	691b      	ldr	r3, [r3, #16]
 801883a:	1d7a      	adds	r2, r7, #5
 801883c:	32ff      	adds	r2, #255	@ 0xff
 801883e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8018840:	683b      	ldr	r3, [r7, #0]
 8018842:	699a      	ldr	r2, [r3, #24]
 8018844:	1d7b      	adds	r3, r7, #5
 8018846:	33ff      	adds	r3, #255	@ 0xff
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	1ad2      	subs	r2, r2, r3
 801884c:	683b      	ldr	r3, [r7, #0]
 801884e:	619a      	str	r2, [r3, #24]
 8018850:	e007      	b.n	8018862 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8018852:	683b      	ldr	r3, [r7, #0]
 8018854:	699b      	ldr	r3, [r3, #24]
 8018856:	1d7a      	adds	r2, r7, #5
 8018858:	32ff      	adds	r2, #255	@ 0xff
 801885a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	2200      	movs	r2, #0
 8018860:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	785b      	ldrb	r3, [r3, #1]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d000      	beq.n	801886c <USB_EPStartXfer+0xf48>
 801886a:	e082      	b.n	8018972 <USB_EPStartXfer+0x104e>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	21cc      	movs	r1, #204	@ 0xcc
 8018870:	187a      	adds	r2, r7, r1
 8018872:	6013      	str	r3, [r2, #0]
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	2250      	movs	r2, #80	@ 0x50
 8018878:	5a9b      	ldrh	r3, [r3, r2]
 801887a:	b29b      	uxth	r3, r3
 801887c:	001a      	movs	r2, r3
 801887e:	187b      	adds	r3, r7, r1
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	189b      	adds	r3, r3, r2
 8018884:	187a      	adds	r2, r7, r1
 8018886:	6013      	str	r3, [r2, #0]
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	00da      	lsls	r2, r3, #3
 801888e:	187b      	adds	r3, r7, r1
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	18d3      	adds	r3, r2, r3
 8018894:	4a92      	ldr	r2, [pc, #584]	@ (8018ae0 <USB_EPStartXfer+0x11bc>)
 8018896:	4694      	mov	ip, r2
 8018898:	4463      	add	r3, ip
 801889a:	21c8      	movs	r1, #200	@ 0xc8
 801889c:	187a      	adds	r2, r7, r1
 801889e:	6013      	str	r3, [r2, #0]
 80188a0:	187b      	adds	r3, r7, r1
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	881b      	ldrh	r3, [r3, #0]
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	059b      	lsls	r3, r3, #22
 80188aa:	0d9b      	lsrs	r3, r3, #22
 80188ac:	b29a      	uxth	r2, r3
 80188ae:	187b      	adds	r3, r7, r1
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	801a      	strh	r2, [r3, #0]
 80188b4:	1d7b      	adds	r3, r7, #5
 80188b6:	33ff      	adds	r3, #255	@ 0xff
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80188bc:	d925      	bls.n	801890a <USB_EPStartXfer+0xfe6>
 80188be:	1d7b      	adds	r3, r7, #5
 80188c0:	33ff      	adds	r3, #255	@ 0xff
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	095b      	lsrs	r3, r3, #5
 80188c6:	21dc      	movs	r1, #220	@ 0xdc
 80188c8:	187a      	adds	r2, r7, r1
 80188ca:	6013      	str	r3, [r2, #0]
 80188cc:	1d7b      	adds	r3, r7, #5
 80188ce:	33ff      	adds	r3, #255	@ 0xff
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	221f      	movs	r2, #31
 80188d4:	4013      	ands	r3, r2
 80188d6:	d104      	bne.n	80188e2 <USB_EPStartXfer+0xfbe>
 80188d8:	187b      	adds	r3, r7, r1
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	3b01      	subs	r3, #1
 80188de:	187a      	adds	r2, r7, r1
 80188e0:	6013      	str	r3, [r2, #0]
 80188e2:	21c8      	movs	r1, #200	@ 0xc8
 80188e4:	187b      	adds	r3, r7, r1
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	881b      	ldrh	r3, [r3, #0]
 80188ea:	b29a      	uxth	r2, r3
 80188ec:	23dc      	movs	r3, #220	@ 0xdc
 80188ee:	18fb      	adds	r3, r7, r3
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	b29b      	uxth	r3, r3
 80188f4:	029b      	lsls	r3, r3, #10
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	4313      	orrs	r3, r2
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	4a79      	ldr	r2, [pc, #484]	@ (8018ae4 <USB_EPStartXfer+0x11c0>)
 80188fe:	4313      	orrs	r3, r2
 8018900:	b29a      	uxth	r2, r3
 8018902:	187b      	adds	r3, r7, r1
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	801a      	strh	r2, [r3, #0]
 8018908:	e058      	b.n	80189bc <USB_EPStartXfer+0x1098>
 801890a:	1d7b      	adds	r3, r7, #5
 801890c:	33ff      	adds	r3, #255	@ 0xff
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d10b      	bne.n	801892c <USB_EPStartXfer+0x1008>
 8018914:	21c8      	movs	r1, #200	@ 0xc8
 8018916:	187b      	adds	r3, r7, r1
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	881b      	ldrh	r3, [r3, #0]
 801891c:	b29b      	uxth	r3, r3
 801891e:	4a71      	ldr	r2, [pc, #452]	@ (8018ae4 <USB_EPStartXfer+0x11c0>)
 8018920:	4313      	orrs	r3, r2
 8018922:	b29a      	uxth	r2, r3
 8018924:	187b      	adds	r3, r7, r1
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	801a      	strh	r2, [r3, #0]
 801892a:	e047      	b.n	80189bc <USB_EPStartXfer+0x1098>
 801892c:	1d7b      	adds	r3, r7, #5
 801892e:	33ff      	adds	r3, #255	@ 0xff
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	085b      	lsrs	r3, r3, #1
 8018934:	21dc      	movs	r1, #220	@ 0xdc
 8018936:	187a      	adds	r2, r7, r1
 8018938:	6013      	str	r3, [r2, #0]
 801893a:	1d7b      	adds	r3, r7, #5
 801893c:	33ff      	adds	r3, #255	@ 0xff
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	2201      	movs	r2, #1
 8018942:	4013      	ands	r3, r2
 8018944:	d004      	beq.n	8018950 <USB_EPStartXfer+0x102c>
 8018946:	187b      	adds	r3, r7, r1
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	3301      	adds	r3, #1
 801894c:	187a      	adds	r2, r7, r1
 801894e:	6013      	str	r3, [r2, #0]
 8018950:	21c8      	movs	r1, #200	@ 0xc8
 8018952:	187b      	adds	r3, r7, r1
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	881b      	ldrh	r3, [r3, #0]
 8018958:	b29a      	uxth	r2, r3
 801895a:	23dc      	movs	r3, #220	@ 0xdc
 801895c:	18fb      	adds	r3, r7, r3
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	b29b      	uxth	r3, r3
 8018962:	029b      	lsls	r3, r3, #10
 8018964:	b29b      	uxth	r3, r3
 8018966:	4313      	orrs	r3, r2
 8018968:	b29a      	uxth	r2, r3
 801896a:	187b      	adds	r3, r7, r1
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	801a      	strh	r2, [r3, #0]
 8018970:	e024      	b.n	80189bc <USB_EPStartXfer+0x1098>
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	785b      	ldrb	r3, [r3, #1]
 8018976:	2b01      	cmp	r3, #1
 8018978:	d120      	bne.n	80189bc <USB_EPStartXfer+0x1098>
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	21d4      	movs	r1, #212	@ 0xd4
 801897e:	187a      	adds	r2, r7, r1
 8018980:	6013      	str	r3, [r2, #0]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	2250      	movs	r2, #80	@ 0x50
 8018986:	5a9b      	ldrh	r3, [r3, r2]
 8018988:	b29b      	uxth	r3, r3
 801898a:	001a      	movs	r2, r3
 801898c:	187b      	adds	r3, r7, r1
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	189b      	adds	r3, r3, r2
 8018992:	187a      	adds	r2, r7, r1
 8018994:	6013      	str	r3, [r2, #0]
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	781b      	ldrb	r3, [r3, #0]
 801899a:	00da      	lsls	r2, r3, #3
 801899c:	187b      	adds	r3, r7, r1
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	18d3      	adds	r3, r2, r3
 80189a2:	4a4f      	ldr	r2, [pc, #316]	@ (8018ae0 <USB_EPStartXfer+0x11bc>)
 80189a4:	4694      	mov	ip, r2
 80189a6:	4463      	add	r3, ip
 80189a8:	21d0      	movs	r1, #208	@ 0xd0
 80189aa:	187a      	adds	r2, r7, r1
 80189ac:	6013      	str	r3, [r2, #0]
 80189ae:	1d7b      	adds	r3, r7, #5
 80189b0:	33ff      	adds	r3, #255	@ 0xff
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	b29a      	uxth	r2, r3
 80189b6:	187b      	adds	r3, r7, r1
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	801a      	strh	r2, [r3, #0]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	22c4      	movs	r2, #196	@ 0xc4
 80189c0:	18ba      	adds	r2, r7, r2
 80189c2:	6013      	str	r3, [r2, #0]
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	785b      	ldrb	r3, [r3, #1]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d000      	beq.n	80189ce <USB_EPStartXfer+0x10aa>
 80189cc:	e08c      	b.n	8018ae8 <USB_EPStartXfer+0x11c4>
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	21bc      	movs	r1, #188	@ 0xbc
 80189d2:	187a      	adds	r2, r7, r1
 80189d4:	6013      	str	r3, [r2, #0]
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2250      	movs	r2, #80	@ 0x50
 80189da:	5a9b      	ldrh	r3, [r3, r2]
 80189dc:	b29b      	uxth	r3, r3
 80189de:	001a      	movs	r2, r3
 80189e0:	187b      	adds	r3, r7, r1
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	189b      	adds	r3, r3, r2
 80189e6:	187a      	adds	r2, r7, r1
 80189e8:	6013      	str	r3, [r2, #0]
 80189ea:	683b      	ldr	r3, [r7, #0]
 80189ec:	781b      	ldrb	r3, [r3, #0]
 80189ee:	00da      	lsls	r2, r3, #3
 80189f0:	187b      	adds	r3, r7, r1
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	18d3      	adds	r3, r2, r3
 80189f6:	4a37      	ldr	r2, [pc, #220]	@ (8018ad4 <USB_EPStartXfer+0x11b0>)
 80189f8:	4694      	mov	ip, r2
 80189fa:	4463      	add	r3, ip
 80189fc:	21b8      	movs	r1, #184	@ 0xb8
 80189fe:	187a      	adds	r2, r7, r1
 8018a00:	6013      	str	r3, [r2, #0]
 8018a02:	187b      	adds	r3, r7, r1
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	881b      	ldrh	r3, [r3, #0]
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	059b      	lsls	r3, r3, #22
 8018a0c:	0d9b      	lsrs	r3, r3, #22
 8018a0e:	b29a      	uxth	r2, r3
 8018a10:	187b      	adds	r3, r7, r1
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	801a      	strh	r2, [r3, #0]
 8018a16:	1d7b      	adds	r3, r7, #5
 8018a18:	33ff      	adds	r3, #255	@ 0xff
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8018a1e:	d925      	bls.n	8018a6c <USB_EPStartXfer+0x1148>
 8018a20:	1d7b      	adds	r3, r7, #5
 8018a22:	33ff      	adds	r3, #255	@ 0xff
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	095b      	lsrs	r3, r3, #5
 8018a28:	21d8      	movs	r1, #216	@ 0xd8
 8018a2a:	187a      	adds	r2, r7, r1
 8018a2c:	6013      	str	r3, [r2, #0]
 8018a2e:	1d7b      	adds	r3, r7, #5
 8018a30:	33ff      	adds	r3, #255	@ 0xff
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	221f      	movs	r2, #31
 8018a36:	4013      	ands	r3, r2
 8018a38:	d104      	bne.n	8018a44 <USB_EPStartXfer+0x1120>
 8018a3a:	187b      	adds	r3, r7, r1
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	3b01      	subs	r3, #1
 8018a40:	187a      	adds	r2, r7, r1
 8018a42:	6013      	str	r3, [r2, #0]
 8018a44:	21b8      	movs	r1, #184	@ 0xb8
 8018a46:	187b      	adds	r3, r7, r1
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	881b      	ldrh	r3, [r3, #0]
 8018a4c:	b29a      	uxth	r2, r3
 8018a4e:	23d8      	movs	r3, #216	@ 0xd8
 8018a50:	18fb      	adds	r3, r7, r3
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	b29b      	uxth	r3, r3
 8018a56:	029b      	lsls	r3, r3, #10
 8018a58:	b29b      	uxth	r3, r3
 8018a5a:	4313      	orrs	r3, r2
 8018a5c:	b29b      	uxth	r3, r3
 8018a5e:	4a21      	ldr	r2, [pc, #132]	@ (8018ae4 <USB_EPStartXfer+0x11c0>)
 8018a60:	4313      	orrs	r3, r2
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	187b      	adds	r3, r7, r1
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	801a      	strh	r2, [r3, #0]
 8018a6a:	e062      	b.n	8018b32 <USB_EPStartXfer+0x120e>
 8018a6c:	1d7b      	adds	r3, r7, #5
 8018a6e:	33ff      	adds	r3, #255	@ 0xff
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d10b      	bne.n	8018a8e <USB_EPStartXfer+0x116a>
 8018a76:	21b8      	movs	r1, #184	@ 0xb8
 8018a78:	187b      	adds	r3, r7, r1
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	881b      	ldrh	r3, [r3, #0]
 8018a7e:	b29b      	uxth	r3, r3
 8018a80:	4a18      	ldr	r2, [pc, #96]	@ (8018ae4 <USB_EPStartXfer+0x11c0>)
 8018a82:	4313      	orrs	r3, r2
 8018a84:	b29a      	uxth	r2, r3
 8018a86:	187b      	adds	r3, r7, r1
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	801a      	strh	r2, [r3, #0]
 8018a8c:	e051      	b.n	8018b32 <USB_EPStartXfer+0x120e>
 8018a8e:	1d7b      	adds	r3, r7, #5
 8018a90:	33ff      	adds	r3, #255	@ 0xff
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	085b      	lsrs	r3, r3, #1
 8018a96:	21d8      	movs	r1, #216	@ 0xd8
 8018a98:	187a      	adds	r2, r7, r1
 8018a9a:	6013      	str	r3, [r2, #0]
 8018a9c:	1d7b      	adds	r3, r7, #5
 8018a9e:	33ff      	adds	r3, #255	@ 0xff
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	2201      	movs	r2, #1
 8018aa4:	4013      	ands	r3, r2
 8018aa6:	d004      	beq.n	8018ab2 <USB_EPStartXfer+0x118e>
 8018aa8:	187b      	adds	r3, r7, r1
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	3301      	adds	r3, #1
 8018aae:	187a      	adds	r2, r7, r1
 8018ab0:	6013      	str	r3, [r2, #0]
 8018ab2:	21b8      	movs	r1, #184	@ 0xb8
 8018ab4:	187b      	adds	r3, r7, r1
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	881b      	ldrh	r3, [r3, #0]
 8018aba:	b29a      	uxth	r2, r3
 8018abc:	23d8      	movs	r3, #216	@ 0xd8
 8018abe:	18fb      	adds	r3, r7, r3
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	b29b      	uxth	r3, r3
 8018ac4:	029b      	lsls	r3, r3, #10
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	4313      	orrs	r3, r2
 8018aca:	b29a      	uxth	r2, r3
 8018acc:	187b      	adds	r3, r7, r1
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	801a      	strh	r2, [r3, #0]
 8018ad2:	e02e      	b.n	8018b32 <USB_EPStartXfer+0x120e>
 8018ad4:	00000406 	.word	0x00000406
 8018ad8:	ffff8f8f 	.word	0xffff8f8f
 8018adc:	ffff80c0 	.word	0xffff80c0
 8018ae0:	00000402 	.word	0x00000402
 8018ae4:	ffff8000 	.word	0xffff8000
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	785b      	ldrb	r3, [r3, #1]
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	d120      	bne.n	8018b32 <USB_EPStartXfer+0x120e>
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2250      	movs	r2, #80	@ 0x50
 8018af4:	5a9b      	ldrh	r3, [r3, r2]
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	001a      	movs	r2, r3
 8018afa:	21c4      	movs	r1, #196	@ 0xc4
 8018afc:	187b      	adds	r3, r7, r1
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	189b      	adds	r3, r3, r2
 8018b02:	187a      	adds	r2, r7, r1
 8018b04:	6013      	str	r3, [r2, #0]
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	781b      	ldrb	r3, [r3, #0]
 8018b0a:	00da      	lsls	r2, r3, #3
 8018b0c:	187b      	adds	r3, r7, r1
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	18d3      	adds	r3, r2, r3
 8018b12:	4a1d      	ldr	r2, [pc, #116]	@ (8018b88 <USB_EPStartXfer+0x1264>)
 8018b14:	4694      	mov	ip, r2
 8018b16:	4463      	add	r3, ip
 8018b18:	21c0      	movs	r1, #192	@ 0xc0
 8018b1a:	187a      	adds	r2, r7, r1
 8018b1c:	6013      	str	r3, [r2, #0]
 8018b1e:	1d7b      	adds	r3, r7, #5
 8018b20:	33ff      	adds	r3, #255	@ 0xff
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	b29a      	uxth	r2, r3
 8018b26:	187b      	adds	r3, r7, r1
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	801a      	strh	r2, [r3, #0]
 8018b2c:	e001      	b.n	8018b32 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8018b2e:	2301      	movs	r3, #1
 8018b30:	e025      	b.n	8018b7e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018b32:	687a      	ldr	r2, [r7, #4]
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	18d3      	adds	r3, r2, r3
 8018b3c:	881b      	ldrh	r3, [r3, #0]
 8018b3e:	b29a      	uxth	r2, r3
 8018b40:	208a      	movs	r0, #138	@ 0x8a
 8018b42:	183b      	adds	r3, r7, r0
 8018b44:	4911      	ldr	r1, [pc, #68]	@ (8018b8c <USB_EPStartXfer+0x1268>)
 8018b46:	400a      	ands	r2, r1
 8018b48:	801a      	strh	r2, [r3, #0]
 8018b4a:	183b      	adds	r3, r7, r0
 8018b4c:	183a      	adds	r2, r7, r0
 8018b4e:	8812      	ldrh	r2, [r2, #0]
 8018b50:	2180      	movs	r1, #128	@ 0x80
 8018b52:	0149      	lsls	r1, r1, #5
 8018b54:	404a      	eors	r2, r1
 8018b56:	801a      	strh	r2, [r3, #0]
 8018b58:	183b      	adds	r3, r7, r0
 8018b5a:	183a      	adds	r2, r7, r0
 8018b5c:	8812      	ldrh	r2, [r2, #0]
 8018b5e:	2180      	movs	r1, #128	@ 0x80
 8018b60:	0189      	lsls	r1, r1, #6
 8018b62:	404a      	eors	r2, r1
 8018b64:	801a      	strh	r2, [r3, #0]
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	683b      	ldr	r3, [r7, #0]
 8018b6a:	781b      	ldrb	r3, [r3, #0]
 8018b6c:	009b      	lsls	r3, r3, #2
 8018b6e:	18d3      	adds	r3, r2, r3
 8018b70:	183a      	adds	r2, r7, r0
 8018b72:	8812      	ldrh	r2, [r2, #0]
 8018b74:	4906      	ldr	r1, [pc, #24]	@ (8018b90 <USB_EPStartXfer+0x126c>)
 8018b76:	430a      	orrs	r2, r1
 8018b78:	b292      	uxth	r2, r2
 8018b7a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8018b7c:	2300      	movs	r3, #0
}
 8018b7e:	0018      	movs	r0, r3
 8018b80:	46bd      	mov	sp, r7
 8018b82:	b043      	add	sp, #268	@ 0x10c
 8018b84:	bd90      	pop	{r4, r7, pc}
 8018b86:	46c0      	nop			@ (mov r8, r8)
 8018b88:	00000406 	.word	0x00000406
 8018b8c:	ffffbf8f 	.word	0xffffbf8f
 8018b90:	ffff8080 	.word	0xffff8080

08018b94 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b084      	sub	sp, #16
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
 8018b9c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8018b9e:	683b      	ldr	r3, [r7, #0]
 8018ba0:	785b      	ldrb	r3, [r3, #1]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d01d      	beq.n	8018be2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8018ba6:	687a      	ldr	r2, [r7, #4]
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	781b      	ldrb	r3, [r3, #0]
 8018bac:	009b      	lsls	r3, r3, #2
 8018bae:	18d3      	adds	r3, r2, r3
 8018bb0:	881b      	ldrh	r3, [r3, #0]
 8018bb2:	b29a      	uxth	r2, r3
 8018bb4:	200c      	movs	r0, #12
 8018bb6:	183b      	adds	r3, r7, r0
 8018bb8:	491b      	ldr	r1, [pc, #108]	@ (8018c28 <USB_EPSetStall+0x94>)
 8018bba:	400a      	ands	r2, r1
 8018bbc:	801a      	strh	r2, [r3, #0]
 8018bbe:	183b      	adds	r3, r7, r0
 8018bc0:	183a      	adds	r2, r7, r0
 8018bc2:	8812      	ldrh	r2, [r2, #0]
 8018bc4:	2110      	movs	r1, #16
 8018bc6:	404a      	eors	r2, r1
 8018bc8:	801a      	strh	r2, [r3, #0]
 8018bca:	687a      	ldr	r2, [r7, #4]
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	781b      	ldrb	r3, [r3, #0]
 8018bd0:	009b      	lsls	r3, r3, #2
 8018bd2:	18d3      	adds	r3, r2, r3
 8018bd4:	183a      	adds	r2, r7, r0
 8018bd6:	8812      	ldrh	r2, [r2, #0]
 8018bd8:	4914      	ldr	r1, [pc, #80]	@ (8018c2c <USB_EPSetStall+0x98>)
 8018bda:	430a      	orrs	r2, r1
 8018bdc:	b292      	uxth	r2, r2
 8018bde:	801a      	strh	r2, [r3, #0]
 8018be0:	e01d      	b.n	8018c1e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8018be2:	687a      	ldr	r2, [r7, #4]
 8018be4:	683b      	ldr	r3, [r7, #0]
 8018be6:	781b      	ldrb	r3, [r3, #0]
 8018be8:	009b      	lsls	r3, r3, #2
 8018bea:	18d3      	adds	r3, r2, r3
 8018bec:	881b      	ldrh	r3, [r3, #0]
 8018bee:	b29a      	uxth	r2, r3
 8018bf0:	200e      	movs	r0, #14
 8018bf2:	183b      	adds	r3, r7, r0
 8018bf4:	490e      	ldr	r1, [pc, #56]	@ (8018c30 <USB_EPSetStall+0x9c>)
 8018bf6:	400a      	ands	r2, r1
 8018bf8:	801a      	strh	r2, [r3, #0]
 8018bfa:	183b      	adds	r3, r7, r0
 8018bfc:	183a      	adds	r2, r7, r0
 8018bfe:	8812      	ldrh	r2, [r2, #0]
 8018c00:	2180      	movs	r1, #128	@ 0x80
 8018c02:	0149      	lsls	r1, r1, #5
 8018c04:	404a      	eors	r2, r1
 8018c06:	801a      	strh	r2, [r3, #0]
 8018c08:	687a      	ldr	r2, [r7, #4]
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	781b      	ldrb	r3, [r3, #0]
 8018c0e:	009b      	lsls	r3, r3, #2
 8018c10:	18d3      	adds	r3, r2, r3
 8018c12:	183a      	adds	r2, r7, r0
 8018c14:	8812      	ldrh	r2, [r2, #0]
 8018c16:	4905      	ldr	r1, [pc, #20]	@ (8018c2c <USB_EPSetStall+0x98>)
 8018c18:	430a      	orrs	r2, r1
 8018c1a:	b292      	uxth	r2, r2
 8018c1c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8018c1e:	2300      	movs	r3, #0
}
 8018c20:	0018      	movs	r0, r3
 8018c22:	46bd      	mov	sp, r7
 8018c24:	b004      	add	sp, #16
 8018c26:	bd80      	pop	{r7, pc}
 8018c28:	ffff8fbf 	.word	0xffff8fbf
 8018c2c:	ffff8080 	.word	0xffff8080
 8018c30:	ffffbf8f 	.word	0xffffbf8f

08018c34 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b086      	sub	sp, #24
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	7b1b      	ldrb	r3, [r3, #12]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d000      	beq.n	8018c48 <USB_EPClearStall+0x14>
 8018c46:	e095      	b.n	8018d74 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8018c48:	683b      	ldr	r3, [r7, #0]
 8018c4a:	785b      	ldrb	r3, [r3, #1]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d046      	beq.n	8018cde <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018c50:	687a      	ldr	r2, [r7, #4]
 8018c52:	683b      	ldr	r3, [r7, #0]
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	009b      	lsls	r3, r3, #2
 8018c58:	18d2      	adds	r2, r2, r3
 8018c5a:	2110      	movs	r1, #16
 8018c5c:	187b      	adds	r3, r7, r1
 8018c5e:	8812      	ldrh	r2, [r2, #0]
 8018c60:	801a      	strh	r2, [r3, #0]
 8018c62:	187b      	adds	r3, r7, r1
 8018c64:	881b      	ldrh	r3, [r3, #0]
 8018c66:	2240      	movs	r2, #64	@ 0x40
 8018c68:	4013      	ands	r3, r2
 8018c6a:	d016      	beq.n	8018c9a <USB_EPClearStall+0x66>
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	683b      	ldr	r3, [r7, #0]
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	009b      	lsls	r3, r3, #2
 8018c74:	18d3      	adds	r3, r2, r3
 8018c76:	881b      	ldrh	r3, [r3, #0]
 8018c78:	b29a      	uxth	r2, r3
 8018c7a:	200e      	movs	r0, #14
 8018c7c:	183b      	adds	r3, r7, r0
 8018c7e:	4940      	ldr	r1, [pc, #256]	@ (8018d80 <USB_EPClearStall+0x14c>)
 8018c80:	400a      	ands	r2, r1
 8018c82:	801a      	strh	r2, [r3, #0]
 8018c84:	687a      	ldr	r2, [r7, #4]
 8018c86:	683b      	ldr	r3, [r7, #0]
 8018c88:	781b      	ldrb	r3, [r3, #0]
 8018c8a:	009b      	lsls	r3, r3, #2
 8018c8c:	18d3      	adds	r3, r2, r3
 8018c8e:	183a      	adds	r2, r7, r0
 8018c90:	8812      	ldrh	r2, [r2, #0]
 8018c92:	493c      	ldr	r1, [pc, #240]	@ (8018d84 <USB_EPClearStall+0x150>)
 8018c94:	430a      	orrs	r2, r1
 8018c96:	b292      	uxth	r2, r2
 8018c98:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	78db      	ldrb	r3, [r3, #3]
 8018c9e:	2b01      	cmp	r3, #1
 8018ca0:	d068      	beq.n	8018d74 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018ca2:	687a      	ldr	r2, [r7, #4]
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	009b      	lsls	r3, r3, #2
 8018caa:	18d3      	adds	r3, r2, r3
 8018cac:	881b      	ldrh	r3, [r3, #0]
 8018cae:	b29a      	uxth	r2, r3
 8018cb0:	200c      	movs	r0, #12
 8018cb2:	183b      	adds	r3, r7, r0
 8018cb4:	4934      	ldr	r1, [pc, #208]	@ (8018d88 <USB_EPClearStall+0x154>)
 8018cb6:	400a      	ands	r2, r1
 8018cb8:	801a      	strh	r2, [r3, #0]
 8018cba:	183b      	adds	r3, r7, r0
 8018cbc:	183a      	adds	r2, r7, r0
 8018cbe:	8812      	ldrh	r2, [r2, #0]
 8018cc0:	2120      	movs	r1, #32
 8018cc2:	404a      	eors	r2, r1
 8018cc4:	801a      	strh	r2, [r3, #0]
 8018cc6:	687a      	ldr	r2, [r7, #4]
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	009b      	lsls	r3, r3, #2
 8018cce:	18d3      	adds	r3, r2, r3
 8018cd0:	183a      	adds	r2, r7, r0
 8018cd2:	8812      	ldrh	r2, [r2, #0]
 8018cd4:	492d      	ldr	r1, [pc, #180]	@ (8018d8c <USB_EPClearStall+0x158>)
 8018cd6:	430a      	orrs	r2, r1
 8018cd8:	b292      	uxth	r2, r2
 8018cda:	801a      	strh	r2, [r3, #0]
 8018cdc:	e04a      	b.n	8018d74 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018cde:	687a      	ldr	r2, [r7, #4]
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	009b      	lsls	r3, r3, #2
 8018ce6:	18d2      	adds	r2, r2, r3
 8018ce8:	2116      	movs	r1, #22
 8018cea:	187b      	adds	r3, r7, r1
 8018cec:	8812      	ldrh	r2, [r2, #0]
 8018cee:	801a      	strh	r2, [r3, #0]
 8018cf0:	187b      	adds	r3, r7, r1
 8018cf2:	881a      	ldrh	r2, [r3, #0]
 8018cf4:	2380      	movs	r3, #128	@ 0x80
 8018cf6:	01db      	lsls	r3, r3, #7
 8018cf8:	4013      	ands	r3, r2
 8018cfa:	d016      	beq.n	8018d2a <USB_EPClearStall+0xf6>
 8018cfc:	687a      	ldr	r2, [r7, #4]
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	009b      	lsls	r3, r3, #2
 8018d04:	18d3      	adds	r3, r2, r3
 8018d06:	881b      	ldrh	r3, [r3, #0]
 8018d08:	b29a      	uxth	r2, r3
 8018d0a:	2014      	movs	r0, #20
 8018d0c:	183b      	adds	r3, r7, r0
 8018d0e:	491c      	ldr	r1, [pc, #112]	@ (8018d80 <USB_EPClearStall+0x14c>)
 8018d10:	400a      	ands	r2, r1
 8018d12:	801a      	strh	r2, [r3, #0]
 8018d14:	687a      	ldr	r2, [r7, #4]
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	009b      	lsls	r3, r3, #2
 8018d1c:	18d3      	adds	r3, r2, r3
 8018d1e:	183a      	adds	r2, r7, r0
 8018d20:	8812      	ldrh	r2, [r2, #0]
 8018d22:	491b      	ldr	r1, [pc, #108]	@ (8018d90 <USB_EPClearStall+0x15c>)
 8018d24:	430a      	orrs	r2, r1
 8018d26:	b292      	uxth	r2, r2
 8018d28:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018d2a:	687a      	ldr	r2, [r7, #4]
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	781b      	ldrb	r3, [r3, #0]
 8018d30:	009b      	lsls	r3, r3, #2
 8018d32:	18d3      	adds	r3, r2, r3
 8018d34:	881b      	ldrh	r3, [r3, #0]
 8018d36:	b29a      	uxth	r2, r3
 8018d38:	2012      	movs	r0, #18
 8018d3a:	183b      	adds	r3, r7, r0
 8018d3c:	4915      	ldr	r1, [pc, #84]	@ (8018d94 <USB_EPClearStall+0x160>)
 8018d3e:	400a      	ands	r2, r1
 8018d40:	801a      	strh	r2, [r3, #0]
 8018d42:	183b      	adds	r3, r7, r0
 8018d44:	183a      	adds	r2, r7, r0
 8018d46:	8812      	ldrh	r2, [r2, #0]
 8018d48:	2180      	movs	r1, #128	@ 0x80
 8018d4a:	0149      	lsls	r1, r1, #5
 8018d4c:	404a      	eors	r2, r1
 8018d4e:	801a      	strh	r2, [r3, #0]
 8018d50:	183b      	adds	r3, r7, r0
 8018d52:	183a      	adds	r2, r7, r0
 8018d54:	8812      	ldrh	r2, [r2, #0]
 8018d56:	2180      	movs	r1, #128	@ 0x80
 8018d58:	0189      	lsls	r1, r1, #6
 8018d5a:	404a      	eors	r2, r1
 8018d5c:	801a      	strh	r2, [r3, #0]
 8018d5e:	687a      	ldr	r2, [r7, #4]
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	009b      	lsls	r3, r3, #2
 8018d66:	18d3      	adds	r3, r2, r3
 8018d68:	183a      	adds	r2, r7, r0
 8018d6a:	8812      	ldrh	r2, [r2, #0]
 8018d6c:	4907      	ldr	r1, [pc, #28]	@ (8018d8c <USB_EPClearStall+0x158>)
 8018d6e:	430a      	orrs	r2, r1
 8018d70:	b292      	uxth	r2, r2
 8018d72:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8018d74:	2300      	movs	r3, #0
}
 8018d76:	0018      	movs	r0, r3
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	b006      	add	sp, #24
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	46c0      	nop			@ (mov r8, r8)
 8018d80:	ffff8f8f 	.word	0xffff8f8f
 8018d84:	ffff80c0 	.word	0xffff80c0
 8018d88:	ffff8fbf 	.word	0xffff8fbf
 8018d8c:	ffff8080 	.word	0xffff8080
 8018d90:	ffffc080 	.word	0xffffc080
 8018d94:	ffffbf8f 	.word	0xffffbf8f

08018d98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b082      	sub	sp, #8
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
 8018da0:	000a      	movs	r2, r1
 8018da2:	1cfb      	adds	r3, r7, #3
 8018da4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8018da6:	1cfb      	adds	r3, r7, #3
 8018da8:	781b      	ldrb	r3, [r3, #0]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d103      	bne.n	8018db6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	224c      	movs	r2, #76	@ 0x4c
 8018db2:	2180      	movs	r1, #128	@ 0x80
 8018db4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8018db6:	2300      	movs	r3, #0
}
 8018db8:	0018      	movs	r0, r3
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	b002      	add	sp, #8
 8018dbe:	bd80      	pop	{r7, pc}

08018dc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b082      	sub	sp, #8
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2258      	movs	r2, #88	@ 0x58
 8018dcc:	5a9b      	ldrh	r3, [r3, r2]
 8018dce:	b29b      	uxth	r3, r3
 8018dd0:	4a05      	ldr	r2, [pc, #20]	@ (8018de8 <USB_DevConnect+0x28>)
 8018dd2:	4313      	orrs	r3, r2
 8018dd4:	b299      	uxth	r1, r3
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	2258      	movs	r2, #88	@ 0x58
 8018dda:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018ddc:	2300      	movs	r3, #0
}
 8018dde:	0018      	movs	r0, r3
 8018de0:	46bd      	mov	sp, r7
 8018de2:	b002      	add	sp, #8
 8018de4:	bd80      	pop	{r7, pc}
 8018de6:	46c0      	nop			@ (mov r8, r8)
 8018de8:	ffff8000 	.word	0xffff8000

08018dec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b084      	sub	sp, #16
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2244      	movs	r2, #68	@ 0x44
 8018df8:	5a9b      	ldrh	r3, [r3, r2]
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8018dfe:	68fb      	ldr	r3, [r7, #12]
}
 8018e00:	0018      	movs	r0, r3
 8018e02:	46bd      	mov	sp, r7
 8018e04:	b004      	add	sp, #16
 8018e06:	bd80      	pop	{r7, pc}

08018e08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b08a      	sub	sp, #40	@ 0x28
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	60f8      	str	r0, [r7, #12]
 8018e10:	60b9      	str	r1, [r7, #8]
 8018e12:	0019      	movs	r1, r3
 8018e14:	1dbb      	adds	r3, r7, #6
 8018e16:	801a      	strh	r2, [r3, #0]
 8018e18:	1d3b      	adds	r3, r7, #4
 8018e1a:	1c0a      	adds	r2, r1, #0
 8018e1c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8018e1e:	1d3b      	adds	r3, r7, #4
 8018e20:	881b      	ldrh	r3, [r3, #0]
 8018e22:	3301      	adds	r3, #1
 8018e24:	085b      	lsrs	r3, r3, #1
 8018e26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8018e2c:	68bb      	ldr	r3, [r7, #8]
 8018e2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8018e30:	1dbb      	adds	r3, r7, #6
 8018e32:	881a      	ldrh	r2, [r3, #0]
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	18d3      	adds	r3, r2, r3
 8018e38:	2280      	movs	r2, #128	@ 0x80
 8018e3a:	00d2      	lsls	r2, r2, #3
 8018e3c:	4694      	mov	ip, r2
 8018e3e:	4463      	add	r3, ip
 8018e40:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8018e42:	69bb      	ldr	r3, [r7, #24]
 8018e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e46:	e020      	b.n	8018e8a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8018e48:	69fb      	ldr	r3, [r7, #28]
 8018e4a:	781a      	ldrb	r2, [r3, #0]
 8018e4c:	2112      	movs	r1, #18
 8018e4e:	187b      	adds	r3, r7, r1
 8018e50:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8018e52:	69fb      	ldr	r3, [r7, #28]
 8018e54:	3301      	adds	r3, #1
 8018e56:	781b      	ldrb	r3, [r3, #0]
 8018e58:	021b      	lsls	r3, r3, #8
 8018e5a:	b21a      	sxth	r2, r3
 8018e5c:	187b      	adds	r3, r7, r1
 8018e5e:	2000      	movs	r0, #0
 8018e60:	5e1b      	ldrsh	r3, [r3, r0]
 8018e62:	4313      	orrs	r3, r2
 8018e64:	b21a      	sxth	r2, r3
 8018e66:	187b      	adds	r3, r7, r1
 8018e68:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8018e6a:	6a3b      	ldr	r3, [r7, #32]
 8018e6c:	187a      	adds	r2, r7, r1
 8018e6e:	8812      	ldrh	r2, [r2, #0]
 8018e70:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8018e72:	6a3b      	ldr	r3, [r7, #32]
 8018e74:	3302      	adds	r3, #2
 8018e76:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8018e78:	69fb      	ldr	r3, [r7, #28]
 8018e7a:	3301      	adds	r3, #1
 8018e7c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8018e7e:	69fb      	ldr	r3, [r7, #28]
 8018e80:	3301      	adds	r3, #1
 8018e82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8018e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e86:	3b01      	subs	r3, #1
 8018e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d1db      	bne.n	8018e48 <USB_WritePMA+0x40>
  }
}
 8018e90:	46c0      	nop			@ (mov r8, r8)
 8018e92:	46c0      	nop			@ (mov r8, r8)
 8018e94:	46bd      	mov	sp, r7
 8018e96:	b00a      	add	sp, #40	@ 0x28
 8018e98:	bd80      	pop	{r7, pc}

08018e9a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8018e9a:	b580      	push	{r7, lr}
 8018e9c:	b08a      	sub	sp, #40	@ 0x28
 8018e9e:	af00      	add	r7, sp, #0
 8018ea0:	60f8      	str	r0, [r7, #12]
 8018ea2:	60b9      	str	r1, [r7, #8]
 8018ea4:	0019      	movs	r1, r3
 8018ea6:	1dbb      	adds	r3, r7, #6
 8018ea8:	801a      	strh	r2, [r3, #0]
 8018eaa:	1d3b      	adds	r3, r7, #4
 8018eac:	1c0a      	adds	r2, r1, #0
 8018eae:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8018eb0:	1d3b      	adds	r3, r7, #4
 8018eb2:	881b      	ldrh	r3, [r3, #0]
 8018eb4:	085b      	lsrs	r3, r3, #1
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8018ec2:	1dbb      	adds	r3, r7, #6
 8018ec4:	881a      	ldrh	r2, [r3, #0]
 8018ec6:	697b      	ldr	r3, [r7, #20]
 8018ec8:	18d3      	adds	r3, r2, r3
 8018eca:	2280      	movs	r2, #128	@ 0x80
 8018ecc:	00d2      	lsls	r2, r2, #3
 8018ece:	4694      	mov	ip, r2
 8018ed0:	4463      	add	r3, ip
 8018ed2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8018ed4:	69bb      	ldr	r3, [r7, #24]
 8018ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8018ed8:	e018      	b.n	8018f0c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8018eda:	6a3b      	ldr	r3, [r7, #32]
 8018edc:	881b      	ldrh	r3, [r3, #0]
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8018ee2:	6a3b      	ldr	r3, [r7, #32]
 8018ee4:	3302      	adds	r3, #2
 8018ee6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	b2da      	uxtb	r2, r3
 8018eec:	69fb      	ldr	r3, [r7, #28]
 8018eee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8018ef0:	69fb      	ldr	r3, [r7, #28]
 8018ef2:	3301      	adds	r3, #1
 8018ef4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	0a1b      	lsrs	r3, r3, #8
 8018efa:	b2da      	uxtb	r2, r3
 8018efc:	69fb      	ldr	r3, [r7, #28]
 8018efe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8018f00:	69fb      	ldr	r3, [r7, #28]
 8018f02:	3301      	adds	r3, #1
 8018f04:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8018f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f08:	3b01      	subs	r3, #1
 8018f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d1e3      	bne.n	8018eda <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8018f12:	1d3b      	adds	r3, r7, #4
 8018f14:	881b      	ldrh	r3, [r3, #0]
 8018f16:	2201      	movs	r2, #1
 8018f18:	4013      	ands	r3, r2
 8018f1a:	b29b      	uxth	r3, r3
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d007      	beq.n	8018f30 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8018f20:	6a3b      	ldr	r3, [r7, #32]
 8018f22:	881b      	ldrh	r3, [r3, #0]
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	b2da      	uxtb	r2, r3
 8018f2c:	69fb      	ldr	r3, [r7, #28]
 8018f2e:	701a      	strb	r2, [r3, #0]
  }
}
 8018f30:	46c0      	nop			@ (mov r8, r8)
 8018f32:	46bd      	mov	sp, r7
 8018f34:	b00a      	add	sp, #40	@ 0x28
 8018f36:	bd80      	pop	{r7, pc}

08018f38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b084      	sub	sp, #16
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	000a      	movs	r2, r1
 8018f42:	1cfb      	adds	r3, r7, #3
 8018f44:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8018f46:	230f      	movs	r3, #15
 8018f48:	18fb      	adds	r3, r7, r3
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	7c1b      	ldrb	r3, [r3, #16]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d116      	bne.n	8018f84 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018f56:	2380      	movs	r3, #128	@ 0x80
 8018f58:	009b      	lsls	r3, r3, #2
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	2202      	movs	r2, #2
 8018f5e:	2181      	movs	r1, #129	@ 0x81
 8018f60:	f002 f8eb 	bl	801b13a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	2201      	movs	r2, #1
 8018f68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018f6a:	2380      	movs	r3, #128	@ 0x80
 8018f6c:	009b      	lsls	r3, r3, #2
 8018f6e:	6878      	ldr	r0, [r7, #4]
 8018f70:	2202      	movs	r2, #2
 8018f72:	2101      	movs	r1, #1
 8018f74:	f002 f8e1 	bl	801b13a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	23b6      	movs	r3, #182	@ 0xb6
 8018f7c:	005b      	lsls	r3, r3, #1
 8018f7e:	2101      	movs	r1, #1
 8018f80:	50d1      	str	r1, [r2, r3]
 8018f82:	e013      	b.n	8018fac <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018f84:	6878      	ldr	r0, [r7, #4]
 8018f86:	2340      	movs	r3, #64	@ 0x40
 8018f88:	2202      	movs	r2, #2
 8018f8a:	2181      	movs	r1, #129	@ 0x81
 8018f8c:	f002 f8d5 	bl	801b13a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2201      	movs	r2, #1
 8018f94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	2340      	movs	r3, #64	@ 0x40
 8018f9a:	2202      	movs	r2, #2
 8018f9c:	2101      	movs	r1, #1
 8018f9e:	f002 f8cc 	bl	801b13a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018fa2:	687a      	ldr	r2, [r7, #4]
 8018fa4:	23b6      	movs	r3, #182	@ 0xb6
 8018fa6:	005b      	lsls	r3, r3, #1
 8018fa8:	2101      	movs	r1, #1
 8018faa:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018fac:	6878      	ldr	r0, [r7, #4]
 8018fae:	2308      	movs	r3, #8
 8018fb0:	2203      	movs	r2, #3
 8018fb2:	2182      	movs	r1, #130	@ 0x82
 8018fb4:	f002 f8c1 	bl	801b13a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2201      	movs	r2, #1
 8018fbc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8018fbe:	2387      	movs	r3, #135	@ 0x87
 8018fc0:	009b      	lsls	r3, r3, #2
 8018fc2:	0018      	movs	r0, r3
 8018fc4:	f002 fa52 	bl	801b46c <USBD_static_malloc>
 8018fc8:	0001      	movs	r1, r0
 8018fca:	687a      	ldr	r2, [r7, #4]
 8018fcc:	23ae      	movs	r3, #174	@ 0xae
 8018fce:	009b      	lsls	r3, r3, #2
 8018fd0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8018fd2:	687a      	ldr	r2, [r7, #4]
 8018fd4:	23ae      	movs	r3, #174	@ 0xae
 8018fd6:	009b      	lsls	r3, r3, #2
 8018fd8:	58d3      	ldr	r3, [r2, r3]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d104      	bne.n	8018fe8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8018fde:	230f      	movs	r3, #15
 8018fe0:	18fb      	adds	r3, r7, r3
 8018fe2:	2201      	movs	r2, #1
 8018fe4:	701a      	strb	r2, [r3, #0]
 8018fe6:	e02c      	b.n	8019042 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	23ae      	movs	r3, #174	@ 0xae
 8018fec:	009b      	lsls	r3, r3, #2
 8018fee:	58d3      	ldr	r3, [r2, r3]
 8018ff0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8018ff2:	687a      	ldr	r2, [r7, #4]
 8018ff4:	23af      	movs	r3, #175	@ 0xaf
 8018ff6:	009b      	lsls	r3, r3, #2
 8018ff8:	58d3      	ldr	r3, [r2, r3]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8018ffe:	68ba      	ldr	r2, [r7, #8]
 8019000:	2385      	movs	r3, #133	@ 0x85
 8019002:	009b      	lsls	r3, r3, #2
 8019004:	2100      	movs	r1, #0
 8019006:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8019008:	68ba      	ldr	r2, [r7, #8]
 801900a:	2386      	movs	r3, #134	@ 0x86
 801900c:	009b      	lsls	r3, r3, #2
 801900e:	2100      	movs	r1, #0
 8019010:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	7c1b      	ldrb	r3, [r3, #16]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d10a      	bne.n	8019030 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801901a:	68ba      	ldr	r2, [r7, #8]
 801901c:	2381      	movs	r3, #129	@ 0x81
 801901e:	009b      	lsls	r3, r3, #2
 8019020:	58d2      	ldr	r2, [r2, r3]
 8019022:	2380      	movs	r3, #128	@ 0x80
 8019024:	009b      	lsls	r3, r3, #2
 8019026:	6878      	ldr	r0, [r7, #4]
 8019028:	2101      	movs	r1, #1
 801902a:	f002 f9d1 	bl	801b3d0 <USBD_LL_PrepareReceive>
 801902e:	e008      	b.n	8019042 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019030:	68ba      	ldr	r2, [r7, #8]
 8019032:	2381      	movs	r3, #129	@ 0x81
 8019034:	009b      	lsls	r3, r3, #2
 8019036:	58d2      	ldr	r2, [r2, r3]
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	2340      	movs	r3, #64	@ 0x40
 801903c:	2101      	movs	r1, #1
 801903e:	f002 f9c7 	bl	801b3d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8019042:	230f      	movs	r3, #15
 8019044:	18fb      	adds	r3, r7, r3
 8019046:	781b      	ldrb	r3, [r3, #0]
}
 8019048:	0018      	movs	r0, r3
 801904a:	46bd      	mov	sp, r7
 801904c:	b004      	add	sp, #16
 801904e:	bd80      	pop	{r7, pc}

08019050 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b084      	sub	sp, #16
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	000a      	movs	r2, r1
 801905a:	1cfb      	adds	r3, r7, #3
 801905c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801905e:	230f      	movs	r3, #15
 8019060:	18fb      	adds	r3, r7, r3
 8019062:	2200      	movs	r2, #0
 8019064:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2181      	movs	r1, #129	@ 0x81
 801906a:	0018      	movs	r0, r3
 801906c:	f002 f89c 	bl	801b1a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	2200      	movs	r2, #0
 8019074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	2101      	movs	r1, #1
 801907a:	0018      	movs	r0, r3
 801907c:	f002 f894 	bl	801b1a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	23b6      	movs	r3, #182	@ 0xb6
 8019084:	005b      	lsls	r3, r3, #1
 8019086:	2100      	movs	r1, #0
 8019088:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	2182      	movs	r1, #130	@ 0x82
 801908e:	0018      	movs	r0, r3
 8019090:	f002 f88a 	bl	801b1a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2200      	movs	r2, #0
 8019098:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801909a:	687a      	ldr	r2, [r7, #4]
 801909c:	23ae      	movs	r3, #174	@ 0xae
 801909e:	009b      	lsls	r3, r3, #2
 80190a0:	58d3      	ldr	r3, [r2, r3]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d011      	beq.n	80190ca <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80190a6:	687a      	ldr	r2, [r7, #4]
 80190a8:	23af      	movs	r3, #175	@ 0xaf
 80190aa:	009b      	lsls	r3, r3, #2
 80190ac:	58d3      	ldr	r3, [r2, r3]
 80190ae:	685b      	ldr	r3, [r3, #4]
 80190b0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80190b2:	687a      	ldr	r2, [r7, #4]
 80190b4:	23ae      	movs	r3, #174	@ 0xae
 80190b6:	009b      	lsls	r3, r3, #2
 80190b8:	58d3      	ldr	r3, [r2, r3]
 80190ba:	0018      	movs	r0, r3
 80190bc:	f002 f9e2 	bl	801b484 <USBD_static_free>
    pdev->pClassData = NULL;
 80190c0:	687a      	ldr	r2, [r7, #4]
 80190c2:	23ae      	movs	r3, #174	@ 0xae
 80190c4:	009b      	lsls	r3, r3, #2
 80190c6:	2100      	movs	r1, #0
 80190c8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80190ca:	230f      	movs	r3, #15
 80190cc:	18fb      	adds	r3, r7, r3
 80190ce:	781b      	ldrb	r3, [r3, #0]
}
 80190d0:	0018      	movs	r0, r3
 80190d2:	46bd      	mov	sp, r7
 80190d4:	b004      	add	sp, #16
 80190d6:	bd80      	pop	{r7, pc}

080190d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b086      	sub	sp, #24
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
 80190e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80190e2:	687a      	ldr	r2, [r7, #4]
 80190e4:	23ae      	movs	r3, #174	@ 0xae
 80190e6:	009b      	lsls	r3, r3, #2
 80190e8:	58d3      	ldr	r3, [r2, r3]
 80190ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80190ec:	230f      	movs	r3, #15
 80190ee:	18fb      	adds	r3, r7, r3
 80190f0:	2200      	movs	r2, #0
 80190f2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80190f4:	230c      	movs	r3, #12
 80190f6:	18fb      	adds	r3, r7, r3
 80190f8:	2200      	movs	r2, #0
 80190fa:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80190fc:	2317      	movs	r3, #23
 80190fe:	18fb      	adds	r3, r7, r3
 8019100:	2200      	movs	r2, #0
 8019102:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	781b      	ldrb	r3, [r3, #0]
 8019108:	001a      	movs	r2, r3
 801910a:	2360      	movs	r3, #96	@ 0x60
 801910c:	4013      	ands	r3, r2
 801910e:	d03d      	beq.n	801918c <USBD_CDC_Setup+0xb4>
 8019110:	2b20      	cmp	r3, #32
 8019112:	d000      	beq.n	8019116 <USBD_CDC_Setup+0x3e>
 8019114:	e094      	b.n	8019240 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	88db      	ldrh	r3, [r3, #6]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d02b      	beq.n	8019176 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801911e:	683b      	ldr	r3, [r7, #0]
 8019120:	781b      	ldrb	r3, [r3, #0]
 8019122:	b25b      	sxtb	r3, r3
 8019124:	2b00      	cmp	r3, #0
 8019126:	da12      	bge.n	801914e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019128:	687a      	ldr	r2, [r7, #4]
 801912a:	23af      	movs	r3, #175	@ 0xaf
 801912c:	009b      	lsls	r3, r3, #2
 801912e:	58d3      	ldr	r3, [r2, r3]
 8019130:	689b      	ldr	r3, [r3, #8]
 8019132:	683a      	ldr	r2, [r7, #0]
 8019134:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8019136:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019138:	683a      	ldr	r2, [r7, #0]
 801913a:	88d2      	ldrh	r2, [r2, #6]
 801913c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801913e:	6939      	ldr	r1, [r7, #16]
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	88da      	ldrh	r2, [r3, #6]
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	0018      	movs	r0, r3
 8019148:	f001 fbaf 	bl	801a8aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801914c:	e083      	b.n	8019256 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	7859      	ldrb	r1, [r3, #1]
 8019152:	693a      	ldr	r2, [r7, #16]
 8019154:	2380      	movs	r3, #128	@ 0x80
 8019156:	009b      	lsls	r3, r3, #2
 8019158:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801915a:	683b      	ldr	r3, [r7, #0]
 801915c:	88db      	ldrh	r3, [r3, #6]
 801915e:	b2d9      	uxtb	r1, r3
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	4a40      	ldr	r2, [pc, #256]	@ (8019264 <USBD_CDC_Setup+0x18c>)
 8019164:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8019166:	6939      	ldr	r1, [r7, #16]
 8019168:	683b      	ldr	r3, [r7, #0]
 801916a:	88da      	ldrh	r2, [r3, #6]
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	0018      	movs	r0, r3
 8019170:	f001 fbce 	bl	801a910 <USBD_CtlPrepareRx>
      break;
 8019174:	e06f      	b.n	8019256 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019176:	687a      	ldr	r2, [r7, #4]
 8019178:	23af      	movs	r3, #175	@ 0xaf
 801917a:	009b      	lsls	r3, r3, #2
 801917c:	58d3      	ldr	r3, [r2, r3]
 801917e:	689b      	ldr	r3, [r3, #8]
 8019180:	683a      	ldr	r2, [r7, #0]
 8019182:	7850      	ldrb	r0, [r2, #1]
 8019184:	6839      	ldr	r1, [r7, #0]
 8019186:	2200      	movs	r2, #0
 8019188:	4798      	blx	r3
      break;
 801918a:	e064      	b.n	8019256 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801918c:	683b      	ldr	r3, [r7, #0]
 801918e:	785b      	ldrb	r3, [r3, #1]
 8019190:	2b0b      	cmp	r3, #11
 8019192:	d037      	beq.n	8019204 <USBD_CDC_Setup+0x12c>
 8019194:	dc47      	bgt.n	8019226 <USBD_CDC_Setup+0x14e>
 8019196:	2b00      	cmp	r3, #0
 8019198:	d002      	beq.n	80191a0 <USBD_CDC_Setup+0xc8>
 801919a:	2b0a      	cmp	r3, #10
 801919c:	d019      	beq.n	80191d2 <USBD_CDC_Setup+0xfa>
 801919e:	e042      	b.n	8019226 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80191a0:	687a      	ldr	r2, [r7, #4]
 80191a2:	23a7      	movs	r3, #167	@ 0xa7
 80191a4:	009b      	lsls	r3, r3, #2
 80191a6:	5cd3      	ldrb	r3, [r2, r3]
 80191a8:	2b03      	cmp	r3, #3
 80191aa:	d107      	bne.n	80191bc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80191ac:	230c      	movs	r3, #12
 80191ae:	18f9      	adds	r1, r7, r3
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2202      	movs	r2, #2
 80191b4:	0018      	movs	r0, r3
 80191b6:	f001 fb78 	bl	801a8aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80191ba:	e040      	b.n	801923e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80191bc:	683a      	ldr	r2, [r7, #0]
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	0011      	movs	r1, r2
 80191c2:	0018      	movs	r0, r3
 80191c4:	f001 faf3 	bl	801a7ae <USBD_CtlError>
            ret = USBD_FAIL;
 80191c8:	2317      	movs	r3, #23
 80191ca:	18fb      	adds	r3, r7, r3
 80191cc:	2202      	movs	r2, #2
 80191ce:	701a      	strb	r2, [r3, #0]
          break;
 80191d0:	e035      	b.n	801923e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80191d2:	687a      	ldr	r2, [r7, #4]
 80191d4:	23a7      	movs	r3, #167	@ 0xa7
 80191d6:	009b      	lsls	r3, r3, #2
 80191d8:	5cd3      	ldrb	r3, [r2, r3]
 80191da:	2b03      	cmp	r3, #3
 80191dc:	d107      	bne.n	80191ee <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80191de:	230f      	movs	r3, #15
 80191e0:	18f9      	adds	r1, r7, r3
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	2201      	movs	r2, #1
 80191e6:	0018      	movs	r0, r3
 80191e8:	f001 fb5f 	bl	801a8aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80191ec:	e027      	b.n	801923e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80191ee:	683a      	ldr	r2, [r7, #0]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	0011      	movs	r1, r2
 80191f4:	0018      	movs	r0, r3
 80191f6:	f001 fada 	bl	801a7ae <USBD_CtlError>
            ret = USBD_FAIL;
 80191fa:	2317      	movs	r3, #23
 80191fc:	18fb      	adds	r3, r7, r3
 80191fe:	2202      	movs	r2, #2
 8019200:	701a      	strb	r2, [r3, #0]
          break;
 8019202:	e01c      	b.n	801923e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	23a7      	movs	r3, #167	@ 0xa7
 8019208:	009b      	lsls	r3, r3, #2
 801920a:	5cd3      	ldrb	r3, [r2, r3]
 801920c:	2b03      	cmp	r3, #3
 801920e:	d015      	beq.n	801923c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8019210:	683a      	ldr	r2, [r7, #0]
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	0011      	movs	r1, r2
 8019216:	0018      	movs	r0, r3
 8019218:	f001 fac9 	bl	801a7ae <USBD_CtlError>
            ret = USBD_FAIL;
 801921c:	2317      	movs	r3, #23
 801921e:	18fb      	adds	r3, r7, r3
 8019220:	2202      	movs	r2, #2
 8019222:	701a      	strb	r2, [r3, #0]
          }
          break;
 8019224:	e00a      	b.n	801923c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8019226:	683a      	ldr	r2, [r7, #0]
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	0011      	movs	r1, r2
 801922c:	0018      	movs	r0, r3
 801922e:	f001 fabe 	bl	801a7ae <USBD_CtlError>
          ret = USBD_FAIL;
 8019232:	2317      	movs	r3, #23
 8019234:	18fb      	adds	r3, r7, r3
 8019236:	2202      	movs	r2, #2
 8019238:	701a      	strb	r2, [r3, #0]
          break;
 801923a:	e000      	b.n	801923e <USBD_CDC_Setup+0x166>
          break;
 801923c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801923e:	e00a      	b.n	8019256 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8019240:	683a      	ldr	r2, [r7, #0]
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	0011      	movs	r1, r2
 8019246:	0018      	movs	r0, r3
 8019248:	f001 fab1 	bl	801a7ae <USBD_CtlError>
      ret = USBD_FAIL;
 801924c:	2317      	movs	r3, #23
 801924e:	18fb      	adds	r3, r7, r3
 8019250:	2202      	movs	r2, #2
 8019252:	701a      	strb	r2, [r3, #0]
      break;
 8019254:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8019256:	2317      	movs	r3, #23
 8019258:	18fb      	adds	r3, r7, r3
 801925a:	781b      	ldrb	r3, [r3, #0]
}
 801925c:	0018      	movs	r0, r3
 801925e:	46bd      	mov	sp, r7
 8019260:	b006      	add	sp, #24
 8019262:	bd80      	pop	{r7, pc}
 8019264:	00000201 	.word	0x00000201

08019268 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b084      	sub	sp, #16
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	000a      	movs	r2, r1
 8019272:	1cfb      	adds	r3, r7, #3
 8019274:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	23ae      	movs	r3, #174	@ 0xae
 801927a:	009b      	lsls	r3, r3, #2
 801927c:	58d3      	ldr	r3, [r2, r3]
 801927e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8019280:	687a      	ldr	r2, [r7, #4]
 8019282:	23b0      	movs	r3, #176	@ 0xb0
 8019284:	009b      	lsls	r3, r3, #2
 8019286:	58d3      	ldr	r3, [r2, r3]
 8019288:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801928a:	687a      	ldr	r2, [r7, #4]
 801928c:	23ae      	movs	r3, #174	@ 0xae
 801928e:	009b      	lsls	r3, r3, #2
 8019290:	58d3      	ldr	r3, [r2, r3]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d03e      	beq.n	8019314 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8019296:	1cfb      	adds	r3, r7, #3
 8019298:	781a      	ldrb	r2, [r3, #0]
 801929a:	6879      	ldr	r1, [r7, #4]
 801929c:	0013      	movs	r3, r2
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	189b      	adds	r3, r3, r2
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	18cb      	adds	r3, r1, r3
 80192a6:	331c      	adds	r3, #28
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d02b      	beq.n	8019306 <USBD_CDC_DataIn+0x9e>
 80192ae:	1cfb      	adds	r3, r7, #3
 80192b0:	781a      	ldrb	r2, [r3, #0]
 80192b2:	6879      	ldr	r1, [r7, #4]
 80192b4:	0013      	movs	r3, r2
 80192b6:	009b      	lsls	r3, r3, #2
 80192b8:	189b      	adds	r3, r3, r2
 80192ba:	009b      	lsls	r3, r3, #2
 80192bc:	18cb      	adds	r3, r1, r3
 80192be:	331c      	adds	r3, #28
 80192c0:	6818      	ldr	r0, [r3, #0]
 80192c2:	1cfb      	adds	r3, r7, #3
 80192c4:	781a      	ldrb	r2, [r3, #0]
 80192c6:	68b9      	ldr	r1, [r7, #8]
 80192c8:	0013      	movs	r3, r2
 80192ca:	009b      	lsls	r3, r3, #2
 80192cc:	189b      	adds	r3, r3, r2
 80192ce:	00db      	lsls	r3, r3, #3
 80192d0:	18cb      	adds	r3, r1, r3
 80192d2:	3338      	adds	r3, #56	@ 0x38
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	0019      	movs	r1, r3
 80192d8:	f7e6 ffea 	bl	80002b0 <__aeabi_uidivmod>
 80192dc:	1e0b      	subs	r3, r1, #0
 80192de:	d112      	bne.n	8019306 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80192e0:	1cfb      	adds	r3, r7, #3
 80192e2:	781a      	ldrb	r2, [r3, #0]
 80192e4:	6879      	ldr	r1, [r7, #4]
 80192e6:	0013      	movs	r3, r2
 80192e8:	009b      	lsls	r3, r3, #2
 80192ea:	189b      	adds	r3, r3, r2
 80192ec:	009b      	lsls	r3, r3, #2
 80192ee:	18cb      	adds	r3, r1, r3
 80192f0:	331c      	adds	r3, #28
 80192f2:	2200      	movs	r2, #0
 80192f4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80192f6:	1cfb      	adds	r3, r7, #3
 80192f8:	7819      	ldrb	r1, [r3, #0]
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	2300      	movs	r3, #0
 80192fe:	2200      	movs	r2, #0
 8019300:	f002 f82f 	bl	801b362 <USBD_LL_Transmit>
 8019304:	e004      	b.n	8019310 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8019306:	68fa      	ldr	r2, [r7, #12]
 8019308:	2385      	movs	r3, #133	@ 0x85
 801930a:	009b      	lsls	r3, r3, #2
 801930c:	2100      	movs	r1, #0
 801930e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8019310:	2300      	movs	r3, #0
 8019312:	e000      	b.n	8019316 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8019314:	2302      	movs	r3, #2
  }
}
 8019316:	0018      	movs	r0, r3
 8019318:	46bd      	mov	sp, r7
 801931a:	b004      	add	sp, #16
 801931c:	bd80      	pop	{r7, pc}

0801931e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801931e:	b580      	push	{r7, lr}
 8019320:	b084      	sub	sp, #16
 8019322:	af00      	add	r7, sp, #0
 8019324:	6078      	str	r0, [r7, #4]
 8019326:	000a      	movs	r2, r1
 8019328:	1cfb      	adds	r3, r7, #3
 801932a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801932c:	687a      	ldr	r2, [r7, #4]
 801932e:	23ae      	movs	r3, #174	@ 0xae
 8019330:	009b      	lsls	r3, r3, #2
 8019332:	58d3      	ldr	r3, [r2, r3]
 8019334:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8019336:	1cfb      	adds	r3, r7, #3
 8019338:	781a      	ldrb	r2, [r3, #0]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	0011      	movs	r1, r2
 801933e:	0018      	movs	r0, r3
 8019340:	f002 f87d 	bl	801b43e <USBD_LL_GetRxDataSize>
 8019344:	0001      	movs	r1, r0
 8019346:	68fa      	ldr	r2, [r7, #12]
 8019348:	2383      	movs	r3, #131	@ 0x83
 801934a:	009b      	lsls	r3, r3, #2
 801934c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801934e:	687a      	ldr	r2, [r7, #4]
 8019350:	23ae      	movs	r3, #174	@ 0xae
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	58d3      	ldr	r3, [r2, r3]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d011      	beq.n	801937e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801935a:	687a      	ldr	r2, [r7, #4]
 801935c:	23af      	movs	r3, #175	@ 0xaf
 801935e:	009b      	lsls	r3, r3, #2
 8019360:	58d3      	ldr	r3, [r2, r3]
 8019362:	68da      	ldr	r2, [r3, #12]
 8019364:	68f9      	ldr	r1, [r7, #12]
 8019366:	2381      	movs	r3, #129	@ 0x81
 8019368:	009b      	lsls	r3, r3, #2
 801936a:	58c8      	ldr	r0, [r1, r3]
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	2183      	movs	r1, #131	@ 0x83
 8019370:	0089      	lsls	r1, r1, #2
 8019372:	468c      	mov	ip, r1
 8019374:	4463      	add	r3, ip
 8019376:	0019      	movs	r1, r3
 8019378:	4790      	blx	r2

    return USBD_OK;
 801937a:	2300      	movs	r3, #0
 801937c:	e000      	b.n	8019380 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801937e:	2302      	movs	r3, #2
  }
}
 8019380:	0018      	movs	r0, r3
 8019382:	46bd      	mov	sp, r7
 8019384:	b004      	add	sp, #16
 8019386:	bd80      	pop	{r7, pc}

08019388 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019388:	b590      	push	{r4, r7, lr}
 801938a:	b085      	sub	sp, #20
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019390:	687a      	ldr	r2, [r7, #4]
 8019392:	23ae      	movs	r3, #174	@ 0xae
 8019394:	009b      	lsls	r3, r3, #2
 8019396:	58d3      	ldr	r3, [r2, r3]
 8019398:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	23af      	movs	r3, #175	@ 0xaf
 801939e:	009b      	lsls	r3, r3, #2
 80193a0:	58d3      	ldr	r3, [r2, r3]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d018      	beq.n	80193d8 <USBD_CDC_EP0_RxReady+0x50>
 80193a6:	68fa      	ldr	r2, [r7, #12]
 80193a8:	2380      	movs	r3, #128	@ 0x80
 80193aa:	009b      	lsls	r3, r3, #2
 80193ac:	5cd3      	ldrb	r3, [r2, r3]
 80193ae:	2bff      	cmp	r3, #255	@ 0xff
 80193b0:	d012      	beq.n	80193d8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80193b2:	687a      	ldr	r2, [r7, #4]
 80193b4:	23af      	movs	r3, #175	@ 0xaf
 80193b6:	009b      	lsls	r3, r3, #2
 80193b8:	58d3      	ldr	r3, [r2, r3]
 80193ba:	689b      	ldr	r3, [r3, #8]
 80193bc:	68f9      	ldr	r1, [r7, #12]
 80193be:	2280      	movs	r2, #128	@ 0x80
 80193c0:	0092      	lsls	r2, r2, #2
 80193c2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80193c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80193c6:	68fa      	ldr	r2, [r7, #12]
 80193c8:	4c06      	ldr	r4, [pc, #24]	@ (80193e4 <USBD_CDC_EP0_RxReady+0x5c>)
 80193ca:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80193cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80193ce:	68fa      	ldr	r2, [r7, #12]
 80193d0:	2380      	movs	r3, #128	@ 0x80
 80193d2:	009b      	lsls	r3, r3, #2
 80193d4:	21ff      	movs	r1, #255	@ 0xff
 80193d6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80193d8:	2300      	movs	r3, #0
}
 80193da:	0018      	movs	r0, r3
 80193dc:	46bd      	mov	sp, r7
 80193de:	b005      	add	sp, #20
 80193e0:	bd90      	pop	{r4, r7, pc}
 80193e2:	46c0      	nop			@ (mov r8, r8)
 80193e4:	00000201 	.word	0x00000201

080193e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2243      	movs	r2, #67	@ 0x43
 80193f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80193f6:	4b02      	ldr	r3, [pc, #8]	@ (8019400 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80193f8:	0018      	movs	r0, r3
 80193fa:	46bd      	mov	sp, r7
 80193fc:	b002      	add	sp, #8
 80193fe:	bd80      	pop	{r7, pc}
 8019400:	20000168 	.word	0x20000168

08019404 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	2243      	movs	r2, #67	@ 0x43
 8019410:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8019412:	4b02      	ldr	r3, [pc, #8]	@ (801941c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8019414:	0018      	movs	r0, r3
 8019416:	46bd      	mov	sp, r7
 8019418:	b002      	add	sp, #8
 801941a:	bd80      	pop	{r7, pc}
 801941c:	20000124 	.word	0x20000124

08019420 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b082      	sub	sp, #8
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	2243      	movs	r2, #67	@ 0x43
 801942c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801942e:	4b02      	ldr	r3, [pc, #8]	@ (8019438 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8019430:	0018      	movs	r0, r3
 8019432:	46bd      	mov	sp, r7
 8019434:	b002      	add	sp, #8
 8019436:	bd80      	pop	{r7, pc}
 8019438:	200001ac 	.word	0x200001ac

0801943c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b082      	sub	sp, #8
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	220a      	movs	r2, #10
 8019448:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801944a:	4b02      	ldr	r3, [pc, #8]	@ (8019454 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801944c:	0018      	movs	r0, r3
 801944e:	46bd      	mov	sp, r7
 8019450:	b002      	add	sp, #8
 8019452:	bd80      	pop	{r7, pc}
 8019454:	200000e0 	.word	0x200000e0

08019458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b084      	sub	sp, #16
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
 8019460:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8019462:	200f      	movs	r0, #15
 8019464:	183b      	adds	r3, r7, r0
 8019466:	2202      	movs	r2, #2
 8019468:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801946a:	683b      	ldr	r3, [r7, #0]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d007      	beq.n	8019480 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8019470:	687a      	ldr	r2, [r7, #4]
 8019472:	23af      	movs	r3, #175	@ 0xaf
 8019474:	009b      	lsls	r3, r3, #2
 8019476:	6839      	ldr	r1, [r7, #0]
 8019478:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801947a:	183b      	adds	r3, r7, r0
 801947c:	2200      	movs	r2, #0
 801947e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8019480:	230f      	movs	r3, #15
 8019482:	18fb      	adds	r3, r7, r3
 8019484:	781b      	ldrb	r3, [r3, #0]
}
 8019486:	0018      	movs	r0, r3
 8019488:	46bd      	mov	sp, r7
 801948a:	b004      	add	sp, #16
 801948c:	bd80      	pop	{r7, pc}

0801948e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801948e:	b580      	push	{r7, lr}
 8019490:	b086      	sub	sp, #24
 8019492:	af00      	add	r7, sp, #0
 8019494:	60f8      	str	r0, [r7, #12]
 8019496:	60b9      	str	r1, [r7, #8]
 8019498:	1dbb      	adds	r3, r7, #6
 801949a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801949c:	68fa      	ldr	r2, [r7, #12]
 801949e:	23ae      	movs	r3, #174	@ 0xae
 80194a0:	009b      	lsls	r3, r3, #2
 80194a2:	58d3      	ldr	r3, [r2, r3]
 80194a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80194a6:	697a      	ldr	r2, [r7, #20]
 80194a8:	2382      	movs	r3, #130	@ 0x82
 80194aa:	009b      	lsls	r3, r3, #2
 80194ac:	68b9      	ldr	r1, [r7, #8]
 80194ae:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80194b0:	1dbb      	adds	r3, r7, #6
 80194b2:	8819      	ldrh	r1, [r3, #0]
 80194b4:	697a      	ldr	r2, [r7, #20]
 80194b6:	2384      	movs	r3, #132	@ 0x84
 80194b8:	009b      	lsls	r3, r3, #2
 80194ba:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80194bc:	2300      	movs	r3, #0
}
 80194be:	0018      	movs	r0, r3
 80194c0:	46bd      	mov	sp, r7
 80194c2:	b006      	add	sp, #24
 80194c4:	bd80      	pop	{r7, pc}

080194c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80194c6:	b580      	push	{r7, lr}
 80194c8:	b084      	sub	sp, #16
 80194ca:	af00      	add	r7, sp, #0
 80194cc:	6078      	str	r0, [r7, #4]
 80194ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80194d0:	687a      	ldr	r2, [r7, #4]
 80194d2:	23ae      	movs	r3, #174	@ 0xae
 80194d4:	009b      	lsls	r3, r3, #2
 80194d6:	58d3      	ldr	r3, [r2, r3]
 80194d8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80194da:	68fa      	ldr	r2, [r7, #12]
 80194dc:	2381      	movs	r3, #129	@ 0x81
 80194de:	009b      	lsls	r3, r3, #2
 80194e0:	6839      	ldr	r1, [r7, #0]
 80194e2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80194e4:	2300      	movs	r3, #0
}
 80194e6:	0018      	movs	r0, r3
 80194e8:	46bd      	mov	sp, r7
 80194ea:	b004      	add	sp, #16
 80194ec:	bd80      	pop	{r7, pc}

080194ee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80194ee:	b580      	push	{r7, lr}
 80194f0:	b084      	sub	sp, #16
 80194f2:	af00      	add	r7, sp, #0
 80194f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80194f6:	687a      	ldr	r2, [r7, #4]
 80194f8:	23ae      	movs	r3, #174	@ 0xae
 80194fa:	009b      	lsls	r3, r3, #2
 80194fc:	58d3      	ldr	r3, [r2, r3]
 80194fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8019500:	687a      	ldr	r2, [r7, #4]
 8019502:	23ae      	movs	r3, #174	@ 0xae
 8019504:	009b      	lsls	r3, r3, #2
 8019506:	58d3      	ldr	r3, [r2, r3]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d022      	beq.n	8019552 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801950c:	68fa      	ldr	r2, [r7, #12]
 801950e:	2385      	movs	r3, #133	@ 0x85
 8019510:	009b      	lsls	r3, r3, #2
 8019512:	58d3      	ldr	r3, [r2, r3]
 8019514:	2b00      	cmp	r3, #0
 8019516:	d11a      	bne.n	801954e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8019518:	68fa      	ldr	r2, [r7, #12]
 801951a:	2385      	movs	r3, #133	@ 0x85
 801951c:	009b      	lsls	r3, r3, #2
 801951e:	2101      	movs	r1, #1
 8019520:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8019522:	68fa      	ldr	r2, [r7, #12]
 8019524:	2384      	movs	r3, #132	@ 0x84
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	58d2      	ldr	r2, [r2, r3]
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801952e:	68fa      	ldr	r2, [r7, #12]
 8019530:	2382      	movs	r3, #130	@ 0x82
 8019532:	009b      	lsls	r3, r3, #2
 8019534:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8019536:	68fa      	ldr	r2, [r7, #12]
 8019538:	2384      	movs	r3, #132	@ 0x84
 801953a:	009b      	lsls	r3, r3, #2
 801953c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801953e:	b29b      	uxth	r3, r3
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	000a      	movs	r2, r1
 8019544:	2181      	movs	r1, #129	@ 0x81
 8019546:	f001 ff0c 	bl	801b362 <USBD_LL_Transmit>

      return USBD_OK;
 801954a:	2300      	movs	r3, #0
 801954c:	e002      	b.n	8019554 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801954e:	2301      	movs	r3, #1
 8019550:	e000      	b.n	8019554 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8019552:	2302      	movs	r3, #2
  }
}
 8019554:	0018      	movs	r0, r3
 8019556:	46bd      	mov	sp, r7
 8019558:	b004      	add	sp, #16
 801955a:	bd80      	pop	{r7, pc}

0801955c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b084      	sub	sp, #16
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019564:	687a      	ldr	r2, [r7, #4]
 8019566:	23ae      	movs	r3, #174	@ 0xae
 8019568:	009b      	lsls	r3, r3, #2
 801956a:	58d3      	ldr	r3, [r2, r3]
 801956c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	23ae      	movs	r3, #174	@ 0xae
 8019572:	009b      	lsls	r3, r3, #2
 8019574:	58d3      	ldr	r3, [r2, r3]
 8019576:	2b00      	cmp	r3, #0
 8019578:	d019      	beq.n	80195ae <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	7c1b      	ldrb	r3, [r3, #16]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d10a      	bne.n	8019598 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019582:	68fa      	ldr	r2, [r7, #12]
 8019584:	2381      	movs	r3, #129	@ 0x81
 8019586:	009b      	lsls	r3, r3, #2
 8019588:	58d2      	ldr	r2, [r2, r3]
 801958a:	2380      	movs	r3, #128	@ 0x80
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	6878      	ldr	r0, [r7, #4]
 8019590:	2101      	movs	r1, #1
 8019592:	f001 ff1d 	bl	801b3d0 <USBD_LL_PrepareReceive>
 8019596:	e008      	b.n	80195aa <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019598:	68fa      	ldr	r2, [r7, #12]
 801959a:	2381      	movs	r3, #129	@ 0x81
 801959c:	009b      	lsls	r3, r3, #2
 801959e:	58d2      	ldr	r2, [r2, r3]
 80195a0:	6878      	ldr	r0, [r7, #4]
 80195a2:	2340      	movs	r3, #64	@ 0x40
 80195a4:	2101      	movs	r1, #1
 80195a6:	f001 ff13 	bl	801b3d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80195aa:	2300      	movs	r3, #0
 80195ac:	e000      	b.n	80195b0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80195ae:	2302      	movs	r3, #2
  }
}
 80195b0:	0018      	movs	r0, r3
 80195b2:	46bd      	mov	sp, r7
 80195b4:	b004      	add	sp, #16
 80195b6:	bd80      	pop	{r7, pc}

080195b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b084      	sub	sp, #16
 80195bc:	af00      	add	r7, sp, #0
 80195be:	60f8      	str	r0, [r7, #12]
 80195c0:	60b9      	str	r1, [r7, #8]
 80195c2:	1dfb      	adds	r3, r7, #7
 80195c4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d101      	bne.n	80195d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80195cc:	2302      	movs	r3, #2
 80195ce:	e020      	b.n	8019612 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80195d0:	68fa      	ldr	r2, [r7, #12]
 80195d2:	23ad      	movs	r3, #173	@ 0xad
 80195d4:	009b      	lsls	r3, r3, #2
 80195d6:	58d3      	ldr	r3, [r2, r3]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d004      	beq.n	80195e6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80195dc:	68fa      	ldr	r2, [r7, #12]
 80195de:	23ad      	movs	r3, #173	@ 0xad
 80195e0:	009b      	lsls	r3, r3, #2
 80195e2:	2100      	movs	r1, #0
 80195e4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d004      	beq.n	80195f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80195ec:	68fa      	ldr	r2, [r7, #12]
 80195ee:	23ac      	movs	r3, #172	@ 0xac
 80195f0:	009b      	lsls	r3, r3, #2
 80195f2:	68b9      	ldr	r1, [r7, #8]
 80195f4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80195f6:	68fa      	ldr	r2, [r7, #12]
 80195f8:	23a7      	movs	r3, #167	@ 0xa7
 80195fa:	009b      	lsls	r3, r3, #2
 80195fc:	2101      	movs	r1, #1
 80195fe:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	1dfa      	adds	r2, r7, #7
 8019604:	7812      	ldrb	r2, [r2, #0]
 8019606:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	0018      	movs	r0, r3
 801960c:	f001 fd0c 	bl	801b028 <USBD_LL_Init>

  return USBD_OK;
 8019610:	2300      	movs	r3, #0
}
 8019612:	0018      	movs	r0, r3
 8019614:	46bd      	mov	sp, r7
 8019616:	b004      	add	sp, #16
 8019618:	bd80      	pop	{r7, pc}

0801961a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801961a:	b580      	push	{r7, lr}
 801961c:	b084      	sub	sp, #16
 801961e:	af00      	add	r7, sp, #0
 8019620:	6078      	str	r0, [r7, #4]
 8019622:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8019624:	200f      	movs	r0, #15
 8019626:	183b      	adds	r3, r7, r0
 8019628:	2200      	movs	r2, #0
 801962a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d008      	beq.n	8019644 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8019632:	687a      	ldr	r2, [r7, #4]
 8019634:	23ad      	movs	r3, #173	@ 0xad
 8019636:	009b      	lsls	r3, r3, #2
 8019638:	6839      	ldr	r1, [r7, #0]
 801963a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801963c:	183b      	adds	r3, r7, r0
 801963e:	2200      	movs	r2, #0
 8019640:	701a      	strb	r2, [r3, #0]
 8019642:	e003      	b.n	801964c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8019644:	230f      	movs	r3, #15
 8019646:	18fb      	adds	r3, r7, r3
 8019648:	2202      	movs	r2, #2
 801964a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801964c:	230f      	movs	r3, #15
 801964e:	18fb      	adds	r3, r7, r3
 8019650:	781b      	ldrb	r3, [r3, #0]
}
 8019652:	0018      	movs	r0, r3
 8019654:	46bd      	mov	sp, r7
 8019656:	b004      	add	sp, #16
 8019658:	bd80      	pop	{r7, pc}

0801965a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801965a:	b580      	push	{r7, lr}
 801965c:	b082      	sub	sp, #8
 801965e:	af00      	add	r7, sp, #0
 8019660:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	0018      	movs	r0, r3
 8019666:	f001 fd43 	bl	801b0f0 <USBD_LL_Start>

  return USBD_OK;
 801966a:	2300      	movs	r3, #0
}
 801966c:	0018      	movs	r0, r3
 801966e:	46bd      	mov	sp, r7
 8019670:	b002      	add	sp, #8
 8019672:	bd80      	pop	{r7, pc}

08019674 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b082      	sub	sp, #8
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801967c:	2300      	movs	r3, #0
}
 801967e:	0018      	movs	r0, r3
 8019680:	46bd      	mov	sp, r7
 8019682:	b002      	add	sp, #8
 8019684:	bd80      	pop	{r7, pc}

08019686 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8019686:	b590      	push	{r4, r7, lr}
 8019688:	b085      	sub	sp, #20
 801968a:	af00      	add	r7, sp, #0
 801968c:	6078      	str	r0, [r7, #4]
 801968e:	000a      	movs	r2, r1
 8019690:	1cfb      	adds	r3, r7, #3
 8019692:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019694:	240f      	movs	r4, #15
 8019696:	193b      	adds	r3, r7, r4
 8019698:	2202      	movs	r2, #2
 801969a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801969c:	687a      	ldr	r2, [r7, #4]
 801969e:	23ad      	movs	r3, #173	@ 0xad
 80196a0:	009b      	lsls	r3, r3, #2
 80196a2:	58d3      	ldr	r3, [r2, r3]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d00e      	beq.n	80196c6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80196a8:	687a      	ldr	r2, [r7, #4]
 80196aa:	23ad      	movs	r3, #173	@ 0xad
 80196ac:	009b      	lsls	r3, r3, #2
 80196ae:	58d3      	ldr	r3, [r2, r3]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	1cfa      	adds	r2, r7, #3
 80196b4:	7811      	ldrb	r1, [r2, #0]
 80196b6:	687a      	ldr	r2, [r7, #4]
 80196b8:	0010      	movs	r0, r2
 80196ba:	4798      	blx	r3
 80196bc:	1e03      	subs	r3, r0, #0
 80196be:	d102      	bne.n	80196c6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80196c0:	193b      	adds	r3, r7, r4
 80196c2:	2200      	movs	r2, #0
 80196c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80196c6:	230f      	movs	r3, #15
 80196c8:	18fb      	adds	r3, r7, r3
 80196ca:	781b      	ldrb	r3, [r3, #0]
}
 80196cc:	0018      	movs	r0, r3
 80196ce:	46bd      	mov	sp, r7
 80196d0:	b005      	add	sp, #20
 80196d2:	bd90      	pop	{r4, r7, pc}

080196d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b082      	sub	sp, #8
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
 80196dc:	000a      	movs	r2, r1
 80196de:	1cfb      	adds	r3, r7, #3
 80196e0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80196e2:	687a      	ldr	r2, [r7, #4]
 80196e4:	23ad      	movs	r3, #173	@ 0xad
 80196e6:	009b      	lsls	r3, r3, #2
 80196e8:	58d3      	ldr	r3, [r2, r3]
 80196ea:	685b      	ldr	r3, [r3, #4]
 80196ec:	1cfa      	adds	r2, r7, #3
 80196ee:	7811      	ldrb	r1, [r2, #0]
 80196f0:	687a      	ldr	r2, [r7, #4]
 80196f2:	0010      	movs	r0, r2
 80196f4:	4798      	blx	r3

  return USBD_OK;
 80196f6:	2300      	movs	r3, #0
}
 80196f8:	0018      	movs	r0, r3
 80196fa:	46bd      	mov	sp, r7
 80196fc:	b002      	add	sp, #8
 80196fe:	bd80      	pop	{r7, pc}

08019700 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
 8019708:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	22aa      	movs	r2, #170	@ 0xaa
 801970e:	0092      	lsls	r2, r2, #2
 8019710:	4694      	mov	ip, r2
 8019712:	4463      	add	r3, ip
 8019714:	683a      	ldr	r2, [r7, #0]
 8019716:	0011      	movs	r1, r2
 8019718:	0018      	movs	r0, r3
 801971a:	f001 f810 	bl	801a73e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801971e:	687a      	ldr	r2, [r7, #4]
 8019720:	23a5      	movs	r3, #165	@ 0xa5
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	2101      	movs	r1, #1
 8019726:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	4a23      	ldr	r2, [pc, #140]	@ (80197b8 <USBD_LL_SetupStage+0xb8>)
 801972c:	5a9b      	ldrh	r3, [r3, r2]
 801972e:	0019      	movs	r1, r3
 8019730:	687a      	ldr	r2, [r7, #4]
 8019732:	23a6      	movs	r3, #166	@ 0xa6
 8019734:	009b      	lsls	r3, r3, #2
 8019736:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8019738:	687a      	ldr	r2, [r7, #4]
 801973a:	23aa      	movs	r3, #170	@ 0xaa
 801973c:	009b      	lsls	r3, r3, #2
 801973e:	5cd3      	ldrb	r3, [r2, r3]
 8019740:	001a      	movs	r2, r3
 8019742:	231f      	movs	r3, #31
 8019744:	4013      	ands	r3, r2
 8019746:	2b02      	cmp	r3, #2
 8019748:	d019      	beq.n	801977e <USBD_LL_SetupStage+0x7e>
 801974a:	d822      	bhi.n	8019792 <USBD_LL_SetupStage+0x92>
 801974c:	2b00      	cmp	r3, #0
 801974e:	d002      	beq.n	8019756 <USBD_LL_SetupStage+0x56>
 8019750:	2b01      	cmp	r3, #1
 8019752:	d00a      	beq.n	801976a <USBD_LL_SetupStage+0x6a>
 8019754:	e01d      	b.n	8019792 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	22aa      	movs	r2, #170	@ 0xaa
 801975a:	0092      	lsls	r2, r2, #2
 801975c:	189a      	adds	r2, r3, r2
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	0011      	movs	r1, r2
 8019762:	0018      	movs	r0, r3
 8019764:	f000 fa10 	bl	8019b88 <USBD_StdDevReq>
      break;
 8019768:	e020      	b.n	80197ac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	22aa      	movs	r2, #170	@ 0xaa
 801976e:	0092      	lsls	r2, r2, #2
 8019770:	189a      	adds	r2, r3, r2
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	0011      	movs	r1, r2
 8019776:	0018      	movs	r0, r3
 8019778:	f000 fa78 	bl	8019c6c <USBD_StdItfReq>
      break;
 801977c:	e016      	b.n	80197ac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	22aa      	movs	r2, #170	@ 0xaa
 8019782:	0092      	lsls	r2, r2, #2
 8019784:	189a      	adds	r2, r3, r2
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	0011      	movs	r1, r2
 801978a:	0018      	movs	r0, r3
 801978c:	f000 fac5 	bl	8019d1a <USBD_StdEPReq>
      break;
 8019790:	e00c      	b.n	80197ac <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019792:	687a      	ldr	r2, [r7, #4]
 8019794:	23aa      	movs	r3, #170	@ 0xaa
 8019796:	009b      	lsls	r3, r3, #2
 8019798:	5cd3      	ldrb	r3, [r2, r3]
 801979a:	227f      	movs	r2, #127	@ 0x7f
 801979c:	4393      	bics	r3, r2
 801979e:	b2da      	uxtb	r2, r3
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	0011      	movs	r1, r2
 80197a4:	0018      	movs	r0, r3
 80197a6:	f001 fd2a 	bl	801b1fe <USBD_LL_StallEP>
      break;
 80197aa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80197ac:	2300      	movs	r3, #0
}
 80197ae:	0018      	movs	r0, r3
 80197b0:	46bd      	mov	sp, r7
 80197b2:	b002      	add	sp, #8
 80197b4:	bd80      	pop	{r7, pc}
 80197b6:	46c0      	nop			@ (mov r8, r8)
 80197b8:	000002ae 	.word	0x000002ae

080197bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b086      	sub	sp, #24
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	60f8      	str	r0, [r7, #12]
 80197c4:	607a      	str	r2, [r7, #4]
 80197c6:	200b      	movs	r0, #11
 80197c8:	183b      	adds	r3, r7, r0
 80197ca:	1c0a      	adds	r2, r1, #0
 80197cc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80197ce:	183b      	adds	r3, r7, r0
 80197d0:	781b      	ldrb	r3, [r3, #0]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d154      	bne.n	8019880 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	3355      	adds	r3, #85	@ 0x55
 80197da:	33ff      	adds	r3, #255	@ 0xff
 80197dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80197de:	68fa      	ldr	r2, [r7, #12]
 80197e0:	23a5      	movs	r3, #165	@ 0xa5
 80197e2:	009b      	lsls	r3, r3, #2
 80197e4:	58d3      	ldr	r3, [r2, r3]
 80197e6:	2b03      	cmp	r3, #3
 80197e8:	d139      	bne.n	801985e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80197ea:	697b      	ldr	r3, [r7, #20]
 80197ec:	68da      	ldr	r2, [r3, #12]
 80197ee:	697b      	ldr	r3, [r7, #20]
 80197f0:	691b      	ldr	r3, [r3, #16]
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d919      	bls.n	801982a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	68da      	ldr	r2, [r3, #12]
 80197fa:	697b      	ldr	r3, [r7, #20]
 80197fc:	691b      	ldr	r3, [r3, #16]
 80197fe:	1ad2      	subs	r2, r2, r3
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019804:	697b      	ldr	r3, [r7, #20]
 8019806:	68da      	ldr	r2, [r3, #12]
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801980c:	429a      	cmp	r2, r3
 801980e:	d203      	bcs.n	8019818 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019810:	697b      	ldr	r3, [r7, #20]
 8019812:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8019814:	b29b      	uxth	r3, r3
 8019816:	e002      	b.n	801981e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019818:	697b      	ldr	r3, [r7, #20]
 801981a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801981c:	b29b      	uxth	r3, r3
 801981e:	6879      	ldr	r1, [r7, #4]
 8019820:	68f8      	ldr	r0, [r7, #12]
 8019822:	001a      	movs	r2, r3
 8019824:	f001 f898 	bl	801a958 <USBD_CtlContinueRx>
 8019828:	e045      	b.n	80198b6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801982a:	68fa      	ldr	r2, [r7, #12]
 801982c:	23ad      	movs	r3, #173	@ 0xad
 801982e:	009b      	lsls	r3, r3, #2
 8019830:	58d3      	ldr	r3, [r2, r3]
 8019832:	691b      	ldr	r3, [r3, #16]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d00d      	beq.n	8019854 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019838:	68fa      	ldr	r2, [r7, #12]
 801983a:	23a7      	movs	r3, #167	@ 0xa7
 801983c:	009b      	lsls	r3, r3, #2
 801983e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8019840:	2b03      	cmp	r3, #3
 8019842:	d107      	bne.n	8019854 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8019844:	68fa      	ldr	r2, [r7, #12]
 8019846:	23ad      	movs	r3, #173	@ 0xad
 8019848:	009b      	lsls	r3, r3, #2
 801984a:	58d3      	ldr	r3, [r2, r3]
 801984c:	691b      	ldr	r3, [r3, #16]
 801984e:	68fa      	ldr	r2, [r7, #12]
 8019850:	0010      	movs	r0, r2
 8019852:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	0018      	movs	r0, r3
 8019858:	f001 f891 	bl	801a97e <USBD_CtlSendStatus>
 801985c:	e02b      	b.n	80198b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801985e:	68fa      	ldr	r2, [r7, #12]
 8019860:	23a5      	movs	r3, #165	@ 0xa5
 8019862:	009b      	lsls	r3, r3, #2
 8019864:	58d3      	ldr	r3, [r2, r3]
 8019866:	2b05      	cmp	r3, #5
 8019868:	d125      	bne.n	80198b6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801986a:	68fa      	ldr	r2, [r7, #12]
 801986c:	23a5      	movs	r3, #165	@ 0xa5
 801986e:	009b      	lsls	r3, r3, #2
 8019870:	2100      	movs	r1, #0
 8019872:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	2100      	movs	r1, #0
 8019878:	0018      	movs	r0, r3
 801987a:	f001 fcc0 	bl	801b1fe <USBD_LL_StallEP>
 801987e:	e01a      	b.n	80198b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8019880:	68fa      	ldr	r2, [r7, #12]
 8019882:	23ad      	movs	r3, #173	@ 0xad
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	58d3      	ldr	r3, [r2, r3]
 8019888:	699b      	ldr	r3, [r3, #24]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d011      	beq.n	80198b2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801988e:	68fa      	ldr	r2, [r7, #12]
 8019890:	23a7      	movs	r3, #167	@ 0xa7
 8019892:	009b      	lsls	r3, r3, #2
 8019894:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8019896:	2b03      	cmp	r3, #3
 8019898:	d10b      	bne.n	80198b2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801989a:	68fa      	ldr	r2, [r7, #12]
 801989c:	23ad      	movs	r3, #173	@ 0xad
 801989e:	009b      	lsls	r3, r3, #2
 80198a0:	58d3      	ldr	r3, [r2, r3]
 80198a2:	699b      	ldr	r3, [r3, #24]
 80198a4:	220b      	movs	r2, #11
 80198a6:	18ba      	adds	r2, r7, r2
 80198a8:	7811      	ldrb	r1, [r2, #0]
 80198aa:	68fa      	ldr	r2, [r7, #12]
 80198ac:	0010      	movs	r0, r2
 80198ae:	4798      	blx	r3
 80198b0:	e001      	b.n	80198b6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80198b2:	2302      	movs	r3, #2
 80198b4:	e000      	b.n	80198b8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80198b6:	2300      	movs	r3, #0
}
 80198b8:	0018      	movs	r0, r3
 80198ba:	46bd      	mov	sp, r7
 80198bc:	b006      	add	sp, #24
 80198be:	bd80      	pop	{r7, pc}

080198c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b086      	sub	sp, #24
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	60f8      	str	r0, [r7, #12]
 80198c8:	607a      	str	r2, [r7, #4]
 80198ca:	200b      	movs	r0, #11
 80198cc:	183b      	adds	r3, r7, r0
 80198ce:	1c0a      	adds	r2, r1, #0
 80198d0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80198d2:	183b      	adds	r3, r7, r0
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d000      	beq.n	80198dc <USBD_LL_DataInStage+0x1c>
 80198da:	e08e      	b.n	80199fa <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	3314      	adds	r3, #20
 80198e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80198e2:	68fa      	ldr	r2, [r7, #12]
 80198e4:	23a5      	movs	r3, #165	@ 0xa5
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	58d3      	ldr	r3, [r2, r3]
 80198ea:	2b02      	cmp	r3, #2
 80198ec:	d164      	bne.n	80199b8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80198ee:	697b      	ldr	r3, [r7, #20]
 80198f0:	68da      	ldr	r2, [r3, #12]
 80198f2:	697b      	ldr	r3, [r7, #20]
 80198f4:	691b      	ldr	r3, [r3, #16]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d915      	bls.n	8019926 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80198fa:	697b      	ldr	r3, [r7, #20]
 80198fc:	68da      	ldr	r2, [r3, #12]
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	691b      	ldr	r3, [r3, #16]
 8019902:	1ad2      	subs	r2, r2, r3
 8019904:	697b      	ldr	r3, [r7, #20]
 8019906:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	68db      	ldr	r3, [r3, #12]
 801990c:	b29a      	uxth	r2, r3
 801990e:	6879      	ldr	r1, [r7, #4]
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	0018      	movs	r0, r3
 8019914:	f000 ffe9 	bl	801a8ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019918:	68f8      	ldr	r0, [r7, #12]
 801991a:	2300      	movs	r3, #0
 801991c:	2200      	movs	r2, #0
 801991e:	2100      	movs	r1, #0
 8019920:	f001 fd56 	bl	801b3d0 <USBD_LL_PrepareReceive>
 8019924:	e059      	b.n	80199da <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8019926:	697b      	ldr	r3, [r7, #20]
 8019928:	689a      	ldr	r2, [r3, #8]
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	691b      	ldr	r3, [r3, #16]
 801992e:	0019      	movs	r1, r3
 8019930:	0010      	movs	r0, r2
 8019932:	f7e6 fcbd 	bl	80002b0 <__aeabi_uidivmod>
 8019936:	1e0b      	subs	r3, r1, #0
 8019938:	d11f      	bne.n	801997a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	689a      	ldr	r2, [r3, #8]
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8019942:	429a      	cmp	r2, r3
 8019944:	d319      	bcc.n	801997a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8019946:	697b      	ldr	r3, [r7, #20]
 8019948:	689a      	ldr	r2, [r3, #8]
 801994a:	68f9      	ldr	r1, [r7, #12]
 801994c:	23a6      	movs	r3, #166	@ 0xa6
 801994e:	009b      	lsls	r3, r3, #2
 8019950:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8019952:	429a      	cmp	r2, r3
 8019954:	d211      	bcs.n	801997a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	2200      	movs	r2, #0
 801995a:	2100      	movs	r1, #0
 801995c:	0018      	movs	r0, r3
 801995e:	f000 ffc4 	bl	801a8ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8019962:	68fa      	ldr	r2, [r7, #12]
 8019964:	23a6      	movs	r3, #166	@ 0xa6
 8019966:	009b      	lsls	r3, r3, #2
 8019968:	2100      	movs	r1, #0
 801996a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801996c:	68f8      	ldr	r0, [r7, #12]
 801996e:	2300      	movs	r3, #0
 8019970:	2200      	movs	r2, #0
 8019972:	2100      	movs	r1, #0
 8019974:	f001 fd2c 	bl	801b3d0 <USBD_LL_PrepareReceive>
 8019978:	e02f      	b.n	80199da <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801997a:	68fa      	ldr	r2, [r7, #12]
 801997c:	23ad      	movs	r3, #173	@ 0xad
 801997e:	009b      	lsls	r3, r3, #2
 8019980:	58d3      	ldr	r3, [r2, r3]
 8019982:	68db      	ldr	r3, [r3, #12]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d00d      	beq.n	80199a4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019988:	68fa      	ldr	r2, [r7, #12]
 801998a:	23a7      	movs	r3, #167	@ 0xa7
 801998c:	009b      	lsls	r3, r3, #2
 801998e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8019990:	2b03      	cmp	r3, #3
 8019992:	d107      	bne.n	80199a4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8019994:	68fa      	ldr	r2, [r7, #12]
 8019996:	23ad      	movs	r3, #173	@ 0xad
 8019998:	009b      	lsls	r3, r3, #2
 801999a:	58d3      	ldr	r3, [r2, r3]
 801999c:	68db      	ldr	r3, [r3, #12]
 801999e:	68fa      	ldr	r2, [r7, #12]
 80199a0:	0010      	movs	r0, r2
 80199a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	2180      	movs	r1, #128	@ 0x80
 80199a8:	0018      	movs	r0, r3
 80199aa:	f001 fc28 	bl	801b1fe <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	0018      	movs	r0, r3
 80199b2:	f000 fff8 	bl	801a9a6 <USBD_CtlReceiveStatus>
 80199b6:	e010      	b.n	80199da <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80199b8:	68fa      	ldr	r2, [r7, #12]
 80199ba:	23a5      	movs	r3, #165	@ 0xa5
 80199bc:	009b      	lsls	r3, r3, #2
 80199be:	58d3      	ldr	r3, [r2, r3]
 80199c0:	2b04      	cmp	r3, #4
 80199c2:	d005      	beq.n	80199d0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80199c4:	68fa      	ldr	r2, [r7, #12]
 80199c6:	23a5      	movs	r3, #165	@ 0xa5
 80199c8:	009b      	lsls	r3, r3, #2
 80199ca:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d104      	bne.n	80199da <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	2180      	movs	r1, #128	@ 0x80
 80199d4:	0018      	movs	r0, r3
 80199d6:	f001 fc12 	bl	801b1fe <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80199da:	68fa      	ldr	r2, [r7, #12]
 80199dc:	23a8      	movs	r3, #168	@ 0xa8
 80199de:	009b      	lsls	r3, r3, #2
 80199e0:	5cd3      	ldrb	r3, [r2, r3]
 80199e2:	2b01      	cmp	r3, #1
 80199e4:	d124      	bne.n	8019a30 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	0018      	movs	r0, r3
 80199ea:	f7ff fe43 	bl	8019674 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80199ee:	68fa      	ldr	r2, [r7, #12]
 80199f0:	23a8      	movs	r3, #168	@ 0xa8
 80199f2:	009b      	lsls	r3, r3, #2
 80199f4:	2100      	movs	r1, #0
 80199f6:	54d1      	strb	r1, [r2, r3]
 80199f8:	e01a      	b.n	8019a30 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80199fa:	68fa      	ldr	r2, [r7, #12]
 80199fc:	23ad      	movs	r3, #173	@ 0xad
 80199fe:	009b      	lsls	r3, r3, #2
 8019a00:	58d3      	ldr	r3, [r2, r3]
 8019a02:	695b      	ldr	r3, [r3, #20]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d011      	beq.n	8019a2c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019a08:	68fa      	ldr	r2, [r7, #12]
 8019a0a:	23a7      	movs	r3, #167	@ 0xa7
 8019a0c:	009b      	lsls	r3, r3, #2
 8019a0e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8019a10:	2b03      	cmp	r3, #3
 8019a12:	d10b      	bne.n	8019a2c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8019a14:	68fa      	ldr	r2, [r7, #12]
 8019a16:	23ad      	movs	r3, #173	@ 0xad
 8019a18:	009b      	lsls	r3, r3, #2
 8019a1a:	58d3      	ldr	r3, [r2, r3]
 8019a1c:	695b      	ldr	r3, [r3, #20]
 8019a1e:	220b      	movs	r2, #11
 8019a20:	18ba      	adds	r2, r7, r2
 8019a22:	7811      	ldrb	r1, [r2, #0]
 8019a24:	68fa      	ldr	r2, [r7, #12]
 8019a26:	0010      	movs	r0, r2
 8019a28:	4798      	blx	r3
 8019a2a:	e001      	b.n	8019a30 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8019a2c:	2302      	movs	r3, #2
 8019a2e:	e000      	b.n	8019a32 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8019a30:	2300      	movs	r3, #0
}
 8019a32:	0018      	movs	r0, r3
 8019a34:	46bd      	mov	sp, r7
 8019a36:	b006      	add	sp, #24
 8019a38:	bd80      	pop	{r7, pc}

08019a3a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8019a3a:	b580      	push	{r7, lr}
 8019a3c:	b082      	sub	sp, #8
 8019a3e:	af00      	add	r7, sp, #0
 8019a40:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	2340      	movs	r3, #64	@ 0x40
 8019a46:	2200      	movs	r2, #0
 8019a48:	2100      	movs	r1, #0
 8019a4a:	f001 fb76 	bl	801b13a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8019a4e:	687a      	ldr	r2, [r7, #4]
 8019a50:	23ac      	movs	r3, #172	@ 0xac
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	2101      	movs	r1, #1
 8019a56:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8019a58:	687a      	ldr	r2, [r7, #4]
 8019a5a:	23b2      	movs	r3, #178	@ 0xb2
 8019a5c:	005b      	lsls	r3, r3, #1
 8019a5e:	2140      	movs	r1, #64	@ 0x40
 8019a60:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	2340      	movs	r3, #64	@ 0x40
 8019a66:	2200      	movs	r2, #0
 8019a68:	2180      	movs	r1, #128	@ 0x80
 8019a6a:	f001 fb66 	bl	801b13a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	2201      	movs	r2, #1
 8019a72:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	2240      	movs	r2, #64	@ 0x40
 8019a78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019a7a:	687a      	ldr	r2, [r7, #4]
 8019a7c:	23a7      	movs	r3, #167	@ 0xa7
 8019a7e:	009b      	lsls	r3, r3, #2
 8019a80:	2101      	movs	r1, #1
 8019a82:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8019a84:	687a      	ldr	r2, [r7, #4]
 8019a86:	23a5      	movs	r3, #165	@ 0xa5
 8019a88:	009b      	lsls	r3, r3, #2
 8019a8a:	2100      	movs	r1, #0
 8019a8c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	2200      	movs	r2, #0
 8019a92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8019a94:	687a      	ldr	r2, [r7, #4]
 8019a96:	23a9      	movs	r3, #169	@ 0xa9
 8019a98:	009b      	lsls	r3, r3, #2
 8019a9a:	2100      	movs	r1, #0
 8019a9c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8019a9e:	687a      	ldr	r2, [r7, #4]
 8019aa0:	23ae      	movs	r3, #174	@ 0xae
 8019aa2:	009b      	lsls	r3, r3, #2
 8019aa4:	58d3      	ldr	r3, [r2, r3]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d00a      	beq.n	8019ac0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8019aaa:	687a      	ldr	r2, [r7, #4]
 8019aac:	23ad      	movs	r3, #173	@ 0xad
 8019aae:	009b      	lsls	r3, r3, #2
 8019ab0:	58d3      	ldr	r3, [r2, r3]
 8019ab2:	685a      	ldr	r2, [r3, #4]
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	685b      	ldr	r3, [r3, #4]
 8019ab8:	b2d9      	uxtb	r1, r3
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	0018      	movs	r0, r3
 8019abe:	4790      	blx	r2
  }

  return USBD_OK;
 8019ac0:	2300      	movs	r3, #0
}
 8019ac2:	0018      	movs	r0, r3
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	b002      	add	sp, #8
 8019ac8:	bd80      	pop	{r7, pc}

08019aca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8019aca:	b580      	push	{r7, lr}
 8019acc:	b082      	sub	sp, #8
 8019ace:	af00      	add	r7, sp, #0
 8019ad0:	6078      	str	r0, [r7, #4]
 8019ad2:	000a      	movs	r2, r1
 8019ad4:	1cfb      	adds	r3, r7, #3
 8019ad6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	1cfa      	adds	r2, r7, #3
 8019adc:	7812      	ldrb	r2, [r2, #0]
 8019ade:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8019ae0:	2300      	movs	r3, #0
}
 8019ae2:	0018      	movs	r0, r3
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	b002      	add	sp, #8
 8019ae8:	bd80      	pop	{r7, pc}
	...

08019aec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b082      	sub	sp, #8
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8019af4:	687a      	ldr	r2, [r7, #4]
 8019af6:	23a7      	movs	r3, #167	@ 0xa7
 8019af8:	009b      	lsls	r3, r3, #2
 8019afa:	5cd1      	ldrb	r1, [r2, r3]
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	4a06      	ldr	r2, [pc, #24]	@ (8019b18 <USBD_LL_Suspend+0x2c>)
 8019b00:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8019b02:	687a      	ldr	r2, [r7, #4]
 8019b04:	23a7      	movs	r3, #167	@ 0xa7
 8019b06:	009b      	lsls	r3, r3, #2
 8019b08:	2104      	movs	r1, #4
 8019b0a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8019b0c:	2300      	movs	r3, #0
}
 8019b0e:	0018      	movs	r0, r3
 8019b10:	46bd      	mov	sp, r7
 8019b12:	b002      	add	sp, #8
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	46c0      	nop			@ (mov r8, r8)
 8019b18:	0000029d 	.word	0x0000029d

08019b1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b082      	sub	sp, #8
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8019b24:	687a      	ldr	r2, [r7, #4]
 8019b26:	23a7      	movs	r3, #167	@ 0xa7
 8019b28:	009b      	lsls	r3, r3, #2
 8019b2a:	5cd3      	ldrb	r3, [r2, r3]
 8019b2c:	2b04      	cmp	r3, #4
 8019b2e:	d106      	bne.n	8019b3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	4a05      	ldr	r2, [pc, #20]	@ (8019b48 <USBD_LL_Resume+0x2c>)
 8019b34:	5c99      	ldrb	r1, [r3, r2]
 8019b36:	687a      	ldr	r2, [r7, #4]
 8019b38:	23a7      	movs	r3, #167	@ 0xa7
 8019b3a:	009b      	lsls	r3, r3, #2
 8019b3c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8019b3e:	2300      	movs	r3, #0
}
 8019b40:	0018      	movs	r0, r3
 8019b42:	46bd      	mov	sp, r7
 8019b44:	b002      	add	sp, #8
 8019b46:	bd80      	pop	{r7, pc}
 8019b48:	0000029d 	.word	0x0000029d

08019b4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b082      	sub	sp, #8
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019b54:	687a      	ldr	r2, [r7, #4]
 8019b56:	23a7      	movs	r3, #167	@ 0xa7
 8019b58:	009b      	lsls	r3, r3, #2
 8019b5a:	5cd3      	ldrb	r3, [r2, r3]
 8019b5c:	2b03      	cmp	r3, #3
 8019b5e:	d10e      	bne.n	8019b7e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8019b60:	687a      	ldr	r2, [r7, #4]
 8019b62:	23ad      	movs	r3, #173	@ 0xad
 8019b64:	009b      	lsls	r3, r3, #2
 8019b66:	58d3      	ldr	r3, [r2, r3]
 8019b68:	69db      	ldr	r3, [r3, #28]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d007      	beq.n	8019b7e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8019b6e:	687a      	ldr	r2, [r7, #4]
 8019b70:	23ad      	movs	r3, #173	@ 0xad
 8019b72:	009b      	lsls	r3, r3, #2
 8019b74:	58d3      	ldr	r3, [r2, r3]
 8019b76:	69db      	ldr	r3, [r3, #28]
 8019b78:	687a      	ldr	r2, [r7, #4]
 8019b7a:	0010      	movs	r0, r2
 8019b7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8019b7e:	2300      	movs	r3, #0
}
 8019b80:	0018      	movs	r0, r3
 8019b82:	46bd      	mov	sp, r7
 8019b84:	b002      	add	sp, #8
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b084      	sub	sp, #16
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019b92:	230f      	movs	r3, #15
 8019b94:	18fb      	adds	r3, r7, r3
 8019b96:	2200      	movs	r2, #0
 8019b98:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	781b      	ldrb	r3, [r3, #0]
 8019b9e:	001a      	movs	r2, r3
 8019ba0:	2360      	movs	r3, #96	@ 0x60
 8019ba2:	4013      	ands	r3, r2
 8019ba4:	2b40      	cmp	r3, #64	@ 0x40
 8019ba6:	d004      	beq.n	8019bb2 <USBD_StdDevReq+0x2a>
 8019ba8:	d84f      	bhi.n	8019c4a <USBD_StdDevReq+0xc2>
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d00b      	beq.n	8019bc6 <USBD_StdDevReq+0x3e>
 8019bae:	2b20      	cmp	r3, #32
 8019bb0:	d14b      	bne.n	8019c4a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8019bb2:	687a      	ldr	r2, [r7, #4]
 8019bb4:	23ad      	movs	r3, #173	@ 0xad
 8019bb6:	009b      	lsls	r3, r3, #2
 8019bb8:	58d3      	ldr	r3, [r2, r3]
 8019bba:	689b      	ldr	r3, [r3, #8]
 8019bbc:	6839      	ldr	r1, [r7, #0]
 8019bbe:	687a      	ldr	r2, [r7, #4]
 8019bc0:	0010      	movs	r0, r2
 8019bc2:	4798      	blx	r3
      break;
 8019bc4:	e048      	b.n	8019c58 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	785b      	ldrb	r3, [r3, #1]
 8019bca:	2b09      	cmp	r3, #9
 8019bcc:	d835      	bhi.n	8019c3a <USBD_StdDevReq+0xb2>
 8019bce:	009a      	lsls	r2, r3, #2
 8019bd0:	4b25      	ldr	r3, [pc, #148]	@ (8019c68 <USBD_StdDevReq+0xe0>)
 8019bd2:	18d3      	adds	r3, r2, r3
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8019bd8:	683a      	ldr	r2, [r7, #0]
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	0011      	movs	r1, r2
 8019bde:	0018      	movs	r0, r3
 8019be0:	f000 fa52 	bl	801a088 <USBD_GetDescriptor>
          break;
 8019be4:	e030      	b.n	8019c48 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8019be6:	683a      	ldr	r2, [r7, #0]
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	0011      	movs	r1, r2
 8019bec:	0018      	movs	r0, r3
 8019bee:	f000 fbfd 	bl	801a3ec <USBD_SetAddress>
          break;
 8019bf2:	e029      	b.n	8019c48 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8019bf4:	683a      	ldr	r2, [r7, #0]
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	0011      	movs	r1, r2
 8019bfa:	0018      	movs	r0, r3
 8019bfc:	f000 fc4a 	bl	801a494 <USBD_SetConfig>
          break;
 8019c00:	e022      	b.n	8019c48 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8019c02:	683a      	ldr	r2, [r7, #0]
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	0011      	movs	r1, r2
 8019c08:	0018      	movs	r0, r3
 8019c0a:	f000 fce7 	bl	801a5dc <USBD_GetConfig>
          break;
 8019c0e:	e01b      	b.n	8019c48 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8019c10:	683a      	ldr	r2, [r7, #0]
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	0011      	movs	r1, r2
 8019c16:	0018      	movs	r0, r3
 8019c18:	f000 fd1b 	bl	801a652 <USBD_GetStatus>
          break;
 8019c1c:	e014      	b.n	8019c48 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8019c1e:	683a      	ldr	r2, [r7, #0]
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	0011      	movs	r1, r2
 8019c24:	0018      	movs	r0, r3
 8019c26:	f000 fd4e 	bl	801a6c6 <USBD_SetFeature>
          break;
 8019c2a:	e00d      	b.n	8019c48 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8019c2c:	683a      	ldr	r2, [r7, #0]
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	0011      	movs	r1, r2
 8019c32:	0018      	movs	r0, r3
 8019c34:	f000 fd5d 	bl	801a6f2 <USBD_ClrFeature>
          break;
 8019c38:	e006      	b.n	8019c48 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8019c3a:	683a      	ldr	r2, [r7, #0]
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	0011      	movs	r1, r2
 8019c40:	0018      	movs	r0, r3
 8019c42:	f000 fdb4 	bl	801a7ae <USBD_CtlError>
          break;
 8019c46:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8019c48:	e006      	b.n	8019c58 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8019c4a:	683a      	ldr	r2, [r7, #0]
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	0011      	movs	r1, r2
 8019c50:	0018      	movs	r0, r3
 8019c52:	f000 fdac 	bl	801a7ae <USBD_CtlError>
      break;
 8019c56:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8019c58:	230f      	movs	r3, #15
 8019c5a:	18fb      	adds	r3, r7, r3
 8019c5c:	781b      	ldrb	r3, [r3, #0]
}
 8019c5e:	0018      	movs	r0, r3
 8019c60:	46bd      	mov	sp, r7
 8019c62:	b004      	add	sp, #16
 8019c64:	bd80      	pop	{r7, pc}
 8019c66:	46c0      	nop			@ (mov r8, r8)
 8019c68:	08022750 	.word	0x08022750

08019c6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8019c6c:	b5b0      	push	{r4, r5, r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019c76:	230f      	movs	r3, #15
 8019c78:	18fb      	adds	r3, r7, r3
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	781b      	ldrb	r3, [r3, #0]
 8019c82:	001a      	movs	r2, r3
 8019c84:	2360      	movs	r3, #96	@ 0x60
 8019c86:	4013      	ands	r3, r2
 8019c88:	2b40      	cmp	r3, #64	@ 0x40
 8019c8a:	d004      	beq.n	8019c96 <USBD_StdItfReq+0x2a>
 8019c8c:	d839      	bhi.n	8019d02 <USBD_StdItfReq+0x96>
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d001      	beq.n	8019c96 <USBD_StdItfReq+0x2a>
 8019c92:	2b20      	cmp	r3, #32
 8019c94:	d135      	bne.n	8019d02 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8019c96:	687a      	ldr	r2, [r7, #4]
 8019c98:	23a7      	movs	r3, #167	@ 0xa7
 8019c9a:	009b      	lsls	r3, r3, #2
 8019c9c:	5cd3      	ldrb	r3, [r2, r3]
 8019c9e:	3b01      	subs	r3, #1
 8019ca0:	2b02      	cmp	r3, #2
 8019ca2:	d825      	bhi.n	8019cf0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	889b      	ldrh	r3, [r3, #4]
 8019ca8:	b2db      	uxtb	r3, r3
 8019caa:	2b01      	cmp	r3, #1
 8019cac:	d819      	bhi.n	8019ce2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8019cae:	687a      	ldr	r2, [r7, #4]
 8019cb0:	23ad      	movs	r3, #173	@ 0xad
 8019cb2:	009b      	lsls	r3, r3, #2
 8019cb4:	58d3      	ldr	r3, [r2, r3]
 8019cb6:	689b      	ldr	r3, [r3, #8]
 8019cb8:	250f      	movs	r5, #15
 8019cba:	197c      	adds	r4, r7, r5
 8019cbc:	6839      	ldr	r1, [r7, #0]
 8019cbe:	687a      	ldr	r2, [r7, #4]
 8019cc0:	0010      	movs	r0, r2
 8019cc2:	4798      	blx	r3
 8019cc4:	0003      	movs	r3, r0
 8019cc6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	88db      	ldrh	r3, [r3, #6]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d116      	bne.n	8019cfe <USBD_StdItfReq+0x92>
 8019cd0:	197b      	adds	r3, r7, r5
 8019cd2:	781b      	ldrb	r3, [r3, #0]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d112      	bne.n	8019cfe <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	0018      	movs	r0, r3
 8019cdc:	f000 fe4f 	bl	801a97e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8019ce0:	e00d      	b.n	8019cfe <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8019ce2:	683a      	ldr	r2, [r7, #0]
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	0011      	movs	r1, r2
 8019ce8:	0018      	movs	r0, r3
 8019cea:	f000 fd60 	bl	801a7ae <USBD_CtlError>
          break;
 8019cee:	e006      	b.n	8019cfe <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8019cf0:	683a      	ldr	r2, [r7, #0]
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	0011      	movs	r1, r2
 8019cf6:	0018      	movs	r0, r3
 8019cf8:	f000 fd59 	bl	801a7ae <USBD_CtlError>
          break;
 8019cfc:	e000      	b.n	8019d00 <USBD_StdItfReq+0x94>
          break;
 8019cfe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8019d00:	e006      	b.n	8019d10 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8019d02:	683a      	ldr	r2, [r7, #0]
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	0011      	movs	r1, r2
 8019d08:	0018      	movs	r0, r3
 8019d0a:	f000 fd50 	bl	801a7ae <USBD_CtlError>
      break;
 8019d0e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8019d10:	2300      	movs	r3, #0
}
 8019d12:	0018      	movs	r0, r3
 8019d14:	46bd      	mov	sp, r7
 8019d16:	b004      	add	sp, #16
 8019d18:	bdb0      	pop	{r4, r5, r7, pc}

08019d1a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8019d1a:	b5b0      	push	{r4, r5, r7, lr}
 8019d1c:	b084      	sub	sp, #16
 8019d1e:	af00      	add	r7, sp, #0
 8019d20:	6078      	str	r0, [r7, #4]
 8019d22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8019d24:	230f      	movs	r3, #15
 8019d26:	18fb      	adds	r3, r7, r3
 8019d28:	2200      	movs	r2, #0
 8019d2a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8019d2c:	683b      	ldr	r3, [r7, #0]
 8019d2e:	889a      	ldrh	r2, [r3, #4]
 8019d30:	230e      	movs	r3, #14
 8019d32:	18fb      	adds	r3, r7, r3
 8019d34:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	781b      	ldrb	r3, [r3, #0]
 8019d3a:	001a      	movs	r2, r3
 8019d3c:	2360      	movs	r3, #96	@ 0x60
 8019d3e:	4013      	ands	r3, r2
 8019d40:	2b40      	cmp	r3, #64	@ 0x40
 8019d42:	d006      	beq.n	8019d52 <USBD_StdEPReq+0x38>
 8019d44:	d900      	bls.n	8019d48 <USBD_StdEPReq+0x2e>
 8019d46:	e190      	b.n	801a06a <USBD_StdEPReq+0x350>
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d00c      	beq.n	8019d66 <USBD_StdEPReq+0x4c>
 8019d4c:	2b20      	cmp	r3, #32
 8019d4e:	d000      	beq.n	8019d52 <USBD_StdEPReq+0x38>
 8019d50:	e18b      	b.n	801a06a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8019d52:	687a      	ldr	r2, [r7, #4]
 8019d54:	23ad      	movs	r3, #173	@ 0xad
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	58d3      	ldr	r3, [r2, r3]
 8019d5a:	689b      	ldr	r3, [r3, #8]
 8019d5c:	6839      	ldr	r1, [r7, #0]
 8019d5e:	687a      	ldr	r2, [r7, #4]
 8019d60:	0010      	movs	r0, r2
 8019d62:	4798      	blx	r3
      break;
 8019d64:	e188      	b.n	801a078 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	001a      	movs	r2, r3
 8019d6c:	2360      	movs	r3, #96	@ 0x60
 8019d6e:	4013      	ands	r3, r2
 8019d70:	2b20      	cmp	r3, #32
 8019d72:	d10f      	bne.n	8019d94 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8019d74:	687a      	ldr	r2, [r7, #4]
 8019d76:	23ad      	movs	r3, #173	@ 0xad
 8019d78:	009b      	lsls	r3, r3, #2
 8019d7a:	58d3      	ldr	r3, [r2, r3]
 8019d7c:	689b      	ldr	r3, [r3, #8]
 8019d7e:	250f      	movs	r5, #15
 8019d80:	197c      	adds	r4, r7, r5
 8019d82:	6839      	ldr	r1, [r7, #0]
 8019d84:	687a      	ldr	r2, [r7, #4]
 8019d86:	0010      	movs	r0, r2
 8019d88:	4798      	blx	r3
 8019d8a:	0003      	movs	r3, r0
 8019d8c:	7023      	strb	r3, [r4, #0]

        return ret;
 8019d8e:	197b      	adds	r3, r7, r5
 8019d90:	781b      	ldrb	r3, [r3, #0]
 8019d92:	e174      	b.n	801a07e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	785b      	ldrb	r3, [r3, #1]
 8019d98:	2b03      	cmp	r3, #3
 8019d9a:	d007      	beq.n	8019dac <USBD_StdEPReq+0x92>
 8019d9c:	dd00      	ble.n	8019da0 <USBD_StdEPReq+0x86>
 8019d9e:	e15c      	b.n	801a05a <USBD_StdEPReq+0x340>
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d100      	bne.n	8019da6 <USBD_StdEPReq+0x8c>
 8019da4:	e092      	b.n	8019ecc <USBD_StdEPReq+0x1b2>
 8019da6:	2b01      	cmp	r3, #1
 8019da8:	d04b      	beq.n	8019e42 <USBD_StdEPReq+0x128>
 8019daa:	e156      	b.n	801a05a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8019dac:	687a      	ldr	r2, [r7, #4]
 8019dae:	23a7      	movs	r3, #167	@ 0xa7
 8019db0:	009b      	lsls	r3, r3, #2
 8019db2:	5cd3      	ldrb	r3, [r2, r3]
 8019db4:	2b02      	cmp	r3, #2
 8019db6:	d002      	beq.n	8019dbe <USBD_StdEPReq+0xa4>
 8019db8:	2b03      	cmp	r3, #3
 8019dba:	d01d      	beq.n	8019df8 <USBD_StdEPReq+0xde>
 8019dbc:	e039      	b.n	8019e32 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019dbe:	220e      	movs	r2, #14
 8019dc0:	18bb      	adds	r3, r7, r2
 8019dc2:	781b      	ldrb	r3, [r3, #0]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d010      	beq.n	8019dea <USBD_StdEPReq+0xd0>
 8019dc8:	18bb      	adds	r3, r7, r2
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	2b80      	cmp	r3, #128	@ 0x80
 8019dce:	d00c      	beq.n	8019dea <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8019dd0:	18bb      	adds	r3, r7, r2
 8019dd2:	781a      	ldrb	r2, [r3, #0]
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	0011      	movs	r1, r2
 8019dd8:	0018      	movs	r0, r3
 8019dda:	f001 fa10 	bl	801b1fe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	2180      	movs	r1, #128	@ 0x80
 8019de2:	0018      	movs	r0, r3
 8019de4:	f001 fa0b 	bl	801b1fe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019de8:	e02a      	b.n	8019e40 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8019dea:	683a      	ldr	r2, [r7, #0]
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	0011      	movs	r1, r2
 8019df0:	0018      	movs	r0, r3
 8019df2:	f000 fcdc 	bl	801a7ae <USBD_CtlError>
              break;
 8019df6:	e023      	b.n	8019e40 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019df8:	683b      	ldr	r3, [r7, #0]
 8019dfa:	885b      	ldrh	r3, [r3, #2]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d113      	bne.n	8019e28 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8019e00:	220e      	movs	r2, #14
 8019e02:	18bb      	adds	r3, r7, r2
 8019e04:	781b      	ldrb	r3, [r3, #0]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d00e      	beq.n	8019e28 <USBD_StdEPReq+0x10e>
 8019e0a:	18bb      	adds	r3, r7, r2
 8019e0c:	781b      	ldrb	r3, [r3, #0]
 8019e0e:	2b80      	cmp	r3, #128	@ 0x80
 8019e10:	d00a      	beq.n	8019e28 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8019e12:	683b      	ldr	r3, [r7, #0]
 8019e14:	88db      	ldrh	r3, [r3, #6]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d106      	bne.n	8019e28 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8019e1a:	18bb      	adds	r3, r7, r2
 8019e1c:	781a      	ldrb	r2, [r3, #0]
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	0011      	movs	r1, r2
 8019e22:	0018      	movs	r0, r3
 8019e24:	f001 f9eb 	bl	801b1fe <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	0018      	movs	r0, r3
 8019e2c:	f000 fda7 	bl	801a97e <USBD_CtlSendStatus>

              break;
 8019e30:	e006      	b.n	8019e40 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8019e32:	683a      	ldr	r2, [r7, #0]
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	0011      	movs	r1, r2
 8019e38:	0018      	movs	r0, r3
 8019e3a:	f000 fcb8 	bl	801a7ae <USBD_CtlError>
              break;
 8019e3e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8019e40:	e112      	b.n	801a068 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8019e42:	687a      	ldr	r2, [r7, #4]
 8019e44:	23a7      	movs	r3, #167	@ 0xa7
 8019e46:	009b      	lsls	r3, r3, #2
 8019e48:	5cd3      	ldrb	r3, [r2, r3]
 8019e4a:	2b02      	cmp	r3, #2
 8019e4c:	d002      	beq.n	8019e54 <USBD_StdEPReq+0x13a>
 8019e4e:	2b03      	cmp	r3, #3
 8019e50:	d01d      	beq.n	8019e8e <USBD_StdEPReq+0x174>
 8019e52:	e032      	b.n	8019eba <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019e54:	220e      	movs	r2, #14
 8019e56:	18bb      	adds	r3, r7, r2
 8019e58:	781b      	ldrb	r3, [r3, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d010      	beq.n	8019e80 <USBD_StdEPReq+0x166>
 8019e5e:	18bb      	adds	r3, r7, r2
 8019e60:	781b      	ldrb	r3, [r3, #0]
 8019e62:	2b80      	cmp	r3, #128	@ 0x80
 8019e64:	d00c      	beq.n	8019e80 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8019e66:	18bb      	adds	r3, r7, r2
 8019e68:	781a      	ldrb	r2, [r3, #0]
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	0011      	movs	r1, r2
 8019e6e:	0018      	movs	r0, r3
 8019e70:	f001 f9c5 	bl	801b1fe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	2180      	movs	r1, #128	@ 0x80
 8019e78:	0018      	movs	r0, r3
 8019e7a:	f001 f9c0 	bl	801b1fe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019e7e:	e024      	b.n	8019eca <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8019e80:	683a      	ldr	r2, [r7, #0]
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	0011      	movs	r1, r2
 8019e86:	0018      	movs	r0, r3
 8019e88:	f000 fc91 	bl	801a7ae <USBD_CtlError>
              break;
 8019e8c:	e01d      	b.n	8019eca <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	885b      	ldrh	r3, [r3, #2]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d118      	bne.n	8019ec8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8019e96:	210e      	movs	r1, #14
 8019e98:	187b      	adds	r3, r7, r1
 8019e9a:	781b      	ldrb	r3, [r3, #0]
 8019e9c:	227f      	movs	r2, #127	@ 0x7f
 8019e9e:	4013      	ands	r3, r2
 8019ea0:	d006      	beq.n	8019eb0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8019ea2:	187b      	adds	r3, r7, r1
 8019ea4:	781a      	ldrb	r2, [r3, #0]
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	0011      	movs	r1, r2
 8019eaa:	0018      	movs	r0, r3
 8019eac:	f001 f9d2 	bl	801b254 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	0018      	movs	r0, r3
 8019eb4:	f000 fd63 	bl	801a97e <USBD_CtlSendStatus>
              }
              break;
 8019eb8:	e006      	b.n	8019ec8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8019eba:	683a      	ldr	r2, [r7, #0]
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	0011      	movs	r1, r2
 8019ec0:	0018      	movs	r0, r3
 8019ec2:	f000 fc74 	bl	801a7ae <USBD_CtlError>
              break;
 8019ec6:	e000      	b.n	8019eca <USBD_StdEPReq+0x1b0>
              break;
 8019ec8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8019eca:	e0cd      	b.n	801a068 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8019ecc:	687a      	ldr	r2, [r7, #4]
 8019ece:	23a7      	movs	r3, #167	@ 0xa7
 8019ed0:	009b      	lsls	r3, r3, #2
 8019ed2:	5cd3      	ldrb	r3, [r2, r3]
 8019ed4:	2b02      	cmp	r3, #2
 8019ed6:	d002      	beq.n	8019ede <USBD_StdEPReq+0x1c4>
 8019ed8:	2b03      	cmp	r3, #3
 8019eda:	d03c      	beq.n	8019f56 <USBD_StdEPReq+0x23c>
 8019edc:	e0b5      	b.n	801a04a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019ede:	220e      	movs	r2, #14
 8019ee0:	18bb      	adds	r3, r7, r2
 8019ee2:	781b      	ldrb	r3, [r3, #0]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d00a      	beq.n	8019efe <USBD_StdEPReq+0x1e4>
 8019ee8:	18bb      	adds	r3, r7, r2
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	2b80      	cmp	r3, #128	@ 0x80
 8019eee:	d006      	beq.n	8019efe <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8019ef0:	683a      	ldr	r2, [r7, #0]
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	0011      	movs	r1, r2
 8019ef6:	0018      	movs	r0, r3
 8019ef8:	f000 fc59 	bl	801a7ae <USBD_CtlError>
                break;
 8019efc:	e0ac      	b.n	801a058 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019efe:	220e      	movs	r2, #14
 8019f00:	18bb      	adds	r3, r7, r2
 8019f02:	781b      	ldrb	r3, [r3, #0]
 8019f04:	b25b      	sxtb	r3, r3
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	da0c      	bge.n	8019f24 <USBD_StdEPReq+0x20a>
 8019f0a:	18bb      	adds	r3, r7, r2
 8019f0c:	781b      	ldrb	r3, [r3, #0]
 8019f0e:	227f      	movs	r2, #127	@ 0x7f
 8019f10:	401a      	ands	r2, r3
 8019f12:	0013      	movs	r3, r2
 8019f14:	009b      	lsls	r3, r3, #2
 8019f16:	189b      	adds	r3, r3, r2
 8019f18:	009b      	lsls	r3, r3, #2
 8019f1a:	3310      	adds	r3, #16
 8019f1c:	687a      	ldr	r2, [r7, #4]
 8019f1e:	18d3      	adds	r3, r2, r3
 8019f20:	3304      	adds	r3, #4
 8019f22:	e00d      	b.n	8019f40 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019f24:	230e      	movs	r3, #14
 8019f26:	18fb      	adds	r3, r7, r3
 8019f28:	781b      	ldrb	r3, [r3, #0]
 8019f2a:	227f      	movs	r2, #127	@ 0x7f
 8019f2c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019f2e:	0013      	movs	r3, r2
 8019f30:	009b      	lsls	r3, r3, #2
 8019f32:	189b      	adds	r3, r3, r2
 8019f34:	009b      	lsls	r3, r3, #2
 8019f36:	3351      	adds	r3, #81	@ 0x51
 8019f38:	33ff      	adds	r3, #255	@ 0xff
 8019f3a:	687a      	ldr	r2, [r7, #4]
 8019f3c:	18d3      	adds	r3, r2, r3
 8019f3e:	3304      	adds	r3, #4
 8019f40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	2200      	movs	r2, #0
 8019f46:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8019f48:	68b9      	ldr	r1, [r7, #8]
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	2202      	movs	r2, #2
 8019f4e:	0018      	movs	r0, r3
 8019f50:	f000 fcab 	bl	801a8aa <USBD_CtlSendData>
              break;
 8019f54:	e080      	b.n	801a058 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8019f56:	220e      	movs	r2, #14
 8019f58:	18bb      	adds	r3, r7, r2
 8019f5a:	781b      	ldrb	r3, [r3, #0]
 8019f5c:	b25b      	sxtb	r3, r3
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	da14      	bge.n	8019f8c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019f62:	18bb      	adds	r3, r7, r2
 8019f64:	781b      	ldrb	r3, [r3, #0]
 8019f66:	220f      	movs	r2, #15
 8019f68:	401a      	ands	r2, r3
 8019f6a:	6879      	ldr	r1, [r7, #4]
 8019f6c:	0013      	movs	r3, r2
 8019f6e:	009b      	lsls	r3, r3, #2
 8019f70:	189b      	adds	r3, r3, r2
 8019f72:	009b      	lsls	r3, r3, #2
 8019f74:	18cb      	adds	r3, r1, r3
 8019f76:	3318      	adds	r3, #24
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d11e      	bne.n	8019fbc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8019f7e:	683a      	ldr	r2, [r7, #0]
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	0011      	movs	r1, r2
 8019f84:	0018      	movs	r0, r3
 8019f86:	f000 fc12 	bl	801a7ae <USBD_CtlError>
                  break;
 8019f8a:	e065      	b.n	801a058 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8019f8c:	230e      	movs	r3, #14
 8019f8e:	18fb      	adds	r3, r7, r3
 8019f90:	781b      	ldrb	r3, [r3, #0]
 8019f92:	220f      	movs	r2, #15
 8019f94:	401a      	ands	r2, r3
 8019f96:	6878      	ldr	r0, [r7, #4]
 8019f98:	23ac      	movs	r3, #172	@ 0xac
 8019f9a:	0059      	lsls	r1, r3, #1
 8019f9c:	0013      	movs	r3, r2
 8019f9e:	009b      	lsls	r3, r3, #2
 8019fa0:	189b      	adds	r3, r3, r2
 8019fa2:	009b      	lsls	r3, r3, #2
 8019fa4:	18c3      	adds	r3, r0, r3
 8019fa6:	185b      	adds	r3, r3, r1
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d106      	bne.n	8019fbc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8019fae:	683a      	ldr	r2, [r7, #0]
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	0011      	movs	r1, r2
 8019fb4:	0018      	movs	r0, r3
 8019fb6:	f000 fbfa 	bl	801a7ae <USBD_CtlError>
                  break;
 8019fba:	e04d      	b.n	801a058 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019fbc:	220e      	movs	r2, #14
 8019fbe:	18bb      	adds	r3, r7, r2
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	b25b      	sxtb	r3, r3
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	da0c      	bge.n	8019fe2 <USBD_StdEPReq+0x2c8>
 8019fc8:	18bb      	adds	r3, r7, r2
 8019fca:	781b      	ldrb	r3, [r3, #0]
 8019fcc:	227f      	movs	r2, #127	@ 0x7f
 8019fce:	401a      	ands	r2, r3
 8019fd0:	0013      	movs	r3, r2
 8019fd2:	009b      	lsls	r3, r3, #2
 8019fd4:	189b      	adds	r3, r3, r2
 8019fd6:	009b      	lsls	r3, r3, #2
 8019fd8:	3310      	adds	r3, #16
 8019fda:	687a      	ldr	r2, [r7, #4]
 8019fdc:	18d3      	adds	r3, r2, r3
 8019fde:	3304      	adds	r3, #4
 8019fe0:	e00d      	b.n	8019ffe <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019fe2:	230e      	movs	r3, #14
 8019fe4:	18fb      	adds	r3, r7, r3
 8019fe6:	781b      	ldrb	r3, [r3, #0]
 8019fe8:	227f      	movs	r2, #127	@ 0x7f
 8019fea:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019fec:	0013      	movs	r3, r2
 8019fee:	009b      	lsls	r3, r3, #2
 8019ff0:	189b      	adds	r3, r3, r2
 8019ff2:	009b      	lsls	r3, r3, #2
 8019ff4:	3351      	adds	r3, #81	@ 0x51
 8019ff6:	33ff      	adds	r3, #255	@ 0xff
 8019ff8:	687a      	ldr	r2, [r7, #4]
 8019ffa:	18d3      	adds	r3, r2, r3
 8019ffc:	3304      	adds	r3, #4
 8019ffe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a000:	220e      	movs	r2, #14
 801a002:	18bb      	adds	r3, r7, r2
 801a004:	781b      	ldrb	r3, [r3, #0]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d003      	beq.n	801a012 <USBD_StdEPReq+0x2f8>
 801a00a:	18bb      	adds	r3, r7, r2
 801a00c:	781b      	ldrb	r3, [r3, #0]
 801a00e:	2b80      	cmp	r3, #128	@ 0x80
 801a010:	d103      	bne.n	801a01a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801a012:	68bb      	ldr	r3, [r7, #8]
 801a014:	2200      	movs	r2, #0
 801a016:	601a      	str	r2, [r3, #0]
 801a018:	e010      	b.n	801a03c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801a01a:	230e      	movs	r3, #14
 801a01c:	18fb      	adds	r3, r7, r3
 801a01e:	781a      	ldrb	r2, [r3, #0]
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	0011      	movs	r1, r2
 801a024:	0018      	movs	r0, r3
 801a026:	f001 f940 	bl	801b2aa <USBD_LL_IsStallEP>
 801a02a:	1e03      	subs	r3, r0, #0
 801a02c:	d003      	beq.n	801a036 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	2201      	movs	r2, #1
 801a032:	601a      	str	r2, [r3, #0]
 801a034:	e002      	b.n	801a03c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	2200      	movs	r2, #0
 801a03a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801a03c:	68b9      	ldr	r1, [r7, #8]
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	2202      	movs	r2, #2
 801a042:	0018      	movs	r0, r3
 801a044:	f000 fc31 	bl	801a8aa <USBD_CtlSendData>
              break;
 801a048:	e006      	b.n	801a058 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801a04a:	683a      	ldr	r2, [r7, #0]
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	0011      	movs	r1, r2
 801a050:	0018      	movs	r0, r3
 801a052:	f000 fbac 	bl	801a7ae <USBD_CtlError>
              break;
 801a056:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801a058:	e006      	b.n	801a068 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801a05a:	683a      	ldr	r2, [r7, #0]
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	0011      	movs	r1, r2
 801a060:	0018      	movs	r0, r3
 801a062:	f000 fba4 	bl	801a7ae <USBD_CtlError>
          break;
 801a066:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a068:	e006      	b.n	801a078 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801a06a:	683a      	ldr	r2, [r7, #0]
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	0011      	movs	r1, r2
 801a070:	0018      	movs	r0, r3
 801a072:	f000 fb9c 	bl	801a7ae <USBD_CtlError>
      break;
 801a076:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a078:	230f      	movs	r3, #15
 801a07a:	18fb      	adds	r3, r7, r3
 801a07c:	781b      	ldrb	r3, [r3, #0]
}
 801a07e:	0018      	movs	r0, r3
 801a080:	46bd      	mov	sp, r7
 801a082:	b004      	add	sp, #16
 801a084:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a088 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b084      	sub	sp, #16
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
 801a090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a092:	2308      	movs	r3, #8
 801a094:	18fb      	adds	r3, r7, r3
 801a096:	2200      	movs	r2, #0
 801a098:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801a09a:	2300      	movs	r3, #0
 801a09c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a09e:	230b      	movs	r3, #11
 801a0a0:	18fb      	adds	r3, r7, r3
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	885b      	ldrh	r3, [r3, #2]
 801a0aa:	0a1b      	lsrs	r3, r3, #8
 801a0ac:	b29b      	uxth	r3, r3
 801a0ae:	2b07      	cmp	r3, #7
 801a0b0:	d900      	bls.n	801a0b4 <USBD_GetDescriptor+0x2c>
 801a0b2:	e159      	b.n	801a368 <USBD_GetDescriptor+0x2e0>
 801a0b4:	009a      	lsls	r2, r3, #2
 801a0b6:	4bcb      	ldr	r3, [pc, #812]	@ (801a3e4 <USBD_GetDescriptor+0x35c>)
 801a0b8:	18d3      	adds	r3, r2, r3
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a0be:	687a      	ldr	r2, [r7, #4]
 801a0c0:	23ac      	movs	r3, #172	@ 0xac
 801a0c2:	009b      	lsls	r3, r3, #2
 801a0c4:	58d3      	ldr	r3, [r2, r3]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	687a      	ldr	r2, [r7, #4]
 801a0ca:	7c12      	ldrb	r2, [r2, #16]
 801a0cc:	2108      	movs	r1, #8
 801a0ce:	1879      	adds	r1, r7, r1
 801a0d0:	0010      	movs	r0, r2
 801a0d2:	4798      	blx	r3
 801a0d4:	0003      	movs	r3, r0
 801a0d6:	60fb      	str	r3, [r7, #12]
      break;
 801a0d8:	e153      	b.n	801a382 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	7c1b      	ldrb	r3, [r3, #16]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d10f      	bne.n	801a102 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801a0e2:	687a      	ldr	r2, [r7, #4]
 801a0e4:	23ad      	movs	r3, #173	@ 0xad
 801a0e6:	009b      	lsls	r3, r3, #2
 801a0e8:	58d3      	ldr	r3, [r2, r3]
 801a0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a0ec:	2208      	movs	r2, #8
 801a0ee:	18ba      	adds	r2, r7, r2
 801a0f0:	0010      	movs	r0, r2
 801a0f2:	4798      	blx	r3
 801a0f4:	0003      	movs	r3, r0
 801a0f6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	3301      	adds	r3, #1
 801a0fc:	2202      	movs	r2, #2
 801a0fe:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a100:	e13f      	b.n	801a382 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801a102:	687a      	ldr	r2, [r7, #4]
 801a104:	23ad      	movs	r3, #173	@ 0xad
 801a106:	009b      	lsls	r3, r3, #2
 801a108:	58d3      	ldr	r3, [r2, r3]
 801a10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a10c:	2208      	movs	r2, #8
 801a10e:	18ba      	adds	r2, r7, r2
 801a110:	0010      	movs	r0, r2
 801a112:	4798      	blx	r3
 801a114:	0003      	movs	r3, r0
 801a116:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	3301      	adds	r3, #1
 801a11c:	2202      	movs	r2, #2
 801a11e:	701a      	strb	r2, [r3, #0]
      break;
 801a120:	e12f      	b.n	801a382 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	885b      	ldrh	r3, [r3, #2]
 801a126:	b2db      	uxtb	r3, r3
 801a128:	2b05      	cmp	r3, #5
 801a12a:	d900      	bls.n	801a12e <USBD_GetDescriptor+0xa6>
 801a12c:	e0d0      	b.n	801a2d0 <USBD_GetDescriptor+0x248>
 801a12e:	009a      	lsls	r2, r3, #2
 801a130:	4bad      	ldr	r3, [pc, #692]	@ (801a3e8 <USBD_GetDescriptor+0x360>)
 801a132:	18d3      	adds	r3, r2, r3
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a138:	687a      	ldr	r2, [r7, #4]
 801a13a:	23ac      	movs	r3, #172	@ 0xac
 801a13c:	009b      	lsls	r3, r3, #2
 801a13e:	58d3      	ldr	r3, [r2, r3]
 801a140:	685b      	ldr	r3, [r3, #4]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d00d      	beq.n	801a162 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a146:	687a      	ldr	r2, [r7, #4]
 801a148:	23ac      	movs	r3, #172	@ 0xac
 801a14a:	009b      	lsls	r3, r3, #2
 801a14c:	58d3      	ldr	r3, [r2, r3]
 801a14e:	685b      	ldr	r3, [r3, #4]
 801a150:	687a      	ldr	r2, [r7, #4]
 801a152:	7c12      	ldrb	r2, [r2, #16]
 801a154:	2108      	movs	r1, #8
 801a156:	1879      	adds	r1, r7, r1
 801a158:	0010      	movs	r0, r2
 801a15a:	4798      	blx	r3
 801a15c:	0003      	movs	r3, r0
 801a15e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a160:	e0c3      	b.n	801a2ea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a162:	683a      	ldr	r2, [r7, #0]
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	0011      	movs	r1, r2
 801a168:	0018      	movs	r0, r3
 801a16a:	f000 fb20 	bl	801a7ae <USBD_CtlError>
            err++;
 801a16e:	210b      	movs	r1, #11
 801a170:	187b      	adds	r3, r7, r1
 801a172:	781a      	ldrb	r2, [r3, #0]
 801a174:	187b      	adds	r3, r7, r1
 801a176:	3201      	adds	r2, #1
 801a178:	701a      	strb	r2, [r3, #0]
          break;
 801a17a:	e0b6      	b.n	801a2ea <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	23ac      	movs	r3, #172	@ 0xac
 801a180:	009b      	lsls	r3, r3, #2
 801a182:	58d3      	ldr	r3, [r2, r3]
 801a184:	689b      	ldr	r3, [r3, #8]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d00d      	beq.n	801a1a6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a18a:	687a      	ldr	r2, [r7, #4]
 801a18c:	23ac      	movs	r3, #172	@ 0xac
 801a18e:	009b      	lsls	r3, r3, #2
 801a190:	58d3      	ldr	r3, [r2, r3]
 801a192:	689b      	ldr	r3, [r3, #8]
 801a194:	687a      	ldr	r2, [r7, #4]
 801a196:	7c12      	ldrb	r2, [r2, #16]
 801a198:	2108      	movs	r1, #8
 801a19a:	1879      	adds	r1, r7, r1
 801a19c:	0010      	movs	r0, r2
 801a19e:	4798      	blx	r3
 801a1a0:	0003      	movs	r3, r0
 801a1a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a1a4:	e0a1      	b.n	801a2ea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a1a6:	683a      	ldr	r2, [r7, #0]
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	0011      	movs	r1, r2
 801a1ac:	0018      	movs	r0, r3
 801a1ae:	f000 fafe 	bl	801a7ae <USBD_CtlError>
            err++;
 801a1b2:	210b      	movs	r1, #11
 801a1b4:	187b      	adds	r3, r7, r1
 801a1b6:	781a      	ldrb	r2, [r3, #0]
 801a1b8:	187b      	adds	r3, r7, r1
 801a1ba:	3201      	adds	r2, #1
 801a1bc:	701a      	strb	r2, [r3, #0]
          break;
 801a1be:	e094      	b.n	801a2ea <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a1c0:	687a      	ldr	r2, [r7, #4]
 801a1c2:	23ac      	movs	r3, #172	@ 0xac
 801a1c4:	009b      	lsls	r3, r3, #2
 801a1c6:	58d3      	ldr	r3, [r2, r3]
 801a1c8:	68db      	ldr	r3, [r3, #12]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d00d      	beq.n	801a1ea <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	23ac      	movs	r3, #172	@ 0xac
 801a1d2:	009b      	lsls	r3, r3, #2
 801a1d4:	58d3      	ldr	r3, [r2, r3]
 801a1d6:	68db      	ldr	r3, [r3, #12]
 801a1d8:	687a      	ldr	r2, [r7, #4]
 801a1da:	7c12      	ldrb	r2, [r2, #16]
 801a1dc:	2108      	movs	r1, #8
 801a1de:	1879      	adds	r1, r7, r1
 801a1e0:	0010      	movs	r0, r2
 801a1e2:	4798      	blx	r3
 801a1e4:	0003      	movs	r3, r0
 801a1e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a1e8:	e07f      	b.n	801a2ea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a1ea:	683a      	ldr	r2, [r7, #0]
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	0011      	movs	r1, r2
 801a1f0:	0018      	movs	r0, r3
 801a1f2:	f000 fadc 	bl	801a7ae <USBD_CtlError>
            err++;
 801a1f6:	210b      	movs	r1, #11
 801a1f8:	187b      	adds	r3, r7, r1
 801a1fa:	781a      	ldrb	r2, [r3, #0]
 801a1fc:	187b      	adds	r3, r7, r1
 801a1fe:	3201      	adds	r2, #1
 801a200:	701a      	strb	r2, [r3, #0]
          break;
 801a202:	e072      	b.n	801a2ea <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a204:	687a      	ldr	r2, [r7, #4]
 801a206:	23ac      	movs	r3, #172	@ 0xac
 801a208:	009b      	lsls	r3, r3, #2
 801a20a:	58d3      	ldr	r3, [r2, r3]
 801a20c:	691b      	ldr	r3, [r3, #16]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d00d      	beq.n	801a22e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a212:	687a      	ldr	r2, [r7, #4]
 801a214:	23ac      	movs	r3, #172	@ 0xac
 801a216:	009b      	lsls	r3, r3, #2
 801a218:	58d3      	ldr	r3, [r2, r3]
 801a21a:	691b      	ldr	r3, [r3, #16]
 801a21c:	687a      	ldr	r2, [r7, #4]
 801a21e:	7c12      	ldrb	r2, [r2, #16]
 801a220:	2108      	movs	r1, #8
 801a222:	1879      	adds	r1, r7, r1
 801a224:	0010      	movs	r0, r2
 801a226:	4798      	blx	r3
 801a228:	0003      	movs	r3, r0
 801a22a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a22c:	e05d      	b.n	801a2ea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a22e:	683a      	ldr	r2, [r7, #0]
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	0011      	movs	r1, r2
 801a234:	0018      	movs	r0, r3
 801a236:	f000 faba 	bl	801a7ae <USBD_CtlError>
            err++;
 801a23a:	210b      	movs	r1, #11
 801a23c:	187b      	adds	r3, r7, r1
 801a23e:	781a      	ldrb	r2, [r3, #0]
 801a240:	187b      	adds	r3, r7, r1
 801a242:	3201      	adds	r2, #1
 801a244:	701a      	strb	r2, [r3, #0]
          break;
 801a246:	e050      	b.n	801a2ea <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801a248:	687a      	ldr	r2, [r7, #4]
 801a24a:	23ac      	movs	r3, #172	@ 0xac
 801a24c:	009b      	lsls	r3, r3, #2
 801a24e:	58d3      	ldr	r3, [r2, r3]
 801a250:	695b      	ldr	r3, [r3, #20]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d00d      	beq.n	801a272 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801a256:	687a      	ldr	r2, [r7, #4]
 801a258:	23ac      	movs	r3, #172	@ 0xac
 801a25a:	009b      	lsls	r3, r3, #2
 801a25c:	58d3      	ldr	r3, [r2, r3]
 801a25e:	695b      	ldr	r3, [r3, #20]
 801a260:	687a      	ldr	r2, [r7, #4]
 801a262:	7c12      	ldrb	r2, [r2, #16]
 801a264:	2108      	movs	r1, #8
 801a266:	1879      	adds	r1, r7, r1
 801a268:	0010      	movs	r0, r2
 801a26a:	4798      	blx	r3
 801a26c:	0003      	movs	r3, r0
 801a26e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a270:	e03b      	b.n	801a2ea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a272:	683a      	ldr	r2, [r7, #0]
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	0011      	movs	r1, r2
 801a278:	0018      	movs	r0, r3
 801a27a:	f000 fa98 	bl	801a7ae <USBD_CtlError>
            err++;
 801a27e:	210b      	movs	r1, #11
 801a280:	187b      	adds	r3, r7, r1
 801a282:	781a      	ldrb	r2, [r3, #0]
 801a284:	187b      	adds	r3, r7, r1
 801a286:	3201      	adds	r2, #1
 801a288:	701a      	strb	r2, [r3, #0]
          break;
 801a28a:	e02e      	b.n	801a2ea <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801a28c:	687a      	ldr	r2, [r7, #4]
 801a28e:	23ac      	movs	r3, #172	@ 0xac
 801a290:	009b      	lsls	r3, r3, #2
 801a292:	58d3      	ldr	r3, [r2, r3]
 801a294:	699b      	ldr	r3, [r3, #24]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d00d      	beq.n	801a2b6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801a29a:	687a      	ldr	r2, [r7, #4]
 801a29c:	23ac      	movs	r3, #172	@ 0xac
 801a29e:	009b      	lsls	r3, r3, #2
 801a2a0:	58d3      	ldr	r3, [r2, r3]
 801a2a2:	699b      	ldr	r3, [r3, #24]
 801a2a4:	687a      	ldr	r2, [r7, #4]
 801a2a6:	7c12      	ldrb	r2, [r2, #16]
 801a2a8:	2108      	movs	r1, #8
 801a2aa:	1879      	adds	r1, r7, r1
 801a2ac:	0010      	movs	r0, r2
 801a2ae:	4798      	blx	r3
 801a2b0:	0003      	movs	r3, r0
 801a2b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a2b4:	e019      	b.n	801a2ea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a2b6:	683a      	ldr	r2, [r7, #0]
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	0011      	movs	r1, r2
 801a2bc:	0018      	movs	r0, r3
 801a2be:	f000 fa76 	bl	801a7ae <USBD_CtlError>
            err++;
 801a2c2:	210b      	movs	r1, #11
 801a2c4:	187b      	adds	r3, r7, r1
 801a2c6:	781a      	ldrb	r2, [r3, #0]
 801a2c8:	187b      	adds	r3, r7, r1
 801a2ca:	3201      	adds	r2, #1
 801a2cc:	701a      	strb	r2, [r3, #0]
          break;
 801a2ce:	e00c      	b.n	801a2ea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801a2d0:	683a      	ldr	r2, [r7, #0]
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	0011      	movs	r1, r2
 801a2d6:	0018      	movs	r0, r3
 801a2d8:	f000 fa69 	bl	801a7ae <USBD_CtlError>
          err++;
 801a2dc:	210b      	movs	r1, #11
 801a2de:	187b      	adds	r3, r7, r1
 801a2e0:	781a      	ldrb	r2, [r3, #0]
 801a2e2:	187b      	adds	r3, r7, r1
 801a2e4:	3201      	adds	r2, #1
 801a2e6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801a2e8:	e04b      	b.n	801a382 <USBD_GetDescriptor+0x2fa>
 801a2ea:	e04a      	b.n	801a382 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	7c1b      	ldrb	r3, [r3, #16]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d10b      	bne.n	801a30c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801a2f4:	687a      	ldr	r2, [r7, #4]
 801a2f6:	23ad      	movs	r3, #173	@ 0xad
 801a2f8:	009b      	lsls	r3, r3, #2
 801a2fa:	58d3      	ldr	r3, [r2, r3]
 801a2fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a2fe:	2208      	movs	r2, #8
 801a300:	18ba      	adds	r2, r7, r2
 801a302:	0010      	movs	r0, r2
 801a304:	4798      	blx	r3
 801a306:	0003      	movs	r3, r0
 801a308:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a30a:	e03a      	b.n	801a382 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801a30c:	683a      	ldr	r2, [r7, #0]
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	0011      	movs	r1, r2
 801a312:	0018      	movs	r0, r3
 801a314:	f000 fa4b 	bl	801a7ae <USBD_CtlError>
        err++;
 801a318:	210b      	movs	r1, #11
 801a31a:	187b      	adds	r3, r7, r1
 801a31c:	781a      	ldrb	r2, [r3, #0]
 801a31e:	187b      	adds	r3, r7, r1
 801a320:	3201      	adds	r2, #1
 801a322:	701a      	strb	r2, [r3, #0]
      break;
 801a324:	e02d      	b.n	801a382 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	7c1b      	ldrb	r3, [r3, #16]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d10f      	bne.n	801a34e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801a32e:	687a      	ldr	r2, [r7, #4]
 801a330:	23ad      	movs	r3, #173	@ 0xad
 801a332:	009b      	lsls	r3, r3, #2
 801a334:	58d3      	ldr	r3, [r2, r3]
 801a336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a338:	2208      	movs	r2, #8
 801a33a:	18ba      	adds	r2, r7, r2
 801a33c:	0010      	movs	r0, r2
 801a33e:	4798      	blx	r3
 801a340:	0003      	movs	r3, r0
 801a342:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	3301      	adds	r3, #1
 801a348:	2207      	movs	r2, #7
 801a34a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a34c:	e019      	b.n	801a382 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801a34e:	683a      	ldr	r2, [r7, #0]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	0011      	movs	r1, r2
 801a354:	0018      	movs	r0, r3
 801a356:	f000 fa2a 	bl	801a7ae <USBD_CtlError>
        err++;
 801a35a:	210b      	movs	r1, #11
 801a35c:	187b      	adds	r3, r7, r1
 801a35e:	781a      	ldrb	r2, [r3, #0]
 801a360:	187b      	adds	r3, r7, r1
 801a362:	3201      	adds	r2, #1
 801a364:	701a      	strb	r2, [r3, #0]
      break;
 801a366:	e00c      	b.n	801a382 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801a368:	683a      	ldr	r2, [r7, #0]
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	0011      	movs	r1, r2
 801a36e:	0018      	movs	r0, r3
 801a370:	f000 fa1d 	bl	801a7ae <USBD_CtlError>
      err++;
 801a374:	210b      	movs	r1, #11
 801a376:	187b      	adds	r3, r7, r1
 801a378:	781a      	ldrb	r2, [r3, #0]
 801a37a:	187b      	adds	r3, r7, r1
 801a37c:	3201      	adds	r2, #1
 801a37e:	701a      	strb	r2, [r3, #0]
      break;
 801a380:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801a382:	230b      	movs	r3, #11
 801a384:	18fb      	adds	r3, r7, r3
 801a386:	781b      	ldrb	r3, [r3, #0]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d127      	bne.n	801a3dc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801a38c:	2108      	movs	r1, #8
 801a38e:	187b      	adds	r3, r7, r1
 801a390:	881b      	ldrh	r3, [r3, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d019      	beq.n	801a3ca <USBD_GetDescriptor+0x342>
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	88db      	ldrh	r3, [r3, #6]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d015      	beq.n	801a3ca <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801a39e:	683b      	ldr	r3, [r7, #0]
 801a3a0:	88da      	ldrh	r2, [r3, #6]
 801a3a2:	187b      	adds	r3, r7, r1
 801a3a4:	881b      	ldrh	r3, [r3, #0]
 801a3a6:	1c18      	adds	r0, r3, #0
 801a3a8:	1c11      	adds	r1, r2, #0
 801a3aa:	b28a      	uxth	r2, r1
 801a3ac:	b283      	uxth	r3, r0
 801a3ae:	429a      	cmp	r2, r3
 801a3b0:	d900      	bls.n	801a3b4 <USBD_GetDescriptor+0x32c>
 801a3b2:	1c01      	adds	r1, r0, #0
 801a3b4:	b28a      	uxth	r2, r1
 801a3b6:	2108      	movs	r1, #8
 801a3b8:	187b      	adds	r3, r7, r1
 801a3ba:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801a3bc:	187b      	adds	r3, r7, r1
 801a3be:	881a      	ldrh	r2, [r3, #0]
 801a3c0:	68f9      	ldr	r1, [r7, #12]
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	0018      	movs	r0, r3
 801a3c6:	f000 fa70 	bl	801a8aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	88db      	ldrh	r3, [r3, #6]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d105      	bne.n	801a3de <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	0018      	movs	r0, r3
 801a3d6:	f000 fad2 	bl	801a97e <USBD_CtlSendStatus>
 801a3da:	e000      	b.n	801a3de <USBD_GetDescriptor+0x356>
    return;
 801a3dc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	b004      	add	sp, #16
 801a3e2:	bd80      	pop	{r7, pc}
 801a3e4:	08022778 	.word	0x08022778
 801a3e8:	08022798 	.word	0x08022798

0801a3ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801a3ec:	b590      	push	{r4, r7, lr}
 801a3ee:	b085      	sub	sp, #20
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801a3f6:	683b      	ldr	r3, [r7, #0]
 801a3f8:	889b      	ldrh	r3, [r3, #4]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d13d      	bne.n	801a47a <USBD_SetAddress+0x8e>
 801a3fe:	683b      	ldr	r3, [r7, #0]
 801a400:	88db      	ldrh	r3, [r3, #6]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d139      	bne.n	801a47a <USBD_SetAddress+0x8e>
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	885b      	ldrh	r3, [r3, #2]
 801a40a:	2b7f      	cmp	r3, #127	@ 0x7f
 801a40c:	d835      	bhi.n	801a47a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801a40e:	683b      	ldr	r3, [r7, #0]
 801a410:	885b      	ldrh	r3, [r3, #2]
 801a412:	b2da      	uxtb	r2, r3
 801a414:	230f      	movs	r3, #15
 801a416:	18fb      	adds	r3, r7, r3
 801a418:	217f      	movs	r1, #127	@ 0x7f
 801a41a:	400a      	ands	r2, r1
 801a41c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a41e:	687a      	ldr	r2, [r7, #4]
 801a420:	23a7      	movs	r3, #167	@ 0xa7
 801a422:	009b      	lsls	r3, r3, #2
 801a424:	5cd3      	ldrb	r3, [r2, r3]
 801a426:	2b03      	cmp	r3, #3
 801a428:	d106      	bne.n	801a438 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801a42a:	683a      	ldr	r2, [r7, #0]
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	0011      	movs	r1, r2
 801a430:	0018      	movs	r0, r3
 801a432:	f000 f9bc 	bl	801a7ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a436:	e027      	b.n	801a488 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	240f      	movs	r4, #15
 801a43c:	193a      	adds	r2, r7, r4
 801a43e:	4914      	ldr	r1, [pc, #80]	@ (801a490 <USBD_SetAddress+0xa4>)
 801a440:	7812      	ldrb	r2, [r2, #0]
 801a442:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801a444:	193b      	adds	r3, r7, r4
 801a446:	781a      	ldrb	r2, [r3, #0]
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	0011      	movs	r1, r2
 801a44c:	0018      	movs	r0, r3
 801a44e:	f000 ff5d 	bl	801b30c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	0018      	movs	r0, r3
 801a456:	f000 fa92 	bl	801a97e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801a45a:	193b      	adds	r3, r7, r4
 801a45c:	781b      	ldrb	r3, [r3, #0]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d005      	beq.n	801a46e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801a462:	687a      	ldr	r2, [r7, #4]
 801a464:	23a7      	movs	r3, #167	@ 0xa7
 801a466:	009b      	lsls	r3, r3, #2
 801a468:	2102      	movs	r1, #2
 801a46a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a46c:	e00c      	b.n	801a488 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801a46e:	687a      	ldr	r2, [r7, #4]
 801a470:	23a7      	movs	r3, #167	@ 0xa7
 801a472:	009b      	lsls	r3, r3, #2
 801a474:	2101      	movs	r1, #1
 801a476:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a478:	e006      	b.n	801a488 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801a47a:	683a      	ldr	r2, [r7, #0]
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	0011      	movs	r1, r2
 801a480:	0018      	movs	r0, r3
 801a482:	f000 f994 	bl	801a7ae <USBD_CtlError>
  }
}
 801a486:	46c0      	nop			@ (mov r8, r8)
 801a488:	46c0      	nop			@ (mov r8, r8)
 801a48a:	46bd      	mov	sp, r7
 801a48c:	b005      	add	sp, #20
 801a48e:	bd90      	pop	{r4, r7, pc}
 801a490:	0000029e 	.word	0x0000029e

0801a494 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b082      	sub	sp, #8
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
 801a49c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	885b      	ldrh	r3, [r3, #2]
 801a4a2:	b2da      	uxtb	r2, r3
 801a4a4:	4b4c      	ldr	r3, [pc, #304]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a4a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801a4a8:	4b4b      	ldr	r3, [pc, #300]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a4aa:	781b      	ldrb	r3, [r3, #0]
 801a4ac:	2b01      	cmp	r3, #1
 801a4ae:	d906      	bls.n	801a4be <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801a4b0:	683a      	ldr	r2, [r7, #0]
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	0011      	movs	r1, r2
 801a4b6:	0018      	movs	r0, r3
 801a4b8:	f000 f979 	bl	801a7ae <USBD_CtlError>
 801a4bc:	e088      	b.n	801a5d0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801a4be:	687a      	ldr	r2, [r7, #4]
 801a4c0:	23a7      	movs	r3, #167	@ 0xa7
 801a4c2:	009b      	lsls	r3, r3, #2
 801a4c4:	5cd3      	ldrb	r3, [r2, r3]
 801a4c6:	2b02      	cmp	r3, #2
 801a4c8:	d002      	beq.n	801a4d0 <USBD_SetConfig+0x3c>
 801a4ca:	2b03      	cmp	r3, #3
 801a4cc:	d029      	beq.n	801a522 <USBD_SetConfig+0x8e>
 801a4ce:	e071      	b.n	801a5b4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801a4d0:	4b41      	ldr	r3, [pc, #260]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a4d2:	781b      	ldrb	r3, [r3, #0]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d01f      	beq.n	801a518 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801a4d8:	4b3f      	ldr	r3, [pc, #252]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a4da:	781b      	ldrb	r3, [r3, #0]
 801a4dc:	001a      	movs	r2, r3
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801a4e2:	687a      	ldr	r2, [r7, #4]
 801a4e4:	23a7      	movs	r3, #167	@ 0xa7
 801a4e6:	009b      	lsls	r3, r3, #2
 801a4e8:	2103      	movs	r1, #3
 801a4ea:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801a4ec:	4b3a      	ldr	r3, [pc, #232]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a4ee:	781a      	ldrb	r2, [r3, #0]
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	0011      	movs	r1, r2
 801a4f4:	0018      	movs	r0, r3
 801a4f6:	f7ff f8c6 	bl	8019686 <USBD_SetClassConfig>
 801a4fa:	0003      	movs	r3, r0
 801a4fc:	2b02      	cmp	r3, #2
 801a4fe:	d106      	bne.n	801a50e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801a500:	683a      	ldr	r2, [r7, #0]
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	0011      	movs	r1, r2
 801a506:	0018      	movs	r0, r3
 801a508:	f000 f951 	bl	801a7ae <USBD_CtlError>
            return;
 801a50c:	e060      	b.n	801a5d0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	0018      	movs	r0, r3
 801a512:	f000 fa34 	bl	801a97e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801a516:	e05b      	b.n	801a5d0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	0018      	movs	r0, r3
 801a51c:	f000 fa2f 	bl	801a97e <USBD_CtlSendStatus>
        break;
 801a520:	e056      	b.n	801a5d0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801a522:	4b2d      	ldr	r3, [pc, #180]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a524:	781b      	ldrb	r3, [r3, #0]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d115      	bne.n	801a556 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801a52a:	687a      	ldr	r2, [r7, #4]
 801a52c:	23a7      	movs	r3, #167	@ 0xa7
 801a52e:	009b      	lsls	r3, r3, #2
 801a530:	2102      	movs	r1, #2
 801a532:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801a534:	4b28      	ldr	r3, [pc, #160]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	001a      	movs	r2, r3
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801a53e:	4b26      	ldr	r3, [pc, #152]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a540:	781a      	ldrb	r2, [r3, #0]
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	0011      	movs	r1, r2
 801a546:	0018      	movs	r0, r3
 801a548:	f7ff f8c4 	bl	80196d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	0018      	movs	r0, r3
 801a550:	f000 fa15 	bl	801a97e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801a554:	e03c      	b.n	801a5d0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801a556:	4b20      	ldr	r3, [pc, #128]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a558:	781b      	ldrb	r3, [r3, #0]
 801a55a:	001a      	movs	r2, r3
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	685b      	ldr	r3, [r3, #4]
 801a560:	429a      	cmp	r2, r3
 801a562:	d022      	beq.n	801a5aa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	685b      	ldr	r3, [r3, #4]
 801a568:	b2da      	uxtb	r2, r3
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	0011      	movs	r1, r2
 801a56e:	0018      	movs	r0, r3
 801a570:	f7ff f8b0 	bl	80196d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801a574:	4b18      	ldr	r3, [pc, #96]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a576:	781b      	ldrb	r3, [r3, #0]
 801a578:	001a      	movs	r2, r3
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801a57e:	4b16      	ldr	r3, [pc, #88]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a580:	781a      	ldrb	r2, [r3, #0]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	0011      	movs	r1, r2
 801a586:	0018      	movs	r0, r3
 801a588:	f7ff f87d 	bl	8019686 <USBD_SetClassConfig>
 801a58c:	0003      	movs	r3, r0
 801a58e:	2b02      	cmp	r3, #2
 801a590:	d106      	bne.n	801a5a0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801a592:	683a      	ldr	r2, [r7, #0]
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	0011      	movs	r1, r2
 801a598:	0018      	movs	r0, r3
 801a59a:	f000 f908 	bl	801a7ae <USBD_CtlError>
            return;
 801a59e:	e017      	b.n	801a5d0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	0018      	movs	r0, r3
 801a5a4:	f000 f9eb 	bl	801a97e <USBD_CtlSendStatus>
        break;
 801a5a8:	e012      	b.n	801a5d0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	0018      	movs	r0, r3
 801a5ae:	f000 f9e6 	bl	801a97e <USBD_CtlSendStatus>
        break;
 801a5b2:	e00d      	b.n	801a5d0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801a5b4:	683a      	ldr	r2, [r7, #0]
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	0011      	movs	r1, r2
 801a5ba:	0018      	movs	r0, r3
 801a5bc:	f000 f8f7 	bl	801a7ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801a5c0:	4b05      	ldr	r3, [pc, #20]	@ (801a5d8 <USBD_SetConfig+0x144>)
 801a5c2:	781a      	ldrb	r2, [r3, #0]
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	0011      	movs	r1, r2
 801a5c8:	0018      	movs	r0, r3
 801a5ca:	f7ff f883 	bl	80196d4 <USBD_ClrClassConfig>
        break;
 801a5ce:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	b002      	add	sp, #8
 801a5d4:	bd80      	pop	{r7, pc}
 801a5d6:	46c0      	nop			@ (mov r8, r8)
 801a5d8:	200024e4 	.word	0x200024e4

0801a5dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b082      	sub	sp, #8
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
 801a5e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801a5e6:	683b      	ldr	r3, [r7, #0]
 801a5e8:	88db      	ldrh	r3, [r3, #6]
 801a5ea:	2b01      	cmp	r3, #1
 801a5ec:	d006      	beq.n	801a5fc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801a5ee:	683a      	ldr	r2, [r7, #0]
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	0011      	movs	r1, r2
 801a5f4:	0018      	movs	r0, r3
 801a5f6:	f000 f8da 	bl	801a7ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801a5fa:	e026      	b.n	801a64a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801a5fc:	687a      	ldr	r2, [r7, #4]
 801a5fe:	23a7      	movs	r3, #167	@ 0xa7
 801a600:	009b      	lsls	r3, r3, #2
 801a602:	5cd3      	ldrb	r3, [r2, r3]
 801a604:	2b02      	cmp	r3, #2
 801a606:	dc02      	bgt.n	801a60e <USBD_GetConfig+0x32>
 801a608:	2b00      	cmp	r3, #0
 801a60a:	dc03      	bgt.n	801a614 <USBD_GetConfig+0x38>
 801a60c:	e016      	b.n	801a63c <USBD_GetConfig+0x60>
 801a60e:	2b03      	cmp	r3, #3
 801a610:	d00c      	beq.n	801a62c <USBD_GetConfig+0x50>
 801a612:	e013      	b.n	801a63c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	2200      	movs	r2, #0
 801a618:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	3308      	adds	r3, #8
 801a61e:	0019      	movs	r1, r3
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	2201      	movs	r2, #1
 801a624:	0018      	movs	r0, r3
 801a626:	f000 f940 	bl	801a8aa <USBD_CtlSendData>
        break;
 801a62a:	e00e      	b.n	801a64a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	1d19      	adds	r1, r3, #4
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	2201      	movs	r2, #1
 801a634:	0018      	movs	r0, r3
 801a636:	f000 f938 	bl	801a8aa <USBD_CtlSendData>
        break;
 801a63a:	e006      	b.n	801a64a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801a63c:	683a      	ldr	r2, [r7, #0]
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	0011      	movs	r1, r2
 801a642:	0018      	movs	r0, r3
 801a644:	f000 f8b3 	bl	801a7ae <USBD_CtlError>
        break;
 801a648:	46c0      	nop			@ (mov r8, r8)
}
 801a64a:	46c0      	nop			@ (mov r8, r8)
 801a64c:	46bd      	mov	sp, r7
 801a64e:	b002      	add	sp, #8
 801a650:	bd80      	pop	{r7, pc}

0801a652 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a652:	b580      	push	{r7, lr}
 801a654:	b082      	sub	sp, #8
 801a656:	af00      	add	r7, sp, #0
 801a658:	6078      	str	r0, [r7, #4]
 801a65a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801a65c:	687a      	ldr	r2, [r7, #4]
 801a65e:	23a7      	movs	r3, #167	@ 0xa7
 801a660:	009b      	lsls	r3, r3, #2
 801a662:	5cd3      	ldrb	r3, [r2, r3]
 801a664:	3b01      	subs	r3, #1
 801a666:	2b02      	cmp	r3, #2
 801a668:	d822      	bhi.n	801a6b0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801a66a:	683b      	ldr	r3, [r7, #0]
 801a66c:	88db      	ldrh	r3, [r3, #6]
 801a66e:	2b02      	cmp	r3, #2
 801a670:	d006      	beq.n	801a680 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801a672:	683a      	ldr	r2, [r7, #0]
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	0011      	movs	r1, r2
 801a678:	0018      	movs	r0, r3
 801a67a:	f000 f898 	bl	801a7ae <USBD_CtlError>
        break;
 801a67e:	e01e      	b.n	801a6be <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	2201      	movs	r2, #1
 801a684:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801a686:	687a      	ldr	r2, [r7, #4]
 801a688:	23a9      	movs	r3, #169	@ 0xa9
 801a68a:	009b      	lsls	r3, r3, #2
 801a68c:	58d3      	ldr	r3, [r2, r3]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d005      	beq.n	801a69e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	68db      	ldr	r3, [r3, #12]
 801a696:	2202      	movs	r2, #2
 801a698:	431a      	orrs	r2, r3
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	330c      	adds	r3, #12
 801a6a2:	0019      	movs	r1, r3
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	2202      	movs	r2, #2
 801a6a8:	0018      	movs	r0, r3
 801a6aa:	f000 f8fe 	bl	801a8aa <USBD_CtlSendData>
      break;
 801a6ae:	e006      	b.n	801a6be <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801a6b0:	683a      	ldr	r2, [r7, #0]
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	0011      	movs	r1, r2
 801a6b6:	0018      	movs	r0, r3
 801a6b8:	f000 f879 	bl	801a7ae <USBD_CtlError>
      break;
 801a6bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 801a6be:	46c0      	nop			@ (mov r8, r8)
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	b002      	add	sp, #8
 801a6c4:	bd80      	pop	{r7, pc}

0801a6c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801a6c6:	b580      	push	{r7, lr}
 801a6c8:	b082      	sub	sp, #8
 801a6ca:	af00      	add	r7, sp, #0
 801a6cc:	6078      	str	r0, [r7, #4]
 801a6ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801a6d0:	683b      	ldr	r3, [r7, #0]
 801a6d2:	885b      	ldrh	r3, [r3, #2]
 801a6d4:	2b01      	cmp	r3, #1
 801a6d6:	d108      	bne.n	801a6ea <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801a6d8:	687a      	ldr	r2, [r7, #4]
 801a6da:	23a9      	movs	r3, #169	@ 0xa9
 801a6dc:	009b      	lsls	r3, r3, #2
 801a6de:	2101      	movs	r1, #1
 801a6e0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	0018      	movs	r0, r3
 801a6e6:	f000 f94a 	bl	801a97e <USBD_CtlSendStatus>
  }
}
 801a6ea:	46c0      	nop			@ (mov r8, r8)
 801a6ec:	46bd      	mov	sp, r7
 801a6ee:	b002      	add	sp, #8
 801a6f0:	bd80      	pop	{r7, pc}

0801a6f2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801a6f2:	b580      	push	{r7, lr}
 801a6f4:	b082      	sub	sp, #8
 801a6f6:	af00      	add	r7, sp, #0
 801a6f8:	6078      	str	r0, [r7, #4]
 801a6fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801a6fc:	687a      	ldr	r2, [r7, #4]
 801a6fe:	23a7      	movs	r3, #167	@ 0xa7
 801a700:	009b      	lsls	r3, r3, #2
 801a702:	5cd3      	ldrb	r3, [r2, r3]
 801a704:	3b01      	subs	r3, #1
 801a706:	2b02      	cmp	r3, #2
 801a708:	d80d      	bhi.n	801a726 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801a70a:	683b      	ldr	r3, [r7, #0]
 801a70c:	885b      	ldrh	r3, [r3, #2]
 801a70e:	2b01      	cmp	r3, #1
 801a710:	d110      	bne.n	801a734 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801a712:	687a      	ldr	r2, [r7, #4]
 801a714:	23a9      	movs	r3, #169	@ 0xa9
 801a716:	009b      	lsls	r3, r3, #2
 801a718:	2100      	movs	r1, #0
 801a71a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	0018      	movs	r0, r3
 801a720:	f000 f92d 	bl	801a97e <USBD_CtlSendStatus>
      }
      break;
 801a724:	e006      	b.n	801a734 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801a726:	683a      	ldr	r2, [r7, #0]
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	0011      	movs	r1, r2
 801a72c:	0018      	movs	r0, r3
 801a72e:	f000 f83e 	bl	801a7ae <USBD_CtlError>
      break;
 801a732:	e000      	b.n	801a736 <USBD_ClrFeature+0x44>
      break;
 801a734:	46c0      	nop			@ (mov r8, r8)
  }
}
 801a736:	46c0      	nop			@ (mov r8, r8)
 801a738:	46bd      	mov	sp, r7
 801a73a:	b002      	add	sp, #8
 801a73c:	bd80      	pop	{r7, pc}

0801a73e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801a73e:	b580      	push	{r7, lr}
 801a740:	b082      	sub	sp, #8
 801a742:	af00      	add	r7, sp, #0
 801a744:	6078      	str	r0, [r7, #4]
 801a746:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	781a      	ldrb	r2, [r3, #0]
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801a750:	683b      	ldr	r3, [r7, #0]
 801a752:	785a      	ldrb	r2, [r3, #1]
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801a758:	683b      	ldr	r3, [r7, #0]
 801a75a:	3302      	adds	r3, #2
 801a75c:	781b      	ldrb	r3, [r3, #0]
 801a75e:	001a      	movs	r2, r3
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	3303      	adds	r3, #3
 801a764:	781b      	ldrb	r3, [r3, #0]
 801a766:	021b      	lsls	r3, r3, #8
 801a768:	b29b      	uxth	r3, r3
 801a76a:	18d3      	adds	r3, r2, r3
 801a76c:	b29a      	uxth	r2, r3
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801a772:	683b      	ldr	r3, [r7, #0]
 801a774:	3304      	adds	r3, #4
 801a776:	781b      	ldrb	r3, [r3, #0]
 801a778:	001a      	movs	r2, r3
 801a77a:	683b      	ldr	r3, [r7, #0]
 801a77c:	3305      	adds	r3, #5
 801a77e:	781b      	ldrb	r3, [r3, #0]
 801a780:	021b      	lsls	r3, r3, #8
 801a782:	b29b      	uxth	r3, r3
 801a784:	18d3      	adds	r3, r2, r3
 801a786:	b29a      	uxth	r2, r3
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801a78c:	683b      	ldr	r3, [r7, #0]
 801a78e:	3306      	adds	r3, #6
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	001a      	movs	r2, r3
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	3307      	adds	r3, #7
 801a798:	781b      	ldrb	r3, [r3, #0]
 801a79a:	021b      	lsls	r3, r3, #8
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	18d3      	adds	r3, r2, r3
 801a7a0:	b29a      	uxth	r2, r3
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	80da      	strh	r2, [r3, #6]

}
 801a7a6:	46c0      	nop			@ (mov r8, r8)
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	b002      	add	sp, #8
 801a7ac:	bd80      	pop	{r7, pc}

0801a7ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801a7ae:	b580      	push	{r7, lr}
 801a7b0:	b082      	sub	sp, #8
 801a7b2:	af00      	add	r7, sp, #0
 801a7b4:	6078      	str	r0, [r7, #4]
 801a7b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	2180      	movs	r1, #128	@ 0x80
 801a7bc:	0018      	movs	r0, r3
 801a7be:	f000 fd1e 	bl	801b1fe <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	2100      	movs	r1, #0
 801a7c6:	0018      	movs	r0, r3
 801a7c8:	f000 fd19 	bl	801b1fe <USBD_LL_StallEP>
}
 801a7cc:	46c0      	nop			@ (mov r8, r8)
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	b002      	add	sp, #8
 801a7d2:	bd80      	pop	{r7, pc}

0801a7d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801a7d4:	b590      	push	{r4, r7, lr}
 801a7d6:	b087      	sub	sp, #28
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	60f8      	str	r0, [r7, #12]
 801a7dc:	60b9      	str	r1, [r7, #8]
 801a7de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801a7e0:	2417      	movs	r4, #23
 801a7e2:	193b      	adds	r3, r7, r4
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d03c      	beq.n	801a868 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	0018      	movs	r0, r3
 801a7f2:	f000 f83d 	bl	801a870 <USBD_GetLen>
 801a7f6:	0003      	movs	r3, r0
 801a7f8:	3301      	adds	r3, #1
 801a7fa:	b29b      	uxth	r3, r3
 801a7fc:	18db      	adds	r3, r3, r3
 801a7fe:	b29a      	uxth	r2, r3
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801a804:	193b      	adds	r3, r7, r4
 801a806:	781b      	ldrb	r3, [r3, #0]
 801a808:	193a      	adds	r2, r7, r4
 801a80a:	1c59      	adds	r1, r3, #1
 801a80c:	7011      	strb	r1, [r2, #0]
 801a80e:	001a      	movs	r2, r3
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	189b      	adds	r3, r3, r2
 801a814:	687a      	ldr	r2, [r7, #4]
 801a816:	7812      	ldrb	r2, [r2, #0]
 801a818:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801a81a:	193b      	adds	r3, r7, r4
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	193a      	adds	r2, r7, r4
 801a820:	1c59      	adds	r1, r3, #1
 801a822:	7011      	strb	r1, [r2, #0]
 801a824:	001a      	movs	r2, r3
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	189b      	adds	r3, r3, r2
 801a82a:	2203      	movs	r2, #3
 801a82c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801a82e:	e017      	b.n	801a860 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	1c5a      	adds	r2, r3, #1
 801a834:	60fa      	str	r2, [r7, #12]
 801a836:	2417      	movs	r4, #23
 801a838:	193a      	adds	r2, r7, r4
 801a83a:	7812      	ldrb	r2, [r2, #0]
 801a83c:	1939      	adds	r1, r7, r4
 801a83e:	1c50      	adds	r0, r2, #1
 801a840:	7008      	strb	r0, [r1, #0]
 801a842:	0011      	movs	r1, r2
 801a844:	68ba      	ldr	r2, [r7, #8]
 801a846:	1852      	adds	r2, r2, r1
 801a848:	781b      	ldrb	r3, [r3, #0]
 801a84a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801a84c:	193b      	adds	r3, r7, r4
 801a84e:	781b      	ldrb	r3, [r3, #0]
 801a850:	193a      	adds	r2, r7, r4
 801a852:	1c59      	adds	r1, r3, #1
 801a854:	7011      	strb	r1, [r2, #0]
 801a856:	001a      	movs	r2, r3
 801a858:	68bb      	ldr	r3, [r7, #8]
 801a85a:	189b      	adds	r3, r3, r2
 801a85c:	2200      	movs	r2, #0
 801a85e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	781b      	ldrb	r3, [r3, #0]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d1e3      	bne.n	801a830 <USBD_GetString+0x5c>
    }
  }
}
 801a868:	46c0      	nop			@ (mov r8, r8)
 801a86a:	46bd      	mov	sp, r7
 801a86c:	b007      	add	sp, #28
 801a86e:	bd90      	pop	{r4, r7, pc}

0801a870 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b084      	sub	sp, #16
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801a878:	230f      	movs	r3, #15
 801a87a:	18fb      	adds	r3, r7, r3
 801a87c:	2200      	movs	r2, #0
 801a87e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801a880:	e008      	b.n	801a894 <USBD_GetLen+0x24>
  {
    len++;
 801a882:	210f      	movs	r1, #15
 801a884:	187b      	adds	r3, r7, r1
 801a886:	781a      	ldrb	r2, [r3, #0]
 801a888:	187b      	adds	r3, r7, r1
 801a88a:	3201      	adds	r2, #1
 801a88c:	701a      	strb	r2, [r3, #0]
    buf++;
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	3301      	adds	r3, #1
 801a892:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	781b      	ldrb	r3, [r3, #0]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d1f2      	bne.n	801a882 <USBD_GetLen+0x12>
  }

  return len;
 801a89c:	230f      	movs	r3, #15
 801a89e:	18fb      	adds	r3, r7, r3
 801a8a0:	781b      	ldrb	r3, [r3, #0]
}
 801a8a2:	0018      	movs	r0, r3
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	b004      	add	sp, #16
 801a8a8:	bd80      	pop	{r7, pc}

0801a8aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801a8aa:	b580      	push	{r7, lr}
 801a8ac:	b084      	sub	sp, #16
 801a8ae:	af00      	add	r7, sp, #0
 801a8b0:	60f8      	str	r0, [r7, #12]
 801a8b2:	60b9      	str	r1, [r7, #8]
 801a8b4:	1dbb      	adds	r3, r7, #6
 801a8b6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801a8b8:	68fa      	ldr	r2, [r7, #12]
 801a8ba:	23a5      	movs	r3, #165	@ 0xa5
 801a8bc:	009b      	lsls	r3, r3, #2
 801a8be:	2102      	movs	r1, #2
 801a8c0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801a8c2:	1dbb      	adds	r3, r7, #6
 801a8c4:	881a      	ldrh	r2, [r3, #0]
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801a8ca:	1dbb      	adds	r3, r7, #6
 801a8cc:	881a      	ldrh	r2, [r3, #0]
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a8d2:	1dbb      	adds	r3, r7, #6
 801a8d4:	881b      	ldrh	r3, [r3, #0]
 801a8d6:	68ba      	ldr	r2, [r7, #8]
 801a8d8:	68f8      	ldr	r0, [r7, #12]
 801a8da:	2100      	movs	r1, #0
 801a8dc:	f000 fd41 	bl	801b362 <USBD_LL_Transmit>

  return USBD_OK;
 801a8e0:	2300      	movs	r3, #0
}
 801a8e2:	0018      	movs	r0, r3
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	b004      	add	sp, #16
 801a8e8:	bd80      	pop	{r7, pc}

0801a8ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801a8ea:	b580      	push	{r7, lr}
 801a8ec:	b084      	sub	sp, #16
 801a8ee:	af00      	add	r7, sp, #0
 801a8f0:	60f8      	str	r0, [r7, #12]
 801a8f2:	60b9      	str	r1, [r7, #8]
 801a8f4:	1dbb      	adds	r3, r7, #6
 801a8f6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a8f8:	1dbb      	adds	r3, r7, #6
 801a8fa:	881b      	ldrh	r3, [r3, #0]
 801a8fc:	68ba      	ldr	r2, [r7, #8]
 801a8fe:	68f8      	ldr	r0, [r7, #12]
 801a900:	2100      	movs	r1, #0
 801a902:	f000 fd2e 	bl	801b362 <USBD_LL_Transmit>

  return USBD_OK;
 801a906:	2300      	movs	r3, #0
}
 801a908:	0018      	movs	r0, r3
 801a90a:	46bd      	mov	sp, r7
 801a90c:	b004      	add	sp, #16
 801a90e:	bd80      	pop	{r7, pc}

0801a910 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b084      	sub	sp, #16
 801a914:	af00      	add	r7, sp, #0
 801a916:	60f8      	str	r0, [r7, #12]
 801a918:	60b9      	str	r1, [r7, #8]
 801a91a:	1dbb      	adds	r3, r7, #6
 801a91c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801a91e:	68fa      	ldr	r2, [r7, #12]
 801a920:	23a5      	movs	r3, #165	@ 0xa5
 801a922:	009b      	lsls	r3, r3, #2
 801a924:	2103      	movs	r1, #3
 801a926:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801a928:	1dbb      	adds	r3, r7, #6
 801a92a:	8819      	ldrh	r1, [r3, #0]
 801a92c:	68fa      	ldr	r2, [r7, #12]
 801a92e:	23ae      	movs	r3, #174	@ 0xae
 801a930:	005b      	lsls	r3, r3, #1
 801a932:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801a934:	1dbb      	adds	r3, r7, #6
 801a936:	8819      	ldrh	r1, [r3, #0]
 801a938:	68fa      	ldr	r2, [r7, #12]
 801a93a:	23b0      	movs	r3, #176	@ 0xb0
 801a93c:	005b      	lsls	r3, r3, #1
 801a93e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a940:	1dbb      	adds	r3, r7, #6
 801a942:	881b      	ldrh	r3, [r3, #0]
 801a944:	68ba      	ldr	r2, [r7, #8]
 801a946:	68f8      	ldr	r0, [r7, #12]
 801a948:	2100      	movs	r1, #0
 801a94a:	f000 fd41 	bl	801b3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a94e:	2300      	movs	r3, #0
}
 801a950:	0018      	movs	r0, r3
 801a952:	46bd      	mov	sp, r7
 801a954:	b004      	add	sp, #16
 801a956:	bd80      	pop	{r7, pc}

0801a958 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b084      	sub	sp, #16
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	60f8      	str	r0, [r7, #12]
 801a960:	60b9      	str	r1, [r7, #8]
 801a962:	1dbb      	adds	r3, r7, #6
 801a964:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a966:	1dbb      	adds	r3, r7, #6
 801a968:	881b      	ldrh	r3, [r3, #0]
 801a96a:	68ba      	ldr	r2, [r7, #8]
 801a96c:	68f8      	ldr	r0, [r7, #12]
 801a96e:	2100      	movs	r1, #0
 801a970:	f000 fd2e 	bl	801b3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a974:	2300      	movs	r3, #0
}
 801a976:	0018      	movs	r0, r3
 801a978:	46bd      	mov	sp, r7
 801a97a:	b004      	add	sp, #16
 801a97c:	bd80      	pop	{r7, pc}

0801a97e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801a97e:	b580      	push	{r7, lr}
 801a980:	b082      	sub	sp, #8
 801a982:	af00      	add	r7, sp, #0
 801a984:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801a986:	687a      	ldr	r2, [r7, #4]
 801a988:	23a5      	movs	r3, #165	@ 0xa5
 801a98a:	009b      	lsls	r3, r3, #2
 801a98c:	2104      	movs	r1, #4
 801a98e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801a990:	6878      	ldr	r0, [r7, #4]
 801a992:	2300      	movs	r3, #0
 801a994:	2200      	movs	r2, #0
 801a996:	2100      	movs	r1, #0
 801a998:	f000 fce3 	bl	801b362 <USBD_LL_Transmit>

  return USBD_OK;
 801a99c:	2300      	movs	r3, #0
}
 801a99e:	0018      	movs	r0, r3
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	b002      	add	sp, #8
 801a9a4:	bd80      	pop	{r7, pc}

0801a9a6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801a9a6:	b580      	push	{r7, lr}
 801a9a8:	b082      	sub	sp, #8
 801a9aa:	af00      	add	r7, sp, #0
 801a9ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	23a5      	movs	r3, #165	@ 0xa5
 801a9b2:	009b      	lsls	r3, r3, #2
 801a9b4:	2105      	movs	r1, #5
 801a9b6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a9b8:	6878      	ldr	r0, [r7, #4]
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	2200      	movs	r2, #0
 801a9be:	2100      	movs	r1, #0
 801a9c0:	f000 fd06 	bl	801b3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a9c4:	2300      	movs	r3, #0
}
 801a9c6:	0018      	movs	r0, r3
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	b002      	add	sp, #8
 801a9cc:	bd80      	pop	{r7, pc}
	...

0801a9d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a9d4:	4914      	ldr	r1, [pc, #80]	@ (801aa28 <MX_USB_DEVICE_Init+0x58>)
 801a9d6:	4b15      	ldr	r3, [pc, #84]	@ (801aa2c <MX_USB_DEVICE_Init+0x5c>)
 801a9d8:	2200      	movs	r2, #0
 801a9da:	0018      	movs	r0, r3
 801a9dc:	f7fe fdec 	bl	80195b8 <USBD_Init>
 801a9e0:	1e03      	subs	r3, r0, #0
 801a9e2:	d001      	beq.n	801a9e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a9e4:	f7ec fd38 	bl	8007458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a9e8:	4a11      	ldr	r2, [pc, #68]	@ (801aa30 <MX_USB_DEVICE_Init+0x60>)
 801a9ea:	4b10      	ldr	r3, [pc, #64]	@ (801aa2c <MX_USB_DEVICE_Init+0x5c>)
 801a9ec:	0011      	movs	r1, r2
 801a9ee:	0018      	movs	r0, r3
 801a9f0:	f7fe fe13 	bl	801961a <USBD_RegisterClass>
 801a9f4:	1e03      	subs	r3, r0, #0
 801a9f6:	d001      	beq.n	801a9fc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801a9f8:	f7ec fd2e 	bl	8007458 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a9fc:	4a0d      	ldr	r2, [pc, #52]	@ (801aa34 <MX_USB_DEVICE_Init+0x64>)
 801a9fe:	4b0b      	ldr	r3, [pc, #44]	@ (801aa2c <MX_USB_DEVICE_Init+0x5c>)
 801aa00:	0011      	movs	r1, r2
 801aa02:	0018      	movs	r0, r3
 801aa04:	f7fe fd28 	bl	8019458 <USBD_CDC_RegisterInterface>
 801aa08:	1e03      	subs	r3, r0, #0
 801aa0a:	d001      	beq.n	801aa10 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801aa0c:	f7ec fd24 	bl	8007458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801aa10:	4b06      	ldr	r3, [pc, #24]	@ (801aa2c <MX_USB_DEVICE_Init+0x5c>)
 801aa12:	0018      	movs	r0, r3
 801aa14:	f7fe fe21 	bl	801965a <USBD_Start>
 801aa18:	1e03      	subs	r3, r0, #0
 801aa1a:	d001      	beq.n	801aa20 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801aa1c:	f7ec fd1c 	bl	8007458 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801aa20:	46c0      	nop			@ (mov r8, r8)
 801aa22:	46bd      	mov	sp, r7
 801aa24:	bd80      	pop	{r7, pc}
 801aa26:	46c0      	nop			@ (mov r8, r8)
 801aa28:	20000200 	.word	0x20000200
 801aa2c:	200024e8 	.word	0x200024e8
 801aa30:	200000ec 	.word	0x200000ec
 801aa34:	200001f0 	.word	0x200001f0

0801aa38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801aa3c:	4907      	ldr	r1, [pc, #28]	@ (801aa5c <CDC_Init_FS+0x24>)
 801aa3e:	4b08      	ldr	r3, [pc, #32]	@ (801aa60 <CDC_Init_FS+0x28>)
 801aa40:	2200      	movs	r2, #0
 801aa42:	0018      	movs	r0, r3
 801aa44:	f7fe fd23 	bl	801948e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801aa48:	4a06      	ldr	r2, [pc, #24]	@ (801aa64 <CDC_Init_FS+0x2c>)
 801aa4a:	4b05      	ldr	r3, [pc, #20]	@ (801aa60 <CDC_Init_FS+0x28>)
 801aa4c:	0011      	movs	r1, r2
 801aa4e:	0018      	movs	r0, r3
 801aa50:	f7fe fd39 	bl	80194c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801aa54:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801aa56:	0018      	movs	r0, r3
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	bd80      	pop	{r7, pc}
 801aa5c:	20002c6c 	.word	0x20002c6c
 801aa60:	200024e8 	.word	0x200024e8
 801aa64:	2000286c 	.word	0x2000286c

0801aa68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801aa6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801aa6e:	0018      	movs	r0, r3
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}

0801aa74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b082      	sub	sp, #8
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6039      	str	r1, [r7, #0]
 801aa7c:	0011      	movs	r1, r2
 801aa7e:	1dfb      	adds	r3, r7, #7
 801aa80:	1c02      	adds	r2, r0, #0
 801aa82:	701a      	strb	r2, [r3, #0]
 801aa84:	1d3b      	adds	r3, r7, #4
 801aa86:	1c0a      	adds	r2, r1, #0
 801aa88:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801aa8a:	1dfb      	adds	r3, r7, #7
 801aa8c:	781b      	ldrb	r3, [r3, #0]
 801aa8e:	2b23      	cmp	r3, #35	@ 0x23
 801aa90:	d804      	bhi.n	801aa9c <CDC_Control_FS+0x28>
 801aa92:	009a      	lsls	r2, r3, #2
 801aa94:	4b04      	ldr	r3, [pc, #16]	@ (801aaa8 <CDC_Control_FS+0x34>)
 801aa96:	18d3      	adds	r3, r2, r3
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801aa9c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801aa9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801aaa0:	0018      	movs	r0, r3
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	b002      	add	sp, #8
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	080227b0 	.word	0x080227b0

0801aaac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b082      	sub	sp, #8
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801aab6:	4b12      	ldr	r3, [pc, #72]	@ (801ab00 <CDC_Receive_FS+0x54>)
 801aab8:	781b      	ldrb	r3, [r3, #0]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d013      	beq.n	801aae6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	b29a      	uxth	r2, r3
 801aac4:	2301      	movs	r3, #1
 801aac6:	425b      	negs	r3, r3
 801aac8:	6879      	ldr	r1, [r7, #4]
 801aaca:	480e      	ldr	r0, [pc, #56]	@ (801ab04 <CDC_Receive_FS+0x58>)
 801aacc:	f7fa fa46 	bl	8014f5c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801aad0:	687a      	ldr	r2, [r7, #4]
 801aad2:	4b0d      	ldr	r3, [pc, #52]	@ (801ab08 <CDC_Receive_FS+0x5c>)
 801aad4:	0011      	movs	r1, r2
 801aad6:	0018      	movs	r0, r3
 801aad8:	f7fe fcf5 	bl	80194c6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801aadc:	4b0a      	ldr	r3, [pc, #40]	@ (801ab08 <CDC_Receive_FS+0x5c>)
 801aade:	0018      	movs	r0, r3
 801aae0:	f7fe fd3c 	bl	801955c <USBD_CDC_ReceivePacket>
 801aae4:	e006      	b.n	801aaf4 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801aae6:	683b      	ldr	r3, [r7, #0]
 801aae8:	681a      	ldr	r2, [r3, #0]
 801aaea:	4b08      	ldr	r3, [pc, #32]	@ (801ab0c <CDC_Receive_FS+0x60>)
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	18d2      	adds	r2, r2, r3
 801aaf0:	4b06      	ldr	r3, [pc, #24]	@ (801ab0c <CDC_Receive_FS+0x60>)
 801aaf2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801aaf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801aaf6:	0018      	movs	r0, r3
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	b002      	add	sp, #8
 801aafc:	bd80      	pop	{r7, pc}
 801aafe:	46c0      	nop			@ (mov r8, r8)
 801ab00:	200027ac 	.word	0x200027ac
 801ab04:	200027b0 	.word	0x200027b0
 801ab08:	200024e8 	.word	0x200024e8
 801ab0c:	20002868 	.word	0x20002868

0801ab10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801ab10:	b5b0      	push	{r4, r5, r7, lr}
 801ab12:	b084      	sub	sp, #16
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
 801ab18:	000a      	movs	r2, r1
 801ab1a:	1cbb      	adds	r3, r7, #2
 801ab1c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801ab1e:	230f      	movs	r3, #15
 801ab20:	18fb      	adds	r3, r7, r3
 801ab22:	2200      	movs	r2, #0
 801ab24:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801ab26:	4a11      	ldr	r2, [pc, #68]	@ (801ab6c <CDC_Transmit_FS+0x5c>)
 801ab28:	23ae      	movs	r3, #174	@ 0xae
 801ab2a:	009b      	lsls	r3, r3, #2
 801ab2c:	58d3      	ldr	r3, [r2, r3]
 801ab2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ab30:	68ba      	ldr	r2, [r7, #8]
 801ab32:	2385      	movs	r3, #133	@ 0x85
 801ab34:	009b      	lsls	r3, r3, #2
 801ab36:	58d3      	ldr	r3, [r2, r3]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d001      	beq.n	801ab40 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801ab3c:	2301      	movs	r3, #1
 801ab3e:	e010      	b.n	801ab62 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801ab40:	1cbb      	adds	r3, r7, #2
 801ab42:	881a      	ldrh	r2, [r3, #0]
 801ab44:	6879      	ldr	r1, [r7, #4]
 801ab46:	4b09      	ldr	r3, [pc, #36]	@ (801ab6c <CDC_Transmit_FS+0x5c>)
 801ab48:	0018      	movs	r0, r3
 801ab4a:	f7fe fca0 	bl	801948e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801ab4e:	250f      	movs	r5, #15
 801ab50:	197c      	adds	r4, r7, r5
 801ab52:	4b06      	ldr	r3, [pc, #24]	@ (801ab6c <CDC_Transmit_FS+0x5c>)
 801ab54:	0018      	movs	r0, r3
 801ab56:	f7fe fcca 	bl	80194ee <USBD_CDC_TransmitPacket>
 801ab5a:	0003      	movs	r3, r0
 801ab5c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801ab5e:	197b      	adds	r3, r7, r5
 801ab60:	781b      	ldrb	r3, [r3, #0]
}
 801ab62:	0018      	movs	r0, r3
 801ab64:	46bd      	mov	sp, r7
 801ab66:	b004      	add	sp, #16
 801ab68:	bdb0      	pop	{r4, r5, r7, pc}
 801ab6a:	46c0      	nop			@ (mov r8, r8)
 801ab6c:	200024e8 	.word	0x200024e8

0801ab70 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801ab70:	b580      	push	{r7, lr}
 801ab72:	af00      	add	r7, sp, #0
  ESPProg = true;
 801ab74:	4b02      	ldr	r3, [pc, #8]	@ (801ab80 <EnableESPProg+0x10>)
 801ab76:	2201      	movs	r2, #1
 801ab78:	701a      	strb	r2, [r3, #0]
}
 801ab7a:	46c0      	nop			@ (mov r8, r8)
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	bd80      	pop	{r7, pc}
 801ab80:	200027ac 	.word	0x200027ac

0801ab84 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801ab88:	4b01      	ldr	r3, [pc, #4]	@ (801ab90 <GetUsbRxPointer+0xc>)
}
 801ab8a:	0018      	movs	r0, r3
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	bd80      	pop	{r7, pc}
 801ab90:	2000286c 	.word	0x2000286c

0801ab94 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801ab98:	4b07      	ldr	r3, [pc, #28]	@ (801abb8 <ResetUsbRxDataSize+0x24>)
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801ab9e:	4a07      	ldr	r2, [pc, #28]	@ (801abbc <ResetUsbRxDataSize+0x28>)
 801aba0:	4b07      	ldr	r3, [pc, #28]	@ (801abc0 <ResetUsbRxDataSize+0x2c>)
 801aba2:	0011      	movs	r1, r2
 801aba4:	0018      	movs	r0, r3
 801aba6:	f7fe fc8e 	bl	80194c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801abaa:	4b05      	ldr	r3, [pc, #20]	@ (801abc0 <ResetUsbRxDataSize+0x2c>)
 801abac:	0018      	movs	r0, r3
 801abae:	f7fe fcd5 	bl	801955c <USBD_CDC_ReceivePacket>
}
 801abb2:	46c0      	nop			@ (mov r8, r8)
 801abb4:	46bd      	mov	sp, r7
 801abb6:	bd80      	pop	{r7, pc}
 801abb8:	20002868 	.word	0x20002868
 801abbc:	2000286c 	.word	0x2000286c
 801abc0:	200024e8 	.word	0x200024e8

0801abc4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801abc4:	b580      	push	{r7, lr}
 801abc6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801abc8:	4b02      	ldr	r3, [pc, #8]	@ (801abd4 <GetUsbRxDataSize+0x10>)
 801abca:	681b      	ldr	r3, [r3, #0]
}
 801abcc:	0018      	movs	r0, r3
 801abce:	46bd      	mov	sp, r7
 801abd0:	bd80      	pop	{r7, pc}
 801abd2:	46c0      	nop			@ (mov r8, r8)
 801abd4:	20002868 	.word	0x20002868

0801abd8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b082      	sub	sp, #8
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801abe0:	687a      	ldr	r2, [r7, #4]
 801abe2:	4b07      	ldr	r3, [pc, #28]	@ (801ac00 <GetUsbRxNextChunk+0x28>)
 801abe4:	18d2      	adds	r2, r2, r3
 801abe6:	4b07      	ldr	r3, [pc, #28]	@ (801ac04 <GetUsbRxNextChunk+0x2c>)
 801abe8:	0011      	movs	r1, r2
 801abea:	0018      	movs	r0, r3
 801abec:	f7fe fc6b 	bl	80194c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801abf0:	4b04      	ldr	r3, [pc, #16]	@ (801ac04 <GetUsbRxNextChunk+0x2c>)
 801abf2:	0018      	movs	r0, r3
 801abf4:	f7fe fcb2 	bl	801955c <USBD_CDC_ReceivePacket>
}
 801abf8:	46c0      	nop			@ (mov r8, r8)
 801abfa:	46bd      	mov	sp, r7
 801abfc:	b002      	add	sp, #8
 801abfe:	bd80      	pop	{r7, pc}
 801ac00:	2000286c 	.word	0x2000286c
 801ac04:	200024e8 	.word	0x200024e8

0801ac08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b082      	sub	sp, #8
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	0002      	movs	r2, r0
 801ac10:	6039      	str	r1, [r7, #0]
 801ac12:	1dfb      	adds	r3, r7, #7
 801ac14:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ac16:	683b      	ldr	r3, [r7, #0]
 801ac18:	2212      	movs	r2, #18
 801ac1a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ac1c:	4b02      	ldr	r3, [pc, #8]	@ (801ac28 <USBD_FS_DeviceDescriptor+0x20>)
}
 801ac1e:	0018      	movs	r0, r3
 801ac20:	46bd      	mov	sp, r7
 801ac22:	b002      	add	sp, #8
 801ac24:	bd80      	pop	{r7, pc}
 801ac26:	46c0      	nop			@ (mov r8, r8)
 801ac28:	2000021c 	.word	0x2000021c

0801ac2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b082      	sub	sp, #8
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	0002      	movs	r2, r0
 801ac34:	6039      	str	r1, [r7, #0]
 801ac36:	1dfb      	adds	r3, r7, #7
 801ac38:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	2204      	movs	r2, #4
 801ac3e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ac40:	4b02      	ldr	r3, [pc, #8]	@ (801ac4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ac42:	0018      	movs	r0, r3
 801ac44:	46bd      	mov	sp, r7
 801ac46:	b002      	add	sp, #8
 801ac48:	bd80      	pop	{r7, pc}
 801ac4a:	46c0      	nop			@ (mov r8, r8)
 801ac4c:	20000230 	.word	0x20000230

0801ac50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b082      	sub	sp, #8
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	0002      	movs	r2, r0
 801ac58:	6039      	str	r1, [r7, #0]
 801ac5a:	1dfb      	adds	r3, r7, #7
 801ac5c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ac5e:	1dfb      	adds	r3, r7, #7
 801ac60:	781b      	ldrb	r3, [r3, #0]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d106      	bne.n	801ac74 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ac66:	683a      	ldr	r2, [r7, #0]
 801ac68:	4908      	ldr	r1, [pc, #32]	@ (801ac8c <USBD_FS_ProductStrDescriptor+0x3c>)
 801ac6a:	4b09      	ldr	r3, [pc, #36]	@ (801ac90 <USBD_FS_ProductStrDescriptor+0x40>)
 801ac6c:	0018      	movs	r0, r3
 801ac6e:	f7ff fdb1 	bl	801a7d4 <USBD_GetString>
 801ac72:	e005      	b.n	801ac80 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ac74:	683a      	ldr	r2, [r7, #0]
 801ac76:	4905      	ldr	r1, [pc, #20]	@ (801ac8c <USBD_FS_ProductStrDescriptor+0x3c>)
 801ac78:	4b05      	ldr	r3, [pc, #20]	@ (801ac90 <USBD_FS_ProductStrDescriptor+0x40>)
 801ac7a:	0018      	movs	r0, r3
 801ac7c:	f7ff fdaa 	bl	801a7d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ac80:	4b02      	ldr	r3, [pc, #8]	@ (801ac8c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801ac82:	0018      	movs	r0, r3
 801ac84:	46bd      	mov	sp, r7
 801ac86:	b002      	add	sp, #8
 801ac88:	bd80      	pop	{r7, pc}
 801ac8a:	46c0      	nop			@ (mov r8, r8)
 801ac8c:	2000306c 	.word	0x2000306c
 801ac90:	080222d0 	.word	0x080222d0

0801ac94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b082      	sub	sp, #8
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	0002      	movs	r2, r0
 801ac9c:	6039      	str	r1, [r7, #0]
 801ac9e:	1dfb      	adds	r3, r7, #7
 801aca0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801aca2:	683a      	ldr	r2, [r7, #0]
 801aca4:	4904      	ldr	r1, [pc, #16]	@ (801acb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801aca6:	4b05      	ldr	r3, [pc, #20]	@ (801acbc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801aca8:	0018      	movs	r0, r3
 801acaa:	f7ff fd93 	bl	801a7d4 <USBD_GetString>
  return USBD_StrDesc;
 801acae:	4b02      	ldr	r3, [pc, #8]	@ (801acb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801acb0:	0018      	movs	r0, r3
 801acb2:	46bd      	mov	sp, r7
 801acb4:	b002      	add	sp, #8
 801acb6:	bd80      	pop	{r7, pc}
 801acb8:	2000306c 	.word	0x2000306c
 801acbc:	080222e8 	.word	0x080222e8

0801acc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801acc0:	b580      	push	{r7, lr}
 801acc2:	b082      	sub	sp, #8
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	0002      	movs	r2, r0
 801acc8:	6039      	str	r1, [r7, #0]
 801acca:	1dfb      	adds	r3, r7, #7
 801accc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801acce:	683b      	ldr	r3, [r7, #0]
 801acd0:	221a      	movs	r2, #26
 801acd2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801acd4:	f000 f84c 	bl	801ad70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801acd8:	4b02      	ldr	r3, [pc, #8]	@ (801ace4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801acda:	0018      	movs	r0, r3
 801acdc:	46bd      	mov	sp, r7
 801acde:	b002      	add	sp, #8
 801ace0:	bd80      	pop	{r7, pc}
 801ace2:	46c0      	nop			@ (mov r8, r8)
 801ace4:	20000234 	.word	0x20000234

0801ace8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b082      	sub	sp, #8
 801acec:	af00      	add	r7, sp, #0
 801acee:	0002      	movs	r2, r0
 801acf0:	6039      	str	r1, [r7, #0]
 801acf2:	1dfb      	adds	r3, r7, #7
 801acf4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801acf6:	1dfb      	adds	r3, r7, #7
 801acf8:	781b      	ldrb	r3, [r3, #0]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d106      	bne.n	801ad0c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801acfe:	683a      	ldr	r2, [r7, #0]
 801ad00:	4908      	ldr	r1, [pc, #32]	@ (801ad24 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801ad02:	4b09      	ldr	r3, [pc, #36]	@ (801ad28 <USBD_FS_ConfigStrDescriptor+0x40>)
 801ad04:	0018      	movs	r0, r3
 801ad06:	f7ff fd65 	bl	801a7d4 <USBD_GetString>
 801ad0a:	e005      	b.n	801ad18 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ad0c:	683a      	ldr	r2, [r7, #0]
 801ad0e:	4905      	ldr	r1, [pc, #20]	@ (801ad24 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801ad10:	4b05      	ldr	r3, [pc, #20]	@ (801ad28 <USBD_FS_ConfigStrDescriptor+0x40>)
 801ad12:	0018      	movs	r0, r3
 801ad14:	f7ff fd5e 	bl	801a7d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ad18:	4b02      	ldr	r3, [pc, #8]	@ (801ad24 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801ad1a:	0018      	movs	r0, r3
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	b002      	add	sp, #8
 801ad20:	bd80      	pop	{r7, pc}
 801ad22:	46c0      	nop			@ (mov r8, r8)
 801ad24:	2000306c 	.word	0x2000306c
 801ad28:	080222fc 	.word	0x080222fc

0801ad2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b082      	sub	sp, #8
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	0002      	movs	r2, r0
 801ad34:	6039      	str	r1, [r7, #0]
 801ad36:	1dfb      	adds	r3, r7, #7
 801ad38:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ad3a:	1dfb      	adds	r3, r7, #7
 801ad3c:	781b      	ldrb	r3, [r3, #0]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d106      	bne.n	801ad50 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ad42:	683a      	ldr	r2, [r7, #0]
 801ad44:	4908      	ldr	r1, [pc, #32]	@ (801ad68 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801ad46:	4b09      	ldr	r3, [pc, #36]	@ (801ad6c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801ad48:	0018      	movs	r0, r3
 801ad4a:	f7ff fd43 	bl	801a7d4 <USBD_GetString>
 801ad4e:	e005      	b.n	801ad5c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ad50:	683a      	ldr	r2, [r7, #0]
 801ad52:	4905      	ldr	r1, [pc, #20]	@ (801ad68 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801ad54:	4b05      	ldr	r3, [pc, #20]	@ (801ad6c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801ad56:	0018      	movs	r0, r3
 801ad58:	f7ff fd3c 	bl	801a7d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ad5c:	4b02      	ldr	r3, [pc, #8]	@ (801ad68 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801ad5e:	0018      	movs	r0, r3
 801ad60:	46bd      	mov	sp, r7
 801ad62:	b002      	add	sp, #8
 801ad64:	bd80      	pop	{r7, pc}
 801ad66:	46c0      	nop			@ (mov r8, r8)
 801ad68:	2000306c 	.word	0x2000306c
 801ad6c:	08022308 	.word	0x08022308

0801ad70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b084      	sub	sp, #16
 801ad74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ad76:	4b10      	ldr	r3, [pc, #64]	@ (801adb8 <Get_SerialNum+0x48>)
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ad7c:	4b0f      	ldr	r3, [pc, #60]	@ (801adbc <Get_SerialNum+0x4c>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ad82:	4b0f      	ldr	r3, [pc, #60]	@ (801adc0 <Get_SerialNum+0x50>)
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ad88:	68fa      	ldr	r2, [r7, #12]
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	18d3      	adds	r3, r2, r3
 801ad8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d00b      	beq.n	801adae <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ad96:	490b      	ldr	r1, [pc, #44]	@ (801adc4 <Get_SerialNum+0x54>)
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	2208      	movs	r2, #8
 801ad9c:	0018      	movs	r0, r3
 801ad9e:	f000 f815 	bl	801adcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ada2:	4909      	ldr	r1, [pc, #36]	@ (801adc8 <Get_SerialNum+0x58>)
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	2204      	movs	r2, #4
 801ada8:	0018      	movs	r0, r3
 801adaa:	f000 f80f 	bl	801adcc <IntToUnicode>
  }
}
 801adae:	46c0      	nop			@ (mov r8, r8)
 801adb0:	46bd      	mov	sp, r7
 801adb2:	b004      	add	sp, #16
 801adb4:	bd80      	pop	{r7, pc}
 801adb6:	46c0      	nop			@ (mov r8, r8)
 801adb8:	1ff80050 	.word	0x1ff80050
 801adbc:	1ff80054 	.word	0x1ff80054
 801adc0:	1ff80058 	.word	0x1ff80058
 801adc4:	20000236 	.word	0x20000236
 801adc8:	20000246 	.word	0x20000246

0801adcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b086      	sub	sp, #24
 801add0:	af00      	add	r7, sp, #0
 801add2:	60f8      	str	r0, [r7, #12]
 801add4:	60b9      	str	r1, [r7, #8]
 801add6:	1dfb      	adds	r3, r7, #7
 801add8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801adda:	2117      	movs	r1, #23
 801addc:	187b      	adds	r3, r7, r1
 801adde:	2200      	movs	r2, #0
 801ade0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801ade2:	187b      	adds	r3, r7, r1
 801ade4:	2200      	movs	r2, #0
 801ade6:	701a      	strb	r2, [r3, #0]
 801ade8:	e02f      	b.n	801ae4a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	0f1b      	lsrs	r3, r3, #28
 801adee:	2b09      	cmp	r3, #9
 801adf0:	d80d      	bhi.n	801ae0e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	0f1b      	lsrs	r3, r3, #28
 801adf6:	b2da      	uxtb	r2, r3
 801adf8:	2317      	movs	r3, #23
 801adfa:	18fb      	adds	r3, r7, r3
 801adfc:	781b      	ldrb	r3, [r3, #0]
 801adfe:	005b      	lsls	r3, r3, #1
 801ae00:	0019      	movs	r1, r3
 801ae02:	68bb      	ldr	r3, [r7, #8]
 801ae04:	185b      	adds	r3, r3, r1
 801ae06:	3230      	adds	r2, #48	@ 0x30
 801ae08:	b2d2      	uxtb	r2, r2
 801ae0a:	701a      	strb	r2, [r3, #0]
 801ae0c:	e00c      	b.n	801ae28 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	0f1b      	lsrs	r3, r3, #28
 801ae12:	b2da      	uxtb	r2, r3
 801ae14:	2317      	movs	r3, #23
 801ae16:	18fb      	adds	r3, r7, r3
 801ae18:	781b      	ldrb	r3, [r3, #0]
 801ae1a:	005b      	lsls	r3, r3, #1
 801ae1c:	0019      	movs	r1, r3
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	185b      	adds	r3, r3, r1
 801ae22:	3237      	adds	r2, #55	@ 0x37
 801ae24:	b2d2      	uxtb	r2, r2
 801ae26:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	011b      	lsls	r3, r3, #4
 801ae2c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ae2e:	2117      	movs	r1, #23
 801ae30:	187b      	adds	r3, r7, r1
 801ae32:	781b      	ldrb	r3, [r3, #0]
 801ae34:	005b      	lsls	r3, r3, #1
 801ae36:	3301      	adds	r3, #1
 801ae38:	68ba      	ldr	r2, [r7, #8]
 801ae3a:	18d3      	adds	r3, r2, r3
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ae40:	187b      	adds	r3, r7, r1
 801ae42:	781a      	ldrb	r2, [r3, #0]
 801ae44:	187b      	adds	r3, r7, r1
 801ae46:	3201      	adds	r2, #1
 801ae48:	701a      	strb	r2, [r3, #0]
 801ae4a:	2317      	movs	r3, #23
 801ae4c:	18fa      	adds	r2, r7, r3
 801ae4e:	1dfb      	adds	r3, r7, #7
 801ae50:	7812      	ldrb	r2, [r2, #0]
 801ae52:	781b      	ldrb	r3, [r3, #0]
 801ae54:	429a      	cmp	r2, r3
 801ae56:	d3c8      	bcc.n	801adea <IntToUnicode+0x1e>
  }
}
 801ae58:	46c0      	nop			@ (mov r8, r8)
 801ae5a:	46c0      	nop			@ (mov r8, r8)
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	b006      	add	sp, #24
 801ae60:	bd80      	pop	{r7, pc}
	...

0801ae64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	4a0a      	ldr	r2, [pc, #40]	@ (801ae9c <HAL_PCD_MspInit+0x38>)
 801ae72:	4293      	cmp	r3, r2
 801ae74:	d10e      	bne.n	801ae94 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801ae76:	4b0a      	ldr	r3, [pc, #40]	@ (801aea0 <HAL_PCD_MspInit+0x3c>)
 801ae78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ae7a:	4b09      	ldr	r3, [pc, #36]	@ (801aea0 <HAL_PCD_MspInit+0x3c>)
 801ae7c:	2180      	movs	r1, #128	@ 0x80
 801ae7e:	0409      	lsls	r1, r1, #16
 801ae80:	430a      	orrs	r2, r1
 801ae82:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801ae84:	2200      	movs	r2, #0
 801ae86:	2100      	movs	r1, #0
 801ae88:	201f      	movs	r0, #31
 801ae8a:	f7f2 fc75 	bl	800d778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801ae8e:	201f      	movs	r0, #31
 801ae90:	f7f2 fc87 	bl	800d7a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801ae94:	46c0      	nop			@ (mov r8, r8)
 801ae96:	46bd      	mov	sp, r7
 801ae98:	b002      	add	sp, #8
 801ae9a:	bd80      	pop	{r7, pc}
 801ae9c:	40005c00 	.word	0x40005c00
 801aea0:	40021000 	.word	0x40021000

0801aea4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b082      	sub	sp, #8
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801aeac:	687a      	ldr	r2, [r7, #4]
 801aeae:	23bc      	movs	r3, #188	@ 0xbc
 801aeb0:	009b      	lsls	r3, r3, #2
 801aeb2:	58d2      	ldr	r2, [r2, r3]
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	21ac      	movs	r1, #172	@ 0xac
 801aeb8:	0089      	lsls	r1, r1, #2
 801aeba:	468c      	mov	ip, r1
 801aebc:	4463      	add	r3, ip
 801aebe:	0019      	movs	r1, r3
 801aec0:	0010      	movs	r0, r2
 801aec2:	f7fe fc1d 	bl	8019700 <USBD_LL_SetupStage>
}
 801aec6:	46c0      	nop			@ (mov r8, r8)
 801aec8:	46bd      	mov	sp, r7
 801aeca:	b002      	add	sp, #8
 801aecc:	bd80      	pop	{r7, pc}

0801aece <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aece:	b590      	push	{r4, r7, lr}
 801aed0:	b083      	sub	sp, #12
 801aed2:	af00      	add	r7, sp, #0
 801aed4:	6078      	str	r0, [r7, #4]
 801aed6:	000a      	movs	r2, r1
 801aed8:	1cfb      	adds	r3, r7, #3
 801aeda:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801aedc:	687a      	ldr	r2, [r7, #4]
 801aede:	23bc      	movs	r3, #188	@ 0xbc
 801aee0:	009b      	lsls	r3, r3, #2
 801aee2:	58d4      	ldr	r4, [r2, r3]
 801aee4:	1cfb      	adds	r3, r7, #3
 801aee6:	781a      	ldrb	r2, [r3, #0]
 801aee8:	6878      	ldr	r0, [r7, #4]
 801aeea:	23be      	movs	r3, #190	@ 0xbe
 801aeec:	0059      	lsls	r1, r3, #1
 801aeee:	0013      	movs	r3, r2
 801aef0:	009b      	lsls	r3, r3, #2
 801aef2:	189b      	adds	r3, r3, r2
 801aef4:	00db      	lsls	r3, r3, #3
 801aef6:	18c3      	adds	r3, r0, r3
 801aef8:	185b      	adds	r3, r3, r1
 801aefa:	681a      	ldr	r2, [r3, #0]
 801aefc:	1cfb      	adds	r3, r7, #3
 801aefe:	781b      	ldrb	r3, [r3, #0]
 801af00:	0019      	movs	r1, r3
 801af02:	0020      	movs	r0, r4
 801af04:	f7fe fc5a 	bl	80197bc <USBD_LL_DataOutStage>
}
 801af08:	46c0      	nop			@ (mov r8, r8)
 801af0a:	46bd      	mov	sp, r7
 801af0c:	b003      	add	sp, #12
 801af0e:	bd90      	pop	{r4, r7, pc}

0801af10 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b082      	sub	sp, #8
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
 801af18:	000a      	movs	r2, r1
 801af1a:	1cfb      	adds	r3, r7, #3
 801af1c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801af1e:	687a      	ldr	r2, [r7, #4]
 801af20:	23bc      	movs	r3, #188	@ 0xbc
 801af22:	009b      	lsls	r3, r3, #2
 801af24:	58d0      	ldr	r0, [r2, r3]
 801af26:	1cfb      	adds	r3, r7, #3
 801af28:	781a      	ldrb	r2, [r3, #0]
 801af2a:	6879      	ldr	r1, [r7, #4]
 801af2c:	0013      	movs	r3, r2
 801af2e:	009b      	lsls	r3, r3, #2
 801af30:	189b      	adds	r3, r3, r2
 801af32:	00db      	lsls	r3, r3, #3
 801af34:	18cb      	adds	r3, r1, r3
 801af36:	333c      	adds	r3, #60	@ 0x3c
 801af38:	681a      	ldr	r2, [r3, #0]
 801af3a:	1cfb      	adds	r3, r7, #3
 801af3c:	781b      	ldrb	r3, [r3, #0]
 801af3e:	0019      	movs	r1, r3
 801af40:	f7fe fcbe 	bl	80198c0 <USBD_LL_DataInStage>
}
 801af44:	46c0      	nop			@ (mov r8, r8)
 801af46:	46bd      	mov	sp, r7
 801af48:	b002      	add	sp, #8
 801af4a:	bd80      	pop	{r7, pc}

0801af4c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b082      	sub	sp, #8
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801af54:	687a      	ldr	r2, [r7, #4]
 801af56:	23bc      	movs	r3, #188	@ 0xbc
 801af58:	009b      	lsls	r3, r3, #2
 801af5a:	58d3      	ldr	r3, [r2, r3]
 801af5c:	0018      	movs	r0, r3
 801af5e:	f7fe fdf5 	bl	8019b4c <USBD_LL_SOF>
}
 801af62:	46c0      	nop			@ (mov r8, r8)
 801af64:	46bd      	mov	sp, r7
 801af66:	b002      	add	sp, #8
 801af68:	bd80      	pop	{r7, pc}

0801af6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af6a:	b580      	push	{r7, lr}
 801af6c:	b084      	sub	sp, #16
 801af6e:	af00      	add	r7, sp, #0
 801af70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801af72:	230f      	movs	r3, #15
 801af74:	18fb      	adds	r3, r7, r3
 801af76:	2201      	movs	r2, #1
 801af78:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	689b      	ldr	r3, [r3, #8]
 801af7e:	2b02      	cmp	r3, #2
 801af80:	d001      	beq.n	801af86 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801af82:	f7ec fa69 	bl	8007458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801af86:	687a      	ldr	r2, [r7, #4]
 801af88:	23bc      	movs	r3, #188	@ 0xbc
 801af8a:	009b      	lsls	r3, r3, #2
 801af8c:	58d2      	ldr	r2, [r2, r3]
 801af8e:	230f      	movs	r3, #15
 801af90:	18fb      	adds	r3, r7, r3
 801af92:	781b      	ldrb	r3, [r3, #0]
 801af94:	0019      	movs	r1, r3
 801af96:	0010      	movs	r0, r2
 801af98:	f7fe fd97 	bl	8019aca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801af9c:	687a      	ldr	r2, [r7, #4]
 801af9e:	23bc      	movs	r3, #188	@ 0xbc
 801afa0:	009b      	lsls	r3, r3, #2
 801afa2:	58d3      	ldr	r3, [r2, r3]
 801afa4:	0018      	movs	r0, r3
 801afa6:	f7fe fd48 	bl	8019a3a <USBD_LL_Reset>
}
 801afaa:	46c0      	nop			@ (mov r8, r8)
 801afac:	46bd      	mov	sp, r7
 801afae:	b004      	add	sp, #16
 801afb0:	bd80      	pop	{r7, pc}
	...

0801afb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b082      	sub	sp, #8
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801afbc:	687a      	ldr	r2, [r7, #4]
 801afbe:	23bc      	movs	r3, #188	@ 0xbc
 801afc0:	009b      	lsls	r3, r3, #2
 801afc2:	58d3      	ldr	r3, [r2, r3]
 801afc4:	0018      	movs	r0, r3
 801afc6:	f7fe fd91 	bl	8019aec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	699b      	ldr	r3, [r3, #24]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d005      	beq.n	801afde <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801afd2:	4b05      	ldr	r3, [pc, #20]	@ (801afe8 <HAL_PCD_SuspendCallback+0x34>)
 801afd4:	691a      	ldr	r2, [r3, #16]
 801afd6:	4b04      	ldr	r3, [pc, #16]	@ (801afe8 <HAL_PCD_SuspendCallback+0x34>)
 801afd8:	2106      	movs	r1, #6
 801afda:	430a      	orrs	r2, r1
 801afdc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801afde:	46c0      	nop			@ (mov r8, r8)
 801afe0:	46bd      	mov	sp, r7
 801afe2:	b002      	add	sp, #8
 801afe4:	bd80      	pop	{r7, pc}
 801afe6:	46c0      	nop			@ (mov r8, r8)
 801afe8:	e000ed00 	.word	0xe000ed00

0801afec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b082      	sub	sp, #8
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	699b      	ldr	r3, [r3, #24]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d007      	beq.n	801b00c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801affc:	4b09      	ldr	r3, [pc, #36]	@ (801b024 <HAL_PCD_ResumeCallback+0x38>)
 801affe:	691a      	ldr	r2, [r3, #16]
 801b000:	4b08      	ldr	r3, [pc, #32]	@ (801b024 <HAL_PCD_ResumeCallback+0x38>)
 801b002:	2106      	movs	r1, #6
 801b004:	438a      	bics	r2, r1
 801b006:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801b008:	f000 fa44 	bl	801b494 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b00c:	687a      	ldr	r2, [r7, #4]
 801b00e:	23bc      	movs	r3, #188	@ 0xbc
 801b010:	009b      	lsls	r3, r3, #2
 801b012:	58d3      	ldr	r3, [r2, r3]
 801b014:	0018      	movs	r0, r3
 801b016:	f7fe fd81 	bl	8019b1c <USBD_LL_Resume>
}
 801b01a:	46c0      	nop			@ (mov r8, r8)
 801b01c:	46bd      	mov	sp, r7
 801b01e:	b002      	add	sp, #8
 801b020:	bd80      	pop	{r7, pc}
 801b022:	46c0      	nop			@ (mov r8, r8)
 801b024:	e000ed00 	.word	0xe000ed00

0801b028 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b082      	sub	sp, #8
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801b030:	4a2d      	ldr	r2, [pc, #180]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b032:	23bc      	movs	r3, #188	@ 0xbc
 801b034:	009b      	lsls	r3, r3, #2
 801b036:	6879      	ldr	r1, [r7, #4]
 801b038:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801b03a:	687a      	ldr	r2, [r7, #4]
 801b03c:	23b0      	movs	r3, #176	@ 0xb0
 801b03e:	009b      	lsls	r3, r3, #2
 801b040:	4929      	ldr	r1, [pc, #164]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b042:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801b044:	4b28      	ldr	r3, [pc, #160]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b046:	4a29      	ldr	r2, [pc, #164]	@ (801b0ec <USBD_LL_Init+0xc4>)
 801b048:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801b04a:	4b27      	ldr	r3, [pc, #156]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b04c:	2208      	movs	r2, #8
 801b04e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801b050:	4b25      	ldr	r3, [pc, #148]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b052:	2202      	movs	r2, #2
 801b054:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b056:	4b24      	ldr	r3, [pc, #144]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b058:	2202      	movs	r2, #2
 801b05a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801b05c:	4b22      	ldr	r3, [pc, #136]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b05e:	2200      	movs	r2, #0
 801b060:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801b062:	4b21      	ldr	r3, [pc, #132]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b064:	2200      	movs	r2, #0
 801b066:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801b068:	4b1f      	ldr	r3, [pc, #124]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b06a:	2200      	movs	r2, #0
 801b06c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801b06e:	4b1e      	ldr	r3, [pc, #120]	@ (801b0e8 <USBD_LL_Init+0xc0>)
 801b070:	0018      	movs	r0, r3
 801b072:	f7f6 f90b 	bl	801128c <HAL_PCD_Init>
 801b076:	1e03      	subs	r3, r0, #0
 801b078:	d001      	beq.n	801b07e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801b07a:	f7ec f9ed 	bl	8007458 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	23b0      	movs	r3, #176	@ 0xb0
 801b082:	009b      	lsls	r3, r3, #2
 801b084:	58d0      	ldr	r0, [r2, r3]
 801b086:	2318      	movs	r3, #24
 801b088:	2200      	movs	r2, #0
 801b08a:	2100      	movs	r1, #0
 801b08c:	f7f7 fecc 	bl	8012e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801b090:	687a      	ldr	r2, [r7, #4]
 801b092:	23b0      	movs	r3, #176	@ 0xb0
 801b094:	009b      	lsls	r3, r3, #2
 801b096:	58d0      	ldr	r0, [r2, r3]
 801b098:	2358      	movs	r3, #88	@ 0x58
 801b09a:	2200      	movs	r2, #0
 801b09c:	2180      	movs	r1, #128	@ 0x80
 801b09e:	f7f7 fec3 	bl	8012e28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801b0a2:	687a      	ldr	r2, [r7, #4]
 801b0a4:	23b0      	movs	r3, #176	@ 0xb0
 801b0a6:	009b      	lsls	r3, r3, #2
 801b0a8:	58d0      	ldr	r0, [r2, r3]
 801b0aa:	23c0      	movs	r3, #192	@ 0xc0
 801b0ac:	2200      	movs	r2, #0
 801b0ae:	2181      	movs	r1, #129	@ 0x81
 801b0b0:	f7f7 feba 	bl	8012e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801b0b4:	687a      	ldr	r2, [r7, #4]
 801b0b6:	23b0      	movs	r3, #176	@ 0xb0
 801b0b8:	009b      	lsls	r3, r3, #2
 801b0ba:	58d0      	ldr	r0, [r2, r3]
 801b0bc:	2388      	movs	r3, #136	@ 0x88
 801b0be:	005b      	lsls	r3, r3, #1
 801b0c0:	2200      	movs	r2, #0
 801b0c2:	2101      	movs	r1, #1
 801b0c4:	f7f7 feb0 	bl	8012e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801b0c8:	687a      	ldr	r2, [r7, #4]
 801b0ca:	23b0      	movs	r3, #176	@ 0xb0
 801b0cc:	009b      	lsls	r3, r3, #2
 801b0ce:	58d0      	ldr	r0, [r2, r3]
 801b0d0:	2380      	movs	r3, #128	@ 0x80
 801b0d2:	005b      	lsls	r3, r3, #1
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	2182      	movs	r1, #130	@ 0x82
 801b0d8:	f7f7 fea6 	bl	8012e28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801b0dc:	2300      	movs	r3, #0
}
 801b0de:	0018      	movs	r0, r3
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	b002      	add	sp, #8
 801b0e4:	bd80      	pop	{r7, pc}
 801b0e6:	46c0      	nop			@ (mov r8, r8)
 801b0e8:	2000326c 	.word	0x2000326c
 801b0ec:	40005c00 	.word	0x40005c00

0801b0f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0f2:	b085      	sub	sp, #20
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0f8:	210f      	movs	r1, #15
 801b0fa:	187b      	adds	r3, r7, r1
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b100:	260e      	movs	r6, #14
 801b102:	19bb      	adds	r3, r7, r6
 801b104:	2200      	movs	r2, #0
 801b106:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b108:	687a      	ldr	r2, [r7, #4]
 801b10a:	23b0      	movs	r3, #176	@ 0xb0
 801b10c:	009b      	lsls	r3, r3, #2
 801b10e:	58d3      	ldr	r3, [r2, r3]
 801b110:	000d      	movs	r5, r1
 801b112:	187c      	adds	r4, r7, r1
 801b114:	0018      	movs	r0, r3
 801b116:	f7f6 f9b9 	bl	801148c <HAL_PCD_Start>
 801b11a:	0003      	movs	r3, r0
 801b11c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b11e:	19bc      	adds	r4, r7, r6
 801b120:	197b      	adds	r3, r7, r5
 801b122:	781b      	ldrb	r3, [r3, #0]
 801b124:	0018      	movs	r0, r3
 801b126:	f000 f9bc 	bl	801b4a2 <USBD_Get_USB_Status>
 801b12a:	0003      	movs	r3, r0
 801b12c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b12e:	19bb      	adds	r3, r7, r6
 801b130:	781b      	ldrb	r3, [r3, #0]
}
 801b132:	0018      	movs	r0, r3
 801b134:	46bd      	mov	sp, r7
 801b136:	b005      	add	sp, #20
 801b138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b13a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b13a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b13c:	b085      	sub	sp, #20
 801b13e:	af00      	add	r7, sp, #0
 801b140:	6078      	str	r0, [r7, #4]
 801b142:	000c      	movs	r4, r1
 801b144:	0010      	movs	r0, r2
 801b146:	0019      	movs	r1, r3
 801b148:	1cfb      	adds	r3, r7, #3
 801b14a:	1c22      	adds	r2, r4, #0
 801b14c:	701a      	strb	r2, [r3, #0]
 801b14e:	1cbb      	adds	r3, r7, #2
 801b150:	1c02      	adds	r2, r0, #0
 801b152:	701a      	strb	r2, [r3, #0]
 801b154:	003b      	movs	r3, r7
 801b156:	1c0a      	adds	r2, r1, #0
 801b158:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b15a:	260f      	movs	r6, #15
 801b15c:	19bb      	adds	r3, r7, r6
 801b15e:	2200      	movs	r2, #0
 801b160:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b162:	250e      	movs	r5, #14
 801b164:	197b      	adds	r3, r7, r5
 801b166:	2200      	movs	r2, #0
 801b168:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b16a:	687a      	ldr	r2, [r7, #4]
 801b16c:	23b0      	movs	r3, #176	@ 0xb0
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	58d0      	ldr	r0, [r2, r3]
 801b172:	19bc      	adds	r4, r7, r6
 801b174:	1cbb      	adds	r3, r7, #2
 801b176:	781d      	ldrb	r5, [r3, #0]
 801b178:	003b      	movs	r3, r7
 801b17a:	881a      	ldrh	r2, [r3, #0]
 801b17c:	1cfb      	adds	r3, r7, #3
 801b17e:	7819      	ldrb	r1, [r3, #0]
 801b180:	002b      	movs	r3, r5
 801b182:	f7f6 fb18 	bl	80117b6 <HAL_PCD_EP_Open>
 801b186:	0003      	movs	r3, r0
 801b188:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b18a:	250e      	movs	r5, #14
 801b18c:	197c      	adds	r4, r7, r5
 801b18e:	19bb      	adds	r3, r7, r6
 801b190:	781b      	ldrb	r3, [r3, #0]
 801b192:	0018      	movs	r0, r3
 801b194:	f000 f985 	bl	801b4a2 <USBD_Get_USB_Status>
 801b198:	0003      	movs	r3, r0
 801b19a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b19c:	197b      	adds	r3, r7, r5
 801b19e:	781b      	ldrb	r3, [r3, #0]
}
 801b1a0:	0018      	movs	r0, r3
 801b1a2:	46bd      	mov	sp, r7
 801b1a4:	b005      	add	sp, #20
 801b1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b1a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1aa:	b085      	sub	sp, #20
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	6078      	str	r0, [r7, #4]
 801b1b0:	000a      	movs	r2, r1
 801b1b2:	1cfb      	adds	r3, r7, #3
 801b1b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b1b6:	210f      	movs	r1, #15
 801b1b8:	187b      	adds	r3, r7, r1
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b1be:	260e      	movs	r6, #14
 801b1c0:	19bb      	adds	r3, r7, r6
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b1c6:	687a      	ldr	r2, [r7, #4]
 801b1c8:	23b0      	movs	r3, #176	@ 0xb0
 801b1ca:	009b      	lsls	r3, r3, #2
 801b1cc:	58d2      	ldr	r2, [r2, r3]
 801b1ce:	000d      	movs	r5, r1
 801b1d0:	187c      	adds	r4, r7, r1
 801b1d2:	1cfb      	adds	r3, r7, #3
 801b1d4:	781b      	ldrb	r3, [r3, #0]
 801b1d6:	0019      	movs	r1, r3
 801b1d8:	0010      	movs	r0, r2
 801b1da:	f7f6 fb5b 	bl	8011894 <HAL_PCD_EP_Close>
 801b1de:	0003      	movs	r3, r0
 801b1e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1e2:	19bc      	adds	r4, r7, r6
 801b1e4:	197b      	adds	r3, r7, r5
 801b1e6:	781b      	ldrb	r3, [r3, #0]
 801b1e8:	0018      	movs	r0, r3
 801b1ea:	f000 f95a 	bl	801b4a2 <USBD_Get_USB_Status>
 801b1ee:	0003      	movs	r3, r0
 801b1f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b1f2:	19bb      	adds	r3, r7, r6
 801b1f4:	781b      	ldrb	r3, [r3, #0]
}
 801b1f6:	0018      	movs	r0, r3
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	b005      	add	sp, #20
 801b1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b1fe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b200:	b085      	sub	sp, #20
 801b202:	af00      	add	r7, sp, #0
 801b204:	6078      	str	r0, [r7, #4]
 801b206:	000a      	movs	r2, r1
 801b208:	1cfb      	adds	r3, r7, #3
 801b20a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b20c:	210f      	movs	r1, #15
 801b20e:	187b      	adds	r3, r7, r1
 801b210:	2200      	movs	r2, #0
 801b212:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b214:	260e      	movs	r6, #14
 801b216:	19bb      	adds	r3, r7, r6
 801b218:	2200      	movs	r2, #0
 801b21a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b21c:	687a      	ldr	r2, [r7, #4]
 801b21e:	23b0      	movs	r3, #176	@ 0xb0
 801b220:	009b      	lsls	r3, r3, #2
 801b222:	58d2      	ldr	r2, [r2, r3]
 801b224:	000d      	movs	r5, r1
 801b226:	187c      	adds	r4, r7, r1
 801b228:	1cfb      	adds	r3, r7, #3
 801b22a:	781b      	ldrb	r3, [r3, #0]
 801b22c:	0019      	movs	r1, r3
 801b22e:	0010      	movs	r0, r2
 801b230:	f7f6 fc0d 	bl	8011a4e <HAL_PCD_EP_SetStall>
 801b234:	0003      	movs	r3, r0
 801b236:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b238:	19bc      	adds	r4, r7, r6
 801b23a:	197b      	adds	r3, r7, r5
 801b23c:	781b      	ldrb	r3, [r3, #0]
 801b23e:	0018      	movs	r0, r3
 801b240:	f000 f92f 	bl	801b4a2 <USBD_Get_USB_Status>
 801b244:	0003      	movs	r3, r0
 801b246:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b248:	19bb      	adds	r3, r7, r6
 801b24a:	781b      	ldrb	r3, [r3, #0]
}
 801b24c:	0018      	movs	r0, r3
 801b24e:	46bd      	mov	sp, r7
 801b250:	b005      	add	sp, #20
 801b252:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b254 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b254:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b256:	b085      	sub	sp, #20
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
 801b25c:	000a      	movs	r2, r1
 801b25e:	1cfb      	adds	r3, r7, #3
 801b260:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b262:	210f      	movs	r1, #15
 801b264:	187b      	adds	r3, r7, r1
 801b266:	2200      	movs	r2, #0
 801b268:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b26a:	260e      	movs	r6, #14
 801b26c:	19bb      	adds	r3, r7, r6
 801b26e:	2200      	movs	r2, #0
 801b270:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b272:	687a      	ldr	r2, [r7, #4]
 801b274:	23b0      	movs	r3, #176	@ 0xb0
 801b276:	009b      	lsls	r3, r3, #2
 801b278:	58d2      	ldr	r2, [r2, r3]
 801b27a:	000d      	movs	r5, r1
 801b27c:	187c      	adds	r4, r7, r1
 801b27e:	1cfb      	adds	r3, r7, #3
 801b280:	781b      	ldrb	r3, [r3, #0]
 801b282:	0019      	movs	r1, r3
 801b284:	0010      	movs	r0, r2
 801b286:	f7f6 fc3e 	bl	8011b06 <HAL_PCD_EP_ClrStall>
 801b28a:	0003      	movs	r3, r0
 801b28c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b28e:	19bc      	adds	r4, r7, r6
 801b290:	197b      	adds	r3, r7, r5
 801b292:	781b      	ldrb	r3, [r3, #0]
 801b294:	0018      	movs	r0, r3
 801b296:	f000 f904 	bl	801b4a2 <USBD_Get_USB_Status>
 801b29a:	0003      	movs	r3, r0
 801b29c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b29e:	19bb      	adds	r3, r7, r6
 801b2a0:	781b      	ldrb	r3, [r3, #0]
}
 801b2a2:	0018      	movs	r0, r3
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	b005      	add	sp, #20
 801b2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b2aa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b2aa:	b580      	push	{r7, lr}
 801b2ac:	b084      	sub	sp, #16
 801b2ae:	af00      	add	r7, sp, #0
 801b2b0:	6078      	str	r0, [r7, #4]
 801b2b2:	000a      	movs	r2, r1
 801b2b4:	1cfb      	adds	r3, r7, #3
 801b2b6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b2b8:	687a      	ldr	r2, [r7, #4]
 801b2ba:	23b0      	movs	r3, #176	@ 0xb0
 801b2bc:	009b      	lsls	r3, r3, #2
 801b2be:	58d3      	ldr	r3, [r2, r3]
 801b2c0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b2c2:	1cfb      	adds	r3, r7, #3
 801b2c4:	781b      	ldrb	r3, [r3, #0]
 801b2c6:	b25b      	sxtb	r3, r3
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	da0d      	bge.n	801b2e8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b2cc:	1cfb      	adds	r3, r7, #3
 801b2ce:	781b      	ldrb	r3, [r3, #0]
 801b2d0:	227f      	movs	r2, #127	@ 0x7f
 801b2d2:	4013      	ands	r3, r2
 801b2d4:	68f9      	ldr	r1, [r7, #12]
 801b2d6:	1c5a      	adds	r2, r3, #1
 801b2d8:	0013      	movs	r3, r2
 801b2da:	009b      	lsls	r3, r3, #2
 801b2dc:	189b      	adds	r3, r3, r2
 801b2de:	00db      	lsls	r3, r3, #3
 801b2e0:	18cb      	adds	r3, r1, r3
 801b2e2:	3302      	adds	r3, #2
 801b2e4:	781b      	ldrb	r3, [r3, #0]
 801b2e6:	e00d      	b.n	801b304 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b2e8:	1cfb      	adds	r3, r7, #3
 801b2ea:	781b      	ldrb	r3, [r3, #0]
 801b2ec:	227f      	movs	r2, #127	@ 0x7f
 801b2ee:	401a      	ands	r2, r3
 801b2f0:	68f8      	ldr	r0, [r7, #12]
 801b2f2:	23b5      	movs	r3, #181	@ 0xb5
 801b2f4:	0059      	lsls	r1, r3, #1
 801b2f6:	0013      	movs	r3, r2
 801b2f8:	009b      	lsls	r3, r3, #2
 801b2fa:	189b      	adds	r3, r3, r2
 801b2fc:	00db      	lsls	r3, r3, #3
 801b2fe:	18c3      	adds	r3, r0, r3
 801b300:	185b      	adds	r3, r3, r1
 801b302:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b304:	0018      	movs	r0, r3
 801b306:	46bd      	mov	sp, r7
 801b308:	b004      	add	sp, #16
 801b30a:	bd80      	pop	{r7, pc}

0801b30c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b30e:	b085      	sub	sp, #20
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
 801b314:	000a      	movs	r2, r1
 801b316:	1cfb      	adds	r3, r7, #3
 801b318:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b31a:	210f      	movs	r1, #15
 801b31c:	187b      	adds	r3, r7, r1
 801b31e:	2200      	movs	r2, #0
 801b320:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b322:	260e      	movs	r6, #14
 801b324:	19bb      	adds	r3, r7, r6
 801b326:	2200      	movs	r2, #0
 801b328:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b32a:	687a      	ldr	r2, [r7, #4]
 801b32c:	23b0      	movs	r3, #176	@ 0xb0
 801b32e:	009b      	lsls	r3, r3, #2
 801b330:	58d2      	ldr	r2, [r2, r3]
 801b332:	000d      	movs	r5, r1
 801b334:	187c      	adds	r4, r7, r1
 801b336:	1cfb      	adds	r3, r7, #3
 801b338:	781b      	ldrb	r3, [r3, #0]
 801b33a:	0019      	movs	r1, r3
 801b33c:	0010      	movs	r0, r2
 801b33e:	f7f6 fa0f 	bl	8011760 <HAL_PCD_SetAddress>
 801b342:	0003      	movs	r3, r0
 801b344:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b346:	19bc      	adds	r4, r7, r6
 801b348:	197b      	adds	r3, r7, r5
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	0018      	movs	r0, r3
 801b34e:	f000 f8a8 	bl	801b4a2 <USBD_Get_USB_Status>
 801b352:	0003      	movs	r3, r0
 801b354:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b356:	19bb      	adds	r3, r7, r6
 801b358:	781b      	ldrb	r3, [r3, #0]
}
 801b35a:	0018      	movs	r0, r3
 801b35c:	46bd      	mov	sp, r7
 801b35e:	b005      	add	sp, #20
 801b360:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b362 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801b362:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b364:	b087      	sub	sp, #28
 801b366:	af00      	add	r7, sp, #0
 801b368:	60f8      	str	r0, [r7, #12]
 801b36a:	0008      	movs	r0, r1
 801b36c:	607a      	str	r2, [r7, #4]
 801b36e:	0019      	movs	r1, r3
 801b370:	230b      	movs	r3, #11
 801b372:	18fb      	adds	r3, r7, r3
 801b374:	1c02      	adds	r2, r0, #0
 801b376:	701a      	strb	r2, [r3, #0]
 801b378:	2408      	movs	r4, #8
 801b37a:	193b      	adds	r3, r7, r4
 801b37c:	1c0a      	adds	r2, r1, #0
 801b37e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b380:	2117      	movs	r1, #23
 801b382:	187b      	adds	r3, r7, r1
 801b384:	2200      	movs	r2, #0
 801b386:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b388:	2516      	movs	r5, #22
 801b38a:	197b      	adds	r3, r7, r5
 801b38c:	2200      	movs	r2, #0
 801b38e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b390:	68fa      	ldr	r2, [r7, #12]
 801b392:	23b0      	movs	r3, #176	@ 0xb0
 801b394:	009b      	lsls	r3, r3, #2
 801b396:	58d0      	ldr	r0, [r2, r3]
 801b398:	193b      	adds	r3, r7, r4
 801b39a:	881d      	ldrh	r5, [r3, #0]
 801b39c:	000e      	movs	r6, r1
 801b39e:	187c      	adds	r4, r7, r1
 801b3a0:	687a      	ldr	r2, [r7, #4]
 801b3a2:	230b      	movs	r3, #11
 801b3a4:	18fb      	adds	r3, r7, r3
 801b3a6:	7819      	ldrb	r1, [r3, #0]
 801b3a8:	002b      	movs	r3, r5
 801b3aa:	f7f6 fb14 	bl	80119d6 <HAL_PCD_EP_Transmit>
 801b3ae:	0003      	movs	r3, r0
 801b3b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b3b2:	2516      	movs	r5, #22
 801b3b4:	197c      	adds	r4, r7, r5
 801b3b6:	19bb      	adds	r3, r7, r6
 801b3b8:	781b      	ldrb	r3, [r3, #0]
 801b3ba:	0018      	movs	r0, r3
 801b3bc:	f000 f871 	bl	801b4a2 <USBD_Get_USB_Status>
 801b3c0:	0003      	movs	r3, r0
 801b3c2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b3c4:	197b      	adds	r3, r7, r5
 801b3c6:	781b      	ldrb	r3, [r3, #0]
}
 801b3c8:	0018      	movs	r0, r3
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	b007      	add	sp, #28
 801b3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b3d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801b3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3d2:	b087      	sub	sp, #28
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	60f8      	str	r0, [r7, #12]
 801b3d8:	0008      	movs	r0, r1
 801b3da:	607a      	str	r2, [r7, #4]
 801b3dc:	0019      	movs	r1, r3
 801b3de:	230b      	movs	r3, #11
 801b3e0:	18fb      	adds	r3, r7, r3
 801b3e2:	1c02      	adds	r2, r0, #0
 801b3e4:	701a      	strb	r2, [r3, #0]
 801b3e6:	2408      	movs	r4, #8
 801b3e8:	193b      	adds	r3, r7, r4
 801b3ea:	1c0a      	adds	r2, r1, #0
 801b3ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b3ee:	2117      	movs	r1, #23
 801b3f0:	187b      	adds	r3, r7, r1
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b3f6:	2516      	movs	r5, #22
 801b3f8:	197b      	adds	r3, r7, r5
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b3fe:	68fa      	ldr	r2, [r7, #12]
 801b400:	23b0      	movs	r3, #176	@ 0xb0
 801b402:	009b      	lsls	r3, r3, #2
 801b404:	58d0      	ldr	r0, [r2, r3]
 801b406:	193b      	adds	r3, r7, r4
 801b408:	881d      	ldrh	r5, [r3, #0]
 801b40a:	000e      	movs	r6, r1
 801b40c:	187c      	adds	r4, r7, r1
 801b40e:	687a      	ldr	r2, [r7, #4]
 801b410:	230b      	movs	r3, #11
 801b412:	18fb      	adds	r3, r7, r3
 801b414:	7819      	ldrb	r1, [r3, #0]
 801b416:	002b      	movs	r3, r5
 801b418:	f7f6 fa8d 	bl	8011936 <HAL_PCD_EP_Receive>
 801b41c:	0003      	movs	r3, r0
 801b41e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b420:	2516      	movs	r5, #22
 801b422:	197c      	adds	r4, r7, r5
 801b424:	19bb      	adds	r3, r7, r6
 801b426:	781b      	ldrb	r3, [r3, #0]
 801b428:	0018      	movs	r0, r3
 801b42a:	f000 f83a 	bl	801b4a2 <USBD_Get_USB_Status>
 801b42e:	0003      	movs	r3, r0
 801b430:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b432:	197b      	adds	r3, r7, r5
 801b434:	781b      	ldrb	r3, [r3, #0]
}
 801b436:	0018      	movs	r0, r3
 801b438:	46bd      	mov	sp, r7
 801b43a:	b007      	add	sp, #28
 801b43c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b43e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b43e:	b580      	push	{r7, lr}
 801b440:	b082      	sub	sp, #8
 801b442:	af00      	add	r7, sp, #0
 801b444:	6078      	str	r0, [r7, #4]
 801b446:	000a      	movs	r2, r1
 801b448:	1cfb      	adds	r3, r7, #3
 801b44a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b44c:	687a      	ldr	r2, [r7, #4]
 801b44e:	23b0      	movs	r3, #176	@ 0xb0
 801b450:	009b      	lsls	r3, r3, #2
 801b452:	58d2      	ldr	r2, [r2, r3]
 801b454:	1cfb      	adds	r3, r7, #3
 801b456:	781b      	ldrb	r3, [r3, #0]
 801b458:	0019      	movs	r1, r3
 801b45a:	0010      	movs	r0, r2
 801b45c:	f7f6 faa2 	bl	80119a4 <HAL_PCD_EP_GetRxCount>
 801b460:	0003      	movs	r3, r0
}
 801b462:	0018      	movs	r0, r3
 801b464:	46bd      	mov	sp, r7
 801b466:	b002      	add	sp, #8
 801b468:	bd80      	pop	{r7, pc}
	...

0801b46c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b082      	sub	sp, #8
 801b470:	af00      	add	r7, sp, #0
 801b472:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b474:	4b02      	ldr	r3, [pc, #8]	@ (801b480 <USBD_static_malloc+0x14>)
}
 801b476:	0018      	movs	r0, r3
 801b478:	46bd      	mov	sp, r7
 801b47a:	b002      	add	sp, #8
 801b47c:	bd80      	pop	{r7, pc}
 801b47e:	46c0      	nop			@ (mov r8, r8)
 801b480:	20003560 	.word	0x20003560

0801b484 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]

}
 801b48c:	46c0      	nop			@ (mov r8, r8)
 801b48e:	46bd      	mov	sp, r7
 801b490:	b002      	add	sp, #8
 801b492:	bd80      	pop	{r7, pc}

0801b494 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801b494:	b580      	push	{r7, lr}
 801b496:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801b498:	f7eb ff0c 	bl	80072b4 <SystemClock_Config>
}
 801b49c:	46c0      	nop			@ (mov r8, r8)
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	bd80      	pop	{r7, pc}

0801b4a2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b4a2:	b580      	push	{r7, lr}
 801b4a4:	b084      	sub	sp, #16
 801b4a6:	af00      	add	r7, sp, #0
 801b4a8:	0002      	movs	r2, r0
 801b4aa:	1dfb      	adds	r3, r7, #7
 801b4ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b4ae:	230f      	movs	r3, #15
 801b4b0:	18fb      	adds	r3, r7, r3
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801b4b6:	1dfb      	adds	r3, r7, #7
 801b4b8:	781b      	ldrb	r3, [r3, #0]
 801b4ba:	2b03      	cmp	r3, #3
 801b4bc:	d017      	beq.n	801b4ee <USBD_Get_USB_Status+0x4c>
 801b4be:	dc1b      	bgt.n	801b4f8 <USBD_Get_USB_Status+0x56>
 801b4c0:	2b02      	cmp	r3, #2
 801b4c2:	d00f      	beq.n	801b4e4 <USBD_Get_USB_Status+0x42>
 801b4c4:	dc18      	bgt.n	801b4f8 <USBD_Get_USB_Status+0x56>
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d002      	beq.n	801b4d0 <USBD_Get_USB_Status+0x2e>
 801b4ca:	2b01      	cmp	r3, #1
 801b4cc:	d005      	beq.n	801b4da <USBD_Get_USB_Status+0x38>
 801b4ce:	e013      	b.n	801b4f8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b4d0:	230f      	movs	r3, #15
 801b4d2:	18fb      	adds	r3, r7, r3
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	701a      	strb	r2, [r3, #0]
    break;
 801b4d8:	e013      	b.n	801b502 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b4da:	230f      	movs	r3, #15
 801b4dc:	18fb      	adds	r3, r7, r3
 801b4de:	2202      	movs	r2, #2
 801b4e0:	701a      	strb	r2, [r3, #0]
    break;
 801b4e2:	e00e      	b.n	801b502 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b4e4:	230f      	movs	r3, #15
 801b4e6:	18fb      	adds	r3, r7, r3
 801b4e8:	2201      	movs	r2, #1
 801b4ea:	701a      	strb	r2, [r3, #0]
    break;
 801b4ec:	e009      	b.n	801b502 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b4ee:	230f      	movs	r3, #15
 801b4f0:	18fb      	adds	r3, r7, r3
 801b4f2:	2202      	movs	r2, #2
 801b4f4:	701a      	strb	r2, [r3, #0]
    break;
 801b4f6:	e004      	b.n	801b502 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801b4f8:	230f      	movs	r3, #15
 801b4fa:	18fb      	adds	r3, r7, r3
 801b4fc:	2202      	movs	r2, #2
 801b4fe:	701a      	strb	r2, [r3, #0]
    break;
 801b500:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801b502:	230f      	movs	r3, #15
 801b504:	18fb      	adds	r3, r7, r3
 801b506:	781b      	ldrb	r3, [r3, #0]
}
 801b508:	0018      	movs	r0, r3
 801b50a:	46bd      	mov	sp, r7
 801b50c:	b004      	add	sp, #16
 801b50e:	bd80      	pop	{r7, pc}

0801b510 <arm_cfft_radix4by2_q31>:
 801b510:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b512:	465f      	mov	r7, fp
 801b514:	4656      	mov	r6, sl
 801b516:	464d      	mov	r5, r9
 801b518:	4644      	mov	r4, r8
 801b51a:	000b      	movs	r3, r1
 801b51c:	b4f0      	push	{r4, r5, r6, r7}
 801b51e:	085b      	lsrs	r3, r3, #1
 801b520:	b08f      	sub	sp, #60	@ 0x3c
 801b522:	910a      	str	r1, [sp, #40]	@ 0x28
 801b524:	0007      	movs	r7, r0
 801b526:	9009      	str	r0, [sp, #36]	@ 0x24
 801b528:	0011      	movs	r1, r2
 801b52a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b52c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d100      	bne.n	801b534 <arm_cfft_radix4by2_q31+0x24>
 801b532:	e0a0      	b.n	801b676 <arm_cfft_radix4by2_q31+0x166>
 801b534:	0002      	movs	r2, r0
 801b536:	00db      	lsls	r3, r3, #3
 801b538:	3204      	adds	r2, #4
 801b53a:	4691      	mov	r9, r2
 801b53c:	4698      	mov	r8, r3
 801b53e:	000a      	movs	r2, r1
 801b540:	464e      	mov	r6, r9
 801b542:	4442      	add	r2, r8
 801b544:	4699      	mov	r9, r3
 801b546:	4688      	mov	r8, r1
 801b548:	9208      	str	r2, [sp, #32]
 801b54a:	900d      	str	r0, [sp, #52]	@ 0x34
 801b54c:	4643      	mov	r3, r8
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	469b      	mov	fp, r3
 801b552:	4643      	mov	r3, r8
 801b554:	685b      	ldr	r3, [r3, #4]
 801b556:	469a      	mov	sl, r3
 801b558:	683b      	ldr	r3, [r7, #0]
 801b55a:	109c      	asrs	r4, r3, #2
 801b55c:	464b      	mov	r3, r9
 801b55e:	58fb      	ldr	r3, [r7, r3]
 801b560:	109a      	asrs	r2, r3, #2
 801b562:	18a3      	adds	r3, r4, r2
 801b564:	603b      	str	r3, [r7, #0]
 801b566:	6833      	ldr	r3, [r6, #0]
 801b568:	1aa4      	subs	r4, r4, r2
 801b56a:	109d      	asrs	r5, r3, #2
 801b56c:	464b      	mov	r3, r9
 801b56e:	58f3      	ldr	r3, [r6, r3]
 801b570:	17e2      	asrs	r2, r4, #31
 801b572:	109b      	asrs	r3, r3, #2
 801b574:	18e9      	adds	r1, r5, r3
 801b576:	6031      	str	r1, [r6, #0]
 801b578:	0011      	movs	r1, r2
 801b57a:	465a      	mov	r2, fp
 801b57c:	17d2      	asrs	r2, r2, #31
 801b57e:	0010      	movs	r0, r2
 801b580:	4652      	mov	r2, sl
 801b582:	1aed      	subs	r5, r5, r3
 801b584:	17eb      	asrs	r3, r5, #31
 801b586:	17d2      	asrs	r2, r2, #31
 801b588:	9307      	str	r3, [sp, #28]
 801b58a:	9204      	str	r2, [sp, #16]
 801b58c:	0003      	movs	r3, r0
 801b58e:	465a      	mov	r2, fp
 801b590:	9006      	str	r0, [sp, #24]
 801b592:	0020      	movs	r0, r4
 801b594:	9105      	str	r1, [sp, #20]
 801b596:	f7e5 f813 	bl	80005c0 <__aeabi_lmul>
 801b59a:	2280      	movs	r2, #128	@ 0x80
 801b59c:	2300      	movs	r3, #0
 801b59e:	0612      	lsls	r2, r2, #24
 801b5a0:	1880      	adds	r0, r0, r2
 801b5a2:	4159      	adcs	r1, r3
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	9101      	str	r1, [sp, #4]
 801b5a8:	9300      	str	r3, [sp, #0]
 801b5aa:	4652      	mov	r2, sl
 801b5ac:	9b04      	ldr	r3, [sp, #16]
 801b5ae:	0028      	movs	r0, r5
 801b5b0:	17e9      	asrs	r1, r5, #31
 801b5b2:	f7e5 f805 	bl	80005c0 <__aeabi_lmul>
 801b5b6:	9a00      	ldr	r2, [sp, #0]
 801b5b8:	9b01      	ldr	r3, [sp, #4]
 801b5ba:	1880      	adds	r0, r0, r2
 801b5bc:	4159      	adcs	r1, r3
 801b5be:	2280      	movs	r2, #128	@ 0x80
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	0612      	lsls	r2, r2, #24
 801b5c4:	1880      	adds	r0, r0, r2
 801b5c6:	4159      	adcs	r1, r3
 801b5c8:	464a      	mov	r2, r9
 801b5ca:	004b      	lsls	r3, r1, #1
 801b5cc:	50bb      	str	r3, [r7, r2]
 801b5ce:	4658      	mov	r0, fp
 801b5d0:	002a      	movs	r2, r5
 801b5d2:	9b07      	ldr	r3, [sp, #28]
 801b5d4:	9906      	ldr	r1, [sp, #24]
 801b5d6:	f7e4 fff3 	bl	80005c0 <__aeabi_lmul>
 801b5da:	2280      	movs	r2, #128	@ 0x80
 801b5dc:	2300      	movs	r3, #0
 801b5de:	0612      	lsls	r2, r2, #24
 801b5e0:	1880      	adds	r0, r0, r2
 801b5e2:	4159      	adcs	r1, r3
 801b5e4:	2000      	movs	r0, #0
 801b5e6:	9103      	str	r1, [sp, #12]
 801b5e8:	9002      	str	r0, [sp, #8]
 801b5ea:	4652      	mov	r2, sl
 801b5ec:	9b04      	ldr	r3, [sp, #16]
 801b5ee:	0020      	movs	r0, r4
 801b5f0:	9905      	ldr	r1, [sp, #20]
 801b5f2:	f7e4 ffe5 	bl	80005c0 <__aeabi_lmul>
 801b5f6:	9a02      	ldr	r2, [sp, #8]
 801b5f8:	9b03      	ldr	r3, [sp, #12]
 801b5fa:	1a12      	subs	r2, r2, r0
 801b5fc:	418b      	sbcs	r3, r1
 801b5fe:	2080      	movs	r0, #128	@ 0x80
 801b600:	2100      	movs	r1, #0
 801b602:	0600      	lsls	r0, r0, #24
 801b604:	1812      	adds	r2, r2, r0
 801b606:	414b      	adcs	r3, r1
 801b608:	464a      	mov	r2, r9
 801b60a:	005b      	lsls	r3, r3, #1
 801b60c:	50b3      	str	r3, [r6, r2]
 801b60e:	2308      	movs	r3, #8
 801b610:	469c      	mov	ip, r3
 801b612:	9b08      	ldr	r3, [sp, #32]
 801b614:	44e0      	add	r8, ip
 801b616:	3708      	adds	r7, #8
 801b618:	3608      	adds	r6, #8
 801b61a:	4598      	cmp	r8, r3
 801b61c:	d196      	bne.n	801b54c <arm_cfft_radix4by2_q31+0x3c>
 801b61e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b620:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b622:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b624:	2302      	movs	r3, #2
 801b626:	003a      	movs	r2, r7
 801b628:	0029      	movs	r1, r5
 801b62a:	0020      	movs	r0, r4
 801b62c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801b62e:	f000 f957 	bl	801b8e0 <arm_radix4_butterfly_q31>
 801b632:	46a4      	mov	ip, r4
 801b634:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b636:	2302      	movs	r3, #2
 801b638:	0088      	lsls	r0, r1, #2
 801b63a:	4460      	add	r0, ip
 801b63c:	003a      	movs	r2, r7
 801b63e:	0029      	movs	r1, r5
 801b640:	f000 f94e 	bl	801b8e0 <arm_radix4_butterfly_q31>
 801b644:	46a4      	mov	ip, r4
 801b646:	0128      	lsls	r0, r5, #4
 801b648:	4460      	add	r0, ip
 801b64a:	6833      	ldr	r3, [r6, #0]
 801b64c:	005b      	lsls	r3, r3, #1
 801b64e:	6033      	str	r3, [r6, #0]
 801b650:	6873      	ldr	r3, [r6, #4]
 801b652:	005b      	lsls	r3, r3, #1
 801b654:	6073      	str	r3, [r6, #4]
 801b656:	68b3      	ldr	r3, [r6, #8]
 801b658:	005b      	lsls	r3, r3, #1
 801b65a:	60b3      	str	r3, [r6, #8]
 801b65c:	68f3      	ldr	r3, [r6, #12]
 801b65e:	005b      	lsls	r3, r3, #1
 801b660:	60f3      	str	r3, [r6, #12]
 801b662:	3610      	adds	r6, #16
 801b664:	42b0      	cmp	r0, r6
 801b666:	d1f0      	bne.n	801b64a <arm_cfft_radix4by2_q31+0x13a>
 801b668:	b00f      	add	sp, #60	@ 0x3c
 801b66a:	bc3c      	pop	{r2, r3, r4, r5}
 801b66c:	4690      	mov	r8, r2
 801b66e:	4699      	mov	r9, r3
 801b670:	46a2      	mov	sl, r4
 801b672:	46ab      	mov	fp, r5
 801b674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b676:	2302      	movs	r3, #2
 801b678:	2100      	movs	r1, #0
 801b67a:	0015      	movs	r5, r2
 801b67c:	f000 f930 	bl	801b8e0 <arm_radix4_butterfly_q31>
 801b680:	46bc      	mov	ip, r7
 801b682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b684:	002a      	movs	r2, r5
 801b686:	0098      	lsls	r0, r3, #2
 801b688:	4460      	add	r0, ip
 801b68a:	2302      	movs	r3, #2
 801b68c:	2100      	movs	r1, #0
 801b68e:	f000 f927 	bl	801b8e0 <arm_radix4_butterfly_q31>
 801b692:	e7e9      	b.n	801b668 <arm_cfft_radix4by2_q31+0x158>

0801b694 <arm_cfft_radix4by2_inverse_q31>:
 801b694:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b696:	465f      	mov	r7, fp
 801b698:	4656      	mov	r6, sl
 801b69a:	464d      	mov	r5, r9
 801b69c:	4644      	mov	r4, r8
 801b69e:	000b      	movs	r3, r1
 801b6a0:	b4f0      	push	{r4, r5, r6, r7}
 801b6a2:	085b      	lsrs	r3, r3, #1
 801b6a4:	b08f      	sub	sp, #60	@ 0x3c
 801b6a6:	910a      	str	r1, [sp, #40]	@ 0x28
 801b6a8:	0007      	movs	r7, r0
 801b6aa:	9009      	str	r0, [sp, #36]	@ 0x24
 801b6ac:	0011      	movs	r1, r2
 801b6ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b6b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d100      	bne.n	801b6b8 <arm_cfft_radix4by2_inverse_q31+0x24>
 801b6b6:	e0a0      	b.n	801b7fa <arm_cfft_radix4by2_inverse_q31+0x166>
 801b6b8:	0002      	movs	r2, r0
 801b6ba:	00db      	lsls	r3, r3, #3
 801b6bc:	3204      	adds	r2, #4
 801b6be:	4691      	mov	r9, r2
 801b6c0:	4698      	mov	r8, r3
 801b6c2:	000a      	movs	r2, r1
 801b6c4:	464e      	mov	r6, r9
 801b6c6:	4442      	add	r2, r8
 801b6c8:	4699      	mov	r9, r3
 801b6ca:	4688      	mov	r8, r1
 801b6cc:	9208      	str	r2, [sp, #32]
 801b6ce:	900d      	str	r0, [sp, #52]	@ 0x34
 801b6d0:	4643      	mov	r3, r8
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	469b      	mov	fp, r3
 801b6d6:	4643      	mov	r3, r8
 801b6d8:	685b      	ldr	r3, [r3, #4]
 801b6da:	469a      	mov	sl, r3
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	109c      	asrs	r4, r3, #2
 801b6e0:	464b      	mov	r3, r9
 801b6e2:	58fb      	ldr	r3, [r7, r3]
 801b6e4:	109a      	asrs	r2, r3, #2
 801b6e6:	18a3      	adds	r3, r4, r2
 801b6e8:	603b      	str	r3, [r7, #0]
 801b6ea:	6833      	ldr	r3, [r6, #0]
 801b6ec:	1aa4      	subs	r4, r4, r2
 801b6ee:	109d      	asrs	r5, r3, #2
 801b6f0:	464b      	mov	r3, r9
 801b6f2:	58f3      	ldr	r3, [r6, r3]
 801b6f4:	17e2      	asrs	r2, r4, #31
 801b6f6:	109b      	asrs	r3, r3, #2
 801b6f8:	18e9      	adds	r1, r5, r3
 801b6fa:	6031      	str	r1, [r6, #0]
 801b6fc:	0011      	movs	r1, r2
 801b6fe:	465a      	mov	r2, fp
 801b700:	17d2      	asrs	r2, r2, #31
 801b702:	0010      	movs	r0, r2
 801b704:	4652      	mov	r2, sl
 801b706:	1aed      	subs	r5, r5, r3
 801b708:	17eb      	asrs	r3, r5, #31
 801b70a:	17d2      	asrs	r2, r2, #31
 801b70c:	9307      	str	r3, [sp, #28]
 801b70e:	9204      	str	r2, [sp, #16]
 801b710:	0003      	movs	r3, r0
 801b712:	465a      	mov	r2, fp
 801b714:	9006      	str	r0, [sp, #24]
 801b716:	0020      	movs	r0, r4
 801b718:	9105      	str	r1, [sp, #20]
 801b71a:	f7e4 ff51 	bl	80005c0 <__aeabi_lmul>
 801b71e:	2280      	movs	r2, #128	@ 0x80
 801b720:	2300      	movs	r3, #0
 801b722:	0612      	lsls	r2, r2, #24
 801b724:	1880      	adds	r0, r0, r2
 801b726:	4159      	adcs	r1, r3
 801b728:	2300      	movs	r3, #0
 801b72a:	9101      	str	r1, [sp, #4]
 801b72c:	9300      	str	r3, [sp, #0]
 801b72e:	4652      	mov	r2, sl
 801b730:	9b04      	ldr	r3, [sp, #16]
 801b732:	0028      	movs	r0, r5
 801b734:	17e9      	asrs	r1, r5, #31
 801b736:	f7e4 ff43 	bl	80005c0 <__aeabi_lmul>
 801b73a:	9a00      	ldr	r2, [sp, #0]
 801b73c:	9b01      	ldr	r3, [sp, #4]
 801b73e:	1a12      	subs	r2, r2, r0
 801b740:	418b      	sbcs	r3, r1
 801b742:	2080      	movs	r0, #128	@ 0x80
 801b744:	2100      	movs	r1, #0
 801b746:	0600      	lsls	r0, r0, #24
 801b748:	1812      	adds	r2, r2, r0
 801b74a:	414b      	adcs	r3, r1
 801b74c:	464a      	mov	r2, r9
 801b74e:	005b      	lsls	r3, r3, #1
 801b750:	50bb      	str	r3, [r7, r2]
 801b752:	4658      	mov	r0, fp
 801b754:	002a      	movs	r2, r5
 801b756:	9b07      	ldr	r3, [sp, #28]
 801b758:	9906      	ldr	r1, [sp, #24]
 801b75a:	f7e4 ff31 	bl	80005c0 <__aeabi_lmul>
 801b75e:	2280      	movs	r2, #128	@ 0x80
 801b760:	2300      	movs	r3, #0
 801b762:	0612      	lsls	r2, r2, #24
 801b764:	1880      	adds	r0, r0, r2
 801b766:	4159      	adcs	r1, r3
 801b768:	2000      	movs	r0, #0
 801b76a:	9103      	str	r1, [sp, #12]
 801b76c:	9002      	str	r0, [sp, #8]
 801b76e:	4652      	mov	r2, sl
 801b770:	9b04      	ldr	r3, [sp, #16]
 801b772:	0020      	movs	r0, r4
 801b774:	9905      	ldr	r1, [sp, #20]
 801b776:	f7e4 ff23 	bl	80005c0 <__aeabi_lmul>
 801b77a:	9b02      	ldr	r3, [sp, #8]
 801b77c:	9c03      	ldr	r4, [sp, #12]
 801b77e:	18c0      	adds	r0, r0, r3
 801b780:	4161      	adcs	r1, r4
 801b782:	2380      	movs	r3, #128	@ 0x80
 801b784:	2400      	movs	r4, #0
 801b786:	061b      	lsls	r3, r3, #24
 801b788:	18c0      	adds	r0, r0, r3
 801b78a:	4161      	adcs	r1, r4
 801b78c:	464a      	mov	r2, r9
 801b78e:	004b      	lsls	r3, r1, #1
 801b790:	50b3      	str	r3, [r6, r2]
 801b792:	2308      	movs	r3, #8
 801b794:	469c      	mov	ip, r3
 801b796:	9b08      	ldr	r3, [sp, #32]
 801b798:	44e0      	add	r8, ip
 801b79a:	3708      	adds	r7, #8
 801b79c:	3608      	adds	r6, #8
 801b79e:	4598      	cmp	r8, r3
 801b7a0:	d196      	bne.n	801b6d0 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801b7a2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b7a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b7a6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b7a8:	2302      	movs	r3, #2
 801b7aa:	003a      	movs	r2, r7
 801b7ac:	0029      	movs	r1, r5
 801b7ae:	0020      	movs	r0, r4
 801b7b0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801b7b2:	f000 fb3b 	bl	801be2c <arm_radix4_butterfly_inverse_q31>
 801b7b6:	46a4      	mov	ip, r4
 801b7b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b7ba:	2302      	movs	r3, #2
 801b7bc:	0088      	lsls	r0, r1, #2
 801b7be:	4460      	add	r0, ip
 801b7c0:	003a      	movs	r2, r7
 801b7c2:	0029      	movs	r1, r5
 801b7c4:	f000 fb32 	bl	801be2c <arm_radix4_butterfly_inverse_q31>
 801b7c8:	46a4      	mov	ip, r4
 801b7ca:	0128      	lsls	r0, r5, #4
 801b7cc:	4460      	add	r0, ip
 801b7ce:	6833      	ldr	r3, [r6, #0]
 801b7d0:	005b      	lsls	r3, r3, #1
 801b7d2:	6033      	str	r3, [r6, #0]
 801b7d4:	6873      	ldr	r3, [r6, #4]
 801b7d6:	005b      	lsls	r3, r3, #1
 801b7d8:	6073      	str	r3, [r6, #4]
 801b7da:	68b3      	ldr	r3, [r6, #8]
 801b7dc:	005b      	lsls	r3, r3, #1
 801b7de:	60b3      	str	r3, [r6, #8]
 801b7e0:	68f3      	ldr	r3, [r6, #12]
 801b7e2:	005b      	lsls	r3, r3, #1
 801b7e4:	60f3      	str	r3, [r6, #12]
 801b7e6:	3610      	adds	r6, #16
 801b7e8:	42b0      	cmp	r0, r6
 801b7ea:	d1f0      	bne.n	801b7ce <arm_cfft_radix4by2_inverse_q31+0x13a>
 801b7ec:	b00f      	add	sp, #60	@ 0x3c
 801b7ee:	bc3c      	pop	{r2, r3, r4, r5}
 801b7f0:	4690      	mov	r8, r2
 801b7f2:	4699      	mov	r9, r3
 801b7f4:	46a2      	mov	sl, r4
 801b7f6:	46ab      	mov	fp, r5
 801b7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7fa:	2302      	movs	r3, #2
 801b7fc:	2100      	movs	r1, #0
 801b7fe:	0015      	movs	r5, r2
 801b800:	f000 fb14 	bl	801be2c <arm_radix4_butterfly_inverse_q31>
 801b804:	46bc      	mov	ip, r7
 801b806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b808:	002a      	movs	r2, r5
 801b80a:	0098      	lsls	r0, r3, #2
 801b80c:	4460      	add	r0, ip
 801b80e:	2302      	movs	r3, #2
 801b810:	2100      	movs	r1, #0
 801b812:	f000 fb0b 	bl	801be2c <arm_radix4_butterfly_inverse_q31>
 801b816:	e7e9      	b.n	801b7ec <arm_cfft_radix4by2_inverse_q31+0x158>

0801b818 <arm_cfft_q31>:
 801b818:	b570      	push	{r4, r5, r6, lr}
 801b81a:	001e      	movs	r6, r3
 801b81c:	2380      	movs	r3, #128	@ 0x80
 801b81e:	000d      	movs	r5, r1
 801b820:	0004      	movs	r4, r0
 801b822:	8801      	ldrh	r1, [r0, #0]
 801b824:	005b      	lsls	r3, r3, #1
 801b826:	2a01      	cmp	r2, #1
 801b828:	d028      	beq.n	801b87c <arm_cfft_q31+0x64>
 801b82a:	4299      	cmp	r1, r3
 801b82c:	d020      	beq.n	801b870 <arm_cfft_q31+0x58>
 801b82e:	d812      	bhi.n	801b856 <arm_cfft_q31+0x3e>
 801b830:	2920      	cmp	r1, #32
 801b832:	d004      	beq.n	801b83e <arm_cfft_q31+0x26>
 801b834:	d949      	bls.n	801b8ca <arm_cfft_q31+0xb2>
 801b836:	2940      	cmp	r1, #64	@ 0x40
 801b838:	d01a      	beq.n	801b870 <arm_cfft_q31+0x58>
 801b83a:	2980      	cmp	r1, #128	@ 0x80
 801b83c:	d103      	bne.n	801b846 <arm_cfft_q31+0x2e>
 801b83e:	6862      	ldr	r2, [r4, #4]
 801b840:	0028      	movs	r0, r5
 801b842:	f7ff fe65 	bl	801b510 <arm_cfft_radix4by2_q31>
 801b846:	2e00      	cmp	r6, #0
 801b848:	d004      	beq.n	801b854 <arm_cfft_q31+0x3c>
 801b84a:	68a2      	ldr	r2, [r4, #8]
 801b84c:	89a1      	ldrh	r1, [r4, #12]
 801b84e:	0028      	movs	r0, r5
 801b850:	f7e4 fc5a 	bl	8000108 <arm_bitreversal_32>
 801b854:	bd70      	pop	{r4, r5, r6, pc}
 801b856:	2380      	movs	r3, #128	@ 0x80
 801b858:	00db      	lsls	r3, r3, #3
 801b85a:	4299      	cmp	r1, r3
 801b85c:	d008      	beq.n	801b870 <arm_cfft_q31+0x58>
 801b85e:	d92f      	bls.n	801b8c0 <arm_cfft_q31+0xa8>
 801b860:	2380      	movs	r3, #128	@ 0x80
 801b862:	011b      	lsls	r3, r3, #4
 801b864:	4299      	cmp	r1, r3
 801b866:	d0ea      	beq.n	801b83e <arm_cfft_q31+0x26>
 801b868:	2380      	movs	r3, #128	@ 0x80
 801b86a:	015b      	lsls	r3, r3, #5
 801b86c:	4299      	cmp	r1, r3
 801b86e:	d1ea      	bne.n	801b846 <arm_cfft_q31+0x2e>
 801b870:	2301      	movs	r3, #1
 801b872:	6862      	ldr	r2, [r4, #4]
 801b874:	0028      	movs	r0, r5
 801b876:	f000 f833 	bl	801b8e0 <arm_radix4_butterfly_q31>
 801b87a:	e7e4      	b.n	801b846 <arm_cfft_q31+0x2e>
 801b87c:	4299      	cmp	r1, r3
 801b87e:	d019      	beq.n	801b8b4 <arm_cfft_q31+0x9c>
 801b880:	d80b      	bhi.n	801b89a <arm_cfft_q31+0x82>
 801b882:	2920      	cmp	r1, #32
 801b884:	d004      	beq.n	801b890 <arm_cfft_q31+0x78>
 801b886:	d928      	bls.n	801b8da <arm_cfft_q31+0xc2>
 801b888:	2940      	cmp	r1, #64	@ 0x40
 801b88a:	d013      	beq.n	801b8b4 <arm_cfft_q31+0x9c>
 801b88c:	2980      	cmp	r1, #128	@ 0x80
 801b88e:	d1da      	bne.n	801b846 <arm_cfft_q31+0x2e>
 801b890:	6862      	ldr	r2, [r4, #4]
 801b892:	0028      	movs	r0, r5
 801b894:	f7ff fefe 	bl	801b694 <arm_cfft_radix4by2_inverse_q31>
 801b898:	e7d5      	b.n	801b846 <arm_cfft_q31+0x2e>
 801b89a:	2380      	movs	r3, #128	@ 0x80
 801b89c:	00db      	lsls	r3, r3, #3
 801b89e:	4299      	cmp	r1, r3
 801b8a0:	d008      	beq.n	801b8b4 <arm_cfft_q31+0x9c>
 801b8a2:	d915      	bls.n	801b8d0 <arm_cfft_q31+0xb8>
 801b8a4:	2380      	movs	r3, #128	@ 0x80
 801b8a6:	011b      	lsls	r3, r3, #4
 801b8a8:	4299      	cmp	r1, r3
 801b8aa:	d0f1      	beq.n	801b890 <arm_cfft_q31+0x78>
 801b8ac:	2380      	movs	r3, #128	@ 0x80
 801b8ae:	015b      	lsls	r3, r3, #5
 801b8b0:	4299      	cmp	r1, r3
 801b8b2:	d1c8      	bne.n	801b846 <arm_cfft_q31+0x2e>
 801b8b4:	2301      	movs	r3, #1
 801b8b6:	6862      	ldr	r2, [r4, #4]
 801b8b8:	0028      	movs	r0, r5
 801b8ba:	f000 fab7 	bl	801be2c <arm_radix4_butterfly_inverse_q31>
 801b8be:	e7c2      	b.n	801b846 <arm_cfft_q31+0x2e>
 801b8c0:	2380      	movs	r3, #128	@ 0x80
 801b8c2:	009b      	lsls	r3, r3, #2
 801b8c4:	4299      	cmp	r1, r3
 801b8c6:	d0ba      	beq.n	801b83e <arm_cfft_q31+0x26>
 801b8c8:	e7bd      	b.n	801b846 <arm_cfft_q31+0x2e>
 801b8ca:	2910      	cmp	r1, #16
 801b8cc:	d1bb      	bne.n	801b846 <arm_cfft_q31+0x2e>
 801b8ce:	e7cf      	b.n	801b870 <arm_cfft_q31+0x58>
 801b8d0:	2380      	movs	r3, #128	@ 0x80
 801b8d2:	009b      	lsls	r3, r3, #2
 801b8d4:	4299      	cmp	r1, r3
 801b8d6:	d0db      	beq.n	801b890 <arm_cfft_q31+0x78>
 801b8d8:	e7b5      	b.n	801b846 <arm_cfft_q31+0x2e>
 801b8da:	2910      	cmp	r1, #16
 801b8dc:	d1b3      	bne.n	801b846 <arm_cfft_q31+0x2e>
 801b8de:	e7e9      	b.n	801b8b4 <arm_cfft_q31+0x9c>

0801b8e0 <arm_radix4_butterfly_q31>:
 801b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8e2:	464d      	mov	r5, r9
 801b8e4:	4644      	mov	r4, r8
 801b8e6:	465f      	mov	r7, fp
 801b8e8:	4656      	mov	r6, sl
 801b8ea:	469c      	mov	ip, r3
 801b8ec:	b4f0      	push	{r4, r5, r6, r7}
 801b8ee:	b0a7      	sub	sp, #156	@ 0x9c
 801b8f0:	9114      	str	r1, [sp, #80]	@ 0x50
 801b8f2:	0889      	lsrs	r1, r1, #2
 801b8f4:	9310      	str	r3, [sp, #64]	@ 0x40
 801b8f6:	00cb      	lsls	r3, r1, #3
 801b8f8:	0015      	movs	r5, r2
 801b8fa:	9223      	str	r2, [sp, #140]	@ 0x8c
 801b8fc:	18c2      	adds	r2, r0, r3
 801b8fe:	000c      	movs	r4, r1
 801b900:	469a      	mov	sl, r3
 801b902:	9124      	str	r1, [sp, #144]	@ 0x90
 801b904:	18d1      	adds	r1, r2, r3
 801b906:	4663      	mov	r3, ip
 801b908:	468b      	mov	fp, r1
 801b90a:	0119      	lsls	r1, r3, #4
 801b90c:	910d      	str	r1, [sp, #52]	@ 0x34
 801b90e:	00d9      	lsls	r1, r3, #3
 801b910:	005b      	lsls	r3, r3, #1
 801b912:	4463      	add	r3, ip
 801b914:	910e      	str	r1, [sp, #56]	@ 0x38
 801b916:	00d9      	lsls	r1, r3, #3
 801b918:	465b      	mov	r3, fp
 801b91a:	44da      	add	sl, fp
 801b91c:	4690      	mov	r8, r2
 801b91e:	4683      	mov	fp, r0
 801b920:	4699      	mov	r9, r3
 801b922:	9022      	str	r0, [sp, #136]	@ 0x88
 801b924:	9025      	str	r0, [sp, #148]	@ 0x94
 801b926:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b928:	9502      	str	r5, [sp, #8]
 801b92a:	9500      	str	r5, [sp, #0]
 801b92c:	9501      	str	r5, [sp, #4]
 801b92e:	9407      	str	r4, [sp, #28]
 801b930:	465b      	mov	r3, fp
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	4642      	mov	r2, r8
 801b936:	111c      	asrs	r4, r3, #4
 801b938:	464b      	mov	r3, r9
 801b93a:	4658      	mov	r0, fp
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	6812      	ldr	r2, [r2, #0]
 801b940:	111b      	asrs	r3, r3, #4
 801b942:	18e7      	adds	r7, r4, r3
 801b944:	1ae3      	subs	r3, r4, r3
 801b946:	1114      	asrs	r4, r2, #4
 801b948:	4652      	mov	r2, sl
 801b94a:	6840      	ldr	r0, [r0, #4]
 801b94c:	6812      	ldr	r2, [r2, #0]
 801b94e:	1105      	asrs	r5, r0, #4
 801b950:	4648      	mov	r0, r9
 801b952:	9303      	str	r3, [sp, #12]
 801b954:	1113      	asrs	r3, r2, #4
 801b956:	18e2      	adds	r2, r4, r3
 801b958:	465c      	mov	r4, fp
 801b95a:	6840      	ldr	r0, [r0, #4]
 801b95c:	1103      	asrs	r3, r0, #4
 801b95e:	18ee      	adds	r6, r5, r3
 801b960:	1ae8      	subs	r0, r5, r3
 801b962:	18bb      	adds	r3, r7, r2
 801b964:	6023      	str	r3, [r4, #0]
 801b966:	4644      	mov	r4, r8
 801b968:	6864      	ldr	r4, [r4, #4]
 801b96a:	9004      	str	r0, [sp, #16]
 801b96c:	1125      	asrs	r5, r4, #4
 801b96e:	4654      	mov	r4, sl
 801b970:	6864      	ldr	r4, [r4, #4]
 801b972:	1123      	asrs	r3, r4, #4
 801b974:	465c      	mov	r4, fp
 801b976:	18eb      	adds	r3, r5, r3
 801b978:	18f1      	adds	r1, r6, r3
 801b97a:	6061      	str	r1, [r4, #4]
 801b97c:	4655      	mov	r5, sl
 801b97e:	4644      	mov	r4, r8
 801b980:	686d      	ldr	r5, [r5, #4]
 801b982:	6864      	ldr	r4, [r4, #4]
 801b984:	1129      	asrs	r1, r5, #4
 801b986:	1124      	asrs	r4, r4, #4
 801b988:	1a64      	subs	r4, r4, r1
 801b98a:	4641      	mov	r1, r8
 801b98c:	6809      	ldr	r1, [r1, #0]
 801b98e:	9405      	str	r4, [sp, #20]
 801b990:	1108      	asrs	r0, r1, #4
 801b992:	4651      	mov	r1, sl
 801b994:	6809      	ldr	r1, [r1, #0]
 801b996:	1abc      	subs	r4, r7, r2
 801b998:	1109      	asrs	r1, r1, #4
 801b99a:	1a41      	subs	r1, r0, r1
 801b99c:	17e2      	asrs	r2, r4, #31
 801b99e:	9106      	str	r1, [sp, #24]
 801b9a0:	0011      	movs	r1, r2
 801b9a2:	9a01      	ldr	r2, [sp, #4]
 801b9a4:	9108      	str	r1, [sp, #32]
 801b9a6:	6817      	ldr	r7, [r2, #0]
 801b9a8:	17fd      	asrs	r5, r7, #31
 801b9aa:	0028      	movs	r0, r5
 801b9ac:	1af5      	subs	r5, r6, r3
 801b9ae:	17ee      	asrs	r6, r5, #31
 801b9b0:	960a      	str	r6, [sp, #40]	@ 0x28
 801b9b2:	6856      	ldr	r6, [r2, #4]
 801b9b4:	9009      	str	r0, [sp, #36]	@ 0x24
 801b9b6:	17f3      	asrs	r3, r6, #31
 801b9b8:	003a      	movs	r2, r7
 801b9ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b9bc:	0003      	movs	r3, r0
 801b9be:	0020      	movs	r0, r4
 801b9c0:	f7e4 fdfe 	bl	80005c0 <__aeabi_lmul>
 801b9c4:	0032      	movs	r2, r6
 801b9c6:	17f3      	asrs	r3, r6, #31
 801b9c8:	910c      	str	r1, [sp, #48]	@ 0x30
 801b9ca:	0028      	movs	r0, r5
 801b9cc:	17e9      	asrs	r1, r5, #31
 801b9ce:	f7e4 fdf7 	bl	80005c0 <__aeabi_lmul>
 801b9d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801b9d4:	002a      	movs	r2, r5
 801b9d6:	4684      	mov	ip, r0
 801b9d8:	4640      	mov	r0, r8
 801b9da:	4461      	add	r1, ip
 801b9dc:	0049      	lsls	r1, r1, #1
 801b9de:	6001      	str	r1, [r0, #0]
 801b9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b9e4:	0038      	movs	r0, r7
 801b9e6:	f7e4 fdeb 	bl	80005c0 <__aeabi_lmul>
 801b9ea:	0032      	movs	r2, r6
 801b9ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b9ee:	000d      	movs	r5, r1
 801b9f0:	0020      	movs	r0, r4
 801b9f2:	9908      	ldr	r1, [sp, #32]
 801b9f4:	f7e4 fde4 	bl	80005c0 <__aeabi_lmul>
 801b9f8:	4646      	mov	r6, r8
 801b9fa:	1a6d      	subs	r5, r5, r1
 801b9fc:	006d      	lsls	r5, r5, #1
 801b9fe:	6075      	str	r5, [r6, #4]
 801ba00:	9903      	ldr	r1, [sp, #12]
 801ba02:	9d05      	ldr	r5, [sp, #20]
 801ba04:	000c      	movs	r4, r1
 801ba06:	46ac      	mov	ip, r5
 801ba08:	4464      	add	r4, ip
 801ba0a:	17e6      	asrs	r6, r4, #31
 801ba0c:	0031      	movs	r1, r6
 801ba0e:	9b00      	ldr	r3, [sp, #0]
 801ba10:	9804      	ldr	r0, [sp, #16]
 801ba12:	681e      	ldr	r6, [r3, #0]
 801ba14:	17f7      	asrs	r7, r6, #31
 801ba16:	9709      	str	r7, [sp, #36]	@ 0x24
 801ba18:	9f06      	ldr	r7, [sp, #24]
 801ba1a:	0032      	movs	r2, r6
 801ba1c:	1bc7      	subs	r7, r0, r7
 801ba1e:	17fd      	asrs	r5, r7, #31
 801ba20:	950a      	str	r5, [sp, #40]	@ 0x28
 801ba22:	685d      	ldr	r5, [r3, #4]
 801ba24:	17f3      	asrs	r3, r6, #31
 801ba26:	17e8      	asrs	r0, r5, #31
 801ba28:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ba2a:	0020      	movs	r0, r4
 801ba2c:	9108      	str	r1, [sp, #32]
 801ba2e:	f7e4 fdc7 	bl	80005c0 <__aeabi_lmul>
 801ba32:	002a      	movs	r2, r5
 801ba34:	17eb      	asrs	r3, r5, #31
 801ba36:	910c      	str	r1, [sp, #48]	@ 0x30
 801ba38:	0038      	movs	r0, r7
 801ba3a:	17f9      	asrs	r1, r7, #31
 801ba3c:	f7e4 fdc0 	bl	80005c0 <__aeabi_lmul>
 801ba40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ba42:	003a      	movs	r2, r7
 801ba44:	4684      	mov	ip, r0
 801ba46:	4648      	mov	r0, r9
 801ba48:	4461      	add	r1, ip
 801ba4a:	0049      	lsls	r1, r1, #1
 801ba4c:	6001      	str	r1, [r0, #0]
 801ba4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba50:	0030      	movs	r0, r6
 801ba52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ba54:	f7e4 fdb4 	bl	80005c0 <__aeabi_lmul>
 801ba58:	002a      	movs	r2, r5
 801ba5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba5c:	000e      	movs	r6, r1
 801ba5e:	0020      	movs	r0, r4
 801ba60:	9908      	ldr	r1, [sp, #32]
 801ba62:	f7e4 fdad 	bl	80005c0 <__aeabi_lmul>
 801ba66:	464c      	mov	r4, r9
 801ba68:	9d05      	ldr	r5, [sp, #20]
 801ba6a:	1a76      	subs	r6, r6, r1
 801ba6c:	9903      	ldr	r1, [sp, #12]
 801ba6e:	0076      	lsls	r6, r6, #1
 801ba70:	6066      	str	r6, [r4, #4]
 801ba72:	1b4c      	subs	r4, r1, r5
 801ba74:	9e06      	ldr	r6, [sp, #24]
 801ba76:	17e1      	asrs	r1, r4, #31
 801ba78:	9103      	str	r1, [sp, #12]
 801ba7a:	9902      	ldr	r1, [sp, #8]
 801ba7c:	46b4      	mov	ip, r6
 801ba7e:	680f      	ldr	r7, [r1, #0]
 801ba80:	9804      	ldr	r0, [sp, #16]
 801ba82:	17fd      	asrs	r5, r7, #31
 801ba84:	002b      	movs	r3, r5
 801ba86:	684e      	ldr	r6, [r1, #4]
 801ba88:	4460      	add	r0, ip
 801ba8a:	0005      	movs	r5, r0
 801ba8c:	17c0      	asrs	r0, r0, #31
 801ba8e:	9005      	str	r0, [sp, #20]
 801ba90:	17f0      	asrs	r0, r6, #31
 801ba92:	9006      	str	r0, [sp, #24]
 801ba94:	003a      	movs	r2, r7
 801ba96:	0020      	movs	r0, r4
 801ba98:	17e1      	asrs	r1, r4, #31
 801ba9a:	9304      	str	r3, [sp, #16]
 801ba9c:	f7e4 fd90 	bl	80005c0 <__aeabi_lmul>
 801baa0:	0032      	movs	r2, r6
 801baa2:	9108      	str	r1, [sp, #32]
 801baa4:	17f3      	asrs	r3, r6, #31
 801baa6:	0028      	movs	r0, r5
 801baa8:	17e9      	asrs	r1, r5, #31
 801baaa:	f7e4 fd89 	bl	80005c0 <__aeabi_lmul>
 801baae:	9808      	ldr	r0, [sp, #32]
 801bab0:	002a      	movs	r2, r5
 801bab2:	4684      	mov	ip, r0
 801bab4:	4650      	mov	r0, sl
 801bab6:	4461      	add	r1, ip
 801bab8:	0049      	lsls	r1, r1, #1
 801baba:	6001      	str	r1, [r0, #0]
 801babc:	9b05      	ldr	r3, [sp, #20]
 801babe:	9904      	ldr	r1, [sp, #16]
 801bac0:	0038      	movs	r0, r7
 801bac2:	f7e4 fd7d 	bl	80005c0 <__aeabi_lmul>
 801bac6:	0020      	movs	r0, r4
 801bac8:	2408      	movs	r4, #8
 801baca:	000d      	movs	r5, r1
 801bacc:	0032      	movs	r2, r6
 801bace:	9b06      	ldr	r3, [sp, #24]
 801bad0:	9903      	ldr	r1, [sp, #12]
 801bad2:	f7e4 fd75 	bl	80005c0 <__aeabi_lmul>
 801bad6:	46a4      	mov	ip, r4
 801bad8:	4650      	mov	r0, sl
 801bada:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801badc:	44e3      	add	fp, ip
 801bade:	44e0      	add	r8, ip
 801bae0:	44e1      	add	r9, ip
 801bae2:	44e2      	add	sl, ip
 801bae4:	46a4      	mov	ip, r4
 801bae6:	1a6d      	subs	r5, r5, r1
 801bae8:	006d      	lsls	r5, r5, #1
 801baea:	9a01      	ldr	r2, [sp, #4]
 801baec:	6045      	str	r5, [r0, #4]
 801baee:	9807      	ldr	r0, [sp, #28]
 801baf0:	4462      	add	r2, ip
 801baf2:	3801      	subs	r0, #1
 801baf4:	9201      	str	r2, [sp, #4]
 801baf6:	9007      	str	r0, [sp, #28]
 801baf8:	9b00      	ldr	r3, [sp, #0]
 801bafa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bafc:	9902      	ldr	r1, [sp, #8]
 801bafe:	4694      	mov	ip, r2
 801bb00:	4463      	add	r3, ip
 801bb02:	9300      	str	r3, [sp, #0]
 801bb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb06:	469c      	mov	ip, r3
 801bb08:	4461      	add	r1, ip
 801bb0a:	9102      	str	r1, [sp, #8]
 801bb0c:	2800      	cmp	r0, #0
 801bb0e:	d000      	beq.n	801bb12 <arm_radix4_butterfly_q31+0x232>
 801bb10:	e70e      	b.n	801b930 <arm_radix4_butterfly_q31+0x50>
 801bb12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bb14:	009b      	lsls	r3, r3, #2
 801bb16:	931f      	str	r3, [sp, #124]	@ 0x7c
 801bb18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bb1a:	9320      	str	r3, [sp, #128]	@ 0x80
 801bb1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bb1e:	2b04      	cmp	r3, #4
 801bb20:	d800      	bhi.n	801bb24 <arm_radix4_butterfly_q31+0x244>
 801bb22:	e180      	b.n	801be26 <arm_radix4_butterfly_q31+0x546>
 801bb24:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bb26:	0893      	lsrs	r3, r2, #2
 801bb28:	1e59      	subs	r1, r3, #1
 801bb2a:	9321      	str	r3, [sp, #132]	@ 0x84
 801bb2c:	00db      	lsls	r3, r3, #3
 801bb2e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801bb30:	00d3      	lsls	r3, r2, #3
 801bb32:	9300      	str	r3, [sp, #0]
 801bb34:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801bb36:	911a      	str	r1, [sp, #104]	@ 0x68
 801bb38:	00da      	lsls	r2, r3, #3
 801bb3a:	921e      	str	r2, [sp, #120]	@ 0x78
 801bb3c:	011a      	lsls	r2, r3, #4
 801bb3e:	921d      	str	r2, [sp, #116]	@ 0x74
 801bb40:	001a      	movs	r2, r3
 801bb42:	4694      	mov	ip, r2
 801bb44:	005b      	lsls	r3, r3, #1
 801bb46:	4463      	add	r3, ip
 801bb48:	00db      	lsls	r3, r3, #3
 801bb4a:	931c      	str	r3, [sp, #112]	@ 0x70
 801bb4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bb4e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801bb50:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bb52:	9318      	str	r3, [sp, #96]	@ 0x60
 801bb54:	9319      	str	r3, [sp, #100]	@ 0x64
 801bb56:	9316      	str	r3, [sp, #88]	@ 0x58
 801bb58:	2300      	movs	r3, #0
 801bb5a:	9315      	str	r3, [sp, #84]	@ 0x54
 801bb5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bb5e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801bb60:	681a      	ldr	r2, [r3, #0]
 801bb62:	685b      	ldr	r3, [r3, #4]
 801bb64:	9205      	str	r2, [sp, #20]
 801bb66:	9306      	str	r3, [sp, #24]
 801bb68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bb6a:	468c      	mov	ip, r1
 801bb6c:	681a      	ldr	r2, [r3, #0]
 801bb6e:	685b      	ldr	r3, [r3, #4]
 801bb70:	9207      	str	r2, [sp, #28]
 801bb72:	9308      	str	r3, [sp, #32]
 801bb74:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bb76:	681a      	ldr	r2, [r3, #0]
 801bb78:	685b      	ldr	r3, [r3, #4]
 801bb7a:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb7c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb80:	0013      	movs	r3, r2
 801bb82:	4463      	add	r3, ip
 801bb84:	4698      	mov	r8, r3
 801bb86:	0013      	movs	r3, r2
 801bb88:	4442      	add	r2, r8
 801bb8a:	4691      	mov	r9, r2
 801bb8c:	001a      	movs	r2, r3
 801bb8e:	444a      	add	r2, r9
 801bb90:	4692      	mov	sl, r2
 801bb92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bb94:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bb96:	4293      	cmp	r3, r2
 801bb98:	d800      	bhi.n	801bb9c <arm_radix4_butterfly_q31+0x2bc>
 801bb9a:	e0dd      	b.n	801bd58 <arm_radix4_butterfly_q31+0x478>
 801bb9c:	4694      	mov	ip, r2
 801bb9e:	468b      	mov	fp, r1
 801bba0:	4644      	mov	r4, r8
 801bba2:	4655      	mov	r5, sl
 801bba4:	9b07      	ldr	r3, [sp, #28]
 801bba6:	17db      	asrs	r3, r3, #31
 801bba8:	930c      	str	r3, [sp, #48]	@ 0x30
 801bbaa:	9b08      	ldr	r3, [sp, #32]
 801bbac:	17db      	asrs	r3, r3, #31
 801bbae:	930d      	str	r3, [sp, #52]	@ 0x34
 801bbb0:	9b05      	ldr	r3, [sp, #20]
 801bbb2:	17db      	asrs	r3, r3, #31
 801bbb4:	930e      	str	r3, [sp, #56]	@ 0x38
 801bbb6:	9b06      	ldr	r3, [sp, #24]
 801bbb8:	17db      	asrs	r3, r3, #31
 801bbba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bbbe:	17db      	asrs	r3, r3, #31
 801bbc0:	9310      	str	r3, [sp, #64]	@ 0x40
 801bbc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bbc4:	17db      	asrs	r3, r3, #31
 801bbc6:	9311      	str	r3, [sp, #68]	@ 0x44
 801bbc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bbca:	4463      	add	r3, ip
 801bbcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bbce:	465b      	mov	r3, fp
 801bbd0:	4659      	mov	r1, fp
 801bbd2:	681a      	ldr	r2, [r3, #0]
 801bbd4:	464b      	mov	r3, r9
 801bbd6:	684f      	ldr	r7, [r1, #4]
 801bbd8:	4649      	mov	r1, r9
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	18d6      	adds	r6, r2, r3
 801bbde:	1ad3      	subs	r3, r2, r3
 801bbe0:	9301      	str	r3, [sp, #4]
 801bbe2:	684b      	ldr	r3, [r1, #4]
 801bbe4:	18f8      	adds	r0, r7, r3
 801bbe6:	1af9      	subs	r1, r7, r3
 801bbe8:	6827      	ldr	r7, [r4, #0]
 801bbea:	9102      	str	r1, [sp, #8]
 801bbec:	003a      	movs	r2, r7
 801bbee:	682f      	ldr	r7, [r5, #0]
 801bbf0:	46bc      	mov	ip, r7
 801bbf2:	465f      	mov	r7, fp
 801bbf4:	4462      	add	r2, ip
 801bbf6:	18b3      	adds	r3, r6, r2
 801bbf8:	109b      	asrs	r3, r3, #2
 801bbfa:	603b      	str	r3, [r7, #0]
 801bbfc:	6867      	ldr	r7, [r4, #4]
 801bbfe:	1ab6      	subs	r6, r6, r2
 801bc00:	46b8      	mov	r8, r7
 801bc02:	686f      	ldr	r7, [r5, #4]
 801bc04:	17f2      	asrs	r2, r6, #31
 801bc06:	46bc      	mov	ip, r7
 801bc08:	44e0      	add	r8, ip
 801bc0a:	4643      	mov	r3, r8
 801bc0c:	465f      	mov	r7, fp
 801bc0e:	18c1      	adds	r1, r0, r3
 801bc10:	1089      	asrs	r1, r1, #2
 801bc12:	6079      	str	r1, [r7, #4]
 801bc14:	9900      	ldr	r1, [sp, #0]
 801bc16:	4690      	mov	r8, r2
 801bc18:	468c      	mov	ip, r1
 801bc1a:	6867      	ldr	r7, [r4, #4]
 801bc1c:	6869      	ldr	r1, [r5, #4]
 801bc1e:	44e3      	add	fp, ip
 801bc20:	1a7f      	subs	r7, r7, r1
 801bc22:	9703      	str	r7, [sp, #12]
 801bc24:	6829      	ldr	r1, [r5, #0]
 801bc26:	6827      	ldr	r7, [r4, #0]
 801bc28:	1a7f      	subs	r7, r7, r1
 801bc2a:	9704      	str	r7, [sp, #16]
 801bc2c:	1ac7      	subs	r7, r0, r3
 801bc2e:	17fa      	asrs	r2, r7, #31
 801bc30:	4692      	mov	sl, r2
 801bc32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc34:	9a07      	ldr	r2, [sp, #28]
 801bc36:	0030      	movs	r0, r6
 801bc38:	4641      	mov	r1, r8
 801bc3a:	f7e4 fcc1 	bl	80005c0 <__aeabi_lmul>
 801bc3e:	9a08      	ldr	r2, [sp, #32]
 801bc40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc42:	9112      	str	r1, [sp, #72]	@ 0x48
 801bc44:	0038      	movs	r0, r7
 801bc46:	4651      	mov	r1, sl
 801bc48:	f7e4 fcba 	bl	80005c0 <__aeabi_lmul>
 801bc4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bc4e:	9a07      	ldr	r2, [sp, #28]
 801bc50:	4684      	mov	ip, r0
 801bc52:	4461      	add	r1, ip
 801bc54:	1049      	asrs	r1, r1, #1
 801bc56:	6021      	str	r1, [r4, #0]
 801bc58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc5a:	0038      	movs	r0, r7
 801bc5c:	4651      	mov	r1, sl
 801bc5e:	f7e4 fcaf 	bl	80005c0 <__aeabi_lmul>
 801bc62:	9a08      	ldr	r2, [sp, #32]
 801bc64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc66:	000f      	movs	r7, r1
 801bc68:	0030      	movs	r0, r6
 801bc6a:	4641      	mov	r1, r8
 801bc6c:	f7e4 fca8 	bl	80005c0 <__aeabi_lmul>
 801bc70:	9b00      	ldr	r3, [sp, #0]
 801bc72:	9a01      	ldr	r2, [sp, #4]
 801bc74:	469c      	mov	ip, r3
 801bc76:	9803      	ldr	r0, [sp, #12]
 801bc78:	1a7f      	subs	r7, r7, r1
 801bc7a:	107f      	asrs	r7, r7, #1
 801bc7c:	6067      	str	r7, [r4, #4]
 801bc7e:	0016      	movs	r6, r2
 801bc80:	4464      	add	r4, ip
 801bc82:	4684      	mov	ip, r0
 801bc84:	4466      	add	r6, ip
 801bc86:	17f2      	asrs	r2, r6, #31
 801bc88:	4690      	mov	r8, r2
 801bc8a:	9902      	ldr	r1, [sp, #8]
 801bc8c:	9f04      	ldr	r7, [sp, #16]
 801bc8e:	0030      	movs	r0, r6
 801bc90:	1bcf      	subs	r7, r1, r7
 801bc92:	17fa      	asrs	r2, r7, #31
 801bc94:	4692      	mov	sl, r2
 801bc96:	4641      	mov	r1, r8
 801bc98:	9a05      	ldr	r2, [sp, #20]
 801bc9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc9c:	f7e4 fc90 	bl	80005c0 <__aeabi_lmul>
 801bca0:	9a06      	ldr	r2, [sp, #24]
 801bca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bca4:	9112      	str	r1, [sp, #72]	@ 0x48
 801bca6:	0038      	movs	r0, r7
 801bca8:	4651      	mov	r1, sl
 801bcaa:	f7e4 fc89 	bl	80005c0 <__aeabi_lmul>
 801bcae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bcb0:	9a05      	ldr	r2, [sp, #20]
 801bcb2:	4684      	mov	ip, r0
 801bcb4:	4648      	mov	r0, r9
 801bcb6:	4461      	add	r1, ip
 801bcb8:	1049      	asrs	r1, r1, #1
 801bcba:	6001      	str	r1, [r0, #0]
 801bcbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bcbe:	0038      	movs	r0, r7
 801bcc0:	4651      	mov	r1, sl
 801bcc2:	f7e4 fc7d 	bl	80005c0 <__aeabi_lmul>
 801bcc6:	9a06      	ldr	r2, [sp, #24]
 801bcc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bcca:	000f      	movs	r7, r1
 801bccc:	0030      	movs	r0, r6
 801bcce:	4641      	mov	r1, r8
 801bcd0:	f7e4 fc76 	bl	80005c0 <__aeabi_lmul>
 801bcd4:	464e      	mov	r6, r9
 801bcd6:	9a00      	ldr	r2, [sp, #0]
 801bcd8:	9b01      	ldr	r3, [sp, #4]
 801bcda:	4694      	mov	ip, r2
 801bcdc:	9803      	ldr	r0, [sp, #12]
 801bcde:	1a7f      	subs	r7, r7, r1
 801bce0:	107f      	asrs	r7, r7, #1
 801bce2:	6077      	str	r7, [r6, #4]
 801bce4:	1a1e      	subs	r6, r3, r0
 801bce6:	9b04      	ldr	r3, [sp, #16]
 801bce8:	44e1      	add	r9, ip
 801bcea:	469c      	mov	ip, r3
 801bcec:	17f0      	asrs	r0, r6, #31
 801bcee:	4680      	mov	r8, r0
 801bcf0:	9902      	ldr	r1, [sp, #8]
 801bcf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bcf4:	4461      	add	r1, ip
 801bcf6:	17cb      	asrs	r3, r1, #31
 801bcf8:	000f      	movs	r7, r1
 801bcfa:	469a      	mov	sl, r3
 801bcfc:	0030      	movs	r0, r6
 801bcfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd00:	4641      	mov	r1, r8
 801bd02:	f7e4 fc5d 	bl	80005c0 <__aeabi_lmul>
 801bd06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bd08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bd0a:	9101      	str	r1, [sp, #4]
 801bd0c:	0038      	movs	r0, r7
 801bd0e:	4651      	mov	r1, sl
 801bd10:	f7e4 fc56 	bl	80005c0 <__aeabi_lmul>
 801bd14:	9801      	ldr	r0, [sp, #4]
 801bd16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd18:	4684      	mov	ip, r0
 801bd1a:	4461      	add	r1, ip
 801bd1c:	1049      	asrs	r1, r1, #1
 801bd1e:	6029      	str	r1, [r5, #0]
 801bd20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd22:	0038      	movs	r0, r7
 801bd24:	4651      	mov	r1, sl
 801bd26:	f7e4 fc4b 	bl	80005c0 <__aeabi_lmul>
 801bd2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bd2c:	000f      	movs	r7, r1
 801bd2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bd30:	0030      	movs	r0, r6
 801bd32:	4641      	mov	r1, r8
 801bd34:	f7e4 fc44 	bl	80005c0 <__aeabi_lmul>
 801bd38:	1a7f      	subs	r7, r7, r1
 801bd3a:	107f      	asrs	r7, r7, #1
 801bd3c:	606f      	str	r7, [r5, #4]
 801bd3e:	9a00      	ldr	r2, [sp, #0]
 801bd40:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bd42:	4694      	mov	ip, r2
 801bd44:	4465      	add	r5, ip
 801bd46:	468c      	mov	ip, r1
 801bd48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bd4a:	0013      	movs	r3, r2
 801bd4c:	4462      	add	r2, ip
 801bd4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bd50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bd52:	429a      	cmp	r2, r3
 801bd54:	d900      	bls.n	801bd58 <arm_radix4_butterfly_q31+0x478>
 801bd56:	e73a      	b.n	801bbce <arm_radix4_butterfly_q31+0x2ee>
 801bd58:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801bd5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801bd5c:	468c      	mov	ip, r1
 801bd5e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801bd60:	4462      	add	r2, ip
 801bd62:	468c      	mov	ip, r1
 801bd64:	9216      	str	r2, [sp, #88]	@ 0x58
 801bd66:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801bd68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801bd6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bd6c:	4462      	add	r2, ip
 801bd6e:	468c      	mov	ip, r1
 801bd70:	9219      	str	r2, [sp, #100]	@ 0x64
 801bd72:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bd74:	3301      	adds	r3, #1
 801bd76:	4462      	add	r2, ip
 801bd78:	9218      	str	r2, [sp, #96]	@ 0x60
 801bd7a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801bd7c:	9315      	str	r3, [sp, #84]	@ 0x54
 801bd7e:	3208      	adds	r2, #8
 801bd80:	9217      	str	r2, [sp, #92]	@ 0x5c
 801bd82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bd84:	4293      	cmp	r3, r2
 801bd86:	d800      	bhi.n	801bd8a <arm_radix4_butterfly_q31+0x4aa>
 801bd88:	e6e8      	b.n	801bb5c <arm_radix4_butterfly_q31+0x27c>
 801bd8a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801bd8c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801bd8e:	009b      	lsls	r3, r3, #2
 801bd90:	931f      	str	r3, [sp, #124]	@ 0x7c
 801bd92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801bd94:	9213      	str	r2, [sp, #76]	@ 0x4c
 801bd96:	089b      	lsrs	r3, r3, #2
 801bd98:	9320      	str	r3, [sp, #128]	@ 0x80
 801bd9a:	2b04      	cmp	r3, #4
 801bd9c:	d900      	bls.n	801bda0 <arm_radix4_butterfly_q31+0x4c0>
 801bd9e:	e6c1      	b.n	801bb24 <arm_radix4_butterfly_q31+0x244>
 801bda0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bda2:	469a      	mov	sl, r3
 801bda4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bda6:	691c      	ldr	r4, [r3, #16]
 801bda8:	685a      	ldr	r2, [r3, #4]
 801bdaa:	46a1      	mov	r9, r4
 801bdac:	4690      	mov	r8, r2
 801bdae:	6819      	ldr	r1, [r3, #0]
 801bdb0:	689a      	ldr	r2, [r3, #8]
 801bdb2:	699f      	ldr	r7, [r3, #24]
 801bdb4:	188d      	adds	r5, r1, r2
 801bdb6:	444d      	add	r5, r9
 801bdb8:	19ed      	adds	r5, r5, r7
 801bdba:	69de      	ldr	r6, [r3, #28]
 801bdbc:	601d      	str	r5, [r3, #0]
 801bdbe:	4645      	mov	r5, r8
 801bdc0:	46b4      	mov	ip, r6
 801bdc2:	68d8      	ldr	r0, [r3, #12]
 801bdc4:	695c      	ldr	r4, [r3, #20]
 801bdc6:	182d      	adds	r5, r5, r0
 801bdc8:	192d      	adds	r5, r5, r4
 801bdca:	4465      	add	r5, ip
 801bdcc:	605d      	str	r5, [r3, #4]
 801bdce:	1a8d      	subs	r5, r1, r2
 801bdd0:	444d      	add	r5, r9
 801bdd2:	1bed      	subs	r5, r5, r7
 801bdd4:	609d      	str	r5, [r3, #8]
 801bdd6:	4645      	mov	r5, r8
 801bdd8:	1a2d      	subs	r5, r5, r0
 801bdda:	192d      	adds	r5, r5, r4
 801bddc:	1bad      	subs	r5, r5, r6
 801bdde:	464e      	mov	r6, r9
 801bde0:	60dd      	str	r5, [r3, #12]
 801bde2:	180d      	adds	r5, r1, r0
 801bde4:	1bad      	subs	r5, r5, r6
 801bde6:	4666      	mov	r6, ip
 801bde8:	1bad      	subs	r5, r5, r6
 801bdea:	611d      	str	r5, [r3, #16]
 801bdec:	4645      	mov	r5, r8
 801bdee:	1aad      	subs	r5, r5, r2
 801bdf0:	4442      	add	r2, r8
 801bdf2:	1b12      	subs	r2, r2, r4
 801bdf4:	1bd2      	subs	r2, r2, r7
 801bdf6:	1a08      	subs	r0, r1, r0
 801bdf8:	61da      	str	r2, [r3, #28]
 801bdfa:	4649      	mov	r1, r9
 801bdfc:	2201      	movs	r2, #1
 801bdfe:	1a41      	subs	r1, r0, r1
 801be00:	4252      	negs	r2, r2
 801be02:	4461      	add	r1, ip
 801be04:	4694      	mov	ip, r2
 801be06:	44e2      	add	sl, ip
 801be08:	4652      	mov	r2, sl
 801be0a:	1b2d      	subs	r5, r5, r4
 801be0c:	19ed      	adds	r5, r5, r7
 801be0e:	615d      	str	r5, [r3, #20]
 801be10:	6199      	str	r1, [r3, #24]
 801be12:	3320      	adds	r3, #32
 801be14:	2a00      	cmp	r2, #0
 801be16:	d1c6      	bne.n	801bda6 <arm_radix4_butterfly_q31+0x4c6>
 801be18:	b027      	add	sp, #156	@ 0x9c
 801be1a:	bc3c      	pop	{r2, r3, r4, r5}
 801be1c:	4690      	mov	r8, r2
 801be1e:	4699      	mov	r9, r3
 801be20:	46a2      	mov	sl, r4
 801be22:	46ab      	mov	fp, r5
 801be24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be26:	469a      	mov	sl, r3
 801be28:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801be2a:	e7bc      	b.n	801bda6 <arm_radix4_butterfly_q31+0x4c6>

0801be2c <arm_radix4_butterfly_inverse_q31>:
 801be2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be2e:	464d      	mov	r5, r9
 801be30:	4644      	mov	r4, r8
 801be32:	465f      	mov	r7, fp
 801be34:	4656      	mov	r6, sl
 801be36:	b4f0      	push	{r4, r5, r6, r7}
 801be38:	b0a7      	sub	sp, #156	@ 0x9c
 801be3a:	469c      	mov	ip, r3
 801be3c:	9114      	str	r1, [sp, #80]	@ 0x50
 801be3e:	0889      	lsrs	r1, r1, #2
 801be40:	9310      	str	r3, [sp, #64]	@ 0x40
 801be42:	00cb      	lsls	r3, r1, #3
 801be44:	0015      	movs	r5, r2
 801be46:	9223      	str	r2, [sp, #140]	@ 0x8c
 801be48:	18c2      	adds	r2, r0, r3
 801be4a:	000c      	movs	r4, r1
 801be4c:	9124      	str	r1, [sp, #144]	@ 0x90
 801be4e:	18d1      	adds	r1, r2, r3
 801be50:	468b      	mov	fp, r1
 801be52:	469a      	mov	sl, r3
 801be54:	4663      	mov	r3, ip
 801be56:	44da      	add	sl, fp
 801be58:	46d0      	mov	r8, sl
 801be5a:	4681      	mov	r9, r0
 801be5c:	4692      	mov	sl, r2
 801be5e:	0119      	lsls	r1, r3, #4
 801be60:	910d      	str	r1, [sp, #52]	@ 0x34
 801be62:	00d9      	lsls	r1, r3, #3
 801be64:	005b      	lsls	r3, r3, #1
 801be66:	4463      	add	r3, ip
 801be68:	910e      	str	r1, [sp, #56]	@ 0x38
 801be6a:	00d9      	lsls	r1, r3, #3
 801be6c:	9022      	str	r0, [sp, #136]	@ 0x88
 801be6e:	9025      	str	r0, [sp, #148]	@ 0x94
 801be70:	910f      	str	r1, [sp, #60]	@ 0x3c
 801be72:	9502      	str	r5, [sp, #8]
 801be74:	9500      	str	r5, [sp, #0]
 801be76:	9501      	str	r5, [sp, #4]
 801be78:	9409      	str	r4, [sp, #36]	@ 0x24
 801be7a:	464b      	mov	r3, r9
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	4652      	mov	r2, sl
 801be80:	111c      	asrs	r4, r3, #4
 801be82:	465b      	mov	r3, fp
 801be84:	4648      	mov	r0, r9
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	6812      	ldr	r2, [r2, #0]
 801be8a:	6840      	ldr	r0, [r0, #4]
 801be8c:	111b      	asrs	r3, r3, #4
 801be8e:	18e7      	adds	r7, r4, r3
 801be90:	1ae3      	subs	r3, r4, r3
 801be92:	1114      	asrs	r4, r2, #4
 801be94:	4642      	mov	r2, r8
 801be96:	1105      	asrs	r5, r0, #4
 801be98:	4658      	mov	r0, fp
 801be9a:	6812      	ldr	r2, [r2, #0]
 801be9c:	6840      	ldr	r0, [r0, #4]
 801be9e:	9303      	str	r3, [sp, #12]
 801bea0:	1113      	asrs	r3, r2, #4
 801bea2:	18e2      	adds	r2, r4, r3
 801bea4:	1103      	asrs	r3, r0, #4
 801bea6:	18ee      	adds	r6, r5, r3
 801bea8:	1ae8      	subs	r0, r5, r3
 801beaa:	464d      	mov	r5, r9
 801beac:	18bb      	adds	r3, r7, r2
 801beae:	602b      	str	r3, [r5, #0]
 801beb0:	4641      	mov	r1, r8
 801beb2:	4655      	mov	r5, sl
 801beb4:	6849      	ldr	r1, [r1, #4]
 801beb6:	686d      	ldr	r5, [r5, #4]
 801beb8:	110b      	asrs	r3, r1, #4
 801beba:	112d      	asrs	r5, r5, #4
 801bebc:	18eb      	adds	r3, r5, r3
 801bebe:	464d      	mov	r5, r9
 801bec0:	18f1      	adds	r1, r6, r3
 801bec2:	6069      	str	r1, [r5, #4]
 801bec4:	4655      	mov	r5, sl
 801bec6:	686d      	ldr	r5, [r5, #4]
 801bec8:	9004      	str	r0, [sp, #16]
 801beca:	112c      	asrs	r4, r5, #4
 801becc:	4645      	mov	r5, r8
 801bece:	686d      	ldr	r5, [r5, #4]
 801bed0:	1129      	asrs	r1, r5, #4
 801bed2:	1a65      	subs	r5, r4, r1
 801bed4:	4651      	mov	r1, sl
 801bed6:	6809      	ldr	r1, [r1, #0]
 801bed8:	1abc      	subs	r4, r7, r2
 801beda:	1108      	asrs	r0, r1, #4
 801bedc:	4641      	mov	r1, r8
 801bede:	17e2      	asrs	r2, r4, #31
 801bee0:	6809      	ldr	r1, [r1, #0]
 801bee2:	9207      	str	r2, [sp, #28]
 801bee4:	9a01      	ldr	r2, [sp, #4]
 801bee6:	1109      	asrs	r1, r1, #4
 801bee8:	6817      	ldr	r7, [r2, #0]
 801beea:	1a41      	subs	r1, r0, r1
 801beec:	9106      	str	r1, [sp, #24]
 801beee:	0039      	movs	r1, r7
 801bef0:	17ff      	asrs	r7, r7, #31
 801bef2:	0038      	movs	r0, r7
 801bef4:	9505      	str	r5, [sp, #20]
 801bef6:	1af5      	subs	r5, r6, r3
 801bef8:	17ef      	asrs	r7, r5, #31
 801befa:	970b      	str	r7, [sp, #44]	@ 0x2c
 801befc:	6857      	ldr	r7, [r2, #4]
 801befe:	0003      	movs	r3, r0
 801bf00:	17fe      	asrs	r6, r7, #31
 801bf02:	000a      	movs	r2, r1
 801bf04:	9108      	str	r1, [sp, #32]
 801bf06:	900a      	str	r0, [sp, #40]	@ 0x28
 801bf08:	17e1      	asrs	r1, r4, #31
 801bf0a:	0020      	movs	r0, r4
 801bf0c:	960c      	str	r6, [sp, #48]	@ 0x30
 801bf0e:	f7e4 fb57 	bl	80005c0 <__aeabi_lmul>
 801bf12:	003a      	movs	r2, r7
 801bf14:	17fb      	asrs	r3, r7, #31
 801bf16:	000e      	movs	r6, r1
 801bf18:	0028      	movs	r0, r5
 801bf1a:	17e9      	asrs	r1, r5, #31
 801bf1c:	f7e4 fb50 	bl	80005c0 <__aeabi_lmul>
 801bf20:	4653      	mov	r3, sl
 801bf22:	1a76      	subs	r6, r6, r1
 801bf24:	0076      	lsls	r6, r6, #1
 801bf26:	601e      	str	r6, [r3, #0]
 801bf28:	002a      	movs	r2, r5
 801bf2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf2c:	9808      	ldr	r0, [sp, #32]
 801bf2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf30:	f7e4 fb46 	bl	80005c0 <__aeabi_lmul>
 801bf34:	003a      	movs	r2, r7
 801bf36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf38:	000d      	movs	r5, r1
 801bf3a:	0020      	movs	r0, r4
 801bf3c:	9907      	ldr	r1, [sp, #28]
 801bf3e:	f7e4 fb3f 	bl	80005c0 <__aeabi_lmul>
 801bf42:	4657      	mov	r7, sl
 801bf44:	186d      	adds	r5, r5, r1
 801bf46:	006d      	lsls	r5, r5, #1
 801bf48:	607d      	str	r5, [r7, #4]
 801bf4a:	9b03      	ldr	r3, [sp, #12]
 801bf4c:	9e06      	ldr	r6, [sp, #24]
 801bf4e:	9d05      	ldr	r5, [sp, #20]
 801bf50:	46b4      	mov	ip, r6
 801bf52:	1b5d      	subs	r5, r3, r5
 801bf54:	9b00      	ldr	r3, [sp, #0]
 801bf56:	17ef      	asrs	r7, r5, #31
 801bf58:	0039      	movs	r1, r7
 801bf5a:	681f      	ldr	r7, [r3, #0]
 801bf5c:	17fc      	asrs	r4, r7, #31
 801bf5e:	0020      	movs	r0, r4
 801bf60:	9c04      	ldr	r4, [sp, #16]
 801bf62:	4464      	add	r4, ip
 801bf64:	17e6      	asrs	r6, r4, #31
 801bf66:	9407      	str	r4, [sp, #28]
 801bf68:	9608      	str	r6, [sp, #32]
 801bf6a:	685e      	ldr	r6, [r3, #4]
 801bf6c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801bf6e:	17f2      	asrs	r2, r6, #31
 801bf70:	0003      	movs	r3, r0
 801bf72:	920c      	str	r2, [sp, #48]	@ 0x30
 801bf74:	0028      	movs	r0, r5
 801bf76:	003a      	movs	r2, r7
 801bf78:	910a      	str	r1, [sp, #40]	@ 0x28
 801bf7a:	f7e4 fb21 	bl	80005c0 <__aeabi_lmul>
 801bf7e:	0032      	movs	r2, r6
 801bf80:	17f3      	asrs	r3, r6, #31
 801bf82:	9807      	ldr	r0, [sp, #28]
 801bf84:	000c      	movs	r4, r1
 801bf86:	9908      	ldr	r1, [sp, #32]
 801bf88:	f7e4 fb1a 	bl	80005c0 <__aeabi_lmul>
 801bf8c:	4658      	mov	r0, fp
 801bf8e:	1a64      	subs	r4, r4, r1
 801bf90:	0064      	lsls	r4, r4, #1
 801bf92:	9a07      	ldr	r2, [sp, #28]
 801bf94:	6004      	str	r4, [r0, #0]
 801bf96:	9b08      	ldr	r3, [sp, #32]
 801bf98:	0038      	movs	r0, r7
 801bf9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bf9c:	f7e4 fb10 	bl	80005c0 <__aeabi_lmul>
 801bfa0:	0032      	movs	r2, r6
 801bfa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bfa4:	000c      	movs	r4, r1
 801bfa6:	0028      	movs	r0, r5
 801bfa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bfaa:	f7e4 fb09 	bl	80005c0 <__aeabi_lmul>
 801bfae:	9d05      	ldr	r5, [sp, #20]
 801bfb0:	465f      	mov	r7, fp
 801bfb2:	46ac      	mov	ip, r5
 801bfb4:	1864      	adds	r4, r4, r1
 801bfb6:	9903      	ldr	r1, [sp, #12]
 801bfb8:	0064      	lsls	r4, r4, #1
 801bfba:	4461      	add	r1, ip
 801bfbc:	607c      	str	r4, [r7, #4]
 801bfbe:	000c      	movs	r4, r1
 801bfc0:	17c9      	asrs	r1, r1, #31
 801bfc2:	9105      	str	r1, [sp, #20]
 801bfc4:	9902      	ldr	r1, [sp, #8]
 801bfc6:	9804      	ldr	r0, [sp, #16]
 801bfc8:	680d      	ldr	r5, [r1, #0]
 801bfca:	9e06      	ldr	r6, [sp, #24]
 801bfcc:	002b      	movs	r3, r5
 801bfce:	17ed      	asrs	r5, r5, #31
 801bfd0:	684f      	ldr	r7, [r1, #4]
 801bfd2:	9503      	str	r5, [sp, #12]
 801bfd4:	1b85      	subs	r5, r0, r6
 801bfd6:	17e8      	asrs	r0, r5, #31
 801bfd8:	001a      	movs	r2, r3
 801bfda:	9006      	str	r0, [sp, #24]
 801bfdc:	17fe      	asrs	r6, r7, #31
 801bfde:	9304      	str	r3, [sp, #16]
 801bfe0:	0020      	movs	r0, r4
 801bfe2:	9b03      	ldr	r3, [sp, #12]
 801bfe4:	17e1      	asrs	r1, r4, #31
 801bfe6:	9607      	str	r6, [sp, #28]
 801bfe8:	f7e4 faea 	bl	80005c0 <__aeabi_lmul>
 801bfec:	003a      	movs	r2, r7
 801bfee:	000e      	movs	r6, r1
 801bff0:	17fb      	asrs	r3, r7, #31
 801bff2:	0028      	movs	r0, r5
 801bff4:	17e9      	asrs	r1, r5, #31
 801bff6:	f7e4 fae3 	bl	80005c0 <__aeabi_lmul>
 801bffa:	4640      	mov	r0, r8
 801bffc:	1a76      	subs	r6, r6, r1
 801bffe:	0076      	lsls	r6, r6, #1
 801c000:	002a      	movs	r2, r5
 801c002:	9b06      	ldr	r3, [sp, #24]
 801c004:	6006      	str	r6, [r0, #0]
 801c006:	9903      	ldr	r1, [sp, #12]
 801c008:	9804      	ldr	r0, [sp, #16]
 801c00a:	f7e4 fad9 	bl	80005c0 <__aeabi_lmul>
 801c00e:	0020      	movs	r0, r4
 801c010:	2408      	movs	r4, #8
 801c012:	9b07      	ldr	r3, [sp, #28]
 801c014:	000d      	movs	r5, r1
 801c016:	003a      	movs	r2, r7
 801c018:	9905      	ldr	r1, [sp, #20]
 801c01a:	f7e4 fad1 	bl	80005c0 <__aeabi_lmul>
 801c01e:	4640      	mov	r0, r8
 801c020:	46a4      	mov	ip, r4
 801c022:	186d      	adds	r5, r5, r1
 801c024:	006d      	lsls	r5, r5, #1
 801c026:	6045      	str	r5, [r0, #4]
 801c028:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c02a:	44e1      	add	r9, ip
 801c02c:	3801      	subs	r0, #1
 801c02e:	9009      	str	r0, [sp, #36]	@ 0x24
 801c030:	9a01      	ldr	r2, [sp, #4]
 801c032:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c034:	44e2      	add	sl, ip
 801c036:	44e3      	add	fp, ip
 801c038:	44e0      	add	r8, ip
 801c03a:	46a4      	mov	ip, r4
 801c03c:	4462      	add	r2, ip
 801c03e:	9201      	str	r2, [sp, #4]
 801c040:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c042:	9b00      	ldr	r3, [sp, #0]
 801c044:	4694      	mov	ip, r2
 801c046:	4463      	add	r3, ip
 801c048:	9300      	str	r3, [sp, #0]
 801c04a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c04c:	9902      	ldr	r1, [sp, #8]
 801c04e:	469c      	mov	ip, r3
 801c050:	4461      	add	r1, ip
 801c052:	9102      	str	r1, [sp, #8]
 801c054:	2800      	cmp	r0, #0
 801c056:	d000      	beq.n	801c05a <arm_radix4_butterfly_inverse_q31+0x22e>
 801c058:	e70f      	b.n	801be7a <arm_radix4_butterfly_inverse_q31+0x4e>
 801c05a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c05c:	009b      	lsls	r3, r3, #2
 801c05e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c060:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c062:	9320      	str	r3, [sp, #128]	@ 0x80
 801c064:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c066:	2b04      	cmp	r3, #4
 801c068:	d800      	bhi.n	801c06c <arm_radix4_butterfly_inverse_q31+0x240>
 801c06a:	e17c      	b.n	801c366 <arm_radix4_butterfly_inverse_q31+0x53a>
 801c06c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c06e:	0893      	lsrs	r3, r2, #2
 801c070:	1e59      	subs	r1, r3, #1
 801c072:	9321      	str	r3, [sp, #132]	@ 0x84
 801c074:	00db      	lsls	r3, r3, #3
 801c076:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c078:	00d3      	lsls	r3, r2, #3
 801c07a:	9300      	str	r3, [sp, #0]
 801c07c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c07e:	911a      	str	r1, [sp, #104]	@ 0x68
 801c080:	00da      	lsls	r2, r3, #3
 801c082:	921e      	str	r2, [sp, #120]	@ 0x78
 801c084:	011a      	lsls	r2, r3, #4
 801c086:	921d      	str	r2, [sp, #116]	@ 0x74
 801c088:	001a      	movs	r2, r3
 801c08a:	4694      	mov	ip, r2
 801c08c:	005b      	lsls	r3, r3, #1
 801c08e:	4463      	add	r3, ip
 801c090:	00db      	lsls	r3, r3, #3
 801c092:	931c      	str	r3, [sp, #112]	@ 0x70
 801c094:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c096:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c098:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c09a:	9318      	str	r3, [sp, #96]	@ 0x60
 801c09c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c09e:	9316      	str	r3, [sp, #88]	@ 0x58
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	9315      	str	r3, [sp, #84]	@ 0x54
 801c0a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c0a6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c0a8:	681a      	ldr	r2, [r3, #0]
 801c0aa:	685b      	ldr	r3, [r3, #4]
 801c0ac:	9205      	str	r2, [sp, #20]
 801c0ae:	9306      	str	r3, [sp, #24]
 801c0b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c0b2:	468c      	mov	ip, r1
 801c0b4:	681a      	ldr	r2, [r3, #0]
 801c0b6:	685b      	ldr	r3, [r3, #4]
 801c0b8:	9207      	str	r2, [sp, #28]
 801c0ba:	9308      	str	r3, [sp, #32]
 801c0bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c0be:	681a      	ldr	r2, [r3, #0]
 801c0c0:	685b      	ldr	r3, [r3, #4]
 801c0c2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c0c4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0c8:	0013      	movs	r3, r2
 801c0ca:	4463      	add	r3, ip
 801c0cc:	4698      	mov	r8, r3
 801c0ce:	0013      	movs	r3, r2
 801c0d0:	4442      	add	r2, r8
 801c0d2:	4691      	mov	r9, r2
 801c0d4:	001a      	movs	r2, r3
 801c0d6:	444a      	add	r2, r9
 801c0d8:	4692      	mov	sl, r2
 801c0da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c0dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c0de:	4293      	cmp	r3, r2
 801c0e0:	d800      	bhi.n	801c0e4 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801c0e2:	e0d9      	b.n	801c298 <arm_radix4_butterfly_inverse_q31+0x46c>
 801c0e4:	4694      	mov	ip, r2
 801c0e6:	4644      	mov	r4, r8
 801c0e8:	4655      	mov	r5, sl
 801c0ea:	4688      	mov	r8, r1
 801c0ec:	9b07      	ldr	r3, [sp, #28]
 801c0ee:	17db      	asrs	r3, r3, #31
 801c0f0:	930c      	str	r3, [sp, #48]	@ 0x30
 801c0f2:	9b08      	ldr	r3, [sp, #32]
 801c0f4:	17db      	asrs	r3, r3, #31
 801c0f6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c0f8:	9b05      	ldr	r3, [sp, #20]
 801c0fa:	17db      	asrs	r3, r3, #31
 801c0fc:	930e      	str	r3, [sp, #56]	@ 0x38
 801c0fe:	9b06      	ldr	r3, [sp, #24]
 801c100:	17db      	asrs	r3, r3, #31
 801c102:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c106:	17db      	asrs	r3, r3, #31
 801c108:	9310      	str	r3, [sp, #64]	@ 0x40
 801c10a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c10c:	17db      	asrs	r3, r3, #31
 801c10e:	9311      	str	r3, [sp, #68]	@ 0x44
 801c110:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c112:	4463      	add	r3, ip
 801c114:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c116:	4643      	mov	r3, r8
 801c118:	4641      	mov	r1, r8
 801c11a:	681a      	ldr	r2, [r3, #0]
 801c11c:	464b      	mov	r3, r9
 801c11e:	684f      	ldr	r7, [r1, #4]
 801c120:	4649      	mov	r1, r9
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	18d6      	adds	r6, r2, r3
 801c126:	1ad3      	subs	r3, r2, r3
 801c128:	9301      	str	r3, [sp, #4]
 801c12a:	684b      	ldr	r3, [r1, #4]
 801c12c:	1af9      	subs	r1, r7, r3
 801c12e:	9102      	str	r1, [sp, #8]
 801c130:	6829      	ldr	r1, [r5, #0]
 801c132:	18f8      	adds	r0, r7, r3
 801c134:	468c      	mov	ip, r1
 801c136:	6827      	ldr	r7, [r4, #0]
 801c138:	4467      	add	r7, ip
 801c13a:	003a      	movs	r2, r7
 801c13c:	19f3      	adds	r3, r6, r7
 801c13e:	4647      	mov	r7, r8
 801c140:	109b      	asrs	r3, r3, #2
 801c142:	603b      	str	r3, [r7, #0]
 801c144:	6869      	ldr	r1, [r5, #4]
 801c146:	6867      	ldr	r7, [r4, #4]
 801c148:	468c      	mov	ip, r1
 801c14a:	4467      	add	r7, ip
 801c14c:	003b      	movs	r3, r7
 801c14e:	19c1      	adds	r1, r0, r7
 801c150:	4647      	mov	r7, r8
 801c152:	1ab6      	subs	r6, r6, r2
 801c154:	1089      	asrs	r1, r1, #2
 801c156:	6079      	str	r1, [r7, #4]
 801c158:	17f2      	asrs	r2, r6, #31
 801c15a:	9900      	ldr	r1, [sp, #0]
 801c15c:	4692      	mov	sl, r2
 801c15e:	468c      	mov	ip, r1
 801c160:	6867      	ldr	r7, [r4, #4]
 801c162:	6869      	ldr	r1, [r5, #4]
 801c164:	44e0      	add	r8, ip
 801c166:	1a7f      	subs	r7, r7, r1
 801c168:	9703      	str	r7, [sp, #12]
 801c16a:	6821      	ldr	r1, [r4, #0]
 801c16c:	682f      	ldr	r7, [r5, #0]
 801c16e:	1bc9      	subs	r1, r1, r7
 801c170:	1ac7      	subs	r7, r0, r3
 801c172:	17fa      	asrs	r2, r7, #31
 801c174:	4693      	mov	fp, r2
 801c176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c178:	9a07      	ldr	r2, [sp, #28]
 801c17a:	9104      	str	r1, [sp, #16]
 801c17c:	0030      	movs	r0, r6
 801c17e:	4651      	mov	r1, sl
 801c180:	f7e4 fa1e 	bl	80005c0 <__aeabi_lmul>
 801c184:	9a08      	ldr	r2, [sp, #32]
 801c186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c188:	9112      	str	r1, [sp, #72]	@ 0x48
 801c18a:	0038      	movs	r0, r7
 801c18c:	4659      	mov	r1, fp
 801c18e:	f7e4 fa17 	bl	80005c0 <__aeabi_lmul>
 801c192:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c194:	9a07      	ldr	r2, [sp, #28]
 801c196:	1a41      	subs	r1, r0, r1
 801c198:	1049      	asrs	r1, r1, #1
 801c19a:	6021      	str	r1, [r4, #0]
 801c19c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c19e:	0038      	movs	r0, r7
 801c1a0:	4659      	mov	r1, fp
 801c1a2:	f7e4 fa0d 	bl	80005c0 <__aeabi_lmul>
 801c1a6:	9a08      	ldr	r2, [sp, #32]
 801c1a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c1aa:	000f      	movs	r7, r1
 801c1ac:	0030      	movs	r0, r6
 801c1ae:	4651      	mov	r1, sl
 801c1b0:	f7e4 fa06 	bl	80005c0 <__aeabi_lmul>
 801c1b4:	9b00      	ldr	r3, [sp, #0]
 801c1b6:	187f      	adds	r7, r7, r1
 801c1b8:	469c      	mov	ip, r3
 801c1ba:	107f      	asrs	r7, r7, #1
 801c1bc:	6067      	str	r7, [r4, #4]
 801c1be:	9a01      	ldr	r2, [sp, #4]
 801c1c0:	9f03      	ldr	r7, [sp, #12]
 801c1c2:	9802      	ldr	r0, [sp, #8]
 801c1c4:	1bd7      	subs	r7, r2, r7
 801c1c6:	17fe      	asrs	r6, r7, #31
 801c1c8:	0031      	movs	r1, r6
 801c1ca:	9e04      	ldr	r6, [sp, #16]
 801c1cc:	4682      	mov	sl, r0
 801c1ce:	4464      	add	r4, ip
 801c1d0:	46b4      	mov	ip, r6
 801c1d2:	44e2      	add	sl, ip
 801c1d4:	4652      	mov	r2, sl
 801c1d6:	17d2      	asrs	r2, r2, #31
 801c1d8:	4693      	mov	fp, r2
 801c1da:	0038      	movs	r0, r7
 801c1dc:	9a05      	ldr	r2, [sp, #20]
 801c1de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c1e0:	9112      	str	r1, [sp, #72]	@ 0x48
 801c1e2:	f7e4 f9ed 	bl	80005c0 <__aeabi_lmul>
 801c1e6:	9a06      	ldr	r2, [sp, #24]
 801c1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c1ea:	000e      	movs	r6, r1
 801c1ec:	4650      	mov	r0, sl
 801c1ee:	4659      	mov	r1, fp
 801c1f0:	f7e4 f9e6 	bl	80005c0 <__aeabi_lmul>
 801c1f4:	4648      	mov	r0, r9
 801c1f6:	1a76      	subs	r6, r6, r1
 801c1f8:	1076      	asrs	r6, r6, #1
 801c1fa:	6006      	str	r6, [r0, #0]
 801c1fc:	9a05      	ldr	r2, [sp, #20]
 801c1fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c200:	4650      	mov	r0, sl
 801c202:	4659      	mov	r1, fp
 801c204:	f7e4 f9dc 	bl	80005c0 <__aeabi_lmul>
 801c208:	9a06      	ldr	r2, [sp, #24]
 801c20a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c20c:	000e      	movs	r6, r1
 801c20e:	0038      	movs	r0, r7
 801c210:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c212:	f7e4 f9d5 	bl	80005c0 <__aeabi_lmul>
 801c216:	9a00      	ldr	r2, [sp, #0]
 801c218:	9f03      	ldr	r7, [sp, #12]
 801c21a:	4694      	mov	ip, r2
 801c21c:	1876      	adds	r6, r6, r1
 801c21e:	4649      	mov	r1, r9
 801c220:	44e1      	add	r9, ip
 801c222:	46bc      	mov	ip, r7
 801c224:	9b01      	ldr	r3, [sp, #4]
 801c226:	1076      	asrs	r6, r6, #1
 801c228:	4463      	add	r3, ip
 801c22a:	17df      	asrs	r7, r3, #31
 801c22c:	604e      	str	r6, [r1, #4]
 801c22e:	46ba      	mov	sl, r7
 801c230:	001e      	movs	r6, r3
 801c232:	9802      	ldr	r0, [sp, #8]
 801c234:	9b04      	ldr	r3, [sp, #16]
 801c236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c238:	1ac7      	subs	r7, r0, r3
 801c23a:	17fb      	asrs	r3, r7, #31
 801c23c:	469b      	mov	fp, r3
 801c23e:	0030      	movs	r0, r6
 801c240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c242:	4651      	mov	r1, sl
 801c244:	f7e4 f9bc 	bl	80005c0 <__aeabi_lmul>
 801c248:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c24a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c24c:	9101      	str	r1, [sp, #4]
 801c24e:	0038      	movs	r0, r7
 801c250:	4659      	mov	r1, fp
 801c252:	f7e4 f9b5 	bl	80005c0 <__aeabi_lmul>
 801c256:	9801      	ldr	r0, [sp, #4]
 801c258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c25a:	1a41      	subs	r1, r0, r1
 801c25c:	1049      	asrs	r1, r1, #1
 801c25e:	6029      	str	r1, [r5, #0]
 801c260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c262:	0038      	movs	r0, r7
 801c264:	4659      	mov	r1, fp
 801c266:	f7e4 f9ab 	bl	80005c0 <__aeabi_lmul>
 801c26a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c26c:	000f      	movs	r7, r1
 801c26e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c270:	0030      	movs	r0, r6
 801c272:	4651      	mov	r1, sl
 801c274:	f7e4 f9a4 	bl	80005c0 <__aeabi_lmul>
 801c278:	187f      	adds	r7, r7, r1
 801c27a:	107f      	asrs	r7, r7, #1
 801c27c:	606f      	str	r7, [r5, #4]
 801c27e:	9a00      	ldr	r2, [sp, #0]
 801c280:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c282:	4694      	mov	ip, r2
 801c284:	4465      	add	r5, ip
 801c286:	468c      	mov	ip, r1
 801c288:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c28a:	0013      	movs	r3, r2
 801c28c:	4462      	add	r2, ip
 801c28e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c290:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c292:	429a      	cmp	r2, r3
 801c294:	d900      	bls.n	801c298 <arm_radix4_butterfly_inverse_q31+0x46c>
 801c296:	e73e      	b.n	801c116 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801c298:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801c29a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c29c:	468c      	mov	ip, r1
 801c29e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801c2a0:	4462      	add	r2, ip
 801c2a2:	468c      	mov	ip, r1
 801c2a4:	9216      	str	r2, [sp, #88]	@ 0x58
 801c2a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801c2a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c2aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c2ac:	4462      	add	r2, ip
 801c2ae:	468c      	mov	ip, r1
 801c2b0:	9219      	str	r2, [sp, #100]	@ 0x64
 801c2b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c2b4:	3301      	adds	r3, #1
 801c2b6:	4462      	add	r2, ip
 801c2b8:	9218      	str	r2, [sp, #96]	@ 0x60
 801c2ba:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801c2bc:	9315      	str	r3, [sp, #84]	@ 0x54
 801c2be:	3208      	adds	r2, #8
 801c2c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c2c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c2c4:	4293      	cmp	r3, r2
 801c2c6:	d800      	bhi.n	801c2ca <arm_radix4_butterfly_inverse_q31+0x49e>
 801c2c8:	e6ec      	b.n	801c0a4 <arm_radix4_butterfly_inverse_q31+0x278>
 801c2ca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c2cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c2ce:	009b      	lsls	r3, r3, #2
 801c2d0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c2d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c2d4:	9213      	str	r2, [sp, #76]	@ 0x4c
 801c2d6:	089b      	lsrs	r3, r3, #2
 801c2d8:	9320      	str	r3, [sp, #128]	@ 0x80
 801c2da:	2b04      	cmp	r3, #4
 801c2dc:	d900      	bls.n	801c2e0 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801c2de:	e6c5      	b.n	801c06c <arm_radix4_butterfly_inverse_q31+0x240>
 801c2e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c2e2:	469a      	mov	sl, r3
 801c2e4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c2e6:	681a      	ldr	r2, [r3, #0]
 801c2e8:	6918      	ldr	r0, [r3, #16]
 801c2ea:	4691      	mov	r9, r2
 801c2ec:	464c      	mov	r4, r9
 801c2ee:	4680      	mov	r8, r0
 801c2f0:	69de      	ldr	r6, [r3, #28]
 801c2f2:	689d      	ldr	r5, [r3, #8]
 801c2f4:	46b4      	mov	ip, r6
 801c2f6:	6998      	ldr	r0, [r3, #24]
 801c2f8:	1964      	adds	r4, r4, r5
 801c2fa:	6859      	ldr	r1, [r3, #4]
 801c2fc:	68da      	ldr	r2, [r3, #12]
 801c2fe:	4444      	add	r4, r8
 801c300:	695f      	ldr	r7, [r3, #20]
 801c302:	1824      	adds	r4, r4, r0
 801c304:	601c      	str	r4, [r3, #0]
 801c306:	188c      	adds	r4, r1, r2
 801c308:	19e4      	adds	r4, r4, r7
 801c30a:	4464      	add	r4, ip
 801c30c:	605c      	str	r4, [r3, #4]
 801c30e:	464c      	mov	r4, r9
 801c310:	1b64      	subs	r4, r4, r5
 801c312:	4444      	add	r4, r8
 801c314:	1a24      	subs	r4, r4, r0
 801c316:	609c      	str	r4, [r3, #8]
 801c318:	1a8c      	subs	r4, r1, r2
 801c31a:	19e4      	adds	r4, r4, r7
 801c31c:	1ba4      	subs	r4, r4, r6
 801c31e:	60dc      	str	r4, [r3, #12]
 801c320:	464c      	mov	r4, r9
 801c322:	4646      	mov	r6, r8
 801c324:	1aa4      	subs	r4, r4, r2
 801c326:	1ba4      	subs	r4, r4, r6
 801c328:	4464      	add	r4, ip
 801c32a:	611c      	str	r4, [r3, #16]
 801c32c:	194c      	adds	r4, r1, r5
 801c32e:	1be4      	subs	r4, r4, r7
 801c330:	1a24      	subs	r4, r4, r0
 801c332:	615c      	str	r4, [r3, #20]
 801c334:	4644      	mov	r4, r8
 801c336:	4666      	mov	r6, ip
 801c338:	444a      	add	r2, r9
 801c33a:	1b12      	subs	r2, r2, r4
 801c33c:	1b92      	subs	r2, r2, r6
 801c33e:	619a      	str	r2, [r3, #24]
 801c340:	1b4a      	subs	r2, r1, r5
 801c342:	1bd1      	subs	r1, r2, r7
 801c344:	2201      	movs	r2, #1
 801c346:	4252      	negs	r2, r2
 801c348:	4694      	mov	ip, r2
 801c34a:	44e2      	add	sl, ip
 801c34c:	4652      	mov	r2, sl
 801c34e:	1809      	adds	r1, r1, r0
 801c350:	61d9      	str	r1, [r3, #28]
 801c352:	3320      	adds	r3, #32
 801c354:	2a00      	cmp	r2, #0
 801c356:	d1c6      	bne.n	801c2e6 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801c358:	b027      	add	sp, #156	@ 0x9c
 801c35a:	bc3c      	pop	{r2, r3, r4, r5}
 801c35c:	4690      	mov	r8, r2
 801c35e:	4699      	mov	r9, r3
 801c360:	46a2      	mov	sl, r4
 801c362:	46ab      	mov	fp, r5
 801c364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c366:	469a      	mov	sl, r3
 801c368:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c36a:	e7bc      	b.n	801c2e6 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801c36c <arm_cmplx_mag_squared_q31>:
 801c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c36e:	464f      	mov	r7, r9
 801c370:	4646      	mov	r6, r8
 801c372:	0004      	movs	r4, r0
 801c374:	b4c0      	push	{r6, r7}
 801c376:	0016      	movs	r6, r2
 801c378:	000f      	movs	r7, r1
 801c37a:	2a00      	cmp	r2, #0
 801c37c:	d018      	beq.n	801c3b0 <arm_cmplx_mag_squared_q31+0x44>
 801c37e:	6823      	ldr	r3, [r4, #0]
 801c380:	6822      	ldr	r2, [r4, #0]
 801c382:	17d9      	asrs	r1, r3, #31
 801c384:	6863      	ldr	r3, [r4, #4]
 801c386:	0010      	movs	r0, r2
 801c388:	4698      	mov	r8, r3
 801c38a:	17db      	asrs	r3, r3, #31
 801c38c:	4699      	mov	r9, r3
 801c38e:	000b      	movs	r3, r1
 801c390:	f7e4 f916 	bl	80005c0 <__aeabi_lmul>
 801c394:	4642      	mov	r2, r8
 801c396:	104d      	asrs	r5, r1, #1
 801c398:	464b      	mov	r3, r9
 801c39a:	4640      	mov	r0, r8
 801c39c:	4649      	mov	r1, r9
 801c39e:	f7e4 f90f 	bl	80005c0 <__aeabi_lmul>
 801c3a2:	1049      	asrs	r1, r1, #1
 801c3a4:	1869      	adds	r1, r5, r1
 801c3a6:	3e01      	subs	r6, #1
 801c3a8:	c702      	stmia	r7!, {r1}
 801c3aa:	3408      	adds	r4, #8
 801c3ac:	2e00      	cmp	r6, #0
 801c3ae:	d1e6      	bne.n	801c37e <arm_cmplx_mag_squared_q31+0x12>
 801c3b0:	bc0c      	pop	{r2, r3}
 801c3b2:	4690      	mov	r8, r2
 801c3b4:	4699      	mov	r9, r3
 801c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c3b8 <arm_mult_q31>:
 801c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ba:	4646      	mov	r6, r8
 801c3bc:	464f      	mov	r7, r9
 801c3be:	4690      	mov	r8, r2
 801c3c0:	b4c0      	push	{r6, r7}
 801c3c2:	001d      	movs	r5, r3
 801c3c4:	0006      	movs	r6, r0
 801c3c6:	000f      	movs	r7, r1
 801c3c8:	2400      	movs	r4, #0
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d020      	beq.n	801c410 <arm_mult_q31+0x58>
 801c3ce:	4b12      	ldr	r3, [pc, #72]	@ (801c418 <arm_mult_q31+0x60>)
 801c3d0:	4699      	mov	r9, r3
 801c3d2:	e007      	b.n	801c3e4 <arm_mult_q31+0x2c>
 801c3d4:	464b      	mov	r3, r9
 801c3d6:	4059      	eors	r1, r3
 801c3d8:	4643      	mov	r3, r8
 801c3da:	3d01      	subs	r5, #1
 801c3dc:	5119      	str	r1, [r3, r4]
 801c3de:	3404      	adds	r4, #4
 801c3e0:	2d00      	cmp	r5, #0
 801c3e2:	d015      	beq.n	801c410 <arm_mult_q31+0x58>
 801c3e4:	5933      	ldr	r3, [r6, r4]
 801c3e6:	593a      	ldr	r2, [r7, r4]
 801c3e8:	17d9      	asrs	r1, r3, #31
 801c3ea:	593b      	ldr	r3, [r7, r4]
 801c3ec:	5930      	ldr	r0, [r6, r4]
 801c3ee:	17db      	asrs	r3, r3, #31
 801c3f0:	f7e4 f8e6 	bl	80005c0 <__aeabi_lmul>
 801c3f4:	004b      	lsls	r3, r1, #1
 801c3f6:	0fc0      	lsrs	r0, r0, #31
 801c3f8:	4318      	orrs	r0, r3
 801c3fa:	17c9      	asrs	r1, r1, #31
 801c3fc:	17c3      	asrs	r3, r0, #31
 801c3fe:	428b      	cmp	r3, r1
 801c400:	d1e8      	bne.n	801c3d4 <arm_mult_q31+0x1c>
 801c402:	0001      	movs	r1, r0
 801c404:	4643      	mov	r3, r8
 801c406:	3d01      	subs	r5, #1
 801c408:	5119      	str	r1, [r3, r4]
 801c40a:	3404      	adds	r4, #4
 801c40c:	2d00      	cmp	r5, #0
 801c40e:	d1e9      	bne.n	801c3e4 <arm_mult_q31+0x2c>
 801c410:	bc0c      	pop	{r2, r3}
 801c412:	4690      	mov	r8, r2
 801c414:	4699      	mov	r9, r3
 801c416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c418:	7fffffff 	.word	0x7fffffff

0801c41c <arm_add_q31>:
 801c41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c41e:	465f      	mov	r7, fp
 801c420:	4656      	mov	r6, sl
 801c422:	464d      	mov	r5, r9
 801c424:	4644      	mov	r4, r8
 801c426:	b4f0      	push	{r4, r5, r6, r7}
 801c428:	4693      	mov	fp, r2
 801c42a:	b083      	sub	sp, #12
 801c42c:	4681      	mov	r9, r0
 801c42e:	468a      	mov	sl, r1
 801c430:	4698      	mov	r8, r3
 801c432:	2200      	movs	r2, #0
 801c434:	2b00      	cmp	r3, #0
 801c436:	d020      	beq.n	801c47a <arm_add_q31+0x5e>
 801c438:	4649      	mov	r1, r9
 801c43a:	4653      	mov	r3, sl
 801c43c:	588e      	ldr	r6, [r1, r2]
 801c43e:	589b      	ldr	r3, [r3, r2]
 801c440:	17f7      	asrs	r7, r6, #31
 801c442:	001c      	movs	r4, r3
 801c444:	0030      	movs	r0, r6
 801c446:	0039      	movs	r1, r7
 801c448:	17dd      	asrs	r5, r3, #31
 801c44a:	46b4      	mov	ip, r6
 801c44c:	1900      	adds	r0, r0, r4
 801c44e:	4169      	adcs	r1, r5
 801c450:	4463      	add	r3, ip
 801c452:	9000      	str	r0, [sp, #0]
 801c454:	9101      	str	r1, [sp, #4]
 801c456:	17d9      	asrs	r1, r3, #31
 801c458:	468c      	mov	ip, r1
 801c45a:	9901      	ldr	r1, [sp, #4]
 801c45c:	458c      	cmp	ip, r1
 801c45e:	d002      	beq.n	801c466 <arm_add_q31+0x4a>
 801c460:	17cb      	asrs	r3, r1, #31
 801c462:	4909      	ldr	r1, [pc, #36]	@ (801c488 <arm_add_q31+0x6c>)
 801c464:	404b      	eors	r3, r1
 801c466:	4659      	mov	r1, fp
 801c468:	508b      	str	r3, [r1, r2]
 801c46a:	2301      	movs	r3, #1
 801c46c:	425b      	negs	r3, r3
 801c46e:	469c      	mov	ip, r3
 801c470:	44e0      	add	r8, ip
 801c472:	4643      	mov	r3, r8
 801c474:	3204      	adds	r2, #4
 801c476:	2b00      	cmp	r3, #0
 801c478:	d1de      	bne.n	801c438 <arm_add_q31+0x1c>
 801c47a:	b003      	add	sp, #12
 801c47c:	bc3c      	pop	{r2, r3, r4, r5}
 801c47e:	4690      	mov	r8, r2
 801c480:	4699      	mov	r9, r3
 801c482:	46a2      	mov	sl, r4
 801c484:	46ab      	mov	fp, r5
 801c486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c488:	7fffffff 	.word	0x7fffffff

0801c48c <atof>:
 801c48c:	b510      	push	{r4, lr}
 801c48e:	2100      	movs	r1, #0
 801c490:	f000 fe12 	bl	801d0b8 <strtod>
 801c494:	bd10      	pop	{r4, pc}

0801c496 <atoi>:
 801c496:	b510      	push	{r4, lr}
 801c498:	220a      	movs	r2, #10
 801c49a:	2100      	movs	r1, #0
 801c49c:	f000 fea4 	bl	801d1e8 <strtol>
 801c4a0:	bd10      	pop	{r4, pc}
	...

0801c4a4 <sulp>:
 801c4a4:	b570      	push	{r4, r5, r6, lr}
 801c4a6:	0016      	movs	r6, r2
 801c4a8:	000d      	movs	r5, r1
 801c4aa:	f003 fbf3 	bl	801fc94 <__ulp>
 801c4ae:	2e00      	cmp	r6, #0
 801c4b0:	d00d      	beq.n	801c4ce <sulp+0x2a>
 801c4b2:	236b      	movs	r3, #107	@ 0x6b
 801c4b4:	006a      	lsls	r2, r5, #1
 801c4b6:	0d52      	lsrs	r2, r2, #21
 801c4b8:	1a9b      	subs	r3, r3, r2
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	dd07      	ble.n	801c4ce <sulp+0x2a>
 801c4be:	2400      	movs	r4, #0
 801c4c0:	4a03      	ldr	r2, [pc, #12]	@ (801c4d0 <sulp+0x2c>)
 801c4c2:	051b      	lsls	r3, r3, #20
 801c4c4:	189d      	adds	r5, r3, r2
 801c4c6:	002b      	movs	r3, r5
 801c4c8:	0022      	movs	r2, r4
 801c4ca:	f7e6 f8b7 	bl	800263c <__aeabi_dmul>
 801c4ce:	bd70      	pop	{r4, r5, r6, pc}
 801c4d0:	3ff00000 	.word	0x3ff00000

0801c4d4 <_strtod_l>:
 801c4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4d6:	b0a3      	sub	sp, #140	@ 0x8c
 801c4d8:	921b      	str	r2, [sp, #108]	@ 0x6c
 801c4da:	2200      	movs	r2, #0
 801c4dc:	2600      	movs	r6, #0
 801c4de:	2700      	movs	r7, #0
 801c4e0:	9005      	str	r0, [sp, #20]
 801c4e2:	9109      	str	r1, [sp, #36]	@ 0x24
 801c4e4:	921e      	str	r2, [sp, #120]	@ 0x78
 801c4e6:	911d      	str	r1, [sp, #116]	@ 0x74
 801c4e8:	780a      	ldrb	r2, [r1, #0]
 801c4ea:	2a2b      	cmp	r2, #43	@ 0x2b
 801c4ec:	d053      	beq.n	801c596 <_strtod_l+0xc2>
 801c4ee:	d83f      	bhi.n	801c570 <_strtod_l+0x9c>
 801c4f0:	2a0d      	cmp	r2, #13
 801c4f2:	d839      	bhi.n	801c568 <_strtod_l+0x94>
 801c4f4:	2a08      	cmp	r2, #8
 801c4f6:	d839      	bhi.n	801c56c <_strtod_l+0x98>
 801c4f8:	2a00      	cmp	r2, #0
 801c4fa:	d042      	beq.n	801c582 <_strtod_l+0xae>
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	9212      	str	r2, [sp, #72]	@ 0x48
 801c500:	2100      	movs	r1, #0
 801c502:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801c504:	910c      	str	r1, [sp, #48]	@ 0x30
 801c506:	782a      	ldrb	r2, [r5, #0]
 801c508:	2a30      	cmp	r2, #48	@ 0x30
 801c50a:	d000      	beq.n	801c50e <_strtod_l+0x3a>
 801c50c:	e083      	b.n	801c616 <_strtod_l+0x142>
 801c50e:	786a      	ldrb	r2, [r5, #1]
 801c510:	3120      	adds	r1, #32
 801c512:	438a      	bics	r2, r1
 801c514:	2a58      	cmp	r2, #88	@ 0x58
 801c516:	d000      	beq.n	801c51a <_strtod_l+0x46>
 801c518:	e073      	b.n	801c602 <_strtod_l+0x12e>
 801c51a:	9302      	str	r3, [sp, #8]
 801c51c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c51e:	4a95      	ldr	r2, [pc, #596]	@ (801c774 <_strtod_l+0x2a0>)
 801c520:	9301      	str	r3, [sp, #4]
 801c522:	ab1e      	add	r3, sp, #120	@ 0x78
 801c524:	9300      	str	r3, [sp, #0]
 801c526:	9805      	ldr	r0, [sp, #20]
 801c528:	ab1f      	add	r3, sp, #124	@ 0x7c
 801c52a:	a91d      	add	r1, sp, #116	@ 0x74
 801c52c:	f002 fc62 	bl	801edf4 <__gethex>
 801c530:	230f      	movs	r3, #15
 801c532:	0002      	movs	r2, r0
 801c534:	401a      	ands	r2, r3
 801c536:	0004      	movs	r4, r0
 801c538:	9206      	str	r2, [sp, #24]
 801c53a:	4218      	tst	r0, r3
 801c53c:	d005      	beq.n	801c54a <_strtod_l+0x76>
 801c53e:	2a06      	cmp	r2, #6
 801c540:	d12b      	bne.n	801c59a <_strtod_l+0xc6>
 801c542:	2300      	movs	r3, #0
 801c544:	3501      	adds	r5, #1
 801c546:	951d      	str	r5, [sp, #116]	@ 0x74
 801c548:	9312      	str	r3, [sp, #72]	@ 0x48
 801c54a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d002      	beq.n	801c556 <_strtod_l+0x82>
 801c550:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c552:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c554:	6013      	str	r3, [r2, #0]
 801c556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d019      	beq.n	801c590 <_strtod_l+0xbc>
 801c55c:	2380      	movs	r3, #128	@ 0x80
 801c55e:	0030      	movs	r0, r6
 801c560:	061b      	lsls	r3, r3, #24
 801c562:	18f9      	adds	r1, r7, r3
 801c564:	b023      	add	sp, #140	@ 0x8c
 801c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c568:	2a20      	cmp	r2, #32
 801c56a:	d1c7      	bne.n	801c4fc <_strtod_l+0x28>
 801c56c:	3101      	adds	r1, #1
 801c56e:	e7ba      	b.n	801c4e6 <_strtod_l+0x12>
 801c570:	2a2d      	cmp	r2, #45	@ 0x2d
 801c572:	d1c3      	bne.n	801c4fc <_strtod_l+0x28>
 801c574:	3a2c      	subs	r2, #44	@ 0x2c
 801c576:	9212      	str	r2, [sp, #72]	@ 0x48
 801c578:	1c4a      	adds	r2, r1, #1
 801c57a:	921d      	str	r2, [sp, #116]	@ 0x74
 801c57c:	784a      	ldrb	r2, [r1, #1]
 801c57e:	2a00      	cmp	r2, #0
 801c580:	d1be      	bne.n	801c500 <_strtod_l+0x2c>
 801c582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c584:	931d      	str	r3, [sp, #116]	@ 0x74
 801c586:	2300      	movs	r3, #0
 801c588:	9312      	str	r3, [sp, #72]	@ 0x48
 801c58a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d1df      	bne.n	801c550 <_strtod_l+0x7c>
 801c590:	0030      	movs	r0, r6
 801c592:	0039      	movs	r1, r7
 801c594:	e7e6      	b.n	801c564 <_strtod_l+0x90>
 801c596:	2200      	movs	r2, #0
 801c598:	e7ed      	b.n	801c576 <_strtod_l+0xa2>
 801c59a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c59c:	2a00      	cmp	r2, #0
 801c59e:	d007      	beq.n	801c5b0 <_strtod_l+0xdc>
 801c5a0:	2135      	movs	r1, #53	@ 0x35
 801c5a2:	a820      	add	r0, sp, #128	@ 0x80
 801c5a4:	f003 fc6c 	bl	801fe80 <__copybits>
 801c5a8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801c5aa:	9805      	ldr	r0, [sp, #20]
 801c5ac:	f003 f826 	bl	801f5fc <_Bfree>
 801c5b0:	9806      	ldr	r0, [sp, #24]
 801c5b2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c5b4:	3801      	subs	r0, #1
 801c5b6:	2804      	cmp	r0, #4
 801c5b8:	d806      	bhi.n	801c5c8 <_strtod_l+0xf4>
 801c5ba:	f7e3 fddf 	bl	800017c <__gnu_thumb1_case_uqi>
 801c5be:	0312      	.short	0x0312
 801c5c0:	1e1c      	.short	0x1e1c
 801c5c2:	12          	.byte	0x12
 801c5c3:	00          	.byte	0x00
 801c5c4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c5c6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801c5c8:	05e4      	lsls	r4, r4, #23
 801c5ca:	d502      	bpl.n	801c5d2 <_strtod_l+0xfe>
 801c5cc:	2380      	movs	r3, #128	@ 0x80
 801c5ce:	061b      	lsls	r3, r3, #24
 801c5d0:	431f      	orrs	r7, r3
 801c5d2:	4b69      	ldr	r3, [pc, #420]	@ (801c778 <_strtod_l+0x2a4>)
 801c5d4:	423b      	tst	r3, r7
 801c5d6:	d1b8      	bne.n	801c54a <_strtod_l+0x76>
 801c5d8:	f001 fc90 	bl	801defc <__errno>
 801c5dc:	2322      	movs	r3, #34	@ 0x22
 801c5de:	6003      	str	r3, [r0, #0]
 801c5e0:	e7b3      	b.n	801c54a <_strtod_l+0x76>
 801c5e2:	4966      	ldr	r1, [pc, #408]	@ (801c77c <_strtod_l+0x2a8>)
 801c5e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c5e6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c5e8:	400a      	ands	r2, r1
 801c5ea:	4965      	ldr	r1, [pc, #404]	@ (801c780 <_strtod_l+0x2ac>)
 801c5ec:	185b      	adds	r3, r3, r1
 801c5ee:	051b      	lsls	r3, r3, #20
 801c5f0:	431a      	orrs	r2, r3
 801c5f2:	0017      	movs	r7, r2
 801c5f4:	e7e8      	b.n	801c5c8 <_strtod_l+0xf4>
 801c5f6:	4f60      	ldr	r7, [pc, #384]	@ (801c778 <_strtod_l+0x2a4>)
 801c5f8:	e7e6      	b.n	801c5c8 <_strtod_l+0xf4>
 801c5fa:	2601      	movs	r6, #1
 801c5fc:	4f61      	ldr	r7, [pc, #388]	@ (801c784 <_strtod_l+0x2b0>)
 801c5fe:	4276      	negs	r6, r6
 801c600:	e7e2      	b.n	801c5c8 <_strtod_l+0xf4>
 801c602:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c604:	1c5a      	adds	r2, r3, #1
 801c606:	921d      	str	r2, [sp, #116]	@ 0x74
 801c608:	785b      	ldrb	r3, [r3, #1]
 801c60a:	2b30      	cmp	r3, #48	@ 0x30
 801c60c:	d0f9      	beq.n	801c602 <_strtod_l+0x12e>
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d09b      	beq.n	801c54a <_strtod_l+0x76>
 801c612:	2301      	movs	r3, #1
 801c614:	930c      	str	r3, [sp, #48]	@ 0x30
 801c616:	2500      	movs	r5, #0
 801c618:	220a      	movs	r2, #10
 801c61a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c61c:	950d      	str	r5, [sp, #52]	@ 0x34
 801c61e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c620:	9508      	str	r5, [sp, #32]
 801c622:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c624:	7804      	ldrb	r4, [r0, #0]
 801c626:	0023      	movs	r3, r4
 801c628:	3b30      	subs	r3, #48	@ 0x30
 801c62a:	b2d9      	uxtb	r1, r3
 801c62c:	2909      	cmp	r1, #9
 801c62e:	d927      	bls.n	801c680 <_strtod_l+0x1ac>
 801c630:	2201      	movs	r2, #1
 801c632:	4955      	ldr	r1, [pc, #340]	@ (801c788 <_strtod_l+0x2b4>)
 801c634:	f001 fbd4 	bl	801dde0 <strncmp>
 801c638:	2800      	cmp	r0, #0
 801c63a:	d031      	beq.n	801c6a0 <_strtod_l+0x1cc>
 801c63c:	2000      	movs	r0, #0
 801c63e:	0023      	movs	r3, r4
 801c640:	4684      	mov	ip, r0
 801c642:	9a08      	ldr	r2, [sp, #32]
 801c644:	900e      	str	r0, [sp, #56]	@ 0x38
 801c646:	9206      	str	r2, [sp, #24]
 801c648:	2220      	movs	r2, #32
 801c64a:	0019      	movs	r1, r3
 801c64c:	4391      	bics	r1, r2
 801c64e:	000a      	movs	r2, r1
 801c650:	2100      	movs	r1, #0
 801c652:	9107      	str	r1, [sp, #28]
 801c654:	2a45      	cmp	r2, #69	@ 0x45
 801c656:	d000      	beq.n	801c65a <_strtod_l+0x186>
 801c658:	e0c0      	b.n	801c7dc <_strtod_l+0x308>
 801c65a:	9b06      	ldr	r3, [sp, #24]
 801c65c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c65e:	4303      	orrs	r3, r0
 801c660:	4313      	orrs	r3, r2
 801c662:	428b      	cmp	r3, r1
 801c664:	d08d      	beq.n	801c582 <_strtod_l+0xae>
 801c666:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c668:	9309      	str	r3, [sp, #36]	@ 0x24
 801c66a:	3301      	adds	r3, #1
 801c66c:	931d      	str	r3, [sp, #116]	@ 0x74
 801c66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c670:	785b      	ldrb	r3, [r3, #1]
 801c672:	2b2b      	cmp	r3, #43	@ 0x2b
 801c674:	d070      	beq.n	801c758 <_strtod_l+0x284>
 801c676:	000c      	movs	r4, r1
 801c678:	2b2d      	cmp	r3, #45	@ 0x2d
 801c67a:	d173      	bne.n	801c764 <_strtod_l+0x290>
 801c67c:	2401      	movs	r4, #1
 801c67e:	e06c      	b.n	801c75a <_strtod_l+0x286>
 801c680:	9908      	ldr	r1, [sp, #32]
 801c682:	2908      	cmp	r1, #8
 801c684:	dc09      	bgt.n	801c69a <_strtod_l+0x1c6>
 801c686:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c688:	4351      	muls	r1, r2
 801c68a:	185b      	adds	r3, r3, r1
 801c68c:	930d      	str	r3, [sp, #52]	@ 0x34
 801c68e:	9b08      	ldr	r3, [sp, #32]
 801c690:	3001      	adds	r0, #1
 801c692:	3301      	adds	r3, #1
 801c694:	9308      	str	r3, [sp, #32]
 801c696:	901d      	str	r0, [sp, #116]	@ 0x74
 801c698:	e7c3      	b.n	801c622 <_strtod_l+0x14e>
 801c69a:	4355      	muls	r5, r2
 801c69c:	195d      	adds	r5, r3, r5
 801c69e:	e7f6      	b.n	801c68e <_strtod_l+0x1ba>
 801c6a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c6a2:	1c5a      	adds	r2, r3, #1
 801c6a4:	921d      	str	r2, [sp, #116]	@ 0x74
 801c6a6:	9a08      	ldr	r2, [sp, #32]
 801c6a8:	785b      	ldrb	r3, [r3, #1]
 801c6aa:	2a00      	cmp	r2, #0
 801c6ac:	d03a      	beq.n	801c724 <_strtod_l+0x250>
 801c6ae:	900e      	str	r0, [sp, #56]	@ 0x38
 801c6b0:	9206      	str	r2, [sp, #24]
 801c6b2:	001a      	movs	r2, r3
 801c6b4:	3a30      	subs	r2, #48	@ 0x30
 801c6b6:	2a09      	cmp	r2, #9
 801c6b8:	d912      	bls.n	801c6e0 <_strtod_l+0x20c>
 801c6ba:	2201      	movs	r2, #1
 801c6bc:	4694      	mov	ip, r2
 801c6be:	e7c3      	b.n	801c648 <_strtod_l+0x174>
 801c6c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c6c2:	3001      	adds	r0, #1
 801c6c4:	1c5a      	adds	r2, r3, #1
 801c6c6:	921d      	str	r2, [sp, #116]	@ 0x74
 801c6c8:	785b      	ldrb	r3, [r3, #1]
 801c6ca:	2b30      	cmp	r3, #48	@ 0x30
 801c6cc:	d0f8      	beq.n	801c6c0 <_strtod_l+0x1ec>
 801c6ce:	001a      	movs	r2, r3
 801c6d0:	3a31      	subs	r2, #49	@ 0x31
 801c6d2:	2a08      	cmp	r2, #8
 801c6d4:	d83b      	bhi.n	801c74e <_strtod_l+0x27a>
 801c6d6:	900e      	str	r0, [sp, #56]	@ 0x38
 801c6d8:	2000      	movs	r0, #0
 801c6da:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801c6dc:	9006      	str	r0, [sp, #24]
 801c6de:	9213      	str	r2, [sp, #76]	@ 0x4c
 801c6e0:	001a      	movs	r2, r3
 801c6e2:	1c41      	adds	r1, r0, #1
 801c6e4:	3a30      	subs	r2, #48	@ 0x30
 801c6e6:	2b30      	cmp	r3, #48	@ 0x30
 801c6e8:	d016      	beq.n	801c718 <_strtod_l+0x244>
 801c6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c6ec:	185b      	adds	r3, r3, r1
 801c6ee:	930e      	str	r3, [sp, #56]	@ 0x38
 801c6f0:	9b06      	ldr	r3, [sp, #24]
 801c6f2:	210a      	movs	r1, #10
 801c6f4:	469c      	mov	ip, r3
 801c6f6:	4484      	add	ip, r0
 801c6f8:	459c      	cmp	ip, r3
 801c6fa:	d115      	bne.n	801c728 <_strtod_l+0x254>
 801c6fc:	9906      	ldr	r1, [sp, #24]
 801c6fe:	9b06      	ldr	r3, [sp, #24]
 801c700:	3101      	adds	r1, #1
 801c702:	1809      	adds	r1, r1, r0
 801c704:	181b      	adds	r3, r3, r0
 801c706:	9106      	str	r1, [sp, #24]
 801c708:	2b08      	cmp	r3, #8
 801c70a:	dc19      	bgt.n	801c740 <_strtod_l+0x26c>
 801c70c:	230a      	movs	r3, #10
 801c70e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c710:	434b      	muls	r3, r1
 801c712:	2100      	movs	r1, #0
 801c714:	18d3      	adds	r3, r2, r3
 801c716:	930d      	str	r3, [sp, #52]	@ 0x34
 801c718:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c71a:	0008      	movs	r0, r1
 801c71c:	1c5a      	adds	r2, r3, #1
 801c71e:	921d      	str	r2, [sp, #116]	@ 0x74
 801c720:	785b      	ldrb	r3, [r3, #1]
 801c722:	e7c6      	b.n	801c6b2 <_strtod_l+0x1de>
 801c724:	9808      	ldr	r0, [sp, #32]
 801c726:	e7d0      	b.n	801c6ca <_strtod_l+0x1f6>
 801c728:	1c5c      	adds	r4, r3, #1
 801c72a:	2b08      	cmp	r3, #8
 801c72c:	dc04      	bgt.n	801c738 <_strtod_l+0x264>
 801c72e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c730:	434b      	muls	r3, r1
 801c732:	930d      	str	r3, [sp, #52]	@ 0x34
 801c734:	0023      	movs	r3, r4
 801c736:	e7df      	b.n	801c6f8 <_strtod_l+0x224>
 801c738:	2c10      	cmp	r4, #16
 801c73a:	dcfb      	bgt.n	801c734 <_strtod_l+0x260>
 801c73c:	434d      	muls	r5, r1
 801c73e:	e7f9      	b.n	801c734 <_strtod_l+0x260>
 801c740:	2100      	movs	r1, #0
 801c742:	2b0f      	cmp	r3, #15
 801c744:	dce8      	bgt.n	801c718 <_strtod_l+0x244>
 801c746:	230a      	movs	r3, #10
 801c748:	435d      	muls	r5, r3
 801c74a:	1955      	adds	r5, r2, r5
 801c74c:	e7e4      	b.n	801c718 <_strtod_l+0x244>
 801c74e:	2200      	movs	r2, #0
 801c750:	920e      	str	r2, [sp, #56]	@ 0x38
 801c752:	9206      	str	r2, [sp, #24]
 801c754:	3201      	adds	r2, #1
 801c756:	e7b1      	b.n	801c6bc <_strtod_l+0x1e8>
 801c758:	2400      	movs	r4, #0
 801c75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c75c:	3302      	adds	r3, #2
 801c75e:	931d      	str	r3, [sp, #116]	@ 0x74
 801c760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c762:	789b      	ldrb	r3, [r3, #2]
 801c764:	001a      	movs	r2, r3
 801c766:	3a30      	subs	r2, #48	@ 0x30
 801c768:	2a09      	cmp	r2, #9
 801c76a:	d913      	bls.n	801c794 <_strtod_l+0x2c0>
 801c76c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c76e:	921d      	str	r2, [sp, #116]	@ 0x74
 801c770:	2200      	movs	r2, #0
 801c772:	e032      	b.n	801c7da <_strtod_l+0x306>
 801c774:	08022c48 	.word	0x08022c48
 801c778:	7ff00000 	.word	0x7ff00000
 801c77c:	ffefffff 	.word	0xffefffff
 801c780:	00000433 	.word	0x00000433
 801c784:	7fffffff 	.word	0x7fffffff
 801c788:	08022c30 	.word	0x08022c30
 801c78c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c78e:	1c5a      	adds	r2, r3, #1
 801c790:	921d      	str	r2, [sp, #116]	@ 0x74
 801c792:	785b      	ldrb	r3, [r3, #1]
 801c794:	2b30      	cmp	r3, #48	@ 0x30
 801c796:	d0f9      	beq.n	801c78c <_strtod_l+0x2b8>
 801c798:	2200      	movs	r2, #0
 801c79a:	9207      	str	r2, [sp, #28]
 801c79c:	001a      	movs	r2, r3
 801c79e:	3a31      	subs	r2, #49	@ 0x31
 801c7a0:	2a08      	cmp	r2, #8
 801c7a2:	d81b      	bhi.n	801c7dc <_strtod_l+0x308>
 801c7a4:	3b30      	subs	r3, #48	@ 0x30
 801c7a6:	9310      	str	r3, [sp, #64]	@ 0x40
 801c7a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c7aa:	9307      	str	r3, [sp, #28]
 801c7ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c7ae:	1c59      	adds	r1, r3, #1
 801c7b0:	911d      	str	r1, [sp, #116]	@ 0x74
 801c7b2:	785b      	ldrb	r3, [r3, #1]
 801c7b4:	001a      	movs	r2, r3
 801c7b6:	3a30      	subs	r2, #48	@ 0x30
 801c7b8:	2a09      	cmp	r2, #9
 801c7ba:	d93a      	bls.n	801c832 <_strtod_l+0x35e>
 801c7bc:	9a07      	ldr	r2, [sp, #28]
 801c7be:	1a8a      	subs	r2, r1, r2
 801c7c0:	49b4      	ldr	r1, [pc, #720]	@ (801ca94 <_strtod_l+0x5c0>)
 801c7c2:	9107      	str	r1, [sp, #28]
 801c7c4:	2a08      	cmp	r2, #8
 801c7c6:	dc04      	bgt.n	801c7d2 <_strtod_l+0x2fe>
 801c7c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c7ca:	9207      	str	r2, [sp, #28]
 801c7cc:	428a      	cmp	r2, r1
 801c7ce:	dd00      	ble.n	801c7d2 <_strtod_l+0x2fe>
 801c7d0:	9107      	str	r1, [sp, #28]
 801c7d2:	2c00      	cmp	r4, #0
 801c7d4:	d002      	beq.n	801c7dc <_strtod_l+0x308>
 801c7d6:	9a07      	ldr	r2, [sp, #28]
 801c7d8:	4252      	negs	r2, r2
 801c7da:	9207      	str	r2, [sp, #28]
 801c7dc:	9a06      	ldr	r2, [sp, #24]
 801c7de:	2a00      	cmp	r2, #0
 801c7e0:	d14d      	bne.n	801c87e <_strtod_l+0x3aa>
 801c7e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c7e4:	4310      	orrs	r0, r2
 801c7e6:	d000      	beq.n	801c7ea <_strtod_l+0x316>
 801c7e8:	e6af      	b.n	801c54a <_strtod_l+0x76>
 801c7ea:	4662      	mov	r2, ip
 801c7ec:	2a00      	cmp	r2, #0
 801c7ee:	d000      	beq.n	801c7f2 <_strtod_l+0x31e>
 801c7f0:	e6c7      	b.n	801c582 <_strtod_l+0xae>
 801c7f2:	2b69      	cmp	r3, #105	@ 0x69
 801c7f4:	d027      	beq.n	801c846 <_strtod_l+0x372>
 801c7f6:	dc23      	bgt.n	801c840 <_strtod_l+0x36c>
 801c7f8:	2b49      	cmp	r3, #73	@ 0x49
 801c7fa:	d024      	beq.n	801c846 <_strtod_l+0x372>
 801c7fc:	2b4e      	cmp	r3, #78	@ 0x4e
 801c7fe:	d000      	beq.n	801c802 <_strtod_l+0x32e>
 801c800:	e6bf      	b.n	801c582 <_strtod_l+0xae>
 801c802:	49a5      	ldr	r1, [pc, #660]	@ (801ca98 <_strtod_l+0x5c4>)
 801c804:	a81d      	add	r0, sp, #116	@ 0x74
 801c806:	f002 fd2b 	bl	801f260 <__match>
 801c80a:	2800      	cmp	r0, #0
 801c80c:	d100      	bne.n	801c810 <_strtod_l+0x33c>
 801c80e:	e6b8      	b.n	801c582 <_strtod_l+0xae>
 801c810:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c812:	781b      	ldrb	r3, [r3, #0]
 801c814:	2b28      	cmp	r3, #40	@ 0x28
 801c816:	d12c      	bne.n	801c872 <_strtod_l+0x39e>
 801c818:	49a0      	ldr	r1, [pc, #640]	@ (801ca9c <_strtod_l+0x5c8>)
 801c81a:	aa20      	add	r2, sp, #128	@ 0x80
 801c81c:	a81d      	add	r0, sp, #116	@ 0x74
 801c81e:	f002 fd33 	bl	801f288 <__hexnan>
 801c822:	2805      	cmp	r0, #5
 801c824:	d125      	bne.n	801c872 <_strtod_l+0x39e>
 801c826:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c828:	4a9d      	ldr	r2, [pc, #628]	@ (801caa0 <_strtod_l+0x5cc>)
 801c82a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c82c:	431a      	orrs	r2, r3
 801c82e:	0017      	movs	r7, r2
 801c830:	e68b      	b.n	801c54a <_strtod_l+0x76>
 801c832:	220a      	movs	r2, #10
 801c834:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c836:	434a      	muls	r2, r1
 801c838:	18d2      	adds	r2, r2, r3
 801c83a:	3a30      	subs	r2, #48	@ 0x30
 801c83c:	9210      	str	r2, [sp, #64]	@ 0x40
 801c83e:	e7b5      	b.n	801c7ac <_strtod_l+0x2d8>
 801c840:	2b6e      	cmp	r3, #110	@ 0x6e
 801c842:	d0de      	beq.n	801c802 <_strtod_l+0x32e>
 801c844:	e69d      	b.n	801c582 <_strtod_l+0xae>
 801c846:	4997      	ldr	r1, [pc, #604]	@ (801caa4 <_strtod_l+0x5d0>)
 801c848:	a81d      	add	r0, sp, #116	@ 0x74
 801c84a:	f002 fd09 	bl	801f260 <__match>
 801c84e:	2800      	cmp	r0, #0
 801c850:	d100      	bne.n	801c854 <_strtod_l+0x380>
 801c852:	e696      	b.n	801c582 <_strtod_l+0xae>
 801c854:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c856:	4994      	ldr	r1, [pc, #592]	@ (801caa8 <_strtod_l+0x5d4>)
 801c858:	3b01      	subs	r3, #1
 801c85a:	a81d      	add	r0, sp, #116	@ 0x74
 801c85c:	931d      	str	r3, [sp, #116]	@ 0x74
 801c85e:	f002 fcff 	bl	801f260 <__match>
 801c862:	2800      	cmp	r0, #0
 801c864:	d102      	bne.n	801c86c <_strtod_l+0x398>
 801c866:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c868:	3301      	adds	r3, #1
 801c86a:	931d      	str	r3, [sp, #116]	@ 0x74
 801c86c:	2600      	movs	r6, #0
 801c86e:	4f8c      	ldr	r7, [pc, #560]	@ (801caa0 <_strtod_l+0x5cc>)
 801c870:	e66b      	b.n	801c54a <_strtod_l+0x76>
 801c872:	488e      	ldr	r0, [pc, #568]	@ (801caac <_strtod_l+0x5d8>)
 801c874:	f001 fb84 	bl	801df80 <nan>
 801c878:	0006      	movs	r6, r0
 801c87a:	000f      	movs	r7, r1
 801c87c:	e665      	b.n	801c54a <_strtod_l+0x76>
 801c87e:	9b07      	ldr	r3, [sp, #28]
 801c880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c882:	1a9b      	subs	r3, r3, r2
 801c884:	930c      	str	r3, [sp, #48]	@ 0x30
 801c886:	9b08      	ldr	r3, [sp, #32]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d101      	bne.n	801c890 <_strtod_l+0x3bc>
 801c88c:	9b06      	ldr	r3, [sp, #24]
 801c88e:	9308      	str	r3, [sp, #32]
 801c890:	9c06      	ldr	r4, [sp, #24]
 801c892:	2c10      	cmp	r4, #16
 801c894:	dd00      	ble.n	801c898 <_strtod_l+0x3c4>
 801c896:	2410      	movs	r4, #16
 801c898:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c89a:	f7e6 fdbf 	bl	800341c <__aeabi_ui2d>
 801c89e:	9b06      	ldr	r3, [sp, #24]
 801c8a0:	0006      	movs	r6, r0
 801c8a2:	000f      	movs	r7, r1
 801c8a4:	2b09      	cmp	r3, #9
 801c8a6:	dc13      	bgt.n	801c8d0 <_strtod_l+0x3fc>
 801c8a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d100      	bne.n	801c8b0 <_strtod_l+0x3dc>
 801c8ae:	e64c      	b.n	801c54a <_strtod_l+0x76>
 801c8b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	dc00      	bgt.n	801c8b8 <_strtod_l+0x3e4>
 801c8b6:	e07e      	b.n	801c9b6 <_strtod_l+0x4e2>
 801c8b8:	2b16      	cmp	r3, #22
 801c8ba:	dc63      	bgt.n	801c984 <_strtod_l+0x4b0>
 801c8bc:	497c      	ldr	r1, [pc, #496]	@ (801cab0 <_strtod_l+0x5dc>)
 801c8be:	00db      	lsls	r3, r3, #3
 801c8c0:	18c9      	adds	r1, r1, r3
 801c8c2:	0032      	movs	r2, r6
 801c8c4:	6808      	ldr	r0, [r1, #0]
 801c8c6:	6849      	ldr	r1, [r1, #4]
 801c8c8:	003b      	movs	r3, r7
 801c8ca:	f7e5 feb7 	bl	800263c <__aeabi_dmul>
 801c8ce:	e7d3      	b.n	801c878 <_strtod_l+0x3a4>
 801c8d0:	0022      	movs	r2, r4
 801c8d2:	4b77      	ldr	r3, [pc, #476]	@ (801cab0 <_strtod_l+0x5dc>)
 801c8d4:	3a09      	subs	r2, #9
 801c8d6:	00d2      	lsls	r2, r2, #3
 801c8d8:	189b      	adds	r3, r3, r2
 801c8da:	681a      	ldr	r2, [r3, #0]
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	f7e5 fead 	bl	800263c <__aeabi_dmul>
 801c8e2:	0006      	movs	r6, r0
 801c8e4:	0028      	movs	r0, r5
 801c8e6:	000f      	movs	r7, r1
 801c8e8:	f7e6 fd98 	bl	800341c <__aeabi_ui2d>
 801c8ec:	000b      	movs	r3, r1
 801c8ee:	0002      	movs	r2, r0
 801c8f0:	0039      	movs	r1, r7
 801c8f2:	0030      	movs	r0, r6
 801c8f4:	f7e4 fefa 	bl	80016ec <__aeabi_dadd>
 801c8f8:	9b06      	ldr	r3, [sp, #24]
 801c8fa:	0006      	movs	r6, r0
 801c8fc:	000f      	movs	r7, r1
 801c8fe:	2b0f      	cmp	r3, #15
 801c900:	ddd2      	ble.n	801c8a8 <_strtod_l+0x3d4>
 801c902:	9b06      	ldr	r3, [sp, #24]
 801c904:	1b1c      	subs	r4, r3, r4
 801c906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c908:	18e4      	adds	r4, r4, r3
 801c90a:	2c00      	cmp	r4, #0
 801c90c:	dc00      	bgt.n	801c910 <_strtod_l+0x43c>
 801c90e:	e09b      	b.n	801ca48 <_strtod_l+0x574>
 801c910:	220f      	movs	r2, #15
 801c912:	0023      	movs	r3, r4
 801c914:	4013      	ands	r3, r2
 801c916:	4214      	tst	r4, r2
 801c918:	d00a      	beq.n	801c930 <_strtod_l+0x45c>
 801c91a:	4965      	ldr	r1, [pc, #404]	@ (801cab0 <_strtod_l+0x5dc>)
 801c91c:	00db      	lsls	r3, r3, #3
 801c91e:	18c9      	adds	r1, r1, r3
 801c920:	0032      	movs	r2, r6
 801c922:	6808      	ldr	r0, [r1, #0]
 801c924:	6849      	ldr	r1, [r1, #4]
 801c926:	003b      	movs	r3, r7
 801c928:	f7e5 fe88 	bl	800263c <__aeabi_dmul>
 801c92c:	0006      	movs	r6, r0
 801c92e:	000f      	movs	r7, r1
 801c930:	230f      	movs	r3, #15
 801c932:	439c      	bics	r4, r3
 801c934:	d073      	beq.n	801ca1e <_strtod_l+0x54a>
 801c936:	3326      	adds	r3, #38	@ 0x26
 801c938:	33ff      	adds	r3, #255	@ 0xff
 801c93a:	429c      	cmp	r4, r3
 801c93c:	dd4b      	ble.n	801c9d6 <_strtod_l+0x502>
 801c93e:	2300      	movs	r3, #0
 801c940:	9306      	str	r3, [sp, #24]
 801c942:	9307      	str	r3, [sp, #28]
 801c944:	930d      	str	r3, [sp, #52]	@ 0x34
 801c946:	9308      	str	r3, [sp, #32]
 801c948:	2322      	movs	r3, #34	@ 0x22
 801c94a:	2600      	movs	r6, #0
 801c94c:	9a05      	ldr	r2, [sp, #20]
 801c94e:	4f54      	ldr	r7, [pc, #336]	@ (801caa0 <_strtod_l+0x5cc>)
 801c950:	6013      	str	r3, [r2, #0]
 801c952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c954:	42b3      	cmp	r3, r6
 801c956:	d100      	bne.n	801c95a <_strtod_l+0x486>
 801c958:	e5f7      	b.n	801c54a <_strtod_l+0x76>
 801c95a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801c95c:	9805      	ldr	r0, [sp, #20]
 801c95e:	f002 fe4d 	bl	801f5fc <_Bfree>
 801c962:	9908      	ldr	r1, [sp, #32]
 801c964:	9805      	ldr	r0, [sp, #20]
 801c966:	f002 fe49 	bl	801f5fc <_Bfree>
 801c96a:	9907      	ldr	r1, [sp, #28]
 801c96c:	9805      	ldr	r0, [sp, #20]
 801c96e:	f002 fe45 	bl	801f5fc <_Bfree>
 801c972:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c974:	9805      	ldr	r0, [sp, #20]
 801c976:	f002 fe41 	bl	801f5fc <_Bfree>
 801c97a:	9906      	ldr	r1, [sp, #24]
 801c97c:	9805      	ldr	r0, [sp, #20]
 801c97e:	f002 fe3d 	bl	801f5fc <_Bfree>
 801c982:	e5e2      	b.n	801c54a <_strtod_l+0x76>
 801c984:	2325      	movs	r3, #37	@ 0x25
 801c986:	9a06      	ldr	r2, [sp, #24]
 801c988:	1a9b      	subs	r3, r3, r2
 801c98a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c98c:	4293      	cmp	r3, r2
 801c98e:	dbb8      	blt.n	801c902 <_strtod_l+0x42e>
 801c990:	240f      	movs	r4, #15
 801c992:	9b06      	ldr	r3, [sp, #24]
 801c994:	4d46      	ldr	r5, [pc, #280]	@ (801cab0 <_strtod_l+0x5dc>)
 801c996:	1ae4      	subs	r4, r4, r3
 801c998:	00e1      	lsls	r1, r4, #3
 801c99a:	1869      	adds	r1, r5, r1
 801c99c:	0032      	movs	r2, r6
 801c99e:	6808      	ldr	r0, [r1, #0]
 801c9a0:	6849      	ldr	r1, [r1, #4]
 801c9a2:	003b      	movs	r3, r7
 801c9a4:	f7e5 fe4a 	bl	800263c <__aeabi_dmul>
 801c9a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c9aa:	1b1c      	subs	r4, r3, r4
 801c9ac:	00e4      	lsls	r4, r4, #3
 801c9ae:	192d      	adds	r5, r5, r4
 801c9b0:	682a      	ldr	r2, [r5, #0]
 801c9b2:	686b      	ldr	r3, [r5, #4]
 801c9b4:	e789      	b.n	801c8ca <_strtod_l+0x3f6>
 801c9b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c9b8:	3316      	adds	r3, #22
 801c9ba:	dba2      	blt.n	801c902 <_strtod_l+0x42e>
 801c9bc:	9907      	ldr	r1, [sp, #28]
 801c9be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c9c0:	4b3b      	ldr	r3, [pc, #236]	@ (801cab0 <_strtod_l+0x5dc>)
 801c9c2:	1a52      	subs	r2, r2, r1
 801c9c4:	00d2      	lsls	r2, r2, #3
 801c9c6:	189b      	adds	r3, r3, r2
 801c9c8:	0030      	movs	r0, r6
 801c9ca:	681a      	ldr	r2, [r3, #0]
 801c9cc:	685b      	ldr	r3, [r3, #4]
 801c9ce:	0039      	movs	r1, r7
 801c9d0:	f7e5 f9f0 	bl	8001db4 <__aeabi_ddiv>
 801c9d4:	e750      	b.n	801c878 <_strtod_l+0x3a4>
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	0030      	movs	r0, r6
 801c9da:	0039      	movs	r1, r7
 801c9dc:	4d35      	ldr	r5, [pc, #212]	@ (801cab4 <_strtod_l+0x5e0>)
 801c9de:	1124      	asrs	r4, r4, #4
 801c9e0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9e2:	2c01      	cmp	r4, #1
 801c9e4:	dc1e      	bgt.n	801ca24 <_strtod_l+0x550>
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d001      	beq.n	801c9ee <_strtod_l+0x51a>
 801c9ea:	0006      	movs	r6, r0
 801c9ec:	000f      	movs	r7, r1
 801c9ee:	4b32      	ldr	r3, [pc, #200]	@ (801cab8 <_strtod_l+0x5e4>)
 801c9f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c9f2:	18ff      	adds	r7, r7, r3
 801c9f4:	4b2f      	ldr	r3, [pc, #188]	@ (801cab4 <_strtod_l+0x5e0>)
 801c9f6:	00d5      	lsls	r5, r2, #3
 801c9f8:	195d      	adds	r5, r3, r5
 801c9fa:	0032      	movs	r2, r6
 801c9fc:	6828      	ldr	r0, [r5, #0]
 801c9fe:	6869      	ldr	r1, [r5, #4]
 801ca00:	003b      	movs	r3, r7
 801ca02:	f7e5 fe1b 	bl	800263c <__aeabi_dmul>
 801ca06:	4b26      	ldr	r3, [pc, #152]	@ (801caa0 <_strtod_l+0x5cc>)
 801ca08:	4a2c      	ldr	r2, [pc, #176]	@ (801cabc <_strtod_l+0x5e8>)
 801ca0a:	0006      	movs	r6, r0
 801ca0c:	400b      	ands	r3, r1
 801ca0e:	4293      	cmp	r3, r2
 801ca10:	d895      	bhi.n	801c93e <_strtod_l+0x46a>
 801ca12:	4a2b      	ldr	r2, [pc, #172]	@ (801cac0 <_strtod_l+0x5ec>)
 801ca14:	4293      	cmp	r3, r2
 801ca16:	d913      	bls.n	801ca40 <_strtod_l+0x56c>
 801ca18:	2601      	movs	r6, #1
 801ca1a:	4f2a      	ldr	r7, [pc, #168]	@ (801cac4 <_strtod_l+0x5f0>)
 801ca1c:	4276      	negs	r6, r6
 801ca1e:	2300      	movs	r3, #0
 801ca20:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca22:	e086      	b.n	801cb32 <_strtod_l+0x65e>
 801ca24:	2201      	movs	r2, #1
 801ca26:	4214      	tst	r4, r2
 801ca28:	d004      	beq.n	801ca34 <_strtod_l+0x560>
 801ca2a:	682a      	ldr	r2, [r5, #0]
 801ca2c:	686b      	ldr	r3, [r5, #4]
 801ca2e:	f7e5 fe05 	bl	800263c <__aeabi_dmul>
 801ca32:	2301      	movs	r3, #1
 801ca34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca36:	1064      	asrs	r4, r4, #1
 801ca38:	3201      	adds	r2, #1
 801ca3a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca3c:	3508      	adds	r5, #8
 801ca3e:	e7d0      	b.n	801c9e2 <_strtod_l+0x50e>
 801ca40:	23d4      	movs	r3, #212	@ 0xd4
 801ca42:	049b      	lsls	r3, r3, #18
 801ca44:	18cf      	adds	r7, r1, r3
 801ca46:	e7ea      	b.n	801ca1e <_strtod_l+0x54a>
 801ca48:	2c00      	cmp	r4, #0
 801ca4a:	d0e8      	beq.n	801ca1e <_strtod_l+0x54a>
 801ca4c:	4264      	negs	r4, r4
 801ca4e:	230f      	movs	r3, #15
 801ca50:	0022      	movs	r2, r4
 801ca52:	401a      	ands	r2, r3
 801ca54:	421c      	tst	r4, r3
 801ca56:	d00a      	beq.n	801ca6e <_strtod_l+0x59a>
 801ca58:	4b15      	ldr	r3, [pc, #84]	@ (801cab0 <_strtod_l+0x5dc>)
 801ca5a:	00d2      	lsls	r2, r2, #3
 801ca5c:	189b      	adds	r3, r3, r2
 801ca5e:	0030      	movs	r0, r6
 801ca60:	681a      	ldr	r2, [r3, #0]
 801ca62:	685b      	ldr	r3, [r3, #4]
 801ca64:	0039      	movs	r1, r7
 801ca66:	f7e5 f9a5 	bl	8001db4 <__aeabi_ddiv>
 801ca6a:	0006      	movs	r6, r0
 801ca6c:	000f      	movs	r7, r1
 801ca6e:	1124      	asrs	r4, r4, #4
 801ca70:	d0d5      	beq.n	801ca1e <_strtod_l+0x54a>
 801ca72:	2c1f      	cmp	r4, #31
 801ca74:	dd28      	ble.n	801cac8 <_strtod_l+0x5f4>
 801ca76:	2300      	movs	r3, #0
 801ca78:	9306      	str	r3, [sp, #24]
 801ca7a:	9307      	str	r3, [sp, #28]
 801ca7c:	930d      	str	r3, [sp, #52]	@ 0x34
 801ca7e:	9308      	str	r3, [sp, #32]
 801ca80:	2322      	movs	r3, #34	@ 0x22
 801ca82:	9a05      	ldr	r2, [sp, #20]
 801ca84:	2600      	movs	r6, #0
 801ca86:	6013      	str	r3, [r2, #0]
 801ca88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca8a:	2700      	movs	r7, #0
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d000      	beq.n	801ca92 <_strtod_l+0x5be>
 801ca90:	e763      	b.n	801c95a <_strtod_l+0x486>
 801ca92:	e55a      	b.n	801c54a <_strtod_l+0x76>
 801ca94:	00004e1f 	.word	0x00004e1f
 801ca98:	08022d96 	.word	0x08022d96
 801ca9c:	08022c34 	.word	0x08022c34
 801caa0:	7ff00000 	.word	0x7ff00000
 801caa4:	08022d8e 	.word	0x08022d8e
 801caa8:	08022dc8 	.word	0x08022dc8
 801caac:	08023054 	.word	0x08023054
 801cab0:	08022f40 	.word	0x08022f40
 801cab4:	08022f18 	.word	0x08022f18
 801cab8:	fcb00000 	.word	0xfcb00000
 801cabc:	7ca00000 	.word	0x7ca00000
 801cac0:	7c900000 	.word	0x7c900000
 801cac4:	7fefffff 	.word	0x7fefffff
 801cac8:	2310      	movs	r3, #16
 801caca:	0022      	movs	r2, r4
 801cacc:	401a      	ands	r2, r3
 801cace:	9209      	str	r2, [sp, #36]	@ 0x24
 801cad0:	421c      	tst	r4, r3
 801cad2:	d001      	beq.n	801cad8 <_strtod_l+0x604>
 801cad4:	335a      	adds	r3, #90	@ 0x5a
 801cad6:	9309      	str	r3, [sp, #36]	@ 0x24
 801cad8:	0030      	movs	r0, r6
 801cada:	0039      	movs	r1, r7
 801cadc:	2300      	movs	r3, #0
 801cade:	4dbf      	ldr	r5, [pc, #764]	@ (801cddc <_strtod_l+0x908>)
 801cae0:	2201      	movs	r2, #1
 801cae2:	4214      	tst	r4, r2
 801cae4:	d004      	beq.n	801caf0 <_strtod_l+0x61c>
 801cae6:	682a      	ldr	r2, [r5, #0]
 801cae8:	686b      	ldr	r3, [r5, #4]
 801caea:	f7e5 fda7 	bl	800263c <__aeabi_dmul>
 801caee:	2301      	movs	r3, #1
 801caf0:	1064      	asrs	r4, r4, #1
 801caf2:	3508      	adds	r5, #8
 801caf4:	2c00      	cmp	r4, #0
 801caf6:	d1f3      	bne.n	801cae0 <_strtod_l+0x60c>
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d001      	beq.n	801cb00 <_strtod_l+0x62c>
 801cafc:	0006      	movs	r6, r0
 801cafe:	000f      	movs	r7, r1
 801cb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d00d      	beq.n	801cb22 <_strtod_l+0x64e>
 801cb06:	236b      	movs	r3, #107	@ 0x6b
 801cb08:	007a      	lsls	r2, r7, #1
 801cb0a:	0d52      	lsrs	r2, r2, #21
 801cb0c:	0039      	movs	r1, r7
 801cb0e:	1a9b      	subs	r3, r3, r2
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	dd06      	ble.n	801cb22 <_strtod_l+0x64e>
 801cb14:	2b1f      	cmp	r3, #31
 801cb16:	dd5a      	ble.n	801cbce <_strtod_l+0x6fa>
 801cb18:	2600      	movs	r6, #0
 801cb1a:	2b34      	cmp	r3, #52	@ 0x34
 801cb1c:	dd50      	ble.n	801cbc0 <_strtod_l+0x6ec>
 801cb1e:	27dc      	movs	r7, #220	@ 0xdc
 801cb20:	04bf      	lsls	r7, r7, #18
 801cb22:	2200      	movs	r2, #0
 801cb24:	2300      	movs	r3, #0
 801cb26:	0030      	movs	r0, r6
 801cb28:	0039      	movs	r1, r7
 801cb2a:	f7e3 fcc1 	bl	80004b0 <__aeabi_dcmpeq>
 801cb2e:	2800      	cmp	r0, #0
 801cb30:	d1a1      	bne.n	801ca76 <_strtod_l+0x5a2>
 801cb32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb34:	9a08      	ldr	r2, [sp, #32]
 801cb36:	9300      	str	r3, [sp, #0]
 801cb38:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cb3a:	9b06      	ldr	r3, [sp, #24]
 801cb3c:	9805      	ldr	r0, [sp, #20]
 801cb3e:	f002 fdc5 	bl	801f6cc <__s2b>
 801cb42:	900d      	str	r0, [sp, #52]	@ 0x34
 801cb44:	2800      	cmp	r0, #0
 801cb46:	d100      	bne.n	801cb4a <_strtod_l+0x676>
 801cb48:	e6f9      	b.n	801c93e <_strtod_l+0x46a>
 801cb4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb4c:	9907      	ldr	r1, [sp, #28]
 801cb4e:	17da      	asrs	r2, r3, #31
 801cb50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb52:	1a5b      	subs	r3, r3, r1
 801cb54:	401a      	ands	r2, r3
 801cb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb58:	9217      	str	r2, [sp, #92]	@ 0x5c
 801cb5a:	43db      	mvns	r3, r3
 801cb5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cb5e:	17db      	asrs	r3, r3, #31
 801cb60:	401a      	ands	r2, r3
 801cb62:	2300      	movs	r3, #0
 801cb64:	921a      	str	r2, [sp, #104]	@ 0x68
 801cb66:	9306      	str	r3, [sp, #24]
 801cb68:	9307      	str	r3, [sp, #28]
 801cb6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb6c:	9805      	ldr	r0, [sp, #20]
 801cb6e:	6859      	ldr	r1, [r3, #4]
 801cb70:	f002 fd00 	bl	801f574 <_Balloc>
 801cb74:	9008      	str	r0, [sp, #32]
 801cb76:	2800      	cmp	r0, #0
 801cb78:	d100      	bne.n	801cb7c <_strtod_l+0x6a8>
 801cb7a:	e6e5      	b.n	801c948 <_strtod_l+0x474>
 801cb7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb7e:	300c      	adds	r0, #12
 801cb80:	0019      	movs	r1, r3
 801cb82:	691a      	ldr	r2, [r3, #16]
 801cb84:	310c      	adds	r1, #12
 801cb86:	3202      	adds	r2, #2
 801cb88:	0092      	lsls	r2, r2, #2
 801cb8a:	f001 f9ef 	bl	801df6c <memcpy>
 801cb8e:	ab20      	add	r3, sp, #128	@ 0x80
 801cb90:	9301      	str	r3, [sp, #4]
 801cb92:	ab1f      	add	r3, sp, #124	@ 0x7c
 801cb94:	9300      	str	r3, [sp, #0]
 801cb96:	0032      	movs	r2, r6
 801cb98:	003b      	movs	r3, r7
 801cb9a:	9805      	ldr	r0, [sp, #20]
 801cb9c:	9610      	str	r6, [sp, #64]	@ 0x40
 801cb9e:	9711      	str	r7, [sp, #68]	@ 0x44
 801cba0:	f003 f8e4 	bl	801fd6c <__d2b>
 801cba4:	901e      	str	r0, [sp, #120]	@ 0x78
 801cba6:	2800      	cmp	r0, #0
 801cba8:	d100      	bne.n	801cbac <_strtod_l+0x6d8>
 801cbaa:	e6cd      	b.n	801c948 <_strtod_l+0x474>
 801cbac:	2101      	movs	r1, #1
 801cbae:	9805      	ldr	r0, [sp, #20]
 801cbb0:	f002 fe28 	bl	801f804 <__i2b>
 801cbb4:	9007      	str	r0, [sp, #28]
 801cbb6:	2800      	cmp	r0, #0
 801cbb8:	d10e      	bne.n	801cbd8 <_strtod_l+0x704>
 801cbba:	2300      	movs	r3, #0
 801cbbc:	9307      	str	r3, [sp, #28]
 801cbbe:	e6c3      	b.n	801c948 <_strtod_l+0x474>
 801cbc0:	234b      	movs	r3, #75	@ 0x4b
 801cbc2:	1a9a      	subs	r2, r3, r2
 801cbc4:	3b4c      	subs	r3, #76	@ 0x4c
 801cbc6:	4093      	lsls	r3, r2
 801cbc8:	4019      	ands	r1, r3
 801cbca:	000f      	movs	r7, r1
 801cbcc:	e7a9      	b.n	801cb22 <_strtod_l+0x64e>
 801cbce:	2201      	movs	r2, #1
 801cbd0:	4252      	negs	r2, r2
 801cbd2:	409a      	lsls	r2, r3
 801cbd4:	4016      	ands	r6, r2
 801cbd6:	e7a4      	b.n	801cb22 <_strtod_l+0x64e>
 801cbd8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cbda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cbdc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801cbde:	1ad4      	subs	r4, r2, r3
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	db01      	blt.n	801cbe8 <_strtod_l+0x714>
 801cbe4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801cbe6:	195d      	adds	r5, r3, r5
 801cbe8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cbea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cbec:	1a5b      	subs	r3, r3, r1
 801cbee:	2136      	movs	r1, #54	@ 0x36
 801cbf0:	189b      	adds	r3, r3, r2
 801cbf2:	1a8a      	subs	r2, r1, r2
 801cbf4:	497a      	ldr	r1, [pc, #488]	@ (801cde0 <_strtod_l+0x90c>)
 801cbf6:	2001      	movs	r0, #1
 801cbf8:	468c      	mov	ip, r1
 801cbfa:	2100      	movs	r1, #0
 801cbfc:	3b01      	subs	r3, #1
 801cbfe:	9116      	str	r1, [sp, #88]	@ 0x58
 801cc00:	9014      	str	r0, [sp, #80]	@ 0x50
 801cc02:	4563      	cmp	r3, ip
 801cc04:	da06      	bge.n	801cc14 <_strtod_l+0x740>
 801cc06:	4661      	mov	r1, ip
 801cc08:	1ac9      	subs	r1, r1, r3
 801cc0a:	1a52      	subs	r2, r2, r1
 801cc0c:	291f      	cmp	r1, #31
 801cc0e:	dc3f      	bgt.n	801cc90 <_strtod_l+0x7bc>
 801cc10:	4088      	lsls	r0, r1
 801cc12:	9014      	str	r0, [sp, #80]	@ 0x50
 801cc14:	18ab      	adds	r3, r5, r2
 801cc16:	930e      	str	r3, [sp, #56]	@ 0x38
 801cc18:	18a4      	adds	r4, r4, r2
 801cc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cc1e:	191c      	adds	r4, r3, r4
 801cc20:	002b      	movs	r3, r5
 801cc22:	4295      	cmp	r5, r2
 801cc24:	dd00      	ble.n	801cc28 <_strtod_l+0x754>
 801cc26:	0013      	movs	r3, r2
 801cc28:	42a3      	cmp	r3, r4
 801cc2a:	dd00      	ble.n	801cc2e <_strtod_l+0x75a>
 801cc2c:	0023      	movs	r3, r4
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	dd04      	ble.n	801cc3c <_strtod_l+0x768>
 801cc32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cc34:	1ae4      	subs	r4, r4, r3
 801cc36:	1ad2      	subs	r2, r2, r3
 801cc38:	920e      	str	r2, [sp, #56]	@ 0x38
 801cc3a:	1aed      	subs	r5, r5, r3
 801cc3c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	dd16      	ble.n	801cc70 <_strtod_l+0x79c>
 801cc42:	001a      	movs	r2, r3
 801cc44:	9907      	ldr	r1, [sp, #28]
 801cc46:	9805      	ldr	r0, [sp, #20]
 801cc48:	f002 fea6 	bl	801f998 <__pow5mult>
 801cc4c:	9007      	str	r0, [sp, #28]
 801cc4e:	2800      	cmp	r0, #0
 801cc50:	d0b3      	beq.n	801cbba <_strtod_l+0x6e6>
 801cc52:	0001      	movs	r1, r0
 801cc54:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801cc56:	9805      	ldr	r0, [sp, #20]
 801cc58:	f002 fdec 	bl	801f834 <__multiply>
 801cc5c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801cc5e:	2800      	cmp	r0, #0
 801cc60:	d100      	bne.n	801cc64 <_strtod_l+0x790>
 801cc62:	e671      	b.n	801c948 <_strtod_l+0x474>
 801cc64:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801cc66:	9805      	ldr	r0, [sp, #20]
 801cc68:	f002 fcc8 	bl	801f5fc <_Bfree>
 801cc6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cc6e:	931e      	str	r3, [sp, #120]	@ 0x78
 801cc70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	dc12      	bgt.n	801cc9c <_strtod_l+0x7c8>
 801cc76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	dd18      	ble.n	801ccae <_strtod_l+0x7da>
 801cc7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cc7e:	9908      	ldr	r1, [sp, #32]
 801cc80:	9805      	ldr	r0, [sp, #20]
 801cc82:	f002 fe89 	bl	801f998 <__pow5mult>
 801cc86:	9008      	str	r0, [sp, #32]
 801cc88:	2800      	cmp	r0, #0
 801cc8a:	d110      	bne.n	801ccae <_strtod_l+0x7da>
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	e65a      	b.n	801c946 <_strtod_l+0x472>
 801cc90:	4954      	ldr	r1, [pc, #336]	@ (801cde4 <_strtod_l+0x910>)
 801cc92:	1acb      	subs	r3, r1, r3
 801cc94:	0001      	movs	r1, r0
 801cc96:	4099      	lsls	r1, r3
 801cc98:	9116      	str	r1, [sp, #88]	@ 0x58
 801cc9a:	e7ba      	b.n	801cc12 <_strtod_l+0x73e>
 801cc9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cc9e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801cca0:	9805      	ldr	r0, [sp, #20]
 801cca2:	f002 fed5 	bl	801fa50 <__lshift>
 801cca6:	901e      	str	r0, [sp, #120]	@ 0x78
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	d1e4      	bne.n	801cc76 <_strtod_l+0x7a2>
 801ccac:	e64c      	b.n	801c948 <_strtod_l+0x474>
 801ccae:	2c00      	cmp	r4, #0
 801ccb0:	dd07      	ble.n	801ccc2 <_strtod_l+0x7ee>
 801ccb2:	0022      	movs	r2, r4
 801ccb4:	9908      	ldr	r1, [sp, #32]
 801ccb6:	9805      	ldr	r0, [sp, #20]
 801ccb8:	f002 feca 	bl	801fa50 <__lshift>
 801ccbc:	9008      	str	r0, [sp, #32]
 801ccbe:	2800      	cmp	r0, #0
 801ccc0:	d0e4      	beq.n	801cc8c <_strtod_l+0x7b8>
 801ccc2:	2d00      	cmp	r5, #0
 801ccc4:	dd08      	ble.n	801ccd8 <_strtod_l+0x804>
 801ccc6:	002a      	movs	r2, r5
 801ccc8:	9907      	ldr	r1, [sp, #28]
 801ccca:	9805      	ldr	r0, [sp, #20]
 801cccc:	f002 fec0 	bl	801fa50 <__lshift>
 801ccd0:	9007      	str	r0, [sp, #28]
 801ccd2:	2800      	cmp	r0, #0
 801ccd4:	d100      	bne.n	801ccd8 <_strtod_l+0x804>
 801ccd6:	e637      	b.n	801c948 <_strtod_l+0x474>
 801ccd8:	9a08      	ldr	r2, [sp, #32]
 801ccda:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ccdc:	9805      	ldr	r0, [sp, #20]
 801ccde:	f002 ff3f 	bl	801fb60 <__mdiff>
 801cce2:	9006      	str	r0, [sp, #24]
 801cce4:	2800      	cmp	r0, #0
 801cce6:	d100      	bne.n	801ccea <_strtod_l+0x816>
 801cce8:	e62e      	b.n	801c948 <_strtod_l+0x474>
 801ccea:	68c3      	ldr	r3, [r0, #12]
 801ccec:	9907      	ldr	r1, [sp, #28]
 801ccee:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	60c3      	str	r3, [r0, #12]
 801ccf4:	f002 ff18 	bl	801fb28 <__mcmp>
 801ccf8:	2800      	cmp	r0, #0
 801ccfa:	da3b      	bge.n	801cd74 <_strtod_l+0x8a0>
 801ccfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ccfe:	4333      	orrs	r3, r6
 801cd00:	d167      	bne.n	801cdd2 <_strtod_l+0x8fe>
 801cd02:	033b      	lsls	r3, r7, #12
 801cd04:	d165      	bne.n	801cdd2 <_strtod_l+0x8fe>
 801cd06:	22d6      	movs	r2, #214	@ 0xd6
 801cd08:	4b37      	ldr	r3, [pc, #220]	@ (801cde8 <_strtod_l+0x914>)
 801cd0a:	04d2      	lsls	r2, r2, #19
 801cd0c:	403b      	ands	r3, r7
 801cd0e:	4293      	cmp	r3, r2
 801cd10:	d95f      	bls.n	801cdd2 <_strtod_l+0x8fe>
 801cd12:	9b06      	ldr	r3, [sp, #24]
 801cd14:	695b      	ldr	r3, [r3, #20]
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d103      	bne.n	801cd22 <_strtod_l+0x84e>
 801cd1a:	9b06      	ldr	r3, [sp, #24]
 801cd1c:	691b      	ldr	r3, [r3, #16]
 801cd1e:	2b01      	cmp	r3, #1
 801cd20:	dd57      	ble.n	801cdd2 <_strtod_l+0x8fe>
 801cd22:	9906      	ldr	r1, [sp, #24]
 801cd24:	2201      	movs	r2, #1
 801cd26:	9805      	ldr	r0, [sp, #20]
 801cd28:	f002 fe92 	bl	801fa50 <__lshift>
 801cd2c:	9907      	ldr	r1, [sp, #28]
 801cd2e:	9006      	str	r0, [sp, #24]
 801cd30:	f002 fefa 	bl	801fb28 <__mcmp>
 801cd34:	2800      	cmp	r0, #0
 801cd36:	dd4c      	ble.n	801cdd2 <_strtod_l+0x8fe>
 801cd38:	4b2b      	ldr	r3, [pc, #172]	@ (801cde8 <_strtod_l+0x914>)
 801cd3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd3c:	403b      	ands	r3, r7
 801cd3e:	2a00      	cmp	r2, #0
 801cd40:	d074      	beq.n	801ce2c <_strtod_l+0x958>
 801cd42:	22d6      	movs	r2, #214	@ 0xd6
 801cd44:	04d2      	lsls	r2, r2, #19
 801cd46:	4293      	cmp	r3, r2
 801cd48:	d870      	bhi.n	801ce2c <_strtod_l+0x958>
 801cd4a:	22dc      	movs	r2, #220	@ 0xdc
 801cd4c:	0492      	lsls	r2, r2, #18
 801cd4e:	4293      	cmp	r3, r2
 801cd50:	d800      	bhi.n	801cd54 <_strtod_l+0x880>
 801cd52:	e695      	b.n	801ca80 <_strtod_l+0x5ac>
 801cd54:	0030      	movs	r0, r6
 801cd56:	0039      	movs	r1, r7
 801cd58:	4b24      	ldr	r3, [pc, #144]	@ (801cdec <_strtod_l+0x918>)
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	f7e5 fc6e 	bl	800263c <__aeabi_dmul>
 801cd60:	4b21      	ldr	r3, [pc, #132]	@ (801cde8 <_strtod_l+0x914>)
 801cd62:	0006      	movs	r6, r0
 801cd64:	000f      	movs	r7, r1
 801cd66:	420b      	tst	r3, r1
 801cd68:	d000      	beq.n	801cd6c <_strtod_l+0x898>
 801cd6a:	e5f6      	b.n	801c95a <_strtod_l+0x486>
 801cd6c:	2322      	movs	r3, #34	@ 0x22
 801cd6e:	9a05      	ldr	r2, [sp, #20]
 801cd70:	6013      	str	r3, [r2, #0]
 801cd72:	e5f2      	b.n	801c95a <_strtod_l+0x486>
 801cd74:	970e      	str	r7, [sp, #56]	@ 0x38
 801cd76:	2800      	cmp	r0, #0
 801cd78:	d175      	bne.n	801ce66 <_strtod_l+0x992>
 801cd7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cd7c:	033b      	lsls	r3, r7, #12
 801cd7e:	0b1b      	lsrs	r3, r3, #12
 801cd80:	2a00      	cmp	r2, #0
 801cd82:	d039      	beq.n	801cdf8 <_strtod_l+0x924>
 801cd84:	4a1a      	ldr	r2, [pc, #104]	@ (801cdf0 <_strtod_l+0x91c>)
 801cd86:	4293      	cmp	r3, r2
 801cd88:	d138      	bne.n	801cdfc <_strtod_l+0x928>
 801cd8a:	2101      	movs	r1, #1
 801cd8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd8e:	4249      	negs	r1, r1
 801cd90:	0032      	movs	r2, r6
 801cd92:	0008      	movs	r0, r1
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d00b      	beq.n	801cdb0 <_strtod_l+0x8dc>
 801cd98:	24d4      	movs	r4, #212	@ 0xd4
 801cd9a:	4b13      	ldr	r3, [pc, #76]	@ (801cde8 <_strtod_l+0x914>)
 801cd9c:	0008      	movs	r0, r1
 801cd9e:	403b      	ands	r3, r7
 801cda0:	04e4      	lsls	r4, r4, #19
 801cda2:	42a3      	cmp	r3, r4
 801cda4:	d804      	bhi.n	801cdb0 <_strtod_l+0x8dc>
 801cda6:	306c      	adds	r0, #108	@ 0x6c
 801cda8:	0d1b      	lsrs	r3, r3, #20
 801cdaa:	1ac3      	subs	r3, r0, r3
 801cdac:	4099      	lsls	r1, r3
 801cdae:	0008      	movs	r0, r1
 801cdb0:	4282      	cmp	r2, r0
 801cdb2:	d123      	bne.n	801cdfc <_strtod_l+0x928>
 801cdb4:	4b0f      	ldr	r3, [pc, #60]	@ (801cdf4 <_strtod_l+0x920>)
 801cdb6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801cdb8:	4299      	cmp	r1, r3
 801cdba:	d102      	bne.n	801cdc2 <_strtod_l+0x8ee>
 801cdbc:	3201      	adds	r2, #1
 801cdbe:	d100      	bne.n	801cdc2 <_strtod_l+0x8ee>
 801cdc0:	e5c2      	b.n	801c948 <_strtod_l+0x474>
 801cdc2:	4b09      	ldr	r3, [pc, #36]	@ (801cde8 <_strtod_l+0x914>)
 801cdc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cdc6:	2600      	movs	r6, #0
 801cdc8:	401a      	ands	r2, r3
 801cdca:	0013      	movs	r3, r2
 801cdcc:	2280      	movs	r2, #128	@ 0x80
 801cdce:	0352      	lsls	r2, r2, #13
 801cdd0:	189f      	adds	r7, r3, r2
 801cdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d1bd      	bne.n	801cd54 <_strtod_l+0x880>
 801cdd8:	e5bf      	b.n	801c95a <_strtod_l+0x486>
 801cdda:	46c0      	nop			@ (mov r8, r8)
 801cddc:	08022c60 	.word	0x08022c60
 801cde0:	fffffc02 	.word	0xfffffc02
 801cde4:	fffffbe2 	.word	0xfffffbe2
 801cde8:	7ff00000 	.word	0x7ff00000
 801cdec:	39500000 	.word	0x39500000
 801cdf0:	000fffff 	.word	0x000fffff
 801cdf4:	7fefffff 	.word	0x7fefffff
 801cdf8:	4333      	orrs	r3, r6
 801cdfa:	d09d      	beq.n	801cd38 <_strtod_l+0x864>
 801cdfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d01c      	beq.n	801ce3c <_strtod_l+0x968>
 801ce02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ce06:	4213      	tst	r3, r2
 801ce08:	d0e3      	beq.n	801cdd2 <_strtod_l+0x8fe>
 801ce0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ce0c:	0030      	movs	r0, r6
 801ce0e:	0039      	movs	r1, r7
 801ce10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d016      	beq.n	801ce44 <_strtod_l+0x970>
 801ce16:	f7ff fb45 	bl	801c4a4 <sulp>
 801ce1a:	0002      	movs	r2, r0
 801ce1c:	000b      	movs	r3, r1
 801ce1e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ce20:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ce22:	f7e4 fc63 	bl	80016ec <__aeabi_dadd>
 801ce26:	0006      	movs	r6, r0
 801ce28:	000f      	movs	r7, r1
 801ce2a:	e7d2      	b.n	801cdd2 <_strtod_l+0x8fe>
 801ce2c:	2601      	movs	r6, #1
 801ce2e:	4a92      	ldr	r2, [pc, #584]	@ (801d078 <_strtod_l+0xba4>)
 801ce30:	4276      	negs	r6, r6
 801ce32:	189b      	adds	r3, r3, r2
 801ce34:	4a91      	ldr	r2, [pc, #580]	@ (801d07c <_strtod_l+0xba8>)
 801ce36:	431a      	orrs	r2, r3
 801ce38:	0017      	movs	r7, r2
 801ce3a:	e7ca      	b.n	801cdd2 <_strtod_l+0x8fe>
 801ce3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ce3e:	4233      	tst	r3, r6
 801ce40:	d0c7      	beq.n	801cdd2 <_strtod_l+0x8fe>
 801ce42:	e7e2      	b.n	801ce0a <_strtod_l+0x936>
 801ce44:	f7ff fb2e 	bl	801c4a4 <sulp>
 801ce48:	0002      	movs	r2, r0
 801ce4a:	000b      	movs	r3, r1
 801ce4c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ce4e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ce50:	f7e5 febc 	bl	8002bcc <__aeabi_dsub>
 801ce54:	2200      	movs	r2, #0
 801ce56:	2300      	movs	r3, #0
 801ce58:	0006      	movs	r6, r0
 801ce5a:	000f      	movs	r7, r1
 801ce5c:	f7e3 fb28 	bl	80004b0 <__aeabi_dcmpeq>
 801ce60:	2800      	cmp	r0, #0
 801ce62:	d0b6      	beq.n	801cdd2 <_strtod_l+0x8fe>
 801ce64:	e60c      	b.n	801ca80 <_strtod_l+0x5ac>
 801ce66:	9907      	ldr	r1, [sp, #28]
 801ce68:	9806      	ldr	r0, [sp, #24]
 801ce6a:	f002 ffdf 	bl	801fe2c <__ratio>
 801ce6e:	2380      	movs	r3, #128	@ 0x80
 801ce70:	2200      	movs	r2, #0
 801ce72:	05db      	lsls	r3, r3, #23
 801ce74:	0004      	movs	r4, r0
 801ce76:	000d      	movs	r5, r1
 801ce78:	f7e3 fb2a 	bl	80004d0 <__aeabi_dcmple>
 801ce7c:	2800      	cmp	r0, #0
 801ce7e:	d06c      	beq.n	801cf5a <_strtod_l+0xa86>
 801ce80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d177      	bne.n	801cf76 <_strtod_l+0xaa2>
 801ce86:	2e00      	cmp	r6, #0
 801ce88:	d157      	bne.n	801cf3a <_strtod_l+0xa66>
 801ce8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce8c:	031b      	lsls	r3, r3, #12
 801ce8e:	d15a      	bne.n	801cf46 <_strtod_l+0xa72>
 801ce90:	2200      	movs	r2, #0
 801ce92:	0020      	movs	r0, r4
 801ce94:	0029      	movs	r1, r5
 801ce96:	4b7a      	ldr	r3, [pc, #488]	@ (801d080 <_strtod_l+0xbac>)
 801ce98:	f7e3 fb10 	bl	80004bc <__aeabi_dcmplt>
 801ce9c:	2800      	cmp	r0, #0
 801ce9e:	d159      	bne.n	801cf54 <_strtod_l+0xa80>
 801cea0:	0020      	movs	r0, r4
 801cea2:	0029      	movs	r1, r5
 801cea4:	2200      	movs	r2, #0
 801cea6:	4b77      	ldr	r3, [pc, #476]	@ (801d084 <_strtod_l+0xbb0>)
 801cea8:	f7e5 fbc8 	bl	800263c <__aeabi_dmul>
 801ceac:	0004      	movs	r4, r0
 801ceae:	000d      	movs	r5, r1
 801ceb0:	2380      	movs	r3, #128	@ 0x80
 801ceb2:	061b      	lsls	r3, r3, #24
 801ceb4:	18eb      	adds	r3, r5, r3
 801ceb6:	940a      	str	r4, [sp, #40]	@ 0x28
 801ceb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ceba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cebe:	9214      	str	r2, [sp, #80]	@ 0x50
 801cec0:	9315      	str	r3, [sp, #84]	@ 0x54
 801cec2:	4a71      	ldr	r2, [pc, #452]	@ (801d088 <_strtod_l+0xbb4>)
 801cec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cec6:	4013      	ands	r3, r2
 801cec8:	9316      	str	r3, [sp, #88]	@ 0x58
 801ceca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cecc:	4b6f      	ldr	r3, [pc, #444]	@ (801d08c <_strtod_l+0xbb8>)
 801cece:	429a      	cmp	r2, r3
 801ced0:	d000      	beq.n	801ced4 <_strtod_l+0xa00>
 801ced2:	e087      	b.n	801cfe4 <_strtod_l+0xb10>
 801ced4:	4a6e      	ldr	r2, [pc, #440]	@ (801d090 <_strtod_l+0xbbc>)
 801ced6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ced8:	4694      	mov	ip, r2
 801ceda:	4463      	add	r3, ip
 801cedc:	001f      	movs	r7, r3
 801cede:	0030      	movs	r0, r6
 801cee0:	0019      	movs	r1, r3
 801cee2:	f002 fed7 	bl	801fc94 <__ulp>
 801cee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ceea:	f7e5 fba7 	bl	800263c <__aeabi_dmul>
 801ceee:	0032      	movs	r2, r6
 801cef0:	003b      	movs	r3, r7
 801cef2:	f7e4 fbfb 	bl	80016ec <__aeabi_dadd>
 801cef6:	4a64      	ldr	r2, [pc, #400]	@ (801d088 <_strtod_l+0xbb4>)
 801cef8:	4b66      	ldr	r3, [pc, #408]	@ (801d094 <_strtod_l+0xbc0>)
 801cefa:	0006      	movs	r6, r0
 801cefc:	400a      	ands	r2, r1
 801cefe:	429a      	cmp	r2, r3
 801cf00:	d940      	bls.n	801cf84 <_strtod_l+0xab0>
 801cf02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cf04:	4a64      	ldr	r2, [pc, #400]	@ (801d098 <_strtod_l+0xbc4>)
 801cf06:	4293      	cmp	r3, r2
 801cf08:	d103      	bne.n	801cf12 <_strtod_l+0xa3e>
 801cf0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf0c:	3301      	adds	r3, #1
 801cf0e:	d100      	bne.n	801cf12 <_strtod_l+0xa3e>
 801cf10:	e51a      	b.n	801c948 <_strtod_l+0x474>
 801cf12:	2601      	movs	r6, #1
 801cf14:	4f60      	ldr	r7, [pc, #384]	@ (801d098 <_strtod_l+0xbc4>)
 801cf16:	4276      	negs	r6, r6
 801cf18:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801cf1a:	9805      	ldr	r0, [sp, #20]
 801cf1c:	f002 fb6e 	bl	801f5fc <_Bfree>
 801cf20:	9908      	ldr	r1, [sp, #32]
 801cf22:	9805      	ldr	r0, [sp, #20]
 801cf24:	f002 fb6a 	bl	801f5fc <_Bfree>
 801cf28:	9907      	ldr	r1, [sp, #28]
 801cf2a:	9805      	ldr	r0, [sp, #20]
 801cf2c:	f002 fb66 	bl	801f5fc <_Bfree>
 801cf30:	9906      	ldr	r1, [sp, #24]
 801cf32:	9805      	ldr	r0, [sp, #20]
 801cf34:	f002 fb62 	bl	801f5fc <_Bfree>
 801cf38:	e617      	b.n	801cb6a <_strtod_l+0x696>
 801cf3a:	2e01      	cmp	r6, #1
 801cf3c:	d103      	bne.n	801cf46 <_strtod_l+0xa72>
 801cf3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d100      	bne.n	801cf46 <_strtod_l+0xa72>
 801cf44:	e59c      	b.n	801ca80 <_strtod_l+0x5ac>
 801cf46:	2300      	movs	r3, #0
 801cf48:	4c54      	ldr	r4, [pc, #336]	@ (801d09c <_strtod_l+0xbc8>)
 801cf4a:	4d4d      	ldr	r5, [pc, #308]	@ (801d080 <_strtod_l+0xbac>)
 801cf4c:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cf50:	2400      	movs	r4, #0
 801cf52:	e7b2      	b.n	801ceba <_strtod_l+0x9e6>
 801cf54:	2400      	movs	r4, #0
 801cf56:	4d4b      	ldr	r5, [pc, #300]	@ (801d084 <_strtod_l+0xbb0>)
 801cf58:	e7aa      	b.n	801ceb0 <_strtod_l+0x9dc>
 801cf5a:	0020      	movs	r0, r4
 801cf5c:	0029      	movs	r1, r5
 801cf5e:	4b49      	ldr	r3, [pc, #292]	@ (801d084 <_strtod_l+0xbb0>)
 801cf60:	2200      	movs	r2, #0
 801cf62:	f7e5 fb6b 	bl	800263c <__aeabi_dmul>
 801cf66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cf68:	0004      	movs	r4, r0
 801cf6a:	000d      	movs	r5, r1
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d09f      	beq.n	801ceb0 <_strtod_l+0x9dc>
 801cf70:	940a      	str	r4, [sp, #40]	@ 0x28
 801cf72:	950b      	str	r5, [sp, #44]	@ 0x2c
 801cf74:	e7a1      	b.n	801ceba <_strtod_l+0x9e6>
 801cf76:	2300      	movs	r3, #0
 801cf78:	4c41      	ldr	r4, [pc, #260]	@ (801d080 <_strtod_l+0xbac>)
 801cf7a:	0025      	movs	r5, r4
 801cf7c:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cf80:	001c      	movs	r4, r3
 801cf82:	e79a      	b.n	801ceba <_strtod_l+0x9e6>
 801cf84:	23d4      	movs	r3, #212	@ 0xd4
 801cf86:	049b      	lsls	r3, r3, #18
 801cf88:	18cf      	adds	r7, r1, r3
 801cf8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf8c:	9710      	str	r7, [sp, #64]	@ 0x40
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d1c2      	bne.n	801cf18 <_strtod_l+0xa44>
 801cf92:	4b3d      	ldr	r3, [pc, #244]	@ (801d088 <_strtod_l+0xbb4>)
 801cf94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cf96:	403b      	ands	r3, r7
 801cf98:	429a      	cmp	r2, r3
 801cf9a:	d1bd      	bne.n	801cf18 <_strtod_l+0xa44>
 801cf9c:	0020      	movs	r0, r4
 801cf9e:	0029      	movs	r1, r5
 801cfa0:	f7e3 fb72 	bl	8000688 <__aeabi_d2lz>
 801cfa4:	f7e3 fbaa 	bl	80006fc <__aeabi_l2d>
 801cfa8:	0002      	movs	r2, r0
 801cfaa:	000b      	movs	r3, r1
 801cfac:	0020      	movs	r0, r4
 801cfae:	0029      	movs	r1, r5
 801cfb0:	f7e5 fe0c 	bl	8002bcc <__aeabi_dsub>
 801cfb4:	033c      	lsls	r4, r7, #12
 801cfb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cfb8:	0b24      	lsrs	r4, r4, #12
 801cfba:	4334      	orrs	r4, r6
 801cfbc:	900e      	str	r0, [sp, #56]	@ 0x38
 801cfbe:	910f      	str	r1, [sp, #60]	@ 0x3c
 801cfc0:	4a37      	ldr	r2, [pc, #220]	@ (801d0a0 <_strtod_l+0xbcc>)
 801cfc2:	431c      	orrs	r4, r3
 801cfc4:	d052      	beq.n	801d06c <_strtod_l+0xb98>
 801cfc6:	4b37      	ldr	r3, [pc, #220]	@ (801d0a4 <_strtod_l+0xbd0>)
 801cfc8:	f7e3 fa78 	bl	80004bc <__aeabi_dcmplt>
 801cfcc:	2800      	cmp	r0, #0
 801cfce:	d000      	beq.n	801cfd2 <_strtod_l+0xafe>
 801cfd0:	e4c3      	b.n	801c95a <_strtod_l+0x486>
 801cfd2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801cfd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801cfd6:	4a34      	ldr	r2, [pc, #208]	@ (801d0a8 <_strtod_l+0xbd4>)
 801cfd8:	4b2a      	ldr	r3, [pc, #168]	@ (801d084 <_strtod_l+0xbb0>)
 801cfda:	f7e3 fa83 	bl	80004e4 <__aeabi_dcmpgt>
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	d09a      	beq.n	801cf18 <_strtod_l+0xa44>
 801cfe2:	e4ba      	b.n	801c95a <_strtod_l+0x486>
 801cfe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d02a      	beq.n	801d040 <_strtod_l+0xb6c>
 801cfea:	23d4      	movs	r3, #212	@ 0xd4
 801cfec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cfee:	04db      	lsls	r3, r3, #19
 801cff0:	429a      	cmp	r2, r3
 801cff2:	d825      	bhi.n	801d040 <_strtod_l+0xb6c>
 801cff4:	0020      	movs	r0, r4
 801cff6:	0029      	movs	r1, r5
 801cff8:	4a2c      	ldr	r2, [pc, #176]	@ (801d0ac <_strtod_l+0xbd8>)
 801cffa:	4b2d      	ldr	r3, [pc, #180]	@ (801d0b0 <_strtod_l+0xbdc>)
 801cffc:	f7e3 fa68 	bl	80004d0 <__aeabi_dcmple>
 801d000:	2800      	cmp	r0, #0
 801d002:	d016      	beq.n	801d032 <_strtod_l+0xb5e>
 801d004:	0020      	movs	r0, r4
 801d006:	0029      	movs	r1, r5
 801d008:	f7e3 fb20 	bl	800064c <__aeabi_d2uiz>
 801d00c:	2800      	cmp	r0, #0
 801d00e:	d100      	bne.n	801d012 <_strtod_l+0xb3e>
 801d010:	3001      	adds	r0, #1
 801d012:	f7e6 fa03 	bl	800341c <__aeabi_ui2d>
 801d016:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d018:	0004      	movs	r4, r0
 801d01a:	000d      	movs	r5, r1
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d122      	bne.n	801d066 <_strtod_l+0xb92>
 801d020:	2380      	movs	r3, #128	@ 0x80
 801d022:	061b      	lsls	r3, r3, #24
 801d024:	18cb      	adds	r3, r1, r3
 801d026:	9018      	str	r0, [sp, #96]	@ 0x60
 801d028:	9319      	str	r3, [sp, #100]	@ 0x64
 801d02a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d02c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d02e:	9214      	str	r2, [sp, #80]	@ 0x50
 801d030:	9315      	str	r3, [sp, #84]	@ 0x54
 801d032:	22d6      	movs	r2, #214	@ 0xd6
 801d034:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d036:	04d2      	lsls	r2, r2, #19
 801d038:	189b      	adds	r3, r3, r2
 801d03a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d03c:	1a9b      	subs	r3, r3, r2
 801d03e:	9315      	str	r3, [sp, #84]	@ 0x54
 801d040:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d042:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d044:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d046:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801d048:	f002 fe24 	bl	801fc94 <__ulp>
 801d04c:	0002      	movs	r2, r0
 801d04e:	000b      	movs	r3, r1
 801d050:	0030      	movs	r0, r6
 801d052:	0039      	movs	r1, r7
 801d054:	f7e5 faf2 	bl	800263c <__aeabi_dmul>
 801d058:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d05a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d05c:	f7e4 fb46 	bl	80016ec <__aeabi_dadd>
 801d060:	0006      	movs	r6, r0
 801d062:	000f      	movs	r7, r1
 801d064:	e791      	b.n	801cf8a <_strtod_l+0xab6>
 801d066:	9418      	str	r4, [sp, #96]	@ 0x60
 801d068:	9519      	str	r5, [sp, #100]	@ 0x64
 801d06a:	e7de      	b.n	801d02a <_strtod_l+0xb56>
 801d06c:	4b11      	ldr	r3, [pc, #68]	@ (801d0b4 <_strtod_l+0xbe0>)
 801d06e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d070:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d072:	f7e3 fa23 	bl	80004bc <__aeabi_dcmplt>
 801d076:	e7b2      	b.n	801cfde <_strtod_l+0xb0a>
 801d078:	fff00000 	.word	0xfff00000
 801d07c:	000fffff 	.word	0x000fffff
 801d080:	3ff00000 	.word	0x3ff00000
 801d084:	3fe00000 	.word	0x3fe00000
 801d088:	7ff00000 	.word	0x7ff00000
 801d08c:	7fe00000 	.word	0x7fe00000
 801d090:	fcb00000 	.word	0xfcb00000
 801d094:	7c9fffff 	.word	0x7c9fffff
 801d098:	7fefffff 	.word	0x7fefffff
 801d09c:	bff00000 	.word	0xbff00000
 801d0a0:	94a03595 	.word	0x94a03595
 801d0a4:	3fdfffff 	.word	0x3fdfffff
 801d0a8:	35afe535 	.word	0x35afe535
 801d0ac:	ffc00000 	.word	0xffc00000
 801d0b0:	41dfffff 	.word	0x41dfffff
 801d0b4:	3fcfffff 	.word	0x3fcfffff

0801d0b8 <strtod>:
 801d0b8:	b510      	push	{r4, lr}
 801d0ba:	4c04      	ldr	r4, [pc, #16]	@ (801d0cc <strtod+0x14>)
 801d0bc:	000a      	movs	r2, r1
 801d0be:	0001      	movs	r1, r0
 801d0c0:	4b03      	ldr	r3, [pc, #12]	@ (801d0d0 <strtod+0x18>)
 801d0c2:	6820      	ldr	r0, [r4, #0]
 801d0c4:	f7ff fa06 	bl	801c4d4 <_strtod_l>
 801d0c8:	bd10      	pop	{r4, pc}
 801d0ca:	46c0      	nop			@ (mov r8, r8)
 801d0cc:	200003c8 	.word	0x200003c8
 801d0d0:	2000025c 	.word	0x2000025c

0801d0d4 <_strtol_l.constprop.0>:
 801d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0d6:	b085      	sub	sp, #20
 801d0d8:	0017      	movs	r7, r2
 801d0da:	001e      	movs	r6, r3
 801d0dc:	9003      	str	r0, [sp, #12]
 801d0de:	9101      	str	r1, [sp, #4]
 801d0e0:	2b24      	cmp	r3, #36	@ 0x24
 801d0e2:	d844      	bhi.n	801d16e <_strtol_l.constprop.0+0x9a>
 801d0e4:	000c      	movs	r4, r1
 801d0e6:	2b01      	cmp	r3, #1
 801d0e8:	d041      	beq.n	801d16e <_strtol_l.constprop.0+0x9a>
 801d0ea:	4b3d      	ldr	r3, [pc, #244]	@ (801d1e0 <_strtol_l.constprop.0+0x10c>)
 801d0ec:	2208      	movs	r2, #8
 801d0ee:	469c      	mov	ip, r3
 801d0f0:	0023      	movs	r3, r4
 801d0f2:	4661      	mov	r1, ip
 801d0f4:	781d      	ldrb	r5, [r3, #0]
 801d0f6:	3401      	adds	r4, #1
 801d0f8:	5d48      	ldrb	r0, [r1, r5]
 801d0fa:	0001      	movs	r1, r0
 801d0fc:	4011      	ands	r1, r2
 801d0fe:	4210      	tst	r0, r2
 801d100:	d1f6      	bne.n	801d0f0 <_strtol_l.constprop.0+0x1c>
 801d102:	2d2d      	cmp	r5, #45	@ 0x2d
 801d104:	d13a      	bne.n	801d17c <_strtol_l.constprop.0+0xa8>
 801d106:	7825      	ldrb	r5, [r4, #0]
 801d108:	1c9c      	adds	r4, r3, #2
 801d10a:	2301      	movs	r3, #1
 801d10c:	9300      	str	r3, [sp, #0]
 801d10e:	2210      	movs	r2, #16
 801d110:	0033      	movs	r3, r6
 801d112:	4393      	bics	r3, r2
 801d114:	d109      	bne.n	801d12a <_strtol_l.constprop.0+0x56>
 801d116:	2d30      	cmp	r5, #48	@ 0x30
 801d118:	d136      	bne.n	801d188 <_strtol_l.constprop.0+0xb4>
 801d11a:	2120      	movs	r1, #32
 801d11c:	7823      	ldrb	r3, [r4, #0]
 801d11e:	438b      	bics	r3, r1
 801d120:	2b58      	cmp	r3, #88	@ 0x58
 801d122:	d131      	bne.n	801d188 <_strtol_l.constprop.0+0xb4>
 801d124:	0016      	movs	r6, r2
 801d126:	7865      	ldrb	r5, [r4, #1]
 801d128:	3402      	adds	r4, #2
 801d12a:	4a2e      	ldr	r2, [pc, #184]	@ (801d1e4 <_strtol_l.constprop.0+0x110>)
 801d12c:	9b00      	ldr	r3, [sp, #0]
 801d12e:	4694      	mov	ip, r2
 801d130:	4463      	add	r3, ip
 801d132:	0031      	movs	r1, r6
 801d134:	0018      	movs	r0, r3
 801d136:	9302      	str	r3, [sp, #8]
 801d138:	f7e3 f8ba 	bl	80002b0 <__aeabi_uidivmod>
 801d13c:	2200      	movs	r2, #0
 801d13e:	4684      	mov	ip, r0
 801d140:	0010      	movs	r0, r2
 801d142:	002b      	movs	r3, r5
 801d144:	3b30      	subs	r3, #48	@ 0x30
 801d146:	2b09      	cmp	r3, #9
 801d148:	d825      	bhi.n	801d196 <_strtol_l.constprop.0+0xc2>
 801d14a:	001d      	movs	r5, r3
 801d14c:	42ae      	cmp	r6, r5
 801d14e:	dd31      	ble.n	801d1b4 <_strtol_l.constprop.0+0xe0>
 801d150:	1c53      	adds	r3, r2, #1
 801d152:	d009      	beq.n	801d168 <_strtol_l.constprop.0+0x94>
 801d154:	2201      	movs	r2, #1
 801d156:	4252      	negs	r2, r2
 801d158:	4584      	cmp	ip, r0
 801d15a:	d305      	bcc.n	801d168 <_strtol_l.constprop.0+0x94>
 801d15c:	d101      	bne.n	801d162 <_strtol_l.constprop.0+0x8e>
 801d15e:	42a9      	cmp	r1, r5
 801d160:	db25      	blt.n	801d1ae <_strtol_l.constprop.0+0xda>
 801d162:	2201      	movs	r2, #1
 801d164:	4370      	muls	r0, r6
 801d166:	1828      	adds	r0, r5, r0
 801d168:	7825      	ldrb	r5, [r4, #0]
 801d16a:	3401      	adds	r4, #1
 801d16c:	e7e9      	b.n	801d142 <_strtol_l.constprop.0+0x6e>
 801d16e:	f000 fec5 	bl	801defc <__errno>
 801d172:	2316      	movs	r3, #22
 801d174:	6003      	str	r3, [r0, #0]
 801d176:	2000      	movs	r0, #0
 801d178:	b005      	add	sp, #20
 801d17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d17c:	9100      	str	r1, [sp, #0]
 801d17e:	2d2b      	cmp	r5, #43	@ 0x2b
 801d180:	d1c5      	bne.n	801d10e <_strtol_l.constprop.0+0x3a>
 801d182:	7825      	ldrb	r5, [r4, #0]
 801d184:	1c9c      	adds	r4, r3, #2
 801d186:	e7c2      	b.n	801d10e <_strtol_l.constprop.0+0x3a>
 801d188:	2e00      	cmp	r6, #0
 801d18a:	d1ce      	bne.n	801d12a <_strtol_l.constprop.0+0x56>
 801d18c:	3608      	adds	r6, #8
 801d18e:	2d30      	cmp	r5, #48	@ 0x30
 801d190:	d0cb      	beq.n	801d12a <_strtol_l.constprop.0+0x56>
 801d192:	3602      	adds	r6, #2
 801d194:	e7c9      	b.n	801d12a <_strtol_l.constprop.0+0x56>
 801d196:	002b      	movs	r3, r5
 801d198:	3b41      	subs	r3, #65	@ 0x41
 801d19a:	2b19      	cmp	r3, #25
 801d19c:	d801      	bhi.n	801d1a2 <_strtol_l.constprop.0+0xce>
 801d19e:	3d37      	subs	r5, #55	@ 0x37
 801d1a0:	e7d4      	b.n	801d14c <_strtol_l.constprop.0+0x78>
 801d1a2:	002b      	movs	r3, r5
 801d1a4:	3b61      	subs	r3, #97	@ 0x61
 801d1a6:	2b19      	cmp	r3, #25
 801d1a8:	d804      	bhi.n	801d1b4 <_strtol_l.constprop.0+0xe0>
 801d1aa:	3d57      	subs	r5, #87	@ 0x57
 801d1ac:	e7ce      	b.n	801d14c <_strtol_l.constprop.0+0x78>
 801d1ae:	2201      	movs	r2, #1
 801d1b0:	4252      	negs	r2, r2
 801d1b2:	e7d9      	b.n	801d168 <_strtol_l.constprop.0+0x94>
 801d1b4:	1c53      	adds	r3, r2, #1
 801d1b6:	d108      	bne.n	801d1ca <_strtol_l.constprop.0+0xf6>
 801d1b8:	2322      	movs	r3, #34	@ 0x22
 801d1ba:	9a03      	ldr	r2, [sp, #12]
 801d1bc:	9802      	ldr	r0, [sp, #8]
 801d1be:	6013      	str	r3, [r2, #0]
 801d1c0:	2f00      	cmp	r7, #0
 801d1c2:	d0d9      	beq.n	801d178 <_strtol_l.constprop.0+0xa4>
 801d1c4:	1e63      	subs	r3, r4, #1
 801d1c6:	9301      	str	r3, [sp, #4]
 801d1c8:	e007      	b.n	801d1da <_strtol_l.constprop.0+0x106>
 801d1ca:	9b00      	ldr	r3, [sp, #0]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d000      	beq.n	801d1d2 <_strtol_l.constprop.0+0xfe>
 801d1d0:	4240      	negs	r0, r0
 801d1d2:	2f00      	cmp	r7, #0
 801d1d4:	d0d0      	beq.n	801d178 <_strtol_l.constprop.0+0xa4>
 801d1d6:	2a00      	cmp	r2, #0
 801d1d8:	d1f4      	bne.n	801d1c4 <_strtol_l.constprop.0+0xf0>
 801d1da:	9b01      	ldr	r3, [sp, #4]
 801d1dc:	603b      	str	r3, [r7, #0]
 801d1de:	e7cb      	b.n	801d178 <_strtol_l.constprop.0+0xa4>
 801d1e0:	08022c89 	.word	0x08022c89
 801d1e4:	7fffffff 	.word	0x7fffffff

0801d1e8 <strtol>:
 801d1e8:	b510      	push	{r4, lr}
 801d1ea:	4c04      	ldr	r4, [pc, #16]	@ (801d1fc <strtol+0x14>)
 801d1ec:	0013      	movs	r3, r2
 801d1ee:	000a      	movs	r2, r1
 801d1f0:	0001      	movs	r1, r0
 801d1f2:	6820      	ldr	r0, [r4, #0]
 801d1f4:	f7ff ff6e 	bl	801d0d4 <_strtol_l.constprop.0>
 801d1f8:	bd10      	pop	{r4, pc}
 801d1fa:	46c0      	nop			@ (mov r8, r8)
 801d1fc:	200003c8 	.word	0x200003c8

0801d200 <__cvt>:
 801d200:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d202:	001f      	movs	r7, r3
 801d204:	2300      	movs	r3, #0
 801d206:	0016      	movs	r6, r2
 801d208:	b08b      	sub	sp, #44	@ 0x2c
 801d20a:	429f      	cmp	r7, r3
 801d20c:	da04      	bge.n	801d218 <__cvt+0x18>
 801d20e:	2180      	movs	r1, #128	@ 0x80
 801d210:	0609      	lsls	r1, r1, #24
 801d212:	187b      	adds	r3, r7, r1
 801d214:	001f      	movs	r7, r3
 801d216:	232d      	movs	r3, #45	@ 0x2d
 801d218:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d21a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d21c:	7013      	strb	r3, [r2, #0]
 801d21e:	2320      	movs	r3, #32
 801d220:	2203      	movs	r2, #3
 801d222:	439d      	bics	r5, r3
 801d224:	2d46      	cmp	r5, #70	@ 0x46
 801d226:	d007      	beq.n	801d238 <__cvt+0x38>
 801d228:	002b      	movs	r3, r5
 801d22a:	3b45      	subs	r3, #69	@ 0x45
 801d22c:	4259      	negs	r1, r3
 801d22e:	414b      	adcs	r3, r1
 801d230:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d232:	3a01      	subs	r2, #1
 801d234:	18cb      	adds	r3, r1, r3
 801d236:	9310      	str	r3, [sp, #64]	@ 0x40
 801d238:	ab09      	add	r3, sp, #36	@ 0x24
 801d23a:	9304      	str	r3, [sp, #16]
 801d23c:	ab08      	add	r3, sp, #32
 801d23e:	9303      	str	r3, [sp, #12]
 801d240:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d242:	9200      	str	r2, [sp, #0]
 801d244:	9302      	str	r3, [sp, #8]
 801d246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d248:	0032      	movs	r2, r6
 801d24a:	9301      	str	r3, [sp, #4]
 801d24c:	003b      	movs	r3, r7
 801d24e:	f000 ff2b 	bl	801e0a8 <_dtoa_r>
 801d252:	0004      	movs	r4, r0
 801d254:	2d47      	cmp	r5, #71	@ 0x47
 801d256:	d11b      	bne.n	801d290 <__cvt+0x90>
 801d258:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d25a:	07db      	lsls	r3, r3, #31
 801d25c:	d511      	bpl.n	801d282 <__cvt+0x82>
 801d25e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d260:	18c3      	adds	r3, r0, r3
 801d262:	9307      	str	r3, [sp, #28]
 801d264:	2200      	movs	r2, #0
 801d266:	2300      	movs	r3, #0
 801d268:	0030      	movs	r0, r6
 801d26a:	0039      	movs	r1, r7
 801d26c:	f7e3 f920 	bl	80004b0 <__aeabi_dcmpeq>
 801d270:	2800      	cmp	r0, #0
 801d272:	d001      	beq.n	801d278 <__cvt+0x78>
 801d274:	9b07      	ldr	r3, [sp, #28]
 801d276:	9309      	str	r3, [sp, #36]	@ 0x24
 801d278:	2230      	movs	r2, #48	@ 0x30
 801d27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d27c:	9907      	ldr	r1, [sp, #28]
 801d27e:	428b      	cmp	r3, r1
 801d280:	d320      	bcc.n	801d2c4 <__cvt+0xc4>
 801d282:	0020      	movs	r0, r4
 801d284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d286:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d288:	1b1b      	subs	r3, r3, r4
 801d28a:	6013      	str	r3, [r2, #0]
 801d28c:	b00b      	add	sp, #44	@ 0x2c
 801d28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d290:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d292:	18c3      	adds	r3, r0, r3
 801d294:	9307      	str	r3, [sp, #28]
 801d296:	2d46      	cmp	r5, #70	@ 0x46
 801d298:	d1e4      	bne.n	801d264 <__cvt+0x64>
 801d29a:	7803      	ldrb	r3, [r0, #0]
 801d29c:	2b30      	cmp	r3, #48	@ 0x30
 801d29e:	d10c      	bne.n	801d2ba <__cvt+0xba>
 801d2a0:	2200      	movs	r2, #0
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	0030      	movs	r0, r6
 801d2a6:	0039      	movs	r1, r7
 801d2a8:	f7e3 f902 	bl	80004b0 <__aeabi_dcmpeq>
 801d2ac:	2800      	cmp	r0, #0
 801d2ae:	d104      	bne.n	801d2ba <__cvt+0xba>
 801d2b0:	2301      	movs	r3, #1
 801d2b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d2b4:	1a9b      	subs	r3, r3, r2
 801d2b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d2b8:	6013      	str	r3, [r2, #0]
 801d2ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d2bc:	9a07      	ldr	r2, [sp, #28]
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	18d3      	adds	r3, r2, r3
 801d2c2:	e7ce      	b.n	801d262 <__cvt+0x62>
 801d2c4:	1c59      	adds	r1, r3, #1
 801d2c6:	9109      	str	r1, [sp, #36]	@ 0x24
 801d2c8:	701a      	strb	r2, [r3, #0]
 801d2ca:	e7d6      	b.n	801d27a <__cvt+0x7a>

0801d2cc <__exponent>:
 801d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2ce:	232b      	movs	r3, #43	@ 0x2b
 801d2d0:	0005      	movs	r5, r0
 801d2d2:	000c      	movs	r4, r1
 801d2d4:	b085      	sub	sp, #20
 801d2d6:	7002      	strb	r2, [r0, #0]
 801d2d8:	2900      	cmp	r1, #0
 801d2da:	da01      	bge.n	801d2e0 <__exponent+0x14>
 801d2dc:	424c      	negs	r4, r1
 801d2de:	3302      	adds	r3, #2
 801d2e0:	706b      	strb	r3, [r5, #1]
 801d2e2:	2c09      	cmp	r4, #9
 801d2e4:	dd2c      	ble.n	801d340 <__exponent+0x74>
 801d2e6:	ab02      	add	r3, sp, #8
 801d2e8:	1dde      	adds	r6, r3, #7
 801d2ea:	0020      	movs	r0, r4
 801d2ec:	210a      	movs	r1, #10
 801d2ee:	f7e3 f8c9 	bl	8000484 <__aeabi_idivmod>
 801d2f2:	0037      	movs	r7, r6
 801d2f4:	3130      	adds	r1, #48	@ 0x30
 801d2f6:	3e01      	subs	r6, #1
 801d2f8:	0020      	movs	r0, r4
 801d2fa:	7031      	strb	r1, [r6, #0]
 801d2fc:	210a      	movs	r1, #10
 801d2fe:	9401      	str	r4, [sp, #4]
 801d300:	f7e2 ffda 	bl	80002b8 <__divsi3>
 801d304:	9b01      	ldr	r3, [sp, #4]
 801d306:	0004      	movs	r4, r0
 801d308:	2b63      	cmp	r3, #99	@ 0x63
 801d30a:	dcee      	bgt.n	801d2ea <__exponent+0x1e>
 801d30c:	1eba      	subs	r2, r7, #2
 801d30e:	1ca8      	adds	r0, r5, #2
 801d310:	0001      	movs	r1, r0
 801d312:	0013      	movs	r3, r2
 801d314:	3430      	adds	r4, #48	@ 0x30
 801d316:	7014      	strb	r4, [r2, #0]
 801d318:	ac02      	add	r4, sp, #8
 801d31a:	3407      	adds	r4, #7
 801d31c:	429c      	cmp	r4, r3
 801d31e:	d80a      	bhi.n	801d336 <__exponent+0x6a>
 801d320:	2300      	movs	r3, #0
 801d322:	42a2      	cmp	r2, r4
 801d324:	d803      	bhi.n	801d32e <__exponent+0x62>
 801d326:	3309      	adds	r3, #9
 801d328:	aa02      	add	r2, sp, #8
 801d32a:	189b      	adds	r3, r3, r2
 801d32c:	1bdb      	subs	r3, r3, r7
 801d32e:	18c0      	adds	r0, r0, r3
 801d330:	1b40      	subs	r0, r0, r5
 801d332:	b005      	add	sp, #20
 801d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d336:	781c      	ldrb	r4, [r3, #0]
 801d338:	3301      	adds	r3, #1
 801d33a:	700c      	strb	r4, [r1, #0]
 801d33c:	3101      	adds	r1, #1
 801d33e:	e7eb      	b.n	801d318 <__exponent+0x4c>
 801d340:	2330      	movs	r3, #48	@ 0x30
 801d342:	18e4      	adds	r4, r4, r3
 801d344:	70ab      	strb	r3, [r5, #2]
 801d346:	1d28      	adds	r0, r5, #4
 801d348:	70ec      	strb	r4, [r5, #3]
 801d34a:	e7f1      	b.n	801d330 <__exponent+0x64>

0801d34c <_printf_float>:
 801d34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d34e:	b097      	sub	sp, #92	@ 0x5c
 801d350:	000d      	movs	r5, r1
 801d352:	920a      	str	r2, [sp, #40]	@ 0x28
 801d354:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801d356:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d358:	9009      	str	r0, [sp, #36]	@ 0x24
 801d35a:	f000 fd7d 	bl	801de58 <_localeconv_r>
 801d35e:	6803      	ldr	r3, [r0, #0]
 801d360:	0018      	movs	r0, r3
 801d362:	930d      	str	r3, [sp, #52]	@ 0x34
 801d364:	f7e2 ff02 	bl	800016c <strlen>
 801d368:	2300      	movs	r3, #0
 801d36a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801d36c:	9314      	str	r3, [sp, #80]	@ 0x50
 801d36e:	7e2b      	ldrb	r3, [r5, #24]
 801d370:	2207      	movs	r2, #7
 801d372:	930c      	str	r3, [sp, #48]	@ 0x30
 801d374:	682b      	ldr	r3, [r5, #0]
 801d376:	930e      	str	r3, [sp, #56]	@ 0x38
 801d378:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d37a:	6823      	ldr	r3, [r4, #0]
 801d37c:	05c9      	lsls	r1, r1, #23
 801d37e:	d545      	bpl.n	801d40c <_printf_float+0xc0>
 801d380:	189b      	adds	r3, r3, r2
 801d382:	4393      	bics	r3, r2
 801d384:	001a      	movs	r2, r3
 801d386:	3208      	adds	r2, #8
 801d388:	6022      	str	r2, [r4, #0]
 801d38a:	2201      	movs	r2, #1
 801d38c:	681e      	ldr	r6, [r3, #0]
 801d38e:	685f      	ldr	r7, [r3, #4]
 801d390:	007b      	lsls	r3, r7, #1
 801d392:	085b      	lsrs	r3, r3, #1
 801d394:	9311      	str	r3, [sp, #68]	@ 0x44
 801d396:	9610      	str	r6, [sp, #64]	@ 0x40
 801d398:	64ae      	str	r6, [r5, #72]	@ 0x48
 801d39a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801d39c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d39e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d3a0:	4ba7      	ldr	r3, [pc, #668]	@ (801d640 <_printf_float+0x2f4>)
 801d3a2:	4252      	negs	r2, r2
 801d3a4:	f7e5 ffae 	bl	8003304 <__aeabi_dcmpun>
 801d3a8:	2800      	cmp	r0, #0
 801d3aa:	d131      	bne.n	801d410 <_printf_float+0xc4>
 801d3ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d3ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d3b0:	2201      	movs	r2, #1
 801d3b2:	4ba3      	ldr	r3, [pc, #652]	@ (801d640 <_printf_float+0x2f4>)
 801d3b4:	4252      	negs	r2, r2
 801d3b6:	f7e3 f88b 	bl	80004d0 <__aeabi_dcmple>
 801d3ba:	2800      	cmp	r0, #0
 801d3bc:	d128      	bne.n	801d410 <_printf_float+0xc4>
 801d3be:	2200      	movs	r2, #0
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	0030      	movs	r0, r6
 801d3c4:	0039      	movs	r1, r7
 801d3c6:	f7e3 f879 	bl	80004bc <__aeabi_dcmplt>
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	d003      	beq.n	801d3d6 <_printf_float+0x8a>
 801d3ce:	002b      	movs	r3, r5
 801d3d0:	222d      	movs	r2, #45	@ 0x2d
 801d3d2:	3343      	adds	r3, #67	@ 0x43
 801d3d4:	701a      	strb	r2, [r3, #0]
 801d3d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d3d8:	4f9a      	ldr	r7, [pc, #616]	@ (801d644 <_printf_float+0x2f8>)
 801d3da:	2b47      	cmp	r3, #71	@ 0x47
 801d3dc:	d900      	bls.n	801d3e0 <_printf_float+0x94>
 801d3de:	4f9a      	ldr	r7, [pc, #616]	@ (801d648 <_printf_float+0x2fc>)
 801d3e0:	2303      	movs	r3, #3
 801d3e2:	2400      	movs	r4, #0
 801d3e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d3e6:	612b      	str	r3, [r5, #16]
 801d3e8:	3301      	adds	r3, #1
 801d3ea:	439a      	bics	r2, r3
 801d3ec:	602a      	str	r2, [r5, #0]
 801d3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d3f0:	0029      	movs	r1, r5
 801d3f2:	9300      	str	r3, [sp, #0]
 801d3f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d3f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d3f8:	aa15      	add	r2, sp, #84	@ 0x54
 801d3fa:	f000 f9e5 	bl	801d7c8 <_printf_common>
 801d3fe:	3001      	adds	r0, #1
 801d400:	d000      	beq.n	801d404 <_printf_float+0xb8>
 801d402:	e09f      	b.n	801d544 <_printf_float+0x1f8>
 801d404:	2001      	movs	r0, #1
 801d406:	4240      	negs	r0, r0
 801d408:	b017      	add	sp, #92	@ 0x5c
 801d40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d40c:	3307      	adds	r3, #7
 801d40e:	e7b8      	b.n	801d382 <_printf_float+0x36>
 801d410:	0032      	movs	r2, r6
 801d412:	003b      	movs	r3, r7
 801d414:	0030      	movs	r0, r6
 801d416:	0039      	movs	r1, r7
 801d418:	f7e5 ff74 	bl	8003304 <__aeabi_dcmpun>
 801d41c:	2800      	cmp	r0, #0
 801d41e:	d00b      	beq.n	801d438 <_printf_float+0xec>
 801d420:	2f00      	cmp	r7, #0
 801d422:	da03      	bge.n	801d42c <_printf_float+0xe0>
 801d424:	002b      	movs	r3, r5
 801d426:	222d      	movs	r2, #45	@ 0x2d
 801d428:	3343      	adds	r3, #67	@ 0x43
 801d42a:	701a      	strb	r2, [r3, #0]
 801d42c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d42e:	4f87      	ldr	r7, [pc, #540]	@ (801d64c <_printf_float+0x300>)
 801d430:	2b47      	cmp	r3, #71	@ 0x47
 801d432:	d9d5      	bls.n	801d3e0 <_printf_float+0x94>
 801d434:	4f86      	ldr	r7, [pc, #536]	@ (801d650 <_printf_float+0x304>)
 801d436:	e7d3      	b.n	801d3e0 <_printf_float+0x94>
 801d438:	2220      	movs	r2, #32
 801d43a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d43c:	686b      	ldr	r3, [r5, #4]
 801d43e:	4394      	bics	r4, r2
 801d440:	1c5a      	adds	r2, r3, #1
 801d442:	d146      	bne.n	801d4d2 <_printf_float+0x186>
 801d444:	3307      	adds	r3, #7
 801d446:	606b      	str	r3, [r5, #4]
 801d448:	2380      	movs	r3, #128	@ 0x80
 801d44a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d44c:	00db      	lsls	r3, r3, #3
 801d44e:	4313      	orrs	r3, r2
 801d450:	2200      	movs	r2, #0
 801d452:	602b      	str	r3, [r5, #0]
 801d454:	9206      	str	r2, [sp, #24]
 801d456:	aa14      	add	r2, sp, #80	@ 0x50
 801d458:	9205      	str	r2, [sp, #20]
 801d45a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d45c:	a90a      	add	r1, sp, #40	@ 0x28
 801d45e:	9204      	str	r2, [sp, #16]
 801d460:	aa13      	add	r2, sp, #76	@ 0x4c
 801d462:	9203      	str	r2, [sp, #12]
 801d464:	2223      	movs	r2, #35	@ 0x23
 801d466:	1852      	adds	r2, r2, r1
 801d468:	9202      	str	r2, [sp, #8]
 801d46a:	9301      	str	r3, [sp, #4]
 801d46c:	686b      	ldr	r3, [r5, #4]
 801d46e:	0032      	movs	r2, r6
 801d470:	9300      	str	r3, [sp, #0]
 801d472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d474:	003b      	movs	r3, r7
 801d476:	f7ff fec3 	bl	801d200 <__cvt>
 801d47a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d47c:	0007      	movs	r7, r0
 801d47e:	2c47      	cmp	r4, #71	@ 0x47
 801d480:	d12d      	bne.n	801d4de <_printf_float+0x192>
 801d482:	1cd3      	adds	r3, r2, #3
 801d484:	db02      	blt.n	801d48c <_printf_float+0x140>
 801d486:	686b      	ldr	r3, [r5, #4]
 801d488:	429a      	cmp	r2, r3
 801d48a:	dd48      	ble.n	801d51e <_printf_float+0x1d2>
 801d48c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d48e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d490:	3b02      	subs	r3, #2
 801d492:	b2db      	uxtb	r3, r3
 801d494:	930c      	str	r3, [sp, #48]	@ 0x30
 801d496:	0028      	movs	r0, r5
 801d498:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d49a:	3901      	subs	r1, #1
 801d49c:	3050      	adds	r0, #80	@ 0x50
 801d49e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801d4a0:	f7ff ff14 	bl	801d2cc <__exponent>
 801d4a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d4a6:	0004      	movs	r4, r0
 801d4a8:	1813      	adds	r3, r2, r0
 801d4aa:	612b      	str	r3, [r5, #16]
 801d4ac:	2a01      	cmp	r2, #1
 801d4ae:	dc02      	bgt.n	801d4b6 <_printf_float+0x16a>
 801d4b0:	682a      	ldr	r2, [r5, #0]
 801d4b2:	07d2      	lsls	r2, r2, #31
 801d4b4:	d501      	bpl.n	801d4ba <_printf_float+0x16e>
 801d4b6:	3301      	adds	r3, #1
 801d4b8:	612b      	str	r3, [r5, #16]
 801d4ba:	2323      	movs	r3, #35	@ 0x23
 801d4bc:	aa0a      	add	r2, sp, #40	@ 0x28
 801d4be:	189b      	adds	r3, r3, r2
 801d4c0:	781b      	ldrb	r3, [r3, #0]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d100      	bne.n	801d4c8 <_printf_float+0x17c>
 801d4c6:	e792      	b.n	801d3ee <_printf_float+0xa2>
 801d4c8:	002b      	movs	r3, r5
 801d4ca:	222d      	movs	r2, #45	@ 0x2d
 801d4cc:	3343      	adds	r3, #67	@ 0x43
 801d4ce:	701a      	strb	r2, [r3, #0]
 801d4d0:	e78d      	b.n	801d3ee <_printf_float+0xa2>
 801d4d2:	2c47      	cmp	r4, #71	@ 0x47
 801d4d4:	d1b8      	bne.n	801d448 <_printf_float+0xfc>
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d1b6      	bne.n	801d448 <_printf_float+0xfc>
 801d4da:	3301      	adds	r3, #1
 801d4dc:	e7b3      	b.n	801d446 <_printf_float+0xfa>
 801d4de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4e0:	0011      	movs	r1, r2
 801d4e2:	2b65      	cmp	r3, #101	@ 0x65
 801d4e4:	d9d7      	bls.n	801d496 <_printf_float+0x14a>
 801d4e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4e8:	2b66      	cmp	r3, #102	@ 0x66
 801d4ea:	d11a      	bne.n	801d522 <_printf_float+0x1d6>
 801d4ec:	686b      	ldr	r3, [r5, #4]
 801d4ee:	2a00      	cmp	r2, #0
 801d4f0:	dd09      	ble.n	801d506 <_printf_float+0x1ba>
 801d4f2:	612a      	str	r2, [r5, #16]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d102      	bne.n	801d4fe <_printf_float+0x1b2>
 801d4f8:	6829      	ldr	r1, [r5, #0]
 801d4fa:	07c9      	lsls	r1, r1, #31
 801d4fc:	d50b      	bpl.n	801d516 <_printf_float+0x1ca>
 801d4fe:	3301      	adds	r3, #1
 801d500:	189b      	adds	r3, r3, r2
 801d502:	612b      	str	r3, [r5, #16]
 801d504:	e007      	b.n	801d516 <_printf_float+0x1ca>
 801d506:	2b00      	cmp	r3, #0
 801d508:	d103      	bne.n	801d512 <_printf_float+0x1c6>
 801d50a:	2201      	movs	r2, #1
 801d50c:	6829      	ldr	r1, [r5, #0]
 801d50e:	4211      	tst	r1, r2
 801d510:	d000      	beq.n	801d514 <_printf_float+0x1c8>
 801d512:	1c9a      	adds	r2, r3, #2
 801d514:	612a      	str	r2, [r5, #16]
 801d516:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d518:	2400      	movs	r4, #0
 801d51a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801d51c:	e7cd      	b.n	801d4ba <_printf_float+0x16e>
 801d51e:	2367      	movs	r3, #103	@ 0x67
 801d520:	930c      	str	r3, [sp, #48]	@ 0x30
 801d522:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d524:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d526:	4299      	cmp	r1, r3
 801d528:	db06      	blt.n	801d538 <_printf_float+0x1ec>
 801d52a:	682b      	ldr	r3, [r5, #0]
 801d52c:	6129      	str	r1, [r5, #16]
 801d52e:	07db      	lsls	r3, r3, #31
 801d530:	d5f1      	bpl.n	801d516 <_printf_float+0x1ca>
 801d532:	3101      	adds	r1, #1
 801d534:	6129      	str	r1, [r5, #16]
 801d536:	e7ee      	b.n	801d516 <_printf_float+0x1ca>
 801d538:	2201      	movs	r2, #1
 801d53a:	2900      	cmp	r1, #0
 801d53c:	dce0      	bgt.n	801d500 <_printf_float+0x1b4>
 801d53e:	1892      	adds	r2, r2, r2
 801d540:	1a52      	subs	r2, r2, r1
 801d542:	e7dd      	b.n	801d500 <_printf_float+0x1b4>
 801d544:	682a      	ldr	r2, [r5, #0]
 801d546:	0553      	lsls	r3, r2, #21
 801d548:	d408      	bmi.n	801d55c <_printf_float+0x210>
 801d54a:	692b      	ldr	r3, [r5, #16]
 801d54c:	003a      	movs	r2, r7
 801d54e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d550:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d552:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d554:	47a0      	blx	r4
 801d556:	3001      	adds	r0, #1
 801d558:	d129      	bne.n	801d5ae <_printf_float+0x262>
 801d55a:	e753      	b.n	801d404 <_printf_float+0xb8>
 801d55c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d55e:	2b65      	cmp	r3, #101	@ 0x65
 801d560:	d800      	bhi.n	801d564 <_printf_float+0x218>
 801d562:	e0da      	b.n	801d71a <_printf_float+0x3ce>
 801d564:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801d566:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801d568:	2200      	movs	r2, #0
 801d56a:	2300      	movs	r3, #0
 801d56c:	f7e2 ffa0 	bl	80004b0 <__aeabi_dcmpeq>
 801d570:	2800      	cmp	r0, #0
 801d572:	d033      	beq.n	801d5dc <_printf_float+0x290>
 801d574:	2301      	movs	r3, #1
 801d576:	4a37      	ldr	r2, [pc, #220]	@ (801d654 <_printf_float+0x308>)
 801d578:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d57a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d57c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d57e:	47a0      	blx	r4
 801d580:	3001      	adds	r0, #1
 801d582:	d100      	bne.n	801d586 <_printf_float+0x23a>
 801d584:	e73e      	b.n	801d404 <_printf_float+0xb8>
 801d586:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d588:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d58a:	42b3      	cmp	r3, r6
 801d58c:	db02      	blt.n	801d594 <_printf_float+0x248>
 801d58e:	682b      	ldr	r3, [r5, #0]
 801d590:	07db      	lsls	r3, r3, #31
 801d592:	d50c      	bpl.n	801d5ae <_printf_float+0x262>
 801d594:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d59a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d59c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d59e:	47a0      	blx	r4
 801d5a0:	2400      	movs	r4, #0
 801d5a2:	3001      	adds	r0, #1
 801d5a4:	d100      	bne.n	801d5a8 <_printf_float+0x25c>
 801d5a6:	e72d      	b.n	801d404 <_printf_float+0xb8>
 801d5a8:	1e73      	subs	r3, r6, #1
 801d5aa:	42a3      	cmp	r3, r4
 801d5ac:	dc0a      	bgt.n	801d5c4 <_printf_float+0x278>
 801d5ae:	682b      	ldr	r3, [r5, #0]
 801d5b0:	079b      	lsls	r3, r3, #30
 801d5b2:	d500      	bpl.n	801d5b6 <_printf_float+0x26a>
 801d5b4:	e105      	b.n	801d7c2 <_printf_float+0x476>
 801d5b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d5b8:	68e8      	ldr	r0, [r5, #12]
 801d5ba:	4298      	cmp	r0, r3
 801d5bc:	db00      	blt.n	801d5c0 <_printf_float+0x274>
 801d5be:	e723      	b.n	801d408 <_printf_float+0xbc>
 801d5c0:	0018      	movs	r0, r3
 801d5c2:	e721      	b.n	801d408 <_printf_float+0xbc>
 801d5c4:	002a      	movs	r2, r5
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d5cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d5ce:	321a      	adds	r2, #26
 801d5d0:	47b8      	blx	r7
 801d5d2:	3001      	adds	r0, #1
 801d5d4:	d100      	bne.n	801d5d8 <_printf_float+0x28c>
 801d5d6:	e715      	b.n	801d404 <_printf_float+0xb8>
 801d5d8:	3401      	adds	r4, #1
 801d5da:	e7e5      	b.n	801d5a8 <_printf_float+0x25c>
 801d5dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	dc3a      	bgt.n	801d658 <_printf_float+0x30c>
 801d5e2:	2301      	movs	r3, #1
 801d5e4:	4a1b      	ldr	r2, [pc, #108]	@ (801d654 <_printf_float+0x308>)
 801d5e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d5e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d5ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d5ec:	47a0      	blx	r4
 801d5ee:	3001      	adds	r0, #1
 801d5f0:	d100      	bne.n	801d5f4 <_printf_float+0x2a8>
 801d5f2:	e707      	b.n	801d404 <_printf_float+0xb8>
 801d5f4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d5f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d5f8:	4333      	orrs	r3, r6
 801d5fa:	d102      	bne.n	801d602 <_printf_float+0x2b6>
 801d5fc:	682b      	ldr	r3, [r5, #0]
 801d5fe:	07db      	lsls	r3, r3, #31
 801d600:	d5d5      	bpl.n	801d5ae <_printf_float+0x262>
 801d602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d604:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d606:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d608:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d60a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d60c:	47a0      	blx	r4
 801d60e:	2300      	movs	r3, #0
 801d610:	3001      	adds	r0, #1
 801d612:	d100      	bne.n	801d616 <_printf_float+0x2ca>
 801d614:	e6f6      	b.n	801d404 <_printf_float+0xb8>
 801d616:	930c      	str	r3, [sp, #48]	@ 0x30
 801d618:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d61a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d61c:	425b      	negs	r3, r3
 801d61e:	4293      	cmp	r3, r2
 801d620:	dc01      	bgt.n	801d626 <_printf_float+0x2da>
 801d622:	0033      	movs	r3, r6
 801d624:	e792      	b.n	801d54c <_printf_float+0x200>
 801d626:	002a      	movs	r2, r5
 801d628:	2301      	movs	r3, #1
 801d62a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d62c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d62e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d630:	321a      	adds	r2, #26
 801d632:	47a0      	blx	r4
 801d634:	3001      	adds	r0, #1
 801d636:	d100      	bne.n	801d63a <_printf_float+0x2ee>
 801d638:	e6e4      	b.n	801d404 <_printf_float+0xb8>
 801d63a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d63c:	3301      	adds	r3, #1
 801d63e:	e7ea      	b.n	801d616 <_printf_float+0x2ca>
 801d640:	7fefffff 	.word	0x7fefffff
 801d644:	08022d89 	.word	0x08022d89
 801d648:	08022d8d 	.word	0x08022d8d
 801d64c:	08022d91 	.word	0x08022d91
 801d650:	08022d95 	.word	0x08022d95
 801d654:	08022d99 	.word	0x08022d99
 801d658:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d65a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801d65c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d65e:	429e      	cmp	r6, r3
 801d660:	dd00      	ble.n	801d664 <_printf_float+0x318>
 801d662:	001e      	movs	r6, r3
 801d664:	2e00      	cmp	r6, #0
 801d666:	dc31      	bgt.n	801d6cc <_printf_float+0x380>
 801d668:	43f3      	mvns	r3, r6
 801d66a:	2400      	movs	r4, #0
 801d66c:	17db      	asrs	r3, r3, #31
 801d66e:	4033      	ands	r3, r6
 801d670:	930e      	str	r3, [sp, #56]	@ 0x38
 801d672:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801d674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d676:	1af3      	subs	r3, r6, r3
 801d678:	42a3      	cmp	r3, r4
 801d67a:	dc30      	bgt.n	801d6de <_printf_float+0x392>
 801d67c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d67e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d680:	429a      	cmp	r2, r3
 801d682:	dc38      	bgt.n	801d6f6 <_printf_float+0x3aa>
 801d684:	682b      	ldr	r3, [r5, #0]
 801d686:	07db      	lsls	r3, r3, #31
 801d688:	d435      	bmi.n	801d6f6 <_printf_float+0x3aa>
 801d68a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d68c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d68e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d690:	1b9b      	subs	r3, r3, r6
 801d692:	1b14      	subs	r4, r2, r4
 801d694:	429c      	cmp	r4, r3
 801d696:	dd00      	ble.n	801d69a <_printf_float+0x34e>
 801d698:	001c      	movs	r4, r3
 801d69a:	2c00      	cmp	r4, #0
 801d69c:	dc34      	bgt.n	801d708 <_printf_float+0x3bc>
 801d69e:	43e3      	mvns	r3, r4
 801d6a0:	2600      	movs	r6, #0
 801d6a2:	17db      	asrs	r3, r3, #31
 801d6a4:	401c      	ands	r4, r3
 801d6a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d6a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d6aa:	1ad3      	subs	r3, r2, r3
 801d6ac:	1b1b      	subs	r3, r3, r4
 801d6ae:	42b3      	cmp	r3, r6
 801d6b0:	dc00      	bgt.n	801d6b4 <_printf_float+0x368>
 801d6b2:	e77c      	b.n	801d5ae <_printf_float+0x262>
 801d6b4:	002a      	movs	r2, r5
 801d6b6:	2301      	movs	r3, #1
 801d6b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d6ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d6bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d6be:	321a      	adds	r2, #26
 801d6c0:	47b8      	blx	r7
 801d6c2:	3001      	adds	r0, #1
 801d6c4:	d100      	bne.n	801d6c8 <_printf_float+0x37c>
 801d6c6:	e69d      	b.n	801d404 <_printf_float+0xb8>
 801d6c8:	3601      	adds	r6, #1
 801d6ca:	e7ec      	b.n	801d6a6 <_printf_float+0x35a>
 801d6cc:	0033      	movs	r3, r6
 801d6ce:	003a      	movs	r2, r7
 801d6d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d6d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d6d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d6d6:	47a0      	blx	r4
 801d6d8:	3001      	adds	r0, #1
 801d6da:	d1c5      	bne.n	801d668 <_printf_float+0x31c>
 801d6dc:	e692      	b.n	801d404 <_printf_float+0xb8>
 801d6de:	002a      	movs	r2, r5
 801d6e0:	2301      	movs	r3, #1
 801d6e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d6e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d6e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d6e8:	321a      	adds	r2, #26
 801d6ea:	47b0      	blx	r6
 801d6ec:	3001      	adds	r0, #1
 801d6ee:	d100      	bne.n	801d6f2 <_printf_float+0x3a6>
 801d6f0:	e688      	b.n	801d404 <_printf_float+0xb8>
 801d6f2:	3401      	adds	r4, #1
 801d6f4:	e7bd      	b.n	801d672 <_printf_float+0x326>
 801d6f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d6fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d6fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d6fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d700:	47a0      	blx	r4
 801d702:	3001      	adds	r0, #1
 801d704:	d1c1      	bne.n	801d68a <_printf_float+0x33e>
 801d706:	e67d      	b.n	801d404 <_printf_float+0xb8>
 801d708:	19ba      	adds	r2, r7, r6
 801d70a:	0023      	movs	r3, r4
 801d70c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d70e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d710:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d712:	47b0      	blx	r6
 801d714:	3001      	adds	r0, #1
 801d716:	d1c2      	bne.n	801d69e <_printf_float+0x352>
 801d718:	e674      	b.n	801d404 <_printf_float+0xb8>
 801d71a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d71c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d71e:	2b01      	cmp	r3, #1
 801d720:	dc02      	bgt.n	801d728 <_printf_float+0x3dc>
 801d722:	2301      	movs	r3, #1
 801d724:	421a      	tst	r2, r3
 801d726:	d039      	beq.n	801d79c <_printf_float+0x450>
 801d728:	2301      	movs	r3, #1
 801d72a:	003a      	movs	r2, r7
 801d72c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d730:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d732:	47b0      	blx	r6
 801d734:	3001      	adds	r0, #1
 801d736:	d100      	bne.n	801d73a <_printf_float+0x3ee>
 801d738:	e664      	b.n	801d404 <_printf_float+0xb8>
 801d73a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d73c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d73e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d742:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d744:	47b0      	blx	r6
 801d746:	3001      	adds	r0, #1
 801d748:	d100      	bne.n	801d74c <_printf_float+0x400>
 801d74a:	e65b      	b.n	801d404 <_printf_float+0xb8>
 801d74c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801d74e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801d750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d752:	2200      	movs	r2, #0
 801d754:	3b01      	subs	r3, #1
 801d756:	930c      	str	r3, [sp, #48]	@ 0x30
 801d758:	2300      	movs	r3, #0
 801d75a:	f7e2 fea9 	bl	80004b0 <__aeabi_dcmpeq>
 801d75e:	2800      	cmp	r0, #0
 801d760:	d11a      	bne.n	801d798 <_printf_float+0x44c>
 801d762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d764:	1c7a      	adds	r2, r7, #1
 801d766:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d768:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d76a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d76c:	47b0      	blx	r6
 801d76e:	3001      	adds	r0, #1
 801d770:	d10e      	bne.n	801d790 <_printf_float+0x444>
 801d772:	e647      	b.n	801d404 <_printf_float+0xb8>
 801d774:	002a      	movs	r2, r5
 801d776:	2301      	movs	r3, #1
 801d778:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d77a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d77c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d77e:	321a      	adds	r2, #26
 801d780:	47b8      	blx	r7
 801d782:	3001      	adds	r0, #1
 801d784:	d100      	bne.n	801d788 <_printf_float+0x43c>
 801d786:	e63d      	b.n	801d404 <_printf_float+0xb8>
 801d788:	3601      	adds	r6, #1
 801d78a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d78c:	429e      	cmp	r6, r3
 801d78e:	dbf1      	blt.n	801d774 <_printf_float+0x428>
 801d790:	002a      	movs	r2, r5
 801d792:	0023      	movs	r3, r4
 801d794:	3250      	adds	r2, #80	@ 0x50
 801d796:	e6da      	b.n	801d54e <_printf_float+0x202>
 801d798:	2600      	movs	r6, #0
 801d79a:	e7f6      	b.n	801d78a <_printf_float+0x43e>
 801d79c:	003a      	movs	r2, r7
 801d79e:	e7e2      	b.n	801d766 <_printf_float+0x41a>
 801d7a0:	002a      	movs	r2, r5
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d7a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d7aa:	3219      	adds	r2, #25
 801d7ac:	47b0      	blx	r6
 801d7ae:	3001      	adds	r0, #1
 801d7b0:	d100      	bne.n	801d7b4 <_printf_float+0x468>
 801d7b2:	e627      	b.n	801d404 <_printf_float+0xb8>
 801d7b4:	3401      	adds	r4, #1
 801d7b6:	68eb      	ldr	r3, [r5, #12]
 801d7b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d7ba:	1a9b      	subs	r3, r3, r2
 801d7bc:	42a3      	cmp	r3, r4
 801d7be:	dcef      	bgt.n	801d7a0 <_printf_float+0x454>
 801d7c0:	e6f9      	b.n	801d5b6 <_printf_float+0x26a>
 801d7c2:	2400      	movs	r4, #0
 801d7c4:	e7f7      	b.n	801d7b6 <_printf_float+0x46a>
 801d7c6:	46c0      	nop			@ (mov r8, r8)

0801d7c8 <_printf_common>:
 801d7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d7ca:	0016      	movs	r6, r2
 801d7cc:	9301      	str	r3, [sp, #4]
 801d7ce:	688a      	ldr	r2, [r1, #8]
 801d7d0:	690b      	ldr	r3, [r1, #16]
 801d7d2:	000c      	movs	r4, r1
 801d7d4:	9000      	str	r0, [sp, #0]
 801d7d6:	4293      	cmp	r3, r2
 801d7d8:	da00      	bge.n	801d7dc <_printf_common+0x14>
 801d7da:	0013      	movs	r3, r2
 801d7dc:	0022      	movs	r2, r4
 801d7de:	6033      	str	r3, [r6, #0]
 801d7e0:	3243      	adds	r2, #67	@ 0x43
 801d7e2:	7812      	ldrb	r2, [r2, #0]
 801d7e4:	2a00      	cmp	r2, #0
 801d7e6:	d001      	beq.n	801d7ec <_printf_common+0x24>
 801d7e8:	3301      	adds	r3, #1
 801d7ea:	6033      	str	r3, [r6, #0]
 801d7ec:	6823      	ldr	r3, [r4, #0]
 801d7ee:	069b      	lsls	r3, r3, #26
 801d7f0:	d502      	bpl.n	801d7f8 <_printf_common+0x30>
 801d7f2:	6833      	ldr	r3, [r6, #0]
 801d7f4:	3302      	adds	r3, #2
 801d7f6:	6033      	str	r3, [r6, #0]
 801d7f8:	6822      	ldr	r2, [r4, #0]
 801d7fa:	2306      	movs	r3, #6
 801d7fc:	0015      	movs	r5, r2
 801d7fe:	401d      	ands	r5, r3
 801d800:	421a      	tst	r2, r3
 801d802:	d027      	beq.n	801d854 <_printf_common+0x8c>
 801d804:	0023      	movs	r3, r4
 801d806:	3343      	adds	r3, #67	@ 0x43
 801d808:	781b      	ldrb	r3, [r3, #0]
 801d80a:	1e5a      	subs	r2, r3, #1
 801d80c:	4193      	sbcs	r3, r2
 801d80e:	6822      	ldr	r2, [r4, #0]
 801d810:	0692      	lsls	r2, r2, #26
 801d812:	d430      	bmi.n	801d876 <_printf_common+0xae>
 801d814:	0022      	movs	r2, r4
 801d816:	9901      	ldr	r1, [sp, #4]
 801d818:	9800      	ldr	r0, [sp, #0]
 801d81a:	9d08      	ldr	r5, [sp, #32]
 801d81c:	3243      	adds	r2, #67	@ 0x43
 801d81e:	47a8      	blx	r5
 801d820:	3001      	adds	r0, #1
 801d822:	d025      	beq.n	801d870 <_printf_common+0xa8>
 801d824:	2206      	movs	r2, #6
 801d826:	6823      	ldr	r3, [r4, #0]
 801d828:	2500      	movs	r5, #0
 801d82a:	4013      	ands	r3, r2
 801d82c:	2b04      	cmp	r3, #4
 801d82e:	d105      	bne.n	801d83c <_printf_common+0x74>
 801d830:	6833      	ldr	r3, [r6, #0]
 801d832:	68e5      	ldr	r5, [r4, #12]
 801d834:	1aed      	subs	r5, r5, r3
 801d836:	43eb      	mvns	r3, r5
 801d838:	17db      	asrs	r3, r3, #31
 801d83a:	401d      	ands	r5, r3
 801d83c:	68a3      	ldr	r3, [r4, #8]
 801d83e:	6922      	ldr	r2, [r4, #16]
 801d840:	4293      	cmp	r3, r2
 801d842:	dd01      	ble.n	801d848 <_printf_common+0x80>
 801d844:	1a9b      	subs	r3, r3, r2
 801d846:	18ed      	adds	r5, r5, r3
 801d848:	2600      	movs	r6, #0
 801d84a:	42b5      	cmp	r5, r6
 801d84c:	d120      	bne.n	801d890 <_printf_common+0xc8>
 801d84e:	2000      	movs	r0, #0
 801d850:	e010      	b.n	801d874 <_printf_common+0xac>
 801d852:	3501      	adds	r5, #1
 801d854:	68e3      	ldr	r3, [r4, #12]
 801d856:	6832      	ldr	r2, [r6, #0]
 801d858:	1a9b      	subs	r3, r3, r2
 801d85a:	42ab      	cmp	r3, r5
 801d85c:	ddd2      	ble.n	801d804 <_printf_common+0x3c>
 801d85e:	0022      	movs	r2, r4
 801d860:	2301      	movs	r3, #1
 801d862:	9901      	ldr	r1, [sp, #4]
 801d864:	9800      	ldr	r0, [sp, #0]
 801d866:	9f08      	ldr	r7, [sp, #32]
 801d868:	3219      	adds	r2, #25
 801d86a:	47b8      	blx	r7
 801d86c:	3001      	adds	r0, #1
 801d86e:	d1f0      	bne.n	801d852 <_printf_common+0x8a>
 801d870:	2001      	movs	r0, #1
 801d872:	4240      	negs	r0, r0
 801d874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801d876:	2030      	movs	r0, #48	@ 0x30
 801d878:	18e1      	adds	r1, r4, r3
 801d87a:	3143      	adds	r1, #67	@ 0x43
 801d87c:	7008      	strb	r0, [r1, #0]
 801d87e:	0021      	movs	r1, r4
 801d880:	1c5a      	adds	r2, r3, #1
 801d882:	3145      	adds	r1, #69	@ 0x45
 801d884:	7809      	ldrb	r1, [r1, #0]
 801d886:	18a2      	adds	r2, r4, r2
 801d888:	3243      	adds	r2, #67	@ 0x43
 801d88a:	3302      	adds	r3, #2
 801d88c:	7011      	strb	r1, [r2, #0]
 801d88e:	e7c1      	b.n	801d814 <_printf_common+0x4c>
 801d890:	0022      	movs	r2, r4
 801d892:	2301      	movs	r3, #1
 801d894:	9901      	ldr	r1, [sp, #4]
 801d896:	9800      	ldr	r0, [sp, #0]
 801d898:	9f08      	ldr	r7, [sp, #32]
 801d89a:	321a      	adds	r2, #26
 801d89c:	47b8      	blx	r7
 801d89e:	3001      	adds	r0, #1
 801d8a0:	d0e6      	beq.n	801d870 <_printf_common+0xa8>
 801d8a2:	3601      	adds	r6, #1
 801d8a4:	e7d1      	b.n	801d84a <_printf_common+0x82>
	...

0801d8a8 <_printf_i>:
 801d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8aa:	b08b      	sub	sp, #44	@ 0x2c
 801d8ac:	9206      	str	r2, [sp, #24]
 801d8ae:	000a      	movs	r2, r1
 801d8b0:	3243      	adds	r2, #67	@ 0x43
 801d8b2:	9307      	str	r3, [sp, #28]
 801d8b4:	9005      	str	r0, [sp, #20]
 801d8b6:	9203      	str	r2, [sp, #12]
 801d8b8:	7e0a      	ldrb	r2, [r1, #24]
 801d8ba:	000c      	movs	r4, r1
 801d8bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d8be:	2a78      	cmp	r2, #120	@ 0x78
 801d8c0:	d809      	bhi.n	801d8d6 <_printf_i+0x2e>
 801d8c2:	2a62      	cmp	r2, #98	@ 0x62
 801d8c4:	d80b      	bhi.n	801d8de <_printf_i+0x36>
 801d8c6:	2a00      	cmp	r2, #0
 801d8c8:	d100      	bne.n	801d8cc <_printf_i+0x24>
 801d8ca:	e0bc      	b.n	801da46 <_printf_i+0x19e>
 801d8cc:	497b      	ldr	r1, [pc, #492]	@ (801dabc <_printf_i+0x214>)
 801d8ce:	9104      	str	r1, [sp, #16]
 801d8d0:	2a58      	cmp	r2, #88	@ 0x58
 801d8d2:	d100      	bne.n	801d8d6 <_printf_i+0x2e>
 801d8d4:	e090      	b.n	801d9f8 <_printf_i+0x150>
 801d8d6:	0025      	movs	r5, r4
 801d8d8:	3542      	adds	r5, #66	@ 0x42
 801d8da:	702a      	strb	r2, [r5, #0]
 801d8dc:	e022      	b.n	801d924 <_printf_i+0x7c>
 801d8de:	0010      	movs	r0, r2
 801d8e0:	3863      	subs	r0, #99	@ 0x63
 801d8e2:	2815      	cmp	r0, #21
 801d8e4:	d8f7      	bhi.n	801d8d6 <_printf_i+0x2e>
 801d8e6:	f7e2 fc53 	bl	8000190 <__gnu_thumb1_case_shi>
 801d8ea:	0016      	.short	0x0016
 801d8ec:	fff6001f 	.word	0xfff6001f
 801d8f0:	fff6fff6 	.word	0xfff6fff6
 801d8f4:	001ffff6 	.word	0x001ffff6
 801d8f8:	fff6fff6 	.word	0xfff6fff6
 801d8fc:	fff6fff6 	.word	0xfff6fff6
 801d900:	003600a1 	.word	0x003600a1
 801d904:	fff60080 	.word	0xfff60080
 801d908:	00b2fff6 	.word	0x00b2fff6
 801d90c:	0036fff6 	.word	0x0036fff6
 801d910:	fff6fff6 	.word	0xfff6fff6
 801d914:	0084      	.short	0x0084
 801d916:	0025      	movs	r5, r4
 801d918:	681a      	ldr	r2, [r3, #0]
 801d91a:	3542      	adds	r5, #66	@ 0x42
 801d91c:	1d11      	adds	r1, r2, #4
 801d91e:	6019      	str	r1, [r3, #0]
 801d920:	6813      	ldr	r3, [r2, #0]
 801d922:	702b      	strb	r3, [r5, #0]
 801d924:	2301      	movs	r3, #1
 801d926:	e0a0      	b.n	801da6a <_printf_i+0x1c2>
 801d928:	6818      	ldr	r0, [r3, #0]
 801d92a:	6809      	ldr	r1, [r1, #0]
 801d92c:	1d02      	adds	r2, r0, #4
 801d92e:	060d      	lsls	r5, r1, #24
 801d930:	d50b      	bpl.n	801d94a <_printf_i+0xa2>
 801d932:	6806      	ldr	r6, [r0, #0]
 801d934:	601a      	str	r2, [r3, #0]
 801d936:	2e00      	cmp	r6, #0
 801d938:	da03      	bge.n	801d942 <_printf_i+0x9a>
 801d93a:	232d      	movs	r3, #45	@ 0x2d
 801d93c:	9a03      	ldr	r2, [sp, #12]
 801d93e:	4276      	negs	r6, r6
 801d940:	7013      	strb	r3, [r2, #0]
 801d942:	4b5e      	ldr	r3, [pc, #376]	@ (801dabc <_printf_i+0x214>)
 801d944:	270a      	movs	r7, #10
 801d946:	9304      	str	r3, [sp, #16]
 801d948:	e018      	b.n	801d97c <_printf_i+0xd4>
 801d94a:	6806      	ldr	r6, [r0, #0]
 801d94c:	601a      	str	r2, [r3, #0]
 801d94e:	0649      	lsls	r1, r1, #25
 801d950:	d5f1      	bpl.n	801d936 <_printf_i+0x8e>
 801d952:	b236      	sxth	r6, r6
 801d954:	e7ef      	b.n	801d936 <_printf_i+0x8e>
 801d956:	6808      	ldr	r0, [r1, #0]
 801d958:	6819      	ldr	r1, [r3, #0]
 801d95a:	c940      	ldmia	r1!, {r6}
 801d95c:	0605      	lsls	r5, r0, #24
 801d95e:	d402      	bmi.n	801d966 <_printf_i+0xbe>
 801d960:	0640      	lsls	r0, r0, #25
 801d962:	d500      	bpl.n	801d966 <_printf_i+0xbe>
 801d964:	b2b6      	uxth	r6, r6
 801d966:	6019      	str	r1, [r3, #0]
 801d968:	4b54      	ldr	r3, [pc, #336]	@ (801dabc <_printf_i+0x214>)
 801d96a:	270a      	movs	r7, #10
 801d96c:	9304      	str	r3, [sp, #16]
 801d96e:	2a6f      	cmp	r2, #111	@ 0x6f
 801d970:	d100      	bne.n	801d974 <_printf_i+0xcc>
 801d972:	3f02      	subs	r7, #2
 801d974:	0023      	movs	r3, r4
 801d976:	2200      	movs	r2, #0
 801d978:	3343      	adds	r3, #67	@ 0x43
 801d97a:	701a      	strb	r2, [r3, #0]
 801d97c:	6863      	ldr	r3, [r4, #4]
 801d97e:	60a3      	str	r3, [r4, #8]
 801d980:	2b00      	cmp	r3, #0
 801d982:	db03      	blt.n	801d98c <_printf_i+0xe4>
 801d984:	2104      	movs	r1, #4
 801d986:	6822      	ldr	r2, [r4, #0]
 801d988:	438a      	bics	r2, r1
 801d98a:	6022      	str	r2, [r4, #0]
 801d98c:	2e00      	cmp	r6, #0
 801d98e:	d102      	bne.n	801d996 <_printf_i+0xee>
 801d990:	9d03      	ldr	r5, [sp, #12]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d00c      	beq.n	801d9b0 <_printf_i+0x108>
 801d996:	9d03      	ldr	r5, [sp, #12]
 801d998:	0030      	movs	r0, r6
 801d99a:	0039      	movs	r1, r7
 801d99c:	f7e2 fc88 	bl	80002b0 <__aeabi_uidivmod>
 801d9a0:	9b04      	ldr	r3, [sp, #16]
 801d9a2:	3d01      	subs	r5, #1
 801d9a4:	5c5b      	ldrb	r3, [r3, r1]
 801d9a6:	702b      	strb	r3, [r5, #0]
 801d9a8:	0033      	movs	r3, r6
 801d9aa:	0006      	movs	r6, r0
 801d9ac:	429f      	cmp	r7, r3
 801d9ae:	d9f3      	bls.n	801d998 <_printf_i+0xf0>
 801d9b0:	2f08      	cmp	r7, #8
 801d9b2:	d109      	bne.n	801d9c8 <_printf_i+0x120>
 801d9b4:	6823      	ldr	r3, [r4, #0]
 801d9b6:	07db      	lsls	r3, r3, #31
 801d9b8:	d506      	bpl.n	801d9c8 <_printf_i+0x120>
 801d9ba:	6862      	ldr	r2, [r4, #4]
 801d9bc:	6923      	ldr	r3, [r4, #16]
 801d9be:	429a      	cmp	r2, r3
 801d9c0:	dc02      	bgt.n	801d9c8 <_printf_i+0x120>
 801d9c2:	2330      	movs	r3, #48	@ 0x30
 801d9c4:	3d01      	subs	r5, #1
 801d9c6:	702b      	strb	r3, [r5, #0]
 801d9c8:	9b03      	ldr	r3, [sp, #12]
 801d9ca:	1b5b      	subs	r3, r3, r5
 801d9cc:	6123      	str	r3, [r4, #16]
 801d9ce:	9b07      	ldr	r3, [sp, #28]
 801d9d0:	0021      	movs	r1, r4
 801d9d2:	9300      	str	r3, [sp, #0]
 801d9d4:	9805      	ldr	r0, [sp, #20]
 801d9d6:	9b06      	ldr	r3, [sp, #24]
 801d9d8:	aa09      	add	r2, sp, #36	@ 0x24
 801d9da:	f7ff fef5 	bl	801d7c8 <_printf_common>
 801d9de:	3001      	adds	r0, #1
 801d9e0:	d148      	bne.n	801da74 <_printf_i+0x1cc>
 801d9e2:	2001      	movs	r0, #1
 801d9e4:	4240      	negs	r0, r0
 801d9e6:	b00b      	add	sp, #44	@ 0x2c
 801d9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9ea:	2220      	movs	r2, #32
 801d9ec:	6809      	ldr	r1, [r1, #0]
 801d9ee:	430a      	orrs	r2, r1
 801d9f0:	6022      	str	r2, [r4, #0]
 801d9f2:	2278      	movs	r2, #120	@ 0x78
 801d9f4:	4932      	ldr	r1, [pc, #200]	@ (801dac0 <_printf_i+0x218>)
 801d9f6:	9104      	str	r1, [sp, #16]
 801d9f8:	0021      	movs	r1, r4
 801d9fa:	3145      	adds	r1, #69	@ 0x45
 801d9fc:	700a      	strb	r2, [r1, #0]
 801d9fe:	6819      	ldr	r1, [r3, #0]
 801da00:	6822      	ldr	r2, [r4, #0]
 801da02:	c940      	ldmia	r1!, {r6}
 801da04:	0610      	lsls	r0, r2, #24
 801da06:	d402      	bmi.n	801da0e <_printf_i+0x166>
 801da08:	0650      	lsls	r0, r2, #25
 801da0a:	d500      	bpl.n	801da0e <_printf_i+0x166>
 801da0c:	b2b6      	uxth	r6, r6
 801da0e:	6019      	str	r1, [r3, #0]
 801da10:	07d3      	lsls	r3, r2, #31
 801da12:	d502      	bpl.n	801da1a <_printf_i+0x172>
 801da14:	2320      	movs	r3, #32
 801da16:	4313      	orrs	r3, r2
 801da18:	6023      	str	r3, [r4, #0]
 801da1a:	2e00      	cmp	r6, #0
 801da1c:	d001      	beq.n	801da22 <_printf_i+0x17a>
 801da1e:	2710      	movs	r7, #16
 801da20:	e7a8      	b.n	801d974 <_printf_i+0xcc>
 801da22:	2220      	movs	r2, #32
 801da24:	6823      	ldr	r3, [r4, #0]
 801da26:	4393      	bics	r3, r2
 801da28:	6023      	str	r3, [r4, #0]
 801da2a:	e7f8      	b.n	801da1e <_printf_i+0x176>
 801da2c:	681a      	ldr	r2, [r3, #0]
 801da2e:	680d      	ldr	r5, [r1, #0]
 801da30:	1d10      	adds	r0, r2, #4
 801da32:	6949      	ldr	r1, [r1, #20]
 801da34:	6018      	str	r0, [r3, #0]
 801da36:	6813      	ldr	r3, [r2, #0]
 801da38:	062e      	lsls	r6, r5, #24
 801da3a:	d501      	bpl.n	801da40 <_printf_i+0x198>
 801da3c:	6019      	str	r1, [r3, #0]
 801da3e:	e002      	b.n	801da46 <_printf_i+0x19e>
 801da40:	066d      	lsls	r5, r5, #25
 801da42:	d5fb      	bpl.n	801da3c <_printf_i+0x194>
 801da44:	8019      	strh	r1, [r3, #0]
 801da46:	2300      	movs	r3, #0
 801da48:	9d03      	ldr	r5, [sp, #12]
 801da4a:	6123      	str	r3, [r4, #16]
 801da4c:	e7bf      	b.n	801d9ce <_printf_i+0x126>
 801da4e:	681a      	ldr	r2, [r3, #0]
 801da50:	1d11      	adds	r1, r2, #4
 801da52:	6019      	str	r1, [r3, #0]
 801da54:	6815      	ldr	r5, [r2, #0]
 801da56:	2100      	movs	r1, #0
 801da58:	0028      	movs	r0, r5
 801da5a:	6862      	ldr	r2, [r4, #4]
 801da5c:	f000 fa7b 	bl	801df56 <memchr>
 801da60:	2800      	cmp	r0, #0
 801da62:	d001      	beq.n	801da68 <_printf_i+0x1c0>
 801da64:	1b40      	subs	r0, r0, r5
 801da66:	6060      	str	r0, [r4, #4]
 801da68:	6863      	ldr	r3, [r4, #4]
 801da6a:	6123      	str	r3, [r4, #16]
 801da6c:	2300      	movs	r3, #0
 801da6e:	9a03      	ldr	r2, [sp, #12]
 801da70:	7013      	strb	r3, [r2, #0]
 801da72:	e7ac      	b.n	801d9ce <_printf_i+0x126>
 801da74:	002a      	movs	r2, r5
 801da76:	6923      	ldr	r3, [r4, #16]
 801da78:	9906      	ldr	r1, [sp, #24]
 801da7a:	9805      	ldr	r0, [sp, #20]
 801da7c:	9d07      	ldr	r5, [sp, #28]
 801da7e:	47a8      	blx	r5
 801da80:	3001      	adds	r0, #1
 801da82:	d0ae      	beq.n	801d9e2 <_printf_i+0x13a>
 801da84:	6823      	ldr	r3, [r4, #0]
 801da86:	079b      	lsls	r3, r3, #30
 801da88:	d415      	bmi.n	801dab6 <_printf_i+0x20e>
 801da8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da8c:	68e0      	ldr	r0, [r4, #12]
 801da8e:	4298      	cmp	r0, r3
 801da90:	daa9      	bge.n	801d9e6 <_printf_i+0x13e>
 801da92:	0018      	movs	r0, r3
 801da94:	e7a7      	b.n	801d9e6 <_printf_i+0x13e>
 801da96:	0022      	movs	r2, r4
 801da98:	2301      	movs	r3, #1
 801da9a:	9906      	ldr	r1, [sp, #24]
 801da9c:	9805      	ldr	r0, [sp, #20]
 801da9e:	9e07      	ldr	r6, [sp, #28]
 801daa0:	3219      	adds	r2, #25
 801daa2:	47b0      	blx	r6
 801daa4:	3001      	adds	r0, #1
 801daa6:	d09c      	beq.n	801d9e2 <_printf_i+0x13a>
 801daa8:	3501      	adds	r5, #1
 801daaa:	68e3      	ldr	r3, [r4, #12]
 801daac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801daae:	1a9b      	subs	r3, r3, r2
 801dab0:	42ab      	cmp	r3, r5
 801dab2:	dcf0      	bgt.n	801da96 <_printf_i+0x1ee>
 801dab4:	e7e9      	b.n	801da8a <_printf_i+0x1e2>
 801dab6:	2500      	movs	r5, #0
 801dab8:	e7f7      	b.n	801daaa <_printf_i+0x202>
 801daba:	46c0      	nop			@ (mov r8, r8)
 801dabc:	08022d9b 	.word	0x08022d9b
 801dac0:	08022dac 	.word	0x08022dac

0801dac4 <std>:
 801dac4:	2300      	movs	r3, #0
 801dac6:	b510      	push	{r4, lr}
 801dac8:	0004      	movs	r4, r0
 801daca:	6003      	str	r3, [r0, #0]
 801dacc:	6043      	str	r3, [r0, #4]
 801dace:	6083      	str	r3, [r0, #8]
 801dad0:	8181      	strh	r1, [r0, #12]
 801dad2:	6643      	str	r3, [r0, #100]	@ 0x64
 801dad4:	81c2      	strh	r2, [r0, #14]
 801dad6:	6103      	str	r3, [r0, #16]
 801dad8:	6143      	str	r3, [r0, #20]
 801dada:	6183      	str	r3, [r0, #24]
 801dadc:	0019      	movs	r1, r3
 801dade:	2208      	movs	r2, #8
 801dae0:	305c      	adds	r0, #92	@ 0x5c
 801dae2:	f000 f967 	bl	801ddb4 <memset>
 801dae6:	4b0b      	ldr	r3, [pc, #44]	@ (801db14 <std+0x50>)
 801dae8:	6224      	str	r4, [r4, #32]
 801daea:	6263      	str	r3, [r4, #36]	@ 0x24
 801daec:	4b0a      	ldr	r3, [pc, #40]	@ (801db18 <std+0x54>)
 801daee:	62a3      	str	r3, [r4, #40]	@ 0x28
 801daf0:	4b0a      	ldr	r3, [pc, #40]	@ (801db1c <std+0x58>)
 801daf2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801daf4:	4b0a      	ldr	r3, [pc, #40]	@ (801db20 <std+0x5c>)
 801daf6:	6323      	str	r3, [r4, #48]	@ 0x30
 801daf8:	4b0a      	ldr	r3, [pc, #40]	@ (801db24 <std+0x60>)
 801dafa:	429c      	cmp	r4, r3
 801dafc:	d005      	beq.n	801db0a <std+0x46>
 801dafe:	4b0a      	ldr	r3, [pc, #40]	@ (801db28 <std+0x64>)
 801db00:	429c      	cmp	r4, r3
 801db02:	d002      	beq.n	801db0a <std+0x46>
 801db04:	4b09      	ldr	r3, [pc, #36]	@ (801db2c <std+0x68>)
 801db06:	429c      	cmp	r4, r3
 801db08:	d103      	bne.n	801db12 <std+0x4e>
 801db0a:	0020      	movs	r0, r4
 801db0c:	3058      	adds	r0, #88	@ 0x58
 801db0e:	f000 fa1f 	bl	801df50 <__retarget_lock_init_recursive>
 801db12:	bd10      	pop	{r4, pc}
 801db14:	0801dcad 	.word	0x0801dcad
 801db18:	0801dcd5 	.word	0x0801dcd5
 801db1c:	0801dd0d 	.word	0x0801dd0d
 801db20:	0801dd39 	.word	0x0801dd39
 801db24:	20003780 	.word	0x20003780
 801db28:	200037e8 	.word	0x200037e8
 801db2c:	20003850 	.word	0x20003850

0801db30 <stdio_exit_handler>:
 801db30:	b510      	push	{r4, lr}
 801db32:	4a03      	ldr	r2, [pc, #12]	@ (801db40 <stdio_exit_handler+0x10>)
 801db34:	4903      	ldr	r1, [pc, #12]	@ (801db44 <stdio_exit_handler+0x14>)
 801db36:	4804      	ldr	r0, [pc, #16]	@ (801db48 <stdio_exit_handler+0x18>)
 801db38:	f000 f86c 	bl	801dc14 <_fwalk_sglue>
 801db3c:	bd10      	pop	{r4, pc}
 801db3e:	46c0      	nop			@ (mov r8, r8)
 801db40:	20000250 	.word	0x20000250
 801db44:	08020575 	.word	0x08020575
 801db48:	200003cc 	.word	0x200003cc

0801db4c <cleanup_stdio>:
 801db4c:	6841      	ldr	r1, [r0, #4]
 801db4e:	4b0b      	ldr	r3, [pc, #44]	@ (801db7c <cleanup_stdio+0x30>)
 801db50:	b510      	push	{r4, lr}
 801db52:	0004      	movs	r4, r0
 801db54:	4299      	cmp	r1, r3
 801db56:	d001      	beq.n	801db5c <cleanup_stdio+0x10>
 801db58:	f002 fd0c 	bl	8020574 <_fflush_r>
 801db5c:	68a1      	ldr	r1, [r4, #8]
 801db5e:	4b08      	ldr	r3, [pc, #32]	@ (801db80 <cleanup_stdio+0x34>)
 801db60:	4299      	cmp	r1, r3
 801db62:	d002      	beq.n	801db6a <cleanup_stdio+0x1e>
 801db64:	0020      	movs	r0, r4
 801db66:	f002 fd05 	bl	8020574 <_fflush_r>
 801db6a:	68e1      	ldr	r1, [r4, #12]
 801db6c:	4b05      	ldr	r3, [pc, #20]	@ (801db84 <cleanup_stdio+0x38>)
 801db6e:	4299      	cmp	r1, r3
 801db70:	d002      	beq.n	801db78 <cleanup_stdio+0x2c>
 801db72:	0020      	movs	r0, r4
 801db74:	f002 fcfe 	bl	8020574 <_fflush_r>
 801db78:	bd10      	pop	{r4, pc}
 801db7a:	46c0      	nop			@ (mov r8, r8)
 801db7c:	20003780 	.word	0x20003780
 801db80:	200037e8 	.word	0x200037e8
 801db84:	20003850 	.word	0x20003850

0801db88 <global_stdio_init.part.0>:
 801db88:	b510      	push	{r4, lr}
 801db8a:	4b09      	ldr	r3, [pc, #36]	@ (801dbb0 <global_stdio_init.part.0+0x28>)
 801db8c:	4a09      	ldr	r2, [pc, #36]	@ (801dbb4 <global_stdio_init.part.0+0x2c>)
 801db8e:	2104      	movs	r1, #4
 801db90:	601a      	str	r2, [r3, #0]
 801db92:	4809      	ldr	r0, [pc, #36]	@ (801dbb8 <global_stdio_init.part.0+0x30>)
 801db94:	2200      	movs	r2, #0
 801db96:	f7ff ff95 	bl	801dac4 <std>
 801db9a:	2201      	movs	r2, #1
 801db9c:	2109      	movs	r1, #9
 801db9e:	4807      	ldr	r0, [pc, #28]	@ (801dbbc <global_stdio_init.part.0+0x34>)
 801dba0:	f7ff ff90 	bl	801dac4 <std>
 801dba4:	2202      	movs	r2, #2
 801dba6:	2112      	movs	r1, #18
 801dba8:	4805      	ldr	r0, [pc, #20]	@ (801dbc0 <global_stdio_init.part.0+0x38>)
 801dbaa:	f7ff ff8b 	bl	801dac4 <std>
 801dbae:	bd10      	pop	{r4, pc}
 801dbb0:	200038b8 	.word	0x200038b8
 801dbb4:	0801db31 	.word	0x0801db31
 801dbb8:	20003780 	.word	0x20003780
 801dbbc:	200037e8 	.word	0x200037e8
 801dbc0:	20003850 	.word	0x20003850

0801dbc4 <__sfp_lock_acquire>:
 801dbc4:	b510      	push	{r4, lr}
 801dbc6:	4802      	ldr	r0, [pc, #8]	@ (801dbd0 <__sfp_lock_acquire+0xc>)
 801dbc8:	f000 f9c3 	bl	801df52 <__retarget_lock_acquire_recursive>
 801dbcc:	bd10      	pop	{r4, pc}
 801dbce:	46c0      	nop			@ (mov r8, r8)
 801dbd0:	200038c1 	.word	0x200038c1

0801dbd4 <__sfp_lock_release>:
 801dbd4:	b510      	push	{r4, lr}
 801dbd6:	4802      	ldr	r0, [pc, #8]	@ (801dbe0 <__sfp_lock_release+0xc>)
 801dbd8:	f000 f9bc 	bl	801df54 <__retarget_lock_release_recursive>
 801dbdc:	bd10      	pop	{r4, pc}
 801dbde:	46c0      	nop			@ (mov r8, r8)
 801dbe0:	200038c1 	.word	0x200038c1

0801dbe4 <__sinit>:
 801dbe4:	b510      	push	{r4, lr}
 801dbe6:	0004      	movs	r4, r0
 801dbe8:	f7ff ffec 	bl	801dbc4 <__sfp_lock_acquire>
 801dbec:	6a23      	ldr	r3, [r4, #32]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d002      	beq.n	801dbf8 <__sinit+0x14>
 801dbf2:	f7ff ffef 	bl	801dbd4 <__sfp_lock_release>
 801dbf6:	bd10      	pop	{r4, pc}
 801dbf8:	4b04      	ldr	r3, [pc, #16]	@ (801dc0c <__sinit+0x28>)
 801dbfa:	6223      	str	r3, [r4, #32]
 801dbfc:	4b04      	ldr	r3, [pc, #16]	@ (801dc10 <__sinit+0x2c>)
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d1f6      	bne.n	801dbf2 <__sinit+0xe>
 801dc04:	f7ff ffc0 	bl	801db88 <global_stdio_init.part.0>
 801dc08:	e7f3      	b.n	801dbf2 <__sinit+0xe>
 801dc0a:	46c0      	nop			@ (mov r8, r8)
 801dc0c:	0801db4d 	.word	0x0801db4d
 801dc10:	200038b8 	.word	0x200038b8

0801dc14 <_fwalk_sglue>:
 801dc14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc16:	0014      	movs	r4, r2
 801dc18:	2600      	movs	r6, #0
 801dc1a:	9000      	str	r0, [sp, #0]
 801dc1c:	9101      	str	r1, [sp, #4]
 801dc1e:	68a5      	ldr	r5, [r4, #8]
 801dc20:	6867      	ldr	r7, [r4, #4]
 801dc22:	3f01      	subs	r7, #1
 801dc24:	d504      	bpl.n	801dc30 <_fwalk_sglue+0x1c>
 801dc26:	6824      	ldr	r4, [r4, #0]
 801dc28:	2c00      	cmp	r4, #0
 801dc2a:	d1f8      	bne.n	801dc1e <_fwalk_sglue+0xa>
 801dc2c:	0030      	movs	r0, r6
 801dc2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dc30:	89ab      	ldrh	r3, [r5, #12]
 801dc32:	2b01      	cmp	r3, #1
 801dc34:	d908      	bls.n	801dc48 <_fwalk_sglue+0x34>
 801dc36:	220e      	movs	r2, #14
 801dc38:	5eab      	ldrsh	r3, [r5, r2]
 801dc3a:	3301      	adds	r3, #1
 801dc3c:	d004      	beq.n	801dc48 <_fwalk_sglue+0x34>
 801dc3e:	0029      	movs	r1, r5
 801dc40:	9800      	ldr	r0, [sp, #0]
 801dc42:	9b01      	ldr	r3, [sp, #4]
 801dc44:	4798      	blx	r3
 801dc46:	4306      	orrs	r6, r0
 801dc48:	3568      	adds	r5, #104	@ 0x68
 801dc4a:	e7ea      	b.n	801dc22 <_fwalk_sglue+0xe>

0801dc4c <iprintf>:
 801dc4c:	b40f      	push	{r0, r1, r2, r3}
 801dc4e:	b507      	push	{r0, r1, r2, lr}
 801dc50:	4905      	ldr	r1, [pc, #20]	@ (801dc68 <iprintf+0x1c>)
 801dc52:	ab04      	add	r3, sp, #16
 801dc54:	6808      	ldr	r0, [r1, #0]
 801dc56:	cb04      	ldmia	r3!, {r2}
 801dc58:	6881      	ldr	r1, [r0, #8]
 801dc5a:	9301      	str	r3, [sp, #4]
 801dc5c:	f002 fae8 	bl	8020230 <_vfiprintf_r>
 801dc60:	b003      	add	sp, #12
 801dc62:	bc08      	pop	{r3}
 801dc64:	b004      	add	sp, #16
 801dc66:	4718      	bx	r3
 801dc68:	200003c8 	.word	0x200003c8

0801dc6c <siprintf>:
 801dc6c:	b40e      	push	{r1, r2, r3}
 801dc6e:	b500      	push	{lr}
 801dc70:	490b      	ldr	r1, [pc, #44]	@ (801dca0 <siprintf+0x34>)
 801dc72:	b09c      	sub	sp, #112	@ 0x70
 801dc74:	ab1d      	add	r3, sp, #116	@ 0x74
 801dc76:	9002      	str	r0, [sp, #8]
 801dc78:	9006      	str	r0, [sp, #24]
 801dc7a:	9107      	str	r1, [sp, #28]
 801dc7c:	9104      	str	r1, [sp, #16]
 801dc7e:	4809      	ldr	r0, [pc, #36]	@ (801dca4 <siprintf+0x38>)
 801dc80:	4909      	ldr	r1, [pc, #36]	@ (801dca8 <siprintf+0x3c>)
 801dc82:	cb04      	ldmia	r3!, {r2}
 801dc84:	9105      	str	r1, [sp, #20]
 801dc86:	6800      	ldr	r0, [r0, #0]
 801dc88:	a902      	add	r1, sp, #8
 801dc8a:	9301      	str	r3, [sp, #4]
 801dc8c:	f002 f9aa 	bl	801ffe4 <_svfiprintf_r>
 801dc90:	2200      	movs	r2, #0
 801dc92:	9b02      	ldr	r3, [sp, #8]
 801dc94:	701a      	strb	r2, [r3, #0]
 801dc96:	b01c      	add	sp, #112	@ 0x70
 801dc98:	bc08      	pop	{r3}
 801dc9a:	b003      	add	sp, #12
 801dc9c:	4718      	bx	r3
 801dc9e:	46c0      	nop			@ (mov r8, r8)
 801dca0:	7fffffff 	.word	0x7fffffff
 801dca4:	200003c8 	.word	0x200003c8
 801dca8:	ffff0208 	.word	0xffff0208

0801dcac <__sread>:
 801dcac:	b570      	push	{r4, r5, r6, lr}
 801dcae:	000c      	movs	r4, r1
 801dcb0:	250e      	movs	r5, #14
 801dcb2:	5f49      	ldrsh	r1, [r1, r5]
 801dcb4:	f000 f8fa 	bl	801deac <_read_r>
 801dcb8:	2800      	cmp	r0, #0
 801dcba:	db03      	blt.n	801dcc4 <__sread+0x18>
 801dcbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801dcbe:	181b      	adds	r3, r3, r0
 801dcc0:	6563      	str	r3, [r4, #84]	@ 0x54
 801dcc2:	bd70      	pop	{r4, r5, r6, pc}
 801dcc4:	89a3      	ldrh	r3, [r4, #12]
 801dcc6:	4a02      	ldr	r2, [pc, #8]	@ (801dcd0 <__sread+0x24>)
 801dcc8:	4013      	ands	r3, r2
 801dcca:	81a3      	strh	r3, [r4, #12]
 801dccc:	e7f9      	b.n	801dcc2 <__sread+0x16>
 801dcce:	46c0      	nop			@ (mov r8, r8)
 801dcd0:	ffffefff 	.word	0xffffefff

0801dcd4 <__swrite>:
 801dcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcd6:	001f      	movs	r7, r3
 801dcd8:	898b      	ldrh	r3, [r1, #12]
 801dcda:	0005      	movs	r5, r0
 801dcdc:	000c      	movs	r4, r1
 801dcde:	0016      	movs	r6, r2
 801dce0:	05db      	lsls	r3, r3, #23
 801dce2:	d505      	bpl.n	801dcf0 <__swrite+0x1c>
 801dce4:	230e      	movs	r3, #14
 801dce6:	5ec9      	ldrsh	r1, [r1, r3]
 801dce8:	2200      	movs	r2, #0
 801dcea:	2302      	movs	r3, #2
 801dcec:	f000 f8ca 	bl	801de84 <_lseek_r>
 801dcf0:	89a3      	ldrh	r3, [r4, #12]
 801dcf2:	4a05      	ldr	r2, [pc, #20]	@ (801dd08 <__swrite+0x34>)
 801dcf4:	0028      	movs	r0, r5
 801dcf6:	4013      	ands	r3, r2
 801dcf8:	81a3      	strh	r3, [r4, #12]
 801dcfa:	0032      	movs	r2, r6
 801dcfc:	230e      	movs	r3, #14
 801dcfe:	5ee1      	ldrsh	r1, [r4, r3]
 801dd00:	003b      	movs	r3, r7
 801dd02:	f000 f8e7 	bl	801ded4 <_write_r>
 801dd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd08:	ffffefff 	.word	0xffffefff

0801dd0c <__sseek>:
 801dd0c:	b570      	push	{r4, r5, r6, lr}
 801dd0e:	000c      	movs	r4, r1
 801dd10:	250e      	movs	r5, #14
 801dd12:	5f49      	ldrsh	r1, [r1, r5]
 801dd14:	f000 f8b6 	bl	801de84 <_lseek_r>
 801dd18:	89a3      	ldrh	r3, [r4, #12]
 801dd1a:	1c42      	adds	r2, r0, #1
 801dd1c:	d103      	bne.n	801dd26 <__sseek+0x1a>
 801dd1e:	4a05      	ldr	r2, [pc, #20]	@ (801dd34 <__sseek+0x28>)
 801dd20:	4013      	ands	r3, r2
 801dd22:	81a3      	strh	r3, [r4, #12]
 801dd24:	bd70      	pop	{r4, r5, r6, pc}
 801dd26:	2280      	movs	r2, #128	@ 0x80
 801dd28:	0152      	lsls	r2, r2, #5
 801dd2a:	4313      	orrs	r3, r2
 801dd2c:	81a3      	strh	r3, [r4, #12]
 801dd2e:	6560      	str	r0, [r4, #84]	@ 0x54
 801dd30:	e7f8      	b.n	801dd24 <__sseek+0x18>
 801dd32:	46c0      	nop			@ (mov r8, r8)
 801dd34:	ffffefff 	.word	0xffffefff

0801dd38 <__sclose>:
 801dd38:	b510      	push	{r4, lr}
 801dd3a:	230e      	movs	r3, #14
 801dd3c:	5ec9      	ldrsh	r1, [r1, r3]
 801dd3e:	f000 f88f 	bl	801de60 <_close_r>
 801dd42:	bd10      	pop	{r4, pc}

0801dd44 <_vsniprintf_r>:
 801dd44:	b530      	push	{r4, r5, lr}
 801dd46:	0014      	movs	r4, r2
 801dd48:	0005      	movs	r5, r0
 801dd4a:	001a      	movs	r2, r3
 801dd4c:	b09b      	sub	sp, #108	@ 0x6c
 801dd4e:	2c00      	cmp	r4, #0
 801dd50:	da05      	bge.n	801dd5e <_vsniprintf_r+0x1a>
 801dd52:	238b      	movs	r3, #139	@ 0x8b
 801dd54:	6003      	str	r3, [r0, #0]
 801dd56:	2001      	movs	r0, #1
 801dd58:	4240      	negs	r0, r0
 801dd5a:	b01b      	add	sp, #108	@ 0x6c
 801dd5c:	bd30      	pop	{r4, r5, pc}
 801dd5e:	2382      	movs	r3, #130	@ 0x82
 801dd60:	4668      	mov	r0, sp
 801dd62:	009b      	lsls	r3, r3, #2
 801dd64:	8183      	strh	r3, [r0, #12]
 801dd66:	2300      	movs	r3, #0
 801dd68:	9100      	str	r1, [sp, #0]
 801dd6a:	9104      	str	r1, [sp, #16]
 801dd6c:	429c      	cmp	r4, r3
 801dd6e:	d000      	beq.n	801dd72 <_vsniprintf_r+0x2e>
 801dd70:	1e63      	subs	r3, r4, #1
 801dd72:	9302      	str	r3, [sp, #8]
 801dd74:	9305      	str	r3, [sp, #20]
 801dd76:	2301      	movs	r3, #1
 801dd78:	4669      	mov	r1, sp
 801dd7a:	425b      	negs	r3, r3
 801dd7c:	81cb      	strh	r3, [r1, #14]
 801dd7e:	0028      	movs	r0, r5
 801dd80:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dd82:	f002 f92f 	bl	801ffe4 <_svfiprintf_r>
 801dd86:	1c43      	adds	r3, r0, #1
 801dd88:	da01      	bge.n	801dd8e <_vsniprintf_r+0x4a>
 801dd8a:	238b      	movs	r3, #139	@ 0x8b
 801dd8c:	602b      	str	r3, [r5, #0]
 801dd8e:	2c00      	cmp	r4, #0
 801dd90:	d0e3      	beq.n	801dd5a <_vsniprintf_r+0x16>
 801dd92:	2200      	movs	r2, #0
 801dd94:	9b00      	ldr	r3, [sp, #0]
 801dd96:	701a      	strb	r2, [r3, #0]
 801dd98:	e7df      	b.n	801dd5a <_vsniprintf_r+0x16>
	...

0801dd9c <vsniprintf>:
 801dd9c:	b513      	push	{r0, r1, r4, lr}
 801dd9e:	4c04      	ldr	r4, [pc, #16]	@ (801ddb0 <vsniprintf+0x14>)
 801dda0:	9300      	str	r3, [sp, #0]
 801dda2:	0013      	movs	r3, r2
 801dda4:	000a      	movs	r2, r1
 801dda6:	0001      	movs	r1, r0
 801dda8:	6820      	ldr	r0, [r4, #0]
 801ddaa:	f7ff ffcb 	bl	801dd44 <_vsniprintf_r>
 801ddae:	bd16      	pop	{r1, r2, r4, pc}
 801ddb0:	200003c8 	.word	0x200003c8

0801ddb4 <memset>:
 801ddb4:	0003      	movs	r3, r0
 801ddb6:	1882      	adds	r2, r0, r2
 801ddb8:	4293      	cmp	r3, r2
 801ddba:	d100      	bne.n	801ddbe <memset+0xa>
 801ddbc:	4770      	bx	lr
 801ddbe:	7019      	strb	r1, [r3, #0]
 801ddc0:	3301      	adds	r3, #1
 801ddc2:	e7f9      	b.n	801ddb8 <memset+0x4>

0801ddc4 <strchr>:
 801ddc4:	b2c9      	uxtb	r1, r1
 801ddc6:	7803      	ldrb	r3, [r0, #0]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d004      	beq.n	801ddd6 <strchr+0x12>
 801ddcc:	428b      	cmp	r3, r1
 801ddce:	d100      	bne.n	801ddd2 <strchr+0xe>
 801ddd0:	4770      	bx	lr
 801ddd2:	3001      	adds	r0, #1
 801ddd4:	e7f7      	b.n	801ddc6 <strchr+0x2>
 801ddd6:	424b      	negs	r3, r1
 801ddd8:	4159      	adcs	r1, r3
 801ddda:	4249      	negs	r1, r1
 801dddc:	4008      	ands	r0, r1
 801ddde:	e7f7      	b.n	801ddd0 <strchr+0xc>

0801dde0 <strncmp>:
 801dde0:	b530      	push	{r4, r5, lr}
 801dde2:	0005      	movs	r5, r0
 801dde4:	1e10      	subs	r0, r2, #0
 801dde6:	d00b      	beq.n	801de00 <strncmp+0x20>
 801dde8:	2400      	movs	r4, #0
 801ddea:	3a01      	subs	r2, #1
 801ddec:	5d2b      	ldrb	r3, [r5, r4]
 801ddee:	5d08      	ldrb	r0, [r1, r4]
 801ddf0:	4283      	cmp	r3, r0
 801ddf2:	d104      	bne.n	801ddfe <strncmp+0x1e>
 801ddf4:	42a2      	cmp	r2, r4
 801ddf6:	d002      	beq.n	801ddfe <strncmp+0x1e>
 801ddf8:	3401      	adds	r4, #1
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d1f6      	bne.n	801ddec <strncmp+0xc>
 801ddfe:	1a18      	subs	r0, r3, r0
 801de00:	bd30      	pop	{r4, r5, pc}

0801de02 <strncpy>:
 801de02:	0003      	movs	r3, r0
 801de04:	b530      	push	{r4, r5, lr}
 801de06:	001d      	movs	r5, r3
 801de08:	2a00      	cmp	r2, #0
 801de0a:	d006      	beq.n	801de1a <strncpy+0x18>
 801de0c:	780c      	ldrb	r4, [r1, #0]
 801de0e:	3a01      	subs	r2, #1
 801de10:	3301      	adds	r3, #1
 801de12:	702c      	strb	r4, [r5, #0]
 801de14:	3101      	adds	r1, #1
 801de16:	2c00      	cmp	r4, #0
 801de18:	d1f5      	bne.n	801de06 <strncpy+0x4>
 801de1a:	2100      	movs	r1, #0
 801de1c:	189a      	adds	r2, r3, r2
 801de1e:	4293      	cmp	r3, r2
 801de20:	d100      	bne.n	801de24 <strncpy+0x22>
 801de22:	bd30      	pop	{r4, r5, pc}
 801de24:	7019      	strb	r1, [r3, #0]
 801de26:	3301      	adds	r3, #1
 801de28:	e7f9      	b.n	801de1e <strncpy+0x1c>

0801de2a <strstr>:
 801de2a:	780a      	ldrb	r2, [r1, #0]
 801de2c:	b530      	push	{r4, r5, lr}
 801de2e:	2a00      	cmp	r2, #0
 801de30:	d10c      	bne.n	801de4c <strstr+0x22>
 801de32:	bd30      	pop	{r4, r5, pc}
 801de34:	429a      	cmp	r2, r3
 801de36:	d108      	bne.n	801de4a <strstr+0x20>
 801de38:	2301      	movs	r3, #1
 801de3a:	5ccc      	ldrb	r4, [r1, r3]
 801de3c:	2c00      	cmp	r4, #0
 801de3e:	d0f8      	beq.n	801de32 <strstr+0x8>
 801de40:	5cc5      	ldrb	r5, [r0, r3]
 801de42:	42a5      	cmp	r5, r4
 801de44:	d101      	bne.n	801de4a <strstr+0x20>
 801de46:	3301      	adds	r3, #1
 801de48:	e7f7      	b.n	801de3a <strstr+0x10>
 801de4a:	3001      	adds	r0, #1
 801de4c:	7803      	ldrb	r3, [r0, #0]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d1f0      	bne.n	801de34 <strstr+0xa>
 801de52:	0018      	movs	r0, r3
 801de54:	e7ed      	b.n	801de32 <strstr+0x8>
	...

0801de58 <_localeconv_r>:
 801de58:	4800      	ldr	r0, [pc, #0]	@ (801de5c <_localeconv_r+0x4>)
 801de5a:	4770      	bx	lr
 801de5c:	2000034c 	.word	0x2000034c

0801de60 <_close_r>:
 801de60:	2300      	movs	r3, #0
 801de62:	b570      	push	{r4, r5, r6, lr}
 801de64:	4d06      	ldr	r5, [pc, #24]	@ (801de80 <_close_r+0x20>)
 801de66:	0004      	movs	r4, r0
 801de68:	0008      	movs	r0, r1
 801de6a:	602b      	str	r3, [r5, #0]
 801de6c:	f7ee f810 	bl	800be90 <_close>
 801de70:	1c43      	adds	r3, r0, #1
 801de72:	d103      	bne.n	801de7c <_close_r+0x1c>
 801de74:	682b      	ldr	r3, [r5, #0]
 801de76:	2b00      	cmp	r3, #0
 801de78:	d000      	beq.n	801de7c <_close_r+0x1c>
 801de7a:	6023      	str	r3, [r4, #0]
 801de7c:	bd70      	pop	{r4, r5, r6, pc}
 801de7e:	46c0      	nop			@ (mov r8, r8)
 801de80:	200038bc 	.word	0x200038bc

0801de84 <_lseek_r>:
 801de84:	b570      	push	{r4, r5, r6, lr}
 801de86:	0004      	movs	r4, r0
 801de88:	0008      	movs	r0, r1
 801de8a:	0011      	movs	r1, r2
 801de8c:	001a      	movs	r2, r3
 801de8e:	2300      	movs	r3, #0
 801de90:	4d05      	ldr	r5, [pc, #20]	@ (801dea8 <_lseek_r+0x24>)
 801de92:	602b      	str	r3, [r5, #0]
 801de94:	f7ee f81d 	bl	800bed2 <_lseek>
 801de98:	1c43      	adds	r3, r0, #1
 801de9a:	d103      	bne.n	801dea4 <_lseek_r+0x20>
 801de9c:	682b      	ldr	r3, [r5, #0]
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d000      	beq.n	801dea4 <_lseek_r+0x20>
 801dea2:	6023      	str	r3, [r4, #0]
 801dea4:	bd70      	pop	{r4, r5, r6, pc}
 801dea6:	46c0      	nop			@ (mov r8, r8)
 801dea8:	200038bc 	.word	0x200038bc

0801deac <_read_r>:
 801deac:	b570      	push	{r4, r5, r6, lr}
 801deae:	0004      	movs	r4, r0
 801deb0:	0008      	movs	r0, r1
 801deb2:	0011      	movs	r1, r2
 801deb4:	001a      	movs	r2, r3
 801deb6:	2300      	movs	r3, #0
 801deb8:	4d05      	ldr	r5, [pc, #20]	@ (801ded0 <_read_r+0x24>)
 801deba:	602b      	str	r3, [r5, #0]
 801debc:	f7ed ffcb 	bl	800be56 <_read>
 801dec0:	1c43      	adds	r3, r0, #1
 801dec2:	d103      	bne.n	801decc <_read_r+0x20>
 801dec4:	682b      	ldr	r3, [r5, #0]
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d000      	beq.n	801decc <_read_r+0x20>
 801deca:	6023      	str	r3, [r4, #0]
 801decc:	bd70      	pop	{r4, r5, r6, pc}
 801dece:	46c0      	nop			@ (mov r8, r8)
 801ded0:	200038bc 	.word	0x200038bc

0801ded4 <_write_r>:
 801ded4:	b570      	push	{r4, r5, r6, lr}
 801ded6:	0004      	movs	r4, r0
 801ded8:	0008      	movs	r0, r1
 801deda:	0011      	movs	r1, r2
 801dedc:	001a      	movs	r2, r3
 801dede:	2300      	movs	r3, #0
 801dee0:	4d05      	ldr	r5, [pc, #20]	@ (801def8 <_write_r+0x24>)
 801dee2:	602b      	str	r3, [r5, #0]
 801dee4:	f7ee fc8c 	bl	800c800 <_write>
 801dee8:	1c43      	adds	r3, r0, #1
 801deea:	d103      	bne.n	801def4 <_write_r+0x20>
 801deec:	682b      	ldr	r3, [r5, #0]
 801deee:	2b00      	cmp	r3, #0
 801def0:	d000      	beq.n	801def4 <_write_r+0x20>
 801def2:	6023      	str	r3, [r4, #0]
 801def4:	bd70      	pop	{r4, r5, r6, pc}
 801def6:	46c0      	nop			@ (mov r8, r8)
 801def8:	200038bc 	.word	0x200038bc

0801defc <__errno>:
 801defc:	4b01      	ldr	r3, [pc, #4]	@ (801df04 <__errno+0x8>)
 801defe:	6818      	ldr	r0, [r3, #0]
 801df00:	4770      	bx	lr
 801df02:	46c0      	nop			@ (mov r8, r8)
 801df04:	200003c8 	.word	0x200003c8

0801df08 <__libc_init_array>:
 801df08:	b570      	push	{r4, r5, r6, lr}
 801df0a:	2600      	movs	r6, #0
 801df0c:	4c0c      	ldr	r4, [pc, #48]	@ (801df40 <__libc_init_array+0x38>)
 801df0e:	4d0d      	ldr	r5, [pc, #52]	@ (801df44 <__libc_init_array+0x3c>)
 801df10:	1b64      	subs	r4, r4, r5
 801df12:	10a4      	asrs	r4, r4, #2
 801df14:	42a6      	cmp	r6, r4
 801df16:	d109      	bne.n	801df2c <__libc_init_array+0x24>
 801df18:	2600      	movs	r6, #0
 801df1a:	f002 ff8b 	bl	8020e34 <_init>
 801df1e:	4c0a      	ldr	r4, [pc, #40]	@ (801df48 <__libc_init_array+0x40>)
 801df20:	4d0a      	ldr	r5, [pc, #40]	@ (801df4c <__libc_init_array+0x44>)
 801df22:	1b64      	subs	r4, r4, r5
 801df24:	10a4      	asrs	r4, r4, #2
 801df26:	42a6      	cmp	r6, r4
 801df28:	d105      	bne.n	801df36 <__libc_init_array+0x2e>
 801df2a:	bd70      	pop	{r4, r5, r6, pc}
 801df2c:	00b3      	lsls	r3, r6, #2
 801df2e:	58eb      	ldr	r3, [r5, r3]
 801df30:	4798      	blx	r3
 801df32:	3601      	adds	r6, #1
 801df34:	e7ee      	b.n	801df14 <__libc_init_array+0xc>
 801df36:	00b3      	lsls	r3, r6, #2
 801df38:	58eb      	ldr	r3, [r5, r3]
 801df3a:	4798      	blx	r3
 801df3c:	3601      	adds	r6, #1
 801df3e:	e7f2      	b.n	801df26 <__libc_init_array+0x1e>
 801df40:	08023078 	.word	0x08023078
 801df44:	08023078 	.word	0x08023078
 801df48:	0802307c 	.word	0x0802307c
 801df4c:	08023078 	.word	0x08023078

0801df50 <__retarget_lock_init_recursive>:
 801df50:	4770      	bx	lr

0801df52 <__retarget_lock_acquire_recursive>:
 801df52:	4770      	bx	lr

0801df54 <__retarget_lock_release_recursive>:
 801df54:	4770      	bx	lr

0801df56 <memchr>:
 801df56:	b2c9      	uxtb	r1, r1
 801df58:	1882      	adds	r2, r0, r2
 801df5a:	4290      	cmp	r0, r2
 801df5c:	d101      	bne.n	801df62 <memchr+0xc>
 801df5e:	2000      	movs	r0, #0
 801df60:	4770      	bx	lr
 801df62:	7803      	ldrb	r3, [r0, #0]
 801df64:	428b      	cmp	r3, r1
 801df66:	d0fb      	beq.n	801df60 <memchr+0xa>
 801df68:	3001      	adds	r0, #1
 801df6a:	e7f6      	b.n	801df5a <memchr+0x4>

0801df6c <memcpy>:
 801df6c:	2300      	movs	r3, #0
 801df6e:	b510      	push	{r4, lr}
 801df70:	429a      	cmp	r2, r3
 801df72:	d100      	bne.n	801df76 <memcpy+0xa>
 801df74:	bd10      	pop	{r4, pc}
 801df76:	5ccc      	ldrb	r4, [r1, r3]
 801df78:	54c4      	strb	r4, [r0, r3]
 801df7a:	3301      	adds	r3, #1
 801df7c:	e7f8      	b.n	801df70 <memcpy+0x4>
	...

0801df80 <nan>:
 801df80:	2000      	movs	r0, #0
 801df82:	4901      	ldr	r1, [pc, #4]	@ (801df88 <nan+0x8>)
 801df84:	4770      	bx	lr
 801df86:	46c0      	nop			@ (mov r8, r8)
 801df88:	7ff80000 	.word	0x7ff80000

0801df8c <quorem>:
 801df8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df8e:	6902      	ldr	r2, [r0, #16]
 801df90:	690f      	ldr	r7, [r1, #16]
 801df92:	b087      	sub	sp, #28
 801df94:	0006      	movs	r6, r0
 801df96:	000b      	movs	r3, r1
 801df98:	2000      	movs	r0, #0
 801df9a:	9102      	str	r1, [sp, #8]
 801df9c:	42ba      	cmp	r2, r7
 801df9e:	db6d      	blt.n	801e07c <quorem+0xf0>
 801dfa0:	3f01      	subs	r7, #1
 801dfa2:	00bc      	lsls	r4, r7, #2
 801dfa4:	3314      	adds	r3, #20
 801dfa6:	9305      	str	r3, [sp, #20]
 801dfa8:	191b      	adds	r3, r3, r4
 801dfaa:	9303      	str	r3, [sp, #12]
 801dfac:	0033      	movs	r3, r6
 801dfae:	3314      	adds	r3, #20
 801dfb0:	191c      	adds	r4, r3, r4
 801dfb2:	9301      	str	r3, [sp, #4]
 801dfb4:	6823      	ldr	r3, [r4, #0]
 801dfb6:	9304      	str	r3, [sp, #16]
 801dfb8:	9b03      	ldr	r3, [sp, #12]
 801dfba:	9804      	ldr	r0, [sp, #16]
 801dfbc:	681d      	ldr	r5, [r3, #0]
 801dfbe:	3501      	adds	r5, #1
 801dfc0:	0029      	movs	r1, r5
 801dfc2:	f7e2 f8ef 	bl	80001a4 <__udivsi3>
 801dfc6:	9b04      	ldr	r3, [sp, #16]
 801dfc8:	9000      	str	r0, [sp, #0]
 801dfca:	42ab      	cmp	r3, r5
 801dfcc:	d32b      	bcc.n	801e026 <quorem+0x9a>
 801dfce:	9b05      	ldr	r3, [sp, #20]
 801dfd0:	9d01      	ldr	r5, [sp, #4]
 801dfd2:	469c      	mov	ip, r3
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	9305      	str	r3, [sp, #20]
 801dfd8:	9304      	str	r3, [sp, #16]
 801dfda:	4662      	mov	r2, ip
 801dfdc:	ca08      	ldmia	r2!, {r3}
 801dfde:	6828      	ldr	r0, [r5, #0]
 801dfe0:	4694      	mov	ip, r2
 801dfe2:	9a00      	ldr	r2, [sp, #0]
 801dfe4:	b299      	uxth	r1, r3
 801dfe6:	4351      	muls	r1, r2
 801dfe8:	9a05      	ldr	r2, [sp, #20]
 801dfea:	0c1b      	lsrs	r3, r3, #16
 801dfec:	1889      	adds	r1, r1, r2
 801dfee:	9a00      	ldr	r2, [sp, #0]
 801dff0:	4353      	muls	r3, r2
 801dff2:	0c0a      	lsrs	r2, r1, #16
 801dff4:	189b      	adds	r3, r3, r2
 801dff6:	0c1a      	lsrs	r2, r3, #16
 801dff8:	b289      	uxth	r1, r1
 801dffa:	9205      	str	r2, [sp, #20]
 801dffc:	b282      	uxth	r2, r0
 801dffe:	1a52      	subs	r2, r2, r1
 801e000:	9904      	ldr	r1, [sp, #16]
 801e002:	0c00      	lsrs	r0, r0, #16
 801e004:	1852      	adds	r2, r2, r1
 801e006:	b29b      	uxth	r3, r3
 801e008:	1411      	asrs	r1, r2, #16
 801e00a:	1ac3      	subs	r3, r0, r3
 801e00c:	185b      	adds	r3, r3, r1
 801e00e:	1419      	asrs	r1, r3, #16
 801e010:	b292      	uxth	r2, r2
 801e012:	041b      	lsls	r3, r3, #16
 801e014:	431a      	orrs	r2, r3
 801e016:	9b03      	ldr	r3, [sp, #12]
 801e018:	9104      	str	r1, [sp, #16]
 801e01a:	c504      	stmia	r5!, {r2}
 801e01c:	4563      	cmp	r3, ip
 801e01e:	d2dc      	bcs.n	801dfda <quorem+0x4e>
 801e020:	6823      	ldr	r3, [r4, #0]
 801e022:	2b00      	cmp	r3, #0
 801e024:	d030      	beq.n	801e088 <quorem+0xfc>
 801e026:	0030      	movs	r0, r6
 801e028:	9902      	ldr	r1, [sp, #8]
 801e02a:	f001 fd7d 	bl	801fb28 <__mcmp>
 801e02e:	2800      	cmp	r0, #0
 801e030:	db23      	blt.n	801e07a <quorem+0xee>
 801e032:	0034      	movs	r4, r6
 801e034:	2500      	movs	r5, #0
 801e036:	9902      	ldr	r1, [sp, #8]
 801e038:	3414      	adds	r4, #20
 801e03a:	3114      	adds	r1, #20
 801e03c:	6823      	ldr	r3, [r4, #0]
 801e03e:	c901      	ldmia	r1!, {r0}
 801e040:	9302      	str	r3, [sp, #8]
 801e042:	466b      	mov	r3, sp
 801e044:	891b      	ldrh	r3, [r3, #8]
 801e046:	b282      	uxth	r2, r0
 801e048:	1a9a      	subs	r2, r3, r2
 801e04a:	9b02      	ldr	r3, [sp, #8]
 801e04c:	1952      	adds	r2, r2, r5
 801e04e:	0c00      	lsrs	r0, r0, #16
 801e050:	0c1b      	lsrs	r3, r3, #16
 801e052:	1a1b      	subs	r3, r3, r0
 801e054:	1410      	asrs	r0, r2, #16
 801e056:	181b      	adds	r3, r3, r0
 801e058:	141d      	asrs	r5, r3, #16
 801e05a:	b292      	uxth	r2, r2
 801e05c:	041b      	lsls	r3, r3, #16
 801e05e:	431a      	orrs	r2, r3
 801e060:	9b03      	ldr	r3, [sp, #12]
 801e062:	c404      	stmia	r4!, {r2}
 801e064:	428b      	cmp	r3, r1
 801e066:	d2e9      	bcs.n	801e03c <quorem+0xb0>
 801e068:	9a01      	ldr	r2, [sp, #4]
 801e06a:	00bb      	lsls	r3, r7, #2
 801e06c:	18d3      	adds	r3, r2, r3
 801e06e:	681a      	ldr	r2, [r3, #0]
 801e070:	2a00      	cmp	r2, #0
 801e072:	d013      	beq.n	801e09c <quorem+0x110>
 801e074:	9b00      	ldr	r3, [sp, #0]
 801e076:	3301      	adds	r3, #1
 801e078:	9300      	str	r3, [sp, #0]
 801e07a:	9800      	ldr	r0, [sp, #0]
 801e07c:	b007      	add	sp, #28
 801e07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e080:	6823      	ldr	r3, [r4, #0]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d104      	bne.n	801e090 <quorem+0x104>
 801e086:	3f01      	subs	r7, #1
 801e088:	9b01      	ldr	r3, [sp, #4]
 801e08a:	3c04      	subs	r4, #4
 801e08c:	42a3      	cmp	r3, r4
 801e08e:	d3f7      	bcc.n	801e080 <quorem+0xf4>
 801e090:	6137      	str	r7, [r6, #16]
 801e092:	e7c8      	b.n	801e026 <quorem+0x9a>
 801e094:	681a      	ldr	r2, [r3, #0]
 801e096:	2a00      	cmp	r2, #0
 801e098:	d104      	bne.n	801e0a4 <quorem+0x118>
 801e09a:	3f01      	subs	r7, #1
 801e09c:	9a01      	ldr	r2, [sp, #4]
 801e09e:	3b04      	subs	r3, #4
 801e0a0:	429a      	cmp	r2, r3
 801e0a2:	d3f7      	bcc.n	801e094 <quorem+0x108>
 801e0a4:	6137      	str	r7, [r6, #16]
 801e0a6:	e7e5      	b.n	801e074 <quorem+0xe8>

0801e0a8 <_dtoa_r>:
 801e0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0aa:	0014      	movs	r4, r2
 801e0ac:	001d      	movs	r5, r3
 801e0ae:	69c6      	ldr	r6, [r0, #28]
 801e0b0:	b09d      	sub	sp, #116	@ 0x74
 801e0b2:	940a      	str	r4, [sp, #40]	@ 0x28
 801e0b4:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e0b6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801e0b8:	9003      	str	r0, [sp, #12]
 801e0ba:	2e00      	cmp	r6, #0
 801e0bc:	d10f      	bne.n	801e0de <_dtoa_r+0x36>
 801e0be:	2010      	movs	r0, #16
 801e0c0:	f001 f98a 	bl	801f3d8 <malloc>
 801e0c4:	9b03      	ldr	r3, [sp, #12]
 801e0c6:	1e02      	subs	r2, r0, #0
 801e0c8:	61d8      	str	r0, [r3, #28]
 801e0ca:	d104      	bne.n	801e0d6 <_dtoa_r+0x2e>
 801e0cc:	21ef      	movs	r1, #239	@ 0xef
 801e0ce:	4bc7      	ldr	r3, [pc, #796]	@ (801e3ec <_dtoa_r+0x344>)
 801e0d0:	48c7      	ldr	r0, [pc, #796]	@ (801e3f0 <_dtoa_r+0x348>)
 801e0d2:	f002 fb41 	bl	8020758 <__assert_func>
 801e0d6:	6046      	str	r6, [r0, #4]
 801e0d8:	6086      	str	r6, [r0, #8]
 801e0da:	6006      	str	r6, [r0, #0]
 801e0dc:	60c6      	str	r6, [r0, #12]
 801e0de:	9b03      	ldr	r3, [sp, #12]
 801e0e0:	69db      	ldr	r3, [r3, #28]
 801e0e2:	6819      	ldr	r1, [r3, #0]
 801e0e4:	2900      	cmp	r1, #0
 801e0e6:	d00b      	beq.n	801e100 <_dtoa_r+0x58>
 801e0e8:	685a      	ldr	r2, [r3, #4]
 801e0ea:	2301      	movs	r3, #1
 801e0ec:	4093      	lsls	r3, r2
 801e0ee:	604a      	str	r2, [r1, #4]
 801e0f0:	608b      	str	r3, [r1, #8]
 801e0f2:	9803      	ldr	r0, [sp, #12]
 801e0f4:	f001 fa82 	bl	801f5fc <_Bfree>
 801e0f8:	2200      	movs	r2, #0
 801e0fa:	9b03      	ldr	r3, [sp, #12]
 801e0fc:	69db      	ldr	r3, [r3, #28]
 801e0fe:	601a      	str	r2, [r3, #0]
 801e100:	2d00      	cmp	r5, #0
 801e102:	da1e      	bge.n	801e142 <_dtoa_r+0x9a>
 801e104:	2301      	movs	r3, #1
 801e106:	603b      	str	r3, [r7, #0]
 801e108:	006b      	lsls	r3, r5, #1
 801e10a:	085b      	lsrs	r3, r3, #1
 801e10c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e10e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e110:	4bb8      	ldr	r3, [pc, #736]	@ (801e3f4 <_dtoa_r+0x34c>)
 801e112:	4ab8      	ldr	r2, [pc, #736]	@ (801e3f4 <_dtoa_r+0x34c>)
 801e114:	403b      	ands	r3, r7
 801e116:	4293      	cmp	r3, r2
 801e118:	d116      	bne.n	801e148 <_dtoa_r+0xa0>
 801e11a:	4bb7      	ldr	r3, [pc, #732]	@ (801e3f8 <_dtoa_r+0x350>)
 801e11c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e11e:	6013      	str	r3, [r2, #0]
 801e120:	033b      	lsls	r3, r7, #12
 801e122:	0b1b      	lsrs	r3, r3, #12
 801e124:	4323      	orrs	r3, r4
 801e126:	d101      	bne.n	801e12c <_dtoa_r+0x84>
 801e128:	f000 fd83 	bl	801ec32 <_dtoa_r+0xb8a>
 801e12c:	4bb3      	ldr	r3, [pc, #716]	@ (801e3fc <_dtoa_r+0x354>)
 801e12e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e130:	9308      	str	r3, [sp, #32]
 801e132:	2a00      	cmp	r2, #0
 801e134:	d002      	beq.n	801e13c <_dtoa_r+0x94>
 801e136:	4bb2      	ldr	r3, [pc, #712]	@ (801e400 <_dtoa_r+0x358>)
 801e138:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e13a:	6013      	str	r3, [r2, #0]
 801e13c:	9808      	ldr	r0, [sp, #32]
 801e13e:	b01d      	add	sp, #116	@ 0x74
 801e140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e142:	2300      	movs	r3, #0
 801e144:	603b      	str	r3, [r7, #0]
 801e146:	e7e2      	b.n	801e10e <_dtoa_r+0x66>
 801e148:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e14a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e14c:	9212      	str	r2, [sp, #72]	@ 0x48
 801e14e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e150:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e152:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e154:	2200      	movs	r2, #0
 801e156:	2300      	movs	r3, #0
 801e158:	f7e2 f9aa 	bl	80004b0 <__aeabi_dcmpeq>
 801e15c:	1e06      	subs	r6, r0, #0
 801e15e:	d00b      	beq.n	801e178 <_dtoa_r+0xd0>
 801e160:	2301      	movs	r3, #1
 801e162:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e164:	6013      	str	r3, [r2, #0]
 801e166:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d002      	beq.n	801e172 <_dtoa_r+0xca>
 801e16c:	4ba5      	ldr	r3, [pc, #660]	@ (801e404 <_dtoa_r+0x35c>)
 801e16e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e170:	6013      	str	r3, [r2, #0]
 801e172:	4ba5      	ldr	r3, [pc, #660]	@ (801e408 <_dtoa_r+0x360>)
 801e174:	9308      	str	r3, [sp, #32]
 801e176:	e7e1      	b.n	801e13c <_dtoa_r+0x94>
 801e178:	ab1a      	add	r3, sp, #104	@ 0x68
 801e17a:	9301      	str	r3, [sp, #4]
 801e17c:	ab1b      	add	r3, sp, #108	@ 0x6c
 801e17e:	9300      	str	r3, [sp, #0]
 801e180:	9803      	ldr	r0, [sp, #12]
 801e182:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e186:	f001 fdf1 	bl	801fd6c <__d2b>
 801e18a:	007a      	lsls	r2, r7, #1
 801e18c:	9005      	str	r0, [sp, #20]
 801e18e:	0d52      	lsrs	r2, r2, #21
 801e190:	d100      	bne.n	801e194 <_dtoa_r+0xec>
 801e192:	e07b      	b.n	801e28c <_dtoa_r+0x1e4>
 801e194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e196:	9618      	str	r6, [sp, #96]	@ 0x60
 801e198:	0319      	lsls	r1, r3, #12
 801e19a:	4b9c      	ldr	r3, [pc, #624]	@ (801e40c <_dtoa_r+0x364>)
 801e19c:	0b09      	lsrs	r1, r1, #12
 801e19e:	430b      	orrs	r3, r1
 801e1a0:	499b      	ldr	r1, [pc, #620]	@ (801e410 <_dtoa_r+0x368>)
 801e1a2:	1857      	adds	r7, r2, r1
 801e1a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e1a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e1a8:	0019      	movs	r1, r3
 801e1aa:	2200      	movs	r2, #0
 801e1ac:	4b99      	ldr	r3, [pc, #612]	@ (801e414 <_dtoa_r+0x36c>)
 801e1ae:	f7e4 fd0d 	bl	8002bcc <__aeabi_dsub>
 801e1b2:	4a99      	ldr	r2, [pc, #612]	@ (801e418 <_dtoa_r+0x370>)
 801e1b4:	4b99      	ldr	r3, [pc, #612]	@ (801e41c <_dtoa_r+0x374>)
 801e1b6:	f7e4 fa41 	bl	800263c <__aeabi_dmul>
 801e1ba:	4a99      	ldr	r2, [pc, #612]	@ (801e420 <_dtoa_r+0x378>)
 801e1bc:	4b99      	ldr	r3, [pc, #612]	@ (801e424 <_dtoa_r+0x37c>)
 801e1be:	f7e3 fa95 	bl	80016ec <__aeabi_dadd>
 801e1c2:	0004      	movs	r4, r0
 801e1c4:	0038      	movs	r0, r7
 801e1c6:	000d      	movs	r5, r1
 801e1c8:	f7e5 f8fa 	bl	80033c0 <__aeabi_i2d>
 801e1cc:	4a96      	ldr	r2, [pc, #600]	@ (801e428 <_dtoa_r+0x380>)
 801e1ce:	4b97      	ldr	r3, [pc, #604]	@ (801e42c <_dtoa_r+0x384>)
 801e1d0:	f7e4 fa34 	bl	800263c <__aeabi_dmul>
 801e1d4:	0002      	movs	r2, r0
 801e1d6:	000b      	movs	r3, r1
 801e1d8:	0020      	movs	r0, r4
 801e1da:	0029      	movs	r1, r5
 801e1dc:	f7e3 fa86 	bl	80016ec <__aeabi_dadd>
 801e1e0:	0004      	movs	r4, r0
 801e1e2:	000d      	movs	r5, r1
 801e1e4:	f7e5 f8b0 	bl	8003348 <__aeabi_d2iz>
 801e1e8:	2200      	movs	r2, #0
 801e1ea:	9004      	str	r0, [sp, #16]
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	0020      	movs	r0, r4
 801e1f0:	0029      	movs	r1, r5
 801e1f2:	f7e2 f963 	bl	80004bc <__aeabi_dcmplt>
 801e1f6:	2800      	cmp	r0, #0
 801e1f8:	d00b      	beq.n	801e212 <_dtoa_r+0x16a>
 801e1fa:	9804      	ldr	r0, [sp, #16]
 801e1fc:	f7e5 f8e0 	bl	80033c0 <__aeabi_i2d>
 801e200:	002b      	movs	r3, r5
 801e202:	0022      	movs	r2, r4
 801e204:	f7e2 f954 	bl	80004b0 <__aeabi_dcmpeq>
 801e208:	4243      	negs	r3, r0
 801e20a:	4158      	adcs	r0, r3
 801e20c:	9b04      	ldr	r3, [sp, #16]
 801e20e:	1a1b      	subs	r3, r3, r0
 801e210:	9304      	str	r3, [sp, #16]
 801e212:	2301      	movs	r3, #1
 801e214:	9315      	str	r3, [sp, #84]	@ 0x54
 801e216:	9b04      	ldr	r3, [sp, #16]
 801e218:	2b16      	cmp	r3, #22
 801e21a:	d810      	bhi.n	801e23e <_dtoa_r+0x196>
 801e21c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e21e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e220:	9a04      	ldr	r2, [sp, #16]
 801e222:	4b83      	ldr	r3, [pc, #524]	@ (801e430 <_dtoa_r+0x388>)
 801e224:	00d2      	lsls	r2, r2, #3
 801e226:	189b      	adds	r3, r3, r2
 801e228:	681a      	ldr	r2, [r3, #0]
 801e22a:	685b      	ldr	r3, [r3, #4]
 801e22c:	f7e2 f946 	bl	80004bc <__aeabi_dcmplt>
 801e230:	2800      	cmp	r0, #0
 801e232:	d047      	beq.n	801e2c4 <_dtoa_r+0x21c>
 801e234:	9b04      	ldr	r3, [sp, #16]
 801e236:	3b01      	subs	r3, #1
 801e238:	9304      	str	r3, [sp, #16]
 801e23a:	2300      	movs	r3, #0
 801e23c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e23e:	2200      	movs	r2, #0
 801e240:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801e242:	9206      	str	r2, [sp, #24]
 801e244:	1bdb      	subs	r3, r3, r7
 801e246:	1e5a      	subs	r2, r3, #1
 801e248:	d53e      	bpl.n	801e2c8 <_dtoa_r+0x220>
 801e24a:	2201      	movs	r2, #1
 801e24c:	1ad3      	subs	r3, r2, r3
 801e24e:	9306      	str	r3, [sp, #24]
 801e250:	2300      	movs	r3, #0
 801e252:	930d      	str	r3, [sp, #52]	@ 0x34
 801e254:	9b04      	ldr	r3, [sp, #16]
 801e256:	2b00      	cmp	r3, #0
 801e258:	db38      	blt.n	801e2cc <_dtoa_r+0x224>
 801e25a:	9a04      	ldr	r2, [sp, #16]
 801e25c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e25e:	4694      	mov	ip, r2
 801e260:	4463      	add	r3, ip
 801e262:	930d      	str	r3, [sp, #52]	@ 0x34
 801e264:	2300      	movs	r3, #0
 801e266:	9214      	str	r2, [sp, #80]	@ 0x50
 801e268:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e26a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e26c:	2401      	movs	r4, #1
 801e26e:	2b09      	cmp	r3, #9
 801e270:	d867      	bhi.n	801e342 <_dtoa_r+0x29a>
 801e272:	2b05      	cmp	r3, #5
 801e274:	dd02      	ble.n	801e27c <_dtoa_r+0x1d4>
 801e276:	2400      	movs	r4, #0
 801e278:	3b04      	subs	r3, #4
 801e27a:	9322      	str	r3, [sp, #136]	@ 0x88
 801e27c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e27e:	1e98      	subs	r0, r3, #2
 801e280:	2803      	cmp	r0, #3
 801e282:	d867      	bhi.n	801e354 <_dtoa_r+0x2ac>
 801e284:	f7e1 ff7a 	bl	800017c <__gnu_thumb1_case_uqi>
 801e288:	5b383a2b 	.word	0x5b383a2b
 801e28c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e28e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801e290:	18f6      	adds	r6, r6, r3
 801e292:	4b68      	ldr	r3, [pc, #416]	@ (801e434 <_dtoa_r+0x38c>)
 801e294:	18f2      	adds	r2, r6, r3
 801e296:	2a20      	cmp	r2, #32
 801e298:	dd0f      	ble.n	801e2ba <_dtoa_r+0x212>
 801e29a:	2340      	movs	r3, #64	@ 0x40
 801e29c:	1a9b      	subs	r3, r3, r2
 801e29e:	409f      	lsls	r7, r3
 801e2a0:	4b65      	ldr	r3, [pc, #404]	@ (801e438 <_dtoa_r+0x390>)
 801e2a2:	0038      	movs	r0, r7
 801e2a4:	18f3      	adds	r3, r6, r3
 801e2a6:	40dc      	lsrs	r4, r3
 801e2a8:	4320      	orrs	r0, r4
 801e2aa:	f7e5 f8b7 	bl	800341c <__aeabi_ui2d>
 801e2ae:	2201      	movs	r2, #1
 801e2b0:	4b62      	ldr	r3, [pc, #392]	@ (801e43c <_dtoa_r+0x394>)
 801e2b2:	1e77      	subs	r7, r6, #1
 801e2b4:	18cb      	adds	r3, r1, r3
 801e2b6:	9218      	str	r2, [sp, #96]	@ 0x60
 801e2b8:	e776      	b.n	801e1a8 <_dtoa_r+0x100>
 801e2ba:	2320      	movs	r3, #32
 801e2bc:	0020      	movs	r0, r4
 801e2be:	1a9b      	subs	r3, r3, r2
 801e2c0:	4098      	lsls	r0, r3
 801e2c2:	e7f2      	b.n	801e2aa <_dtoa_r+0x202>
 801e2c4:	9015      	str	r0, [sp, #84]	@ 0x54
 801e2c6:	e7ba      	b.n	801e23e <_dtoa_r+0x196>
 801e2c8:	920d      	str	r2, [sp, #52]	@ 0x34
 801e2ca:	e7c3      	b.n	801e254 <_dtoa_r+0x1ac>
 801e2cc:	9b06      	ldr	r3, [sp, #24]
 801e2ce:	9a04      	ldr	r2, [sp, #16]
 801e2d0:	1a9b      	subs	r3, r3, r2
 801e2d2:	9306      	str	r3, [sp, #24]
 801e2d4:	4253      	negs	r3, r2
 801e2d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e2d8:	2300      	movs	r3, #0
 801e2da:	9314      	str	r3, [sp, #80]	@ 0x50
 801e2dc:	e7c5      	b.n	801e26a <_dtoa_r+0x1c2>
 801e2de:	2300      	movs	r3, #0
 801e2e0:	9310      	str	r3, [sp, #64]	@ 0x40
 801e2e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2e4:	930e      	str	r3, [sp, #56]	@ 0x38
 801e2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	dc13      	bgt.n	801e314 <_dtoa_r+0x26c>
 801e2ec:	2301      	movs	r3, #1
 801e2ee:	001a      	movs	r2, r3
 801e2f0:	930e      	str	r3, [sp, #56]	@ 0x38
 801e2f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2f4:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e2f6:	e00d      	b.n	801e314 <_dtoa_r+0x26c>
 801e2f8:	2301      	movs	r3, #1
 801e2fa:	e7f1      	b.n	801e2e0 <_dtoa_r+0x238>
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e300:	9310      	str	r3, [sp, #64]	@ 0x40
 801e302:	4694      	mov	ip, r2
 801e304:	9b04      	ldr	r3, [sp, #16]
 801e306:	4463      	add	r3, ip
 801e308:	930e      	str	r3, [sp, #56]	@ 0x38
 801e30a:	3301      	adds	r3, #1
 801e30c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e30e:	2b00      	cmp	r3, #0
 801e310:	dc00      	bgt.n	801e314 <_dtoa_r+0x26c>
 801e312:	2301      	movs	r3, #1
 801e314:	9a03      	ldr	r2, [sp, #12]
 801e316:	2100      	movs	r1, #0
 801e318:	69d0      	ldr	r0, [r2, #28]
 801e31a:	2204      	movs	r2, #4
 801e31c:	0015      	movs	r5, r2
 801e31e:	3514      	adds	r5, #20
 801e320:	429d      	cmp	r5, r3
 801e322:	d91b      	bls.n	801e35c <_dtoa_r+0x2b4>
 801e324:	6041      	str	r1, [r0, #4]
 801e326:	9803      	ldr	r0, [sp, #12]
 801e328:	f001 f924 	bl	801f574 <_Balloc>
 801e32c:	9008      	str	r0, [sp, #32]
 801e32e:	2800      	cmp	r0, #0
 801e330:	d117      	bne.n	801e362 <_dtoa_r+0x2ba>
 801e332:	21b0      	movs	r1, #176	@ 0xb0
 801e334:	4b42      	ldr	r3, [pc, #264]	@ (801e440 <_dtoa_r+0x398>)
 801e336:	482e      	ldr	r0, [pc, #184]	@ (801e3f0 <_dtoa_r+0x348>)
 801e338:	9a08      	ldr	r2, [sp, #32]
 801e33a:	31ff      	adds	r1, #255	@ 0xff
 801e33c:	e6c9      	b.n	801e0d2 <_dtoa_r+0x2a>
 801e33e:	2301      	movs	r3, #1
 801e340:	e7dd      	b.n	801e2fe <_dtoa_r+0x256>
 801e342:	2300      	movs	r3, #0
 801e344:	9410      	str	r4, [sp, #64]	@ 0x40
 801e346:	9322      	str	r3, [sp, #136]	@ 0x88
 801e348:	3b01      	subs	r3, #1
 801e34a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e34c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e34e:	2200      	movs	r2, #0
 801e350:	3313      	adds	r3, #19
 801e352:	e7cf      	b.n	801e2f4 <_dtoa_r+0x24c>
 801e354:	2301      	movs	r3, #1
 801e356:	9310      	str	r3, [sp, #64]	@ 0x40
 801e358:	3b02      	subs	r3, #2
 801e35a:	e7f6      	b.n	801e34a <_dtoa_r+0x2a2>
 801e35c:	3101      	adds	r1, #1
 801e35e:	0052      	lsls	r2, r2, #1
 801e360:	e7dc      	b.n	801e31c <_dtoa_r+0x274>
 801e362:	9b03      	ldr	r3, [sp, #12]
 801e364:	9a08      	ldr	r2, [sp, #32]
 801e366:	69db      	ldr	r3, [r3, #28]
 801e368:	601a      	str	r2, [r3, #0]
 801e36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e36c:	2b0e      	cmp	r3, #14
 801e36e:	d900      	bls.n	801e372 <_dtoa_r+0x2ca>
 801e370:	e0d9      	b.n	801e526 <_dtoa_r+0x47e>
 801e372:	2c00      	cmp	r4, #0
 801e374:	d100      	bne.n	801e378 <_dtoa_r+0x2d0>
 801e376:	e0d6      	b.n	801e526 <_dtoa_r+0x47e>
 801e378:	9b04      	ldr	r3, [sp, #16]
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	dd64      	ble.n	801e448 <_dtoa_r+0x3a0>
 801e37e:	210f      	movs	r1, #15
 801e380:	9a04      	ldr	r2, [sp, #16]
 801e382:	4b2b      	ldr	r3, [pc, #172]	@ (801e430 <_dtoa_r+0x388>)
 801e384:	400a      	ands	r2, r1
 801e386:	00d2      	lsls	r2, r2, #3
 801e388:	189b      	adds	r3, r3, r2
 801e38a:	681e      	ldr	r6, [r3, #0]
 801e38c:	685f      	ldr	r7, [r3, #4]
 801e38e:	9b04      	ldr	r3, [sp, #16]
 801e390:	2402      	movs	r4, #2
 801e392:	111d      	asrs	r5, r3, #4
 801e394:	05db      	lsls	r3, r3, #23
 801e396:	d50a      	bpl.n	801e3ae <_dtoa_r+0x306>
 801e398:	4b2a      	ldr	r3, [pc, #168]	@ (801e444 <_dtoa_r+0x39c>)
 801e39a:	400d      	ands	r5, r1
 801e39c:	6a1a      	ldr	r2, [r3, #32]
 801e39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e3a0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e3a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e3a4:	f7e3 fd06 	bl	8001db4 <__aeabi_ddiv>
 801e3a8:	900a      	str	r0, [sp, #40]	@ 0x28
 801e3aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e3ac:	3401      	adds	r4, #1
 801e3ae:	4b25      	ldr	r3, [pc, #148]	@ (801e444 <_dtoa_r+0x39c>)
 801e3b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e3b2:	2d00      	cmp	r5, #0
 801e3b4:	d108      	bne.n	801e3c8 <_dtoa_r+0x320>
 801e3b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e3b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e3ba:	0032      	movs	r2, r6
 801e3bc:	003b      	movs	r3, r7
 801e3be:	f7e3 fcf9 	bl	8001db4 <__aeabi_ddiv>
 801e3c2:	900a      	str	r0, [sp, #40]	@ 0x28
 801e3c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e3c6:	e05a      	b.n	801e47e <_dtoa_r+0x3d6>
 801e3c8:	2301      	movs	r3, #1
 801e3ca:	421d      	tst	r5, r3
 801e3cc:	d009      	beq.n	801e3e2 <_dtoa_r+0x33a>
 801e3ce:	18e4      	adds	r4, r4, r3
 801e3d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3d2:	0030      	movs	r0, r6
 801e3d4:	681a      	ldr	r2, [r3, #0]
 801e3d6:	685b      	ldr	r3, [r3, #4]
 801e3d8:	0039      	movs	r1, r7
 801e3da:	f7e4 f92f 	bl	800263c <__aeabi_dmul>
 801e3de:	0006      	movs	r6, r0
 801e3e0:	000f      	movs	r7, r1
 801e3e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3e4:	106d      	asrs	r5, r5, #1
 801e3e6:	3308      	adds	r3, #8
 801e3e8:	e7e2      	b.n	801e3b0 <_dtoa_r+0x308>
 801e3ea:	46c0      	nop			@ (mov r8, r8)
 801e3ec:	08022dd2 	.word	0x08022dd2
 801e3f0:	08022de9 	.word	0x08022de9
 801e3f4:	7ff00000 	.word	0x7ff00000
 801e3f8:	0000270f 	.word	0x0000270f
 801e3fc:	08022dce 	.word	0x08022dce
 801e400:	08022dd1 	.word	0x08022dd1
 801e404:	08022d9a 	.word	0x08022d9a
 801e408:	08022d99 	.word	0x08022d99
 801e40c:	3ff00000 	.word	0x3ff00000
 801e410:	fffffc01 	.word	0xfffffc01
 801e414:	3ff80000 	.word	0x3ff80000
 801e418:	636f4361 	.word	0x636f4361
 801e41c:	3fd287a7 	.word	0x3fd287a7
 801e420:	8b60c8b3 	.word	0x8b60c8b3
 801e424:	3fc68a28 	.word	0x3fc68a28
 801e428:	509f79fb 	.word	0x509f79fb
 801e42c:	3fd34413 	.word	0x3fd34413
 801e430:	08022f40 	.word	0x08022f40
 801e434:	00000432 	.word	0x00000432
 801e438:	00000412 	.word	0x00000412
 801e43c:	fe100000 	.word	0xfe100000
 801e440:	08022e41 	.word	0x08022e41
 801e444:	08022f18 	.word	0x08022f18
 801e448:	9b04      	ldr	r3, [sp, #16]
 801e44a:	2402      	movs	r4, #2
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d016      	beq.n	801e47e <_dtoa_r+0x3d6>
 801e450:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e452:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e454:	220f      	movs	r2, #15
 801e456:	425d      	negs	r5, r3
 801e458:	402a      	ands	r2, r5
 801e45a:	4bd7      	ldr	r3, [pc, #860]	@ (801e7b8 <_dtoa_r+0x710>)
 801e45c:	00d2      	lsls	r2, r2, #3
 801e45e:	189b      	adds	r3, r3, r2
 801e460:	681a      	ldr	r2, [r3, #0]
 801e462:	685b      	ldr	r3, [r3, #4]
 801e464:	f7e4 f8ea 	bl	800263c <__aeabi_dmul>
 801e468:	2701      	movs	r7, #1
 801e46a:	2300      	movs	r3, #0
 801e46c:	900a      	str	r0, [sp, #40]	@ 0x28
 801e46e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e470:	4ed2      	ldr	r6, [pc, #840]	@ (801e7bc <_dtoa_r+0x714>)
 801e472:	112d      	asrs	r5, r5, #4
 801e474:	2d00      	cmp	r5, #0
 801e476:	d000      	beq.n	801e47a <_dtoa_r+0x3d2>
 801e478:	e0ba      	b.n	801e5f0 <_dtoa_r+0x548>
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d1a1      	bne.n	801e3c2 <_dtoa_r+0x31a>
 801e47e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e480:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e482:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e484:	2b00      	cmp	r3, #0
 801e486:	d100      	bne.n	801e48a <_dtoa_r+0x3e2>
 801e488:	e0bd      	b.n	801e606 <_dtoa_r+0x55e>
 801e48a:	2200      	movs	r2, #0
 801e48c:	0030      	movs	r0, r6
 801e48e:	0039      	movs	r1, r7
 801e490:	4bcb      	ldr	r3, [pc, #812]	@ (801e7c0 <_dtoa_r+0x718>)
 801e492:	f7e2 f813 	bl	80004bc <__aeabi_dcmplt>
 801e496:	2800      	cmp	r0, #0
 801e498:	d100      	bne.n	801e49c <_dtoa_r+0x3f4>
 801e49a:	e0b4      	b.n	801e606 <_dtoa_r+0x55e>
 801e49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d100      	bne.n	801e4a4 <_dtoa_r+0x3fc>
 801e4a2:	e0b0      	b.n	801e606 <_dtoa_r+0x55e>
 801e4a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	dd39      	ble.n	801e51e <_dtoa_r+0x476>
 801e4aa:	9b04      	ldr	r3, [sp, #16]
 801e4ac:	2200      	movs	r2, #0
 801e4ae:	3b01      	subs	r3, #1
 801e4b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e4b2:	0030      	movs	r0, r6
 801e4b4:	4bc3      	ldr	r3, [pc, #780]	@ (801e7c4 <_dtoa_r+0x71c>)
 801e4b6:	0039      	movs	r1, r7
 801e4b8:	f7e4 f8c0 	bl	800263c <__aeabi_dmul>
 801e4bc:	900a      	str	r0, [sp, #40]	@ 0x28
 801e4be:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4c2:	3401      	adds	r4, #1
 801e4c4:	0020      	movs	r0, r4
 801e4c6:	9311      	str	r3, [sp, #68]	@ 0x44
 801e4c8:	f7e4 ff7a 	bl	80033c0 <__aeabi_i2d>
 801e4cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e4d0:	f7e4 f8b4 	bl	800263c <__aeabi_dmul>
 801e4d4:	4bbc      	ldr	r3, [pc, #752]	@ (801e7c8 <_dtoa_r+0x720>)
 801e4d6:	2200      	movs	r2, #0
 801e4d8:	f7e3 f908 	bl	80016ec <__aeabi_dadd>
 801e4dc:	4bbb      	ldr	r3, [pc, #748]	@ (801e7cc <_dtoa_r+0x724>)
 801e4de:	0006      	movs	r6, r0
 801e4e0:	18cf      	adds	r7, r1, r3
 801e4e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d000      	beq.n	801e4ea <_dtoa_r+0x442>
 801e4e8:	e091      	b.n	801e60e <_dtoa_r+0x566>
 801e4ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e4ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e4ee:	2200      	movs	r2, #0
 801e4f0:	4bb7      	ldr	r3, [pc, #732]	@ (801e7d0 <_dtoa_r+0x728>)
 801e4f2:	f7e4 fb6b 	bl	8002bcc <__aeabi_dsub>
 801e4f6:	0032      	movs	r2, r6
 801e4f8:	003b      	movs	r3, r7
 801e4fa:	0004      	movs	r4, r0
 801e4fc:	000d      	movs	r5, r1
 801e4fe:	f7e1 fff1 	bl	80004e4 <__aeabi_dcmpgt>
 801e502:	2800      	cmp	r0, #0
 801e504:	d000      	beq.n	801e508 <_dtoa_r+0x460>
 801e506:	e29d      	b.n	801ea44 <_dtoa_r+0x99c>
 801e508:	2180      	movs	r1, #128	@ 0x80
 801e50a:	0609      	lsls	r1, r1, #24
 801e50c:	187b      	adds	r3, r7, r1
 801e50e:	0032      	movs	r2, r6
 801e510:	0020      	movs	r0, r4
 801e512:	0029      	movs	r1, r5
 801e514:	f7e1 ffd2 	bl	80004bc <__aeabi_dcmplt>
 801e518:	2800      	cmp	r0, #0
 801e51a:	d000      	beq.n	801e51e <_dtoa_r+0x476>
 801e51c:	e130      	b.n	801e780 <_dtoa_r+0x6d8>
 801e51e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e520:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e522:	930a      	str	r3, [sp, #40]	@ 0x28
 801e524:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e526:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e528:	2b00      	cmp	r3, #0
 801e52a:	da00      	bge.n	801e52e <_dtoa_r+0x486>
 801e52c:	e177      	b.n	801e81e <_dtoa_r+0x776>
 801e52e:	9a04      	ldr	r2, [sp, #16]
 801e530:	2a0e      	cmp	r2, #14
 801e532:	dd00      	ble.n	801e536 <_dtoa_r+0x48e>
 801e534:	e173      	b.n	801e81e <_dtoa_r+0x776>
 801e536:	4ba0      	ldr	r3, [pc, #640]	@ (801e7b8 <_dtoa_r+0x710>)
 801e538:	00d2      	lsls	r2, r2, #3
 801e53a:	189b      	adds	r3, r3, r2
 801e53c:	685c      	ldr	r4, [r3, #4]
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	9306      	str	r3, [sp, #24]
 801e542:	9407      	str	r4, [sp, #28]
 801e544:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e546:	2b00      	cmp	r3, #0
 801e548:	da03      	bge.n	801e552 <_dtoa_r+0x4aa>
 801e54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	dc00      	bgt.n	801e552 <_dtoa_r+0x4aa>
 801e550:	e106      	b.n	801e760 <_dtoa_r+0x6b8>
 801e552:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e554:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e558:	9d08      	ldr	r5, [sp, #32]
 801e55a:	3b01      	subs	r3, #1
 801e55c:	195b      	adds	r3, r3, r5
 801e55e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e560:	9a06      	ldr	r2, [sp, #24]
 801e562:	9b07      	ldr	r3, [sp, #28]
 801e564:	0030      	movs	r0, r6
 801e566:	0039      	movs	r1, r7
 801e568:	f7e3 fc24 	bl	8001db4 <__aeabi_ddiv>
 801e56c:	f7e4 feec 	bl	8003348 <__aeabi_d2iz>
 801e570:	9009      	str	r0, [sp, #36]	@ 0x24
 801e572:	f7e4 ff25 	bl	80033c0 <__aeabi_i2d>
 801e576:	9a06      	ldr	r2, [sp, #24]
 801e578:	9b07      	ldr	r3, [sp, #28]
 801e57a:	f7e4 f85f 	bl	800263c <__aeabi_dmul>
 801e57e:	0002      	movs	r2, r0
 801e580:	000b      	movs	r3, r1
 801e582:	0030      	movs	r0, r6
 801e584:	0039      	movs	r1, r7
 801e586:	f7e4 fb21 	bl	8002bcc <__aeabi_dsub>
 801e58a:	002b      	movs	r3, r5
 801e58c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e58e:	3501      	adds	r5, #1
 801e590:	3230      	adds	r2, #48	@ 0x30
 801e592:	701a      	strb	r2, [r3, #0]
 801e594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e596:	002c      	movs	r4, r5
 801e598:	429a      	cmp	r2, r3
 801e59a:	d000      	beq.n	801e59e <_dtoa_r+0x4f6>
 801e59c:	e131      	b.n	801e802 <_dtoa_r+0x75a>
 801e59e:	0002      	movs	r2, r0
 801e5a0:	000b      	movs	r3, r1
 801e5a2:	f7e3 f8a3 	bl	80016ec <__aeabi_dadd>
 801e5a6:	9a06      	ldr	r2, [sp, #24]
 801e5a8:	9b07      	ldr	r3, [sp, #28]
 801e5aa:	0006      	movs	r6, r0
 801e5ac:	000f      	movs	r7, r1
 801e5ae:	f7e1 ff99 	bl	80004e4 <__aeabi_dcmpgt>
 801e5b2:	2800      	cmp	r0, #0
 801e5b4:	d000      	beq.n	801e5b8 <_dtoa_r+0x510>
 801e5b6:	e10f      	b.n	801e7d8 <_dtoa_r+0x730>
 801e5b8:	9a06      	ldr	r2, [sp, #24]
 801e5ba:	9b07      	ldr	r3, [sp, #28]
 801e5bc:	0030      	movs	r0, r6
 801e5be:	0039      	movs	r1, r7
 801e5c0:	f7e1 ff76 	bl	80004b0 <__aeabi_dcmpeq>
 801e5c4:	2800      	cmp	r0, #0
 801e5c6:	d003      	beq.n	801e5d0 <_dtoa_r+0x528>
 801e5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5ca:	07dd      	lsls	r5, r3, #31
 801e5cc:	d500      	bpl.n	801e5d0 <_dtoa_r+0x528>
 801e5ce:	e103      	b.n	801e7d8 <_dtoa_r+0x730>
 801e5d0:	9905      	ldr	r1, [sp, #20]
 801e5d2:	9803      	ldr	r0, [sp, #12]
 801e5d4:	f001 f812 	bl	801f5fc <_Bfree>
 801e5d8:	2300      	movs	r3, #0
 801e5da:	7023      	strb	r3, [r4, #0]
 801e5dc:	9b04      	ldr	r3, [sp, #16]
 801e5de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e5e0:	3301      	adds	r3, #1
 801e5e2:	6013      	str	r3, [r2, #0]
 801e5e4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d100      	bne.n	801e5ec <_dtoa_r+0x544>
 801e5ea:	e5a7      	b.n	801e13c <_dtoa_r+0x94>
 801e5ec:	601c      	str	r4, [r3, #0]
 801e5ee:	e5a5      	b.n	801e13c <_dtoa_r+0x94>
 801e5f0:	423d      	tst	r5, r7
 801e5f2:	d005      	beq.n	801e600 <_dtoa_r+0x558>
 801e5f4:	6832      	ldr	r2, [r6, #0]
 801e5f6:	6873      	ldr	r3, [r6, #4]
 801e5f8:	f7e4 f820 	bl	800263c <__aeabi_dmul>
 801e5fc:	003b      	movs	r3, r7
 801e5fe:	3401      	adds	r4, #1
 801e600:	106d      	asrs	r5, r5, #1
 801e602:	3608      	adds	r6, #8
 801e604:	e736      	b.n	801e474 <_dtoa_r+0x3cc>
 801e606:	9b04      	ldr	r3, [sp, #16]
 801e608:	930c      	str	r3, [sp, #48]	@ 0x30
 801e60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e60c:	e75a      	b.n	801e4c4 <_dtoa_r+0x41c>
 801e60e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e610:	4b69      	ldr	r3, [pc, #420]	@ (801e7b8 <_dtoa_r+0x710>)
 801e612:	3a01      	subs	r2, #1
 801e614:	00d2      	lsls	r2, r2, #3
 801e616:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e618:	189b      	adds	r3, r3, r2
 801e61a:	681a      	ldr	r2, [r3, #0]
 801e61c:	685b      	ldr	r3, [r3, #4]
 801e61e:	2900      	cmp	r1, #0
 801e620:	d04c      	beq.n	801e6bc <_dtoa_r+0x614>
 801e622:	2000      	movs	r0, #0
 801e624:	496b      	ldr	r1, [pc, #428]	@ (801e7d4 <_dtoa_r+0x72c>)
 801e626:	f7e3 fbc5 	bl	8001db4 <__aeabi_ddiv>
 801e62a:	0032      	movs	r2, r6
 801e62c:	003b      	movs	r3, r7
 801e62e:	f7e4 facd 	bl	8002bcc <__aeabi_dsub>
 801e632:	9a08      	ldr	r2, [sp, #32]
 801e634:	0006      	movs	r6, r0
 801e636:	4694      	mov	ip, r2
 801e638:	000f      	movs	r7, r1
 801e63a:	9b08      	ldr	r3, [sp, #32]
 801e63c:	9316      	str	r3, [sp, #88]	@ 0x58
 801e63e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e640:	4463      	add	r3, ip
 801e642:	9311      	str	r3, [sp, #68]	@ 0x44
 801e644:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e646:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e648:	f7e4 fe7e 	bl	8003348 <__aeabi_d2iz>
 801e64c:	0005      	movs	r5, r0
 801e64e:	f7e4 feb7 	bl	80033c0 <__aeabi_i2d>
 801e652:	0002      	movs	r2, r0
 801e654:	000b      	movs	r3, r1
 801e656:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e65a:	f7e4 fab7 	bl	8002bcc <__aeabi_dsub>
 801e65e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e660:	3530      	adds	r5, #48	@ 0x30
 801e662:	1c5c      	adds	r4, r3, #1
 801e664:	701d      	strb	r5, [r3, #0]
 801e666:	0032      	movs	r2, r6
 801e668:	003b      	movs	r3, r7
 801e66a:	900a      	str	r0, [sp, #40]	@ 0x28
 801e66c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e66e:	f7e1 ff25 	bl	80004bc <__aeabi_dcmplt>
 801e672:	2800      	cmp	r0, #0
 801e674:	d16a      	bne.n	801e74c <_dtoa_r+0x6a4>
 801e676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e678:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e67a:	2000      	movs	r0, #0
 801e67c:	4950      	ldr	r1, [pc, #320]	@ (801e7c0 <_dtoa_r+0x718>)
 801e67e:	f7e4 faa5 	bl	8002bcc <__aeabi_dsub>
 801e682:	0032      	movs	r2, r6
 801e684:	003b      	movs	r3, r7
 801e686:	f7e1 ff19 	bl	80004bc <__aeabi_dcmplt>
 801e68a:	2800      	cmp	r0, #0
 801e68c:	d000      	beq.n	801e690 <_dtoa_r+0x5e8>
 801e68e:	e0a5      	b.n	801e7dc <_dtoa_r+0x734>
 801e690:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e692:	42a3      	cmp	r3, r4
 801e694:	d100      	bne.n	801e698 <_dtoa_r+0x5f0>
 801e696:	e742      	b.n	801e51e <_dtoa_r+0x476>
 801e698:	2200      	movs	r2, #0
 801e69a:	0030      	movs	r0, r6
 801e69c:	0039      	movs	r1, r7
 801e69e:	4b49      	ldr	r3, [pc, #292]	@ (801e7c4 <_dtoa_r+0x71c>)
 801e6a0:	f7e3 ffcc 	bl	800263c <__aeabi_dmul>
 801e6a4:	2200      	movs	r2, #0
 801e6a6:	0006      	movs	r6, r0
 801e6a8:	000f      	movs	r7, r1
 801e6aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e6ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e6ae:	4b45      	ldr	r3, [pc, #276]	@ (801e7c4 <_dtoa_r+0x71c>)
 801e6b0:	f7e3 ffc4 	bl	800263c <__aeabi_dmul>
 801e6b4:	9416      	str	r4, [sp, #88]	@ 0x58
 801e6b6:	900a      	str	r0, [sp, #40]	@ 0x28
 801e6b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e6ba:	e7c3      	b.n	801e644 <_dtoa_r+0x59c>
 801e6bc:	0030      	movs	r0, r6
 801e6be:	0039      	movs	r1, r7
 801e6c0:	f7e3 ffbc 	bl	800263c <__aeabi_dmul>
 801e6c4:	9d08      	ldr	r5, [sp, #32]
 801e6c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e6c8:	002b      	movs	r3, r5
 801e6ca:	4694      	mov	ip, r2
 801e6cc:	9016      	str	r0, [sp, #88]	@ 0x58
 801e6ce:	9117      	str	r1, [sp, #92]	@ 0x5c
 801e6d0:	4463      	add	r3, ip
 801e6d2:	9319      	str	r3, [sp, #100]	@ 0x64
 801e6d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e6d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e6d8:	f7e4 fe36 	bl	8003348 <__aeabi_d2iz>
 801e6dc:	0004      	movs	r4, r0
 801e6de:	f7e4 fe6f 	bl	80033c0 <__aeabi_i2d>
 801e6e2:	000b      	movs	r3, r1
 801e6e4:	0002      	movs	r2, r0
 801e6e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e6ea:	f7e4 fa6f 	bl	8002bcc <__aeabi_dsub>
 801e6ee:	3430      	adds	r4, #48	@ 0x30
 801e6f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e6f2:	702c      	strb	r4, [r5, #0]
 801e6f4:	3501      	adds	r5, #1
 801e6f6:	0006      	movs	r6, r0
 801e6f8:	000f      	movs	r7, r1
 801e6fa:	42ab      	cmp	r3, r5
 801e6fc:	d129      	bne.n	801e752 <_dtoa_r+0x6aa>
 801e6fe:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801e700:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e702:	9b08      	ldr	r3, [sp, #32]
 801e704:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e706:	469c      	mov	ip, r3
 801e708:	2200      	movs	r2, #0
 801e70a:	4b32      	ldr	r3, [pc, #200]	@ (801e7d4 <_dtoa_r+0x72c>)
 801e70c:	4464      	add	r4, ip
 801e70e:	f7e2 ffed 	bl	80016ec <__aeabi_dadd>
 801e712:	0002      	movs	r2, r0
 801e714:	000b      	movs	r3, r1
 801e716:	0030      	movs	r0, r6
 801e718:	0039      	movs	r1, r7
 801e71a:	f7e1 fee3 	bl	80004e4 <__aeabi_dcmpgt>
 801e71e:	2800      	cmp	r0, #0
 801e720:	d15c      	bne.n	801e7dc <_dtoa_r+0x734>
 801e722:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e724:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e726:	2000      	movs	r0, #0
 801e728:	492a      	ldr	r1, [pc, #168]	@ (801e7d4 <_dtoa_r+0x72c>)
 801e72a:	f7e4 fa4f 	bl	8002bcc <__aeabi_dsub>
 801e72e:	0002      	movs	r2, r0
 801e730:	000b      	movs	r3, r1
 801e732:	0030      	movs	r0, r6
 801e734:	0039      	movs	r1, r7
 801e736:	f7e1 fec1 	bl	80004bc <__aeabi_dcmplt>
 801e73a:	2800      	cmp	r0, #0
 801e73c:	d100      	bne.n	801e740 <_dtoa_r+0x698>
 801e73e:	e6ee      	b.n	801e51e <_dtoa_r+0x476>
 801e740:	0023      	movs	r3, r4
 801e742:	3c01      	subs	r4, #1
 801e744:	7822      	ldrb	r2, [r4, #0]
 801e746:	2a30      	cmp	r2, #48	@ 0x30
 801e748:	d0fa      	beq.n	801e740 <_dtoa_r+0x698>
 801e74a:	001c      	movs	r4, r3
 801e74c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e74e:	9304      	str	r3, [sp, #16]
 801e750:	e73e      	b.n	801e5d0 <_dtoa_r+0x528>
 801e752:	2200      	movs	r2, #0
 801e754:	4b1b      	ldr	r3, [pc, #108]	@ (801e7c4 <_dtoa_r+0x71c>)
 801e756:	f7e3 ff71 	bl	800263c <__aeabi_dmul>
 801e75a:	900a      	str	r0, [sp, #40]	@ 0x28
 801e75c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e75e:	e7b9      	b.n	801e6d4 <_dtoa_r+0x62c>
 801e760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e762:	2b00      	cmp	r3, #0
 801e764:	d10c      	bne.n	801e780 <_dtoa_r+0x6d8>
 801e766:	9806      	ldr	r0, [sp, #24]
 801e768:	9907      	ldr	r1, [sp, #28]
 801e76a:	2200      	movs	r2, #0
 801e76c:	4b18      	ldr	r3, [pc, #96]	@ (801e7d0 <_dtoa_r+0x728>)
 801e76e:	f7e3 ff65 	bl	800263c <__aeabi_dmul>
 801e772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e776:	f7e1 febf 	bl	80004f8 <__aeabi_dcmpge>
 801e77a:	2800      	cmp	r0, #0
 801e77c:	d100      	bne.n	801e780 <_dtoa_r+0x6d8>
 801e77e:	e164      	b.n	801ea4a <_dtoa_r+0x9a2>
 801e780:	2600      	movs	r6, #0
 801e782:	0037      	movs	r7, r6
 801e784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e786:	9c08      	ldr	r4, [sp, #32]
 801e788:	43db      	mvns	r3, r3
 801e78a:	930c      	str	r3, [sp, #48]	@ 0x30
 801e78c:	2300      	movs	r3, #0
 801e78e:	9304      	str	r3, [sp, #16]
 801e790:	0031      	movs	r1, r6
 801e792:	9803      	ldr	r0, [sp, #12]
 801e794:	f000 ff32 	bl	801f5fc <_Bfree>
 801e798:	2f00      	cmp	r7, #0
 801e79a:	d0d7      	beq.n	801e74c <_dtoa_r+0x6a4>
 801e79c:	9b04      	ldr	r3, [sp, #16]
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d005      	beq.n	801e7ae <_dtoa_r+0x706>
 801e7a2:	42bb      	cmp	r3, r7
 801e7a4:	d003      	beq.n	801e7ae <_dtoa_r+0x706>
 801e7a6:	0019      	movs	r1, r3
 801e7a8:	9803      	ldr	r0, [sp, #12]
 801e7aa:	f000 ff27 	bl	801f5fc <_Bfree>
 801e7ae:	0039      	movs	r1, r7
 801e7b0:	9803      	ldr	r0, [sp, #12]
 801e7b2:	f000 ff23 	bl	801f5fc <_Bfree>
 801e7b6:	e7c9      	b.n	801e74c <_dtoa_r+0x6a4>
 801e7b8:	08022f40 	.word	0x08022f40
 801e7bc:	08022f18 	.word	0x08022f18
 801e7c0:	3ff00000 	.word	0x3ff00000
 801e7c4:	40240000 	.word	0x40240000
 801e7c8:	401c0000 	.word	0x401c0000
 801e7cc:	fcc00000 	.word	0xfcc00000
 801e7d0:	40140000 	.word	0x40140000
 801e7d4:	3fe00000 	.word	0x3fe00000
 801e7d8:	9b04      	ldr	r3, [sp, #16]
 801e7da:	930c      	str	r3, [sp, #48]	@ 0x30
 801e7dc:	0023      	movs	r3, r4
 801e7de:	001c      	movs	r4, r3
 801e7e0:	3b01      	subs	r3, #1
 801e7e2:	781a      	ldrb	r2, [r3, #0]
 801e7e4:	2a39      	cmp	r2, #57	@ 0x39
 801e7e6:	d108      	bne.n	801e7fa <_dtoa_r+0x752>
 801e7e8:	9a08      	ldr	r2, [sp, #32]
 801e7ea:	429a      	cmp	r2, r3
 801e7ec:	d1f7      	bne.n	801e7de <_dtoa_r+0x736>
 801e7ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e7f0:	9908      	ldr	r1, [sp, #32]
 801e7f2:	3201      	adds	r2, #1
 801e7f4:	920c      	str	r2, [sp, #48]	@ 0x30
 801e7f6:	2230      	movs	r2, #48	@ 0x30
 801e7f8:	700a      	strb	r2, [r1, #0]
 801e7fa:	781a      	ldrb	r2, [r3, #0]
 801e7fc:	3201      	adds	r2, #1
 801e7fe:	701a      	strb	r2, [r3, #0]
 801e800:	e7a4      	b.n	801e74c <_dtoa_r+0x6a4>
 801e802:	2200      	movs	r2, #0
 801e804:	4bc6      	ldr	r3, [pc, #792]	@ (801eb20 <_dtoa_r+0xa78>)
 801e806:	f7e3 ff19 	bl	800263c <__aeabi_dmul>
 801e80a:	2200      	movs	r2, #0
 801e80c:	2300      	movs	r3, #0
 801e80e:	0006      	movs	r6, r0
 801e810:	000f      	movs	r7, r1
 801e812:	f7e1 fe4d 	bl	80004b0 <__aeabi_dcmpeq>
 801e816:	2800      	cmp	r0, #0
 801e818:	d100      	bne.n	801e81c <_dtoa_r+0x774>
 801e81a:	e6a1      	b.n	801e560 <_dtoa_r+0x4b8>
 801e81c:	e6d8      	b.n	801e5d0 <_dtoa_r+0x528>
 801e81e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e820:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801e822:	9c06      	ldr	r4, [sp, #24]
 801e824:	2f00      	cmp	r7, #0
 801e826:	d014      	beq.n	801e852 <_dtoa_r+0x7aa>
 801e828:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801e82a:	2a01      	cmp	r2, #1
 801e82c:	dd00      	ble.n	801e830 <_dtoa_r+0x788>
 801e82e:	e0c8      	b.n	801e9c2 <_dtoa_r+0x91a>
 801e830:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e832:	2a00      	cmp	r2, #0
 801e834:	d100      	bne.n	801e838 <_dtoa_r+0x790>
 801e836:	e0be      	b.n	801e9b6 <_dtoa_r+0x90e>
 801e838:	4aba      	ldr	r2, [pc, #744]	@ (801eb24 <_dtoa_r+0xa7c>)
 801e83a:	189b      	adds	r3, r3, r2
 801e83c:	9a06      	ldr	r2, [sp, #24]
 801e83e:	2101      	movs	r1, #1
 801e840:	18d2      	adds	r2, r2, r3
 801e842:	9206      	str	r2, [sp, #24]
 801e844:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e846:	9803      	ldr	r0, [sp, #12]
 801e848:	18d3      	adds	r3, r2, r3
 801e84a:	930d      	str	r3, [sp, #52]	@ 0x34
 801e84c:	f000 ffda 	bl	801f804 <__i2b>
 801e850:	0007      	movs	r7, r0
 801e852:	2c00      	cmp	r4, #0
 801e854:	d00e      	beq.n	801e874 <_dtoa_r+0x7cc>
 801e856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e858:	2b00      	cmp	r3, #0
 801e85a:	dd0b      	ble.n	801e874 <_dtoa_r+0x7cc>
 801e85c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e85e:	0023      	movs	r3, r4
 801e860:	4294      	cmp	r4, r2
 801e862:	dd00      	ble.n	801e866 <_dtoa_r+0x7be>
 801e864:	0013      	movs	r3, r2
 801e866:	9a06      	ldr	r2, [sp, #24]
 801e868:	1ae4      	subs	r4, r4, r3
 801e86a:	1ad2      	subs	r2, r2, r3
 801e86c:	9206      	str	r2, [sp, #24]
 801e86e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e870:	1ad3      	subs	r3, r2, r3
 801e872:	930d      	str	r3, [sp, #52]	@ 0x34
 801e874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e876:	2b00      	cmp	r3, #0
 801e878:	d01f      	beq.n	801e8ba <_dtoa_r+0x812>
 801e87a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d100      	bne.n	801e882 <_dtoa_r+0x7da>
 801e880:	e0b5      	b.n	801e9ee <_dtoa_r+0x946>
 801e882:	2d00      	cmp	r5, #0
 801e884:	d010      	beq.n	801e8a8 <_dtoa_r+0x800>
 801e886:	0039      	movs	r1, r7
 801e888:	002a      	movs	r2, r5
 801e88a:	9803      	ldr	r0, [sp, #12]
 801e88c:	f001 f884 	bl	801f998 <__pow5mult>
 801e890:	9a05      	ldr	r2, [sp, #20]
 801e892:	0001      	movs	r1, r0
 801e894:	0007      	movs	r7, r0
 801e896:	9803      	ldr	r0, [sp, #12]
 801e898:	f000 ffcc 	bl	801f834 <__multiply>
 801e89c:	0006      	movs	r6, r0
 801e89e:	9905      	ldr	r1, [sp, #20]
 801e8a0:	9803      	ldr	r0, [sp, #12]
 801e8a2:	f000 feab 	bl	801f5fc <_Bfree>
 801e8a6:	9605      	str	r6, [sp, #20]
 801e8a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e8aa:	1b5a      	subs	r2, r3, r5
 801e8ac:	42ab      	cmp	r3, r5
 801e8ae:	d004      	beq.n	801e8ba <_dtoa_r+0x812>
 801e8b0:	9905      	ldr	r1, [sp, #20]
 801e8b2:	9803      	ldr	r0, [sp, #12]
 801e8b4:	f001 f870 	bl	801f998 <__pow5mult>
 801e8b8:	9005      	str	r0, [sp, #20]
 801e8ba:	2101      	movs	r1, #1
 801e8bc:	9803      	ldr	r0, [sp, #12]
 801e8be:	f000 ffa1 	bl	801f804 <__i2b>
 801e8c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e8c4:	0006      	movs	r6, r0
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d100      	bne.n	801e8cc <_dtoa_r+0x824>
 801e8ca:	e1bc      	b.n	801ec46 <_dtoa_r+0xb9e>
 801e8cc:	001a      	movs	r2, r3
 801e8ce:	0001      	movs	r1, r0
 801e8d0:	9803      	ldr	r0, [sp, #12]
 801e8d2:	f001 f861 	bl	801f998 <__pow5mult>
 801e8d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e8d8:	0006      	movs	r6, r0
 801e8da:	2500      	movs	r5, #0
 801e8dc:	2b01      	cmp	r3, #1
 801e8de:	dc16      	bgt.n	801e90e <_dtoa_r+0x866>
 801e8e0:	2500      	movs	r5, #0
 801e8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8e4:	42ab      	cmp	r3, r5
 801e8e6:	d10e      	bne.n	801e906 <_dtoa_r+0x85e>
 801e8e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e8ea:	031b      	lsls	r3, r3, #12
 801e8ec:	42ab      	cmp	r3, r5
 801e8ee:	d10a      	bne.n	801e906 <_dtoa_r+0x85e>
 801e8f0:	4b8d      	ldr	r3, [pc, #564]	@ (801eb28 <_dtoa_r+0xa80>)
 801e8f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e8f4:	4213      	tst	r3, r2
 801e8f6:	d006      	beq.n	801e906 <_dtoa_r+0x85e>
 801e8f8:	9b06      	ldr	r3, [sp, #24]
 801e8fa:	3501      	adds	r5, #1
 801e8fc:	3301      	adds	r3, #1
 801e8fe:	9306      	str	r3, [sp, #24]
 801e900:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e902:	3301      	adds	r3, #1
 801e904:	930d      	str	r3, [sp, #52]	@ 0x34
 801e906:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e908:	2001      	movs	r0, #1
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d008      	beq.n	801e920 <_dtoa_r+0x878>
 801e90e:	6933      	ldr	r3, [r6, #16]
 801e910:	3303      	adds	r3, #3
 801e912:	009b      	lsls	r3, r3, #2
 801e914:	18f3      	adds	r3, r6, r3
 801e916:	6858      	ldr	r0, [r3, #4]
 801e918:	f000 ff24 	bl	801f764 <__hi0bits>
 801e91c:	2320      	movs	r3, #32
 801e91e:	1a18      	subs	r0, r3, r0
 801e920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e922:	1818      	adds	r0, r3, r0
 801e924:	0002      	movs	r2, r0
 801e926:	231f      	movs	r3, #31
 801e928:	401a      	ands	r2, r3
 801e92a:	4218      	tst	r0, r3
 801e92c:	d065      	beq.n	801e9fa <_dtoa_r+0x952>
 801e92e:	3301      	adds	r3, #1
 801e930:	1a9b      	subs	r3, r3, r2
 801e932:	2b04      	cmp	r3, #4
 801e934:	dd5d      	ble.n	801e9f2 <_dtoa_r+0x94a>
 801e936:	231c      	movs	r3, #28
 801e938:	1a9b      	subs	r3, r3, r2
 801e93a:	9a06      	ldr	r2, [sp, #24]
 801e93c:	18e4      	adds	r4, r4, r3
 801e93e:	18d2      	adds	r2, r2, r3
 801e940:	9206      	str	r2, [sp, #24]
 801e942:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e944:	18d3      	adds	r3, r2, r3
 801e946:	930d      	str	r3, [sp, #52]	@ 0x34
 801e948:	9b06      	ldr	r3, [sp, #24]
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	dd05      	ble.n	801e95a <_dtoa_r+0x8b2>
 801e94e:	001a      	movs	r2, r3
 801e950:	9905      	ldr	r1, [sp, #20]
 801e952:	9803      	ldr	r0, [sp, #12]
 801e954:	f001 f87c 	bl	801fa50 <__lshift>
 801e958:	9005      	str	r0, [sp, #20]
 801e95a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	dd05      	ble.n	801e96c <_dtoa_r+0x8c4>
 801e960:	0031      	movs	r1, r6
 801e962:	001a      	movs	r2, r3
 801e964:	9803      	ldr	r0, [sp, #12]
 801e966:	f001 f873 	bl	801fa50 <__lshift>
 801e96a:	0006      	movs	r6, r0
 801e96c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d045      	beq.n	801e9fe <_dtoa_r+0x956>
 801e972:	0031      	movs	r1, r6
 801e974:	9805      	ldr	r0, [sp, #20]
 801e976:	f001 f8d7 	bl	801fb28 <__mcmp>
 801e97a:	2800      	cmp	r0, #0
 801e97c:	da3f      	bge.n	801e9fe <_dtoa_r+0x956>
 801e97e:	9b04      	ldr	r3, [sp, #16]
 801e980:	220a      	movs	r2, #10
 801e982:	3b01      	subs	r3, #1
 801e984:	930c      	str	r3, [sp, #48]	@ 0x30
 801e986:	9905      	ldr	r1, [sp, #20]
 801e988:	2300      	movs	r3, #0
 801e98a:	9803      	ldr	r0, [sp, #12]
 801e98c:	f000 fe5a 	bl	801f644 <__multadd>
 801e990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e992:	9005      	str	r0, [sp, #20]
 801e994:	2b00      	cmp	r3, #0
 801e996:	d100      	bne.n	801e99a <_dtoa_r+0x8f2>
 801e998:	e15c      	b.n	801ec54 <_dtoa_r+0xbac>
 801e99a:	2300      	movs	r3, #0
 801e99c:	0039      	movs	r1, r7
 801e99e:	220a      	movs	r2, #10
 801e9a0:	9803      	ldr	r0, [sp, #12]
 801e9a2:	f000 fe4f 	bl	801f644 <__multadd>
 801e9a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9a8:	0007      	movs	r7, r0
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	dc55      	bgt.n	801ea5a <_dtoa_r+0x9b2>
 801e9ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e9b0:	2b02      	cmp	r3, #2
 801e9b2:	dc2d      	bgt.n	801ea10 <_dtoa_r+0x968>
 801e9b4:	e051      	b.n	801ea5a <_dtoa_r+0x9b2>
 801e9b6:	2336      	movs	r3, #54	@ 0x36
 801e9b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e9ba:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801e9bc:	9c06      	ldr	r4, [sp, #24]
 801e9be:	1a9b      	subs	r3, r3, r2
 801e9c0:	e73c      	b.n	801e83c <_dtoa_r+0x794>
 801e9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9c4:	1e5d      	subs	r5, r3, #1
 801e9c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e9c8:	42ab      	cmp	r3, r5
 801e9ca:	db08      	blt.n	801e9de <_dtoa_r+0x936>
 801e9cc:	1b5d      	subs	r5, r3, r5
 801e9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9d0:	9c06      	ldr	r4, [sp, #24]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	db00      	blt.n	801e9d8 <_dtoa_r+0x930>
 801e9d6:	e731      	b.n	801e83c <_dtoa_r+0x794>
 801e9d8:	1ae4      	subs	r4, r4, r3
 801e9da:	2300      	movs	r3, #0
 801e9dc:	e72e      	b.n	801e83c <_dtoa_r+0x794>
 801e9de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e9e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e9e2:	1aeb      	subs	r3, r5, r3
 801e9e4:	18d3      	adds	r3, r2, r3
 801e9e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 801e9e8:	9314      	str	r3, [sp, #80]	@ 0x50
 801e9ea:	2500      	movs	r5, #0
 801e9ec:	e7ef      	b.n	801e9ce <_dtoa_r+0x926>
 801e9ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e9f0:	e75e      	b.n	801e8b0 <_dtoa_r+0x808>
 801e9f2:	2b04      	cmp	r3, #4
 801e9f4:	d0a8      	beq.n	801e948 <_dtoa_r+0x8a0>
 801e9f6:	331c      	adds	r3, #28
 801e9f8:	e79f      	b.n	801e93a <_dtoa_r+0x892>
 801e9fa:	0013      	movs	r3, r2
 801e9fc:	e7fb      	b.n	801e9f6 <_dtoa_r+0x94e>
 801e9fe:	9b04      	ldr	r3, [sp, #16]
 801ea00:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea04:	930e      	str	r3, [sp, #56]	@ 0x38
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	dc23      	bgt.n	801ea52 <_dtoa_r+0x9aa>
 801ea0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ea0c:	2b02      	cmp	r3, #2
 801ea0e:	dd20      	ble.n	801ea52 <_dtoa_r+0x9aa>
 801ea10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d000      	beq.n	801ea18 <_dtoa_r+0x970>
 801ea16:	e6b5      	b.n	801e784 <_dtoa_r+0x6dc>
 801ea18:	0031      	movs	r1, r6
 801ea1a:	2205      	movs	r2, #5
 801ea1c:	9803      	ldr	r0, [sp, #12]
 801ea1e:	f000 fe11 	bl	801f644 <__multadd>
 801ea22:	0006      	movs	r6, r0
 801ea24:	0001      	movs	r1, r0
 801ea26:	9805      	ldr	r0, [sp, #20]
 801ea28:	f001 f87e 	bl	801fb28 <__mcmp>
 801ea2c:	2800      	cmp	r0, #0
 801ea2e:	dc00      	bgt.n	801ea32 <_dtoa_r+0x98a>
 801ea30:	e6a8      	b.n	801e784 <_dtoa_r+0x6dc>
 801ea32:	9b08      	ldr	r3, [sp, #32]
 801ea34:	9a08      	ldr	r2, [sp, #32]
 801ea36:	1c5c      	adds	r4, r3, #1
 801ea38:	2331      	movs	r3, #49	@ 0x31
 801ea3a:	7013      	strb	r3, [r2, #0]
 801ea3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea3e:	3301      	adds	r3, #1
 801ea40:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea42:	e6a3      	b.n	801e78c <_dtoa_r+0x6e4>
 801ea44:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ea46:	0037      	movs	r7, r6
 801ea48:	e7f3      	b.n	801ea32 <_dtoa_r+0x98a>
 801ea4a:	9b04      	ldr	r3, [sp, #16]
 801ea4c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801ea4e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea50:	e7f9      	b.n	801ea46 <_dtoa_r+0x99e>
 801ea52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d100      	bne.n	801ea5a <_dtoa_r+0x9b2>
 801ea58:	e100      	b.n	801ec5c <_dtoa_r+0xbb4>
 801ea5a:	2c00      	cmp	r4, #0
 801ea5c:	dd05      	ble.n	801ea6a <_dtoa_r+0x9c2>
 801ea5e:	0039      	movs	r1, r7
 801ea60:	0022      	movs	r2, r4
 801ea62:	9803      	ldr	r0, [sp, #12]
 801ea64:	f000 fff4 	bl	801fa50 <__lshift>
 801ea68:	0007      	movs	r7, r0
 801ea6a:	0038      	movs	r0, r7
 801ea6c:	2d00      	cmp	r5, #0
 801ea6e:	d018      	beq.n	801eaa2 <_dtoa_r+0x9fa>
 801ea70:	6879      	ldr	r1, [r7, #4]
 801ea72:	9803      	ldr	r0, [sp, #12]
 801ea74:	f000 fd7e 	bl	801f574 <_Balloc>
 801ea78:	1e04      	subs	r4, r0, #0
 801ea7a:	d105      	bne.n	801ea88 <_dtoa_r+0x9e0>
 801ea7c:	0022      	movs	r2, r4
 801ea7e:	4b2b      	ldr	r3, [pc, #172]	@ (801eb2c <_dtoa_r+0xa84>)
 801ea80:	482b      	ldr	r0, [pc, #172]	@ (801eb30 <_dtoa_r+0xa88>)
 801ea82:	492c      	ldr	r1, [pc, #176]	@ (801eb34 <_dtoa_r+0xa8c>)
 801ea84:	f7ff fb25 	bl	801e0d2 <_dtoa_r+0x2a>
 801ea88:	0039      	movs	r1, r7
 801ea8a:	693a      	ldr	r2, [r7, #16]
 801ea8c:	310c      	adds	r1, #12
 801ea8e:	3202      	adds	r2, #2
 801ea90:	0092      	lsls	r2, r2, #2
 801ea92:	300c      	adds	r0, #12
 801ea94:	f7ff fa6a 	bl	801df6c <memcpy>
 801ea98:	2201      	movs	r2, #1
 801ea9a:	0021      	movs	r1, r4
 801ea9c:	9803      	ldr	r0, [sp, #12]
 801ea9e:	f000 ffd7 	bl	801fa50 <__lshift>
 801eaa2:	9b08      	ldr	r3, [sp, #32]
 801eaa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eaa6:	9306      	str	r3, [sp, #24]
 801eaa8:	3b01      	subs	r3, #1
 801eaaa:	189b      	adds	r3, r3, r2
 801eaac:	2201      	movs	r2, #1
 801eaae:	9704      	str	r7, [sp, #16]
 801eab0:	0007      	movs	r7, r0
 801eab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eab6:	4013      	ands	r3, r2
 801eab8:	930e      	str	r3, [sp, #56]	@ 0x38
 801eaba:	0031      	movs	r1, r6
 801eabc:	9805      	ldr	r0, [sp, #20]
 801eabe:	f7ff fa65 	bl	801df8c <quorem>
 801eac2:	9904      	ldr	r1, [sp, #16]
 801eac4:	0005      	movs	r5, r0
 801eac6:	900a      	str	r0, [sp, #40]	@ 0x28
 801eac8:	9805      	ldr	r0, [sp, #20]
 801eaca:	f001 f82d 	bl	801fb28 <__mcmp>
 801eace:	003a      	movs	r2, r7
 801ead0:	900d      	str	r0, [sp, #52]	@ 0x34
 801ead2:	0031      	movs	r1, r6
 801ead4:	9803      	ldr	r0, [sp, #12]
 801ead6:	f001 f843 	bl	801fb60 <__mdiff>
 801eada:	2201      	movs	r2, #1
 801eadc:	68c3      	ldr	r3, [r0, #12]
 801eade:	0004      	movs	r4, r0
 801eae0:	3530      	adds	r5, #48	@ 0x30
 801eae2:	9209      	str	r2, [sp, #36]	@ 0x24
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d104      	bne.n	801eaf2 <_dtoa_r+0xa4a>
 801eae8:	0001      	movs	r1, r0
 801eaea:	9805      	ldr	r0, [sp, #20]
 801eaec:	f001 f81c 	bl	801fb28 <__mcmp>
 801eaf0:	9009      	str	r0, [sp, #36]	@ 0x24
 801eaf2:	0021      	movs	r1, r4
 801eaf4:	9803      	ldr	r0, [sp, #12]
 801eaf6:	f000 fd81 	bl	801f5fc <_Bfree>
 801eafa:	9b06      	ldr	r3, [sp, #24]
 801eafc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eafe:	1c5c      	adds	r4, r3, #1
 801eb00:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801eb02:	4313      	orrs	r3, r2
 801eb04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eb06:	4313      	orrs	r3, r2
 801eb08:	d116      	bne.n	801eb38 <_dtoa_r+0xa90>
 801eb0a:	2d39      	cmp	r5, #57	@ 0x39
 801eb0c:	d02f      	beq.n	801eb6e <_dtoa_r+0xac6>
 801eb0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	dd01      	ble.n	801eb18 <_dtoa_r+0xa70>
 801eb14:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801eb16:	3531      	adds	r5, #49	@ 0x31
 801eb18:	9b06      	ldr	r3, [sp, #24]
 801eb1a:	701d      	strb	r5, [r3, #0]
 801eb1c:	e638      	b.n	801e790 <_dtoa_r+0x6e8>
 801eb1e:	46c0      	nop			@ (mov r8, r8)
 801eb20:	40240000 	.word	0x40240000
 801eb24:	00000433 	.word	0x00000433
 801eb28:	7ff00000 	.word	0x7ff00000
 801eb2c:	08022e41 	.word	0x08022e41
 801eb30:	08022de9 	.word	0x08022de9
 801eb34:	000002ef 	.word	0x000002ef
 801eb38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	db04      	blt.n	801eb48 <_dtoa_r+0xaa0>
 801eb3e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801eb40:	4313      	orrs	r3, r2
 801eb42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eb44:	4313      	orrs	r3, r2
 801eb46:	d11e      	bne.n	801eb86 <_dtoa_r+0xade>
 801eb48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	dde4      	ble.n	801eb18 <_dtoa_r+0xa70>
 801eb4e:	9905      	ldr	r1, [sp, #20]
 801eb50:	2201      	movs	r2, #1
 801eb52:	9803      	ldr	r0, [sp, #12]
 801eb54:	f000 ff7c 	bl	801fa50 <__lshift>
 801eb58:	0031      	movs	r1, r6
 801eb5a:	9005      	str	r0, [sp, #20]
 801eb5c:	f000 ffe4 	bl	801fb28 <__mcmp>
 801eb60:	2800      	cmp	r0, #0
 801eb62:	dc02      	bgt.n	801eb6a <_dtoa_r+0xac2>
 801eb64:	d1d8      	bne.n	801eb18 <_dtoa_r+0xa70>
 801eb66:	07eb      	lsls	r3, r5, #31
 801eb68:	d5d6      	bpl.n	801eb18 <_dtoa_r+0xa70>
 801eb6a:	2d39      	cmp	r5, #57	@ 0x39
 801eb6c:	d1d2      	bne.n	801eb14 <_dtoa_r+0xa6c>
 801eb6e:	2339      	movs	r3, #57	@ 0x39
 801eb70:	9a06      	ldr	r2, [sp, #24]
 801eb72:	7013      	strb	r3, [r2, #0]
 801eb74:	0023      	movs	r3, r4
 801eb76:	001c      	movs	r4, r3
 801eb78:	3b01      	subs	r3, #1
 801eb7a:	781a      	ldrb	r2, [r3, #0]
 801eb7c:	2a39      	cmp	r2, #57	@ 0x39
 801eb7e:	d04f      	beq.n	801ec20 <_dtoa_r+0xb78>
 801eb80:	3201      	adds	r2, #1
 801eb82:	701a      	strb	r2, [r3, #0]
 801eb84:	e604      	b.n	801e790 <_dtoa_r+0x6e8>
 801eb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	dd03      	ble.n	801eb94 <_dtoa_r+0xaec>
 801eb8c:	2d39      	cmp	r5, #57	@ 0x39
 801eb8e:	d0ee      	beq.n	801eb6e <_dtoa_r+0xac6>
 801eb90:	3501      	adds	r5, #1
 801eb92:	e7c1      	b.n	801eb18 <_dtoa_r+0xa70>
 801eb94:	9b06      	ldr	r3, [sp, #24]
 801eb96:	9a06      	ldr	r2, [sp, #24]
 801eb98:	701d      	strb	r5, [r3, #0]
 801eb9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb9c:	4293      	cmp	r3, r2
 801eb9e:	d02a      	beq.n	801ebf6 <_dtoa_r+0xb4e>
 801eba0:	2300      	movs	r3, #0
 801eba2:	220a      	movs	r2, #10
 801eba4:	9905      	ldr	r1, [sp, #20]
 801eba6:	9803      	ldr	r0, [sp, #12]
 801eba8:	f000 fd4c 	bl	801f644 <__multadd>
 801ebac:	9b04      	ldr	r3, [sp, #16]
 801ebae:	9005      	str	r0, [sp, #20]
 801ebb0:	42bb      	cmp	r3, r7
 801ebb2:	d109      	bne.n	801ebc8 <_dtoa_r+0xb20>
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	220a      	movs	r2, #10
 801ebb8:	9904      	ldr	r1, [sp, #16]
 801ebba:	9803      	ldr	r0, [sp, #12]
 801ebbc:	f000 fd42 	bl	801f644 <__multadd>
 801ebc0:	9004      	str	r0, [sp, #16]
 801ebc2:	0007      	movs	r7, r0
 801ebc4:	9406      	str	r4, [sp, #24]
 801ebc6:	e778      	b.n	801eaba <_dtoa_r+0xa12>
 801ebc8:	9904      	ldr	r1, [sp, #16]
 801ebca:	2300      	movs	r3, #0
 801ebcc:	220a      	movs	r2, #10
 801ebce:	9803      	ldr	r0, [sp, #12]
 801ebd0:	f000 fd38 	bl	801f644 <__multadd>
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	9004      	str	r0, [sp, #16]
 801ebd8:	220a      	movs	r2, #10
 801ebda:	0039      	movs	r1, r7
 801ebdc:	9803      	ldr	r0, [sp, #12]
 801ebde:	f000 fd31 	bl	801f644 <__multadd>
 801ebe2:	e7ee      	b.n	801ebc2 <_dtoa_r+0xb1a>
 801ebe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebe6:	2401      	movs	r4, #1
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	dd00      	ble.n	801ebee <_dtoa_r+0xb46>
 801ebec:	001c      	movs	r4, r3
 801ebee:	9b08      	ldr	r3, [sp, #32]
 801ebf0:	191c      	adds	r4, r3, r4
 801ebf2:	2300      	movs	r3, #0
 801ebf4:	9304      	str	r3, [sp, #16]
 801ebf6:	9905      	ldr	r1, [sp, #20]
 801ebf8:	2201      	movs	r2, #1
 801ebfa:	9803      	ldr	r0, [sp, #12]
 801ebfc:	f000 ff28 	bl	801fa50 <__lshift>
 801ec00:	0031      	movs	r1, r6
 801ec02:	9005      	str	r0, [sp, #20]
 801ec04:	f000 ff90 	bl	801fb28 <__mcmp>
 801ec08:	2800      	cmp	r0, #0
 801ec0a:	dcb3      	bgt.n	801eb74 <_dtoa_r+0xacc>
 801ec0c:	d101      	bne.n	801ec12 <_dtoa_r+0xb6a>
 801ec0e:	07ed      	lsls	r5, r5, #31
 801ec10:	d4b0      	bmi.n	801eb74 <_dtoa_r+0xacc>
 801ec12:	0023      	movs	r3, r4
 801ec14:	001c      	movs	r4, r3
 801ec16:	3b01      	subs	r3, #1
 801ec18:	781a      	ldrb	r2, [r3, #0]
 801ec1a:	2a30      	cmp	r2, #48	@ 0x30
 801ec1c:	d0fa      	beq.n	801ec14 <_dtoa_r+0xb6c>
 801ec1e:	e5b7      	b.n	801e790 <_dtoa_r+0x6e8>
 801ec20:	9a08      	ldr	r2, [sp, #32]
 801ec22:	429a      	cmp	r2, r3
 801ec24:	d1a7      	bne.n	801eb76 <_dtoa_r+0xace>
 801ec26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec28:	3301      	adds	r3, #1
 801ec2a:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec2c:	2331      	movs	r3, #49	@ 0x31
 801ec2e:	7013      	strb	r3, [r2, #0]
 801ec30:	e5ae      	b.n	801e790 <_dtoa_r+0x6e8>
 801ec32:	4b15      	ldr	r3, [pc, #84]	@ (801ec88 <_dtoa_r+0xbe0>)
 801ec34:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ec36:	9308      	str	r3, [sp, #32]
 801ec38:	4b14      	ldr	r3, [pc, #80]	@ (801ec8c <_dtoa_r+0xbe4>)
 801ec3a:	2a00      	cmp	r2, #0
 801ec3c:	d001      	beq.n	801ec42 <_dtoa_r+0xb9a>
 801ec3e:	f7ff fa7b 	bl	801e138 <_dtoa_r+0x90>
 801ec42:	f7ff fa7b 	bl	801e13c <_dtoa_r+0x94>
 801ec46:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ec48:	2b01      	cmp	r3, #1
 801ec4a:	dc00      	bgt.n	801ec4e <_dtoa_r+0xba6>
 801ec4c:	e648      	b.n	801e8e0 <_dtoa_r+0x838>
 801ec4e:	2001      	movs	r0, #1
 801ec50:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ec52:	e665      	b.n	801e920 <_dtoa_r+0x878>
 801ec54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	dc00      	bgt.n	801ec5c <_dtoa_r+0xbb4>
 801ec5a:	e6d6      	b.n	801ea0a <_dtoa_r+0x962>
 801ec5c:	2400      	movs	r4, #0
 801ec5e:	0031      	movs	r1, r6
 801ec60:	9805      	ldr	r0, [sp, #20]
 801ec62:	f7ff f993 	bl	801df8c <quorem>
 801ec66:	9b08      	ldr	r3, [sp, #32]
 801ec68:	3030      	adds	r0, #48	@ 0x30
 801ec6a:	5518      	strb	r0, [r3, r4]
 801ec6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec6e:	3401      	adds	r4, #1
 801ec70:	0005      	movs	r5, r0
 801ec72:	429c      	cmp	r4, r3
 801ec74:	dab6      	bge.n	801ebe4 <_dtoa_r+0xb3c>
 801ec76:	2300      	movs	r3, #0
 801ec78:	220a      	movs	r2, #10
 801ec7a:	9905      	ldr	r1, [sp, #20]
 801ec7c:	9803      	ldr	r0, [sp, #12]
 801ec7e:	f000 fce1 	bl	801f644 <__multadd>
 801ec82:	9005      	str	r0, [sp, #20]
 801ec84:	e7eb      	b.n	801ec5e <_dtoa_r+0xbb6>
 801ec86:	46c0      	nop			@ (mov r8, r8)
 801ec88:	08022dc5 	.word	0x08022dc5
 801ec8c:	08022dcd 	.word	0x08022dcd

0801ec90 <_free_r>:
 801ec90:	b570      	push	{r4, r5, r6, lr}
 801ec92:	0005      	movs	r5, r0
 801ec94:	1e0c      	subs	r4, r1, #0
 801ec96:	d010      	beq.n	801ecba <_free_r+0x2a>
 801ec98:	3c04      	subs	r4, #4
 801ec9a:	6823      	ldr	r3, [r4, #0]
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	da00      	bge.n	801eca2 <_free_r+0x12>
 801eca0:	18e4      	adds	r4, r4, r3
 801eca2:	0028      	movs	r0, r5
 801eca4:	f000 fc56 	bl	801f554 <__malloc_lock>
 801eca8:	4a1d      	ldr	r2, [pc, #116]	@ (801ed20 <_free_r+0x90>)
 801ecaa:	6813      	ldr	r3, [r2, #0]
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d105      	bne.n	801ecbc <_free_r+0x2c>
 801ecb0:	6063      	str	r3, [r4, #4]
 801ecb2:	6014      	str	r4, [r2, #0]
 801ecb4:	0028      	movs	r0, r5
 801ecb6:	f000 fc55 	bl	801f564 <__malloc_unlock>
 801ecba:	bd70      	pop	{r4, r5, r6, pc}
 801ecbc:	42a3      	cmp	r3, r4
 801ecbe:	d908      	bls.n	801ecd2 <_free_r+0x42>
 801ecc0:	6820      	ldr	r0, [r4, #0]
 801ecc2:	1821      	adds	r1, r4, r0
 801ecc4:	428b      	cmp	r3, r1
 801ecc6:	d1f3      	bne.n	801ecb0 <_free_r+0x20>
 801ecc8:	6819      	ldr	r1, [r3, #0]
 801ecca:	685b      	ldr	r3, [r3, #4]
 801eccc:	1809      	adds	r1, r1, r0
 801ecce:	6021      	str	r1, [r4, #0]
 801ecd0:	e7ee      	b.n	801ecb0 <_free_r+0x20>
 801ecd2:	001a      	movs	r2, r3
 801ecd4:	685b      	ldr	r3, [r3, #4]
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d001      	beq.n	801ecde <_free_r+0x4e>
 801ecda:	42a3      	cmp	r3, r4
 801ecdc:	d9f9      	bls.n	801ecd2 <_free_r+0x42>
 801ecde:	6811      	ldr	r1, [r2, #0]
 801ece0:	1850      	adds	r0, r2, r1
 801ece2:	42a0      	cmp	r0, r4
 801ece4:	d10b      	bne.n	801ecfe <_free_r+0x6e>
 801ece6:	6820      	ldr	r0, [r4, #0]
 801ece8:	1809      	adds	r1, r1, r0
 801ecea:	1850      	adds	r0, r2, r1
 801ecec:	6011      	str	r1, [r2, #0]
 801ecee:	4283      	cmp	r3, r0
 801ecf0:	d1e0      	bne.n	801ecb4 <_free_r+0x24>
 801ecf2:	6818      	ldr	r0, [r3, #0]
 801ecf4:	685b      	ldr	r3, [r3, #4]
 801ecf6:	1841      	adds	r1, r0, r1
 801ecf8:	6011      	str	r1, [r2, #0]
 801ecfa:	6053      	str	r3, [r2, #4]
 801ecfc:	e7da      	b.n	801ecb4 <_free_r+0x24>
 801ecfe:	42a0      	cmp	r0, r4
 801ed00:	d902      	bls.n	801ed08 <_free_r+0x78>
 801ed02:	230c      	movs	r3, #12
 801ed04:	602b      	str	r3, [r5, #0]
 801ed06:	e7d5      	b.n	801ecb4 <_free_r+0x24>
 801ed08:	6820      	ldr	r0, [r4, #0]
 801ed0a:	1821      	adds	r1, r4, r0
 801ed0c:	428b      	cmp	r3, r1
 801ed0e:	d103      	bne.n	801ed18 <_free_r+0x88>
 801ed10:	6819      	ldr	r1, [r3, #0]
 801ed12:	685b      	ldr	r3, [r3, #4]
 801ed14:	1809      	adds	r1, r1, r0
 801ed16:	6021      	str	r1, [r4, #0]
 801ed18:	6063      	str	r3, [r4, #4]
 801ed1a:	6054      	str	r4, [r2, #4]
 801ed1c:	e7ca      	b.n	801ecb4 <_free_r+0x24>
 801ed1e:	46c0      	nop			@ (mov r8, r8)
 801ed20:	200038c8 	.word	0x200038c8

0801ed24 <rshift>:
 801ed24:	0002      	movs	r2, r0
 801ed26:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed28:	6904      	ldr	r4, [r0, #16]
 801ed2a:	b085      	sub	sp, #20
 801ed2c:	3214      	adds	r2, #20
 801ed2e:	114b      	asrs	r3, r1, #5
 801ed30:	0016      	movs	r6, r2
 801ed32:	9302      	str	r3, [sp, #8]
 801ed34:	429c      	cmp	r4, r3
 801ed36:	dd31      	ble.n	801ed9c <rshift+0x78>
 801ed38:	261f      	movs	r6, #31
 801ed3a:	000f      	movs	r7, r1
 801ed3c:	009b      	lsls	r3, r3, #2
 801ed3e:	00a5      	lsls	r5, r4, #2
 801ed40:	18d3      	adds	r3, r2, r3
 801ed42:	4037      	ands	r7, r6
 801ed44:	1955      	adds	r5, r2, r5
 801ed46:	9300      	str	r3, [sp, #0]
 801ed48:	9701      	str	r7, [sp, #4]
 801ed4a:	4231      	tst	r1, r6
 801ed4c:	d10d      	bne.n	801ed6a <rshift+0x46>
 801ed4e:	0016      	movs	r6, r2
 801ed50:	0019      	movs	r1, r3
 801ed52:	428d      	cmp	r5, r1
 801ed54:	d836      	bhi.n	801edc4 <rshift+0xa0>
 801ed56:	9b00      	ldr	r3, [sp, #0]
 801ed58:	2600      	movs	r6, #0
 801ed5a:	3b03      	subs	r3, #3
 801ed5c:	429d      	cmp	r5, r3
 801ed5e:	d302      	bcc.n	801ed66 <rshift+0x42>
 801ed60:	9b02      	ldr	r3, [sp, #8]
 801ed62:	1ae4      	subs	r4, r4, r3
 801ed64:	00a6      	lsls	r6, r4, #2
 801ed66:	1996      	adds	r6, r2, r6
 801ed68:	e018      	b.n	801ed9c <rshift+0x78>
 801ed6a:	2120      	movs	r1, #32
 801ed6c:	9e01      	ldr	r6, [sp, #4]
 801ed6e:	9f01      	ldr	r7, [sp, #4]
 801ed70:	1b89      	subs	r1, r1, r6
 801ed72:	9e00      	ldr	r6, [sp, #0]
 801ed74:	9103      	str	r1, [sp, #12]
 801ed76:	ce02      	ldmia	r6!, {r1}
 801ed78:	4694      	mov	ip, r2
 801ed7a:	40f9      	lsrs	r1, r7
 801ed7c:	42b5      	cmp	r5, r6
 801ed7e:	d816      	bhi.n	801edae <rshift+0x8a>
 801ed80:	9b00      	ldr	r3, [sp, #0]
 801ed82:	2600      	movs	r6, #0
 801ed84:	3301      	adds	r3, #1
 801ed86:	429d      	cmp	r5, r3
 801ed88:	d303      	bcc.n	801ed92 <rshift+0x6e>
 801ed8a:	9b02      	ldr	r3, [sp, #8]
 801ed8c:	1ae4      	subs	r4, r4, r3
 801ed8e:	00a6      	lsls	r6, r4, #2
 801ed90:	3e04      	subs	r6, #4
 801ed92:	1996      	adds	r6, r2, r6
 801ed94:	6031      	str	r1, [r6, #0]
 801ed96:	2900      	cmp	r1, #0
 801ed98:	d000      	beq.n	801ed9c <rshift+0x78>
 801ed9a:	3604      	adds	r6, #4
 801ed9c:	1ab1      	subs	r1, r6, r2
 801ed9e:	1089      	asrs	r1, r1, #2
 801eda0:	6101      	str	r1, [r0, #16]
 801eda2:	4296      	cmp	r6, r2
 801eda4:	d101      	bne.n	801edaa <rshift+0x86>
 801eda6:	2300      	movs	r3, #0
 801eda8:	6143      	str	r3, [r0, #20]
 801edaa:	b005      	add	sp, #20
 801edac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801edae:	6837      	ldr	r7, [r6, #0]
 801edb0:	9b03      	ldr	r3, [sp, #12]
 801edb2:	409f      	lsls	r7, r3
 801edb4:	430f      	orrs	r7, r1
 801edb6:	4661      	mov	r1, ip
 801edb8:	c180      	stmia	r1!, {r7}
 801edba:	468c      	mov	ip, r1
 801edbc:	9b01      	ldr	r3, [sp, #4]
 801edbe:	ce02      	ldmia	r6!, {r1}
 801edc0:	40d9      	lsrs	r1, r3
 801edc2:	e7db      	b.n	801ed7c <rshift+0x58>
 801edc4:	c980      	ldmia	r1!, {r7}
 801edc6:	c680      	stmia	r6!, {r7}
 801edc8:	e7c3      	b.n	801ed52 <rshift+0x2e>

0801edca <__hexdig_fun>:
 801edca:	0002      	movs	r2, r0
 801edcc:	3a30      	subs	r2, #48	@ 0x30
 801edce:	0003      	movs	r3, r0
 801edd0:	2a09      	cmp	r2, #9
 801edd2:	d802      	bhi.n	801edda <__hexdig_fun+0x10>
 801edd4:	3b20      	subs	r3, #32
 801edd6:	b2d8      	uxtb	r0, r3
 801edd8:	4770      	bx	lr
 801edda:	0002      	movs	r2, r0
 801eddc:	3a61      	subs	r2, #97	@ 0x61
 801edde:	2a05      	cmp	r2, #5
 801ede0:	d801      	bhi.n	801ede6 <__hexdig_fun+0x1c>
 801ede2:	3b47      	subs	r3, #71	@ 0x47
 801ede4:	e7f7      	b.n	801edd6 <__hexdig_fun+0xc>
 801ede6:	001a      	movs	r2, r3
 801ede8:	3a41      	subs	r2, #65	@ 0x41
 801edea:	2000      	movs	r0, #0
 801edec:	2a05      	cmp	r2, #5
 801edee:	d8f3      	bhi.n	801edd8 <__hexdig_fun+0xe>
 801edf0:	3b27      	subs	r3, #39	@ 0x27
 801edf2:	e7f0      	b.n	801edd6 <__hexdig_fun+0xc>

0801edf4 <__gethex>:
 801edf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801edf6:	b089      	sub	sp, #36	@ 0x24
 801edf8:	9307      	str	r3, [sp, #28]
 801edfa:	680b      	ldr	r3, [r1, #0]
 801edfc:	9201      	str	r2, [sp, #4]
 801edfe:	9003      	str	r0, [sp, #12]
 801ee00:	9106      	str	r1, [sp, #24]
 801ee02:	1c9a      	adds	r2, r3, #2
 801ee04:	0011      	movs	r1, r2
 801ee06:	3201      	adds	r2, #1
 801ee08:	1e50      	subs	r0, r2, #1
 801ee0a:	7800      	ldrb	r0, [r0, #0]
 801ee0c:	2830      	cmp	r0, #48	@ 0x30
 801ee0e:	d0f9      	beq.n	801ee04 <__gethex+0x10>
 801ee10:	1acb      	subs	r3, r1, r3
 801ee12:	3b02      	subs	r3, #2
 801ee14:	9305      	str	r3, [sp, #20]
 801ee16:	9100      	str	r1, [sp, #0]
 801ee18:	f7ff ffd7 	bl	801edca <__hexdig_fun>
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	001d      	movs	r5, r3
 801ee20:	9302      	str	r3, [sp, #8]
 801ee22:	4298      	cmp	r0, r3
 801ee24:	d11e      	bne.n	801ee64 <__gethex+0x70>
 801ee26:	2201      	movs	r2, #1
 801ee28:	49a6      	ldr	r1, [pc, #664]	@ (801f0c4 <__gethex+0x2d0>)
 801ee2a:	9800      	ldr	r0, [sp, #0]
 801ee2c:	f7fe ffd8 	bl	801dde0 <strncmp>
 801ee30:	0007      	movs	r7, r0
 801ee32:	42a8      	cmp	r0, r5
 801ee34:	d000      	beq.n	801ee38 <__gethex+0x44>
 801ee36:	e06a      	b.n	801ef0e <__gethex+0x11a>
 801ee38:	9b00      	ldr	r3, [sp, #0]
 801ee3a:	7858      	ldrb	r0, [r3, #1]
 801ee3c:	1c5c      	adds	r4, r3, #1
 801ee3e:	f7ff ffc4 	bl	801edca <__hexdig_fun>
 801ee42:	2301      	movs	r3, #1
 801ee44:	9302      	str	r3, [sp, #8]
 801ee46:	42a8      	cmp	r0, r5
 801ee48:	d02f      	beq.n	801eeaa <__gethex+0xb6>
 801ee4a:	9400      	str	r4, [sp, #0]
 801ee4c:	9b00      	ldr	r3, [sp, #0]
 801ee4e:	7818      	ldrb	r0, [r3, #0]
 801ee50:	2830      	cmp	r0, #48	@ 0x30
 801ee52:	d009      	beq.n	801ee68 <__gethex+0x74>
 801ee54:	f7ff ffb9 	bl	801edca <__hexdig_fun>
 801ee58:	4242      	negs	r2, r0
 801ee5a:	4142      	adcs	r2, r0
 801ee5c:	2301      	movs	r3, #1
 801ee5e:	0025      	movs	r5, r4
 801ee60:	9202      	str	r2, [sp, #8]
 801ee62:	9305      	str	r3, [sp, #20]
 801ee64:	9c00      	ldr	r4, [sp, #0]
 801ee66:	e004      	b.n	801ee72 <__gethex+0x7e>
 801ee68:	9b00      	ldr	r3, [sp, #0]
 801ee6a:	3301      	adds	r3, #1
 801ee6c:	9300      	str	r3, [sp, #0]
 801ee6e:	e7ed      	b.n	801ee4c <__gethex+0x58>
 801ee70:	3401      	adds	r4, #1
 801ee72:	7820      	ldrb	r0, [r4, #0]
 801ee74:	f7ff ffa9 	bl	801edca <__hexdig_fun>
 801ee78:	1e07      	subs	r7, r0, #0
 801ee7a:	d1f9      	bne.n	801ee70 <__gethex+0x7c>
 801ee7c:	2201      	movs	r2, #1
 801ee7e:	0020      	movs	r0, r4
 801ee80:	4990      	ldr	r1, [pc, #576]	@ (801f0c4 <__gethex+0x2d0>)
 801ee82:	f7fe ffad 	bl	801dde0 <strncmp>
 801ee86:	2800      	cmp	r0, #0
 801ee88:	d10d      	bne.n	801eea6 <__gethex+0xb2>
 801ee8a:	2d00      	cmp	r5, #0
 801ee8c:	d106      	bne.n	801ee9c <__gethex+0xa8>
 801ee8e:	3401      	adds	r4, #1
 801ee90:	0025      	movs	r5, r4
 801ee92:	7820      	ldrb	r0, [r4, #0]
 801ee94:	f7ff ff99 	bl	801edca <__hexdig_fun>
 801ee98:	2800      	cmp	r0, #0
 801ee9a:	d102      	bne.n	801eea2 <__gethex+0xae>
 801ee9c:	1b2d      	subs	r5, r5, r4
 801ee9e:	00af      	lsls	r7, r5, #2
 801eea0:	e003      	b.n	801eeaa <__gethex+0xb6>
 801eea2:	3401      	adds	r4, #1
 801eea4:	e7f5      	b.n	801ee92 <__gethex+0x9e>
 801eea6:	2d00      	cmp	r5, #0
 801eea8:	d1f8      	bne.n	801ee9c <__gethex+0xa8>
 801eeaa:	2220      	movs	r2, #32
 801eeac:	7823      	ldrb	r3, [r4, #0]
 801eeae:	0026      	movs	r6, r4
 801eeb0:	4393      	bics	r3, r2
 801eeb2:	2b50      	cmp	r3, #80	@ 0x50
 801eeb4:	d11d      	bne.n	801eef2 <__gethex+0xfe>
 801eeb6:	7863      	ldrb	r3, [r4, #1]
 801eeb8:	2b2b      	cmp	r3, #43	@ 0x2b
 801eeba:	d02d      	beq.n	801ef18 <__gethex+0x124>
 801eebc:	2b2d      	cmp	r3, #45	@ 0x2d
 801eebe:	d02f      	beq.n	801ef20 <__gethex+0x12c>
 801eec0:	2300      	movs	r3, #0
 801eec2:	1c66      	adds	r6, r4, #1
 801eec4:	9304      	str	r3, [sp, #16]
 801eec6:	7830      	ldrb	r0, [r6, #0]
 801eec8:	f7ff ff7f 	bl	801edca <__hexdig_fun>
 801eecc:	1e43      	subs	r3, r0, #1
 801eece:	b2db      	uxtb	r3, r3
 801eed0:	0005      	movs	r5, r0
 801eed2:	2b18      	cmp	r3, #24
 801eed4:	d82a      	bhi.n	801ef2c <__gethex+0x138>
 801eed6:	7870      	ldrb	r0, [r6, #1]
 801eed8:	f7ff ff77 	bl	801edca <__hexdig_fun>
 801eedc:	1e43      	subs	r3, r0, #1
 801eede:	b2db      	uxtb	r3, r3
 801eee0:	3601      	adds	r6, #1
 801eee2:	3d10      	subs	r5, #16
 801eee4:	2b18      	cmp	r3, #24
 801eee6:	d91d      	bls.n	801ef24 <__gethex+0x130>
 801eee8:	9b04      	ldr	r3, [sp, #16]
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d000      	beq.n	801eef0 <__gethex+0xfc>
 801eeee:	426d      	negs	r5, r5
 801eef0:	197f      	adds	r7, r7, r5
 801eef2:	9b06      	ldr	r3, [sp, #24]
 801eef4:	601e      	str	r6, [r3, #0]
 801eef6:	9b02      	ldr	r3, [sp, #8]
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	d019      	beq.n	801ef30 <__gethex+0x13c>
 801eefc:	9b05      	ldr	r3, [sp, #20]
 801eefe:	2606      	movs	r6, #6
 801ef00:	425a      	negs	r2, r3
 801ef02:	4153      	adcs	r3, r2
 801ef04:	425b      	negs	r3, r3
 801ef06:	401e      	ands	r6, r3
 801ef08:	0030      	movs	r0, r6
 801ef0a:	b009      	add	sp, #36	@ 0x24
 801ef0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef0e:	2301      	movs	r3, #1
 801ef10:	2700      	movs	r7, #0
 801ef12:	9c00      	ldr	r4, [sp, #0]
 801ef14:	9302      	str	r3, [sp, #8]
 801ef16:	e7c8      	b.n	801eeaa <__gethex+0xb6>
 801ef18:	2300      	movs	r3, #0
 801ef1a:	9304      	str	r3, [sp, #16]
 801ef1c:	1ca6      	adds	r6, r4, #2
 801ef1e:	e7d2      	b.n	801eec6 <__gethex+0xd2>
 801ef20:	2301      	movs	r3, #1
 801ef22:	e7fa      	b.n	801ef1a <__gethex+0x126>
 801ef24:	230a      	movs	r3, #10
 801ef26:	435d      	muls	r5, r3
 801ef28:	182d      	adds	r5, r5, r0
 801ef2a:	e7d4      	b.n	801eed6 <__gethex+0xe2>
 801ef2c:	0026      	movs	r6, r4
 801ef2e:	e7e0      	b.n	801eef2 <__gethex+0xfe>
 801ef30:	9b00      	ldr	r3, [sp, #0]
 801ef32:	9902      	ldr	r1, [sp, #8]
 801ef34:	1ae3      	subs	r3, r4, r3
 801ef36:	3b01      	subs	r3, #1
 801ef38:	2b07      	cmp	r3, #7
 801ef3a:	dc0a      	bgt.n	801ef52 <__gethex+0x15e>
 801ef3c:	9803      	ldr	r0, [sp, #12]
 801ef3e:	f000 fb19 	bl	801f574 <_Balloc>
 801ef42:	1e05      	subs	r5, r0, #0
 801ef44:	d108      	bne.n	801ef58 <__gethex+0x164>
 801ef46:	002a      	movs	r2, r5
 801ef48:	21e4      	movs	r1, #228	@ 0xe4
 801ef4a:	4b5f      	ldr	r3, [pc, #380]	@ (801f0c8 <__gethex+0x2d4>)
 801ef4c:	485f      	ldr	r0, [pc, #380]	@ (801f0cc <__gethex+0x2d8>)
 801ef4e:	f001 fc03 	bl	8020758 <__assert_func>
 801ef52:	3101      	adds	r1, #1
 801ef54:	105b      	asrs	r3, r3, #1
 801ef56:	e7ef      	b.n	801ef38 <__gethex+0x144>
 801ef58:	0003      	movs	r3, r0
 801ef5a:	3314      	adds	r3, #20
 801ef5c:	9302      	str	r3, [sp, #8]
 801ef5e:	9305      	str	r3, [sp, #20]
 801ef60:	2300      	movs	r3, #0
 801ef62:	001e      	movs	r6, r3
 801ef64:	9304      	str	r3, [sp, #16]
 801ef66:	9b00      	ldr	r3, [sp, #0]
 801ef68:	42a3      	cmp	r3, r4
 801ef6a:	d338      	bcc.n	801efde <__gethex+0x1ea>
 801ef6c:	9c05      	ldr	r4, [sp, #20]
 801ef6e:	9b02      	ldr	r3, [sp, #8]
 801ef70:	c440      	stmia	r4!, {r6}
 801ef72:	1ae4      	subs	r4, r4, r3
 801ef74:	10a4      	asrs	r4, r4, #2
 801ef76:	0030      	movs	r0, r6
 801ef78:	612c      	str	r4, [r5, #16]
 801ef7a:	f000 fbf3 	bl	801f764 <__hi0bits>
 801ef7e:	9b01      	ldr	r3, [sp, #4]
 801ef80:	0164      	lsls	r4, r4, #5
 801ef82:	681b      	ldr	r3, [r3, #0]
 801ef84:	1a26      	subs	r6, r4, r0
 801ef86:	9300      	str	r3, [sp, #0]
 801ef88:	429e      	cmp	r6, r3
 801ef8a:	dd52      	ble.n	801f032 <__gethex+0x23e>
 801ef8c:	1af6      	subs	r6, r6, r3
 801ef8e:	0031      	movs	r1, r6
 801ef90:	0028      	movs	r0, r5
 801ef92:	f000 ff96 	bl	801fec2 <__any_on>
 801ef96:	1e04      	subs	r4, r0, #0
 801ef98:	d00f      	beq.n	801efba <__gethex+0x1c6>
 801ef9a:	2401      	movs	r4, #1
 801ef9c:	231f      	movs	r3, #31
 801ef9e:	0020      	movs	r0, r4
 801efa0:	1e72      	subs	r2, r6, #1
 801efa2:	4013      	ands	r3, r2
 801efa4:	4098      	lsls	r0, r3
 801efa6:	0003      	movs	r3, r0
 801efa8:	1151      	asrs	r1, r2, #5
 801efaa:	9802      	ldr	r0, [sp, #8]
 801efac:	0089      	lsls	r1, r1, #2
 801efae:	5809      	ldr	r1, [r1, r0]
 801efb0:	4219      	tst	r1, r3
 801efb2:	d002      	beq.n	801efba <__gethex+0x1c6>
 801efb4:	42a2      	cmp	r2, r4
 801efb6:	dc34      	bgt.n	801f022 <__gethex+0x22e>
 801efb8:	2402      	movs	r4, #2
 801efba:	0031      	movs	r1, r6
 801efbc:	0028      	movs	r0, r5
 801efbe:	f7ff feb1 	bl	801ed24 <rshift>
 801efc2:	19bf      	adds	r7, r7, r6
 801efc4:	9b01      	ldr	r3, [sp, #4]
 801efc6:	689b      	ldr	r3, [r3, #8]
 801efc8:	42bb      	cmp	r3, r7
 801efca:	da42      	bge.n	801f052 <__gethex+0x25e>
 801efcc:	0029      	movs	r1, r5
 801efce:	9803      	ldr	r0, [sp, #12]
 801efd0:	f000 fb14 	bl	801f5fc <_Bfree>
 801efd4:	2300      	movs	r3, #0
 801efd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efd8:	26a3      	movs	r6, #163	@ 0xa3
 801efda:	6013      	str	r3, [r2, #0]
 801efdc:	e794      	b.n	801ef08 <__gethex+0x114>
 801efde:	3c01      	subs	r4, #1
 801efe0:	7823      	ldrb	r3, [r4, #0]
 801efe2:	2b2e      	cmp	r3, #46	@ 0x2e
 801efe4:	d012      	beq.n	801f00c <__gethex+0x218>
 801efe6:	9b04      	ldr	r3, [sp, #16]
 801efe8:	2b20      	cmp	r3, #32
 801efea:	d104      	bne.n	801eff6 <__gethex+0x202>
 801efec:	9b05      	ldr	r3, [sp, #20]
 801efee:	c340      	stmia	r3!, {r6}
 801eff0:	2600      	movs	r6, #0
 801eff2:	9305      	str	r3, [sp, #20]
 801eff4:	9604      	str	r6, [sp, #16]
 801eff6:	7820      	ldrb	r0, [r4, #0]
 801eff8:	f7ff fee7 	bl	801edca <__hexdig_fun>
 801effc:	230f      	movs	r3, #15
 801effe:	4018      	ands	r0, r3
 801f000:	9b04      	ldr	r3, [sp, #16]
 801f002:	4098      	lsls	r0, r3
 801f004:	3304      	adds	r3, #4
 801f006:	4306      	orrs	r6, r0
 801f008:	9304      	str	r3, [sp, #16]
 801f00a:	e7ac      	b.n	801ef66 <__gethex+0x172>
 801f00c:	9b00      	ldr	r3, [sp, #0]
 801f00e:	42a3      	cmp	r3, r4
 801f010:	d8e9      	bhi.n	801efe6 <__gethex+0x1f2>
 801f012:	2201      	movs	r2, #1
 801f014:	0020      	movs	r0, r4
 801f016:	492b      	ldr	r1, [pc, #172]	@ (801f0c4 <__gethex+0x2d0>)
 801f018:	f7fe fee2 	bl	801dde0 <strncmp>
 801f01c:	2800      	cmp	r0, #0
 801f01e:	d1e2      	bne.n	801efe6 <__gethex+0x1f2>
 801f020:	e7a1      	b.n	801ef66 <__gethex+0x172>
 801f022:	0028      	movs	r0, r5
 801f024:	1eb1      	subs	r1, r6, #2
 801f026:	f000 ff4c 	bl	801fec2 <__any_on>
 801f02a:	2800      	cmp	r0, #0
 801f02c:	d0c4      	beq.n	801efb8 <__gethex+0x1c4>
 801f02e:	2403      	movs	r4, #3
 801f030:	e7c3      	b.n	801efba <__gethex+0x1c6>
 801f032:	9b00      	ldr	r3, [sp, #0]
 801f034:	2400      	movs	r4, #0
 801f036:	429e      	cmp	r6, r3
 801f038:	dac4      	bge.n	801efc4 <__gethex+0x1d0>
 801f03a:	1b9e      	subs	r6, r3, r6
 801f03c:	0029      	movs	r1, r5
 801f03e:	0032      	movs	r2, r6
 801f040:	9803      	ldr	r0, [sp, #12]
 801f042:	f000 fd05 	bl	801fa50 <__lshift>
 801f046:	0003      	movs	r3, r0
 801f048:	3314      	adds	r3, #20
 801f04a:	0005      	movs	r5, r0
 801f04c:	1bbf      	subs	r7, r7, r6
 801f04e:	9302      	str	r3, [sp, #8]
 801f050:	e7b8      	b.n	801efc4 <__gethex+0x1d0>
 801f052:	9b01      	ldr	r3, [sp, #4]
 801f054:	685e      	ldr	r6, [r3, #4]
 801f056:	42be      	cmp	r6, r7
 801f058:	dd6f      	ble.n	801f13a <__gethex+0x346>
 801f05a:	9b00      	ldr	r3, [sp, #0]
 801f05c:	1bf6      	subs	r6, r6, r7
 801f05e:	42b3      	cmp	r3, r6
 801f060:	dc36      	bgt.n	801f0d0 <__gethex+0x2dc>
 801f062:	9b01      	ldr	r3, [sp, #4]
 801f064:	68db      	ldr	r3, [r3, #12]
 801f066:	2b02      	cmp	r3, #2
 801f068:	d024      	beq.n	801f0b4 <__gethex+0x2c0>
 801f06a:	2b03      	cmp	r3, #3
 801f06c:	d026      	beq.n	801f0bc <__gethex+0x2c8>
 801f06e:	2b01      	cmp	r3, #1
 801f070:	d117      	bne.n	801f0a2 <__gethex+0x2ae>
 801f072:	9b00      	ldr	r3, [sp, #0]
 801f074:	42b3      	cmp	r3, r6
 801f076:	d114      	bne.n	801f0a2 <__gethex+0x2ae>
 801f078:	2b01      	cmp	r3, #1
 801f07a:	d10b      	bne.n	801f094 <__gethex+0x2a0>
 801f07c:	9b01      	ldr	r3, [sp, #4]
 801f07e:	9a07      	ldr	r2, [sp, #28]
 801f080:	685b      	ldr	r3, [r3, #4]
 801f082:	2662      	movs	r6, #98	@ 0x62
 801f084:	6013      	str	r3, [r2, #0]
 801f086:	2301      	movs	r3, #1
 801f088:	9a02      	ldr	r2, [sp, #8]
 801f08a:	612b      	str	r3, [r5, #16]
 801f08c:	6013      	str	r3, [r2, #0]
 801f08e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f090:	601d      	str	r5, [r3, #0]
 801f092:	e739      	b.n	801ef08 <__gethex+0x114>
 801f094:	9900      	ldr	r1, [sp, #0]
 801f096:	0028      	movs	r0, r5
 801f098:	3901      	subs	r1, #1
 801f09a:	f000 ff12 	bl	801fec2 <__any_on>
 801f09e:	2800      	cmp	r0, #0
 801f0a0:	d1ec      	bne.n	801f07c <__gethex+0x288>
 801f0a2:	0029      	movs	r1, r5
 801f0a4:	9803      	ldr	r0, [sp, #12]
 801f0a6:	f000 faa9 	bl	801f5fc <_Bfree>
 801f0aa:	2300      	movs	r3, #0
 801f0ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f0ae:	2650      	movs	r6, #80	@ 0x50
 801f0b0:	6013      	str	r3, [r2, #0]
 801f0b2:	e729      	b.n	801ef08 <__gethex+0x114>
 801f0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	d1f3      	bne.n	801f0a2 <__gethex+0x2ae>
 801f0ba:	e7df      	b.n	801f07c <__gethex+0x288>
 801f0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0be:	2b00      	cmp	r3, #0
 801f0c0:	d1dc      	bne.n	801f07c <__gethex+0x288>
 801f0c2:	e7ee      	b.n	801f0a2 <__gethex+0x2ae>
 801f0c4:	08022c30 	.word	0x08022c30
 801f0c8:	08022e41 	.word	0x08022e41
 801f0cc:	08022e52 	.word	0x08022e52
 801f0d0:	1e77      	subs	r7, r6, #1
 801f0d2:	2c00      	cmp	r4, #0
 801f0d4:	d12f      	bne.n	801f136 <__gethex+0x342>
 801f0d6:	2f00      	cmp	r7, #0
 801f0d8:	d004      	beq.n	801f0e4 <__gethex+0x2f0>
 801f0da:	0039      	movs	r1, r7
 801f0dc:	0028      	movs	r0, r5
 801f0de:	f000 fef0 	bl	801fec2 <__any_on>
 801f0e2:	0004      	movs	r4, r0
 801f0e4:	231f      	movs	r3, #31
 801f0e6:	117a      	asrs	r2, r7, #5
 801f0e8:	401f      	ands	r7, r3
 801f0ea:	3b1e      	subs	r3, #30
 801f0ec:	40bb      	lsls	r3, r7
 801f0ee:	9902      	ldr	r1, [sp, #8]
 801f0f0:	0092      	lsls	r2, r2, #2
 801f0f2:	5852      	ldr	r2, [r2, r1]
 801f0f4:	421a      	tst	r2, r3
 801f0f6:	d001      	beq.n	801f0fc <__gethex+0x308>
 801f0f8:	2302      	movs	r3, #2
 801f0fa:	431c      	orrs	r4, r3
 801f0fc:	9b00      	ldr	r3, [sp, #0]
 801f0fe:	0031      	movs	r1, r6
 801f100:	1b9b      	subs	r3, r3, r6
 801f102:	2602      	movs	r6, #2
 801f104:	0028      	movs	r0, r5
 801f106:	9300      	str	r3, [sp, #0]
 801f108:	f7ff fe0c 	bl	801ed24 <rshift>
 801f10c:	9b01      	ldr	r3, [sp, #4]
 801f10e:	685f      	ldr	r7, [r3, #4]
 801f110:	2c00      	cmp	r4, #0
 801f112:	d03f      	beq.n	801f194 <__gethex+0x3a0>
 801f114:	9b01      	ldr	r3, [sp, #4]
 801f116:	68db      	ldr	r3, [r3, #12]
 801f118:	2b02      	cmp	r3, #2
 801f11a:	d010      	beq.n	801f13e <__gethex+0x34a>
 801f11c:	2b03      	cmp	r3, #3
 801f11e:	d012      	beq.n	801f146 <__gethex+0x352>
 801f120:	2b01      	cmp	r3, #1
 801f122:	d106      	bne.n	801f132 <__gethex+0x33e>
 801f124:	07a2      	lsls	r2, r4, #30
 801f126:	d504      	bpl.n	801f132 <__gethex+0x33e>
 801f128:	9a02      	ldr	r2, [sp, #8]
 801f12a:	6812      	ldr	r2, [r2, #0]
 801f12c:	4314      	orrs	r4, r2
 801f12e:	421c      	tst	r4, r3
 801f130:	d10c      	bne.n	801f14c <__gethex+0x358>
 801f132:	2310      	movs	r3, #16
 801f134:	e02d      	b.n	801f192 <__gethex+0x39e>
 801f136:	2401      	movs	r4, #1
 801f138:	e7d4      	b.n	801f0e4 <__gethex+0x2f0>
 801f13a:	2601      	movs	r6, #1
 801f13c:	e7e8      	b.n	801f110 <__gethex+0x31c>
 801f13e:	2301      	movs	r3, #1
 801f140:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f142:	1a9b      	subs	r3, r3, r2
 801f144:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d0f2      	beq.n	801f132 <__gethex+0x33e>
 801f14c:	692b      	ldr	r3, [r5, #16]
 801f14e:	2000      	movs	r0, #0
 801f150:	9302      	str	r3, [sp, #8]
 801f152:	009b      	lsls	r3, r3, #2
 801f154:	9304      	str	r3, [sp, #16]
 801f156:	002b      	movs	r3, r5
 801f158:	9a04      	ldr	r2, [sp, #16]
 801f15a:	3314      	adds	r3, #20
 801f15c:	1899      	adds	r1, r3, r2
 801f15e:	681a      	ldr	r2, [r3, #0]
 801f160:	1c54      	adds	r4, r2, #1
 801f162:	d01c      	beq.n	801f19e <__gethex+0x3aa>
 801f164:	3201      	adds	r2, #1
 801f166:	601a      	str	r2, [r3, #0]
 801f168:	002b      	movs	r3, r5
 801f16a:	3314      	adds	r3, #20
 801f16c:	2e02      	cmp	r6, #2
 801f16e:	d13f      	bne.n	801f1f0 <__gethex+0x3fc>
 801f170:	9a01      	ldr	r2, [sp, #4]
 801f172:	9900      	ldr	r1, [sp, #0]
 801f174:	6812      	ldr	r2, [r2, #0]
 801f176:	3a01      	subs	r2, #1
 801f178:	428a      	cmp	r2, r1
 801f17a:	d109      	bne.n	801f190 <__gethex+0x39c>
 801f17c:	000a      	movs	r2, r1
 801f17e:	201f      	movs	r0, #31
 801f180:	4010      	ands	r0, r2
 801f182:	2201      	movs	r2, #1
 801f184:	4082      	lsls	r2, r0
 801f186:	1149      	asrs	r1, r1, #5
 801f188:	0089      	lsls	r1, r1, #2
 801f18a:	58cb      	ldr	r3, [r1, r3]
 801f18c:	4213      	tst	r3, r2
 801f18e:	d13d      	bne.n	801f20c <__gethex+0x418>
 801f190:	2320      	movs	r3, #32
 801f192:	431e      	orrs	r6, r3
 801f194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f196:	601d      	str	r5, [r3, #0]
 801f198:	9b07      	ldr	r3, [sp, #28]
 801f19a:	601f      	str	r7, [r3, #0]
 801f19c:	e6b4      	b.n	801ef08 <__gethex+0x114>
 801f19e:	c301      	stmia	r3!, {r0}
 801f1a0:	4299      	cmp	r1, r3
 801f1a2:	d8dc      	bhi.n	801f15e <__gethex+0x36a>
 801f1a4:	68ab      	ldr	r3, [r5, #8]
 801f1a6:	9a02      	ldr	r2, [sp, #8]
 801f1a8:	429a      	cmp	r2, r3
 801f1aa:	db18      	blt.n	801f1de <__gethex+0x3ea>
 801f1ac:	6869      	ldr	r1, [r5, #4]
 801f1ae:	9803      	ldr	r0, [sp, #12]
 801f1b0:	3101      	adds	r1, #1
 801f1b2:	f000 f9df 	bl	801f574 <_Balloc>
 801f1b6:	1e04      	subs	r4, r0, #0
 801f1b8:	d104      	bne.n	801f1c4 <__gethex+0x3d0>
 801f1ba:	0022      	movs	r2, r4
 801f1bc:	2184      	movs	r1, #132	@ 0x84
 801f1be:	4b1d      	ldr	r3, [pc, #116]	@ (801f234 <__gethex+0x440>)
 801f1c0:	481d      	ldr	r0, [pc, #116]	@ (801f238 <__gethex+0x444>)
 801f1c2:	e6c4      	b.n	801ef4e <__gethex+0x15a>
 801f1c4:	0029      	movs	r1, r5
 801f1c6:	692a      	ldr	r2, [r5, #16]
 801f1c8:	310c      	adds	r1, #12
 801f1ca:	3202      	adds	r2, #2
 801f1cc:	0092      	lsls	r2, r2, #2
 801f1ce:	300c      	adds	r0, #12
 801f1d0:	f7fe fecc 	bl	801df6c <memcpy>
 801f1d4:	0029      	movs	r1, r5
 801f1d6:	9803      	ldr	r0, [sp, #12]
 801f1d8:	f000 fa10 	bl	801f5fc <_Bfree>
 801f1dc:	0025      	movs	r5, r4
 801f1de:	692b      	ldr	r3, [r5, #16]
 801f1e0:	1c5a      	adds	r2, r3, #1
 801f1e2:	612a      	str	r2, [r5, #16]
 801f1e4:	2201      	movs	r2, #1
 801f1e6:	3304      	adds	r3, #4
 801f1e8:	009b      	lsls	r3, r3, #2
 801f1ea:	18eb      	adds	r3, r5, r3
 801f1ec:	605a      	str	r2, [r3, #4]
 801f1ee:	e7bb      	b.n	801f168 <__gethex+0x374>
 801f1f0:	692a      	ldr	r2, [r5, #16]
 801f1f2:	9902      	ldr	r1, [sp, #8]
 801f1f4:	428a      	cmp	r2, r1
 801f1f6:	dd0b      	ble.n	801f210 <__gethex+0x41c>
 801f1f8:	2101      	movs	r1, #1
 801f1fa:	0028      	movs	r0, r5
 801f1fc:	f7ff fd92 	bl	801ed24 <rshift>
 801f200:	9b01      	ldr	r3, [sp, #4]
 801f202:	3701      	adds	r7, #1
 801f204:	689b      	ldr	r3, [r3, #8]
 801f206:	42bb      	cmp	r3, r7
 801f208:	da00      	bge.n	801f20c <__gethex+0x418>
 801f20a:	e6df      	b.n	801efcc <__gethex+0x1d8>
 801f20c:	2601      	movs	r6, #1
 801f20e:	e7bf      	b.n	801f190 <__gethex+0x39c>
 801f210:	221f      	movs	r2, #31
 801f212:	9c00      	ldr	r4, [sp, #0]
 801f214:	9900      	ldr	r1, [sp, #0]
 801f216:	4014      	ands	r4, r2
 801f218:	4211      	tst	r1, r2
 801f21a:	d0f7      	beq.n	801f20c <__gethex+0x418>
 801f21c:	9a04      	ldr	r2, [sp, #16]
 801f21e:	189b      	adds	r3, r3, r2
 801f220:	3b04      	subs	r3, #4
 801f222:	6818      	ldr	r0, [r3, #0]
 801f224:	f000 fa9e 	bl	801f764 <__hi0bits>
 801f228:	2320      	movs	r3, #32
 801f22a:	1b1b      	subs	r3, r3, r4
 801f22c:	4298      	cmp	r0, r3
 801f22e:	dbe3      	blt.n	801f1f8 <__gethex+0x404>
 801f230:	e7ec      	b.n	801f20c <__gethex+0x418>
 801f232:	46c0      	nop			@ (mov r8, r8)
 801f234:	08022e41 	.word	0x08022e41
 801f238:	08022e52 	.word	0x08022e52

0801f23c <L_shift>:
 801f23c:	2308      	movs	r3, #8
 801f23e:	b570      	push	{r4, r5, r6, lr}
 801f240:	2520      	movs	r5, #32
 801f242:	1a9a      	subs	r2, r3, r2
 801f244:	0092      	lsls	r2, r2, #2
 801f246:	1aad      	subs	r5, r5, r2
 801f248:	6843      	ldr	r3, [r0, #4]
 801f24a:	6804      	ldr	r4, [r0, #0]
 801f24c:	001e      	movs	r6, r3
 801f24e:	40ae      	lsls	r6, r5
 801f250:	40d3      	lsrs	r3, r2
 801f252:	4334      	orrs	r4, r6
 801f254:	6004      	str	r4, [r0, #0]
 801f256:	6043      	str	r3, [r0, #4]
 801f258:	3004      	adds	r0, #4
 801f25a:	4288      	cmp	r0, r1
 801f25c:	d3f4      	bcc.n	801f248 <L_shift+0xc>
 801f25e:	bd70      	pop	{r4, r5, r6, pc}

0801f260 <__match>:
 801f260:	b530      	push	{r4, r5, lr}
 801f262:	6803      	ldr	r3, [r0, #0]
 801f264:	780c      	ldrb	r4, [r1, #0]
 801f266:	3301      	adds	r3, #1
 801f268:	2c00      	cmp	r4, #0
 801f26a:	d102      	bne.n	801f272 <__match+0x12>
 801f26c:	6003      	str	r3, [r0, #0]
 801f26e:	2001      	movs	r0, #1
 801f270:	bd30      	pop	{r4, r5, pc}
 801f272:	781a      	ldrb	r2, [r3, #0]
 801f274:	0015      	movs	r5, r2
 801f276:	3d41      	subs	r5, #65	@ 0x41
 801f278:	2d19      	cmp	r5, #25
 801f27a:	d800      	bhi.n	801f27e <__match+0x1e>
 801f27c:	3220      	adds	r2, #32
 801f27e:	3101      	adds	r1, #1
 801f280:	42a2      	cmp	r2, r4
 801f282:	d0ef      	beq.n	801f264 <__match+0x4>
 801f284:	2000      	movs	r0, #0
 801f286:	e7f3      	b.n	801f270 <__match+0x10>

0801f288 <__hexnan>:
 801f288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f28a:	680b      	ldr	r3, [r1, #0]
 801f28c:	b08b      	sub	sp, #44	@ 0x2c
 801f28e:	9201      	str	r2, [sp, #4]
 801f290:	9901      	ldr	r1, [sp, #4]
 801f292:	115a      	asrs	r2, r3, #5
 801f294:	0092      	lsls	r2, r2, #2
 801f296:	188a      	adds	r2, r1, r2
 801f298:	9202      	str	r2, [sp, #8]
 801f29a:	0019      	movs	r1, r3
 801f29c:	221f      	movs	r2, #31
 801f29e:	4011      	ands	r1, r2
 801f2a0:	9008      	str	r0, [sp, #32]
 801f2a2:	9106      	str	r1, [sp, #24]
 801f2a4:	4213      	tst	r3, r2
 801f2a6:	d002      	beq.n	801f2ae <__hexnan+0x26>
 801f2a8:	9b02      	ldr	r3, [sp, #8]
 801f2aa:	3304      	adds	r3, #4
 801f2ac:	9302      	str	r3, [sp, #8]
 801f2ae:	9b02      	ldr	r3, [sp, #8]
 801f2b0:	2500      	movs	r5, #0
 801f2b2:	1f1f      	subs	r7, r3, #4
 801f2b4:	003e      	movs	r6, r7
 801f2b6:	003c      	movs	r4, r7
 801f2b8:	9b08      	ldr	r3, [sp, #32]
 801f2ba:	603d      	str	r5, [r7, #0]
 801f2bc:	681b      	ldr	r3, [r3, #0]
 801f2be:	9507      	str	r5, [sp, #28]
 801f2c0:	9305      	str	r3, [sp, #20]
 801f2c2:	9503      	str	r5, [sp, #12]
 801f2c4:	9b05      	ldr	r3, [sp, #20]
 801f2c6:	3301      	adds	r3, #1
 801f2c8:	9309      	str	r3, [sp, #36]	@ 0x24
 801f2ca:	9b05      	ldr	r3, [sp, #20]
 801f2cc:	785b      	ldrb	r3, [r3, #1]
 801f2ce:	9304      	str	r3, [sp, #16]
 801f2d0:	2b00      	cmp	r3, #0
 801f2d2:	d028      	beq.n	801f326 <__hexnan+0x9e>
 801f2d4:	9804      	ldr	r0, [sp, #16]
 801f2d6:	f7ff fd78 	bl	801edca <__hexdig_fun>
 801f2da:	2800      	cmp	r0, #0
 801f2dc:	d155      	bne.n	801f38a <__hexnan+0x102>
 801f2de:	9b04      	ldr	r3, [sp, #16]
 801f2e0:	2b20      	cmp	r3, #32
 801f2e2:	d819      	bhi.n	801f318 <__hexnan+0x90>
 801f2e4:	9b03      	ldr	r3, [sp, #12]
 801f2e6:	9a07      	ldr	r2, [sp, #28]
 801f2e8:	4293      	cmp	r3, r2
 801f2ea:	dd12      	ble.n	801f312 <__hexnan+0x8a>
 801f2ec:	42b4      	cmp	r4, r6
 801f2ee:	d206      	bcs.n	801f2fe <__hexnan+0x76>
 801f2f0:	2d07      	cmp	r5, #7
 801f2f2:	dc04      	bgt.n	801f2fe <__hexnan+0x76>
 801f2f4:	002a      	movs	r2, r5
 801f2f6:	0031      	movs	r1, r6
 801f2f8:	0020      	movs	r0, r4
 801f2fa:	f7ff ff9f 	bl	801f23c <L_shift>
 801f2fe:	9b01      	ldr	r3, [sp, #4]
 801f300:	2508      	movs	r5, #8
 801f302:	429c      	cmp	r4, r3
 801f304:	d905      	bls.n	801f312 <__hexnan+0x8a>
 801f306:	1f26      	subs	r6, r4, #4
 801f308:	2500      	movs	r5, #0
 801f30a:	0034      	movs	r4, r6
 801f30c:	9b03      	ldr	r3, [sp, #12]
 801f30e:	6035      	str	r5, [r6, #0]
 801f310:	9307      	str	r3, [sp, #28]
 801f312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f314:	9305      	str	r3, [sp, #20]
 801f316:	e7d5      	b.n	801f2c4 <__hexnan+0x3c>
 801f318:	9b04      	ldr	r3, [sp, #16]
 801f31a:	2b29      	cmp	r3, #41	@ 0x29
 801f31c:	d15a      	bne.n	801f3d4 <__hexnan+0x14c>
 801f31e:	9b05      	ldr	r3, [sp, #20]
 801f320:	9a08      	ldr	r2, [sp, #32]
 801f322:	3302      	adds	r3, #2
 801f324:	6013      	str	r3, [r2, #0]
 801f326:	9b03      	ldr	r3, [sp, #12]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d053      	beq.n	801f3d4 <__hexnan+0x14c>
 801f32c:	42b4      	cmp	r4, r6
 801f32e:	d206      	bcs.n	801f33e <__hexnan+0xb6>
 801f330:	2d07      	cmp	r5, #7
 801f332:	dc04      	bgt.n	801f33e <__hexnan+0xb6>
 801f334:	002a      	movs	r2, r5
 801f336:	0031      	movs	r1, r6
 801f338:	0020      	movs	r0, r4
 801f33a:	f7ff ff7f 	bl	801f23c <L_shift>
 801f33e:	9b01      	ldr	r3, [sp, #4]
 801f340:	429c      	cmp	r4, r3
 801f342:	d936      	bls.n	801f3b2 <__hexnan+0x12a>
 801f344:	001a      	movs	r2, r3
 801f346:	0023      	movs	r3, r4
 801f348:	cb02      	ldmia	r3!, {r1}
 801f34a:	c202      	stmia	r2!, {r1}
 801f34c:	429f      	cmp	r7, r3
 801f34e:	d2fb      	bcs.n	801f348 <__hexnan+0xc0>
 801f350:	9b02      	ldr	r3, [sp, #8]
 801f352:	1c61      	adds	r1, r4, #1
 801f354:	1eda      	subs	r2, r3, #3
 801f356:	2304      	movs	r3, #4
 801f358:	4291      	cmp	r1, r2
 801f35a:	d805      	bhi.n	801f368 <__hexnan+0xe0>
 801f35c:	9b02      	ldr	r3, [sp, #8]
 801f35e:	3b04      	subs	r3, #4
 801f360:	1b1b      	subs	r3, r3, r4
 801f362:	089b      	lsrs	r3, r3, #2
 801f364:	3301      	adds	r3, #1
 801f366:	009b      	lsls	r3, r3, #2
 801f368:	9a01      	ldr	r2, [sp, #4]
 801f36a:	18d3      	adds	r3, r2, r3
 801f36c:	2200      	movs	r2, #0
 801f36e:	c304      	stmia	r3!, {r2}
 801f370:	429f      	cmp	r7, r3
 801f372:	d2fc      	bcs.n	801f36e <__hexnan+0xe6>
 801f374:	683b      	ldr	r3, [r7, #0]
 801f376:	2b00      	cmp	r3, #0
 801f378:	d104      	bne.n	801f384 <__hexnan+0xfc>
 801f37a:	9b01      	ldr	r3, [sp, #4]
 801f37c:	429f      	cmp	r7, r3
 801f37e:	d127      	bne.n	801f3d0 <__hexnan+0x148>
 801f380:	2301      	movs	r3, #1
 801f382:	603b      	str	r3, [r7, #0]
 801f384:	2005      	movs	r0, #5
 801f386:	b00b      	add	sp, #44	@ 0x2c
 801f388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f38a:	9b03      	ldr	r3, [sp, #12]
 801f38c:	3501      	adds	r5, #1
 801f38e:	3301      	adds	r3, #1
 801f390:	9303      	str	r3, [sp, #12]
 801f392:	2d08      	cmp	r5, #8
 801f394:	dd06      	ble.n	801f3a4 <__hexnan+0x11c>
 801f396:	9b01      	ldr	r3, [sp, #4]
 801f398:	429c      	cmp	r4, r3
 801f39a:	d9ba      	bls.n	801f312 <__hexnan+0x8a>
 801f39c:	2300      	movs	r3, #0
 801f39e:	2501      	movs	r5, #1
 801f3a0:	3c04      	subs	r4, #4
 801f3a2:	6023      	str	r3, [r4, #0]
 801f3a4:	220f      	movs	r2, #15
 801f3a6:	6823      	ldr	r3, [r4, #0]
 801f3a8:	4010      	ands	r0, r2
 801f3aa:	011b      	lsls	r3, r3, #4
 801f3ac:	4303      	orrs	r3, r0
 801f3ae:	6023      	str	r3, [r4, #0]
 801f3b0:	e7af      	b.n	801f312 <__hexnan+0x8a>
 801f3b2:	9b06      	ldr	r3, [sp, #24]
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d0dd      	beq.n	801f374 <__hexnan+0xec>
 801f3b8:	2320      	movs	r3, #32
 801f3ba:	9a06      	ldr	r2, [sp, #24]
 801f3bc:	9902      	ldr	r1, [sp, #8]
 801f3be:	1a9b      	subs	r3, r3, r2
 801f3c0:	2201      	movs	r2, #1
 801f3c2:	4252      	negs	r2, r2
 801f3c4:	40da      	lsrs	r2, r3
 801f3c6:	3904      	subs	r1, #4
 801f3c8:	680b      	ldr	r3, [r1, #0]
 801f3ca:	4013      	ands	r3, r2
 801f3cc:	600b      	str	r3, [r1, #0]
 801f3ce:	e7d1      	b.n	801f374 <__hexnan+0xec>
 801f3d0:	3f04      	subs	r7, #4
 801f3d2:	e7cf      	b.n	801f374 <__hexnan+0xec>
 801f3d4:	2004      	movs	r0, #4
 801f3d6:	e7d6      	b.n	801f386 <__hexnan+0xfe>

0801f3d8 <malloc>:
 801f3d8:	b510      	push	{r4, lr}
 801f3da:	4b03      	ldr	r3, [pc, #12]	@ (801f3e8 <malloc+0x10>)
 801f3dc:	0001      	movs	r1, r0
 801f3de:	6818      	ldr	r0, [r3, #0]
 801f3e0:	f000 f826 	bl	801f430 <_malloc_r>
 801f3e4:	bd10      	pop	{r4, pc}
 801f3e6:	46c0      	nop			@ (mov r8, r8)
 801f3e8:	200003c8 	.word	0x200003c8

0801f3ec <sbrk_aligned>:
 801f3ec:	b570      	push	{r4, r5, r6, lr}
 801f3ee:	4e0f      	ldr	r6, [pc, #60]	@ (801f42c <sbrk_aligned+0x40>)
 801f3f0:	000d      	movs	r5, r1
 801f3f2:	6831      	ldr	r1, [r6, #0]
 801f3f4:	0004      	movs	r4, r0
 801f3f6:	2900      	cmp	r1, #0
 801f3f8:	d102      	bne.n	801f400 <sbrk_aligned+0x14>
 801f3fa:	f001 f99b 	bl	8020734 <_sbrk_r>
 801f3fe:	6030      	str	r0, [r6, #0]
 801f400:	0029      	movs	r1, r5
 801f402:	0020      	movs	r0, r4
 801f404:	f001 f996 	bl	8020734 <_sbrk_r>
 801f408:	1c43      	adds	r3, r0, #1
 801f40a:	d103      	bne.n	801f414 <sbrk_aligned+0x28>
 801f40c:	2501      	movs	r5, #1
 801f40e:	426d      	negs	r5, r5
 801f410:	0028      	movs	r0, r5
 801f412:	bd70      	pop	{r4, r5, r6, pc}
 801f414:	2303      	movs	r3, #3
 801f416:	1cc5      	adds	r5, r0, #3
 801f418:	439d      	bics	r5, r3
 801f41a:	42a8      	cmp	r0, r5
 801f41c:	d0f8      	beq.n	801f410 <sbrk_aligned+0x24>
 801f41e:	1a29      	subs	r1, r5, r0
 801f420:	0020      	movs	r0, r4
 801f422:	f001 f987 	bl	8020734 <_sbrk_r>
 801f426:	3001      	adds	r0, #1
 801f428:	d1f2      	bne.n	801f410 <sbrk_aligned+0x24>
 801f42a:	e7ef      	b.n	801f40c <sbrk_aligned+0x20>
 801f42c:	200038c4 	.word	0x200038c4

0801f430 <_malloc_r>:
 801f430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f432:	2203      	movs	r2, #3
 801f434:	1ccb      	adds	r3, r1, #3
 801f436:	4393      	bics	r3, r2
 801f438:	3308      	adds	r3, #8
 801f43a:	0005      	movs	r5, r0
 801f43c:	001f      	movs	r7, r3
 801f43e:	2b0c      	cmp	r3, #12
 801f440:	d234      	bcs.n	801f4ac <_malloc_r+0x7c>
 801f442:	270c      	movs	r7, #12
 801f444:	42b9      	cmp	r1, r7
 801f446:	d833      	bhi.n	801f4b0 <_malloc_r+0x80>
 801f448:	0028      	movs	r0, r5
 801f44a:	f000 f883 	bl	801f554 <__malloc_lock>
 801f44e:	4e37      	ldr	r6, [pc, #220]	@ (801f52c <_malloc_r+0xfc>)
 801f450:	6833      	ldr	r3, [r6, #0]
 801f452:	001c      	movs	r4, r3
 801f454:	2c00      	cmp	r4, #0
 801f456:	d12f      	bne.n	801f4b8 <_malloc_r+0x88>
 801f458:	0039      	movs	r1, r7
 801f45a:	0028      	movs	r0, r5
 801f45c:	f7ff ffc6 	bl	801f3ec <sbrk_aligned>
 801f460:	0004      	movs	r4, r0
 801f462:	1c43      	adds	r3, r0, #1
 801f464:	d15f      	bne.n	801f526 <_malloc_r+0xf6>
 801f466:	6834      	ldr	r4, [r6, #0]
 801f468:	9400      	str	r4, [sp, #0]
 801f46a:	9b00      	ldr	r3, [sp, #0]
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d14a      	bne.n	801f506 <_malloc_r+0xd6>
 801f470:	2c00      	cmp	r4, #0
 801f472:	d052      	beq.n	801f51a <_malloc_r+0xea>
 801f474:	6823      	ldr	r3, [r4, #0]
 801f476:	0028      	movs	r0, r5
 801f478:	18e3      	adds	r3, r4, r3
 801f47a:	9900      	ldr	r1, [sp, #0]
 801f47c:	9301      	str	r3, [sp, #4]
 801f47e:	f001 f959 	bl	8020734 <_sbrk_r>
 801f482:	9b01      	ldr	r3, [sp, #4]
 801f484:	4283      	cmp	r3, r0
 801f486:	d148      	bne.n	801f51a <_malloc_r+0xea>
 801f488:	6823      	ldr	r3, [r4, #0]
 801f48a:	0028      	movs	r0, r5
 801f48c:	1aff      	subs	r7, r7, r3
 801f48e:	0039      	movs	r1, r7
 801f490:	f7ff ffac 	bl	801f3ec <sbrk_aligned>
 801f494:	3001      	adds	r0, #1
 801f496:	d040      	beq.n	801f51a <_malloc_r+0xea>
 801f498:	6823      	ldr	r3, [r4, #0]
 801f49a:	19db      	adds	r3, r3, r7
 801f49c:	6023      	str	r3, [r4, #0]
 801f49e:	6833      	ldr	r3, [r6, #0]
 801f4a0:	685a      	ldr	r2, [r3, #4]
 801f4a2:	2a00      	cmp	r2, #0
 801f4a4:	d133      	bne.n	801f50e <_malloc_r+0xde>
 801f4a6:	9b00      	ldr	r3, [sp, #0]
 801f4a8:	6033      	str	r3, [r6, #0]
 801f4aa:	e019      	b.n	801f4e0 <_malloc_r+0xb0>
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	dac9      	bge.n	801f444 <_malloc_r+0x14>
 801f4b0:	230c      	movs	r3, #12
 801f4b2:	602b      	str	r3, [r5, #0]
 801f4b4:	2000      	movs	r0, #0
 801f4b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f4b8:	6821      	ldr	r1, [r4, #0]
 801f4ba:	1bc9      	subs	r1, r1, r7
 801f4bc:	d420      	bmi.n	801f500 <_malloc_r+0xd0>
 801f4be:	290b      	cmp	r1, #11
 801f4c0:	d90a      	bls.n	801f4d8 <_malloc_r+0xa8>
 801f4c2:	19e2      	adds	r2, r4, r7
 801f4c4:	6027      	str	r7, [r4, #0]
 801f4c6:	42a3      	cmp	r3, r4
 801f4c8:	d104      	bne.n	801f4d4 <_malloc_r+0xa4>
 801f4ca:	6032      	str	r2, [r6, #0]
 801f4cc:	6863      	ldr	r3, [r4, #4]
 801f4ce:	6011      	str	r1, [r2, #0]
 801f4d0:	6053      	str	r3, [r2, #4]
 801f4d2:	e005      	b.n	801f4e0 <_malloc_r+0xb0>
 801f4d4:	605a      	str	r2, [r3, #4]
 801f4d6:	e7f9      	b.n	801f4cc <_malloc_r+0x9c>
 801f4d8:	6862      	ldr	r2, [r4, #4]
 801f4da:	42a3      	cmp	r3, r4
 801f4dc:	d10e      	bne.n	801f4fc <_malloc_r+0xcc>
 801f4de:	6032      	str	r2, [r6, #0]
 801f4e0:	0028      	movs	r0, r5
 801f4e2:	f000 f83f 	bl	801f564 <__malloc_unlock>
 801f4e6:	0020      	movs	r0, r4
 801f4e8:	2207      	movs	r2, #7
 801f4ea:	300b      	adds	r0, #11
 801f4ec:	1d23      	adds	r3, r4, #4
 801f4ee:	4390      	bics	r0, r2
 801f4f0:	1ac2      	subs	r2, r0, r3
 801f4f2:	4298      	cmp	r0, r3
 801f4f4:	d0df      	beq.n	801f4b6 <_malloc_r+0x86>
 801f4f6:	1a1b      	subs	r3, r3, r0
 801f4f8:	50a3      	str	r3, [r4, r2]
 801f4fa:	e7dc      	b.n	801f4b6 <_malloc_r+0x86>
 801f4fc:	605a      	str	r2, [r3, #4]
 801f4fe:	e7ef      	b.n	801f4e0 <_malloc_r+0xb0>
 801f500:	0023      	movs	r3, r4
 801f502:	6864      	ldr	r4, [r4, #4]
 801f504:	e7a6      	b.n	801f454 <_malloc_r+0x24>
 801f506:	9c00      	ldr	r4, [sp, #0]
 801f508:	6863      	ldr	r3, [r4, #4]
 801f50a:	9300      	str	r3, [sp, #0]
 801f50c:	e7ad      	b.n	801f46a <_malloc_r+0x3a>
 801f50e:	001a      	movs	r2, r3
 801f510:	685b      	ldr	r3, [r3, #4]
 801f512:	42a3      	cmp	r3, r4
 801f514:	d1fb      	bne.n	801f50e <_malloc_r+0xde>
 801f516:	2300      	movs	r3, #0
 801f518:	e7da      	b.n	801f4d0 <_malloc_r+0xa0>
 801f51a:	230c      	movs	r3, #12
 801f51c:	0028      	movs	r0, r5
 801f51e:	602b      	str	r3, [r5, #0]
 801f520:	f000 f820 	bl	801f564 <__malloc_unlock>
 801f524:	e7c6      	b.n	801f4b4 <_malloc_r+0x84>
 801f526:	6007      	str	r7, [r0, #0]
 801f528:	e7da      	b.n	801f4e0 <_malloc_r+0xb0>
 801f52a:	46c0      	nop			@ (mov r8, r8)
 801f52c:	200038c8 	.word	0x200038c8

0801f530 <__ascii_mbtowc>:
 801f530:	b082      	sub	sp, #8
 801f532:	2900      	cmp	r1, #0
 801f534:	d100      	bne.n	801f538 <__ascii_mbtowc+0x8>
 801f536:	a901      	add	r1, sp, #4
 801f538:	1e10      	subs	r0, r2, #0
 801f53a:	d006      	beq.n	801f54a <__ascii_mbtowc+0x1a>
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d006      	beq.n	801f54e <__ascii_mbtowc+0x1e>
 801f540:	7813      	ldrb	r3, [r2, #0]
 801f542:	600b      	str	r3, [r1, #0]
 801f544:	7810      	ldrb	r0, [r2, #0]
 801f546:	1e43      	subs	r3, r0, #1
 801f548:	4198      	sbcs	r0, r3
 801f54a:	b002      	add	sp, #8
 801f54c:	4770      	bx	lr
 801f54e:	2002      	movs	r0, #2
 801f550:	4240      	negs	r0, r0
 801f552:	e7fa      	b.n	801f54a <__ascii_mbtowc+0x1a>

0801f554 <__malloc_lock>:
 801f554:	b510      	push	{r4, lr}
 801f556:	4802      	ldr	r0, [pc, #8]	@ (801f560 <__malloc_lock+0xc>)
 801f558:	f7fe fcfb 	bl	801df52 <__retarget_lock_acquire_recursive>
 801f55c:	bd10      	pop	{r4, pc}
 801f55e:	46c0      	nop			@ (mov r8, r8)
 801f560:	200038c0 	.word	0x200038c0

0801f564 <__malloc_unlock>:
 801f564:	b510      	push	{r4, lr}
 801f566:	4802      	ldr	r0, [pc, #8]	@ (801f570 <__malloc_unlock+0xc>)
 801f568:	f7fe fcf4 	bl	801df54 <__retarget_lock_release_recursive>
 801f56c:	bd10      	pop	{r4, pc}
 801f56e:	46c0      	nop			@ (mov r8, r8)
 801f570:	200038c0 	.word	0x200038c0

0801f574 <_Balloc>:
 801f574:	b570      	push	{r4, r5, r6, lr}
 801f576:	69c5      	ldr	r5, [r0, #28]
 801f578:	0006      	movs	r6, r0
 801f57a:	000c      	movs	r4, r1
 801f57c:	2d00      	cmp	r5, #0
 801f57e:	d10e      	bne.n	801f59e <_Balloc+0x2a>
 801f580:	2010      	movs	r0, #16
 801f582:	f7ff ff29 	bl	801f3d8 <malloc>
 801f586:	1e02      	subs	r2, r0, #0
 801f588:	61f0      	str	r0, [r6, #28]
 801f58a:	d104      	bne.n	801f596 <_Balloc+0x22>
 801f58c:	216b      	movs	r1, #107	@ 0x6b
 801f58e:	4b19      	ldr	r3, [pc, #100]	@ (801f5f4 <_Balloc+0x80>)
 801f590:	4819      	ldr	r0, [pc, #100]	@ (801f5f8 <_Balloc+0x84>)
 801f592:	f001 f8e1 	bl	8020758 <__assert_func>
 801f596:	6045      	str	r5, [r0, #4]
 801f598:	6085      	str	r5, [r0, #8]
 801f59a:	6005      	str	r5, [r0, #0]
 801f59c:	60c5      	str	r5, [r0, #12]
 801f59e:	69f5      	ldr	r5, [r6, #28]
 801f5a0:	68eb      	ldr	r3, [r5, #12]
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	d013      	beq.n	801f5ce <_Balloc+0x5a>
 801f5a6:	69f3      	ldr	r3, [r6, #28]
 801f5a8:	00a2      	lsls	r2, r4, #2
 801f5aa:	68db      	ldr	r3, [r3, #12]
 801f5ac:	189b      	adds	r3, r3, r2
 801f5ae:	6818      	ldr	r0, [r3, #0]
 801f5b0:	2800      	cmp	r0, #0
 801f5b2:	d118      	bne.n	801f5e6 <_Balloc+0x72>
 801f5b4:	2101      	movs	r1, #1
 801f5b6:	000d      	movs	r5, r1
 801f5b8:	40a5      	lsls	r5, r4
 801f5ba:	1d6a      	adds	r2, r5, #5
 801f5bc:	0030      	movs	r0, r6
 801f5be:	0092      	lsls	r2, r2, #2
 801f5c0:	f001 f8e8 	bl	8020794 <_calloc_r>
 801f5c4:	2800      	cmp	r0, #0
 801f5c6:	d00c      	beq.n	801f5e2 <_Balloc+0x6e>
 801f5c8:	6044      	str	r4, [r0, #4]
 801f5ca:	6085      	str	r5, [r0, #8]
 801f5cc:	e00d      	b.n	801f5ea <_Balloc+0x76>
 801f5ce:	2221      	movs	r2, #33	@ 0x21
 801f5d0:	2104      	movs	r1, #4
 801f5d2:	0030      	movs	r0, r6
 801f5d4:	f001 f8de 	bl	8020794 <_calloc_r>
 801f5d8:	69f3      	ldr	r3, [r6, #28]
 801f5da:	60e8      	str	r0, [r5, #12]
 801f5dc:	68db      	ldr	r3, [r3, #12]
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d1e1      	bne.n	801f5a6 <_Balloc+0x32>
 801f5e2:	2000      	movs	r0, #0
 801f5e4:	bd70      	pop	{r4, r5, r6, pc}
 801f5e6:	6802      	ldr	r2, [r0, #0]
 801f5e8:	601a      	str	r2, [r3, #0]
 801f5ea:	2300      	movs	r3, #0
 801f5ec:	6103      	str	r3, [r0, #16]
 801f5ee:	60c3      	str	r3, [r0, #12]
 801f5f0:	e7f8      	b.n	801f5e4 <_Balloc+0x70>
 801f5f2:	46c0      	nop			@ (mov r8, r8)
 801f5f4:	08022dd2 	.word	0x08022dd2
 801f5f8:	08022eb2 	.word	0x08022eb2

0801f5fc <_Bfree>:
 801f5fc:	b570      	push	{r4, r5, r6, lr}
 801f5fe:	69c6      	ldr	r6, [r0, #28]
 801f600:	0005      	movs	r5, r0
 801f602:	000c      	movs	r4, r1
 801f604:	2e00      	cmp	r6, #0
 801f606:	d10e      	bne.n	801f626 <_Bfree+0x2a>
 801f608:	2010      	movs	r0, #16
 801f60a:	f7ff fee5 	bl	801f3d8 <malloc>
 801f60e:	1e02      	subs	r2, r0, #0
 801f610:	61e8      	str	r0, [r5, #28]
 801f612:	d104      	bne.n	801f61e <_Bfree+0x22>
 801f614:	218f      	movs	r1, #143	@ 0x8f
 801f616:	4b09      	ldr	r3, [pc, #36]	@ (801f63c <_Bfree+0x40>)
 801f618:	4809      	ldr	r0, [pc, #36]	@ (801f640 <_Bfree+0x44>)
 801f61a:	f001 f89d 	bl	8020758 <__assert_func>
 801f61e:	6046      	str	r6, [r0, #4]
 801f620:	6086      	str	r6, [r0, #8]
 801f622:	6006      	str	r6, [r0, #0]
 801f624:	60c6      	str	r6, [r0, #12]
 801f626:	2c00      	cmp	r4, #0
 801f628:	d007      	beq.n	801f63a <_Bfree+0x3e>
 801f62a:	69eb      	ldr	r3, [r5, #28]
 801f62c:	6862      	ldr	r2, [r4, #4]
 801f62e:	68db      	ldr	r3, [r3, #12]
 801f630:	0092      	lsls	r2, r2, #2
 801f632:	189b      	adds	r3, r3, r2
 801f634:	681a      	ldr	r2, [r3, #0]
 801f636:	6022      	str	r2, [r4, #0]
 801f638:	601c      	str	r4, [r3, #0]
 801f63a:	bd70      	pop	{r4, r5, r6, pc}
 801f63c:	08022dd2 	.word	0x08022dd2
 801f640:	08022eb2 	.word	0x08022eb2

0801f644 <__multadd>:
 801f644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f646:	000f      	movs	r7, r1
 801f648:	9001      	str	r0, [sp, #4]
 801f64a:	000c      	movs	r4, r1
 801f64c:	001e      	movs	r6, r3
 801f64e:	2000      	movs	r0, #0
 801f650:	690d      	ldr	r5, [r1, #16]
 801f652:	3714      	adds	r7, #20
 801f654:	683b      	ldr	r3, [r7, #0]
 801f656:	3001      	adds	r0, #1
 801f658:	b299      	uxth	r1, r3
 801f65a:	4351      	muls	r1, r2
 801f65c:	0c1b      	lsrs	r3, r3, #16
 801f65e:	4353      	muls	r3, r2
 801f660:	1989      	adds	r1, r1, r6
 801f662:	0c0e      	lsrs	r6, r1, #16
 801f664:	199b      	adds	r3, r3, r6
 801f666:	0c1e      	lsrs	r6, r3, #16
 801f668:	b289      	uxth	r1, r1
 801f66a:	041b      	lsls	r3, r3, #16
 801f66c:	185b      	adds	r3, r3, r1
 801f66e:	c708      	stmia	r7!, {r3}
 801f670:	4285      	cmp	r5, r0
 801f672:	dcef      	bgt.n	801f654 <__multadd+0x10>
 801f674:	2e00      	cmp	r6, #0
 801f676:	d022      	beq.n	801f6be <__multadd+0x7a>
 801f678:	68a3      	ldr	r3, [r4, #8]
 801f67a:	42ab      	cmp	r3, r5
 801f67c:	dc19      	bgt.n	801f6b2 <__multadd+0x6e>
 801f67e:	6861      	ldr	r1, [r4, #4]
 801f680:	9801      	ldr	r0, [sp, #4]
 801f682:	3101      	adds	r1, #1
 801f684:	f7ff ff76 	bl	801f574 <_Balloc>
 801f688:	1e07      	subs	r7, r0, #0
 801f68a:	d105      	bne.n	801f698 <__multadd+0x54>
 801f68c:	003a      	movs	r2, r7
 801f68e:	21ba      	movs	r1, #186	@ 0xba
 801f690:	4b0c      	ldr	r3, [pc, #48]	@ (801f6c4 <__multadd+0x80>)
 801f692:	480d      	ldr	r0, [pc, #52]	@ (801f6c8 <__multadd+0x84>)
 801f694:	f001 f860 	bl	8020758 <__assert_func>
 801f698:	0021      	movs	r1, r4
 801f69a:	6922      	ldr	r2, [r4, #16]
 801f69c:	310c      	adds	r1, #12
 801f69e:	3202      	adds	r2, #2
 801f6a0:	0092      	lsls	r2, r2, #2
 801f6a2:	300c      	adds	r0, #12
 801f6a4:	f7fe fc62 	bl	801df6c <memcpy>
 801f6a8:	0021      	movs	r1, r4
 801f6aa:	9801      	ldr	r0, [sp, #4]
 801f6ac:	f7ff ffa6 	bl	801f5fc <_Bfree>
 801f6b0:	003c      	movs	r4, r7
 801f6b2:	1d2b      	adds	r3, r5, #4
 801f6b4:	009b      	lsls	r3, r3, #2
 801f6b6:	18e3      	adds	r3, r4, r3
 801f6b8:	3501      	adds	r5, #1
 801f6ba:	605e      	str	r6, [r3, #4]
 801f6bc:	6125      	str	r5, [r4, #16]
 801f6be:	0020      	movs	r0, r4
 801f6c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f6c2:	46c0      	nop			@ (mov r8, r8)
 801f6c4:	08022e41 	.word	0x08022e41
 801f6c8:	08022eb2 	.word	0x08022eb2

0801f6cc <__s2b>:
 801f6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f6ce:	0007      	movs	r7, r0
 801f6d0:	0018      	movs	r0, r3
 801f6d2:	000c      	movs	r4, r1
 801f6d4:	3008      	adds	r0, #8
 801f6d6:	2109      	movs	r1, #9
 801f6d8:	9301      	str	r3, [sp, #4]
 801f6da:	0015      	movs	r5, r2
 801f6dc:	f7e0 fdec 	bl	80002b8 <__divsi3>
 801f6e0:	2301      	movs	r3, #1
 801f6e2:	2100      	movs	r1, #0
 801f6e4:	4283      	cmp	r3, r0
 801f6e6:	db0a      	blt.n	801f6fe <__s2b+0x32>
 801f6e8:	0038      	movs	r0, r7
 801f6ea:	f7ff ff43 	bl	801f574 <_Balloc>
 801f6ee:	1e01      	subs	r1, r0, #0
 801f6f0:	d108      	bne.n	801f704 <__s2b+0x38>
 801f6f2:	000a      	movs	r2, r1
 801f6f4:	4b19      	ldr	r3, [pc, #100]	@ (801f75c <__s2b+0x90>)
 801f6f6:	481a      	ldr	r0, [pc, #104]	@ (801f760 <__s2b+0x94>)
 801f6f8:	31d3      	adds	r1, #211	@ 0xd3
 801f6fa:	f001 f82d 	bl	8020758 <__assert_func>
 801f6fe:	005b      	lsls	r3, r3, #1
 801f700:	3101      	adds	r1, #1
 801f702:	e7ef      	b.n	801f6e4 <__s2b+0x18>
 801f704:	9b08      	ldr	r3, [sp, #32]
 801f706:	6143      	str	r3, [r0, #20]
 801f708:	2301      	movs	r3, #1
 801f70a:	6103      	str	r3, [r0, #16]
 801f70c:	2d09      	cmp	r5, #9
 801f70e:	dd18      	ble.n	801f742 <__s2b+0x76>
 801f710:	0023      	movs	r3, r4
 801f712:	3309      	adds	r3, #9
 801f714:	001e      	movs	r6, r3
 801f716:	9300      	str	r3, [sp, #0]
 801f718:	1964      	adds	r4, r4, r5
 801f71a:	7833      	ldrb	r3, [r6, #0]
 801f71c:	220a      	movs	r2, #10
 801f71e:	0038      	movs	r0, r7
 801f720:	3b30      	subs	r3, #48	@ 0x30
 801f722:	f7ff ff8f 	bl	801f644 <__multadd>
 801f726:	3601      	adds	r6, #1
 801f728:	0001      	movs	r1, r0
 801f72a:	42a6      	cmp	r6, r4
 801f72c:	d1f5      	bne.n	801f71a <__s2b+0x4e>
 801f72e:	002c      	movs	r4, r5
 801f730:	9b00      	ldr	r3, [sp, #0]
 801f732:	3c08      	subs	r4, #8
 801f734:	191c      	adds	r4, r3, r4
 801f736:	002e      	movs	r6, r5
 801f738:	9b01      	ldr	r3, [sp, #4]
 801f73a:	429e      	cmp	r6, r3
 801f73c:	db04      	blt.n	801f748 <__s2b+0x7c>
 801f73e:	0008      	movs	r0, r1
 801f740:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f742:	2509      	movs	r5, #9
 801f744:	340a      	adds	r4, #10
 801f746:	e7f6      	b.n	801f736 <__s2b+0x6a>
 801f748:	1b63      	subs	r3, r4, r5
 801f74a:	5d9b      	ldrb	r3, [r3, r6]
 801f74c:	220a      	movs	r2, #10
 801f74e:	0038      	movs	r0, r7
 801f750:	3b30      	subs	r3, #48	@ 0x30
 801f752:	f7ff ff77 	bl	801f644 <__multadd>
 801f756:	3601      	adds	r6, #1
 801f758:	0001      	movs	r1, r0
 801f75a:	e7ed      	b.n	801f738 <__s2b+0x6c>
 801f75c:	08022e41 	.word	0x08022e41
 801f760:	08022eb2 	.word	0x08022eb2

0801f764 <__hi0bits>:
 801f764:	2280      	movs	r2, #128	@ 0x80
 801f766:	0003      	movs	r3, r0
 801f768:	0252      	lsls	r2, r2, #9
 801f76a:	2000      	movs	r0, #0
 801f76c:	4293      	cmp	r3, r2
 801f76e:	d201      	bcs.n	801f774 <__hi0bits+0x10>
 801f770:	041b      	lsls	r3, r3, #16
 801f772:	3010      	adds	r0, #16
 801f774:	2280      	movs	r2, #128	@ 0x80
 801f776:	0452      	lsls	r2, r2, #17
 801f778:	4293      	cmp	r3, r2
 801f77a:	d201      	bcs.n	801f780 <__hi0bits+0x1c>
 801f77c:	3008      	adds	r0, #8
 801f77e:	021b      	lsls	r3, r3, #8
 801f780:	2280      	movs	r2, #128	@ 0x80
 801f782:	0552      	lsls	r2, r2, #21
 801f784:	4293      	cmp	r3, r2
 801f786:	d201      	bcs.n	801f78c <__hi0bits+0x28>
 801f788:	3004      	adds	r0, #4
 801f78a:	011b      	lsls	r3, r3, #4
 801f78c:	2280      	movs	r2, #128	@ 0x80
 801f78e:	05d2      	lsls	r2, r2, #23
 801f790:	4293      	cmp	r3, r2
 801f792:	d201      	bcs.n	801f798 <__hi0bits+0x34>
 801f794:	3002      	adds	r0, #2
 801f796:	009b      	lsls	r3, r3, #2
 801f798:	2b00      	cmp	r3, #0
 801f79a:	db03      	blt.n	801f7a4 <__hi0bits+0x40>
 801f79c:	3001      	adds	r0, #1
 801f79e:	4213      	tst	r3, r2
 801f7a0:	d100      	bne.n	801f7a4 <__hi0bits+0x40>
 801f7a2:	2020      	movs	r0, #32
 801f7a4:	4770      	bx	lr

0801f7a6 <__lo0bits>:
 801f7a6:	6803      	ldr	r3, [r0, #0]
 801f7a8:	0001      	movs	r1, r0
 801f7aa:	2207      	movs	r2, #7
 801f7ac:	0018      	movs	r0, r3
 801f7ae:	4010      	ands	r0, r2
 801f7b0:	4213      	tst	r3, r2
 801f7b2:	d00d      	beq.n	801f7d0 <__lo0bits+0x2a>
 801f7b4:	3a06      	subs	r2, #6
 801f7b6:	2000      	movs	r0, #0
 801f7b8:	4213      	tst	r3, r2
 801f7ba:	d105      	bne.n	801f7c8 <__lo0bits+0x22>
 801f7bc:	3002      	adds	r0, #2
 801f7be:	4203      	tst	r3, r0
 801f7c0:	d003      	beq.n	801f7ca <__lo0bits+0x24>
 801f7c2:	40d3      	lsrs	r3, r2
 801f7c4:	0010      	movs	r0, r2
 801f7c6:	600b      	str	r3, [r1, #0]
 801f7c8:	4770      	bx	lr
 801f7ca:	089b      	lsrs	r3, r3, #2
 801f7cc:	600b      	str	r3, [r1, #0]
 801f7ce:	e7fb      	b.n	801f7c8 <__lo0bits+0x22>
 801f7d0:	b29a      	uxth	r2, r3
 801f7d2:	2a00      	cmp	r2, #0
 801f7d4:	d101      	bne.n	801f7da <__lo0bits+0x34>
 801f7d6:	2010      	movs	r0, #16
 801f7d8:	0c1b      	lsrs	r3, r3, #16
 801f7da:	b2da      	uxtb	r2, r3
 801f7dc:	2a00      	cmp	r2, #0
 801f7de:	d101      	bne.n	801f7e4 <__lo0bits+0x3e>
 801f7e0:	3008      	adds	r0, #8
 801f7e2:	0a1b      	lsrs	r3, r3, #8
 801f7e4:	071a      	lsls	r2, r3, #28
 801f7e6:	d101      	bne.n	801f7ec <__lo0bits+0x46>
 801f7e8:	3004      	adds	r0, #4
 801f7ea:	091b      	lsrs	r3, r3, #4
 801f7ec:	079a      	lsls	r2, r3, #30
 801f7ee:	d101      	bne.n	801f7f4 <__lo0bits+0x4e>
 801f7f0:	3002      	adds	r0, #2
 801f7f2:	089b      	lsrs	r3, r3, #2
 801f7f4:	07da      	lsls	r2, r3, #31
 801f7f6:	d4e9      	bmi.n	801f7cc <__lo0bits+0x26>
 801f7f8:	3001      	adds	r0, #1
 801f7fa:	085b      	lsrs	r3, r3, #1
 801f7fc:	d1e6      	bne.n	801f7cc <__lo0bits+0x26>
 801f7fe:	2020      	movs	r0, #32
 801f800:	e7e2      	b.n	801f7c8 <__lo0bits+0x22>
	...

0801f804 <__i2b>:
 801f804:	b510      	push	{r4, lr}
 801f806:	000c      	movs	r4, r1
 801f808:	2101      	movs	r1, #1
 801f80a:	f7ff feb3 	bl	801f574 <_Balloc>
 801f80e:	2800      	cmp	r0, #0
 801f810:	d107      	bne.n	801f822 <__i2b+0x1e>
 801f812:	2146      	movs	r1, #70	@ 0x46
 801f814:	4c05      	ldr	r4, [pc, #20]	@ (801f82c <__i2b+0x28>)
 801f816:	0002      	movs	r2, r0
 801f818:	4b05      	ldr	r3, [pc, #20]	@ (801f830 <__i2b+0x2c>)
 801f81a:	0020      	movs	r0, r4
 801f81c:	31ff      	adds	r1, #255	@ 0xff
 801f81e:	f000 ff9b 	bl	8020758 <__assert_func>
 801f822:	2301      	movs	r3, #1
 801f824:	6144      	str	r4, [r0, #20]
 801f826:	6103      	str	r3, [r0, #16]
 801f828:	bd10      	pop	{r4, pc}
 801f82a:	46c0      	nop			@ (mov r8, r8)
 801f82c:	08022eb2 	.word	0x08022eb2
 801f830:	08022e41 	.word	0x08022e41

0801f834 <__multiply>:
 801f834:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f836:	0014      	movs	r4, r2
 801f838:	690a      	ldr	r2, [r1, #16]
 801f83a:	6923      	ldr	r3, [r4, #16]
 801f83c:	000d      	movs	r5, r1
 801f83e:	b08b      	sub	sp, #44	@ 0x2c
 801f840:	429a      	cmp	r2, r3
 801f842:	db02      	blt.n	801f84a <__multiply+0x16>
 801f844:	0023      	movs	r3, r4
 801f846:	000c      	movs	r4, r1
 801f848:	001d      	movs	r5, r3
 801f84a:	6927      	ldr	r7, [r4, #16]
 801f84c:	692e      	ldr	r6, [r5, #16]
 801f84e:	6861      	ldr	r1, [r4, #4]
 801f850:	19bb      	adds	r3, r7, r6
 801f852:	9303      	str	r3, [sp, #12]
 801f854:	68a3      	ldr	r3, [r4, #8]
 801f856:	19ba      	adds	r2, r7, r6
 801f858:	4293      	cmp	r3, r2
 801f85a:	da00      	bge.n	801f85e <__multiply+0x2a>
 801f85c:	3101      	adds	r1, #1
 801f85e:	f7ff fe89 	bl	801f574 <_Balloc>
 801f862:	9002      	str	r0, [sp, #8]
 801f864:	2800      	cmp	r0, #0
 801f866:	d106      	bne.n	801f876 <__multiply+0x42>
 801f868:	21b1      	movs	r1, #177	@ 0xb1
 801f86a:	4b49      	ldr	r3, [pc, #292]	@ (801f990 <__multiply+0x15c>)
 801f86c:	4849      	ldr	r0, [pc, #292]	@ (801f994 <__multiply+0x160>)
 801f86e:	9a02      	ldr	r2, [sp, #8]
 801f870:	0049      	lsls	r1, r1, #1
 801f872:	f000 ff71 	bl	8020758 <__assert_func>
 801f876:	9b02      	ldr	r3, [sp, #8]
 801f878:	2200      	movs	r2, #0
 801f87a:	3314      	adds	r3, #20
 801f87c:	469c      	mov	ip, r3
 801f87e:	19bb      	adds	r3, r7, r6
 801f880:	009b      	lsls	r3, r3, #2
 801f882:	4463      	add	r3, ip
 801f884:	9304      	str	r3, [sp, #16]
 801f886:	4663      	mov	r3, ip
 801f888:	9904      	ldr	r1, [sp, #16]
 801f88a:	428b      	cmp	r3, r1
 801f88c:	d32a      	bcc.n	801f8e4 <__multiply+0xb0>
 801f88e:	0023      	movs	r3, r4
 801f890:	00bf      	lsls	r7, r7, #2
 801f892:	3314      	adds	r3, #20
 801f894:	3514      	adds	r5, #20
 801f896:	9308      	str	r3, [sp, #32]
 801f898:	00b6      	lsls	r6, r6, #2
 801f89a:	19db      	adds	r3, r3, r7
 801f89c:	9305      	str	r3, [sp, #20]
 801f89e:	19ab      	adds	r3, r5, r6
 801f8a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801f8a2:	2304      	movs	r3, #4
 801f8a4:	9306      	str	r3, [sp, #24]
 801f8a6:	0023      	movs	r3, r4
 801f8a8:	9a05      	ldr	r2, [sp, #20]
 801f8aa:	3315      	adds	r3, #21
 801f8ac:	9501      	str	r5, [sp, #4]
 801f8ae:	429a      	cmp	r2, r3
 801f8b0:	d305      	bcc.n	801f8be <__multiply+0x8a>
 801f8b2:	1b13      	subs	r3, r2, r4
 801f8b4:	3b15      	subs	r3, #21
 801f8b6:	089b      	lsrs	r3, r3, #2
 801f8b8:	3301      	adds	r3, #1
 801f8ba:	009b      	lsls	r3, r3, #2
 801f8bc:	9306      	str	r3, [sp, #24]
 801f8be:	9b01      	ldr	r3, [sp, #4]
 801f8c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f8c2:	4293      	cmp	r3, r2
 801f8c4:	d310      	bcc.n	801f8e8 <__multiply+0xb4>
 801f8c6:	9b03      	ldr	r3, [sp, #12]
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	dd05      	ble.n	801f8d8 <__multiply+0xa4>
 801f8cc:	9b04      	ldr	r3, [sp, #16]
 801f8ce:	3b04      	subs	r3, #4
 801f8d0:	9304      	str	r3, [sp, #16]
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d056      	beq.n	801f986 <__multiply+0x152>
 801f8d8:	9b02      	ldr	r3, [sp, #8]
 801f8da:	9a03      	ldr	r2, [sp, #12]
 801f8dc:	0018      	movs	r0, r3
 801f8de:	611a      	str	r2, [r3, #16]
 801f8e0:	b00b      	add	sp, #44	@ 0x2c
 801f8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8e4:	c304      	stmia	r3!, {r2}
 801f8e6:	e7cf      	b.n	801f888 <__multiply+0x54>
 801f8e8:	9b01      	ldr	r3, [sp, #4]
 801f8ea:	6818      	ldr	r0, [r3, #0]
 801f8ec:	b280      	uxth	r0, r0
 801f8ee:	2800      	cmp	r0, #0
 801f8f0:	d01e      	beq.n	801f930 <__multiply+0xfc>
 801f8f2:	4667      	mov	r7, ip
 801f8f4:	2500      	movs	r5, #0
 801f8f6:	9e08      	ldr	r6, [sp, #32]
 801f8f8:	ce02      	ldmia	r6!, {r1}
 801f8fa:	683b      	ldr	r3, [r7, #0]
 801f8fc:	9307      	str	r3, [sp, #28]
 801f8fe:	b28b      	uxth	r3, r1
 801f900:	4343      	muls	r3, r0
 801f902:	001a      	movs	r2, r3
 801f904:	466b      	mov	r3, sp
 801f906:	0c09      	lsrs	r1, r1, #16
 801f908:	8b9b      	ldrh	r3, [r3, #28]
 801f90a:	4341      	muls	r1, r0
 801f90c:	18d3      	adds	r3, r2, r3
 801f90e:	9a07      	ldr	r2, [sp, #28]
 801f910:	195b      	adds	r3, r3, r5
 801f912:	0c12      	lsrs	r2, r2, #16
 801f914:	1889      	adds	r1, r1, r2
 801f916:	0c1a      	lsrs	r2, r3, #16
 801f918:	188a      	adds	r2, r1, r2
 801f91a:	b29b      	uxth	r3, r3
 801f91c:	0c15      	lsrs	r5, r2, #16
 801f91e:	0412      	lsls	r2, r2, #16
 801f920:	431a      	orrs	r2, r3
 801f922:	9b05      	ldr	r3, [sp, #20]
 801f924:	c704      	stmia	r7!, {r2}
 801f926:	42b3      	cmp	r3, r6
 801f928:	d8e6      	bhi.n	801f8f8 <__multiply+0xc4>
 801f92a:	4663      	mov	r3, ip
 801f92c:	9a06      	ldr	r2, [sp, #24]
 801f92e:	509d      	str	r5, [r3, r2]
 801f930:	9b01      	ldr	r3, [sp, #4]
 801f932:	6818      	ldr	r0, [r3, #0]
 801f934:	0c00      	lsrs	r0, r0, #16
 801f936:	d020      	beq.n	801f97a <__multiply+0x146>
 801f938:	4663      	mov	r3, ip
 801f93a:	0025      	movs	r5, r4
 801f93c:	4661      	mov	r1, ip
 801f93e:	2700      	movs	r7, #0
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	3514      	adds	r5, #20
 801f944:	682a      	ldr	r2, [r5, #0]
 801f946:	680e      	ldr	r6, [r1, #0]
 801f948:	b292      	uxth	r2, r2
 801f94a:	4342      	muls	r2, r0
 801f94c:	0c36      	lsrs	r6, r6, #16
 801f94e:	1992      	adds	r2, r2, r6
 801f950:	19d2      	adds	r2, r2, r7
 801f952:	0416      	lsls	r6, r2, #16
 801f954:	b29b      	uxth	r3, r3
 801f956:	431e      	orrs	r6, r3
 801f958:	600e      	str	r6, [r1, #0]
 801f95a:	cd40      	ldmia	r5!, {r6}
 801f95c:	684b      	ldr	r3, [r1, #4]
 801f95e:	0c36      	lsrs	r6, r6, #16
 801f960:	4346      	muls	r6, r0
 801f962:	b29b      	uxth	r3, r3
 801f964:	0c12      	lsrs	r2, r2, #16
 801f966:	18f3      	adds	r3, r6, r3
 801f968:	189b      	adds	r3, r3, r2
 801f96a:	9a05      	ldr	r2, [sp, #20]
 801f96c:	0c1f      	lsrs	r7, r3, #16
 801f96e:	3104      	adds	r1, #4
 801f970:	42aa      	cmp	r2, r5
 801f972:	d8e7      	bhi.n	801f944 <__multiply+0x110>
 801f974:	4662      	mov	r2, ip
 801f976:	9906      	ldr	r1, [sp, #24]
 801f978:	5053      	str	r3, [r2, r1]
 801f97a:	9b01      	ldr	r3, [sp, #4]
 801f97c:	3304      	adds	r3, #4
 801f97e:	9301      	str	r3, [sp, #4]
 801f980:	2304      	movs	r3, #4
 801f982:	449c      	add	ip, r3
 801f984:	e79b      	b.n	801f8be <__multiply+0x8a>
 801f986:	9b03      	ldr	r3, [sp, #12]
 801f988:	3b01      	subs	r3, #1
 801f98a:	9303      	str	r3, [sp, #12]
 801f98c:	e79b      	b.n	801f8c6 <__multiply+0x92>
 801f98e:	46c0      	nop			@ (mov r8, r8)
 801f990:	08022e41 	.word	0x08022e41
 801f994:	08022eb2 	.word	0x08022eb2

0801f998 <__pow5mult>:
 801f998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f99a:	2303      	movs	r3, #3
 801f99c:	0015      	movs	r5, r2
 801f99e:	0007      	movs	r7, r0
 801f9a0:	000e      	movs	r6, r1
 801f9a2:	401a      	ands	r2, r3
 801f9a4:	421d      	tst	r5, r3
 801f9a6:	d008      	beq.n	801f9ba <__pow5mult+0x22>
 801f9a8:	4925      	ldr	r1, [pc, #148]	@ (801fa40 <__pow5mult+0xa8>)
 801f9aa:	3a01      	subs	r2, #1
 801f9ac:	0092      	lsls	r2, r2, #2
 801f9ae:	5852      	ldr	r2, [r2, r1]
 801f9b0:	2300      	movs	r3, #0
 801f9b2:	0031      	movs	r1, r6
 801f9b4:	f7ff fe46 	bl	801f644 <__multadd>
 801f9b8:	0006      	movs	r6, r0
 801f9ba:	10ad      	asrs	r5, r5, #2
 801f9bc:	d03d      	beq.n	801fa3a <__pow5mult+0xa2>
 801f9be:	69fc      	ldr	r4, [r7, #28]
 801f9c0:	2c00      	cmp	r4, #0
 801f9c2:	d10f      	bne.n	801f9e4 <__pow5mult+0x4c>
 801f9c4:	2010      	movs	r0, #16
 801f9c6:	f7ff fd07 	bl	801f3d8 <malloc>
 801f9ca:	1e02      	subs	r2, r0, #0
 801f9cc:	61f8      	str	r0, [r7, #28]
 801f9ce:	d105      	bne.n	801f9dc <__pow5mult+0x44>
 801f9d0:	21b4      	movs	r1, #180	@ 0xb4
 801f9d2:	4b1c      	ldr	r3, [pc, #112]	@ (801fa44 <__pow5mult+0xac>)
 801f9d4:	481c      	ldr	r0, [pc, #112]	@ (801fa48 <__pow5mult+0xb0>)
 801f9d6:	31ff      	adds	r1, #255	@ 0xff
 801f9d8:	f000 febe 	bl	8020758 <__assert_func>
 801f9dc:	6044      	str	r4, [r0, #4]
 801f9de:	6084      	str	r4, [r0, #8]
 801f9e0:	6004      	str	r4, [r0, #0]
 801f9e2:	60c4      	str	r4, [r0, #12]
 801f9e4:	69fb      	ldr	r3, [r7, #28]
 801f9e6:	689c      	ldr	r4, [r3, #8]
 801f9e8:	9301      	str	r3, [sp, #4]
 801f9ea:	2c00      	cmp	r4, #0
 801f9ec:	d108      	bne.n	801fa00 <__pow5mult+0x68>
 801f9ee:	0038      	movs	r0, r7
 801f9f0:	4916      	ldr	r1, [pc, #88]	@ (801fa4c <__pow5mult+0xb4>)
 801f9f2:	f7ff ff07 	bl	801f804 <__i2b>
 801f9f6:	9b01      	ldr	r3, [sp, #4]
 801f9f8:	0004      	movs	r4, r0
 801f9fa:	6098      	str	r0, [r3, #8]
 801f9fc:	2300      	movs	r3, #0
 801f9fe:	6003      	str	r3, [r0, #0]
 801fa00:	2301      	movs	r3, #1
 801fa02:	421d      	tst	r5, r3
 801fa04:	d00a      	beq.n	801fa1c <__pow5mult+0x84>
 801fa06:	0031      	movs	r1, r6
 801fa08:	0022      	movs	r2, r4
 801fa0a:	0038      	movs	r0, r7
 801fa0c:	f7ff ff12 	bl	801f834 <__multiply>
 801fa10:	0031      	movs	r1, r6
 801fa12:	9001      	str	r0, [sp, #4]
 801fa14:	0038      	movs	r0, r7
 801fa16:	f7ff fdf1 	bl	801f5fc <_Bfree>
 801fa1a:	9e01      	ldr	r6, [sp, #4]
 801fa1c:	106d      	asrs	r5, r5, #1
 801fa1e:	d00c      	beq.n	801fa3a <__pow5mult+0xa2>
 801fa20:	6820      	ldr	r0, [r4, #0]
 801fa22:	2800      	cmp	r0, #0
 801fa24:	d107      	bne.n	801fa36 <__pow5mult+0x9e>
 801fa26:	0022      	movs	r2, r4
 801fa28:	0021      	movs	r1, r4
 801fa2a:	0038      	movs	r0, r7
 801fa2c:	f7ff ff02 	bl	801f834 <__multiply>
 801fa30:	2300      	movs	r3, #0
 801fa32:	6020      	str	r0, [r4, #0]
 801fa34:	6003      	str	r3, [r0, #0]
 801fa36:	0004      	movs	r4, r0
 801fa38:	e7e2      	b.n	801fa00 <__pow5mult+0x68>
 801fa3a:	0030      	movs	r0, r6
 801fa3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fa3e:	46c0      	nop			@ (mov r8, r8)
 801fa40:	08022f0c 	.word	0x08022f0c
 801fa44:	08022dd2 	.word	0x08022dd2
 801fa48:	08022eb2 	.word	0x08022eb2
 801fa4c:	00000271 	.word	0x00000271

0801fa50 <__lshift>:
 801fa50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa52:	000c      	movs	r4, r1
 801fa54:	0016      	movs	r6, r2
 801fa56:	6923      	ldr	r3, [r4, #16]
 801fa58:	1157      	asrs	r7, r2, #5
 801fa5a:	b085      	sub	sp, #20
 801fa5c:	18fb      	adds	r3, r7, r3
 801fa5e:	9301      	str	r3, [sp, #4]
 801fa60:	3301      	adds	r3, #1
 801fa62:	9300      	str	r3, [sp, #0]
 801fa64:	6849      	ldr	r1, [r1, #4]
 801fa66:	68a3      	ldr	r3, [r4, #8]
 801fa68:	9002      	str	r0, [sp, #8]
 801fa6a:	9a00      	ldr	r2, [sp, #0]
 801fa6c:	4293      	cmp	r3, r2
 801fa6e:	db10      	blt.n	801fa92 <__lshift+0x42>
 801fa70:	9802      	ldr	r0, [sp, #8]
 801fa72:	f7ff fd7f 	bl	801f574 <_Balloc>
 801fa76:	2300      	movs	r3, #0
 801fa78:	0001      	movs	r1, r0
 801fa7a:	0005      	movs	r5, r0
 801fa7c:	001a      	movs	r2, r3
 801fa7e:	3114      	adds	r1, #20
 801fa80:	4298      	cmp	r0, r3
 801fa82:	d10c      	bne.n	801fa9e <__lshift+0x4e>
 801fa84:	21ef      	movs	r1, #239	@ 0xef
 801fa86:	002a      	movs	r2, r5
 801fa88:	4b25      	ldr	r3, [pc, #148]	@ (801fb20 <__lshift+0xd0>)
 801fa8a:	4826      	ldr	r0, [pc, #152]	@ (801fb24 <__lshift+0xd4>)
 801fa8c:	0049      	lsls	r1, r1, #1
 801fa8e:	f000 fe63 	bl	8020758 <__assert_func>
 801fa92:	3101      	adds	r1, #1
 801fa94:	005b      	lsls	r3, r3, #1
 801fa96:	e7e8      	b.n	801fa6a <__lshift+0x1a>
 801fa98:	0098      	lsls	r0, r3, #2
 801fa9a:	500a      	str	r2, [r1, r0]
 801fa9c:	3301      	adds	r3, #1
 801fa9e:	42bb      	cmp	r3, r7
 801faa0:	dbfa      	blt.n	801fa98 <__lshift+0x48>
 801faa2:	43fb      	mvns	r3, r7
 801faa4:	17db      	asrs	r3, r3, #31
 801faa6:	401f      	ands	r7, r3
 801faa8:	00bf      	lsls	r7, r7, #2
 801faaa:	0023      	movs	r3, r4
 801faac:	201f      	movs	r0, #31
 801faae:	19c9      	adds	r1, r1, r7
 801fab0:	0037      	movs	r7, r6
 801fab2:	6922      	ldr	r2, [r4, #16]
 801fab4:	3314      	adds	r3, #20
 801fab6:	0092      	lsls	r2, r2, #2
 801fab8:	189a      	adds	r2, r3, r2
 801faba:	4007      	ands	r7, r0
 801fabc:	4206      	tst	r6, r0
 801fabe:	d029      	beq.n	801fb14 <__lshift+0xc4>
 801fac0:	3001      	adds	r0, #1
 801fac2:	1bc0      	subs	r0, r0, r7
 801fac4:	9003      	str	r0, [sp, #12]
 801fac6:	468c      	mov	ip, r1
 801fac8:	2000      	movs	r0, #0
 801faca:	681e      	ldr	r6, [r3, #0]
 801facc:	40be      	lsls	r6, r7
 801face:	4306      	orrs	r6, r0
 801fad0:	4660      	mov	r0, ip
 801fad2:	c040      	stmia	r0!, {r6}
 801fad4:	4684      	mov	ip, r0
 801fad6:	9e03      	ldr	r6, [sp, #12]
 801fad8:	cb01      	ldmia	r3!, {r0}
 801fada:	40f0      	lsrs	r0, r6
 801fadc:	429a      	cmp	r2, r3
 801fade:	d8f4      	bhi.n	801faca <__lshift+0x7a>
 801fae0:	0026      	movs	r6, r4
 801fae2:	3615      	adds	r6, #21
 801fae4:	2304      	movs	r3, #4
 801fae6:	42b2      	cmp	r2, r6
 801fae8:	d304      	bcc.n	801faf4 <__lshift+0xa4>
 801faea:	1b13      	subs	r3, r2, r4
 801faec:	3b15      	subs	r3, #21
 801faee:	089b      	lsrs	r3, r3, #2
 801faf0:	3301      	adds	r3, #1
 801faf2:	009b      	lsls	r3, r3, #2
 801faf4:	50c8      	str	r0, [r1, r3]
 801faf6:	2800      	cmp	r0, #0
 801faf8:	d002      	beq.n	801fb00 <__lshift+0xb0>
 801fafa:	9b01      	ldr	r3, [sp, #4]
 801fafc:	3302      	adds	r3, #2
 801fafe:	9300      	str	r3, [sp, #0]
 801fb00:	9b00      	ldr	r3, [sp, #0]
 801fb02:	9802      	ldr	r0, [sp, #8]
 801fb04:	3b01      	subs	r3, #1
 801fb06:	0021      	movs	r1, r4
 801fb08:	612b      	str	r3, [r5, #16]
 801fb0a:	f7ff fd77 	bl	801f5fc <_Bfree>
 801fb0e:	0028      	movs	r0, r5
 801fb10:	b005      	add	sp, #20
 801fb12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb14:	cb01      	ldmia	r3!, {r0}
 801fb16:	c101      	stmia	r1!, {r0}
 801fb18:	429a      	cmp	r2, r3
 801fb1a:	d8fb      	bhi.n	801fb14 <__lshift+0xc4>
 801fb1c:	e7f0      	b.n	801fb00 <__lshift+0xb0>
 801fb1e:	46c0      	nop			@ (mov r8, r8)
 801fb20:	08022e41 	.word	0x08022e41
 801fb24:	08022eb2 	.word	0x08022eb2

0801fb28 <__mcmp>:
 801fb28:	b530      	push	{r4, r5, lr}
 801fb2a:	690b      	ldr	r3, [r1, #16]
 801fb2c:	6904      	ldr	r4, [r0, #16]
 801fb2e:	0002      	movs	r2, r0
 801fb30:	1ae0      	subs	r0, r4, r3
 801fb32:	429c      	cmp	r4, r3
 801fb34:	d10f      	bne.n	801fb56 <__mcmp+0x2e>
 801fb36:	3214      	adds	r2, #20
 801fb38:	009b      	lsls	r3, r3, #2
 801fb3a:	3114      	adds	r1, #20
 801fb3c:	0014      	movs	r4, r2
 801fb3e:	18c9      	adds	r1, r1, r3
 801fb40:	18d2      	adds	r2, r2, r3
 801fb42:	3a04      	subs	r2, #4
 801fb44:	3904      	subs	r1, #4
 801fb46:	6815      	ldr	r5, [r2, #0]
 801fb48:	680b      	ldr	r3, [r1, #0]
 801fb4a:	429d      	cmp	r5, r3
 801fb4c:	d004      	beq.n	801fb58 <__mcmp+0x30>
 801fb4e:	2001      	movs	r0, #1
 801fb50:	429d      	cmp	r5, r3
 801fb52:	d200      	bcs.n	801fb56 <__mcmp+0x2e>
 801fb54:	3802      	subs	r0, #2
 801fb56:	bd30      	pop	{r4, r5, pc}
 801fb58:	4294      	cmp	r4, r2
 801fb5a:	d3f2      	bcc.n	801fb42 <__mcmp+0x1a>
 801fb5c:	e7fb      	b.n	801fb56 <__mcmp+0x2e>
	...

0801fb60 <__mdiff>:
 801fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb62:	000c      	movs	r4, r1
 801fb64:	b087      	sub	sp, #28
 801fb66:	9000      	str	r0, [sp, #0]
 801fb68:	0011      	movs	r1, r2
 801fb6a:	0020      	movs	r0, r4
 801fb6c:	0017      	movs	r7, r2
 801fb6e:	f7ff ffdb 	bl	801fb28 <__mcmp>
 801fb72:	1e05      	subs	r5, r0, #0
 801fb74:	d110      	bne.n	801fb98 <__mdiff+0x38>
 801fb76:	0001      	movs	r1, r0
 801fb78:	9800      	ldr	r0, [sp, #0]
 801fb7a:	f7ff fcfb 	bl	801f574 <_Balloc>
 801fb7e:	1e02      	subs	r2, r0, #0
 801fb80:	d104      	bne.n	801fb8c <__mdiff+0x2c>
 801fb82:	4b40      	ldr	r3, [pc, #256]	@ (801fc84 <__mdiff+0x124>)
 801fb84:	4840      	ldr	r0, [pc, #256]	@ (801fc88 <__mdiff+0x128>)
 801fb86:	4941      	ldr	r1, [pc, #260]	@ (801fc8c <__mdiff+0x12c>)
 801fb88:	f000 fde6 	bl	8020758 <__assert_func>
 801fb8c:	2301      	movs	r3, #1
 801fb8e:	6145      	str	r5, [r0, #20]
 801fb90:	6103      	str	r3, [r0, #16]
 801fb92:	0010      	movs	r0, r2
 801fb94:	b007      	add	sp, #28
 801fb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb98:	2600      	movs	r6, #0
 801fb9a:	42b0      	cmp	r0, r6
 801fb9c:	da03      	bge.n	801fba6 <__mdiff+0x46>
 801fb9e:	0023      	movs	r3, r4
 801fba0:	003c      	movs	r4, r7
 801fba2:	001f      	movs	r7, r3
 801fba4:	3601      	adds	r6, #1
 801fba6:	6861      	ldr	r1, [r4, #4]
 801fba8:	9800      	ldr	r0, [sp, #0]
 801fbaa:	f7ff fce3 	bl	801f574 <_Balloc>
 801fbae:	1e02      	subs	r2, r0, #0
 801fbb0:	d103      	bne.n	801fbba <__mdiff+0x5a>
 801fbb2:	4b34      	ldr	r3, [pc, #208]	@ (801fc84 <__mdiff+0x124>)
 801fbb4:	4834      	ldr	r0, [pc, #208]	@ (801fc88 <__mdiff+0x128>)
 801fbb6:	4936      	ldr	r1, [pc, #216]	@ (801fc90 <__mdiff+0x130>)
 801fbb8:	e7e6      	b.n	801fb88 <__mdiff+0x28>
 801fbba:	6923      	ldr	r3, [r4, #16]
 801fbbc:	3414      	adds	r4, #20
 801fbbe:	9300      	str	r3, [sp, #0]
 801fbc0:	009b      	lsls	r3, r3, #2
 801fbc2:	18e3      	adds	r3, r4, r3
 801fbc4:	0021      	movs	r1, r4
 801fbc6:	9401      	str	r4, [sp, #4]
 801fbc8:	003c      	movs	r4, r7
 801fbca:	9302      	str	r3, [sp, #8]
 801fbcc:	693b      	ldr	r3, [r7, #16]
 801fbce:	3414      	adds	r4, #20
 801fbd0:	009b      	lsls	r3, r3, #2
 801fbd2:	18e3      	adds	r3, r4, r3
 801fbd4:	9303      	str	r3, [sp, #12]
 801fbd6:	0003      	movs	r3, r0
 801fbd8:	60c6      	str	r6, [r0, #12]
 801fbda:	468c      	mov	ip, r1
 801fbdc:	2000      	movs	r0, #0
 801fbde:	3314      	adds	r3, #20
 801fbe0:	9304      	str	r3, [sp, #16]
 801fbe2:	9305      	str	r3, [sp, #20]
 801fbe4:	4663      	mov	r3, ip
 801fbe6:	cb20      	ldmia	r3!, {r5}
 801fbe8:	b2a9      	uxth	r1, r5
 801fbea:	000e      	movs	r6, r1
 801fbec:	469c      	mov	ip, r3
 801fbee:	cc08      	ldmia	r4!, {r3}
 801fbf0:	0c2d      	lsrs	r5, r5, #16
 801fbf2:	b299      	uxth	r1, r3
 801fbf4:	1a71      	subs	r1, r6, r1
 801fbf6:	1809      	adds	r1, r1, r0
 801fbf8:	0c1b      	lsrs	r3, r3, #16
 801fbfa:	1408      	asrs	r0, r1, #16
 801fbfc:	1aeb      	subs	r3, r5, r3
 801fbfe:	181b      	adds	r3, r3, r0
 801fc00:	1418      	asrs	r0, r3, #16
 801fc02:	b289      	uxth	r1, r1
 801fc04:	041b      	lsls	r3, r3, #16
 801fc06:	4319      	orrs	r1, r3
 801fc08:	9b05      	ldr	r3, [sp, #20]
 801fc0a:	c302      	stmia	r3!, {r1}
 801fc0c:	9305      	str	r3, [sp, #20]
 801fc0e:	9b03      	ldr	r3, [sp, #12]
 801fc10:	42a3      	cmp	r3, r4
 801fc12:	d8e7      	bhi.n	801fbe4 <__mdiff+0x84>
 801fc14:	0039      	movs	r1, r7
 801fc16:	9c03      	ldr	r4, [sp, #12]
 801fc18:	3115      	adds	r1, #21
 801fc1a:	2304      	movs	r3, #4
 801fc1c:	428c      	cmp	r4, r1
 801fc1e:	d304      	bcc.n	801fc2a <__mdiff+0xca>
 801fc20:	1be3      	subs	r3, r4, r7
 801fc22:	3b15      	subs	r3, #21
 801fc24:	089b      	lsrs	r3, r3, #2
 801fc26:	3301      	adds	r3, #1
 801fc28:	009b      	lsls	r3, r3, #2
 801fc2a:	9901      	ldr	r1, [sp, #4]
 801fc2c:	18cd      	adds	r5, r1, r3
 801fc2e:	9904      	ldr	r1, [sp, #16]
 801fc30:	002e      	movs	r6, r5
 801fc32:	18cb      	adds	r3, r1, r3
 801fc34:	001f      	movs	r7, r3
 801fc36:	9902      	ldr	r1, [sp, #8]
 801fc38:	428e      	cmp	r6, r1
 801fc3a:	d311      	bcc.n	801fc60 <__mdiff+0x100>
 801fc3c:	9c02      	ldr	r4, [sp, #8]
 801fc3e:	1ee9      	subs	r1, r5, #3
 801fc40:	2000      	movs	r0, #0
 801fc42:	428c      	cmp	r4, r1
 801fc44:	d304      	bcc.n	801fc50 <__mdiff+0xf0>
 801fc46:	0021      	movs	r1, r4
 801fc48:	3103      	adds	r1, #3
 801fc4a:	1b49      	subs	r1, r1, r5
 801fc4c:	0889      	lsrs	r1, r1, #2
 801fc4e:	0088      	lsls	r0, r1, #2
 801fc50:	181b      	adds	r3, r3, r0
 801fc52:	3b04      	subs	r3, #4
 801fc54:	6819      	ldr	r1, [r3, #0]
 801fc56:	2900      	cmp	r1, #0
 801fc58:	d010      	beq.n	801fc7c <__mdiff+0x11c>
 801fc5a:	9b00      	ldr	r3, [sp, #0]
 801fc5c:	6113      	str	r3, [r2, #16]
 801fc5e:	e798      	b.n	801fb92 <__mdiff+0x32>
 801fc60:	4684      	mov	ip, r0
 801fc62:	ce02      	ldmia	r6!, {r1}
 801fc64:	b288      	uxth	r0, r1
 801fc66:	4460      	add	r0, ip
 801fc68:	1400      	asrs	r0, r0, #16
 801fc6a:	0c0c      	lsrs	r4, r1, #16
 801fc6c:	1904      	adds	r4, r0, r4
 801fc6e:	4461      	add	r1, ip
 801fc70:	1420      	asrs	r0, r4, #16
 801fc72:	b289      	uxth	r1, r1
 801fc74:	0424      	lsls	r4, r4, #16
 801fc76:	4321      	orrs	r1, r4
 801fc78:	c702      	stmia	r7!, {r1}
 801fc7a:	e7dc      	b.n	801fc36 <__mdiff+0xd6>
 801fc7c:	9900      	ldr	r1, [sp, #0]
 801fc7e:	3901      	subs	r1, #1
 801fc80:	9100      	str	r1, [sp, #0]
 801fc82:	e7e6      	b.n	801fc52 <__mdiff+0xf2>
 801fc84:	08022e41 	.word	0x08022e41
 801fc88:	08022eb2 	.word	0x08022eb2
 801fc8c:	00000237 	.word	0x00000237
 801fc90:	00000245 	.word	0x00000245

0801fc94 <__ulp>:
 801fc94:	b510      	push	{r4, lr}
 801fc96:	2400      	movs	r4, #0
 801fc98:	4b0c      	ldr	r3, [pc, #48]	@ (801fccc <__ulp+0x38>)
 801fc9a:	4a0d      	ldr	r2, [pc, #52]	@ (801fcd0 <__ulp+0x3c>)
 801fc9c:	400b      	ands	r3, r1
 801fc9e:	189b      	adds	r3, r3, r2
 801fca0:	42a3      	cmp	r3, r4
 801fca2:	dc06      	bgt.n	801fcb2 <__ulp+0x1e>
 801fca4:	425b      	negs	r3, r3
 801fca6:	151a      	asrs	r2, r3, #20
 801fca8:	2a13      	cmp	r2, #19
 801fcaa:	dc05      	bgt.n	801fcb8 <__ulp+0x24>
 801fcac:	2380      	movs	r3, #128	@ 0x80
 801fcae:	031b      	lsls	r3, r3, #12
 801fcb0:	4113      	asrs	r3, r2
 801fcb2:	0019      	movs	r1, r3
 801fcb4:	0020      	movs	r0, r4
 801fcb6:	bd10      	pop	{r4, pc}
 801fcb8:	3a14      	subs	r2, #20
 801fcba:	2401      	movs	r4, #1
 801fcbc:	2a1e      	cmp	r2, #30
 801fcbe:	dc02      	bgt.n	801fcc6 <__ulp+0x32>
 801fcc0:	2480      	movs	r4, #128	@ 0x80
 801fcc2:	0624      	lsls	r4, r4, #24
 801fcc4:	40d4      	lsrs	r4, r2
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	e7f3      	b.n	801fcb2 <__ulp+0x1e>
 801fcca:	46c0      	nop			@ (mov r8, r8)
 801fccc:	7ff00000 	.word	0x7ff00000
 801fcd0:	fcc00000 	.word	0xfcc00000

0801fcd4 <__b2d>:
 801fcd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fcd6:	0006      	movs	r6, r0
 801fcd8:	6903      	ldr	r3, [r0, #16]
 801fcda:	3614      	adds	r6, #20
 801fcdc:	009b      	lsls	r3, r3, #2
 801fcde:	18f3      	adds	r3, r6, r3
 801fce0:	1f1d      	subs	r5, r3, #4
 801fce2:	682c      	ldr	r4, [r5, #0]
 801fce4:	000f      	movs	r7, r1
 801fce6:	0020      	movs	r0, r4
 801fce8:	9301      	str	r3, [sp, #4]
 801fcea:	f7ff fd3b 	bl	801f764 <__hi0bits>
 801fcee:	2220      	movs	r2, #32
 801fcf0:	1a12      	subs	r2, r2, r0
 801fcf2:	603a      	str	r2, [r7, #0]
 801fcf4:	0003      	movs	r3, r0
 801fcf6:	4a1c      	ldr	r2, [pc, #112]	@ (801fd68 <__b2d+0x94>)
 801fcf8:	280a      	cmp	r0, #10
 801fcfa:	dc15      	bgt.n	801fd28 <__b2d+0x54>
 801fcfc:	210b      	movs	r1, #11
 801fcfe:	0027      	movs	r7, r4
 801fd00:	1a09      	subs	r1, r1, r0
 801fd02:	40cf      	lsrs	r7, r1
 801fd04:	433a      	orrs	r2, r7
 801fd06:	468c      	mov	ip, r1
 801fd08:	0011      	movs	r1, r2
 801fd0a:	2200      	movs	r2, #0
 801fd0c:	42ae      	cmp	r6, r5
 801fd0e:	d202      	bcs.n	801fd16 <__b2d+0x42>
 801fd10:	9a01      	ldr	r2, [sp, #4]
 801fd12:	3a08      	subs	r2, #8
 801fd14:	6812      	ldr	r2, [r2, #0]
 801fd16:	3315      	adds	r3, #21
 801fd18:	409c      	lsls	r4, r3
 801fd1a:	4663      	mov	r3, ip
 801fd1c:	0027      	movs	r7, r4
 801fd1e:	40da      	lsrs	r2, r3
 801fd20:	4317      	orrs	r7, r2
 801fd22:	0038      	movs	r0, r7
 801fd24:	b003      	add	sp, #12
 801fd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd28:	2700      	movs	r7, #0
 801fd2a:	42ae      	cmp	r6, r5
 801fd2c:	d202      	bcs.n	801fd34 <__b2d+0x60>
 801fd2e:	9d01      	ldr	r5, [sp, #4]
 801fd30:	3d08      	subs	r5, #8
 801fd32:	682f      	ldr	r7, [r5, #0]
 801fd34:	210b      	movs	r1, #11
 801fd36:	4249      	negs	r1, r1
 801fd38:	468c      	mov	ip, r1
 801fd3a:	449c      	add	ip, r3
 801fd3c:	2b0b      	cmp	r3, #11
 801fd3e:	d010      	beq.n	801fd62 <__b2d+0x8e>
 801fd40:	4661      	mov	r1, ip
 801fd42:	2320      	movs	r3, #32
 801fd44:	408c      	lsls	r4, r1
 801fd46:	1a5b      	subs	r3, r3, r1
 801fd48:	0039      	movs	r1, r7
 801fd4a:	40d9      	lsrs	r1, r3
 801fd4c:	430c      	orrs	r4, r1
 801fd4e:	4322      	orrs	r2, r4
 801fd50:	0011      	movs	r1, r2
 801fd52:	2200      	movs	r2, #0
 801fd54:	42b5      	cmp	r5, r6
 801fd56:	d901      	bls.n	801fd5c <__b2d+0x88>
 801fd58:	3d04      	subs	r5, #4
 801fd5a:	682a      	ldr	r2, [r5, #0]
 801fd5c:	4664      	mov	r4, ip
 801fd5e:	40a7      	lsls	r7, r4
 801fd60:	e7dd      	b.n	801fd1e <__b2d+0x4a>
 801fd62:	4322      	orrs	r2, r4
 801fd64:	0011      	movs	r1, r2
 801fd66:	e7dc      	b.n	801fd22 <__b2d+0x4e>
 801fd68:	3ff00000 	.word	0x3ff00000

0801fd6c <__d2b>:
 801fd6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fd6e:	2101      	movs	r1, #1
 801fd70:	0016      	movs	r6, r2
 801fd72:	001f      	movs	r7, r3
 801fd74:	f7ff fbfe 	bl	801f574 <_Balloc>
 801fd78:	1e04      	subs	r4, r0, #0
 801fd7a:	d105      	bne.n	801fd88 <__d2b+0x1c>
 801fd7c:	0022      	movs	r2, r4
 801fd7e:	4b25      	ldr	r3, [pc, #148]	@ (801fe14 <__d2b+0xa8>)
 801fd80:	4825      	ldr	r0, [pc, #148]	@ (801fe18 <__d2b+0xac>)
 801fd82:	4926      	ldr	r1, [pc, #152]	@ (801fe1c <__d2b+0xb0>)
 801fd84:	f000 fce8 	bl	8020758 <__assert_func>
 801fd88:	033b      	lsls	r3, r7, #12
 801fd8a:	007d      	lsls	r5, r7, #1
 801fd8c:	0b1b      	lsrs	r3, r3, #12
 801fd8e:	0d6d      	lsrs	r5, r5, #21
 801fd90:	d002      	beq.n	801fd98 <__d2b+0x2c>
 801fd92:	2280      	movs	r2, #128	@ 0x80
 801fd94:	0352      	lsls	r2, r2, #13
 801fd96:	4313      	orrs	r3, r2
 801fd98:	9301      	str	r3, [sp, #4]
 801fd9a:	2e00      	cmp	r6, #0
 801fd9c:	d025      	beq.n	801fdea <__d2b+0x7e>
 801fd9e:	4668      	mov	r0, sp
 801fda0:	9600      	str	r6, [sp, #0]
 801fda2:	f7ff fd00 	bl	801f7a6 <__lo0bits>
 801fda6:	9b01      	ldr	r3, [sp, #4]
 801fda8:	9900      	ldr	r1, [sp, #0]
 801fdaa:	2800      	cmp	r0, #0
 801fdac:	d01b      	beq.n	801fde6 <__d2b+0x7a>
 801fdae:	2220      	movs	r2, #32
 801fdb0:	001e      	movs	r6, r3
 801fdb2:	1a12      	subs	r2, r2, r0
 801fdb4:	4096      	lsls	r6, r2
 801fdb6:	0032      	movs	r2, r6
 801fdb8:	40c3      	lsrs	r3, r0
 801fdba:	430a      	orrs	r2, r1
 801fdbc:	6162      	str	r2, [r4, #20]
 801fdbe:	9301      	str	r3, [sp, #4]
 801fdc0:	9e01      	ldr	r6, [sp, #4]
 801fdc2:	61a6      	str	r6, [r4, #24]
 801fdc4:	1e73      	subs	r3, r6, #1
 801fdc6:	419e      	sbcs	r6, r3
 801fdc8:	3601      	adds	r6, #1
 801fdca:	6126      	str	r6, [r4, #16]
 801fdcc:	2d00      	cmp	r5, #0
 801fdce:	d014      	beq.n	801fdfa <__d2b+0x8e>
 801fdd0:	2635      	movs	r6, #53	@ 0x35
 801fdd2:	4b13      	ldr	r3, [pc, #76]	@ (801fe20 <__d2b+0xb4>)
 801fdd4:	18ed      	adds	r5, r5, r3
 801fdd6:	9b08      	ldr	r3, [sp, #32]
 801fdd8:	182d      	adds	r5, r5, r0
 801fdda:	601d      	str	r5, [r3, #0]
 801fddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdde:	1a36      	subs	r6, r6, r0
 801fde0:	601e      	str	r6, [r3, #0]
 801fde2:	0020      	movs	r0, r4
 801fde4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fde6:	6161      	str	r1, [r4, #20]
 801fde8:	e7ea      	b.n	801fdc0 <__d2b+0x54>
 801fdea:	a801      	add	r0, sp, #4
 801fdec:	f7ff fcdb 	bl	801f7a6 <__lo0bits>
 801fdf0:	9b01      	ldr	r3, [sp, #4]
 801fdf2:	2601      	movs	r6, #1
 801fdf4:	6163      	str	r3, [r4, #20]
 801fdf6:	3020      	adds	r0, #32
 801fdf8:	e7e7      	b.n	801fdca <__d2b+0x5e>
 801fdfa:	4b0a      	ldr	r3, [pc, #40]	@ (801fe24 <__d2b+0xb8>)
 801fdfc:	18c0      	adds	r0, r0, r3
 801fdfe:	9b08      	ldr	r3, [sp, #32]
 801fe00:	6018      	str	r0, [r3, #0]
 801fe02:	4b09      	ldr	r3, [pc, #36]	@ (801fe28 <__d2b+0xbc>)
 801fe04:	18f3      	adds	r3, r6, r3
 801fe06:	009b      	lsls	r3, r3, #2
 801fe08:	18e3      	adds	r3, r4, r3
 801fe0a:	6958      	ldr	r0, [r3, #20]
 801fe0c:	f7ff fcaa 	bl	801f764 <__hi0bits>
 801fe10:	0176      	lsls	r6, r6, #5
 801fe12:	e7e3      	b.n	801fddc <__d2b+0x70>
 801fe14:	08022e41 	.word	0x08022e41
 801fe18:	08022eb2 	.word	0x08022eb2
 801fe1c:	0000030f 	.word	0x0000030f
 801fe20:	fffffbcd 	.word	0xfffffbcd
 801fe24:	fffffbce 	.word	0xfffffbce
 801fe28:	3fffffff 	.word	0x3fffffff

0801fe2c <__ratio>:
 801fe2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe2e:	b087      	sub	sp, #28
 801fe30:	000f      	movs	r7, r1
 801fe32:	a904      	add	r1, sp, #16
 801fe34:	0006      	movs	r6, r0
 801fe36:	f7ff ff4d 	bl	801fcd4 <__b2d>
 801fe3a:	9000      	str	r0, [sp, #0]
 801fe3c:	9101      	str	r1, [sp, #4]
 801fe3e:	9b00      	ldr	r3, [sp, #0]
 801fe40:	9c01      	ldr	r4, [sp, #4]
 801fe42:	0038      	movs	r0, r7
 801fe44:	a905      	add	r1, sp, #20
 801fe46:	9302      	str	r3, [sp, #8]
 801fe48:	9403      	str	r4, [sp, #12]
 801fe4a:	f7ff ff43 	bl	801fcd4 <__b2d>
 801fe4e:	000d      	movs	r5, r1
 801fe50:	0002      	movs	r2, r0
 801fe52:	000b      	movs	r3, r1
 801fe54:	6930      	ldr	r0, [r6, #16]
 801fe56:	6939      	ldr	r1, [r7, #16]
 801fe58:	9e04      	ldr	r6, [sp, #16]
 801fe5a:	1a40      	subs	r0, r0, r1
 801fe5c:	9905      	ldr	r1, [sp, #20]
 801fe5e:	0140      	lsls	r0, r0, #5
 801fe60:	1a71      	subs	r1, r6, r1
 801fe62:	1841      	adds	r1, r0, r1
 801fe64:	0508      	lsls	r0, r1, #20
 801fe66:	2900      	cmp	r1, #0
 801fe68:	dd08      	ble.n	801fe7c <__ratio+0x50>
 801fe6a:	9901      	ldr	r1, [sp, #4]
 801fe6c:	1841      	adds	r1, r0, r1
 801fe6e:	9103      	str	r1, [sp, #12]
 801fe70:	9802      	ldr	r0, [sp, #8]
 801fe72:	9903      	ldr	r1, [sp, #12]
 801fe74:	f7e1 ff9e 	bl	8001db4 <__aeabi_ddiv>
 801fe78:	b007      	add	sp, #28
 801fe7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe7c:	1a2b      	subs	r3, r5, r0
 801fe7e:	e7f7      	b.n	801fe70 <__ratio+0x44>

0801fe80 <__copybits>:
 801fe80:	b570      	push	{r4, r5, r6, lr}
 801fe82:	0014      	movs	r4, r2
 801fe84:	0005      	movs	r5, r0
 801fe86:	3901      	subs	r1, #1
 801fe88:	6913      	ldr	r3, [r2, #16]
 801fe8a:	1149      	asrs	r1, r1, #5
 801fe8c:	3101      	adds	r1, #1
 801fe8e:	0089      	lsls	r1, r1, #2
 801fe90:	3414      	adds	r4, #20
 801fe92:	009b      	lsls	r3, r3, #2
 801fe94:	1841      	adds	r1, r0, r1
 801fe96:	18e3      	adds	r3, r4, r3
 801fe98:	42a3      	cmp	r3, r4
 801fe9a:	d80d      	bhi.n	801feb8 <__copybits+0x38>
 801fe9c:	0014      	movs	r4, r2
 801fe9e:	3411      	adds	r4, #17
 801fea0:	2500      	movs	r5, #0
 801fea2:	429c      	cmp	r4, r3
 801fea4:	d803      	bhi.n	801feae <__copybits+0x2e>
 801fea6:	1a9b      	subs	r3, r3, r2
 801fea8:	3b11      	subs	r3, #17
 801feaa:	089b      	lsrs	r3, r3, #2
 801feac:	009d      	lsls	r5, r3, #2
 801feae:	2300      	movs	r3, #0
 801feb0:	1940      	adds	r0, r0, r5
 801feb2:	4281      	cmp	r1, r0
 801feb4:	d803      	bhi.n	801febe <__copybits+0x3e>
 801feb6:	bd70      	pop	{r4, r5, r6, pc}
 801feb8:	cc40      	ldmia	r4!, {r6}
 801feba:	c540      	stmia	r5!, {r6}
 801febc:	e7ec      	b.n	801fe98 <__copybits+0x18>
 801febe:	c008      	stmia	r0!, {r3}
 801fec0:	e7f7      	b.n	801feb2 <__copybits+0x32>

0801fec2 <__any_on>:
 801fec2:	0002      	movs	r2, r0
 801fec4:	6900      	ldr	r0, [r0, #16]
 801fec6:	b510      	push	{r4, lr}
 801fec8:	3214      	adds	r2, #20
 801feca:	114b      	asrs	r3, r1, #5
 801fecc:	4298      	cmp	r0, r3
 801fece:	db13      	blt.n	801fef8 <__any_on+0x36>
 801fed0:	dd0c      	ble.n	801feec <__any_on+0x2a>
 801fed2:	241f      	movs	r4, #31
 801fed4:	0008      	movs	r0, r1
 801fed6:	4020      	ands	r0, r4
 801fed8:	4221      	tst	r1, r4
 801feda:	d007      	beq.n	801feec <__any_on+0x2a>
 801fedc:	0099      	lsls	r1, r3, #2
 801fede:	588c      	ldr	r4, [r1, r2]
 801fee0:	0021      	movs	r1, r4
 801fee2:	40c1      	lsrs	r1, r0
 801fee4:	4081      	lsls	r1, r0
 801fee6:	2001      	movs	r0, #1
 801fee8:	428c      	cmp	r4, r1
 801feea:	d104      	bne.n	801fef6 <__any_on+0x34>
 801feec:	009b      	lsls	r3, r3, #2
 801feee:	18d3      	adds	r3, r2, r3
 801fef0:	4293      	cmp	r3, r2
 801fef2:	d803      	bhi.n	801fefc <__any_on+0x3a>
 801fef4:	2000      	movs	r0, #0
 801fef6:	bd10      	pop	{r4, pc}
 801fef8:	0003      	movs	r3, r0
 801fefa:	e7f7      	b.n	801feec <__any_on+0x2a>
 801fefc:	3b04      	subs	r3, #4
 801fefe:	6819      	ldr	r1, [r3, #0]
 801ff00:	2900      	cmp	r1, #0
 801ff02:	d0f5      	beq.n	801fef0 <__any_on+0x2e>
 801ff04:	2001      	movs	r0, #1
 801ff06:	e7f6      	b.n	801fef6 <__any_on+0x34>

0801ff08 <__ascii_wctomb>:
 801ff08:	0003      	movs	r3, r0
 801ff0a:	1e08      	subs	r0, r1, #0
 801ff0c:	d005      	beq.n	801ff1a <__ascii_wctomb+0x12>
 801ff0e:	2aff      	cmp	r2, #255	@ 0xff
 801ff10:	d904      	bls.n	801ff1c <__ascii_wctomb+0x14>
 801ff12:	228a      	movs	r2, #138	@ 0x8a
 801ff14:	2001      	movs	r0, #1
 801ff16:	601a      	str	r2, [r3, #0]
 801ff18:	4240      	negs	r0, r0
 801ff1a:	4770      	bx	lr
 801ff1c:	2001      	movs	r0, #1
 801ff1e:	700a      	strb	r2, [r1, #0]
 801ff20:	e7fb      	b.n	801ff1a <__ascii_wctomb+0x12>
	...

0801ff24 <__ssputs_r>:
 801ff24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff26:	688e      	ldr	r6, [r1, #8]
 801ff28:	b085      	sub	sp, #20
 801ff2a:	001f      	movs	r7, r3
 801ff2c:	000c      	movs	r4, r1
 801ff2e:	680b      	ldr	r3, [r1, #0]
 801ff30:	9002      	str	r0, [sp, #8]
 801ff32:	9203      	str	r2, [sp, #12]
 801ff34:	42be      	cmp	r6, r7
 801ff36:	d830      	bhi.n	801ff9a <__ssputs_r+0x76>
 801ff38:	210c      	movs	r1, #12
 801ff3a:	5e62      	ldrsh	r2, [r4, r1]
 801ff3c:	2190      	movs	r1, #144	@ 0x90
 801ff3e:	00c9      	lsls	r1, r1, #3
 801ff40:	420a      	tst	r2, r1
 801ff42:	d028      	beq.n	801ff96 <__ssputs_r+0x72>
 801ff44:	2003      	movs	r0, #3
 801ff46:	6921      	ldr	r1, [r4, #16]
 801ff48:	1a5b      	subs	r3, r3, r1
 801ff4a:	9301      	str	r3, [sp, #4]
 801ff4c:	6963      	ldr	r3, [r4, #20]
 801ff4e:	4343      	muls	r3, r0
 801ff50:	9801      	ldr	r0, [sp, #4]
 801ff52:	0fdd      	lsrs	r5, r3, #31
 801ff54:	18ed      	adds	r5, r5, r3
 801ff56:	1c7b      	adds	r3, r7, #1
 801ff58:	181b      	adds	r3, r3, r0
 801ff5a:	106d      	asrs	r5, r5, #1
 801ff5c:	42ab      	cmp	r3, r5
 801ff5e:	d900      	bls.n	801ff62 <__ssputs_r+0x3e>
 801ff60:	001d      	movs	r5, r3
 801ff62:	0552      	lsls	r2, r2, #21
 801ff64:	d528      	bpl.n	801ffb8 <__ssputs_r+0x94>
 801ff66:	0029      	movs	r1, r5
 801ff68:	9802      	ldr	r0, [sp, #8]
 801ff6a:	f7ff fa61 	bl	801f430 <_malloc_r>
 801ff6e:	1e06      	subs	r6, r0, #0
 801ff70:	d02c      	beq.n	801ffcc <__ssputs_r+0xa8>
 801ff72:	9a01      	ldr	r2, [sp, #4]
 801ff74:	6921      	ldr	r1, [r4, #16]
 801ff76:	f7fd fff9 	bl	801df6c <memcpy>
 801ff7a:	89a2      	ldrh	r2, [r4, #12]
 801ff7c:	4b18      	ldr	r3, [pc, #96]	@ (801ffe0 <__ssputs_r+0xbc>)
 801ff7e:	401a      	ands	r2, r3
 801ff80:	2380      	movs	r3, #128	@ 0x80
 801ff82:	4313      	orrs	r3, r2
 801ff84:	81a3      	strh	r3, [r4, #12]
 801ff86:	9b01      	ldr	r3, [sp, #4]
 801ff88:	6126      	str	r6, [r4, #16]
 801ff8a:	18f6      	adds	r6, r6, r3
 801ff8c:	6026      	str	r6, [r4, #0]
 801ff8e:	003e      	movs	r6, r7
 801ff90:	6165      	str	r5, [r4, #20]
 801ff92:	1aed      	subs	r5, r5, r3
 801ff94:	60a5      	str	r5, [r4, #8]
 801ff96:	42be      	cmp	r6, r7
 801ff98:	d900      	bls.n	801ff9c <__ssputs_r+0x78>
 801ff9a:	003e      	movs	r6, r7
 801ff9c:	0032      	movs	r2, r6
 801ff9e:	9903      	ldr	r1, [sp, #12]
 801ffa0:	6820      	ldr	r0, [r4, #0]
 801ffa2:	f000 fbb3 	bl	802070c <memmove>
 801ffa6:	2000      	movs	r0, #0
 801ffa8:	68a3      	ldr	r3, [r4, #8]
 801ffaa:	1b9b      	subs	r3, r3, r6
 801ffac:	60a3      	str	r3, [r4, #8]
 801ffae:	6823      	ldr	r3, [r4, #0]
 801ffb0:	199b      	adds	r3, r3, r6
 801ffb2:	6023      	str	r3, [r4, #0]
 801ffb4:	b005      	add	sp, #20
 801ffb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ffb8:	002a      	movs	r2, r5
 801ffba:	9802      	ldr	r0, [sp, #8]
 801ffbc:	f000 fc17 	bl	80207ee <_realloc_r>
 801ffc0:	1e06      	subs	r6, r0, #0
 801ffc2:	d1e0      	bne.n	801ff86 <__ssputs_r+0x62>
 801ffc4:	6921      	ldr	r1, [r4, #16]
 801ffc6:	9802      	ldr	r0, [sp, #8]
 801ffc8:	f7fe fe62 	bl	801ec90 <_free_r>
 801ffcc:	230c      	movs	r3, #12
 801ffce:	2001      	movs	r0, #1
 801ffd0:	9a02      	ldr	r2, [sp, #8]
 801ffd2:	4240      	negs	r0, r0
 801ffd4:	6013      	str	r3, [r2, #0]
 801ffd6:	89a2      	ldrh	r2, [r4, #12]
 801ffd8:	3334      	adds	r3, #52	@ 0x34
 801ffda:	4313      	orrs	r3, r2
 801ffdc:	81a3      	strh	r3, [r4, #12]
 801ffde:	e7e9      	b.n	801ffb4 <__ssputs_r+0x90>
 801ffe0:	fffffb7f 	.word	0xfffffb7f

0801ffe4 <_svfiprintf_r>:
 801ffe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffe6:	b0a1      	sub	sp, #132	@ 0x84
 801ffe8:	9003      	str	r0, [sp, #12]
 801ffea:	001d      	movs	r5, r3
 801ffec:	898b      	ldrh	r3, [r1, #12]
 801ffee:	000f      	movs	r7, r1
 801fff0:	0016      	movs	r6, r2
 801fff2:	061b      	lsls	r3, r3, #24
 801fff4:	d511      	bpl.n	802001a <_svfiprintf_r+0x36>
 801fff6:	690b      	ldr	r3, [r1, #16]
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	d10e      	bne.n	802001a <_svfiprintf_r+0x36>
 801fffc:	2140      	movs	r1, #64	@ 0x40
 801fffe:	f7ff fa17 	bl	801f430 <_malloc_r>
 8020002:	6038      	str	r0, [r7, #0]
 8020004:	6138      	str	r0, [r7, #16]
 8020006:	2800      	cmp	r0, #0
 8020008:	d105      	bne.n	8020016 <_svfiprintf_r+0x32>
 802000a:	230c      	movs	r3, #12
 802000c:	9a03      	ldr	r2, [sp, #12]
 802000e:	6013      	str	r3, [r2, #0]
 8020010:	2001      	movs	r0, #1
 8020012:	4240      	negs	r0, r0
 8020014:	e0cf      	b.n	80201b6 <_svfiprintf_r+0x1d2>
 8020016:	2340      	movs	r3, #64	@ 0x40
 8020018:	617b      	str	r3, [r7, #20]
 802001a:	2300      	movs	r3, #0
 802001c:	ac08      	add	r4, sp, #32
 802001e:	6163      	str	r3, [r4, #20]
 8020020:	3320      	adds	r3, #32
 8020022:	7663      	strb	r3, [r4, #25]
 8020024:	3310      	adds	r3, #16
 8020026:	76a3      	strb	r3, [r4, #26]
 8020028:	9507      	str	r5, [sp, #28]
 802002a:	0035      	movs	r5, r6
 802002c:	782b      	ldrb	r3, [r5, #0]
 802002e:	2b00      	cmp	r3, #0
 8020030:	d001      	beq.n	8020036 <_svfiprintf_r+0x52>
 8020032:	2b25      	cmp	r3, #37	@ 0x25
 8020034:	d148      	bne.n	80200c8 <_svfiprintf_r+0xe4>
 8020036:	1bab      	subs	r3, r5, r6
 8020038:	9305      	str	r3, [sp, #20]
 802003a:	42b5      	cmp	r5, r6
 802003c:	d00b      	beq.n	8020056 <_svfiprintf_r+0x72>
 802003e:	0032      	movs	r2, r6
 8020040:	0039      	movs	r1, r7
 8020042:	9803      	ldr	r0, [sp, #12]
 8020044:	f7ff ff6e 	bl	801ff24 <__ssputs_r>
 8020048:	3001      	adds	r0, #1
 802004a:	d100      	bne.n	802004e <_svfiprintf_r+0x6a>
 802004c:	e0ae      	b.n	80201ac <_svfiprintf_r+0x1c8>
 802004e:	6963      	ldr	r3, [r4, #20]
 8020050:	9a05      	ldr	r2, [sp, #20]
 8020052:	189b      	adds	r3, r3, r2
 8020054:	6163      	str	r3, [r4, #20]
 8020056:	782b      	ldrb	r3, [r5, #0]
 8020058:	2b00      	cmp	r3, #0
 802005a:	d100      	bne.n	802005e <_svfiprintf_r+0x7a>
 802005c:	e0a6      	b.n	80201ac <_svfiprintf_r+0x1c8>
 802005e:	2201      	movs	r2, #1
 8020060:	2300      	movs	r3, #0
 8020062:	4252      	negs	r2, r2
 8020064:	6062      	str	r2, [r4, #4]
 8020066:	a904      	add	r1, sp, #16
 8020068:	3254      	adds	r2, #84	@ 0x54
 802006a:	1852      	adds	r2, r2, r1
 802006c:	1c6e      	adds	r6, r5, #1
 802006e:	6023      	str	r3, [r4, #0]
 8020070:	60e3      	str	r3, [r4, #12]
 8020072:	60a3      	str	r3, [r4, #8]
 8020074:	7013      	strb	r3, [r2, #0]
 8020076:	65a3      	str	r3, [r4, #88]	@ 0x58
 8020078:	4b54      	ldr	r3, [pc, #336]	@ (80201cc <_svfiprintf_r+0x1e8>)
 802007a:	2205      	movs	r2, #5
 802007c:	0018      	movs	r0, r3
 802007e:	7831      	ldrb	r1, [r6, #0]
 8020080:	9305      	str	r3, [sp, #20]
 8020082:	f7fd ff68 	bl	801df56 <memchr>
 8020086:	1c75      	adds	r5, r6, #1
 8020088:	2800      	cmp	r0, #0
 802008a:	d11f      	bne.n	80200cc <_svfiprintf_r+0xe8>
 802008c:	6822      	ldr	r2, [r4, #0]
 802008e:	06d3      	lsls	r3, r2, #27
 8020090:	d504      	bpl.n	802009c <_svfiprintf_r+0xb8>
 8020092:	2353      	movs	r3, #83	@ 0x53
 8020094:	a904      	add	r1, sp, #16
 8020096:	185b      	adds	r3, r3, r1
 8020098:	2120      	movs	r1, #32
 802009a:	7019      	strb	r1, [r3, #0]
 802009c:	0713      	lsls	r3, r2, #28
 802009e:	d504      	bpl.n	80200aa <_svfiprintf_r+0xc6>
 80200a0:	2353      	movs	r3, #83	@ 0x53
 80200a2:	a904      	add	r1, sp, #16
 80200a4:	185b      	adds	r3, r3, r1
 80200a6:	212b      	movs	r1, #43	@ 0x2b
 80200a8:	7019      	strb	r1, [r3, #0]
 80200aa:	7833      	ldrb	r3, [r6, #0]
 80200ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80200ae:	d016      	beq.n	80200de <_svfiprintf_r+0xfa>
 80200b0:	0035      	movs	r5, r6
 80200b2:	2100      	movs	r1, #0
 80200b4:	200a      	movs	r0, #10
 80200b6:	68e3      	ldr	r3, [r4, #12]
 80200b8:	782a      	ldrb	r2, [r5, #0]
 80200ba:	1c6e      	adds	r6, r5, #1
 80200bc:	3a30      	subs	r2, #48	@ 0x30
 80200be:	2a09      	cmp	r2, #9
 80200c0:	d950      	bls.n	8020164 <_svfiprintf_r+0x180>
 80200c2:	2900      	cmp	r1, #0
 80200c4:	d111      	bne.n	80200ea <_svfiprintf_r+0x106>
 80200c6:	e017      	b.n	80200f8 <_svfiprintf_r+0x114>
 80200c8:	3501      	adds	r5, #1
 80200ca:	e7af      	b.n	802002c <_svfiprintf_r+0x48>
 80200cc:	9b05      	ldr	r3, [sp, #20]
 80200ce:	6822      	ldr	r2, [r4, #0]
 80200d0:	1ac0      	subs	r0, r0, r3
 80200d2:	2301      	movs	r3, #1
 80200d4:	4083      	lsls	r3, r0
 80200d6:	4313      	orrs	r3, r2
 80200d8:	002e      	movs	r6, r5
 80200da:	6023      	str	r3, [r4, #0]
 80200dc:	e7cc      	b.n	8020078 <_svfiprintf_r+0x94>
 80200de:	9b07      	ldr	r3, [sp, #28]
 80200e0:	1d19      	adds	r1, r3, #4
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	9107      	str	r1, [sp, #28]
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	db01      	blt.n	80200ee <_svfiprintf_r+0x10a>
 80200ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80200ec:	e004      	b.n	80200f8 <_svfiprintf_r+0x114>
 80200ee:	425b      	negs	r3, r3
 80200f0:	60e3      	str	r3, [r4, #12]
 80200f2:	2302      	movs	r3, #2
 80200f4:	4313      	orrs	r3, r2
 80200f6:	6023      	str	r3, [r4, #0]
 80200f8:	782b      	ldrb	r3, [r5, #0]
 80200fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80200fc:	d10c      	bne.n	8020118 <_svfiprintf_r+0x134>
 80200fe:	786b      	ldrb	r3, [r5, #1]
 8020100:	2b2a      	cmp	r3, #42	@ 0x2a
 8020102:	d134      	bne.n	802016e <_svfiprintf_r+0x18a>
 8020104:	9b07      	ldr	r3, [sp, #28]
 8020106:	3502      	adds	r5, #2
 8020108:	1d1a      	adds	r2, r3, #4
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	9207      	str	r2, [sp, #28]
 802010e:	2b00      	cmp	r3, #0
 8020110:	da01      	bge.n	8020116 <_svfiprintf_r+0x132>
 8020112:	2301      	movs	r3, #1
 8020114:	425b      	negs	r3, r3
 8020116:	9309      	str	r3, [sp, #36]	@ 0x24
 8020118:	4e2d      	ldr	r6, [pc, #180]	@ (80201d0 <_svfiprintf_r+0x1ec>)
 802011a:	2203      	movs	r2, #3
 802011c:	0030      	movs	r0, r6
 802011e:	7829      	ldrb	r1, [r5, #0]
 8020120:	f7fd ff19 	bl	801df56 <memchr>
 8020124:	2800      	cmp	r0, #0
 8020126:	d006      	beq.n	8020136 <_svfiprintf_r+0x152>
 8020128:	2340      	movs	r3, #64	@ 0x40
 802012a:	1b80      	subs	r0, r0, r6
 802012c:	4083      	lsls	r3, r0
 802012e:	6822      	ldr	r2, [r4, #0]
 8020130:	3501      	adds	r5, #1
 8020132:	4313      	orrs	r3, r2
 8020134:	6023      	str	r3, [r4, #0]
 8020136:	7829      	ldrb	r1, [r5, #0]
 8020138:	2206      	movs	r2, #6
 802013a:	4826      	ldr	r0, [pc, #152]	@ (80201d4 <_svfiprintf_r+0x1f0>)
 802013c:	1c6e      	adds	r6, r5, #1
 802013e:	7621      	strb	r1, [r4, #24]
 8020140:	f7fd ff09 	bl	801df56 <memchr>
 8020144:	2800      	cmp	r0, #0
 8020146:	d038      	beq.n	80201ba <_svfiprintf_r+0x1d6>
 8020148:	4b23      	ldr	r3, [pc, #140]	@ (80201d8 <_svfiprintf_r+0x1f4>)
 802014a:	2b00      	cmp	r3, #0
 802014c:	d122      	bne.n	8020194 <_svfiprintf_r+0x1b0>
 802014e:	2207      	movs	r2, #7
 8020150:	9b07      	ldr	r3, [sp, #28]
 8020152:	3307      	adds	r3, #7
 8020154:	4393      	bics	r3, r2
 8020156:	3308      	adds	r3, #8
 8020158:	9307      	str	r3, [sp, #28]
 802015a:	6963      	ldr	r3, [r4, #20]
 802015c:	9a04      	ldr	r2, [sp, #16]
 802015e:	189b      	adds	r3, r3, r2
 8020160:	6163      	str	r3, [r4, #20]
 8020162:	e762      	b.n	802002a <_svfiprintf_r+0x46>
 8020164:	4343      	muls	r3, r0
 8020166:	0035      	movs	r5, r6
 8020168:	2101      	movs	r1, #1
 802016a:	189b      	adds	r3, r3, r2
 802016c:	e7a4      	b.n	80200b8 <_svfiprintf_r+0xd4>
 802016e:	2300      	movs	r3, #0
 8020170:	200a      	movs	r0, #10
 8020172:	0019      	movs	r1, r3
 8020174:	3501      	adds	r5, #1
 8020176:	6063      	str	r3, [r4, #4]
 8020178:	782a      	ldrb	r2, [r5, #0]
 802017a:	1c6e      	adds	r6, r5, #1
 802017c:	3a30      	subs	r2, #48	@ 0x30
 802017e:	2a09      	cmp	r2, #9
 8020180:	d903      	bls.n	802018a <_svfiprintf_r+0x1a6>
 8020182:	2b00      	cmp	r3, #0
 8020184:	d0c8      	beq.n	8020118 <_svfiprintf_r+0x134>
 8020186:	9109      	str	r1, [sp, #36]	@ 0x24
 8020188:	e7c6      	b.n	8020118 <_svfiprintf_r+0x134>
 802018a:	4341      	muls	r1, r0
 802018c:	0035      	movs	r5, r6
 802018e:	2301      	movs	r3, #1
 8020190:	1889      	adds	r1, r1, r2
 8020192:	e7f1      	b.n	8020178 <_svfiprintf_r+0x194>
 8020194:	aa07      	add	r2, sp, #28
 8020196:	9200      	str	r2, [sp, #0]
 8020198:	0021      	movs	r1, r4
 802019a:	003a      	movs	r2, r7
 802019c:	4b0f      	ldr	r3, [pc, #60]	@ (80201dc <_svfiprintf_r+0x1f8>)
 802019e:	9803      	ldr	r0, [sp, #12]
 80201a0:	f7fd f8d4 	bl	801d34c <_printf_float>
 80201a4:	9004      	str	r0, [sp, #16]
 80201a6:	9b04      	ldr	r3, [sp, #16]
 80201a8:	3301      	adds	r3, #1
 80201aa:	d1d6      	bne.n	802015a <_svfiprintf_r+0x176>
 80201ac:	89bb      	ldrh	r3, [r7, #12]
 80201ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80201b0:	065b      	lsls	r3, r3, #25
 80201b2:	d500      	bpl.n	80201b6 <_svfiprintf_r+0x1d2>
 80201b4:	e72c      	b.n	8020010 <_svfiprintf_r+0x2c>
 80201b6:	b021      	add	sp, #132	@ 0x84
 80201b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201ba:	aa07      	add	r2, sp, #28
 80201bc:	9200      	str	r2, [sp, #0]
 80201be:	0021      	movs	r1, r4
 80201c0:	003a      	movs	r2, r7
 80201c2:	4b06      	ldr	r3, [pc, #24]	@ (80201dc <_svfiprintf_r+0x1f8>)
 80201c4:	9803      	ldr	r0, [sp, #12]
 80201c6:	f7fd fb6f 	bl	801d8a8 <_printf_i>
 80201ca:	e7eb      	b.n	80201a4 <_svfiprintf_r+0x1c0>
 80201cc:	08023008 	.word	0x08023008
 80201d0:	0802300e 	.word	0x0802300e
 80201d4:	08023012 	.word	0x08023012
 80201d8:	0801d34d 	.word	0x0801d34d
 80201dc:	0801ff25 	.word	0x0801ff25

080201e0 <__sfputc_r>:
 80201e0:	6893      	ldr	r3, [r2, #8]
 80201e2:	b510      	push	{r4, lr}
 80201e4:	3b01      	subs	r3, #1
 80201e6:	6093      	str	r3, [r2, #8]
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	da04      	bge.n	80201f6 <__sfputc_r+0x16>
 80201ec:	6994      	ldr	r4, [r2, #24]
 80201ee:	42a3      	cmp	r3, r4
 80201f0:	db07      	blt.n	8020202 <__sfputc_r+0x22>
 80201f2:	290a      	cmp	r1, #10
 80201f4:	d005      	beq.n	8020202 <__sfputc_r+0x22>
 80201f6:	6813      	ldr	r3, [r2, #0]
 80201f8:	1c58      	adds	r0, r3, #1
 80201fa:	6010      	str	r0, [r2, #0]
 80201fc:	7019      	strb	r1, [r3, #0]
 80201fe:	0008      	movs	r0, r1
 8020200:	bd10      	pop	{r4, pc}
 8020202:	f000 f9e2 	bl	80205ca <__swbuf_r>
 8020206:	0001      	movs	r1, r0
 8020208:	e7f9      	b.n	80201fe <__sfputc_r+0x1e>

0802020a <__sfputs_r>:
 802020a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802020c:	0006      	movs	r6, r0
 802020e:	000f      	movs	r7, r1
 8020210:	0014      	movs	r4, r2
 8020212:	18d5      	adds	r5, r2, r3
 8020214:	42ac      	cmp	r4, r5
 8020216:	d101      	bne.n	802021c <__sfputs_r+0x12>
 8020218:	2000      	movs	r0, #0
 802021a:	e007      	b.n	802022c <__sfputs_r+0x22>
 802021c:	7821      	ldrb	r1, [r4, #0]
 802021e:	003a      	movs	r2, r7
 8020220:	0030      	movs	r0, r6
 8020222:	f7ff ffdd 	bl	80201e0 <__sfputc_r>
 8020226:	3401      	adds	r4, #1
 8020228:	1c43      	adds	r3, r0, #1
 802022a:	d1f3      	bne.n	8020214 <__sfputs_r+0xa>
 802022c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020230 <_vfiprintf_r>:
 8020230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020232:	b0a1      	sub	sp, #132	@ 0x84
 8020234:	000f      	movs	r7, r1
 8020236:	0015      	movs	r5, r2
 8020238:	001e      	movs	r6, r3
 802023a:	9003      	str	r0, [sp, #12]
 802023c:	2800      	cmp	r0, #0
 802023e:	d004      	beq.n	802024a <_vfiprintf_r+0x1a>
 8020240:	6a03      	ldr	r3, [r0, #32]
 8020242:	2b00      	cmp	r3, #0
 8020244:	d101      	bne.n	802024a <_vfiprintf_r+0x1a>
 8020246:	f7fd fccd 	bl	801dbe4 <__sinit>
 802024a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802024c:	07db      	lsls	r3, r3, #31
 802024e:	d405      	bmi.n	802025c <_vfiprintf_r+0x2c>
 8020250:	89bb      	ldrh	r3, [r7, #12]
 8020252:	059b      	lsls	r3, r3, #22
 8020254:	d402      	bmi.n	802025c <_vfiprintf_r+0x2c>
 8020256:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020258:	f7fd fe7b 	bl	801df52 <__retarget_lock_acquire_recursive>
 802025c:	89bb      	ldrh	r3, [r7, #12]
 802025e:	071b      	lsls	r3, r3, #28
 8020260:	d502      	bpl.n	8020268 <_vfiprintf_r+0x38>
 8020262:	693b      	ldr	r3, [r7, #16]
 8020264:	2b00      	cmp	r3, #0
 8020266:	d113      	bne.n	8020290 <_vfiprintf_r+0x60>
 8020268:	0039      	movs	r1, r7
 802026a:	9803      	ldr	r0, [sp, #12]
 802026c:	f000 f9f0 	bl	8020650 <__swsetup_r>
 8020270:	2800      	cmp	r0, #0
 8020272:	d00d      	beq.n	8020290 <_vfiprintf_r+0x60>
 8020274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020276:	07db      	lsls	r3, r3, #31
 8020278:	d503      	bpl.n	8020282 <_vfiprintf_r+0x52>
 802027a:	2001      	movs	r0, #1
 802027c:	4240      	negs	r0, r0
 802027e:	b021      	add	sp, #132	@ 0x84
 8020280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020282:	89bb      	ldrh	r3, [r7, #12]
 8020284:	059b      	lsls	r3, r3, #22
 8020286:	d4f8      	bmi.n	802027a <_vfiprintf_r+0x4a>
 8020288:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802028a:	f7fd fe63 	bl	801df54 <__retarget_lock_release_recursive>
 802028e:	e7f4      	b.n	802027a <_vfiprintf_r+0x4a>
 8020290:	2300      	movs	r3, #0
 8020292:	ac08      	add	r4, sp, #32
 8020294:	6163      	str	r3, [r4, #20]
 8020296:	3320      	adds	r3, #32
 8020298:	7663      	strb	r3, [r4, #25]
 802029a:	3310      	adds	r3, #16
 802029c:	76a3      	strb	r3, [r4, #26]
 802029e:	9607      	str	r6, [sp, #28]
 80202a0:	002e      	movs	r6, r5
 80202a2:	7833      	ldrb	r3, [r6, #0]
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d001      	beq.n	80202ac <_vfiprintf_r+0x7c>
 80202a8:	2b25      	cmp	r3, #37	@ 0x25
 80202aa:	d148      	bne.n	802033e <_vfiprintf_r+0x10e>
 80202ac:	1b73      	subs	r3, r6, r5
 80202ae:	9305      	str	r3, [sp, #20]
 80202b0:	42ae      	cmp	r6, r5
 80202b2:	d00b      	beq.n	80202cc <_vfiprintf_r+0x9c>
 80202b4:	002a      	movs	r2, r5
 80202b6:	0039      	movs	r1, r7
 80202b8:	9803      	ldr	r0, [sp, #12]
 80202ba:	f7ff ffa6 	bl	802020a <__sfputs_r>
 80202be:	3001      	adds	r0, #1
 80202c0:	d100      	bne.n	80202c4 <_vfiprintf_r+0x94>
 80202c2:	e0ae      	b.n	8020422 <_vfiprintf_r+0x1f2>
 80202c4:	6963      	ldr	r3, [r4, #20]
 80202c6:	9a05      	ldr	r2, [sp, #20]
 80202c8:	189b      	adds	r3, r3, r2
 80202ca:	6163      	str	r3, [r4, #20]
 80202cc:	7833      	ldrb	r3, [r6, #0]
 80202ce:	2b00      	cmp	r3, #0
 80202d0:	d100      	bne.n	80202d4 <_vfiprintf_r+0xa4>
 80202d2:	e0a6      	b.n	8020422 <_vfiprintf_r+0x1f2>
 80202d4:	2201      	movs	r2, #1
 80202d6:	2300      	movs	r3, #0
 80202d8:	4252      	negs	r2, r2
 80202da:	6062      	str	r2, [r4, #4]
 80202dc:	a904      	add	r1, sp, #16
 80202de:	3254      	adds	r2, #84	@ 0x54
 80202e0:	1852      	adds	r2, r2, r1
 80202e2:	1c75      	adds	r5, r6, #1
 80202e4:	6023      	str	r3, [r4, #0]
 80202e6:	60e3      	str	r3, [r4, #12]
 80202e8:	60a3      	str	r3, [r4, #8]
 80202ea:	7013      	strb	r3, [r2, #0]
 80202ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 80202ee:	4b59      	ldr	r3, [pc, #356]	@ (8020454 <_vfiprintf_r+0x224>)
 80202f0:	2205      	movs	r2, #5
 80202f2:	0018      	movs	r0, r3
 80202f4:	7829      	ldrb	r1, [r5, #0]
 80202f6:	9305      	str	r3, [sp, #20]
 80202f8:	f7fd fe2d 	bl	801df56 <memchr>
 80202fc:	1c6e      	adds	r6, r5, #1
 80202fe:	2800      	cmp	r0, #0
 8020300:	d11f      	bne.n	8020342 <_vfiprintf_r+0x112>
 8020302:	6822      	ldr	r2, [r4, #0]
 8020304:	06d3      	lsls	r3, r2, #27
 8020306:	d504      	bpl.n	8020312 <_vfiprintf_r+0xe2>
 8020308:	2353      	movs	r3, #83	@ 0x53
 802030a:	a904      	add	r1, sp, #16
 802030c:	185b      	adds	r3, r3, r1
 802030e:	2120      	movs	r1, #32
 8020310:	7019      	strb	r1, [r3, #0]
 8020312:	0713      	lsls	r3, r2, #28
 8020314:	d504      	bpl.n	8020320 <_vfiprintf_r+0xf0>
 8020316:	2353      	movs	r3, #83	@ 0x53
 8020318:	a904      	add	r1, sp, #16
 802031a:	185b      	adds	r3, r3, r1
 802031c:	212b      	movs	r1, #43	@ 0x2b
 802031e:	7019      	strb	r1, [r3, #0]
 8020320:	782b      	ldrb	r3, [r5, #0]
 8020322:	2b2a      	cmp	r3, #42	@ 0x2a
 8020324:	d016      	beq.n	8020354 <_vfiprintf_r+0x124>
 8020326:	002e      	movs	r6, r5
 8020328:	2100      	movs	r1, #0
 802032a:	200a      	movs	r0, #10
 802032c:	68e3      	ldr	r3, [r4, #12]
 802032e:	7832      	ldrb	r2, [r6, #0]
 8020330:	1c75      	adds	r5, r6, #1
 8020332:	3a30      	subs	r2, #48	@ 0x30
 8020334:	2a09      	cmp	r2, #9
 8020336:	d950      	bls.n	80203da <_vfiprintf_r+0x1aa>
 8020338:	2900      	cmp	r1, #0
 802033a:	d111      	bne.n	8020360 <_vfiprintf_r+0x130>
 802033c:	e017      	b.n	802036e <_vfiprintf_r+0x13e>
 802033e:	3601      	adds	r6, #1
 8020340:	e7af      	b.n	80202a2 <_vfiprintf_r+0x72>
 8020342:	9b05      	ldr	r3, [sp, #20]
 8020344:	6822      	ldr	r2, [r4, #0]
 8020346:	1ac0      	subs	r0, r0, r3
 8020348:	2301      	movs	r3, #1
 802034a:	4083      	lsls	r3, r0
 802034c:	4313      	orrs	r3, r2
 802034e:	0035      	movs	r5, r6
 8020350:	6023      	str	r3, [r4, #0]
 8020352:	e7cc      	b.n	80202ee <_vfiprintf_r+0xbe>
 8020354:	9b07      	ldr	r3, [sp, #28]
 8020356:	1d19      	adds	r1, r3, #4
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	9107      	str	r1, [sp, #28]
 802035c:	2b00      	cmp	r3, #0
 802035e:	db01      	blt.n	8020364 <_vfiprintf_r+0x134>
 8020360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020362:	e004      	b.n	802036e <_vfiprintf_r+0x13e>
 8020364:	425b      	negs	r3, r3
 8020366:	60e3      	str	r3, [r4, #12]
 8020368:	2302      	movs	r3, #2
 802036a:	4313      	orrs	r3, r2
 802036c:	6023      	str	r3, [r4, #0]
 802036e:	7833      	ldrb	r3, [r6, #0]
 8020370:	2b2e      	cmp	r3, #46	@ 0x2e
 8020372:	d10c      	bne.n	802038e <_vfiprintf_r+0x15e>
 8020374:	7873      	ldrb	r3, [r6, #1]
 8020376:	2b2a      	cmp	r3, #42	@ 0x2a
 8020378:	d134      	bne.n	80203e4 <_vfiprintf_r+0x1b4>
 802037a:	9b07      	ldr	r3, [sp, #28]
 802037c:	3602      	adds	r6, #2
 802037e:	1d1a      	adds	r2, r3, #4
 8020380:	681b      	ldr	r3, [r3, #0]
 8020382:	9207      	str	r2, [sp, #28]
 8020384:	2b00      	cmp	r3, #0
 8020386:	da01      	bge.n	802038c <_vfiprintf_r+0x15c>
 8020388:	2301      	movs	r3, #1
 802038a:	425b      	negs	r3, r3
 802038c:	9309      	str	r3, [sp, #36]	@ 0x24
 802038e:	4d32      	ldr	r5, [pc, #200]	@ (8020458 <_vfiprintf_r+0x228>)
 8020390:	2203      	movs	r2, #3
 8020392:	0028      	movs	r0, r5
 8020394:	7831      	ldrb	r1, [r6, #0]
 8020396:	f7fd fdde 	bl	801df56 <memchr>
 802039a:	2800      	cmp	r0, #0
 802039c:	d006      	beq.n	80203ac <_vfiprintf_r+0x17c>
 802039e:	2340      	movs	r3, #64	@ 0x40
 80203a0:	1b40      	subs	r0, r0, r5
 80203a2:	4083      	lsls	r3, r0
 80203a4:	6822      	ldr	r2, [r4, #0]
 80203a6:	3601      	adds	r6, #1
 80203a8:	4313      	orrs	r3, r2
 80203aa:	6023      	str	r3, [r4, #0]
 80203ac:	7831      	ldrb	r1, [r6, #0]
 80203ae:	2206      	movs	r2, #6
 80203b0:	482a      	ldr	r0, [pc, #168]	@ (802045c <_vfiprintf_r+0x22c>)
 80203b2:	1c75      	adds	r5, r6, #1
 80203b4:	7621      	strb	r1, [r4, #24]
 80203b6:	f7fd fdce 	bl	801df56 <memchr>
 80203ba:	2800      	cmp	r0, #0
 80203bc:	d040      	beq.n	8020440 <_vfiprintf_r+0x210>
 80203be:	4b28      	ldr	r3, [pc, #160]	@ (8020460 <_vfiprintf_r+0x230>)
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	d122      	bne.n	802040a <_vfiprintf_r+0x1da>
 80203c4:	2207      	movs	r2, #7
 80203c6:	9b07      	ldr	r3, [sp, #28]
 80203c8:	3307      	adds	r3, #7
 80203ca:	4393      	bics	r3, r2
 80203cc:	3308      	adds	r3, #8
 80203ce:	9307      	str	r3, [sp, #28]
 80203d0:	6963      	ldr	r3, [r4, #20]
 80203d2:	9a04      	ldr	r2, [sp, #16]
 80203d4:	189b      	adds	r3, r3, r2
 80203d6:	6163      	str	r3, [r4, #20]
 80203d8:	e762      	b.n	80202a0 <_vfiprintf_r+0x70>
 80203da:	4343      	muls	r3, r0
 80203dc:	002e      	movs	r6, r5
 80203de:	2101      	movs	r1, #1
 80203e0:	189b      	adds	r3, r3, r2
 80203e2:	e7a4      	b.n	802032e <_vfiprintf_r+0xfe>
 80203e4:	2300      	movs	r3, #0
 80203e6:	200a      	movs	r0, #10
 80203e8:	0019      	movs	r1, r3
 80203ea:	3601      	adds	r6, #1
 80203ec:	6063      	str	r3, [r4, #4]
 80203ee:	7832      	ldrb	r2, [r6, #0]
 80203f0:	1c75      	adds	r5, r6, #1
 80203f2:	3a30      	subs	r2, #48	@ 0x30
 80203f4:	2a09      	cmp	r2, #9
 80203f6:	d903      	bls.n	8020400 <_vfiprintf_r+0x1d0>
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d0c8      	beq.n	802038e <_vfiprintf_r+0x15e>
 80203fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80203fe:	e7c6      	b.n	802038e <_vfiprintf_r+0x15e>
 8020400:	4341      	muls	r1, r0
 8020402:	002e      	movs	r6, r5
 8020404:	2301      	movs	r3, #1
 8020406:	1889      	adds	r1, r1, r2
 8020408:	e7f1      	b.n	80203ee <_vfiprintf_r+0x1be>
 802040a:	aa07      	add	r2, sp, #28
 802040c:	9200      	str	r2, [sp, #0]
 802040e:	0021      	movs	r1, r4
 8020410:	003a      	movs	r2, r7
 8020412:	4b14      	ldr	r3, [pc, #80]	@ (8020464 <_vfiprintf_r+0x234>)
 8020414:	9803      	ldr	r0, [sp, #12]
 8020416:	f7fc ff99 	bl	801d34c <_printf_float>
 802041a:	9004      	str	r0, [sp, #16]
 802041c:	9b04      	ldr	r3, [sp, #16]
 802041e:	3301      	adds	r3, #1
 8020420:	d1d6      	bne.n	80203d0 <_vfiprintf_r+0x1a0>
 8020422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020424:	07db      	lsls	r3, r3, #31
 8020426:	d405      	bmi.n	8020434 <_vfiprintf_r+0x204>
 8020428:	89bb      	ldrh	r3, [r7, #12]
 802042a:	059b      	lsls	r3, r3, #22
 802042c:	d402      	bmi.n	8020434 <_vfiprintf_r+0x204>
 802042e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020430:	f7fd fd90 	bl	801df54 <__retarget_lock_release_recursive>
 8020434:	89bb      	ldrh	r3, [r7, #12]
 8020436:	065b      	lsls	r3, r3, #25
 8020438:	d500      	bpl.n	802043c <_vfiprintf_r+0x20c>
 802043a:	e71e      	b.n	802027a <_vfiprintf_r+0x4a>
 802043c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802043e:	e71e      	b.n	802027e <_vfiprintf_r+0x4e>
 8020440:	aa07      	add	r2, sp, #28
 8020442:	9200      	str	r2, [sp, #0]
 8020444:	0021      	movs	r1, r4
 8020446:	003a      	movs	r2, r7
 8020448:	4b06      	ldr	r3, [pc, #24]	@ (8020464 <_vfiprintf_r+0x234>)
 802044a:	9803      	ldr	r0, [sp, #12]
 802044c:	f7fd fa2c 	bl	801d8a8 <_printf_i>
 8020450:	e7e3      	b.n	802041a <_vfiprintf_r+0x1ea>
 8020452:	46c0      	nop			@ (mov r8, r8)
 8020454:	08023008 	.word	0x08023008
 8020458:	0802300e 	.word	0x0802300e
 802045c:	08023012 	.word	0x08023012
 8020460:	0801d34d 	.word	0x0801d34d
 8020464:	0802020b 	.word	0x0802020b

08020468 <__sflush_r>:
 8020468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802046a:	220c      	movs	r2, #12
 802046c:	5e8b      	ldrsh	r3, [r1, r2]
 802046e:	0005      	movs	r5, r0
 8020470:	000c      	movs	r4, r1
 8020472:	071a      	lsls	r2, r3, #28
 8020474:	d456      	bmi.n	8020524 <__sflush_r+0xbc>
 8020476:	684a      	ldr	r2, [r1, #4]
 8020478:	2a00      	cmp	r2, #0
 802047a:	dc02      	bgt.n	8020482 <__sflush_r+0x1a>
 802047c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802047e:	2a00      	cmp	r2, #0
 8020480:	dd4e      	ble.n	8020520 <__sflush_r+0xb8>
 8020482:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8020484:	2f00      	cmp	r7, #0
 8020486:	d04b      	beq.n	8020520 <__sflush_r+0xb8>
 8020488:	2200      	movs	r2, #0
 802048a:	2080      	movs	r0, #128	@ 0x80
 802048c:	682e      	ldr	r6, [r5, #0]
 802048e:	602a      	str	r2, [r5, #0]
 8020490:	001a      	movs	r2, r3
 8020492:	0140      	lsls	r0, r0, #5
 8020494:	6a21      	ldr	r1, [r4, #32]
 8020496:	4002      	ands	r2, r0
 8020498:	4203      	tst	r3, r0
 802049a:	d033      	beq.n	8020504 <__sflush_r+0x9c>
 802049c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802049e:	89a3      	ldrh	r3, [r4, #12]
 80204a0:	075b      	lsls	r3, r3, #29
 80204a2:	d506      	bpl.n	80204b2 <__sflush_r+0x4a>
 80204a4:	6863      	ldr	r3, [r4, #4]
 80204a6:	1ad2      	subs	r2, r2, r3
 80204a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	d001      	beq.n	80204b2 <__sflush_r+0x4a>
 80204ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80204b0:	1ad2      	subs	r2, r2, r3
 80204b2:	2300      	movs	r3, #0
 80204b4:	0028      	movs	r0, r5
 80204b6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80204b8:	6a21      	ldr	r1, [r4, #32]
 80204ba:	47b8      	blx	r7
 80204bc:	89a2      	ldrh	r2, [r4, #12]
 80204be:	1c43      	adds	r3, r0, #1
 80204c0:	d106      	bne.n	80204d0 <__sflush_r+0x68>
 80204c2:	6829      	ldr	r1, [r5, #0]
 80204c4:	291d      	cmp	r1, #29
 80204c6:	d846      	bhi.n	8020556 <__sflush_r+0xee>
 80204c8:	4b29      	ldr	r3, [pc, #164]	@ (8020570 <__sflush_r+0x108>)
 80204ca:	410b      	asrs	r3, r1
 80204cc:	07db      	lsls	r3, r3, #31
 80204ce:	d442      	bmi.n	8020556 <__sflush_r+0xee>
 80204d0:	2300      	movs	r3, #0
 80204d2:	6063      	str	r3, [r4, #4]
 80204d4:	6923      	ldr	r3, [r4, #16]
 80204d6:	6023      	str	r3, [r4, #0]
 80204d8:	04d2      	lsls	r2, r2, #19
 80204da:	d505      	bpl.n	80204e8 <__sflush_r+0x80>
 80204dc:	1c43      	adds	r3, r0, #1
 80204de:	d102      	bne.n	80204e6 <__sflush_r+0x7e>
 80204e0:	682b      	ldr	r3, [r5, #0]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d100      	bne.n	80204e8 <__sflush_r+0x80>
 80204e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80204e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80204ea:	602e      	str	r6, [r5, #0]
 80204ec:	2900      	cmp	r1, #0
 80204ee:	d017      	beq.n	8020520 <__sflush_r+0xb8>
 80204f0:	0023      	movs	r3, r4
 80204f2:	3344      	adds	r3, #68	@ 0x44
 80204f4:	4299      	cmp	r1, r3
 80204f6:	d002      	beq.n	80204fe <__sflush_r+0x96>
 80204f8:	0028      	movs	r0, r5
 80204fa:	f7fe fbc9 	bl	801ec90 <_free_r>
 80204fe:	2300      	movs	r3, #0
 8020500:	6363      	str	r3, [r4, #52]	@ 0x34
 8020502:	e00d      	b.n	8020520 <__sflush_r+0xb8>
 8020504:	2301      	movs	r3, #1
 8020506:	0028      	movs	r0, r5
 8020508:	47b8      	blx	r7
 802050a:	0002      	movs	r2, r0
 802050c:	1c43      	adds	r3, r0, #1
 802050e:	d1c6      	bne.n	802049e <__sflush_r+0x36>
 8020510:	682b      	ldr	r3, [r5, #0]
 8020512:	2b00      	cmp	r3, #0
 8020514:	d0c3      	beq.n	802049e <__sflush_r+0x36>
 8020516:	2b1d      	cmp	r3, #29
 8020518:	d001      	beq.n	802051e <__sflush_r+0xb6>
 802051a:	2b16      	cmp	r3, #22
 802051c:	d11a      	bne.n	8020554 <__sflush_r+0xec>
 802051e:	602e      	str	r6, [r5, #0]
 8020520:	2000      	movs	r0, #0
 8020522:	e01e      	b.n	8020562 <__sflush_r+0xfa>
 8020524:	690e      	ldr	r6, [r1, #16]
 8020526:	2e00      	cmp	r6, #0
 8020528:	d0fa      	beq.n	8020520 <__sflush_r+0xb8>
 802052a:	680f      	ldr	r7, [r1, #0]
 802052c:	600e      	str	r6, [r1, #0]
 802052e:	1bba      	subs	r2, r7, r6
 8020530:	9201      	str	r2, [sp, #4]
 8020532:	2200      	movs	r2, #0
 8020534:	079b      	lsls	r3, r3, #30
 8020536:	d100      	bne.n	802053a <__sflush_r+0xd2>
 8020538:	694a      	ldr	r2, [r1, #20]
 802053a:	60a2      	str	r2, [r4, #8]
 802053c:	9b01      	ldr	r3, [sp, #4]
 802053e:	2b00      	cmp	r3, #0
 8020540:	ddee      	ble.n	8020520 <__sflush_r+0xb8>
 8020542:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020544:	0032      	movs	r2, r6
 8020546:	001f      	movs	r7, r3
 8020548:	0028      	movs	r0, r5
 802054a:	9b01      	ldr	r3, [sp, #4]
 802054c:	6a21      	ldr	r1, [r4, #32]
 802054e:	47b8      	blx	r7
 8020550:	2800      	cmp	r0, #0
 8020552:	dc07      	bgt.n	8020564 <__sflush_r+0xfc>
 8020554:	89a2      	ldrh	r2, [r4, #12]
 8020556:	2340      	movs	r3, #64	@ 0x40
 8020558:	2001      	movs	r0, #1
 802055a:	4313      	orrs	r3, r2
 802055c:	b21b      	sxth	r3, r3
 802055e:	81a3      	strh	r3, [r4, #12]
 8020560:	4240      	negs	r0, r0
 8020562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020564:	9b01      	ldr	r3, [sp, #4]
 8020566:	1836      	adds	r6, r6, r0
 8020568:	1a1b      	subs	r3, r3, r0
 802056a:	9301      	str	r3, [sp, #4]
 802056c:	e7e6      	b.n	802053c <__sflush_r+0xd4>
 802056e:	46c0      	nop			@ (mov r8, r8)
 8020570:	dfbffffe 	.word	0xdfbffffe

08020574 <_fflush_r>:
 8020574:	690b      	ldr	r3, [r1, #16]
 8020576:	b570      	push	{r4, r5, r6, lr}
 8020578:	0005      	movs	r5, r0
 802057a:	000c      	movs	r4, r1
 802057c:	2b00      	cmp	r3, #0
 802057e:	d102      	bne.n	8020586 <_fflush_r+0x12>
 8020580:	2500      	movs	r5, #0
 8020582:	0028      	movs	r0, r5
 8020584:	bd70      	pop	{r4, r5, r6, pc}
 8020586:	2800      	cmp	r0, #0
 8020588:	d004      	beq.n	8020594 <_fflush_r+0x20>
 802058a:	6a03      	ldr	r3, [r0, #32]
 802058c:	2b00      	cmp	r3, #0
 802058e:	d101      	bne.n	8020594 <_fflush_r+0x20>
 8020590:	f7fd fb28 	bl	801dbe4 <__sinit>
 8020594:	220c      	movs	r2, #12
 8020596:	5ea3      	ldrsh	r3, [r4, r2]
 8020598:	2b00      	cmp	r3, #0
 802059a:	d0f1      	beq.n	8020580 <_fflush_r+0xc>
 802059c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802059e:	07d2      	lsls	r2, r2, #31
 80205a0:	d404      	bmi.n	80205ac <_fflush_r+0x38>
 80205a2:	059b      	lsls	r3, r3, #22
 80205a4:	d402      	bmi.n	80205ac <_fflush_r+0x38>
 80205a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80205a8:	f7fd fcd3 	bl	801df52 <__retarget_lock_acquire_recursive>
 80205ac:	0028      	movs	r0, r5
 80205ae:	0021      	movs	r1, r4
 80205b0:	f7ff ff5a 	bl	8020468 <__sflush_r>
 80205b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80205b6:	0005      	movs	r5, r0
 80205b8:	07db      	lsls	r3, r3, #31
 80205ba:	d4e2      	bmi.n	8020582 <_fflush_r+0xe>
 80205bc:	89a3      	ldrh	r3, [r4, #12]
 80205be:	059b      	lsls	r3, r3, #22
 80205c0:	d4df      	bmi.n	8020582 <_fflush_r+0xe>
 80205c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80205c4:	f7fd fcc6 	bl	801df54 <__retarget_lock_release_recursive>
 80205c8:	e7db      	b.n	8020582 <_fflush_r+0xe>

080205ca <__swbuf_r>:
 80205ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205cc:	0006      	movs	r6, r0
 80205ce:	000d      	movs	r5, r1
 80205d0:	0014      	movs	r4, r2
 80205d2:	2800      	cmp	r0, #0
 80205d4:	d004      	beq.n	80205e0 <__swbuf_r+0x16>
 80205d6:	6a03      	ldr	r3, [r0, #32]
 80205d8:	2b00      	cmp	r3, #0
 80205da:	d101      	bne.n	80205e0 <__swbuf_r+0x16>
 80205dc:	f7fd fb02 	bl	801dbe4 <__sinit>
 80205e0:	69a3      	ldr	r3, [r4, #24]
 80205e2:	60a3      	str	r3, [r4, #8]
 80205e4:	89a3      	ldrh	r3, [r4, #12]
 80205e6:	071b      	lsls	r3, r3, #28
 80205e8:	d502      	bpl.n	80205f0 <__swbuf_r+0x26>
 80205ea:	6923      	ldr	r3, [r4, #16]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d109      	bne.n	8020604 <__swbuf_r+0x3a>
 80205f0:	0021      	movs	r1, r4
 80205f2:	0030      	movs	r0, r6
 80205f4:	f000 f82c 	bl	8020650 <__swsetup_r>
 80205f8:	2800      	cmp	r0, #0
 80205fa:	d003      	beq.n	8020604 <__swbuf_r+0x3a>
 80205fc:	2501      	movs	r5, #1
 80205fe:	426d      	negs	r5, r5
 8020600:	0028      	movs	r0, r5
 8020602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020604:	6923      	ldr	r3, [r4, #16]
 8020606:	6820      	ldr	r0, [r4, #0]
 8020608:	b2ef      	uxtb	r7, r5
 802060a:	1ac0      	subs	r0, r0, r3
 802060c:	6963      	ldr	r3, [r4, #20]
 802060e:	b2ed      	uxtb	r5, r5
 8020610:	4283      	cmp	r3, r0
 8020612:	dc05      	bgt.n	8020620 <__swbuf_r+0x56>
 8020614:	0021      	movs	r1, r4
 8020616:	0030      	movs	r0, r6
 8020618:	f7ff ffac 	bl	8020574 <_fflush_r>
 802061c:	2800      	cmp	r0, #0
 802061e:	d1ed      	bne.n	80205fc <__swbuf_r+0x32>
 8020620:	68a3      	ldr	r3, [r4, #8]
 8020622:	3001      	adds	r0, #1
 8020624:	3b01      	subs	r3, #1
 8020626:	60a3      	str	r3, [r4, #8]
 8020628:	6823      	ldr	r3, [r4, #0]
 802062a:	1c5a      	adds	r2, r3, #1
 802062c:	6022      	str	r2, [r4, #0]
 802062e:	701f      	strb	r7, [r3, #0]
 8020630:	6963      	ldr	r3, [r4, #20]
 8020632:	4283      	cmp	r3, r0
 8020634:	d004      	beq.n	8020640 <__swbuf_r+0x76>
 8020636:	89a3      	ldrh	r3, [r4, #12]
 8020638:	07db      	lsls	r3, r3, #31
 802063a:	d5e1      	bpl.n	8020600 <__swbuf_r+0x36>
 802063c:	2d0a      	cmp	r5, #10
 802063e:	d1df      	bne.n	8020600 <__swbuf_r+0x36>
 8020640:	0021      	movs	r1, r4
 8020642:	0030      	movs	r0, r6
 8020644:	f7ff ff96 	bl	8020574 <_fflush_r>
 8020648:	2800      	cmp	r0, #0
 802064a:	d0d9      	beq.n	8020600 <__swbuf_r+0x36>
 802064c:	e7d6      	b.n	80205fc <__swbuf_r+0x32>
	...

08020650 <__swsetup_r>:
 8020650:	4b2d      	ldr	r3, [pc, #180]	@ (8020708 <__swsetup_r+0xb8>)
 8020652:	b570      	push	{r4, r5, r6, lr}
 8020654:	0005      	movs	r5, r0
 8020656:	6818      	ldr	r0, [r3, #0]
 8020658:	000c      	movs	r4, r1
 802065a:	2800      	cmp	r0, #0
 802065c:	d004      	beq.n	8020668 <__swsetup_r+0x18>
 802065e:	6a03      	ldr	r3, [r0, #32]
 8020660:	2b00      	cmp	r3, #0
 8020662:	d101      	bne.n	8020668 <__swsetup_r+0x18>
 8020664:	f7fd fabe 	bl	801dbe4 <__sinit>
 8020668:	230c      	movs	r3, #12
 802066a:	5ee2      	ldrsh	r2, [r4, r3]
 802066c:	0713      	lsls	r3, r2, #28
 802066e:	d423      	bmi.n	80206b8 <__swsetup_r+0x68>
 8020670:	06d3      	lsls	r3, r2, #27
 8020672:	d407      	bmi.n	8020684 <__swsetup_r+0x34>
 8020674:	2309      	movs	r3, #9
 8020676:	602b      	str	r3, [r5, #0]
 8020678:	2340      	movs	r3, #64	@ 0x40
 802067a:	2001      	movs	r0, #1
 802067c:	4313      	orrs	r3, r2
 802067e:	81a3      	strh	r3, [r4, #12]
 8020680:	4240      	negs	r0, r0
 8020682:	e03a      	b.n	80206fa <__swsetup_r+0xaa>
 8020684:	0752      	lsls	r2, r2, #29
 8020686:	d513      	bpl.n	80206b0 <__swsetup_r+0x60>
 8020688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802068a:	2900      	cmp	r1, #0
 802068c:	d008      	beq.n	80206a0 <__swsetup_r+0x50>
 802068e:	0023      	movs	r3, r4
 8020690:	3344      	adds	r3, #68	@ 0x44
 8020692:	4299      	cmp	r1, r3
 8020694:	d002      	beq.n	802069c <__swsetup_r+0x4c>
 8020696:	0028      	movs	r0, r5
 8020698:	f7fe fafa 	bl	801ec90 <_free_r>
 802069c:	2300      	movs	r3, #0
 802069e:	6363      	str	r3, [r4, #52]	@ 0x34
 80206a0:	2224      	movs	r2, #36	@ 0x24
 80206a2:	89a3      	ldrh	r3, [r4, #12]
 80206a4:	4393      	bics	r3, r2
 80206a6:	81a3      	strh	r3, [r4, #12]
 80206a8:	2300      	movs	r3, #0
 80206aa:	6063      	str	r3, [r4, #4]
 80206ac:	6923      	ldr	r3, [r4, #16]
 80206ae:	6023      	str	r3, [r4, #0]
 80206b0:	2308      	movs	r3, #8
 80206b2:	89a2      	ldrh	r2, [r4, #12]
 80206b4:	4313      	orrs	r3, r2
 80206b6:	81a3      	strh	r3, [r4, #12]
 80206b8:	6923      	ldr	r3, [r4, #16]
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d10b      	bne.n	80206d6 <__swsetup_r+0x86>
 80206be:	21a0      	movs	r1, #160	@ 0xa0
 80206c0:	2280      	movs	r2, #128	@ 0x80
 80206c2:	89a3      	ldrh	r3, [r4, #12]
 80206c4:	0089      	lsls	r1, r1, #2
 80206c6:	0092      	lsls	r2, r2, #2
 80206c8:	400b      	ands	r3, r1
 80206ca:	4293      	cmp	r3, r2
 80206cc:	d003      	beq.n	80206d6 <__swsetup_r+0x86>
 80206ce:	0021      	movs	r1, r4
 80206d0:	0028      	movs	r0, r5
 80206d2:	f000 f8f5 	bl	80208c0 <__smakebuf_r>
 80206d6:	230c      	movs	r3, #12
 80206d8:	5ee2      	ldrsh	r2, [r4, r3]
 80206da:	2101      	movs	r1, #1
 80206dc:	0013      	movs	r3, r2
 80206de:	400b      	ands	r3, r1
 80206e0:	420a      	tst	r2, r1
 80206e2:	d00b      	beq.n	80206fc <__swsetup_r+0xac>
 80206e4:	2300      	movs	r3, #0
 80206e6:	60a3      	str	r3, [r4, #8]
 80206e8:	6963      	ldr	r3, [r4, #20]
 80206ea:	425b      	negs	r3, r3
 80206ec:	61a3      	str	r3, [r4, #24]
 80206ee:	2000      	movs	r0, #0
 80206f0:	6923      	ldr	r3, [r4, #16]
 80206f2:	4283      	cmp	r3, r0
 80206f4:	d101      	bne.n	80206fa <__swsetup_r+0xaa>
 80206f6:	0613      	lsls	r3, r2, #24
 80206f8:	d4be      	bmi.n	8020678 <__swsetup_r+0x28>
 80206fa:	bd70      	pop	{r4, r5, r6, pc}
 80206fc:	0791      	lsls	r1, r2, #30
 80206fe:	d400      	bmi.n	8020702 <__swsetup_r+0xb2>
 8020700:	6963      	ldr	r3, [r4, #20]
 8020702:	60a3      	str	r3, [r4, #8]
 8020704:	e7f3      	b.n	80206ee <__swsetup_r+0x9e>
 8020706:	46c0      	nop			@ (mov r8, r8)
 8020708:	200003c8 	.word	0x200003c8

0802070c <memmove>:
 802070c:	b510      	push	{r4, lr}
 802070e:	4288      	cmp	r0, r1
 8020710:	d806      	bhi.n	8020720 <memmove+0x14>
 8020712:	2300      	movs	r3, #0
 8020714:	429a      	cmp	r2, r3
 8020716:	d008      	beq.n	802072a <memmove+0x1e>
 8020718:	5ccc      	ldrb	r4, [r1, r3]
 802071a:	54c4      	strb	r4, [r0, r3]
 802071c:	3301      	adds	r3, #1
 802071e:	e7f9      	b.n	8020714 <memmove+0x8>
 8020720:	188b      	adds	r3, r1, r2
 8020722:	4298      	cmp	r0, r3
 8020724:	d2f5      	bcs.n	8020712 <memmove+0x6>
 8020726:	3a01      	subs	r2, #1
 8020728:	d200      	bcs.n	802072c <memmove+0x20>
 802072a:	bd10      	pop	{r4, pc}
 802072c:	5c8b      	ldrb	r3, [r1, r2]
 802072e:	5483      	strb	r3, [r0, r2]
 8020730:	e7f9      	b.n	8020726 <memmove+0x1a>
	...

08020734 <_sbrk_r>:
 8020734:	2300      	movs	r3, #0
 8020736:	b570      	push	{r4, r5, r6, lr}
 8020738:	4d06      	ldr	r5, [pc, #24]	@ (8020754 <_sbrk_r+0x20>)
 802073a:	0004      	movs	r4, r0
 802073c:	0008      	movs	r0, r1
 802073e:	602b      	str	r3, [r5, #0]
 8020740:	f7eb fbd2 	bl	800bee8 <_sbrk>
 8020744:	1c43      	adds	r3, r0, #1
 8020746:	d103      	bne.n	8020750 <_sbrk_r+0x1c>
 8020748:	682b      	ldr	r3, [r5, #0]
 802074a:	2b00      	cmp	r3, #0
 802074c:	d000      	beq.n	8020750 <_sbrk_r+0x1c>
 802074e:	6023      	str	r3, [r4, #0]
 8020750:	bd70      	pop	{r4, r5, r6, pc}
 8020752:	46c0      	nop			@ (mov r8, r8)
 8020754:	200038bc 	.word	0x200038bc

08020758 <__assert_func>:
 8020758:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802075a:	0014      	movs	r4, r2
 802075c:	001a      	movs	r2, r3
 802075e:	4b09      	ldr	r3, [pc, #36]	@ (8020784 <__assert_func+0x2c>)
 8020760:	0005      	movs	r5, r0
 8020762:	681b      	ldr	r3, [r3, #0]
 8020764:	000e      	movs	r6, r1
 8020766:	68d8      	ldr	r0, [r3, #12]
 8020768:	4b07      	ldr	r3, [pc, #28]	@ (8020788 <__assert_func+0x30>)
 802076a:	2c00      	cmp	r4, #0
 802076c:	d101      	bne.n	8020772 <__assert_func+0x1a>
 802076e:	4b07      	ldr	r3, [pc, #28]	@ (802078c <__assert_func+0x34>)
 8020770:	001c      	movs	r4, r3
 8020772:	4907      	ldr	r1, [pc, #28]	@ (8020790 <__assert_func+0x38>)
 8020774:	9301      	str	r3, [sp, #4]
 8020776:	9402      	str	r4, [sp, #8]
 8020778:	002b      	movs	r3, r5
 802077a:	9600      	str	r6, [sp, #0]
 802077c:	f000 f866 	bl	802084c <fiprintf>
 8020780:	f000 f904 	bl	802098c <abort>
 8020784:	200003c8 	.word	0x200003c8
 8020788:	08023019 	.word	0x08023019
 802078c:	08023054 	.word	0x08023054
 8020790:	08023026 	.word	0x08023026

08020794 <_calloc_r>:
 8020794:	b570      	push	{r4, r5, r6, lr}
 8020796:	0c0b      	lsrs	r3, r1, #16
 8020798:	0c15      	lsrs	r5, r2, #16
 802079a:	2b00      	cmp	r3, #0
 802079c:	d11e      	bne.n	80207dc <_calloc_r+0x48>
 802079e:	2d00      	cmp	r5, #0
 80207a0:	d10c      	bne.n	80207bc <_calloc_r+0x28>
 80207a2:	b289      	uxth	r1, r1
 80207a4:	b294      	uxth	r4, r2
 80207a6:	434c      	muls	r4, r1
 80207a8:	0021      	movs	r1, r4
 80207aa:	f7fe fe41 	bl	801f430 <_malloc_r>
 80207ae:	1e05      	subs	r5, r0, #0
 80207b0:	d01a      	beq.n	80207e8 <_calloc_r+0x54>
 80207b2:	0022      	movs	r2, r4
 80207b4:	2100      	movs	r1, #0
 80207b6:	f7fd fafd 	bl	801ddb4 <memset>
 80207ba:	e016      	b.n	80207ea <_calloc_r+0x56>
 80207bc:	1c2b      	adds	r3, r5, #0
 80207be:	1c0c      	adds	r4, r1, #0
 80207c0:	b289      	uxth	r1, r1
 80207c2:	b292      	uxth	r2, r2
 80207c4:	434a      	muls	r2, r1
 80207c6:	b29b      	uxth	r3, r3
 80207c8:	b2a1      	uxth	r1, r4
 80207ca:	4359      	muls	r1, r3
 80207cc:	0c14      	lsrs	r4, r2, #16
 80207ce:	190c      	adds	r4, r1, r4
 80207d0:	0c23      	lsrs	r3, r4, #16
 80207d2:	d107      	bne.n	80207e4 <_calloc_r+0x50>
 80207d4:	0424      	lsls	r4, r4, #16
 80207d6:	b292      	uxth	r2, r2
 80207d8:	4314      	orrs	r4, r2
 80207da:	e7e5      	b.n	80207a8 <_calloc_r+0x14>
 80207dc:	2d00      	cmp	r5, #0
 80207de:	d101      	bne.n	80207e4 <_calloc_r+0x50>
 80207e0:	1c14      	adds	r4, r2, #0
 80207e2:	e7ed      	b.n	80207c0 <_calloc_r+0x2c>
 80207e4:	230c      	movs	r3, #12
 80207e6:	6003      	str	r3, [r0, #0]
 80207e8:	2500      	movs	r5, #0
 80207ea:	0028      	movs	r0, r5
 80207ec:	bd70      	pop	{r4, r5, r6, pc}

080207ee <_realloc_r>:
 80207ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80207f0:	0006      	movs	r6, r0
 80207f2:	000c      	movs	r4, r1
 80207f4:	0015      	movs	r5, r2
 80207f6:	2900      	cmp	r1, #0
 80207f8:	d105      	bne.n	8020806 <_realloc_r+0x18>
 80207fa:	0011      	movs	r1, r2
 80207fc:	f7fe fe18 	bl	801f430 <_malloc_r>
 8020800:	0004      	movs	r4, r0
 8020802:	0020      	movs	r0, r4
 8020804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020806:	2a00      	cmp	r2, #0
 8020808:	d103      	bne.n	8020812 <_realloc_r+0x24>
 802080a:	f7fe fa41 	bl	801ec90 <_free_r>
 802080e:	2400      	movs	r4, #0
 8020810:	e7f7      	b.n	8020802 <_realloc_r+0x14>
 8020812:	f000 f8c2 	bl	802099a <_malloc_usable_size_r>
 8020816:	0007      	movs	r7, r0
 8020818:	4285      	cmp	r5, r0
 802081a:	d802      	bhi.n	8020822 <_realloc_r+0x34>
 802081c:	0843      	lsrs	r3, r0, #1
 802081e:	42ab      	cmp	r3, r5
 8020820:	d3ef      	bcc.n	8020802 <_realloc_r+0x14>
 8020822:	0029      	movs	r1, r5
 8020824:	0030      	movs	r0, r6
 8020826:	f7fe fe03 	bl	801f430 <_malloc_r>
 802082a:	9001      	str	r0, [sp, #4]
 802082c:	2800      	cmp	r0, #0
 802082e:	d0ee      	beq.n	802080e <_realloc_r+0x20>
 8020830:	002a      	movs	r2, r5
 8020832:	42bd      	cmp	r5, r7
 8020834:	d900      	bls.n	8020838 <_realloc_r+0x4a>
 8020836:	003a      	movs	r2, r7
 8020838:	0021      	movs	r1, r4
 802083a:	9801      	ldr	r0, [sp, #4]
 802083c:	f7fd fb96 	bl	801df6c <memcpy>
 8020840:	0021      	movs	r1, r4
 8020842:	0030      	movs	r0, r6
 8020844:	f7fe fa24 	bl	801ec90 <_free_r>
 8020848:	9c01      	ldr	r4, [sp, #4]
 802084a:	e7da      	b.n	8020802 <_realloc_r+0x14>

0802084c <fiprintf>:
 802084c:	b40e      	push	{r1, r2, r3}
 802084e:	b517      	push	{r0, r1, r2, r4, lr}
 8020850:	4c05      	ldr	r4, [pc, #20]	@ (8020868 <fiprintf+0x1c>)
 8020852:	ab05      	add	r3, sp, #20
 8020854:	cb04      	ldmia	r3!, {r2}
 8020856:	0001      	movs	r1, r0
 8020858:	6820      	ldr	r0, [r4, #0]
 802085a:	9301      	str	r3, [sp, #4]
 802085c:	f7ff fce8 	bl	8020230 <_vfiprintf_r>
 8020860:	bc1e      	pop	{r1, r2, r3, r4}
 8020862:	bc08      	pop	{r3}
 8020864:	b003      	add	sp, #12
 8020866:	4718      	bx	r3
 8020868:	200003c8 	.word	0x200003c8

0802086c <__swhatbuf_r>:
 802086c:	b570      	push	{r4, r5, r6, lr}
 802086e:	000e      	movs	r6, r1
 8020870:	001d      	movs	r5, r3
 8020872:	230e      	movs	r3, #14
 8020874:	5ec9      	ldrsh	r1, [r1, r3]
 8020876:	0014      	movs	r4, r2
 8020878:	b096      	sub	sp, #88	@ 0x58
 802087a:	2900      	cmp	r1, #0
 802087c:	da0c      	bge.n	8020898 <__swhatbuf_r+0x2c>
 802087e:	89b2      	ldrh	r2, [r6, #12]
 8020880:	2380      	movs	r3, #128	@ 0x80
 8020882:	0011      	movs	r1, r2
 8020884:	4019      	ands	r1, r3
 8020886:	421a      	tst	r2, r3
 8020888:	d114      	bne.n	80208b4 <__swhatbuf_r+0x48>
 802088a:	2380      	movs	r3, #128	@ 0x80
 802088c:	00db      	lsls	r3, r3, #3
 802088e:	2000      	movs	r0, #0
 8020890:	6029      	str	r1, [r5, #0]
 8020892:	6023      	str	r3, [r4, #0]
 8020894:	b016      	add	sp, #88	@ 0x58
 8020896:	bd70      	pop	{r4, r5, r6, pc}
 8020898:	466a      	mov	r2, sp
 802089a:	f000 f853 	bl	8020944 <_fstat_r>
 802089e:	2800      	cmp	r0, #0
 80208a0:	dbed      	blt.n	802087e <__swhatbuf_r+0x12>
 80208a2:	23f0      	movs	r3, #240	@ 0xf0
 80208a4:	9901      	ldr	r1, [sp, #4]
 80208a6:	021b      	lsls	r3, r3, #8
 80208a8:	4019      	ands	r1, r3
 80208aa:	4b04      	ldr	r3, [pc, #16]	@ (80208bc <__swhatbuf_r+0x50>)
 80208ac:	18c9      	adds	r1, r1, r3
 80208ae:	424b      	negs	r3, r1
 80208b0:	4159      	adcs	r1, r3
 80208b2:	e7ea      	b.n	802088a <__swhatbuf_r+0x1e>
 80208b4:	2100      	movs	r1, #0
 80208b6:	2340      	movs	r3, #64	@ 0x40
 80208b8:	e7e9      	b.n	802088e <__swhatbuf_r+0x22>
 80208ba:	46c0      	nop			@ (mov r8, r8)
 80208bc:	ffffe000 	.word	0xffffe000

080208c0 <__smakebuf_r>:
 80208c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208c2:	2602      	movs	r6, #2
 80208c4:	898b      	ldrh	r3, [r1, #12]
 80208c6:	0005      	movs	r5, r0
 80208c8:	000c      	movs	r4, r1
 80208ca:	b085      	sub	sp, #20
 80208cc:	4233      	tst	r3, r6
 80208ce:	d007      	beq.n	80208e0 <__smakebuf_r+0x20>
 80208d0:	0023      	movs	r3, r4
 80208d2:	3347      	adds	r3, #71	@ 0x47
 80208d4:	6023      	str	r3, [r4, #0]
 80208d6:	6123      	str	r3, [r4, #16]
 80208d8:	2301      	movs	r3, #1
 80208da:	6163      	str	r3, [r4, #20]
 80208dc:	b005      	add	sp, #20
 80208de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208e0:	ab03      	add	r3, sp, #12
 80208e2:	aa02      	add	r2, sp, #8
 80208e4:	f7ff ffc2 	bl	802086c <__swhatbuf_r>
 80208e8:	9f02      	ldr	r7, [sp, #8]
 80208ea:	9001      	str	r0, [sp, #4]
 80208ec:	0039      	movs	r1, r7
 80208ee:	0028      	movs	r0, r5
 80208f0:	f7fe fd9e 	bl	801f430 <_malloc_r>
 80208f4:	2800      	cmp	r0, #0
 80208f6:	d108      	bne.n	802090a <__smakebuf_r+0x4a>
 80208f8:	220c      	movs	r2, #12
 80208fa:	5ea3      	ldrsh	r3, [r4, r2]
 80208fc:	059a      	lsls	r2, r3, #22
 80208fe:	d4ed      	bmi.n	80208dc <__smakebuf_r+0x1c>
 8020900:	2203      	movs	r2, #3
 8020902:	4393      	bics	r3, r2
 8020904:	431e      	orrs	r6, r3
 8020906:	81a6      	strh	r6, [r4, #12]
 8020908:	e7e2      	b.n	80208d0 <__smakebuf_r+0x10>
 802090a:	2380      	movs	r3, #128	@ 0x80
 802090c:	89a2      	ldrh	r2, [r4, #12]
 802090e:	6020      	str	r0, [r4, #0]
 8020910:	4313      	orrs	r3, r2
 8020912:	81a3      	strh	r3, [r4, #12]
 8020914:	9b03      	ldr	r3, [sp, #12]
 8020916:	6120      	str	r0, [r4, #16]
 8020918:	6167      	str	r7, [r4, #20]
 802091a:	2b00      	cmp	r3, #0
 802091c:	d00c      	beq.n	8020938 <__smakebuf_r+0x78>
 802091e:	0028      	movs	r0, r5
 8020920:	230e      	movs	r3, #14
 8020922:	5ee1      	ldrsh	r1, [r4, r3]
 8020924:	f000 f820 	bl	8020968 <_isatty_r>
 8020928:	2800      	cmp	r0, #0
 802092a:	d005      	beq.n	8020938 <__smakebuf_r+0x78>
 802092c:	2303      	movs	r3, #3
 802092e:	89a2      	ldrh	r2, [r4, #12]
 8020930:	439a      	bics	r2, r3
 8020932:	3b02      	subs	r3, #2
 8020934:	4313      	orrs	r3, r2
 8020936:	81a3      	strh	r3, [r4, #12]
 8020938:	89a3      	ldrh	r3, [r4, #12]
 802093a:	9a01      	ldr	r2, [sp, #4]
 802093c:	4313      	orrs	r3, r2
 802093e:	81a3      	strh	r3, [r4, #12]
 8020940:	e7cc      	b.n	80208dc <__smakebuf_r+0x1c>
	...

08020944 <_fstat_r>:
 8020944:	2300      	movs	r3, #0
 8020946:	b570      	push	{r4, r5, r6, lr}
 8020948:	4d06      	ldr	r5, [pc, #24]	@ (8020964 <_fstat_r+0x20>)
 802094a:	0004      	movs	r4, r0
 802094c:	0008      	movs	r0, r1
 802094e:	0011      	movs	r1, r2
 8020950:	602b      	str	r3, [r5, #0]
 8020952:	f7eb faa7 	bl	800bea4 <_fstat>
 8020956:	1c43      	adds	r3, r0, #1
 8020958:	d103      	bne.n	8020962 <_fstat_r+0x1e>
 802095a:	682b      	ldr	r3, [r5, #0]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d000      	beq.n	8020962 <_fstat_r+0x1e>
 8020960:	6023      	str	r3, [r4, #0]
 8020962:	bd70      	pop	{r4, r5, r6, pc}
 8020964:	200038bc 	.word	0x200038bc

08020968 <_isatty_r>:
 8020968:	2300      	movs	r3, #0
 802096a:	b570      	push	{r4, r5, r6, lr}
 802096c:	4d06      	ldr	r5, [pc, #24]	@ (8020988 <_isatty_r+0x20>)
 802096e:	0004      	movs	r4, r0
 8020970:	0008      	movs	r0, r1
 8020972:	602b      	str	r3, [r5, #0]
 8020974:	f7eb faa4 	bl	800bec0 <_isatty>
 8020978:	1c43      	adds	r3, r0, #1
 802097a:	d103      	bne.n	8020984 <_isatty_r+0x1c>
 802097c:	682b      	ldr	r3, [r5, #0]
 802097e:	2b00      	cmp	r3, #0
 8020980:	d000      	beq.n	8020984 <_isatty_r+0x1c>
 8020982:	6023      	str	r3, [r4, #0]
 8020984:	bd70      	pop	{r4, r5, r6, pc}
 8020986:	46c0      	nop			@ (mov r8, r8)
 8020988:	200038bc 	.word	0x200038bc

0802098c <abort>:
 802098c:	2006      	movs	r0, #6
 802098e:	b510      	push	{r4, lr}
 8020990:	f000 f834 	bl	80209fc <raise>
 8020994:	2001      	movs	r0, #1
 8020996:	f7eb fa51 	bl	800be3c <_exit>

0802099a <_malloc_usable_size_r>:
 802099a:	1f0b      	subs	r3, r1, #4
 802099c:	681b      	ldr	r3, [r3, #0]
 802099e:	1f18      	subs	r0, r3, #4
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	da01      	bge.n	80209a8 <_malloc_usable_size_r+0xe>
 80209a4:	580b      	ldr	r3, [r1, r0]
 80209a6:	18c0      	adds	r0, r0, r3
 80209a8:	4770      	bx	lr

080209aa <_raise_r>:
 80209aa:	b570      	push	{r4, r5, r6, lr}
 80209ac:	0004      	movs	r4, r0
 80209ae:	000d      	movs	r5, r1
 80209b0:	291f      	cmp	r1, #31
 80209b2:	d904      	bls.n	80209be <_raise_r+0x14>
 80209b4:	2316      	movs	r3, #22
 80209b6:	6003      	str	r3, [r0, #0]
 80209b8:	2001      	movs	r0, #1
 80209ba:	4240      	negs	r0, r0
 80209bc:	bd70      	pop	{r4, r5, r6, pc}
 80209be:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d004      	beq.n	80209ce <_raise_r+0x24>
 80209c4:	008a      	lsls	r2, r1, #2
 80209c6:	189b      	adds	r3, r3, r2
 80209c8:	681a      	ldr	r2, [r3, #0]
 80209ca:	2a00      	cmp	r2, #0
 80209cc:	d108      	bne.n	80209e0 <_raise_r+0x36>
 80209ce:	0020      	movs	r0, r4
 80209d0:	f000 f830 	bl	8020a34 <_getpid_r>
 80209d4:	002a      	movs	r2, r5
 80209d6:	0001      	movs	r1, r0
 80209d8:	0020      	movs	r0, r4
 80209da:	f000 f819 	bl	8020a10 <_kill_r>
 80209de:	e7ed      	b.n	80209bc <_raise_r+0x12>
 80209e0:	2a01      	cmp	r2, #1
 80209e2:	d009      	beq.n	80209f8 <_raise_r+0x4e>
 80209e4:	1c51      	adds	r1, r2, #1
 80209e6:	d103      	bne.n	80209f0 <_raise_r+0x46>
 80209e8:	2316      	movs	r3, #22
 80209ea:	6003      	str	r3, [r0, #0]
 80209ec:	2001      	movs	r0, #1
 80209ee:	e7e5      	b.n	80209bc <_raise_r+0x12>
 80209f0:	2100      	movs	r1, #0
 80209f2:	0028      	movs	r0, r5
 80209f4:	6019      	str	r1, [r3, #0]
 80209f6:	4790      	blx	r2
 80209f8:	2000      	movs	r0, #0
 80209fa:	e7df      	b.n	80209bc <_raise_r+0x12>

080209fc <raise>:
 80209fc:	b510      	push	{r4, lr}
 80209fe:	4b03      	ldr	r3, [pc, #12]	@ (8020a0c <raise+0x10>)
 8020a00:	0001      	movs	r1, r0
 8020a02:	6818      	ldr	r0, [r3, #0]
 8020a04:	f7ff ffd1 	bl	80209aa <_raise_r>
 8020a08:	bd10      	pop	{r4, pc}
 8020a0a:	46c0      	nop			@ (mov r8, r8)
 8020a0c:	200003c8 	.word	0x200003c8

08020a10 <_kill_r>:
 8020a10:	2300      	movs	r3, #0
 8020a12:	b570      	push	{r4, r5, r6, lr}
 8020a14:	4d06      	ldr	r5, [pc, #24]	@ (8020a30 <_kill_r+0x20>)
 8020a16:	0004      	movs	r4, r0
 8020a18:	0008      	movs	r0, r1
 8020a1a:	0011      	movs	r1, r2
 8020a1c:	602b      	str	r3, [r5, #0]
 8020a1e:	f7eb f9fd 	bl	800be1c <_kill>
 8020a22:	1c43      	adds	r3, r0, #1
 8020a24:	d103      	bne.n	8020a2e <_kill_r+0x1e>
 8020a26:	682b      	ldr	r3, [r5, #0]
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	d000      	beq.n	8020a2e <_kill_r+0x1e>
 8020a2c:	6023      	str	r3, [r4, #0]
 8020a2e:	bd70      	pop	{r4, r5, r6, pc}
 8020a30:	200038bc 	.word	0x200038bc

08020a34 <_getpid_r>:
 8020a34:	b510      	push	{r4, lr}
 8020a36:	f7eb f9eb 	bl	800be10 <_getpid>
 8020a3a:	bd10      	pop	{r4, pc}

08020a3c <expf>:
 8020a3c:	b570      	push	{r4, r5, r6, lr}
 8020a3e:	1c04      	adds	r4, r0, #0
 8020a40:	f000 f8e6 	bl	8020c10 <__ieee754_expf>
 8020a44:	1c05      	adds	r5, r0, #0
 8020a46:	1c20      	adds	r0, r4, #0
 8020a48:	f000 f83c 	bl	8020ac4 <finitef>
 8020a4c:	2800      	cmp	r0, #0
 8020a4e:	d00b      	beq.n	8020a68 <expf+0x2c>
 8020a50:	490c      	ldr	r1, [pc, #48]	@ (8020a84 <expf+0x48>)
 8020a52:	1c20      	adds	r0, r4, #0
 8020a54:	f7df fd80 	bl	8000558 <__aeabi_fcmpgt>
 8020a58:	2800      	cmp	r0, #0
 8020a5a:	d007      	beq.n	8020a6c <expf+0x30>
 8020a5c:	f7fd fa4e 	bl	801defc <__errno>
 8020a60:	25ff      	movs	r5, #255	@ 0xff
 8020a62:	2322      	movs	r3, #34	@ 0x22
 8020a64:	05ed      	lsls	r5, r5, #23
 8020a66:	6003      	str	r3, [r0, #0]
 8020a68:	1c28      	adds	r0, r5, #0
 8020a6a:	bd70      	pop	{r4, r5, r6, pc}
 8020a6c:	4906      	ldr	r1, [pc, #24]	@ (8020a88 <expf+0x4c>)
 8020a6e:	1c20      	adds	r0, r4, #0
 8020a70:	f7df fd5e 	bl	8000530 <__aeabi_fcmplt>
 8020a74:	2800      	cmp	r0, #0
 8020a76:	d0f7      	beq.n	8020a68 <expf+0x2c>
 8020a78:	f7fd fa40 	bl	801defc <__errno>
 8020a7c:	2322      	movs	r3, #34	@ 0x22
 8020a7e:	2500      	movs	r5, #0
 8020a80:	6003      	str	r3, [r0, #0]
 8020a82:	e7f1      	b.n	8020a68 <expf+0x2c>
 8020a84:	42b17217 	.word	0x42b17217
 8020a88:	c2cff1b5 	.word	0xc2cff1b5

08020a8c <sqrtf>:
 8020a8c:	b570      	push	{r4, r5, r6, lr}
 8020a8e:	1c05      	adds	r5, r0, #0
 8020a90:	f000 f822 	bl	8020ad8 <__ieee754_sqrtf>
 8020a94:	1c29      	adds	r1, r5, #0
 8020a96:	1c04      	adds	r4, r0, #0
 8020a98:	1c28      	adds	r0, r5, #0
 8020a9a:	f7e0 fd63 	bl	8001564 <__aeabi_fcmpun>
 8020a9e:	2800      	cmp	r0, #0
 8020aa0:	d10e      	bne.n	8020ac0 <sqrtf+0x34>
 8020aa2:	2100      	movs	r1, #0
 8020aa4:	1c28      	adds	r0, r5, #0
 8020aa6:	f7df fd43 	bl	8000530 <__aeabi_fcmplt>
 8020aaa:	2800      	cmp	r0, #0
 8020aac:	d008      	beq.n	8020ac0 <sqrtf+0x34>
 8020aae:	f7fd fa25 	bl	801defc <__errno>
 8020ab2:	2321      	movs	r3, #33	@ 0x21
 8020ab4:	2100      	movs	r1, #0
 8020ab6:	6003      	str	r3, [r0, #0]
 8020ab8:	1c08      	adds	r0, r1, #0
 8020aba:	f7e0 f88b 	bl	8000bd4 <__aeabi_fdiv>
 8020abe:	1c04      	adds	r4, r0, #0
 8020ac0:	1c20      	adds	r0, r4, #0
 8020ac2:	bd70      	pop	{r4, r5, r6, pc}

08020ac4 <finitef>:
 8020ac4:	22ff      	movs	r2, #255	@ 0xff
 8020ac6:	0043      	lsls	r3, r0, #1
 8020ac8:	085b      	lsrs	r3, r3, #1
 8020aca:	2001      	movs	r0, #1
 8020acc:	05d2      	lsls	r2, r2, #23
 8020ace:	4293      	cmp	r3, r2
 8020ad0:	db00      	blt.n	8020ad4 <finitef+0x10>
 8020ad2:	2000      	movs	r0, #0
 8020ad4:	4770      	bx	lr
	...

08020ad8 <__ieee754_sqrtf>:
 8020ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020ada:	0003      	movs	r3, r0
 8020adc:	0042      	lsls	r2, r0, #1
 8020ade:	1c04      	adds	r4, r0, #0
 8020ae0:	20ff      	movs	r0, #255	@ 0xff
 8020ae2:	0852      	lsrs	r2, r2, #1
 8020ae4:	05c0      	lsls	r0, r0, #23
 8020ae6:	4282      	cmp	r2, r0
 8020ae8:	d30a      	bcc.n	8020b00 <__ieee754_sqrtf+0x28>
 8020aea:	1c21      	adds	r1, r4, #0
 8020aec:	1c20      	adds	r0, r4, #0
 8020aee:	f7e0 fa57 	bl	8000fa0 <__aeabi_fmul>
 8020af2:	1c01      	adds	r1, r0, #0
 8020af4:	1c20      	adds	r0, r4, #0
 8020af6:	f7df fee3 	bl	80008c0 <__aeabi_fadd>
 8020afa:	1c04      	adds	r4, r0, #0
 8020afc:	1c20      	adds	r0, r4, #0
 8020afe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020b00:	2a00      	cmp	r2, #0
 8020b02:	d0fb      	beq.n	8020afc <__ieee754_sqrtf+0x24>
 8020b04:	2c00      	cmp	r4, #0
 8020b06:	da07      	bge.n	8020b18 <__ieee754_sqrtf+0x40>
 8020b08:	1c21      	adds	r1, r4, #0
 8020b0a:	1c20      	adds	r0, r4, #0
 8020b0c:	f7e0 fb86 	bl	800121c <__aeabi_fsub>
 8020b10:	1c01      	adds	r1, r0, #0
 8020b12:	f7e0 f85f 	bl	8000bd4 <__aeabi_fdiv>
 8020b16:	e7f0      	b.n	8020afa <__ieee754_sqrtf+0x22>
 8020b18:	0022      	movs	r2, r4
 8020b1a:	15e1      	asrs	r1, r4, #23
 8020b1c:	4002      	ands	r2, r0
 8020b1e:	4204      	tst	r4, r0
 8020b20:	d046      	beq.n	8020bb0 <__ieee754_sqrtf+0xd8>
 8020b22:	2280      	movs	r2, #128	@ 0x80
 8020b24:	000f      	movs	r7, r1
 8020b26:	025b      	lsls	r3, r3, #9
 8020b28:	0a5b      	lsrs	r3, r3, #9
 8020b2a:	0412      	lsls	r2, r2, #16
 8020b2c:	3f7f      	subs	r7, #127	@ 0x7f
 8020b2e:	4313      	orrs	r3, r2
 8020b30:	07c9      	lsls	r1, r1, #31
 8020b32:	d400      	bmi.n	8020b36 <__ieee754_sqrtf+0x5e>
 8020b34:	005b      	lsls	r3, r3, #1
 8020b36:	2400      	movs	r4, #0
 8020b38:	2180      	movs	r1, #128	@ 0x80
 8020b3a:	2019      	movs	r0, #25
 8020b3c:	0026      	movs	r6, r4
 8020b3e:	107f      	asrs	r7, r7, #1
 8020b40:	005b      	lsls	r3, r3, #1
 8020b42:	0449      	lsls	r1, r1, #17
 8020b44:	1875      	adds	r5, r6, r1
 8020b46:	001a      	movs	r2, r3
 8020b48:	429d      	cmp	r5, r3
 8020b4a:	dc02      	bgt.n	8020b52 <__ieee754_sqrtf+0x7a>
 8020b4c:	186e      	adds	r6, r5, r1
 8020b4e:	1b5a      	subs	r2, r3, r5
 8020b50:	1864      	adds	r4, r4, r1
 8020b52:	3801      	subs	r0, #1
 8020b54:	0053      	lsls	r3, r2, #1
 8020b56:	0849      	lsrs	r1, r1, #1
 8020b58:	2800      	cmp	r0, #0
 8020b5a:	d1f3      	bne.n	8020b44 <__ieee754_sqrtf+0x6c>
 8020b5c:	2a00      	cmp	r2, #0
 8020b5e:	d019      	beq.n	8020b94 <__ieee754_sqrtf+0xbc>
 8020b60:	4d17      	ldr	r5, [pc, #92]	@ (8020bc0 <__ieee754_sqrtf+0xe8>)
 8020b62:	4e18      	ldr	r6, [pc, #96]	@ (8020bc4 <__ieee754_sqrtf+0xec>)
 8020b64:	6828      	ldr	r0, [r5, #0]
 8020b66:	6831      	ldr	r1, [r6, #0]
 8020b68:	682b      	ldr	r3, [r5, #0]
 8020b6a:	9301      	str	r3, [sp, #4]
 8020b6c:	f7e0 fb56 	bl	800121c <__aeabi_fsub>
 8020b70:	1c01      	adds	r1, r0, #0
 8020b72:	9801      	ldr	r0, [sp, #4]
 8020b74:	f7df fce6 	bl	8000544 <__aeabi_fcmple>
 8020b78:	2800      	cmp	r0, #0
 8020b7a:	d00b      	beq.n	8020b94 <__ieee754_sqrtf+0xbc>
 8020b7c:	6828      	ldr	r0, [r5, #0]
 8020b7e:	6831      	ldr	r1, [r6, #0]
 8020b80:	f7df fe9e 	bl	80008c0 <__aeabi_fadd>
 8020b84:	682d      	ldr	r5, [r5, #0]
 8020b86:	1c01      	adds	r1, r0, #0
 8020b88:	1c28      	adds	r0, r5, #0
 8020b8a:	f7df fcd1 	bl	8000530 <__aeabi_fcmplt>
 8020b8e:	2800      	cmp	r0, #0
 8020b90:	d011      	beq.n	8020bb6 <__ieee754_sqrtf+0xde>
 8020b92:	3402      	adds	r4, #2
 8020b94:	23fc      	movs	r3, #252	@ 0xfc
 8020b96:	1064      	asrs	r4, r4, #1
 8020b98:	059b      	lsls	r3, r3, #22
 8020b9a:	18e3      	adds	r3, r4, r3
 8020b9c:	05fc      	lsls	r4, r7, #23
 8020b9e:	18e4      	adds	r4, r4, r3
 8020ba0:	e7ac      	b.n	8020afc <__ieee754_sqrtf+0x24>
 8020ba2:	005b      	lsls	r3, r3, #1
 8020ba4:	3201      	adds	r2, #1
 8020ba6:	4203      	tst	r3, r0
 8020ba8:	d0fb      	beq.n	8020ba2 <__ieee754_sqrtf+0xca>
 8020baa:	3a01      	subs	r2, #1
 8020bac:	1a89      	subs	r1, r1, r2
 8020bae:	e7b8      	b.n	8020b22 <__ieee754_sqrtf+0x4a>
 8020bb0:	2080      	movs	r0, #128	@ 0x80
 8020bb2:	0400      	lsls	r0, r0, #16
 8020bb4:	e7f7      	b.n	8020ba6 <__ieee754_sqrtf+0xce>
 8020bb6:	2301      	movs	r3, #1
 8020bb8:	3401      	adds	r4, #1
 8020bba:	439c      	bics	r4, r3
 8020bbc:	e7ea      	b.n	8020b94 <__ieee754_sqrtf+0xbc>
 8020bbe:	46c0      	nop			@ (mov r8, r8)
 8020bc0:	2000041c 	.word	0x2000041c
 8020bc4:	20000418 	.word	0x20000418

08020bc8 <roundf>:
 8020bc8:	0dc3      	lsrs	r3, r0, #23
 8020bca:	b2db      	uxtb	r3, r3
 8020bcc:	3b7f      	subs	r3, #127	@ 0x7f
 8020bce:	0002      	movs	r2, r0
 8020bd0:	b510      	push	{r4, lr}
 8020bd2:	2b16      	cmp	r3, #22
 8020bd4:	dc13      	bgt.n	8020bfe <roundf+0x36>
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	da07      	bge.n	8020bea <roundf+0x22>
 8020bda:	0fc2      	lsrs	r2, r0, #31
 8020bdc:	07d0      	lsls	r0, r2, #31
 8020bde:	3301      	adds	r3, #1
 8020be0:	d102      	bne.n	8020be8 <roundf+0x20>
 8020be2:	23fe      	movs	r3, #254	@ 0xfe
 8020be4:	059b      	lsls	r3, r3, #22
 8020be6:	4318      	orrs	r0, r3
 8020be8:	bd10      	pop	{r4, pc}
 8020bea:	4908      	ldr	r1, [pc, #32]	@ (8020c0c <roundf+0x44>)
 8020bec:	4119      	asrs	r1, r3
 8020bee:	4208      	tst	r0, r1
 8020bf0:	d0fa      	beq.n	8020be8 <roundf+0x20>
 8020bf2:	2080      	movs	r0, #128	@ 0x80
 8020bf4:	03c0      	lsls	r0, r0, #15
 8020bf6:	4118      	asrs	r0, r3
 8020bf8:	1880      	adds	r0, r0, r2
 8020bfa:	4388      	bics	r0, r1
 8020bfc:	e7f4      	b.n	8020be8 <roundf+0x20>
 8020bfe:	2b80      	cmp	r3, #128	@ 0x80
 8020c00:	d1f2      	bne.n	8020be8 <roundf+0x20>
 8020c02:	1c01      	adds	r1, r0, #0
 8020c04:	f7df fe5c 	bl	80008c0 <__aeabi_fadd>
 8020c08:	e7ee      	b.n	8020be8 <roundf+0x20>
 8020c0a:	46c0      	nop			@ (mov r8, r8)
 8020c0c:	007fffff 	.word	0x007fffff

08020c10 <__ieee754_expf>:
 8020c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020c12:	21ff      	movs	r1, #255	@ 0xff
 8020c14:	0043      	lsls	r3, r0, #1
 8020c16:	1c04      	adds	r4, r0, #0
 8020c18:	085b      	lsrs	r3, r3, #1
 8020c1a:	05c9      	lsls	r1, r1, #23
 8020c1c:	428b      	cmp	r3, r1
 8020c1e:	d904      	bls.n	8020c2a <__ieee754_expf+0x1a>
 8020c20:	1c01      	adds	r1, r0, #0
 8020c22:	1c20      	adds	r0, r4, #0
 8020c24:	f7df fe4c 	bl	80008c0 <__aeabi_fadd>
 8020c28:	e00d      	b.n	8020c46 <__ieee754_expf+0x36>
 8020c2a:	0fc6      	lsrs	r6, r0, #31
 8020c2c:	428b      	cmp	r3, r1
 8020c2e:	d104      	bne.n	8020c3a <__ieee754_expf+0x2a>
 8020c30:	2e00      	cmp	r6, #0
 8020c32:	d000      	beq.n	8020c36 <__ieee754_expf+0x26>
 8020c34:	e0ba      	b.n	8020dac <__ieee754_expf+0x19c>
 8020c36:	1c20      	adds	r0, r4, #0
 8020c38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020c3a:	495d      	ldr	r1, [pc, #372]	@ (8020db0 <__ieee754_expf+0x1a0>)
 8020c3c:	4288      	cmp	r0, r1
 8020c3e:	dd04      	ble.n	8020c4a <__ieee754_expf+0x3a>
 8020c40:	2000      	movs	r0, #0
 8020c42:	f000 f8f1 	bl	8020e28 <__math_oflowf>
 8020c46:	1c04      	adds	r4, r0, #0
 8020c48:	e7f5      	b.n	8020c36 <__ieee754_expf+0x26>
 8020c4a:	2800      	cmp	r0, #0
 8020c4c:	da06      	bge.n	8020c5c <__ieee754_expf+0x4c>
 8020c4e:	4a59      	ldr	r2, [pc, #356]	@ (8020db4 <__ieee754_expf+0x1a4>)
 8020c50:	4293      	cmp	r3, r2
 8020c52:	d903      	bls.n	8020c5c <__ieee754_expf+0x4c>
 8020c54:	2000      	movs	r0, #0
 8020c56:	f000 f8e1 	bl	8020e1c <__math_uflowf>
 8020c5a:	e7f4      	b.n	8020c46 <__ieee754_expf+0x36>
 8020c5c:	4a56      	ldr	r2, [pc, #344]	@ (8020db8 <__ieee754_expf+0x1a8>)
 8020c5e:	4293      	cmp	r3, r2
 8020c60:	d96e      	bls.n	8020d40 <__ieee754_expf+0x130>
 8020c62:	4a56      	ldr	r2, [pc, #344]	@ (8020dbc <__ieee754_expf+0x1ac>)
 8020c64:	00b5      	lsls	r5, r6, #2
 8020c66:	4293      	cmp	r3, r2
 8020c68:	d84e      	bhi.n	8020d08 <__ieee754_expf+0xf8>
 8020c6a:	4b55      	ldr	r3, [pc, #340]	@ (8020dc0 <__ieee754_expf+0x1b0>)
 8020c6c:	1c20      	adds	r0, r4, #0
 8020c6e:	5959      	ldr	r1, [r3, r5]
 8020c70:	f7e0 fad4 	bl	800121c <__aeabi_fsub>
 8020c74:	4b53      	ldr	r3, [pc, #332]	@ (8020dc4 <__ieee754_expf+0x1b4>)
 8020c76:	1c07      	adds	r7, r0, #0
 8020c78:	595b      	ldr	r3, [r3, r5]
 8020c7a:	2501      	movs	r5, #1
 8020c7c:	1bad      	subs	r5, r5, r6
 8020c7e:	9300      	str	r3, [sp, #0]
 8020c80:	1bad      	subs	r5, r5, r6
 8020c82:	9900      	ldr	r1, [sp, #0]
 8020c84:	1c38      	adds	r0, r7, #0
 8020c86:	f7e0 fac9 	bl	800121c <__aeabi_fsub>
 8020c8a:	1c04      	adds	r4, r0, #0
 8020c8c:	1c21      	adds	r1, r4, #0
 8020c8e:	1c20      	adds	r0, r4, #0
 8020c90:	f7e0 f986 	bl	8000fa0 <__aeabi_fmul>
 8020c94:	494c      	ldr	r1, [pc, #304]	@ (8020dc8 <__ieee754_expf+0x1b8>)
 8020c96:	1c06      	adds	r6, r0, #0
 8020c98:	f7e0 f982 	bl	8000fa0 <__aeabi_fmul>
 8020c9c:	494b      	ldr	r1, [pc, #300]	@ (8020dcc <__ieee754_expf+0x1bc>)
 8020c9e:	f7e0 fabd 	bl	800121c <__aeabi_fsub>
 8020ca2:	1c31      	adds	r1, r6, #0
 8020ca4:	f7e0 f97c 	bl	8000fa0 <__aeabi_fmul>
 8020ca8:	4949      	ldr	r1, [pc, #292]	@ (8020dd0 <__ieee754_expf+0x1c0>)
 8020caa:	f7df fe09 	bl	80008c0 <__aeabi_fadd>
 8020cae:	1c31      	adds	r1, r6, #0
 8020cb0:	f7e0 f976 	bl	8000fa0 <__aeabi_fmul>
 8020cb4:	4947      	ldr	r1, [pc, #284]	@ (8020dd4 <__ieee754_expf+0x1c4>)
 8020cb6:	f7e0 fab1 	bl	800121c <__aeabi_fsub>
 8020cba:	1c31      	adds	r1, r6, #0
 8020cbc:	f7e0 f970 	bl	8000fa0 <__aeabi_fmul>
 8020cc0:	4945      	ldr	r1, [pc, #276]	@ (8020dd8 <__ieee754_expf+0x1c8>)
 8020cc2:	f7df fdfd 	bl	80008c0 <__aeabi_fadd>
 8020cc6:	1c31      	adds	r1, r6, #0
 8020cc8:	f7e0 f96a 	bl	8000fa0 <__aeabi_fmul>
 8020ccc:	1c01      	adds	r1, r0, #0
 8020cce:	1c20      	adds	r0, r4, #0
 8020cd0:	f7e0 faa4 	bl	800121c <__aeabi_fsub>
 8020cd4:	1c01      	adds	r1, r0, #0
 8020cd6:	1c06      	adds	r6, r0, #0
 8020cd8:	1c20      	adds	r0, r4, #0
 8020cda:	f7e0 f961 	bl	8000fa0 <__aeabi_fmul>
 8020cde:	9001      	str	r0, [sp, #4]
 8020ce0:	2d00      	cmp	r5, #0
 8020ce2:	d140      	bne.n	8020d66 <__ieee754_expf+0x156>
 8020ce4:	2180      	movs	r1, #128	@ 0x80
 8020ce6:	1c30      	adds	r0, r6, #0
 8020ce8:	05c9      	lsls	r1, r1, #23
 8020cea:	f7e0 fa97 	bl	800121c <__aeabi_fsub>
 8020cee:	1c01      	adds	r1, r0, #0
 8020cf0:	9801      	ldr	r0, [sp, #4]
 8020cf2:	f7df ff6f 	bl	8000bd4 <__aeabi_fdiv>
 8020cf6:	1c21      	adds	r1, r4, #0
 8020cf8:	f7e0 fa90 	bl	800121c <__aeabi_fsub>
 8020cfc:	1c01      	adds	r1, r0, #0
 8020cfe:	20fe      	movs	r0, #254	@ 0xfe
 8020d00:	0580      	lsls	r0, r0, #22
 8020d02:	f7e0 fa8b 	bl	800121c <__aeabi_fsub>
 8020d06:	e79e      	b.n	8020c46 <__ieee754_expf+0x36>
 8020d08:	4934      	ldr	r1, [pc, #208]	@ (8020ddc <__ieee754_expf+0x1cc>)
 8020d0a:	1c20      	adds	r0, r4, #0
 8020d0c:	f7e0 f948 	bl	8000fa0 <__aeabi_fmul>
 8020d10:	4b33      	ldr	r3, [pc, #204]	@ (8020de0 <__ieee754_expf+0x1d0>)
 8020d12:	5959      	ldr	r1, [r3, r5]
 8020d14:	f7df fdd4 	bl	80008c0 <__aeabi_fadd>
 8020d18:	f7e0 fc3a 	bl	8001590 <__aeabi_f2iz>
 8020d1c:	0005      	movs	r5, r0
 8020d1e:	f7e0 fc57 	bl	80015d0 <__aeabi_i2f>
 8020d22:	4930      	ldr	r1, [pc, #192]	@ (8020de4 <__ieee754_expf+0x1d4>)
 8020d24:	1c06      	adds	r6, r0, #0
 8020d26:	f7e0 f93b 	bl	8000fa0 <__aeabi_fmul>
 8020d2a:	1c01      	adds	r1, r0, #0
 8020d2c:	1c20      	adds	r0, r4, #0
 8020d2e:	f7e0 fa75 	bl	800121c <__aeabi_fsub>
 8020d32:	492d      	ldr	r1, [pc, #180]	@ (8020de8 <__ieee754_expf+0x1d8>)
 8020d34:	1c07      	adds	r7, r0, #0
 8020d36:	1c30      	adds	r0, r6, #0
 8020d38:	f7e0 f932 	bl	8000fa0 <__aeabi_fmul>
 8020d3c:	9000      	str	r0, [sp, #0]
 8020d3e:	e7a0      	b.n	8020c82 <__ieee754_expf+0x72>
 8020d40:	22d0      	movs	r2, #208	@ 0xd0
 8020d42:	0592      	lsls	r2, r2, #22
 8020d44:	4293      	cmp	r3, r2
 8020d46:	d20c      	bcs.n	8020d62 <__ieee754_expf+0x152>
 8020d48:	4928      	ldr	r1, [pc, #160]	@ (8020dec <__ieee754_expf+0x1dc>)
 8020d4a:	1c20      	adds	r0, r4, #0
 8020d4c:	f7df fdb8 	bl	80008c0 <__aeabi_fadd>
 8020d50:	21fe      	movs	r1, #254	@ 0xfe
 8020d52:	0589      	lsls	r1, r1, #22
 8020d54:	f7df fc00 	bl	8000558 <__aeabi_fcmpgt>
 8020d58:	1e05      	subs	r5, r0, #0
 8020d5a:	d097      	beq.n	8020c8c <__ieee754_expf+0x7c>
 8020d5c:	21fe      	movs	r1, #254	@ 0xfe
 8020d5e:	0589      	lsls	r1, r1, #22
 8020d60:	e75f      	b.n	8020c22 <__ieee754_expf+0x12>
 8020d62:	2500      	movs	r5, #0
 8020d64:	e792      	b.n	8020c8c <__ieee754_expf+0x7c>
 8020d66:	2080      	movs	r0, #128	@ 0x80
 8020d68:	1c31      	adds	r1, r6, #0
 8020d6a:	05c0      	lsls	r0, r0, #23
 8020d6c:	f7e0 fa56 	bl	800121c <__aeabi_fsub>
 8020d70:	1c01      	adds	r1, r0, #0
 8020d72:	9801      	ldr	r0, [sp, #4]
 8020d74:	f7df ff2e 	bl	8000bd4 <__aeabi_fdiv>
 8020d78:	1c01      	adds	r1, r0, #0
 8020d7a:	9800      	ldr	r0, [sp, #0]
 8020d7c:	f7e0 fa4e 	bl	800121c <__aeabi_fsub>
 8020d80:	1c39      	adds	r1, r7, #0
 8020d82:	f7e0 fa4b 	bl	800121c <__aeabi_fsub>
 8020d86:	1c01      	adds	r1, r0, #0
 8020d88:	20fe      	movs	r0, #254	@ 0xfe
 8020d8a:	0580      	lsls	r0, r0, #22
 8020d8c:	f7e0 fa46 	bl	800121c <__aeabi_fsub>
 8020d90:	002b      	movs	r3, r5
 8020d92:	337d      	adds	r3, #125	@ 0x7d
 8020d94:	db02      	blt.n	8020d9c <__ieee754_expf+0x18c>
 8020d96:	05ec      	lsls	r4, r5, #23
 8020d98:	1824      	adds	r4, r4, r0
 8020d9a:	e74c      	b.n	8020c36 <__ieee754_expf+0x26>
 8020d9c:	21d8      	movs	r1, #216	@ 0xd8
 8020d9e:	3564      	adds	r5, #100	@ 0x64
 8020da0:	05ed      	lsls	r5, r5, #23
 8020da2:	1828      	adds	r0, r5, r0
 8020da4:	0509      	lsls	r1, r1, #20
 8020da6:	f7e0 f8fb 	bl	8000fa0 <__aeabi_fmul>
 8020daa:	e74c      	b.n	8020c46 <__ieee754_expf+0x36>
 8020dac:	2400      	movs	r4, #0
 8020dae:	e742      	b.n	8020c36 <__ieee754_expf+0x26>
 8020db0:	42b17217 	.word	0x42b17217
 8020db4:	42cff1b5 	.word	0x42cff1b5
 8020db8:	3eb17218 	.word	0x3eb17218
 8020dbc:	3f851591 	.word	0x3f851591
 8020dc0:	08023060 	.word	0x08023060
 8020dc4:	08023058 	.word	0x08023058
 8020dc8:	3331bb4c 	.word	0x3331bb4c
 8020dcc:	35ddea0e 	.word	0x35ddea0e
 8020dd0:	388ab355 	.word	0x388ab355
 8020dd4:	3b360b61 	.word	0x3b360b61
 8020dd8:	3e2aaaab 	.word	0x3e2aaaab
 8020ddc:	3fb8aa3b 	.word	0x3fb8aa3b
 8020de0:	08023068 	.word	0x08023068
 8020de4:	3f317180 	.word	0x3f317180
 8020de8:	3717f7d1 	.word	0x3717f7d1
 8020dec:	7149f2ca 	.word	0x7149f2ca

08020df0 <with_errnof>:
 8020df0:	b570      	push	{r4, r5, r6, lr}
 8020df2:	000d      	movs	r5, r1
 8020df4:	1c04      	adds	r4, r0, #0
 8020df6:	f7fd f881 	bl	801defc <__errno>
 8020dfa:	6005      	str	r5, [r0, #0]
 8020dfc:	1c20      	adds	r0, r4, #0
 8020dfe:	bd70      	pop	{r4, r5, r6, pc}

08020e00 <xflowf>:
 8020e00:	b510      	push	{r4, lr}
 8020e02:	1c0b      	adds	r3, r1, #0
 8020e04:	2800      	cmp	r0, #0
 8020e06:	d002      	beq.n	8020e0e <xflowf+0xe>
 8020e08:	2380      	movs	r3, #128	@ 0x80
 8020e0a:	061b      	lsls	r3, r3, #24
 8020e0c:	18cb      	adds	r3, r1, r3
 8020e0e:	1c18      	adds	r0, r3, #0
 8020e10:	f7e0 f8c6 	bl	8000fa0 <__aeabi_fmul>
 8020e14:	2122      	movs	r1, #34	@ 0x22
 8020e16:	f7ff ffeb 	bl	8020df0 <with_errnof>
 8020e1a:	bd10      	pop	{r4, pc}

08020e1c <__math_uflowf>:
 8020e1c:	2180      	movs	r1, #128	@ 0x80
 8020e1e:	b510      	push	{r4, lr}
 8020e20:	0549      	lsls	r1, r1, #21
 8020e22:	f7ff ffed 	bl	8020e00 <xflowf>
 8020e26:	bd10      	pop	{r4, pc}

08020e28 <__math_oflowf>:
 8020e28:	21e0      	movs	r1, #224	@ 0xe0
 8020e2a:	b510      	push	{r4, lr}
 8020e2c:	05c9      	lsls	r1, r1, #23
 8020e2e:	f7ff ffe7 	bl	8020e00 <xflowf>
 8020e32:	bd10      	pop	{r4, pc}

08020e34 <_init>:
 8020e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e36:	46c0      	nop			@ (mov r8, r8)
 8020e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e3a:	bc08      	pop	{r3}
 8020e3c:	469e      	mov	lr, r3
 8020e3e:	4770      	bx	lr

08020e40 <_fini>:
 8020e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e42:	46c0      	nop			@ (mov r8, r8)
 8020e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e46:	bc08      	pop	{r3}
 8020e48:	469e      	mov	lr, r3
 8020e4a:	4770      	bx	lr
