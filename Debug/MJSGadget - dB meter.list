
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f3f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  0801f4b0  0801f4b0  000204b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021218  08021218  00023420  2**0
                  CONTENTS
  4 .ARM          00000008  08021218  08021218  00022218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021220  08021220  00023420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021220  08021220  00022220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021224  08021224  00022224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08021228  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034a0  20000420  08021648  00023420  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200038c0  08021648  000238c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023420  2**0
                  CONTENTS, READONLY
 12 .debug_info   000319bf  00000000  00000000  00023448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008fac  00000000  00000000  00054e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027d8  00000000  00000000  0005ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d56  00000000  00000000  00060590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022383  00000000  00000000  000622e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f3c5  00000000  00000000  00084669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3aa  00000000  00000000  000c3a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00162dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1e8  00000000  00000000  00162e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016d074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0016d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016f65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801f498 	.word	0x0801f498

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	0801f498 	.word	0x0801f498

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080204c8 	.word	0x080204c8
 8000e0c:	08020508 	.word	0x08020508
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08020544 	.word	0x08020544
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f009 fbaa 	bl	800cdbc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f009 fc01 	bl	800ce8c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f009 fbb4 	bl	800ce18 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f009 fb30 	bl	800cdbc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f009 fb5f 	bl	800ce34 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f009 fb43 	bl	800ce18 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037a0:	f002 fac0 	bl	8005d24 <ReadBatteryVoltage>
 80037a4:	1c02      	adds	r2, r0, #0
 80037a6:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <setCharges+0x20>)
 80037a8:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037aa:	f002 fb1d 	bl	8005de8 <ReadSolarVoltage>
 80037ae:	1c02      	adds	r2, r0, #0
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <setCharges+0x24>)
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	46c0      	nop			@ (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	2000056c 	.word	0x2000056c
 80037c0:	20000570 	.word	0x20000570

080037c4 <checkEEprom>:
bool checkEEprom(){
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <checkEEprom+0x5c>)
 80037cc:	4815      	ldr	r0, [pc, #84]	@ (8003824 <checkEEprom+0x60>)
 80037ce:	220c      	movs	r2, #12
 80037d0:	0019      	movs	r1, r3
 80037d2:	f7ff ff91 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037d6:	1dfb      	adds	r3, r7, #7
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e00e      	b.n	80037fc <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003820 <checkEEprom+0x5c>)
 80037e4:	5cd3      	ldrb	r3, [r2, r3]
 80037e6:	001a      	movs	r2, r3
 80037e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003828 <checkEEprom+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	18d2      	adds	r2, r2, r3
 80037ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <checkEEprom+0x64>)
 80037f0:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	3201      	adds	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b0b      	cmp	r3, #11
 8003802:	d9ec      	bls.n	80037de <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <checkEEprom+0x64>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	425a      	negs	r2, r3
 800380a:	4153      	adcs	r3, r2
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <checkEEprom+0x68>)
 8003810:	701a      	strb	r2, [r3, #0]
  return test;
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <checkEEprom+0x68>)
 8003814:	781b      	ldrb	r3, [r3, #0]
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b002      	add	sp, #8
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	2000099c 	.word	0x2000099c
 8003824:	0808000c 	.word	0x0808000c
 8003828:	200009a8 	.word	0x200009a8
 800382c:	200009ac 	.word	0x200009ac

08003830 <checkName>:
bool checkName(){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <checkName+0x5c>)
 8003838:	4815      	ldr	r0, [pc, #84]	@ (8003890 <checkName+0x60>)
 800383a:	221e      	movs	r2, #30
 800383c:	0019      	movs	r1, r3
 800383e:	f7ff ff5b 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e00e      	b.n	8003868 <checkName+0x38>
    configSum += nameConfig[i];
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	4a0f      	ldr	r2, [pc, #60]	@ (800388c <checkName+0x5c>)
 8003850:	5cd3      	ldrb	r3, [r2, r3]
 8003852:	001a      	movs	r2, r3
 8003854:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <checkName+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	18d2      	adds	r2, r2, r3
 800385a:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <checkName+0x64>)
 800385c:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	1dfb      	adds	r3, r7, #7
 8003864:	3201      	adds	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b0b      	cmp	r3, #11
 800386e:	d9ec      	bls.n	800384a <checkName+0x1a>
  }
  test = (configSum != 0);
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <checkName+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1e5a      	subs	r2, r3, #1
 8003876:	4193      	sbcs	r3, r2
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <checkName+0x68>)
 800387c:	701a      	strb	r2, [r3, #0]
  return test;
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <checkName+0x68>)
 8003880:	781b      	ldrb	r3, [r3, #0]
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	200009b0 	.word	0x200009b0
 8003890:	08080090 	.word	0x08080090
 8003894:	200009d0 	.word	0x200009d0
 8003898:	200009d4 	.word	0x200009d4

0800389c <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038a6:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <ESP_GetHT+0x20>)
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <ESP_GetHT+0x24>)
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	20000564 	.word	0x20000564
 80038c0:	20000568 	.word	0x20000568

080038c4 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	1dbb      	adds	r3, r7, #6
 80038d0:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <setMeasurement+0x2c>)
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <setMeasurement+0x30>)
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <setMeasurement+0x34>)
 80038e0:	1dba      	adds	r2, r7, #6
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	801a      	strh	r2, [r3, #0]
}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	20000564 	.word	0x20000564
 80038f4:	20000568 	.word	0x20000568
 80038f8:	20000574 	.word	0x20000574

080038fc <setMic>:
void setMic(float dB){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <setMic+0x18>)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000578 	.word	0x20000578

08003918 <SetConfigMode>:

void SetConfigMode(){
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 800391c:	4b02      	ldr	r3, [pc, #8]	@ (8003928 <SetConfigMode+0x10>)
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	2000054b 	.word	0x2000054b

0800392c <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003930:	f008 fa6e 	bl	800be10 <HAL_GetUIDw0>
 8003934:	0002      	movs	r2, r0
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <ESP_GetUID+0x28>)
 8003938:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800393a:	f008 fa73 	bl	800be24 <HAL_GetUIDw1>
 800393e:	0002      	movs	r2, r0
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <ESP_GetUID+0x28>)
 8003942:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003944:	f008 fa78 	bl	800be38 <HAL_GetUIDw2>
 8003948:	0002      	movs	r2, r0
 800394a:	4b02      	ldr	r3, [pc, #8]	@ (8003954 <ESP_GetUID+0x28>)
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000550 	.word	0x20000550

08003958 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <ESP_Init+0x2c>)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <ESP_Init+0x30>)
 8003968:	2202      	movs	r2, #2
 800396a:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 800396c:	f7ff ffde 	bl	800392c <ESP_GetUID>
  beurs = checkEEprom();
 8003970:	f7ff ff28 	bl	80037c4 <checkEEprom>
 8003974:	0003      	movs	r3, r0
 8003976:	001a      	movs	r2, r3
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <ESP_Init+0x34>)
 800397a:	701a      	strb	r2, [r3, #0]
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000440 	.word	0x20000440
 8003988:	20000028 	.word	0x20000028
 800398c:	2000054e 	.word	0x2000054e

08003990 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	000a      	movs	r2, r1
 800399a:	1cbb      	adds	r3, r7, #2
 800399c:	801a      	strh	r2, [r3, #0]
  printf("ESP_Send: %s\r\n", command);
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <ESP_Send+0x54>)
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f018 fc83 	bl	801c2b0 <iprintf>
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80039aa:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <ESP_Send+0x58>)
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	250f      	movs	r5, #15
 80039b0:	197c      	adds	r4, r7, r5
 80039b2:	1cbb      	adds	r3, r7, #2
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0019      	movs	r1, r3
 80039ba:	f00f feff 	bl	80137bc <HAL_UART_Transmit_DMA>
 80039be:	0003      	movs	r3, r0
 80039c0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039c2:	197b      	adds	r3, r7, r5
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <ESP_Send+0x4a>
    Debug("Error in HAL_UART_Transmit_DMA");
 80039ca:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <ESP_Send+0x5c>)
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Send+0x60>)
 80039ce:	0019      	movs	r1, r3
 80039d0:	2003      	movs	r0, #3
 80039d2:	f007 fe4d 	bl	800b670 <CreateLine>
    return false;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <ESP_Send+0x4c>
  }
  return true;
 80039da:	2301      	movs	r3, #1
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b004      	add	sp, #16
 80039e2:	bdb0      	pop	{r4, r5, r7, pc}
 80039e4:	0801f4b0 	.word	0x0801f4b0
 80039e8:	20000440 	.word	0x20000440
 80039ec:	0801f4c0 	.word	0x0801f4c0
 80039f0:	0801f4e0 	.word	0x0801f4e0

080039f4 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	000a      	movs	r2, r1
 80039fe:	1cbb      	adds	r3, r7, #2
 8003a00:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a02:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <ESP_Receive+0x5c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a08:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <ESP_Receive+0x60>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	250f      	movs	r5, #15
 8003a0e:	197c      	adds	r4, r7, r5
 8003a10:	1cbb      	adds	r3, r7, #2
 8003a12:	881a      	ldrh	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0019      	movs	r1, r3
 8003a18:	f00f ff60 	bl	80138dc <HAL_UART_Receive_DMA>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a20:	197b      	adds	r3, r7, r5
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <ESP_Receive+0x50>
    Debug("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Receive+0x60>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2284      	movs	r2, #132	@ 0x84
 8003a2e:	589b      	ldr	r3, [r3, r2]
 8003a30:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <ESP_Receive+0x64>)
 8003a32:	490a      	ldr	r1, [pc, #40]	@ (8003a5c <ESP_Receive+0x68>)
 8003a34:	2003      	movs	r0, #3
 8003a36:	f007 fe1b 	bl	800b670 <CreateLine>
    RxComplete = true;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <ESP_Receive+0x5c>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
    return false;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <ESP_Receive+0x52>
  }
  return true;
 8003a44:	2301      	movs	r3, #1
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	20000444 	.word	0x20000444
 8003a54:	20000440 	.word	0x20000440
 8003a58:	0801f4e4 	.word	0x0801f4e4
 8003a5c:	0801f4e0 	.word	0x0801f4e0

08003a60 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_UART_ErrorCallback+0x2c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d107      	bne.n	8003a82 <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2284      	movs	r2, #132	@ 0x84
 8003a76:	589b      	ldr	r3, [r3, r2]
 8003a78:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <HAL_UART_ErrorCallback+0x30>)
 8003a7a:	4906      	ldr	r1, [pc, #24]	@ (8003a94 <HAL_UART_ErrorCallback+0x34>)
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	f007 fdf7 	bl	800b670 <CreateLine>
  }
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	20000440 	.word	0x20000440
 8003a90:	0801f514 	.word	0x0801f514
 8003a94:	0801f4e0 	.word	0x0801f4e0

08003a98 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e010      	b.n	8003aca <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	001a      	movs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1898      	adds	r0, r3, r2
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	001a      	movs	r2, r3
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <uint8ArrayToString+0x44>)
 8003abe:	0019      	movs	r1, r3
 8003ac0:	f018 fc06 	bl	801c2d0 <siprintf>
  for (int i = 0; i < 12; i++)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b0b      	cmp	r3, #11
 8003ace:	ddeb      	ble.n	8003aa8 <uint8ArrayToString+0x10>
  }
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	0801f540 	.word	0x0801f540

08003ae0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b089      	sub	sp, #36	@ 0x24
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	701a      	strb	r2, [r3, #0]
  uint16_t messageLength = 0;
 8003aec:	230c      	movs	r3, #12
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	801a      	strh	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003af4:	4bb6      	ldr	r3, [pc, #728]	@ (8003dd0 <CreateMessage+0x2f0>)
 8003af6:	48b7      	ldr	r0, [pc, #732]	@ (8003dd4 <CreateMessage+0x2f4>)
 8003af8:	220c      	movs	r2, #12
 8003afa:	0019      	movs	r1, r3
 8003afc:	f7ff fdfc 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b00:	4bb5      	ldr	r3, [pc, #724]	@ (8003dd8 <CreateMessage+0x2f8>)
 8003b02:	48b6      	ldr	r0, [pc, #728]	@ (8003ddc <CreateMessage+0x2fc>)
 8003b04:	220c      	movs	r2, #12
 8003b06:	0019      	movs	r1, r3
 8003b08:	f7ff fdf6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b0c:	4bb4      	ldr	r3, [pc, #720]	@ (8003de0 <CreateMessage+0x300>)
 8003b0e:	48b5      	ldr	r0, [pc, #724]	@ (8003de4 <CreateMessage+0x304>)
 8003b10:	220c      	movs	r2, #12
 8003b12:	0019      	movs	r1, r3
 8003b14:	f7ff fdf0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b18:	4bb3      	ldr	r3, [pc, #716]	@ (8003de8 <CreateMessage+0x308>)
 8003b1a:	48b4      	ldr	r0, [pc, #720]	@ (8003dec <CreateMessage+0x30c>)
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7ff fdea 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b24:	4bb2      	ldr	r3, [pc, #712]	@ (8003df0 <CreateMessage+0x310>)
 8003b26:	48b3      	ldr	r0, [pc, #716]	@ (8003df4 <CreateMessage+0x314>)
 8003b28:	220c      	movs	r2, #12
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7ff fde4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b30:	4bb1      	ldr	r3, [pc, #708]	@ (8003df8 <CreateMessage+0x318>)
 8003b32:	48b2      	ldr	r0, [pc, #712]	@ (8003dfc <CreateMessage+0x31c>)
 8003b34:	220c      	movs	r2, #12
 8003b36:	0019      	movs	r1, r3
 8003b38:	f7ff fdde 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b3c:	f7ff fe78 	bl	8003830 <checkName>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d006      	beq.n	8003b52 <CreateMessage+0x72>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b44:	4bae      	ldr	r3, [pc, #696]	@ (8003e00 <CreateMessage+0x320>)
 8003b46:	48af      	ldr	r0, [pc, #700]	@ (8003e04 <CreateMessage+0x324>)
 8003b48:	221e      	movs	r2, #30
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	f7ff fdd4 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003b50:	e005      	b.n	8003b5e <CreateMessage+0x7e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b52:	4bab      	ldr	r3, [pc, #684]	@ (8003e00 <CreateMessage+0x320>)
 8003b54:	4aac      	ldr	r2, [pc, #688]	@ (8003e08 <CreateMessage+0x328>)
 8003b56:	6811      	ldr	r1, [r2, #0]
 8003b58:	6019      	str	r1, [r3, #0]
 8003b5a:	7912      	ldrb	r2, [r2, #4]
 8003b5c:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b5e:	f7ff fe1d 	bl	800379c <setCharges>

  memset(message, '\0', 1024);
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	00da      	lsls	r2, r3, #3
 8003b66:	4ba9      	ldr	r3, [pc, #676]	@ (8003e0c <CreateMessage+0x32c>)
 8003b68:	2100      	movs	r1, #0
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f018 fc54 	bl	801c418 <memset>
  uint16_t index = 0;
 8003b70:	260e      	movs	r6, #14
 8003b72:	19bb      	adds	r3, r7, r6
 8003b74:	2200      	movs	r2, #0
 8003b76:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b78:	19bb      	adds	r3, r7, r6
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	4ba3      	ldr	r3, [pc, #652]	@ (8003e0c <CreateMessage+0x32c>)
 8003b7e:	18d3      	adds	r3, r2, r3
 8003b80:	4aa3      	ldr	r2, [pc, #652]	@ (8003e10 <CreateMessage+0x330>)
 8003b82:	0011      	movs	r1, r2
 8003b84:	0018      	movs	r0, r3
 8003b86:	f018 fba3 	bl	801c2d0 <siprintf>
  index = strlen(message);
 8003b8a:	4ba0      	ldr	r3, [pc, #640]	@ (8003e0c <CreateMessage+0x32c>)
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7fc faed 	bl	800016c <strlen>
 8003b92:	0002      	movs	r2, r0
 8003b94:	19bb      	adds	r3, r7, r6
 8003b96:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003b98:	4a8d      	ldr	r2, [pc, #564]	@ (8003dd0 <CreateMessage+0x2f0>)
 8003b9a:	4b9e      	ldr	r3, [pc, #632]	@ (8003e14 <CreateMessage+0x334>)
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff ff7a 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003ba4:	19bb      	adds	r3, r7, r6
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	4b98      	ldr	r3, [pc, #608]	@ (8003e0c <CreateMessage+0x32c>)
 8003baa:	18d4      	adds	r4, r2, r3
 8003bac:	4b9a      	ldr	r3, [pc, #616]	@ (8003e18 <CreateMessage+0x338>)
 8003bae:	689d      	ldr	r5, [r3, #8]
 8003bb0:	4b9a      	ldr	r3, [pc, #616]	@ (8003e1c <CreateMessage+0x33c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1c18      	adds	r0, r3, #0
 8003bb6:	f7ff fc55 	bl	8003464 <__aeabi_f2d>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	000b      	movs	r3, r1
 8003bbe:	4890      	ldr	r0, [pc, #576]	@ (8003e00 <CreateMessage+0x320>)
 8003bc0:	4997      	ldr	r1, [pc, #604]	@ (8003e20 <CreateMessage+0x340>)
 8003bc2:	9202      	str	r2, [sp, #8]
 8003bc4:	9303      	str	r3, [sp, #12]
 8003bc6:	4b93      	ldr	r3, [pc, #588]	@ (8003e14 <CreateMessage+0x334>)
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	0003      	movs	r3, r0
 8003bcc:	002a      	movs	r2, r5
 8003bce:	0020      	movs	r0, r4
 8003bd0:	f018 fb7e 	bl	801c2d0 <siprintf>
  index = strlen(message);
 8003bd4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e0c <CreateMessage+0x32c>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7fc fac8 	bl	800016c <strlen>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	19bb      	adds	r3, r7, r6
 8003be0:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003be2:	4a7d      	ldr	r2, [pc, #500]	@ (8003dd8 <CreateMessage+0x2f8>)
 8003be4:	4b8b      	ldr	r3, [pc, #556]	@ (8003e14 <CreateMessage+0x334>)
 8003be6:	0011      	movs	r1, r2
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7ff ff55 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003bee:	19bb      	adds	r3, r7, r6
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	4b86      	ldr	r3, [pc, #536]	@ (8003e0c <CreateMessage+0x32c>)
 8003bf4:	18d4      	adds	r4, r2, r3
 8003bf6:	4b88      	ldr	r3, [pc, #544]	@ (8003e18 <CreateMessage+0x338>)
 8003bf8:	689d      	ldr	r5, [r3, #8]
 8003bfa:	4b8a      	ldr	r3, [pc, #552]	@ (8003e24 <CreateMessage+0x344>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	1c18      	adds	r0, r3, #0
 8003c00:	f7ff fc30 	bl	8003464 <__aeabi_f2d>
 8003c04:	0002      	movs	r2, r0
 8003c06:	000b      	movs	r3, r1
 8003c08:	487d      	ldr	r0, [pc, #500]	@ (8003e00 <CreateMessage+0x320>)
 8003c0a:	4987      	ldr	r1, [pc, #540]	@ (8003e28 <CreateMessage+0x348>)
 8003c0c:	9202      	str	r2, [sp, #8]
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	4b80      	ldr	r3, [pc, #512]	@ (8003e14 <CreateMessage+0x334>)
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	0003      	movs	r3, r0
 8003c16:	002a      	movs	r2, r5
 8003c18:	0020      	movs	r0, r4
 8003c1a:	f018 fb59 	bl	801c2d0 <siprintf>
  index = strlen(message);
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e0c <CreateMessage+0x32c>)
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7fc faa3 	bl	800016c <strlen>
 8003c26:	0002      	movs	r2, r0
 8003c28:	19bb      	adds	r3, r7, r6
 8003c2a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c2c:	4a6c      	ldr	r2, [pc, #432]	@ (8003de0 <CreateMessage+0x300>)
 8003c2e:	4b79      	ldr	r3, [pc, #484]	@ (8003e14 <CreateMessage+0x334>)
 8003c30:	0011      	movs	r1, r2
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7ff ff30 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c38:	19bb      	adds	r3, r7, r6
 8003c3a:	881a      	ldrh	r2, [r3, #0]
 8003c3c:	4b73      	ldr	r3, [pc, #460]	@ (8003e0c <CreateMessage+0x32c>)
 8003c3e:	18d4      	adds	r4, r2, r3
 8003c40:	4b75      	ldr	r3, [pc, #468]	@ (8003e18 <CreateMessage+0x338>)
 8003c42:	689d      	ldr	r5, [r3, #8]
 8003c44:	4b79      	ldr	r3, [pc, #484]	@ (8003e2c <CreateMessage+0x34c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1c18      	adds	r0, r3, #0
 8003c4a:	f7ff fc0b 	bl	8003464 <__aeabi_f2d>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	000b      	movs	r3, r1
 8003c52:	486b      	ldr	r0, [pc, #428]	@ (8003e00 <CreateMessage+0x320>)
 8003c54:	4976      	ldr	r1, [pc, #472]	@ (8003e30 <CreateMessage+0x350>)
 8003c56:	9202      	str	r2, [sp, #8]
 8003c58:	9303      	str	r3, [sp, #12]
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e14 <CreateMessage+0x334>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	0003      	movs	r3, r0
 8003c60:	002a      	movs	r2, r5
 8003c62:	0020      	movs	r0, r4
 8003c64:	f018 fb34 	bl	801c2d0 <siprintf>
  index = strlen(message);
 8003c68:	4b68      	ldr	r3, [pc, #416]	@ (8003e0c <CreateMessage+0x32c>)
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f7fc fa7e 	bl	800016c <strlen>
 8003c70:	0002      	movs	r2, r0
 8003c72:	19bb      	adds	r3, r7, r6
 8003c74:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c76:	4a5c      	ldr	r2, [pc, #368]	@ (8003de8 <CreateMessage+0x308>)
 8003c78:	4b66      	ldr	r3, [pc, #408]	@ (8003e14 <CreateMessage+0x334>)
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7ff ff0b 	bl	8003a98 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c82:	19bb      	adds	r3, r7, r6
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	4b61      	ldr	r3, [pc, #388]	@ (8003e0c <CreateMessage+0x32c>)
 8003c88:	18d0      	adds	r0, r2, r3
 8003c8a:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <CreateMessage+0x338>)
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	4b69      	ldr	r3, [pc, #420]	@ (8003e34 <CreateMessage+0x354>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	4c5b      	ldr	r4, [pc, #364]	@ (8003e00 <CreateMessage+0x320>)
 8003c94:	4968      	ldr	r1, [pc, #416]	@ (8003e38 <CreateMessage+0x358>)
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	4b5e      	ldr	r3, [pc, #376]	@ (8003e14 <CreateMessage+0x334>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0023      	movs	r3, r4
 8003c9e:	f018 fb17 	bl	801c2d0 <siprintf>
  index = strlen(message);
 8003ca2:	4b5a      	ldr	r3, [pc, #360]	@ (8003e0c <CreateMessage+0x32c>)
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fc fa61 	bl	800016c <strlen>
 8003caa:	0002      	movs	r2, r0
 8003cac:	19bb      	adds	r3, r7, r6
 8003cae:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4053      	eors	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04a      	beq.n	8003d54 <CreateMessage+0x274>
    uint8ArrayToString(Buffer, batteryConfig);
 8003cbe:	4a4c      	ldr	r2, [pc, #304]	@ (8003df0 <CreateMessage+0x310>)
 8003cc0:	4b54      	ldr	r3, [pc, #336]	@ (8003e14 <CreateMessage+0x334>)
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7ff fee7 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003cca:	19bb      	adds	r3, r7, r6
 8003ccc:	881a      	ldrh	r2, [r3, #0]
 8003cce:	4b4f      	ldr	r3, [pc, #316]	@ (8003e0c <CreateMessage+0x32c>)
 8003cd0:	18d4      	adds	r4, r2, r3
 8003cd2:	4b51      	ldr	r3, [pc, #324]	@ (8003e18 <CreateMessage+0x338>)
 8003cd4:	689d      	ldr	r5, [r3, #8]
 8003cd6:	4b59      	ldr	r3, [pc, #356]	@ (8003e3c <CreateMessage+0x35c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	1c18      	adds	r0, r3, #0
 8003cdc:	f7ff fbc2 	bl	8003464 <__aeabi_f2d>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	000b      	movs	r3, r1
 8003ce4:	4846      	ldr	r0, [pc, #280]	@ (8003e00 <CreateMessage+0x320>)
 8003ce6:	4956      	ldr	r1, [pc, #344]	@ (8003e40 <CreateMessage+0x360>)
 8003ce8:	9202      	str	r2, [sp, #8]
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	4b49      	ldr	r3, [pc, #292]	@ (8003e14 <CreateMessage+0x334>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	002a      	movs	r2, r5
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	f018 faeb 	bl	801c2d0 <siprintf>
    index = strlen(message);
 8003cfa:	4b44      	ldr	r3, [pc, #272]	@ (8003e0c <CreateMessage+0x32c>)
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fc fa35 	bl	800016c <strlen>
 8003d02:	0002      	movs	r2, r0
 8003d04:	19bb      	adds	r3, r7, r6
 8003d06:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d08:	4a3b      	ldr	r2, [pc, #236]	@ (8003df8 <CreateMessage+0x318>)
 8003d0a:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <CreateMessage+0x334>)
 8003d0c:	0011      	movs	r1, r2
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7ff fec2 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d14:	19bb      	adds	r3, r7, r6
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	4b3c      	ldr	r3, [pc, #240]	@ (8003e0c <CreateMessage+0x32c>)
 8003d1a:	18d4      	adds	r4, r2, r3
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <CreateMessage+0x338>)
 8003d1e:	689d      	ldr	r5, [r3, #8]
 8003d20:	4b48      	ldr	r3, [pc, #288]	@ (8003e44 <CreateMessage+0x364>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	1c18      	adds	r0, r3, #0
 8003d26:	f7ff fb9d 	bl	8003464 <__aeabi_f2d>
 8003d2a:	0002      	movs	r2, r0
 8003d2c:	000b      	movs	r3, r1
 8003d2e:	4834      	ldr	r0, [pc, #208]	@ (8003e00 <CreateMessage+0x320>)
 8003d30:	4945      	ldr	r1, [pc, #276]	@ (8003e48 <CreateMessage+0x368>)
 8003d32:	9202      	str	r2, [sp, #8]
 8003d34:	9303      	str	r3, [sp, #12]
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <CreateMessage+0x334>)
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	002a      	movs	r2, r5
 8003d3e:	0020      	movs	r0, r4
 8003d40:	f018 fac6 	bl	801c2d0 <siprintf>
    index = strlen(message);
 8003d44:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <CreateMessage+0x32c>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7fc fa10 	bl	800016c <strlen>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	19bb      	adds	r3, r7, r6
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	e025      	b.n	8003da0 <CreateMessage+0x2c0>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d54:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <CreateMessage+0x310>)
 8003d56:	4b2f      	ldr	r3, [pc, #188]	@ (8003e14 <CreateMessage+0x334>)
 8003d58:	0011      	movs	r1, r2
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7ff fe9c 	bl	8003a98 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d60:	260e      	movs	r6, #14
 8003d62:	19bb      	adds	r3, r7, r6
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	4b29      	ldr	r3, [pc, #164]	@ (8003e0c <CreateMessage+0x32c>)
 8003d68:	18d4      	adds	r4, r2, r3
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e18 <CreateMessage+0x338>)
 8003d6c:	689d      	ldr	r5, [r3, #8]
 8003d6e:	4b33      	ldr	r3, [pc, #204]	@ (8003e3c <CreateMessage+0x35c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7ff fb76 	bl	8003464 <__aeabi_f2d>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	000b      	movs	r3, r1
 8003d7c:	4820      	ldr	r0, [pc, #128]	@ (8003e00 <CreateMessage+0x320>)
 8003d7e:	4933      	ldr	r1, [pc, #204]	@ (8003e4c <CreateMessage+0x36c>)
 8003d80:	9202      	str	r2, [sp, #8]
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	4b23      	ldr	r3, [pc, #140]	@ (8003e14 <CreateMessage+0x334>)
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	0003      	movs	r3, r0
 8003d8a:	002a      	movs	r2, r5
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f018 fa9f 	bl	801c2d0 <siprintf>
    index = strlen(message);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <CreateMessage+0x32c>)
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fc f9e9 	bl	800016c <strlen>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	19bb      	adds	r3, r7, r6
 8003d9e:	801a      	strh	r2, [r3, #0]
  }

  index = sprintf(&message[index], "]");
 8003da0:	240e      	movs	r4, #14
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	881a      	ldrh	r2, [r3, #0]
 8003da6:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <CreateMessage+0x32c>)
 8003da8:	18d3      	adds	r3, r2, r3
 8003daa:	4a29      	ldr	r2, [pc, #164]	@ (8003e50 <CreateMessage+0x370>)
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f018 fa8e 	bl	801c2d0 <siprintf>
 8003db4:	0002      	movs	r2, r0
 8003db6:	193b      	adds	r3, r7, r4
 8003db8:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <CreateMessage+0x32c>)
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7fc f9d5 	bl	800016c <strlen>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	b29b      	uxth	r3, r3
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b005      	add	sp, #20
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	200009d8 	.word	0x200009d8
 8003dd4:	0808000c 	.word	0x0808000c
 8003dd8:	200009e4 	.word	0x200009e4
 8003ddc:	08080018 	.word	0x08080018
 8003de0:	200009f0 	.word	0x200009f0
 8003de4:	08080048 	.word	0x08080048
 8003de8:	200009fc 	.word	0x200009fc
 8003dec:	08080030 	.word	0x08080030
 8003df0:	20000a08 	.word	0x20000a08
 8003df4:	0808006c 	.word	0x0808006c
 8003df8:	20000a14 	.word	0x20000a14
 8003dfc:	08080078 	.word	0x08080078
 8003e00:	20000a20 	.word	0x20000a20
 8003e04:	08080090 	.word	0x08080090
 8003e08:	080205a0 	.word	0x080205a0
 8003e0c:	2000057c 	.word	0x2000057c
 8003e10:	0801f548 	.word	0x0801f548
 8003e14:	20000a40 	.word	0x20000a40
 8003e18:	20000550 	.word	0x20000550
 8003e1c:	20000564 	.word	0x20000564
 8003e20:	0801f54c 	.word	0x0801f54c
 8003e24:	20000568 	.word	0x20000568
 8003e28:	0801f5a0 	.word	0x0801f5a0
 8003e2c:	20000578 	.word	0x20000578
 8003e30:	0801f5f8 	.word	0x0801f5f8
 8003e34:	20000574 	.word	0x20000574
 8003e38:	0801f650 	.word	0x0801f650
 8003e3c:	2000056c 	.word	0x2000056c
 8003e40:	0801f6a4 	.word	0x0801f6a4
 8003e44:	20000570 	.word	0x20000570
 8003e48:	0801f704 	.word	0x0801f704
 8003e4c:	0801f760 	.word	0x0801f760
 8003e50:	0801f7b8 	.word	0x0801f7b8

08003e54 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e58:	2064      	movs	r0, #100	@ 0x64
 8003e5a:	f007 ffb5 	bl	800bdc8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e5e:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <StartProg+0x60>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	2101      	movs	r1, #1
 8003e64:	0018      	movs	r0, r3
 8003e66:	f009 fa04 	bl	800d272 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e6a:	2064      	movs	r0, #100	@ 0x64
 8003e6c:	f007 ffac 	bl	800bdc8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e70:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <StartProg+0x60>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	2102      	movs	r1, #2
 8003e76:	0018      	movs	r0, r3
 8003e78:	f009 f9fb 	bl	800d272 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e7c:	23fa      	movs	r3, #250	@ 0xfa
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	0018      	movs	r0, r3
 8003e82:	f007 ffa1 	bl	800bdc8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <StartProg+0x60>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f009 f9f0 	bl	800d272 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e92:	23fa      	movs	r3, #250	@ 0xfa
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	0018      	movs	r0, r3
 8003e98:	f007 ff96 	bl	800bdc8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <StartProg+0x60>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f009 f9e5 	bl	800d272 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ea8:	2028      	movs	r0, #40	@ 0x28
 8003eaa:	f007 ff8d 	bl	800bdc8 <HAL_Delay>
}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	50001c00 	.word	0x50001c00

08003eb8 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b0d7      	sub	sp, #348	@ 0x15c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	0008      	movs	r0, r1
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	4bc9      	ldr	r3, [pc, #804]	@ (80041ec <ParseBuffer+0x334>)
 8003ec6:	24ac      	movs	r4, #172	@ 0xac
 8003ec8:	0064      	lsls	r4, r4, #1
 8003eca:	191b      	adds	r3, r3, r4
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	1c02      	adds	r2, r0, #0
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	4bc7      	ldr	r3, [pc, #796]	@ (80041f0 <ParseBuffer+0x338>)
 8003ed4:	191b      	adds	r3, r3, r4
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	1c0a      	adds	r2, r1, #0
 8003eda:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	005a      	lsls	r2, r3, #1
 8003ee0:	2344      	movs	r3, #68	@ 0x44
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f018 fa96 	bl	801c418 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003eec:	2358      	movs	r3, #88	@ 0x58
 8003eee:	33ff      	adds	r3, #255	@ 0xff
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003ef6:	23aa      	movs	r3, #170	@ 0xaa
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2200      	movs	r2, #0
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	e013      	b.n	8003f2a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8003f02:	20aa      	movs	r0, #170	@ 0xaa
 8003f04:	0040      	lsls	r0, r0, #1
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	18d2      	adds	r2, r2, r3
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	7811      	ldrb	r1, [r2, #0]
 8003f14:	4ab7      	ldr	r2, [pc, #732]	@ (80041f4 <ParseBuffer+0x33c>)
 8003f16:	24ac      	movs	r4, #172	@ 0xac
 8003f18:	0064      	lsls	r4, r4, #1
 8003f1a:	1912      	adds	r2, r2, r4
 8003f1c:	19d2      	adds	r2, r2, r7
 8003f1e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	183b      	adds	r3, r7, r0
 8003f26:	3201      	adds	r2, #1
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	23aa      	movs	r3, #170	@ 0xaa
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	18fa      	adds	r2, r7, r3
 8003f30:	4bae      	ldr	r3, [pc, #696]	@ (80041ec <ParseBuffer+0x334>)
 8003f32:	24ac      	movs	r4, #172	@ 0xac
 8003f34:	0064      	lsls	r4, r4, #1
 8003f36:	191b      	adds	r3, r3, r4
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d3df      	bcc.n	8003f02 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8003f42:	4baa      	ldr	r3, [pc, #680]	@ (80041ec <ParseBuffer+0x334>)
 8003f44:	191b      	adds	r3, r3, r4
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	4aaa      	ldr	r2, [pc, #680]	@ (80041f4 <ParseBuffer+0x33c>)
 8003f4c:	1912      	adds	r2, r2, r4
 8003f4e:	19d2      	adds	r2, r2, r7
 8003f50:	2100      	movs	r1, #0
 8003f52:	54d1      	strb	r1, [r2, r3]
  printf("Receive ParseBuffer: %s", tempBuf );
 8003f54:	2644      	movs	r6, #68	@ 0x44
 8003f56:	19ba      	adds	r2, r7, r6
 8003f58:	4ba7      	ldr	r3, [pc, #668]	@ (80041f8 <ParseBuffer+0x340>)
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f018 f9a7 	bl	801c2b0 <iprintf>
  char * ParsePoint = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	22a8      	movs	r2, #168	@ 0xa8
 8003f66:	0052      	lsls	r2, r2, #1
 8003f68:	18b9      	adds	r1, r7, r2
 8003f6a:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f6c:	4ba3      	ldr	r3, [pc, #652]	@ (80041fc <ParseBuffer+0x344>)
 8003f6e:	0025      	movs	r5, r4
 8003f70:	195b      	adds	r3, r3, r5
 8003f72:	19db      	adds	r3, r3, r7
 8003f74:	4aa2      	ldr	r2, [pc, #648]	@ (8004200 <ParseBuffer+0x348>)
 8003f76:	8811      	ldrh	r1, [r2, #0]
 8003f78:	8019      	strh	r1, [r3, #0]
 8003f7a:	7892      	ldrb	r2, [r2, #2]
 8003f7c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f7e:	4ba1      	ldr	r3, [pc, #644]	@ (8004204 <ParseBuffer+0x34c>)
 8003f80:	195b      	adds	r3, r3, r5
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	4aa0      	ldr	r2, [pc, #640]	@ (8004208 <ParseBuffer+0x350>)
 8003f86:	6811      	ldr	r1, [r2, #0]
 8003f88:	6019      	str	r1, [r3, #0]
 8003f8a:	8892      	ldrh	r2, [r2, #4]
 8003f8c:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003f8e:	4b9f      	ldr	r3, [pc, #636]	@ (800420c <ParseBuffer+0x354>)
 8003f90:	195b      	adds	r3, r3, r5
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	4a9e      	ldr	r2, [pc, #632]	@ (8004210 <ParseBuffer+0x358>)
 8003f96:	6811      	ldr	r1, [r2, #0]
 8003f98:	6019      	str	r1, [r3, #0]
 8003f9a:	8892      	ldrh	r2, [r2, #4]
 8003f9c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003f9e:	4b9d      	ldr	r3, [pc, #628]	@ (8004214 <ParseBuffer+0x35c>)
 8003fa0:	195b      	adds	r3, r3, r5
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	223e      	movs	r2, #62	@ 0x3e
 8003fa6:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003fa8:	4b9b      	ldr	r3, [pc, #620]	@ (8004218 <ParseBuffer+0x360>)
 8003faa:	195b      	adds	r3, r3, r5
 8003fac:	19db      	adds	r3, r3, r7
 8003fae:	4a9b      	ldr	r2, [pc, #620]	@ (800421c <ParseBuffer+0x364>)
 8003fb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fb2:	c313      	stmia	r3!, {r0, r1, r4}
 8003fb4:	8811      	ldrh	r1, [r2, #0]
 8003fb6:	8019      	strh	r1, [r3, #0]
 8003fb8:	7892      	ldrb	r2, [r2, #2]
 8003fba:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8003fbc:	4b98      	ldr	r3, [pc, #608]	@ (8004220 <ParseBuffer+0x368>)
 8003fbe:	195b      	adds	r3, r3, r5
 8003fc0:	19db      	adds	r3, r3, r7
 8003fc2:	4a98      	ldr	r2, [pc, #608]	@ (8004224 <ParseBuffer+0x36c>)
 8003fc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fc6:	c313      	stmia	r3!, {r0, r1, r4}
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003fcc:	4b88      	ldr	r3, [pc, #544]	@ (80041f0 <ParseBuffer+0x338>)
 8003fce:	195b      	adds	r3, r3, r5
 8003fd0:	19db      	adds	r3, r3, r7
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <ParseBuffer+0x138>
    ParsePoint = strstr(tempBuf, OK);
 8003fd8:	2340      	movs	r3, #64	@ 0x40
 8003fda:	18fa      	adds	r2, r7, r3
 8003fdc:	19bb      	adds	r3, r7, r6
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f018 fa54 	bl	801c48e <strstr>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	22a8      	movs	r2, #168	@ 0xa8
 8003fea:	0052      	lsls	r2, r2, #1
 8003fec:	18ba      	adds	r2, r7, r2
 8003fee:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003ff0:	4b7f      	ldr	r3, [pc, #508]	@ (80041f0 <ParseBuffer+0x338>)
 8003ff2:	22ac      	movs	r2, #172	@ 0xac
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	19db      	adds	r3, r3, r7
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10c      	bne.n	800401a <ParseBuffer+0x162>
    ParsePoint = strstr(tempBuf, ready);
 8004000:	2330      	movs	r3, #48	@ 0x30
 8004002:	18fa      	adds	r2, r7, r3
 8004004:	2344      	movs	r3, #68	@ 0x44
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f018 fa3f 	bl	801c48e <strstr>
 8004010:	0003      	movs	r3, r0
 8004012:	22a8      	movs	r2, #168	@ 0xa8
 8004014:	0052      	lsls	r2, r2, #1
 8004016:	18ba      	adds	r2, r7, r2
 8004018:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800401a:	4b75      	ldr	r3, [pc, #468]	@ (80041f0 <ParseBuffer+0x338>)
 800401c:	22ac      	movs	r2, #172	@ 0xac
 800401e:	0052      	lsls	r2, r2, #1
 8004020:	189b      	adds	r3, r3, r2
 8004022:	19db      	adds	r3, r3, r7
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d10c      	bne.n	8004044 <ParseBuffer+0x18c>
    ParsePoint = strstr(tempBuf, start);
 800402a:	232c      	movs	r3, #44	@ 0x2c
 800402c:	18fa      	adds	r2, r7, r3
 800402e:	2344      	movs	r3, #68	@ 0x44
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	0011      	movs	r1, r2
 8004034:	0018      	movs	r0, r3
 8004036:	f018 fa2a 	bl	801c48e <strstr>
 800403a:	0003      	movs	r3, r0
 800403c:	22a8      	movs	r2, #168	@ 0xa8
 800403e:	0052      	lsls	r2, r2, #1
 8004040:	18ba      	adds	r2, r7, r2
 8004042:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004044:	4b6a      	ldr	r3, [pc, #424]	@ (80041f0 <ParseBuffer+0x338>)
 8004046:	22ac      	movs	r2, #172	@ 0xac
 8004048:	0052      	lsls	r2, r2, #1
 800404a:	189b      	adds	r3, r3, r2
 800404c:	19db      	adds	r3, r3, r7
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10c      	bne.n	800406e <ParseBuffer+0x1b6>
    ParsePoint = strstr(tempBuf, TIME);
 8004054:	230c      	movs	r3, #12
 8004056:	18fa      	adds	r2, r7, r3
 8004058:	2344      	movs	r3, #68	@ 0x44
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	0011      	movs	r1, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f018 fa15 	bl	801c48e <strstr>
 8004064:	0003      	movs	r3, r0
 8004066:	22a8      	movs	r2, #168	@ 0xa8
 8004068:	0052      	lsls	r2, r2, #1
 800406a:	18ba      	adds	r2, r7, r2
 800406c:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800406e:	2338      	movs	r3, #56	@ 0x38
 8004070:	18fa      	adds	r2, r7, r3
 8004072:	2444      	movs	r4, #68	@ 0x44
 8004074:	193b      	adds	r3, r7, r4
 8004076:	0011      	movs	r1, r2
 8004078:	0018      	movs	r0, r3
 800407a:	f018 fa08 	bl	801c48e <strstr>
 800407e:	0003      	movs	r3, r0
 8004080:	22a6      	movs	r2, #166	@ 0xa6
 8004082:	0052      	lsls	r2, r2, #1
 8004084:	18ba      	adds	r2, r7, r2
 8004086:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004088:	231c      	movs	r3, #28
 800408a:	18fa      	adds	r2, r7, r3
 800408c:	193b      	adds	r3, r7, r4
 800408e:	0011      	movs	r1, r2
 8004090:	0018      	movs	r0, r3
 8004092:	f018 f9fc 	bl	801c48e <strstr>
 8004096:	0003      	movs	r3, r0
 8004098:	22a4      	movs	r2, #164	@ 0xa4
 800409a:	0052      	lsls	r2, r2, #1
 800409c:	18ba      	adds	r2, r7, r2
 800409e:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80040a0:	4a61      	ldr	r2, [pc, #388]	@ (8004228 <ParseBuffer+0x370>)
 80040a2:	193b      	adds	r3, r7, r4
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f018 f9f1 	bl	801c48e <strstr>
 80040ac:	0003      	movs	r3, r0
 80040ae:	22a2      	movs	r2, #162	@ 0xa2
 80040b0:	0052      	lsls	r2, r2, #1
 80040b2:	18ba      	adds	r2, r7, r2
 80040b4:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80040b6:	4b4d      	ldr	r3, [pc, #308]	@ (80041ec <ParseBuffer+0x334>)
 80040b8:	21ac      	movs	r1, #172	@ 0xac
 80040ba:	0049      	lsls	r1, r1, #1
 80040bc:	185b      	adds	r3, r3, r1
 80040be:	19db      	adds	r3, r3, r7
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d800      	bhi.n	80040c8 <ParseBuffer+0x210>
 80040c6:	e089      	b.n	80041dc <ParseBuffer+0x324>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80040c8:	22a8      	movs	r2, #168	@ 0xa8
 80040ca:	0052      	lsls	r2, r2, #1
 80040cc:	18bb      	adds	r3, r7, r2
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d027      	beq.n	8004124 <ParseBuffer+0x26c>
 80040d4:	18bb      	adds	r3, r7, r2
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b4f      	cmp	r3, #79	@ 0x4f
 80040dc:	d122      	bne.n	8004124 <ParseBuffer+0x26c>
// TODO: Bert call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80040de:	2358      	movs	r3, #88	@ 0x58
 80040e0:	33ff      	adds	r3, #255	@ 0xff
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <ParseBuffer+0x374>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b12      	cmp	r3, #18
 80040ee:	d119      	bne.n	8004124 <ParseBuffer+0x26c>
        if ((len == 43) && (tempBuf[33] == '2' )) {
 80040f0:	4b3e      	ldr	r3, [pc, #248]	@ (80041ec <ParseBuffer+0x334>)
 80040f2:	185b      	adds	r3, r3, r1
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	2b2b      	cmp	r3, #43	@ 0x2b
 80040fa:	d10b      	bne.n	8004114 <ParseBuffer+0x25c>
 80040fc:	4b3d      	ldr	r3, [pc, #244]	@ (80041f4 <ParseBuffer+0x33c>)
 80040fe:	185b      	adds	r3, r3, r1
 8004100:	19db      	adds	r3, r3, r7
 8004102:	2221      	movs	r2, #33	@ 0x21
 8004104:	5c9b      	ldrb	r3, [r3, r2]
 8004106:	2b32      	cmp	r3, #50	@ 0x32
 8004108:	d104      	bne.n	8004114 <ParseBuffer+0x25c>
          ParseTime(tempBuf);
 800410a:	193b      	adds	r3, r7, r4
 800410c:	0018      	movs	r0, r3
 800410e:	f001 ff97 	bl	8006040 <ParseTime>
 8004112:	e007      	b.n	8004124 <ParseBuffer+0x26c>
        }
        else {
          Debug("Error getting time\r\n");
 8004114:	4a46      	ldr	r2, [pc, #280]	@ (8004230 <ParseBuffer+0x378>)
 8004116:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <ParseBuffer+0x37c>)
 8004118:	0019      	movs	r1, r3
 800411a:	2003      	movs	r0, #3
 800411c:	f007 faa8 	bl	800b670 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8004120:	2306      	movs	r3, #6
 8004122:	e05f      	b.n	80041e4 <ParseBuffer+0x32c>
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r'){
 8004124:	22a8      	movs	r2, #168	@ 0xa8
 8004126:	0052      	lsls	r2, r2, #1
 8004128:	18bb      	adds	r3, r7, r2
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <ParseBuffer+0x28c>
 8004130:	18bb      	adds	r3, r7, r2
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b72      	cmp	r3, #114	@ 0x72
 8004138:	d104      	bne.n	8004144 <ParseBuffer+0x28c>
      status = RECEIVE_STATUS_READY;
 800413a:	2358      	movs	r3, #88	@ 0x58
 800413c:	33ff      	adds	r3, #255	@ 0xff
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2202      	movs	r2, #2
 8004142:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>'){
 8004144:	22a8      	movs	r2, #168	@ 0xa8
 8004146:	0052      	lsls	r2, r2, #1
 8004148:	18bb      	adds	r3, r7, r2
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <ParseBuffer+0x2ac>
 8004150:	18bb      	adds	r3, r7, r2
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b3e      	cmp	r3, #62	@ 0x3e
 8004158:	d104      	bne.n	8004164 <ParseBuffer+0x2ac>
      status = RECEIVE_STATUS_START;
 800415a:	2358      	movs	r3, #88	@ 0x58
 800415c:	33ff      	adds	r3, #255	@ 0xff
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2205      	movs	r2, #5
 8004162:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+'){
 8004164:	22a8      	movs	r2, #168	@ 0xa8
 8004166:	0052      	lsls	r2, r2, #1
 8004168:	18bb      	adds	r3, r7, r2
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <ParseBuffer+0x2cc>
 8004170:	18bb      	adds	r3, r7, r2
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b2b      	cmp	r3, #43	@ 0x2b
 8004178:	d104      	bne.n	8004184 <ParseBuffer+0x2cc>
      status = RECEIVE_STATUS_TIME;
 800417a:	2358      	movs	r3, #88	@ 0x58
 800417c:	33ff      	adds	r3, #255	@ 0xff
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	220b      	movs	r2, #11
 8004182:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint2 != 0 && *ParsePoint2 == 'E'){
 8004184:	22a6      	movs	r2, #166	@ 0xa6
 8004186:	0052      	lsls	r2, r2, #1
 8004188:	18bb      	adds	r3, r7, r2
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <ParseBuffer+0x2ec>
 8004190:	18bb      	adds	r3, r7, r2
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b45      	cmp	r3, #69	@ 0x45
 8004198:	d104      	bne.n	80041a4 <ParseBuffer+0x2ec>
      status = RECEIVE_STATUS_ERROR;
 800419a:	2358      	movs	r3, #88	@ 0x58
 800419c:	33ff      	adds	r3, #255	@ 0xff
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80041a4:	22a4      	movs	r2, #164	@ 0xa4
 80041a6:	0052      	lsls	r2, r2, #1
 80041a8:	18bb      	adds	r3, r7, r2
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <ParseBuffer+0x308>
 80041b0:	18bb      	adds	r3, r7, r2
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b57      	cmp	r3, #87	@ 0x57
 80041b8:	d102      	bne.n	80041c0 <ParseBuffer+0x308>
      ConnectionMade = true;
 80041ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <ParseBuffer+0x380>)
 80041bc:	2201      	movs	r2, #1
 80041be:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80041c0:	22a2      	movs	r2, #162	@ 0xa2
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <ParseBuffer+0x324>
 80041cc:	18bb      	adds	r3, r7, r2
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b32      	cmp	r3, #50	@ 0x32
 80041d4:	d102      	bne.n	80041dc <ParseBuffer+0x324>
      beurs = true;
 80041d6:	4b19      	ldr	r3, [pc, #100]	@ (800423c <ParseBuffer+0x384>)
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80041dc:	2358      	movs	r3, #88	@ 0x58
 80041de:	33ff      	adds	r3, #255	@ 0xff
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	781b      	ldrb	r3, [r3, #0]

}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b057      	add	sp, #348	@ 0x15c
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	fffffeaa 	.word	0xfffffeaa
 80041f0:	fffffea9 	.word	0xfffffea9
 80041f4:	fffffeec 	.word	0xfffffeec
 80041f8:	0801f7bc 	.word	0x0801f7bc
 80041fc:	fffffee8 	.word	0xfffffee8
 8004200:	0801f7ec 	.word	0x0801f7ec
 8004204:	fffffee0 	.word	0xfffffee0
 8004208:	0801f7f0 	.word	0x0801f7f0
 800420c:	fffffed8 	.word	0xfffffed8
 8004210:	0801f7f8 	.word	0x0801f7f8
 8004214:	fffffed4 	.word	0xfffffed4
 8004218:	fffffec4 	.word	0xfffffec4
 800421c:	0801f800 	.word	0x0801f800
 8004220:	fffffeb4 	.word	0xfffffeb4
 8004224:	0801f810 	.word	0x0801f810
 8004228:	08020584 	.word	0x08020584
 800422c:	20000996 	.word	0x20000996
 8004230:	0801f7d4 	.word	0x0801f7d4
 8004234:	0801f4e0 	.word	0x0801f4e0
 8004238:	2000054c 	.word	0x2000054c
 800423c:	2000054e 	.word	0x2000054e

08004240 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <PollAwake+0x34>)
 8004248:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f7fb ff8d 	bl	800016c <strlen>
 8004252:	0003      	movs	r3, r0
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0011      	movs	r1, r2
 800425a:	0018      	movs	r0, r3
 800425c:	f7ff fb98 	bl	8003990 <ESP_Send>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d001      	beq.n	8004268 <PollAwake+0x28>
    return true;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <PollAwake+0x2a>
  }
  else{
    return false;
 8004268:	2300      	movs	r3, #0
  }
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b002      	add	sp, #8
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	0801f820 	.word	0x0801f820

08004278 <RFPower>:
bool RFPower(){
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <RFPower+0x34>)
 8004280:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f7fb ff71 	bl	800016c <strlen>
 800428a:	0003      	movs	r3, r0
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f7ff fb7c 	bl	8003990 <ESP_Send>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <RFPower+0x28>
    return true;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <RFPower+0x2a>
  }
  else{
    return false;
 80042a0:	2300      	movs	r3, #0
  }
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b002      	add	sp, #8
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	0801f828 	.word	0x0801f828

080042b0 <CheckRFPower>:
bool CheckRFPower(){
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <CheckRFPower+0x34>)
 80042b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0018      	movs	r0, r3
 80042be:	f7fb ff55 	bl	800016c <strlen>
 80042c2:	0003      	movs	r3, r0
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0011      	movs	r1, r2
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff fb60 	bl	8003990 <ESP_Send>
 80042d0:	1e03      	subs	r3, r0, #0
 80042d2:	d001      	beq.n	80042d8 <CheckRFPower+0x28>
    return true;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <CheckRFPower+0x2a>
  }
  else{
    return false;
 80042d8:	2300      	movs	r3, #0
  }
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	0801f838 	.word	0x0801f838

080042e8 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <ATRestore+0x34>)
 80042f0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7fb ff39 	bl	800016c <strlen>
 80042fa:	0003      	movs	r3, r0
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f7ff fb44 	bl	8003990 <ESP_Send>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d001      	beq.n	8004310 <ATRestore+0x28>
    return true;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <ATRestore+0x2a>
  }
  else{
    return false;
 8004310:	2300      	movs	r3, #0
  }
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	0801f848 	.word	0x0801f848

08004320 <CWINIT>:
bool CWINIT(){
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <CWINIT+0x34>)
 8004328:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fb ff1d 	bl	800016c <strlen>
 8004332:	0003      	movs	r3, r0
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff fb28 	bl	8003990 <ESP_Send>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <CWINIT+0x28>
    return true;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <CWINIT+0x2a>
  }
  else{
    return false;
 8004348:	2300      	movs	r3, #0
  }
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	0801f858 	.word	0x0801f858

08004358 <CWMODE1>:
bool CWMODE1(){
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800435e:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <CWMODE1+0x34>)
 8004360:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f7fb ff01 	bl	800016c <strlen>
 800436a:	0003      	movs	r3, r0
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff fb0c 	bl	8003990 <ESP_Send>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d001      	beq.n	8004380 <CWMODE1+0x28>
    return true;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004380:	2300      	movs	r3, #0
  }
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b002      	add	sp, #8
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	0801f868 	.word	0x0801f868

08004390 <CWMODE2>:
bool CWMODE2(){
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004396:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <CWMODE2+0x34>)
 8004398:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f7fb fee5 	bl	800016c <strlen>
 80043a2:	0003      	movs	r3, r0
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0011      	movs	r1, r2
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff faf0 	bl	8003990 <ESP_Send>
 80043b0:	1e03      	subs	r3, r0, #0
 80043b2:	d001      	beq.n	80043b8 <CWMODE2+0x28>
    return true;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <CWMODE2+0x2a>
  }
  else{
    return false;
 80043b8:	2300      	movs	r3, #0
  }
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b002      	add	sp, #8
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	0801f878 	.word	0x0801f878

080043c8 <CWAUTOCONN>:
bool CWAUTOCONN(){
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <CWAUTOCONN+0x34>)
 80043d0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7fb fec9 	bl	800016c <strlen>
 80043da:	0003      	movs	r3, r0
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0011      	movs	r1, r2
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7ff fad4 	bl	8003990 <ESP_Send>
 80043e8:	1e03      	subs	r3, r0, #0
 80043ea:	d001      	beq.n	80043f0 <CWAUTOCONN+0x28>
    return true;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80043f0:	2300      	movs	r3, #0
  }
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	0801f888 	.word	0x0801f888

08004400 <CWJAP>:
bool CWJAP(){
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	46c6      	mov	lr, r8
 8004404:	b500      	push	{lr}
 8004406:	b0a2      	sub	sp, #136	@ 0x88
 8004408:	af00      	add	r7, sp, #0
 800440a:	466b      	mov	r3, sp
 800440c:	4698      	mov	r8, r3
  beursTest = true;
 800440e:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <CWJAP+0xf4>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004414:	2618      	movs	r6, #24
 8004416:	19bb      	adds	r3, r7, r6
 8004418:	2264      	movs	r2, #100	@ 0x64
 800441a:	2100      	movs	r1, #0
 800441c:	0018      	movs	r0, r3
 800441e:	f017 fffb 	bl	801c418 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004422:	4b35      	ldr	r3, [pc, #212]	@ (80044f8 <CWJAP+0xf8>)
 8004424:	4a35      	ldr	r2, [pc, #212]	@ (80044fc <CWJAP+0xfc>)
 8004426:	4936      	ldr	r1, [pc, #216]	@ (8004500 <CWJAP+0x100>)
 8004428:	19b8      	adds	r0, r7, r6
 800442a:	f017 ff51 	bl	801c2d0 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800442e:	19bb      	adds	r3, r7, r6
 8004430:	0018      	movs	r0, r3
 8004432:	f7fb fe9b 	bl	800016c <strlen>
 8004436:	0002      	movs	r2, r0
 8004438:	216f      	movs	r1, #111	@ 0x6f
 800443a:	0030      	movs	r0, r6
 800443c:	180b      	adds	r3, r1, r0
 800443e:	19db      	adds	r3, r3, r7
 8004440:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004442:	180b      	adds	r3, r1, r0
 8004444:	19db      	adds	r3, r3, r7
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	1e5a      	subs	r2, r3, #1
 800444c:	2180      	movs	r1, #128	@ 0x80
 800444e:	1879      	adds	r1, r7, r1
 8004450:	600a      	str	r2, [r1, #0]
 8004452:	001a      	movs	r2, r3
 8004454:	60ba      	str	r2, [r7, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	60fa      	str	r2, [r7, #12]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	68f9      	ldr	r1, [r7, #12]
 800445e:	0002      	movs	r2, r0
 8004460:	0f52      	lsrs	r2, r2, #29
 8004462:	000e      	movs	r6, r1
 8004464:	00f6      	lsls	r6, r6, #3
 8004466:	617e      	str	r6, [r7, #20]
 8004468:	697e      	ldr	r6, [r7, #20]
 800446a:	4316      	orrs	r6, r2
 800446c:	617e      	str	r6, [r7, #20]
 800446e:	0002      	movs	r2, r0
 8004470:	00d2      	lsls	r2, r2, #3
 8004472:	613a      	str	r2, [r7, #16]
 8004474:	001a      	movs	r2, r3
 8004476:	603a      	str	r2, [r7, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	6838      	ldr	r0, [r7, #0]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	0002      	movs	r2, r0
 8004482:	0f52      	lsrs	r2, r2, #29
 8004484:	000e      	movs	r6, r1
 8004486:	00f5      	lsls	r5, r6, #3
 8004488:	4315      	orrs	r5, r2
 800448a:	0002      	movs	r2, r0
 800448c:	00d4      	lsls	r4, r2, #3
 800448e:	3307      	adds	r3, #7
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	466a      	mov	r2, sp
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	469d      	mov	sp, r3
 800449a:	466b      	mov	r3, sp
 800449c:	3300      	adds	r3, #0
 800449e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80044a0:	246f      	movs	r4, #111	@ 0x6f
 80044a2:	2518      	movs	r5, #24
 80044a4:	1963      	adds	r3, r4, r5
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	001a      	movs	r2, r3
 80044ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044b0:	2100      	movs	r1, #0
 80044b2:	0018      	movs	r0, r3
 80044b4:	f017 ffb0 	bl	801c418 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80044b8:	1963      	adds	r3, r4, r5
 80044ba:	19db      	adds	r3, r3, r7
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	1979      	adds	r1, r7, r5
 80044c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044c2:	0018      	movs	r0, r3
 80044c4:	f017 ffcf 	bl	801c466 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80044c8:	1963      	adds	r3, r4, r5
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff fa5b 	bl	8003990 <ESP_Send>
 80044da:	1e03      	subs	r3, r0, #0
 80044dc:	d001      	beq.n	80044e2 <CWJAP+0xe2>
    return true;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <CWJAP+0xe4>
  }
  else{
    return false;
 80044e2:	2300      	movs	r3, #0
 80044e4:	46c5      	mov	sp, r8
  }
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b022      	add	sp, #136	@ 0x88
 80044ec:	bc80      	pop	{r7}
 80044ee:	46b8      	mov	r8, r7
 80044f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	2000054d 	.word	0x2000054d
 80044f8:	08020590 	.word	0x08020590
 80044fc:	08020584 	.word	0x08020584
 8004500:	0801f89c 	.word	0x0801f89c

08004504 <CWMODE3>:
bool CWMODE3(){
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800450a:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <CWMODE3+0x34>)
 800450c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f7fb fe2b 	bl	800016c <strlen>
 8004516:	0003      	movs	r3, r0
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0011      	movs	r1, r2
 800451e:	0018      	movs	r0, r3
 8004520:	f7ff fa36 	bl	8003990 <ESP_Send>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <CWMODE3+0x28>
    return true;
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <CWMODE3+0x2a>
  }
  else{
    return false;
 800452c:	2300      	movs	r3, #0
  }
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b002      	add	sp, #8
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	0801f8b4 	.word	0x0801f8b4

0800453c <CWSTATE>:
bool CWSTATE(){
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004542:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <CWSTATE+0x34>)
 8004544:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7fb fe0f 	bl	800016c <strlen>
 800454e:	0003      	movs	r3, r0
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0011      	movs	r1, r2
 8004556:	0018      	movs	r0, r3
 8004558:	f7ff fa1a 	bl	8003990 <ESP_Send>
 800455c:	1e03      	subs	r3, r0, #0
 800455e:	d001      	beq.n	8004564 <CWSTATE+0x28>
    return true;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004564:	2300      	movs	r3, #0
  }
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b002      	add	sp, #8
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	0801f8c4 	.word	0x0801f8c4

08004574 <CWSAP>:
bool CWSAP(){
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <CWSAP+0x34>)
 800457c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f7fb fdf3 	bl	800016c <strlen>
 8004586:	0003      	movs	r3, r0
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0011      	movs	r1, r2
 800458e:	0018      	movs	r0, r3
 8004590:	f7ff f9fe 	bl	8003990 <ESP_Send>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d001      	beq.n	800459c <CWSAP+0x28>
    return true;
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <CWSAP+0x2a>
  }
  else{
    return false;
 800459c:	2300      	movs	r3, #0
  }
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	0801f8d4 	.word	0x0801f8d4

080045ac <CIPMUX>:
bool CIPMUX(){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <CIPMUX+0x34>)
 80045b4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fb fdd7 	bl	800016c <strlen>
 80045be:	0003      	movs	r3, r0
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0011      	movs	r1, r2
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7ff f9e2 	bl	8003990 <ESP_Send>
 80045cc:	1e03      	subs	r3, r0, #0
 80045ce:	d001      	beq.n	80045d4 <CIPMUX+0x28>
    return true;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <CIPMUX+0x2a>
  }
  else{
    return false;
 80045d4:	2300      	movs	r3, #0
  }
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	0801f8f8 	.word	0x0801f8f8

080045e4 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80045ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <WEBSERVER+0x34>)
 80045ec:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fb fdbb 	bl	800016c <strlen>
 80045f6:	0003      	movs	r3, r0
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0011      	movs	r1, r2
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff f9c6 	bl	8003990 <ESP_Send>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <WEBSERVER+0x28>
    return true;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <WEBSERVER+0x2a>
  }
  else{
    return false;
 800460c:	2300      	movs	r3, #0
  }
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	0801f908 	.word	0x0801f908

0800461c <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b0c5      	sub	sp, #276	@ 0x114
 8004620:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	005a      	lsls	r2, r3, #1
 8004626:	1d3b      	adds	r3, r7, #4
 8004628:	2100      	movs	r1, #0
 800462a:	0018      	movs	r0, r3
 800462c:	f017 fef4 	bl	801c418 <memset>
  uint16_t length = CreateMessage(beurs);
 8004630:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <HTTPCPOST+0xa0>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	1dfc      	adds	r4, r7, #7
 8004636:	34ff      	adds	r4, #255	@ 0xff
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff fa51 	bl	8003ae0 <CreateMessage>
 800463e:	0003      	movs	r3, r0
 8004640:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004642:	4b1e      	ldr	r3, [pc, #120]	@ (80046bc <HTTPCPOST+0xa0>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 800464a:	1dfb      	adds	r3, r7, #7
 800464c:	33ff      	adds	r3, #255	@ 0xff
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <HTTPCPOST+0xa4>)
 8004652:	491c      	ldr	r1, [pc, #112]	@ (80046c4 <HTTPCPOST+0xa8>)
 8004654:	1d38      	adds	r0, r7, #4
 8004656:	f017 fe3b 	bl	801c2d0 <siprintf>
 800465a:	e016      	b.n	800468a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <HTTPCPOST+0xac>)
 800465e:	481b      	ldr	r0, [pc, #108]	@ (80046cc <HTTPCPOST+0xb0>)
 8004660:	220c      	movs	r2, #12
 8004662:	0019      	movs	r1, r3
 8004664:	f7ff f848 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004668:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <HTTPCPOST+0xac>)
 800466a:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <HTTPCPOST+0xb4>)
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f7ff fa12 	bl	8003a98 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	33ff      	adds	r3, #255	@ 0xff
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	4c15      	ldr	r4, [pc, #84]	@ (80046d0 <HTTPCPOST+0xb4>)
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <HTTPCPOST+0xb8>)
 800467e:	4916      	ldr	r1, [pc, #88]	@ (80046d8 <HTTPCPOST+0xbc>)
 8004680:	1d38      	adds	r0, r7, #4
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	0023      	movs	r3, r4
 8004686:	f017 fe23 	bl	801c2d0 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	0018      	movs	r0, r3
 800468e:	f7fb fd6d 	bl	800016c <strlen>
 8004692:	0002      	movs	r2, r0
 8004694:	1d7b      	adds	r3, r7, #5
 8004696:	33ff      	adds	r3, #255	@ 0xff
 8004698:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800469a:	1d7b      	adds	r3, r7, #5
 800469c:	33ff      	adds	r3, #255	@ 0xff
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	1d3b      	adds	r3, r7, #4
 80046a2:	0011      	movs	r1, r2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7ff f973 	bl	8003990 <ESP_Send>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d001      	beq.n	80046b2 <HTTPCPOST+0x96>
    return true;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HTTPCPOST+0x98>
  }
  else{
    return false;
 80046b2:	2300      	movs	r3, #0
  }
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b043      	add	sp, #268	@ 0x10c
 80046ba:	bd90      	pop	{r4, r7, pc}
 80046bc:	2000054e 	.word	0x2000054e
 80046c0:	080205a8 	.word	0x080205a8
 80046c4:	0801f920 	.word	0x0801f920
 80046c8:	20000a5c 	.word	0x20000a5c
 80046cc:	08080000 	.word	0x08080000
 80046d0:	20000a68 	.word	0x20000a68
 80046d4:	080205e4 	.word	0x080205e4
 80046d8:	0801f958 	.word	0x0801f958

080046dc <SENDDATA>:
bool SENDDATA(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <SENDDATA+0x34>)
 80046e4:	0018      	movs	r0, r3
 80046e6:	f7fb fd41 	bl	800016c <strlen>
 80046ea:	0002      	movs	r2, r0
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <SENDDATA+0x34>)
 80046f6:	0011      	movs	r1, r2
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff f949 	bl	8003990 <ESP_Send>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d001      	beq.n	8004706 <SENDDATA+0x2a>
    return true;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <SENDDATA+0x2c>
  }
  else{
    return false;
 8004706:	2300      	movs	r3, #0
  }
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}
 8004710:	2000057c 	.word	0x2000057c

08004714 <SLEEP>:
bool SLEEP(){
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <SLEEP+0x34>)
 800471c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f7fb fd23 	bl	800016c <strlen>
 8004726:	0003      	movs	r3, r0
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff f92e 	bl	8003990 <ESP_Send>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <SLEEP+0x28>
    return true;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <SLEEP+0x2a>
  }
  else{
    return false;
 800473c:	2300      	movs	r3, #0
  }
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	0801f998 	.word	0x0801f998

0800474c <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <CIPSNTPCFG+0x3c>)
 8004754:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fd07 	bl	800016c <strlen>
 800475e:	0003      	movs	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff f912 	bl	8003990 <ESP_Send>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d006      	beq.n	800477e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004770:	23fa      	movs	r3, #250	@ 0xfa
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	0018      	movs	r0, r3
 8004776:	f007 fb27 	bl	800bdc8 <HAL_Delay>
    return true;
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800477e:	2300      	movs	r3, #0
  }
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}
 8004788:	0801f9a8 	.word	0x0801f9a8

0800478c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <CIPSNTPTIME+0x34>)
 8004794:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f7fb fce7 	bl	800016c <strlen>
 800479e:	0003      	movs	r3, r0
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0011      	movs	r1, r2
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f8f2 	bl	8003990 <ESP_Send>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d001      	beq.n	80047b4 <CIPSNTPTIME+0x28>
    return true;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 80047b4:	2300      	movs	r3, #0
  }
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	0801f9f8 	.word	0x0801f9f8

080047c4 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <CIPSNTPINTV+0x34>)
 80047cc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fb fccb 	bl	800016c <strlen>
 80047d6:	0003      	movs	r3, r0
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff f8d6 	bl	8003990 <ESP_Send>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d001      	beq.n	80047ec <CIPSNTPINTV+0x28>
    return true;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 80047ec:	2300      	movs	r3, #0
  }
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	0801fa0c 	.word	0x0801fa0c

080047fc <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	0002      	movs	r2, r0
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004808:	4b71      	ldr	r3, [pc, #452]	@ (80049d0 <DMA_ProcessBuffer+0x1d4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b29a      	uxth	r2, r3
 8004810:	200e      	movs	r0, #14
 8004812:	183b      	adds	r3, r7, r0
 8004814:	2180      	movs	r1, #128	@ 0x80
 8004816:	0049      	lsls	r1, r1, #1
 8004818:	1a8a      	subs	r2, r1, r2
 800481a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 800481c:	230d      	movs	r3, #13
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2203      	movs	r2, #3
 8004822:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004824:	183b      	adds	r3, r7, r0
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	429a      	cmp	r2, r3
 800482e:	d903      	bls.n	8004838 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004830:	183b      	adds	r3, r7, r0
 8004832:	2280      	movs	r2, #128	@ 0x80
 8004834:	0052      	lsls	r2, r2, #1
 8004836:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004838:	4b66      	ldr	r3, [pc, #408]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	001a      	movs	r2, r3
 8004840:	230e      	movs	r3, #14
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	4293      	cmp	r3, r2
 8004848:	d131      	bne.n	80048ae <DMA_ProcessBuffer+0xb2>
      if(retry >9){
 800484a:	4b63      	ldr	r3, [pc, #396]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b09      	cmp	r3, #9
 8004850:	d91b      	bls.n	800488a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004852:	4b61      	ldr	r3, [pc, #388]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004858:	4b60      	ldr	r3, [pc, #384]	@ (80049dc <DMA_ProcessBuffer+0x1e0>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <DMA_ProcessBuffer+0x74>
 8004860:	4b5f      	ldr	r3, [pc, #380]	@ (80049e0 <DMA_ProcessBuffer+0x1e4>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004868:	230d      	movs	r3, #13
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	2207      	movs	r2, #7
 800486e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004870:	4b5a      	ldr	r3, [pc, #360]	@ (80049dc <DMA_ProcessBuffer+0x1e0>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d103      	bne.n	8004880 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004878:	4b5a      	ldr	r3, [pc, #360]	@ (80049e4 <DMA_ProcessBuffer+0x1e8>)
 800487a:	220b      	movs	r2, #11
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e016      	b.n	80048ae <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004880:	230d      	movs	r3, #13
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2206      	movs	r2, #6
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e011      	b.n	80048ae <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 800488a:	4b53      	ldr	r3, [pc, #332]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4b51      	ldr	r3, [pc, #324]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 8004894:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004896:	f007 fa8d 	bl	800bdb4 <HAL_GetTick>
 800489a:	0003      	movs	r3, r0
 800489c:	22fa      	movs	r2, #250	@ 0xfa
 800489e:	0092      	lsls	r2, r2, #2
 80048a0:	189a      	adds	r2, r3, r2
 80048a2:	4b51      	ldr	r3, [pc, #324]	@ (80049e8 <DMA_ProcessBuffer+0x1ec>)
 80048a4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80048a6:	230d      	movs	r3, #13
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	2204      	movs	r2, #4
 80048ac:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80048ae:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	001a      	movs	r2, r3
 80048b6:	210e      	movs	r1, #14
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <DMA_ProcessBuffer+0xc6>
 80048c0:	e07f      	b.n	80049c2 <DMA_ProcessBuffer+0x1c6>
      retry = 0;
 80048c2:	4b45      	ldr	r3, [pc, #276]	@ (80049d8 <DMA_ProcessBuffer+0x1dc>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 80048c8:	4b48      	ldr	r3, [pc, #288]	@ (80049ec <DMA_ProcessBuffer+0x1f0>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4b41      	ldr	r3, [pc, #260]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d109      	bne.n	80048ec <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <DMA_ProcessBuffer+0x1f0>)
 80048e0:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 80048e2:	230d      	movs	r3, #13
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	220a      	movs	r2, #10
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e06a      	b.n	80049c2 <DMA_ProcessBuffer+0x1c6>
      }
      else{
        if(TempPos != pos){
 80048ec:	4b3f      	ldr	r3, [pc, #252]	@ (80049ec <DMA_ProcessBuffer+0x1f0>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	001a      	movs	r2, r3
 80048f4:	210e      	movs	r1, #14
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	4b39      	ldr	r3, [pc, #228]	@ (80049ec <DMA_ProcessBuffer+0x1f0>)
 8004906:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004908:	230d      	movs	r3, #13
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	220a      	movs	r2, #10
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e057      	b.n	80049c2 <DMA_ProcessBuffer+0x1c6>
        }
        else{
          if (pos > OldPos) {
 8004912:	4b30      	ldr	r3, [pc, #192]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	001a      	movs	r2, r3
 800491a:	210e      	movs	r1, #14
 800491c:	187b      	adds	r3, r7, r1
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	4293      	cmp	r3, r2
 8004922:	d917      	bls.n	8004954 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004924:	4b2b      	ldr	r3, [pc, #172]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	001a      	movs	r2, r3
 800492c:	4b30      	ldr	r3, [pc, #192]	@ (80049f0 <DMA_ProcessBuffer+0x1f4>)
 800492e:	18d0      	adds	r0, r2, r3
 8004930:	4b28      	ldr	r3, [pc, #160]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	001a      	movs	r2, r3
 8004938:	187b      	adds	r3, r7, r1
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	b299      	uxth	r1, r3
 8004940:	230d      	movs	r3, #13
 8004942:	18fc      	adds	r4, r7, r3
 8004944:	1dfb      	adds	r3, r7, #7
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	001a      	movs	r2, r3
 800494a:	f7ff fab5 	bl	8003eb8 <ParseBuffer>
 800494e:	0003      	movs	r3, r0
 8004950:	7023      	strb	r3, [r4, #0]
 8004952:	e026      	b.n	80049a2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004954:	4b1f      	ldr	r3, [pc, #124]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	001a      	movs	r2, r3
 800495c:	4b24      	ldr	r3, [pc, #144]	@ (80049f0 <DMA_ProcessBuffer+0x1f4>)
 800495e:	18d0      	adds	r0, r2, r3
 8004960:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	001a      	movs	r2, r3
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	b299      	uxth	r1, r3
 8004970:	250d      	movs	r5, #13
 8004972:	197c      	adds	r4, r7, r5
 8004974:	1dfb      	adds	r3, r7, #7
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	001a      	movs	r2, r3
 800497a:	f7ff fa9d 	bl	8003eb8 <ParseBuffer>
 800497e:	0003      	movs	r3, r0
 8004980:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004982:	210e      	movs	r1, #14
 8004984:	187b      	adds	r3, r7, r1
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 800498c:	197c      	adds	r4, r7, r5
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	187b      	adds	r3, r7, r1
 8004994:	8819      	ldrh	r1, [r3, #0]
 8004996:	4b16      	ldr	r3, [pc, #88]	@ (80049f0 <DMA_ProcessBuffer+0x1f4>)
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff fa8d 	bl	8003eb8 <ParseBuffer>
 800499e:	0003      	movs	r3, r0
 80049a0:	7023      	strb	r3, [r4, #0]
              }
          }
          printf("RxBuffer OldPos: %d, pos: %d\r\n", OldPos, pos);
 80049a2:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	0019      	movs	r1, r3
 80049aa:	240e      	movs	r4, #14
 80049ac:	193b      	adds	r3, r7, r4
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <DMA_ProcessBuffer+0x1f8>)
 80049b2:	0018      	movs	r0, r3
 80049b4:	f017 fc7c 	bl	801c2b0 <iprintf>
          OldPos = pos;
 80049b8:	193b      	adds	r3, r7, r4
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4b05      	ldr	r3, [pc, #20]	@ (80049d4 <DMA_ProcessBuffer+0x1d8>)
 80049c0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 80049c2:	230d      	movs	r3, #13
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	781b      	ldrb	r3, [r3, #0]
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b004      	add	sp, #16
 80049ce:	bdb0      	pop	{r4, r5, r7, pc}
 80049d0:	20002410 	.word	0x20002410
 80049d4:	20000a81 	.word	0x20000a81
 80049d8:	20000994 	.word	0x20000994
 80049dc:	20000996 	.word	0x20000996
 80049e0:	20000000 	.word	0x20000000
 80049e4:	20000028 	.word	0x20000028
 80049e8:	20000988 	.word	0x20000988
 80049ec:	20000a82 	.word	0x20000a82
 80049f0:	20000448 	.word	0x20000448
 80049f4:	0801fa24 	.word	0x0801fa24

080049f8 <clearDMABuffer>:

void clearDMABuffer(){
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 80049fc:	2380      	movs	r3, #128	@ 0x80
 80049fe:	005a      	lsls	r2, r3, #1
 8004a00:	4b03      	ldr	r3, [pc, #12]	@ (8004a10 <clearDMABuffer+0x18>)
 8004a02:	2100      	movs	r1, #0
 8004a04:	0018      	movs	r0, r3
 8004a06:	f017 fd07 	bl	801c418 <memset>
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000448 	.word	0x20000448

08004a14 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	0002      	movs	r2, r0
 8004a1c:	1dfb      	adds	r3, r7, #7
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	1dbb      	adds	r3, r7, #6
 8004a22:	1c0a      	adds	r2, r1, #0
 8004a24:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004a26:	210f      	movs	r1, #15
 8004a28:	187b      	adds	r3, r7, r1
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004a2e:	1dbb      	adds	r3, r7, #6
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004a36:	187b      	adds	r3, r7, r1
 8004a38:	1dfa      	adds	r2, r7, #7
 8004a3a:	7812      	ldrb	r2, [r2, #0]
 8004a3c:	4251      	negs	r1, r2
 8004a3e:	414a      	adcs	r2, r1
 8004a40:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004a42:	1dbb      	adds	r3, r7, #6
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d107      	bne.n	8004a5a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004a4a:	230f      	movs	r3, #15
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	1dfa      	adds	r2, r7, #7
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	3a02      	subs	r2, #2
 8004a54:	4251      	negs	r1, r2
 8004a56:	414a      	adcs	r2, r1
 8004a58:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004a5a:	1dbb      	adds	r3, r7, #6
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d107      	bne.n	8004a72 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004a62:	230f      	movs	r3, #15
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	1dfa      	adds	r2, r7, #7
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	3a05      	subs	r2, #5
 8004a6c:	4251      	negs	r1, r2
 8004a6e:	414a      	adcs	r2, r1
 8004a70:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004a72:	1dbb      	adds	r3, r7, #6
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d107      	bne.n	8004a8a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004a7a:	230f      	movs	r3, #15
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	1dfa      	adds	r2, r7, #7
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	3a0b      	subs	r2, #11
 8004a84:	4251      	negs	r1, r2
 8004a86:	414a      	adcs	r2, r1
 8004a88:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004a8a:	230f      	movs	r3, #15
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	781b      	ldrb	r3, [r3, #0]
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b004      	add	sp, #16
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004aac:	1dfb      	adds	r3, r7, #7
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b13      	cmp	r3, #19
 8004ab2:	d900      	bls.n	8004ab6 <AT_Send+0x1e>
 8004ab4:	e18a      	b.n	8004dcc <AT_Send+0x334>
 8004ab6:	009a      	lsls	r2, r3, #2
 8004ab8:	4bc8      	ldr	r3, [pc, #800]	@ (8004ddc <AT_Send+0x344>)
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004ac0:	4bc7      	ldr	r3, [pc, #796]	@ (8004de0 <AT_Send+0x348>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f006 fd7d 	bl	800b5c4 <TimestampIsReached>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d100      	bne.n	8004ad0 <AT_Send+0x38>
 8004ace:	e17c      	b.n	8004dca <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004ad0:	230f      	movs	r3, #15
 8004ad2:	18fc      	adds	r4, r7, r3
 8004ad4:	f7ff fbb4 	bl	8004240 <PollAwake>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004adc:	f007 f96a 	bl	800bdb4 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	3332      	adds	r3, #50	@ 0x32
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	4bbe      	ldr	r3, [pc, #760]	@ (8004de0 <AT_Send+0x348>)
 8004ae8:	601a      	str	r2, [r3, #0]
  }
  break;
 8004aea:	e16e      	b.n	8004dca <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004aec:	4abd      	ldr	r2, [pc, #756]	@ (8004de4 <AT_Send+0x34c>)
 8004aee:	4bbe      	ldr	r3, [pc, #760]	@ (8004de8 <AT_Send+0x350>)
 8004af0:	0019      	movs	r1, r3
 8004af2:	2003      	movs	r0, #3
 8004af4:	f006 fdbc 	bl	800b670 <CreateLine>
    ATCommandSend = RFPower();
 8004af8:	230f      	movs	r3, #15
 8004afa:	18fc      	adds	r4, r7, r3
 8004afc:	f7ff fbbc 	bl	8004278 <RFPower>
 8004b00:	0003      	movs	r3, r0
 8004b02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b04:	f007 f956 	bl	800bdb4 <HAL_GetTick>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	330a      	adds	r3, #10
 8004b0c:	001a      	movs	r2, r3
 8004b0e:	4bb4      	ldr	r3, [pc, #720]	@ (8004de0 <AT_Send+0x348>)
 8004b10:	601a      	str	r2, [r3, #0]
    break;
 8004b12:	e15b      	b.n	8004dcc <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004b14:	4ab5      	ldr	r2, [pc, #724]	@ (8004dec <AT_Send+0x354>)
 8004b16:	4bb4      	ldr	r3, [pc, #720]	@ (8004de8 <AT_Send+0x350>)
 8004b18:	0019      	movs	r1, r3
 8004b1a:	2003      	movs	r0, #3
 8004b1c:	f006 fda8 	bl	800b670 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004b20:	230f      	movs	r3, #15
 8004b22:	18fc      	adds	r4, r7, r3
 8004b24:	f7ff fbc4 	bl	80042b0 <CheckRFPower>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b2c:	f007 f942 	bl	800bdb4 <HAL_GetTick>
 8004b30:	0003      	movs	r3, r0
 8004b32:	330a      	adds	r3, #10
 8004b34:	001a      	movs	r2, r3
 8004b36:	4baa      	ldr	r3, [pc, #680]	@ (8004de0 <AT_Send+0x348>)
 8004b38:	601a      	str	r2, [r3, #0]
    break;
 8004b3a:	e147      	b.n	8004dcc <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004b3c:	4aac      	ldr	r2, [pc, #688]	@ (8004df0 <AT_Send+0x358>)
 8004b3e:	4baa      	ldr	r3, [pc, #680]	@ (8004de8 <AT_Send+0x350>)
 8004b40:	0019      	movs	r1, r3
 8004b42:	2003      	movs	r0, #3
 8004b44:	f006 fd94 	bl	800b670 <CreateLine>
    ATCommandSend = ATRestore();
 8004b48:	230f      	movs	r3, #15
 8004b4a:	18fc      	adds	r4, r7, r3
 8004b4c:	f7ff fbcc 	bl	80042e8 <ATRestore>
 8004b50:	0003      	movs	r3, r0
 8004b52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004b54:	f007 f92e 	bl	800bdb4 <HAL_GetTick>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	3332      	adds	r3, #50	@ 0x32
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	4ba0      	ldr	r3, [pc, #640]	@ (8004de0 <AT_Send+0x348>)
 8004b60:	601a      	str	r2, [r3, #0]
    break;
 8004b62:	e133      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004b64:	4aa3      	ldr	r2, [pc, #652]	@ (8004df4 <AT_Send+0x35c>)
 8004b66:	4ba0      	ldr	r3, [pc, #640]	@ (8004de8 <AT_Send+0x350>)
 8004b68:	0019      	movs	r1, r3
 8004b6a:	2003      	movs	r0, #3
 8004b6c:	f006 fd80 	bl	800b670 <CreateLine>
    ATCommandSend = CWINIT();
 8004b70:	230f      	movs	r3, #15
 8004b72:	18fc      	adds	r4, r7, r3
 8004b74:	f7ff fbd4 	bl	8004320 <CWINIT>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004b7c:	f007 f91a 	bl	800bdb4 <HAL_GetTick>
 8004b80:	0003      	movs	r3, r0
 8004b82:	33f5      	adds	r3, #245	@ 0xf5
 8004b84:	33ff      	adds	r3, #255	@ 0xff
 8004b86:	001a      	movs	r2, r3
 8004b88:	4b95      	ldr	r3, [pc, #596]	@ (8004de0 <AT_Send+0x348>)
 8004b8a:	601a      	str	r2, [r3, #0]
    break;
 8004b8c:	e11e      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004b8e:	4a9a      	ldr	r2, [pc, #616]	@ (8004df8 <AT_Send+0x360>)
 8004b90:	4b95      	ldr	r3, [pc, #596]	@ (8004de8 <AT_Send+0x350>)
 8004b92:	0019      	movs	r1, r3
 8004b94:	2003      	movs	r0, #3
 8004b96:	f006 fd6b 	bl	800b670 <CreateLine>
    ATCommandSend = CWSTATE();
 8004b9a:	230f      	movs	r3, #15
 8004b9c:	18fc      	adds	r4, r7, r3
 8004b9e:	f7ff fccd 	bl	800453c <CWSTATE>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ba6:	f007 f905 	bl	800bdb4 <HAL_GetTick>
 8004baa:	0003      	movs	r3, r0
 8004bac:	33f5      	adds	r3, #245	@ 0xf5
 8004bae:	33ff      	adds	r3, #255	@ 0xff
 8004bb0:	001a      	movs	r2, r3
 8004bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8004de0 <AT_Send+0x348>)
 8004bb4:	601a      	str	r2, [r3, #0]
    break;
 8004bb6:	e109      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004bb8:	4a90      	ldr	r2, [pc, #576]	@ (8004dfc <AT_Send+0x364>)
 8004bba:	4b8b      	ldr	r3, [pc, #556]	@ (8004de8 <AT_Send+0x350>)
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	2003      	movs	r0, #3
 8004bc0:	f006 fd56 	bl	800b670 <CreateLine>
    ATCommandSend = CWMODE1();
 8004bc4:	230f      	movs	r3, #15
 8004bc6:	18fc      	adds	r4, r7, r3
 8004bc8:	f7ff fbc6 	bl	8004358 <CWMODE1>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004bd0:	f007 f8f0 	bl	800bdb4 <HAL_GetTick>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	330a      	adds	r3, #10
 8004bd8:	001a      	movs	r2, r3
 8004bda:	4b81      	ldr	r3, [pc, #516]	@ (8004de0 <AT_Send+0x348>)
 8004bdc:	601a      	str	r2, [r3, #0]
    break;
 8004bde:	e0f5      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004be0:	4a86      	ldr	r2, [pc, #536]	@ (8004dfc <AT_Send+0x364>)
 8004be2:	4b81      	ldr	r3, [pc, #516]	@ (8004de8 <AT_Send+0x350>)
 8004be4:	0019      	movs	r1, r3
 8004be6:	2003      	movs	r0, #3
 8004be8:	f006 fd42 	bl	800b670 <CreateLine>
    ATCommandSend = CWMODE2();
 8004bec:	230f      	movs	r3, #15
 8004bee:	18fc      	adds	r4, r7, r3
 8004bf0:	f7ff fbce 	bl	8004390 <CWMODE2>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004bf8:	f007 f8dc 	bl	800bdb4 <HAL_GetTick>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	330a      	adds	r3, #10
 8004c00:	001a      	movs	r2, r3
 8004c02:	4b77      	ldr	r3, [pc, #476]	@ (8004de0 <AT_Send+0x348>)
 8004c04:	601a      	str	r2, [r3, #0]
    break;
 8004c06:	e0e1      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004c08:	4a7d      	ldr	r2, [pc, #500]	@ (8004e00 <AT_Send+0x368>)
 8004c0a:	4b77      	ldr	r3, [pc, #476]	@ (8004de8 <AT_Send+0x350>)
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	2003      	movs	r0, #3
 8004c10:	f006 fd2e 	bl	800b670 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004c14:	230f      	movs	r3, #15
 8004c16:	18fc      	adds	r4, r7, r3
 8004c18:	f7ff fbd6 	bl	80043c8 <CWAUTOCONN>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c20:	f007 f8c8 	bl	800bdb4 <HAL_GetTick>
 8004c24:	0003      	movs	r3, r0
 8004c26:	330a      	adds	r3, #10
 8004c28:	001a      	movs	r2, r3
 8004c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004de0 <AT_Send+0x348>)
 8004c2c:	601a      	str	r2, [r3, #0]
    break;
 8004c2e:	e0cd      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004c30:	4a74      	ldr	r2, [pc, #464]	@ (8004e04 <AT_Send+0x36c>)
 8004c32:	4b6d      	ldr	r3, [pc, #436]	@ (8004de8 <AT_Send+0x350>)
 8004c34:	0019      	movs	r1, r3
 8004c36:	2003      	movs	r0, #3
 8004c38:	f006 fd1a 	bl	800b670 <CreateLine>
    ATCommandSend = CWJAP();
 8004c3c:	230f      	movs	r3, #15
 8004c3e:	18fc      	adds	r4, r7, r3
 8004c40:	f7ff fbde 	bl	8004400 <CWJAP>
 8004c44:	0003      	movs	r3, r0
 8004c46:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004c48:	f007 f8b4 	bl	800bdb4 <HAL_GetTick>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	3332      	adds	r3, #50	@ 0x32
 8004c50:	001a      	movs	r2, r3
 8004c52:	4b63      	ldr	r3, [pc, #396]	@ (8004de0 <AT_Send+0x348>)
 8004c54:	601a      	str	r2, [r3, #0]
    break;
 8004c56:	e0b9      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004c58:	4a6b      	ldr	r2, [pc, #428]	@ (8004e08 <AT_Send+0x370>)
 8004c5a:	4b63      	ldr	r3, [pc, #396]	@ (8004de8 <AT_Send+0x350>)
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	2003      	movs	r0, #3
 8004c60:	f006 fd06 	bl	800b670 <CreateLine>
    ATCommandSend = CWMODE3();
 8004c64:	230f      	movs	r3, #15
 8004c66:	18fc      	adds	r4, r7, r3
 8004c68:	f7ff fc4c 	bl	8004504 <CWMODE3>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c70:	f007 f8a0 	bl	800bdb4 <HAL_GetTick>
 8004c74:	0003      	movs	r3, r0
 8004c76:	330a      	adds	r3, #10
 8004c78:	001a      	movs	r2, r3
 8004c7a:	4b59      	ldr	r3, [pc, #356]	@ (8004de0 <AT_Send+0x348>)
 8004c7c:	601a      	str	r2, [r3, #0]
    break;
 8004c7e:	e0a5      	b.n	8004dcc <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004c80:	4a62      	ldr	r2, [pc, #392]	@ (8004e0c <AT_Send+0x374>)
 8004c82:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <AT_Send+0x350>)
 8004c84:	0019      	movs	r1, r3
 8004c86:	2003      	movs	r0, #3
 8004c88:	f006 fcf2 	bl	800b670 <CreateLine>
    ATCommandSend = CWSAP();
 8004c8c:	230f      	movs	r3, #15
 8004c8e:	18fc      	adds	r4, r7, r3
 8004c90:	f7ff fc70 	bl	8004574 <CWSAP>
 8004c94:	0003      	movs	r3, r0
 8004c96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c98:	f007 f88c 	bl	800bdb4 <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	330a      	adds	r3, #10
 8004ca0:	001a      	movs	r2, r3
 8004ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8004de0 <AT_Send+0x348>)
 8004ca4:	601a      	str	r2, [r3, #0]
    break;
 8004ca6:	e091      	b.n	8004dcc <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fc      	adds	r4, r7, r3
 8004cac:	f7ff fc7e 	bl	80045ac <CIPMUX>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cb4:	f007 f87e 	bl	800bdb4 <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	330a      	adds	r3, #10
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	4b48      	ldr	r3, [pc, #288]	@ (8004de0 <AT_Send+0x348>)
 8004cc0:	601a      	str	r2, [r3, #0]
    break;
 8004cc2:	e083      	b.n	8004dcc <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004cc4:	230f      	movs	r3, #15
 8004cc6:	18fc      	adds	r4, r7, r3
 8004cc8:	f7ff fc8c 	bl	80045e4 <WEBSERVER>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cd0:	f007 f870 	bl	800bdb4 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	330a      	adds	r3, #10
 8004cd8:	001a      	movs	r2, r3
 8004cda:	4b41      	ldr	r3, [pc, #260]	@ (8004de0 <AT_Send+0x348>)
 8004cdc:	601a      	str	r2, [r3, #0]
    break;
 8004cde:	e075      	b.n	8004dcc <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004ce0:	230f      	movs	r3, #15
 8004ce2:	18fc      	adds	r4, r7, r3
 8004ce4:	f7ff fc9a 	bl	800461c <HTTPCPOST>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004cec:	f007 f862 	bl	800bdb4 <HAL_GetTick>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	33f5      	adds	r3, #245	@ 0xf5
 8004cf4:	33ff      	adds	r3, #255	@ 0xff
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <AT_Send+0x348>)
 8004cfa:	601a      	str	r2, [r3, #0]
    break;
 8004cfc:	e066      	b.n	8004dcc <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004cfe:	4a44      	ldr	r2, [pc, #272]	@ (8004e10 <AT_Send+0x378>)
 8004d00:	4b39      	ldr	r3, [pc, #228]	@ (8004de8 <AT_Send+0x350>)
 8004d02:	0019      	movs	r1, r3
 8004d04:	2003      	movs	r0, #3
 8004d06:	f006 fcb3 	bl	800b670 <CreateLine>
    ATCommandSend = SENDDATA();
 8004d0a:	230f      	movs	r3, #15
 8004d0c:	18fc      	adds	r4, r7, r3
 8004d0e:	f7ff fce5 	bl	80046dc <SENDDATA>
 8004d12:	0003      	movs	r3, r0
 8004d14:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004d16:	f007 f84d 	bl	800bdb4 <HAL_GetTick>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	33f5      	adds	r3, #245	@ 0xf5
 8004d1e:	33ff      	adds	r3, #255	@ 0xff
 8004d20:	001a      	movs	r2, r3
 8004d22:	4b2f      	ldr	r3, [pc, #188]	@ (8004de0 <AT_Send+0x348>)
 8004d24:	601a      	str	r2, [r3, #0]
    break;
 8004d26:	e051      	b.n	8004dcc <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004d28:	4a3a      	ldr	r2, [pc, #232]	@ (8004e14 <AT_Send+0x37c>)
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004de8 <AT_Send+0x350>)
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	2003      	movs	r0, #3
 8004d30:	f006 fc9e 	bl	800b670 <CreateLine>
    ATCommandSend = SLEEP();
 8004d34:	230f      	movs	r3, #15
 8004d36:	18fc      	adds	r4, r7, r3
 8004d38:	f7ff fcec 	bl	8004714 <SLEEP>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d40:	f007 f838 	bl	800bdb4 <HAL_GetTick>
 8004d44:	0003      	movs	r3, r0
 8004d46:	330a      	adds	r3, #10
 8004d48:	001a      	movs	r2, r3
 8004d4a:	4b25      	ldr	r3, [pc, #148]	@ (8004de0 <AT_Send+0x348>)
 8004d4c:	601a      	str	r2, [r3, #0]
    break;
 8004d4e:	e03d      	b.n	8004dcc <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004d50:	4a31      	ldr	r2, [pc, #196]	@ (8004e18 <AT_Send+0x380>)
 8004d52:	4b25      	ldr	r3, [pc, #148]	@ (8004de8 <AT_Send+0x350>)
 8004d54:	0019      	movs	r1, r3
 8004d56:	2003      	movs	r0, #3
 8004d58:	f006 fc8a 	bl	800b670 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004d5c:	230f      	movs	r3, #15
 8004d5e:	18fc      	adds	r4, r7, r3
 8004d60:	f7ff fcf4 	bl	800474c <CIPSNTPCFG>
 8004d64:	0003      	movs	r3, r0
 8004d66:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d68:	f007 f824 	bl	800bdb4 <HAL_GetTick>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	330a      	adds	r3, #10
 8004d70:	001a      	movs	r2, r3
 8004d72:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <AT_Send+0x348>)
 8004d74:	601a      	str	r2, [r3, #0]
    break;
 8004d76:	e029      	b.n	8004dcc <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004d78:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <AT_Send+0x384>)
 8004d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <AT_Send+0x350>)
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	2003      	movs	r0, #3
 8004d80:	f006 fc76 	bl	800b670 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004d84:	230f      	movs	r3, #15
 8004d86:	18fc      	adds	r4, r7, r3
 8004d88:	f7ff fd00 	bl	800478c <CIPSNTPTIME>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d90:	f007 f810 	bl	800bdb4 <HAL_GetTick>
 8004d94:	0003      	movs	r3, r0
 8004d96:	33f5      	adds	r3, #245	@ 0xf5
 8004d98:	33ff      	adds	r3, #255	@ 0xff
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	4b10      	ldr	r3, [pc, #64]	@ (8004de0 <AT_Send+0x348>)
 8004d9e:	601a      	str	r2, [r3, #0]
    break;
 8004da0:	e014      	b.n	8004dcc <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004da2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e20 <AT_Send+0x388>)
 8004da4:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <AT_Send+0x350>)
 8004da6:	0019      	movs	r1, r3
 8004da8:	2003      	movs	r0, #3
 8004daa:	f006 fc61 	bl	800b670 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004dae:	230f      	movs	r3, #15
 8004db0:	18fc      	adds	r4, r7, r3
 8004db2:	f7ff fd07 	bl	80047c4 <CIPSNTPINTV>
 8004db6:	0003      	movs	r3, r0
 8004db8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dba:	f006 fffb 	bl	800bdb4 <HAL_GetTick>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	330a      	adds	r3, #10
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <AT_Send+0x348>)
 8004dc6:	601a      	str	r2, [r3, #0]
    break;
 8004dc8:	e000      	b.n	8004dcc <AT_Send+0x334>
  break;
 8004dca:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004dcc:	230f      	movs	r3, #15
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	781b      	ldrb	r3, [r3, #0]
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b005      	add	sp, #20
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	0802060c 	.word	0x0802060c
 8004de0:	20000988 	.word	0x20000988
 8004de4:	0801fa44 	.word	0x0801fa44
 8004de8:	0801f4e0 	.word	0x0801f4e0
 8004dec:	0801fa58 	.word	0x0801fa58
 8004df0:	0801fa6c 	.word	0x0801fa6c
 8004df4:	0801fa7c 	.word	0x0801fa7c
 8004df8:	0801fa90 	.word	0x0801fa90
 8004dfc:	0801faa8 	.word	0x0801faa8
 8004e00:	0801fac0 	.word	0x0801fac0
 8004e04:	0801fad8 	.word	0x0801fad8
 8004e08:	0801faec 	.word	0x0801faec
 8004e0c:	0801fb08 	.word	0x0801fb08
 8004e10:	0801fb24 	.word	0x0801fb24
 8004e14:	0801fb34 	.word	0x0801fb34
 8004e18:	0801fb58 	.word	0x0801fb58
 8004e1c:	0801fb6c 	.word	0x0801fb6c
 8004e20:	0801fb84 	.word	0x0801fb84

08004e24 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004e2a:	1dfb      	adds	r3, r7, #7
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004e30:	4b7a      	ldr	r3, [pc, #488]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d900      	bls.n	8004e3a <ESP_WakeTest+0x16>
 8004e38:	e0d6      	b.n	8004fe8 <ESP_WakeTest+0x1c4>
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	4b78      	ldr	r3, [pc, #480]	@ (8005020 <ESP_WakeTest+0x1fc>)
 8004e3e:	18d3      	adds	r3, r2, r3
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004e44:	4b77      	ldr	r3, [pc, #476]	@ (8005024 <ESP_WakeTest+0x200>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4053      	eors	r3, r2
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d036      	beq.n	8004ec0 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e52:	2380      	movs	r3, #128	@ 0x80
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4874      	ldr	r0, [pc, #464]	@ (8005028 <ESP_WakeTest+0x204>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	f008 fa09 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004e60:	2032      	movs	r0, #50	@ 0x32
 8004e62:	f006 ffb1 	bl	800bdc8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004e66:	2380      	movs	r3, #128	@ 0x80
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	486f      	ldr	r0, [pc, #444]	@ (8005028 <ESP_WakeTest+0x204>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	0019      	movs	r1, r3
 8004e70:	f008 f9ff 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004e74:	200a      	movs	r0, #10
 8004e76:	f006 ffa7 	bl	800bdc8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800502c <ESP_WakeTest+0x208>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2101      	movs	r1, #1
 8004e80:	0018      	movs	r0, r3
 8004e82:	f008 f9f6 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004e86:	200a      	movs	r0, #10
 8004e88:	f006 ff9e 	bl	800bdc8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004e8c:	4b67      	ldr	r3, [pc, #412]	@ (800502c <ESP_WakeTest+0x208>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	2102      	movs	r1, #2
 8004e92:	0018      	movs	r0, r3
 8004e94:	f008 f9ed 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004e98:	200a      	movs	r0, #10
 8004e9a:	f006 ff95 	bl	800bdc8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004e9e:	4b63      	ldr	r3, [pc, #396]	@ (800502c <ESP_WakeTest+0x208>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f008 f9e4 	bl	800d272 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004eaa:	f006 ff83 	bl	800bdb4 <HAL_GetTick>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	22af      	movs	r2, #175	@ 0xaf
 8004eb2:	0092      	lsls	r2, r2, #2
 8004eb4:	189a      	adds	r2, r3, r2
 8004eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8005030 <ESP_WakeTest+0x20c>)
 8004eb8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004eba:	4b5a      	ldr	r3, [pc, #360]	@ (8005024 <ESP_WakeTest+0x200>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004ec0:	2380      	movs	r3, #128	@ 0x80
 8004ec2:	005a      	lsls	r2, r3, #1
 8004ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8005034 <ESP_WakeTest+0x210>)
 8004ec6:	0011      	movs	r1, r2
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7fe fd93 	bl	80039f4 <ESP_Receive>
 8004ece:	1e03      	subs	r3, r0, #0
 8004ed0:	d100      	bne.n	8004ed4 <ESP_WakeTest+0xb0>
 8004ed2:	e099      	b.n	8005008 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8004ed4:	4b51      	ldr	r3, [pc, #324]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004eda:	e095      	b.n	8005008 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004edc:	4b54      	ldr	r3, [pc, #336]	@ (8005030 <ESP_WakeTest+0x20c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f006 fb6f 	bl	800b5c4 <TimestampIsReached>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d100      	bne.n	8004eec <ESP_WakeTest+0xc8>
 8004eea:	e08f      	b.n	800500c <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8004eec:	4b52      	ldr	r3, [pc, #328]	@ (8005038 <ESP_WakeTest+0x214>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	1dfc      	adds	r4, r7, #7
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7ff fdd0 	bl	8004a98 <AT_Send>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004efc:	1dfb      	adds	r3, r7, #7
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d100      	bne.n	8004f06 <ESP_WakeTest+0xe2>
 8004f04:	e082      	b.n	800500c <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8004f06:	4b45      	ldr	r3, [pc, #276]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004f08:	2202      	movs	r2, #2
 8004f0a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f0c:	e07e      	b.n	800500c <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f0e:	4b48      	ldr	r3, [pc, #288]	@ (8005030 <ESP_WakeTest+0x20c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f006 fb56 	bl	800b5c4 <TimestampIsReached>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d100      	bne.n	8004f1e <ESP_WakeTest+0xfa>
 8004f1c:	e078      	b.n	8005010 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f1e:	4b47      	ldr	r3, [pc, #284]	@ (800503c <ESP_WakeTest+0x218>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7ff fc6a 	bl	80047fc <DMA_ProcessBuffer>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	4b44      	ldr	r3, [pc, #272]	@ (8005040 <ESP_WakeTest+0x21c>)
 8004f2e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004f30:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <ESP_WakeTest+0x21c>)
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	4b41      	ldr	r3, [pc, #260]	@ (800503c <ESP_WakeTest+0x218>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	1dbc      	adds	r4, r7, #6
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	f7ff fd69 	bl	8004a14 <ATCompare>
 8004f42:	0003      	movs	r3, r0
 8004f44:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004f46:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <ESP_WakeTest+0x21c>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d102      	bne.n	8004f54 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8004f4e:	4b33      	ldr	r3, [pc, #204]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004f54:	4b3a      	ldr	r3, [pc, #232]	@ (8005040 <ESP_WakeTest+0x21c>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	d104      	bne.n	8004f66 <ESP_WakeTest+0x142>
          StartProg();
 8004f5c:	f7fe ff7a 	bl	8003e54 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004f60:	4b2e      	ldr	r3, [pc, #184]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004f62:	2205      	movs	r2, #5
 8004f64:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004f66:	4b36      	ldr	r3, [pc, #216]	@ (8005040 <ESP_WakeTest+0x21c>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d109      	bne.n	8004f82 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004f6e:	f006 ff21 	bl	800bdb4 <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	3332      	adds	r3, #50	@ 0x32
 8004f76:	001a      	movs	r2, r3
 8004f78:	4b2d      	ldr	r3, [pc, #180]	@ (8005030 <ESP_WakeTest+0x20c>)
 8004f7a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004f7c:	4b27      	ldr	r3, [pc, #156]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004f82:	1dbb      	adds	r3, r7, #6
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d042      	beq.n	8005010 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8004f8a:	4b24      	ldr	r3, [pc, #144]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f90:	e03e      	b.n	8005010 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8004f92:	4b2c      	ldr	r3, [pc, #176]	@ (8005044 <ESP_WakeTest+0x220>)
 8004f94:	22fa      	movs	r2, #250	@ 0xfa
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8004f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005044 <ESP_WakeTest+0x220>)
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <ESP_WakeTest+0x224>)
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8004fa0:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <ESP_WakeTest+0x220>)
 8004fa2:	22fa      	movs	r2, #250	@ 0xfa
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004faa:	2204      	movs	r2, #4
 8004fac:	701a      	strb	r2, [r3, #0]

      break;
 8004fae:	e030      	b.n	8005012 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004fb0:	4b26      	ldr	r3, [pc, #152]	@ (800504c <ESP_WakeTest+0x228>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <ESP_WakeTest+0x200>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <ESP_WakeTest+0x208>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f008 f955 	bl	800d272 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	4816      	ldr	r0, [pc, #88]	@ (8005028 <ESP_WakeTest+0x204>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	f008 f94e 	bl	800d272 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004fd6:	4b15      	ldr	r3, [pc, #84]	@ (800502c <ESP_WakeTest+0x208>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2102      	movs	r1, #2
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f008 f948 	bl	800d272 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004fe2:	f002 fe3d 	bl	8007c60 <SetESPMeasurementDone>
      break;
 8004fe6:	e014      	b.n	8005012 <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800501c <ESP_WakeTest+0x1f8>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
      break;
 8004fee:	e010      	b.n	8005012 <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004ff0:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <ESP_WakeTest+0x220>)
 8004ff2:	22fa      	movs	r2, #250	@ 0xfa
 8004ff4:	0112      	lsls	r2, r2, #4
 8004ff6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004ff8:	4b12      	ldr	r3, [pc, #72]	@ (8005044 <ESP_WakeTest+0x220>)
 8004ffa:	22fa      	movs	r2, #250	@ 0xfa
 8004ffc:	0112      	lsls	r2, r2, #4
 8004ffe:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005000:	4b10      	ldr	r3, [pc, #64]	@ (8005044 <ESP_WakeTest+0x220>)
 8005002:	2200      	movs	r2, #0
 8005004:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8005006:	e004      	b.n	8005012 <ESP_WakeTest+0x1ee>
      break;
 8005008:	46c0      	nop			@ (mov r8, r8)
 800500a:	e002      	b.n	8005012 <ESP_WakeTest+0x1ee>
      break;
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	e000      	b.n	8005012 <ESP_WakeTest+0x1ee>
      break;
 8005010:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	46bd      	mov	sp, r7
 8005016:	b003      	add	sp, #12
 8005018:	bd90      	pop	{r4, r7, pc}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	20000998 	.word	0x20000998
 8005020:	0802065c 	.word	0x0802065c
 8005024:	20000548 	.word	0x20000548
 8005028:	50000800 	.word	0x50000800
 800502c:	50001c00 	.word	0x50001c00
 8005030:	20000988 	.word	0x20000988
 8005034:	20000448 	.word	0x20000448
 8005038:	20000996 	.word	0x20000996
 800503c:	20000995 	.word	0x20000995
 8005040:	20000029 	.word	0x20000029
 8005044:	40000400 	.word	0x40000400
 8005048:	00000bb8 	.word	0x00000bb8
 800504c:	20000000 	.word	0x20000000

08005050 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b085      	sub	sp, #20
 8005054:	af02      	add	r7, sp, #8
  bool ATSend = false;
 8005056:	1dfb      	adds	r3, r7, #7
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 800505c:	4bd9      	ldr	r3, [pc, #868]	@ (80053c4 <ESP_Upkeep+0x374>)
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	4bd9      	ldr	r3, [pc, #868]	@ (80053c8 <ESP_Upkeep+0x378>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d01b      	beq.n	80050a0 <ESP_Upkeep+0x50>
    oldEspState = EspState;
 8005068:	4bd6      	ldr	r3, [pc, #856]	@ (80053c4 <ESP_Upkeep+0x374>)
 800506a:	781a      	ldrb	r2, [r3, #0]
 800506c:	4bd6      	ldr	r3, [pc, #856]	@ (80053c8 <ESP_Upkeep+0x378>)
 800506e:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005070:	4bd5      	ldr	r3, [pc, #852]	@ (80053c8 <ESP_Upkeep+0x378>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d103      	bne.n	8005080 <ESP_Upkeep+0x30>
 8005078:	4bd4      	ldr	r3, [pc, #848]	@ (80053cc <ESP_Upkeep+0x37c>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b0e      	cmp	r3, #14
 800507e:	d00f      	beq.n	80050a0 <ESP_Upkeep+0x50>
      printf("EspState: %d ATcmd: %d Mode: %d ATExp: %d\r\n", oldEspState, ATCommand, Mode, ATExpectation);
 8005080:	4bd1      	ldr	r3, [pc, #836]	@ (80053c8 <ESP_Upkeep+0x378>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	0019      	movs	r1, r3
 8005086:	4bd1      	ldr	r3, [pc, #836]	@ (80053cc <ESP_Upkeep+0x37c>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	001a      	movs	r2, r3
 800508c:	4bd0      	ldr	r3, [pc, #832]	@ (80053d0 <ESP_Upkeep+0x380>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	001c      	movs	r4, r3
 8005092:	4bd0      	ldr	r3, [pc, #832]	@ (80053d4 <ESP_Upkeep+0x384>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	48d0      	ldr	r0, [pc, #832]	@ (80053d8 <ESP_Upkeep+0x388>)
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	0023      	movs	r3, r4
 800509c:	f017 f908 	bl	801c2b0 <iprintf>
    }
  }

  switch (EspState) {
 80050a0:	4bc8      	ldr	r3, [pc, #800]	@ (80053c4 <ESP_Upkeep+0x374>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b0f      	cmp	r3, #15
 80050a6:	d900      	bls.n	80050aa <ESP_Upkeep+0x5a>
 80050a8:	e355      	b.n	8005756 <ESP_Upkeep+0x706>
 80050aa:	009a      	lsls	r2, r3, #2
 80050ac:	4bcb      	ldr	r3, [pc, #812]	@ (80053dc <ESP_Upkeep+0x38c>)
 80050ae:	18d3      	adds	r3, r2, r3
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80050b4:	4bc3      	ldr	r3, [pc, #780]	@ (80053c4 <ESP_Upkeep+0x374>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
      break;
 80050ba:	f000 fba6 	bl	800580a <ESP_Upkeep+0x7ba>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 80050be:	4bc8      	ldr	r3, [pc, #800]	@ (80053e0 <ESP_Upkeep+0x390>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2201      	movs	r2, #1
 80050c4:	4053      	eors	r3, r2
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d036      	beq.n	800513a <ESP_Upkeep+0xea>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	48c4      	ldr	r0, [pc, #784]	@ (80053e4 <ESP_Upkeep+0x394>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	0019      	movs	r1, r3
 80050d6:	f008 f8cc 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80050da:	2001      	movs	r0, #1
 80050dc:	f006 fe74 	bl	800bdc8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80050e0:	2380      	movs	r3, #128	@ 0x80
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	48bf      	ldr	r0, [pc, #764]	@ (80053e4 <ESP_Upkeep+0x394>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	0019      	movs	r1, r3
 80050ea:	f008 f8c2 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80050ee:	2001      	movs	r0, #1
 80050f0:	f006 fe6a 	bl	800bdc8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80050f4:	4bbc      	ldr	r3, [pc, #752]	@ (80053e8 <ESP_Upkeep+0x398>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	2101      	movs	r1, #1
 80050fa:	0018      	movs	r0, r3
 80050fc:	f008 f8b9 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005100:	2001      	movs	r0, #1
 8005102:	f006 fe61 	bl	800bdc8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005106:	4bb8      	ldr	r3, [pc, #736]	@ (80053e8 <ESP_Upkeep+0x398>)
 8005108:	2201      	movs	r2, #1
 800510a:	2102      	movs	r1, #2
 800510c:	0018      	movs	r0, r3
 800510e:	f008 f8b0 	bl	800d272 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005112:	2001      	movs	r0, #1
 8005114:	f006 fe58 	bl	800bdc8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005118:	4bb3      	ldr	r3, [pc, #716]	@ (80053e8 <ESP_Upkeep+0x398>)
 800511a:	2201      	movs	r2, #1
 800511c:	2101      	movs	r1, #1
 800511e:	0018      	movs	r0, r3
 8005120:	f008 f8a7 	bl	800d272 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005124:	f006 fe46 	bl	800bdb4 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	22af      	movs	r2, #175	@ 0xaf
 800512c:	0092      	lsls	r2, r2, #2
 800512e:	189a      	adds	r2, r3, r2
 8005130:	4bae      	ldr	r3, [pc, #696]	@ (80053ec <ESP_Upkeep+0x39c>)
 8005132:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005134:	4baa      	ldr	r3, [pc, #680]	@ (80053e0 <ESP_Upkeep+0x390>)
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800513a:	2380      	movs	r3, #128	@ 0x80
 800513c:	005a      	lsls	r2, r3, #1
 800513e:	4bac      	ldr	r3, [pc, #688]	@ (80053f0 <ESP_Upkeep+0x3a0>)
 8005140:	0011      	movs	r1, r2
 8005142:	0018      	movs	r0, r3
 8005144:	f7fe fc56 	bl	80039f4 <ESP_Receive>
 8005148:	1e03      	subs	r3, r0, #0
 800514a:	d100      	bne.n	800514e <ESP_Upkeep+0xfe>
 800514c:	e30f      	b.n	800576e <ESP_Upkeep+0x71e>
        EspState = ESP_STATE_WAIT_AWAKE;
 800514e:	4b9d      	ldr	r3, [pc, #628]	@ (80053c4 <ESP_Upkeep+0x374>)
 8005150:	220f      	movs	r2, #15
 8005152:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005154:	f006 fe2e 	bl	800bdb4 <HAL_GetTick>
 8005158:	0003      	movs	r3, r0
 800515a:	22fa      	movs	r2, #250	@ 0xfa
 800515c:	00d2      	lsls	r2, r2, #3
 800515e:	189a      	adds	r2, r3, r2
 8005160:	4ba4      	ldr	r3, [pc, #656]	@ (80053f4 <ESP_Upkeep+0x3a4>)
 8005162:	601a      	str	r2, [r3, #0]
      }
      break;
 8005164:	e303      	b.n	800576e <ESP_Upkeep+0x71e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8005166:	2001      	movs	r0, #1
 8005168:	f7ff fb48 	bl	80047fc <DMA_ProcessBuffer>
 800516c:	0003      	movs	r3, r0
 800516e:	001a      	movs	r2, r3
 8005170:	4ba1      	ldr	r3, [pc, #644]	@ (80053f8 <ESP_Upkeep+0x3a8>)
 8005172:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005174:	4ba0      	ldr	r3, [pc, #640]	@ (80053f8 <ESP_Upkeep+0x3a8>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	1dbc      	adds	r4, r7, #6
 800517a:	2101      	movs	r1, #1
 800517c:	0018      	movs	r0, r3
 800517e:	f7ff fc49 	bl	8004a14 <ATCompare>
 8005182:	0003      	movs	r3, r0
 8005184:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005186:	1dbb      	adds	r3, r7, #6
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <ESP_Upkeep+0x14e>
 800518e:	4b99      	ldr	r3, [pc, #612]	@ (80053f4 <ESP_Upkeep+0x3a4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	0018      	movs	r0, r3
 8005194:	f006 fa16 	bl	800b5c4 <TimestampIsReached>
 8005198:	1e03      	subs	r3, r0, #0
 800519a:	d100      	bne.n	800519e <ESP_Upkeep+0x14e>
 800519c:	e2e9      	b.n	8005772 <ESP_Upkeep+0x722>
          EspState = ESP_STATE_MODE_SELECT;
 800519e:	4b89      	ldr	r3, [pc, #548]	@ (80053c4 <ESP_Upkeep+0x374>)
 80051a0:	220b      	movs	r2, #11
 80051a2:	701a      	strb	r2, [r3, #0]
        }
        break;
 80051a4:	e2e5      	b.n	8005772 <ESP_Upkeep+0x722>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 80051a6:	4b95      	ldr	r3, [pc, #596]	@ (80053fc <ESP_Upkeep+0x3ac>)
 80051a8:	2209      	movs	r2, #9
 80051aa:	2114      	movs	r1, #20
 80051ac:	0018      	movs	r0, r3
 80051ae:	f017 f933 	bl	801c418 <memset>
      if(!InitIsDone || WifiReset){
 80051b2:	4b93      	ldr	r3, [pc, #588]	@ (8005400 <ESP_Upkeep+0x3b0>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	4053      	eors	r3, r2
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <ESP_Upkeep+0x178>
 80051c0:	4b90      	ldr	r3, [pc, #576]	@ (8005404 <ESP_Upkeep+0x3b4>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <ESP_Upkeep+0x1ae>
        memcpy(ATCommandArray, AT_INIT, 7);
 80051c8:	4b8c      	ldr	r3, [pc, #560]	@ (80053fc <ESP_Upkeep+0x3ac>)
 80051ca:	4a8f      	ldr	r2, [pc, #572]	@ (8005408 <ESP_Upkeep+0x3b8>)
 80051cc:	6811      	ldr	r1, [r2, #0]
 80051ce:	6019      	str	r1, [r3, #0]
 80051d0:	8891      	ldrh	r1, [r2, #4]
 80051d2:	8099      	strh	r1, [r3, #4]
 80051d4:	7992      	ldrb	r2, [r2, #6]
 80051d6:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80051d8:	4b7a      	ldr	r3, [pc, #488]	@ (80053c4 <ESP_Upkeep+0x374>)
 80051da:	2204      	movs	r2, #4
 80051dc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80051de:	4b8b      	ldr	r3, [pc, #556]	@ (800540c <ESP_Upkeep+0x3bc>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80051e4:	4b7a      	ldr	r3, [pc, #488]	@ (80053d0 <ESP_Upkeep+0x380>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80051ea:	4b88      	ldr	r3, [pc, #544]	@ (800540c <ESP_Upkeep+0x3bc>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	001a      	movs	r2, r3
 80051f0:	4b82      	ldr	r3, [pc, #520]	@ (80053fc <ESP_Upkeep+0x3ac>)
 80051f2:	5c9a      	ldrb	r2, [r3, r2]
 80051f4:	4b75      	ldr	r3, [pc, #468]	@ (80053cc <ESP_Upkeep+0x37c>)
 80051f6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80051f8:	4b76      	ldr	r3, [pc, #472]	@ (80053d4 <ESP_Upkeep+0x384>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80051fe:	4b80      	ldr	r3, [pc, #512]	@ (8005400 <ESP_Upkeep+0x3b0>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01f      	beq.n	8005246 <ESP_Upkeep+0x1f6>
 8005206:	4b82      	ldr	r3, [pc, #520]	@ (8005410 <ESP_Upkeep+0x3c0>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2201      	movs	r2, #1
 800520c:	4053      	eors	r3, r2
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d018      	beq.n	8005246 <ESP_Upkeep+0x1f6>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005214:	4b79      	ldr	r3, [pc, #484]	@ (80053fc <ESP_Upkeep+0x3ac>)
 8005216:	4a7f      	ldr	r2, [pc, #508]	@ (8005414 <ESP_Upkeep+0x3c4>)
 8005218:	6811      	ldr	r1, [r2, #0]
 800521a:	6019      	str	r1, [r3, #0]
 800521c:	8892      	ldrh	r2, [r2, #4]
 800521e:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005220:	4b68      	ldr	r3, [pc, #416]	@ (80053c4 <ESP_Upkeep+0x374>)
 8005222:	2204      	movs	r2, #4
 8005224:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005226:	4b79      	ldr	r3, [pc, #484]	@ (800540c <ESP_Upkeep+0x3bc>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800522c:	4b68      	ldr	r3, [pc, #416]	@ (80053d0 <ESP_Upkeep+0x380>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005232:	4b76      	ldr	r3, [pc, #472]	@ (800540c <ESP_Upkeep+0x3bc>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	001a      	movs	r2, r3
 8005238:	4b70      	ldr	r3, [pc, #448]	@ (80053fc <ESP_Upkeep+0x3ac>)
 800523a:	5c9a      	ldrb	r2, [r3, r2]
 800523c:	4b63      	ldr	r3, [pc, #396]	@ (80053cc <ESP_Upkeep+0x37c>)
 800523e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005240:	4b64      	ldr	r3, [pc, #400]	@ (80053d4 <ESP_Upkeep+0x384>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005246:	4b6e      	ldr	r3, [pc, #440]	@ (8005400 <ESP_Upkeep+0x3b0>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d021      	beq.n	8005292 <ESP_Upkeep+0x242>
 800524e:	4b70      	ldr	r3, [pc, #448]	@ (8005410 <ESP_Upkeep+0x3c0>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01d      	beq.n	8005292 <ESP_Upkeep+0x242>
 8005256:	4b70      	ldr	r3, [pc, #448]	@ (8005418 <ESP_Upkeep+0x3c8>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2201      	movs	r2, #1
 800525c:	4053      	eors	r3, r2
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d016      	beq.n	8005292 <ESP_Upkeep+0x242>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005264:	4b6d      	ldr	r3, [pc, #436]	@ (800541c <ESP_Upkeep+0x3cc>)
 8005266:	881a      	ldrh	r2, [r3, #0]
 8005268:	4b64      	ldr	r3, [pc, #400]	@ (80053fc <ESP_Upkeep+0x3ac>)
 800526a:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800526c:	4b55      	ldr	r3, [pc, #340]	@ (80053c4 <ESP_Upkeep+0x374>)
 800526e:	2204      	movs	r2, #4
 8005270:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005272:	4b66      	ldr	r3, [pc, #408]	@ (800540c <ESP_Upkeep+0x3bc>)
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005278:	4b55      	ldr	r3, [pc, #340]	@ (80053d0 <ESP_Upkeep+0x380>)
 800527a:	2204      	movs	r2, #4
 800527c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800527e:	4b63      	ldr	r3, [pc, #396]	@ (800540c <ESP_Upkeep+0x3bc>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	001a      	movs	r2, r3
 8005284:	4b5d      	ldr	r3, [pc, #372]	@ (80053fc <ESP_Upkeep+0x3ac>)
 8005286:	5c9a      	ldrb	r2, [r3, r2]
 8005288:	4b50      	ldr	r3, [pc, #320]	@ (80053cc <ESP_Upkeep+0x37c>)
 800528a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800528c:	4b51      	ldr	r3, [pc, #324]	@ (80053d4 <ESP_Upkeep+0x384>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005292:	4b5b      	ldr	r3, [pc, #364]	@ (8005400 <ESP_Upkeep+0x3b0>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d035      	beq.n	8005306 <ESP_Upkeep+0x2b6>
 800529a:	4b5d      	ldr	r3, [pc, #372]	@ (8005410 <ESP_Upkeep+0x3c0>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d031      	beq.n	8005306 <ESP_Upkeep+0x2b6>
 80052a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005418 <ESP_Upkeep+0x3c8>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d02d      	beq.n	8005306 <ESP_Upkeep+0x2b6>
 80052aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005420 <ESP_Upkeep+0x3d0>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	4053      	eors	r3, r2
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d026      	beq.n	8005306 <ESP_Upkeep+0x2b6>
        memcpy(ATCommandArray, AT_SEND, 3);
 80052b8:	4b50      	ldr	r3, [pc, #320]	@ (80053fc <ESP_Upkeep+0x3ac>)
 80052ba:	4a5a      	ldr	r2, [pc, #360]	@ (8005424 <ESP_Upkeep+0x3d4>)
 80052bc:	8811      	ldrh	r1, [r2, #0]
 80052be:	8019      	strh	r1, [r3, #0]
 80052c0:	7892      	ldrb	r2, [r2, #2]
 80052c2:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80052c4:	4b3f      	ldr	r3, [pc, #252]	@ (80053c4 <ESP_Upkeep+0x374>)
 80052c6:	2204      	movs	r2, #4
 80052c8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052ca:	4b50      	ldr	r3, [pc, #320]	@ (800540c <ESP_Upkeep+0x3bc>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80052d0:	4b3f      	ldr	r3, [pc, #252]	@ (80053d0 <ESP_Upkeep+0x380>)
 80052d2:	2202      	movs	r2, #2
 80052d4:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80052d6:	f006 fd6d 	bl	800bdb4 <HAL_GetTick>
 80052da:	0002      	movs	r2, r0
 80052dc:	4b52      	ldr	r3, [pc, #328]	@ (8005428 <ESP_Upkeep+0x3d8>)
 80052de:	601a      	str	r2, [r3, #0]
        printf("start van HAL_GetTick(): %lu\r\n", start);
 80052e0:	4b51      	ldr	r3, [pc, #324]	@ (8005428 <ESP_Upkeep+0x3d8>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b51      	ldr	r3, [pc, #324]	@ (800542c <ESP_Upkeep+0x3dc>)
 80052e6:	0011      	movs	r1, r2
 80052e8:	0018      	movs	r0, r3
 80052ea:	f016 ffe1 	bl	801c2b0 <iprintf>
        SetESPIndicator();
 80052ee:	f005 fb2f 	bl	800a950 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80052f2:	4b46      	ldr	r3, [pc, #280]	@ (800540c <ESP_Upkeep+0x3bc>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	001a      	movs	r2, r3
 80052f8:	4b40      	ldr	r3, [pc, #256]	@ (80053fc <ESP_Upkeep+0x3ac>)
 80052fa:	5c9a      	ldrb	r2, [r3, r2]
 80052fc:	4b33      	ldr	r3, [pc, #204]	@ (80053cc <ESP_Upkeep+0x37c>)
 80052fe:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005300:	4b34      	ldr	r3, [pc, #208]	@ (80053d4 <ESP_Upkeep+0x384>)
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005306:	4b4a      	ldr	r3, [pc, #296]	@ (8005430 <ESP_Upkeep+0x3e0>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01a      	beq.n	8005344 <ESP_Upkeep+0x2f4>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800530e:	4b3b      	ldr	r3, [pc, #236]	@ (80053fc <ESP_Upkeep+0x3ac>)
 8005310:	4a48      	ldr	r2, [pc, #288]	@ (8005434 <ESP_Upkeep+0x3e4>)
 8005312:	6811      	ldr	r1, [r2, #0]
 8005314:	6019      	str	r1, [r3, #0]
 8005316:	7912      	ldrb	r2, [r2, #4]
 8005318:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800531a:	4b2a      	ldr	r3, [pc, #168]	@ (80053c4 <ESP_Upkeep+0x374>)
 800531c:	2204      	movs	r2, #4
 800531e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005320:	4b3a      	ldr	r3, [pc, #232]	@ (800540c <ESP_Upkeep+0x3bc>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005326:	4b2a      	ldr	r3, [pc, #168]	@ (80053d0 <ESP_Upkeep+0x380>)
 8005328:	2203      	movs	r2, #3
 800532a:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800532c:	f005 fb10 	bl	800a950 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005330:	4b36      	ldr	r3, [pc, #216]	@ (800540c <ESP_Upkeep+0x3bc>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	001a      	movs	r2, r3
 8005336:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <ESP_Upkeep+0x3ac>)
 8005338:	5c9a      	ldrb	r2, [r3, r2]
 800533a:	4b24      	ldr	r3, [pc, #144]	@ (80053cc <ESP_Upkeep+0x37c>)
 800533c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800533e:	4b25      	ldr	r3, [pc, #148]	@ (80053d4 <ESP_Upkeep+0x384>)
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005344:	4b2e      	ldr	r3, [pc, #184]	@ (8005400 <ESP_Upkeep+0x3b0>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d100      	bne.n	800534e <ESP_Upkeep+0x2fe>
 800534c:	e213      	b.n	8005776 <ESP_Upkeep+0x726>
 800534e:	4b30      	ldr	r3, [pc, #192]	@ (8005410 <ESP_Upkeep+0x3c0>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d100      	bne.n	8005358 <ESP_Upkeep+0x308>
 8005356:	e20e      	b.n	8005776 <ESP_Upkeep+0x726>
 8005358:	4b2f      	ldr	r3, [pc, #188]	@ (8005418 <ESP_Upkeep+0x3c8>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d100      	bne.n	8005362 <ESP_Upkeep+0x312>
 8005360:	e209      	b.n	8005776 <ESP_Upkeep+0x726>
 8005362:	4b2f      	ldr	r3, [pc, #188]	@ (8005420 <ESP_Upkeep+0x3d0>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d100      	bne.n	800536c <ESP_Upkeep+0x31c>
 800536a:	e204      	b.n	8005776 <ESP_Upkeep+0x726>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800536c:	4b32      	ldr	r3, [pc, #200]	@ (8005438 <ESP_Upkeep+0x3e8>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b22      	ldr	r3, [pc, #136]	@ (80053fc <ESP_Upkeep+0x3ac>)
 8005372:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005374:	4b13      	ldr	r3, [pc, #76]	@ (80053c4 <ESP_Upkeep+0x374>)
 8005376:	2204      	movs	r2, #4
 8005378:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800537a:	4b24      	ldr	r3, [pc, #144]	@ (800540c <ESP_Upkeep+0x3bc>)
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005380:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <ESP_Upkeep+0x380>)
 8005382:	2205      	movs	r2, #5
 8005384:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005386:	f005 fae3 	bl	800a950 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800538a:	4b20      	ldr	r3, [pc, #128]	@ (800540c <ESP_Upkeep+0x3bc>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	001a      	movs	r2, r3
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <ESP_Upkeep+0x3ac>)
 8005392:	5c9a      	ldrb	r2, [r3, r2]
 8005394:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <ESP_Upkeep+0x37c>)
 8005396:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005398:	4b0e      	ldr	r3, [pc, #56]	@ (80053d4 <ESP_Upkeep+0x384>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
      }
    break;
 800539e:	e1ea      	b.n	8005776 <ESP_Upkeep+0x726>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 80053a0:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <ESP_Upkeep+0x37c>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	1dfc      	adds	r4, r7, #7
 80053a6:	0018      	movs	r0, r3
 80053a8:	f7ff fb76 	bl	8004a98 <AT_Send>
 80053ac:	0003      	movs	r3, r0
 80053ae:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80053b0:	1dfb      	adds	r3, r7, #7
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d100      	bne.n	80053ba <ESP_Upkeep+0x36a>
 80053b8:	e1df      	b.n	800577a <ESP_Upkeep+0x72a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80053ba:	4b02      	ldr	r3, [pc, #8]	@ (80053c4 <ESP_Upkeep+0x374>)
 80053bc:	2203      	movs	r2, #3
 80053be:	701a      	strb	r2, [r3, #0]
        }
    break;
 80053c0:	e1db      	b.n	800577a <ESP_Upkeep+0x72a>
 80053c2:	46c0      	nop			@ (mov r8, r8)
 80053c4:	20000028 	.word	0x20000028
 80053c8:	20000002 	.word	0x20000002
 80053cc:	20000996 	.word	0x20000996
 80053d0:	20000997 	.word	0x20000997
 80053d4:	20000995 	.word	0x20000995
 80053d8:	0801fba4 	.word	0x0801fba4
 80053dc:	08020674 	.word	0x08020674
 80053e0:	20000548 	.word	0x20000548
 80053e4:	50000800 	.word	0x50000800
 80053e8:	50001c00 	.word	0x50001c00
 80053ec:	20000988 	.word	0x20000988
 80053f0:	20000448 	.word	0x20000448
 80053f4:	20000a84 	.word	0x20000a84
 80053f8:	2000002a 	.word	0x2000002a
 80053fc:	2000097c 	.word	0x2000097c
 8005400:	20000549 	.word	0x20000549
 8005404:	2000054a 	.word	0x2000054a
 8005408:	20000004 	.word	0x20000004
 800540c:	20000986 	.word	0x20000986
 8005410:	2000054c 	.word	0x2000054c
 8005414:	20000014 	.word	0x20000014
 8005418:	2000054d 	.word	0x2000054d
 800541c:	20000010 	.word	0x20000010
 8005420:	20000001 	.word	0x20000001
 8005424:	2000000c 	.word	0x2000000c
 8005428:	2000055c 	.word	0x2000055c
 800542c:	0801fbd0 	.word	0x0801fbd0
 8005430:	2000054b 	.word	0x2000054b
 8005434:	2000001c 	.word	0x2000001c
 8005438:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 800543c:	4bd2      	ldr	r3, [pc, #840]	@ (8005788 <ESP_Upkeep+0x738>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	0018      	movs	r0, r3
 8005442:	f006 f8bf 	bl	800b5c4 <TimestampIsReached>
 8005446:	1e03      	subs	r3, r0, #0
 8005448:	d100      	bne.n	800544c <ESP_Upkeep+0x3fc>
 800544a:	e198      	b.n	800577e <ESP_Upkeep+0x72e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800544c:	4bcf      	ldr	r3, [pc, #828]	@ (800578c <ESP_Upkeep+0x73c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	0018      	movs	r0, r3
 8005452:	f7ff f9d3 	bl	80047fc <DMA_ProcessBuffer>
 8005456:	0003      	movs	r3, r0
 8005458:	001a      	movs	r2, r3
 800545a:	4bcd      	ldr	r3, [pc, #820]	@ (8005790 <ESP_Upkeep+0x740>)
 800545c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800545e:	4bcc      	ldr	r3, [pc, #816]	@ (8005790 <ESP_Upkeep+0x740>)
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	4bca      	ldr	r3, [pc, #808]	@ (800578c <ESP_Upkeep+0x73c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	1d7c      	adds	r4, r7, #5
 8005468:	0019      	movs	r1, r3
 800546a:	0010      	movs	r0, r2
 800546c:	f7ff fad2 	bl	8004a14 <ATCompare>
 8005470:	0003      	movs	r3, r0
 8005472:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005474:	4bc6      	ldr	r3, [pc, #792]	@ (8005790 <ESP_Upkeep+0x740>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d10f      	bne.n	800549c <ESP_Upkeep+0x44c>
          if(ATCommand == AT_SENDDATA){
 800547c:	4bc5      	ldr	r3, [pc, #788]	@ (8005794 <ESP_Upkeep+0x744>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d108      	bne.n	8005496 <ESP_Upkeep+0x446>
            ATCommand = AT_HTTPCPOST;
 8005484:	4bc3      	ldr	r3, [pc, #780]	@ (8005794 <ESP_Upkeep+0x744>)
 8005486:	220e      	movs	r2, #14
 8005488:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800548a:	4bc0      	ldr	r3, [pc, #768]	@ (800578c <ESP_Upkeep+0x73c>)
 800548c:	2202      	movs	r2, #2
 800548e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005490:	4bc1      	ldr	r3, [pc, #772]	@ (8005798 <ESP_Upkeep+0x748>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005496:	4bc1      	ldr	r3, [pc, #772]	@ (800579c <ESP_Upkeep+0x74c>)
 8005498:	2204      	movs	r2, #4
 800549a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800549c:	4bbc      	ldr	r3, [pc, #752]	@ (8005790 <ESP_Upkeep+0x740>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d106      	bne.n	80054b2 <ESP_Upkeep+0x462>
          ESPTimeStamp = HAL_GetTick() + 10;
 80054a4:	f006 fc86 	bl	800bdb4 <HAL_GetTick>
 80054a8:	0003      	movs	r3, r0
 80054aa:	330a      	adds	r3, #10
 80054ac:	001a      	movs	r2, r3
 80054ae:	4bb6      	ldr	r3, [pc, #728]	@ (8005788 <ESP_Upkeep+0x738>)
 80054b0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80054b2:	4bb7      	ldr	r3, [pc, #732]	@ (8005790 <ESP_Upkeep+0x740>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b0a      	cmp	r3, #10
 80054b8:	d106      	bne.n	80054c8 <ESP_Upkeep+0x478>
          ESPTimeStamp = HAL_GetTick() + 10;
 80054ba:	f006 fc7b 	bl	800bdb4 <HAL_GetTick>
 80054be:	0003      	movs	r3, r0
 80054c0:	330a      	adds	r3, #10
 80054c2:	001a      	movs	r2, r3
 80054c4:	4bb0      	ldr	r3, [pc, #704]	@ (8005788 <ESP_Upkeep+0x738>)
 80054c6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80054c8:	4bb1      	ldr	r3, [pc, #708]	@ (8005790 <ESP_Upkeep+0x740>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b06      	cmp	r3, #6
 80054ce:	d116      	bne.n	80054fe <ESP_Upkeep+0x4ae>
          if(ATCommand != AT_SENDDATA){
 80054d0:	4bb0      	ldr	r3, [pc, #704]	@ (8005794 <ESP_Upkeep+0x744>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	d003      	beq.n	80054e0 <ESP_Upkeep+0x490>
            EspState = ESP_STATE_SEND;
 80054d8:	4bb0      	ldr	r3, [pc, #704]	@ (800579c <ESP_Upkeep+0x74c>)
 80054da:	2204      	movs	r2, #4
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e00e      	b.n	80054fe <ESP_Upkeep+0x4ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 80054e0:	4bac      	ldr	r3, [pc, #688]	@ (8005794 <ESP_Upkeep+0x744>)
 80054e2:	220e      	movs	r2, #14
 80054e4:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 80054e6:	4bac      	ldr	r3, [pc, #688]	@ (8005798 <ESP_Upkeep+0x748>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4baa      	ldr	r3, [pc, #680]	@ (8005798 <ESP_Upkeep+0x748>)
 80054f0:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80054f2:	4ba6      	ldr	r3, [pc, #664]	@ (800578c <ESP_Upkeep+0x73c>)
 80054f4:	2202      	movs	r2, #2
 80054f6:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80054f8:	4ba8      	ldr	r3, [pc, #672]	@ (800579c <ESP_Upkeep+0x74c>)
 80054fa:	2204      	movs	r2, #4
 80054fc:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80054fe:	1d7b      	adds	r3, r7, #5
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d100      	bne.n	8005508 <ESP_Upkeep+0x4b8>
 8005506:	e13a      	b.n	800577e <ESP_Upkeep+0x72e>
          EspState = ESP_STATE_NEXT_AT;
 8005508:	4ba4      	ldr	r3, [pc, #656]	@ (800579c <ESP_Upkeep+0x74c>)
 800550a:	2205      	movs	r2, #5
 800550c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800550e:	e136      	b.n	800577e <ESP_Upkeep+0x72e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005510:	4ba1      	ldr	r3, [pc, #644]	@ (8005798 <ESP_Upkeep+0x748>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	4b9f      	ldr	r3, [pc, #636]	@ (8005798 <ESP_Upkeep+0x748>)
 800551a:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 800551c:	4b9e      	ldr	r3, [pc, #632]	@ (8005798 <ESP_Upkeep+0x748>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	001a      	movs	r2, r3
 8005522:	4b9f      	ldr	r3, [pc, #636]	@ (80057a0 <ESP_Upkeep+0x750>)
 8005524:	5c9a      	ldrb	r2, [r3, r2]
 8005526:	4b9b      	ldr	r3, [pc, #620]	@ (8005794 <ESP_Upkeep+0x744>)
 8005528:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 800552a:	4b9a      	ldr	r3, [pc, #616]	@ (8005794 <ESP_Upkeep+0x744>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b03      	cmp	r3, #3
 8005530:	d102      	bne.n	8005538 <ESP_Upkeep+0x4e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005532:	4b96      	ldr	r3, [pc, #600]	@ (800578c <ESP_Upkeep+0x73c>)
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005538:	4b96      	ldr	r3, [pc, #600]	@ (8005794 <ESP_Upkeep+0x744>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b0e      	cmp	r3, #14
 800553e:	d102      	bne.n	8005546 <ESP_Upkeep+0x4f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005540:	4b92      	ldr	r3, [pc, #584]	@ (800578c <ESP_Upkeep+0x73c>)
 8005542:	2202      	movs	r2, #2
 8005544:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005546:	4b93      	ldr	r3, [pc, #588]	@ (8005794 <ESP_Upkeep+0x744>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b0e      	cmp	r3, #14
 800554c:	d006      	beq.n	800555c <ESP_Upkeep+0x50c>
 800554e:	4b91      	ldr	r3, [pc, #580]	@ (8005794 <ESP_Upkeep+0x744>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d002      	beq.n	800555c <ESP_Upkeep+0x50c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005556:	4b8d      	ldr	r3, [pc, #564]	@ (800578c <ESP_Upkeep+0x73c>)
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 800555c:	4b8d      	ldr	r3, [pc, #564]	@ (8005794 <ESP_Upkeep+0x744>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b11      	cmp	r3, #17
 8005562:	d102      	bne.n	800556a <ESP_Upkeep+0x51a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005564:	4b89      	ldr	r3, [pc, #548]	@ (800578c <ESP_Upkeep+0x73c>)
 8005566:	2205      	movs	r2, #5
 8005568:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 800556a:	4b8c      	ldr	r3, [pc, #560]	@ (800579c <ESP_Upkeep+0x74c>)
 800556c:	2204      	movs	r2, #4
 800556e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005570:	4b88      	ldr	r3, [pc, #544]	@ (8005794 <ESP_Upkeep+0x744>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b14      	cmp	r3, #20
 8005576:	d000      	beq.n	800557a <ESP_Upkeep+0x52a>
 8005578:	e103      	b.n	8005782 <ESP_Upkeep+0x732>
        if(Mode == AT_MODE_SEND){
 800557a:	4b8a      	ldr	r3, [pc, #552]	@ (80057a4 <ESP_Upkeep+0x754>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d124      	bne.n	80055cc <ESP_Upkeep+0x57c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005582:	f006 fc17 	bl	800bdb4 <HAL_GetTick>
 8005586:	0003      	movs	r3, r0
 8005588:	4a87      	ldr	r2, [pc, #540]	@ (80057a8 <ESP_Upkeep+0x758>)
 800558a:	189a      	adds	r2, r3, r2
 800558c:	4b7e      	ldr	r3, [pc, #504]	@ (8005788 <ESP_Upkeep+0x738>)
 800558e:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005590:	f005 f9f6 	bl	800a980 <ResetESPIndicator>
          clearDMABuffer();
 8005594:	f7ff fa30 	bl	80049f8 <clearDMABuffer>
          stop = HAL_GetTick();
 8005598:	f006 fc0c 	bl	800bdb4 <HAL_GetTick>
 800559c:	0002      	movs	r2, r0
 800559e:	4b83      	ldr	r3, [pc, #524]	@ (80057ac <ESP_Upkeep+0x75c>)
 80055a0:	601a      	str	r2, [r3, #0]
          printf("stop van HAL_GetTick(): %lu\r\n", stop);
 80055a2:	4b82      	ldr	r3, [pc, #520]	@ (80057ac <ESP_Upkeep+0x75c>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b82      	ldr	r3, [pc, #520]	@ (80057b0 <ESP_Upkeep+0x760>)
 80055a8:	0011      	movs	r1, r2
 80055aa:	0018      	movs	r0, r3
 80055ac:	f016 fe80 	bl	801c2b0 <iprintf>
          Debug("Message send in %lu ms", (stop-start));
 80055b0:	4b7e      	ldr	r3, [pc, #504]	@ (80057ac <ESP_Upkeep+0x75c>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b7f      	ldr	r3, [pc, #508]	@ (80057b4 <ESP_Upkeep+0x764>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	4a7f      	ldr	r2, [pc, #508]	@ (80057b8 <ESP_Upkeep+0x768>)
 80055bc:	497f      	ldr	r1, [pc, #508]	@ (80057bc <ESP_Upkeep+0x76c>)
 80055be:	2003      	movs	r0, #3
 80055c0:	f006 f856 	bl	800b670 <CreateLine>
          EspState = ESP_STATE_DEINIT;
 80055c4:	4b75      	ldr	r3, [pc, #468]	@ (800579c <ESP_Upkeep+0x74c>)
 80055c6:	220d      	movs	r2, #13
 80055c8:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80055ca:	e0da      	b.n	8005782 <ESP_Upkeep+0x732>
        else if (Mode == AT_MODE_GETTIME) {
 80055cc:	4b75      	ldr	r3, [pc, #468]	@ (80057a4 <ESP_Upkeep+0x754>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b05      	cmp	r3, #5
 80055d2:	d125      	bne.n	8005620 <ESP_Upkeep+0x5d0>
            setTime = false;
 80055d4:	4b7a      	ldr	r3, [pc, #488]	@ (80057c0 <ESP_Upkeep+0x770>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 80055da:	f006 fbeb 	bl	800bdb4 <HAL_GetTick>
 80055de:	0003      	movs	r3, r0
 80055e0:	4a78      	ldr	r2, [pc, #480]	@ (80057c4 <ESP_Upkeep+0x774>)
 80055e2:	189a      	adds	r2, r3, r2
 80055e4:	4b78      	ldr	r3, [pc, #480]	@ (80057c8 <ESP_Upkeep+0x778>)
 80055e6:	601a      	str	r2, [r3, #0]
            Debug("NTP should be called at: %lu", ESPNTPTimeStamp);
 80055e8:	4b77      	ldr	r3, [pc, #476]	@ (80057c8 <ESP_Upkeep+0x778>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a77      	ldr	r2, [pc, #476]	@ (80057cc <ESP_Upkeep+0x77c>)
 80055ee:	4973      	ldr	r1, [pc, #460]	@ (80057bc <ESP_Upkeep+0x76c>)
 80055f0:	2003      	movs	r0, #3
 80055f2:	f006 f83d 	bl	800b670 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 80055f6:	4b76      	ldr	r3, [pc, #472]	@ (80057d0 <ESP_Upkeep+0x780>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b63      	ldr	r3, [pc, #396]	@ (8005788 <ESP_Upkeep+0x738>)
 80055fc:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 80055fe:	f005 f9bf 	bl	800a980 <ResetESPIndicator>
            clearDMABuffer();
 8005602:	f7ff f9f9 	bl	80049f8 <clearDMABuffer>
            Debug("time synchronized by NTP");
 8005606:	4a73      	ldr	r2, [pc, #460]	@ (80057d4 <ESP_Upkeep+0x784>)
 8005608:	4b6c      	ldr	r3, [pc, #432]	@ (80057bc <ESP_Upkeep+0x76c>)
 800560a:	0019      	movs	r1, r3
 800560c:	2003      	movs	r0, #3
 800560e:	f006 f82f 	bl	800b670 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005612:	4b62      	ldr	r3, [pc, #392]	@ (800579c <ESP_Upkeep+0x74c>)
 8005614:	220d      	movs	r2, #13
 8005616:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005618:	4b62      	ldr	r3, [pc, #392]	@ (80057a4 <ESP_Upkeep+0x754>)
 800561a:	2202      	movs	r2, #2
 800561c:	701a      	strb	r2, [r3, #0]
    break;
 800561e:	e0b0      	b.n	8005782 <ESP_Upkeep+0x732>
          EspState = ESP_STATE_RESET;
 8005620:	4b5e      	ldr	r3, [pc, #376]	@ (800579c <ESP_Upkeep+0x74c>)
 8005622:	2209      	movs	r2, #9
 8005624:	701a      	strb	r2, [r3, #0]
    break;
 8005626:	e0ac      	b.n	8005782 <ESP_Upkeep+0x732>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005628:	4b6b      	ldr	r3, [pc, #428]	@ (80057d8 <ESP_Upkeep+0x788>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800562e:	4b6b      	ldr	r3, [pc, #428]	@ (80057dc <ESP_Upkeep+0x78c>)
 8005630:	2200      	movs	r2, #0
 8005632:	2101      	movs	r1, #1
 8005634:	0018      	movs	r0, r3
 8005636:	f007 fe1c 	bl	800d272 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800563a:	2001      	movs	r0, #1
 800563c:	f006 fbc4 	bl	800bdc8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	4866      	ldr	r0, [pc, #408]	@ (80057e0 <ESP_Upkeep+0x790>)
 8005646:	2200      	movs	r2, #0
 8005648:	0019      	movs	r1, r3
 800564a:	f007 fe12 	bl	800d272 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800564e:	2001      	movs	r0, #1
 8005650:	f006 fbba 	bl	800bdc8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005654:	4b61      	ldr	r3, [pc, #388]	@ (80057dc <ESP_Upkeep+0x78c>)
 8005656:	2200      	movs	r2, #0
 8005658:	2102      	movs	r1, #2
 800565a:	0018      	movs	r0, r3
 800565c:	f007 fe09 	bl	800d272 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005660:	4b4e      	ldr	r3, [pc, #312]	@ (800579c <ESP_Upkeep+0x74c>)
 8005662:	2209      	movs	r2, #9
 8005664:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005666:	2001      	movs	r0, #1
 8005668:	f006 fbae 	bl	800bdc8 <HAL_Delay>
      break;
 800566c:	e0cd      	b.n	800580a <ESP_Upkeep+0x7ba>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 800566e:	4b46      	ldr	r3, [pc, #280]	@ (8005788 <ESP_Upkeep+0x738>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	0018      	movs	r0, r3
 8005674:	f005 ffa6 	bl	800b5c4 <TimestampIsReached>
 8005678:	1e03      	subs	r3, r0, #0
 800567a:	d103      	bne.n	8005684 <ESP_Upkeep+0x634>
 800567c:	4b59      	ldr	r3, [pc, #356]	@ (80057e4 <ESP_Upkeep+0x794>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02f      	beq.n	80056e4 <ESP_Upkeep+0x694>
        if(Mode == AT_MODE_INIT){
 8005684:	4b47      	ldr	r3, [pc, #284]	@ (80057a4 <ESP_Upkeep+0x754>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <ESP_Upkeep+0x648>
          InitIsDone = true;
 800568c:	4b56      	ldr	r3, [pc, #344]	@ (80057e8 <ESP_Upkeep+0x798>)
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005692:	4b42      	ldr	r3, [pc, #264]	@ (800579c <ESP_Upkeep+0x74c>)
 8005694:	220b      	movs	r2, #11
 8005696:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005698:	4b42      	ldr	r3, [pc, #264]	@ (80057a4 <ESP_Upkeep+0x754>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d108      	bne.n	80056b2 <ESP_Upkeep+0x662>
          ConnectionMade = true;
 80056a0:	4b52      	ldr	r3, [pc, #328]	@ (80057ec <ESP_Upkeep+0x79c>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80056a6:	4b52      	ldr	r3, [pc, #328]	@ (80057f0 <ESP_Upkeep+0x7a0>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80056ac:	4b3b      	ldr	r3, [pc, #236]	@ (800579c <ESP_Upkeep+0x74c>)
 80056ae:	220b      	movs	r2, #11
 80056b0:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80056b2:	4b3c      	ldr	r3, [pc, #240]	@ (80057a4 <ESP_Upkeep+0x754>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d102      	bne.n	80056c0 <ESP_Upkeep+0x670>
          EspState = ESP_STATE_INIT;
 80056ba:	4b38      	ldr	r3, [pc, #224]	@ (800579c <ESP_Upkeep+0x74c>)
 80056bc:	2202      	movs	r2, #2
 80056be:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 80056c0:	4b38      	ldr	r3, [pc, #224]	@ (80057a4 <ESP_Upkeep+0x754>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d102      	bne.n	80056ce <ESP_Upkeep+0x67e>
          EspState = ESP_STATE_CONFIG;
 80056c8:	4b34      	ldr	r3, [pc, #208]	@ (800579c <ESP_Upkeep+0x74c>)
 80056ca:	220e      	movs	r2, #14
 80056cc:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 80056ce:	4b35      	ldr	r3, [pc, #212]	@ (80057a4 <ESP_Upkeep+0x754>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d127      	bne.n	8005726 <ESP_Upkeep+0x6d6>
          EspState = ESP_STATE_MODE_SELECT;
 80056d6:	4b31      	ldr	r3, [pc, #196]	@ (800579c <ESP_Upkeep+0x74c>)
 80056d8:	220b      	movs	r2, #11
 80056da:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 80056dc:	4b45      	ldr	r3, [pc, #276]	@ (80057f4 <ESP_Upkeep+0x7a4>)
 80056de:	2201      	movs	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 80056e2:	e020      	b.n	8005726 <ESP_Upkeep+0x6d6>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 80056e4:	4b38      	ldr	r3, [pc, #224]	@ (80057c8 <ESP_Upkeep+0x778>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f005 ff6b 	bl	800b5c4 <TimestampIsReached>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d100      	bne.n	80056f4 <ESP_Upkeep+0x6a4>
 80056f2:	e089      	b.n	8005808 <ESP_Upkeep+0x7b8>
        if(Mode == AT_MODE_SEND ) {
 80056f4:	4b2b      	ldr	r3, [pc, #172]	@ (80057a4 <ESP_Upkeep+0x754>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d000      	beq.n	80056fe <ESP_Upkeep+0x6ae>
 80056fc:	e084      	b.n	8005808 <ESP_Upkeep+0x7b8>
            Mode = AT_MODE_GETTIME;
 80056fe:	4b29      	ldr	r3, [pc, #164]	@ (80057a4 <ESP_Upkeep+0x754>)
 8005700:	2205      	movs	r2, #5
 8005702:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005704:	4b25      	ldr	r3, [pc, #148]	@ (800579c <ESP_Upkeep+0x74c>)
 8005706:	2202      	movs	r2, #2
 8005708:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 800570a:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <ESP_Upkeep+0x738>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b30      	ldr	r3, [pc, #192]	@ (80057d0 <ESP_Upkeep+0x780>)
 8005710:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005712:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <ESP_Upkeep+0x770>)
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005718:	4a37      	ldr	r2, [pc, #220]	@ (80057f8 <ESP_Upkeep+0x7a8>)
 800571a:	4b28      	ldr	r3, [pc, #160]	@ (80057bc <ESP_Upkeep+0x76c>)
 800571c:	0019      	movs	r1, r3
 800571e:	2003      	movs	r0, #3
 8005720:	f005 ffa6 	bl	800b670 <CreateLine>
        }
      }
      break;
 8005724:	e070      	b.n	8005808 <ESP_Upkeep+0x7b8>
 8005726:	e06f      	b.n	8005808 <ESP_Upkeep+0x7b8>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8005728:	4a34      	ldr	r2, [pc, #208]	@ (80057fc <ESP_Upkeep+0x7ac>)
 800572a:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <ESP_Upkeep+0x76c>)
 800572c:	0019      	movs	r1, r3
 800572e:	2003      	movs	r0, #3
 8005730:	f005 ff9e 	bl	800b670 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005734:	f013 fd58 	bl	80191e8 <GetUsbRxPointer>
 8005738:	0003      	movs	r3, r0
 800573a:	0018      	movs	r0, r3
 800573c:	f000 f8e0 	bl	8005900 <Process_PC_Config>
      break;
 8005740:	e063      	b.n	800580a <ESP_Upkeep+0x7ba>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005742:	4a2f      	ldr	r2, [pc, #188]	@ (8005800 <ESP_Upkeep+0x7b0>)
 8005744:	4b1d      	ldr	r3, [pc, #116]	@ (80057bc <ESP_Upkeep+0x76c>)
 8005746:	0019      	movs	r1, r3
 8005748:	2003      	movs	r0, #3
 800574a:	f005 ff91 	bl	800b670 <CreateLine>
      EspState = ESP_STATE_INIT;
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <ESP_Upkeep+0x74c>)
 8005750:	2202      	movs	r2, #2
 8005752:	701a      	strb	r2, [r3, #0]
      break;
 8005754:	e059      	b.n	800580a <ESP_Upkeep+0x7ba>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 8005756:	4a2b      	ldr	r2, [pc, #172]	@ (8005804 <ESP_Upkeep+0x7b4>)
 8005758:	4b18      	ldr	r3, [pc, #96]	@ (80057bc <ESP_Upkeep+0x76c>)
 800575a:	0019      	movs	r1, r3
 800575c:	2003      	movs	r0, #3
 800575e:	f005 ff87 	bl	800b670 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005762:	4b0e      	ldr	r3, [pc, #56]	@ (800579c <ESP_Upkeep+0x74c>)
 8005764:	2207      	movs	r2, #7
 8005766:	701a      	strb	r2, [r3, #0]
      break;
 8005768:	e04f      	b.n	800580a <ESP_Upkeep+0x7ba>
      break;
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	e04d      	b.n	800580a <ESP_Upkeep+0x7ba>
      break;
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	e04b      	b.n	800580a <ESP_Upkeep+0x7ba>
        break;
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	e049      	b.n	800580a <ESP_Upkeep+0x7ba>
    break;
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	e047      	b.n	800580a <ESP_Upkeep+0x7ba>
    break;
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	e045      	b.n	800580a <ESP_Upkeep+0x7ba>
      break;
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	e043      	b.n	800580a <ESP_Upkeep+0x7ba>
    break;
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	e041      	b.n	800580a <ESP_Upkeep+0x7ba>
 8005786:	46c0      	nop			@ (mov r8, r8)
 8005788:	20000988 	.word	0x20000988
 800578c:	20000995 	.word	0x20000995
 8005790:	2000002a 	.word	0x2000002a
 8005794:	20000996 	.word	0x20000996
 8005798:	20000986 	.word	0x20000986
 800579c:	20000028 	.word	0x20000028
 80057a0:	2000097c 	.word	0x2000097c
 80057a4:	20000997 	.word	0x20000997
 80057a8:	000493e0 	.word	0x000493e0
 80057ac:	20000560 	.word	0x20000560
 80057b0:	0801fbf0 	.word	0x0801fbf0
 80057b4:	2000055c 	.word	0x2000055c
 80057b8:	0801fc10 	.word	0x0801fc10
 80057bc:	0801f4e0 	.word	0x0801f4e0
 80057c0:	20000001 	.word	0x20000001
 80057c4:	00dbba00 	.word	0x00dbba00
 80057c8:	2000098c 	.word	0x2000098c
 80057cc:	0801fc28 	.word	0x0801fc28
 80057d0:	20000990 	.word	0x20000990
 80057d4:	0801fc48 	.word	0x0801fc48
 80057d8:	20000548 	.word	0x20000548
 80057dc:	50001c00 	.word	0x50001c00
 80057e0:	50000800 	.word	0x50000800
 80057e4:	2000054b 	.word	0x2000054b
 80057e8:	20000549 	.word	0x20000549
 80057ec:	2000054c 	.word	0x2000054c
 80057f0:	2000054e 	.word	0x2000054e
 80057f4:	2000054d 	.word	0x2000054d
 80057f8:	0801fc64 	.word	0x0801fc64
 80057fc:	0801fc74 	.word	0x0801fc74
 8005800:	0801fc8c 	.word	0x0801fc8c
 8005804:	0801fca0 	.word	0x0801fca0
      break;
 8005808:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800580a:	4b03      	ldr	r3, [pc, #12]	@ (8005818 <ESP_Upkeep+0x7c8>)
 800580c:	781b      	ldrb	r3, [r3, #0]
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	b003      	add	sp, #12
 8005814:	bd90      	pop	{r4, r7, pc}
 8005816:	46c0      	nop			@ (mov r8, r8)
 8005818:	20000028 	.word	0x20000028

0800581c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005824:	4b09      	ldr	r3, [pc, #36]	@ (800584c <I2CSensors_Init+0x30>)
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800582a:	4a09      	ldr	r2, [pc, #36]	@ (8005850 <I2CSensors_Init+0x34>)
 800582c:	4b09      	ldr	r3, [pc, #36]	@ (8005854 <I2CSensors_Init+0x38>)
 800582e:	0011      	movs	r1, r2
 8005830:	0018      	movs	r0, r3
 8005832:	f001 f96f 	bl	8006b14 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005836:	4a06      	ldr	r2, [pc, #24]	@ (8005850 <I2CSensors_Init+0x34>)
 8005838:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <I2CSensors_Init+0x38>)
 800583a:	0011      	movs	r1, r2
 800583c:	0018      	movs	r0, r3
 800583e:	f000 ffd9 	bl	80067f4 <Gas_Init>
}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	20000a88 	.word	0x20000a88
 8005850:	080058ad 	.word	0x080058ad
 8005854:	08005859 	.word	0x08005859

08005858 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005858:	b5b0      	push	{r4, r5, r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6039      	str	r1, [r7, #0]
 8005860:	0011      	movs	r1, r2
 8005862:	1dfb      	adds	r3, r7, #7
 8005864:	1c02      	adds	r2, r0, #0
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	1dbb      	adds	r3, r7, #6
 800586a:	1c0a      	adds	r2, r1, #0
 800586c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800586e:	4b0e      	ldr	r3, [pc, #56]	@ (80058a8 <ReadI2C+0x50>)
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	1dfb      	adds	r3, r7, #7
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	18db      	adds	r3, r3, r3
 800587a:	b299      	uxth	r1, r3
 800587c:	1dbb      	adds	r3, r7, #6
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	250f      	movs	r5, #15
 8005884:	197c      	adds	r4, r7, r5
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	f007 feac 	bl	800d5e4 <HAL_I2C_Master_Receive_DMA>
 800588c:	0003      	movs	r3, r0
 800588e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005890:	197b      	adds	r3, r7, r5
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <ReadI2C+0x44>
        return false;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <ReadI2C+0x46>
    }
    return true;
 800589c:	2301      	movs	r3, #1
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b004      	add	sp, #16
 80058a4:	bdb0      	pop	{r4, r5, r7, pc}
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	20000a88 	.word	0x20000a88

080058ac <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80058ac:	b5b0      	push	{r4, r5, r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6039      	str	r1, [r7, #0]
 80058b4:	0011      	movs	r1, r2
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	1c02      	adds	r2, r0, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	1dbb      	adds	r3, r7, #6
 80058be:	1c0a      	adds	r2, r1, #0
 80058c0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80058c2:	4b0e      	ldr	r3, [pc, #56]	@ (80058fc <WriteI2C+0x50>)
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	1dfb      	adds	r3, r7, #7
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	18db      	adds	r3, r3, r3
 80058ce:	b299      	uxth	r1, r3
 80058d0:	1dbb      	adds	r3, r7, #6
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	250f      	movs	r5, #15
 80058d8:	197c      	adds	r4, r7, r5
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	f007 fd7c 	bl	800d3d8 <HAL_I2C_Master_Transmit_DMA>
 80058e0:	0003      	movs	r3, r0
 80058e2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80058e4:	197b      	adds	r3, r7, r5
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <WriteI2C+0x44>
        return false;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <WriteI2C+0x46>
    }
    return true;
 80058f0:	2301      	movs	r3, #1
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bdb0      	pop	{r4, r5, r7, pc}
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	20000a88 	.word	0x20000a88

08005900 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b0c3      	sub	sp, #268	@ 0x10c
 8005904:	af3e      	add	r7, sp, #248	@ 0xf8
 8005906:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005908:	f013 fc8e 	bl	8019228 <GetUsbRxDataSize>
 800590c:	0003      	movs	r3, r0
 800590e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b05      	cmp	r3, #5
 8005914:	d971      	bls.n	80059fa <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2123      	movs	r1, #35	@ 0x23
 800591a:	0018      	movs	r0, r3
 800591c:	f016 fd84 	bl	801c428 <strchr>
 8005920:	0003      	movs	r3, r0
 8005922:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d065      	beq.n	80059f6 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785a      	ldrb	r2, [r3, #1]
 800592e:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <Process_PC_Config+0x100>)
 8005930:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	789a      	ldrb	r2, [r3, #2]
 8005936:	4b32      	ldr	r3, [pc, #200]	@ (8005a00 <Process_PC_Config+0x100>)
 8005938:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800593a:	4b31      	ldr	r3, [pc, #196]	@ (8005a00 <Process_PC_Config+0x100>)
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	3305      	adds	r3, #5
 8005940:	001a      	movs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4293      	cmp	r3, r2
 8005946:	d351      	bcc.n	80059ec <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1cd9      	adds	r1, r3, #3
 800594c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a00 <Process_PC_Config+0x100>)
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	001a      	movs	r2, r3
 8005952:	4b2c      	ldr	r3, [pc, #176]	@ (8005a04 <Process_PC_Config+0x104>)
 8005954:	0018      	movs	r0, r3
 8005956:	f016 fe3b 	bl	801c5d0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800595a:	4b29      	ldr	r3, [pc, #164]	@ (8005a00 <Process_PC_Config+0x100>)
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	3303      	adds	r3, #3
 8005960:	001a      	movs	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	189b      	adds	r3, r3, r2
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	b21a      	sxth	r2, r3
 800596c:	4b24      	ldr	r3, [pc, #144]	@ (8005a00 <Process_PC_Config+0x100>)
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	3304      	adds	r3, #4
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	18cb      	adds	r3, r1, r3
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b21b      	sxth	r3, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	b21b      	sxth	r3, r3
 800597e:	b299      	uxth	r1, r3
 8005980:	4a1f      	ldr	r2, [pc, #124]	@ (8005a00 <Process_PC_Config+0x100>)
 8005982:	2381      	movs	r3, #129	@ 0x81
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <Process_PC_Config+0x100>)
 800598a:	2381      	movs	r3, #129	@ 0x81
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	5ad4      	ldrh	r4, [r2, r3]
 8005990:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <Process_PC_Config+0x100>)
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	3303      	adds	r3, #3
 8005996:	b29a      	uxth	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	0011      	movs	r1, r2
 800599c:	0018      	movs	r0, r3
 800599e:	f000 f975 	bl	8005c8c <CRC16_ARC>
 80059a2:	0003      	movs	r3, r0
 80059a4:	429c      	cmp	r4, r3
 80059a6:	d007      	beq.n	80059b8 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80059a8:	4b15      	ldr	r3, [pc, #84]	@ (8005a00 <Process_PC_Config+0x100>)
 80059aa:	785a      	ldrb	r2, [r3, #1]
 80059ac:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <Process_PC_Config+0x104>)
 80059ae:	0019      	movs	r1, r3
 80059b0:	2001      	movs	r0, #1
 80059b2:	f000 f919 	bl	8005be8 <Create_Message>
 80059b6:	e016      	b.n	80059e6 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80059b8:	4c11      	ldr	r4, [pc, #68]	@ (8005a00 <Process_PC_Config+0x100>)
 80059ba:	466b      	mov	r3, sp
 80059bc:	0018      	movs	r0, r3
 80059be:	0023      	movs	r3, r4
 80059c0:	3310      	adds	r3, #16
 80059c2:	22f4      	movs	r2, #244	@ 0xf4
 80059c4:	0019      	movs	r1, r3
 80059c6:	f016 fe03 	bl	801c5d0 <memcpy>
 80059ca:	6820      	ldr	r0, [r4, #0]
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	68a2      	ldr	r2, [r4, #8]
 80059d0:	68e3      	ldr	r3, [r4, #12]
 80059d2:	f000 f819 	bl	8005a08 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80059d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <Process_PC_Config+0x100>)
 80059d8:	7818      	ldrb	r0, [r3, #0]
 80059da:	4b09      	ldr	r3, [pc, #36]	@ (8005a00 <Process_PC_Config+0x100>)
 80059dc:	785a      	ldrb	r2, [r3, #1]
 80059de:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <Process_PC_Config+0x104>)
 80059e0:	0019      	movs	r1, r3
 80059e2:	f000 f901 	bl	8005be8 <Create_Message>
                }
                ResetUsbRxDataSize();
 80059e6:	f013 fc07 	bl	80191f8 <ResetUsbRxDataSize>
                return;
 80059ea:	e006      	b.n	80059fa <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f013 fc24 	bl	801923c <GetUsbRxNextChunk>
 80059f4:	e001      	b.n	80059fa <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80059f6:	f013 fbff 	bl	80191f8 <ResetUsbRxDataSize>
        }
    }
}
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b005      	add	sp, #20
 80059fe:	bd90      	pop	{r4, r7, pc}
 8005a00:	20000a8c 	.word	0x20000a8c
 8005a04:	20000a8e 	.word	0x20000a8e

08005a08 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005a08:	b084      	sub	sp, #16
 8005a0a:	b5b0      	push	{r4, r5, r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	2518      	movs	r5, #24
 8005a12:	197c      	adds	r4, r7, r5
 8005a14:	6020      	str	r0, [r4, #0]
 8005a16:	6061      	str	r1, [r4, #4]
 8005a18:	60a2      	str	r2, [r4, #8]
 8005a1a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005a1c:	197b      	adds	r3, r7, r5
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2bfe      	cmp	r3, #254	@ 0xfe
 8005a22:	d100      	bne.n	8005a26 <ProcessCmd+0x1e>
 8005a24:	e09c      	b.n	8005b60 <ProcessCmd+0x158>
 8005a26:	dd00      	ble.n	8005a2a <ProcessCmd+0x22>
 8005a28:	e0bc      	b.n	8005ba4 <ProcessCmd+0x19c>
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	dc0a      	bgt.n	8005a44 <ProcessCmd+0x3c>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da00      	bge.n	8005a34 <ProcessCmd+0x2c>
 8005a32:	e0b7      	b.n	8005ba4 <ProcessCmd+0x19c>
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	d900      	bls.n	8005a3a <ProcessCmd+0x32>
 8005a38:	e0b4      	b.n	8005ba4 <ProcessCmd+0x19c>
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8005bb4 <ProcessCmd+0x1ac>)
 8005a3e:	18d3      	adds	r3, r2, r3
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	469f      	mov	pc, r3
 8005a44:	2bfd      	cmp	r3, #253	@ 0xfd
 8005a46:	d100      	bne.n	8005a4a <ProcessCmd+0x42>
 8005a48:	e084      	b.n	8005b54 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005a4a:	e0ab      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a4c:	2118      	movs	r1, #24
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	001a      	movs	r2, r3
 8005a54:	187b      	adds	r3, r7, r1
 8005a56:	1c99      	adds	r1, r3, #2
 8005a58:	4857      	ldr	r0, [pc, #348]	@ (8005bb8 <ProcessCmd+0x1b0>)
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	f7fd fe30 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005a60:	e0a0      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a62:	2118      	movs	r1, #24
 8005a64:	187b      	adds	r3, r7, r1
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	001a      	movs	r2, r3
 8005a6a:	187b      	adds	r3, r7, r1
 8005a6c:	1c99      	adds	r1, r3, #2
 8005a6e:	4853      	ldr	r0, [pc, #332]	@ (8005bbc <ProcessCmd+0x1b4>)
 8005a70:	230c      	movs	r3, #12
 8005a72:	f7fd fe25 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005a76:	e095      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a78:	2118      	movs	r1, #24
 8005a7a:	187b      	adds	r3, r7, r1
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	001a      	movs	r2, r3
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	1c99      	adds	r1, r3, #2
 8005a84:	484e      	ldr	r0, [pc, #312]	@ (8005bc0 <ProcessCmd+0x1b8>)
 8005a86:	230c      	movs	r3, #12
 8005a88:	f7fd fe1a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005a8c:	e08a      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005a8e:	2118      	movs	r1, #24
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	001a      	movs	r2, r3
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	1c99      	adds	r1, r3, #2
 8005a9a:	484a      	ldr	r0, [pc, #296]	@ (8005bc4 <ProcessCmd+0x1bc>)
 8005a9c:	230c      	movs	r3, #12
 8005a9e:	f7fd fe0f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005aa2:	e07f      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005aa4:	2118      	movs	r1, #24
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	001a      	movs	r2, r3
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	1c99      	adds	r1, r3, #2
 8005ab0:	4845      	ldr	r0, [pc, #276]	@ (8005bc8 <ProcessCmd+0x1c0>)
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	f7fd fe04 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ab8:	e074      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005aba:	2118      	movs	r1, #24
 8005abc:	187b      	adds	r3, r7, r1
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	1c99      	adds	r1, r3, #2
 8005ac6:	4841      	ldr	r0, [pc, #260]	@ (8005bcc <ProcessCmd+0x1c4>)
 8005ac8:	230c      	movs	r3, #12
 8005aca:	f7fd fdf9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ace:	e069      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ad0:	2118      	movs	r1, #24
 8005ad2:	187b      	adds	r3, r7, r1
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	1c99      	adds	r1, r3, #2
 8005adc:	483c      	ldr	r0, [pc, #240]	@ (8005bd0 <ProcessCmd+0x1c8>)
 8005ade:	230c      	movs	r3, #12
 8005ae0:	f7fd fdee 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ae4:	e05e      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005ae6:	2118      	movs	r1, #24
 8005ae8:	187b      	adds	r3, r7, r1
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	001a      	movs	r2, r3
 8005aee:	187b      	adds	r3, r7, r1
 8005af0:	1c99      	adds	r1, r3, #2
 8005af2:	4838      	ldr	r0, [pc, #224]	@ (8005bd4 <ProcessCmd+0x1cc>)
 8005af4:	231e      	movs	r3, #30
 8005af6:	f7fd fde3 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005afa:	e053      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005afc:	2118      	movs	r1, #24
 8005afe:	187b      	adds	r3, r7, r1
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	001a      	movs	r2, r3
 8005b04:	187b      	adds	r3, r7, r1
 8005b06:	1c99      	adds	r1, r3, #2
 8005b08:	4833      	ldr	r0, [pc, #204]	@ (8005bd8 <ProcessCmd+0x1d0>)
 8005b0a:	230c      	movs	r3, #12
 8005b0c:	f7fd fdd8 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b10:	e048      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b12:	2118      	movs	r1, #24
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	001a      	movs	r2, r3
 8005b1a:	187b      	adds	r3, r7, r1
 8005b1c:	1c99      	adds	r1, r3, #2
 8005b1e:	482f      	ldr	r0, [pc, #188]	@ (8005bdc <ProcessCmd+0x1d4>)
 8005b20:	230c      	movs	r3, #12
 8005b22:	f7fd fdcd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b26:	e03d      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b28:	2118      	movs	r1, #24
 8005b2a:	187b      	adds	r3, r7, r1
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	001a      	movs	r2, r3
 8005b30:	187b      	adds	r3, r7, r1
 8005b32:	1c99      	adds	r1, r3, #2
 8005b34:	482a      	ldr	r0, [pc, #168]	@ (8005be0 <ProcessCmd+0x1d8>)
 8005b36:	230c      	movs	r3, #12
 8005b38:	f7fd fdc2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b3c:	e032      	b.n	8005ba4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b3e:	2118      	movs	r1, #24
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	001a      	movs	r2, r3
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	1c99      	adds	r1, r3, #2
 8005b4a:	4826      	ldr	r0, [pc, #152]	@ (8005be4 <ProcessCmd+0x1dc>)
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	f7fd fdb7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b52:	e027      	b.n	8005ba4 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005b54:	4b18      	ldr	r3, [pc, #96]	@ (8005bb8 <ProcessCmd+0x1b0>)
 8005b56:	21ba      	movs	r1, #186	@ 0xba
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7fd fdf6 	bl	800374a <ClearEEprom>
        break;
 8005b5e:	e021      	b.n	8005ba4 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005b60:	2118      	movs	r1, #24
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	789b      	ldrb	r3, [r3, #2]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	b21a      	sxth	r2, r3
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	78db      	ldrb	r3, [r3, #3]
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	b21a      	sxth	r2, r3
 8005b74:	1dbb      	adds	r3, r7, #6
 8005b76:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005b78:	1dbb      	adds	r3, r7, #6
 8005b7a:	881a      	ldrh	r2, [r3, #0]
 8005b7c:	23c0      	movs	r3, #192	@ 0xc0
 8005b7e:	015b      	lsls	r3, r3, #5
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d207      	bcs.n	8005b94 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005b84:	1dbb      	adds	r3, r7, #6
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb8 <ProcessCmd+0x1b0>)
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	0010      	movs	r0, r2
 8005b8e:	f7fd fddc 	bl	800374a <ClearEEprom>
            break;
 8005b92:	e006      	b.n	8005ba2 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005b94:	23c0      	movs	r3, #192	@ 0xc0
 8005b96:	015b      	lsls	r3, r3, #5
 8005b98:	4a07      	ldr	r2, [pc, #28]	@ (8005bb8 <ProcessCmd+0x1b0>)
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	0010      	movs	r0, r2
 8005b9e:	f7fd fdd4 	bl	800374a <ClearEEprom>
            break;
 8005ba2:	46c0      	nop			@ (mov r8, r8)
}
 8005ba4:	46c0      	nop			@ (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b002      	add	sp, #8
 8005baa:	bcb0      	pop	{r4, r5, r7}
 8005bac:	bc08      	pop	{r3}
 8005bae:	b004      	add	sp, #16
 8005bb0:	4718      	bx	r3
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	080206b4 	.word	0x080206b4
 8005bb8:	08080000 	.word	0x08080000
 8005bbc:	0808000c 	.word	0x0808000c
 8005bc0:	08080018 	.word	0x08080018
 8005bc4:	08080024 	.word	0x08080024
 8005bc8:	08080030 	.word	0x08080030
 8005bcc:	0808003c 	.word	0x0808003c
 8005bd0:	08080048 	.word	0x08080048
 8005bd4:	08080090 	.word	0x08080090
 8005bd8:	08080078 	.word	0x08080078
 8005bdc:	0808006c 	.word	0x0808006c
 8005be0:	08080060 	.word	0x08080060
 8005be4:	08080054 	.word	0x08080054

08005be8 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6039      	str	r1, [r7, #0]
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	1dfb      	adds	r3, r7, #7
 8005bf4:	1c02      	adds	r2, r0, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	1dbb      	adds	r3, r7, #6
 8005bfa:	1c0a      	adds	r2, r1, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005bfe:	2223      	movs	r2, #35	@ 0x23
 8005c00:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <Create_Message+0x9c>)
 8005c02:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005c04:	4b1f      	ldr	r3, [pc, #124]	@ (8005c84 <Create_Message+0x9c>)
 8005c06:	1dfa      	adds	r2, r7, #7
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <Create_Message+0x9c>)
 8005c0e:	1dba      	adds	r2, r7, #6
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005c14:	1dbb      	adds	r3, r7, #6
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <Create_Message+0xa0>)
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f016 fcd7 	bl	801c5d0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005c22:	1dbb      	adds	r3, r7, #6
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	250e      	movs	r5, #14
 8005c2a:	197b      	adds	r3, r7, r5
 8005c2c:	3203      	adds	r2, #3
 8005c2e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005c30:	260c      	movs	r6, #12
 8005c32:	19bc      	adds	r4, r7, r6
 8005c34:	197b      	adds	r3, r7, r5
 8005c36:	881a      	ldrh	r2, [r3, #0]
 8005c38:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <Create_Message+0x9c>)
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 f825 	bl	8005c8c <CRC16_ARC>
 8005c42:	0003      	movs	r3, r0
 8005c44:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005c46:	0030      	movs	r0, r6
 8005c48:	183b      	adds	r3, r7, r0
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	197b      	adds	r3, r7, r5
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b2d1      	uxtb	r1, r2
 8005c56:	4a0b      	ldr	r2, [pc, #44]	@ (8005c84 <Create_Message+0x9c>)
 8005c58:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005c5a:	197b      	adds	r3, r7, r5
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	183a      	adds	r2, r7, r0
 8005c62:	8812      	ldrh	r2, [r2, #0]
 8005c64:	b2d1      	uxtb	r1, r2
 8005c66:	4a07      	ldr	r2, [pc, #28]	@ (8005c84 <Create_Message+0x9c>)
 8005c68:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005c6a:	197b      	adds	r3, r7, r5
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	3302      	adds	r3, #2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	4b04      	ldr	r3, [pc, #16]	@ (8005c84 <Create_Message+0x9c>)
 8005c74:	0011      	movs	r1, r2
 8005c76:	0018      	movs	r0, r3
 8005c78:	f013 fa7c 	bl	8019174 <CDC_Transmit_FS>
}
 8005c7c:	46c0      	nop			@ (mov r8, r8)
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b005      	add	sp, #20
 8005c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c84:	20000b90 	.word	0x20000b90
 8005c88:	20000b93 	.word	0x20000b93

08005c8c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	000a      	movs	r2, r1
 8005c96:	1cbb      	adds	r3, r7, #2
 8005c98:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005c9a:	2316      	movs	r3, #22
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	e02e      	b.n	8005d06 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	2216      	movs	r2, #22
 8005cb4:	18bb      	adds	r3, r7, r2
 8005cb6:	18ba      	adds	r2, r7, r2
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	404a      	eors	r2, r1
 8005cbc:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e01a      	b.n	8005cfa <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005cc4:	2116      	movs	r1, #22
 8005cc6:	187b      	adds	r3, r7, r1
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	187a      	adds	r2, r7, r1
 8005cd4:	8812      	ldrh	r2, [r2, #0]
 8005cd6:	0852      	lsrs	r2, r2, #1
 8005cd8:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005cda:	187b      	adds	r3, r7, r1
 8005cdc:	187a      	adds	r2, r7, r1
 8005cde:	8812      	ldrh	r2, [r2, #0]
 8005ce0:	490f      	ldr	r1, [pc, #60]	@ (8005d20 <CRC16_ARC+0x94>)
 8005ce2:	404a      	eors	r2, r1
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e005      	b.n	8005cf4 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005ce8:	2216      	movs	r2, #22
 8005cea:	18bb      	adds	r3, r7, r2
 8005cec:	18ba      	adds	r2, r7, r2
 8005cee:	8812      	ldrh	r2, [r2, #0]
 8005cf0:	0852      	lsrs	r2, r2, #1
 8005cf2:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b07      	cmp	r3, #7
 8005cfe:	dde1      	ble.n	8005cc4 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	3301      	adds	r3, #1
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	1cbb      	adds	r3, r7, #2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	dbcb      	blt.n	8005ca8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005d10:	2316      	movs	r3, #22
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	881b      	ldrh	r3, [r3, #0]
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b006      	add	sp, #24
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	ffffa001 	.word	0xffffa001

08005d24 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005d28:	4b26      	ldr	r3, [pc, #152]	@ (8005dc4 <ReadBatteryVoltage+0xa0>)
 8005d2a:	4a27      	ldr	r2, [pc, #156]	@ (8005dc8 <ReadBatteryVoltage+0xa4>)
 8005d2c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005d2e:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <ReadBatteryVoltage+0xa0>)
 8005d30:	2280      	movs	r2, #128	@ 0x80
 8005d32:	0152      	lsls	r2, r2, #5
 8005d34:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005d36:	4a23      	ldr	r2, [pc, #140]	@ (8005dc4 <ReadBatteryVoltage+0xa0>)
 8005d38:	4b24      	ldr	r3, [pc, #144]	@ (8005dcc <ReadBatteryVoltage+0xa8>)
 8005d3a:	0011      	movs	r1, r2
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f006 faf5 	bl	800c32c <HAL_ADC_ConfigChannel>
 8005d42:	1e03      	subs	r3, r0, #0
 8005d44:	d001      	beq.n	8005d4a <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005d46:	f001 fb5b 	bl	8007400 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005d4a:	4b20      	ldr	r3, [pc, #128]	@ (8005dcc <ReadBatteryVoltage+0xa8>)
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f006 f9f1 	bl	800c134 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005d52:	4b1e      	ldr	r3, [pc, #120]	@ (8005dcc <ReadBatteryVoltage+0xa8>)
 8005d54:	2101      	movs	r1, #1
 8005d56:	0018      	movs	r0, r3
 8005d58:	f006 fa40 	bl	800c1dc <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dcc <ReadBatteryVoltage+0xa8>)
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f006 fad8 	bl	800c314 <HAL_ADC_GetValue>
 8005d64:	0002      	movs	r2, r0
 8005d66:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd0 <ReadBatteryVoltage+0xac>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4353      	muls	r3, r2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4919      	ldr	r1, [pc, #100]	@ (8005dd4 <ReadBatteryVoltage+0xb0>)
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7fa fa17 	bl	80001a4 <__udivsi3>
 8005d76:	0003      	movs	r3, r0
 8005d78:	001a      	movs	r2, r3
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <ReadBatteryVoltage+0xb4>)
 8005d7c:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005d7e:	4b16      	ldr	r3, [pc, #88]	@ (8005dd8 <ReadBatteryVoltage+0xb4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fb fc70 	bl	8001668 <__aeabi_ui2f>
 8005d88:	1c03      	adds	r3, r0, #0
 8005d8a:	4914      	ldr	r1, [pc, #80]	@ (8005ddc <ReadBatteryVoltage+0xb8>)
 8005d8c:	1c18      	adds	r0, r3, #0
 8005d8e:	f7fa ff21 	bl	8000bd4 <__aeabi_fdiv>
 8005d92:	1c03      	adds	r3, r0, #0
 8005d94:	1c1a      	adds	r2, r3, #0
 8005d96:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <ReadBatteryVoltage+0xbc>)
 8005d98:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc4 <ReadBatteryVoltage+0xa0>)
 8005d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc8 <ReadBatteryVoltage+0xa4>)
 8005d9e:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005da0:	4b08      	ldr	r3, [pc, #32]	@ (8005dc4 <ReadBatteryVoltage+0xa0>)
 8005da2:	4a10      	ldr	r2, [pc, #64]	@ (8005de4 <ReadBatteryVoltage+0xc0>)
 8005da4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005da6:	4a07      	ldr	r2, [pc, #28]	@ (8005dc4 <ReadBatteryVoltage+0xa0>)
 8005da8:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <ReadBatteryVoltage+0xa8>)
 8005daa:	0011      	movs	r1, r2
 8005dac:	0018      	movs	r0, r3
 8005dae:	f006 fabd 	bl	800c32c <HAL_ADC_ConfigChannel>
 8005db2:	1e03      	subs	r3, r0, #0
 8005db4:	d001      	beq.n	8005dba <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005db6:	f001 fb23 	bl	8007400 <Error_Handler>
   }
   return trueValue;
 8005dba:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <ReadBatteryVoltage+0xbc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 }
 8005dbe:	1c18      	adds	r0, r3, #0
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000c98 	.word	0x20000c98
 8005dc8:	38004000 	.word	0x38004000
 8005dcc:	20000cb8 	.word	0x20000cb8
 8005dd0:	2000002c 	.word	0x2000002c
 8005dd4:	00000fff 	.word	0x00000fff
 8005dd8:	20000ca0 	.word	0x20000ca0
 8005ddc:	447a0000 	.word	0x447a0000
 8005de0:	20000ca4 	.word	0x20000ca4
 8005de4:	00001001 	.word	0x00001001

08005de8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005dec:	4b27      	ldr	r3, [pc, #156]	@ (8005e8c <ReadSolarVoltage+0xa4>)
 8005dee:	4a28      	ldr	r2, [pc, #160]	@ (8005e90 <ReadSolarVoltage+0xa8>)
 8005df0:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005df2:	4b26      	ldr	r3, [pc, #152]	@ (8005e8c <ReadSolarVoltage+0xa4>)
 8005df4:	2280      	movs	r2, #128	@ 0x80
 8005df6:	0152      	lsls	r2, r2, #5
 8005df8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005dfa:	4a24      	ldr	r2, [pc, #144]	@ (8005e8c <ReadSolarVoltage+0xa4>)
 8005dfc:	4b25      	ldr	r3, [pc, #148]	@ (8005e94 <ReadSolarVoltage+0xac>)
 8005dfe:	0011      	movs	r1, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f006 fa93 	bl	800c32c <HAL_ADC_ConfigChannel>
 8005e06:	1e03      	subs	r3, r0, #0
 8005e08:	d001      	beq.n	8005e0e <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005e0a:	f001 faf9 	bl	8007400 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005e0e:	4b21      	ldr	r3, [pc, #132]	@ (8005e94 <ReadSolarVoltage+0xac>)
 8005e10:	0018      	movs	r0, r3
 8005e12:	f006 f98f 	bl	800c134 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005e16:	4b1f      	ldr	r3, [pc, #124]	@ (8005e94 <ReadSolarVoltage+0xac>)
 8005e18:	2101      	movs	r1, #1
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f006 f9de 	bl	800c1dc <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005e20:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <ReadSolarVoltage+0xac>)
 8005e22:	0018      	movs	r0, r3
 8005e24:	f006 fa76 	bl	800c314 <HAL_ADC_GetValue>
 8005e28:	0002      	movs	r2, r0
 8005e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e98 <ReadSolarVoltage+0xb0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	435a      	muls	r2, r3
 8005e30:	0013      	movs	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	189b      	adds	r3, r3, r2
 8005e36:	4919      	ldr	r1, [pc, #100]	@ (8005e9c <ReadSolarVoltage+0xb4>)
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7fa f9b3 	bl	80001a4 <__udivsi3>
 8005e3e:	0003      	movs	r3, r0
 8005e40:	001a      	movs	r2, r3
 8005e42:	4b17      	ldr	r3, [pc, #92]	@ (8005ea0 <ReadSolarVoltage+0xb8>)
 8005e44:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005e46:	4b16      	ldr	r3, [pc, #88]	@ (8005ea0 <ReadSolarVoltage+0xb8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7fb fc0c 	bl	8001668 <__aeabi_ui2f>
 8005e50:	1c03      	adds	r3, r0, #0
 8005e52:	4914      	ldr	r1, [pc, #80]	@ (8005ea4 <ReadSolarVoltage+0xbc>)
 8005e54:	1c18      	adds	r0, r3, #0
 8005e56:	f7fa febd 	bl	8000bd4 <__aeabi_fdiv>
 8005e5a:	1c03      	adds	r3, r0, #0
 8005e5c:	1c1a      	adds	r2, r3, #0
 8005e5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <ReadSolarVoltage+0xc0>)
 8005e60:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005e62:	4b0a      	ldr	r3, [pc, #40]	@ (8005e8c <ReadSolarVoltage+0xa4>)
 8005e64:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <ReadSolarVoltage+0xa8>)
 8005e66:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005e68:	4b08      	ldr	r3, [pc, #32]	@ (8005e8c <ReadSolarVoltage+0xa4>)
 8005e6a:	4a10      	ldr	r2, [pc, #64]	@ (8005eac <ReadSolarVoltage+0xc4>)
 8005e6c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e6e:	4a07      	ldr	r2, [pc, #28]	@ (8005e8c <ReadSolarVoltage+0xa4>)
 8005e70:	4b08      	ldr	r3, [pc, #32]	@ (8005e94 <ReadSolarVoltage+0xac>)
 8005e72:	0011      	movs	r1, r2
 8005e74:	0018      	movs	r0, r3
 8005e76:	f006 fa59 	bl	800c32c <HAL_ADC_ConfigChannel>
 8005e7a:	1e03      	subs	r3, r0, #0
 8005e7c:	d001      	beq.n	8005e82 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005e7e:	f001 fabf 	bl	8007400 <Error_Handler>
   }
   return trueValue;
 8005e82:	4b09      	ldr	r3, [pc, #36]	@ (8005ea8 <ReadSolarVoltage+0xc0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 }
 8005e86:	1c18      	adds	r0, r3, #0
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20000c98 	.word	0x20000c98
 8005e90:	3c008000 	.word	0x3c008000
 8005e94:	20000cb8 	.word	0x20000cb8
 8005e98:	2000002c 	.word	0x2000002c
 8005e9c:	00000fff 	.word	0x00000fff
 8005ea0:	20000ca8 	.word	0x20000ca8
 8005ea4:	447a0000 	.word	0x447a0000
 8005ea8:	20000cac 	.word	0x20000cac
 8005eac:	00001001 	.word	0x00001001

08005eb0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005eb4:	23a0      	movs	r3, #160	@ 0xa0
 8005eb6:	05db      	lsls	r3, r3, #23
 8005eb8:	2180      	movs	r1, #128	@ 0x80
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f007 f9bc 	bl	800d238 <HAL_GPIO_ReadPin>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	1e5a      	subs	r2, r3, #1
 8005ec4:	4193      	sbcs	r3, r2
 8005ec6:	b2db      	uxtb	r3, r3
}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	021a      	lsls	r2, r3, #8
 8005ed6:	23a0      	movs	r3, #160	@ 0xa0
 8005ed8:	05db      	lsls	r3, r3, #23
 8005eda:	0011      	movs	r1, r2
 8005edc:	0018      	movs	r0, r3
 8005ede:	f007 f9ab 	bl	800d238 <HAL_GPIO_ReadPin>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	1e5a      	subs	r2, r3, #1
 8005ee6:	4193      	sbcs	r3, r2
 8005ee8:	b2db      	uxtb	r3, r3
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005ef4:	4b05      	ldr	r3, [pc, #20]	@ (8005f0c <UserButton_Pressed+0x1c>)
 8005ef6:	2104      	movs	r1, #4
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f007 f99d 	bl	800d238 <HAL_GPIO_ReadPin>
 8005efe:	0003      	movs	r3, r0
 8005f00:	425a      	negs	r2, r3
 8005f02:	4153      	adcs	r3, r2
 8005f04:	b2db      	uxtb	r3, r3
}
 8005f06:	0018      	movs	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	50000c00 	.word	0x50000c00

08005f10 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	0008      	movs	r0, r1
 8005f1a:	0011      	movs	r1, r2
 8005f1c:	1cfb      	adds	r3, r7, #3
 8005f1e:	1c02      	adds	r2, r0, #0
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	1cbb      	adds	r3, r7, #2
 8005f24:	1c0a      	adds	r2, r1, #0
 8005f26:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8005f28:	230e      	movs	r3, #14
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8005f30:	230f      	movs	r3, #15
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	1cfa      	adds	r2, r7, #3
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e015      	b.n	8005f68 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8005f3c:	200f      	movs	r0, #15
 8005f3e:	183b      	adds	r3, r7, r0
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	18d2      	adds	r2, r2, r3
 8005f46:	240e      	movs	r4, #14
 8005f48:	193b      	adds	r3, r7, r4
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	7811      	ldrb	r1, [r2, #0]
 8005f4e:	2208      	movs	r2, #8
 8005f50:	18ba      	adds	r2, r7, r2
 8005f52:	54d1      	strb	r1, [r2, r3]
    pos++;
 8005f54:	193b      	adds	r3, r7, r4
 8005f56:	781a      	ldrb	r2, [r3, #0]
 8005f58:	193b      	adds	r3, r7, r4
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8005f5e:	183b      	adds	r3, r7, r0
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	183b      	adds	r3, r7, r0
 8005f64:	3201      	adds	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	200f      	movs	r0, #15
 8005f6a:	183a      	adds	r2, r7, r0
 8005f6c:	1cbb      	adds	r3, r7, #2
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d9e2      	bls.n	8005f3c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8005f76:	230e      	movs	r3, #14
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	18ba      	adds	r2, r7, r2
 8005f80:	2100      	movs	r1, #0
 8005f82:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8005f84:	1cfb      	adds	r3, r7, #3
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b13      	cmp	r3, #19
 8005f8a:	d849      	bhi.n	8006020 <aBuff2int+0x110>
    if (start == 17) { //month
 8005f8c:	1cfb      	adds	r3, r7, #3
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b11      	cmp	r3, #17
 8005f92:	d122      	bne.n	8005fda <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8005f94:	183b      	adds	r3, r7, r0
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e018      	b.n	8005fce <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8005f9c:	240f      	movs	r4, #15
 8005f9e:	193b      	adds	r3, r7, r4
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	4b25      	ldr	r3, [pc, #148]	@ (8006038 <aBuff2int+0x128>)
 8005fa4:	0092      	lsls	r2, r2, #2
 8005fa6:	58d2      	ldr	r2, [r2, r3]
 8005fa8:	2308      	movs	r3, #8
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	0011      	movs	r1, r2
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7fa f8d2 	bl	8000158 <strcmp>
 8005fb4:	1e03      	subs	r3, r0, #0
 8005fb6:	d104      	bne.n	8005fc2 <aBuff2int+0xb2>
          return i+1;
 8005fb8:	193b      	adds	r3, r7, r4
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	e035      	b.n	800602e <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8005fc2:	210f      	movs	r1, #15
 8005fc4:	187b      	adds	r3, r7, r1
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	3201      	adds	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	230f      	movs	r3, #15
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b0b      	cmp	r3, #11
 8005fd6:	d9e1      	bls.n	8005f9c <aBuff2int+0x8c>
 8005fd8:	e022      	b.n	8006020 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8005fda:	230f      	movs	r3, #15
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	e018      	b.n	8006016 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8005fe4:	240f      	movs	r4, #15
 8005fe6:	193b      	adds	r3, r7, r4
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	4b14      	ldr	r3, [pc, #80]	@ (800603c <aBuff2int+0x12c>)
 8005fec:	0092      	lsls	r2, r2, #2
 8005fee:	58d2      	ldr	r2, [r2, r3]
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	0011      	movs	r1, r2
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f7fa f8ae 	bl	8000158 <strcmp>
 8005ffc:	1e03      	subs	r3, r0, #0
 8005ffe:	d104      	bne.n	800600a <aBuff2int+0xfa>
          return i+1;
 8006000:	193b      	adds	r3, r7, r4
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	e011      	b.n	800602e <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800600a:	210f      	movs	r1, #15
 800600c:	187b      	adds	r3, r7, r1
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	187b      	adds	r3, r7, r1
 8006012:	3201      	adds	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	230f      	movs	r3, #15
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b06      	cmp	r3, #6
 800601e:	d9e1      	bls.n	8005fe4 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006020:	2308      	movs	r3, #8
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	0018      	movs	r0, r3
 8006026:	f014 fd68 	bl	801aafa <atoi>
 800602a:	0003      	movs	r3, r0
 800602c:	b2db      	uxtb	r3, r3
}
 800602e:	0018      	movs	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	b005      	add	sp, #20
 8006034:	bd90      	pop	{r4, r7, pc}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	2000004c 	.word	0x2000004c
 800603c:	20000030 	.word	0x20000030

08006040 <ParseTime>:

void ParseTime(char* buffer) {
 8006040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006042:	b08b      	sub	sp, #44	@ 0x2c
 8006044:	af04      	add	r7, sp, #16
 8006046:	6078      	str	r0, [r7, #4]
  uint8_t year, month, day, weekday, hours, minutes, seconds;
  uint8_t dag, maand, jaar, weekdag, uren, minuten, seconden;
  hours = aBuff2int(buffer, 24, 25);
 8006048:	2517      	movs	r5, #23
 800604a:	197c      	adds	r4, r7, r5
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2219      	movs	r2, #25
 8006050:	2118      	movs	r1, #24
 8006052:	0018      	movs	r0, r3
 8006054:	f7ff ff5c 	bl	8005f10 <aBuff2int>
 8006058:	0003      	movs	r3, r0
 800605a:	7023      	strb	r3, [r4, #0]
  minutes = aBuff2int(buffer, 27, 28);
 800605c:	2616      	movs	r6, #22
 800605e:	19bc      	adds	r4, r7, r6
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	221c      	movs	r2, #28
 8006064:	211b      	movs	r1, #27
 8006066:	0018      	movs	r0, r3
 8006068:	f7ff ff52 	bl	8005f10 <aBuff2int>
 800606c:	0003      	movs	r3, r0
 800606e:	7023      	strb	r3, [r4, #0]
  seconds = aBuff2int(buffer, 30, 31);
 8006070:	2315      	movs	r3, #21
 8006072:	18fc      	adds	r4, r7, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	221f      	movs	r2, #31
 8006078:	211e      	movs	r1, #30
 800607a:	0018      	movs	r0, r3
 800607c:	f7ff ff48 	bl	8005f10 <aBuff2int>
 8006080:	0003      	movs	r3, r0
 8006082:	7023      	strb	r3, [r4, #0]
  RTC_SetTime(&hrtc, hours, minutes, seconds);
 8006084:	2315      	movs	r3, #21
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	781c      	ldrb	r4, [r3, #0]
 800608a:	19bb      	adds	r3, r7, r6
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	197b      	adds	r3, r7, r5
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	483a      	ldr	r0, [pc, #232]	@ (800617c <ParseTime+0x13c>)
 8006094:	0023      	movs	r3, r4
 8006096:	f000 f875 	bl	8006184 <RTC_SetTime>
  year = aBuff2int(buffer, 35, 36);
 800609a:	2514      	movs	r5, #20
 800609c:	197c      	adds	r4, r7, r5
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2224      	movs	r2, #36	@ 0x24
 80060a2:	2123      	movs	r1, #35	@ 0x23
 80060a4:	0018      	movs	r0, r3
 80060a6:	f7ff ff33 	bl	8005f10 <aBuff2int>
 80060aa:	0003      	movs	r3, r0
 80060ac:	7023      	strb	r3, [r4, #0]
  month = aBuff2int(buffer, 17, 19);
 80060ae:	2613      	movs	r6, #19
 80060b0:	19bc      	adds	r4, r7, r6
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2213      	movs	r2, #19
 80060b6:	2111      	movs	r1, #17
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7ff ff29 	bl	8005f10 <aBuff2int>
 80060be:	0003      	movs	r3, r0
 80060c0:	7023      	strb	r3, [r4, #0]
  day = aBuff2int(buffer, 21,22);
 80060c2:	2312      	movs	r3, #18
 80060c4:	18fc      	adds	r4, r7, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2216      	movs	r2, #22
 80060ca:	2115      	movs	r1, #21
 80060cc:	0018      	movs	r0, r3
 80060ce:	f7ff ff1f 	bl	8005f10 <aBuff2int>
 80060d2:	0003      	movs	r3, r0
 80060d4:	7023      	strb	r3, [r4, #0]
  weekday = aBuff2int(buffer, 13, 15);
 80060d6:	2211      	movs	r2, #17
 80060d8:	18bc      	adds	r4, r7, r2
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	220f      	movs	r2, #15
 80060de:	210d      	movs	r1, #13
 80060e0:	0018      	movs	r0, r3
 80060e2:	f7ff ff15 	bl	8005f10 <aBuff2int>
 80060e6:	0003      	movs	r3, r0
 80060e8:	7023      	strb	r3, [r4, #0]
  RTC_SetDate(&hrtc, weekday, day, month, year);
 80060ea:	19bb      	adds	r3, r7, r6
 80060ec:	781c      	ldrb	r4, [r3, #0]
 80060ee:	2312      	movs	r3, #18
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	2311      	movs	r3, #17
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	7819      	ldrb	r1, [r3, #0]
 80060fa:	4820      	ldr	r0, [pc, #128]	@ (800617c <ParseTime+0x13c>)
 80060fc:	197b      	adds	r3, r7, r5
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	0023      	movs	r3, r4
 8006104:	f000 f8ce 	bl	80062a4 <RTC_SetDate>
  RTC_GetDate(&hrtc, &weekdag, &dag, &maand, &jaar);
 8006108:	230f      	movs	r3, #15
 800610a:	18fc      	adds	r4, r7, r3
 800610c:	2210      	movs	r2, #16
 800610e:	18ba      	adds	r2, r7, r2
 8006110:	210d      	movs	r1, #13
 8006112:	1879      	adds	r1, r7, r1
 8006114:	4819      	ldr	r0, [pc, #100]	@ (800617c <ParseTime+0x13c>)
 8006116:	250e      	movs	r5, #14
 8006118:	197b      	adds	r3, r7, r5
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	0023      	movs	r3, r4
 800611e:	f000 f8fd 	bl	800631c <RTC_GetDate>
  RTC_GetTime(&hrtc, &uren, &minuten, &seconden);
 8006122:	260a      	movs	r6, #10
 8006124:	19bb      	adds	r3, r7, r6
 8006126:	210b      	movs	r1, #11
 8006128:	000d      	movs	r5, r1
 800612a:	187a      	adds	r2, r7, r1
 800612c:	240c      	movs	r4, #12
 800612e:	1939      	adds	r1, r7, r4
 8006130:	4812      	ldr	r0, [pc, #72]	@ (800617c <ParseTime+0x13c>)
 8006132:	f000 f885 	bl	8006240 <RTC_GetTime>
  printf("time from RTC is: %02d:%02d:%02d, date: %02d-%02d-%02d\r\n", uren, minuten, seconden, dag, maand, jaar);
 8006136:	193b      	adds	r3, r7, r4
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	001c      	movs	r4, r3
 800613c:	0029      	movs	r1, r5
 800613e:	187b      	adds	r3, r7, r1
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	001d      	movs	r5, r3
 8006144:	19bb      	adds	r3, r7, r6
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	001e      	movs	r6, r3
 800614a:	2210      	movs	r2, #16
 800614c:	18bb      	adds	r3, r7, r2
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	001a      	movs	r2, r3
 8006152:	230f      	movs	r3, #15
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	0019      	movs	r1, r3
 800615a:	230e      	movs	r3, #14
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	4807      	ldr	r0, [pc, #28]	@ (8006180 <ParseTime+0x140>)
 8006162:	9302      	str	r3, [sp, #8]
 8006164:	9101      	str	r1, [sp, #4]
 8006166:	9200      	str	r2, [sp, #0]
 8006168:	0033      	movs	r3, r6
 800616a:	002a      	movs	r2, r5
 800616c:	0021      	movs	r1, r4
 800616e:	f016 f89f 	bl	801c2b0 <iprintf>
}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	46bd      	mov	sp, r7
 8006176:	b007      	add	sp, #28
 8006178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617a:	46c0      	nop			@ (mov r8, r8)
 800617c:	20001198 	.word	0x20001198
 8006180:	0801fd04 	.word	0x0801fd04

08006184 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b089      	sub	sp, #36	@ 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	000c      	movs	r4, r1
 800618e:	0010      	movs	r0, r2
 8006190:	0019      	movs	r1, r3
 8006192:	1cfb      	adds	r3, r7, #3
 8006194:	1c22      	adds	r2, r4, #0
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	1cbb      	adds	r3, r7, #2
 800619a:	1c02      	adds	r2, r0, #0
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	1c7b      	adds	r3, r7, #1
 80061a0:	1c0a      	adds	r2, r1, #0
 80061a2:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 80061a4:	240c      	movs	r4, #12
 80061a6:	193b      	adds	r3, r7, r4
 80061a8:	0018      	movs	r0, r3
 80061aa:	2314      	movs	r3, #20
 80061ac:	001a      	movs	r2, r3
 80061ae:	2100      	movs	r1, #0
 80061b0:	f016 f932 	bl	801c418 <memset>

    sTime.Hours = hours;
 80061b4:	0021      	movs	r1, r4
 80061b6:	187b      	adds	r3, r7, r1
 80061b8:	1cfa      	adds	r2, r7, #3
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80061be:	187b      	adds	r3, r7, r1
 80061c0:	1cba      	adds	r2, r7, #2
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80061c6:	187b      	adds	r3, r7, r1
 80061c8:	1c7a      	adds	r2, r7, #1
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 80061ce:	187b      	adds	r3, r7, r1
 80061d0:	2200      	movs	r2, #0
 80061d2:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80061d4:	187b      	adds	r3, r7, r1
 80061d6:	2200      	movs	r2, #0
 80061d8:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80061da:	187b      	adds	r3, r7, r1
 80061dc:	2200      	movs	r2, #0
 80061de:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80061e0:	1879      	adds	r1, r7, r1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	0018      	movs	r0, r3
 80061e8:	f00c f9d2 	bl	8012590 <HAL_RTC_SetTime>
 80061ec:	1e03      	subs	r3, r0, #0
 80061ee:	d005      	beq.n	80061fc <RTC_SetTime+0x78>
        // Foutafhandeling
      Debug("Error setting time to RTC");
 80061f0:	4a04      	ldr	r2, [pc, #16]	@ (8006204 <RTC_SetTime+0x80>)
 80061f2:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <RTC_SetTime+0x84>)
 80061f4:	0019      	movs	r1, r3
 80061f6:	2003      	movs	r0, #3
 80061f8:	f005 fa3a 	bl	800b670 <CreateLine>

    }
}
 80061fc:	46c0      	nop			@ (mov r8, r8)
 80061fe:	46bd      	mov	sp, r7
 8006200:	b009      	add	sp, #36	@ 0x24
 8006202:	bd90      	pop	{r4, r7, pc}
 8006204:	0801fd40 	.word	0x0801fd40
 8006208:	0801fd5c 	.word	0x0801fd5c

0800620c <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 8006214:	4b08      	ldr	r3, [pc, #32]	@ (8006238 <InitClock+0x2c>)
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 800621a:	4b07      	ldr	r3, [pc, #28]	@ (8006238 <InitClock+0x2c>)
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	4b07      	ldr	r3, [pc, #28]	@ (800623c <InitClock+0x30>)
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	4b06      	ldr	r3, [pc, #24]	@ (800623c <InitClock+0x30>)
 8006224:	785a      	ldrb	r2, [r3, #1]
 8006226:	4b05      	ldr	r3, [pc, #20]	@ (800623c <InitClock+0x30>)
 8006228:	789b      	ldrb	r3, [r3, #2]
 800622a:	f7ff ffab 	bl	8006184 <RTC_SetTime>
}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	46bd      	mov	sp, r7
 8006232:	b002      	add	sp, #8
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	20000cb4 	.word	0x20000cb4
 800623c:	20000cb0 	.word	0x20000cb0

08006240 <RTC_GetTime>:
// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b08b      	sub	sp, #44	@ 0x2c
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef gTime = {0};
 800624e:	2414      	movs	r4, #20
 8006250:	193b      	adds	r3, r7, r4
 8006252:	0018      	movs	r0, r3
 8006254:	2314      	movs	r3, #20
 8006256:	001a      	movs	r2, r3
 8006258:	2100      	movs	r1, #0
 800625a:	f016 f8dd 	bl	801c418 <memset>

    if (HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800625e:	1939      	adds	r1, r7, r4
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	0018      	movs	r0, r3
 8006266:	f00c fa3d 	bl	80126e4 <HAL_RTC_GetTime>
 800626a:	1e03      	subs	r3, r0, #0
 800626c:	d005      	beq.n	800627a <RTC_GetTime+0x3a>
        // Foutafhandeling
      Debug("Error getting time from RTC");
 800626e:	4a0b      	ldr	r2, [pc, #44]	@ (800629c <RTC_GetTime+0x5c>)
 8006270:	4b0b      	ldr	r3, [pc, #44]	@ (80062a0 <RTC_GetTime+0x60>)
 8006272:	0019      	movs	r1, r3
 8006274:	2003      	movs	r0, #3
 8006276:	f005 f9fb 	bl	800b670 <CreateLine>
    }

    *hours = gTime.Hours;
 800627a:	2114      	movs	r1, #20
 800627c:	187b      	adds	r3, r7, r1
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	701a      	strb	r2, [r3, #0]
    *minutes = gTime.Minutes;
 8006284:	187b      	adds	r3, r7, r1
 8006286:	785a      	ldrb	r2, [r3, #1]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	701a      	strb	r2, [r3, #0]
    *seconds = gTime.Seconds;
 800628c:	187b      	adds	r3, r7, r1
 800628e:	789a      	ldrb	r2, [r3, #2]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	701a      	strb	r2, [r3, #0]
}
 8006294:	46c0      	nop			@ (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	b00b      	add	sp, #44	@ 0x2c
 800629a:	bd90      	pop	{r4, r7, pc}
 800629c:	0801fd60 	.word	0x0801fd60
 80062a0:	0801fd5c 	.word	0x0801fd5c

080062a4 <RTC_SetDate>:
// Functie om de datum in te stellen
void RTC_SetDate(RTC_HandleTypeDef *hrtc, uint8_t weekday, uint8_t day, uint8_t month, uint8_t year) {
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	000c      	movs	r4, r1
 80062ae:	0010      	movs	r0, r2
 80062b0:	0019      	movs	r1, r3
 80062b2:	1cfb      	adds	r3, r7, #3
 80062b4:	1c22      	adds	r2, r4, #0
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	1cbb      	adds	r3, r7, #2
 80062ba:	1c02      	adds	r2, r0, #0
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	1c7b      	adds	r3, r7, #1
 80062c0:	1c0a      	adds	r2, r1, #0
 80062c2:	701a      	strb	r2, [r3, #0]
    RTC_DateTypeDef sDate = {0};
 80062c4:	210c      	movs	r1, #12
 80062c6:	187b      	adds	r3, r7, r1
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

    sDate.WeekDay = weekday;
 80062cc:	187b      	adds	r3, r7, r1
 80062ce:	1cfa      	adds	r2, r7, #3
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	701a      	strb	r2, [r3, #0]
    sDate.Date = day;
 80062d4:	187b      	adds	r3, r7, r1
 80062d6:	1cba      	adds	r2, r7, #2
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	709a      	strb	r2, [r3, #2]
    sDate.Month = month;
 80062dc:	187b      	adds	r3, r7, r1
 80062de:	1c7a      	adds	r2, r7, #1
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	705a      	strb	r2, [r3, #1]
    sDate.Year = year;  // Jaartal zonder eeuw (bv. 2024 -> 24)
 80062e4:	187a      	adds	r2, r7, r1
 80062e6:	2320      	movs	r3, #32
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	70d3      	strb	r3, [r2, #3]

    if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80062ee:	1879      	adds	r1, r7, r1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	0018      	movs	r0, r3
 80062f6:	f00c fa53 	bl	80127a0 <HAL_RTC_SetDate>
 80062fa:	1e03      	subs	r3, r0, #0
 80062fc:	d005      	beq.n	800630a <RTC_SetDate+0x66>
        // Foutafhandeling
      Debug("Error setting date to RTC");
 80062fe:	4a05      	ldr	r2, [pc, #20]	@ (8006314 <RTC_SetDate+0x70>)
 8006300:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <RTC_SetDate+0x74>)
 8006302:	0019      	movs	r1, r3
 8006304:	2003      	movs	r0, #3
 8006306:	f005 f9b3 	bl	800b670 <CreateLine>
    }
}
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b005      	add	sp, #20
 8006310:	bd90      	pop	{r4, r7, pc}
 8006312:	46c0      	nop			@ (mov r8, r8)
 8006314:	0801fd7c 	.word	0x0801fd7c
 8006318:	0801fd5c 	.word	0x0801fd5c

0800631c <RTC_GetDate>:

// Functie om de datum uit te lezen
void RTC_GetDate(RTC_HandleTypeDef *hrtc, uint8_t *weekday, uint8_t *day, uint8_t *month, uint8_t *year) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
    RTC_DateTypeDef gDate = {0};
 800632a:	2114      	movs	r1, #20
 800632c:	187b      	adds	r3, r7, r1
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]

    if (HAL_RTC_GetDate(hrtc, &gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006332:	1879      	adds	r1, r7, r1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	0018      	movs	r0, r3
 800633a:	f00c fac5 	bl	80128c8 <HAL_RTC_GetDate>
 800633e:	1e03      	subs	r3, r0, #0
 8006340:	d005      	beq.n	800634e <RTC_GetDate+0x32>
        // Foutafhandeling
      Debug("Error getting date from RTC");
 8006342:	4a0d      	ldr	r2, [pc, #52]	@ (8006378 <RTC_GetDate+0x5c>)
 8006344:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <RTC_GetDate+0x60>)
 8006346:	0019      	movs	r1, r3
 8006348:	2003      	movs	r0, #3
 800634a:	f005 f991 	bl	800b670 <CreateLine>

    }

    *weekday = gDate.WeekDay;
 800634e:	2114      	movs	r1, #20
 8006350:	187b      	adds	r3, r7, r1
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	701a      	strb	r2, [r3, #0]
    *day = gDate.Date;
 8006358:	187b      	adds	r3, r7, r1
 800635a:	789a      	ldrb	r2, [r3, #2]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	701a      	strb	r2, [r3, #0]
    *month = gDate.Month;
 8006360:	187b      	adds	r3, r7, r1
 8006362:	785a      	ldrb	r2, [r3, #1]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	701a      	strb	r2, [r3, #0]
    *year = gDate.Year;
 8006368:	187b      	adds	r3, r7, r1
 800636a:	78da      	ldrb	r2, [r3, #3]
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	701a      	strb	r2, [r3, #0]
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b006      	add	sp, #24
 8006376:	bd80      	pop	{r7, pc}
 8006378:	0801fd98 	.word	0x0801fd98
 800637c:	0801fd5c 	.word	0x0801fd5c

08006380 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006386:	003b      	movs	r3, r7
 8006388:	0018      	movs	r0, r3
 800638a:	2308      	movs	r3, #8
 800638c:	001a      	movs	r2, r3
 800638e:	2100      	movs	r1, #0
 8006390:	f016 f842 	bl	801c418 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006394:	4b30      	ldr	r3, [pc, #192]	@ (8006458 <MX_ADC_Init+0xd8>)
 8006396:	4a31      	ldr	r2, [pc, #196]	@ (800645c <MX_ADC_Init+0xdc>)
 8006398:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800639a:	4b2f      	ldr	r3, [pc, #188]	@ (8006458 <MX_ADC_Init+0xd8>)
 800639c:	2200      	movs	r2, #0
 800639e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80063a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063a2:	22c0      	movs	r2, #192	@ 0xc0
 80063a4:	0612      	lsls	r2, r2, #24
 80063a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80063a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80063ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80063b4:	4b28      	ldr	r3, [pc, #160]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063ba:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063bc:	2200      	movs	r2, #0
 80063be:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80063c0:	4b25      	ldr	r3, [pc, #148]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063c2:	2220      	movs	r2, #32
 80063c4:	2100      	movs	r1, #0
 80063c6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80063c8:	4b23      	ldr	r3, [pc, #140]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063ca:	2221      	movs	r2, #33	@ 0x21
 80063cc:	2101      	movs	r1, #1
 80063ce:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063d0:	4b21      	ldr	r3, [pc, #132]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063d6:	4b20      	ldr	r3, [pc, #128]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063d8:	22c2      	movs	r2, #194	@ 0xc2
 80063da:	32ff      	adds	r2, #255	@ 0xff
 80063dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80063de:	4b1e      	ldr	r3, [pc, #120]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063e0:	222c      	movs	r2, #44	@ 0x2c
 80063e2:	2100      	movs	r1, #0
 80063e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80063e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063e8:	2204      	movs	r2, #4
 80063ea:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80063ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80063f2:	4b19      	ldr	r3, [pc, #100]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80063f8:	4b17      	ldr	r3, [pc, #92]	@ (8006458 <MX_ADC_Init+0xd8>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80063fe:	4b16      	ldr	r3, [pc, #88]	@ (8006458 <MX_ADC_Init+0xd8>)
 8006400:	2200      	movs	r2, #0
 8006402:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006404:	4b14      	ldr	r3, [pc, #80]	@ (8006458 <MX_ADC_Init+0xd8>)
 8006406:	0018      	movs	r0, r3
 8006408:	f005 fd20 	bl	800be4c <HAL_ADC_Init>
 800640c:	1e03      	subs	r3, r0, #0
 800640e:	d001      	beq.n	8006414 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006410:	f000 fff6 	bl	8007400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006414:	003b      	movs	r3, r7
 8006416:	4a12      	ldr	r2, [pc, #72]	@ (8006460 <MX_ADC_Init+0xe0>)
 8006418:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800641a:	003b      	movs	r3, r7
 800641c:	2280      	movs	r2, #128	@ 0x80
 800641e:	0152      	lsls	r2, r2, #5
 8006420:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006422:	003a      	movs	r2, r7
 8006424:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <MX_ADC_Init+0xd8>)
 8006426:	0011      	movs	r1, r2
 8006428:	0018      	movs	r0, r3
 800642a:	f005 ff7f 	bl	800c32c <HAL_ADC_ConfigChannel>
 800642e:	1e03      	subs	r3, r0, #0
 8006430:	d001      	beq.n	8006436 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006432:	f000 ffe5 	bl	8007400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006436:	003b      	movs	r3, r7
 8006438:	4a0a      	ldr	r2, [pc, #40]	@ (8006464 <MX_ADC_Init+0xe4>)
 800643a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800643c:	003a      	movs	r2, r7
 800643e:	4b06      	ldr	r3, [pc, #24]	@ (8006458 <MX_ADC_Init+0xd8>)
 8006440:	0011      	movs	r1, r2
 8006442:	0018      	movs	r0, r3
 8006444:	f005 ff72 	bl	800c32c <HAL_ADC_ConfigChannel>
 8006448:	1e03      	subs	r3, r0, #0
 800644a:	d001      	beq.n	8006450 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800644c:	f000 ffd8 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006450:	46c0      	nop			@ (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	b002      	add	sp, #8
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000cb8 	.word	0x20000cb8
 800645c:	40012400 	.word	0x40012400
 8006460:	38004000 	.word	0x38004000
 8006464:	3c008000 	.word	0x3c008000

08006468 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b089      	sub	sp, #36	@ 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006470:	240c      	movs	r4, #12
 8006472:	193b      	adds	r3, r7, r4
 8006474:	0018      	movs	r0, r3
 8006476:	2314      	movs	r3, #20
 8006478:	001a      	movs	r2, r3
 800647a:	2100      	movs	r1, #0
 800647c:	f015 ffcc 	bl	801c418 <memset>
  if(adcHandle->Instance==ADC1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a14      	ldr	r2, [pc, #80]	@ (80064d8 <HAL_ADC_MspInit+0x70>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d121      	bne.n	80064ce <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800648a:	4b14      	ldr	r3, [pc, #80]	@ (80064dc <HAL_ADC_MspInit+0x74>)
 800648c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800648e:	4b13      	ldr	r3, [pc, #76]	@ (80064dc <HAL_ADC_MspInit+0x74>)
 8006490:	2180      	movs	r1, #128	@ 0x80
 8006492:	0089      	lsls	r1, r1, #2
 8006494:	430a      	orrs	r2, r1
 8006496:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006498:	4b10      	ldr	r3, [pc, #64]	@ (80064dc <HAL_ADC_MspInit+0x74>)
 800649a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649c:	4b0f      	ldr	r3, [pc, #60]	@ (80064dc <HAL_ADC_MspInit+0x74>)
 800649e:	2104      	movs	r1, #4
 80064a0:	430a      	orrs	r2, r1
 80064a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064a4:	4b0d      	ldr	r3, [pc, #52]	@ (80064dc <HAL_ADC_MspInit+0x74>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	2204      	movs	r2, #4
 80064aa:	4013      	ands	r3, r2
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80064b0:	193b      	adds	r3, r7, r4
 80064b2:	2230      	movs	r2, #48	@ 0x30
 80064b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064b6:	193b      	adds	r3, r7, r4
 80064b8:	2203      	movs	r2, #3
 80064ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064bc:	193b      	adds	r3, r7, r4
 80064be:	2200      	movs	r2, #0
 80064c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064c2:	193b      	adds	r3, r7, r4
 80064c4:	4a06      	ldr	r2, [pc, #24]	@ (80064e0 <HAL_ADC_MspInit+0x78>)
 80064c6:	0019      	movs	r1, r3
 80064c8:	0010      	movs	r0, r2
 80064ca:	f006 fd37 	bl	800cf3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80064ce:	46c0      	nop			@ (mov r8, r8)
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b009      	add	sp, #36	@ 0x24
 80064d4:	bd90      	pop	{r4, r7, pc}
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	40012400 	.word	0x40012400
 80064dc:	40021000 	.word	0x40021000
 80064e0:	50000800 	.word	0x50000800

080064e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ea:	4b10      	ldr	r3, [pc, #64]	@ (800652c <MX_DMA_Init+0x48>)
 80064ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064ee:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <MX_DMA_Init+0x48>)
 80064f0:	2101      	movs	r1, #1
 80064f2:	430a      	orrs	r2, r1
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80064f6:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <MX_DMA_Init+0x48>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	2201      	movs	r2, #1
 80064fc:	4013      	ands	r3, r2
 80064fe:	607b      	str	r3, [r7, #4]
 8006500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006502:	2200      	movs	r2, #0
 8006504:	2100      	movs	r1, #0
 8006506:	200a      	movs	r0, #10
 8006508:	f006 f8ca 	bl	800c6a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800650c:	200a      	movs	r0, #10
 800650e:	f006 f8dc 	bl	800c6ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006512:	2200      	movs	r2, #0
 8006514:	2103      	movs	r1, #3
 8006516:	200b      	movs	r0, #11
 8006518:	f006 f8c2 	bl	800c6a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800651c:	200b      	movs	r0, #11
 800651e:	f006 f8d4 	bl	800c6ca <HAL_NVIC_EnableIRQ>

}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	46bd      	mov	sp, r7
 8006526:	b002      	add	sp, #8
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			@ (mov r8, r8)
 800652c:	40021000 	.word	0x40021000

08006530 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006540:	d901      	bls.n	8006546 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006542:	237f      	movs	r3, #127	@ 0x7f
 8006544:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006546:	2017      	movs	r0, #23
 8006548:	183b      	adds	r3, r7, r0
 800654a:	490d      	ldr	r1, [pc, #52]	@ (8006580 <accessLUT10log10+0x50>)
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	188a      	adds	r2, r1, r2
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006554:	0001      	movs	r1, r0
 8006556:	187b      	adds	r3, r7, r1
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2206      	movs	r2, #6
 800655c:	4113      	asrs	r3, r2
 800655e:	001a      	movs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006564:	187b      	adds	r3, r7, r1
 8006566:	781a      	ldrb	r2, [r3, #0]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2106      	movs	r1, #6
 800656e:	408b      	lsls	r3, r1
 8006570:	1ad2      	subs	r2, r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	46c0      	nop			@ (mov r8, r8)
 8006578:	46bd      	mov	sp, r7
 800657a:	b006      	add	sp, #24
 800657c:	bd80      	pop	{r7, pc}
 800657e:	46c0      	nop			@ (mov r8, r8)
 8006580:	080206e8 	.word	0x080206e8

08006584 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006584:	b5b0      	push	{r4, r5, r7, lr}
 8006586:	b090      	sub	sp, #64	@ 0x40
 8006588:	af00      	add	r7, sp, #0
 800658a:	6138      	str	r0, [r7, #16]
 800658c:	6179      	str	r1, [r7, #20]
 800658e:	60fa      	str	r2, [r7, #12]
 8006590:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006592:	2308      	movs	r3, #8
 8006594:	001a      	movs	r2, r3
 8006596:	3a20      	subs	r2, #32
 8006598:	2a00      	cmp	r2, #0
 800659a:	db03      	blt.n	80065a4 <efficient10log10+0x20>
 800659c:	2101      	movs	r1, #1
 800659e:	4091      	lsls	r1, r2
 80065a0:	000d      	movs	r5, r1
 80065a2:	e008      	b.n	80065b6 <efficient10log10+0x32>
 80065a4:	2220      	movs	r2, #32
 80065a6:	1ad2      	subs	r2, r2, r3
 80065a8:	2101      	movs	r1, #1
 80065aa:	40d1      	lsrs	r1, r2
 80065ac:	000a      	movs	r2, r1
 80065ae:	2100      	movs	r1, #0
 80065b0:	4099      	lsls	r1, r3
 80065b2:	000d      	movs	r5, r1
 80065b4:	4315      	orrs	r5, r2
 80065b6:	2201      	movs	r2, #1
 80065b8:	409a      	lsls	r2, r3
 80065ba:	0014      	movs	r4, r2
 80065bc:	2201      	movs	r2, #1
 80065be:	4252      	negs	r2, r2
 80065c0:	17d3      	asrs	r3, r2, #31
 80065c2:	1912      	adds	r2, r2, r4
 80065c4:	416b      	adcs	r3, r5
 80065c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80065ca:	2336      	movs	r3, #54	@ 0x36
 80065cc:	2208      	movs	r2, #8
 80065ce:	189b      	adds	r3, r3, r2
 80065d0:	19db      	adds	r3, r3, r7
 80065d2:	2200      	movs	r2, #0
 80065d4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80065d6:	e017      	b.n	8006608 <efficient10log10+0x84>
    {
        P = P >> 1;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	07db      	lsls	r3, r3, #31
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	0852      	lsrs	r2, r2, #1
 80065e0:	603a      	str	r2, [r7, #0]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	603a      	str	r2, [r7, #0]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	687c      	ldr	r4, [r7, #4]
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	617c      	str	r4, [r7, #20]
        bShift++;
 80065f6:	2136      	movs	r1, #54	@ 0x36
 80065f8:	2008      	movs	r0, #8
 80065fa:	180b      	adds	r3, r1, r0
 80065fc:	19db      	adds	r3, r3, r7
 80065fe:	881a      	ldrh	r2, [r3, #0]
 8006600:	180b      	adds	r3, r1, r0
 8006602:	19db      	adds	r3, r3, r7
 8006604:	3201      	adds	r2, #1
 8006606:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660c:	429a      	cmp	r2, r3
 800660e:	d8e3      	bhi.n	80065d8 <efficient10log10+0x54>
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	429a      	cmp	r2, r3
 8006616:	d103      	bne.n	8006620 <efficient10log10+0x9c>
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	429a      	cmp	r2, r3
 800661e:	d8db      	bhi.n	80065d8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	2308      	movs	r3, #8
 8006624:	3b01      	subs	r3, #1
 8006626:	2101      	movs	r1, #1
 8006628:	4099      	lsls	r1, r3
 800662a:	000b      	movs	r3, r1
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8006638:	231c      	movs	r3, #28
 800663a:	2408      	movs	r4, #8
 800663c:	191b      	adds	r3, r3, r4
 800663e:	19da      	adds	r2, r3, r7
 8006640:	2320      	movs	r3, #32
 8006642:	191b      	adds	r3, r3, r4
 8006644:	19d9      	adds	r1, r3, r7
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	0018      	movs	r0, r3
 800664a:	f7ff ff71 	bl	8006530 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800664e:	2215      	movs	r2, #21
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8006654:	2036      	movs	r0, #54	@ 0x36
 8006656:	1902      	adds	r2, r0, r4
 8006658:	19d2      	adds	r2, r2, r7
 800665a:	8812      	ldrh	r2, [r2, #0]
 800665c:	2103      	movs	r1, #3
 800665e:	434a      	muls	r2, r1
 8006660:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006662:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006664:	0021      	movs	r1, r4
 8006666:	1843      	adds	r3, r0, r1
 8006668:	19db      	adds	r3, r3, r7
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	2201      	movs	r2, #1
 800666e:	4353      	muls	r3, r2
 8006670:	2203      	movs	r2, #3
 8006672:	4113      	asrs	r3, r2
 8006674:	001a      	movs	r2, r3
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800667a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800667c:	2314      	movs	r3, #20
 800667e:	185b      	adds	r3, r3, r1
 8006680:	19da      	adds	r2, r3, r7
 8006682:	2318      	movs	r3, #24
 8006684:	185b      	adds	r3, r3, r1
 8006686:	19db      	adds	r3, r3, r7
 8006688:	0011      	movs	r1, r2
 800668a:	0018      	movs	r0, r3
 800668c:	f000 f80a 	bl	80066a4 <correctIntFracNumber>
    integerPart[0] = intPart;
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	601a      	str	r2, [r3, #0]
}
 800669c:	46c0      	nop			@ (mov r8, r8)
 800669e:	46bd      	mov	sp, r7
 80066a0:	b010      	add	sp, #64	@ 0x40
 80066a2:	bdb0      	pop	{r4, r5, r7, pc}

080066a4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80066ae:	e00a      	b.n	80066c6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3b0a      	subs	r3, #10
 80066c0:	001a      	movs	r2, r3
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	dcf0      	bgt.n	80066b0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80066ce:	e00a      	b.n	80066e6 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330a      	adds	r3, #10
 80066e0:	001a      	movs	r2, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3309      	adds	r3, #9
 80066ec:	dbf0      	blt.n	80066d0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da0f      	bge.n	8006716 <correctIntFracNumber+0x72>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd0b      	ble.n	8006716 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3b0a      	subs	r3, #10
 800670e:	001a      	movs	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006714:	e012      	b.n	800673c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dd0e      	ble.n	800673c <correctIntFracNumber+0x98>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da0a      	bge.n	800673c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1e5a      	subs	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330a      	adds	r3, #10
 8006736:	001a      	movs	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	601a      	str	r2, [r3, #0]
}
 800673c:	46c0      	nop			@ (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b002      	add	sp, #8
 8006742:	bd80      	pop	{r7, pc}

08006744 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8006752:	4b0c      	ldr	r3, [pc, #48]	@ (8006784 <Gadget_Init+0x40>)
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f001 fa35 	bl	8007bc4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	0018      	movs	r0, r3
 8006762:	f000 fea7 	bl	80074b4 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0018      	movs	r0, r3
 800676a:	f7fd f8f5 	bl	8003958 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800676e:	4a06      	ldr	r2, [pc, #24]	@ (8006788 <Gadget_Init+0x44>)
 8006770:	4b06      	ldr	r3, [pc, #24]	@ (800678c <Gadget_Init+0x48>)
 8006772:	0019      	movs	r1, r3
 8006774:	2003      	movs	r0, #3
 8006776:	f004 ff7b 	bl	800b670 <CreateLine>
}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	46bd      	mov	sp, r7
 800677e:	b004      	add	sp, #16
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			@ (mov r8, r8)
 8006784:	2000007c 	.word	0x2000007c
 8006788:	0801fdb4 	.word	0x0801fdb4
 800678c:	0801fdc8 	.word	0x0801fdc8

08006790 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  Meas_Test();
 8006794:	f000 ffc6 	bl	8007724 <Meas_Test>
}
 8006798:	46c0      	nop			@ (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <UpkeepGadget>:

bool UpkeepGadget() {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 80067a6:	f001 f97d 	bl	8007aa4 <Meas_Upkeep>
 80067aa:	0003      	movs	r3, r0
 80067ac:	001a      	movs	r2, r3
 80067ae:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <UpkeepGadget+0x4c>)
 80067b0:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 80067b2:	f001 f85d 	bl	8007870 <Mic_Upkeep>
 80067b6:	0003      	movs	r3, r0
 80067b8:	001a      	movs	r2, r3
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <UpkeepGadget+0x50>)
 80067bc:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <UpkeepGadget+0x4c>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d103      	bne.n	80067ce <UpkeepGadget+0x2e>
 80067c6:	4b0a      	ldr	r3, [pc, #40]	@ (80067f0 <UpkeepGadget+0x50>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d001      	beq.n	80067d2 <UpkeepGadget+0x32>
 80067ce:	2201      	movs	r2, #1
 80067d0:	e000      	b.n	80067d4 <UpkeepGadget+0x34>
 80067d2:	2200      	movs	r2, #0
 80067d4:	1dfb      	adds	r3, r7, #7
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	2101      	movs	r1, #1
 80067dc:	400a      	ands	r2, r1
 80067de:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 80067e0:	1dfb      	adds	r3, r7, #7
 80067e2:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000d14 	.word	0x20000d14
 80067f0:	20000d15 	.word	0x20000d15

080067f4 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	0011      	movs	r1, r2
 8006804:	0018      	movs	r0, r3
 8006806:	f002 fb1b 	bl	8008e40 <SGP_Init>
}
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	46bd      	mov	sp, r7
 800680e:	b002      	add	sp, #8
 8006810:	bd80      	pop	{r7, pc}

08006812 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006812:	b580      	push	{r7, lr}
 8006814:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006816:	f002 fb2d 	bl	8008e74 <SGP_StartMeasurement>
}
 800681a:	46c0      	nop			@ (mov r8, r8)
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0018      	movs	r0, r3
 800682c:	f002 fb92 	bl	8008f54 <SGP_GetMeasurementValues>
 8006830:	0003      	movs	r3, r0
}
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b002      	add	sp, #8
 8006838:	bd80      	pop	{r7, pc}

0800683a <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800683a:	b580      	push	{r7, lr}
 800683c:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 800683e:	f002 fd9f 	bl	8009380 <SGP_DeviceConnected>
 8006842:	0003      	movs	r3, r0
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b08b      	sub	sp, #44	@ 0x2c
 8006850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006852:	2414      	movs	r4, #20
 8006854:	193b      	adds	r3, r7, r4
 8006856:	0018      	movs	r0, r3
 8006858:	2314      	movs	r3, #20
 800685a:	001a      	movs	r2, r3
 800685c:	2100      	movs	r1, #0
 800685e:	f015 fddb 	bl	801c418 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006862:	4b7c      	ldr	r3, [pc, #496]	@ (8006a54 <MX_GPIO_Init+0x208>)
 8006864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006866:	4b7b      	ldr	r3, [pc, #492]	@ (8006a54 <MX_GPIO_Init+0x208>)
 8006868:	2104      	movs	r1, #4
 800686a:	430a      	orrs	r2, r1
 800686c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800686e:	4b79      	ldr	r3, [pc, #484]	@ (8006a54 <MX_GPIO_Init+0x208>)
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	2204      	movs	r2, #4
 8006874:	4013      	ands	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800687a:	4b76      	ldr	r3, [pc, #472]	@ (8006a54 <MX_GPIO_Init+0x208>)
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687e:	4b75      	ldr	r3, [pc, #468]	@ (8006a54 <MX_GPIO_Init+0x208>)
 8006880:	2180      	movs	r1, #128	@ 0x80
 8006882:	430a      	orrs	r2, r1
 8006884:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006886:	4b73      	ldr	r3, [pc, #460]	@ (8006a54 <MX_GPIO_Init+0x208>)
 8006888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688a:	2280      	movs	r2, #128	@ 0x80
 800688c:	4013      	ands	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006892:	4b70      	ldr	r3, [pc, #448]	@ (8006a54 <MX_GPIO_Init+0x208>)
 8006894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006896:	4b6f      	ldr	r3, [pc, #444]	@ (8006a54 <MX_GPIO_Init+0x208>)
 8006898:	2101      	movs	r1, #1
 800689a:	430a      	orrs	r2, r1
 800689c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800689e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a54 <MX_GPIO_Init+0x208>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	2201      	movs	r2, #1
 80068a4:	4013      	ands	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006a54 <MX_GPIO_Init+0x208>)
 80068ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ae:	4b69      	ldr	r3, [pc, #420]	@ (8006a54 <MX_GPIO_Init+0x208>)
 80068b0:	2102      	movs	r1, #2
 80068b2:	430a      	orrs	r2, r1
 80068b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068b6:	4b67      	ldr	r3, [pc, #412]	@ (8006a54 <MX_GPIO_Init+0x208>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	2202      	movs	r2, #2
 80068bc:	4013      	ands	r3, r2
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80068c2:	4b64      	ldr	r3, [pc, #400]	@ (8006a54 <MX_GPIO_Init+0x208>)
 80068c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c6:	4b63      	ldr	r3, [pc, #396]	@ (8006a54 <MX_GPIO_Init+0x208>)
 80068c8:	2108      	movs	r1, #8
 80068ca:	430a      	orrs	r2, r1
 80068cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068ce:	4b61      	ldr	r3, [pc, #388]	@ (8006a54 <MX_GPIO_Init+0x208>)
 80068d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d2:	2208      	movs	r2, #8
 80068d4:	4013      	ands	r3, r2
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80068da:	4b5f      	ldr	r3, [pc, #380]	@ (8006a58 <MX_GPIO_Init+0x20c>)
 80068dc:	2201      	movs	r2, #1
 80068de:	2101      	movs	r1, #1
 80068e0:	0018      	movs	r0, r3
 80068e2:	f006 fcc6 	bl	800d272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80068e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a58 <MX_GPIO_Init+0x20c>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	2102      	movs	r1, #2
 80068ec:	0018      	movs	r0, r3
 80068ee:	f006 fcc0 	bl	800d272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80068f2:	495a      	ldr	r1, [pc, #360]	@ (8006a5c <MX_GPIO_Init+0x210>)
 80068f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006a60 <MX_GPIO_Init+0x214>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	0018      	movs	r0, r3
 80068fa:	f006 fcba 	bl	800d272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80068fe:	2380      	movs	r3, #128	@ 0x80
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	4858      	ldr	r0, [pc, #352]	@ (8006a64 <MX_GPIO_Init+0x218>)
 8006904:	2201      	movs	r2, #1
 8006906:	0019      	movs	r1, r3
 8006908:	f006 fcb3 	bl	800d272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800690c:	2380      	movs	r3, #128	@ 0x80
 800690e:	015b      	lsls	r3, r3, #5
 8006910:	4854      	ldr	r0, [pc, #336]	@ (8006a64 <MX_GPIO_Init+0x218>)
 8006912:	2200      	movs	r2, #0
 8006914:	0019      	movs	r1, r3
 8006916:	f006 fcac 	bl	800d272 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800691a:	193b      	adds	r3, r7, r4
 800691c:	4a52      	ldr	r2, [pc, #328]	@ (8006a68 <MX_GPIO_Init+0x21c>)
 800691e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006920:	193b      	adds	r3, r7, r4
 8006922:	2203      	movs	r2, #3
 8006924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006926:	193b      	adds	r3, r7, r4
 8006928:	2200      	movs	r2, #0
 800692a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800692c:	193b      	adds	r3, r7, r4
 800692e:	4a4d      	ldr	r2, [pc, #308]	@ (8006a64 <MX_GPIO_Init+0x218>)
 8006930:	0019      	movs	r1, r3
 8006932:	0010      	movs	r0, r2
 8006934:	f006 fb02 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006938:	193b      	adds	r3, r7, r4
 800693a:	2203      	movs	r2, #3
 800693c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800693e:	193b      	adds	r3, r7, r4
 8006940:	2201      	movs	r2, #1
 8006942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006944:	193b      	adds	r3, r7, r4
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800694a:	193b      	adds	r3, r7, r4
 800694c:	2200      	movs	r2, #0
 800694e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006950:	193b      	adds	r3, r7, r4
 8006952:	4a41      	ldr	r2, [pc, #260]	@ (8006a58 <MX_GPIO_Init+0x20c>)
 8006954:	0019      	movs	r1, r3
 8006956:	0010      	movs	r0, r2
 8006958:	f006 faf0 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800695c:	193b      	adds	r3, r7, r4
 800695e:	2270      	movs	r2, #112	@ 0x70
 8006960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006962:	193b      	adds	r3, r7, r4
 8006964:	2203      	movs	r2, #3
 8006966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006968:	193b      	adds	r3, r7, r4
 800696a:	2200      	movs	r2, #0
 800696c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800696e:	193a      	adds	r2, r7, r4
 8006970:	23a0      	movs	r3, #160	@ 0xa0
 8006972:	05db      	lsls	r3, r3, #23
 8006974:	0011      	movs	r1, r2
 8006976:	0018      	movs	r0, r3
 8006978:	f006 fae0 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 800697c:	193b      	adds	r3, r7, r4
 800697e:	4a3b      	ldr	r2, [pc, #236]	@ (8006a6c <MX_GPIO_Init+0x220>)
 8006980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006982:	193b      	adds	r3, r7, r4
 8006984:	2200      	movs	r2, #0
 8006986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006988:	193b      	adds	r3, r7, r4
 800698a:	2200      	movs	r2, #0
 800698c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800698e:	193a      	adds	r2, r7, r4
 8006990:	23a0      	movs	r3, #160	@ 0xa0
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f006 fad0 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800699c:	193b      	adds	r3, r7, r4
 800699e:	4a2f      	ldr	r2, [pc, #188]	@ (8006a5c <MX_GPIO_Init+0x210>)
 80069a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069a2:	193b      	adds	r3, r7, r4
 80069a4:	2201      	movs	r2, #1
 80069a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a8:	193b      	adds	r3, r7, r4
 80069aa:	2200      	movs	r2, #0
 80069ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ae:	193b      	adds	r3, r7, r4
 80069b0:	2200      	movs	r2, #0
 80069b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b4:	193b      	adds	r3, r7, r4
 80069b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a60 <MX_GPIO_Init+0x214>)
 80069b8:	0019      	movs	r1, r3
 80069ba:	0010      	movs	r0, r2
 80069bc:	f006 fabe 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80069c0:	193b      	adds	r3, r7, r4
 80069c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a70 <MX_GPIO_Init+0x224>)
 80069c4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069c6:	193b      	adds	r3, r7, r4
 80069c8:	2203      	movs	r2, #3
 80069ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069cc:	193b      	adds	r3, r7, r4
 80069ce:	2200      	movs	r2, #0
 80069d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069d2:	193b      	adds	r3, r7, r4
 80069d4:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <MX_GPIO_Init+0x214>)
 80069d6:	0019      	movs	r1, r3
 80069d8:	0010      	movs	r0, r2
 80069da:	f006 faaf 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80069de:	0021      	movs	r1, r4
 80069e0:	187b      	adds	r3, r7, r1
 80069e2:	2280      	movs	r2, #128	@ 0x80
 80069e4:	0092      	lsls	r2, r2, #2
 80069e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069e8:	000c      	movs	r4, r1
 80069ea:	193b      	adds	r3, r7, r4
 80069ec:	2200      	movs	r2, #0
 80069ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	193b      	adds	r3, r7, r4
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80069f6:	193b      	adds	r3, r7, r4
 80069f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a64 <MX_GPIO_Init+0x218>)
 80069fa:	0019      	movs	r1, r3
 80069fc:	0010      	movs	r0, r2
 80069fe:	f006 fa9d 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006a02:	0021      	movs	r1, r4
 8006a04:	187b      	adds	r3, r7, r1
 8006a06:	22c0      	movs	r2, #192	@ 0xc0
 8006a08:	0152      	lsls	r2, r2, #5
 8006a0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a0c:	000c      	movs	r4, r1
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	2201      	movs	r2, #1
 8006a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a14:	193b      	adds	r3, r7, r4
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a1a:	193b      	adds	r3, r7, r4
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	4a10      	ldr	r2, [pc, #64]	@ (8006a64 <MX_GPIO_Init+0x218>)
 8006a24:	0019      	movs	r1, r3
 8006a26:	0010      	movs	r0, r2
 8006a28:	f006 fa88 	bl	800cf3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006a2c:	0021      	movs	r1, r4
 8006a2e:	187b      	adds	r3, r7, r1
 8006a30:	2204      	movs	r2, #4
 8006a32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a34:	187b      	adds	r3, r7, r1
 8006a36:	2200      	movs	r2, #0
 8006a38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a3a:	187b      	adds	r3, r7, r1
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	4a0c      	ldr	r2, [pc, #48]	@ (8006a74 <MX_GPIO_Init+0x228>)
 8006a44:	0019      	movs	r1, r3
 8006a46:	0010      	movs	r0, r2
 8006a48:	f006 fa78 	bl	800cf3c <HAL_GPIO_Init>

}
 8006a4c:	46c0      	nop			@ (mov r8, r8)
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b00b      	add	sp, #44	@ 0x2c
 8006a52:	bd90      	pop	{r4, r7, pc}
 8006a54:	40021000 	.word	0x40021000
 8006a58:	50001c00 	.word	0x50001c00
 8006a5c:	00000301 	.word	0x00000301
 8006a60:	50000400 	.word	0x50000400
 8006a64:	50000800 	.word	0x50000800
 8006a68:	0000200c 	.word	0x0000200c
 8006a6c:	00008180 	.word	0x00008180
 8006a70:	0000403e 	.word	0x0000403e
 8006a74:	50000c00 	.word	0x50000c00

08006a78 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2100      	movs	r1, #0
 8006a86:	0018      	movs	r0, r3
 8006a88:	f00c f9da 	bl	8012e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2108      	movs	r1, #8
 8006a90:	0018      	movs	r0, r3
 8006a92:	f00c f9d5 	bl	8012e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	210c      	movs	r1, #12
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f00c f9d0 	bl	8012e40 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006aa0:	2380      	movs	r3, #128	@ 0x80
 8006aa2:	05db      	lsls	r3, r3, #23
 8006aa4:	22fa      	movs	r2, #250	@ 0xfa
 8006aa6:	0112      	lsls	r2, r2, #4
 8006aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006aaa:	2380      	movs	r3, #128	@ 0x80
 8006aac:	05db      	lsls	r3, r3, #23
 8006aae:	22fa      	movs	r2, #250	@ 0xfa
 8006ab0:	0112      	lsls	r2, r2, #4
 8006ab2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006ab4:	2380      	movs	r3, #128	@ 0x80
 8006ab6:	05db      	lsls	r3, r3, #23
 8006ab8:	22fa      	movs	r2, #250	@ 0xfa
 8006aba:	0112      	lsls	r2, r2, #4
 8006abc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006abe:	2380      	movs	r3, #128	@ 0x80
 8006ac0:	05db      	lsls	r3, r3, #23
 8006ac2:	22fa      	movs	r2, #250	@ 0xfa
 8006ac4:	0112      	lsls	r2, r2, #4
 8006ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2100      	movs	r1, #0
 8006acc:	0018      	movs	r0, r3
 8006ace:	f00c f9b7 	bl	8012e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2104      	movs	r1, #4
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f00c f9b2 	bl	8012e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2108      	movs	r1, #8
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f00c f9ad 	bl	8012e40 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <GPIO_InitPWMLEDs+0x98>)
 8006ae8:	22fa      	movs	r2, #250	@ 0xfa
 8006aea:	0112      	lsls	r2, r2, #4
 8006aec:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006aee:	4b08      	ldr	r3, [pc, #32]	@ (8006b10 <GPIO_InitPWMLEDs+0x98>)
 8006af0:	22fa      	movs	r2, #250	@ 0xfa
 8006af2:	0112      	lsls	r2, r2, #4
 8006af4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <GPIO_InitPWMLEDs+0x98>)
 8006af8:	22fa      	movs	r2, #250	@ 0xfa
 8006afa:	0112      	lsls	r2, r2, #4
 8006afc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006afe:	4b04      	ldr	r3, [pc, #16]	@ (8006b10 <GPIO_InitPWMLEDs+0x98>)
 8006b00:	22fa      	movs	r2, #250	@ 0xfa
 8006b02:	0112      	lsls	r2, r2, #4
 8006b04:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006b06:	46c0      	nop			@ (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b002      	add	sp, #8
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			@ (mov r8, r8)
 8006b10:	40000400 	.word	0x40000400

08006b14 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0011      	movs	r1, r2
 8006b24:	0018      	movs	r0, r3
 8006b26:	f004 fefb 	bl	800b920 <HIDS_Init>
}
 8006b2a:	46c0      	nop			@ (mov r8, r8)
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b002      	add	sp, #8
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006b32:	b580      	push	{r7, lr}
 8006b34:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006b36:	f004 ff15 	bl	800b964 <HIDS_StartMeasurement>
}
 8006b3a:	46c0      	nop			@ (mov r8, r8)
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0011      	movs	r1, r2
 8006b50:	0018      	movs	r0, r3
 8006b52:	f004 ffed 	bl	800bb30 <HIDS_GetMeasurementValues>
 8006b56:	0003      	movs	r3, r0
}
 8006b58:	0018      	movs	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006b64:	f004 ff88 	bl	800ba78 <HIDS_DeviceConnected>
 8006b68:	0003      	movs	r3, r0
}
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006b74:	4b1b      	ldr	r3, [pc, #108]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006b76:	4a1c      	ldr	r2, [pc, #112]	@ (8006be8 <MX_I2C1_Init+0x78>)
 8006b78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bec <MX_I2C1_Init+0x7c>)
 8006b7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006b80:	4b18      	ldr	r3, [pc, #96]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006b86:	4b17      	ldr	r3, [pc, #92]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006b8c:	4b15      	ldr	r3, [pc, #84]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006b98:	4b12      	ldr	r3, [pc, #72]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006b9e:	4b11      	ldr	r3, [pc, #68]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006baa:	4b0e      	ldr	r3, [pc, #56]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006bac:	0018      	movs	r0, r3
 8006bae:	f006 fb7d 	bl	800d2ac <HAL_I2C_Init>
 8006bb2:	1e03      	subs	r3, r0, #0
 8006bb4:	d001      	beq.n	8006bba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006bb6:	f000 fc23 	bl	8007400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006bba:	4b0a      	ldr	r3, [pc, #40]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f008 faec 	bl	800f19c <HAL_I2CEx_ConfigAnalogFilter>
 8006bc4:	1e03      	subs	r3, r0, #0
 8006bc6:	d001      	beq.n	8006bcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006bc8:	f000 fc1a 	bl	8007400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006bcc:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <MX_I2C1_Init+0x74>)
 8006bce:	2100      	movs	r1, #0
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f008 fb2f 	bl	800f234 <HAL_I2CEx_ConfigDigitalFilter>
 8006bd6:	1e03      	subs	r3, r0, #0
 8006bd8:	d001      	beq.n	8006bde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006bda:	f000 fc11 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20000d18 	.word	0x20000d18
 8006be8:	40005400 	.word	0x40005400
 8006bec:	00503d58 	.word	0x00503d58

08006bf0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c68 <MX_I2C2_Init+0x78>)
 8006bf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c6c <MX_I2C2_Init+0x7c>)
 8006bfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006c00:	4b18      	ldr	r3, [pc, #96]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c06:	4b17      	ldr	r3, [pc, #92]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c08:	2201      	movs	r2, #1
 8006c0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c0c:	4b15      	ldr	r3, [pc, #84]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006c12:	4b14      	ldr	r3, [pc, #80]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006c18:	4b12      	ldr	r3, [pc, #72]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c1e:	4b11      	ldr	r3, [pc, #68]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c24:	4b0f      	ldr	r3, [pc, #60]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f006 fb3d 	bl	800d2ac <HAL_I2C_Init>
 8006c32:	1e03      	subs	r3, r0, #0
 8006c34:	d001      	beq.n	8006c3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006c36:	f000 fbe3 	bl	8007400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f008 faac 	bl	800f19c <HAL_I2CEx_ConfigAnalogFilter>
 8006c44:	1e03      	subs	r3, r0, #0
 8006c46:	d001      	beq.n	8006c4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006c48:	f000 fbda 	bl	8007400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006c4c:	4b05      	ldr	r3, [pc, #20]	@ (8006c64 <MX_I2C2_Init+0x74>)
 8006c4e:	2100      	movs	r1, #0
 8006c50:	0018      	movs	r0, r3
 8006c52:	f008 faef 	bl	800f234 <HAL_I2CEx_ConfigDigitalFilter>
 8006c56:	1e03      	subs	r3, r0, #0
 8006c58:	d001      	beq.n	8006c5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006c5a:	f000 fbd1 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000d6c 	.word	0x20000d6c
 8006c68:	40005800 	.word	0x40005800
 8006c6c:	00503d58 	.word	0x00503d58

08006c70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b08b      	sub	sp, #44	@ 0x2c
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c78:	2414      	movs	r4, #20
 8006c7a:	193b      	adds	r3, r7, r4
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	2314      	movs	r3, #20
 8006c80:	001a      	movs	r2, r3
 8006c82:	2100      	movs	r1, #0
 8006c84:	f015 fbc8 	bl	801c418 <memset>
  if(i2cHandle->Instance==I2C1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8006e04 <HAL_I2C_MspInit+0x194>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d000      	beq.n	8006c94 <HAL_I2C_MspInit+0x24>
 8006c92:	e083      	b.n	8006d9c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c94:	4b5c      	ldr	r3, [pc, #368]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c98:	4b5b      	ldr	r3, [pc, #364]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006c9a:	2102      	movs	r1, #2
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ca0:	4b59      	ldr	r3, [pc, #356]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006cac:	0021      	movs	r1, r4
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	22c0      	movs	r2, #192	@ 0xc0
 8006cb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cb4:	187b      	adds	r3, r7, r1
 8006cb6:	2212      	movs	r2, #18
 8006cb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cba:	187b      	adds	r3, r7, r1
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc0:	187b      	adds	r3, r7, r1
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006cc6:	187b      	adds	r3, r7, r1
 8006cc8:	2201      	movs	r2, #1
 8006cca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ccc:	187b      	adds	r3, r7, r1
 8006cce:	4a4f      	ldr	r2, [pc, #316]	@ (8006e0c <HAL_I2C_MspInit+0x19c>)
 8006cd0:	0019      	movs	r1, r3
 8006cd2:	0010      	movs	r0, r2
 8006cd4:	f006 f932 	bl	800cf3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006cde:	2180      	movs	r1, #128	@ 0x80
 8006ce0:	0389      	lsls	r1, r1, #14
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8006e14 <HAL_I2C_MspInit+0x1a4>)
 8006cea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006cec:	4b48      	ldr	r3, [pc, #288]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006cee:	2206      	movs	r2, #6
 8006cf0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cf2:	4b47      	ldr	r3, [pc, #284]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cf8:	4b45      	ldr	r3, [pc, #276]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cfe:	4b44      	ldr	r3, [pc, #272]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d00:	2280      	movs	r2, #128	@ 0x80
 8006d02:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d04:	4b42      	ldr	r3, [pc, #264]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d0a:	4b41      	ldr	r3, [pc, #260]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006d10:	4b3f      	ldr	r3, [pc, #252]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d16:	4b3e      	ldr	r3, [pc, #248]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f005 fcf0 	bl	800c704 <HAL_DMA_Init>
 8006d24:	1e03      	subs	r3, r0, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006d28:	f000 fb6a 	bl	8007400 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a38      	ldr	r2, [pc, #224]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d32:	4b37      	ldr	r3, [pc, #220]	@ (8006e10 <HAL_I2C_MspInit+0x1a0>)
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006d38:	4b37      	ldr	r3, [pc, #220]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d3a:	4a38      	ldr	r2, [pc, #224]	@ (8006e1c <HAL_I2C_MspInit+0x1ac>)
 8006d3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006d3e:	4b36      	ldr	r3, [pc, #216]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d40:	2206      	movs	r2, #6
 8006d42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d44:	4b34      	ldr	r3, [pc, #208]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d46:	2210      	movs	r2, #16
 8006d48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d4a:	4b33      	ldr	r3, [pc, #204]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d50:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d52:	2280      	movs	r2, #128	@ 0x80
 8006d54:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d56:	4b30      	ldr	r3, [pc, #192]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006d62:	4b2d      	ldr	r3, [pc, #180]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d68:	4b2b      	ldr	r3, [pc, #172]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d70:	0018      	movs	r0, r3
 8006d72:	f005 fcc7 	bl	800c704 <HAL_DMA_Init>
 8006d76:	1e03      	subs	r3, r0, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006d7a:	f000 fb41 	bl	8007400 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a25      	ldr	r2, [pc, #148]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d82:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d84:	4b24      	ldr	r3, [pc, #144]	@ (8006e18 <HAL_I2C_MspInit+0x1a8>)
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2017      	movs	r0, #23
 8006d90:	f005 fc86 	bl	800c6a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006d94:	2017      	movs	r0, #23
 8006d96:	f005 fc98 	bl	800c6ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006d9a:	e02e      	b.n	8006dfa <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e20 <HAL_I2C_MspInit+0x1b0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d129      	bne.n	8006dfa <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da6:	4b18      	ldr	r3, [pc, #96]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	4b17      	ldr	r3, [pc, #92]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006dac:	2102      	movs	r1, #2
 8006dae:	430a      	orrs	r2, r1
 8006db0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006db2:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	2202      	movs	r2, #2
 8006db8:	4013      	ands	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006dbe:	2114      	movs	r1, #20
 8006dc0:	187b      	adds	r3, r7, r1
 8006dc2:	22c0      	movs	r2, #192	@ 0xc0
 8006dc4:	0112      	lsls	r2, r2, #4
 8006dc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	2212      	movs	r2, #18
 8006dcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	187b      	adds	r3, r7, r1
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dd4:	187b      	adds	r3, r7, r1
 8006dd6:	2203      	movs	r2, #3
 8006dd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006dda:	187b      	adds	r3, r7, r1
 8006ddc:	2206      	movs	r2, #6
 8006dde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006de0:	187b      	adds	r3, r7, r1
 8006de2:	4a0a      	ldr	r2, [pc, #40]	@ (8006e0c <HAL_I2C_MspInit+0x19c>)
 8006de4:	0019      	movs	r1, r3
 8006de6:	0010      	movs	r0, r2
 8006de8:	f006 f8a8 	bl	800cf3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006dec:	4b06      	ldr	r3, [pc, #24]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <HAL_I2C_MspInit+0x198>)
 8006df2:	2180      	movs	r1, #128	@ 0x80
 8006df4:	03c9      	lsls	r1, r1, #15
 8006df6:	430a      	orrs	r2, r1
 8006df8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006dfa:	46c0      	nop			@ (mov r8, r8)
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b00b      	add	sp, #44	@ 0x2c
 8006e00:	bd90      	pop	{r4, r7, pc}
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	40005400 	.word	0x40005400
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	50000400 	.word	0x50000400
 8006e10:	20000dc0 	.word	0x20000dc0
 8006e14:	40020030 	.word	0x40020030
 8006e18:	20000e08 	.word	0x20000e08
 8006e1c:	4002001c 	.word	0x4002001c
 8006e20:	40005800 	.word	0x40005800

08006e24 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006e28:	4b10      	ldr	r3, [pc, #64]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e2a:	4a11      	ldr	r2, [pc, #68]	@ (8006e70 <MX_I2S2_Init+0x4c>)
 8006e2c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e30:	22c0      	movs	r2, #192	@ 0xc0
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e3e:	2203      	movs	r2, #3
 8006e40:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006e42:	4b0a      	ldr	r3, [pc, #40]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8006e48:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e4a:	22fa      	movs	r2, #250	@ 0xfa
 8006e4c:	0192      	lsls	r2, r2, #6
 8006e4e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8006e50:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006e56:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <MX_I2S2_Init+0x48>)
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f008 fa37 	bl	800f2cc <HAL_I2S_Init>
 8006e5e:	1e03      	subs	r3, r0, #0
 8006e60:	d001      	beq.n	8006e66 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8006e62:	f000 facd 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000e50 	.word	0x20000e50
 8006e70:	40003800 	.word	0x40003800

08006e74 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b089      	sub	sp, #36	@ 0x24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e7c:	240c      	movs	r4, #12
 8006e7e:	193b      	adds	r3, r7, r4
 8006e80:	0018      	movs	r0, r3
 8006e82:	2314      	movs	r3, #20
 8006e84:	001a      	movs	r2, r3
 8006e86:	2100      	movs	r1, #0
 8006e88:	f015 fac6 	bl	801c418 <memset>
  if(i2sHandle->Instance==SPI2)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2d      	ldr	r2, [pc, #180]	@ (8006f48 <HAL_I2S_MspInit+0xd4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d154      	bne.n	8006f40 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006e96:	4b2d      	ldr	r3, [pc, #180]	@ (8006f4c <HAL_I2S_MspInit+0xd8>)
 8006e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f4c <HAL_I2S_MspInit+0xd8>)
 8006e9c:	2180      	movs	r1, #128	@ 0x80
 8006e9e:	01c9      	lsls	r1, r1, #7
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ea4:	4b29      	ldr	r3, [pc, #164]	@ (8006f4c <HAL_I2S_MspInit+0xd8>)
 8006ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea8:	4b28      	ldr	r3, [pc, #160]	@ (8006f4c <HAL_I2S_MspInit+0xd8>)
 8006eaa:	2102      	movs	r1, #2
 8006eac:	430a      	orrs	r2, r1
 8006eae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006eb0:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <HAL_I2S_MspInit+0xd8>)
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006ebc:	193b      	adds	r3, r7, r4
 8006ebe:	22b0      	movs	r2, #176	@ 0xb0
 8006ec0:	0212      	lsls	r2, r2, #8
 8006ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec4:	0021      	movs	r1, r4
 8006ec6:	187b      	adds	r3, r7, r1
 8006ec8:	2202      	movs	r2, #2
 8006eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	187b      	adds	r3, r7, r1
 8006ece:	2200      	movs	r2, #0
 8006ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed2:	187b      	adds	r3, r7, r1
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006ed8:	187b      	adds	r3, r7, r1
 8006eda:	2200      	movs	r2, #0
 8006edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ede:	187b      	adds	r3, r7, r1
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f50 <HAL_I2S_MspInit+0xdc>)
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	0010      	movs	r0, r2
 8006ee6:	f006 f829 	bl	800cf3c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006eea:	4b1a      	ldr	r3, [pc, #104]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006eec:	4a1a      	ldr	r2, [pc, #104]	@ (8006f58 <HAL_I2S_MspInit+0xe4>)
 8006eee:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006ef0:	4b18      	ldr	r3, [pc, #96]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ef6:	4b17      	ldr	r3, [pc, #92]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006efc:	4b15      	ldr	r3, [pc, #84]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f02:	4b14      	ldr	r3, [pc, #80]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f04:	2280      	movs	r2, #128	@ 0x80
 8006f06:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f08:	4b12      	ldr	r3, [pc, #72]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f0a:	2280      	movs	r2, #128	@ 0x80
 8006f0c:	0052      	lsls	r2, r2, #1
 8006f0e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f10:	4b10      	ldr	r3, [pc, #64]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f12:	2280      	movs	r2, #128	@ 0x80
 8006f14:	00d2      	lsls	r2, r2, #3
 8006f16:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006f18:	4b0e      	ldr	r3, [pc, #56]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006f24:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f26:	0018      	movs	r0, r3
 8006f28:	f005 fbec 	bl	800c704 <HAL_DMA_Init>
 8006f2c:	1e03      	subs	r3, r0, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006f30:	f000 fa66 	bl	8007400 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a07      	ldr	r2, [pc, #28]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f3a:	4b06      	ldr	r3, [pc, #24]	@ (8006f54 <HAL_I2S_MspInit+0xe0>)
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006f40:	46c0      	nop			@ (mov r8, r8)
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b009      	add	sp, #36	@ 0x24
 8006f46:	bd90      	pop	{r4, r7, pc}
 8006f48:	40003800 	.word	0x40003800
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	50000400 	.word	0x50000400
 8006f54:	20000e8c 	.word	0x20000e8c
 8006f58:	40020044 	.word	0x40020044

08006f5c <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  testDone = true;
 8006f60:	4b1e      	ldr	r3, [pc, #120]	@ (8006fdc <SetTestDone+0x80>)
 8006f62:	2201      	movs	r2, #1
 8006f64:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8006f66:	23fa      	movs	r3, #250	@ 0xfa
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f004 ff2c 	bl	800bdc8 <HAL_Delay>
  SetDBLED(false, false, true);
 8006f70:	2201      	movs	r2, #1
 8006f72:	2100      	movs	r1, #0
 8006f74:	2000      	movs	r0, #0
 8006f76:	f003 fc11 	bl	800a79c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8006f7a:	4a19      	ldr	r2, [pc, #100]	@ (8006fe0 <SetTestDone+0x84>)
 8006f7c:	23fa      	movs	r3, #250	@ 0xfa
 8006f7e:	0119      	lsls	r1, r3, #4
 8006f80:	23fa      	movs	r3, #250	@ 0xfa
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	0018      	movs	r0, r3
 8006f86:	f003 fbd5 	bl	800a734 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8006f8a:	4a15      	ldr	r2, [pc, #84]	@ (8006fe0 <SetTestDone+0x84>)
 8006f8c:	23fa      	movs	r3, #250	@ 0xfa
 8006f8e:	0119      	lsls	r1, r3, #4
 8006f90:	23fa      	movs	r3, #250	@ 0xfa
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	0018      	movs	r0, r3
 8006f96:	f003 fc4b 	bl	800a830 <SetVocLED>
  HAL_Delay(1000);
 8006f9a:	23fa      	movs	r3, #250	@ 0xfa
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f004 ff12 	bl	800bdc8 <HAL_Delay>
  SetDBLED(false, false, false);
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f003 fbf7 	bl	800a79c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8006fae:	23fa      	movs	r3, #250	@ 0xfa
 8006fb0:	011a      	lsls	r2, r3, #4
 8006fb2:	23fa      	movs	r3, #250	@ 0xfa
 8006fb4:	0119      	lsls	r1, r3, #4
 8006fb6:	23fa      	movs	r3, #250	@ 0xfa
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f003 fbba 	bl	800a734 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8006fc0:	23fa      	movs	r3, #250	@ 0xfa
 8006fc2:	011a      	lsls	r2, r3, #4
 8006fc4:	23fa      	movs	r3, #250	@ 0xfa
 8006fc6:	0119      	lsls	r1, r3, #4
 8006fc8:	23fa      	movs	r3, #250	@ 0xfa
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f003 fc2f 	bl	800a830 <SetVocLED>
  InitDone();
 8006fd2:	f003 fb59 	bl	800a688 <InitDone>
}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000ed4 	.word	0x20000ed4
 8006fe0:	00000bb8 	.word	0x00000bb8

08006fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006fe8:	f004 fe7e 	bl	800bce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006fec:	f000 f91e 	bl	800722c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ff0:	f7ff fc2c 	bl	800684c <MX_GPIO_Init>
  MX_DMA_Init();
 8006ff4:	f7ff fa76 	bl	80064e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8006ff8:	f7ff fdba 	bl	8006b70 <MX_I2C1_Init>
  MX_I2S2_Init();
 8006ffc:	f7ff ff12 	bl	8006e24 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007000:	f004 f944 	bl	800b28c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007004:	f7ff fdf4 	bl	8006bf0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007008:	f003 ff38 	bl	800ae7c <MX_TIM2_Init>
  MX_TIM3_Init();
 800700c:	f003 ffaa 	bl	800af64 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007010:	f004 f970 	bl	800b2f4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007014:	f7ff f9b4 	bl	8006380 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007018:	f012 f80c 	bl	8019034 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800701c:	f000 ff9e 	bl	8007f5c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007020:	f004 f8fe 	bl	800b220 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007024:	f004 f81c 	bl	800b060 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007028:	4a64      	ldr	r2, [pc, #400]	@ (80071bc <main+0x1d8>)
 800702a:	4b65      	ldr	r3, [pc, #404]	@ (80071c0 <main+0x1dc>)
 800702c:	0011      	movs	r1, r2
 800702e:	0018      	movs	r0, r3
 8007030:	f7ff fd22 	bl	8006a78 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007034:	f7fe ff5c 	bl	8005ef0 <UserButton_Pressed>
 8007038:	1e03      	subs	r3, r0, #0
 800703a:	d004      	beq.n	8007046 <main+0x62>
    EnableESPProg();
 800703c:	f012 f8ca 	bl	80191d4 <EnableESPProg>
    ESP_Programming = true;
 8007040:	4b60      	ldr	r3, [pc, #384]	@ (80071c4 <main+0x1e0>)
 8007042:	2201      	movs	r2, #1
 8007044:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007046:	2003      	movs	r0, #3
 8007048:	f004 fb74 	bl	800b734 <SetVerboseLevel>
  BinaryReleaseInfo();
 800704c:	f004 fb8a 	bl	800b764 <BinaryReleaseInfo>
  InitClock(&hrtc);
 8007050:	4b5d      	ldr	r3, [pc, #372]	@ (80071c8 <main+0x1e4>)
 8007052:	0018      	movs	r0, r3
 8007054:	f7ff f8da 	bl	800620c <InitClock>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007058:	495c      	ldr	r1, [pc, #368]	@ (80071cc <main+0x1e8>)
 800705a:	4b5d      	ldr	r3, [pc, #372]	@ (80071d0 <main+0x1ec>)
 800705c:	2201      	movs	r2, #1
 800705e:	0018      	movs	r0, r3
 8007060:	f00c fb4e 	bl	8013700 <HAL_UART_Receive_IT>
  //===========
  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007064:	4a5b      	ldr	r2, [pc, #364]	@ (80071d4 <main+0x1f0>)
 8007066:	495c      	ldr	r1, [pc, #368]	@ (80071d8 <main+0x1f4>)
 8007068:	485c      	ldr	r0, [pc, #368]	@ (80071dc <main+0x1f8>)
 800706a:	230b      	movs	r3, #11
 800706c:	f002 fc82 	bl	8009974 <soundInit>
 8007070:	0003      	movs	r3, r0
 8007072:	001a      	movs	r2, r3
 8007074:	2301      	movs	r3, #1
 8007076:	4053      	eors	r3, r2
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 800707e:	4a58      	ldr	r2, [pc, #352]	@ (80071e0 <main+0x1fc>)
 8007080:	4b58      	ldr	r3, [pc, #352]	@ (80071e4 <main+0x200>)
 8007082:	21db      	movs	r1, #219	@ 0xdb
 8007084:	0018      	movs	r0, r3
 8007086:	f004 fb9f 	bl	800b7c8 <errorHandler>
  }
  //============================
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 800708a:	4b57      	ldr	r3, [pc, #348]	@ (80071e8 <main+0x204>)
 800708c:	4a57      	ldr	r2, [pc, #348]	@ (80071ec <main+0x208>)
 800708e:	4952      	ldr	r1, [pc, #328]	@ (80071d8 <main+0x1f4>)
 8007090:	4857      	ldr	r0, [pc, #348]	@ (80071f0 <main+0x20c>)
 8007092:	f7ff fb57 	bl	8006744 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007096:	4b57      	ldr	r3, [pc, #348]	@ (80071f4 <main+0x210>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d019      	beq.n	80070d2 <main+0xee>
 800709e:	4b49      	ldr	r3, [pc, #292]	@ (80071c4 <main+0x1e0>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2201      	movs	r2, #1
 80070a4:	4053      	eors	r3, r2
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d012      	beq.n	80070d2 <main+0xee>
 80070ac:	4b52      	ldr	r3, [pc, #328]	@ (80071f8 <main+0x214>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2201      	movs	r2, #1
 80070b2:	4053      	eors	r3, r2
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00b      	beq.n	80070d2 <main+0xee>
      MeasurementBusy = UpkeepGadget();
 80070ba:	f7ff fb71 	bl	80067a0 <UpkeepGadget>
 80070be:	0003      	movs	r3, r0
 80070c0:	001a      	movs	r2, r3
 80070c2:	4b4e      	ldr	r3, [pc, #312]	@ (80071fc <main+0x218>)
 80070c4:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 80070c6:	f7fd ffc3 	bl	8005050 <ESP_Upkeep>
 80070ca:	0003      	movs	r3, r0
 80070cc:	001a      	movs	r2, r3
 80070ce:	4b4c      	ldr	r3, [pc, #304]	@ (8007200 <main+0x21c>)
 80070d0:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80070d2:	4b48      	ldr	r3, [pc, #288]	@ (80071f4 <main+0x210>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2201      	movs	r2, #1
 80070d8:	4053      	eors	r3, r2
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00f      	beq.n	8007100 <main+0x11c>
 80070e0:	4b38      	ldr	r3, [pc, #224]	@ (80071c4 <main+0x1e0>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2201      	movs	r2, #1
 80070e6:	4053      	eors	r3, r2
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <main+0x11c>
 80070ee:	4b42      	ldr	r3, [pc, #264]	@ (80071f8 <main+0x214>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2201      	movs	r2, #1
 80070f4:	4053      	eors	r3, r2
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <main+0x11c>
      Gadget_Test();
 80070fc:	f7ff fb48 	bl	8006790 <Gadget_Test>
    }
    Status_Upkeep();
 8007100:	f003 fd66 	bl	800abd0 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8007104:	4b3f      	ldr	r3, [pc, #252]	@ (8007204 <main+0x220>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	0018      	movs	r0, r3
 800710a:	f004 fa5b 	bl	800b5c4 <TimestampIsReached>
 800710e:	1e03      	subs	r3, r0, #0
 8007110:	d043      	beq.n	800719a <main+0x1b6>
      charge = Battery_Upkeep();
 8007112:	f003 fd64 	bl	800abde <Battery_Upkeep>
 8007116:	0003      	movs	r3, r0
 8007118:	001a      	movs	r2, r3
 800711a:	4b3b      	ldr	r3, [pc, #236]	@ (8007208 <main+0x224>)
 800711c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 800711e:	f004 fe49 	bl	800bdb4 <HAL_GetTick>
 8007122:	0003      	movs	r3, r0
 8007124:	4a39      	ldr	r2, [pc, #228]	@ (800720c <main+0x228>)
 8007126:	189a      	adds	r2, r3, r2
 8007128:	4b36      	ldr	r3, [pc, #216]	@ (8007204 <main+0x220>)
 800712a:	601a      	str	r2, [r3, #0]
      RTC_GetTime(&hrtc, &lasthour, &lastminute, &lastsecond);
 800712c:	4b38      	ldr	r3, [pc, #224]	@ (8007210 <main+0x22c>)
 800712e:	4a39      	ldr	r2, [pc, #228]	@ (8007214 <main+0x230>)
 8007130:	4939      	ldr	r1, [pc, #228]	@ (8007218 <main+0x234>)
 8007132:	4825      	ldr	r0, [pc, #148]	@ (80071c8 <main+0x1e4>)
 8007134:	f7ff f884 	bl	8006240 <RTC_GetTime>
      if (myUptimeminute != lastminute) {
 8007138:	4b38      	ldr	r3, [pc, #224]	@ (800721c <main+0x238>)
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	4b35      	ldr	r3, [pc, #212]	@ (8007214 <main+0x230>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d005      	beq.n	8007150 <main+0x16c>
        myUptimeminute++;
 8007144:	4b35      	ldr	r3, [pc, #212]	@ (800721c <main+0x238>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	b2da      	uxtb	r2, r3
 800714c:	4b33      	ldr	r3, [pc, #204]	@ (800721c <main+0x238>)
 800714e:	701a      	strb	r2, [r3, #0]
      }
      if (myUptimeminute == 60) {
 8007150:	4b32      	ldr	r3, [pc, #200]	@ (800721c <main+0x238>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b3c      	cmp	r3, #60	@ 0x3c
 8007156:	d120      	bne.n	800719a <main+0x1b6>
        myUptimeminute = 0;
 8007158:	4b30      	ldr	r3, [pc, #192]	@ (800721c <main+0x238>)
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
        myUptimehour++;
 800715e:	4b30      	ldr	r3, [pc, #192]	@ (8007220 <main+0x23c>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	b2da      	uxtb	r2, r3
 8007166:	4b2e      	ldr	r3, [pc, #184]	@ (8007220 <main+0x23c>)
 8007168:	701a      	strb	r2, [r3, #0]
        if (myUptimehour == 24) {
 800716a:	4b2d      	ldr	r3, [pc, #180]	@ (8007220 <main+0x23c>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b18      	cmp	r3, #24
 8007170:	d108      	bne.n	8007184 <main+0x1a0>
          myUptimehour = 0;
 8007172:	4b2b      	ldr	r3, [pc, #172]	@ (8007220 <main+0x23c>)
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]
          myUptimeday++;
 8007178:	4b2a      	ldr	r3, [pc, #168]	@ (8007224 <main+0x240>)
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	4b28      	ldr	r3, [pc, #160]	@ (8007224 <main+0x240>)
 8007182:	801a      	strh	r2, [r3, #0]
        }
        printf("Systemuptime is: %d days %02d:%02d\r\n", myUptimeday, myUptimehour, myUptimeminute);
 8007184:	4b27      	ldr	r3, [pc, #156]	@ (8007224 <main+0x240>)
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	0019      	movs	r1, r3
 800718a:	4b25      	ldr	r3, [pc, #148]	@ (8007220 <main+0x23c>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	001a      	movs	r2, r3
 8007190:	4b22      	ldr	r3, [pc, #136]	@ (800721c <main+0x238>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	4824      	ldr	r0, [pc, #144]	@ (8007228 <main+0x244>)
 8007196:	f015 f88b 	bl	801c2b0 <iprintf>
      }
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 800719a:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <main+0x224>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <main+0x1ce>
 80071a2:	4b17      	ldr	r3, [pc, #92]	@ (8007200 <main+0x21c>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b09      	cmp	r3, #9
 80071a8:	d103      	bne.n	80071b2 <main+0x1ce>
      batteryEmpty = true;
 80071aa:	4b13      	ldr	r3, [pc, #76]	@ (80071f8 <main+0x214>)
 80071ac:	2201      	movs	r2, #1
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e002      	b.n	80071b8 <main+0x1d4>
    }
    else{
      batteryEmpty = false;
 80071b2:	4b11      	ldr	r3, [pc, #68]	@ (80071f8 <main+0x214>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 80071b8:	e76d      	b.n	8007096 <main+0xb2>
 80071ba:	46c0      	nop			@ (mov r8, r8)
 80071bc:	20002168 	.word	0x20002168
 80071c0:	20002128 	.word	0x20002128
 80071c4:	20000ed5 	.word	0x20000ed5
 80071c8:	20001198 	.word	0x20001198
 80071cc:	20000ee8 	.word	0x20000ee8
 80071d0:	200022a0 	.word	0x200022a0
 80071d4:	200021a8 	.word	0x200021a8
 80071d8:	20000e50 	.word	0x20000e50
 80071dc:	20000e8c 	.word	0x20000e8c
 80071e0:	0801fdcc 	.word	0x0801fdcc
 80071e4:	08020768 	.word	0x08020768
 80071e8:	20000cb8 	.word	0x20000cb8
 80071ec:	20002358 	.word	0x20002358
 80071f0:	20000d18 	.word	0x20000d18
 80071f4:	20000ed4 	.word	0x20000ed4
 80071f8:	20000ed6 	.word	0x20000ed6
 80071fc:	20000ed7 	.word	0x20000ed7
 8007200:	20000ee5 	.word	0x20000ee5
 8007204:	20000ee0 	.word	0x20000ee0
 8007208:	20000ee4 	.word	0x20000ee4
 800720c:	0000ea60 	.word	0x0000ea60
 8007210:	20000eda 	.word	0x20000eda
 8007214:	20000ed9 	.word	0x20000ed9
 8007218:	20000ed8 	.word	0x20000ed8
 800721c:	20000edb 	.word	0x20000edb
 8007220:	20000edc 	.word	0x20000edc
 8007224:	20000ede 	.word	0x20000ede
 8007228:	0801fde0 	.word	0x0801fde0

0800722c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b09d      	sub	sp, #116	@ 0x74
 8007230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007232:	2438      	movs	r4, #56	@ 0x38
 8007234:	193b      	adds	r3, r7, r4
 8007236:	0018      	movs	r0, r3
 8007238:	2338      	movs	r3, #56	@ 0x38
 800723a:	001a      	movs	r2, r3
 800723c:	2100      	movs	r1, #0
 800723e:	f015 f8eb 	bl	801c418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007242:	2324      	movs	r3, #36	@ 0x24
 8007244:	18fb      	adds	r3, r7, r3
 8007246:	0018      	movs	r0, r3
 8007248:	2314      	movs	r3, #20
 800724a:	001a      	movs	r2, r3
 800724c:	2100      	movs	r1, #0
 800724e:	f015 f8e3 	bl	801c418 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007252:	003b      	movs	r3, r7
 8007254:	0018      	movs	r0, r3
 8007256:	2324      	movs	r3, #36	@ 0x24
 8007258:	001a      	movs	r2, r3
 800725a:	2100      	movs	r1, #0
 800725c:	f015 f8dc 	bl	801c418 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007260:	4b32      	ldr	r3, [pc, #200]	@ (800732c <SystemClock_Config+0x100>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a32      	ldr	r2, [pc, #200]	@ (8007330 <SystemClock_Config+0x104>)
 8007266:	401a      	ands	r2, r3
 8007268:	4b30      	ldr	r3, [pc, #192]	@ (800732c <SystemClock_Config+0x100>)
 800726a:	2180      	movs	r1, #128	@ 0x80
 800726c:	0109      	lsls	r1, r1, #4
 800726e:	430a      	orrs	r2, r1
 8007270:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007272:	f00a f98f 	bl	8011594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007276:	4b2f      	ldr	r3, [pc, #188]	@ (8007334 <SystemClock_Config+0x108>)
 8007278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800727a:	4b2e      	ldr	r3, [pc, #184]	@ (8007334 <SystemClock_Config+0x108>)
 800727c:	492c      	ldr	r1, [pc, #176]	@ (8007330 <SystemClock_Config+0x104>)
 800727e:	400a      	ands	r2, r1
 8007280:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007282:	193b      	adds	r3, r7, r4
 8007284:	2226      	movs	r2, #38	@ 0x26
 8007286:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007288:	193b      	adds	r3, r7, r4
 800728a:	2280      	movs	r2, #128	@ 0x80
 800728c:	0052      	lsls	r2, r2, #1
 800728e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007290:	0021      	movs	r1, r4
 8007292:	187b      	adds	r3, r7, r1
 8007294:	2201      	movs	r2, #1
 8007296:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007298:	187b      	adds	r3, r7, r1
 800729a:	2210      	movs	r2, #16
 800729c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800729e:	187b      	adds	r3, r7, r1
 80072a0:	2201      	movs	r2, #1
 80072a2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80072a4:	187b      	adds	r3, r7, r1
 80072a6:	2200      	movs	r2, #0
 80072a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	0018      	movs	r0, r3
 80072ae:	f00a f97f 	bl	80115b0 <HAL_RCC_OscConfig>
 80072b2:	1e03      	subs	r3, r0, #0
 80072b4:	d001      	beq.n	80072ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80072b6:	f000 f8a3 	bl	8007400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072ba:	2124      	movs	r1, #36	@ 0x24
 80072bc:	187b      	adds	r3, r7, r1
 80072be:	220f      	movs	r2, #15
 80072c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80072c2:	187b      	adds	r3, r7, r1
 80072c4:	2201      	movs	r2, #1
 80072c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072c8:	187b      	adds	r3, r7, r1
 80072ca:	2200      	movs	r2, #0
 80072cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80072ce:	187b      	adds	r3, r7, r1
 80072d0:	2200      	movs	r2, #0
 80072d2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072d4:	187b      	adds	r3, r7, r1
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80072da:	187b      	adds	r3, r7, r1
 80072dc:	2100      	movs	r1, #0
 80072de:	0018      	movs	r0, r3
 80072e0:	f00a fd3a 	bl	8011d58 <HAL_RCC_ClockConfig>
 80072e4:	1e03      	subs	r3, r0, #0
 80072e6:	d001      	beq.n	80072ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80072e8:	f000 f88a 	bl	8007400 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80072ec:	003b      	movs	r3, r7
 80072ee:	226d      	movs	r2, #109	@ 0x6d
 80072f0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80072f2:	003b      	movs	r3, r7
 80072f4:	2200      	movs	r2, #0
 80072f6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80072f8:	003b      	movs	r3, r7
 80072fa:	2200      	movs	r2, #0
 80072fc:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80072fe:	003b      	movs	r3, r7
 8007300:	2200      	movs	r2, #0
 8007302:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007304:	003b      	movs	r3, r7
 8007306:	2280      	movs	r2, #128	@ 0x80
 8007308:	0252      	lsls	r2, r2, #9
 800730a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800730c:	003b      	movs	r3, r7
 800730e:	2280      	movs	r2, #128	@ 0x80
 8007310:	04d2      	lsls	r2, r2, #19
 8007312:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007314:	003b      	movs	r3, r7
 8007316:	0018      	movs	r0, r3
 8007318:	f00a ff42 	bl	80121a0 <HAL_RCCEx_PeriphCLKConfig>
 800731c:	1e03      	subs	r3, r0, #0
 800731e:	d001      	beq.n	8007324 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8007320:	f000 f86e 	bl	8007400 <Error_Handler>
  }
}
 8007324:	46c0      	nop			@ (mov r8, r8)
 8007326:	46bd      	mov	sp, r7
 8007328:	b01d      	add	sp, #116	@ 0x74
 800732a:	bd90      	pop	{r4, r7, pc}
 800732c:	40007000 	.word	0x40007000
 8007330:	ffffe7ff 	.word	0xffffe7ff
 8007334:	40021000 	.word	0x40021000

08007338 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	000a      	movs	r2, r1
 8007342:	1cbb      	adds	r3, r7, #2
 8007344:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8007346:	4c06      	ldr	r4, [pc, #24]	@ (8007360 <printString+0x28>)
 8007348:	1cbb      	adds	r3, r7, #2
 800734a:	881a      	ldrh	r2, [r3, #0]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4805      	ldr	r0, [pc, #20]	@ (8007364 <printString+0x2c>)
 8007350:	0023      	movs	r3, r4
 8007352:	f00c f935 	bl	80135c0 <HAL_UART_Transmit>
}
 8007356:	46c0      	nop			@ (mov r8, r8)
 8007358:	46bd      	mov	sp, r7
 800735a:	b003      	add	sp, #12
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	46c0      	nop			@ (mov r8, r8)
 8007360:	0000ffff 	.word	0x0000ffff
 8007364:	200022a0 	.word	0x200022a0

08007368 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800736a:	b087      	sub	sp, #28
 800736c:	af04      	add	r7, sp, #16
 800736e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007370:	4919      	ldr	r1, [pc, #100]	@ (80073d8 <HAL_UART_RxCpltCallback+0x70>)
 8007372:	4b1a      	ldr	r3, [pc, #104]	@ (80073dc <HAL_UART_RxCpltCallback+0x74>)
 8007374:	2201      	movs	r2, #1
 8007376:	0018      	movs	r0, r3
 8007378:	f00c f9c2 	bl	8013700 <HAL_UART_Receive_IT>
  if (u1_rx_buff[0] == (uint8_t)'?') {
 800737c:	4b16      	ldr	r3, [pc, #88]	@ (80073d8 <HAL_UART_RxCpltCallback+0x70>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b3f      	cmp	r3, #63	@ 0x3f
 8007382:	d11f      	bne.n	80073c4 <HAL_UART_RxCpltCallback+0x5c>
    RTC_GetTime(&hrtc, &lasthour, &lastminute, &lastsecond);
 8007384:	4b16      	ldr	r3, [pc, #88]	@ (80073e0 <HAL_UART_RxCpltCallback+0x78>)
 8007386:	4a17      	ldr	r2, [pc, #92]	@ (80073e4 <HAL_UART_RxCpltCallback+0x7c>)
 8007388:	4917      	ldr	r1, [pc, #92]	@ (80073e8 <HAL_UART_RxCpltCallback+0x80>)
 800738a:	4818      	ldr	r0, [pc, #96]	@ (80073ec <HAL_UART_RxCpltCallback+0x84>)
 800738c:	f7fe ff58 	bl	8006240 <RTC_GetTime>
    printf("=== System time: %02d:%02d:%02d, system uptime is: %d days %02d:%02d ===\r\n", lasthour, lastminute, lastsecond, myUptimeday, myUptimehour, myUptimeminute);
 8007390:	4b15      	ldr	r3, [pc, #84]	@ (80073e8 <HAL_UART_RxCpltCallback+0x80>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	001c      	movs	r4, r3
 8007396:	4b13      	ldr	r3, [pc, #76]	@ (80073e4 <HAL_UART_RxCpltCallback+0x7c>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	001d      	movs	r5, r3
 800739c:	4b10      	ldr	r3, [pc, #64]	@ (80073e0 <HAL_UART_RxCpltCallback+0x78>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	001e      	movs	r6, r3
 80073a2:	4b13      	ldr	r3, [pc, #76]	@ (80073f0 <HAL_UART_RxCpltCallback+0x88>)
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	001a      	movs	r2, r3
 80073a8:	4b12      	ldr	r3, [pc, #72]	@ (80073f4 <HAL_UART_RxCpltCallback+0x8c>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	0019      	movs	r1, r3
 80073ae:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <HAL_UART_RxCpltCallback+0x90>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	4812      	ldr	r0, [pc, #72]	@ (80073fc <HAL_UART_RxCpltCallback+0x94>)
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	9101      	str	r1, [sp, #4]
 80073b8:	9200      	str	r2, [sp, #0]
 80073ba:	0033      	movs	r3, r6
 80073bc:	002a      	movs	r2, r5
 80073be:	0021      	movs	r1, r4
 80073c0:	f014 ff76 	bl	801c2b0 <iprintf>
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80073c4:	4904      	ldr	r1, [pc, #16]	@ (80073d8 <HAL_UART_RxCpltCallback+0x70>)
 80073c6:	4b05      	ldr	r3, [pc, #20]	@ (80073dc <HAL_UART_RxCpltCallback+0x74>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	0018      	movs	r0, r3
 80073cc:	f00c f998 	bl	8013700 <HAL_UART_Receive_IT>
}
 80073d0:	46c0      	nop			@ (mov r8, r8)
 80073d2:	46bd      	mov	sp, r7
 80073d4:	b003      	add	sp, #12
 80073d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d8:	20000ee8 	.word	0x20000ee8
 80073dc:	200022a0 	.word	0x200022a0
 80073e0:	20000eda 	.word	0x20000eda
 80073e4:	20000ed9 	.word	0x20000ed9
 80073e8:	20000ed8 	.word	0x20000ed8
 80073ec:	20001198 	.word	0x20001198
 80073f0:	20000ede 	.word	0x20000ede
 80073f4:	20000edc 	.word	0x20000edc
 80073f8:	20000edb 	.word	0x20000edb
 80073fc:	0801fe08 	.word	0x0801fe08

08007400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007404:	b672      	cpsid	i
}
 8007406:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007408:	46c0      	nop			@ (mov r8, r8)
 800740a:	e7fd      	b.n	8007408 <Error_Handler+0x8>

0800740c <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007410:	f7ff fb8f 	bl	8006b32 <HT_StartMeasurement>
}
 8007414:	46c0      	nop			@ (mov r8, r8)
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007420:	4a04      	ldr	r2, [pc, #16]	@ (8007434 <HT_IsMeasurementDoneWrapper+0x18>)
 8007422:	4b05      	ldr	r3, [pc, #20]	@ (8007438 <HT_IsMeasurementDoneWrapper+0x1c>)
 8007424:	0011      	movs	r1, r2
 8007426:	0018      	movs	r0, r3
 8007428:	f7ff fb8a 	bl	8006b40 <HT_GetMeasurementValues>
 800742c:	0003      	movs	r3, r0
}
 800742e:	0018      	movs	r0, r3
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000efc 	.word	0x20000efc
 8007438:	20000ef8 	.word	0x20000ef8

0800743c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007440:	f7ff f9e7 	bl	8006812 <Gas_StartMeasurement>
}
 8007444:	46c0      	nop			@ (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8007450:	4b03      	ldr	r3, [pc, #12]	@ (8007460 <VOC_IsMeasurementDoneWrapper+0x14>)
 8007452:	0018      	movs	r0, r3
 8007454:	f7ff f9e4 	bl	8006820 <Gas_GetMeasurementValues>
 8007458:	0003      	movs	r3, r0
}
 800745a:	0018      	movs	r0, r3
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000f00 	.word	0x20000f00

08007464 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
}
 8007468:	46c0      	nop			@ (mov r8, r8)
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800746e:	b580      	push	{r7, lr}
 8007470:	af00      	add	r7, sp, #0
  return true;
 8007472:	2301      	movs	r3, #1
}
 8007474:	0018      	movs	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 800747a:	b580      	push	{r7, lr}
 800747c:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 800747e:	f000 fd1b 	bl	8007eb8 <MIC_TestMeasurementDone>
 8007482:	0003      	movs	r3, r0
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <testInit>:

void testInit(){
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8007490:	4b07      	ldr	r3, [pc, #28]	@ (80074b0 <testInit+0x24>)
 8007492:	2200      	movs	r2, #0
 8007494:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007496:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <testInit+0x24>)
 8007498:	2200      	movs	r2, #0
 800749a:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <testInit+0x24>)
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80074a2:	4b03      	ldr	r3, [pc, #12]	@ (80074b0 <testInit+0x24>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	705a      	strb	r2, [r3, #1]
}
 80074a8:	46c0      	nop			@ (mov r8, r8)
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	46c0      	nop			@ (mov r8, r8)
 80074b0:	20000f3c 	.word	0x20000f3c

080074b4 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80074b4:	b5b0      	push	{r4, r5, r7, lr}
 80074b6:	b092      	sub	sp, #72	@ 0x48
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 80074c0:	f7ff ffe4 	bl	800748c <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80074c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007680 <Meas_Init+0x1cc>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <Meas_Init+0x20>
 80074cc:	4b6c      	ldr	r3, [pc, #432]	@ (8007680 <Meas_Init+0x1cc>)
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d068      	beq.n	80075a6 <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	0018      	movs	r0, r3
 80074d8:	f7fe f9a0 	bl	800581c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80074dc:	f7ff fb40 	bl	8006b60 <HT_DeviceConnected>
 80074e0:	0003      	movs	r3, r0
 80074e2:	001a      	movs	r2, r3
 80074e4:	2301      	movs	r3, #1
 80074e6:	4053      	eors	r3, r2
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 80074ee:	4a65      	ldr	r2, [pc, #404]	@ (8007684 <Meas_Init+0x1d0>)
 80074f0:	4b65      	ldr	r3, [pc, #404]	@ (8007688 <Meas_Init+0x1d4>)
 80074f2:	0019      	movs	r1, r3
 80074f4:	2001      	movs	r0, #1
 80074f6:	f004 f8bb 	bl	800b670 <CreateLine>
       MeasTest.HT_Tested = false;
 80074fa:	4b64      	ldr	r3, [pc, #400]	@ (800768c <Meas_Init+0x1d8>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8007500:	4b5f      	ldr	r3, [pc, #380]	@ (8007680 <Meas_Init+0x1cc>)
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	e008      	b.n	800751a <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8007508:	4b60      	ldr	r3, [pc, #384]	@ (800768c <Meas_Init+0x1d8>)
 800750a:	2201      	movs	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 800750e:	4a60      	ldr	r2, [pc, #384]	@ (8007690 <Meas_Init+0x1dc>)
 8007510:	4b60      	ldr	r3, [pc, #384]	@ (8007694 <Meas_Init+0x1e0>)
 8007512:	0019      	movs	r1, r3
 8007514:	2003      	movs	r0, #3
 8007516:	f004 f8ab 	bl	800b670 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 800751a:	f7ff f98e 	bl	800683a <Gas_DeviceConnected>
 800751e:	0003      	movs	r3, r0
 8007520:	001a      	movs	r2, r3
 8007522:	2301      	movs	r3, #1
 8007524:	4053      	eors	r3, r2
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00c      	beq.n	8007546 <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 800752c:	4b57      	ldr	r3, [pc, #348]	@ (800768c <Meas_Init+0x1d8>)
 800752e:	2200      	movs	r2, #0
 8007530:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8007532:	4a59      	ldr	r2, [pc, #356]	@ (8007698 <Meas_Init+0x1e4>)
 8007534:	4b54      	ldr	r3, [pc, #336]	@ (8007688 <Meas_Init+0x1d4>)
 8007536:	0019      	movs	r1, r3
 8007538:	2001      	movs	r0, #1
 800753a:	f004 f899 	bl	800b670 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 800753e:	4b50      	ldr	r3, [pc, #320]	@ (8007680 <Meas_Init+0x1cc>)
 8007540:	2200      	movs	r2, #0
 8007542:	705a      	strb	r2, [r3, #1]
 8007544:	e008      	b.n	8007558 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8007546:	4b51      	ldr	r3, [pc, #324]	@ (800768c <Meas_Init+0x1d8>)
 8007548:	2201      	movs	r2, #1
 800754a:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 800754c:	4a53      	ldr	r2, [pc, #332]	@ (800769c <Meas_Init+0x1e8>)
 800754e:	4b51      	ldr	r3, [pc, #324]	@ (8007694 <Meas_Init+0x1e0>)
 8007550:	0019      	movs	r1, r3
 8007552:	2003      	movs	r0, #3
 8007554:	f004 f88c 	bl	800b670 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8007558:	4b4c      	ldr	r3, [pc, #304]	@ (800768c <Meas_Init+0x1d8>)
 800755a:	785b      	ldrb	r3, [r3, #1]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <Meas_Init+0xc0>
 8007560:	4b4a      	ldr	r3, [pc, #296]	@ (800768c <Meas_Init+0x1d8>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8007568:	2200      	movs	r2, #0
 800756a:	2101      	movs	r1, #1
 800756c:	2000      	movs	r0, #0
 800756e:	f003 f915 	bl	800a79c <SetDBLED>
 8007572:	e018      	b.n	80075a6 <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8007574:	2200      	movs	r2, #0
 8007576:	2100      	movs	r1, #0
 8007578:	2001      	movs	r0, #1
 800757a:	f003 f90f 	bl	800a79c <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800757e:	4b48      	ldr	r3, [pc, #288]	@ (80076a0 <Meas_Init+0x1ec>)
 8007580:	2200      	movs	r2, #0
 8007582:	2101      	movs	r1, #1
 8007584:	0018      	movs	r0, r3
 8007586:	f005 fe74 	bl	800d272 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800758a:	2380      	movs	r3, #128	@ 0x80
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4844      	ldr	r0, [pc, #272]	@ (80076a0 <Meas_Init+0x1ec>)
 8007590:	2201      	movs	r2, #1
 8007592:	0019      	movs	r1, r3
 8007594:	f005 fe6d 	bl	800d272 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007598:	2380      	movs	r3, #128	@ 0x80
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4840      	ldr	r0, [pc, #256]	@ (80076a0 <Meas_Init+0x1ec>)
 800759e:	2201      	movs	r2, #1
 80075a0:	0019      	movs	r1, r3
 80075a2:	f005 fe66 	bl	800d272 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80075a6:	4b36      	ldr	r3, [pc, #216]	@ (8007680 <Meas_Init+0x1cc>)
 80075a8:	78db      	ldrb	r3, [r3, #3]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d008      	beq.n	80075c0 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 80075ae:	4a3d      	ldr	r2, [pc, #244]	@ (80076a4 <Meas_Init+0x1f0>)
 80075b0:	4b3d      	ldr	r3, [pc, #244]	@ (80076a8 <Meas_Init+0x1f4>)
 80075b2:	0019      	movs	r1, r3
 80075b4:	2002      	movs	r0, #2
 80075b6:	f004 f85b 	bl	800b670 <CreateLine>
          enableMicrophone(true);
 80075ba:	2001      	movs	r0, #1
 80075bc:	f002 fa42 	bl	8009a44 <enableMicrophone>

  }
  uint8_t offset = 0;
 80075c0:	2547      	movs	r5, #71	@ 0x47
 80075c2:	197b      	adds	r3, r7, r5
 80075c4:	2200      	movs	r2, #0
 80075c6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80075c8:	197b      	adds	r3, r7, r5
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	197a      	adds	r2, r7, r5
 80075ce:	1c59      	adds	r1, r3, #1
 80075d0:	7011      	strb	r1, [r2, #0]
 80075d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007680 <Meas_Init+0x1cc>)
 80075d4:	7814      	ldrb	r4, [r2, #0]
 80075d6:	4a35      	ldr	r2, [pc, #212]	@ (80076ac <Meas_Init+0x1f8>)
 80075d8:	0119      	lsls	r1, r3, #4
 80075da:	4835      	ldr	r0, [pc, #212]	@ (80076b0 <Meas_Init+0x1fc>)
 80075dc:	5088      	str	r0, [r1, r2]
 80075de:	4933      	ldr	r1, [pc, #204]	@ (80076ac <Meas_Init+0x1f8>)
 80075e0:	011a      	lsls	r2, r3, #4
 80075e2:	188a      	adds	r2, r1, r2
 80075e4:	3204      	adds	r2, #4
 80075e6:	4933      	ldr	r1, [pc, #204]	@ (80076b4 <Meas_Init+0x200>)
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	4930      	ldr	r1, [pc, #192]	@ (80076ac <Meas_Init+0x1f8>)
 80075ec:	011a      	lsls	r2, r3, #4
 80075ee:	188a      	adds	r2, r1, r2
 80075f0:	3208      	adds	r2, #8
 80075f2:	4931      	ldr	r1, [pc, #196]	@ (80076b8 <Meas_Init+0x204>)
 80075f4:	6011      	str	r1, [r2, #0]
 80075f6:	4a2d      	ldr	r2, [pc, #180]	@ (80076ac <Meas_Init+0x1f8>)
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	18d3      	adds	r3, r2, r3
 80075fc:	330c      	adds	r3, #12
 80075fe:	1c22      	adds	r2, r4, #0
 8007600:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8007602:	197b      	adds	r3, r7, r5
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	197a      	adds	r2, r7, r5
 8007608:	1c59      	adds	r1, r3, #1
 800760a:	7011      	strb	r1, [r2, #0]
 800760c:	4a1c      	ldr	r2, [pc, #112]	@ (8007680 <Meas_Init+0x1cc>)
 800760e:	7854      	ldrb	r4, [r2, #1]
 8007610:	4a26      	ldr	r2, [pc, #152]	@ (80076ac <Meas_Init+0x1f8>)
 8007612:	0119      	lsls	r1, r3, #4
 8007614:	4829      	ldr	r0, [pc, #164]	@ (80076bc <Meas_Init+0x208>)
 8007616:	5088      	str	r0, [r1, r2]
 8007618:	4924      	ldr	r1, [pc, #144]	@ (80076ac <Meas_Init+0x1f8>)
 800761a:	011a      	lsls	r2, r3, #4
 800761c:	188a      	adds	r2, r1, r2
 800761e:	3204      	adds	r2, #4
 8007620:	4927      	ldr	r1, [pc, #156]	@ (80076c0 <Meas_Init+0x20c>)
 8007622:	6011      	str	r1, [r2, #0]
 8007624:	4921      	ldr	r1, [pc, #132]	@ (80076ac <Meas_Init+0x1f8>)
 8007626:	011a      	lsls	r2, r3, #4
 8007628:	188a      	adds	r2, r1, r2
 800762a:	3208      	adds	r2, #8
 800762c:	4925      	ldr	r1, [pc, #148]	@ (80076c4 <Meas_Init+0x210>)
 800762e:	6011      	str	r1, [r2, #0]
 8007630:	4a1e      	ldr	r2, [pc, #120]	@ (80076ac <Meas_Init+0x1f8>)
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	18d3      	adds	r3, r2, r3
 8007636:	330c      	adds	r3, #12
 8007638:	1c22      	adds	r2, r4, #0
 800763a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 800763c:	197b      	adds	r3, r7, r5
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	197a      	adds	r2, r7, r5
 8007642:	1c59      	adds	r1, r3, #1
 8007644:	7011      	strb	r1, [r2, #0]
 8007646:	4a0e      	ldr	r2, [pc, #56]	@ (8007680 <Meas_Init+0x1cc>)
 8007648:	7894      	ldrb	r4, [r2, #2]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <Meas_Init+0x1f8>)
 800764c:	0119      	lsls	r1, r3, #4
 800764e:	481e      	ldr	r0, [pc, #120]	@ (80076c8 <Meas_Init+0x214>)
 8007650:	5088      	str	r0, [r1, r2]
 8007652:	4916      	ldr	r1, [pc, #88]	@ (80076ac <Meas_Init+0x1f8>)
 8007654:	011a      	lsls	r2, r3, #4
 8007656:	188a      	adds	r2, r1, r2
 8007658:	3204      	adds	r2, #4
 800765a:	491c      	ldr	r1, [pc, #112]	@ (80076cc <Meas_Init+0x218>)
 800765c:	6011      	str	r1, [r2, #0]
 800765e:	4913      	ldr	r1, [pc, #76]	@ (80076ac <Meas_Init+0x1f8>)
 8007660:	011a      	lsls	r2, r3, #4
 8007662:	188a      	adds	r2, r1, r2
 8007664:	3208      	adds	r2, #8
 8007666:	491a      	ldr	r1, [pc, #104]	@ (80076d0 <Meas_Init+0x21c>)
 8007668:	6011      	str	r1, [r2, #0]
 800766a:	4a10      	ldr	r2, [pc, #64]	@ (80076ac <Meas_Init+0x1f8>)
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	18d3      	adds	r3, r2, r3
 8007670:	330c      	adds	r3, #12
 8007672:	1c22      	adds	r2, r4, #0
 8007674:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8007676:	46c0      	nop			@ (mov r8, r8)
 8007678:	46bd      	mov	sp, r7
 800767a:	b012      	add	sp, #72	@ 0x48
 800767c:	bdb0      	pop	{r4, r5, r7, pc}
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	20000f38 	.word	0x20000f38
 8007684:	0801fe54 	.word	0x0801fe54
 8007688:	0801fe84 	.word	0x0801fe84
 800768c:	20000f3c 	.word	0x20000f3c
 8007690:	0801fe88 	.word	0x0801fe88
 8007694:	0801feb4 	.word	0x0801feb4
 8007698:	0801feb8 	.word	0x0801feb8
 800769c:	0801fed4 	.word	0x0801fed4
 80076a0:	50000400 	.word	0x50000400
 80076a4:	0801feec 	.word	0x0801feec
 80076a8:	0801ff10 	.word	0x0801ff10
 80076ac:	20000f08 	.word	0x20000f08
 80076b0:	0800740d 	.word	0x0800740d
 80076b4:	0800741d 	.word	0x0800741d
 80076b8:	20000f04 	.word	0x20000f04
 80076bc:	0800743d 	.word	0x0800743d
 80076c0:	0800744d 	.word	0x0800744d
 80076c4:	20000f05 	.word	0x20000f05
 80076c8:	08007465 	.word	0x08007465
 80076cc:	0800746f 	.word	0x0800746f
 80076d0:	20000f06 	.word	0x20000f06

080076d4 <StartMeasurements>:

void StartMeasurements(void) {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80076d8:	4b10      	ldr	r3, [pc, #64]	@ (800771c <StartMeasurements+0x48>)
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e015      	b.n	800770c <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80076e0:	4b0e      	ldr	r3, [pc, #56]	@ (800771c <StartMeasurements+0x48>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007720 <StartMeasurements+0x4c>)
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	18d3      	adds	r3, r2, r3
 80076ea:	330c      	adds	r3, #12
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d006      	beq.n	8007700 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80076f2:	4b0a      	ldr	r3, [pc, #40]	@ (800771c <StartMeasurements+0x48>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	001a      	movs	r2, r3
 80076f8:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <StartMeasurements+0x4c>)
 80076fa:	0112      	lsls	r2, r2, #4
 80076fc:	58d3      	ldr	r3, [r2, r3]
 80076fe:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007700:	4b06      	ldr	r3, [pc, #24]	@ (800771c <StartMeasurements+0x48>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	b2da      	uxtb	r2, r3
 8007708:	4b04      	ldr	r3, [pc, #16]	@ (800771c <StartMeasurements+0x48>)
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	4b03      	ldr	r3, [pc, #12]	@ (800771c <StartMeasurements+0x48>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d9e5      	bls.n	80076e0 <StartMeasurements+0xc>
    }
  }
}
 8007714:	46c0      	nop			@ (mov r8, r8)
 8007716:	46c0      	nop			@ (mov r8, r8)
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000f40 	.word	0x20000f40
 8007720:	20000f08 	.word	0x20000f08

08007724 <Meas_Test>:

void Meas_Test(){
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007728:	4b23      	ldr	r3, [pc, #140]	@ (80077b8 <Meas_Test+0x94>)
 800772a:	78db      	ldrb	r3, [r3, #3]
 800772c:	2201      	movs	r2, #1
 800772e:	4053      	eors	r3, r2
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <Meas_Test+0x16>
    ESP_WakeTest();
 8007736:	f7fd fb75 	bl	8004e24 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 800773a:	4b1f      	ldr	r3, [pc, #124]	@ (80077b8 <Meas_Test+0x94>)
 800773c:	789b      	ldrb	r3, [r3, #2]
 800773e:	2201      	movs	r2, #1
 8007740:	4053      	eors	r3, r2
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01b      	beq.n	8007780 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007748:	f7ff fe97 	bl	800747a <MIC_IsTestMeasurementDoneWrapper>
 800774c:	1e03      	subs	r3, r0, #0
 800774e:	d00b      	beq.n	8007768 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8007750:	4b19      	ldr	r3, [pc, #100]	@ (80077b8 <Meas_Test+0x94>)
 8007752:	2201      	movs	r2, #1
 8007754:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007756:	23fa      	movs	r3, #250	@ 0xfa
 8007758:	011a      	lsls	r2, r3, #4
 800775a:	4918      	ldr	r1, [pc, #96]	@ (80077bc <Meas_Test+0x98>)
 800775c:	23fa      	movs	r3, #250	@ 0xfa
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	0018      	movs	r0, r3
 8007762:	f002 ffe7 	bl	800a734 <SetStatusLED>
 8007766:	e00b      	b.n	8007780 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007768:	f002 f948 	bl	80099fc <micSettlingComplete>
 800776c:	1e03      	subs	r3, r0, #0
 800776e:	d007      	beq.n	8007780 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007770:	23fa      	movs	r3, #250	@ 0xfa
 8007772:	011a      	lsls	r2, r3, #4
 8007774:	23fa      	movs	r3, #250	@ 0xfa
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	4810      	ldr	r0, [pc, #64]	@ (80077bc <Meas_Test+0x98>)
 800777a:	0019      	movs	r1, r3
 800777c:	f002 ffda 	bl	800a734 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8007780:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <Meas_Test+0x94>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d013      	beq.n	80077b0 <Meas_Test+0x8c>
 8007788:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <Meas_Test+0x94>)
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00f      	beq.n	80077b0 <Meas_Test+0x8c>
 8007790:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <Meas_Test+0x94>)
 8007792:	78db      	ldrb	r3, [r3, #3]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <Meas_Test+0x8c>
 8007798:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <Meas_Test+0x94>)
 800779a:	789b      	ldrb	r3, [r3, #2]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <Meas_Test+0x8c>
    Info("Test completed");
 80077a0:	4a07      	ldr	r2, [pc, #28]	@ (80077c0 <Meas_Test+0x9c>)
 80077a2:	4b08      	ldr	r3, [pc, #32]	@ (80077c4 <Meas_Test+0xa0>)
 80077a4:	0019      	movs	r1, r3
 80077a6:	2002      	movs	r0, #2
 80077a8:	f003 ff62 	bl	800b670 <CreateLine>
    SetTestDone();
 80077ac:	f7ff fbd6 	bl	8006f5c <SetTestDone>
  }
}
 80077b0:	46c0      	nop			@ (mov r8, r8)
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	46c0      	nop			@ (mov r8, r8)
 80077b8:	20000f3c 	.word	0x20000f3c
 80077bc:	00000bb8 	.word	0x00000bb8
 80077c0:	0801ff14 	.word	0x0801ff14
 80077c4:	0801ff10 	.word	0x0801ff10

080077c8 <ResetMeasurements>:
void ResetMeasurements(void) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80077cc:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <ResetMeasurements+0x34>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 80077d2:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <ResetMeasurements+0x34>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80077d8:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <ResetMeasurements+0x34>)
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80077de:	4b07      	ldr	r3, [pc, #28]	@ (80077fc <ResetMeasurements+0x34>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 80077e4:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <ResetMeasurements+0x34>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 80077ea:	4b04      	ldr	r3, [pc, #16]	@ (80077fc <ResetMeasurements+0x34>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 80077f0:	4b02      	ldr	r3, [pc, #8]	@ (80077fc <ResetMeasurements+0x34>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	73da      	strb	r2, [r3, #15]
}
 80077f6:	46c0      	nop			@ (mov r8, r8)
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20000ef8 	.word	0x20000ef8

08007800 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007804:	4b18      	ldr	r3, [pc, #96]	@ (8007868 <MeasurementsCompleted+0x68>)
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	e024      	b.n	8007856 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 800780c:	4b16      	ldr	r3, [pc, #88]	@ (8007868 <MeasurementsCompleted+0x68>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	4a16      	ldr	r2, [pc, #88]	@ (800786c <MeasurementsCompleted+0x6c>)
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	18d3      	adds	r3, r2, r3
 8007816:	330c      	adds	r3, #12
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d015      	beq.n	800784a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800781e:	4b12      	ldr	r3, [pc, #72]	@ (8007868 <MeasurementsCompleted+0x68>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	4a12      	ldr	r2, [pc, #72]	@ (800786c <MeasurementsCompleted+0x6c>)
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	18d3      	adds	r3, r2, r3
 8007828:	3304      	adds	r3, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4798      	blx	r3
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d009      	beq.n	8007846 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <MeasurementsCompleted+0x68>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	4a0d      	ldr	r2, [pc, #52]	@ (800786c <MeasurementsCompleted+0x6c>)
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	18d3      	adds	r3, r2, r3
 800783c:	3308      	adds	r3, #8
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2201      	movs	r2, #1
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e001      	b.n	800784a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007846:	2300      	movs	r3, #0
 8007848:	e00a      	b.n	8007860 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800784a:	4b07      	ldr	r3, [pc, #28]	@ (8007868 <MeasurementsCompleted+0x68>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	3301      	adds	r3, #1
 8007850:	b2da      	uxtb	r2, r3
 8007852:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <MeasurementsCompleted+0x68>)
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	4b04      	ldr	r3, [pc, #16]	@ (8007868 <MeasurementsCompleted+0x68>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d9d6      	bls.n	800780c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800785e:	2301      	movs	r3, #1
}
 8007860:	0018      	movs	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	46c0      	nop			@ (mov r8, r8)
 8007868:	20000f40 	.word	0x20000f40
 800786c:	20000f08 	.word	0x20000f08

08007870 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8007870:	b590      	push	{r4, r7, lr}
 8007872:	b085      	sub	sp, #20
 8007874:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8007876:	4b7d      	ldr	r3, [pc, #500]	@ (8007a6c <Mic_Upkeep+0x1fc>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b03      	cmp	r3, #3
 800787c:	d100      	bne.n	8007880 <Mic_Upkeep+0x10>
 800787e:	e0c0      	b.n	8007a02 <Mic_Upkeep+0x192>
 8007880:	dd00      	ble.n	8007884 <Mic_Upkeep+0x14>
 8007882:	e0dd      	b.n	8007a40 <Mic_Upkeep+0x1d0>
 8007884:	2b02      	cmp	r3, #2
 8007886:	d037      	beq.n	80078f8 <Mic_Upkeep+0x88>
 8007888:	dd00      	ble.n	800788c <Mic_Upkeep+0x1c>
 800788a:	e0d9      	b.n	8007a40 <Mic_Upkeep+0x1d0>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <Mic_Upkeep+0x26>
 8007890:	2b01      	cmp	r3, #1
 8007892:	d014      	beq.n	80078be <Mic_Upkeep+0x4e>
 8007894:	e0d4      	b.n	8007a40 <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007896:	2001      	movs	r0, #1
 8007898:	f002 f8d4 	bl	8009a44 <enableMicrophone>
 800789c:	0003      	movs	r3, r0
 800789e:	001a      	movs	r2, r3
 80078a0:	2301      	movs	r3, #1
 80078a2:	4053      	eors	r3, r2
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80078aa:	4a71      	ldr	r2, [pc, #452]	@ (8007a70 <Mic_Upkeep+0x200>)
 80078ac:	4b71      	ldr	r3, [pc, #452]	@ (8007a74 <Mic_Upkeep+0x204>)
 80078ae:	21d4      	movs	r1, #212	@ 0xd4
 80078b0:	0018      	movs	r0, r3
 80078b2:	f003 ff89 	bl	800b7c8 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 80078b6:	4b6d      	ldr	r3, [pc, #436]	@ (8007a6c <Mic_Upkeep+0x1fc>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 80078bc:	e0cf      	b.n	8007a5e <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 80078be:	f002 f89d 	bl	80099fc <micSettlingComplete>
 80078c2:	1e03      	subs	r3, r0, #0
 80078c4:	d105      	bne.n	80078d2 <Mic_Upkeep+0x62>
 80078c6:	4b6c      	ldr	r3, [pc, #432]	@ (8007a78 <Mic_Upkeep+0x208>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d100      	bne.n	80078d2 <Mic_Upkeep+0x62>
 80078d0:	e0c0      	b.n	8007a54 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 80078d2:	f002 f921 	bl	8009b18 <startSPLcalculation>
 80078d6:	0003      	movs	r3, r0
 80078d8:	001a      	movs	r2, r3
 80078da:	2301      	movs	r3, #1
 80078dc:	4053      	eors	r3, r2
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 80078e4:	4a62      	ldr	r2, [pc, #392]	@ (8007a70 <Mic_Upkeep+0x200>)
 80078e6:	4b63      	ldr	r3, [pc, #396]	@ (8007a74 <Mic_Upkeep+0x204>)
 80078e8:	21e0      	movs	r1, #224	@ 0xe0
 80078ea:	0018      	movs	r0, r3
 80078ec:	f003 ff6c 	bl	800b7c8 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80078f0:	4b5e      	ldr	r3, [pc, #376]	@ (8007a6c <Mic_Upkeep+0x1fc>)
 80078f2:	2202      	movs	r2, #2
 80078f4:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 80078f6:	e0ad      	b.n	8007a54 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 80078f8:	4b60      	ldr	r3, [pc, #384]	@ (8007a7c <Mic_Upkeep+0x20c>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	2101      	movs	r1, #1
 80078fe:	0018      	movs	r0, r3
 8007900:	f001 ff5e 	bl	80097c0 <getSoundData>
 8007904:	1e03      	subs	r3, r0, #0
 8007906:	d100      	bne.n	800790a <Mic_Upkeep+0x9a>
 8007908:	e0a6      	b.n	8007a58 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 800790a:	f002 f857 	bl	80099bc <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800790e:	4b5b      	ldr	r3, [pc, #364]	@ (8007a7c <Mic_Upkeep+0x20c>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007914:	4b59      	ldr	r3, [pc, #356]	@ (8007a7c <Mic_Upkeep+0x20c>)
 8007916:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007918:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 800791a:	4b58      	ldr	r3, [pc, #352]	@ (8007a7c <Mic_Upkeep+0x20c>)
 800791c:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800791e:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8007920:	4b56      	ldr	r3, [pc, #344]	@ (8007a7c <Mic_Upkeep+0x20c>)
 8007922:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007924:	4856      	ldr	r0, [pc, #344]	@ (8007a80 <Mic_Upkeep+0x210>)
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	0023      	movs	r3, r4
 800792a:	f000 faf5 	bl	8007f18 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800792e:	4b53      	ldr	r3, [pc, #332]	@ (8007a7c <Mic_Upkeep+0x20c>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	001a      	movs	r2, r3
 8007934:	4b51      	ldr	r3, [pc, #324]	@ (8007a7c <Mic_Upkeep+0x20c>)
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	4952      	ldr	r1, [pc, #328]	@ (8007a84 <Mic_Upkeep+0x214>)
 800793a:	0038      	movs	r0, r7
 800793c:	f014 fcc8 	bl	801c2d0 <siprintf>

      dBValue = atof(dBbuffer);
 8007940:	003b      	movs	r3, r7
 8007942:	0018      	movs	r0, r3
 8007944:	f013 f8d4 	bl	801aaf0 <atof>
 8007948:	0002      	movs	r2, r0
 800794a:	000b      	movs	r3, r1
 800794c:	0010      	movs	r0, r2
 800794e:	0019      	movs	r1, r3
 8007950:	f7fb fdd0 	bl	80034f4 <__aeabi_d2f>
 8007954:	1c02      	adds	r2, r0, #0
 8007956:	4b4c      	ldr	r3, [pc, #304]	@ (8007a88 <Mic_Upkeep+0x218>)
 8007958:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800795a:	4b4b      	ldr	r3, [pc, #300]	@ (8007a88 <Mic_Upkeep+0x218>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	494b      	ldr	r1, [pc, #300]	@ (8007a8c <Mic_Upkeep+0x21c>)
 8007960:	1c18      	adds	r0, r3, #0
 8007962:	f7f9 fb1d 	bl	8000fa0 <__aeabi_fmul>
 8007966:	1c03      	adds	r3, r0, #0
 8007968:	1c18      	adds	r0, r3, #0
 800796a:	f7fb fd7b 	bl	8003464 <__aeabi_f2d>
 800796e:	2200      	movs	r2, #0
 8007970:	4b47      	ldr	r3, [pc, #284]	@ (8007a90 <Mic_Upkeep+0x220>)
 8007972:	f7f9 febb 	bl	80016ec <__aeabi_dadd>
 8007976:	0002      	movs	r2, r0
 8007978:	000b      	movs	r3, r1
 800797a:	0010      	movs	r0, r2
 800797c:	0019      	movs	r1, r3
 800797e:	f7fb fce3 	bl	8003348 <__aeabi_d2iz>
 8007982:	0003      	movs	r3, r0
 8007984:	0018      	movs	r0, r3
 8007986:	f7fb fd1b 	bl	80033c0 <__aeabi_i2d>
 800798a:	2200      	movs	r2, #0
 800798c:	4b41      	ldr	r3, [pc, #260]	@ (8007a94 <Mic_Upkeep+0x224>)
 800798e:	f7fa fa11 	bl	8001db4 <__aeabi_ddiv>
 8007992:	0002      	movs	r2, r0
 8007994:	000b      	movs	r3, r1
 8007996:	0010      	movs	r0, r2
 8007998:	0019      	movs	r1, r3
 800799a:	f7fb fdab 	bl	80034f4 <__aeabi_d2f>
 800799e:	1c02      	adds	r2, r0, #0
 80079a0:	4b39      	ldr	r3, [pc, #228]	@ (8007a88 <Mic_Upkeep+0x218>)
 80079a2:	601a      	str	r2, [r3, #0]
      MIC_Print();
 80079a4:	f000 f966 	bl	8007c74 <MIC_Print>
      if (!startSPLcalculation()) {
 80079a8:	f002 f8b6 	bl	8009b18 <startSPLcalculation>
 80079ac:	0003      	movs	r3, r0
 80079ae:	001a      	movs	r2, r3
 80079b0:	2301      	movs	r3, #1
 80079b2:	4053      	eors	r3, r2
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 80079ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007a70 <Mic_Upkeep+0x200>)
 80079bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007a74 <Mic_Upkeep+0x204>)
 80079be:	21f9      	movs	r1, #249	@ 0xf9
 80079c0:	0018      	movs	r0, r3
 80079c2:	f003 ff01 	bl	800b7c8 <errorHandler>
      }
      if (!enableMicrophone(false))
 80079c6:	2000      	movs	r0, #0
 80079c8:	f002 f83c 	bl	8009a44 <enableMicrophone>
 80079cc:	0003      	movs	r3, r0
 80079ce:	001a      	movs	r2, r3
 80079d0:	2301      	movs	r3, #1
 80079d2:	4053      	eors	r3, r2
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80079da:	4a25      	ldr	r2, [pc, #148]	@ (8007a70 <Mic_Upkeep+0x200>)
 80079dc:	4b25      	ldr	r3, [pc, #148]	@ (8007a74 <Mic_Upkeep+0x204>)
 80079de:	21fd      	movs	r1, #253	@ 0xfd
 80079e0:	0018      	movs	r0, r3
 80079e2:	f003 fef1 	bl	800b7c8 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 80079e6:	f004 f9e5 	bl	800bdb4 <HAL_GetTick>
 80079ea:	0003      	movs	r3, r0
 80079ec:	22fa      	movs	r2, #250	@ 0xfa
 80079ee:	0092      	lsls	r2, r2, #2
 80079f0:	189a      	adds	r2, r3, r2
 80079f2:	4b29      	ldr	r3, [pc, #164]	@ (8007a98 <Mic_Upkeep+0x228>)
 80079f4:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80079f6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a6c <Mic_Upkeep+0x1fc>)
 80079f8:	2203      	movs	r2, #3
 80079fa:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80079fc:	f002 ff92 	bl	800a924 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 8007a00:	e02a      	b.n	8007a58 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007a02:	4b25      	ldr	r3, [pc, #148]	@ (8007a98 <Mic_Upkeep+0x228>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	0018      	movs	r0, r3
 8007a08:	f003 fddc 	bl	800b5c4 <TimestampIsReached>
 8007a0c:	1e03      	subs	r3, r0, #0
 8007a0e:	d025      	beq.n	8007a5c <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 8007a10:	2001      	movs	r0, #1
 8007a12:	f002 f817 	bl	8009a44 <enableMicrophone>
 8007a16:	0003      	movs	r3, r0
 8007a18:	001a      	movs	r2, r3
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4053      	eors	r3, r2
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007a24:	4a12      	ldr	r2, [pc, #72]	@ (8007a70 <Mic_Upkeep+0x200>)
 8007a26:	230c      	movs	r3, #12
 8007a28:	33ff      	adds	r3, #255	@ 0xff
 8007a2a:	0019      	movs	r1, r3
 8007a2c:	4b11      	ldr	r3, [pc, #68]	@ (8007a74 <Mic_Upkeep+0x204>)
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f003 feca 	bl	800b7c8 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007a34:	4b0d      	ldr	r3, [pc, #52]	@ (8007a6c <Mic_Upkeep+0x1fc>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007a3a:	f002 ff5b 	bl	800a8f4 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 8007a3e:	e00d      	b.n	8007a5c <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 8007a40:	4a16      	ldr	r2, [pc, #88]	@ (8007a9c <Mic_Upkeep+0x22c>)
 8007a42:	4b17      	ldr	r3, [pc, #92]	@ (8007aa0 <Mic_Upkeep+0x230>)
 8007a44:	0019      	movs	r1, r3
 8007a46:	2003      	movs	r0, #3
 8007a48:	f003 fe12 	bl	800b670 <CreateLine>
    MicState = MIC_STATE_INIT;
 8007a4c:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <Mic_Upkeep+0x1fc>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 8007a52:	e004      	b.n	8007a5e <Mic_Upkeep+0x1ee>
    break;
 8007a54:	46c0      	nop			@ (mov r8, r8)
 8007a56:	e002      	b.n	8007a5e <Mic_Upkeep+0x1ee>
    break;
 8007a58:	46c0      	nop			@ (mov r8, r8)
 8007a5a:	e000      	b.n	8007a5e <Mic_Upkeep+0x1ee>
    break;
 8007a5c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	@ (8007a6c <Mic_Upkeep+0x1fc>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
}
 8007a62:	0018      	movs	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b003      	add	sp, #12
 8007a68:	bd90      	pop	{r4, r7, pc}
 8007a6a:	46c0      	nop			@ (mov r8, r8)
 8007a6c:	20000f5e 	.word	0x20000f5e
 8007a70:	0801ff24 	.word	0x0801ff24
 8007a74:	0802078c 	.word	0x0802078c
 8007a78:	20001280 	.word	0x20001280
 8007a7c:	20000f4c 	.word	0x20000f4c
 8007a80:	0801ff40 	.word	0x0801ff40
 8007a84:	0801ff6c 	.word	0x0801ff6c
 8007a88:	20000f90 	.word	0x20000f90
 8007a8c:	42c80000 	.word	0x42c80000
 8007a90:	3fe00000 	.word	0x3fe00000
 8007a94:	40590000 	.word	0x40590000
 8007a98:	20000f48 	.word	0x20000f48
 8007a9c:	0801ff74 	.word	0x0801ff74
 8007aa0:	0801feb4 	.word	0x0801feb4

08007aa4 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007aa4:	b5b0      	push	{r4, r5, r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b06      	cmp	r3, #6
 8007ab0:	d868      	bhi.n	8007b84 <Meas_Upkeep+0xe0>
 8007ab2:	009a      	lsls	r2, r3, #2
 8007ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ba0 <Meas_Upkeep+0xfc>)
 8007ab6:	18d3      	adds	r3, r2, r3
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007abc:	4a39      	ldr	r2, [pc, #228]	@ (8007ba4 <Meas_Upkeep+0x100>)
 8007abe:	4b3a      	ldr	r3, [pc, #232]	@ (8007ba8 <Meas_Upkeep+0x104>)
 8007ac0:	0019      	movs	r1, r3
 8007ac2:	2003      	movs	r0, #3
 8007ac4:	f003 fdd4 	bl	800b670 <CreateLine>
    break;
 8007ac8:	e063      	b.n	8007b92 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007aca:	f7ff fe7d 	bl	80077c8 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8007ace:	4b33      	ldr	r3, [pc, #204]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
    break;
 8007ad4:	e05d      	b.n	8007b92 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8007ad6:	f7ff fdfd 	bl	80076d4 <StartMeasurements>
    SetMeasurementIndicator();
 8007ada:	f002 fedd 	bl	800a898 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8007ade:	4b2f      	ldr	r3, [pc, #188]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	701a      	strb	r2, [r3, #0]
   break;
 8007ae4:	e055      	b.n	8007b92 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8007ae6:	f7ff fe8b 	bl	8007800 <MeasurementsCompleted>
 8007aea:	1e03      	subs	r3, r0, #0
 8007aec:	d04e      	beq.n	8007b8c <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007aee:	4b2b      	ldr	r3, [pc, #172]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007af0:	2203      	movs	r2, #3
 8007af2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007af4:	e04a      	b.n	8007b8c <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8007af6:	4a2d      	ldr	r2, [pc, #180]	@ (8007bac <Meas_Upkeep+0x108>)
 8007af8:	4b2b      	ldr	r3, [pc, #172]	@ (8007ba8 <Meas_Upkeep+0x104>)
 8007afa:	0019      	movs	r1, r3
 8007afc:	2003      	movs	r0, #3
 8007afe:	f003 fdb7 	bl	800b670 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007b02:	4b2b      	ldr	r3, [pc, #172]	@ (8007bb0 <Meas_Upkeep+0x10c>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	4a2b      	ldr	r2, [pc, #172]	@ (8007bb4 <Meas_Upkeep+0x110>)
 8007b08:	4927      	ldr	r1, [pc, #156]	@ (8007ba8 <Meas_Upkeep+0x104>)
 8007b0a:	2003      	movs	r0, #3
 8007b0c:	f003 fdb0 	bl	800b670 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007b10:	4b27      	ldr	r3, [pc, #156]	@ (8007bb0 <Meas_Upkeep+0x10c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	1c18      	adds	r0, r3, #0
 8007b16:	f7fb fca5 	bl	8003464 <__aeabi_f2d>
 8007b1a:	0004      	movs	r4, r0
 8007b1c:	000d      	movs	r5, r1
 8007b1e:	4b24      	ldr	r3, [pc, #144]	@ (8007bb0 <Meas_Upkeep+0x10c>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	1c18      	adds	r0, r3, #0
 8007b24:	f7fb fc9e 	bl	8003464 <__aeabi_f2d>
 8007b28:	0002      	movs	r2, r0
 8007b2a:	000b      	movs	r3, r1
 8007b2c:	4822      	ldr	r0, [pc, #136]	@ (8007bb8 <Meas_Upkeep+0x114>)
 8007b2e:	491e      	ldr	r1, [pc, #120]	@ (8007ba8 <Meas_Upkeep+0x104>)
 8007b30:	9202      	str	r2, [sp, #8]
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	9400      	str	r4, [sp, #0]
 8007b36:	9501      	str	r5, [sp, #4]
 8007b38:	0002      	movs	r2, r0
 8007b3a:	2003      	movs	r0, #3
 8007b3c:	f003 fd98 	bl	800b670 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007b40:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb0 <Meas_Upkeep+0x10c>)
 8007b42:	6858      	ldr	r0, [r3, #4]
 8007b44:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb0 <Meas_Upkeep+0x10c>)
 8007b46:	6819      	ldr	r1, [r3, #0]
 8007b48:	4b19      	ldr	r3, [pc, #100]	@ (8007bb0 <Meas_Upkeep+0x10c>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	001a      	movs	r2, r3
 8007b50:	f7fb feb8 	bl	80038c4 <setMeasurement>
    ResetMeasurementIndicator();
 8007b54:	f002 feb8 	bl	800a8c8 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007b58:	f004 f92c 	bl	800bdb4 <HAL_GetTick>
 8007b5c:	0003      	movs	r3, r0
 8007b5e:	4a17      	ldr	r2, [pc, #92]	@ (8007bbc <Meas_Upkeep+0x118>)
 8007b60:	189a      	adds	r2, r3, r2
 8007b62:	4b17      	ldr	r3, [pc, #92]	@ (8007bc0 <Meas_Upkeep+0x11c>)
 8007b64:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007b68:	2206      	movs	r2, #6
 8007b6a:	701a      	strb	r2, [r3, #0]
    break;
 8007b6c:	e011      	b.n	8007b92 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007b6e:	4b14      	ldr	r3, [pc, #80]	@ (8007bc0 <Meas_Upkeep+0x11c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	0018      	movs	r0, r3
 8007b74:	f003 fd26 	bl	800b5c4 <TimestampIsReached>
 8007b78:	1e03      	subs	r3, r0, #0
 8007b7a:	d009      	beq.n	8007b90 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007b7c:	4b07      	ldr	r3, [pc, #28]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007b82:	e005      	b.n	8007b90 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007b84:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
    break;
 8007b8a:	e002      	b.n	8007b92 <Meas_Upkeep+0xee>
    break;
 8007b8c:	46c0      	nop			@ (mov r8, r8)
 8007b8e:	e000      	b.n	8007b92 <Meas_Upkeep+0xee>
    break;
 8007b90:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007b92:	4b02      	ldr	r3, [pc, #8]	@ (8007b9c <Meas_Upkeep+0xf8>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
}
 8007b96:	0018      	movs	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b9c:	20000f5f 	.word	0x20000f5f
 8007ba0:	08020770 	.word	0x08020770
 8007ba4:	0801ff94 	.word	0x0801ff94
 8007ba8:	0801feb4 	.word	0x0801feb4
 8007bac:	0801ffb4 	.word	0x0801ffb4
 8007bb0:	20000ef8 	.word	0x20000ef8
 8007bb4:	0801ffc8 	.word	0x0801ffc8
 8007bb8:	0801ffe0 	.word	0x0801ffe0
 8007bbc:	00002710 	.word	0x00002710
 8007bc0:	20000f44 	.word	0x20000f44

08007bc4 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007bc4:	b590      	push	{r4, r7, lr}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	1d3b      	adds	r3, r7, #4
 8007bcc:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007bce:	240f      	movs	r4, #15
 8007bd0:	193b      	adds	r3, r7, r4
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007bd6:	4b20      	ldr	r3, [pc, #128]	@ (8007c58 <Meas_SetEnabledSensors+0x94>)
 8007bd8:	1d3a      	adds	r2, r7, #4
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007bde:	193b      	adds	r3, r7, r4
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	193a      	adds	r2, r7, r4
 8007be4:	1c59      	adds	r1, r3, #1
 8007be6:	7011      	strb	r1, [r2, #0]
 8007be8:	0018      	movs	r0, r3
 8007bea:	1d3b      	adds	r3, r7, #4
 8007bec:	7819      	ldrb	r1, [r3, #0]
 8007bee:	4a1b      	ldr	r2, [pc, #108]	@ (8007c5c <Meas_SetEnabledSensors+0x98>)
 8007bf0:	0103      	lsls	r3, r0, #4
 8007bf2:	18d3      	adds	r3, r2, r3
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	1c0a      	adds	r2, r1, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007bfa:	193b      	adds	r3, r7, r4
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	193a      	adds	r2, r7, r4
 8007c00:	1c59      	adds	r1, r3, #1
 8007c02:	7011      	strb	r1, [r2, #0]
 8007c04:	0018      	movs	r0, r3
 8007c06:	1d3b      	adds	r3, r7, #4
 8007c08:	7859      	ldrb	r1, [r3, #1]
 8007c0a:	4a14      	ldr	r2, [pc, #80]	@ (8007c5c <Meas_SetEnabledSensors+0x98>)
 8007c0c:	0103      	lsls	r3, r0, #4
 8007c0e:	18d3      	adds	r3, r2, r3
 8007c10:	330c      	adds	r3, #12
 8007c12:	1c0a      	adds	r2, r1, #0
 8007c14:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007c16:	193b      	adds	r3, r7, r4
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	193a      	adds	r2, r7, r4
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	7011      	strb	r1, [r2, #0]
 8007c20:	0018      	movs	r0, r3
 8007c22:	1d3b      	adds	r3, r7, #4
 8007c24:	7899      	ldrb	r1, [r3, #2]
 8007c26:	4a0d      	ldr	r2, [pc, #52]	@ (8007c5c <Meas_SetEnabledSensors+0x98>)
 8007c28:	0103      	lsls	r3, r0, #4
 8007c2a:	18d3      	adds	r3, r2, r3
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	1c0a      	adds	r2, r1, #0
 8007c30:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007c32:	193b      	adds	r3, r7, r4
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	193a      	adds	r2, r7, r4
 8007c38:	1c59      	adds	r1, r3, #1
 8007c3a:	7011      	strb	r1, [r2, #0]
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	1d3b      	adds	r3, r7, #4
 8007c40:	78d9      	ldrb	r1, [r3, #3]
 8007c42:	4a06      	ldr	r2, [pc, #24]	@ (8007c5c <Meas_SetEnabledSensors+0x98>)
 8007c44:	0103      	lsls	r3, r0, #4
 8007c46:	18d3      	adds	r3, r2, r3
 8007c48:	330c      	adds	r3, #12
 8007c4a:	1c0a      	adds	r2, r1, #0
 8007c4c:	701a      	strb	r2, [r3, #0]
}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b005      	add	sp, #20
 8007c54:	bd90      	pop	{r4, r7, pc}
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	20000f38 	.word	0x20000f38
 8007c5c:	20000f08 	.word	0x20000f08

08007c60 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007c60:	b580      	push	{r7, lr}
 8007c62:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007c64:	4b02      	ldr	r3, [pc, #8]	@ (8007c70 <SetESPMeasurementDone+0x10>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	70da      	strb	r2, [r3, #3]
}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000f3c 	.word	0x20000f3c

08007c74 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007c7a:	4b81      	ldr	r3, [pc, #516]	@ (8007e80 <MIC_Print+0x20c>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b81      	ldr	r3, [pc, #516]	@ (8007e84 <MIC_Print+0x210>)
 8007c80:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007c82:	4b81      	ldr	r3, [pc, #516]	@ (8007e88 <MIC_Print+0x214>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b09      	cmp	r3, #9
 8007c88:	d80e      	bhi.n	8007ca8 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e88 <MIC_Print+0x214>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	001a      	movs	r2, r3
 8007c90:	4b7c      	ldr	r3, [pc, #496]	@ (8007e84 <MIC_Print+0x210>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	4b7d      	ldr	r3, [pc, #500]	@ (8007e8c <MIC_Print+0x218>)
 8007c96:	0092      	lsls	r2, r2, #2
 8007c98:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e88 <MIC_Print+0x214>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	4b79      	ldr	r3, [pc, #484]	@ (8007e88 <MIC_Print+0x214>)
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	e013      	b.n	8007cd0 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007ca8:	4b77      	ldr	r3, [pc, #476]	@ (8007e88 <MIC_Print+0x214>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007cae:	4b76      	ldr	r3, [pc, #472]	@ (8007e88 <MIC_Print+0x214>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	4b73      	ldr	r3, [pc, #460]	@ (8007e84 <MIC_Print+0x210>)
 8007cb6:	6819      	ldr	r1, [r3, #0]
 8007cb8:	4b74      	ldr	r3, [pc, #464]	@ (8007e8c <MIC_Print+0x218>)
 8007cba:	0092      	lsls	r2, r2, #2
 8007cbc:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007cbe:	4b72      	ldr	r3, [pc, #456]	@ (8007e88 <MIC_Print+0x214>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	4b70      	ldr	r3, [pc, #448]	@ (8007e88 <MIC_Print+0x214>)
 8007cc8:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007cca:	4b71      	ldr	r3, [pc, #452]	@ (8007e90 <MIC_Print+0x21c>)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8007cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8007e90 <MIC_Print+0x21c>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	4053      	eors	r3, r2
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 8007cde:	4b69      	ldr	r3, [pc, #420]	@ (8007e84 <MIC_Print+0x210>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	1c18      	adds	r0, r3, #0
 8007ce4:	f7fb fe0a 	bl	80038fc <setMic>
 8007ce8:	e02d      	b.n	8007d46 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8007cea:	4b6a      	ldr	r3, [pc, #424]	@ (8007e94 <MIC_Print+0x220>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007cf0:	1dfb      	adds	r3, r7, #7
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e013      	b.n	8007d20 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8007cf8:	1dfb      	adds	r3, r7, #7
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	4b63      	ldr	r3, [pc, #396]	@ (8007e8c <MIC_Print+0x218>)
 8007cfe:	0092      	lsls	r2, r2, #2
 8007d00:	58d2      	ldr	r2, [r2, r3]
 8007d02:	4b64      	ldr	r3, [pc, #400]	@ (8007e94 <MIC_Print+0x220>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	1c19      	adds	r1, r3, #0
 8007d08:	1c10      	adds	r0, r2, #0
 8007d0a:	f7f8 fdd9 	bl	80008c0 <__aeabi_fadd>
 8007d0e:	1c03      	adds	r3, r0, #0
 8007d10:	1c1a      	adds	r2, r3, #0
 8007d12:	4b60      	ldr	r3, [pc, #384]	@ (8007e94 <MIC_Print+0x220>)
 8007d14:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007d16:	1dfb      	adds	r3, r7, #7
 8007d18:	781a      	ldrb	r2, [r3, #0]
 8007d1a:	1dfb      	adds	r3, r7, #7
 8007d1c:	3201      	adds	r2, #1
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	1dfb      	adds	r3, r7, #7
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b09      	cmp	r3, #9
 8007d26:	d9e7      	bls.n	8007cf8 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8007d28:	4b5a      	ldr	r3, [pc, #360]	@ (8007e94 <MIC_Print+0x220>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	495a      	ldr	r1, [pc, #360]	@ (8007e98 <MIC_Print+0x224>)
 8007d2e:	1c18      	adds	r0, r3, #0
 8007d30:	f7f8 ff50 	bl	8000bd4 <__aeabi_fdiv>
 8007d34:	1c03      	adds	r3, r0, #0
 8007d36:	1c1a      	adds	r2, r3, #0
 8007d38:	4b56      	ldr	r3, [pc, #344]	@ (8007e94 <MIC_Print+0x220>)
 8007d3a:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007d3c:	4b55      	ldr	r3, [pc, #340]	@ (8007e94 <MIC_Print+0x220>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	1c18      	adds	r0, r3, #0
 8007d42:	f7fb fddb 	bl	80038fc <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8007d46:	4b4f      	ldr	r3, [pc, #316]	@ (8007e84 <MIC_Print+0x210>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4954      	ldr	r1, [pc, #336]	@ (8007e9c <MIC_Print+0x228>)
 8007d4c:	1c18      	adds	r0, r3, #0
 8007d4e:	f7f8 fc0d 	bl	800056c <__aeabi_fcmpge>
 8007d52:	1e03      	subs	r3, r0, #0
 8007d54:	d004      	beq.n	8007d60 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8007d56:	2201      	movs	r2, #1
 8007d58:	2101      	movs	r1, #1
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f002 fd1e 	bl	800a79c <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8007d60:	4b48      	ldr	r3, [pc, #288]	@ (8007e84 <MIC_Print+0x210>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	494d      	ldr	r1, [pc, #308]	@ (8007e9c <MIC_Print+0x228>)
 8007d66:	1c18      	adds	r0, r3, #0
 8007d68:	f7f8 fbe2 	bl	8000530 <__aeabi_fcmplt>
 8007d6c:	1e03      	subs	r3, r0, #0
 8007d6e:	d00c      	beq.n	8007d8a <MIC_Print+0x116>
 8007d70:	4b44      	ldr	r3, [pc, #272]	@ (8007e84 <MIC_Print+0x210>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	494a      	ldr	r1, [pc, #296]	@ (8007ea0 <MIC_Print+0x22c>)
 8007d76:	1c18      	adds	r0, r3, #0
 8007d78:	f7f8 fbf8 	bl	800056c <__aeabi_fcmpge>
 8007d7c:	1e03      	subs	r3, r0, #0
 8007d7e:	d004      	beq.n	8007d8a <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	2001      	movs	r0, #1
 8007d86:	f002 fd09 	bl	800a79c <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 8007d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e84 <MIC_Print+0x210>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4944      	ldr	r1, [pc, #272]	@ (8007ea0 <MIC_Print+0x22c>)
 8007d90:	1c18      	adds	r0, r3, #0
 8007d92:	f7f8 fbcd 	bl	8000530 <__aeabi_fcmplt>
 8007d96:	1e03      	subs	r3, r0, #0
 8007d98:	d00c      	beq.n	8007db4 <MIC_Print+0x140>
 8007d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8007e84 <MIC_Print+0x210>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4941      	ldr	r1, [pc, #260]	@ (8007ea4 <MIC_Print+0x230>)
 8007da0:	1c18      	adds	r0, r3, #0
 8007da2:	f7f8 fbe3 	bl	800056c <__aeabi_fcmpge>
 8007da6:	1e03      	subs	r3, r0, #0
 8007da8:	d004      	beq.n	8007db4 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 8007daa:	2200      	movs	r2, #0
 8007dac:	2101      	movs	r1, #1
 8007dae:	2001      	movs	r0, #1
 8007db0:	f002 fcf4 	bl	800a79c <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 8007db4:	4b33      	ldr	r3, [pc, #204]	@ (8007e84 <MIC_Print+0x210>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	493a      	ldr	r1, [pc, #232]	@ (8007ea4 <MIC_Print+0x230>)
 8007dba:	1c18      	adds	r0, r3, #0
 8007dbc:	f7f8 fbb8 	bl	8000530 <__aeabi_fcmplt>
 8007dc0:	1e03      	subs	r3, r0, #0
 8007dc2:	d00c      	beq.n	8007dde <MIC_Print+0x16a>
 8007dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8007e84 <MIC_Print+0x210>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4937      	ldr	r1, [pc, #220]	@ (8007ea8 <MIC_Print+0x234>)
 8007dca:	1c18      	adds	r0, r3, #0
 8007dcc:	f7f8 fbce 	bl	800056c <__aeabi_fcmpge>
 8007dd0:	1e03      	subs	r3, r0, #0
 8007dd2:	d004      	beq.n	8007dde <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	2000      	movs	r0, #0
 8007dda:	f002 fcdf 	bl	800a79c <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 8007dde:	4b29      	ldr	r3, [pc, #164]	@ (8007e84 <MIC_Print+0x210>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4931      	ldr	r1, [pc, #196]	@ (8007ea8 <MIC_Print+0x234>)
 8007de4:	1c18      	adds	r0, r3, #0
 8007de6:	f7f8 fba3 	bl	8000530 <__aeabi_fcmplt>
 8007dea:	1e03      	subs	r3, r0, #0
 8007dec:	d00c      	beq.n	8007e08 <MIC_Print+0x194>
 8007dee:	4b25      	ldr	r3, [pc, #148]	@ (8007e84 <MIC_Print+0x210>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	492e      	ldr	r1, [pc, #184]	@ (8007eac <MIC_Print+0x238>)
 8007df4:	1c18      	adds	r0, r3, #0
 8007df6:	f7f8 fbb9 	bl	800056c <__aeabi_fcmpge>
 8007dfa:	1e03      	subs	r3, r0, #0
 8007dfc:	d004      	beq.n	8007e08 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 8007dfe:	2201      	movs	r2, #1
 8007e00:	2100      	movs	r1, #0
 8007e02:	2000      	movs	r0, #0
 8007e04:	f002 fcca 	bl	800a79c <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8007e08:	4b1e      	ldr	r3, [pc, #120]	@ (8007e84 <MIC_Print+0x210>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4927      	ldr	r1, [pc, #156]	@ (8007eac <MIC_Print+0x238>)
 8007e0e:	1c18      	adds	r0, r3, #0
 8007e10:	f7f8 fb8e 	bl	8000530 <__aeabi_fcmplt>
 8007e14:	1e03      	subs	r3, r0, #0
 8007e16:	d00c      	beq.n	8007e32 <MIC_Print+0x1be>
 8007e18:	4b1a      	ldr	r3, [pc, #104]	@ (8007e84 <MIC_Print+0x210>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4924      	ldr	r1, [pc, #144]	@ (8007eb0 <MIC_Print+0x23c>)
 8007e1e:	1c18      	adds	r0, r3, #0
 8007e20:	f7f8 fba4 	bl	800056c <__aeabi_fcmpge>
 8007e24:	1e03      	subs	r3, r0, #0
 8007e26:	d004      	beq.n	8007e32 <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f002 fcb5 	bl	800a79c <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <MIC_Print+0x210>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	491e      	ldr	r1, [pc, #120]	@ (8007eb0 <MIC_Print+0x23c>)
 8007e38:	1c18      	adds	r0, r3, #0
 8007e3a:	f7f8 fb79 	bl	8000530 <__aeabi_fcmplt>
 8007e3e:	1e03      	subs	r3, r0, #0
 8007e40:	d00c      	beq.n	8007e5c <MIC_Print+0x1e8>
 8007e42:	4b10      	ldr	r3, [pc, #64]	@ (8007e84 <MIC_Print+0x210>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	491b      	ldr	r1, [pc, #108]	@ (8007eb4 <MIC_Print+0x240>)
 8007e48:	1c18      	adds	r0, r3, #0
 8007e4a:	f7f8 fb8f 	bl	800056c <__aeabi_fcmpge>
 8007e4e:	1e03      	subs	r3, r0, #0
 8007e50:	d004      	beq.n	8007e5c <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 8007e52:	2201      	movs	r2, #1
 8007e54:	2100      	movs	r1, #0
 8007e56:	2001      	movs	r0, #1
 8007e58:	f002 fca0 	bl	800a79c <SetDBLED>
  }
  if(dBc < 35){//off
 8007e5c:	4b09      	ldr	r3, [pc, #36]	@ (8007e84 <MIC_Print+0x210>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4914      	ldr	r1, [pc, #80]	@ (8007eb4 <MIC_Print+0x240>)
 8007e62:	1c18      	adds	r0, r3, #0
 8007e64:	f7f8 fb64 	bl	8000530 <__aeabi_fcmplt>
 8007e68:	1e03      	subs	r3, r0, #0
 8007e6a:	d100      	bne.n	8007e6e <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 8007e6c:	e004      	b.n	8007e78 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2100      	movs	r1, #0
 8007e72:	2000      	movs	r0, #0
 8007e74:	f002 fc92 	bl	800a79c <SetDBLED>
}
 8007e78:	46c0      	nop			@ (mov r8, r8)
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b002      	add	sp, #8
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000f90 	.word	0x20000f90
 8007e84:	20000f60 	.word	0x20000f60
 8007e88:	20000f94 	.word	0x20000f94
 8007e8c:	20000f64 	.word	0x20000f64
 8007e90:	20000f95 	.word	0x20000f95
 8007e94:	20000f8c 	.word	0x20000f8c
 8007e98:	41200000 	.word	0x41200000
 8007e9c:	42b40000 	.word	0x42b40000
 8007ea0:	42a00000 	.word	0x42a00000
 8007ea4:	428c0000 	.word	0x428c0000
 8007ea8:	42700000 	.word	0x42700000
 8007eac:	42480000 	.word	0x42480000
 8007eb0:	42200000 	.word	0x42200000
 8007eb4:	420c0000 	.word	0x420c0000

08007eb8 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8007ebe:	4b11      	ldr	r3, [pc, #68]	@ (8007f04 <MIC_TestMeasurementDone+0x4c>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	4a10      	ldr	r2, [pc, #64]	@ (8007f08 <MIC_TestMeasurementDone+0x50>)
 8007ec6:	4911      	ldr	r1, [pc, #68]	@ (8007f0c <MIC_TestMeasurementDone+0x54>)
 8007ec8:	2002      	movs	r0, #2
 8007eca:	f003 fbd1 	bl	800b670 <CreateLine>
  if(DataReady) {
 8007ece:	4b0d      	ldr	r3, [pc, #52]	@ (8007f04 <MIC_TestMeasurementDone+0x4c>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d010      	beq.n	8007efa <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8007ed8:	1dfb      	adds	r3, r7, #7
 8007eda:	4a0d      	ldr	r2, [pc, #52]	@ (8007f10 <MIC_TestMeasurementDone+0x58>)
 8007edc:	7812      	ldrb	r2, [r2, #0]
 8007ede:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f10 <MIC_TestMeasurementDone+0x58>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8007f14 <MIC_TestMeasurementDone+0x5c>)
 8007ee8:	4908      	ldr	r1, [pc, #32]	@ (8007f0c <MIC_TestMeasurementDone+0x54>)
 8007eea:	2002      	movs	r0, #2
 8007eec:	f003 fbc0 	bl	800b670 <CreateLine>
    ResetMICIndicator();
 8007ef0:	f002 fd18 	bl	800a924 <ResetMICIndicator>
    return Check;
 8007ef4:	1dfb      	adds	r3, r7, #7
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	e000      	b.n	8007efc <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	0018      	movs	r0, r3
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b002      	add	sp, #8
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20001280 	.word	0x20001280
 8007f08:	08020014 	.word	0x08020014
 8007f0c:	08020040 	.word	0x08020040
 8007f10:	20001281 	.word	0x20001281
 8007f14:	08020044 	.word	0x08020044

08007f18 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8007f18:	b40f      	push	{r0, r1, r2, r3}
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8007f20:	2314      	movs	r3, #20
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	2180      	movs	r1, #128	@ 0x80
 8007f2c:	0089      	lsls	r1, r1, #2
 8007f2e:	480a      	ldr	r0, [pc, #40]	@ (8007f58 <print+0x40>)
 8007f30:	f014 fa66 	bl	801c400 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8007f34:	4b08      	ldr	r3, [pc, #32]	@ (8007f58 <print+0x40>)
 8007f36:	0018      	movs	r0, r3
 8007f38:	f7f8 f918 	bl	800016c <strlen>
 8007f3c:	0003      	movs	r3, r0
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	4b05      	ldr	r3, [pc, #20]	@ (8007f58 <print+0x40>)
 8007f42:	0011      	movs	r1, r2
 8007f44:	0018      	movs	r0, r3
 8007f46:	f7ff f9f7 	bl	8007338 <printString>
}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b002      	add	sp, #8
 8007f50:	bc80      	pop	{r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	b004      	add	sp, #16
 8007f56:	4718      	bx	r3
 8007f58:	20000f98 	.word	0x20000f98

08007f5c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007f60:	4b16      	ldr	r3, [pc, #88]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f62:	4a17      	ldr	r2, [pc, #92]	@ (8007fc0 <MX_RTC_Init+0x64>)
 8007f64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007f66:	4b15      	ldr	r3, [pc, #84]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007f6c:	4b13      	ldr	r3, [pc, #76]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f6e:	227f      	movs	r2, #127	@ 0x7f
 8007f70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007f72:	4b12      	ldr	r3, [pc, #72]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f74:	22ff      	movs	r2, #255	@ 0xff
 8007f76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007f78:	4b10      	ldr	r3, [pc, #64]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007f84:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007f92:	0018      	movs	r0, r3
 8007f94:	f00a fa60 	bl	8012458 <HAL_RTC_Init>
 8007f98:	1e03      	subs	r3, r0, #0
 8007f9a:	d001      	beq.n	8007fa0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007f9c:	f7ff fa30 	bl	8007400 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8007fa0:	4b06      	ldr	r3, [pc, #24]	@ (8007fbc <MX_RTC_Init+0x60>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f00a fdb4 	bl	8012b14 <HAL_RTCEx_SetWakeUpTimer>
 8007fac:	1e03      	subs	r3, r0, #0
 8007fae:	d001      	beq.n	8007fb4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8007fb0:	f7ff fa26 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007fb4:	46c0      	nop			@ (mov r8, r8)
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	46c0      	nop			@ (mov r8, r8)
 8007fbc:	20001198 	.word	0x20001198
 8007fc0:	40002800 	.word	0x40002800

08007fc4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a06      	ldr	r2, [pc, #24]	@ (8007fec <HAL_RTC_MspInit+0x28>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d106      	bne.n	8007fe4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007fd6:	4b06      	ldr	r3, [pc, #24]	@ (8007ff0 <HAL_RTC_MspInit+0x2c>)
 8007fd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fda:	4b05      	ldr	r3, [pc, #20]	@ (8007ff0 <HAL_RTC_MspInit+0x2c>)
 8007fdc:	2180      	movs	r1, #128	@ 0x80
 8007fde:	02c9      	lsls	r1, r1, #11
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007fe4:	46c0      	nop			@ (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	40002800 	.word	0x40002800
 8007ff0:	40021000 	.word	0x40021000

08007ff4 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d113      	bne.n	800803a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	22fe      	movs	r2, #254	@ 0xfe
 8008016:	0592      	lsls	r2, r2, #22
 8008018:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a1a      	ldr	r2, [pc, #104]	@ (8008088 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800801e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a1a      	ldr	r2, [pc, #104]	@ (800808c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8008024:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4a19      	ldr	r2, [pc, #100]	@ (8008090 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800802a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a19      	ldr	r2, [pc, #100]	@ (8008094 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8008030:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4a18      	ldr	r2, [pc, #96]	@ (8008098 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8008036:	61da      	str	r2, [r3, #28]
 8008038:	e011      	b.n	800805e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4a17      	ldr	r2, [pc, #92]	@ (800809c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800803e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a17      	ldr	r2, [pc, #92]	@ (80080a0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8008044:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4a16      	ldr	r2, [pc, #88]	@ (80080a4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800804a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4a16      	ldr	r2, [pc, #88]	@ (80080a8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8008050:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4a15      	ldr	r2, [pc, #84]	@ (80080ac <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8008056:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a15      	ldr	r2, [pc, #84]	@ (80080b0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800805c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4a14      	ldr	r2, [pc, #80]	@ (80080b4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8008062:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a14      	ldr	r2, [pc, #80]	@ (80080b8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8008068:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4a12      	ldr	r2, [pc, #72]	@ (80080b8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800806e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a12      	ldr	r2, [pc, #72]	@ (80080bc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8008074:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	0018      	movs	r0, r3
 800807a:	f000 f831 	bl	80080e0 <GasIndexAlgorithm_reset>
}
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	46bd      	mov	sp, r7
 8008082:	b004      	add	sp, #16
 8008084:	bd80      	pop	{r7, pc}
 8008086:	46c0      	nop			@ (mov r8, r8)
 8008088:	00002710 	.word	0x00002710
 800808c:	44340000 	.word	0x44340000
 8008090:	46859800 	.word	0x46859800
 8008094:	46a05000 	.word	0x46a05000
 8008098:	41f00000 	.word	0x41f00000
 800809c:	42c80000 	.word	0x42c80000
 80080a0:	00004e20 	.word	0x00004e20
 80080a4:	43340000 	.word	0x43340000
 80080a8:	4528c000 	.word	0x4528c000
 80080ac:	45a32000 	.word	0x45a32000
 80080b0:	43aa0000 	.word	0x43aa0000
 80080b4:	43660000 	.word	0x43660000
 80080b8:	41400000 	.word	0x41400000
 80080bc:	42480000 	.word	0x42480000

080080c0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80080ca:	22fe      	movs	r2, #254	@ 0xfe
 80080cc:	0592      	lsls	r2, r2, #22
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	0018      	movs	r0, r3
 80080d4:	f7ff ff8e 	bl	8007ff4 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80080d8:	46c0      	nop			@ (mov r8, r8)
 80080da:	46bd      	mov	sp, r7
 80080dc:	b002      	add	sp, #8
 80080de:	bd80      	pop	{r7, pc}

080080e0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	0018      	movs	r0, r3
 80080fe:	f000 f805 	bl	800810c <GasIndexAlgorithm__init_instances>
}
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	46bd      	mov	sp, r7
 8008106:	b002      	add	sp, #8
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	0018      	movs	r0, r3
 8008118:	f000 f8e8 	bl	80082ec <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	0018      	movs	r0, r3
 8008120:	f000 f9a6 	bl	8008470 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8008124:	1c04      	adds	r4, r0, #0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	0018      	movs	r0, r3
 800812a:	f000 f9ab 	bl	8008484 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800812e:	1c02      	adds	r2, r0, #0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	1c21      	adds	r1, r4, #0
 8008134:	0018      	movs	r0, r3
 8008136:	f000 fc3b 	bl	80089b0 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d107      	bne.n	8008152 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8008142:	23fe      	movs	r3, #254	@ 0xfe
 8008144:	059b      	lsls	r3, r3, #22
 8008146:	4a0a      	ldr	r2, [pc, #40]	@ (8008170 <GasIndexAlgorithm__init_instances+0x64>)
 8008148:	490a      	ldr	r1, [pc, #40]	@ (8008174 <GasIndexAlgorithm__init_instances+0x68>)
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fc86 	bl	8008a5c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8008150:	e005      	b.n	800815e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8008152:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <GasIndexAlgorithm__init_instances+0x6c>)
 8008154:	4a09      	ldr	r2, [pc, #36]	@ (800817c <GasIndexAlgorithm__init_instances+0x70>)
 8008156:	490a      	ldr	r1, [pc, #40]	@ (8008180 <GasIndexAlgorithm__init_instances+0x74>)
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fc7f 	bl	8008a5c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	0018      	movs	r0, r3
 8008162:	f000 fd35 	bl	8008bd0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8008166:	46c0      	nop			@ (mov r8, r8)
 8008168:	46bd      	mov	sp, r7
 800816a:	b003      	add	sp, #12
 800816c:	bd90      	pop	{r4, r7, pc}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	bc257a78 	.word	0xbc257a78
 8008174:	44198000 	.word	0x44198000
 8008178:	42c80000 	.word	0x42c80000
 800817c:	bbd4fdf4 	.word	0xbbd4fdf4
 8008180:	43550000 	.word	0x43550000

08008184 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8008184:	b590      	push	{r4, r7, lr}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008194:	4952      	ldr	r1, [pc, #328]	@ (80082e0 <GasIndexAlgorithm_process+0x15c>)
 8008196:	1c18      	adds	r0, r3, #0
 8008198:	f7f8 f9d4 	bl	8000544 <__aeabi_fcmple>
 800819c:	1e03      	subs	r3, r0, #0
 800819e:	d00c      	beq.n	80081ba <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	1c19      	adds	r1, r3, #0
 80081aa:	1c10      	adds	r0, r2, #0
 80081ac:	f7f8 fb88 	bl	80008c0 <__aeabi_fadd>
 80081b0:	1c03      	adds	r3, r0, #0
 80081b2:	1c1a      	adds	r2, r3, #0
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80081b8:	e080      	b.n	80082bc <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd25      	ble.n	800820c <GasIndexAlgorithm_process+0x88>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a48      	ldr	r2, [pc, #288]	@ (80082e4 <GasIndexAlgorithm_process+0x160>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	dc21      	bgt.n	800820c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	dc04      	bgt.n	80081dc <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60bb      	str	r3, [r7, #8]
 80081da:	e00d      	b.n	80081f8 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4a41      	ldr	r2, [pc, #260]	@ (80082e8 <GasIndexAlgorithm_process+0x164>)
 80081e2:	4694      	mov	ip, r2
 80081e4:	4463      	add	r3, ip
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	dd05      	ble.n	80081f8 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	4a3d      	ldr	r2, [pc, #244]	@ (80082e8 <GasIndexAlgorithm_process+0x164>)
 80081f2:	4694      	mov	ip, r2
 80081f4:	4463      	add	r3, ip
 80081f6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	0018      	movs	r0, r3
 8008202:	f7f9 f9e5 	bl	80015d0 <__aeabi_i2f>
 8008206:	1c02      	adds	r2, r0, #0
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	0018      	movs	r0, r3
 8008218:	f000 f945 	bl	80084a6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800821c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800821e:	d014      	beq.n	800824a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1c11      	adds	r1, r2, #0
 8008228:	0018      	movs	r0, r3
 800822a:	f000 fbd1 	bl	80089d0 <GasIndexAlgorithm__mox_model__process>
 800822e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1c11      	adds	r1, r2, #0
 800823c:	0018      	movs	r0, r3
 800823e:	f000 fc25 	bl	8008a8c <GasIndexAlgorithm__sigmoid_scaled__process>
 8008242:	1c02      	adds	r2, r0, #0
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	639a      	str	r2, [r3, #56]	@ 0x38
 8008248:	e003      	b.n	8008252 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	1c11      	adds	r1, r2, #0
 800825a:	0018      	movs	r0, r3
 800825c:	f000 fcec 	bl	8008c38 <GasIndexAlgorithm__adaptive_lowpass__process>
 8008260:	1c02      	adds	r2, r0, #0
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826a:	21fc      	movs	r1, #252	@ 0xfc
 800826c:	0589      	lsls	r1, r1, #22
 800826e:	1c18      	adds	r0, r3, #0
 8008270:	f7f8 f95e 	bl	8000530 <__aeabi_fcmplt>
 8008274:	1e03      	subs	r3, r0, #0
 8008276:	d003      	beq.n	8008280 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	22fc      	movs	r2, #252	@ 0xfc
 800827c:	0592      	lsls	r2, r2, #22
 800827e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008284:	2100      	movs	r1, #0
 8008286:	1c18      	adds	r0, r3, #0
 8008288:	f7f8 f966 	bl	8000558 <__aeabi_fcmpgt>
 800828c:	1e03      	subs	r3, r0, #0
 800828e:	d015      	beq.n	80082bc <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	1c11      	adds	r1, r2, #0
 8008298:	0018      	movs	r0, r3
 800829a:	f000 fa4f 	bl	800873c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	0018      	movs	r0, r3
 80082a2:	f000 f8e5 	bl	8008470 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80082a6:	1c04      	adds	r4, r0, #0
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	0018      	movs	r0, r3
 80082ac:	f000 f8ea 	bl	8008484 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80082b0:	1c02      	adds	r2, r0, #0
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1c21      	adds	r1, r4, #0
 80082b6:	0018      	movs	r0, r3
 80082b8:	f000 fb7a 	bl	80089b0 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c0:	21fc      	movs	r1, #252	@ 0xfc
 80082c2:	0589      	lsls	r1, r1, #22
 80082c4:	1c18      	adds	r0, r3, #0
 80082c6:	f7f8 fafb 	bl	80008c0 <__aeabi_fadd>
 80082ca:	1c03      	adds	r3, r0, #0
 80082cc:	1c18      	adds	r0, r3, #0
 80082ce:	f7f9 f95f 	bl	8001590 <__aeabi_f2iz>
 80082d2:	0002      	movs	r2, r0
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
    return;
 80082d8:	46c0      	nop			@ (mov r8, r8)
}
 80082da:	46bd      	mov	sp, r7
 80082dc:	b005      	add	sp, #20
 80082de:	bd90      	pop	{r4, r7, pc}
 80082e0:	42340000 	.word	0x42340000
 80082e4:	0000fde7 	.word	0x0000fde7
 80082e8:	00007fff 	.word	0x00007fff

080082ec <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80082ec:	b5b0      	push	{r4, r5, r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	223c      	movs	r2, #60	@ 0x3c
 80082f8:	2100      	movs	r1, #0
 80082fa:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	4952      	ldr	r1, [pc, #328]	@ (8008460 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8008316:	1c18      	adds	r0, r3, #0
 8008318:	f7f8 fc5c 	bl	8000bd4 <__aeabi_fdiv>
 800831c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800831e:	2188      	movs	r1, #136	@ 0x88
 8008320:	05c9      	lsls	r1, r1, #23
 8008322:	1c18      	adds	r0, r3, #0
 8008324:	f7f8 fe3c 	bl	8000fa0 <__aeabi_fmul>
 8008328:	1c03      	adds	r3, r0, #0
 800832a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	494a      	ldr	r1, [pc, #296]	@ (8008460 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8008336:	1c18      	adds	r0, r3, #0
 8008338:	f7f8 fc4c 	bl	8000bd4 <__aeabi_fdiv>
 800833c:	1c03      	adds	r3, r0, #0
 800833e:	1c19      	adds	r1, r3, #0
 8008340:	1c20      	adds	r0, r4, #0
 8008342:	f7f8 fabd 	bl	80008c0 <__aeabi_fadd>
 8008346:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8008348:	1c19      	adds	r1, r3, #0
 800834a:	1c28      	adds	r0, r5, #0
 800834c:	f7f8 fc42 	bl	8000bd4 <__aeabi_fdiv>
 8008350:	1c03      	adds	r3, r0, #0
 8008352:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	4940      	ldr	r1, [pc, #256]	@ (8008460 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800835e:	1c18      	adds	r0, r3, #0
 8008360:	f7f8 fc38 	bl	8000bd4 <__aeabi_fdiv>
 8008364:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8008366:	2185      	movs	r1, #133	@ 0x85
 8008368:	05c9      	lsls	r1, r1, #23
 800836a:	1c18      	adds	r0, r3, #0
 800836c:	f7f8 fe18 	bl	8000fa0 <__aeabi_fmul>
 8008370:	1c03      	adds	r3, r0, #0
 8008372:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	4938      	ldr	r1, [pc, #224]	@ (8008460 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800837e:	1c18      	adds	r0, r3, #0
 8008380:	f7f8 fc28 	bl	8000bd4 <__aeabi_fdiv>
 8008384:	1c03      	adds	r3, r0, #0
 8008386:	1c19      	adds	r1, r3, #0
 8008388:	1c20      	adds	r0, r4, #0
 800838a:	f7f8 fa99 	bl	80008c0 <__aeabi_fadd>
 800838e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8008390:	1c19      	adds	r1, r3, #0
 8008392:	1c28      	adds	r0, r5, #0
 8008394:	f7f8 fc1e 	bl	8000bd4 <__aeabi_fdiv>
 8008398:	1c03      	adds	r3, r0, #0
 800839a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d118      	bne.n	80083da <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80083ac:	2188      	movs	r1, #136	@ 0x88
 80083ae:	05c9      	lsls	r1, r1, #23
 80083b0:	1c18      	adds	r0, r3, #0
 80083b2:	f7f8 fdf5 	bl	8000fa0 <__aeabi_fmul>
 80083b6:	1c03      	adds	r3, r0, #0
 80083b8:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80083be:	4929      	ldr	r1, [pc, #164]	@ (8008464 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80083c0:	1c18      	adds	r0, r3, #0
 80083c2:	f7f8 fa7d 	bl	80008c0 <__aeabi_fadd>
 80083c6:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80083c8:	1c19      	adds	r1, r3, #0
 80083ca:	1c20      	adds	r0, r4, #0
 80083cc:	f7f8 fc02 	bl	8000bd4 <__aeabi_fdiv>
 80083d0:	1c03      	adds	r3, r0, #0
 80083d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80083d8:	e017      	b.n	800840a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80083de:	2188      	movs	r1, #136	@ 0x88
 80083e0:	05c9      	lsls	r1, r1, #23
 80083e2:	1c18      	adds	r0, r3, #0
 80083e4:	f7f8 fddc 	bl	8000fa0 <__aeabi_fmul>
 80083e8:	1c03      	adds	r3, r0, #0
 80083ea:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80083f0:	491d      	ldr	r1, [pc, #116]	@ (8008468 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80083f2:	1c18      	adds	r0, r3, #0
 80083f4:	f7f8 fa64 	bl	80008c0 <__aeabi_fadd>
 80083f8:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80083fa:	1c19      	adds	r1, r3, #0
 80083fc:	1c20      	adds	r0, r4, #0
 80083fe:	f7f8 fbe9 	bl	8000bd4 <__aeabi_fdiv>
 8008402:	1c03      	adds	r3, r0, #0
 8008404:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800840e:	2185      	movs	r1, #133	@ 0x85
 8008410:	05c9      	lsls	r1, r1, #23
 8008412:	1c18      	adds	r0, r3, #0
 8008414:	f7f8 fdc4 	bl	8000fa0 <__aeabi_fmul>
 8008418:	1c03      	adds	r3, r0, #0
 800841a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4912      	ldr	r1, [pc, #72]	@ (800846c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8008422:	1c18      	adds	r0, r3, #0
 8008424:	f7f8 fa4c 	bl	80008c0 <__aeabi_fadd>
 8008428:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800842a:	1c19      	adds	r1, r3, #0
 800842c:	1c20      	adds	r0, r4, #0
 800842e:	f7f8 fbd1 	bl	8000bd4 <__aeabi_fdiv>
 8008432:	1c03      	adds	r3, r0, #0
 8008434:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8008458:	46c0      	nop			@ (mov r8, r8)
 800845a:	46bd      	mov	sp, r7
 800845c:	b002      	add	sp, #8
 800845e:	bdb0      	pop	{r4, r5, r7, pc}
 8008460:	45610000 	.word	0x45610000
 8008464:	44960000 	.word	0x44960000
 8008468:	41a00000 	.word	0x41a00000
 800846c:	451c4000 	.word	0x451c4000

08008470 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800847c:	1c18      	adds	r0, r3, #0
 800847e:	46bd      	mov	sp, r7
 8008480:	b002      	add	sp, #8
 8008482:	bd80      	pop	{r7, pc}

08008484 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8008494:	1c19      	adds	r1, r3, #0
 8008496:	1c10      	adds	r0, r2, #0
 8008498:	f7f8 fa12 	bl	80008c0 <__aeabi_fadd>
 800849c:	1c03      	adds	r3, r0, #0
}
 800849e:	1c18      	adds	r0, r3, #0
 80084a0:	46bd      	mov	sp, r7
 80084a2:	b002      	add	sp, #8
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	223c      	movs	r2, #60	@ 0x3c
 80084b2:	5c9b      	ldrb	r3, [r3, r2]
}
 80084b4:	0018      	movs	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b002      	add	sp, #8
 80084ba:	bd80      	pop	{r7, pc}

080084bc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80084bc:	b5b0      	push	{r4, r5, r7, lr}
 80084be:	b08c      	sub	sp, #48	@ 0x30
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80084c8:	1c19      	adds	r1, r3, #0
 80084ca:	4895      	ldr	r0, [pc, #596]	@ (8008720 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80084cc:	f7f8 fea6 	bl	800121c <__aeabi_fsub>
 80084d0:	1c03      	adds	r3, r0, #0
 80084d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d8:	1c19      	adds	r1, r3, #0
 80084da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084dc:	f7f8 f83c 	bl	8000558 <__aeabi_fcmpgt>
 80084e0:	1e03      	subs	r3, r0, #0
 80084e2:	d00b      	beq.n	80084fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80084ec:	1c19      	adds	r1, r3, #0
 80084ee:	1c10      	adds	r0, r2, #0
 80084f0:	f7f8 f9e6 	bl	80008c0 <__aeabi_fadd>
 80084f4:	1c03      	adds	r3, r0, #0
 80084f6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008500:	1c19      	adds	r1, r3, #0
 8008502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008504:	f7f8 f828 	bl	8000558 <__aeabi_fcmpgt>
 8008508:	1e03      	subs	r3, r0, #0
 800850a:	d00b      	beq.n	8008524 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8008514:	1c19      	adds	r1, r3, #0
 8008516:	1c10      	adds	r0, r2, #0
 8008518:	f7f8 f9d2 	bl	80008c0 <__aeabi_fadd>
 800851c:	1c03      	adds	r3, r0, #0
 800851e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6959      	ldr	r1, [r3, #20]
 8008528:	4a7e      	ldr	r2, [pc, #504]	@ (8008724 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	0018      	movs	r0, r3
 800852e:	f000 f9f1 	bl	8008914 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	1c11      	adds	r1, r2, #0
 800853a:	0018      	movs	r0, r3
 800853c:	f000 f9fa 	bl	8008934 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008540:	1c03      	adds	r3, r0, #0
 8008542:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8008550:	1c19      	adds	r1, r3, #0
 8008552:	1c10      	adds	r0, r2, #0
 8008554:	f7f8 fe62 	bl	800121c <__aeabi_fsub>
 8008558:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800855a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800855c:	1c18      	adds	r0, r3, #0
 800855e:	f7f8 fd1f 	bl	8000fa0 <__aeabi_fmul>
 8008562:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8008564:	1c19      	adds	r1, r3, #0
 8008566:	1c20      	adds	r0, r4, #0
 8008568:	f7f8 f9aa 	bl	80008c0 <__aeabi_fadd>
 800856c:	1c03      	adds	r3, r0, #0
 800856e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8008578:	1c19      	adds	r1, r3, #0
 800857a:	486b      	ldr	r0, [pc, #428]	@ (8008728 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800857c:	f7f8 fe4e 	bl	800121c <__aeabi_fsub>
 8008580:	1c03      	adds	r3, r0, #0
 8008582:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	1c11      	adds	r1, r2, #0
 800858c:	0018      	movs	r0, r3
 800858e:	f000 f9d1 	bl	8008934 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008592:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008594:	1c19      	adds	r1, r3, #0
 8008596:	1c28      	adds	r0, r5, #0
 8008598:	f7f8 fd02 	bl	8000fa0 <__aeabi_fmul>
 800859c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800859e:	1c19      	adds	r1, r3, #0
 80085a0:	1c20      	adds	r0, r4, #0
 80085a2:	f7f8 f98d 	bl	80008c0 <__aeabi_fadd>
 80085a6:	1c03      	adds	r3, r0, #0
 80085a8:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80085aa:	4a60      	ldr	r2, [pc, #384]	@ (800872c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80085ac:	6a39      	ldr	r1, [r7, #32]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	0018      	movs	r0, r3
 80085b2:	f000 f9af 	bl	8008914 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	1c11      	adds	r1, r2, #0
 80085be:	0018      	movs	r0, r3
 80085c0:	f000 f9b8 	bl	8008934 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80085c4:	1c03      	adds	r3, r0, #0
 80085c6:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80085c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085ca:	69f8      	ldr	r0, [r7, #28]
 80085cc:	f7f8 fce8 	bl	8000fa0 <__aeabi_fmul>
 80085d0:	1c03      	adds	r3, r0, #0
 80085d2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6999      	ldr	r1, [r3, #24]
 80085dc:	4a51      	ldr	r2, [pc, #324]	@ (8008724 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	0018      	movs	r0, r3
 80085e2:	f000 f997 	bl	8008914 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	1c11      	adds	r1, r2, #0
 80085ee:	0018      	movs	r0, r3
 80085f0:	f000 f9a0 	bl	8008934 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80085f4:	1c03      	adds	r3, r0, #0
 80085f6:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8008604:	1c19      	adds	r1, r3, #0
 8008606:	1c10      	adds	r0, r2, #0
 8008608:	f7f8 fe08 	bl	800121c <__aeabi_fsub>
 800860c:	1c03      	adds	r3, r0, #0
 800860e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8008610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008612:	69b8      	ldr	r0, [r7, #24]
 8008614:	f7f8 fe02 	bl	800121c <__aeabi_fsub>
 8008618:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800861a:	1c19      	adds	r1, r3, #0
 800861c:	1c28      	adds	r0, r5, #0
 800861e:	f7f8 fcbf 	bl	8000fa0 <__aeabi_fmul>
 8008622:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8008624:	1c19      	adds	r1, r3, #0
 8008626:	1c20      	adds	r0, r4, #0
 8008628:	f7f8 f94a 	bl	80008c0 <__aeabi_fadd>
 800862c:	1c03      	adds	r3, r0, #0
 800862e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8008638:	1c19      	adds	r1, r3, #0
 800863a:	483b      	ldr	r0, [pc, #236]	@ (8008728 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800863c:	f7f8 fdee 	bl	800121c <__aeabi_fsub>
 8008640:	1c03      	adds	r3, r0, #0
 8008642:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	1c11      	adds	r1, r2, #0
 800864c:	0018      	movs	r0, r3
 800864e:	f000 f971 	bl	8008934 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008652:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008654:	1c19      	adds	r1, r3, #0
 8008656:	1c28      	adds	r0, r5, #0
 8008658:	f7f8 fca2 	bl	8000fa0 <__aeabi_fmul>
 800865c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800865e:	1c19      	adds	r1, r3, #0
 8008660:	1c20      	adds	r0, r4, #0
 8008662:	f7f8 f92d 	bl	80008c0 <__aeabi_fadd>
 8008666:	1c03      	adds	r3, r0, #0
 8008668:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800866a:	4a30      	ldr	r2, [pc, #192]	@ (800872c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800866c:	6939      	ldr	r1, [r7, #16]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	0018      	movs	r0, r3
 8008672:	f000 f94f 	bl	8008914 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	1c11      	adds	r1, r2, #0
 800867e:	0018      	movs	r0, r3
 8008680:	f000 f958 	bl	8008934 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008684:	1c03      	adds	r3, r0, #0
 8008686:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8008688:	6979      	ldr	r1, [r7, #20]
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f7f8 fc88 	bl	8000fa0 <__aeabi_fmul>
 8008690:	1c03      	adds	r3, r0, #0
 8008692:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	4923      	ldr	r1, [pc, #140]	@ (8008730 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 80086a2:	1c18      	adds	r0, r3, #0
 80086a4:	f7f8 fa96 	bl	8000bd4 <__aeabi_fdiv>
 80086a8:	1c03      	adds	r3, r0, #0
 80086aa:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 80086ac:	69f9      	ldr	r1, [r7, #28]
 80086ae:	20fe      	movs	r0, #254	@ 0xfe
 80086b0:	0580      	lsls	r0, r0, #22
 80086b2:	f7f8 fdb3 	bl	800121c <__aeabi_fsub>
 80086b6:	1c03      	adds	r3, r0, #0
 80086b8:	491e      	ldr	r1, [pc, #120]	@ (8008734 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80086ba:	1c18      	adds	r0, r3, #0
 80086bc:	f7f8 fc70 	bl	8000fa0 <__aeabi_fmul>
 80086c0:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 80086c2:	491d      	ldr	r1, [pc, #116]	@ (8008738 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80086c4:	1c18      	adds	r0, r3, #0
 80086c6:	f7f8 fda9 	bl	800121c <__aeabi_fsub>
 80086ca:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80086cc:	1c19      	adds	r1, r3, #0
 80086ce:	1c28      	adds	r0, r5, #0
 80086d0:	f7f8 fc66 	bl	8000fa0 <__aeabi_fmul>
 80086d4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80086d6:	1c19      	adds	r1, r3, #0
 80086d8:	1c20      	adds	r0, r4, #0
 80086da:	f7f8 f8f1 	bl	80008c0 <__aeabi_fadd>
 80086de:	1c03      	adds	r3, r0, #0
 80086e0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ea:	2100      	movs	r1, #0
 80086ec:	1c18      	adds	r0, r3, #0
 80086ee:	f7f7 ff1f 	bl	8000530 <__aeabi_fcmplt>
 80086f2:	1e03      	subs	r3, r0, #0
 80086f4:	d002      	beq.n	80086fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8008704:	1c19      	adds	r1, r3, #0
 8008706:	1c10      	adds	r0, r2, #0
 8008708:	f7f7 ff26 	bl	8000558 <__aeabi_fcmpgt>
 800870c:	1e03      	subs	r3, r0, #0
 800870e:	d100      	bne.n	8008712 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8008710:	e002      	b.n	8008718 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008718:	46c0      	nop			@ (mov r8, r8)
 800871a:	46bd      	mov	sp, r7
 800871c:	b00c      	add	sp, #48	@ 0x30
 800871e:	bdb0      	pop	{r4, r5, r7, pc}
 8008720:	46fffe00 	.word	0x46fffe00
 8008724:	3c23d70a 	.word	0x3c23d70a
 8008728:	43ff0000 	.word	0x43ff0000
 800872c:	3db851ec 	.word	0x3db851ec
 8008730:	42700000 	.word	0x42700000
 8008734:	3fa66666 	.word	0x3fa66666
 8008738:	3e99999a 	.word	0x3e99999a

0800873c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800873c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	223c      	movs	r2, #60	@ 0x3c
 800874a:	5c9b      	ldrb	r3, [r3, r2]
 800874c:	2201      	movs	r2, #1
 800874e:	4053      	eors	r3, r2
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	223c      	movs	r2, #60	@ 0x3c
 800875a:	2101      	movs	r1, #1
 800875c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800876a:	e0c8      	b.n	80088fe <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008770:	4965      	ldr	r1, [pc, #404]	@ (8008908 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8008772:	1c18      	adds	r0, r3, #0
 8008774:	f7f7 fefa 	bl	800056c <__aeabi_fcmpge>
 8008778:	1e03      	subs	r3, r0, #0
 800877a:	d107      	bne.n	800878c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8008780:	4962      	ldr	r1, [pc, #392]	@ (800890c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8008782:	1c18      	adds	r0, r3, #0
 8008784:	f7f7 fede 	bl	8000544 <__aeabi_fcmple>
 8008788:	1e03      	subs	r3, r0, #0
 800878a:	d00e      	beq.n	80087aa <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008794:	1c19      	adds	r1, r3, #0
 8008796:	1c10      	adds	r0, r2, #0
 8008798:	f7f8 f892 	bl	80008c0 <__aeabi_fadd>
 800879c:	1c03      	adds	r3, r0, #0
 800879e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ae:	1c19      	adds	r1, r3, #0
 80087b0:	6838      	ldr	r0, [r7, #0]
 80087b2:	f7f8 fd33 	bl	800121c <__aeabi_fsub>
 80087b6:	1c03      	adds	r3, r0, #0
 80087b8:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	0018      	movs	r0, r3
 80087be:	f7ff fe7d 	bl	80084bc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c6:	1c19      	adds	r1, r3, #0
 80087c8:	6838      	ldr	r0, [r7, #0]
 80087ca:	f7f8 fd27 	bl	800121c <__aeabi_fsub>
 80087ce:	1c03      	adds	r3, r0, #0
 80087d0:	2185      	movs	r1, #133	@ 0x85
 80087d2:	05c9      	lsls	r1, r1, #23
 80087d4:	1c18      	adds	r0, r3, #0
 80087d6:	f7f8 f9fd 	bl	8000bd4 <__aeabi_fdiv>
 80087da:	1c03      	adds	r3, r0, #0
 80087dc:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80087de:	2100      	movs	r1, #0
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7f7 fea5 	bl	8000530 <__aeabi_fcmplt>
 80087e6:	1e03      	subs	r3, r0, #0
 80087e8:	d008      	beq.n	80087fc <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	1c18      	adds	r0, r3, #0
 80087f2:	f7f8 fd13 	bl	800121c <__aeabi_fsub>
 80087f6:	1c03      	adds	r3, r0, #0
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	e007      	b.n	800880c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008800:	1c19      	adds	r1, r3, #0
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7f8 f85c 	bl	80008c0 <__aeabi_fadd>
 8008808:	1c03      	adds	r3, r0, #0
 800880a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800880c:	23fe      	movs	r3, #254	@ 0xfe
 800880e:	059b      	lsls	r3, r3, #22
 8008810:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8008812:	493f      	ldr	r1, [pc, #252]	@ (8008910 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8008814:	6978      	ldr	r0, [r7, #20]
 8008816:	f7f7 fe9f 	bl	8000558 <__aeabi_fcmpgt>
 800881a:	1e03      	subs	r3, r0, #0
 800881c:	d010      	beq.n	8008840 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800881e:	493c      	ldr	r1, [pc, #240]	@ (8008910 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8008820:	6978      	ldr	r0, [r7, #20]
 8008822:	f7f8 f9d7 	bl	8000bd4 <__aeabi_fdiv>
 8008826:	1c03      	adds	r3, r0, #0
 8008828:	1c1c      	adds	r4, r3, #0
 800882a:	4939      	ldr	r1, [pc, #228]	@ (8008910 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800882c:	6978      	ldr	r0, [r7, #20]
 800882e:	f7f8 f9d1 	bl	8000bd4 <__aeabi_fdiv>
 8008832:	1c03      	adds	r3, r0, #0
 8008834:	1c19      	adds	r1, r3, #0
 8008836:	1c20      	adds	r0, r4, #0
 8008838:	f7f8 fbb2 	bl	8000fa0 <__aeabi_fmul>
 800883c:	1c03      	adds	r3, r0, #0
 800883e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8008844:	1c19      	adds	r1, r3, #0
 8008846:	2085      	movs	r0, #133	@ 0x85
 8008848:	05c0      	lsls	r0, r0, #23
 800884a:	f7f8 fce7 	bl	800121c <__aeabi_fsub>
 800884e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8008850:	6939      	ldr	r1, [r7, #16]
 8008852:	1c18      	adds	r0, r3, #0
 8008854:	f7f8 fba4 	bl	8000fa0 <__aeabi_fmul>
 8008858:	1c03      	adds	r3, r0, #0
 800885a:	1c18      	adds	r0, r3, #0
 800885c:	f016 fc48 	bl	801f0f0 <sqrtf>
 8008860:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800886a:	2185      	movs	r1, #133	@ 0x85
 800886c:	05c9      	lsls	r1, r1, #23
 800886e:	6938      	ldr	r0, [r7, #16]
 8008870:	f7f8 fb96 	bl	8000fa0 <__aeabi_fmul>
 8008874:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8008876:	1c19      	adds	r1, r3, #0
 8008878:	1c28      	adds	r0, r5, #0
 800887a:	f7f8 f9ab 	bl	8000bd4 <__aeabi_fdiv>
 800887e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8008880:	1c19      	adds	r1, r3, #0
 8008882:	1c20      	adds	r0, r4, #0
 8008884:	f7f8 fb8c 	bl	8000fa0 <__aeabi_fmul>
 8008888:	1c03      	adds	r3, r0, #0
 800888a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008890:	68f9      	ldr	r1, [r7, #12]
 8008892:	1c18      	adds	r0, r3, #0
 8008894:	f7f8 fb84 	bl	8000fa0 <__aeabi_fmul>
 8008898:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800889a:	6939      	ldr	r1, [r7, #16]
 800889c:	1c18      	adds	r0, r3, #0
 800889e:	f7f8 f999 	bl	8000bd4 <__aeabi_fdiv>
 80088a2:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 80088a4:	68f9      	ldr	r1, [r7, #12]
 80088a6:	1c18      	adds	r0, r3, #0
 80088a8:	f7f8 fb7a 	bl	8000fa0 <__aeabi_fmul>
 80088ac:	1c03      	adds	r3, r0, #0
             sqrtf(
 80088ae:	1c19      	adds	r1, r3, #0
 80088b0:	1c20      	adds	r0, r4, #0
 80088b2:	f7f8 f805 	bl	80008c0 <__aeabi_fadd>
 80088b6:	1c03      	adds	r3, r0, #0
 80088b8:	1c18      	adds	r0, r3, #0
 80088ba:	f016 fc19 	bl	801f0f0 <sqrtf>
 80088be:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80088c0:	1c19      	adds	r1, r3, #0
 80088c2:	1c30      	adds	r0, r6, #0
 80088c4:	f7f8 fb6c 	bl	8000fa0 <__aeabi_fmul>
 80088c8:	1c03      	adds	r3, r0, #0
 80088ca:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088d8:	68f9      	ldr	r1, [r7, #12]
 80088da:	1c18      	adds	r0, r3, #0
 80088dc:	f7f8 fb60 	bl	8000fa0 <__aeabi_fmul>
 80088e0:	1c03      	adds	r3, r0, #0
 80088e2:	2182      	movs	r1, #130	@ 0x82
 80088e4:	05c9      	lsls	r1, r1, #23
 80088e6:	1c18      	adds	r0, r3, #0
 80088e8:	f7f8 f974 	bl	8000bd4 <__aeabi_fdiv>
 80088ec:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80088ee:	1c19      	adds	r1, r3, #0
 80088f0:	1c20      	adds	r0, r4, #0
 80088f2:	f7f7 ffe5 	bl	80008c0 <__aeabi_fadd>
 80088f6:	1c03      	adds	r3, r0, #0
 80088f8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80088fe:	46c0      	nop			@ (mov r8, r8)
 8008900:	46bd      	mov	sp, r7
 8008902:	b007      	add	sp, #28
 8008904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	42c80000 	.word	0x42c80000
 800890c:	c2c80000 	.word	0xc2c80000
 8008910:	44b40000 	.word	0x44b40000

08008914 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800892c:	46c0      	nop			@ (mov r8, r8)
 800892e:	46bd      	mov	sp, r7
 8008930:	b004      	add	sp, #16
 8008932:	bd80      	pop	{r7, pc}

08008934 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8008934:	b590      	push	{r4, r7, lr}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008946:	1c19      	adds	r1, r3, #0
 8008948:	6838      	ldr	r0, [r7, #0]
 800894a:	f7f8 fc67 	bl	800121c <__aeabi_fsub>
 800894e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8008950:	1c19      	adds	r1, r3, #0
 8008952:	1c20      	adds	r0, r4, #0
 8008954:	f7f8 fb24 	bl	8000fa0 <__aeabi_fmul>
 8008958:	1c03      	adds	r3, r0, #0
 800895a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800895c:	4912      	ldr	r1, [pc, #72]	@ (80089a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7f7 fde6 	bl	8000530 <__aeabi_fcmplt>
 8008964:	1e03      	subs	r3, r0, #0
 8008966:	d002      	beq.n	800896e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8008968:	23fe      	movs	r3, #254	@ 0xfe
 800896a:	059b      	lsls	r3, r3, #22
 800896c:	e018      	b.n	80089a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800896e:	490f      	ldr	r1, [pc, #60]	@ (80089ac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7f7 fdf1 	bl	8000558 <__aeabi_fcmpgt>
 8008976:	1e03      	subs	r3, r0, #0
 8008978:	d001      	beq.n	800897e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800897a:	2300      	movs	r3, #0
 800897c:	e010      	b.n	80089a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1c18      	adds	r0, r3, #0
 8008982:	f016 fb8d 	bl	801f0a0 <expf>
 8008986:	1c03      	adds	r3, r0, #0
 8008988:	21fe      	movs	r1, #254	@ 0xfe
 800898a:	0589      	lsls	r1, r1, #22
 800898c:	1c18      	adds	r0, r3, #0
 800898e:	f7f7 ff97 	bl	80008c0 <__aeabi_fadd>
 8008992:	1c03      	adds	r3, r0, #0
 8008994:	1c19      	adds	r1, r3, #0
 8008996:	20fe      	movs	r0, #254	@ 0xfe
 8008998:	0580      	lsls	r0, r0, #22
 800899a:	f7f8 f91b 	bl	8000bd4 <__aeabi_fdiv>
 800899e:	1c03      	adds	r3, r0, #0
    }
}
 80089a0:	1c18      	adds	r0, r3, #0
 80089a2:	46bd      	mov	sp, r7
 80089a4:	b005      	add	sp, #20
 80089a6:	bd90      	pop	{r4, r7, pc}
 80089a8:	c2480000 	.word	0xc2480000
 80089ac:	42480000 	.word	0x42480000

080089b0 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80089c8:	46c0      	nop			@ (mov r8, r8)
 80089ca:	46bd      	mov	sp, r7
 80089cc:	b004      	add	sp, #16
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80089d0:	b590      	push	{r4, r7, lr}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d114      	bne.n	8008a0c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089e6:	1c19      	adds	r1, r3, #0
 80089e8:	6838      	ldr	r0, [r7, #0]
 80089ea:	f7f8 fc17 	bl	800121c <__aeabi_fsub>
 80089ee:	1c03      	adds	r3, r0, #0
 80089f0:	4918      	ldr	r1, [pc, #96]	@ (8008a54 <GasIndexAlgorithm__mox_model__process+0x84>)
 80089f2:	1c18      	adds	r0, r3, #0
 80089f4:	f7f8 f8ee 	bl	8000bd4 <__aeabi_fdiv>
 80089f8:	1c03      	adds	r3, r0, #0
 80089fa:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8008a00:	1c19      	adds	r1, r3, #0
 8008a02:	1c10      	adds	r0, r2, #0
 8008a04:	f7f8 facc 	bl	8000fa0 <__aeabi_fmul>
 8008a08:	1c03      	adds	r3, r0, #0
 8008a0a:	e01f      	b.n	8008a4c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a10:	1c19      	adds	r1, r3, #0
 8008a12:	6838      	ldr	r0, [r7, #0]
 8008a14:	f7f8 fc02 	bl	800121c <__aeabi_fsub>
 8008a18:	1c03      	adds	r3, r0, #0
 8008a1a:	1c1a      	adds	r2, r3, #0
 8008a1c:	2380      	movs	r3, #128	@ 0x80
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	4053      	eors	r3, r2
 8008a22:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a28:	490b      	ldr	r1, [pc, #44]	@ (8008a58 <GasIndexAlgorithm__mox_model__process+0x88>)
 8008a2a:	1c18      	adds	r0, r3, #0
 8008a2c:	f7f7 ff48 	bl	80008c0 <__aeabi_fadd>
 8008a30:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008a32:	1c19      	adds	r1, r3, #0
 8008a34:	1c20      	adds	r0, r4, #0
 8008a36:	f7f8 f8cd 	bl	8000bd4 <__aeabi_fdiv>
 8008a3a:	1c03      	adds	r3, r0, #0
 8008a3c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8008a42:	1c19      	adds	r1, r3, #0
 8008a44:	1c10      	adds	r0, r2, #0
 8008a46:	f7f8 faab 	bl	8000fa0 <__aeabi_fmul>
 8008a4a:	1c03      	adds	r3, r0, #0
    }
}
 8008a4c:	1c18      	adds	r0, r3, #0
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b003      	add	sp, #12
 8008a52:	bd90      	pop	{r4, r7, pc}
 8008a54:	44fa0000 	.word	0x44fa0000
 8008a58:	435c0000 	.word	0x435c0000

08008a5c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2180      	movs	r1, #128	@ 0x80
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2184      	movs	r1, #132	@ 0x84
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2188      	movs	r1, #136	@ 0x88
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	505a      	str	r2, [r3, r1]
}
 8008a82:	46c0      	nop			@ (mov r8, r8)
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b004      	add	sp, #16
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2280      	movs	r2, #128	@ 0x80
 8008a9a:	589c      	ldr	r4, [r3, r2]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2284      	movs	r2, #132	@ 0x84
 8008aa0:	589b      	ldr	r3, [r3, r2]
 8008aa2:	1c19      	adds	r1, r3, #0
 8008aa4:	6838      	ldr	r0, [r7, #0]
 8008aa6:	f7f8 fbb9 	bl	800121c <__aeabi_fsub>
 8008aaa:	1c03      	adds	r3, r0, #0
 8008aac:	1c19      	adds	r1, r3, #0
 8008aae:	1c20      	adds	r0, r4, #0
 8008ab0:	f7f8 fa76 	bl	8000fa0 <__aeabi_fmul>
 8008ab4:	1c03      	adds	r3, r0, #0
 8008ab6:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8008ab8:	4940      	ldr	r1, [pc, #256]	@ (8008bbc <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f7f7 fd38 	bl	8000530 <__aeabi_fcmplt>
 8008ac0:	1e03      	subs	r3, r0, #0
 8008ac2:	d001      	beq.n	8008ac8 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8008ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8008bc0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008ac6:	e075      	b.n	8008bb4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8008ac8:	493e      	ldr	r1, [pc, #248]	@ (8008bc4 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8008aca:	68b8      	ldr	r0, [r7, #8]
 8008acc:	f7f7 fd44 	bl	8000558 <__aeabi_fcmpgt>
 8008ad0:	1e03      	subs	r3, r0, #0
 8008ad2:	d001      	beq.n	8008ad8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e06d      	b.n	8008bb4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	f7f7 fd46 	bl	800056c <__aeabi_fcmpge>
 8008ae0:	1e03      	subs	r3, r0, #0
 8008ae2:	d047      	beq.n	8008b74 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2288      	movs	r2, #136	@ 0x88
 8008ae8:	589b      	ldr	r3, [r3, r2]
 8008aea:	21fe      	movs	r1, #254	@ 0xfe
 8008aec:	0589      	lsls	r1, r1, #22
 8008aee:	1c18      	adds	r0, r3, #0
 8008af0:	f7f7 fd18 	bl	8000524 <__aeabi_fcmpeq>
 8008af4:	1e03      	subs	r3, r0, #0
 8008af6:	d00e      	beq.n	8008b16 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	1c19      	adds	r1, r3, #0
 8008afe:	20fe      	movs	r0, #254	@ 0xfe
 8008b00:	0580      	lsls	r0, r0, #22
 8008b02:	f7f8 fb8b 	bl	800121c <__aeabi_fsub>
 8008b06:	1c03      	adds	r3, r0, #0
 8008b08:	492f      	ldr	r1, [pc, #188]	@ (8008bc8 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8008b0a:	1c18      	adds	r0, r3, #0
 8008b0c:	f7f8 fa48 	bl	8000fa0 <__aeabi_fmul>
 8008b10:	1c03      	adds	r3, r0, #0
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e012      	b.n	8008b3c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	492c      	ldr	r1, [pc, #176]	@ (8008bcc <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8008b1c:	1c18      	adds	r0, r3, #0
 8008b1e:	f7f8 fa3f 	bl	8000fa0 <__aeabi_fmul>
 8008b22:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008b24:	1c19      	adds	r1, r3, #0
 8008b26:	4826      	ldr	r0, [pc, #152]	@ (8008bc0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008b28:	f7f8 fb78 	bl	800121c <__aeabi_fsub>
 8008b2c:	1c03      	adds	r3, r0, #0
 8008b2e:	2181      	movs	r1, #129	@ 0x81
 8008b30:	05c9      	lsls	r1, r1, #23
 8008b32:	1c18      	adds	r0, r3, #0
 8008b34:	f7f8 f84e 	bl	8000bd4 <__aeabi_fdiv>
 8008b38:	1c03      	adds	r3, r0, #0
 8008b3a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008b3c:	4920      	ldr	r1, [pc, #128]	@ (8008bc0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f7f7 febe 	bl	80008c0 <__aeabi_fadd>
 8008b44:	1c03      	adds	r3, r0, #0
 8008b46:	1c1c      	adds	r4, r3, #0
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	1c18      	adds	r0, r3, #0
 8008b4c:	f016 faa8 	bl	801f0a0 <expf>
 8008b50:	1c03      	adds	r3, r0, #0
 8008b52:	21fe      	movs	r1, #254	@ 0xfe
 8008b54:	0589      	lsls	r1, r1, #22
 8008b56:	1c18      	adds	r0, r3, #0
 8008b58:	f7f7 feb2 	bl	80008c0 <__aeabi_fadd>
 8008b5c:	1c03      	adds	r3, r0, #0
 8008b5e:	1c19      	adds	r1, r3, #0
 8008b60:	1c20      	adds	r0, r4, #0
 8008b62:	f7f8 f837 	bl	8000bd4 <__aeabi_fdiv>
 8008b66:	1c03      	adds	r3, r0, #0
 8008b68:	68f9      	ldr	r1, [r7, #12]
 8008b6a:	1c18      	adds	r0, r3, #0
 8008b6c:	f7f8 fb56 	bl	800121c <__aeabi_fsub>
 8008b70:	1c03      	adds	r3, r0, #0
 8008b72:	e01f      	b.n	8008bb4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2188      	movs	r1, #136	@ 0x88
 8008b7c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008b7e:	1c19      	adds	r1, r3, #0
 8008b80:	1c10      	adds	r0, r2, #0
 8008b82:	f7f8 f827 	bl	8000bd4 <__aeabi_fdiv>
 8008b86:	1c03      	adds	r3, r0, #0
 8008b88:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	1c18      	adds	r0, r3, #0
 8008b8e:	f016 fa87 	bl	801f0a0 <expf>
 8008b92:	1c03      	adds	r3, r0, #0
 8008b94:	21fe      	movs	r1, #254	@ 0xfe
 8008b96:	0589      	lsls	r1, r1, #22
 8008b98:	1c18      	adds	r0, r3, #0
 8008b9a:	f7f7 fe91 	bl	80008c0 <__aeabi_fadd>
 8008b9e:	1c03      	adds	r3, r0, #0
 8008ba0:	1c19      	adds	r1, r3, #0
 8008ba2:	4807      	ldr	r0, [pc, #28]	@ (8008bc0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008ba4:	f7f8 f816 	bl	8000bd4 <__aeabi_fdiv>
 8008ba8:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008baa:	1c19      	adds	r1, r3, #0
 8008bac:	1c20      	adds	r0, r4, #0
 8008bae:	f7f8 f9f7 	bl	8000fa0 <__aeabi_fmul>
 8008bb2:	1c03      	adds	r3, r0, #0
        }
    }
}
 8008bb4:	1c18      	adds	r0, r3, #0
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b005      	add	sp, #20
 8008bba:	bd90      	pop	{r4, r7, pc}
 8008bbc:	c2480000 	.word	0xc2480000
 8008bc0:	43fa0000 	.word	0x43fa0000
 8008bc4:	42480000 	.word	0x42480000
 8008bc8:	3f8041ab 	.word	0x3f8041ab
 8008bcc:	40a00000 	.word	0x40a00000

08008bd0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008bd0:	b590      	push	{r4, r7, lr}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4913      	ldr	r1, [pc, #76]	@ (8008c30 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8008be2:	1c18      	adds	r0, r3, #0
 8008be4:	f7f7 fe6c 	bl	80008c0 <__aeabi_fadd>
 8008be8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008bea:	1c19      	adds	r1, r3, #0
 8008bec:	1c20      	adds	r0, r4, #0
 8008bee:	f7f7 fff1 	bl	8000bd4 <__aeabi_fdiv>
 8008bf2:	1c03      	adds	r3, r0, #0
 8008bf4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	228c      	movs	r2, #140	@ 0x8c
 8008bfa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	490b      	ldr	r1, [pc, #44]	@ (8008c34 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8008c06:	1c18      	adds	r0, r3, #0
 8008c08:	f7f7 fe5a 	bl	80008c0 <__aeabi_fadd>
 8008c0c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008c0e:	1c19      	adds	r1, r3, #0
 8008c10:	1c20      	adds	r0, r4, #0
 8008c12:	f7f7 ffdf 	bl	8000bd4 <__aeabi_fdiv>
 8008c16:	1c03      	adds	r3, r0, #0
 8008c18:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2290      	movs	r2, #144	@ 0x90
 8008c1e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2294      	movs	r2, #148	@ 0x94
 8008c24:	2100      	movs	r1, #0
 8008c26:	5499      	strb	r1, [r3, r2]
}
 8008c28:	46c0      	nop			@ (mov r8, r8)
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b003      	add	sp, #12
 8008c2e:	bd90      	pop	{r4, r7, pc}
 8008c30:	41a00000 	.word	0x41a00000
 8008c34:	43fa0000 	.word	0x43fa0000

08008c38 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2294      	movs	r2, #148	@ 0x94
 8008c46:	5c9b      	ldrb	r3, [r3, r2]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	4053      	eors	r3, r2
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00f      	beq.n	8008c72 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2198      	movs	r1, #152	@ 0x98
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	219c      	movs	r1, #156	@ 0x9c
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	21a0      	movs	r1, #160	@ 0xa0
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2294      	movs	r2, #148	@ 0x94
 8008c6e:	2101      	movs	r1, #1
 8008c70:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	228c      	movs	r2, #140	@ 0x8c
 8008c76:	589b      	ldr	r3, [r3, r2]
 8008c78:	1c19      	adds	r1, r3, #0
 8008c7a:	20fe      	movs	r0, #254	@ 0xfe
 8008c7c:	0580      	lsls	r0, r0, #22
 8008c7e:	f7f8 facd 	bl	800121c <__aeabi_fsub>
 8008c82:	1c03      	adds	r3, r0, #0
 8008c84:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2298      	movs	r2, #152	@ 0x98
 8008c8a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008c8c:	1c19      	adds	r1, r3, #0
 8008c8e:	f7f8 f987 	bl	8000fa0 <__aeabi_fmul>
 8008c92:	1c03      	adds	r3, r0, #0
 8008c94:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	228c      	movs	r2, #140	@ 0x8c
 8008c9a:	589b      	ldr	r3, [r3, r2]
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	1c18      	adds	r0, r3, #0
 8008ca0:	f7f8 f97e 	bl	8000fa0 <__aeabi_fmul>
 8008ca4:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8008ca6:	1c19      	adds	r1, r3, #0
 8008ca8:	1c20      	adds	r0, r4, #0
 8008caa:	f7f7 fe09 	bl	80008c0 <__aeabi_fadd>
 8008cae:	1c03      	adds	r3, r0, #0
 8008cb0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2298      	movs	r2, #152	@ 0x98
 8008cb6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2290      	movs	r2, #144	@ 0x90
 8008cbc:	589b      	ldr	r3, [r3, r2]
 8008cbe:	1c19      	adds	r1, r3, #0
 8008cc0:	20fe      	movs	r0, #254	@ 0xfe
 8008cc2:	0580      	lsls	r0, r0, #22
 8008cc4:	f7f8 faaa 	bl	800121c <__aeabi_fsub>
 8008cc8:	1c03      	adds	r3, r0, #0
 8008cca:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	229c      	movs	r2, #156	@ 0x9c
 8008cd0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008cd2:	1c19      	adds	r1, r3, #0
 8008cd4:	f7f8 f964 	bl	8000fa0 <__aeabi_fmul>
 8008cd8:	1c03      	adds	r3, r0, #0
 8008cda:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2290      	movs	r2, #144	@ 0x90
 8008ce0:	589b      	ldr	r3, [r3, r2]
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	1c18      	adds	r0, r3, #0
 8008ce6:	f7f8 f95b 	bl	8000fa0 <__aeabi_fmul>
 8008cea:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008cec:	1c19      	adds	r1, r3, #0
 8008cee:	1c20      	adds	r0, r4, #0
 8008cf0:	f7f7 fde6 	bl	80008c0 <__aeabi_fadd>
 8008cf4:	1c03      	adds	r3, r0, #0
 8008cf6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	229c      	movs	r2, #156	@ 0x9c
 8008cfc:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2298      	movs	r2, #152	@ 0x98
 8008d02:	589a      	ldr	r2, [r3, r2]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	219c      	movs	r1, #156	@ 0x9c
 8008d08:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8008d0a:	1c19      	adds	r1, r3, #0
 8008d0c:	1c10      	adds	r0, r2, #0
 8008d0e:	f7f8 fa85 	bl	800121c <__aeabi_fsub>
 8008d12:	1c03      	adds	r3, r0, #0
 8008d14:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8008d16:	2100      	movs	r1, #0
 8008d18:	6978      	ldr	r0, [r7, #20]
 8008d1a:	f7f7 fc09 	bl	8000530 <__aeabi_fcmplt>
 8008d1e:	1e03      	subs	r3, r0, #0
 8008d20:	d004      	beq.n	8008d2c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2280      	movs	r2, #128	@ 0x80
 8008d26:	0612      	lsls	r2, r2, #24
 8008d28:	4053      	eors	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008d2c:	4923      	ldr	r1, [pc, #140]	@ (8008dbc <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008d2e:	6978      	ldr	r0, [r7, #20]
 8008d30:	f7f8 f936 	bl	8000fa0 <__aeabi_fmul>
 8008d34:	1c03      	adds	r3, r0, #0
 8008d36:	1c18      	adds	r0, r3, #0
 8008d38:	f016 f9b2 	bl	801f0a0 <expf>
 8008d3c:	1c03      	adds	r3, r0, #0
 8008d3e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008d40:	491f      	ldr	r1, [pc, #124]	@ (8008dc0 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008d42:	6938      	ldr	r0, [r7, #16]
 8008d44:	f7f8 f92c 	bl	8000fa0 <__aeabi_fmul>
 8008d48:	1c03      	adds	r3, r0, #0
 8008d4a:	491e      	ldr	r1, [pc, #120]	@ (8008dc4 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008d4c:	1c18      	adds	r0, r3, #0
 8008d4e:	f7f7 fdb7 	bl	80008c0 <__aeabi_fadd>
 8008d52:	1c03      	adds	r3, r0, #0
 8008d54:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685c      	ldr	r4, [r3, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	68f9      	ldr	r1, [r7, #12]
 8008d60:	1c18      	adds	r0, r3, #0
 8008d62:	f7f7 fdad 	bl	80008c0 <__aeabi_fadd>
 8008d66:	1c03      	adds	r3, r0, #0
 8008d68:	1c19      	adds	r1, r3, #0
 8008d6a:	1c20      	adds	r0, r4, #0
 8008d6c:	f7f7 ff32 	bl	8000bd4 <__aeabi_fdiv>
 8008d70:	1c03      	adds	r3, r0, #0
 8008d72:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	20fe      	movs	r0, #254	@ 0xfe
 8008d78:	0580      	lsls	r0, r0, #22
 8008d7a:	f7f8 fa4f 	bl	800121c <__aeabi_fsub>
 8008d7e:	1c03      	adds	r3, r0, #0
 8008d80:	1c18      	adds	r0, r3, #0
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	22a0      	movs	r2, #160	@ 0xa0
 8008d86:	589b      	ldr	r3, [r3, r2]
 8008d88:	1c19      	adds	r1, r3, #0
 8008d8a:	f7f8 f909 	bl	8000fa0 <__aeabi_fmul>
 8008d8e:	1c03      	adds	r3, r0, #0
 8008d90:	1c1c      	adds	r4, r3, #0
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	68b8      	ldr	r0, [r7, #8]
 8008d96:	f7f8 f903 	bl	8000fa0 <__aeabi_fmul>
 8008d9a:	1c03      	adds	r3, r0, #0
 8008d9c:	1c19      	adds	r1, r3, #0
 8008d9e:	1c20      	adds	r0, r4, #0
 8008da0:	f7f7 fd8e 	bl	80008c0 <__aeabi_fadd>
 8008da4:	1c03      	adds	r3, r0, #0
 8008da6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	22a0      	movs	r2, #160	@ 0xa0
 8008dac:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	22a0      	movs	r2, #160	@ 0xa0
 8008db2:	589b      	ldr	r3, [r3, r2]
}
 8008db4:	1c18      	adds	r0, r3, #0
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b007      	add	sp, #28
 8008dba:	bd90      	pop	{r4, r7, pc}
 8008dbc:	be4ccccd 	.word	0xbe4ccccd
 8008dc0:	43f00000 	.word	0x43f00000
 8008dc4:	41a00000 	.word	0x41a00000

08008dc8 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6039      	str	r1, [r7, #0]
 8008dd0:	0011      	movs	r1, r2
 8008dd2:	1dfb      	adds	r3, r7, #7
 8008dd4:	1c02      	adds	r2, r0, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	1dbb      	adds	r3, r7, #6
 8008dda:	1c0a      	adds	r2, r1, #0
 8008ddc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008dde:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <ReadRegister+0x38>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d008      	beq.n	8008df8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8008de6:	4b06      	ldr	r3, [pc, #24]	@ (8008e00 <ReadRegister+0x38>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	1dba      	adds	r2, r7, #6
 8008dec:	7814      	ldrb	r4, [r2, #0]
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	1dfa      	adds	r2, r7, #7
 8008df2:	7810      	ldrb	r0, [r2, #0]
 8008df4:	0022      	movs	r2, r4
 8008df6:	4798      	blx	r3
  }
}
 8008df8:	46c0      	nop			@ (mov r8, r8)
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	b003      	add	sp, #12
 8008dfe:	bd90      	pop	{r4, r7, pc}
 8008e00:	200011bc 	.word	0x200011bc

08008e04 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6039      	str	r1, [r7, #0]
 8008e0c:	0011      	movs	r1, r2
 8008e0e:	1dfb      	adds	r3, r7, #7
 8008e10:	1c02      	adds	r2, r0, #0
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	1dbb      	adds	r3, r7, #6
 8008e16:	1c0a      	adds	r2, r1, #0
 8008e18:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008e1a:	4b08      	ldr	r3, [pc, #32]	@ (8008e3c <WriteRegister+0x38>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d008      	beq.n	8008e34 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008e22:	4b06      	ldr	r3, [pc, #24]	@ (8008e3c <WriteRegister+0x38>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	1dba      	adds	r2, r7, #6
 8008e28:	7814      	ldrb	r4, [r2, #0]
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	1dfa      	adds	r2, r7, #7
 8008e2e:	7810      	ldrb	r0, [r2, #0]
 8008e30:	0022      	movs	r2, r4
 8008e32:	4798      	blx	r3
  }
}
 8008e34:	46c0      	nop			@ (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b003      	add	sp, #12
 8008e3a:	bd90      	pop	{r4, r7, pc}
 8008e3c:	200011c0 	.word	0x200011c0

08008e40 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008e4a:	4b07      	ldr	r3, [pc, #28]	@ (8008e68 <SGP_Init+0x28>)
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008e50:	4b06      	ldr	r3, [pc, #24]	@ (8008e6c <SGP_Init+0x2c>)
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8008e56:	4b06      	ldr	r3, [pc, #24]	@ (8008e70 <SGP_Init+0x30>)
 8008e58:	2100      	movs	r1, #0
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	f7ff f930 	bl	80080c0 <GasIndexAlgorithm_init>
}
 8008e60:	46c0      	nop			@ (mov r8, r8)
 8008e62:	46bd      	mov	sp, r7
 8008e64:	b002      	add	sp, #8
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200011bc 	.word	0x200011bc
 8008e6c:	200011c0 	.word	0x200011c0
 8008e70:	200011d0 	.word	0x200011d0

08008e74 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008e78:	4b13      	ldr	r3, [pc, #76]	@ (8008ec8 <SGP_StartMeasurement+0x54>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00d      	beq.n	8008e9c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008e80:	4b12      	ldr	r3, [pc, #72]	@ (8008ecc <SGP_StartMeasurement+0x58>)
 8008e82:	2208      	movs	r2, #8
 8008e84:	0019      	movs	r1, r3
 8008e86:	2059      	movs	r0, #89	@ 0x59
 8008e88:	f7ff ffbc 	bl	8008e04 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008e8c:	f002 fc62 	bl	800b754 <GetCurrentHalTicks>
 8008e90:	0003      	movs	r3, r0
 8008e92:	331e      	adds	r3, #30
 8008e94:	001a      	movs	r2, r3
 8008e96:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed0 <SGP_StartMeasurement+0x5c>)
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	e00c      	b.n	8008eb6 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed4 <SGP_StartMeasurement+0x60>)
 8008e9e:	2208      	movs	r2, #8
 8008ea0:	0019      	movs	r1, r3
 8008ea2:	2059      	movs	r0, #89	@ 0x59
 8008ea4:	f7ff ffae 	bl	8008e04 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008ea8:	f002 fc54 	bl	800b754 <GetCurrentHalTicks>
 8008eac:	0003      	movs	r3, r0
 8008eae:	33aa      	adds	r3, #170	@ 0xaa
 8008eb0:	001a      	movs	r2, r3
 8008eb2:	4b09      	ldr	r3, [pc, #36]	@ (8008ed8 <SGP_StartMeasurement+0x64>)
 8008eb4:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8008eb6:	4b09      	ldr	r3, [pc, #36]	@ (8008edc <SGP_StartMeasurement+0x68>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008ebc:	4b08      	ldr	r3, [pc, #32]	@ (8008ee0 <SGP_StartMeasurement+0x6c>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
}
 8008ec2:	46c0      	nop			@ (mov r8, r8)
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20001278 	.word	0x20001278
 8008ecc:	20000090 	.word	0x20000090
 8008ed0:	200000a4 	.word	0x200000a4
 8008ed4:	20000088 	.word	0x20000088
 8008ed8:	2000009c 	.word	0x2000009c
 8008edc:	200011ce 	.word	0x200011ce
 8008ee0:	200011cf 	.word	0x200011cf

08008ee4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	4b04      	ldr	r3, [pc, #16]	@ (8008efc <SGP_HeatedUp+0x18>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	0018      	movs	r0, r3
 8008eee:	f002 fb69 	bl	800b5c4 <TimestampIsReached>
 8008ef2:	0003      	movs	r3, r0
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			@ (mov r8, r8)
 8008efc:	2000009c 	.word	0x2000009c

08008f00 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008f04:	4b04      	ldr	r3, [pc, #16]	@ (8008f18 <SGP_MeasurementReady+0x18>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f002 fb5b 	bl	800b5c4 <TimestampIsReached>
 8008f0e:	0003      	movs	r3, r0
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	200000a4 	.word	0x200000a4

08008f1c <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008f20:	4b04      	ldr	r3, [pc, #16]	@ (8008f34 <SGP_MeasurementDone+0x18>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	0018      	movs	r0, r3
 8008f26:	f002 fb4d 	bl	800b5c4 <TimestampIsReached>
 8008f2a:	0003      	movs	r3, r0
}
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	46c0      	nop			@ (mov r8, r8)
 8008f34:	200000a0 	.word	0x200000a0

08008f38 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008f3c:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <SGP_TurnHeaterOff+0x18>)
 8008f3e:	2202      	movs	r2, #2
 8008f40:	0019      	movs	r1, r3
 8008f42:	2059      	movs	r0, #89	@ 0x59
 8008f44:	f7ff ff5e 	bl	8008e04 <WriteRegister>
}
 8008f48:	46c0      	nop			@ (mov r8, r8)
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	46c0      	nop			@ (mov r8, r8)
 8008f50:	20000080 	.word	0x20000080

08008f54 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8008f54:	b5b0      	push	{r4, r5, r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008f5c:	f7ff ffc2 	bl	8008ee4 <SGP_HeatedUp>
 8008f60:	1e03      	subs	r3, r0, #0
 8008f62:	d038      	beq.n	8008fd6 <SGP_GetMeasurementValues+0x82>
 8008f64:	4bd5      	ldr	r3, [pc, #852]	@ (80092bc <SGP_GetMeasurementValues+0x368>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	4053      	eors	r3, r2
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d031      	beq.n	8008fd6 <SGP_GetMeasurementValues+0x82>
 8008f72:	4bd3      	ldr	r3, [pc, #844]	@ (80092c0 <SGP_GetMeasurementValues+0x36c>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2201      	movs	r2, #1
 8008f78:	4053      	eors	r3, r2
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d02a      	beq.n	8008fd6 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008f80:	4ad0      	ldr	r2, [pc, #832]	@ (80092c4 <SGP_GetMeasurementValues+0x370>)
 8008f82:	4bd1      	ldr	r3, [pc, #836]	@ (80092c8 <SGP_GetMeasurementValues+0x374>)
 8008f84:	0019      	movs	r1, r3
 8008f86:	2003      	movs	r0, #3
 8008f88:	f002 fb72 	bl	800b670 <CreateLine>
    HeatUpIsDone = true;
 8008f8c:	4bcb      	ldr	r3, [pc, #812]	@ (80092bc <SGP_GetMeasurementValues+0x368>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8008f92:	4bce      	ldr	r3, [pc, #824]	@ (80092cc <SGP_GetMeasurementValues+0x378>)
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00d      	beq.n	8008fb6 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008f9a:	4bcd      	ldr	r3, [pc, #820]	@ (80092d0 <SGP_GetMeasurementValues+0x37c>)
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	0019      	movs	r1, r3
 8008fa0:	2059      	movs	r0, #89	@ 0x59
 8008fa2:	f7ff ff2f 	bl	8008e04 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008fa6:	f002 fbd5 	bl	800b754 <GetCurrentHalTicks>
 8008faa:	0003      	movs	r3, r0
 8008fac:	331e      	adds	r3, #30
 8008fae:	001a      	movs	r2, r3
 8008fb0:	4bc8      	ldr	r3, [pc, #800]	@ (80092d4 <SGP_GetMeasurementValues+0x380>)
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e00c      	b.n	8008fd0 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008fb6:	4bc8      	ldr	r3, [pc, #800]	@ (80092d8 <SGP_GetMeasurementValues+0x384>)
 8008fb8:	2208      	movs	r2, #8
 8008fba:	0019      	movs	r1, r3
 8008fbc:	2059      	movs	r0, #89	@ 0x59
 8008fbe:	f7ff ff21 	bl	8008e04 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008fc2:	f002 fbc7 	bl	800b754 <GetCurrentHalTicks>
 8008fc6:	0003      	movs	r3, r0
 8008fc8:	331e      	adds	r3, #30
 8008fca:	001a      	movs	r2, r3
 8008fcc:	4bc1      	ldr	r3, [pc, #772]	@ (80092d4 <SGP_GetMeasurementValues+0x380>)
 8008fce:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008fd0:	4bbb      	ldr	r3, [pc, #748]	@ (80092c0 <SGP_GetMeasurementValues+0x36c>)
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8008fd6:	4bb9      	ldr	r3, [pc, #740]	@ (80092bc <SGP_GetMeasurementValues+0x368>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d100      	bne.n	8008fe0 <SGP_GetMeasurementValues+0x8c>
 8008fde:	e1a9      	b.n	8009334 <SGP_GetMeasurementValues+0x3e0>
 8008fe0:	f7ff ff8e 	bl	8008f00 <SGP_MeasurementReady>
 8008fe4:	1e03      	subs	r3, r0, #0
 8008fe6:	d100      	bne.n	8008fea <SGP_GetMeasurementValues+0x96>
 8008fe8:	e1a4      	b.n	8009334 <SGP_GetMeasurementValues+0x3e0>
 8008fea:	4bbc      	ldr	r3, [pc, #752]	@ (80092dc <SGP_GetMeasurementValues+0x388>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4053      	eors	r3, r2
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d100      	bne.n	8008ffa <SGP_GetMeasurementValues+0xa6>
 8008ff8:	e19c      	b.n	8009334 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8008ffa:	4bb9      	ldr	r3, [pc, #740]	@ (80092e0 <SGP_GetMeasurementValues+0x38c>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	3301      	adds	r3, #1
 8009000:	4ab8      	ldr	r2, [pc, #736]	@ (80092e4 <SGP_GetMeasurementValues+0x390>)
 8009002:	49b1      	ldr	r1, [pc, #708]	@ (80092c8 <SGP_GetMeasurementValues+0x374>)
 8009004:	2003      	movs	r0, #3
 8009006:	f002 fb33 	bl	800b670 <CreateLine>
    MeasurementIsReady = true;
 800900a:	4bb4      	ldr	r3, [pc, #720]	@ (80092dc <SGP_GetMeasurementValues+0x388>)
 800900c:	2201      	movs	r2, #1
 800900e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8009010:	4bb5      	ldr	r3, [pc, #724]	@ (80092e8 <SGP_GetMeasurementValues+0x394>)
 8009012:	2203      	movs	r2, #3
 8009014:	0019      	movs	r1, r3
 8009016:	2059      	movs	r0, #89	@ 0x59
 8009018:	f7ff fed6 	bl	8008dc8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800901c:	4bb2      	ldr	r3, [pc, #712]	@ (80092e8 <SGP_GetMeasurementValues+0x394>)
 800901e:	2203      	movs	r2, #3
 8009020:	2103      	movs	r1, #3
 8009022:	0018      	movs	r0, r3
 8009024:	f000 f9ec 	bl	8009400 <CheckCRC>
 8009028:	0003      	movs	r3, r0
 800902a:	001a      	movs	r2, r3
 800902c:	2301      	movs	r3, #1
 800902e:	4053      	eors	r3, r2
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d02a      	beq.n	800908c <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8009036:	4aad      	ldr	r2, [pc, #692]	@ (80092ec <SGP_GetMeasurementValues+0x398>)
 8009038:	4bad      	ldr	r3, [pc, #692]	@ (80092f0 <SGP_GetMeasurementValues+0x39c>)
 800903a:	0019      	movs	r1, r3
 800903c:	2001      	movs	r0, #1
 800903e:	f002 fb17 	bl	800b670 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8009042:	4aac      	ldr	r2, [pc, #688]	@ (80092f4 <SGP_GetMeasurementValues+0x3a0>)
 8009044:	4bac      	ldr	r3, [pc, #688]	@ (80092f8 <SGP_GetMeasurementValues+0x3a4>)
 8009046:	0019      	movs	r1, r3
 8009048:	2002      	movs	r0, #2
 800904a:	f002 fb11 	bl	800b670 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800904e:	230f      	movs	r3, #15
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	e012      	b.n	800907e <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8009058:	240f      	movs	r4, #15
 800905a:	193b      	adds	r3, r7, r4
 800905c:	7818      	ldrb	r0, [r3, #0]
 800905e:	193b      	adds	r3, r7, r4
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4aa1      	ldr	r2, [pc, #644]	@ (80092e8 <SGP_GetMeasurementValues+0x394>)
 8009064:	5cd3      	ldrb	r3, [r2, r3]
 8009066:	4aa5      	ldr	r2, [pc, #660]	@ (80092fc <SGP_GetMeasurementValues+0x3a8>)
 8009068:	4997      	ldr	r1, [pc, #604]	@ (80092c8 <SGP_GetMeasurementValues+0x374>)
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	0003      	movs	r3, r0
 800906e:	2003      	movs	r0, #3
 8009070:	f002 fafe 	bl	800b670 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8009074:	193b      	adds	r3, r7, r4
 8009076:	781a      	ldrb	r2, [r3, #0]
 8009078:	193b      	adds	r3, r7, r4
 800907a:	3201      	adds	r2, #1
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	230f      	movs	r3, #15
 8009080:	18fb      	adds	r3, r7, r3
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d9e7      	bls.n	8009058 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8009088:	2300      	movs	r3, #0
 800908a:	e16b      	b.n	8009364 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800908c:	f002 fb62 	bl	800b754 <GetCurrentHalTicks>
 8009090:	0003      	movs	r3, r0
 8009092:	22fa      	movs	r2, #250	@ 0xfa
 8009094:	0092      	lsls	r2, r2, #2
 8009096:	189a      	adds	r2, r3, r2
 8009098:	4b99      	ldr	r3, [pc, #612]	@ (8009300 <SGP_GetMeasurementValues+0x3ac>)
 800909a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800909c:	f7ff ff4c 	bl	8008f38 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80090a0:	4b8f      	ldr	r3, [pc, #572]	@ (80092e0 <SGP_GetMeasurementValues+0x38c>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	4b8d      	ldr	r3, [pc, #564]	@ (80092e0 <SGP_GetMeasurementValues+0x38c>)
 80090aa:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80090ac:	4b8c      	ldr	r3, [pc, #560]	@ (80092e0 <SGP_GetMeasurementValues+0x38c>)
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	4b94      	ldr	r3, [pc, #592]	@ (8009304 <SGP_GetMeasurementValues+0x3b0>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d200      	bcs.n	80090ba <SGP_GetMeasurementValues+0x166>
 80090b8:	e13c      	b.n	8009334 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80090ba:	4b8b      	ldr	r3, [pc, #556]	@ (80092e8 <SGP_GetMeasurementValues+0x394>)
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	021b      	lsls	r3, r3, #8
 80090c0:	b21a      	sxth	r2, r3
 80090c2:	4b89      	ldr	r3, [pc, #548]	@ (80092e8 <SGP_GetMeasurementValues+0x394>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	b21b      	sxth	r3, r3
 80090c8:	4313      	orrs	r3, r2
 80090ca:	b21a      	sxth	r2, r3
 80090cc:	240c      	movs	r4, #12
 80090ce:	193b      	adds	r3, r7, r4
 80090d0:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80090d2:	193b      	adds	r3, r7, r4
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	4a8c      	ldr	r2, [pc, #560]	@ (8009308 <SGP_GetMeasurementValues+0x3b4>)
 80090d8:	497b      	ldr	r1, [pc, #492]	@ (80092c8 <SGP_GetMeasurementValues+0x374>)
 80090da:	2003      	movs	r0, #3
 80090dc:	f002 fac8 	bl	800b670 <CreateLine>
      int32_t tempVocIndex = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80090e4:	193b      	adds	r3, r7, r4
 80090e6:	8819      	ldrh	r1, [r3, #0]
 80090e8:	2308      	movs	r3, #8
 80090ea:	18fa      	adds	r2, r7, r3
 80090ec:	4b87      	ldr	r3, [pc, #540]	@ (800930c <SGP_GetMeasurementValues+0x3b8>)
 80090ee:	0018      	movs	r0, r3
 80090f0:	f7ff f848 	bl	8008184 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4a86      	ldr	r2, [pc, #536]	@ (8009310 <SGP_GetMeasurementValues+0x3bc>)
 80090f8:	4973      	ldr	r1, [pc, #460]	@ (80092c8 <SGP_GetMeasurementValues+0x374>)
 80090fa:	2003      	movs	r0, #3
 80090fc:	f002 fab8 	bl	800b670 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd5a      	ble.n	80091c4 <SGP_GetMeasurementValues+0x270>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b64      	cmp	r3, #100	@ 0x64
 8009114:	dc56      	bgt.n	80091c4 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	0018      	movs	r0, r3
 800911c:	f7fa f950 	bl	80033c0 <__aeabi_i2d>
 8009120:	2200      	movs	r2, #0
 8009122:	4b7c      	ldr	r3, [pc, #496]	@ (8009314 <SGP_GetMeasurementValues+0x3c0>)
 8009124:	f7f8 fe46 	bl	8001db4 <__aeabi_ddiv>
 8009128:	0002      	movs	r2, r0
 800912a:	000b      	movs	r3, r1
 800912c:	2000      	movs	r0, #0
 800912e:	497a      	ldr	r1, [pc, #488]	@ (8009318 <SGP_GetMeasurementValues+0x3c4>)
 8009130:	f7f9 fd4c 	bl	8002bcc <__aeabi_dsub>
 8009134:	0002      	movs	r2, r0
 8009136:	000b      	movs	r3, r1
 8009138:	0014      	movs	r4, r2
 800913a:	001d      	movs	r5, r3
 800913c:	4b77      	ldr	r3, [pc, #476]	@ (800931c <SGP_GetMeasurementValues+0x3c8>)
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	0018      	movs	r0, r3
 8009142:	f7fa f93d 	bl	80033c0 <__aeabi_i2d>
 8009146:	0002      	movs	r2, r0
 8009148:	000b      	movs	r3, r1
 800914a:	0020      	movs	r0, r4
 800914c:	0029      	movs	r1, r5
 800914e:	f7f9 fa75 	bl	800263c <__aeabi_dmul>
 8009152:	0002      	movs	r2, r0
 8009154:	000b      	movs	r3, r1
 8009156:	0010      	movs	r0, r2
 8009158:	0019      	movs	r1, r3
 800915a:	f7f7 fa77 	bl	800064c <__aeabi_d2uiz>
 800915e:	0003      	movs	r3, r0
 8009160:	b29a      	uxth	r2, r3
 8009162:	4b6f      	ldr	r3, [pc, #444]	@ (8009320 <SGP_GetMeasurementValues+0x3cc>)
 8009164:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	0018      	movs	r0, r3
 800916c:	f7fa f928 	bl	80033c0 <__aeabi_i2d>
 8009170:	2200      	movs	r2, #0
 8009172:	4b68      	ldr	r3, [pc, #416]	@ (8009314 <SGP_GetMeasurementValues+0x3c0>)
 8009174:	f7f8 fe1e 	bl	8001db4 <__aeabi_ddiv>
 8009178:	0002      	movs	r2, r0
 800917a:	000b      	movs	r3, r1
 800917c:	0014      	movs	r4, r2
 800917e:	001d      	movs	r5, r3
 8009180:	4b66      	ldr	r3, [pc, #408]	@ (800931c <SGP_GetMeasurementValues+0x3c8>)
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	0018      	movs	r0, r3
 8009186:	f7fa f91b 	bl	80033c0 <__aeabi_i2d>
 800918a:	0002      	movs	r2, r0
 800918c:	000b      	movs	r3, r1
 800918e:	0020      	movs	r0, r4
 8009190:	0029      	movs	r1, r5
 8009192:	f7f9 fa53 	bl	800263c <__aeabi_dmul>
 8009196:	0002      	movs	r2, r0
 8009198:	000b      	movs	r3, r1
 800919a:	0010      	movs	r0, r2
 800919c:	0019      	movs	r1, r3
 800919e:	f7f7 fa55 	bl	800064c <__aeabi_d2uiz>
 80091a2:	0003      	movs	r3, r0
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	4b5f      	ldr	r3, [pc, #380]	@ (8009324 <SGP_GetMeasurementValues+0x3d0>)
 80091a8:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80091aa:	4b5c      	ldr	r3, [pc, #368]	@ (800931c <SGP_GetMeasurementValues+0x3c8>)
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	4b5e      	ldr	r3, [pc, #376]	@ (8009328 <SGP_GetMeasurementValues+0x3d4>)
 80091b0:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 80091b2:	4b5d      	ldr	r3, [pc, #372]	@ (8009328 <SGP_GetMeasurementValues+0x3d4>)
 80091b4:	8818      	ldrh	r0, [r3, #0]
 80091b6:	4b5a      	ldr	r3, [pc, #360]	@ (8009320 <SGP_GetMeasurementValues+0x3cc>)
 80091b8:	8819      	ldrh	r1, [r3, #0]
 80091ba:	4b5a      	ldr	r3, [pc, #360]	@ (8009324 <SGP_GetMeasurementValues+0x3d0>)
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	001a      	movs	r2, r3
 80091c0:	f001 fb36 	bl	800a830 <SetVocLED>
      }
      if(*vocIndex > 100){
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b64      	cmp	r3, #100	@ 0x64
 80091ca:	dd66      	ble.n	800929a <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7fa f8f5 	bl	80033c0 <__aeabi_i2d>
 80091d6:	2200      	movs	r2, #0
 80091d8:	4b4e      	ldr	r3, [pc, #312]	@ (8009314 <SGP_GetMeasurementValues+0x3c0>)
 80091da:	f7f9 fcf7 	bl	8002bcc <__aeabi_dsub>
 80091de:	0002      	movs	r2, r0
 80091e0:	000b      	movs	r3, r1
 80091e2:	0010      	movs	r0, r2
 80091e4:	0019      	movs	r1, r3
 80091e6:	2200      	movs	r2, #0
 80091e8:	4b50      	ldr	r3, [pc, #320]	@ (800932c <SGP_GetMeasurementValues+0x3d8>)
 80091ea:	f7f8 fde3 	bl	8001db4 <__aeabi_ddiv>
 80091ee:	0002      	movs	r2, r0
 80091f0:	000b      	movs	r3, r1
 80091f2:	0014      	movs	r4, r2
 80091f4:	001d      	movs	r5, r3
 80091f6:	4b49      	ldr	r3, [pc, #292]	@ (800931c <SGP_GetMeasurementValues+0x3c8>)
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	0018      	movs	r0, r3
 80091fc:	f7fa f8e0 	bl	80033c0 <__aeabi_i2d>
 8009200:	0002      	movs	r2, r0
 8009202:	000b      	movs	r3, r1
 8009204:	0020      	movs	r0, r4
 8009206:	0029      	movs	r1, r5
 8009208:	f7f9 fa18 	bl	800263c <__aeabi_dmul>
 800920c:	0002      	movs	r2, r0
 800920e:	000b      	movs	r3, r1
 8009210:	0010      	movs	r0, r2
 8009212:	0019      	movs	r1, r3
 8009214:	f7f7 fa1a 	bl	800064c <__aeabi_d2uiz>
 8009218:	0003      	movs	r3, r0
 800921a:	b29a      	uxth	r2, r3
 800921c:	4b40      	ldr	r3, [pc, #256]	@ (8009320 <SGP_GetMeasurementValues+0x3cc>)
 800921e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	0018      	movs	r0, r3
 8009226:	f7fa f8cb 	bl	80033c0 <__aeabi_i2d>
 800922a:	2200      	movs	r2, #0
 800922c:	4b39      	ldr	r3, [pc, #228]	@ (8009314 <SGP_GetMeasurementValues+0x3c0>)
 800922e:	f7f9 fccd 	bl	8002bcc <__aeabi_dsub>
 8009232:	0002      	movs	r2, r0
 8009234:	000b      	movs	r3, r1
 8009236:	0010      	movs	r0, r2
 8009238:	0019      	movs	r1, r3
 800923a:	2200      	movs	r2, #0
 800923c:	4b3b      	ldr	r3, [pc, #236]	@ (800932c <SGP_GetMeasurementValues+0x3d8>)
 800923e:	f7f8 fdb9 	bl	8001db4 <__aeabi_ddiv>
 8009242:	0002      	movs	r2, r0
 8009244:	000b      	movs	r3, r1
 8009246:	2000      	movs	r0, #0
 8009248:	4933      	ldr	r1, [pc, #204]	@ (8009318 <SGP_GetMeasurementValues+0x3c4>)
 800924a:	f7f9 fcbf 	bl	8002bcc <__aeabi_dsub>
 800924e:	0002      	movs	r2, r0
 8009250:	000b      	movs	r3, r1
 8009252:	0014      	movs	r4, r2
 8009254:	001d      	movs	r5, r3
 8009256:	4b31      	ldr	r3, [pc, #196]	@ (800931c <SGP_GetMeasurementValues+0x3c8>)
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	0018      	movs	r0, r3
 800925c:	f7fa f8b0 	bl	80033c0 <__aeabi_i2d>
 8009260:	0002      	movs	r2, r0
 8009262:	000b      	movs	r3, r1
 8009264:	0020      	movs	r0, r4
 8009266:	0029      	movs	r1, r5
 8009268:	f7f9 f9e8 	bl	800263c <__aeabi_dmul>
 800926c:	0002      	movs	r2, r0
 800926e:	000b      	movs	r3, r1
 8009270:	0010      	movs	r0, r2
 8009272:	0019      	movs	r1, r3
 8009274:	f7f7 f9ea 	bl	800064c <__aeabi_d2uiz>
 8009278:	0003      	movs	r3, r0
 800927a:	b29a      	uxth	r2, r3
 800927c:	4b2a      	ldr	r3, [pc, #168]	@ (8009328 <SGP_GetMeasurementValues+0x3d4>)
 800927e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8009280:	4b26      	ldr	r3, [pc, #152]	@ (800931c <SGP_GetMeasurementValues+0x3c8>)
 8009282:	881a      	ldrh	r2, [r3, #0]
 8009284:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <SGP_GetMeasurementValues+0x3d0>)
 8009286:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 8009288:	4b27      	ldr	r3, [pc, #156]	@ (8009328 <SGP_GetMeasurementValues+0x3d4>)
 800928a:	8818      	ldrh	r0, [r3, #0]
 800928c:	4b24      	ldr	r3, [pc, #144]	@ (8009320 <SGP_GetMeasurementValues+0x3cc>)
 800928e:	8819      	ldrh	r1, [r3, #0]
 8009290:	4b24      	ldr	r3, [pc, #144]	@ (8009324 <SGP_GetMeasurementValues+0x3d0>)
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	001a      	movs	r2, r3
 8009296:	f001 facb 	bl	800a830 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800929a:	4b11      	ldr	r3, [pc, #68]	@ (80092e0 <SGP_GetMeasurementValues+0x38c>)
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80092a0:	4a23      	ldr	r2, [pc, #140]	@ (8009330 <SGP_GetMeasurementValues+0x3dc>)
 80092a2:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <SGP_GetMeasurementValues+0x374>)
 80092a4:	0019      	movs	r1, r3
 80092a6:	2003      	movs	r0, #3
 80092a8:	f002 f9e2 	bl	800b670 <CreateLine>
      HT_MeasurementReceived = false;
 80092ac:	4b07      	ldr	r3, [pc, #28]	@ (80092cc <SGP_GetMeasurementValues+0x378>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80092b2:	4b03      	ldr	r3, [pc, #12]	@ (80092c0 <SGP_GetMeasurementValues+0x36c>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e053      	b.n	8009364 <SGP_GetMeasurementValues+0x410>
 80092bc:	200011ce 	.word	0x200011ce
 80092c0:	20001279 	.word	0x20001279
 80092c4:	0802005c 	.word	0x0802005c
 80092c8:	08020088 	.word	0x08020088
 80092cc:	20001278 	.word	0x20001278
 80092d0:	20000090 	.word	0x20000090
 80092d4:	200000a4 	.word	0x200000a4
 80092d8:	20000088 	.word	0x20000088
 80092dc:	200011cf 	.word	0x200011cf
 80092e0:	200011cd 	.word	0x200011cd
 80092e4:	0802008c 	.word	0x0802008c
 80092e8:	200011c4 	.word	0x200011c4
 80092ec:	080200bc 	.word	0x080200bc
 80092f0:	080200e0 	.word	0x080200e0
 80092f4:	080200e4 	.word	0x080200e4
 80092f8:	08020104 	.word	0x08020104
 80092fc:	08020108 	.word	0x08020108
 8009300:	200000a0 	.word	0x200000a0
 8009304:	20000098 	.word	0x20000098
 8009308:	08020128 	.word	0x08020128
 800930c:	200011d0 	.word	0x200011d0
 8009310:	0802013c 	.word	0x0802013c
 8009314:	40590000 	.word	0x40590000
 8009318:	3ff00000 	.word	0x3ff00000
 800931c:	200000a8 	.word	0x200000a8
 8009320:	2000127e 	.word	0x2000127e
 8009324:	2000127c 	.word	0x2000127c
 8009328:	2000127a 	.word	0x2000127a
 800932c:	40790000 	.word	0x40790000
 8009330:	08020150 	.word	0x08020150
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8009334:	f7ff fdf2 	bl	8008f1c <SGP_MeasurementDone>
 8009338:	1e03      	subs	r3, r0, #0
 800933a:	d012      	beq.n	8009362 <SGP_GetMeasurementValues+0x40e>
 800933c:	4b0b      	ldr	r3, [pc, #44]	@ (800936c <SGP_GetMeasurementValues+0x418>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00e      	beq.n	8009362 <SGP_GetMeasurementValues+0x40e>
 8009344:	4b0a      	ldr	r3, [pc, #40]	@ (8009370 <SGP_GetMeasurementValues+0x41c>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800934c:	4a09      	ldr	r2, [pc, #36]	@ (8009374 <SGP_GetMeasurementValues+0x420>)
 800934e:	4b0a      	ldr	r3, [pc, #40]	@ (8009378 <SGP_GetMeasurementValues+0x424>)
 8009350:	0019      	movs	r1, r3
 8009352:	2003      	movs	r0, #3
 8009354:	f002 f98c 	bl	800b670 <CreateLine>
    SGP_StartMeasurement();
 8009358:	f7ff fd8c 	bl	8008e74 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800935c:	4b07      	ldr	r3, [pc, #28]	@ (800937c <SGP_GetMeasurementValues+0x428>)
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8009362:	2300      	movs	r3, #0
}
 8009364:	0018      	movs	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	b004      	add	sp, #16
 800936a:	bdb0      	pop	{r4, r5, r7, pc}
 800936c:	200011ce 	.word	0x200011ce
 8009370:	200011cf 	.word	0x200011cf
 8009374:	08020174 	.word	0x08020174
 8009378:	08020088 	.word	0x08020088
 800937c:	20001279 	.word	0x20001279

08009380 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8009386:	4b1a      	ldr	r3, [pc, #104]	@ (80093f0 <SGP_DeviceConnected+0x70>)
 8009388:	2202      	movs	r2, #2
 800938a:	0019      	movs	r1, r3
 800938c:	2059      	movs	r0, #89	@ 0x59
 800938e:	f7ff fd39 	bl	8008e04 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8009392:	2001      	movs	r0, #1
 8009394:	f002 fd18 	bl	800bdc8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8009398:	4b16      	ldr	r3, [pc, #88]	@ (80093f4 <SGP_DeviceConnected+0x74>)
 800939a:	2209      	movs	r2, #9
 800939c:	0019      	movs	r1, r3
 800939e:	2059      	movs	r0, #89	@ 0x59
 80093a0:	f7ff fd12 	bl	8008dc8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80093a4:	1dfb      	adds	r3, r7, #7
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e011      	b.n	80093d0 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80093ac:	1dfb      	adds	r3, r7, #7
 80093ae:	7818      	ldrb	r0, [r3, #0]
 80093b0:	1dfb      	adds	r3, r7, #7
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	4a0f      	ldr	r2, [pc, #60]	@ (80093f4 <SGP_DeviceConnected+0x74>)
 80093b6:	5cd3      	ldrb	r3, [r2, r3]
 80093b8:	4a0f      	ldr	r2, [pc, #60]	@ (80093f8 <SGP_DeviceConnected+0x78>)
 80093ba:	4910      	ldr	r1, [pc, #64]	@ (80093fc <SGP_DeviceConnected+0x7c>)
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	0003      	movs	r3, r0
 80093c0:	2002      	movs	r0, #2
 80093c2:	f002 f955 	bl	800b670 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80093c6:	1dfb      	adds	r3, r7, #7
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	1dfb      	adds	r3, r7, #7
 80093cc:	3201      	adds	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]
 80093d0:	1dfb      	adds	r3, r7, #7
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d9e9      	bls.n	80093ac <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80093d8:	4b06      	ldr	r3, [pc, #24]	@ (80093f4 <SGP_DeviceConnected+0x74>)
 80093da:	2203      	movs	r2, #3
 80093dc:	2109      	movs	r1, #9
 80093de:	0018      	movs	r0, r3
 80093e0:	f000 f80e 	bl	8009400 <CheckCRC>
 80093e4:	0003      	movs	r3, r0
}
 80093e6:	0018      	movs	r0, r3
 80093e8:	46bd      	mov	sp, r7
 80093ea:	b002      	add	sp, #8
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	46c0      	nop			@ (mov r8, r8)
 80093f0:	20000084 	.word	0x20000084
 80093f4:	200011c4 	.word	0x200011c4
 80093f8:	08020194 	.word	0x08020194
 80093fc:	08020104 	.word	0x08020104

08009400 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8009400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009402:	b08f      	sub	sp, #60	@ 0x3c
 8009404:	af00      	add	r7, sp, #0
 8009406:	6278      	str	r0, [r7, #36]	@ 0x24
 8009408:	0008      	movs	r0, r1
 800940a:	0011      	movs	r1, r2
 800940c:	2323      	movs	r3, #35	@ 0x23
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	1c02      	adds	r2, r0, #0
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	2322      	movs	r3, #34	@ 0x22
 8009416:	18fb      	adds	r3, r7, r3
 8009418:	1c0a      	adds	r2, r1, #0
 800941a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800941c:	2317      	movs	r3, #23
 800941e:	2220      	movs	r2, #32
 8009420:	189b      	adds	r3, r3, r2
 8009422:	19db      	adds	r3, r3, r7
 8009424:	2200      	movs	r2, #0
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	e09f      	b.n	800956a <CheckCRC+0x16a>
 800942a:	466b      	mov	r3, sp
 800942c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800942e:	2322      	movs	r3, #34	@ 0x22
 8009430:	18fb      	adds	r3, r7, r3
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	001a      	movs	r2, r3
 8009436:	3a01      	subs	r2, #1
 8009438:	633a      	str	r2, [r7, #48]	@ 0x30
 800943a:	60bb      	str	r3, [r7, #8]
 800943c:	2200      	movs	r2, #0
 800943e:	60fa      	str	r2, [r7, #12]
 8009440:	68b8      	ldr	r0, [r7, #8]
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	0002      	movs	r2, r0
 8009446:	0f52      	lsrs	r2, r2, #29
 8009448:	000c      	movs	r4, r1
 800944a:	00e4      	lsls	r4, r4, #3
 800944c:	61fc      	str	r4, [r7, #28]
 800944e:	69fc      	ldr	r4, [r7, #28]
 8009450:	4314      	orrs	r4, r2
 8009452:	61fc      	str	r4, [r7, #28]
 8009454:	0002      	movs	r2, r0
 8009456:	00d2      	lsls	r2, r2, #3
 8009458:	61ba      	str	r2, [r7, #24]
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	2200      	movs	r2, #0
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	6838      	ldr	r0, [r7, #0]
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	0002      	movs	r2, r0
 8009466:	0f52      	lsrs	r2, r2, #29
 8009468:	000c      	movs	r4, r1
 800946a:	00e4      	lsls	r4, r4, #3
 800946c:	617c      	str	r4, [r7, #20]
 800946e:	697c      	ldr	r4, [r7, #20]
 8009470:	4314      	orrs	r4, r2
 8009472:	617c      	str	r4, [r7, #20]
 8009474:	0002      	movs	r2, r0
 8009476:	00d2      	lsls	r2, r2, #3
 8009478:	613a      	str	r2, [r7, #16]
 800947a:	3307      	adds	r3, #7
 800947c:	08db      	lsrs	r3, r3, #3
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	466a      	mov	r2, sp
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	469d      	mov	sp, r3
 8009486:	466b      	mov	r3, sp
 8009488:	3300      	adds	r3, #0
 800948a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800948c:	2316      	movs	r3, #22
 800948e:	2220      	movs	r2, #32
 8009490:	189b      	adds	r3, r3, r2
 8009492:	19db      	adds	r3, r3, r7
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	e01e      	b.n	80094d8 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800949a:	2317      	movs	r3, #23
 800949c:	2220      	movs	r2, #32
 800949e:	189b      	adds	r3, r3, r2
 80094a0:	19db      	adds	r3, r3, r7
 80094a2:	781a      	ldrb	r2, [r3, #0]
 80094a4:	2116      	movs	r1, #22
 80094a6:	2320      	movs	r3, #32
 80094a8:	18cb      	adds	r3, r1, r3
 80094aa:	19db      	adds	r3, r3, r7
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	18d3      	adds	r3, r2, r3
 80094b0:	001a      	movs	r2, r3
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	189a      	adds	r2, r3, r2
 80094b6:	0008      	movs	r0, r1
 80094b8:	2320      	movs	r3, #32
 80094ba:	18cb      	adds	r3, r1, r3
 80094bc:	19db      	adds	r3, r3, r7
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	7811      	ldrb	r1, [r2, #0]
 80094c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094c4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80094c6:	2320      	movs	r3, #32
 80094c8:	18c3      	adds	r3, r0, r3
 80094ca:	19db      	adds	r3, r3, r7
 80094cc:	781a      	ldrb	r2, [r3, #0]
 80094ce:	2320      	movs	r3, #32
 80094d0:	18c3      	adds	r3, r0, r3
 80094d2:	19db      	adds	r3, r3, r7
 80094d4:	3201      	adds	r2, #1
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	2316      	movs	r3, #22
 80094da:	2220      	movs	r2, #32
 80094dc:	189b      	adds	r3, r3, r2
 80094de:	19da      	adds	r2, r3, r7
 80094e0:	2322      	movs	r3, #34	@ 0x22
 80094e2:	18fb      	adds	r3, r7, r3
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d3d6      	bcc.n	800949a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80094ec:	2417      	movs	r4, #23
 80094ee:	2320      	movs	r3, #32
 80094f0:	18e3      	adds	r3, r4, r3
 80094f2:	19db      	adds	r3, r3, r7
 80094f4:	781a      	ldrb	r2, [r3, #0]
 80094f6:	2322      	movs	r3, #34	@ 0x22
 80094f8:	18fb      	adds	r3, r7, r3
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	18d3      	adds	r3, r2, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009502:	18d2      	adds	r2, r2, r3
 8009504:	250b      	movs	r5, #11
 8009506:	2320      	movs	r3, #32
 8009508:	18eb      	adds	r3, r5, r3
 800950a:	19db      	adds	r3, r3, r7
 800950c:	7812      	ldrb	r2, [r2, #0]
 800950e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8009510:	2322      	movs	r3, #34	@ 0x22
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	3b01      	subs	r3, #1
 8009518:	b2da      	uxtb	r2, r3
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	0011      	movs	r1, r2
 800951e:	0018      	movs	r0, r3
 8009520:	f000 f838 	bl	8009594 <CalculateCRC>
 8009524:	0003      	movs	r3, r0
 8009526:	001a      	movs	r2, r3
 8009528:	2320      	movs	r3, #32
 800952a:	18eb      	adds	r3, r5, r3
 800952c:	19db      	adds	r3, r3, r7
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	4293      	cmp	r3, r2
 8009532:	d00c      	beq.n	800954e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8009534:	2320      	movs	r3, #32
 8009536:	18e3      	adds	r3, r4, r3
 8009538:	19db      	adds	r3, r3, r7
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	3301      	adds	r3, #1
 800953e:	4a13      	ldr	r2, [pc, #76]	@ (800958c <CheckCRC+0x18c>)
 8009540:	4913      	ldr	r1, [pc, #76]	@ (8009590 <CheckCRC+0x190>)
 8009542:	2001      	movs	r0, #1
 8009544:	f002 f894 	bl	800b670 <CreateLine>
      return false;
 8009548:	2300      	movs	r3, #0
 800954a:	46b5      	mov	sp, r6
 800954c:	e019      	b.n	8009582 <CheckCRC+0x182>
 800954e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8009550:	2217      	movs	r2, #23
 8009552:	2320      	movs	r3, #32
 8009554:	18d3      	adds	r3, r2, r3
 8009556:	19db      	adds	r3, r3, r7
 8009558:	2120      	movs	r1, #32
 800955a:	1852      	adds	r2, r2, r1
 800955c:	19d1      	adds	r1, r2, r7
 800955e:	2222      	movs	r2, #34	@ 0x22
 8009560:	18ba      	adds	r2, r7, r2
 8009562:	7809      	ldrb	r1, [r1, #0]
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	188a      	adds	r2, r1, r2
 8009568:	701a      	strb	r2, [r3, #0]
 800956a:	2317      	movs	r3, #23
 800956c:	2220      	movs	r2, #32
 800956e:	189b      	adds	r3, r3, r2
 8009570:	19da      	adds	r2, r3, r7
 8009572:	2323      	movs	r3, #35	@ 0x23
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	7812      	ldrb	r2, [r2, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d200      	bcs.n	8009580 <CheckCRC+0x180>
 800957e:	e754      	b.n	800942a <CheckCRC+0x2a>
    }
  }
  return true;
 8009580:	2301      	movs	r3, #1
}
 8009582:	0018      	movs	r0, r3
 8009584:	46bd      	mov	sp, r7
 8009586:	b00f      	add	sp, #60	@ 0x3c
 8009588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958a:	46c0      	nop			@ (mov r8, r8)
 800958c:	080201b4 	.word	0x080201b4
 8009590:	080200e0 	.word	0x080200e0

08009594 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	000a      	movs	r2, r1
 800959e:	1cfb      	adds	r3, r7, #3
 80095a0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80095a2:	230f      	movs	r3, #15
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	22ff      	movs	r2, #255	@ 0xff
 80095a8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80095aa:	230e      	movs	r3, #14
 80095ac:	18fb      	adds	r3, r7, r3
 80095ae:	2200      	movs	r2, #0
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	e037      	b.n	8009624 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80095b4:	230e      	movs	r3, #14
 80095b6:	18fb      	adds	r3, r7, r3
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	18d3      	adds	r3, r2, r3
 80095be:	7819      	ldrb	r1, [r3, #0]
 80095c0:	220f      	movs	r2, #15
 80095c2:	18bb      	adds	r3, r7, r2
 80095c4:	18ba      	adds	r2, r7, r2
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	404a      	eors	r2, r1
 80095ca:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80095cc:	230d      	movs	r3, #13
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	2200      	movs	r2, #0
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	e01b      	b.n	800960e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80095d6:	210f      	movs	r1, #15
 80095d8:	187b      	adds	r3, r7, r1
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	b25b      	sxtb	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da09      	bge.n	80095f6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80095e2:	187b      	adds	r3, r7, r1
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	b25b      	sxtb	r3, r3
 80095ea:	2231      	movs	r2, #49	@ 0x31
 80095ec:	4053      	eors	r3, r2
 80095ee:	b25a      	sxtb	r2, r3
 80095f0:	187b      	adds	r3, r7, r1
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	e005      	b.n	8009602 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80095f6:	230f      	movs	r3, #15
 80095f8:	18fa      	adds	r2, r7, r3
 80095fa:	18fb      	adds	r3, r7, r3
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	18db      	adds	r3, r3, r3
 8009600:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009602:	210d      	movs	r1, #13
 8009604:	187b      	adds	r3, r7, r1
 8009606:	781a      	ldrb	r2, [r3, #0]
 8009608:	187b      	adds	r3, r7, r1
 800960a:	3201      	adds	r2, #1
 800960c:	701a      	strb	r2, [r3, #0]
 800960e:	230d      	movs	r3, #13
 8009610:	18fb      	adds	r3, r7, r3
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b07      	cmp	r3, #7
 8009616:	d9de      	bls.n	80095d6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009618:	210e      	movs	r1, #14
 800961a:	187b      	adds	r3, r7, r1
 800961c:	781a      	ldrb	r2, [r3, #0]
 800961e:	187b      	adds	r3, r7, r1
 8009620:	3201      	adds	r2, #1
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	230e      	movs	r3, #14
 8009626:	18fa      	adds	r2, r7, r3
 8009628:	1cfb      	adds	r3, r7, #3
 800962a:	7812      	ldrb	r2, [r2, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	429a      	cmp	r2, r3
 8009630:	d3c0      	bcc.n	80095b4 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8009632:	230f      	movs	r3, #15
 8009634:	18fb      	adds	r3, r7, r3
 8009636:	781b      	ldrb	r3, [r3, #0]
}
 8009638:	0018      	movs	r0, r3
 800963a:	46bd      	mov	sp, r7
 800963c:	b004      	add	sp, #16
 800963e:	bd80      	pop	{r7, pc}

08009640 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4936      	ldr	r1, [pc, #216]	@ (8009728 <SGP_GetHT+0xe8>)
 8009650:	1c18      	adds	r0, r3, #0
 8009652:	f7f7 f935 	bl	80008c0 <__aeabi_fadd>
 8009656:	1c03      	adds	r3, r0, #0
 8009658:	4934      	ldr	r1, [pc, #208]	@ (800972c <SGP_GetHT+0xec>)
 800965a:	1c18      	adds	r0, r3, #0
 800965c:	f7f7 faba 	bl	8000bd4 <__aeabi_fdiv>
 8009660:	1c03      	adds	r3, r0, #0
 8009662:	4933      	ldr	r1, [pc, #204]	@ (8009730 <SGP_GetHT+0xf0>)
 8009664:	1c18      	adds	r0, r3, #0
 8009666:	f7f7 fc9b 	bl	8000fa0 <__aeabi_fmul>
 800966a:	1c03      	adds	r3, r0, #0
 800966c:	1c18      	adds	r0, r3, #0
 800966e:	f7f6 ffd5 	bl	800061c <__aeabi_f2uiz>
 8009672:	0003      	movs	r3, r0
 8009674:	b29a      	uxth	r2, r3
 8009676:	4b2f      	ldr	r3, [pc, #188]	@ (8009734 <SGP_GetHT+0xf4>)
 8009678:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	492e      	ldr	r1, [pc, #184]	@ (8009738 <SGP_GetHT+0xf8>)
 8009680:	1c18      	adds	r0, r3, #0
 8009682:	f7f7 faa7 	bl	8000bd4 <__aeabi_fdiv>
 8009686:	1c03      	adds	r3, r0, #0
 8009688:	4929      	ldr	r1, [pc, #164]	@ (8009730 <SGP_GetHT+0xf0>)
 800968a:	1c18      	adds	r0, r3, #0
 800968c:	f7f7 fc88 	bl	8000fa0 <__aeabi_fmul>
 8009690:	1c03      	adds	r3, r0, #0
 8009692:	1c18      	adds	r0, r3, #0
 8009694:	f7f6 ffc2 	bl	800061c <__aeabi_f2uiz>
 8009698:	0003      	movs	r3, r0
 800969a:	b29a      	uxth	r2, r3
 800969c:	4b27      	ldr	r3, [pc, #156]	@ (800973c <SGP_GetHT+0xfc>)
 800969e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80096a0:	4b26      	ldr	r3, [pc, #152]	@ (800973c <SGP_GetHT+0xfc>)
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	4b25      	ldr	r3, [pc, #148]	@ (8009740 <SGP_GetHT+0x100>)
 80096ac:	709a      	strb	r2, [r3, #2]
 80096ae:	4b24      	ldr	r3, [pc, #144]	@ (8009740 <SGP_GetHT+0x100>)
 80096b0:	789a      	ldrb	r2, [r3, #2]
 80096b2:	210c      	movs	r1, #12
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 80096b8:	4b20      	ldr	r3, [pc, #128]	@ (800973c <SGP_GetHT+0xfc>)
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b20      	ldr	r3, [pc, #128]	@ (8009740 <SGP_GetHT+0x100>)
 80096c0:	70da      	strb	r2, [r3, #3]
 80096c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009740 <SGP_GetHT+0x100>)
 80096c4:	78da      	ldrb	r2, [r3, #3]
 80096c6:	187b      	adds	r3, r7, r1
 80096c8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80096ca:	187b      	adds	r3, r7, r1
 80096cc:	2102      	movs	r1, #2
 80096ce:	0018      	movs	r0, r3
 80096d0:	f7ff ff60 	bl	8009594 <CalculateCRC>
 80096d4:	0003      	movs	r3, r0
 80096d6:	001a      	movs	r2, r3
 80096d8:	4b19      	ldr	r3, [pc, #100]	@ (8009740 <SGP_GetHT+0x100>)
 80096da:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80096dc:	4b15      	ldr	r3, [pc, #84]	@ (8009734 <SGP_GetHT+0xf4>)
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	0a1b      	lsrs	r3, r3, #8
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	4b16      	ldr	r3, [pc, #88]	@ (8009740 <SGP_GetHT+0x100>)
 80096e8:	715a      	strb	r2, [r3, #5]
 80096ea:	4b15      	ldr	r3, [pc, #84]	@ (8009740 <SGP_GetHT+0x100>)
 80096ec:	795a      	ldrb	r2, [r3, #5]
 80096ee:	2108      	movs	r1, #8
 80096f0:	187b      	adds	r3, r7, r1
 80096f2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80096f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009734 <SGP_GetHT+0xf4>)
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	4b11      	ldr	r3, [pc, #68]	@ (8009740 <SGP_GetHT+0x100>)
 80096fc:	719a      	strb	r2, [r3, #6]
 80096fe:	4b10      	ldr	r3, [pc, #64]	@ (8009740 <SGP_GetHT+0x100>)
 8009700:	799a      	ldrb	r2, [r3, #6]
 8009702:	187b      	adds	r3, r7, r1
 8009704:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8009706:	187b      	adds	r3, r7, r1
 8009708:	2102      	movs	r1, #2
 800970a:	0018      	movs	r0, r3
 800970c:	f7ff ff42 	bl	8009594 <CalculateCRC>
 8009710:	0003      	movs	r3, r0
 8009712:	001a      	movs	r2, r3
 8009714:	4b0a      	ldr	r3, [pc, #40]	@ (8009740 <SGP_GetHT+0x100>)
 8009716:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8009718:	4b0a      	ldr	r3, [pc, #40]	@ (8009744 <SGP_GetHT+0x104>)
 800971a:	2201      	movs	r2, #1
 800971c:	701a      	strb	r2, [r3, #0]
}
 800971e:	46c0      	nop			@ (mov r8, r8)
 8009720:	46bd      	mov	sp, r7
 8009722:	b004      	add	sp, #16
 8009724:	bd80      	pop	{r7, pc}
 8009726:	46c0      	nop			@ (mov r8, r8)
 8009728:	42340000 	.word	0x42340000
 800972c:	432f0000 	.word	0x432f0000
 8009730:	477fff00 	.word	0x477fff00
 8009734:	20001276 	.word	0x20001276
 8009738:	42c80000 	.word	0x42c80000
 800973c:	20001274 	.word	0x20001274
 8009740:	20000090 	.word	0x20000090
 8009744:	20001278 	.word	0x20001278

08009748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	0002      	movs	r2, r0
 8009750:	1dfb      	adds	r3, r7, #7
 8009752:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009754:	1dfb      	adds	r3, r7, #7
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	2b7f      	cmp	r3, #127	@ 0x7f
 800975a:	d809      	bhi.n	8009770 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800975c:	1dfb      	adds	r3, r7, #7
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	001a      	movs	r2, r3
 8009762:	231f      	movs	r3, #31
 8009764:	401a      	ands	r2, r3
 8009766:	4b04      	ldr	r3, [pc, #16]	@ (8009778 <__NVIC_EnableIRQ+0x30>)
 8009768:	2101      	movs	r1, #1
 800976a:	4091      	lsls	r1, r2
 800976c:	000a      	movs	r2, r1
 800976e:	601a      	str	r2, [r3, #0]
  }
}
 8009770:	46c0      	nop			@ (mov r8, r8)
 8009772:	46bd      	mov	sp, r7
 8009774:	b002      	add	sp, #8
 8009776:	bd80      	pop	{r7, pc}
 8009778:	e000e100 	.word	0xe000e100

0800977c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	0002      	movs	r2, r0
 8009784:	1dfb      	adds	r3, r7, #7
 8009786:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009788:	1dfb      	adds	r3, r7, #7
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b7f      	cmp	r3, #127	@ 0x7f
 800978e:	d810      	bhi.n	80097b2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009790:	1dfb      	adds	r3, r7, #7
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	001a      	movs	r2, r3
 8009796:	231f      	movs	r3, #31
 8009798:	4013      	ands	r3, r2
 800979a:	4908      	ldr	r1, [pc, #32]	@ (80097bc <__NVIC_DisableIRQ+0x40>)
 800979c:	2201      	movs	r2, #1
 800979e:	409a      	lsls	r2, r3
 80097a0:	0013      	movs	r3, r2
 80097a2:	2280      	movs	r2, #128	@ 0x80
 80097a4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80097a6:	f3bf 8f4f 	dsb	sy
}
 80097aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80097ac:	f3bf 8f6f 	isb	sy
}
 80097b0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80097b2:	46c0      	nop			@ (mov r8, r8)
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b002      	add	sp, #8
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	46c0      	nop			@ (mov r8, r8)
 80097bc:	e000e100 	.word	0xe000e100

080097c0 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 80097c0:	b5b0      	push	{r4, r5, r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	0008      	movs	r0, r1
 80097ca:	0011      	movs	r1, r2
 80097cc:	1cfb      	adds	r3, r7, #3
 80097ce:	1c02      	adds	r2, r0, #0
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	1cbb      	adds	r3, r7, #2
 80097d4:	1c0a      	adds	r2, r1, #0
 80097d6:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 80097d8:	4b5b      	ldr	r3, [pc, #364]	@ (8009948 <getSoundData+0x188>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2201      	movs	r2, #1
 80097e0:	4053      	eors	r3, r2
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d107      	bne.n	80097f8 <getSoundData+0x38>
 80097e8:	4b58      	ldr	r3, [pc, #352]	@ (800994c <getSoundData+0x18c>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2201      	movs	r2, #1
 80097f0:	4053      	eors	r3, r2
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <getSoundData+0x3c>
    {
        return false;
 80097f8:	2300      	movs	r3, #0
 80097fa:	e0a0      	b.n	800993e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 80097fc:	4b54      	ldr	r3, [pc, #336]	@ (8009950 <getSoundData+0x190>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009806:	4b53      	ldr	r3, [pc, #332]	@ (8009954 <getSoundData+0x194>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	b25b      	sxtb	r3, r3
 800980c:	0018      	movs	r0, r3
 800980e:	f7ff ffb5 	bl	800977c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8009812:	f3bf 8f4f 	dsb	sy
}
 8009816:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8009818:	f3bf 8f6f 	isb	sy
}
 800981c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800981e:	1cfb      	adds	r3, r7, #3
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d04c      	beq.n	80098c0 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8009826:	4b4c      	ldr	r3, [pc, #304]	@ (8009958 <getSoundData+0x198>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d11b      	bne.n	8009866 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800983a:	2300      	movs	r3, #0
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	e00e      	b.n	800985e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	18d3      	adds	r3, r2, r3
 8009846:	3302      	adds	r3, #2
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	18d3      	adds	r3, r2, r3
 8009852:	3308      	adds	r3, #8
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	3301      	adds	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b05      	cmp	r3, #5
 8009862:	d9ed      	bls.n	8009840 <getSoundData+0x80>
 8009864:	e02c      	b.n	80098c0 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	1c59      	adds	r1, r3, #1
 800986c:	4b3b      	ldr	r3, [pc, #236]	@ (800995c <getSoundData+0x19c>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	4b3b      	ldr	r3, [pc, #236]	@ (8009960 <getSoundData+0x1a0>)
 8009872:	681c      	ldr	r4, [r3, #0]
 8009874:	4b38      	ldr	r3, [pc, #224]	@ (8009958 <getSoundData+0x198>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	0023      	movs	r3, r4
 800987c:	f000 fde8 	bl	800a450 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009880:	2300      	movs	r3, #0
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	e019      	b.n	80098ba <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	18d3      	adds	r3, r2, r3
 800988c:	1c98      	adds	r0, r3, #2
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	3308      	adds	r3, #8
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8009896:	4b33      	ldr	r3, [pc, #204]	@ (8009964 <getSoundData+0x1a4>)
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	0092      	lsls	r2, r2, #2
 800989c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800989e:	4b32      	ldr	r3, [pc, #200]	@ (8009968 <getSoundData+0x1a8>)
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	0092      	lsls	r2, r2, #2
 80098a4:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80098a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009958 <getSoundData+0x198>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	0013      	movs	r3, r2
 80098ae:	0022      	movs	r2, r4
 80098b0:	f000 fdce 	bl	800a450 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	3301      	adds	r3, #1
 80098b8:	613b      	str	r3, [r7, #16]
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b05      	cmp	r3, #5
 80098be:	d9e2      	bls.n	8009886 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 80098c0:	1cbb      	adds	r3, r7, #2
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d028      	beq.n	800991a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 80098c8:	240e      	movs	r4, #14
 80098ca:	193b      	adds	r3, r7, r4
 80098cc:	2200      	movs	r2, #0
 80098ce:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 80098d0:	250d      	movs	r5, #13
 80098d2:	197b      	adds	r3, r7, r5
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 80098d8:	4b24      	ldr	r3, [pc, #144]	@ (800996c <getSoundData+0x1ac>)
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	4924      	ldr	r1, [pc, #144]	@ (8009970 <getSoundData+0x1b0>)
 80098de:	197b      	adds	r3, r7, r5
 80098e0:	193a      	adds	r2, r7, r4
 80098e2:	f000 fe59 	bl	800a598 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 80098e6:	193b      	adds	r3, r7, r4
 80098e8:	881a      	ldrh	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	21ff      	movs	r1, #255	@ 0xff
 80098ee:	4011      	ands	r1, r2
 80098f0:	000c      	movs	r4, r1
 80098f2:	7b99      	ldrb	r1, [r3, #14]
 80098f4:	2000      	movs	r0, #0
 80098f6:	4001      	ands	r1, r0
 80098f8:	1c08      	adds	r0, r1, #0
 80098fa:	1c21      	adds	r1, r4, #0
 80098fc:	4301      	orrs	r1, r0
 80098fe:	7399      	strb	r1, [r3, #14]
 8009900:	0a12      	lsrs	r2, r2, #8
 8009902:	b290      	uxth	r0, r2
 8009904:	7bda      	ldrb	r2, [r3, #15]
 8009906:	2100      	movs	r1, #0
 8009908:	400a      	ands	r2, r1
 800990a:	1c11      	adds	r1, r2, #0
 800990c:	1c02      	adds	r2, r0, #0
 800990e:	430a      	orrs	r2, r1
 8009910:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8009912:	197b      	adds	r3, r7, r5
 8009914:	781a      	ldrb	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800991a:	f000 f86f 	bl	80099fc <micSettlingComplete>
 800991e:	0003      	movs	r3, r0
 8009920:	001a      	movs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8009926:	4b0a      	ldr	r3, [pc, #40]	@ (8009950 <getSoundData+0x190>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009930:	4b08      	ldr	r3, [pc, #32]	@ (8009954 <getSoundData+0x194>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	b25b      	sxtb	r3, r3
 8009936:	0018      	movs	r0, r3
 8009938:	f7ff ff06 	bl	8009748 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800993c:	2301      	movs	r3, #1
}
 800993e:	0018      	movs	r0, r3
 8009940:	46bd      	mov	sp, r7
 8009942:	b006      	add	sp, #24
 8009944:	bdb0      	pop	{r4, r5, r7, pc}
 8009946:	46c0      	nop			@ (mov r8, r8)
 8009948:	20001281 	.word	0x20001281
 800994c:	20001284 	.word	0x20001284
 8009950:	20001283 	.word	0x20001283
 8009954:	20001cd4 	.word	0x20001cd4
 8009958:	20001d10 	.word	0x20001d10
 800995c:	20001cd8 	.word	0x20001cd8
 8009960:	20001cdc 	.word	0x20001cdc
 8009964:	20001ce0 	.word	0x20001ce0
 8009968:	20001cf8 	.word	0x20001cf8
 800996c:	2000128c 	.word	0x2000128c
 8009970:	3b5c7333 	.word	0x3b5c7333

08009974 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	001a      	movs	r2, r3
 8009982:	1cfb      	adds	r3, r7, #3
 8009984:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8009986:	4b09      	ldr	r3, [pc, #36]	@ (80099ac <soundInit+0x38>)
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800998c:	4b08      	ldr	r3, [pc, #32]	@ (80099b0 <soundInit+0x3c>)
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8009992:	4b08      	ldr	r3, [pc, #32]	@ (80099b4 <soundInit+0x40>)
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8009998:	4b07      	ldr	r3, [pc, #28]	@ (80099b8 <soundInit+0x44>)
 800999a:	2200      	movs	r2, #0
 800999c:	569a      	ldrsb	r2, [r3, r2]
 800999e:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <soundInit+0x44>)
 80099a0:	701a      	strb	r2, [r3, #0]

    return true;
 80099a2:	2301      	movs	r3, #1
}
 80099a4:	0018      	movs	r0, r3
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b004      	add	sp, #16
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20001ccc 	.word	0x20001ccc
 80099b0:	20001cc8 	.word	0x20001cc8
 80099b4:	20001cd0 	.word	0x20001cd0
 80099b8:	20001cd4 	.word	0x20001cd4

080099bc <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 80099c0:	4b02      	ldr	r3, [pc, #8]	@ (80099cc <clearMaximumAmplitude+0x10>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
}
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	2000128c 	.word	0x2000128c

080099d0 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 80099d4:	4b08      	ldr	r3, [pc, #32]	@ (80099f8 <startMicSettlingPeriod+0x28>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2200      	movs	r2, #0
 80099dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 80099de:	4b06      	ldr	r3, [pc, #24]	@ (80099f8 <startMicSettlingPeriod+0x28>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	0018      	movs	r0, r3
 80099e4:	f009 f984 	bl	8012cf0 <HAL_TIM_Base_Start>
 80099e8:	1e03      	subs	r3, r0, #0
 80099ea:	d001      	beq.n	80099f0 <startMicSettlingPeriod+0x20>
    {
        return false;
 80099ec:	2300      	movs	r3, #0
 80099ee:	e000      	b.n	80099f2 <startMicSettlingPeriod+0x22>
    }
    return true;
 80099f0:	2301      	movs	r3, #1
}
 80099f2:	0018      	movs	r0, r3
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20001cc8 	.word	0x20001cc8

080099fc <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8009a02:	4b0e      	ldr	r3, [pc, #56]	@ (8009a3c <micSettlingComplete+0x40>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	401a      	ands	r2, r3
 8009a0e:	1dfb      	adds	r3, r7, #7
 8009a10:	3a01      	subs	r2, #1
 8009a12:	4251      	negs	r1, r2
 8009a14:	414a      	adcs	r2, r1
 8009a16:	701a      	strb	r2, [r3, #0]
    if (complete)
 8009a18:	1dfb      	adds	r3, r7, #7
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d007      	beq.n	8009a30 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8009a20:	4b06      	ldr	r3, [pc, #24]	@ (8009a3c <micSettlingComplete+0x40>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	0018      	movs	r0, r3
 8009a26:	f009 f9ad 	bl	8012d84 <HAL_TIM_Base_Stop>
      DataReady = true;
 8009a2a:	4b05      	ldr	r3, [pc, #20]	@ (8009a40 <micSettlingComplete+0x44>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8009a30:	1dfb      	adds	r3, r7, #7
 8009a32:	781b      	ldrb	r3, [r3, #0]
}
 8009a34:	0018      	movs	r0, r3
 8009a36:	46bd      	mov	sp, r7
 8009a38:	b002      	add	sp, #8
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20001cc8 	.word	0x20001cc8
 8009a40:	20001280 	.word	0x20001280

08009a44 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	0002      	movs	r2, r0
 8009a4c:	1dfb      	adds	r3, r7, #7
 8009a4e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8009a50:	4b29      	ldr	r3, [pc, #164]	@ (8009af8 <enableMicrophone+0xb4>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	1dfa      	adds	r2, r7, #7
 8009a58:	7812      	ldrb	r2, [r2, #0]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d101      	bne.n	8009a62 <enableMicrophone+0x1e>
    {
        return true;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e045      	b.n	8009aee <enableMicrophone+0xaa>
    }
    if (bEnable)
 8009a62:	1dfb      	adds	r3, r7, #7
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d025      	beq.n	8009ab6 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8009a6a:	f7ff ffb1 	bl	80099d0 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8009a6e:	4b23      	ldr	r3, [pc, #140]	@ (8009afc <enableMicrophone+0xb8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2280      	movs	r2, #128	@ 0x80
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	4922      	ldr	r1, [pc, #136]	@ (8009b00 <enableMicrophone+0xbc>)
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f005 fd19 	bl	800f4b0 <HAL_I2S_Receive_DMA>
 8009a7e:	1e03      	subs	r3, r0, #0
 8009a80:	d001      	beq.n	8009a86 <enableMicrophone+0x42>
        {
            return false;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e033      	b.n	8009aee <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8009a86:	f7ff ff99 	bl	80099bc <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8009a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009b04 <enableMicrophone+0xc0>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009a90:	4b1d      	ldr	r3, [pc, #116]	@ (8009b08 <enableMicrophone+0xc4>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	b25b      	sxtb	r3, r3
 8009a96:	0018      	movs	r0, r3
 8009a98:	f7ff fe56 	bl	8009748 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8009a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009b0c <enableMicrophone+0xc8>)
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8009aa2:	4b15      	ldr	r3, [pc, #84]	@ (8009af8 <enableMicrophone+0xb4>)
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009aa8:	4b19      	ldr	r3, [pc, #100]	@ (8009b10 <enableMicrophone+0xcc>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009aae:	4b19      	ldr	r3, [pc, #100]	@ (8009b14 <enableMicrophone+0xd0>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	e01a      	b.n	8009aec <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009ab6:	4b14      	ldr	r3, [pc, #80]	@ (8009b08 <enableMicrophone+0xc4>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	b25b      	sxtb	r3, r3
 8009abc:	0018      	movs	r0, r3
 8009abe:	f7ff fe5d 	bl	800977c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8009ac2:	4b12      	ldr	r3, [pc, #72]	@ (8009b0c <enableMicrophone+0xc8>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009ac8:	4b11      	ldr	r3, [pc, #68]	@ (8009b10 <enableMicrophone+0xcc>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009ace:	4b11      	ldr	r3, [pc, #68]	@ (8009b14 <enableMicrophone+0xd0>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8009ad4:	4b09      	ldr	r3, [pc, #36]	@ (8009afc <enableMicrophone+0xb8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f005 fdab 	bl	800f634 <HAL_I2S_DMAStop>
 8009ade:	1e03      	subs	r3, r0, #0
 8009ae0:	d001      	beq.n	8009ae6 <enableMicrophone+0xa2>
        {
            return false;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e003      	b.n	8009aee <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8009ae6:	4b04      	ldr	r3, [pc, #16]	@ (8009af8 <enableMicrophone+0xb4>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8009aec:	2301      	movs	r3, #1
}
 8009aee:	0018      	movs	r0, r3
 8009af0:	46bd      	mov	sp, r7
 8009af2:	b002      	add	sp, #8
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	46c0      	nop			@ (mov r8, r8)
 8009af8:	20001281 	.word	0x20001281
 8009afc:	20001ccc 	.word	0x20001ccc
 8009b00:	200012c8 	.word	0x200012c8
 8009b04:	20001288 	.word	0x20001288
 8009b08:	20001cd4 	.word	0x20001cd4
 8009b0c:	20001283 	.word	0x20001283
 8009b10:	20001282 	.word	0x20001282
 8009b14:	20001284 	.word	0x20001284

08009b18 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b50 <startSPLcalculation+0x38>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2201      	movs	r2, #1
 8009b24:	4053      	eors	r3, r2
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <startSPLcalculation+0x18>
    {
        return false;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e00c      	b.n	8009b4a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8009b30:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <startSPLcalculation+0x3c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <startSPLcalculation+0x26>
    {
        return true;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e005      	b.n	8009b4a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8009b3e:	f000 fb63 	bl	800a208 <resetSPLstate>
    SPLcalcEnabled = true;
 8009b42:	4b04      	ldr	r3, [pc, #16]	@ (8009b54 <startSPLcalculation+0x3c>)
 8009b44:	2201      	movs	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
    return true;
 8009b48:	2301      	movs	r3, #1
}
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20001281 	.word	0x20001281
 8009b54:	20001282 	.word	0x20001282

08009b58 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009b60:	4b05      	ldr	r3, [pc, #20]	@ (8009b78 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d102      	bne.n	8009b70 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	f000 f81a 	bl	8009ba4 <processHalfDMAbuffer>
  }
}
 8009b70:	46c0      	nop			@ (mov r8, r8)
 8009b72:	46bd      	mov	sp, r7
 8009b74:	b002      	add	sp, #8
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	20001ccc 	.word	0x20001ccc

08009b7c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009b84:	4b06      	ldr	r3, [pc, #24]	@ (8009ba0 <HAL_I2S_RxCpltCallback+0x24>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d104      	bne.n	8009b98 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8009b8e:	2380      	movs	r3, #128	@ 0x80
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	0018      	movs	r0, r3
 8009b94:	f000 f806 	bl	8009ba4 <processHalfDMAbuffer>
  }
}
 8009b98:	46c0      	nop			@ (mov r8, r8)
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	b002      	add	sp, #8
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20001ccc 	.word	0x20001ccc

08009ba4 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	005a      	lsls	r2, r3, #1
 8009bb0:	4b15      	ldr	r3, [pc, #84]	@ (8009c08 <processHalfDMAbuffer+0x64>)
 8009bb2:	18d3      	adds	r3, r2, r3
 8009bb4:	4a15      	ldr	r2, [pc, #84]	@ (8009c0c <processHalfDMAbuffer+0x68>)
 8009bb6:	2180      	movs	r1, #128	@ 0x80
 8009bb8:	0089      	lsls	r1, r1, #2
 8009bba:	0018      	movs	r0, r3
 8009bbc:	f000 fd35 	bl	800a62a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8009bc0:	4b13      	ldr	r3, [pc, #76]	@ (8009c10 <processHalfDMAbuffer+0x6c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	425a      	negs	r2, r3
 8009bc6:	4153      	adcs	r3, r2
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	4b11      	ldr	r3, [pc, #68]	@ (8009c10 <processHalfDMAbuffer+0x6c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2109      	movs	r1, #9
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	419b      	sbcs	r3, r3
 8009bd4:	425b      	negs	r3, r3
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	480c      	ldr	r0, [pc, #48]	@ (8009c0c <processHalfDMAbuffer+0x68>)
 8009bda:	2180      	movs	r1, #128	@ 0x80
 8009bdc:	f000 fb46 	bl	800a26c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8009be0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c10 <processHalfDMAbuffer+0x6c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b09      	cmp	r3, #9
 8009be6:	d804      	bhi.n	8009bf2 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8009be8:	4b09      	ldr	r3, [pc, #36]	@ (8009c10 <processHalfDMAbuffer+0x6c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	4b08      	ldr	r3, [pc, #32]	@ (8009c10 <processHalfDMAbuffer+0x6c>)
 8009bf0:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8009bf2:	4b08      	ldr	r3, [pc, #32]	@ (8009c14 <processHalfDMAbuffer+0x70>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8009bfc:	f000 f826 	bl	8009c4c <calculateSPLQ31>
    }
}
 8009c00:	46c0      	nop			@ (mov r8, r8)
 8009c02:	46bd      	mov	sp, r7
 8009c04:	b002      	add	sp, #8
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	200012c8 	.word	0x200012c8
 8009c0c:	20001ac8 	.word	0x20001ac8
 8009c10:	20001288 	.word	0x20001288
 8009c14:	20001282 	.word	0x20001282

08009c18 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009c20:	4b07      	ldr	r3, [pc, #28]	@ (8009c40 <HAL_I2S_ErrorCallback+0x28>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d106      	bne.n	8009c38 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8009c2a:	4a06      	ldr	r2, [pc, #24]	@ (8009c44 <HAL_I2S_ErrorCallback+0x2c>)
 8009c2c:	239f      	movs	r3, #159	@ 0x9f
 8009c2e:	0059      	lsls	r1, r3, #1
 8009c30:	4b05      	ldr	r3, [pc, #20]	@ (8009c48 <HAL_I2S_ErrorCallback+0x30>)
 8009c32:	0018      	movs	r0, r3
 8009c34:	f001 fdc8 	bl	800b7c8 <errorHandler>
  }
}
 8009c38:	46c0      	nop			@ (mov r8, r8)
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	b002      	add	sp, #8
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20001ccc 	.word	0x20001ccc
 8009c44:	0802025c 	.word	0x0802025c
 8009c48:	08020868 	.word	0x08020868

08009c4c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	b0b3      	sub	sp, #204	@ 0xcc
 8009c50:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8009c52:	4ae2      	ldr	r2, [pc, #904]	@ (8009fdc <calculateSPLQ31+0x390>)
 8009c54:	2338      	movs	r3, #56	@ 0x38
 8009c56:	2030      	movs	r0, #48	@ 0x30
 8009c58:	181b      	adds	r3, r3, r0
 8009c5a:	19d9      	adds	r1, r3, r7
 8009c5c:	2334      	movs	r3, #52	@ 0x34
 8009c5e:	181b      	adds	r3, r3, r0
 8009c60:	19d8      	adds	r0, r3, r7
 8009c62:	2380      	movs	r3, #128	@ 0x80
 8009c64:	f000 fc36 	bl	800a4d4 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8009c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	da00      	bge.n	8009c70 <calculateSPLQ31+0x24>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	105b      	asrs	r3, r3, #1
 8009c72:	001a      	movs	r2, r3
 8009c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da00      	bge.n	8009c7c <calculateSPLQ31+0x30>
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	105b      	asrs	r3, r3, #1
 8009c7e:	18d3      	adds	r3, r2, r3
 8009c80:	2188      	movs	r1, #136	@ 0x88
 8009c82:	187a      	adds	r2, r7, r1
 8009c84:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8009c86:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c88:	187b      	adds	r3, r7, r1
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	3304      	adds	r3, #4
 8009c90:	2284      	movs	r2, #132	@ 0x84
 8009c92:	18b9      	adds	r1, r7, r2
 8009c94:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8009c96:	18bb      	adds	r3, r7, r2
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4ad1      	ldr	r2, [pc, #836]	@ (8009fe0 <calculateSPLQ31+0x394>)
 8009c9c:	0019      	movs	r1, r3
 8009c9e:	0010      	movs	r0, r2
 8009ca0:	f000 fc58 	bl	800a554 <getPo2factor>
 8009ca4:	0003      	movs	r3, r0
 8009ca6:	2280      	movs	r2, #128	@ 0x80
 8009ca8:	18ba      	adds	r2, r7, r2
 8009caa:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	2284      	movs	r2, #132	@ 0x84
 8009cb0:	2130      	movs	r1, #48	@ 0x30
 8009cb2:	1852      	adds	r2, r2, r1
 8009cb4:	19d2      	adds	r2, r2, r7
 8009cb6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2280      	movs	r2, #128	@ 0x80
 8009cbc:	1852      	adds	r2, r2, r1
 8009cbe:	19d2      	adds	r2, r2, r7
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	e032      	b.n	8009d2a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8009cc4:	4ac5      	ldr	r2, [pc, #788]	@ (8009fdc <calculateSPLQ31+0x390>)
 8009cc6:	2680      	movs	r6, #128	@ 0x80
 8009cc8:	2330      	movs	r3, #48	@ 0x30
 8009cca:	18f1      	adds	r1, r6, r3
 8009ccc:	19cb      	adds	r3, r1, r7
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	589a      	ldr	r2, [r3, r2]
 8009cd4:	2188      	movs	r1, #136	@ 0x88
 8009cd6:	1879      	adds	r1, r7, r1
 8009cd8:	680b      	ldr	r3, [r1, #0]
 8009cda:	1ad2      	subs	r2, r2, r3
 8009cdc:	2180      	movs	r1, #128	@ 0x80
 8009cde:	1879      	adds	r1, r7, r1
 8009ce0:	680b      	ldr	r3, [r1, #0]
 8009ce2:	409a      	lsls	r2, r3
 8009ce4:	0011      	movs	r1, r2
 8009ce6:	4abf      	ldr	r2, [pc, #764]	@ (8009fe4 <calculateSPLQ31+0x398>)
 8009ce8:	2084      	movs	r0, #132	@ 0x84
 8009cea:	2330      	movs	r3, #48	@ 0x30
 8009cec:	18c3      	adds	r3, r0, r3
 8009cee:	19db      	adds	r3, r3, r7
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8009cf6:	2230      	movs	r2, #48	@ 0x30
 8009cf8:	1883      	adds	r3, r0, r2
 8009cfa:	19db      	adds	r3, r3, r7
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	49b8      	ldr	r1, [pc, #736]	@ (8009fe4 <calculateSPLQ31+0x398>)
 8009d02:	009a      	lsls	r2, r3, #2
 8009d04:	2300      	movs	r3, #0
 8009d06:	5053      	str	r3, [r2, r1]
        count += 2;
 8009d08:	2230      	movs	r2, #48	@ 0x30
 8009d0a:	1883      	adds	r3, r0, r2
 8009d0c:	19db      	adds	r3, r3, r7
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3302      	adds	r3, #2
 8009d12:	0011      	movs	r1, r2
 8009d14:	1882      	adds	r2, r0, r2
 8009d16:	19d2      	adds	r2, r2, r7
 8009d18:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009d1a:	000a      	movs	r2, r1
 8009d1c:	18b3      	adds	r3, r6, r2
 8009d1e:	19db      	adds	r3, r3, r7
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	18b2      	adds	r2, r6, r2
 8009d26:	19d2      	adds	r2, r2, r7
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	2380      	movs	r3, #128	@ 0x80
 8009d2c:	2630      	movs	r6, #48	@ 0x30
 8009d2e:	199b      	adds	r3, r3, r6
 8009d30:	19db      	adds	r3, r3, r7
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d36:	d9c5      	bls.n	8009cc4 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8009d38:	4bab      	ldr	r3, [pc, #684]	@ (8009fe8 <calculateSPLQ31+0x39c>)
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	49a9      	ldr	r1, [pc, #676]	@ (8009fe4 <calculateSPLQ31+0x398>)
 8009d3e:	2301      	movs	r3, #1
 8009d40:	2200      	movs	r2, #0
 8009d42:	f010 f89b 	bl	8019e7c <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8009d46:	4aa9      	ldr	r2, [pc, #676]	@ (8009fec <calculateSPLQ31+0x3a0>)
 8009d48:	2338      	movs	r3, #56	@ 0x38
 8009d4a:	199b      	adds	r3, r3, r6
 8009d4c:	19d9      	adds	r1, r3, r7
 8009d4e:	2334      	movs	r3, #52	@ 0x34
 8009d50:	199b      	adds	r3, r3, r6
 8009d52:	19d8      	adds	r0, r3, r7
 8009d54:	237e      	movs	r3, #126	@ 0x7e
 8009d56:	f000 fbbd 	bl	800a4d4 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8009d5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d5c:	2380      	movs	r3, #128	@ 0x80
 8009d5e:	061b      	lsls	r3, r3, #24
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d101      	bne.n	8009d68 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8009d64:	4b9e      	ldr	r3, [pc, #632]	@ (8009fe0 <calculateSPLQ31+0x394>)
 8009d66:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8009d68:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d6a:	2380      	movs	r3, #128	@ 0x80
 8009d6c:	061b      	lsls	r3, r3, #24
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d101      	bne.n	8009d76 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8009d72:	4b9b      	ldr	r3, [pc, #620]	@ (8009fe0 <calculateSPLQ31+0x394>)
 8009d74:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8009d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d78:	17da      	asrs	r2, r3, #31
 8009d7a:	189b      	adds	r3, r3, r2
 8009d7c:	4053      	eors	r3, r2
 8009d7e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8009d80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d82:	17da      	asrs	r2, r3, #31
 8009d84:	189b      	adds	r3, r3, r2
 8009d86:	4053      	eors	r3, r2
 8009d88:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8009d8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	dd01      	ble.n	8009d96 <calculateSPLQ31+0x14a>
    {
        max = min;
 8009d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d94:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8009d96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d98:	3304      	adds	r3, #4
 8009d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8009d9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d9e:	4a90      	ldr	r2, [pc, #576]	@ (8009fe0 <calculateSPLQ31+0x394>)
 8009da0:	0019      	movs	r1, r3
 8009da2:	0010      	movs	r0, r2
 8009da4:	f000 fbd6 	bl	800a554 <getPo2factor>
 8009da8:	0003      	movs	r3, r0
 8009daa:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8009dac:	2302      	movs	r3, #2
 8009dae:	22ac      	movs	r2, #172	@ 0xac
 8009db0:	18ba      	adds	r2, r7, r2
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	e012      	b.n	8009ddc <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8009db6:	4a8b      	ldr	r2, [pc, #556]	@ (8009fe4 <calculateSPLQ31+0x398>)
 8009db8:	20ac      	movs	r0, #172	@ 0xac
 8009dba:	183b      	adds	r3, r7, r0
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	589a      	ldr	r2, [r3, r2]
 8009dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dc4:	409a      	lsls	r2, r3
 8009dc6:	0011      	movs	r1, r2
 8009dc8:	4a86      	ldr	r2, [pc, #536]	@ (8009fe4 <calculateSPLQ31+0x398>)
 8009dca:	183b      	adds	r3, r7, r0
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8009dd2:	183b      	adds	r3, r7, r0
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	183a      	adds	r2, r7, r0
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	23ac      	movs	r3, #172	@ 0xac
 8009dde:	18fb      	adds	r3, r7, r3
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009de4:	d9e7      	bls.n	8009db6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8009de6:	4b7d      	ldr	r3, [pc, #500]	@ (8009fdc <calculateSPLQ31+0x390>)
 8009de8:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8009dea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009dec:	4b7d      	ldr	r3, [pc, #500]	@ (8009fe4 <calculateSPLQ31+0x398>)
 8009dee:	2240      	movs	r2, #64	@ 0x40
 8009df0:	0018      	movs	r0, r3
 8009df2:	f010 fded 	bl	801a9d0 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8009df6:	2330      	movs	r3, #48	@ 0x30
 8009df8:	18fb      	adds	r3, r7, r3
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	2330      	movs	r3, #48	@ 0x30
 8009dfe:	001a      	movs	r2, r3
 8009e00:	2100      	movs	r1, #0
 8009e02:	f012 fb09 	bl	801c418 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	21a0      	movs	r1, #160	@ 0xa0
 8009e0c:	1879      	adds	r1, r7, r1
 8009e0e:	600a      	str	r2, [r1, #0]
 8009e10:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009e12:	2301      	movs	r3, #1
 8009e14:	229c      	movs	r2, #156	@ 0x9c
 8009e16:	18ba      	adds	r2, r7, r2
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	e05b      	b.n	8009ed4 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8009e1c:	269c      	movs	r6, #156	@ 0x9c
 8009e1e:	19bb      	adds	r3, r7, r6
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	009a      	lsls	r2, r3, #2
 8009e24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e26:	189b      	adds	r3, r3, r2
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	613b      	str	r3, [r7, #16]
 8009e2c:	17db      	asrs	r3, r3, #31
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	4b6f      	ldr	r3, [pc, #444]	@ (8009ff0 <calculateSPLQ31+0x3a4>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	19bb      	adds	r3, r7, r6
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	18d3      	adds	r3, r2, r3
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	60bb      	str	r3, [r7, #8]
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6938      	ldr	r0, [r7, #16]
 8009e4a:	6979      	ldr	r1, [r7, #20]
 8009e4c:	f7f6 fbb8 	bl	80005c0 <__aeabi_lmul>
 8009e50:	0002      	movs	r2, r0
 8009e52:	000b      	movs	r3, r1
 8009e54:	0010      	movs	r0, r2
 8009e56:	0019      	movs	r1, r3
 8009e58:	23a0      	movs	r3, #160	@ 0xa0
 8009e5a:	18fa      	adds	r2, r7, r3
 8009e5c:	6853      	ldr	r3, [r2, #4]
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	1812      	adds	r2, r2, r0
 8009e62:	414b      	adcs	r3, r1
 8009e64:	21a0      	movs	r1, #160	@ 0xa0
 8009e66:	1879      	adds	r1, r7, r1
 8009e68:	600a      	str	r2, [r1, #0]
 8009e6a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8009e6c:	4b61      	ldr	r3, [pc, #388]	@ (8009ff4 <calculateSPLQ31+0x3a8>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	19bb      	adds	r3, r7, r6
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	18d3      	adds	r3, r2, r3
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b06      	cmp	r3, #6
 8009e7a:	d025      	beq.n	8009ec8 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8009e7c:	4b5d      	ldr	r3, [pc, #372]	@ (8009ff4 <calculateSPLQ31+0x3a8>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	19bb      	adds	r3, r7, r6
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	18d3      	adds	r3, r2, r3
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2230      	movs	r2, #48	@ 0x30
 8009e8a:	18ba      	adds	r2, r7, r2
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	18d3      	adds	r3, r2, r3
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	6859      	ldr	r1, [r3, #4]
 8009e94:	19bb      	adds	r3, r7, r6
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	009a      	lsls	r2, r3, #2
 8009e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e9c:	189b      	adds	r3, r3, r2
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	17db      	asrs	r3, r3, #31
 8009ea4:	607b      	str	r3, [r7, #4]
 8009ea6:	4b53      	ldr	r3, [pc, #332]	@ (8009ff4 <calculateSPLQ31+0x3a8>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	19be      	adds	r6, r7, r6
 8009eac:	6833      	ldr	r3, [r6, #0]
 8009eae:	18d3      	adds	r3, r2, r3
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	001e      	movs	r6, r3
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	1880      	adds	r0, r0, r2
 8009eba:	4159      	adcs	r1, r3
 8009ebc:	2330      	movs	r3, #48	@ 0x30
 8009ebe:	18fa      	adds	r2, r7, r3
 8009ec0:	00f3      	lsls	r3, r6, #3
 8009ec2:	18d3      	adds	r3, r2, r3
 8009ec4:	6018      	str	r0, [r3, #0]
 8009ec6:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009ec8:	229c      	movs	r2, #156	@ 0x9c
 8009eca:	18bb      	adds	r3, r7, r2
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	18ba      	adds	r2, r7, r2
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	239c      	movs	r3, #156	@ 0x9c
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b3f      	cmp	r3, #63	@ 0x3f
 8009edc:	d99e      	bls.n	8009e1c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8009ede:	2380      	movs	r3, #128	@ 0x80
 8009ee0:	18fb      	adds	r3, r7, r3
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	001a      	movs	r2, r3
 8009ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	18d3      	adds	r3, r2, r3
 8009eee:	3b22      	subs	r3, #34	@ 0x22
 8009ef0:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8009ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ef4:	17da      	asrs	r2, r3, #31
 8009ef6:	189b      	adds	r3, r3, r2
 8009ef8:	4053      	eors	r3, r2
 8009efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8009efc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	da62      	bge.n	8009fc8 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8009f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f04:	3b20      	subs	r3, #32
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	db05      	blt.n	8009f16 <calculateSPLQ31+0x2ca>
 8009f0a:	22a0      	movs	r2, #160	@ 0xa0
 8009f0c:	18ba      	adds	r2, r7, r2
 8009f0e:	6812      	ldr	r2, [r2, #0]
 8009f10:	409a      	lsls	r2, r3
 8009f12:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f14:	e010      	b.n	8009f38 <calculateSPLQ31+0x2ec>
 8009f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f18:	2220      	movs	r2, #32
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	22a0      	movs	r2, #160	@ 0xa0
 8009f1e:	18ba      	adds	r2, r7, r2
 8009f20:	6812      	ldr	r2, [r2, #0]
 8009f22:	40da      	lsrs	r2, r3
 8009f24:	0013      	movs	r3, r2
 8009f26:	22a4      	movs	r2, #164	@ 0xa4
 8009f28:	18ba      	adds	r2, r7, r2
 8009f2a:	6811      	ldr	r1, [r2, #0]
 8009f2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f2e:	4091      	lsls	r1, r2
 8009f30:	6279      	str	r1, [r7, #36]	@ 0x24
 8009f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f34:	431a      	orrs	r2, r3
 8009f36:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f38:	21a0      	movs	r1, #160	@ 0xa0
 8009f3a:	187b      	adds	r3, r7, r1
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f40:	409a      	lsls	r2, r3
 8009f42:	623a      	str	r2, [r7, #32]
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8009f48:	187a      	adds	r2, r7, r1
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2298      	movs	r2, #152	@ 0x98
 8009f52:	18ba      	adds	r2, r7, r2
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	e031      	b.n	8009fbc <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8009f58:	2330      	movs	r3, #48	@ 0x30
 8009f5a:	18fa      	adds	r2, r7, r3
 8009f5c:	2398      	movs	r3, #152	@ 0x98
 8009f5e:	18fb      	adds	r3, r7, r3
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	18d3      	adds	r3, r2, r3
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009f6c:	3920      	subs	r1, #32
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	db03      	blt.n	8009f7a <calculateSPLQ31+0x32e>
 8009f72:	0010      	movs	r0, r2
 8009f74:	4088      	lsls	r0, r1
 8009f76:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009f78:	e00c      	b.n	8009f94 <calculateSPLQ31+0x348>
 8009f7a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009f7c:	2020      	movs	r0, #32
 8009f7e:	1a41      	subs	r1, r0, r1
 8009f80:	0010      	movs	r0, r2
 8009f82:	40c8      	lsrs	r0, r1
 8009f84:	0001      	movs	r1, r0
 8009f86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f88:	001c      	movs	r4, r3
 8009f8a:	4084      	lsls	r4, r0
 8009f8c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8009f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f90:	4308      	orrs	r0, r1
 8009f92:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009f94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009f96:	0013      	movs	r3, r2
 8009f98:	408b      	lsls	r3, r1
 8009f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f9c:	2330      	movs	r3, #48	@ 0x30
 8009f9e:	18fa      	adds	r2, r7, r3
 8009fa0:	2098      	movs	r0, #152	@ 0x98
 8009fa2:	183b      	adds	r3, r7, r0
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	18d3      	adds	r3, r2, r3
 8009faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fae:	6019      	str	r1, [r3, #0]
 8009fb0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009fb2:	183b      	adds	r3, r7, r0
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	183a      	adds	r2, r7, r0
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	2398      	movs	r3, #152	@ 0x98
 8009fbe:	18fb      	adds	r3, r7, r3
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	d9c8      	bls.n	8009f58 <calculateSPLQ31+0x30c>
 8009fc6:	e06b      	b.n	800a0a0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8009fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fca:	3b20      	subs	r3, #32
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	db13      	blt.n	8009ff8 <calculateSPLQ31+0x3ac>
 8009fd0:	22a4      	movs	r2, #164	@ 0xa4
 8009fd2:	18ba      	adds	r2, r7, r2
 8009fd4:	6812      	ldr	r2, [r2, #0]
 8009fd6:	40da      	lsrs	r2, r3
 8009fd8:	61ba      	str	r2, [r7, #24]
 8009fda:	e01e      	b.n	800a01a <calculateSPLQ31+0x3ce>
 8009fdc:	20001ac8 	.word	0x20001ac8
 8009fe0:	7fffffff 	.word	0x7fffffff
 8009fe4:	20001d14 	.word	0x20001d14
 8009fe8:	200000ac 	.word	0x200000ac
 8009fec:	20001d1c 	.word	0x20001d1c
 8009ff0:	200000b0 	.word	0x200000b0
 8009ff4:	200000bc 	.word	0x200000bc
 8009ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	22a4      	movs	r2, #164	@ 0xa4
 800a000:	18ba      	adds	r2, r7, r2
 800a002:	6812      	ldr	r2, [r2, #0]
 800a004:	409a      	lsls	r2, r3
 800a006:	0013      	movs	r3, r2
 800a008:	22a0      	movs	r2, #160	@ 0xa0
 800a00a:	18ba      	adds	r2, r7, r2
 800a00c:	6811      	ldr	r1, [r2, #0]
 800a00e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a010:	40d1      	lsrs	r1, r2
 800a012:	61b9      	str	r1, [r7, #24]
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	431a      	orrs	r2, r3
 800a018:	61ba      	str	r2, [r7, #24]
 800a01a:	23a4      	movs	r3, #164	@ 0xa4
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a022:	40da      	lsrs	r2, r3
 800a024:	61fa      	str	r2, [r7, #28]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	21a0      	movs	r1, #160	@ 0xa0
 800a02c:	1879      	adds	r1, r7, r1
 800a02e:	600a      	str	r2, [r1, #0]
 800a030:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a032:	2300      	movs	r3, #0
 800a034:	2294      	movs	r2, #148	@ 0x94
 800a036:	18ba      	adds	r2, r7, r2
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	e02c      	b.n	800a096 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800a03c:	2330      	movs	r3, #48	@ 0x30
 800a03e:	18fa      	adds	r2, r7, r3
 800a040:	2394      	movs	r3, #148	@ 0x94
 800a042:	18fb      	adds	r3, r7, r3
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	18d3      	adds	r3, r2, r3
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a050:	3920      	subs	r1, #32
 800a052:	2900      	cmp	r1, #0
 800a054:	db03      	blt.n	800a05e <calculateSPLQ31+0x412>
 800a056:	0018      	movs	r0, r3
 800a058:	40c8      	lsrs	r0, r1
 800a05a:	0004      	movs	r4, r0
 800a05c:	e00a      	b.n	800a074 <calculateSPLQ31+0x428>
 800a05e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a060:	2020      	movs	r0, #32
 800a062:	1a41      	subs	r1, r0, r1
 800a064:	0018      	movs	r0, r3
 800a066:	4088      	lsls	r0, r1
 800a068:	0001      	movs	r1, r0
 800a06a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a06c:	0016      	movs	r6, r2
 800a06e:	40c6      	lsrs	r6, r0
 800a070:	0034      	movs	r4, r6
 800a072:	430c      	orrs	r4, r1
 800a074:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a076:	40cb      	lsrs	r3, r1
 800a078:	001d      	movs	r5, r3
 800a07a:	2330      	movs	r3, #48	@ 0x30
 800a07c:	18fa      	adds	r2, r7, r3
 800a07e:	2194      	movs	r1, #148	@ 0x94
 800a080:	187b      	adds	r3, r7, r1
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	18d3      	adds	r3, r2, r3
 800a088:	601c      	str	r4, [r3, #0]
 800a08a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a08c:	187b      	adds	r3, r7, r1
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3301      	adds	r3, #1
 800a092:	187a      	adds	r2, r7, r1
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	2394      	movs	r3, #148	@ 0x94
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	d9cd      	bls.n	800a03c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800a0a0:	230f      	movs	r3, #15
 800a0a2:	425d      	negs	r5, r3
 800a0a4:	2305      	movs	r3, #5
 800a0a6:	425e      	negs	r6, r3
 800a0a8:	4b4a      	ldr	r3, [pc, #296]	@ (800a1d4 <calculateSPLQ31+0x588>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	4b4a      	ldr	r3, [pc, #296]	@ (800a1d8 <calculateSPLQ31+0x58c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	21a0      	movs	r1, #160	@ 0xa0
 800a0b6:	1879      	adds	r1, r7, r1
 800a0b8:	6808      	ldr	r0, [r1, #0]
 800a0ba:	6849      	ldr	r1, [r1, #4]
 800a0bc:	4c47      	ldr	r4, [pc, #284]	@ (800a1dc <calculateSPLQ31+0x590>)
 800a0be:	9403      	str	r4, [sp, #12]
 800a0c0:	4c47      	ldr	r4, [pc, #284]	@ (800a1e0 <calculateSPLQ31+0x594>)
 800a0c2:	9402      	str	r4, [sp, #8]
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	9200      	str	r2, [sp, #0]
 800a0c8:	0033      	movs	r3, r6
 800a0ca:	002a      	movs	r2, r5
 800a0cc:	f000 fa86 	bl	800a5dc <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	2290      	movs	r2, #144	@ 0x90
 800a0d4:	18ba      	adds	r2, r7, r2
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	e026      	b.n	800a128 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a0da:	2330      	movs	r3, #48	@ 0x30
 800a0dc:	18fa      	adds	r2, r7, r3
 800a0de:	2490      	movs	r4, #144	@ 0x90
 800a0e0:	193b      	adds	r3, r7, r4
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	18d3      	adds	r3, r2, r3
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	6859      	ldr	r1, [r3, #4]
 800a0ec:	230f      	movs	r3, #15
 800a0ee:	425d      	negs	r5, r3
 800a0f0:	2305      	movs	r3, #5
 800a0f2:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800a0f4:	193b      	adds	r3, r7, r4
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	009a      	lsls	r2, r3, #2
 800a0fa:	4b3a      	ldr	r3, [pc, #232]	@ (800a1e4 <calculateSPLQ31+0x598>)
 800a0fc:	18d3      	adds	r3, r2, r3
 800a0fe:	193a      	adds	r2, r7, r4
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	0094      	lsls	r4, r2, #2
 800a104:	4a38      	ldr	r2, [pc, #224]	@ (800a1e8 <calculateSPLQ31+0x59c>)
 800a106:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a108:	9203      	str	r2, [sp, #12]
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	2300      	movs	r3, #0
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	2300      	movs	r3, #0
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	0033      	movs	r3, r6
 800a116:	002a      	movs	r2, r5
 800a118:	f000 fa60 	bl	800a5dc <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a11c:	2490      	movs	r4, #144	@ 0x90
 800a11e:	193b      	adds	r3, r7, r4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3301      	adds	r3, #1
 800a124:	193a      	adds	r2, r7, r4
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	2390      	movs	r3, #144	@ 0x90
 800a12a:	18fb      	adds	r3, r7, r3
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b05      	cmp	r3, #5
 800a130:	d9d3      	bls.n	800a0da <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800a132:	4b2b      	ldr	r3, [pc, #172]	@ (800a1e0 <calculateSPLQ31+0x594>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4b2d      	ldr	r3, [pc, #180]	@ (800a1ec <calculateSPLQ31+0x5a0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	18d2      	adds	r2, r2, r3
 800a13c:	4b2b      	ldr	r3, [pc, #172]	@ (800a1ec <calculateSPLQ31+0x5a0>)
 800a13e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800a140:	4b26      	ldr	r3, [pc, #152]	@ (800a1dc <calculateSPLQ31+0x590>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	4b2a      	ldr	r3, [pc, #168]	@ (800a1f0 <calculateSPLQ31+0x5a4>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	18d2      	adds	r2, r2, r3
 800a14a:	4b29      	ldr	r3, [pc, #164]	@ (800a1f0 <calculateSPLQ31+0x5a4>)
 800a14c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a14e:	2300      	movs	r3, #0
 800a150:	228c      	movs	r2, #140	@ 0x8c
 800a152:	18ba      	adds	r2, r7, r2
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	e025      	b.n	800a1a4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800a158:	4b22      	ldr	r3, [pc, #136]	@ (800a1e4 <calculateSPLQ31+0x598>)
 800a15a:	208c      	movs	r0, #140	@ 0x8c
 800a15c:	183a      	adds	r2, r7, r0
 800a15e:	6812      	ldr	r2, [r2, #0]
 800a160:	0092      	lsls	r2, r2, #2
 800a162:	58d2      	ldr	r2, [r2, r3]
 800a164:	4b23      	ldr	r3, [pc, #140]	@ (800a1f4 <calculateSPLQ31+0x5a8>)
 800a166:	1839      	adds	r1, r7, r0
 800a168:	6809      	ldr	r1, [r1, #0]
 800a16a:	0089      	lsls	r1, r1, #2
 800a16c:	58cb      	ldr	r3, [r1, r3]
 800a16e:	18d1      	adds	r1, r2, r3
 800a170:	4b20      	ldr	r3, [pc, #128]	@ (800a1f4 <calculateSPLQ31+0x5a8>)
 800a172:	183a      	adds	r2, r7, r0
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	0092      	lsls	r2, r2, #2
 800a178:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800a17a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e8 <calculateSPLQ31+0x59c>)
 800a17c:	183a      	adds	r2, r7, r0
 800a17e:	6812      	ldr	r2, [r2, #0]
 800a180:	0092      	lsls	r2, r2, #2
 800a182:	58d2      	ldr	r2, [r2, r3]
 800a184:	4b1c      	ldr	r3, [pc, #112]	@ (800a1f8 <calculateSPLQ31+0x5ac>)
 800a186:	1839      	adds	r1, r7, r0
 800a188:	6809      	ldr	r1, [r1, #0]
 800a18a:	0089      	lsls	r1, r1, #2
 800a18c:	58cb      	ldr	r3, [r1, r3]
 800a18e:	18d1      	adds	r1, r2, r3
 800a190:	4b19      	ldr	r3, [pc, #100]	@ (800a1f8 <calculateSPLQ31+0x5ac>)
 800a192:	183a      	adds	r2, r7, r0
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	0092      	lsls	r2, r2, #2
 800a198:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a19a:	183b      	adds	r3, r7, r0
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	183a      	adds	r2, r7, r0
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	238c      	movs	r3, #140	@ 0x8c
 800a1a6:	18fb      	adds	r3, r7, r3
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	d9d4      	bls.n	800a158 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800a1ae:	4b13      	ldr	r3, [pc, #76]	@ (800a1fc <calculateSPLQ31+0x5b0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	4b11      	ldr	r3, [pc, #68]	@ (800a1fc <calculateSPLQ31+0x5b0>)
 800a1b6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800a1b8:	4b10      	ldr	r3, [pc, #64]	@ (800a1fc <calculateSPLQ31+0x5b0>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b0f      	cmp	r3, #15
 800a1be:	d905      	bls.n	800a1cc <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800a1c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a200 <calculateSPLQ31+0x5b4>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a204 <calculateSPLQ31+0x5b8>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
    }
}
 800a1cc:	46c0      	nop			@ (mov r8, r8)
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	b02f      	add	sp, #188	@ 0xbc
 800a1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d4:	200000b4 	.word	0x200000b4
 800a1d8:	200000b8 	.word	0x200000b8
 800a1dc:	20001294 	.word	0x20001294
 800a1e0:	20001290 	.word	0x20001290
 800a1e4:	20001298 	.word	0x20001298
 800a1e8:	200012b0 	.word	0x200012b0
 800a1ec:	20001cd8 	.word	0x20001cd8
 800a1f0:	20001cdc 	.word	0x20001cdc
 800a1f4:	20001ce0 	.word	0x20001ce0
 800a1f8:	20001cf8 	.word	0x20001cf8
 800a1fc:	20001d10 	.word	0x20001d10
 800a200:	20001284 	.word	0x20001284
 800a204:	20001282 	.word	0x20001282

0800a208 <resetSPLstate>:

static void resetSPLstate(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800a20e:	4b11      	ldr	r3, [pc, #68]	@ (800a254 <resetSPLstate+0x4c>)
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800a214:	4b10      	ldr	r3, [pc, #64]	@ (800a258 <resetSPLstate+0x50>)
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800a21a:	4b10      	ldr	r3, [pc, #64]	@ (800a25c <resetSPLstate+0x54>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a220:	2300      	movs	r3, #0
 800a222:	607b      	str	r3, [r7, #4]
 800a224:	e00c      	b.n	800a240 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800a226:	4b0e      	ldr	r3, [pc, #56]	@ (800a260 <resetSPLstate+0x58>)
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	2100      	movs	r1, #0
 800a22e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800a230:	4b0c      	ldr	r3, [pc, #48]	@ (800a264 <resetSPLstate+0x5c>)
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	0092      	lsls	r2, r2, #2
 800a236:	2100      	movs	r1, #0
 800a238:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3301      	adds	r3, #1
 800a23e:	607b      	str	r3, [r7, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b05      	cmp	r3, #5
 800a244:	d9ef      	bls.n	800a226 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800a246:	4b08      	ldr	r3, [pc, #32]	@ (800a268 <resetSPLstate+0x60>)
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
}
 800a24c:	46c0      	nop			@ (mov r8, r8)
 800a24e:	46bd      	mov	sp, r7
 800a250:	b002      	add	sp, #8
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20001cd8 	.word	0x20001cd8
 800a258:	20001cdc 	.word	0x20001cdc
 800a25c:	20001d10 	.word	0x20001d10
 800a260:	20001ce0 	.word	0x20001ce0
 800a264:	20001cf8 	.word	0x20001cf8
 800a268:	20001284 	.word	0x20001284

0800a26c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800a26c:	b5b0      	push	{r4, r5, r7, lr}
 800a26e:	b090      	sub	sp, #64	@ 0x40
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	0019      	movs	r1, r3
 800a278:	1dfb      	adds	r3, r7, #7
 800a27a:	701a      	strb	r2, [r3, #0]
 800a27c:	1dbb      	adds	r3, r7, #6
 800a27e:	1c0a      	adds	r2, r1, #0
 800a280:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800a282:	1dfb      	adds	r3, r7, #7
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800a28a:	4b3b      	ldr	r3, [pc, #236]	@ (800a378 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800a290:	4b3a      	ldr	r3, [pc, #232]	@ (800a37c <getFilteredMaxAmplitudeQ31+0x110>)
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800a29e:	2305      	movs	r3, #5
 800a2a0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a6:	e040      	b.n	800a32a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	18d3      	adds	r3, r2, r3
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	409a      	lsls	r2, r3
 800a2b6:	0013      	movs	r3, r2
 800a2b8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800a2ba:	4b30      	ldr	r3, [pc, #192]	@ (800a37c <getFilteredMaxAmplitudeQ31+0x110>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	425a      	negs	r2, r3
 800a2c0:	4b2e      	ldr	r3, [pc, #184]	@ (800a37c <getFilteredMaxAmplitudeQ31+0x110>)
 800a2c2:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800a2c4:	2418      	movs	r4, #24
 800a2c6:	193a      	adds	r2, r7, r4
 800a2c8:	492c      	ldr	r1, [pc, #176]	@ (800a37c <getFilteredMaxAmplitudeQ31+0x110>)
 800a2ca:	231c      	movs	r3, #28
 800a2cc:	18f8      	adds	r0, r7, r3
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	f010 fbd6 	bl	801aa80 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800a2d4:	2514      	movs	r5, #20
 800a2d6:	197a      	adds	r2, r7, r5
 800a2d8:	1939      	adds	r1, r7, r4
 800a2da:	4829      	ldr	r0, [pc, #164]	@ (800a380 <getFilteredMaxAmplitudeQ31+0x114>)
 800a2dc:	2301      	movs	r3, #1
 800a2de:	f010 fb9d 	bl	801aa1c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800a2e2:	2410      	movs	r4, #16
 800a2e4:	193a      	adds	r2, r7, r4
 800a2e6:	4924      	ldr	r1, [pc, #144]	@ (800a378 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a2e8:	4826      	ldr	r0, [pc, #152]	@ (800a384 <getFilteredMaxAmplitudeQ31+0x118>)
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	f010 fb96 	bl	801aa1c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800a2f0:	4a21      	ldr	r2, [pc, #132]	@ (800a378 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a2f2:	1939      	adds	r1, r7, r4
 800a2f4:	1978      	adds	r0, r7, r5
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f010 fbc2 	bl	801aa80 <arm_add_q31>

        lastData = fx;
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a37c <getFilteredMaxAmplitudeQ31+0x110>)
 800a300:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800a302:	4b1d      	ldr	r3, [pc, #116]	@ (800a378 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a308:	429a      	cmp	r2, r3
 800a30a:	da03      	bge.n	800a314 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800a30c:	4b1a      	ldr	r3, [pc, #104]	@ (800a378 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a312:	e007      	b.n	800a324 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800a314:	4b18      	ldr	r3, [pc, #96]	@ (800a378 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a31a:	429a      	cmp	r2, r3
 800a31c:	dd02      	ble.n	800a324 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800a31e:	4b16      	ldr	r3, [pc, #88]	@ (800a378 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800a324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a326:	3301      	adds	r3, #1
 800a328:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d3ba      	bcc.n	800a2a8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800a332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a334:	17da      	asrs	r2, r3, #31
 800a336:	189b      	adds	r3, r3, r2
 800a338:	4053      	eors	r3, r2
 800a33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800a33c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a33e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800a340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	4293      	cmp	r3, r2
 800a346:	d200      	bcs.n	800a34a <getFilteredMaxAmplitudeQ31+0xde>
 800a348:	0013      	movs	r3, r2
 800a34a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800a34c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	40da      	lsrs	r2, r3
 800a352:	0013      	movs	r3, r2
 800a354:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800a356:	1dbb      	adds	r3, r7, #6
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d007      	beq.n	800a36e <getFilteredMaxAmplitudeQ31+0x102>
 800a35e:	4b0a      	ldr	r3, [pc, #40]	@ (800a388 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	429a      	cmp	r2, r3
 800a366:	d902      	bls.n	800a36e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800a368:	4b07      	ldr	r3, [pc, #28]	@ (800a388 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a36a:	6a3a      	ldr	r2, [r7, #32]
 800a36c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800a36e:	6a3b      	ldr	r3, [r7, #32]
}
 800a370:	0018      	movs	r0, r3
 800a372:	46bd      	mov	sp, r7
 800a374:	b010      	add	sp, #64	@ 0x40
 800a376:	bdb0      	pop	{r4, r5, r7, pc}
 800a378:	20002114 	.word	0x20002114
 800a37c:	20002118 	.word	0x20002118
 800a380:	08020860 	.word	0x08020860
 800a384:	08020864 	.word	0x08020864
 800a388:	2000128c 	.word	0x2000128c

0800a38c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800a398:	4913      	ldr	r1, [pc, #76]	@ (800a3e8 <floatToIntAndFrac2dp+0x5c>)
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7f6 fe00 	bl	8000fa0 <__aeabi_fmul>
 800a3a0:	1c03      	adds	r3, r0, #0
 800a3a2:	1c18      	adds	r0, r3, #0
 800a3a4:	f014 ff42 	bl	801f22c <roundf>
 800a3a8:	1c03      	adds	r3, r0, #0
 800a3aa:	1c18      	adds	r0, r3, #0
 800a3ac:	f7f6 f936 	bl	800061c <__aeabi_f2uiz>
 800a3b0:	0003      	movs	r3, r0
 800a3b2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2164      	movs	r1, #100	@ 0x64
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	f7f5 fef3 	bl	80001a4 <__udivsi3>
 800a3be:	0003      	movs	r3, r0
 800a3c0:	001a      	movs	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2164      	movs	r1, #100	@ 0x64
 800a3d2:	434b      	muls	r3, r1
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	701a      	strb	r2, [r3, #0]
}
 800a3de:	46c0      	nop			@ (mov r8, r8)
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	b006      	add	sp, #24
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	46c0      	nop			@ (mov r8, r8)
 800a3e8:	42c80000 	.word	0x42c80000

0800a3ec <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800a3f8:	4914      	ldr	r1, [pc, #80]	@ (800a44c <floatToIntAndFrac1dp+0x60>)
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f7f6 fdd0 	bl	8000fa0 <__aeabi_fmul>
 800a400:	1c03      	adds	r3, r0, #0
 800a402:	1c18      	adds	r0, r3, #0
 800a404:	f014 ff12 	bl	801f22c <roundf>
 800a408:	1c03      	adds	r3, r0, #0
 800a40a:	1c18      	adds	r0, r3, #0
 800a40c:	f7f6 f906 	bl	800061c <__aeabi_f2uiz>
 800a410:	0003      	movs	r3, r0
 800a412:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	210a      	movs	r1, #10
 800a418:	0018      	movs	r0, r3
 800a41a:	f7f5 fec3 	bl	80001a4 <__udivsi3>
 800a41e:	0003      	movs	r3, r0
 800a420:	001a      	movs	r2, r3
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	1c19      	adds	r1, r3, #0
 800a432:	0089      	lsls	r1, r1, #2
 800a434:	18cb      	adds	r3, r1, r3
 800a436:	18db      	adds	r3, r3, r3
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	701a      	strb	r2, [r3, #0]
}
 800a442:	46c0      	nop			@ (mov r8, r8)
 800a444:	46bd      	mov	sp, r7
 800a446:	b006      	add	sp, #24
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	46c0      	nop			@ (mov r8, r8)
 800a44c:	41200000 	.word	0x41200000

0800a450 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800a450:	b590      	push	{r4, r7, lr}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7f7 f8b6 	bl	80015d0 <__aeabi_i2f>
 800a464:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a466:	6838      	ldr	r0, [r7, #0]
 800a468:	f7f7 f8b2 	bl	80015d0 <__aeabi_i2f>
 800a46c:	1c03      	adds	r3, r0, #0
 800a46e:	4918      	ldr	r1, [pc, #96]	@ (800a4d0 <sumToIntAverage+0x80>)
 800a470:	1c18      	adds	r0, r3, #0
 800a472:	f7f6 fbaf 	bl	8000bd4 <__aeabi_fdiv>
 800a476:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a478:	1c19      	adds	r1, r3, #0
 800a47a:	1c20      	adds	r0, r4, #0
 800a47c:	f7f6 fa20 	bl	80008c0 <__aeabi_fadd>
 800a480:	1c03      	adds	r3, r0, #0
 800a482:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a486:	f7f7 f8ef 	bl	8001668 <__aeabi_ui2f>
 800a48a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a48c:	1c19      	adds	r1, r3, #0
 800a48e:	1c20      	adds	r0, r4, #0
 800a490:	f7f6 fba0 	bl	8000bd4 <__aeabi_fdiv>
 800a494:	1c03      	adds	r3, r0, #0
 800a496:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	2310      	movs	r3, #16
 800a4a0:	18f9      	adds	r1, r7, r3
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	1c18      	adds	r0, r3, #0
 800a4a6:	f7ff ffa1 	bl	800a3ec <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2bff      	cmp	r3, #255	@ 0xff
 800a4ae:	d906      	bls.n	800a4be <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	22ff      	movs	r2, #255	@ 0xff
 800a4b4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2209      	movs	r2, #9
 800a4ba:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800a4bc:	e003      	b.n	800a4c6 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	701a      	strb	r2, [r3, #0]
}
 800a4c6:	46c0      	nop			@ (mov r8, r8)
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	b007      	add	sp, #28
 800a4cc:	bd90      	pop	{r4, r7, pc}
 800a4ce:	46c0      	nop			@ (mov r8, r8)
 800a4d0:	41200000 	.word	0x41200000

0800a4d4 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2280      	movs	r2, #128	@ 0x80
 800a4e6:	0612      	lsls	r2, r2, #24
 800a4e8:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4a18      	ldr	r2, [pc, #96]	@ (800a550 <findMinMax+0x7c>)
 800a4ee:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	e022      	b.n	800a53c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	18d3      	adds	r3, r2, r3
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	da06      	bge.n	800a516 <findMinMax+0x42>
        {
            min[0] = array[i];
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	18d3      	adds	r3, r2, r3
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	18d3      	adds	r3, r2, r3
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	429a      	cmp	r2, r3
 800a526:	dd06      	ble.n	800a536 <findMinMax+0x62>
        {
            max[0] = array[i];
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	18d3      	adds	r3, r2, r3
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	3301      	adds	r3, #1
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d3d8      	bcc.n	800a4f6 <findMinMax+0x22>
        }
    }
}
 800a544:	46c0      	nop			@ (mov r8, r8)
 800a546:	46c0      	nop			@ (mov r8, r8)
 800a548:	46bd      	mov	sp, r7
 800a54a:	b006      	add	sp, #24
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	46c0      	nop			@ (mov r8, r8)
 800a550:	7fffffff 	.word	0x7fffffff

0800a554 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d302      	bcc.n	800a570 <getPo2factor+0x1c>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d107      	bne.n	800a580 <getPo2factor+0x2c>
    {
        return 0;
 800a570:	2300      	movs	r3, #0
 800a572:	e00d      	b.n	800a590 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	085b      	lsrs	r3, r3, #1
 800a578:	607b      	str	r3, [r7, #4]
        bitShift++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d2f5      	bcs.n	800a574 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800a58e:	68fb      	ldr	r3, [r7, #12]
}
 800a590:	0018      	movs	r0, r3
 800a592:	46bd      	mov	sp, r7
 800a594:	b004      	add	sp, #16
 800a596:	bd80      	pop	{r7, pc}

0800a598 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7f7 f85e 	bl	8001668 <__aeabi_ui2f>
 800a5ac:	1c03      	adds	r3, r0, #0
 800a5ae:	1c19      	adds	r1, r3, #0
 800a5b0:	68b8      	ldr	r0, [r7, #8]
 800a5b2:	f7f6 fcf5 	bl	8000fa0 <__aeabi_fmul>
 800a5b6:	1c03      	adds	r3, r0, #0
 800a5b8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	2310      	movs	r3, #16
 800a5c2:	18f9      	adds	r1, r7, r3
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	1c18      	adds	r0, r3, #0
 800a5c8:	f7ff fee0 	bl	800a38c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	801a      	strh	r2, [r3, #0]
}
 800a5d4:	46c0      	nop			@ (mov r8, r8)
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	b006      	add	sp, #24
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60b8      	str	r0, [r7, #8]
 800a5e4:	60f9      	str	r1, [r7, #12]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	6a3a      	ldr	r2, [r7, #32]
 800a5ee:	68b8      	ldr	r0, [r7, #8]
 800a5f0:	68f9      	ldr	r1, [r7, #12]
 800a5f2:	f7fb ffc7 	bl	8006584 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	18d2      	adds	r2, r2, r3
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	18d2      	adds	r2, r2, r3
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	18d2      	adds	r2, r2, r3
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	18d2      	adds	r2, r2, r3
 800a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a614:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800a616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	0011      	movs	r1, r2
 800a61c:	0018      	movs	r0, r3
 800a61e:	f7fc f841 	bl	80066a4 <correctIntFracNumber>
}
 800a622:	46c0      	nop			@ (mov r8, r8)
 800a624:	46bd      	mov	sp, r7
 800a626:	b004      	add	sp, #16
 800a628:	bd80      	pop	{r7, pc}

0800a62a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b086      	sub	sp, #24
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a63a:	2300      	movs	r3, #0
 800a63c:	613b      	str	r3, [r7, #16]
 800a63e:	e019      	b.n	800a674 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	18d3      	adds	r3, r2, r3
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	3201      	adds	r2, #1
 800a650:	0052      	lsls	r2, r2, #1
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	188a      	adds	r2, r1, r2
 800a656:	8812      	ldrh	r2, [r2, #0]
 800a658:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a65a:	0019      	movs	r1, r3
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a664:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a666:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	3301      	adds	r3, #1
 800a66c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	3304      	adds	r3, #4
 800a672:	613b      	str	r3, [r7, #16]
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d3e1      	bcc.n	800a640 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800a67c:	46c0      	nop			@ (mov r8, r8)
 800a67e:	46c0      	nop			@ (mov r8, r8)
 800a680:	46bd      	mov	sp, r7
 800a682:	b006      	add	sp, #24
 800a684:	bd80      	pop	{r7, pc}
	...

0800a688 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  init = false;
 800a68c:	4b02      	ldr	r3, [pc, #8]	@ (800a698 <InitDone+0x10>)
 800a68e:	2200      	movs	r2, #0
 800a690:	701a      	strb	r2, [r3, #0]
}
 800a692:	46c0      	nop			@ (mov r8, r8)
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	200000c0 	.word	0x200000c0

0800a69c <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800a6a2:	f7fb fb3f 	bl	8005d24 <ReadBatteryVoltage>
 800a6a6:	1c03      	adds	r3, r0, #0
 800a6a8:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800a6aa:	491f      	ldr	r1, [pc, #124]	@ (800a728 <batteryChargeCheck+0x8c>)
 800a6ac:	6838      	ldr	r0, [r7, #0]
 800a6ae:	f7f5 ff3f 	bl	8000530 <__aeabi_fcmplt>
 800a6b2:	1e03      	subs	r3, r0, #0
 800a6b4:	d002      	beq.n	800a6bc <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800a6b6:	1dfb      	adds	r3, r7, #7
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800a6bc:	6838      	ldr	r0, [r7, #0]
 800a6be:	f7f8 fed1 	bl	8003464 <__aeabi_f2d>
 800a6c2:	4a1a      	ldr	r2, [pc, #104]	@ (800a72c <batteryChargeCheck+0x90>)
 800a6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a730 <batteryChargeCheck+0x94>)
 800a6c6:	f7f5 fef9 	bl	80004bc <__aeabi_dcmplt>
 800a6ca:	1e03      	subs	r3, r0, #0
 800a6cc:	d008      	beq.n	800a6e0 <batteryChargeCheck+0x44>
 800a6ce:	4916      	ldr	r1, [pc, #88]	@ (800a728 <batteryChargeCheck+0x8c>)
 800a6d0:	6838      	ldr	r0, [r7, #0]
 800a6d2:	f7f5 ff4b 	bl	800056c <__aeabi_fcmpge>
 800a6d6:	1e03      	subs	r3, r0, #0
 800a6d8:	d002      	beq.n	800a6e0 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800a6da:	1dfb      	adds	r3, r7, #7
 800a6dc:	2202      	movs	r2, #2
 800a6de:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800a6e0:	2181      	movs	r1, #129	@ 0x81
 800a6e2:	05c9      	lsls	r1, r1, #23
 800a6e4:	6838      	ldr	r0, [r7, #0]
 800a6e6:	f7f5 ff23 	bl	8000530 <__aeabi_fcmplt>
 800a6ea:	1e03      	subs	r3, r0, #0
 800a6ec:	d00b      	beq.n	800a706 <batteryChargeCheck+0x6a>
 800a6ee:	6838      	ldr	r0, [r7, #0]
 800a6f0:	f7f8 feb8 	bl	8003464 <__aeabi_f2d>
 800a6f4:	4a0d      	ldr	r2, [pc, #52]	@ (800a72c <batteryChargeCheck+0x90>)
 800a6f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a730 <batteryChargeCheck+0x94>)
 800a6f8:	f7f5 fefe 	bl	80004f8 <__aeabi_dcmpge>
 800a6fc:	1e03      	subs	r3, r0, #0
 800a6fe:	d002      	beq.n	800a706 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800a700:	1dfb      	adds	r3, r7, #7
 800a702:	2203      	movs	r2, #3
 800a704:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800a706:	2181      	movs	r1, #129	@ 0x81
 800a708:	05c9      	lsls	r1, r1, #23
 800a70a:	6838      	ldr	r0, [r7, #0]
 800a70c:	f7f5 ff2e 	bl	800056c <__aeabi_fcmpge>
 800a710:	1e03      	subs	r3, r0, #0
 800a712:	d002      	beq.n	800a71a <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800a714:	1dfb      	adds	r3, r7, #7
 800a716:	2204      	movs	r2, #4
 800a718:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800a71a:	1dfb      	adds	r3, r7, #7
 800a71c:	781b      	ldrb	r3, [r3, #0]
}
 800a71e:	0018      	movs	r0, r3
 800a720:	46bd      	mov	sp, r7
 800a722:	b002      	add	sp, #8
 800a724:	bd80      	pop	{r7, pc}
 800a726:	46c0      	nop			@ (mov r8, r8)
 800a728:	40600000 	.word	0x40600000
 800a72c:	9999999a 	.word	0x9999999a
 800a730:	400d9999 	.word	0x400d9999

0800a734 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800a734:	b590      	push	{r4, r7, lr}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	0004      	movs	r4, r0
 800a73c:	0008      	movs	r0, r1
 800a73e:	0011      	movs	r1, r2
 800a740:	1dbb      	adds	r3, r7, #6
 800a742:	1c22      	adds	r2, r4, #0
 800a744:	801a      	strh	r2, [r3, #0]
 800a746:	1d3b      	adds	r3, r7, #4
 800a748:	1c02      	adds	r2, r0, #0
 800a74a:	801a      	strh	r2, [r3, #0]
 800a74c:	1cbb      	adds	r3, r7, #2
 800a74e:	1c0a      	adds	r2, r1, #0
 800a750:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a752:	4b0f      	ldr	r3, [pc, #60]	@ (800a790 <SetStatusLED+0x5c>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d107      	bne.n	800a76a <SetStatusLED+0x36>
 800a75a:	4b0e      	ldr	r3, [pc, #56]	@ (800a794 <SetStatusLED+0x60>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d103      	bne.n	800a76a <SetStatusLED+0x36>
 800a762:	4b0d      	ldr	r3, [pc, #52]	@ (800a798 <SetStatusLED+0x64>)
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00e      	beq.n	800a788 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800a76a:	2380      	movs	r3, #128	@ 0x80
 800a76c:	05db      	lsls	r3, r3, #23
 800a76e:	1dba      	adds	r2, r7, #6
 800a770:	8812      	ldrh	r2, [r2, #0]
 800a772:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800a774:	2380      	movs	r3, #128	@ 0x80
 800a776:	05db      	lsls	r3, r3, #23
 800a778:	1d3a      	adds	r2, r7, #4
 800a77a:	8812      	ldrh	r2, [r2, #0]
 800a77c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800a77e:	2380      	movs	r3, #128	@ 0x80
 800a780:	05db      	lsls	r3, r3, #23
 800a782:	1cba      	adds	r2, r7, #2
 800a784:	8812      	ldrh	r2, [r2, #0]
 800a786:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a788:	46c0      	nop			@ (mov r8, r8)
 800a78a:	46bd      	mov	sp, r7
 800a78c:	b003      	add	sp, #12
 800a78e:	bd90      	pop	{r4, r7, pc}
 800a790:	2000211d 	.word	0x2000211d
 800a794:	200000c0 	.word	0x200000c0
 800a798:	2000211e 	.word	0x2000211e

0800a79c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800a79c:	b590      	push	{r4, r7, lr}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	0004      	movs	r4, r0
 800a7a4:	0008      	movs	r0, r1
 800a7a6:	0011      	movs	r1, r2
 800a7a8:	1dfb      	adds	r3, r7, #7
 800a7aa:	1c22      	adds	r2, r4, #0
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	1dbb      	adds	r3, r7, #6
 800a7b0:	1c02      	adds	r2, r0, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
 800a7b4:	1d7b      	adds	r3, r7, #5
 800a7b6:	1c0a      	adds	r2, r1, #0
 800a7b8:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800a7ba:	4b19      	ldr	r3, [pc, #100]	@ (800a820 <SetDBLED+0x84>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d107      	bne.n	800a7d2 <SetDBLED+0x36>
 800a7c2:	4b18      	ldr	r3, [pc, #96]	@ (800a824 <SetDBLED+0x88>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d103      	bne.n	800a7d2 <SetDBLED+0x36>
 800a7ca:	4b17      	ldr	r3, [pc, #92]	@ (800a828 <SetDBLED+0x8c>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d022      	beq.n	800a818 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800a7d2:	1dfb      	adds	r3, r7, #7
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	4053      	eors	r3, r2
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	001a      	movs	r2, r3
 800a7de:	4b13      	ldr	r3, [pc, #76]	@ (800a82c <SetDBLED+0x90>)
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f002 fd45 	bl	800d272 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800a7e8:	1dbb      	adds	r3, r7, #6
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	4053      	eors	r3, r2
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	001a      	movs	r2, r3
 800a7f4:	2380      	movs	r3, #128	@ 0x80
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	480c      	ldr	r0, [pc, #48]	@ (800a82c <SetDBLED+0x90>)
 800a7fa:	0019      	movs	r1, r3
 800a7fc:	f002 fd39 	bl	800d272 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800a800:	1d7b      	adds	r3, r7, #5
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2201      	movs	r2, #1
 800a806:	4053      	eors	r3, r2
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	001a      	movs	r2, r3
 800a80c:	2380      	movs	r3, #128	@ 0x80
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4806      	ldr	r0, [pc, #24]	@ (800a82c <SetDBLED+0x90>)
 800a812:	0019      	movs	r1, r3
 800a814:	f002 fd2d 	bl	800d272 <HAL_GPIO_WritePin>
  }
}
 800a818:	46c0      	nop			@ (mov r8, r8)
 800a81a:	46bd      	mov	sp, r7
 800a81c:	b003      	add	sp, #12
 800a81e:	bd90      	pop	{r4, r7, pc}
 800a820:	2000211d 	.word	0x2000211d
 800a824:	200000c0 	.word	0x200000c0
 800a828:	2000211e 	.word	0x2000211e
 800a82c:	50000400 	.word	0x50000400

0800a830 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800a830:	b590      	push	{r4, r7, lr}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	0004      	movs	r4, r0
 800a838:	0008      	movs	r0, r1
 800a83a:	0011      	movs	r1, r2
 800a83c:	1dbb      	adds	r3, r7, #6
 800a83e:	1c22      	adds	r2, r4, #0
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	1d3b      	adds	r3, r7, #4
 800a844:	1c02      	adds	r2, r0, #0
 800a846:	801a      	strh	r2, [r3, #0]
 800a848:	1cbb      	adds	r3, r7, #2
 800a84a:	1c0a      	adds	r2, r1, #0
 800a84c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a84e:	4b0e      	ldr	r3, [pc, #56]	@ (800a888 <SetVocLED+0x58>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d107      	bne.n	800a866 <SetVocLED+0x36>
 800a856:	4b0d      	ldr	r3, [pc, #52]	@ (800a88c <SetVocLED+0x5c>)
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d103      	bne.n	800a866 <SetVocLED+0x36>
 800a85e:	4b0c      	ldr	r3, [pc, #48]	@ (800a890 <SetVocLED+0x60>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00b      	beq.n	800a87e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800a866:	4b0b      	ldr	r3, [pc, #44]	@ (800a894 <SetVocLED+0x64>)
 800a868:	1dba      	adds	r2, r7, #6
 800a86a:	8812      	ldrh	r2, [r2, #0]
 800a86c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800a86e:	4b09      	ldr	r3, [pc, #36]	@ (800a894 <SetVocLED+0x64>)
 800a870:	1d3a      	adds	r2, r7, #4
 800a872:	8812      	ldrh	r2, [r2, #0]
 800a874:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800a876:	4b07      	ldr	r3, [pc, #28]	@ (800a894 <SetVocLED+0x64>)
 800a878:	1cba      	adds	r2, r7, #2
 800a87a:	8812      	ldrh	r2, [r2, #0]
 800a87c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a87e:	46c0      	nop			@ (mov r8, r8)
 800a880:	46bd      	mov	sp, r7
 800a882:	b003      	add	sp, #12
 800a884:	bd90      	pop	{r4, r7, pc}
 800a886:	46c0      	nop			@ (mov r8, r8)
 800a888:	2000211d 	.word	0x2000211d
 800a88c:	200000c0 	.word	0x200000c0
 800a890:	2000211e 	.word	0x2000211e
 800a894:	40000400 	.word	0x40000400

0800a898 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800a898:	b580      	push	{r7, lr}
 800a89a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a89c:	4b07      	ldr	r3, [pc, #28]	@ (800a8bc <SetMeasurementIndicator+0x24>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d103      	bne.n	800a8ac <SetMeasurementIndicator+0x14>
 800a8a4:	4b06      	ldr	r3, [pc, #24]	@ (800a8c0 <SetMeasurementIndicator+0x28>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800a8ac:	2380      	movs	r3, #128	@ 0x80
 800a8ae:	05db      	lsls	r3, r3, #23
 800a8b0:	4a04      	ldr	r2, [pc, #16]	@ (800a8c4 <SetMeasurementIndicator+0x2c>)
 800a8b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a8b4:	46c0      	nop			@ (mov r8, r8)
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	46c0      	nop			@ (mov r8, r8)
 800a8bc:	2000211d 	.word	0x2000211d
 800a8c0:	2000211e 	.word	0x2000211e
 800a8c4:	00000bb8 	.word	0x00000bb8

0800a8c8 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a8cc:	4b07      	ldr	r3, [pc, #28]	@ (800a8ec <ResetMeasurementIndicator+0x24>)
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d103      	bne.n	800a8dc <ResetMeasurementIndicator+0x14>
 800a8d4:	4b06      	ldr	r3, [pc, #24]	@ (800a8f0 <ResetMeasurementIndicator+0x28>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800a8dc:	2380      	movs	r3, #128	@ 0x80
 800a8de:	05db      	lsls	r3, r3, #23
 800a8e0:	22fa      	movs	r2, #250	@ 0xfa
 800a8e2:	0112      	lsls	r2, r2, #4
 800a8e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a8e6:	46c0      	nop			@ (mov r8, r8)
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	2000211d 	.word	0x2000211d
 800a8f0:	2000211e 	.word	0x2000211e

0800a8f4 <SetMICIndicator>:
void SetMICIndicator(){
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a8f8:	4b07      	ldr	r3, [pc, #28]	@ (800a918 <SetMICIndicator+0x24>)
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <SetMICIndicator+0x14>
 800a900:	4b06      	ldr	r3, [pc, #24]	@ (800a91c <SetMICIndicator+0x28>)
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800a908:	2380      	movs	r3, #128	@ 0x80
 800a90a:	05db      	lsls	r3, r3, #23
 800a90c:	4a04      	ldr	r2, [pc, #16]	@ (800a920 <SetMICIndicator+0x2c>)
 800a90e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a910:	46c0      	nop			@ (mov r8, r8)
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	46c0      	nop			@ (mov r8, r8)
 800a918:	2000211d 	.word	0x2000211d
 800a91c:	2000211e 	.word	0x2000211e
 800a920:	00000bb8 	.word	0x00000bb8

0800a924 <ResetMICIndicator>:
void ResetMICIndicator(){
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a928:	4b07      	ldr	r3, [pc, #28]	@ (800a948 <ResetMICIndicator+0x24>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d103      	bne.n	800a938 <ResetMICIndicator+0x14>
 800a930:	4b06      	ldr	r3, [pc, #24]	@ (800a94c <ResetMICIndicator+0x28>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d004      	beq.n	800a942 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800a938:	2380      	movs	r3, #128	@ 0x80
 800a93a:	05db      	lsls	r3, r3, #23
 800a93c:	22fa      	movs	r2, #250	@ 0xfa
 800a93e:	0112      	lsls	r2, r2, #4
 800a940:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a942:	46c0      	nop			@ (mov r8, r8)
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	2000211d 	.word	0x2000211d
 800a94c:	2000211e 	.word	0x2000211e

0800a950 <SetESPIndicator>:
void SetESPIndicator(){
 800a950:	b580      	push	{r7, lr}
 800a952:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a954:	4b07      	ldr	r3, [pc, #28]	@ (800a974 <SetESPIndicator+0x24>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d103      	bne.n	800a964 <SetESPIndicator+0x14>
 800a95c:	4b06      	ldr	r3, [pc, #24]	@ (800a978 <SetESPIndicator+0x28>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	05db      	lsls	r3, r3, #23
 800a968:	4a04      	ldr	r2, [pc, #16]	@ (800a97c <SetESPIndicator+0x2c>)
 800a96a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a96c:	46c0      	nop			@ (mov r8, r8)
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	2000211d 	.word	0x2000211d
 800a978:	2000211e 	.word	0x2000211e
 800a97c:	00000bb8 	.word	0x00000bb8

0800a980 <ResetESPIndicator>:
void ResetESPIndicator(){
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a984:	4b07      	ldr	r3, [pc, #28]	@ (800a9a4 <ResetESPIndicator+0x24>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d103      	bne.n	800a994 <ResetESPIndicator+0x14>
 800a98c:	4b06      	ldr	r3, [pc, #24]	@ (800a9a8 <ResetESPIndicator+0x28>)
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800a994:	2380      	movs	r3, #128	@ 0x80
 800a996:	05db      	lsls	r3, r3, #23
 800a998:	22fa      	movs	r2, #250	@ 0xfa
 800a99a:	0112      	lsls	r2, r2, #4
 800a99c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a99e:	46c0      	nop			@ (mov r8, r8)
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	2000211d 	.word	0x2000211d
 800a9a8:	2000211e 	.word	0x2000211e

0800a9ac <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800a9b0:	23fa      	movs	r3, #250	@ 0xfa
 800a9b2:	011a      	lsls	r2, r3, #4
 800a9b4:	23fa      	movs	r3, #250	@ 0xfa
 800a9b6:	0119      	lsls	r1, r3, #4
 800a9b8:	23fa      	movs	r3, #250	@ 0xfa
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	0018      	movs	r0, r3
 800a9be:	f7ff feb9 	bl	800a734 <SetStatusLED>
  SetDBLED(false,false,false);
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	f7ff fee8 	bl	800a79c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800a9cc:	23fa      	movs	r3, #250	@ 0xfa
 800a9ce:	011a      	lsls	r2, r3, #4
 800a9d0:	23fa      	movs	r3, #250	@ 0xfa
 800a9d2:	0119      	lsls	r1, r3, #4
 800a9d4:	23fa      	movs	r3, #250	@ 0xfa
 800a9d6:	011b      	lsls	r3, r3, #4
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f7ff ff29 	bl	800a830 <SetVocLED>
return;
 800a9de:	46c0      	nop			@ (mov r8, r8)
}
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <powerCheck>:

Battery_Status powerCheck(){
 800a9e4:	b590      	push	{r4, r7, lr}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800a9ea:	f7fb fa61 	bl	8005eb0 <Check_USB_PowerOn>
 800a9ee:	0003      	movs	r3, r0
 800a9f0:	001a      	movs	r2, r3
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4053      	eors	r3, r2
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d005      	beq.n	800aa08 <powerCheck+0x24>
    status = batteryChargeCheck();
 800a9fc:	1dfc      	adds	r4, r7, #7
 800a9fe:	f7ff fe4d 	bl	800a69c <batteryChargeCheck>
 800aa02:	0003      	movs	r3, r0
 800aa04:	7023      	strb	r3, [r4, #0]
 800aa06:	e002      	b.n	800aa0e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800aa08:	1dfb      	adds	r3, r7, #7
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800aa0e:	1dfb      	adds	r3, r7, #7
 800aa10:	781b      	ldrb	r3, [r3, #0]
}
 800aa12:	0018      	movs	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b003      	add	sp, #12
 800aa18:	bd90      	pop	{r4, r7, pc}
	...

0800aa1c <powerDisplay>:

void powerDisplay(Battery_Status status){
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	0002      	movs	r2, r0
 800aa24:	1dfb      	adds	r3, r7, #7
 800aa26:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800aa28:	1dfb      	adds	r3, r7, #7
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d105      	bne.n	800aa3c <powerDisplay+0x20>
    Debug("LEDS are okay");
 800aa30:	4a18      	ldr	r2, [pc, #96]	@ (800aa94 <powerDisplay+0x78>)
 800aa32:	4b19      	ldr	r3, [pc, #100]	@ (800aa98 <powerDisplay+0x7c>)
 800aa34:	0019      	movs	r1, r3
 800aa36:	2003      	movs	r0, #3
 800aa38:	f000 fe1a 	bl	800b670 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800aa3c:	1dfb      	adds	r3, r7, #7
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d105      	bne.n	800aa50 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800aa44:	4a15      	ldr	r2, [pc, #84]	@ (800aa9c <powerDisplay+0x80>)
 800aa46:	4b14      	ldr	r3, [pc, #80]	@ (800aa98 <powerDisplay+0x7c>)
 800aa48:	0019      	movs	r1, r3
 800aa4a:	2003      	movs	r0, #3
 800aa4c:	f000 fe10 	bl	800b670 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800aa50:	1dfb      	adds	r3, r7, #7
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d105      	bne.n	800aa64 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800aa58:	4a11      	ldr	r2, [pc, #68]	@ (800aaa0 <powerDisplay+0x84>)
 800aa5a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa98 <powerDisplay+0x7c>)
 800aa5c:	0019      	movs	r1, r3
 800aa5e:	2003      	movs	r0, #3
 800aa60:	f000 fe06 	bl	800b670 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800aa64:	1dfb      	adds	r3, r7, #7
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d105      	bne.n	800aa78 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800aa6c:	4a0d      	ldr	r2, [pc, #52]	@ (800aaa4 <powerDisplay+0x88>)
 800aa6e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <powerDisplay+0x7c>)
 800aa70:	0019      	movs	r1, r3
 800aa72:	2003      	movs	r0, #3
 800aa74:	f000 fdfc 	bl	800b670 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800aa78:	1dfb      	adds	r3, r7, #7
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d105      	bne.n	800aa8c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800aa80:	4a09      	ldr	r2, [pc, #36]	@ (800aaa8 <powerDisplay+0x8c>)
 800aa82:	4b05      	ldr	r3, [pc, #20]	@ (800aa98 <powerDisplay+0x7c>)
 800aa84:	0019      	movs	r1, r3
 800aa86:	2003      	movs	r0, #3
 800aa88:	f000 fdf2 	bl	800b670 <CreateLine>
  }
}
 800aa8c:	46c0      	nop			@ (mov r8, r8)
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	b002      	add	sp, #8
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	0802027c 	.word	0x0802027c
 800aa98:	0802028c 	.word	0x0802028c
 800aa9c:	08020290 	.word	0x08020290
 800aaa0:	080202a8 	.word	0x080202a8
 800aaa4:	080202c8 	.word	0x080202c8
 800aaa8:	080202e0 	.word	0x080202e0

0800aaac <configCheck>:

void configCheck(){
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800aab0:	f7fb fa0d 	bl	8005ece <BootButton_Pressed>
 800aab4:	1e03      	subs	r3, r0, #0
 800aab6:	d007      	beq.n	800aac8 <configCheck+0x1c>
 800aab8:	f7fb fa1a 	bl	8005ef0 <UserButton_Pressed>
 800aabc:	1e03      	subs	r3, r0, #0
 800aabe:	d003      	beq.n	800aac8 <configCheck+0x1c>
    configSet = true;
 800aac0:	4b3d      	ldr	r3, [pc, #244]	@ (800abb8 <configCheck+0x10c>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	701a      	strb	r2, [r3, #0]
 800aac6:	e00a      	b.n	800aade <configCheck+0x32>
  }
  else{
    configSet = false;
 800aac8:	4b3b      	ldr	r3, [pc, #236]	@ (800abb8 <configCheck+0x10c>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800aace:	f001 f971 	bl	800bdb4 <HAL_GetTick>
 800aad2:	0003      	movs	r3, r0
 800aad4:	22fa      	movs	r2, #250	@ 0xfa
 800aad6:	00d2      	lsls	r2, r2, #3
 800aad8:	189a      	adds	r2, r3, r2
 800aada:	4b38      	ldr	r3, [pc, #224]	@ (800abbc <configCheck+0x110>)
 800aadc:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800aade:	4b36      	ldr	r3, [pc, #216]	@ (800abb8 <configCheck+0x10c>)
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00d      	beq.n	800ab02 <configCheck+0x56>
 800aae6:	4b35      	ldr	r3, [pc, #212]	@ (800abbc <configCheck+0x110>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	0018      	movs	r0, r3
 800aaec:	f000 fd6a 	bl	800b5c4 <TimestampIsReached>
 800aaf0:	1e03      	subs	r3, r0, #0
 800aaf2:	d006      	beq.n	800ab02 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800aaf4:	f7f8 ff10 	bl	8003918 <SetConfigMode>
    SetDBLED(true, true, true);
 800aaf8:	2201      	movs	r2, #1
 800aafa:	2101      	movs	r1, #1
 800aafc:	2001      	movs	r0, #1
 800aafe:	f7ff fe4d 	bl	800a79c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800ab02:	f7fb f9e4 	bl	8005ece <BootButton_Pressed>
 800ab06:	0003      	movs	r3, r0
 800ab08:	001a      	movs	r2, r3
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	4053      	eors	r3, r2
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d01d      	beq.n	800ab50 <configCheck+0xa4>
 800ab14:	f7fb f9ec 	bl	8005ef0 <UserButton_Pressed>
 800ab18:	1e03      	subs	r3, r0, #0
 800ab1a:	d019      	beq.n	800ab50 <configCheck+0xa4>
 800ab1c:	4b28      	ldr	r3, [pc, #160]	@ (800abc0 <configCheck+0x114>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2201      	movs	r2, #1
 800ab22:	4053      	eors	r3, r2
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d012      	beq.n	800ab50 <configCheck+0xa4>
    SetLEDsOff();
 800ab2a:	f7ff ff3f 	bl	800a9ac <SetLEDsOff>
    userToggle = !userToggle;
 800ab2e:	4b25      	ldr	r3, [pc, #148]	@ (800abc4 <configCheck+0x118>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	1e5a      	subs	r2, r3, #1
 800ab34:	4193      	sbcs	r3, r2
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	2201      	movs	r2, #1
 800ab3a:	4053      	eors	r3, r2
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	1c1a      	adds	r2, r3, #0
 800ab40:	2301      	movs	r3, #1
 800ab42:	4013      	ands	r3, r2
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	4b1f      	ldr	r3, [pc, #124]	@ (800abc4 <configCheck+0x118>)
 800ab48:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800ab4a:	4b1d      	ldr	r3, [pc, #116]	@ (800abc0 <configCheck+0x114>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800ab50:	f7fb f9bd 	bl	8005ece <BootButton_Pressed>
 800ab54:	0003      	movs	r3, r0
 800ab56:	001a      	movs	r2, r3
 800ab58:	2301      	movs	r3, #1
 800ab5a:	4053      	eors	r3, r2
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <configCheck+0xce>
 800ab62:	f7fb f9c5 	bl	8005ef0 <UserButton_Pressed>
 800ab66:	0003      	movs	r3, r0
 800ab68:	001a      	movs	r2, r3
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4053      	eors	r3, r2
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <configCheck+0xce>
    buttonHeld = false;
 800ab74:	4b12      	ldr	r3, [pc, #72]	@ (800abc0 <configCheck+0x114>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800ab7a:	f7fb f999 	bl	8005eb0 <Check_USB_PowerOn>
 800ab7e:	1e03      	subs	r3, r0, #0
 800ab80:	d003      	beq.n	800ab8a <configCheck+0xde>
    usbPluggedIn = true;
 800ab82:	4b11      	ldr	r3, [pc, #68]	@ (800abc8 <configCheck+0x11c>)
 800ab84:	2201      	movs	r2, #1
 800ab86:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800ab88:	e012      	b.n	800abb0 <configCheck+0x104>
    if(!userToggle && !init){
 800ab8a:	4b0e      	ldr	r3, [pc, #56]	@ (800abc4 <configCheck+0x118>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4053      	eors	r3, r2
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d008      	beq.n	800abaa <configCheck+0xfe>
 800ab98:	4b0c      	ldr	r3, [pc, #48]	@ (800abcc <configCheck+0x120>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4053      	eors	r3, r2
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <configCheck+0xfe>
      SetLEDsOff();
 800aba6:	f7ff ff01 	bl	800a9ac <SetLEDsOff>
    usbPluggedIn = false;
 800abaa:	4b07      	ldr	r3, [pc, #28]	@ (800abc8 <configCheck+0x11c>)
 800abac:	2200      	movs	r2, #0
 800abae:	701a      	strb	r2, [r3, #0]
}
 800abb0:	46c0      	nop			@ (mov r8, r8)
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	46c0      	nop			@ (mov r8, r8)
 800abb8:	2000211c 	.word	0x2000211c
 800abbc:	20002120 	.word	0x20002120
 800abc0:	2000211f 	.word	0x2000211f
 800abc4:	2000211e 	.word	0x2000211e
 800abc8:	2000211d 	.word	0x2000211d
 800abcc:	200000c0 	.word	0x200000c0

0800abd0 <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  configCheck();
 800abd4:	f7ff ff6a 	bl	800aaac <configCheck>
}
 800abd8:	46c0      	nop			@ (mov r8, r8)
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800abde:	b590      	push	{r4, r7, lr}
 800abe0:	b083      	sub	sp, #12
 800abe2:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800abe4:	1dfc      	adds	r4, r7, #7
 800abe6:	f7ff fefd 	bl	800a9e4 <powerCheck>
 800abea:	0003      	movs	r3, r0
 800abec:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800abee:	1dfb      	adds	r3, r7, #7
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	0018      	movs	r0, r3
 800abf4:	f7ff ff12 	bl	800aa1c <powerDisplay>
  return status;
 800abf8:	1dfb      	adds	r3, r7, #7
 800abfa:	781b      	ldrb	r3, [r3, #0]

}
 800abfc:	0018      	movs	r0, r3
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b003      	add	sp, #12
 800ac02:	bd90      	pop	{r4, r7, pc}

0800ac04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac08:	4b07      	ldr	r3, [pc, #28]	@ (800ac28 <HAL_MspInit+0x24>)
 800ac0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac0c:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <HAL_MspInit+0x24>)
 800ac0e:	2101      	movs	r1, #1
 800ac10:	430a      	orrs	r2, r1
 800ac12:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac14:	4b04      	ldr	r3, [pc, #16]	@ (800ac28 <HAL_MspInit+0x24>)
 800ac16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac18:	4b03      	ldr	r3, [pc, #12]	@ (800ac28 <HAL_MspInit+0x24>)
 800ac1a:	2180      	movs	r1, #128	@ 0x80
 800ac1c:	0549      	lsls	r1, r1, #21
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac22:	46c0      	nop			@ (mov r8, r8)
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	40021000 	.word	0x40021000

0800ac2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ac30:	46c0      	nop			@ (mov r8, r8)
 800ac32:	e7fd      	b.n	800ac30 <NMI_Handler+0x4>

0800ac34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac38:	46c0      	nop			@ (mov r8, r8)
 800ac3a:	e7fd      	b.n	800ac38 <HardFault_Handler+0x4>

0800ac3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ac40:	46c0      	nop			@ (mov r8, r8)
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ac4a:	46c0      	nop			@ (mov r8, r8)
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ac54:	f001 f89c 	bl	800bd90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ac58:	46c0      	nop			@ (mov r8, r8)
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
	...

0800ac60 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ac64:	4b05      	ldr	r3, [pc, #20]	@ (800ac7c <DMA1_Channel2_3_IRQHandler+0x1c>)
 800ac66:	0018      	movs	r0, r3
 800ac68:	f001 feb1 	bl	800c9ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800ac6c:	4b04      	ldr	r3, [pc, #16]	@ (800ac80 <DMA1_Channel2_3_IRQHandler+0x20>)
 800ac6e:	0018      	movs	r0, r3
 800ac70:	f001 fead 	bl	800c9ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ac74:	46c0      	nop			@ (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	46c0      	nop			@ (mov r8, r8)
 800ac7c:	20000e08 	.word	0x20000e08
 800ac80:	20000dc0 	.word	0x20000dc0

0800ac84 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800ac88:	4b07      	ldr	r3, [pc, #28]	@ (800aca8 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	f001 fe9f 	bl	800c9ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800ac90:	4b06      	ldr	r3, [pc, #24]	@ (800acac <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800ac92:	0018      	movs	r0, r3
 800ac94:	f001 fe9b 	bl	800c9ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800ac98:	4b05      	ldr	r3, [pc, #20]	@ (800acb0 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	f001 fe97 	bl	800c9ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800aca0:	46c0      	nop			@ (mov r8, r8)
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	46c0      	nop			@ (mov r8, r8)
 800aca8:	20000e8c 	.word	0x20000e8c
 800acac:	20002410 	.word	0x20002410
 800acb0:	20002458 	.word	0x20002458

0800acb4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800acb8:	4b03      	ldr	r3, [pc, #12]	@ (800acc8 <USART4_5_IRQHandler+0x14>)
 800acba:	0018      	movs	r0, r3
 800acbc:	f008 fe6c 	bl	8013998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800acc0:	46c0      	nop			@ (mov r8, r8)
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	46c0      	nop			@ (mov r8, r8)
 800acc8:	20002358 	.word	0x20002358

0800accc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800acd0:	4b09      	ldr	r3, [pc, #36]	@ (800acf8 <I2C1_IRQHandler+0x2c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699a      	ldr	r2, [r3, #24]
 800acd6:	23e0      	movs	r3, #224	@ 0xe0
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	4013      	ands	r3, r2
 800acdc:	d004      	beq.n	800ace8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800acde:	4b06      	ldr	r3, [pc, #24]	@ (800acf8 <I2C1_IRQHandler+0x2c>)
 800ace0:	0018      	movs	r0, r3
 800ace2:	f002 fd9f 	bl	800d824 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800ace6:	e003      	b.n	800acf0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800ace8:	4b03      	ldr	r3, [pc, #12]	@ (800acf8 <I2C1_IRQHandler+0x2c>)
 800acea:	0018      	movs	r0, r3
 800acec:	f002 fd80 	bl	800d7f0 <HAL_I2C_EV_IRQHandler>
}
 800acf0:	46c0      	nop			@ (mov r8, r8)
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	46c0      	nop			@ (mov r8, r8)
 800acf8:	20000d18 	.word	0x20000d18

0800acfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ad00:	4b03      	ldr	r3, [pc, #12]	@ (800ad10 <USART1_IRQHandler+0x14>)
 800ad02:	0018      	movs	r0, r3
 800ad04:	f008 fe48 	bl	8013998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ad08:	46c0      	nop			@ (mov r8, r8)
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	46c0      	nop			@ (mov r8, r8)
 800ad10:	200022a0 	.word	0x200022a0

0800ad14 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800ad18:	4b03      	ldr	r3, [pc, #12]	@ (800ad28 <USB_IRQHandler+0x14>)
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f004 ff0e 	bl	800fb3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800ad20:	46c0      	nop			@ (mov r8, r8)
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	20003260 	.word	0x20003260

0800ad2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  return 1;
 800ad30:	2301      	movs	r3, #1
}
 800ad32:	0018      	movs	r0, r3
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_kill>:

int _kill(int pid, int sig)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ad42:	f011 fc0d 	bl	801c560 <__errno>
 800ad46:	0003      	movs	r3, r0
 800ad48:	2216      	movs	r2, #22
 800ad4a:	601a      	str	r2, [r3, #0]
  return -1;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	425b      	negs	r3, r3
}
 800ad50:	0018      	movs	r0, r3
 800ad52:	46bd      	mov	sp, r7
 800ad54:	b002      	add	sp, #8
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <_exit>:

void _exit (int status)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ad60:	2301      	movs	r3, #1
 800ad62:	425a      	negs	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	0011      	movs	r1, r2
 800ad68:	0018      	movs	r0, r3
 800ad6a:	f7ff ffe5 	bl	800ad38 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ad6e:	46c0      	nop			@ (mov r8, r8)
 800ad70:	e7fd      	b.n	800ad6e <_exit+0x16>

0800ad72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad7e:	2300      	movs	r3, #0
 800ad80:	617b      	str	r3, [r7, #20]
 800ad82:	e00a      	b.n	800ad9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ad84:	e000      	b.n	800ad88 <_read+0x16>
 800ad86:	bf00      	nop
 800ad88:	0001      	movs	r1, r0
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	60ba      	str	r2, [r7, #8]
 800ad90:	b2ca      	uxtb	r2, r1
 800ad92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	3301      	adds	r3, #1
 800ad98:	617b      	str	r3, [r7, #20]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	dbf0      	blt.n	800ad84 <_read+0x12>
  }

  return len;
 800ada2:	687b      	ldr	r3, [r7, #4]
}
 800ada4:	0018      	movs	r0, r3
 800ada6:	46bd      	mov	sp, r7
 800ada8:	b006      	add	sp, #24
 800adaa:	bd80      	pop	{r7, pc}

0800adac <_close>:
  }
  return len;
}

int _close(int file)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800adb4:	2301      	movs	r3, #1
 800adb6:	425b      	negs	r3, r3
}
 800adb8:	0018      	movs	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	b002      	add	sp, #8
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2280      	movs	r2, #128	@ 0x80
 800adce:	0192      	lsls	r2, r2, #6
 800add0:	605a      	str	r2, [r3, #4]
  return 0;
 800add2:	2300      	movs	r3, #0
}
 800add4:	0018      	movs	r0, r3
 800add6:	46bd      	mov	sp, r7
 800add8:	b002      	add	sp, #8
 800adda:	bd80      	pop	{r7, pc}

0800addc <_isatty>:

int _isatty(int file)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ade4:	2301      	movs	r3, #1
}
 800ade6:	0018      	movs	r0, r3
 800ade8:	46bd      	mov	sp, r7
 800adea:	b002      	add	sp, #8
 800adec:	bd80      	pop	{r7, pc}

0800adee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b004      	add	sp, #16
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ae0c:	4a14      	ldr	r2, [pc, #80]	@ (800ae60 <_sbrk+0x5c>)
 800ae0e:	4b15      	ldr	r3, [pc, #84]	@ (800ae64 <_sbrk+0x60>)
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ae18:	4b13      	ldr	r3, [pc, #76]	@ (800ae68 <_sbrk+0x64>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ae20:	4b11      	ldr	r3, [pc, #68]	@ (800ae68 <_sbrk+0x64>)
 800ae22:	4a12      	ldr	r2, [pc, #72]	@ (800ae6c <_sbrk+0x68>)
 800ae24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ae26:	4b10      	ldr	r3, [pc, #64]	@ (800ae68 <_sbrk+0x64>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	18d3      	adds	r3, r2, r3
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d207      	bcs.n	800ae44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ae34:	f011 fb94 	bl	801c560 <__errno>
 800ae38:	0003      	movs	r3, r0
 800ae3a:	220c      	movs	r2, #12
 800ae3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	425b      	negs	r3, r3
 800ae42:	e009      	b.n	800ae58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ae44:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <_sbrk+0x64>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ae4a:	4b07      	ldr	r3, [pc, #28]	@ (800ae68 <_sbrk+0x64>)
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	18d2      	adds	r2, r2, r3
 800ae52:	4b05      	ldr	r3, [pc, #20]	@ (800ae68 <_sbrk+0x64>)
 800ae54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	0018      	movs	r0, r3
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b006      	add	sp, #24
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20005000 	.word	0x20005000
 800ae64:	00000400 	.word	0x00000400
 800ae68:	20002124 	.word	0x20002124
 800ae6c:	200038c0 	.word	0x200038c0

0800ae70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ae74:	46c0      	nop			@ (mov r8, r8)
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ae82:	2310      	movs	r3, #16
 800ae84:	18fb      	adds	r3, r7, r3
 800ae86:	0018      	movs	r0, r3
 800ae88:	2308      	movs	r3, #8
 800ae8a:	001a      	movs	r2, r3
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	f011 fac3 	bl	801c418 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ae92:	003b      	movs	r3, r7
 800ae94:	0018      	movs	r0, r3
 800ae96:	2310      	movs	r3, #16
 800ae98:	001a      	movs	r2, r3
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	f011 fabc 	bl	801c418 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800aea0:	4b2e      	ldr	r3, [pc, #184]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aea2:	2280      	movs	r2, #128	@ 0x80
 800aea4:	05d2      	lsls	r2, r2, #23
 800aea6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800aea8:	4b2c      	ldr	r3, [pc, #176]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aeae:	4b2b      	ldr	r3, [pc, #172]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800aeb4:	4b29      	ldr	r3, [pc, #164]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aeb6:	4a2a      	ldr	r2, [pc, #168]	@ (800af60 <MX_TIM2_Init+0xe4>)
 800aeb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aeba:	4b28      	ldr	r3, [pc, #160]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aec0:	4b26      	ldr	r3, [pc, #152]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800aec6:	4b25      	ldr	r3, [pc, #148]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aec8:	0018      	movs	r0, r3
 800aeca:	f007 ff79 	bl	8012dc0 <HAL_TIM_PWM_Init>
 800aece:	1e03      	subs	r3, r0, #0
 800aed0:	d001      	beq.n	800aed6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800aed2:	f7fc fa95 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aed6:	2110      	movs	r1, #16
 800aed8:	187b      	adds	r3, r7, r1
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aede:	187b      	adds	r3, r7, r1
 800aee0:	2200      	movs	r2, #0
 800aee2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aee4:	187a      	adds	r2, r7, r1
 800aee6:	4b1d      	ldr	r3, [pc, #116]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800aee8:	0011      	movs	r1, r2
 800aeea:	0018      	movs	r0, r3
 800aeec:	f008 fa86 	bl	80133fc <HAL_TIMEx_MasterConfigSynchronization>
 800aef0:	1e03      	subs	r3, r0, #0
 800aef2:	d001      	beq.n	800aef8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800aef4:	f7fc fa84 	bl	8007400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aef8:	003b      	movs	r3, r7
 800aefa:	2260      	movs	r2, #96	@ 0x60
 800aefc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800aefe:	003b      	movs	r3, r7
 800af00:	2200      	movs	r2, #0
 800af02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800af04:	003b      	movs	r3, r7
 800af06:	2200      	movs	r2, #0
 800af08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800af0a:	003b      	movs	r3, r7
 800af0c:	2200      	movs	r2, #0
 800af0e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800af10:	0039      	movs	r1, r7
 800af12:	4b12      	ldr	r3, [pc, #72]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800af14:	2200      	movs	r2, #0
 800af16:	0018      	movs	r0, r3
 800af18:	f008 f824 	bl	8012f64 <HAL_TIM_PWM_ConfigChannel>
 800af1c:	1e03      	subs	r3, r0, #0
 800af1e:	d001      	beq.n	800af24 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800af20:	f7fc fa6e 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800af24:	0039      	movs	r1, r7
 800af26:	4b0d      	ldr	r3, [pc, #52]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800af28:	2208      	movs	r2, #8
 800af2a:	0018      	movs	r0, r3
 800af2c:	f008 f81a 	bl	8012f64 <HAL_TIM_PWM_ConfigChannel>
 800af30:	1e03      	subs	r3, r0, #0
 800af32:	d001      	beq.n	800af38 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800af34:	f7fc fa64 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800af38:	0039      	movs	r1, r7
 800af3a:	4b08      	ldr	r3, [pc, #32]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800af3c:	220c      	movs	r2, #12
 800af3e:	0018      	movs	r0, r3
 800af40:	f008 f810 	bl	8012f64 <HAL_TIM_PWM_ConfigChannel>
 800af44:	1e03      	subs	r3, r0, #0
 800af46:	d001      	beq.n	800af4c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800af48:	f7fc fa5a 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800af4c:	4b03      	ldr	r3, [pc, #12]	@ (800af5c <MX_TIM2_Init+0xe0>)
 800af4e:	0018      	movs	r0, r3
 800af50:	f000 f8fe 	bl	800b150 <HAL_TIM_MspPostInit>

}
 800af54:	46c0      	nop			@ (mov r8, r8)
 800af56:	46bd      	mov	sp, r7
 800af58:	b006      	add	sp, #24
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20002128 	.word	0x20002128
 800af60:	0000ffff 	.word	0x0000ffff

0800af64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af6a:	2310      	movs	r3, #16
 800af6c:	18fb      	adds	r3, r7, r3
 800af6e:	0018      	movs	r0, r3
 800af70:	2308      	movs	r3, #8
 800af72:	001a      	movs	r2, r3
 800af74:	2100      	movs	r1, #0
 800af76:	f011 fa4f 	bl	801c418 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af7a:	003b      	movs	r3, r7
 800af7c:	0018      	movs	r0, r3
 800af7e:	2310      	movs	r3, #16
 800af80:	001a      	movs	r2, r3
 800af82:	2100      	movs	r1, #0
 800af84:	f011 fa48 	bl	801c418 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800af88:	4b32      	ldr	r3, [pc, #200]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800af8a:	4a33      	ldr	r2, [pc, #204]	@ (800b058 <MX_TIM3_Init+0xf4>)
 800af8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800af8e:	4b31      	ldr	r3, [pc, #196]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af94:	4b2f      	ldr	r3, [pc, #188]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800af96:	2200      	movs	r2, #0
 800af98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800af9a:	4b2e      	ldr	r3, [pc, #184]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800af9c:	4a2f      	ldr	r2, [pc, #188]	@ (800b05c <MX_TIM3_Init+0xf8>)
 800af9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afa0:	4b2c      	ldr	r3, [pc, #176]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afa6:	4b2b      	ldr	r3, [pc, #172]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800afac:	4b29      	ldr	r3, [pc, #164]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800afae:	0018      	movs	r0, r3
 800afb0:	f007 ff06 	bl	8012dc0 <HAL_TIM_PWM_Init>
 800afb4:	1e03      	subs	r3, r0, #0
 800afb6:	d001      	beq.n	800afbc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800afb8:	f7fc fa22 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afbc:	2110      	movs	r1, #16
 800afbe:	187b      	adds	r3, r7, r1
 800afc0:	2200      	movs	r2, #0
 800afc2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afc4:	187b      	adds	r3, r7, r1
 800afc6:	2200      	movs	r2, #0
 800afc8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800afca:	187a      	adds	r2, r7, r1
 800afcc:	4b21      	ldr	r3, [pc, #132]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800afce:	0011      	movs	r1, r2
 800afd0:	0018      	movs	r0, r3
 800afd2:	f008 fa13 	bl	80133fc <HAL_TIMEx_MasterConfigSynchronization>
 800afd6:	1e03      	subs	r3, r0, #0
 800afd8:	d001      	beq.n	800afde <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800afda:	f7fc fa11 	bl	8007400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800afde:	003b      	movs	r3, r7
 800afe0:	2260      	movs	r2, #96	@ 0x60
 800afe2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800afe4:	003b      	movs	r3, r7
 800afe6:	2200      	movs	r2, #0
 800afe8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800afea:	003b      	movs	r3, r7
 800afec:	2200      	movs	r2, #0
 800afee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aff0:	003b      	movs	r3, r7
 800aff2:	2200      	movs	r2, #0
 800aff4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aff6:	0039      	movs	r1, r7
 800aff8:	4b16      	ldr	r3, [pc, #88]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800affa:	2200      	movs	r2, #0
 800affc:	0018      	movs	r0, r3
 800affe:	f007 ffb1 	bl	8012f64 <HAL_TIM_PWM_ConfigChannel>
 800b002:	1e03      	subs	r3, r0, #0
 800b004:	d001      	beq.n	800b00a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800b006:	f7fc f9fb 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800b00a:	4b12      	ldr	r3, [pc, #72]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800b00c:	2104      	movs	r1, #4
 800b00e:	0018      	movs	r0, r3
 800b010:	f008 fa52 	bl	80134b8 <HAL_TIMEx_RemapConfig>
 800b014:	1e03      	subs	r3, r0, #0
 800b016:	d001      	beq.n	800b01c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800b018:	f7fc f9f2 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b01c:	0039      	movs	r1, r7
 800b01e:	4b0d      	ldr	r3, [pc, #52]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800b020:	2204      	movs	r2, #4
 800b022:	0018      	movs	r0, r3
 800b024:	f007 ff9e 	bl	8012f64 <HAL_TIM_PWM_ConfigChannel>
 800b028:	1e03      	subs	r3, r0, #0
 800b02a:	d001      	beq.n	800b030 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800b02c:	f7fc f9e8 	bl	8007400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b030:	0039      	movs	r1, r7
 800b032:	4b08      	ldr	r3, [pc, #32]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800b034:	2208      	movs	r2, #8
 800b036:	0018      	movs	r0, r3
 800b038:	f007 ff94 	bl	8012f64 <HAL_TIM_PWM_ConfigChannel>
 800b03c:	1e03      	subs	r3, r0, #0
 800b03e:	d001      	beq.n	800b044 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800b040:	f7fc f9de 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b044:	4b03      	ldr	r3, [pc, #12]	@ (800b054 <MX_TIM3_Init+0xf0>)
 800b046:	0018      	movs	r0, r3
 800b048:	f000 f882 	bl	800b150 <HAL_TIM_MspPostInit>

}
 800b04c:	46c0      	nop			@ (mov r8, r8)
 800b04e:	46bd      	mov	sp, r7
 800b050:	b006      	add	sp, #24
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20002168 	.word	0x20002168
 800b058:	40000400 	.word	0x40000400
 800b05c:	0000ffff 	.word	0x0000ffff

0800b060 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b066:	003b      	movs	r3, r7
 800b068:	0018      	movs	r0, r3
 800b06a:	2308      	movs	r3, #8
 800b06c:	001a      	movs	r2, r3
 800b06e:	2100      	movs	r1, #0
 800b070:	f011 f9d2 	bl	801c418 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b074:	4b15      	ldr	r3, [pc, #84]	@ (800b0cc <MX_TIM6_Init+0x6c>)
 800b076:	4a16      	ldr	r2, [pc, #88]	@ (800b0d0 <MX_TIM6_Init+0x70>)
 800b078:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800b07a:	4b14      	ldr	r3, [pc, #80]	@ (800b0cc <MX_TIM6_Init+0x6c>)
 800b07c:	220a      	movs	r2, #10
 800b07e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b080:	4b12      	ldr	r3, [pc, #72]	@ (800b0cc <MX_TIM6_Init+0x6c>)
 800b082:	2200      	movs	r2, #0
 800b084:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800b086:	4b11      	ldr	r3, [pc, #68]	@ (800b0cc <MX_TIM6_Init+0x6c>)
 800b088:	4a12      	ldr	r2, [pc, #72]	@ (800b0d4 <MX_TIM6_Init+0x74>)
 800b08a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b08c:	4b0f      	ldr	r3, [pc, #60]	@ (800b0cc <MX_TIM6_Init+0x6c>)
 800b08e:	2200      	movs	r2, #0
 800b090:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b092:	4b0e      	ldr	r3, [pc, #56]	@ (800b0cc <MX_TIM6_Init+0x6c>)
 800b094:	0018      	movs	r0, r3
 800b096:	f007 fdeb 	bl	8012c70 <HAL_TIM_Base_Init>
 800b09a:	1e03      	subs	r3, r0, #0
 800b09c:	d001      	beq.n	800b0a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800b09e:	f7fc f9af 	bl	8007400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b0a2:	003b      	movs	r3, r7
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0a8:	003b      	movs	r3, r7
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b0ae:	003a      	movs	r2, r7
 800b0b0:	4b06      	ldr	r3, [pc, #24]	@ (800b0cc <MX_TIM6_Init+0x6c>)
 800b0b2:	0011      	movs	r1, r2
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	f008 f9a1 	bl	80133fc <HAL_TIMEx_MasterConfigSynchronization>
 800b0ba:	1e03      	subs	r3, r0, #0
 800b0bc:	d001      	beq.n	800b0c2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800b0be:	f7fc f99f 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b0c2:	46c0      	nop			@ (mov r8, r8)
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	b002      	add	sp, #8
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	46c0      	nop			@ (mov r8, r8)
 800b0cc:	200021a8 	.word	0x200021a8
 800b0d0:	40001000 	.word	0x40001000
 800b0d4:	0000ffff 	.word	0x0000ffff

0800b0d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	2380      	movs	r3, #128	@ 0x80
 800b0e6:	05db      	lsls	r3, r3, #23
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d106      	bne.n	800b0fa <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b118 <HAL_TIM_PWM_MspInit+0x40>)
 800b0ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0f0:	4b09      	ldr	r3, [pc, #36]	@ (800b118 <HAL_TIM_PWM_MspInit+0x40>)
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b0f8:	e00a      	b.n	800b110 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a07      	ldr	r2, [pc, #28]	@ (800b11c <HAL_TIM_PWM_MspInit+0x44>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d105      	bne.n	800b110 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b104:	4b04      	ldr	r3, [pc, #16]	@ (800b118 <HAL_TIM_PWM_MspInit+0x40>)
 800b106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b108:	4b03      	ldr	r3, [pc, #12]	@ (800b118 <HAL_TIM_PWM_MspInit+0x40>)
 800b10a:	2102      	movs	r1, #2
 800b10c:	430a      	orrs	r2, r1
 800b10e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b110:	46c0      	nop			@ (mov r8, r8)
 800b112:	46bd      	mov	sp, r7
 800b114:	b002      	add	sp, #8
 800b116:	bd80      	pop	{r7, pc}
 800b118:	40021000 	.word	0x40021000
 800b11c:	40000400 	.word	0x40000400

0800b120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a06      	ldr	r2, [pc, #24]	@ (800b148 <HAL_TIM_Base_MspInit+0x28>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d105      	bne.n	800b13e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b132:	4b06      	ldr	r3, [pc, #24]	@ (800b14c <HAL_TIM_Base_MspInit+0x2c>)
 800b134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b136:	4b05      	ldr	r3, [pc, #20]	@ (800b14c <HAL_TIM_Base_MspInit+0x2c>)
 800b138:	2110      	movs	r1, #16
 800b13a:	430a      	orrs	r2, r1
 800b13c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b13e:	46c0      	nop			@ (mov r8, r8)
 800b140:	46bd      	mov	sp, r7
 800b142:	b002      	add	sp, #8
 800b144:	bd80      	pop	{r7, pc}
 800b146:	46c0      	nop			@ (mov r8, r8)
 800b148:	40001000 	.word	0x40001000
 800b14c:	40021000 	.word	0x40021000

0800b150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b150:	b590      	push	{r4, r7, lr}
 800b152:	b08b      	sub	sp, #44	@ 0x2c
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b158:	2414      	movs	r4, #20
 800b15a:	193b      	adds	r3, r7, r4
 800b15c:	0018      	movs	r0, r3
 800b15e:	2314      	movs	r3, #20
 800b160:	001a      	movs	r2, r3
 800b162:	2100      	movs	r1, #0
 800b164:	f011 f958 	bl	801c418 <memset>
  if(timHandle->Instance==TIM2)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	2380      	movs	r3, #128	@ 0x80
 800b16e:	05db      	lsls	r3, r3, #23
 800b170:	429a      	cmp	r2, r3
 800b172:	d123      	bne.n	800b1bc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b174:	4b27      	ldr	r3, [pc, #156]	@ (800b214 <HAL_TIM_MspPostInit+0xc4>)
 800b176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b178:	4b26      	ldr	r3, [pc, #152]	@ (800b214 <HAL_TIM_MspPostInit+0xc4>)
 800b17a:	2101      	movs	r1, #1
 800b17c:	430a      	orrs	r2, r1
 800b17e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b180:	4b24      	ldr	r3, [pc, #144]	@ (800b214 <HAL_TIM_MspPostInit+0xc4>)
 800b182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b184:	2201      	movs	r2, #1
 800b186:	4013      	ands	r3, r2
 800b188:	613b      	str	r3, [r7, #16]
 800b18a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800b18c:	0021      	movs	r1, r4
 800b18e:	187b      	adds	r3, r7, r1
 800b190:	220d      	movs	r2, #13
 800b192:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b194:	187b      	adds	r3, r7, r1
 800b196:	2202      	movs	r2, #2
 800b198:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19a:	187b      	adds	r3, r7, r1
 800b19c:	2200      	movs	r2, #0
 800b19e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1a0:	187b      	adds	r3, r7, r1
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800b1a6:	187b      	adds	r3, r7, r1
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ac:	187a      	adds	r2, r7, r1
 800b1ae:	23a0      	movs	r3, #160	@ 0xa0
 800b1b0:	05db      	lsls	r3, r3, #23
 800b1b2:	0011      	movs	r1, r2
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f001 fec1 	bl	800cf3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b1ba:	e027      	b.n	800b20c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a15      	ldr	r2, [pc, #84]	@ (800b218 <HAL_TIM_MspPostInit+0xc8>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d122      	bne.n	800b20c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b1c6:	4b13      	ldr	r3, [pc, #76]	@ (800b214 <HAL_TIM_MspPostInit+0xc4>)
 800b1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ca:	4b12      	ldr	r3, [pc, #72]	@ (800b214 <HAL_TIM_MspPostInit+0xc4>)
 800b1cc:	2104      	movs	r1, #4
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b1d2:	4b10      	ldr	r3, [pc, #64]	@ (800b214 <HAL_TIM_MspPostInit+0xc4>)
 800b1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d6:	2204      	movs	r2, #4
 800b1d8:	4013      	ands	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800b1de:	2114      	movs	r1, #20
 800b1e0:	187b      	adds	r3, r7, r1
 800b1e2:	22e0      	movs	r2, #224	@ 0xe0
 800b1e4:	0052      	lsls	r2, r2, #1
 800b1e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1e8:	187b      	adds	r3, r7, r1
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ee:	187b      	adds	r3, r7, r1
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1f4:	187b      	adds	r3, r7, r1
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b1fa:	187b      	adds	r3, r7, r1
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b200:	187b      	adds	r3, r7, r1
 800b202:	4a06      	ldr	r2, [pc, #24]	@ (800b21c <HAL_TIM_MspPostInit+0xcc>)
 800b204:	0019      	movs	r1, r3
 800b206:	0010      	movs	r0, r2
 800b208:	f001 fe98 	bl	800cf3c <HAL_GPIO_Init>
}
 800b20c:	46c0      	nop			@ (mov r8, r8)
 800b20e:	46bd      	mov	sp, r7
 800b210:	b00b      	add	sp, #44	@ 0x2c
 800b212:	bd90      	pop	{r4, r7, pc}
 800b214:	40021000 	.word	0x40021000
 800b218:	40000400 	.word	0x40000400
 800b21c:	50000800 	.word	0x50000800

0800b220 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800b224:	4b17      	ldr	r3, [pc, #92]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b226:	4a18      	ldr	r2, [pc, #96]	@ (800b288 <MX_LPUART1_UART_Init+0x68>)
 800b228:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800b22a:	4b16      	ldr	r3, [pc, #88]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b22c:	22e1      	movs	r2, #225	@ 0xe1
 800b22e:	0252      	lsls	r2, r2, #9
 800b230:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b232:	4b14      	ldr	r3, [pc, #80]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b234:	2200      	movs	r2, #0
 800b236:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800b238:	4b12      	ldr	r3, [pc, #72]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800b23e:	4b11      	ldr	r3, [pc, #68]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b240:	2200      	movs	r2, #0
 800b242:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800b244:	4b0f      	ldr	r3, [pc, #60]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b246:	220c      	movs	r2, #12
 800b248:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b24a:	4b0e      	ldr	r3, [pc, #56]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b250:	4b0c      	ldr	r3, [pc, #48]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b252:	2200      	movs	r2, #0
 800b254:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800b256:	4b0b      	ldr	r3, [pc, #44]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b258:	2218      	movs	r2, #24
 800b25a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b25c:	4b09      	ldr	r3, [pc, #36]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b25e:	2280      	movs	r2, #128	@ 0x80
 800b260:	0212      	lsls	r2, r2, #8
 800b262:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800b264:	4b07      	ldr	r3, [pc, #28]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b266:	2280      	movs	r2, #128	@ 0x80
 800b268:	0152      	lsls	r2, r2, #5
 800b26a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800b26c:	4b05      	ldr	r3, [pc, #20]	@ (800b284 <MX_LPUART1_UART_Init+0x64>)
 800b26e:	0018      	movs	r0, r3
 800b270:	f008 f940 	bl	80134f4 <HAL_UART_Init>
 800b274:	1e03      	subs	r3, r0, #0
 800b276:	d001      	beq.n	800b27c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800b278:	f7fc f8c2 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800b27c:	46c0      	nop			@ (mov r8, r8)
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	46c0      	nop			@ (mov r8, r8)
 800b284:	200021e8 	.word	0x200021e8
 800b288:	40004800 	.word	0x40004800

0800b28c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b290:	4b16      	ldr	r3, [pc, #88]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b292:	4a17      	ldr	r2, [pc, #92]	@ (800b2f0 <MX_USART1_UART_Init+0x64>)
 800b294:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b296:	4b15      	ldr	r3, [pc, #84]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b298:	22e1      	movs	r2, #225	@ 0xe1
 800b29a:	0252      	lsls	r2, r2, #9
 800b29c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b29e:	4b13      	ldr	r3, [pc, #76]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b2a4:	4b11      	ldr	r3, [pc, #68]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b2aa:	4b10      	ldr	r3, [pc, #64]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2b2:	220c      	movs	r2, #12
 800b2b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800b2c8:	4b08      	ldr	r3, [pc, #32]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2ca:	2208      	movs	r2, #8
 800b2cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b2ce:	4b07      	ldr	r3, [pc, #28]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2d0:	2280      	movs	r2, #128	@ 0x80
 800b2d2:	0212      	lsls	r2, r2, #8
 800b2d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b2d6:	4b05      	ldr	r3, [pc, #20]	@ (800b2ec <MX_USART1_UART_Init+0x60>)
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f008 f90b 	bl	80134f4 <HAL_UART_Init>
 800b2de:	1e03      	subs	r3, r0, #0
 800b2e0:	d001      	beq.n	800b2e6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800b2e2:	f7fc f88d 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b2e6:	46c0      	nop			@ (mov r8, r8)
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	200022a0 	.word	0x200022a0
 800b2f0:	40013800 	.word	0x40013800

0800b2f4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800b2f8:	4b14      	ldr	r3, [pc, #80]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b2fa:	4a15      	ldr	r2, [pc, #84]	@ (800b350 <MX_USART4_UART_Init+0x5c>)
 800b2fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b2fe:	4b13      	ldr	r3, [pc, #76]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b300:	22e1      	movs	r2, #225	@ 0xe1
 800b302:	0252      	lsls	r2, r2, #9
 800b304:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b306:	4b11      	ldr	r3, [pc, #68]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b308:	2200      	movs	r2, #0
 800b30a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b30c:	4b0f      	ldr	r3, [pc, #60]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b30e:	2200      	movs	r2, #0
 800b310:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b312:	4b0e      	ldr	r3, [pc, #56]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b314:	2200      	movs	r2, #0
 800b316:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b318:	4b0c      	ldr	r3, [pc, #48]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b31a:	220c      	movs	r2, #12
 800b31c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b31e:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b320:	2200      	movs	r2, #0
 800b322:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b324:	4b09      	ldr	r3, [pc, #36]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b326:	2200      	movs	r2, #0
 800b328:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b32a:	4b08      	ldr	r3, [pc, #32]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b330:	4b06      	ldr	r3, [pc, #24]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b332:	2200      	movs	r2, #0
 800b334:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b336:	4b05      	ldr	r3, [pc, #20]	@ (800b34c <MX_USART4_UART_Init+0x58>)
 800b338:	0018      	movs	r0, r3
 800b33a:	f008 f8db 	bl	80134f4 <HAL_UART_Init>
 800b33e:	1e03      	subs	r3, r0, #0
 800b340:	d001      	beq.n	800b346 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800b342:	f7fc f85d 	bl	8007400 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800b346:	46c0      	nop			@ (mov r8, r8)
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20002358 	.word	0x20002358
 800b350:	40004c00 	.word	0x40004c00

0800b354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b08d      	sub	sp, #52	@ 0x34
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b35c:	241c      	movs	r4, #28
 800b35e:	193b      	adds	r3, r7, r4
 800b360:	0018      	movs	r0, r3
 800b362:	2314      	movs	r3, #20
 800b364:	001a      	movs	r2, r3
 800b366:	2100      	movs	r1, #0
 800b368:	f011 f856 	bl	801c418 <memset>
  if(uartHandle->Instance==LPUART1)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a8b      	ldr	r2, [pc, #556]	@ (800b5a0 <HAL_UART_MspInit+0x24c>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d129      	bne.n	800b3ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800b376:	4b8b      	ldr	r3, [pc, #556]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b37a:	4b8a      	ldr	r3, [pc, #552]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b37c:	2180      	movs	r1, #128	@ 0x80
 800b37e:	02c9      	lsls	r1, r1, #11
 800b380:	430a      	orrs	r2, r1
 800b382:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b384:	4b87      	ldr	r3, [pc, #540]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b388:	4b86      	ldr	r3, [pc, #536]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b38a:	2104      	movs	r1, #4
 800b38c:	430a      	orrs	r2, r1
 800b38e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b390:	4b84      	ldr	r3, [pc, #528]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b394:	2204      	movs	r2, #4
 800b396:	4013      	ands	r3, r2
 800b398:	61bb      	str	r3, [r7, #24]
 800b39a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b39c:	0021      	movs	r1, r4
 800b39e:	187b      	adds	r3, r7, r1
 800b3a0:	2203      	movs	r2, #3
 800b3a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3a4:	187b      	adds	r3, r7, r1
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3aa:	187b      	adds	r3, r7, r1
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3b0:	187b      	adds	r3, r7, r1
 800b3b2:	2203      	movs	r2, #3
 800b3b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800b3b6:	187b      	adds	r3, r7, r1
 800b3b8:	2206      	movs	r2, #6
 800b3ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3bc:	187b      	adds	r3, r7, r1
 800b3be:	4a7a      	ldr	r2, [pc, #488]	@ (800b5a8 <HAL_UART_MspInit+0x254>)
 800b3c0:	0019      	movs	r1, r3
 800b3c2:	0010      	movs	r0, r2
 800b3c4:	f001 fdba 	bl	800cf3c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800b3c8:	e0e5      	b.n	800b596 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a77      	ldr	r2, [pc, #476]	@ (800b5ac <HAL_UART_MspInit+0x258>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d133      	bne.n	800b43c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b3d4:	4b73      	ldr	r3, [pc, #460]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3d8:	4b72      	ldr	r3, [pc, #456]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b3da:	2180      	movs	r1, #128	@ 0x80
 800b3dc:	01c9      	lsls	r1, r1, #7
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3e2:	4b70      	ldr	r3, [pc, #448]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3e6:	4b6f      	ldr	r3, [pc, #444]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b3ee:	4b6d      	ldr	r3, [pc, #436]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]
 800b3f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b3fa:	211c      	movs	r1, #28
 800b3fc:	187b      	adds	r3, r7, r1
 800b3fe:	22c0      	movs	r2, #192	@ 0xc0
 800b400:	00d2      	lsls	r2, r2, #3
 800b402:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b404:	187b      	adds	r3, r7, r1
 800b406:	2202      	movs	r2, #2
 800b408:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b40a:	187b      	adds	r3, r7, r1
 800b40c:	2200      	movs	r2, #0
 800b40e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b410:	187b      	adds	r3, r7, r1
 800b412:	2203      	movs	r2, #3
 800b414:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800b416:	187b      	adds	r3, r7, r1
 800b418:	2204      	movs	r2, #4
 800b41a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b41c:	187a      	adds	r2, r7, r1
 800b41e:	23a0      	movs	r3, #160	@ 0xa0
 800b420:	05db      	lsls	r3, r3, #23
 800b422:	0011      	movs	r1, r2
 800b424:	0018      	movs	r0, r3
 800b426:	f001 fd89 	bl	800cf3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	201b      	movs	r0, #27
 800b430:	f001 f936 	bl	800c6a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b434:	201b      	movs	r0, #27
 800b436:	f001 f948 	bl	800c6ca <HAL_NVIC_EnableIRQ>
}
 800b43a:	e0ac      	b.n	800b596 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a5b      	ldr	r2, [pc, #364]	@ (800b5b0 <HAL_UART_MspInit+0x25c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d000      	beq.n	800b448 <HAL_UART_MspInit+0xf4>
 800b446:	e0a6      	b.n	800b596 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800b448:	4b56      	ldr	r3, [pc, #344]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b44c:	4b55      	ldr	r3, [pc, #340]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b44e:	2180      	movs	r1, #128	@ 0x80
 800b450:	0309      	lsls	r1, r1, #12
 800b452:	430a      	orrs	r2, r1
 800b454:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b456:	4b53      	ldr	r3, [pc, #332]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b45a:	4b52      	ldr	r3, [pc, #328]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b45c:	2101      	movs	r1, #1
 800b45e:	430a      	orrs	r2, r1
 800b460:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b462:	4b50      	ldr	r3, [pc, #320]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b466:	2201      	movs	r2, #1
 800b468:	4013      	ands	r3, r2
 800b46a:	613b      	str	r3, [r7, #16]
 800b46c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b46e:	4b4d      	ldr	r3, [pc, #308]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b472:	4b4c      	ldr	r3, [pc, #304]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b474:	2104      	movs	r1, #4
 800b476:	430a      	orrs	r2, r1
 800b478:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b47a:	4b4a      	ldr	r3, [pc, #296]	@ (800b5a4 <HAL_UART_MspInit+0x250>)
 800b47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47e:	2204      	movs	r2, #4
 800b480:	4013      	ands	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
 800b484:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b486:	241c      	movs	r4, #28
 800b488:	193b      	adds	r3, r7, r4
 800b48a:	2202      	movs	r2, #2
 800b48c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b48e:	193b      	adds	r3, r7, r4
 800b490:	2202      	movs	r2, #2
 800b492:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b494:	193b      	adds	r3, r7, r4
 800b496:	2200      	movs	r2, #0
 800b498:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b49a:	193b      	adds	r3, r7, r4
 800b49c:	2203      	movs	r2, #3
 800b49e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b4a0:	193b      	adds	r3, r7, r4
 800b4a2:	2206      	movs	r2, #6
 800b4a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4a6:	193a      	adds	r2, r7, r4
 800b4a8:	23a0      	movs	r3, #160	@ 0xa0
 800b4aa:	05db      	lsls	r3, r3, #23
 800b4ac:	0011      	movs	r1, r2
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	f001 fd44 	bl	800cf3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b4b4:	0021      	movs	r1, r4
 800b4b6:	187b      	adds	r3, r7, r1
 800b4b8:	2280      	movs	r2, #128	@ 0x80
 800b4ba:	00d2      	lsls	r2, r2, #3
 800b4bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4be:	187b      	adds	r3, r7, r1
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c4:	187b      	adds	r3, r7, r1
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4ca:	187b      	adds	r3, r7, r1
 800b4cc:	2203      	movs	r2, #3
 800b4ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b4d0:	187b      	adds	r3, r7, r1
 800b4d2:	2206      	movs	r2, #6
 800b4d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4d6:	187b      	adds	r3, r7, r1
 800b4d8:	4a33      	ldr	r2, [pc, #204]	@ (800b5a8 <HAL_UART_MspInit+0x254>)
 800b4da:	0019      	movs	r1, r3
 800b4dc:	0010      	movs	r0, r2
 800b4de:	f001 fd2d 	bl	800cf3c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800b4e2:	4b34      	ldr	r3, [pc, #208]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b4e4:	4a34      	ldr	r2, [pc, #208]	@ (800b5b8 <HAL_UART_MspInit+0x264>)
 800b4e6:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800b4e8:	4b32      	ldr	r3, [pc, #200]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b4ea:	220c      	movs	r2, #12
 800b4ec:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b4ee:	4b31      	ldr	r3, [pc, #196]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b4f4:	4b2f      	ldr	r3, [pc, #188]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b4fa:	4b2e      	ldr	r3, [pc, #184]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b4fc:	2280      	movs	r2, #128	@ 0x80
 800b4fe:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b500:	4b2c      	ldr	r3, [pc, #176]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b502:	2200      	movs	r2, #0
 800b504:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b506:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b508:	2200      	movs	r2, #0
 800b50a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800b50c:	4b29      	ldr	r3, [pc, #164]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b50e:	2220      	movs	r2, #32
 800b510:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b512:	4b28      	ldr	r3, [pc, #160]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b514:	2200      	movs	r2, #0
 800b516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800b518:	4b26      	ldr	r3, [pc, #152]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b51a:	0018      	movs	r0, r3
 800b51c:	f001 f8f2 	bl	800c704 <HAL_DMA_Init>
 800b520:	1e03      	subs	r3, r0, #0
 800b522:	d001      	beq.n	800b528 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800b524:	f7fb ff6c 	bl	8007400 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a22      	ldr	r2, [pc, #136]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b52c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b52e:	4b21      	ldr	r3, [pc, #132]	@ (800b5b4 <HAL_UART_MspInit+0x260>)
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800b534:	4b21      	ldr	r3, [pc, #132]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b536:	4a22      	ldr	r2, [pc, #136]	@ (800b5c0 <HAL_UART_MspInit+0x26c>)
 800b538:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800b53a:	4b20      	ldr	r3, [pc, #128]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b53c:	220c      	movs	r2, #12
 800b53e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b540:	4b1e      	ldr	r3, [pc, #120]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b542:	2210      	movs	r2, #16
 800b544:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b546:	4b1d      	ldr	r3, [pc, #116]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b548:	2200      	movs	r2, #0
 800b54a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b54c:	4b1b      	ldr	r3, [pc, #108]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b54e:	2280      	movs	r2, #128	@ 0x80
 800b550:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b552:	4b1a      	ldr	r3, [pc, #104]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b554:	2200      	movs	r2, #0
 800b556:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b558:	4b18      	ldr	r3, [pc, #96]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800b55e:	4b17      	ldr	r3, [pc, #92]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b560:	2200      	movs	r2, #0
 800b562:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b564:	4b15      	ldr	r3, [pc, #84]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b566:	2200      	movs	r2, #0
 800b568:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800b56a:	4b14      	ldr	r3, [pc, #80]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b56c:	0018      	movs	r0, r3
 800b56e:	f001 f8c9 	bl	800c704 <HAL_DMA_Init>
 800b572:	1e03      	subs	r3, r0, #0
 800b574:	d001      	beq.n	800b57a <HAL_UART_MspInit+0x226>
      Error_Handler();
 800b576:	f7fb ff43 	bl	8007400 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a0f      	ldr	r2, [pc, #60]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b57e:	671a      	str	r2, [r3, #112]	@ 0x70
 800b580:	4b0e      	ldr	r3, [pc, #56]	@ (800b5bc <HAL_UART_MspInit+0x268>)
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	200e      	movs	r0, #14
 800b58c:	f001 f888 	bl	800c6a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800b590:	200e      	movs	r0, #14
 800b592:	f001 f89a 	bl	800c6ca <HAL_NVIC_EnableIRQ>
}
 800b596:	46c0      	nop			@ (mov r8, r8)
 800b598:	46bd      	mov	sp, r7
 800b59a:	b00d      	add	sp, #52	@ 0x34
 800b59c:	bd90      	pop	{r4, r7, pc}
 800b59e:	46c0      	nop			@ (mov r8, r8)
 800b5a0:	40004800 	.word	0x40004800
 800b5a4:	40021000 	.word	0x40021000
 800b5a8:	50000800 	.word	0x50000800
 800b5ac:	40013800 	.word	0x40013800
 800b5b0:	40004c00 	.word	0x40004c00
 800b5b4:	20002410 	.word	0x20002410
 800b5b8:	4002006c 	.word	0x4002006c
 800b5bc:	20002458 	.word	0x20002458
 800b5c0:	40020080 	.word	0x40020080

0800b5c4 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 80

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800b5cc:	f000 fbf2 	bl	800bdb4 <HAL_GetTick>
 800b5d0:	0003      	movs	r3, r0
 800b5d2:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800b5d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b648 <TimestampIsReached+0x84>)
 800b5d6:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d307      	bcc.n	800b5f0 <TimestampIsReached+0x2c>
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d901      	bls.n	800b5f0 <TimestampIsReached+0x2c>
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	e000      	b.n	800b5f2 <TimestampIsReached+0x2e>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	230f      	movs	r3, #15
 800b5f4:	18fb      	adds	r3, r7, r3
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	781a      	ldrb	r2, [r3, #0]
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	400a      	ands	r2, r1
 800b5fe:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d207      	bcs.n	800b618 <TimestampIsReached+0x54>
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	429a      	cmp	r2, r3
 800b612:	d201      	bcs.n	800b618 <TimestampIsReached+0x54>
 800b614:	2201      	movs	r2, #1
 800b616:	e000      	b.n	800b61a <TimestampIsReached+0x56>
 800b618:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800b61a:	200e      	movs	r0, #14
 800b61c:	183b      	adds	r3, r7, r0
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	2101      	movs	r1, #1
 800b624:	400a      	ands	r2, r1
 800b626:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800b628:	230f      	movs	r3, #15
 800b62a:	18fb      	adds	r3, r7, r3
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d103      	bne.n	800b63a <TimestampIsReached+0x76>
 800b632:	183b      	adds	r3, r7, r0
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e000      	b.n	800b640 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	0018      	movs	r0, r3
 800b642:	46bd      	mov	sp, r7
 800b644:	b006      	add	sp, #24
 800b646:	bd80      	pop	{r7, pc}
 800b648:	7fffffff 	.word	0x7fffffff

0800b64c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800b654:	f000 fbae 	bl	800bdb4 <HAL_GetTick>
 800b658:	0002      	movs	r2, r0
 800b65a:	4904      	ldr	r1, [pc, #16]	@ (800b66c <AddTimestamp+0x20>)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	0018      	movs	r0, r3
 800b660:	f010 fe36 	bl	801c2d0 <siprintf>
}
 800b664:	46c0      	nop			@ (mov r8, r8)
 800b666:	46bd      	mov	sp, r7
 800b668:	b002      	add	sp, #8
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	08020304 	.word	0x08020304

0800b670 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800b670:	b40c      	push	{r2, r3}
 800b672:	b590      	push	{r4, r7, lr}
 800b674:	b099      	sub	sp, #100	@ 0x64
 800b676:	af00      	add	r7, sp, #0
 800b678:	0002      	movs	r2, r0
 800b67a:	6039      	str	r1, [r7, #0]
 800b67c:	1dfb      	adds	r3, r7, #7
 800b67e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800b680:	4b1f      	ldr	r3, [pc, #124]	@ (800b700 <CreateLine+0x90>)
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	1dfa      	adds	r2, r7, #7
 800b686:	7812      	ldrb	r2, [r2, #0]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d832      	bhi.n	800b6f2 <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	491d      	ldr	r1, [pc, #116]	@ (800b704 <CreateLine+0x94>)
 800b690:	240c      	movs	r4, #12
 800b692:	193b      	adds	r3, r7, r4
 800b694:	0018      	movs	r0, r3
 800b696:	f010 fe1b 	bl	801c2d0 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800b69a:	4b19      	ldr	r3, [pc, #100]	@ (800b700 <CreateLine+0x90>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d909      	bls.n	800b6b6 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800b6a2:	193b      	adds	r3, r7, r4
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	f7f4 fd61 	bl	800016c <strlen>
 800b6aa:	0002      	movs	r2, r0
 800b6ac:	193b      	adds	r3, r7, r4
 800b6ae:	189b      	adds	r3, r3, r2
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f7ff ffcb 	bl	800b64c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800b6b6:	240c      	movs	r4, #12
 800b6b8:	193b      	adds	r3, r7, r4
 800b6ba:	0018      	movs	r0, r3
 800b6bc:	f7f4 fd56 	bl	800016c <strlen>
 800b6c0:	0003      	movs	r3, r0
 800b6c2:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800b6c4:	236c      	movs	r3, #108	@ 0x6c
 800b6c6:	2208      	movs	r2, #8
 800b6c8:	189b      	adds	r3, r3, r2
 800b6ca:	19db      	adds	r3, r3, r7
 800b6cc:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800b6ce:	193a      	adds	r2, r7, r4
 800b6d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6d2:	18d0      	adds	r0, r2, r3
 800b6d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6d6:	2250      	movs	r2, #80	@ 0x50
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	0019      	movs	r1, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b6e0:	f010 fe8e 	bl	801c400 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800b6e4:	193a      	adds	r2, r7, r4
 800b6e6:	4b08      	ldr	r3, [pc, #32]	@ (800b708 <CreateLine+0x98>)
 800b6e8:	0011      	movs	r1, r2
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f010 fde0 	bl	801c2b0 <iprintf>
 800b6f0:	e000      	b.n	800b6f4 <CreateLine+0x84>
    return;
 800b6f2:	46c0      	nop			@ (mov r8, r8)
}
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	b019      	add	sp, #100	@ 0x64
 800b6f8:	bc90      	pop	{r4, r7}
 800b6fa:	bc08      	pop	{r3}
 800b6fc:	b002      	add	sp, #8
 800b6fe:	4718      	bx	r3
 800b700:	200000c8 	.word	0x200000c8
 800b704:	08020310 	.word	0x08020310
 800b708:	08020314 	.word	0x08020314

0800b70c <_write>:

int _write(int fd, const void *buf, size_t count) {
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	68b9      	ldr	r1, [r7, #8]
 800b71e:	4804      	ldr	r0, [pc, #16]	@ (800b730 <_write+0x24>)
 800b720:	2364      	movs	r3, #100	@ 0x64
 800b722:	f007 ff4d 	bl	80135c0 <HAL_UART_Transmit>
  return count;
 800b726:	687b      	ldr	r3, [r7, #4]
}
 800b728:	0018      	movs	r0, r3
 800b72a:	46bd      	mov	sp, r7
 800b72c:	b004      	add	sp, #16
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	200022a0 	.word	0x200022a0

0800b734 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	0002      	movs	r2, r0
 800b73c:	1dfb      	adds	r3, r7, #7
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	4b03      	ldr	r3, [pc, #12]	@ (800b750 <SetVerboseLevel+0x1c>)
 800b742:	1dfa      	adds	r2, r7, #7
 800b744:	7812      	ldrb	r2, [r2, #0]
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	46c0      	nop			@ (mov r8, r8)
 800b74a:	46bd      	mov	sp, r7
 800b74c:	b002      	add	sp, #8
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	200000c8 	.word	0x200000c8

0800b754 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b758:	f000 fb2c 	bl	800bdb4 <HAL_GetTick>
 800b75c:	0003      	movs	r3, r0
}
 800b75e:	0018      	movs	r0, r3
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800b76a:	4a0f      	ldr	r2, [pc, #60]	@ (800b7a8 <BinaryReleaseInfo+0x44>)
 800b76c:	4b0f      	ldr	r3, [pc, #60]	@ (800b7ac <BinaryReleaseInfo+0x48>)
 800b76e:	0019      	movs	r1, r3
 800b770:	2002      	movs	r0, #2
 800b772:	f7ff ff7d 	bl	800b670 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800b776:	480e      	ldr	r0, [pc, #56]	@ (800b7b0 <BinaryReleaseInfo+0x4c>)
 800b778:	4a0e      	ldr	r2, [pc, #56]	@ (800b7b4 <BinaryReleaseInfo+0x50>)
 800b77a:	490c      	ldr	r1, [pc, #48]	@ (800b7ac <BinaryReleaseInfo+0x48>)
 800b77c:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b8 <BinaryReleaseInfo+0x54>)
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	0003      	movs	r3, r0
 800b782:	2002      	movs	r0, #2
 800b784:	f7ff ff74 	bl	800b670 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w47b");
 800b788:	4a0c      	ldr	r2, [pc, #48]	@ (800b7bc <BinaryReleaseInfo+0x58>)
 800b78a:	4b08      	ldr	r3, [pc, #32]	@ (800b7ac <BinaryReleaseInfo+0x48>)
 800b78c:	0019      	movs	r1, r3
 800b78e:	2002      	movs	r0, #2
 800b790:	f7ff ff6e 	bl	800b670 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800b794:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c0 <BinaryReleaseInfo+0x5c>)
 800b796:	4a0b      	ldr	r2, [pc, #44]	@ (800b7c4 <BinaryReleaseInfo+0x60>)
 800b798:	4904      	ldr	r1, [pc, #16]	@ (800b7ac <BinaryReleaseInfo+0x48>)
 800b79a:	2002      	movs	r0, #2
 800b79c:	f7ff ff68 	bl	800b670 <CreateLine>
}
 800b7a0:	46c0      	nop			@ (mov r8, r8)
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	46c0      	nop			@ (mov r8, r8)
 800b7a8:	0802031c 	.word	0x0802031c
 800b7ac:	08020348 	.word	0x08020348
 800b7b0:	0802034c 	.word	0x0802034c
 800b7b4:	08020358 	.word	0x08020358
 800b7b8:	0802036c 	.word	0x0802036c
 800b7bc:	08020378 	.word	0x08020378
 800b7c0:	08020384 	.word	0x08020384
 800b7c4:	0802038c 	.word	0x0802038c

0800b7c8 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	68f9      	ldr	r1, [r7, #12]
 800b7da:	4803      	ldr	r0, [pc, #12]	@ (800b7e8 <errorHandler+0x20>)
 800b7dc:	f010 fd68 	bl	801c2b0 <iprintf>
//    while (true)
//    {
//    }
}
 800b7e0:	46c0      	nop			@ (mov r8, r8)
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	b004      	add	sp, #16
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	080203a4 	.word	0x080203a4

0800b7ec <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b7ec:	b590      	push	{r4, r7, lr}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6039      	str	r1, [r7, #0]
 800b7f4:	0011      	movs	r1, r2
 800b7f6:	1dfb      	adds	r3, r7, #7
 800b7f8:	1c02      	adds	r2, r0, #0
 800b7fa:	701a      	strb	r2, [r3, #0]
 800b7fc:	1dbb      	adds	r3, r7, #6
 800b7fe:	1c0a      	adds	r2, r1, #0
 800b800:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800b802:	4b0a      	ldr	r3, [pc, #40]	@ (800b82c <ReadRegister+0x40>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00a      	beq.n	800b820 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800b80a:	4b08      	ldr	r3, [pc, #32]	@ (800b82c <ReadRegister+0x40>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	1dba      	adds	r2, r7, #6
 800b810:	7814      	ldrb	r4, [r2, #0]
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	1dfa      	adds	r2, r7, #7
 800b816:	7810      	ldrb	r0, [r2, #0]
 800b818:	0022      	movs	r2, r4
 800b81a:	4798      	blx	r3
 800b81c:	0003      	movs	r3, r0
 800b81e:	e000      	b.n	800b822 <ReadRegister+0x36>
	}
	return false;
 800b820:	2300      	movs	r3, #0
}
 800b822:	0018      	movs	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	b003      	add	sp, #12
 800b828:	bd90      	pop	{r4, r7, pc}
 800b82a:	46c0      	nop			@ (mov r8, r8)
 800b82c:	200024a0 	.word	0x200024a0

0800b830 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6039      	str	r1, [r7, #0]
 800b838:	0011      	movs	r1, r2
 800b83a:	1dfb      	adds	r3, r7, #7
 800b83c:	1c02      	adds	r2, r0, #0
 800b83e:	701a      	strb	r2, [r3, #0]
 800b840:	1dbb      	adds	r3, r7, #6
 800b842:	1c0a      	adds	r2, r1, #0
 800b844:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b846:	4b0a      	ldr	r3, [pc, #40]	@ (800b870 <WriteRegister+0x40>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800b84e:	4b08      	ldr	r3, [pc, #32]	@ (800b870 <WriteRegister+0x40>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	1dba      	adds	r2, r7, #6
 800b854:	7814      	ldrb	r4, [r2, #0]
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	1dfa      	adds	r2, r7, #7
 800b85a:	7810      	ldrb	r0, [r2, #0]
 800b85c:	0022      	movs	r2, r4
 800b85e:	4798      	blx	r3
 800b860:	0003      	movs	r3, r0
 800b862:	e000      	b.n	800b866 <WriteRegister+0x36>
  }
  return false;
 800b864:	2300      	movs	r3, #0
}
 800b866:	0018      	movs	r0, r3
 800b868:	46bd      	mov	sp, r7
 800b86a:	b003      	add	sp, #12
 800b86c:	bd90      	pop	{r4, r7, pc}
 800b86e:	46c0      	nop			@ (mov r8, r8)
 800b870:	200024a4 	.word	0x200024a4

0800b874 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	000a      	movs	r2, r1
 800b87e:	1cfb      	adds	r3, r7, #3
 800b880:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800b882:	230f      	movs	r3, #15
 800b884:	18fb      	adds	r3, r7, r3
 800b886:	22ff      	movs	r2, #255	@ 0xff
 800b888:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b88a:	230e      	movs	r3, #14
 800b88c:	18fb      	adds	r3, r7, r3
 800b88e:	2200      	movs	r2, #0
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	e037      	b.n	800b904 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b894:	230e      	movs	r3, #14
 800b896:	18fb      	adds	r3, r7, r3
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	18d3      	adds	r3, r2, r3
 800b89e:	7819      	ldrb	r1, [r3, #0]
 800b8a0:	220f      	movs	r2, #15
 800b8a2:	18bb      	adds	r3, r7, r2
 800b8a4:	18ba      	adds	r2, r7, r2
 800b8a6:	7812      	ldrb	r2, [r2, #0]
 800b8a8:	404a      	eors	r2, r1
 800b8aa:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b8ac:	230d      	movs	r3, #13
 800b8ae:	18fb      	adds	r3, r7, r3
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e01b      	b.n	800b8ee <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800b8b6:	210f      	movs	r1, #15
 800b8b8:	187b      	adds	r3, r7, r1
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	b25b      	sxtb	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	da09      	bge.n	800b8d6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800b8c2:	187b      	adds	r3, r7, r1
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	b25b      	sxtb	r3, r3
 800b8ca:	2231      	movs	r2, #49	@ 0x31
 800b8cc:	4053      	eors	r3, r2
 800b8ce:	b25a      	sxtb	r2, r3
 800b8d0:	187b      	adds	r3, r7, r1
 800b8d2:	701a      	strb	r2, [r3, #0]
 800b8d4:	e005      	b.n	800b8e2 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800b8d6:	230f      	movs	r3, #15
 800b8d8:	18fa      	adds	r2, r7, r3
 800b8da:	18fb      	adds	r3, r7, r3
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	18db      	adds	r3, r3, r3
 800b8e0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b8e2:	210d      	movs	r1, #13
 800b8e4:	187b      	adds	r3, r7, r1
 800b8e6:	781a      	ldrb	r2, [r3, #0]
 800b8e8:	187b      	adds	r3, r7, r1
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	230d      	movs	r3, #13
 800b8f0:	18fb      	adds	r3, r7, r3
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b07      	cmp	r3, #7
 800b8f6:	d9de      	bls.n	800b8b6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b8f8:	210e      	movs	r1, #14
 800b8fa:	187b      	adds	r3, r7, r1
 800b8fc:	781a      	ldrb	r2, [r3, #0]
 800b8fe:	187b      	adds	r3, r7, r1
 800b900:	3201      	adds	r2, #1
 800b902:	701a      	strb	r2, [r3, #0]
 800b904:	230e      	movs	r3, #14
 800b906:	18fa      	adds	r2, r7, r3
 800b908:	1cfb      	adds	r3, r7, #3
 800b90a:	7812      	ldrb	r2, [r2, #0]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d3c0      	bcc.n	800b894 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800b912:	230f      	movs	r3, #15
 800b914:	18fb      	adds	r3, r7, r3
 800b916:	781b      	ldrb	r3, [r3, #0]
}
 800b918:	0018      	movs	r0, r3
 800b91a:	46bd      	mov	sp, r7
 800b91c:	b004      	add	sp, #16
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800b92a:	4b0a      	ldr	r3, [pc, #40]	@ (800b954 <HIDS_Init+0x34>)
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800b930:	4b09      	ldr	r3, [pc, #36]	@ (800b958 <HIDS_Init+0x38>)
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800b936:	4b09      	ldr	r3, [pc, #36]	@ (800b95c <HIDS_Init+0x3c>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	0018      	movs	r0, r3
 800b93c:	f000 f8da 	bl	800baf4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800b940:	4b07      	ldr	r3, [pc, #28]	@ (800b960 <HIDS_Init+0x40>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	0018      	movs	r0, r3
 800b946:	f000 f82b 	bl	800b9a0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	46bd      	mov	sp, r7
 800b94e:	b002      	add	sp, #8
 800b950:	bd80      	pop	{r7, pc}
 800b952:	46c0      	nop			@ (mov r8, r8)
 800b954:	200024a0 	.word	0x200024a0
 800b958:	200024a4 	.word	0x200024a4
 800b95c:	200000ca 	.word	0x200000ca
 800b960:	200000c9 	.word	0x200000c9

0800b964 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800b968:	f7ff fef4 	bl	800b754 <GetCurrentHalTicks>
 800b96c:	0002      	movs	r2, r0
 800b96e:	4b08      	ldr	r3, [pc, #32]	@ (800b990 <HIDS_StartMeasurement+0x2c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	18d2      	adds	r2, r2, r3
 800b974:	4b07      	ldr	r3, [pc, #28]	@ (800b994 <HIDS_StartMeasurement+0x30>)
 800b976:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800b978:	4b07      	ldr	r3, [pc, #28]	@ (800b998 <HIDS_StartMeasurement+0x34>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	0019      	movs	r1, r3
 800b97e:	2044      	movs	r0, #68	@ 0x44
 800b980:	f7ff ff56 	bl	800b830 <WriteRegister>
  MeasurementDone = false;
 800b984:	4b05      	ldr	r3, [pc, #20]	@ (800b99c <HIDS_StartMeasurement+0x38>)
 800b986:	2200      	movs	r2, #0
 800b988:	701a      	strb	r2, [r3, #0]
}
 800b98a:	46c0      	nop			@ (mov r8, r8)
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	200000d0 	.word	0x200000d0
 800b994:	200000cc 	.word	0x200000cc
 800b998:	200000ca 	.word	0x200000ca
 800b99c:	200024b6 	.word	0x200024b6

0800b9a0 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	0002      	movs	r2, r0
 800b9a8:	1dfb      	adds	r3, r7, #7
 800b9aa:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800b9ac:	4b03      	ldr	r3, [pc, #12]	@ (800b9bc <HIDS_SetHeaterMode+0x1c>)
 800b9ae:	1dfa      	adds	r2, r7, #7
 800b9b0:	7812      	ldrb	r2, [r2, #0]
 800b9b2:	701a      	strb	r2, [r3, #0]
}
 800b9b4:	46c0      	nop			@ (mov r8, r8)
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	b002      	add	sp, #8
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	200000c9 	.word	0x200000c9

0800b9c0 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800b9c0:	b590      	push	{r4, r7, lr}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	781a      	ldrb	r2, [r3, #0]
 800b9cc:	210c      	movs	r1, #12
 800b9ce:	187b      	adds	r3, r7, r1
 800b9d0:	701a      	strb	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	785a      	ldrb	r2, [r3, #1]
 800b9d6:	187b      	adds	r3, r7, r1
 800b9d8:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800b9da:	240f      	movs	r4, #15
 800b9dc:	193b      	adds	r3, r7, r4
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	7892      	ldrb	r2, [r2, #2]
 800b9e2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800b9e4:	187b      	adds	r3, r7, r1
 800b9e6:	2102      	movs	r1, #2
 800b9e8:	0018      	movs	r0, r3
 800b9ea:	f7ff ff43 	bl	800b874 <CalculateCRC>
 800b9ee:	0003      	movs	r3, r0
 800b9f0:	001a      	movs	r2, r3
 800b9f2:	193b      	adds	r3, r7, r4
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d007      	beq.n	800ba0a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800b9fa:	4a1a      	ldr	r2, [pc, #104]	@ (800ba64 <CheckCRC+0xa4>)
 800b9fc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba68 <CheckCRC+0xa8>)
 800b9fe:	0019      	movs	r1, r3
 800ba00:	2001      	movs	r0, #1
 800ba02:	f7ff fe35 	bl	800b670 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800ba06:	2300      	movs	r3, #0
 800ba08:	e027      	b.n	800ba5a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	78da      	ldrb	r2, [r3, #3]
 800ba0e:	2108      	movs	r1, #8
 800ba10:	187b      	adds	r3, r7, r1
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	791a      	ldrb	r2, [r3, #4]
 800ba18:	187b      	adds	r3, r7, r1
 800ba1a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800ba1c:	240e      	movs	r4, #14
 800ba1e:	193b      	adds	r3, r7, r4
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	7952      	ldrb	r2, [r2, #5]
 800ba24:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800ba26:	187b      	adds	r3, r7, r1
 800ba28:	2102      	movs	r1, #2
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	f7ff ff22 	bl	800b874 <CalculateCRC>
 800ba30:	0003      	movs	r3, r0
 800ba32:	001a      	movs	r2, r3
 800ba34:	193b      	adds	r3, r7, r4
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d00d      	beq.n	800ba58 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800ba3c:	4a0b      	ldr	r2, [pc, #44]	@ (800ba6c <CheckCRC+0xac>)
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <CheckCRC+0xa8>)
 800ba40:	0019      	movs	r1, r3
 800ba42:	2001      	movs	r0, #1
 800ba44:	f7ff fe14 	bl	800b670 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800ba48:	4a09      	ldr	r2, [pc, #36]	@ (800ba70 <CheckCRC+0xb0>)
 800ba4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba74 <CheckCRC+0xb4>)
 800ba4c:	2170      	movs	r1, #112	@ 0x70
 800ba4e:	0018      	movs	r0, r3
 800ba50:	f7ff feba 	bl	800b7c8 <errorHandler>
		return false;
 800ba54:	2300      	movs	r3, #0
 800ba56:	e000      	b.n	800ba5a <CheckCRC+0x9a>
	}
	return true;
 800ba58:	2301      	movs	r3, #1
}
 800ba5a:	0018      	movs	r0, r3
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	b005      	add	sp, #20
 800ba60:	bd90      	pop	{r4, r7, pc}
 800ba62:	46c0      	nop			@ (mov r8, r8)
 800ba64:	080203f0 	.word	0x080203f0
 800ba68:	08020418 	.word	0x08020418
 800ba6c:	0802041c 	.word	0x0802041c
 800ba70:	08020448 	.word	0x08020448
 800ba74:	080208a4 	.word	0x080208a4

0800ba78 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800ba7e:	1dbb      	adds	r3, r7, #6
 800ba80:	2289      	movs	r2, #137	@ 0x89
 800ba82:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800ba84:	1dbb      	adds	r3, r7, #6
 800ba86:	2201      	movs	r2, #1
 800ba88:	0019      	movs	r1, r3
 800ba8a:	2044      	movs	r0, #68	@ 0x44
 800ba8c:	f7ff fed0 	bl	800b830 <WriteRegister>
	HAL_Delay(30);
 800ba90:	201e      	movs	r0, #30
 800ba92:	f000 f999 	bl	800bdc8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800ba96:	4b14      	ldr	r3, [pc, #80]	@ (800bae8 <HIDS_DeviceConnected+0x70>)
 800ba98:	2206      	movs	r2, #6
 800ba9a:	0019      	movs	r1, r3
 800ba9c:	2044      	movs	r0, #68	@ 0x44
 800ba9e:	f7ff fea5 	bl	800b7ec <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800baa2:	1dfb      	adds	r3, r7, #7
 800baa4:	2200      	movs	r2, #0
 800baa6:	701a      	strb	r2, [r3, #0]
 800baa8:	e011      	b.n	800bace <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800baaa:	1dfb      	adds	r3, r7, #7
 800baac:	7818      	ldrb	r0, [r3, #0]
 800baae:	1dfb      	adds	r3, r7, #7
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	4a0d      	ldr	r2, [pc, #52]	@ (800bae8 <HIDS_DeviceConnected+0x70>)
 800bab4:	5cd3      	ldrb	r3, [r2, r3]
 800bab6:	4a0d      	ldr	r2, [pc, #52]	@ (800baec <HIDS_DeviceConnected+0x74>)
 800bab8:	490d      	ldr	r1, [pc, #52]	@ (800baf0 <HIDS_DeviceConnected+0x78>)
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	0003      	movs	r3, r0
 800babe:	2002      	movs	r0, #2
 800bac0:	f7ff fdd6 	bl	800b670 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800bac4:	1dfb      	adds	r3, r7, #7
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	1dfb      	adds	r3, r7, #7
 800baca:	3201      	adds	r2, #1
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	1dfb      	adds	r3, r7, #7
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b05      	cmp	r3, #5
 800bad4:	d9e9      	bls.n	800baaa <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800bad6:	4b04      	ldr	r3, [pc, #16]	@ (800bae8 <HIDS_DeviceConnected+0x70>)
 800bad8:	0018      	movs	r0, r3
 800bada:	f7ff ff71 	bl	800b9c0 <CheckCRC>
 800bade:	0003      	movs	r3, r0
}
 800bae0:	0018      	movs	r0, r3
 800bae2:	46bd      	mov	sp, r7
 800bae4:	b002      	add	sp, #8
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	200024a8 	.word	0x200024a8
 800baec:	08020460 	.word	0x08020460
 800baf0:	080203ec 	.word	0x080203ec

0800baf4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	0002      	movs	r2, r0
 800bafc:	1dfb      	adds	r3, r7, #7
 800bafe:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800bb00:	4b03      	ldr	r3, [pc, #12]	@ (800bb10 <HIDS_SetMeasurementMode+0x1c>)
 800bb02:	1dfa      	adds	r2, r7, #7
 800bb04:	7812      	ldrb	r2, [r2, #0]
 800bb06:	701a      	strb	r2, [r3, #0]
}
 800bb08:	46c0      	nop			@ (mov r8, r8)
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	b002      	add	sp, #8
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	200000ca 	.word	0x200000ca

0800bb14 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800bb18:	4b04      	ldr	r3, [pc, #16]	@ (800bb2c <HIDS_MeasurementReady+0x18>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f7ff fd51 	bl	800b5c4 <TimestampIsReached>
 800bb22:	0003      	movs	r3, r0
}
 800bb24:	0018      	movs	r0, r3
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	46c0      	nop			@ (mov r8, r8)
 800bb2c:	200000cc 	.word	0x200000cc

0800bb30 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b089      	sub	sp, #36	@ 0x24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800bb3a:	4b4e      	ldr	r3, [pc, #312]	@ (800bc74 <HIDS_GetMeasurementValues+0x144>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <HIDS_GetMeasurementValues+0x16>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e091      	b.n	800bc6a <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 800bb46:	f7ff ffe5 	bl	800bb14 <HIDS_MeasurementReady>
 800bb4a:	0003      	movs	r3, r0
 800bb4c:	001a      	movs	r2, r3
 800bb4e:	2301      	movs	r3, #1
 800bb50:	4053      	eors	r3, r2
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <HIDS_GetMeasurementValues+0x2c>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e086      	b.n	800bc6a <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800bb5c:	4b46      	ldr	r3, [pc, #280]	@ (800bc78 <HIDS_GetMeasurementValues+0x148>)
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	4b46      	ldr	r3, [pc, #280]	@ (800bc7c <HIDS_GetMeasurementValues+0x14c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	0019      	movs	r1, r3
 800bb66:	0010      	movs	r0, r2
 800bb68:	f7f4 fb1c 	bl	80001a4 <__udivsi3>
 800bb6c:	0003      	movs	r3, r0
 800bb6e:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800bb70:	2317      	movs	r3, #23
 800bb72:	18fc      	adds	r4, r7, r3
 800bb74:	4b42      	ldr	r3, [pc, #264]	@ (800bc80 <HIDS_GetMeasurementValues+0x150>)
 800bb76:	2206      	movs	r2, #6
 800bb78:	0019      	movs	r1, r3
 800bb7a:	2044      	movs	r0, #68	@ 0x44
 800bb7c:	f7ff fe36 	bl	800b7ec <ReadRegister>
 800bb80:	0003      	movs	r3, r0
 800bb82:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800bb84:	4b3e      	ldr	r3, [pc, #248]	@ (800bc80 <HIDS_GetMeasurementValues+0x150>)
 800bb86:	0018      	movs	r0, r3
 800bb88:	f7ff ff1a 	bl	800b9c0 <CheckCRC>
 800bb8c:	0003      	movs	r3, r0
 800bb8e:	001a      	movs	r2, r3
 800bb90:	2301      	movs	r3, #1
 800bb92:	4053      	eors	r3, r2
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d011      	beq.n	800bbbe <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800bb9a:	231f      	movs	r3, #31
 800bb9c:	18fb      	adds	r3, r7, r3
 800bb9e:	2200      	movs	r2, #0
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e005      	b.n	800bbb0 <HIDS_GetMeasurementValues+0x80>
 800bba4:	211f      	movs	r1, #31
 800bba6:	187b      	adds	r3, r7, r1
 800bba8:	781a      	ldrb	r2, [r3, #0]
 800bbaa:	187b      	adds	r3, r7, r1
 800bbac:	3201      	adds	r2, #1
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	231f      	movs	r3, #31
 800bbb2:	18fb      	adds	r3, r7, r3
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	2b05      	cmp	r3, #5
 800bbb8:	d9f4      	bls.n	800bba4 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e055      	b.n	800bc6a <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800bbbe:	4b30      	ldr	r3, [pc, #192]	@ (800bc80 <HIDS_GetMeasurementValues+0x150>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	021b      	lsls	r3, r3, #8
 800bbc4:	4a2e      	ldr	r2, [pc, #184]	@ (800bc80 <HIDS_GetMeasurementValues+0x150>)
 800bbc6:	7852      	ldrb	r2, [r2, #1]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	22af      	movs	r2, #175	@ 0xaf
 800bbcc:	4353      	muls	r3, r2
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f7f7 fbf6 	bl	80033c0 <__aeabi_i2d>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4b2b      	ldr	r3, [pc, #172]	@ (800bc84 <HIDS_GetMeasurementValues+0x154>)
 800bbd8:	f7f6 f8ec 	bl	8001db4 <__aeabi_ddiv>
 800bbdc:	0002      	movs	r2, r0
 800bbde:	000b      	movs	r3, r1
 800bbe0:	0010      	movs	r0, r2
 800bbe2:	0019      	movs	r1, r3
 800bbe4:	f7f7 fc86 	bl	80034f4 <__aeabi_d2f>
 800bbe8:	1c03      	adds	r3, r0, #0
 800bbea:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800bbec:	4926      	ldr	r1, [pc, #152]	@ (800bc88 <HIDS_GetMeasurementValues+0x158>)
 800bbee:	6938      	ldr	r0, [r7, #16]
 800bbf0:	f7f5 fb14 	bl	800121c <__aeabi_fsub>
 800bbf4:	1c03      	adds	r3, r0, #0
 800bbf6:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800bbf8:	4b21      	ldr	r3, [pc, #132]	@ (800bc80 <HIDS_GetMeasurementValues+0x150>)
 800bbfa:	78db      	ldrb	r3, [r3, #3]
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	4a20      	ldr	r2, [pc, #128]	@ (800bc80 <HIDS_GetMeasurementValues+0x150>)
 800bc00:	7912      	ldrb	r2, [r2, #4]
 800bc02:	431a      	orrs	r2, r3
 800bc04:	0013      	movs	r3, r2
 800bc06:	015b      	lsls	r3, r3, #5
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	189b      	adds	r3, r3, r2
 800bc0e:	0018      	movs	r0, r3
 800bc10:	f7f7 fbd6 	bl	80033c0 <__aeabi_i2d>
 800bc14:	2200      	movs	r2, #0
 800bc16:	4b1b      	ldr	r3, [pc, #108]	@ (800bc84 <HIDS_GetMeasurementValues+0x154>)
 800bc18:	f7f6 f8cc 	bl	8001db4 <__aeabi_ddiv>
 800bc1c:	0002      	movs	r2, r0
 800bc1e:	000b      	movs	r3, r1
 800bc20:	0010      	movs	r0, r2
 800bc22:	0019      	movs	r1, r3
 800bc24:	f7f7 fc66 	bl	80034f4 <__aeabi_d2f>
 800bc28:	1c03      	adds	r3, r0, #0
 800bc2a:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800bc2c:	4917      	ldr	r1, [pc, #92]	@ (800bc8c <HIDS_GetMeasurementValues+0x15c>)
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7f5 faf4 	bl	800121c <__aeabi_fsub>
 800bc34:	1c03      	adds	r3, r0, #0
 800bc36:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	0011      	movs	r1, r2
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	f7fd fcf8 	bl	8009640 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	1c11      	adds	r1, r2, #0
 800bc56:	1c18      	adds	r0, r3, #0
 800bc58:	f7f7 fe20 	bl	800389c <ESP_GetHT>

   measurements = 0;
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc90 <HIDS_GetMeasurementValues+0x160>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800bc62:	4b04      	ldr	r3, [pc, #16]	@ (800bc74 <HIDS_GetMeasurementValues+0x144>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800bc68:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	b009      	add	sp, #36	@ 0x24
 800bc70:	bd90      	pop	{r4, r7, pc}
 800bc72:	46c0      	nop			@ (mov r8, r8)
 800bc74:	200024b6 	.word	0x200024b6
 800bc78:	200000d4 	.word	0x200000d4
 800bc7c:	200000d0 	.word	0x200000d0
 800bc80:	200024b0 	.word	0x200024b0
 800bc84:	40efffe0 	.word	0x40efffe0
 800bc88:	42340000 	.word	0x42340000
 800bc8c:	40c00000 	.word	0x40c00000
 800bc90:	200024b8 	.word	0x200024b8

0800bc94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800bc94:	480d      	ldr	r0, [pc, #52]	@ (800bccc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800bc96:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800bc98:	f7ff f8ea 	bl	800ae70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bc9c:	480c      	ldr	r0, [pc, #48]	@ (800bcd0 <LoopForever+0x6>)
  ldr r1, =_edata
 800bc9e:	490d      	ldr	r1, [pc, #52]	@ (800bcd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800bca0:	4a0d      	ldr	r2, [pc, #52]	@ (800bcd8 <LoopForever+0xe>)
  movs r3, #0
 800bca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bca4:	e002      	b.n	800bcac <LoopCopyDataInit>

0800bca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bcaa:	3304      	adds	r3, #4

0800bcac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bcac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bcae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bcb0:	d3f9      	bcc.n	800bca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bcb2:	4a0a      	ldr	r2, [pc, #40]	@ (800bcdc <LoopForever+0x12>)
  ldr r4, =_ebss
 800bcb4:	4c0a      	ldr	r4, [pc, #40]	@ (800bce0 <LoopForever+0x16>)
  movs r3, #0
 800bcb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bcb8:	e001      	b.n	800bcbe <LoopFillZerobss>

0800bcba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bcba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bcbc:	3204      	adds	r2, #4

0800bcbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bcbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bcc0:	d3fb      	bcc.n	800bcba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bcc2:	f010 fc53 	bl	801c56c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bcc6:	f7fb f98d 	bl	8006fe4 <main>

0800bcca <LoopForever>:

LoopForever:
    b LoopForever
 800bcca:	e7fe      	b.n	800bcca <LoopForever>
   ldr   r0, =_estack
 800bccc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800bcd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bcd4:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800bcd8:	08021228 	.word	0x08021228
  ldr r2, =_sbss
 800bcdc:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800bce0:	200038c0 	.word	0x200038c0

0800bce4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bce4:	e7fe      	b.n	800bce4 <ADC1_COMP_IRQHandler>
	...

0800bce8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bcee:	1dfb      	adds	r3, r7, #7
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800bcf4:	4b0b      	ldr	r3, [pc, #44]	@ (800bd24 <HAL_Init+0x3c>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd24 <HAL_Init+0x3c>)
 800bcfa:	2140      	movs	r1, #64	@ 0x40
 800bcfc:	430a      	orrs	r2, r1
 800bcfe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bd00:	2003      	movs	r0, #3
 800bd02:	f000 f811 	bl	800bd28 <HAL_InitTick>
 800bd06:	1e03      	subs	r3, r0, #0
 800bd08:	d003      	beq.n	800bd12 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800bd0a:	1dfb      	adds	r3, r7, #7
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	e001      	b.n	800bd16 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bd12:	f7fe ff77 	bl	800ac04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bd16:	1dfb      	adds	r3, r7, #7
 800bd18:	781b      	ldrb	r3, [r3, #0]
}
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	b002      	add	sp, #8
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	46c0      	nop			@ (mov r8, r8)
 800bd24:	40022000 	.word	0x40022000

0800bd28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bd28:	b590      	push	{r4, r7, lr}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bd30:	4b14      	ldr	r3, [pc, #80]	@ (800bd84 <HAL_InitTick+0x5c>)
 800bd32:	681c      	ldr	r4, [r3, #0]
 800bd34:	4b14      	ldr	r3, [pc, #80]	@ (800bd88 <HAL_InitTick+0x60>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	0019      	movs	r1, r3
 800bd3a:	23fa      	movs	r3, #250	@ 0xfa
 800bd3c:	0098      	lsls	r0, r3, #2
 800bd3e:	f7f4 fa31 	bl	80001a4 <__udivsi3>
 800bd42:	0003      	movs	r3, r0
 800bd44:	0019      	movs	r1, r3
 800bd46:	0020      	movs	r0, r4
 800bd48:	f7f4 fa2c 	bl	80001a4 <__udivsi3>
 800bd4c:	0003      	movs	r3, r0
 800bd4e:	0018      	movs	r0, r3
 800bd50:	f000 fccb 	bl	800c6ea <HAL_SYSTICK_Config>
 800bd54:	1e03      	subs	r3, r0, #0
 800bd56:	d001      	beq.n	800bd5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e00f      	b.n	800bd7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d80b      	bhi.n	800bd7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bd62:	6879      	ldr	r1, [r7, #4]
 800bd64:	2301      	movs	r3, #1
 800bd66:	425b      	negs	r3, r3
 800bd68:	2200      	movs	r2, #0
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	f000 fc98 	bl	800c6a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bd70:	4b06      	ldr	r3, [pc, #24]	@ (800bd8c <HAL_InitTick+0x64>)
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	e000      	b.n	800bd7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
}
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	b003      	add	sp, #12
 800bd82:	bd90      	pop	{r4, r7, pc}
 800bd84:	200000c4 	.word	0x200000c4
 800bd88:	200000dc 	.word	0x200000dc
 800bd8c:	200000d8 	.word	0x200000d8

0800bd90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bd94:	4b05      	ldr	r3, [pc, #20]	@ (800bdac <HAL_IncTick+0x1c>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	001a      	movs	r2, r3
 800bd9a:	4b05      	ldr	r3, [pc, #20]	@ (800bdb0 <HAL_IncTick+0x20>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	18d2      	adds	r2, r2, r3
 800bda0:	4b03      	ldr	r3, [pc, #12]	@ (800bdb0 <HAL_IncTick+0x20>)
 800bda2:	601a      	str	r2, [r3, #0]
}
 800bda4:	46c0      	nop			@ (mov r8, r8)
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	46c0      	nop			@ (mov r8, r8)
 800bdac:	200000dc 	.word	0x200000dc
 800bdb0:	200024bc 	.word	0x200024bc

0800bdb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	af00      	add	r7, sp, #0
  return uwTick;
 800bdb8:	4b02      	ldr	r3, [pc, #8]	@ (800bdc4 <HAL_GetTick+0x10>)
 800bdba:	681b      	ldr	r3, [r3, #0]
}
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	46c0      	nop			@ (mov r8, r8)
 800bdc4:	200024bc 	.word	0x200024bc

0800bdc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bdd0:	f7ff fff0 	bl	800bdb4 <HAL_GetTick>
 800bdd4:	0003      	movs	r3, r0
 800bdd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3301      	adds	r3, #1
 800bde0:	d005      	beq.n	800bdee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bde2:	4b0a      	ldr	r3, [pc, #40]	@ (800be0c <HAL_Delay+0x44>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	001a      	movs	r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	189b      	adds	r3, r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bdee:	46c0      	nop			@ (mov r8, r8)
 800bdf0:	f7ff ffe0 	bl	800bdb4 <HAL_GetTick>
 800bdf4:	0002      	movs	r2, r0
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d8f7      	bhi.n	800bdf0 <HAL_Delay+0x28>
  {
  }
}
 800be00:	46c0      	nop			@ (mov r8, r8)
 800be02:	46c0      	nop			@ (mov r8, r8)
 800be04:	46bd      	mov	sp, r7
 800be06:	b004      	add	sp, #16
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	46c0      	nop			@ (mov r8, r8)
 800be0c:	200000dc 	.word	0x200000dc

0800be10 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800be14:	4b02      	ldr	r3, [pc, #8]	@ (800be20 <HAL_GetUIDw0+0x10>)
 800be16:	681b      	ldr	r3, [r3, #0]
}
 800be18:	0018      	movs	r0, r3
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	46c0      	nop			@ (mov r8, r8)
 800be20:	1ff80050 	.word	0x1ff80050

0800be24 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800be28:	4b02      	ldr	r3, [pc, #8]	@ (800be34 <HAL_GetUIDw1+0x10>)
 800be2a:	681b      	ldr	r3, [r3, #0]
}
 800be2c:	0018      	movs	r0, r3
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	46c0      	nop			@ (mov r8, r8)
 800be34:	1ff80054 	.word	0x1ff80054

0800be38 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800be3c:	4b02      	ldr	r3, [pc, #8]	@ (800be48 <HAL_GetUIDw2+0x10>)
 800be3e:	681b      	ldr	r3, [r3, #0]
}
 800be40:	0018      	movs	r0, r3
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	46c0      	nop			@ (mov r8, r8)
 800be48:	1ff80064 	.word	0x1ff80064

0800be4c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e159      	b.n	800c112 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10a      	bne.n	800be7c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2250      	movs	r2, #80	@ 0x50
 800be70:	2100      	movs	r1, #0
 800be72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	0018      	movs	r0, r3
 800be78:	f7fa faf6 	bl	8006468 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be80:	2210      	movs	r2, #16
 800be82:	4013      	ands	r3, r2
 800be84:	2b10      	cmp	r3, #16
 800be86:	d005      	beq.n	800be94 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	2204      	movs	r2, #4
 800be90:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800be92:	d00b      	beq.n	800beac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be98:	2210      	movs	r2, #16
 800be9a:	431a      	orrs	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2250      	movs	r2, #80	@ 0x50
 800bea4:	2100      	movs	r1, #0
 800bea6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e132      	b.n	800c112 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beb0:	4a9a      	ldr	r2, [pc, #616]	@ (800c11c <HAL_ADC_Init+0x2d0>)
 800beb2:	4013      	ands	r3, r2
 800beb4:	2202      	movs	r2, #2
 800beb6:	431a      	orrs	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	2203      	movs	r2, #3
 800bec4:	4013      	ands	r3, r2
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d108      	bne.n	800bedc <HAL_ADC_Init+0x90>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2201      	movs	r2, #1
 800bed2:	4013      	ands	r3, r2
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d101      	bne.n	800bedc <HAL_ADC_Init+0x90>
 800bed8:	2301      	movs	r3, #1
 800beda:	e000      	b.n	800bede <HAL_ADC_Init+0x92>
 800bedc:	2300      	movs	r3, #0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d149      	bne.n	800bf76 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	23c0      	movs	r3, #192	@ 0xc0
 800bee8:	061b      	lsls	r3, r3, #24
 800beea:	429a      	cmp	r2, r3
 800beec:	d00b      	beq.n	800bf06 <HAL_ADC_Init+0xba>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	2380      	movs	r3, #128	@ 0x80
 800bef4:	05db      	lsls	r3, r3, #23
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d005      	beq.n	800bf06 <HAL_ADC_Init+0xba>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	2380      	movs	r3, #128	@ 0x80
 800bf00:	061b      	lsls	r3, r3, #24
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d111      	bne.n	800bf2a <HAL_ADC_Init+0xde>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	691a      	ldr	r2, [r3, #16]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	0092      	lsls	r2, r2, #2
 800bf12:	0892      	lsrs	r2, r2, #2
 800bf14:	611a      	str	r2, [r3, #16]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6919      	ldr	r1, [r3, #16]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	430a      	orrs	r2, r1
 800bf26:	611a      	str	r2, [r3, #16]
 800bf28:	e014      	b.n	800bf54 <HAL_ADC_Init+0x108>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	691a      	ldr	r2, [r3, #16]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	0092      	lsls	r2, r2, #2
 800bf36:	0892      	lsrs	r2, r2, #2
 800bf38:	611a      	str	r2, [r3, #16]
 800bf3a:	4b79      	ldr	r3, [pc, #484]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	4b78      	ldr	r3, [pc, #480]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf40:	4978      	ldr	r1, [pc, #480]	@ (800c124 <HAL_ADC_Init+0x2d8>)
 800bf42:	400a      	ands	r2, r1
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	4b76      	ldr	r3, [pc, #472]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf48:	6819      	ldr	r1, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	4b74      	ldr	r3, [pc, #464]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf50:	430a      	orrs	r2, r1
 800bf52:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68da      	ldr	r2, [r3, #12]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2118      	movs	r1, #24
 800bf60:	438a      	bics	r2, r1
 800bf62:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68d9      	ldr	r1, [r3, #12]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689a      	ldr	r2, [r3, #8]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800bf76:	4b6a      	ldr	r3, [pc, #424]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	4b69      	ldr	r3, [pc, #420]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf7c:	496a      	ldr	r1, [pc, #424]	@ (800c128 <HAL_ADC_Init+0x2dc>)
 800bf7e:	400a      	ands	r2, r1
 800bf80:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800bf82:	4b67      	ldr	r3, [pc, #412]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf84:	6819      	ldr	r1, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf8a:	065a      	lsls	r2, r3, #25
 800bf8c:	4b64      	ldr	r3, [pc, #400]	@ (800c120 <HAL_ADC_Init+0x2d4>)
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	689a      	ldr	r2, [r3, #8]
 800bf98:	2380      	movs	r3, #128	@ 0x80
 800bf9a:	055b      	lsls	r3, r3, #21
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	d108      	bne.n	800bfb2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2180      	movs	r1, #128	@ 0x80
 800bfac:	0549      	lsls	r1, r1, #21
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	495b      	ldr	r1, [pc, #364]	@ (800c12c <HAL_ADC_Init+0x2e0>)
 800bfbe:	400a      	ands	r2, r1
 800bfc0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68d9      	ldr	r1, [r3, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d101      	bne.n	800bfd8 <HAL_ADC_Init+0x18c>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	e000      	b.n	800bfda <HAL_ADC_Init+0x18e>
 800bfd8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800bfda:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2020      	movs	r0, #32
 800bfe0:	5c1b      	ldrb	r3, [r3, r0]
 800bfe2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800bfe4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	202c      	movs	r0, #44	@ 0x2c
 800bfea:	5c1b      	ldrb	r3, [r3, r0]
 800bfec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800bfee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bff4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800bffc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	69db      	ldr	r3, [r3, #28]
 800c002:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c004:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c012:	23c2      	movs	r3, #194	@ 0xc2
 800c014:	33ff      	adds	r3, #255	@ 0xff
 800c016:	429a      	cmp	r2, r3
 800c018:	d00b      	beq.n	800c032 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68d9      	ldr	r1, [r3, #12]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c028:	431a      	orrs	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2221      	movs	r2, #33	@ 0x21
 800c036:	5c9b      	ldrb	r3, [r3, r2]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d11a      	bne.n	800c072 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2220      	movs	r2, #32
 800c040:	5c9b      	ldrb	r3, [r3, r2]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2180      	movs	r1, #128	@ 0x80
 800c052:	0249      	lsls	r1, r1, #9
 800c054:	430a      	orrs	r2, r1
 800c056:	60da      	str	r2, [r3, #12]
 800c058:	e00b      	b.n	800c072 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c05e:	2220      	movs	r2, #32
 800c060:	431a      	orrs	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c06a:	2201      	movs	r2, #1
 800c06c:	431a      	orrs	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c076:	2b01      	cmp	r3, #1
 800c078:	d11f      	bne.n	800c0ba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	691a      	ldr	r2, [r3, #16]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	492a      	ldr	r1, [pc, #168]	@ (800c130 <HAL_ADC_Init+0x2e4>)
 800c086:	400a      	ands	r2, r1
 800c088:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6919      	ldr	r1, [r3, #16]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c098:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800c09e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	430a      	orrs	r2, r1
 800c0a6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	611a      	str	r2, [r3, #16]
 800c0b8:	e00e      	b.n	800c0d8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d107      	bne.n	800c0d8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	691a      	ldr	r2, [r3, #16]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2101      	movs	r1, #1
 800c0d4:	438a      	bics	r2, r1
 800c0d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695a      	ldr	r2, [r3, #20]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2107      	movs	r1, #7
 800c0e4:	438a      	bics	r2, r1
 800c0e6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6959      	ldr	r1, [r3, #20]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c104:	2203      	movs	r2, #3
 800c106:	4393      	bics	r3, r2
 800c108:	2201      	movs	r2, #1
 800c10a:	431a      	orrs	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	0018      	movs	r0, r3
 800c114:	46bd      	mov	sp, r7
 800c116:	b002      	add	sp, #8
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	46c0      	nop			@ (mov r8, r8)
 800c11c:	fffffefd 	.word	0xfffffefd
 800c120:	40012708 	.word	0x40012708
 800c124:	ffc3ffff 	.word	0xffc3ffff
 800c128:	fdffffff 	.word	0xfdffffff
 800c12c:	fffe0219 	.word	0xfffe0219
 800c130:	fffffc03 	.word	0xfffffc03

0800c134 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c134:	b590      	push	{r4, r7, lr}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c13c:	230f      	movs	r3, #15
 800c13e:	18fb      	adds	r3, r7, r3
 800c140:	2200      	movs	r2, #0
 800c142:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	2204      	movs	r2, #4
 800c14c:	4013      	ands	r3, r2
 800c14e:	d138      	bne.n	800c1c2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2250      	movs	r2, #80	@ 0x50
 800c154:	5c9b      	ldrb	r3, [r3, r2]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d101      	bne.n	800c15e <HAL_ADC_Start+0x2a>
 800c15a:	2302      	movs	r3, #2
 800c15c:	e038      	b.n	800c1d0 <HAL_ADC_Start+0x9c>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2250      	movs	r2, #80	@ 0x50
 800c162:	2101      	movs	r1, #1
 800c164:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d007      	beq.n	800c17e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800c16e:	230f      	movs	r3, #15
 800c170:	18fc      	adds	r4, r7, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	0018      	movs	r0, r3
 800c176:	f000 f95f 	bl	800c438 <ADC_Enable>
 800c17a:	0003      	movs	r3, r0
 800c17c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c17e:	230f      	movs	r3, #15
 800c180:	18fb      	adds	r3, r7, r3
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d120      	bne.n	800c1ca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c18c:	4a12      	ldr	r2, [pc, #72]	@ (800c1d8 <HAL_ADC_Start+0xa4>)
 800c18e:	4013      	ands	r3, r2
 800c190:	2280      	movs	r2, #128	@ 0x80
 800c192:	0052      	lsls	r2, r2, #1
 800c194:	431a      	orrs	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2250      	movs	r2, #80	@ 0x50
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	221c      	movs	r2, #28
 800c1ae:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689a      	ldr	r2, [r3, #8]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2104      	movs	r1, #4
 800c1bc:	430a      	orrs	r2, r1
 800c1be:	609a      	str	r2, [r3, #8]
 800c1c0:	e003      	b.n	800c1ca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c1c2:	230f      	movs	r3, #15
 800c1c4:	18fb      	adds	r3, r7, r3
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800c1ca:	230f      	movs	r3, #15
 800c1cc:	18fb      	adds	r3, r7, r3
 800c1ce:	781b      	ldrb	r3, [r3, #0]
}
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	b005      	add	sp, #20
 800c1d6:	bd90      	pop	{r4, r7, pc}
 800c1d8:	fffff0fe 	.word	0xfffff0fe

0800c1dc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	2b08      	cmp	r3, #8
 800c1f4:	d102      	bne.n	800c1fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800c1f6:	2308      	movs	r3, #8
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	e014      	b.n	800c226 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	2201      	movs	r2, #1
 800c204:	4013      	ands	r3, r2
 800c206:	2b01      	cmp	r3, #1
 800c208:	d10b      	bne.n	800c222 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c20e:	2220      	movs	r2, #32
 800c210:	431a      	orrs	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2250      	movs	r2, #80	@ 0x50
 800c21a:	2100      	movs	r1, #0
 800c21c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e072      	b.n	800c308 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800c222:	230c      	movs	r3, #12
 800c224:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c226:	f7ff fdc5 	bl	800bdb4 <HAL_GetTick>
 800c22a:	0003      	movs	r3, r0
 800c22c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c22e:	e01f      	b.n	800c270 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	d01c      	beq.n	800c270 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d007      	beq.n	800c24c <HAL_ADC_PollForConversion+0x70>
 800c23c:	f7ff fdba 	bl	800bdb4 <HAL_GetTick>
 800c240:	0002      	movs	r2, r0
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d211      	bcs.n	800c270 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4013      	ands	r3, r2
 800c256:	d10b      	bne.n	800c270 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c25c:	2204      	movs	r2, #4
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2250      	movs	r2, #80	@ 0x50
 800c268:	2100      	movs	r1, #0
 800c26a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e04b      	b.n	800c308 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4013      	ands	r3, r2
 800c27a:	d0d9      	beq.n	800c230 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c280:	2280      	movs	r2, #128	@ 0x80
 800c282:	0092      	lsls	r2, r2, #2
 800c284:	431a      	orrs	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	23c0      	movs	r3, #192	@ 0xc0
 800c292:	011b      	lsls	r3, r3, #4
 800c294:	4013      	ands	r3, r2
 800c296:	d12e      	bne.n	800c2f6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2220      	movs	r2, #32
 800c29c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d129      	bne.n	800c2f6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2208      	movs	r2, #8
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d122      	bne.n	800c2f6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	2204      	movs	r2, #4
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	d110      	bne.n	800c2de <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	210c      	movs	r1, #12
 800c2c8:	438a      	bics	r2, r1
 800c2ca:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2d0:	4a0f      	ldr	r2, [pc, #60]	@ (800c310 <HAL_ADC_PollForConversion+0x134>)
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	431a      	orrs	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	655a      	str	r2, [r3, #84]	@ 0x54
 800c2dc:	e00b      	b.n	800c2f6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	431a      	orrs	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d103      	bne.n	800c306 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	220c      	movs	r2, #12
 800c304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	0018      	movs	r0, r3
 800c30a:	46bd      	mov	sp, r7
 800c30c:	b004      	add	sp, #16
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	fffffefe 	.word	0xfffffefe

0800c314 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c322:	0018      	movs	r0, r3
 800c324:	46bd      	mov	sp, r7
 800c326:	b002      	add	sp, #8
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2250      	movs	r2, #80	@ 0x50
 800c33a:	5c9b      	ldrb	r3, [r3, r2]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d101      	bne.n	800c344 <HAL_ADC_ConfigChannel+0x18>
 800c340:	2302      	movs	r3, #2
 800c342:	e06c      	b.n	800c41e <HAL_ADC_ConfigChannel+0xf2>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2250      	movs	r2, #80	@ 0x50
 800c348:	2101      	movs	r1, #1
 800c34a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	2204      	movs	r2, #4
 800c354:	4013      	ands	r3, r2
 800c356:	d00b      	beq.n	800c370 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c35c:	2220      	movs	r2, #32
 800c35e:	431a      	orrs	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2250      	movs	r2, #80	@ 0x50
 800c368:	2100      	movs	r1, #0
 800c36a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e056      	b.n	800c41e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	4a2c      	ldr	r2, [pc, #176]	@ (800c428 <HAL_ADC_ConfigChannel+0xfc>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d028      	beq.n	800c3cc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	035b      	lsls	r3, r3, #13
 800c386:	0b5a      	lsrs	r2, r3, #13
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	430a      	orrs	r2, r1
 800c38e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	2380      	movs	r3, #128	@ 0x80
 800c396:	02db      	lsls	r3, r3, #11
 800c398:	4013      	ands	r3, r2
 800c39a:	d009      	beq.n	800c3b0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800c39c:	4b23      	ldr	r3, [pc, #140]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	4b22      	ldr	r3, [pc, #136]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c3a2:	2180      	movs	r1, #128	@ 0x80
 800c3a4:	0409      	lsls	r1, r1, #16
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800c3aa:	200a      	movs	r0, #10
 800c3ac:	f000 f8ac 	bl	800c508 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	2380      	movs	r3, #128	@ 0x80
 800c3b6:	029b      	lsls	r3, r3, #10
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	d02b      	beq.n	800c414 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800c3bc:	4b1b      	ldr	r3, [pc, #108]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c3c2:	2180      	movs	r1, #128	@ 0x80
 800c3c4:	03c9      	lsls	r1, r1, #15
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	e023      	b.n	800c414 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	035b      	lsls	r3, r3, #13
 800c3d8:	0b5b      	lsrs	r3, r3, #13
 800c3da:	43d9      	mvns	r1, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	400a      	ands	r2, r1
 800c3e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	2380      	movs	r3, #128	@ 0x80
 800c3ea:	02db      	lsls	r3, r3, #11
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	d005      	beq.n	800c3fc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800c3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c3f6:	490e      	ldr	r1, [pc, #56]	@ (800c430 <HAL_ADC_ConfigChannel+0x104>)
 800c3f8:	400a      	ands	r2, r1
 800c3fa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	2380      	movs	r3, #128	@ 0x80
 800c402:	029b      	lsls	r3, r3, #10
 800c404:	4013      	ands	r3, r2
 800c406:	d005      	beq.n	800c414 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800c408:	4b08      	ldr	r3, [pc, #32]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	4b07      	ldr	r3, [pc, #28]	@ (800c42c <HAL_ADC_ConfigChannel+0x100>)
 800c40e:	4909      	ldr	r1, [pc, #36]	@ (800c434 <HAL_ADC_ConfigChannel+0x108>)
 800c410:	400a      	ands	r2, r1
 800c412:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2250      	movs	r2, #80	@ 0x50
 800c418:	2100      	movs	r1, #0
 800c41a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	0018      	movs	r0, r3
 800c420:	46bd      	mov	sp, r7
 800c422:	b002      	add	sp, #8
 800c424:	bd80      	pop	{r7, pc}
 800c426:	46c0      	nop			@ (mov r8, r8)
 800c428:	00001001 	.word	0x00001001
 800c42c:	40012708 	.word	0x40012708
 800c430:	ff7fffff 	.word	0xff7fffff
 800c434:	ffbfffff 	.word	0xffbfffff

0800c438 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c440:	2300      	movs	r3, #0
 800c442:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	2203      	movs	r2, #3
 800c44c:	4013      	ands	r3, r2
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d108      	bne.n	800c464 <ADC_Enable+0x2c>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2201      	movs	r2, #1
 800c45a:	4013      	ands	r3, r2
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d101      	bne.n	800c464 <ADC_Enable+0x2c>
 800c460:	2301      	movs	r3, #1
 800c462:	e000      	b.n	800c466 <ADC_Enable+0x2e>
 800c464:	2300      	movs	r3, #0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d146      	bne.n	800c4f8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	4a24      	ldr	r2, [pc, #144]	@ (800c504 <ADC_Enable+0xcc>)
 800c472:	4013      	ands	r3, r2
 800c474:	d00d      	beq.n	800c492 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c47a:	2210      	movs	r2, #16
 800c47c:	431a      	orrs	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c486:	2201      	movs	r2, #1
 800c488:	431a      	orrs	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e033      	b.n	800c4fa <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2101      	movs	r1, #1
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c4a2:	2001      	movs	r0, #1
 800c4a4:	f000 f830 	bl	800c508 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800c4a8:	f7ff fc84 	bl	800bdb4 <HAL_GetTick>
 800c4ac:	0003      	movs	r3, r0
 800c4ae:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c4b0:	e01b      	b.n	800c4ea <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c4b2:	f7ff fc7f 	bl	800bdb4 <HAL_GetTick>
 800c4b6:	0002      	movs	r2, r0
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	2b0a      	cmp	r3, #10
 800c4be:	d914      	bls.n	800c4ea <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d00d      	beq.n	800c4ea <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4d2:	2210      	movs	r2, #16
 800c4d4:	431a      	orrs	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4de:	2201      	movs	r2, #1
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e007      	b.n	800c4fa <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d1dc      	bne.n	800c4b2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	0018      	movs	r0, r3
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	b004      	add	sp, #16
 800c500:	bd80      	pop	{r7, pc}
 800c502:	46c0      	nop			@ (mov r8, r8)
 800c504:	80000017 	.word	0x80000017

0800c508 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c510:	4b0b      	ldr	r3, [pc, #44]	@ (800c540 <ADC_DelayMicroSecond+0x38>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	490b      	ldr	r1, [pc, #44]	@ (800c544 <ADC_DelayMicroSecond+0x3c>)
 800c516:	0018      	movs	r0, r3
 800c518:	f7f3 fe44 	bl	80001a4 <__udivsi3>
 800c51c:	0003      	movs	r3, r0
 800c51e:	001a      	movs	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4353      	muls	r3, r2
 800c524:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800c526:	e002      	b.n	800c52e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1f9      	bne.n	800c528 <ADC_DelayMicroSecond+0x20>
  }
}
 800c534:	46c0      	nop			@ (mov r8, r8)
 800c536:	46c0      	nop			@ (mov r8, r8)
 800c538:	46bd      	mov	sp, r7
 800c53a:	b004      	add	sp, #16
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	46c0      	nop			@ (mov r8, r8)
 800c540:	200000c4 	.word	0x200000c4
 800c544:	000f4240 	.word	0x000f4240

0800c548 <__NVIC_EnableIRQ>:
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	0002      	movs	r2, r0
 800c550:	1dfb      	adds	r3, r7, #7
 800c552:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c554:	1dfb      	adds	r3, r7, #7
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b7f      	cmp	r3, #127	@ 0x7f
 800c55a:	d809      	bhi.n	800c570 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c55c:	1dfb      	adds	r3, r7, #7
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	001a      	movs	r2, r3
 800c562:	231f      	movs	r3, #31
 800c564:	401a      	ands	r2, r3
 800c566:	4b04      	ldr	r3, [pc, #16]	@ (800c578 <__NVIC_EnableIRQ+0x30>)
 800c568:	2101      	movs	r1, #1
 800c56a:	4091      	lsls	r1, r2
 800c56c:	000a      	movs	r2, r1
 800c56e:	601a      	str	r2, [r3, #0]
}
 800c570:	46c0      	nop			@ (mov r8, r8)
 800c572:	46bd      	mov	sp, r7
 800c574:	b002      	add	sp, #8
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000e100 	.word	0xe000e100

0800c57c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c57c:	b590      	push	{r4, r7, lr}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	0002      	movs	r2, r0
 800c584:	6039      	str	r1, [r7, #0]
 800c586:	1dfb      	adds	r3, r7, #7
 800c588:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c58a:	1dfb      	adds	r3, r7, #7
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c590:	d828      	bhi.n	800c5e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c592:	4a2f      	ldr	r2, [pc, #188]	@ (800c650 <__NVIC_SetPriority+0xd4>)
 800c594:	1dfb      	adds	r3, r7, #7
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	b25b      	sxtb	r3, r3
 800c59a:	089b      	lsrs	r3, r3, #2
 800c59c:	33c0      	adds	r3, #192	@ 0xc0
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	589b      	ldr	r3, [r3, r2]
 800c5a2:	1dfa      	adds	r2, r7, #7
 800c5a4:	7812      	ldrb	r2, [r2, #0]
 800c5a6:	0011      	movs	r1, r2
 800c5a8:	2203      	movs	r2, #3
 800c5aa:	400a      	ands	r2, r1
 800c5ac:	00d2      	lsls	r2, r2, #3
 800c5ae:	21ff      	movs	r1, #255	@ 0xff
 800c5b0:	4091      	lsls	r1, r2
 800c5b2:	000a      	movs	r2, r1
 800c5b4:	43d2      	mvns	r2, r2
 800c5b6:	401a      	ands	r2, r3
 800c5b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	019b      	lsls	r3, r3, #6
 800c5be:	22ff      	movs	r2, #255	@ 0xff
 800c5c0:	401a      	ands	r2, r3
 800c5c2:	1dfb      	adds	r3, r7, #7
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	4003      	ands	r3, r0
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c5d0:	481f      	ldr	r0, [pc, #124]	@ (800c650 <__NVIC_SetPriority+0xd4>)
 800c5d2:	1dfb      	adds	r3, r7, #7
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	b25b      	sxtb	r3, r3
 800c5d8:	089b      	lsrs	r3, r3, #2
 800c5da:	430a      	orrs	r2, r1
 800c5dc:	33c0      	adds	r3, #192	@ 0xc0
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800c5e2:	e031      	b.n	800c648 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c5e4:	4a1b      	ldr	r2, [pc, #108]	@ (800c654 <__NVIC_SetPriority+0xd8>)
 800c5e6:	1dfb      	adds	r3, r7, #7
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	0019      	movs	r1, r3
 800c5ec:	230f      	movs	r3, #15
 800c5ee:	400b      	ands	r3, r1
 800c5f0:	3b08      	subs	r3, #8
 800c5f2:	089b      	lsrs	r3, r3, #2
 800c5f4:	3306      	adds	r3, #6
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	18d3      	adds	r3, r2, r3
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	1dfa      	adds	r2, r7, #7
 800c600:	7812      	ldrb	r2, [r2, #0]
 800c602:	0011      	movs	r1, r2
 800c604:	2203      	movs	r2, #3
 800c606:	400a      	ands	r2, r1
 800c608:	00d2      	lsls	r2, r2, #3
 800c60a:	21ff      	movs	r1, #255	@ 0xff
 800c60c:	4091      	lsls	r1, r2
 800c60e:	000a      	movs	r2, r1
 800c610:	43d2      	mvns	r2, r2
 800c612:	401a      	ands	r2, r3
 800c614:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	019b      	lsls	r3, r3, #6
 800c61a:	22ff      	movs	r2, #255	@ 0xff
 800c61c:	401a      	ands	r2, r3
 800c61e:	1dfb      	adds	r3, r7, #7
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	0018      	movs	r0, r3
 800c624:	2303      	movs	r3, #3
 800c626:	4003      	ands	r3, r0
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c62c:	4809      	ldr	r0, [pc, #36]	@ (800c654 <__NVIC_SetPriority+0xd8>)
 800c62e:	1dfb      	adds	r3, r7, #7
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	001c      	movs	r4, r3
 800c634:	230f      	movs	r3, #15
 800c636:	4023      	ands	r3, r4
 800c638:	3b08      	subs	r3, #8
 800c63a:	089b      	lsrs	r3, r3, #2
 800c63c:	430a      	orrs	r2, r1
 800c63e:	3306      	adds	r3, #6
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	18c3      	adds	r3, r0, r3
 800c644:	3304      	adds	r3, #4
 800c646:	601a      	str	r2, [r3, #0]
}
 800c648:	46c0      	nop			@ (mov r8, r8)
 800c64a:	46bd      	mov	sp, r7
 800c64c:	b003      	add	sp, #12
 800c64e:	bd90      	pop	{r4, r7, pc}
 800c650:	e000e100 	.word	0xe000e100
 800c654:	e000ed00 	.word	0xe000ed00

0800c658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	1e5a      	subs	r2, r3, #1
 800c664:	2380      	movs	r3, #128	@ 0x80
 800c666:	045b      	lsls	r3, r3, #17
 800c668:	429a      	cmp	r2, r3
 800c66a:	d301      	bcc.n	800c670 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c66c:	2301      	movs	r3, #1
 800c66e:	e010      	b.n	800c692 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c670:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <SysTick_Config+0x44>)
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	3a01      	subs	r2, #1
 800c676:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c678:	2301      	movs	r3, #1
 800c67a:	425b      	negs	r3, r3
 800c67c:	2103      	movs	r1, #3
 800c67e:	0018      	movs	r0, r3
 800c680:	f7ff ff7c 	bl	800c57c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c684:	4b05      	ldr	r3, [pc, #20]	@ (800c69c <SysTick_Config+0x44>)
 800c686:	2200      	movs	r2, #0
 800c688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c68a:	4b04      	ldr	r3, [pc, #16]	@ (800c69c <SysTick_Config+0x44>)
 800c68c:	2207      	movs	r2, #7
 800c68e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c690:	2300      	movs	r3, #0
}
 800c692:	0018      	movs	r0, r3
 800c694:	46bd      	mov	sp, r7
 800c696:	b002      	add	sp, #8
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	46c0      	nop			@ (mov r8, r8)
 800c69c:	e000e010 	.word	0xe000e010

0800c6a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
 800c6aa:	210f      	movs	r1, #15
 800c6ac:	187b      	adds	r3, r7, r1
 800c6ae:	1c02      	adds	r2, r0, #0
 800c6b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	187b      	adds	r3, r7, r1
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	b25b      	sxtb	r3, r3
 800c6ba:	0011      	movs	r1, r2
 800c6bc:	0018      	movs	r0, r3
 800c6be:	f7ff ff5d 	bl	800c57c <__NVIC_SetPriority>
}
 800c6c2:	46c0      	nop			@ (mov r8, r8)
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	b004      	add	sp, #16
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	0002      	movs	r2, r0
 800c6d2:	1dfb      	adds	r3, r7, #7
 800c6d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c6d6:	1dfb      	adds	r3, r7, #7
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	b25b      	sxtb	r3, r3
 800c6dc:	0018      	movs	r0, r3
 800c6de:	f7ff ff33 	bl	800c548 <__NVIC_EnableIRQ>
}
 800c6e2:	46c0      	nop			@ (mov r8, r8)
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	b002      	add	sp, #8
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	0018      	movs	r0, r3
 800c6f6:	f7ff ffaf 	bl	800c658 <SysTick_Config>
 800c6fa:	0003      	movs	r3, r0
}
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	46bd      	mov	sp, r7
 800c700:	b002      	add	sp, #8
 800c702:	bd80      	pop	{r7, pc}

0800c704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e061      	b.n	800c7da <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a32      	ldr	r2, [pc, #200]	@ (800c7e4 <HAL_DMA_Init+0xe0>)
 800c71c:	4694      	mov	ip, r2
 800c71e:	4463      	add	r3, ip
 800c720:	2114      	movs	r1, #20
 800c722:	0018      	movs	r0, r3
 800c724:	f7f3 fd3e 	bl	80001a4 <__udivsi3>
 800c728:	0003      	movs	r3, r0
 800c72a:	009a      	lsls	r2, r3, #2
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a2d      	ldr	r2, [pc, #180]	@ (800c7e8 <HAL_DMA_Init+0xe4>)
 800c734:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2225      	movs	r2, #37	@ 0x25
 800c73a:	2102      	movs	r1, #2
 800c73c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	4a28      	ldr	r2, [pc, #160]	@ (800c7ec <HAL_DMA_Init+0xe8>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c76e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	2380      	movs	r3, #128	@ 0x80
 800c78a:	01db      	lsls	r3, r3, #7
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d018      	beq.n	800c7c2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c790:	4b17      	ldr	r3, [pc, #92]	@ (800c7f0 <HAL_DMA_Init+0xec>)
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c798:	211c      	movs	r1, #28
 800c79a:	400b      	ands	r3, r1
 800c79c:	210f      	movs	r1, #15
 800c79e:	4099      	lsls	r1, r3
 800c7a0:	000b      	movs	r3, r1
 800c7a2:	43d9      	mvns	r1, r3
 800c7a4:	4b12      	ldr	r3, [pc, #72]	@ (800c7f0 <HAL_DMA_Init+0xec>)
 800c7a6:	400a      	ands	r2, r1
 800c7a8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c7aa:	4b11      	ldr	r3, [pc, #68]	@ (800c7f0 <HAL_DMA_Init+0xec>)
 800c7ac:	6819      	ldr	r1, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7b6:	201c      	movs	r0, #28
 800c7b8:	4003      	ands	r3, r0
 800c7ba:	409a      	lsls	r2, r3
 800c7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c7f0 <HAL_DMA_Init+0xec>)
 800c7be:	430a      	orrs	r2, r1
 800c7c0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2225      	movs	r2, #37	@ 0x25
 800c7cc:	2101      	movs	r1, #1
 800c7ce:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2224      	movs	r2, #36	@ 0x24
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	0018      	movs	r0, r3
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	b004      	add	sp, #16
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	46c0      	nop			@ (mov r8, r8)
 800c7e4:	bffdfff8 	.word	0xbffdfff8
 800c7e8:	40020000 	.word	0x40020000
 800c7ec:	ffff800f 	.word	0xffff800f
 800c7f0:	400200a8 	.word	0x400200a8

0800c7f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c802:	2317      	movs	r3, #23
 800c804:	18fb      	adds	r3, r7, r3
 800c806:	2200      	movs	r2, #0
 800c808:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2224      	movs	r2, #36	@ 0x24
 800c80e:	5c9b      	ldrb	r3, [r3, r2]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d101      	bne.n	800c818 <HAL_DMA_Start_IT+0x24>
 800c814:	2302      	movs	r3, #2
 800c816:	e04f      	b.n	800c8b8 <HAL_DMA_Start_IT+0xc4>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2224      	movs	r2, #36	@ 0x24
 800c81c:	2101      	movs	r1, #1
 800c81e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2225      	movs	r2, #37	@ 0x25
 800c824:	5c9b      	ldrb	r3, [r3, r2]
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d13a      	bne.n	800c8a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2225      	movs	r2, #37	@ 0x25
 800c830:	2102      	movs	r1, #2
 800c832:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2101      	movs	r1, #1
 800c846:	438a      	bics	r2, r1
 800c848:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	68b9      	ldr	r1, [r7, #8]
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f000 f976 	bl	800cb42 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d008      	beq.n	800c870 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	210e      	movs	r1, #14
 800c86a:	430a      	orrs	r2, r1
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	e00f      	b.n	800c890 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2104      	movs	r1, #4
 800c87c:	438a      	bics	r2, r1
 800c87e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	210a      	movs	r1, #10
 800c88c:	430a      	orrs	r2, r1
 800c88e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2101      	movs	r1, #1
 800c89c:	430a      	orrs	r2, r1
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	e007      	b.n	800c8b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2224      	movs	r2, #36	@ 0x24
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800c8aa:	2317      	movs	r3, #23
 800c8ac:	18fb      	adds	r3, r7, r3
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c8b2:	2317      	movs	r3, #23
 800c8b4:	18fb      	adds	r3, r7, r3
 800c8b6:	781b      	ldrb	r3, [r3, #0]
}
 800c8b8:	0018      	movs	r0, r3
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	b006      	add	sp, #24
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8c8:	230f      	movs	r3, #15
 800c8ca:	18fb      	adds	r3, r7, r3
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2225      	movs	r2, #37	@ 0x25
 800c8d4:	5c9b      	ldrb	r3, [r3, r2]
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d008      	beq.n	800c8ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2204      	movs	r2, #4
 800c8e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2224      	movs	r2, #36	@ 0x24
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e024      	b.n	800c938 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	210e      	movs	r1, #14
 800c8fa:	438a      	bics	r2, r1
 800c8fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2101      	movs	r1, #1
 800c90a:	438a      	bics	r2, r1
 800c90c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c912:	221c      	movs	r2, #28
 800c914:	401a      	ands	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c91a:	2101      	movs	r1, #1
 800c91c:	4091      	lsls	r1, r2
 800c91e:	000a      	movs	r2, r1
 800c920:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2225      	movs	r2, #37	@ 0x25
 800c926:	2101      	movs	r1, #1
 800c928:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2224      	movs	r2, #36	@ 0x24
 800c92e:	2100      	movs	r1, #0
 800c930:	5499      	strb	r1, [r3, r2]

    return status;
 800c932:	230f      	movs	r3, #15
 800c934:	18fb      	adds	r3, r7, r3
 800c936:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c938:	0018      	movs	r0, r3
 800c93a:	46bd      	mov	sp, r7
 800c93c:	b004      	add	sp, #16
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c948:	210f      	movs	r1, #15
 800c94a:	187b      	adds	r3, r7, r1
 800c94c:	2200      	movs	r2, #0
 800c94e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2225      	movs	r2, #37	@ 0x25
 800c954:	5c9b      	ldrb	r3, [r3, r2]
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d006      	beq.n	800c96a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2204      	movs	r2, #4
 800c960:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c962:	187b      	adds	r3, r7, r1
 800c964:	2201      	movs	r2, #1
 800c966:	701a      	strb	r2, [r3, #0]
 800c968:	e02a      	b.n	800c9c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	210e      	movs	r1, #14
 800c976:	438a      	bics	r2, r1
 800c978:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2101      	movs	r1, #1
 800c986:	438a      	bics	r2, r1
 800c988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c98e:	221c      	movs	r2, #28
 800c990:	401a      	ands	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c996:	2101      	movs	r1, #1
 800c998:	4091      	lsls	r1, r2
 800c99a:	000a      	movs	r2, r1
 800c99c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2225      	movs	r2, #37	@ 0x25
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2224      	movs	r2, #36	@ 0x24
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d004      	beq.n	800c9c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	0010      	movs	r0, r2
 800c9be:	4798      	blx	r3
    }
  }
  return status;
 800c9c0:	230f      	movs	r3, #15
 800c9c2:	18fb      	adds	r3, r7, r3
 800c9c4:	781b      	ldrb	r3, [r3, #0]
}
 800c9c6:	0018      	movs	r0, r3
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	b004      	add	sp, #16
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b084      	sub	sp, #16
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9ea:	221c      	movs	r2, #28
 800c9ec:	4013      	ands	r3, r2
 800c9ee:	2204      	movs	r2, #4
 800c9f0:	409a      	lsls	r2, r3
 800c9f2:	0013      	movs	r3, r2
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	d026      	beq.n	800ca48 <HAL_DMA_IRQHandler+0x7a>
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2204      	movs	r2, #4
 800c9fe:	4013      	ands	r3, r2
 800ca00:	d022      	beq.n	800ca48 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2220      	movs	r2, #32
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	d107      	bne.n	800ca1e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2104      	movs	r1, #4
 800ca1a:	438a      	bics	r2, r1
 800ca1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca22:	221c      	movs	r2, #28
 800ca24:	401a      	ands	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca2a:	2104      	movs	r1, #4
 800ca2c:	4091      	lsls	r1, r2
 800ca2e:	000a      	movs	r2, r1
 800ca30:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d100      	bne.n	800ca3c <HAL_DMA_IRQHandler+0x6e>
 800ca3a:	e071      	b.n	800cb20 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	0010      	movs	r0, r2
 800ca44:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800ca46:	e06b      	b.n	800cb20 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca4c:	221c      	movs	r2, #28
 800ca4e:	4013      	ands	r3, r2
 800ca50:	2202      	movs	r2, #2
 800ca52:	409a      	lsls	r2, r3
 800ca54:	0013      	movs	r3, r2
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	4013      	ands	r3, r2
 800ca5a:	d02d      	beq.n	800cab8 <HAL_DMA_IRQHandler+0xea>
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2202      	movs	r2, #2
 800ca60:	4013      	ands	r3, r2
 800ca62:	d029      	beq.n	800cab8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2220      	movs	r2, #32
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	d10b      	bne.n	800ca88 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	210a      	movs	r1, #10
 800ca7c:	438a      	bics	r2, r1
 800ca7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2225      	movs	r2, #37	@ 0x25
 800ca84:	2101      	movs	r1, #1
 800ca86:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca8c:	221c      	movs	r2, #28
 800ca8e:	401a      	ands	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca94:	2102      	movs	r1, #2
 800ca96:	4091      	lsls	r1, r2
 800ca98:	000a      	movs	r2, r1
 800ca9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2224      	movs	r2, #36	@ 0x24
 800caa0:	2100      	movs	r1, #0
 800caa2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d039      	beq.n	800cb20 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	0010      	movs	r0, r2
 800cab4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cab6:	e033      	b.n	800cb20 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cabc:	221c      	movs	r2, #28
 800cabe:	4013      	ands	r3, r2
 800cac0:	2208      	movs	r2, #8
 800cac2:	409a      	lsls	r2, r3
 800cac4:	0013      	movs	r3, r2
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	4013      	ands	r3, r2
 800caca:	d02a      	beq.n	800cb22 <HAL_DMA_IRQHandler+0x154>
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2208      	movs	r2, #8
 800cad0:	4013      	ands	r3, r2
 800cad2:	d026      	beq.n	800cb22 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	210e      	movs	r1, #14
 800cae0:	438a      	bics	r2, r1
 800cae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae8:	221c      	movs	r2, #28
 800caea:	401a      	ands	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caf0:	2101      	movs	r1, #1
 800caf2:	4091      	lsls	r1, r2
 800caf4:	000a      	movs	r2, r1
 800caf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2225      	movs	r2, #37	@ 0x25
 800cb02:	2101      	movs	r1, #1
 800cb04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2224      	movs	r2, #36	@ 0x24
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d005      	beq.n	800cb22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	0010      	movs	r0, r2
 800cb1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cb20:	46c0      	nop			@ (mov r8, r8)
 800cb22:	46c0      	nop			@ (mov r8, r8)
}
 800cb24:	46bd      	mov	sp, r7
 800cb26:	b004      	add	sp, #16
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2225      	movs	r2, #37	@ 0x25
 800cb36:	5c9b      	ldrb	r3, [r3, r2]
 800cb38:	b2db      	uxtb	r3, r3
}
 800cb3a:	0018      	movs	r0, r3
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	b002      	add	sp, #8
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
 800cb4e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb54:	221c      	movs	r2, #28
 800cb56:	401a      	ands	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	4091      	lsls	r1, r2
 800cb60:	000a      	movs	r2, r1
 800cb62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	683a      	ldr	r2, [r7, #0]
 800cb6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	2b10      	cmp	r3, #16
 800cb72:	d108      	bne.n	800cb86 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cb84:	e007      	b.n	800cb96 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	60da      	str	r2, [r3, #12]
}
 800cb96:	46c0      	nop			@ (mov r8, r8)
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	b004      	add	sp, #16
 800cb9c:	bd80      	pop	{r7, pc}
	...

0800cba0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800cba8:	f7ff f904 	bl	800bdb4 <HAL_GetTick>
 800cbac:	0003      	movs	r3, r0
 800cbae:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cbb0:	e00f      	b.n	800cbd2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	d00c      	beq.n	800cbd2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d007      	beq.n	800cbce <FLASH_WaitForLastOperation+0x2e>
 800cbbe:	f7ff f8f9 	bl	800bdb4 <HAL_GetTick>
 800cbc2:	0002      	movs	r2, r0
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d201      	bcs.n	800cbd2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e052      	b.n	800cc78 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cbd2:	4b2b      	ldr	r3, [pc, #172]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4013      	ands	r3, r2
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d0e9      	beq.n	800cbb2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cbde:	4b28      	ldr	r3, [pc, #160]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	2202      	movs	r2, #2
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d102      	bne.n	800cbf0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cbea:	4b25      	ldr	r3, [pc, #148]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cbec:	2202      	movs	r2, #2
 800cbee:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800cbf0:	4b23      	ldr	r3, [pc, #140]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cbf2:	699a      	ldr	r2, [r3, #24]
 800cbf4:	2380      	movs	r3, #128	@ 0x80
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	401a      	ands	r2, r3
 800cbfa:	2380      	movs	r3, #128	@ 0x80
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d035      	beq.n	800cc6e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800cc02:	4b1f      	ldr	r3, [pc, #124]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cc04:	699a      	ldr	r2, [r3, #24]
 800cc06:	2380      	movs	r3, #128	@ 0x80
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800cc0c:	2380      	movs	r3, #128	@ 0x80
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d02c      	beq.n	800cc6e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800cc14:	4b1a      	ldr	r3, [pc, #104]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cc16:	699a      	ldr	r2, [r3, #24]
 800cc18:	2380      	movs	r3, #128	@ 0x80
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800cc1e:	2380      	movs	r3, #128	@ 0x80
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d023      	beq.n	800cc6e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800cc26:	4b16      	ldr	r3, [pc, #88]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cc28:	699a      	ldr	r2, [r3, #24]
 800cc2a:	2380      	movs	r3, #128	@ 0x80
 800cc2c:	011b      	lsls	r3, r3, #4
 800cc2e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800cc30:	2380      	movs	r3, #128	@ 0x80
 800cc32:	011b      	lsls	r3, r3, #4
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d01a      	beq.n	800cc6e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800cc38:	4b11      	ldr	r3, [pc, #68]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cc3a:	699a      	ldr	r2, [r3, #24]
 800cc3c:	2380      	movs	r3, #128	@ 0x80
 800cc3e:	019b      	lsls	r3, r3, #6
 800cc40:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800cc42:	2380      	movs	r3, #128	@ 0x80
 800cc44:	019b      	lsls	r3, r3, #6
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d011      	beq.n	800cc6e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	2380      	movs	r3, #128	@ 0x80
 800cc50:	029b      	lsls	r3, r3, #10
 800cc52:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800cc54:	2380      	movs	r3, #128	@ 0x80
 800cc56:	029b      	lsls	r3, r3, #10
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d008      	beq.n	800cc6e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800cc5c:	4b08      	ldr	r3, [pc, #32]	@ (800cc80 <FLASH_WaitForLastOperation+0xe0>)
 800cc5e:	699a      	ldr	r2, [r3, #24]
 800cc60:	2380      	movs	r3, #128	@ 0x80
 800cc62:	025b      	lsls	r3, r3, #9
 800cc64:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800cc66:	2380      	movs	r3, #128	@ 0x80
 800cc68:	025b      	lsls	r3, r3, #9
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d103      	bne.n	800cc76 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800cc6e:	f000 f809 	bl	800cc84 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e000      	b.n	800cc78 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	0018      	movs	r0, r3
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	b004      	add	sp, #16
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	40022000 	.word	0x40022000

0800cc84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cc8e:	4b49      	ldr	r3, [pc, #292]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800cc90:	699a      	ldr	r2, [r3, #24]
 800cc92:	2380      	movs	r3, #128	@ 0x80
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	401a      	ands	r2, r3
 800cc98:	2380      	movs	r3, #128	@ 0x80
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d10a      	bne.n	800ccb6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cca0:	4b45      	ldr	r3, [pc, #276]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	2202      	movs	r2, #2
 800cca6:	431a      	orrs	r2, r3
 800cca8:	4b43      	ldr	r3, [pc, #268]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800ccaa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2280      	movs	r2, #128	@ 0x80
 800ccb0:	0052      	lsls	r2, r2, #1
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800ccb6:	4b3f      	ldr	r3, [pc, #252]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800ccb8:	699a      	ldr	r2, [r3, #24]
 800ccba:	2380      	movs	r3, #128	@ 0x80
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	401a      	ands	r2, r3
 800ccc0:	2380      	movs	r3, #128	@ 0x80
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d10a      	bne.n	800ccde <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ccc8:	4b3b      	ldr	r3, [pc, #236]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	2201      	movs	r2, #1
 800ccce:	431a      	orrs	r2, r3
 800ccd0:	4b39      	ldr	r3, [pc, #228]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800ccd2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2280      	movs	r2, #128	@ 0x80
 800ccd8:	0092      	lsls	r2, r2, #2
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ccde:	4b35      	ldr	r3, [pc, #212]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800cce0:	699a      	ldr	r2, [r3, #24]
 800cce2:	2380      	movs	r3, #128	@ 0x80
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	401a      	ands	r2, r3
 800cce8:	2380      	movs	r3, #128	@ 0x80
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d10a      	bne.n	800cd06 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ccf0:	4b31      	ldr	r3, [pc, #196]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	2208      	movs	r2, #8
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	4b2f      	ldr	r3, [pc, #188]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800ccfa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2280      	movs	r2, #128	@ 0x80
 800cd00:	00d2      	lsls	r2, r2, #3
 800cd02:	4313      	orrs	r3, r2
 800cd04:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cd06:	4b2b      	ldr	r3, [pc, #172]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800cd08:	699a      	ldr	r2, [r3, #24]
 800cd0a:	2380      	movs	r3, #128	@ 0x80
 800cd0c:	011b      	lsls	r3, r3, #4
 800cd0e:	401a      	ands	r2, r3
 800cd10:	2380      	movs	r3, #128	@ 0x80
 800cd12:	011b      	lsls	r3, r3, #4
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d10a      	bne.n	800cd2e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cd18:	4b27      	ldr	r3, [pc, #156]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	2204      	movs	r2, #4
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	4b25      	ldr	r3, [pc, #148]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd22:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2280      	movs	r2, #128	@ 0x80
 800cd28:	0112      	lsls	r2, r2, #4
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800cd2e:	4b21      	ldr	r3, [pc, #132]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800cd30:	699a      	ldr	r2, [r3, #24]
 800cd32:	2380      	movs	r3, #128	@ 0x80
 800cd34:	019b      	lsls	r3, r3, #6
 800cd36:	401a      	ands	r2, r3
 800cd38:	2380      	movs	r3, #128	@ 0x80
 800cd3a:	019b      	lsls	r3, r3, #6
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d10a      	bne.n	800cd56 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800cd40:	4b1d      	ldr	r3, [pc, #116]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	2210      	movs	r2, #16
 800cd46:	431a      	orrs	r2, r3
 800cd48:	4b1b      	ldr	r3, [pc, #108]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd4a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2280      	movs	r2, #128	@ 0x80
 800cd50:	0192      	lsls	r2, r2, #6
 800cd52:	4313      	orrs	r3, r2
 800cd54:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800cd56:	4b17      	ldr	r3, [pc, #92]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800cd58:	699a      	ldr	r2, [r3, #24]
 800cd5a:	2380      	movs	r3, #128	@ 0x80
 800cd5c:	029b      	lsls	r3, r3, #10
 800cd5e:	401a      	ands	r2, r3
 800cd60:	2380      	movs	r3, #128	@ 0x80
 800cd62:	029b      	lsls	r3, r3, #10
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d109      	bne.n	800cd7c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800cd68:	4b13      	ldr	r3, [pc, #76]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	431a      	orrs	r2, r3
 800cd70:	4b11      	ldr	r3, [pc, #68]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd72:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2220      	movs	r2, #32
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800cd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800cd7e:	699a      	ldr	r2, [r3, #24]
 800cd80:	2380      	movs	r3, #128	@ 0x80
 800cd82:	025b      	lsls	r3, r3, #9
 800cd84:	401a      	ands	r2, r3
 800cd86:	2380      	movs	r3, #128	@ 0x80
 800cd88:	025b      	lsls	r3, r3, #9
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d10a      	bne.n	800cda4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800cd8e:	4b0a      	ldr	r3, [pc, #40]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	2240      	movs	r2, #64	@ 0x40
 800cd94:	431a      	orrs	r2, r3
 800cd96:	4b08      	ldr	r3, [pc, #32]	@ (800cdb8 <FLASH_SetErrorCode+0x134>)
 800cd98:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2280      	movs	r2, #128	@ 0x80
 800cd9e:	0252      	lsls	r2, r2, #9
 800cda0:	4313      	orrs	r3, r2
 800cda2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cda4:	4b03      	ldr	r3, [pc, #12]	@ (800cdb4 <FLASH_SetErrorCode+0x130>)
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	619a      	str	r2, [r3, #24]
}  
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b002      	add	sp, #8
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	40022000 	.word	0x40022000
 800cdb8:	200024c0 	.word	0x200024c0

0800cdbc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800cdc2:	4b12      	ldr	r3, [pc, #72]	@ (800ce0c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	4013      	ands	r3, r2
 800cdca:	d019      	beq.n	800ce00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdcc:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd0:	607b      	str	r3, [r7, #4]
  return(result);
 800cdd2:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800cdd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdd6:	b672      	cpsid	i
}
 800cdd8:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800cdda:	4b0c      	ldr	r3, [pc, #48]	@ (800ce0c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cddc:	4a0c      	ldr	r2, [pc, #48]	@ (800ce10 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800cdde:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800cde0:	4b0a      	ldr	r3, [pc, #40]	@ (800ce0c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cde2:	4a0c      	ldr	r2, [pc, #48]	@ (800ce14 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800cde4:	60da      	str	r2, [r3, #12]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	f383 8810 	msr	PRIMASK, r3
}
 800cdf0:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800cdf2:	4b06      	ldr	r3, [pc, #24]	@ (800ce0c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	d001      	beq.n	800ce00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e000      	b.n	800ce02 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	0018      	movs	r0, r3
 800ce04:	46bd      	mov	sp, r7
 800ce06:	b004      	add	sp, #16
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	46c0      	nop			@ (mov r8, r8)
 800ce0c:	40022000 	.word	0x40022000
 800ce10:	89abcdef 	.word	0x89abcdef
 800ce14:	02030405 	.word	0x02030405

0800ce18 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ce1c:	4b04      	ldr	r3, [pc, #16]	@ (800ce30 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	4b03      	ldr	r3, [pc, #12]	@ (800ce30 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ce22:	2101      	movs	r1, #1
 800ce24:	430a      	orrs	r2, r1
 800ce26:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	0018      	movs	r0, r3
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	40022000 	.word	0x40022000

0800ce34 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ce34:	b5b0      	push	{r4, r5, r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce3c:	250f      	movs	r5, #15
 800ce3e:	197b      	adds	r3, r7, r5
 800ce40:	2200      	movs	r2, #0
 800ce42:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ce44:	197c      	adds	r4, r7, r5
 800ce46:	4b0f      	ldr	r3, [pc, #60]	@ (800ce84 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ce48:	0018      	movs	r0, r3
 800ce4a:	f7ff fea9 	bl	800cba0 <FLASH_WaitForLastOperation>
 800ce4e:	0003      	movs	r3, r0
 800ce50:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ce52:	0029      	movs	r1, r5
 800ce54:	187b      	adds	r3, r7, r1
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10c      	bne.n	800ce76 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ce5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce88 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ce68:	187c      	adds	r4, r7, r1
 800ce6a:	4b06      	ldr	r3, [pc, #24]	@ (800ce84 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ce6c:	0018      	movs	r0, r3
 800ce6e:	f7ff fe97 	bl	800cba0 <FLASH_WaitForLastOperation>
 800ce72:	0003      	movs	r3, r0
 800ce74:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800ce76:	230f      	movs	r3, #15
 800ce78:	18fb      	adds	r3, r7, r3
 800ce7a:	781b      	ldrb	r3, [r3, #0]
}  
 800ce7c:	0018      	movs	r0, r3
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	b004      	add	sp, #16
 800ce82:	bdb0      	pop	{r4, r5, r7, pc}
 800ce84:	0000c350 	.word	0x0000c350
 800ce88:	200024c0 	.word	0x200024c0

0800ce8c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800ce8c:	b5b0      	push	{r4, r5, r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ce98:	2317      	movs	r3, #23
 800ce9a:	18fb      	adds	r3, r7, r3
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cea0:	4b24      	ldr	r3, [pc, #144]	@ (800cf34 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cea2:	7c1b      	ldrb	r3, [r3, #16]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d101      	bne.n	800ceac <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800cea8:	2302      	movs	r3, #2
 800ceaa:	e03e      	b.n	800cf2a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800ceac:	4b21      	ldr	r3, [pc, #132]	@ (800cf34 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ceb2:	2517      	movs	r5, #23
 800ceb4:	197c      	adds	r4, r7, r5
 800ceb6:	4b20      	ldr	r3, [pc, #128]	@ (800cf38 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800ceb8:	0018      	movs	r0, r3
 800ceba:	f7ff fe71 	bl	800cba0 <FLASH_WaitForLastOperation>
 800cebe:	0003      	movs	r3, r0
 800cec0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800cec2:	197b      	adds	r3, r7, r5
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d129      	bne.n	800cf1e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ceca:	4b1a      	ldr	r3, [pc, #104]	@ (800cf34 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cecc:	2200      	movs	r2, #0
 800cece:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d103      	bne.n	800cede <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	e013      	b.n	800cf06 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d104      	bne.n	800ceee <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	b292      	uxth	r2, r2
 800ceea:	801a      	strh	r2, [r3, #0]
 800ceec:	e00b      	b.n	800cf06 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d104      	bne.n	800cefe <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	701a      	strb	r2, [r3, #0]
 800cefc:	e003      	b.n	800cf06 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800cefe:	2317      	movs	r3, #23
 800cf00:	18fb      	adds	r3, r7, r3
 800cf02:	2201      	movs	r2, #1
 800cf04:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800cf06:	2217      	movs	r2, #23
 800cf08:	18bb      	adds	r3, r7, r2
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d106      	bne.n	800cf1e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cf10:	18bc      	adds	r4, r7, r2
 800cf12:	4b09      	ldr	r3, [pc, #36]	@ (800cf38 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800cf14:	0018      	movs	r0, r3
 800cf16:	f7ff fe43 	bl	800cba0 <FLASH_WaitForLastOperation>
 800cf1a:	0003      	movs	r3, r0
 800cf1c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cf1e:	4b05      	ldr	r3, [pc, #20]	@ (800cf34 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	741a      	strb	r2, [r3, #16]

  return status;
 800cf24:	2317      	movs	r3, #23
 800cf26:	18fb      	adds	r3, r7, r3
 800cf28:	781b      	ldrb	r3, [r3, #0]
}
 800cf2a:	0018      	movs	r0, r3
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	b006      	add	sp, #24
 800cf30:	bdb0      	pop	{r4, r5, r7, pc}
 800cf32:	46c0      	nop			@ (mov r8, r8)
 800cf34:	200024c0 	.word	0x200024c0
 800cf38:	0000c350 	.word	0x0000c350

0800cf3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800cf52:	e155      	b.n	800d200 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2101      	movs	r1, #1
 800cf5a:	697a      	ldr	r2, [r7, #20]
 800cf5c:	4091      	lsls	r1, r2
 800cf5e:	000a      	movs	r2, r1
 800cf60:	4013      	ands	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d100      	bne.n	800cf6c <HAL_GPIO_Init+0x30>
 800cf6a:	e146      	b.n	800d1fa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	2203      	movs	r2, #3
 800cf72:	4013      	ands	r3, r2
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d005      	beq.n	800cf84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	2203      	movs	r2, #3
 800cf7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d130      	bne.n	800cfe6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	2203      	movs	r2, #3
 800cf90:	409a      	lsls	r2, r3
 800cf92:	0013      	movs	r3, r2
 800cf94:	43da      	mvns	r2, r3
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	4013      	ands	r3, r2
 800cf9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	68da      	ldr	r2, [r3, #12]
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	409a      	lsls	r2, r3
 800cfa6:	0013      	movs	r3, r2
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	693a      	ldr	r2, [r7, #16]
 800cfb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cfba:	2201      	movs	r2, #1
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	409a      	lsls	r2, r3
 800cfc0:	0013      	movs	r3, r2
 800cfc2:	43da      	mvns	r2, r3
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	091b      	lsrs	r3, r3, #4
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	401a      	ands	r2, r3
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	409a      	lsls	r2, r3
 800cfd8:	0013      	movs	r3, r2
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	693a      	ldr	r2, [r7, #16]
 800cfe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	2203      	movs	r2, #3
 800cfec:	4013      	ands	r3, r2
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d017      	beq.n	800d022 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	005b      	lsls	r3, r3, #1
 800cffc:	2203      	movs	r2, #3
 800cffe:	409a      	lsls	r2, r3
 800d000:	0013      	movs	r3, r2
 800d002:	43da      	mvns	r2, r3
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	4013      	ands	r3, r2
 800d008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	689a      	ldr	r2, [r3, #8]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	409a      	lsls	r2, r3
 800d014:	0013      	movs	r3, r2
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	4313      	orrs	r3, r2
 800d01a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	2203      	movs	r2, #3
 800d028:	4013      	ands	r3, r2
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d123      	bne.n	800d076 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	08da      	lsrs	r2, r3, #3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3208      	adds	r2, #8
 800d036:	0092      	lsls	r2, r2, #2
 800d038:	58d3      	ldr	r3, [r2, r3]
 800d03a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2207      	movs	r2, #7
 800d040:	4013      	ands	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	220f      	movs	r2, #15
 800d046:	409a      	lsls	r2, r3
 800d048:	0013      	movs	r3, r2
 800d04a:	43da      	mvns	r2, r3
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	4013      	ands	r3, r2
 800d050:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	691a      	ldr	r2, [r3, #16]
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	2107      	movs	r1, #7
 800d05a:	400b      	ands	r3, r1
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	409a      	lsls	r2, r3
 800d060:	0013      	movs	r3, r2
 800d062:	693a      	ldr	r2, [r7, #16]
 800d064:	4313      	orrs	r3, r2
 800d066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	08da      	lsrs	r2, r3, #3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3208      	adds	r2, #8
 800d070:	0092      	lsls	r2, r2, #2
 800d072:	6939      	ldr	r1, [r7, #16]
 800d074:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	005b      	lsls	r3, r3, #1
 800d080:	2203      	movs	r2, #3
 800d082:	409a      	lsls	r2, r3
 800d084:	0013      	movs	r3, r2
 800d086:	43da      	mvns	r2, r3
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	4013      	ands	r3, r2
 800d08c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	2203      	movs	r2, #3
 800d094:	401a      	ands	r2, r3
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	409a      	lsls	r2, r3
 800d09c:	0013      	movs	r3, r2
 800d09e:	693a      	ldr	r2, [r7, #16]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	23c0      	movs	r3, #192	@ 0xc0
 800d0b0:	029b      	lsls	r3, r3, #10
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	d100      	bne.n	800d0b8 <HAL_GPIO_Init+0x17c>
 800d0b6:	e0a0      	b.n	800d1fa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d0b8:	4b57      	ldr	r3, [pc, #348]	@ (800d218 <HAL_GPIO_Init+0x2dc>)
 800d0ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0bc:	4b56      	ldr	r3, [pc, #344]	@ (800d218 <HAL_GPIO_Init+0x2dc>)
 800d0be:	2101      	movs	r1, #1
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800d0c4:	4a55      	ldr	r2, [pc, #340]	@ (800d21c <HAL_GPIO_Init+0x2e0>)
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	089b      	lsrs	r3, r3, #2
 800d0ca:	3302      	adds	r3, #2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	589b      	ldr	r3, [r3, r2]
 800d0d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	2203      	movs	r2, #3
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	220f      	movs	r2, #15
 800d0dc:	409a      	lsls	r2, r3
 800d0de:	0013      	movs	r3, r2
 800d0e0:	43da      	mvns	r2, r3
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	23a0      	movs	r3, #160	@ 0xa0
 800d0ec:	05db      	lsls	r3, r3, #23
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d01f      	beq.n	800d132 <HAL_GPIO_Init+0x1f6>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a4a      	ldr	r2, [pc, #296]	@ (800d220 <HAL_GPIO_Init+0x2e4>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d019      	beq.n	800d12e <HAL_GPIO_Init+0x1f2>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a49      	ldr	r2, [pc, #292]	@ (800d224 <HAL_GPIO_Init+0x2e8>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d013      	beq.n	800d12a <HAL_GPIO_Init+0x1ee>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a48      	ldr	r2, [pc, #288]	@ (800d228 <HAL_GPIO_Init+0x2ec>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d00d      	beq.n	800d126 <HAL_GPIO_Init+0x1ea>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a47      	ldr	r2, [pc, #284]	@ (800d22c <HAL_GPIO_Init+0x2f0>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d007      	beq.n	800d122 <HAL_GPIO_Init+0x1e6>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a46      	ldr	r2, [pc, #280]	@ (800d230 <HAL_GPIO_Init+0x2f4>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d101      	bne.n	800d11e <HAL_GPIO_Init+0x1e2>
 800d11a:	2305      	movs	r3, #5
 800d11c:	e00a      	b.n	800d134 <HAL_GPIO_Init+0x1f8>
 800d11e:	2306      	movs	r3, #6
 800d120:	e008      	b.n	800d134 <HAL_GPIO_Init+0x1f8>
 800d122:	2304      	movs	r3, #4
 800d124:	e006      	b.n	800d134 <HAL_GPIO_Init+0x1f8>
 800d126:	2303      	movs	r3, #3
 800d128:	e004      	b.n	800d134 <HAL_GPIO_Init+0x1f8>
 800d12a:	2302      	movs	r3, #2
 800d12c:	e002      	b.n	800d134 <HAL_GPIO_Init+0x1f8>
 800d12e:	2301      	movs	r3, #1
 800d130:	e000      	b.n	800d134 <HAL_GPIO_Init+0x1f8>
 800d132:	2300      	movs	r3, #0
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	2103      	movs	r1, #3
 800d138:	400a      	ands	r2, r1
 800d13a:	0092      	lsls	r2, r2, #2
 800d13c:	4093      	lsls	r3, r2
 800d13e:	693a      	ldr	r2, [r7, #16]
 800d140:	4313      	orrs	r3, r2
 800d142:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d144:	4935      	ldr	r1, [pc, #212]	@ (800d21c <HAL_GPIO_Init+0x2e0>)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	089b      	lsrs	r3, r3, #2
 800d14a:	3302      	adds	r3, #2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d152:	4b38      	ldr	r3, [pc, #224]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	43da      	mvns	r2, r3
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	4013      	ands	r3, r2
 800d160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	2380      	movs	r3, #128	@ 0x80
 800d168:	035b      	lsls	r3, r3, #13
 800d16a:	4013      	ands	r3, r2
 800d16c:	d003      	beq.n	800d176 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	4313      	orrs	r3, r2
 800d174:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800d176:	4b2f      	ldr	r3, [pc, #188]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d178:	693a      	ldr	r2, [r7, #16]
 800d17a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800d17c:	4b2d      	ldr	r3, [pc, #180]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	43da      	mvns	r2, r3
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	4013      	ands	r3, r2
 800d18a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	685a      	ldr	r2, [r3, #4]
 800d190:	2380      	movs	r3, #128	@ 0x80
 800d192:	039b      	lsls	r3, r3, #14
 800d194:	4013      	ands	r3, r2
 800d196:	d003      	beq.n	800d1a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800d1a0:	4b24      	ldr	r3, [pc, #144]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800d1a6:	4b23      	ldr	r3, [pc, #140]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	43da      	mvns	r2, r3
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	2380      	movs	r3, #128	@ 0x80
 800d1bc:	029b      	lsls	r3, r3, #10
 800d1be:	4013      	ands	r3, r2
 800d1c0:	d003      	beq.n	800d1ca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800d1c2:	693a      	ldr	r2, [r7, #16]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800d1ca:	4b1a      	ldr	r3, [pc, #104]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d1d0:	4b18      	ldr	r3, [pc, #96]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	43da      	mvns	r2, r3
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	4013      	ands	r3, r2
 800d1de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	2380      	movs	r3, #128	@ 0x80
 800d1e6:	025b      	lsls	r3, r3, #9
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	d003      	beq.n	800d1f4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d1f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d234 <HAL_GPIO_Init+0x2f8>)
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	40da      	lsrs	r2, r3
 800d208:	1e13      	subs	r3, r2, #0
 800d20a:	d000      	beq.n	800d20e <HAL_GPIO_Init+0x2d2>
 800d20c:	e6a2      	b.n	800cf54 <HAL_GPIO_Init+0x18>
  }
}
 800d20e:	46c0      	nop			@ (mov r8, r8)
 800d210:	46c0      	nop			@ (mov r8, r8)
 800d212:	46bd      	mov	sp, r7
 800d214:	b006      	add	sp, #24
 800d216:	bd80      	pop	{r7, pc}
 800d218:	40021000 	.word	0x40021000
 800d21c:	40010000 	.word	0x40010000
 800d220:	50000400 	.word	0x50000400
 800d224:	50000800 	.word	0x50000800
 800d228:	50000c00 	.word	0x50000c00
 800d22c:	50001000 	.word	0x50001000
 800d230:	50001c00 	.word	0x50001c00
 800d234:	40010400 	.word	0x40010400

0800d238 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	000a      	movs	r2, r1
 800d242:	1cbb      	adds	r3, r7, #2
 800d244:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	1cba      	adds	r2, r7, #2
 800d24c:	8812      	ldrh	r2, [r2, #0]
 800d24e:	4013      	ands	r3, r2
 800d250:	d004      	beq.n	800d25c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800d252:	230f      	movs	r3, #15
 800d254:	18fb      	adds	r3, r7, r3
 800d256:	2201      	movs	r2, #1
 800d258:	701a      	strb	r2, [r3, #0]
 800d25a:	e003      	b.n	800d264 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d25c:	230f      	movs	r3, #15
 800d25e:	18fb      	adds	r3, r7, r3
 800d260:	2200      	movs	r2, #0
 800d262:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800d264:	230f      	movs	r3, #15
 800d266:	18fb      	adds	r3, r7, r3
 800d268:	781b      	ldrb	r3, [r3, #0]
}
 800d26a:	0018      	movs	r0, r3
 800d26c:	46bd      	mov	sp, r7
 800d26e:	b004      	add	sp, #16
 800d270:	bd80      	pop	{r7, pc}

0800d272 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b082      	sub	sp, #8
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	0008      	movs	r0, r1
 800d27c:	0011      	movs	r1, r2
 800d27e:	1cbb      	adds	r3, r7, #2
 800d280:	1c02      	adds	r2, r0, #0
 800d282:	801a      	strh	r2, [r3, #0]
 800d284:	1c7b      	adds	r3, r7, #1
 800d286:	1c0a      	adds	r2, r1, #0
 800d288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d28a:	1c7b      	adds	r3, r7, #1
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d004      	beq.n	800d29c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d292:	1cbb      	adds	r3, r7, #2
 800d294:	881a      	ldrh	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800d29a:	e003      	b.n	800d2a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800d29c:	1cbb      	adds	r3, r7, #2
 800d29e:	881a      	ldrh	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d2a4:	46c0      	nop			@ (mov r8, r8)
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	b002      	add	sp, #8
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e082      	b.n	800d3c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2241      	movs	r2, #65	@ 0x41
 800d2c2:	5c9b      	ldrb	r3, [r3, r2]
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d107      	bne.n	800d2da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2240      	movs	r2, #64	@ 0x40
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f7f9 fccb 	bl	8006c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2241      	movs	r2, #65	@ 0x41
 800d2de:	2124      	movs	r1, #36	@ 0x24
 800d2e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	438a      	bics	r2, r1
 800d2f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	685a      	ldr	r2, [r3, #4]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4934      	ldr	r1, [pc, #208]	@ (800d3cc <HAL_I2C_Init+0x120>)
 800d2fc:	400a      	ands	r2, r1
 800d2fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	689a      	ldr	r2, [r3, #8]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4931      	ldr	r1, [pc, #196]	@ (800d3d0 <HAL_I2C_Init+0x124>)
 800d30c:	400a      	ands	r2, r1
 800d30e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d108      	bne.n	800d32a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	689a      	ldr	r2, [r3, #8]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2180      	movs	r1, #128	@ 0x80
 800d322:	0209      	lsls	r1, r1, #8
 800d324:	430a      	orrs	r2, r1
 800d326:	609a      	str	r2, [r3, #8]
 800d328:	e007      	b.n	800d33a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	689a      	ldr	r2, [r3, #8]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2184      	movs	r1, #132	@ 0x84
 800d334:	0209      	lsls	r1, r1, #8
 800d336:	430a      	orrs	r2, r1
 800d338:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d104      	bne.n	800d34c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2280      	movs	r2, #128	@ 0x80
 800d348:	0112      	lsls	r2, r2, #4
 800d34a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	491f      	ldr	r1, [pc, #124]	@ (800d3d4 <HAL_I2C_Init+0x128>)
 800d358:	430a      	orrs	r2, r1
 800d35a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68da      	ldr	r2, [r3, #12]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	491a      	ldr	r1, [pc, #104]	@ (800d3d0 <HAL_I2C_Init+0x124>)
 800d368:	400a      	ands	r2, r1
 800d36a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	691a      	ldr	r2, [r3, #16]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	431a      	orrs	r2, r3
 800d376:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	430a      	orrs	r2, r1
 800d384:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	69d9      	ldr	r1, [r3, #28]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a1a      	ldr	r2, [r3, #32]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	430a      	orrs	r2, r1
 800d3a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2241      	movs	r2, #65	@ 0x41
 800d3b0:	2120      	movs	r1, #32
 800d3b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2242      	movs	r2, #66	@ 0x42
 800d3be:	2100      	movs	r1, #0
 800d3c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	b002      	add	sp, #8
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	f0ffffff 	.word	0xf0ffffff
 800d3d0:	ffff7fff 	.word	0xffff7fff
 800d3d4:	02008000 	.word	0x02008000

0800d3d8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800d3d8:	b5b0      	push	{r4, r5, r7, lr}
 800d3da:	b088      	sub	sp, #32
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	0008      	movs	r0, r1
 800d3e2:	607a      	str	r2, [r7, #4]
 800d3e4:	0019      	movs	r1, r3
 800d3e6:	230a      	movs	r3, #10
 800d3e8:	18fb      	adds	r3, r7, r3
 800d3ea:	1c02      	adds	r2, r0, #0
 800d3ec:	801a      	strh	r2, [r3, #0]
 800d3ee:	2308      	movs	r3, #8
 800d3f0:	18fb      	adds	r3, r7, r3
 800d3f2:	1c0a      	adds	r2, r1, #0
 800d3f4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2241      	movs	r2, #65	@ 0x41
 800d3fa:	5c9b      	ldrb	r3, [r3, r2]
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	2b20      	cmp	r3, #32
 800d400:	d000      	beq.n	800d404 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800d402:	e0dd      	b.n	800d5c0 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	699a      	ldr	r2, [r3, #24]
 800d40a:	2380      	movs	r3, #128	@ 0x80
 800d40c:	021b      	lsls	r3, r3, #8
 800d40e:	401a      	ands	r2, r3
 800d410:	2380      	movs	r3, #128	@ 0x80
 800d412:	021b      	lsls	r3, r3, #8
 800d414:	429a      	cmp	r2, r3
 800d416:	d101      	bne.n	800d41c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800d418:	2302      	movs	r3, #2
 800d41a:	e0d2      	b.n	800d5c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2240      	movs	r2, #64	@ 0x40
 800d420:	5c9b      	ldrb	r3, [r3, r2]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d101      	bne.n	800d42a <HAL_I2C_Master_Transmit_DMA+0x52>
 800d426:	2302      	movs	r3, #2
 800d428:	e0cb      	b.n	800d5c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2240      	movs	r2, #64	@ 0x40
 800d42e:	2101      	movs	r1, #1
 800d430:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2241      	movs	r2, #65	@ 0x41
 800d436:	2121      	movs	r1, #33	@ 0x21
 800d438:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2242      	movs	r2, #66	@ 0x42
 800d43e:	2110      	movs	r1, #16
 800d440:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2208      	movs	r2, #8
 800d452:	18ba      	adds	r2, r7, r2
 800d454:	8812      	ldrh	r2, [r2, #0]
 800d456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	4a5c      	ldr	r2, [pc, #368]	@ (800d5cc <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800d45c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	4a5b      	ldr	r2, [pc, #364]	@ (800d5d0 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800d462:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d468:	b29b      	uxth	r3, r3
 800d46a:	2bff      	cmp	r3, #255	@ 0xff
 800d46c:	d906      	bls.n	800d47c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	22ff      	movs	r2, #255	@ 0xff
 800d472:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d474:	2380      	movs	r3, #128	@ 0x80
 800d476:	045b      	lsls	r3, r3, #17
 800d478:	617b      	str	r3, [r7, #20]
 800d47a:	e007      	b.n	800d48c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d480:	b29a      	uxth	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d486:	2380      	movs	r3, #128	@ 0x80
 800d488:	049b      	lsls	r3, r3, #18
 800d48a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d490:	2b00      	cmp	r3, #0
 800d492:	d100      	bne.n	800d496 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800d494:	e078      	b.n	800d588 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d023      	beq.n	800d4e6 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a2:	4a4c      	ldr	r2, [pc, #304]	@ (800d5d4 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800d4a4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4aa:	4a4b      	ldr	r2, [pc, #300]	@ (800d5d8 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800d4ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3328      	adds	r3, #40	@ 0x28
 800d4ca:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d4d0:	2513      	movs	r5, #19
 800d4d2:	197c      	adds	r4, r7, r5
 800d4d4:	f7ff f98e 	bl	800c7f4 <HAL_DMA_Start_IT>
 800d4d8:	0003      	movs	r3, r0
 800d4da:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d4dc:	197b      	adds	r3, r7, r5
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d13d      	bne.n	800d560 <HAL_I2C_Master_Transmit_DMA+0x188>
 800d4e4:	e013      	b.n	800d50e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2241      	movs	r2, #65	@ 0x41
 800d4ea:	2120      	movs	r1, #32
 800d4ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2242      	movs	r2, #66	@ 0x42
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4fa:	2280      	movs	r2, #128	@ 0x80
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2240      	movs	r2, #64	@ 0x40
 800d506:	2100      	movs	r1, #0
 800d508:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e059      	b.n	800d5c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d512:	b2da      	uxtb	r2, r3
 800d514:	697c      	ldr	r4, [r7, #20]
 800d516:	230a      	movs	r3, #10
 800d518:	18fb      	adds	r3, r7, r3
 800d51a:	8819      	ldrh	r1, [r3, #0]
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	4b2f      	ldr	r3, [pc, #188]	@ (800d5dc <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	0023      	movs	r3, r4
 800d524:	f001 fd0e 	bl	800ef44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	b29a      	uxth	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2240      	movs	r2, #64	@ 0x40
 800d53e:	2100      	movs	r1, #0
 800d540:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2110      	movs	r1, #16
 800d546:	0018      	movs	r0, r3
 800d548:	f001 fd36 	bl	800efb8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2180      	movs	r1, #128	@ 0x80
 800d558:	01c9      	lsls	r1, r1, #7
 800d55a:	430a      	orrs	r2, r1
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	e02d      	b.n	800d5bc <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2241      	movs	r2, #65	@ 0x41
 800d564:	2120      	movs	r1, #32
 800d566:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2242      	movs	r2, #66	@ 0x42
 800d56c:	2100      	movs	r1, #0
 800d56e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d574:	2210      	movs	r2, #16
 800d576:	431a      	orrs	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2240      	movs	r2, #64	@ 0x40
 800d580:	2100      	movs	r1, #0
 800d582:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e01c      	b.n	800d5c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	4a15      	ldr	r2, [pc, #84]	@ (800d5e0 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800d58c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d592:	b2da      	uxtb	r2, r3
 800d594:	2380      	movs	r3, #128	@ 0x80
 800d596:	049c      	lsls	r4, r3, #18
 800d598:	230a      	movs	r3, #10
 800d59a:	18fb      	adds	r3, r7, r3
 800d59c:	8819      	ldrh	r1, [r3, #0]
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d5dc <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	0023      	movs	r3, r4
 800d5a6:	f001 fccd 	bl	800ef44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2240      	movs	r2, #64	@ 0x40
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	0018      	movs	r0, r3
 800d5b8:	f001 fcfe 	bl	800efb8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e000      	b.n	800d5c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d5c0:	2302      	movs	r3, #2
  }
}
 800d5c2:	0018      	movs	r0, r3
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	b006      	add	sp, #24
 800d5c8:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ca:	46c0      	nop			@ (mov r8, r8)
 800d5cc:	ffff0000 	.word	0xffff0000
 800d5d0:	0800dddd 	.word	0x0800dddd
 800d5d4:	0800ed95 	.word	0x0800ed95
 800d5d8:	0800eed5 	.word	0x0800eed5
 800d5dc:	80002000 	.word	0x80002000
 800d5e0:	0800d989 	.word	0x0800d989

0800d5e4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800d5e4:	b5b0      	push	{r4, r5, r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	0008      	movs	r0, r1
 800d5ee:	607a      	str	r2, [r7, #4]
 800d5f0:	0019      	movs	r1, r3
 800d5f2:	230a      	movs	r3, #10
 800d5f4:	18fb      	adds	r3, r7, r3
 800d5f6:	1c02      	adds	r2, r0, #0
 800d5f8:	801a      	strh	r2, [r3, #0]
 800d5fa:	2308      	movs	r3, #8
 800d5fc:	18fb      	adds	r3, r7, r3
 800d5fe:	1c0a      	adds	r2, r1, #0
 800d600:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2241      	movs	r2, #65	@ 0x41
 800d606:	5c9b      	ldrb	r3, [r3, r2]
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b20      	cmp	r3, #32
 800d60c:	d000      	beq.n	800d610 <HAL_I2C_Master_Receive_DMA+0x2c>
 800d60e:	e0dd      	b.n	800d7cc <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	699a      	ldr	r2, [r3, #24]
 800d616:	2380      	movs	r3, #128	@ 0x80
 800d618:	021b      	lsls	r3, r3, #8
 800d61a:	401a      	ands	r2, r3
 800d61c:	2380      	movs	r3, #128	@ 0x80
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	429a      	cmp	r2, r3
 800d622:	d101      	bne.n	800d628 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800d624:	2302      	movs	r3, #2
 800d626:	e0d2      	b.n	800d7ce <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2240      	movs	r2, #64	@ 0x40
 800d62c:	5c9b      	ldrb	r3, [r3, r2]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d101      	bne.n	800d636 <HAL_I2C_Master_Receive_DMA+0x52>
 800d632:	2302      	movs	r3, #2
 800d634:	e0cb      	b.n	800d7ce <HAL_I2C_Master_Receive_DMA+0x1ea>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2240      	movs	r2, #64	@ 0x40
 800d63a:	2101      	movs	r1, #1
 800d63c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2241      	movs	r2, #65	@ 0x41
 800d642:	2122      	movs	r1, #34	@ 0x22
 800d644:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2242      	movs	r2, #66	@ 0x42
 800d64a:	2110      	movs	r1, #16
 800d64c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2200      	movs	r2, #0
 800d652:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2208      	movs	r2, #8
 800d65e:	18ba      	adds	r2, r7, r2
 800d660:	8812      	ldrh	r2, [r2, #0]
 800d662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	4a5c      	ldr	r2, [pc, #368]	@ (800d7d8 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800d668:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	4a5b      	ldr	r2, [pc, #364]	@ (800d7dc <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800d66e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d674:	b29b      	uxth	r3, r3
 800d676:	2bff      	cmp	r3, #255	@ 0xff
 800d678:	d906      	bls.n	800d688 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	22ff      	movs	r2, #255	@ 0xff
 800d67e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d680:	2380      	movs	r3, #128	@ 0x80
 800d682:	045b      	lsls	r3, r3, #17
 800d684:	617b      	str	r3, [r7, #20]
 800d686:	e007      	b.n	800d698 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d692:	2380      	movs	r3, #128	@ 0x80
 800d694:	049b      	lsls	r3, r3, #18
 800d696:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d100      	bne.n	800d6a2 <HAL_I2C_Master_Receive_DMA+0xbe>
 800d6a0:	e078      	b.n	800d794 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d023      	beq.n	800d6f2 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6ae:	4a4c      	ldr	r2, [pc, #304]	@ (800d7e0 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800d6b0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6b6:	4a4b      	ldr	r2, [pc, #300]	@ (800d7e4 <HAL_I2C_Master_Receive_DMA+0x200>)
 800d6b8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6be:	2200      	movs	r2, #0
 800d6c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3324      	adds	r3, #36	@ 0x24
 800d6d4:	0019      	movs	r1, r3
 800d6d6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d6dc:	2513      	movs	r5, #19
 800d6de:	197c      	adds	r4, r7, r5
 800d6e0:	f7ff f888 	bl	800c7f4 <HAL_DMA_Start_IT>
 800d6e4:	0003      	movs	r3, r0
 800d6e6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d6e8:	197b      	adds	r3, r7, r5
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d13d      	bne.n	800d76c <HAL_I2C_Master_Receive_DMA+0x188>
 800d6f0:	e013      	b.n	800d71a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2241      	movs	r2, #65	@ 0x41
 800d6f6:	2120      	movs	r1, #32
 800d6f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2242      	movs	r2, #66	@ 0x42
 800d6fe:	2100      	movs	r1, #0
 800d700:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d706:	2280      	movs	r2, #128	@ 0x80
 800d708:	431a      	orrs	r2, r3
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2240      	movs	r2, #64	@ 0x40
 800d712:	2100      	movs	r1, #0
 800d714:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e059      	b.n	800d7ce <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	697c      	ldr	r4, [r7, #20]
 800d722:	230a      	movs	r3, #10
 800d724:	18fb      	adds	r3, r7, r3
 800d726:	8819      	ldrh	r1, [r3, #0]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	4b2f      	ldr	r3, [pc, #188]	@ (800d7e8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	0023      	movs	r3, r4
 800d730:	f001 fc08 	bl	800ef44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d738:	b29a      	uxth	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	b29a      	uxth	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2240      	movs	r2, #64	@ 0x40
 800d74a:	2100      	movs	r1, #0
 800d74c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2110      	movs	r1, #16
 800d752:	0018      	movs	r0, r3
 800d754:	f001 fc30 	bl	800efb8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2180      	movs	r1, #128	@ 0x80
 800d764:	0209      	lsls	r1, r1, #8
 800d766:	430a      	orrs	r2, r1
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	e02d      	b.n	800d7c8 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2241      	movs	r2, #65	@ 0x41
 800d770:	2120      	movs	r1, #32
 800d772:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2242      	movs	r2, #66	@ 0x42
 800d778:	2100      	movs	r1, #0
 800d77a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d780:	2210      	movs	r2, #16
 800d782:	431a      	orrs	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2240      	movs	r2, #64	@ 0x40
 800d78c:	2100      	movs	r1, #0
 800d78e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	e01c      	b.n	800d7ce <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	4a15      	ldr	r2, [pc, #84]	@ (800d7ec <HAL_I2C_Master_Receive_DMA+0x208>)
 800d798:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	2380      	movs	r3, #128	@ 0x80
 800d7a2:	049c      	lsls	r4, r3, #18
 800d7a4:	230a      	movs	r3, #10
 800d7a6:	18fb      	adds	r3, r7, r3
 800d7a8:	8819      	ldrh	r1, [r3, #0]
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d7e8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	0023      	movs	r3, r4
 800d7b2:	f001 fbc7 	bl	800ef44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2240      	movs	r2, #64	@ 0x40
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	0018      	movs	r0, r3
 800d7c4:	f001 fbf8 	bl	800efb8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e000      	b.n	800d7ce <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d7cc:	2302      	movs	r3, #2
  }
}
 800d7ce:	0018      	movs	r0, r3
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	b006      	add	sp, #24
 800d7d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7d6:	46c0      	nop			@ (mov r8, r8)
 800d7d8:	ffff0000 	.word	0xffff0000
 800d7dc:	0800dddd 	.word	0x0800dddd
 800d7e0:	0800ee35 	.word	0x0800ee35
 800d7e4:	0800eed5 	.word	0x0800eed5
 800d7e8:	80002400 	.word	0x80002400
 800d7ec:	0800d989 	.word	0x0800d989

0800d7f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	699b      	ldr	r3, [r3, #24]
 800d7fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d005      	beq.n	800d81c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	68f9      	ldr	r1, [r7, #12]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	4798      	blx	r3
  }
}
 800d81c:	46c0      	nop			@ (mov r8, r8)
 800d81e:	46bd      	mov	sp, r7
 800d820:	b004      	add	sp, #16
 800d822:	bd80      	pop	{r7, pc}

0800d824 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d83c:	697a      	ldr	r2, [r7, #20]
 800d83e:	2380      	movs	r3, #128	@ 0x80
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	4013      	ands	r3, r2
 800d844:	d00e      	beq.n	800d864 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	2280      	movs	r2, #128	@ 0x80
 800d84a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d84c:	d00a      	beq.n	800d864 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d852:	2201      	movs	r2, #1
 800d854:	431a      	orrs	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2280      	movs	r2, #128	@ 0x80
 800d860:	0052      	lsls	r2, r2, #1
 800d862:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	2380      	movs	r3, #128	@ 0x80
 800d868:	00db      	lsls	r3, r3, #3
 800d86a:	4013      	ands	r3, r2
 800d86c:	d00e      	beq.n	800d88c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	2280      	movs	r2, #128	@ 0x80
 800d872:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d874:	d00a      	beq.n	800d88c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d87a:	2208      	movs	r2, #8
 800d87c:	431a      	orrs	r2, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2280      	movs	r2, #128	@ 0x80
 800d888:	00d2      	lsls	r2, r2, #3
 800d88a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d88c:	697a      	ldr	r2, [r7, #20]
 800d88e:	2380      	movs	r3, #128	@ 0x80
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4013      	ands	r3, r2
 800d894:	d00e      	beq.n	800d8b4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2280      	movs	r2, #128	@ 0x80
 800d89a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d89c:	d00a      	beq.n	800d8b4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8a2:	2202      	movs	r2, #2
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2280      	movs	r2, #128	@ 0x80
 800d8b0:	0092      	lsls	r2, r2, #2
 800d8b2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8b8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	220b      	movs	r2, #11
 800d8be:	4013      	ands	r3, r2
 800d8c0:	d005      	beq.n	800d8ce <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	0011      	movs	r1, r2
 800d8c8:	0018      	movs	r0, r3
 800d8ca:	f001 f915 	bl	800eaf8 <I2C_ITError>
  }
}
 800d8ce:	46c0      	nop			@ (mov r8, r8)
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	b006      	add	sp, #24
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d8de:	46c0      	nop			@ (mov r8, r8)
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	b002      	add	sp, #8
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b082      	sub	sp, #8
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d8ee:	46c0      	nop			@ (mov r8, r8)
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	b002      	add	sp, #8
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d8fe:	46c0      	nop			@ (mov r8, r8)
 800d900:	46bd      	mov	sp, r7
 800d902:	b002      	add	sp, #8
 800d904:	bd80      	pop	{r7, pc}

0800d906 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b082      	sub	sp, #8
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d90e:	46c0      	nop			@ (mov r8, r8)
 800d910:	46bd      	mov	sp, r7
 800d912:	b002      	add	sp, #8
 800d914:	bd80      	pop	{r7, pc}

0800d916 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b082      	sub	sp, #8
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
 800d91e:	0008      	movs	r0, r1
 800d920:	0011      	movs	r1, r2
 800d922:	1cfb      	adds	r3, r7, #3
 800d924:	1c02      	adds	r2, r0, #0
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	003b      	movs	r3, r7
 800d92a:	1c0a      	adds	r2, r1, #0
 800d92c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d92e:	46c0      	nop			@ (mov r8, r8)
 800d930:	46bd      	mov	sp, r7
 800d932:	b002      	add	sp, #8
 800d934:	bd80      	pop	{r7, pc}

0800d936 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d93e:	46c0      	nop			@ (mov r8, r8)
 800d940:	46bd      	mov	sp, r7
 800d942:	b002      	add	sp, #8
 800d944:	bd80      	pop	{r7, pc}

0800d946 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d94e:	46c0      	nop			@ (mov r8, r8)
 800d950:	46bd      	mov	sp, r7
 800d952:	b002      	add	sp, #8
 800d954:	bd80      	pop	{r7, pc}

0800d956 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b082      	sub	sp, #8
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d95e:	46c0      	nop			@ (mov r8, r8)
 800d960:	46bd      	mov	sp, r7
 800d962:	b002      	add	sp, #8
 800d964:	bd80      	pop	{r7, pc}

0800d966 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b082      	sub	sp, #8
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d96e:	46c0      	nop			@ (mov r8, r8)
 800d970:	46bd      	mov	sp, r7
 800d972:	b002      	add	sp, #8
 800d974:	bd80      	pop	{r7, pc}

0800d976 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b082      	sub	sp, #8
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d97e:	46c0      	nop			@ (mov r8, r8)
 800d980:	46bd      	mov	sp, r7
 800d982:	b002      	add	sp, #8
 800d984:	bd80      	pop	{r7, pc}
	...

0800d988 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d988:	b590      	push	{r4, r7, lr}
 800d98a:	b089      	sub	sp, #36	@ 0x24
 800d98c:	af02      	add	r7, sp, #8
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2240      	movs	r2, #64	@ 0x40
 800d99c:	5c9b      	ldrb	r3, [r3, r2]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d101      	bne.n	800d9a6 <I2C_Master_ISR_IT+0x1e>
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	e113      	b.n	800dbce <I2C_Master_ISR_IT+0x246>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2240      	movs	r2, #64	@ 0x40
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2210      	movs	r2, #16
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	d012      	beq.n	800d9dc <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2210      	movs	r2, #16
 800d9ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d9bc:	d00e      	beq.n	800d9dc <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2210      	movs	r2, #16
 800d9c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ca:	2204      	movs	r2, #4
 800d9cc:	431a      	orrs	r2, r3
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	0018      	movs	r0, r3
 800d9d6:	f001 f9ba 	bl	800ed4e <I2C_Flush_TXDR>
 800d9da:	e0e5      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2204      	movs	r2, #4
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	d021      	beq.n	800da28 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d9ea:	d01d      	beq.n	800da28 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	2204      	movs	r2, #4
 800d9f0:	4393      	bics	r3, r2
 800d9f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9fe:	b2d2      	uxtb	r2, r2
 800da00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da06:	1c5a      	adds	r2, r3, #1
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da10:	3b01      	subs	r3, #1
 800da12:	b29a      	uxth	r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	3b01      	subs	r3, #1
 800da20:	b29a      	uxth	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800da26:	e0bf      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2202      	movs	r2, #2
 800da2c:	4013      	ands	r3, r2
 800da2e:	d01c      	beq.n	800da6a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2202      	movs	r2, #2
 800da34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800da36:	d018      	beq.n	800da6a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da3c:	781a      	ldrb	r2, [r3, #0]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da48:	1c5a      	adds	r2, r3, #1
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da52:	3b01      	subs	r3, #1
 800da54:	b29a      	uxth	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da5e:	b29b      	uxth	r3, r3
 800da60:	3b01      	subs	r3, #1
 800da62:	b29a      	uxth	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800da68:	e09e      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2280      	movs	r2, #128	@ 0x80
 800da6e:	4013      	ands	r3, r2
 800da70:	d100      	bne.n	800da74 <I2C_Master_ISR_IT+0xec>
 800da72:	e069      	b.n	800db48 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2240      	movs	r2, #64	@ 0x40
 800da78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800da7a:	d065      	beq.n	800db48 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da80:	b29b      	uxth	r3, r3
 800da82:	2b00      	cmp	r3, #0
 800da84:	d04a      	beq.n	800db1c <I2C_Master_ISR_IT+0x194>
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d146      	bne.n	800db1c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	b29a      	uxth	r2, r3
 800da96:	2112      	movs	r1, #18
 800da98:	187b      	adds	r3, r7, r1
 800da9a:	0592      	lsls	r2, r2, #22
 800da9c:	0d92      	lsrs	r2, r2, #22
 800da9e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	2bff      	cmp	r3, #255	@ 0xff
 800daa8:	d910      	bls.n	800dacc <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	22ff      	movs	r2, #255	@ 0xff
 800daae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	2380      	movs	r3, #128	@ 0x80
 800dab8:	045c      	lsls	r4, r3, #17
 800daba:	187b      	adds	r3, r7, r1
 800dabc:	8819      	ldrh	r1, [r3, #0]
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	2300      	movs	r3, #0
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	0023      	movs	r3, r4
 800dac6:	f001 fa3d 	bl	800ef44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800daca:	e03c      	b.n	800db46 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dada:	4a3f      	ldr	r2, [pc, #252]	@ (800dbd8 <I2C_Master_ISR_IT+0x250>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d00e      	beq.n	800dafe <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dae4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800daea:	2312      	movs	r3, #18
 800daec:	18fb      	adds	r3, r7, r3
 800daee:	8819      	ldrh	r1, [r3, #0]
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	2300      	movs	r3, #0
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	0023      	movs	r3, r4
 800daf8:	f001 fa24 	bl	800ef44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dafc:	e023      	b.n	800db46 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db02:	b2da      	uxtb	r2, r3
 800db04:	2380      	movs	r3, #128	@ 0x80
 800db06:	049c      	lsls	r4, r3, #18
 800db08:	2312      	movs	r3, #18
 800db0a:	18fb      	adds	r3, r7, r3
 800db0c:	8819      	ldrh	r1, [r3, #0]
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	2300      	movs	r3, #0
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	0023      	movs	r3, r4
 800db16:	f001 fa15 	bl	800ef44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db1a:	e014      	b.n	800db46 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	2380      	movs	r3, #128	@ 0x80
 800db24:	049b      	lsls	r3, r3, #18
 800db26:	401a      	ands	r2, r3
 800db28:	2380      	movs	r3, #128	@ 0x80
 800db2a:	049b      	lsls	r3, r3, #18
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d004      	beq.n	800db3a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	0018      	movs	r0, r3
 800db34:	f000 fcf4 	bl	800e520 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800db38:	e036      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2140      	movs	r1, #64	@ 0x40
 800db3e:	0018      	movs	r0, r3
 800db40:	f000 ffda 	bl	800eaf8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800db44:	e030      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
 800db46:	e02f      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	2240      	movs	r2, #64	@ 0x40
 800db4c:	4013      	ands	r3, r2
 800db4e:	d02b      	beq.n	800dba8 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2240      	movs	r2, #64	@ 0x40
 800db54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800db56:	d027      	beq.n	800dba8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d11d      	bne.n	800db9e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	2380      	movs	r3, #128	@ 0x80
 800db6a:	049b      	lsls	r3, r3, #18
 800db6c:	401a      	ands	r2, r3
 800db6e:	2380      	movs	r3, #128	@ 0x80
 800db70:	049b      	lsls	r3, r3, #18
 800db72:	429a      	cmp	r2, r3
 800db74:	d018      	beq.n	800dba8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7a:	4a17      	ldr	r2, [pc, #92]	@ (800dbd8 <I2C_Master_ISR_IT+0x250>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d109      	bne.n	800db94 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	685a      	ldr	r2, [r3, #4]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2180      	movs	r1, #128	@ 0x80
 800db8c:	01c9      	lsls	r1, r1, #7
 800db8e:	430a      	orrs	r2, r1
 800db90:	605a      	str	r2, [r3, #4]
 800db92:	e009      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	0018      	movs	r0, r3
 800db98:	f000 fcc2 	bl	800e520 <I2C_ITMasterSeqCplt>
 800db9c:	e004      	b.n	800dba8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2140      	movs	r1, #64	@ 0x40
 800dba2:	0018      	movs	r0, r3
 800dba4:	f000 ffa8 	bl	800eaf8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	2220      	movs	r2, #32
 800dbac:	4013      	ands	r3, r2
 800dbae:	d009      	beq.n	800dbc4 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dbb6:	d005      	beq.n	800dbc4 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	0011      	movs	r1, r2
 800dbbe:	0018      	movs	r0, r3
 800dbc0:	f000 fd54 	bl	800e66c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2240      	movs	r2, #64	@ 0x40
 800dbc8:	2100      	movs	r1, #0
 800dbca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	0018      	movs	r0, r3
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	b007      	add	sp, #28
 800dbd4:	bd90      	pop	{r4, r7, pc}
 800dbd6:	46c0      	nop			@ (mov r8, r8)
 800dbd8:	ffff0000 	.word	0xffff0000

0800dbdc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2240      	movs	r2, #64	@ 0x40
 800dbf6:	5c9b      	ldrb	r3, [r3, r2]
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d101      	bne.n	800dc00 <I2C_Slave_ISR_IT+0x24>
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	e0e6      	b.n	800ddce <I2C_Slave_ISR_IT+0x1f2>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2240      	movs	r2, #64	@ 0x40
 800dc04:	2101      	movs	r1, #1
 800dc06:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	2220      	movs	r2, #32
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	d009      	beq.n	800dc24 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2220      	movs	r2, #32
 800dc14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dc16:	d005      	beq.n	800dc24 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800dc18:	693a      	ldr	r2, [r7, #16]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	0011      	movs	r1, r2
 800dc1e:	0018      	movs	r0, r3
 800dc20:	f000 fdf2 	bl	800e808 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	2210      	movs	r2, #16
 800dc28:	4013      	ands	r3, r2
 800dc2a:	d052      	beq.n	800dcd2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2210      	movs	r2, #16
 800dc30:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dc32:	d04e      	beq.n	800dcd2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d12d      	bne.n	800dc9a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2241      	movs	r2, #65	@ 0x41
 800dc42:	5c9b      	ldrb	r3, [r3, r2]
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2b28      	cmp	r3, #40	@ 0x28
 800dc48:	d10b      	bne.n	800dc62 <I2C_Slave_ISR_IT+0x86>
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	2380      	movs	r3, #128	@ 0x80
 800dc4e:	049b      	lsls	r3, r3, #18
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d106      	bne.n	800dc62 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	0011      	movs	r1, r2
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f000 fef4 	bl	800ea48 <I2C_ITListenCplt>
 800dc60:	e036      	b.n	800dcd0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2241      	movs	r2, #65	@ 0x41
 800dc66:	5c9b      	ldrb	r3, [r3, r2]
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b29      	cmp	r3, #41	@ 0x29
 800dc6c:	d110      	bne.n	800dc90 <I2C_Slave_ISR_IT+0xb4>
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	4a59      	ldr	r2, [pc, #356]	@ (800ddd8 <I2C_Slave_ISR_IT+0x1fc>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d00c      	beq.n	800dc90 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2210      	movs	r2, #16
 800dc7c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	0018      	movs	r0, r3
 800dc82:	f001 f864 	bl	800ed4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	0018      	movs	r0, r3
 800dc8a:	f000 fc8b 	bl	800e5a4 <I2C_ITSlaveSeqCplt>
 800dc8e:	e01f      	b.n	800dcd0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2210      	movs	r2, #16
 800dc96:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800dc98:	e091      	b.n	800ddbe <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2210      	movs	r2, #16
 800dca0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dca6:	2204      	movs	r2, #4
 800dca8:	431a      	orrs	r2, r3
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d005      	beq.n	800dcc0 <I2C_Slave_ISR_IT+0xe4>
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	2380      	movs	r3, #128	@ 0x80
 800dcb8:	045b      	lsls	r3, r3, #17
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d000      	beq.n	800dcc0 <I2C_Slave_ISR_IT+0xe4>
 800dcbe:	e07e      	b.n	800ddbe <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	0011      	movs	r1, r2
 800dcc8:	0018      	movs	r0, r3
 800dcca:	f000 ff15 	bl	800eaf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800dcce:	e076      	b.n	800ddbe <I2C_Slave_ISR_IT+0x1e2>
 800dcd0:	e075      	b.n	800ddbe <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	d02f      	beq.n	800dd3a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2204      	movs	r2, #4
 800dcde:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800dce0:	d02b      	beq.n	800dd3a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d018      	beq.n	800dd1e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcfe:	1c5a      	adds	r2, r3, #1
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	3b01      	subs	r3, #1
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d14c      	bne.n	800ddc2 <I2C_Slave_ISR_IT+0x1e6>
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	4a2b      	ldr	r2, [pc, #172]	@ (800ddd8 <I2C_Slave_ISR_IT+0x1fc>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d048      	beq.n	800ddc2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	0018      	movs	r0, r3
 800dd34:	f000 fc36 	bl	800e5a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800dd38:	e043      	b.n	800ddc2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2208      	movs	r2, #8
 800dd3e:	4013      	ands	r3, r2
 800dd40:	d00a      	beq.n	800dd58 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2208      	movs	r2, #8
 800dd46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dd48:	d006      	beq.n	800dd58 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800dd4a:	693a      	ldr	r2, [r7, #16]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	0011      	movs	r1, r2
 800dd50:	0018      	movs	r0, r3
 800dd52:	f000 fb41 	bl	800e3d8 <I2C_ITAddrCplt>
 800dd56:	e035      	b.n	800ddc4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2202      	movs	r2, #2
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	d031      	beq.n	800ddc4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2202      	movs	r2, #2
 800dd64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dd66:	d02d      	beq.n	800ddc4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d018      	beq.n	800dda4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd76:	781a      	ldrb	r2, [r3, #0]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dda2:	e00f      	b.n	800ddc4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800dda4:	697a      	ldr	r2, [r7, #20]
 800dda6:	2380      	movs	r3, #128	@ 0x80
 800dda8:	045b      	lsls	r3, r3, #17
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d002      	beq.n	800ddb4 <I2C_Slave_ISR_IT+0x1d8>
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d107      	bne.n	800ddc4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	f000 fbf4 	bl	800e5a4 <I2C_ITSlaveSeqCplt>
 800ddbc:	e002      	b.n	800ddc4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800ddbe:	46c0      	nop			@ (mov r8, r8)
 800ddc0:	e000      	b.n	800ddc4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800ddc2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2240      	movs	r2, #64	@ 0x40
 800ddc8:	2100      	movs	r1, #0
 800ddca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	0018      	movs	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	b006      	add	sp, #24
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	46c0      	nop			@ (mov r8, r8)
 800ddd8:	ffff0000 	.word	0xffff0000

0800dddc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800dddc:	b590      	push	{r4, r7, lr}
 800ddde:	b089      	sub	sp, #36	@ 0x24
 800dde0:	af02      	add	r7, sp, #8
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2240      	movs	r2, #64	@ 0x40
 800ddec:	5c9b      	ldrb	r3, [r3, r2]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d101      	bne.n	800ddf6 <I2C_Master_ISR_DMA+0x1a>
 800ddf2:	2302      	movs	r3, #2
 800ddf4:	e0e7      	b.n	800dfc6 <I2C_Master_ISR_DMA+0x1ea>
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2240      	movs	r2, #64	@ 0x40
 800ddfa:	2101      	movs	r1, #1
 800ddfc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2210      	movs	r2, #16
 800de02:	4013      	ands	r3, r2
 800de04:	d017      	beq.n	800de36 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2210      	movs	r2, #16
 800de0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800de0c:	d013      	beq.n	800de36 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2210      	movs	r2, #16
 800de14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de1a:	2204      	movs	r2, #4
 800de1c:	431a      	orrs	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2120      	movs	r1, #32
 800de26:	0018      	movs	r0, r3
 800de28:	f001 f8c6 	bl	800efb8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	0018      	movs	r0, r3
 800de30:	f000 ff8d 	bl	800ed4e <I2C_Flush_TXDR>
 800de34:	e0c2      	b.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	2280      	movs	r2, #128	@ 0x80
 800de3a:	4013      	ands	r3, r2
 800de3c:	d100      	bne.n	800de40 <I2C_Master_ISR_DMA+0x64>
 800de3e:	e07c      	b.n	800df3a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2240      	movs	r2, #64	@ 0x40
 800de44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800de46:	d100      	bne.n	800de4a <I2C_Master_ISR_DMA+0x6e>
 800de48:	e077      	b.n	800df3a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2140      	movs	r1, #64	@ 0x40
 800de56:	438a      	bics	r2, r1
 800de58:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de5e:	b29b      	uxth	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d055      	beq.n	800df10 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	2312      	movs	r3, #18
 800de6e:	18fb      	adds	r3, r7, r3
 800de70:	0592      	lsls	r2, r2, #22
 800de72:	0d92      	lsrs	r2, r2, #22
 800de74:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	2bff      	cmp	r3, #255	@ 0xff
 800de7e:	d906      	bls.n	800de8e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	22ff      	movs	r2, #255	@ 0xff
 800de84:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800de86:	2380      	movs	r3, #128	@ 0x80
 800de88:	045b      	lsls	r3, r3, #17
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	e010      	b.n	800deb0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de92:	b29a      	uxth	r2, r3
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de9c:	4a4c      	ldr	r2, [pc, #304]	@ (800dfd0 <I2C_Master_ISR_DMA+0x1f4>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d003      	beq.n	800deaa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e002      	b.n	800deb0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800deaa:	2380      	movs	r3, #128	@ 0x80
 800deac:	049b      	lsls	r3, r3, #18
 800deae:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	697c      	ldr	r4, [r7, #20]
 800deb8:	2312      	movs	r3, #18
 800deba:	18fb      	adds	r3, r7, r3
 800debc:	8819      	ldrh	r1, [r3, #0]
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	2300      	movs	r3, #0
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	0023      	movs	r3, r4
 800dec6:	f001 f83d 	bl	800ef44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dece:	b29a      	uxth	r2, r3
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2241      	movs	r2, #65	@ 0x41
 800dee0:	5c9b      	ldrb	r3, [r3, r2]
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	2b22      	cmp	r3, #34	@ 0x22
 800dee6:	d109      	bne.n	800defc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2180      	movs	r1, #128	@ 0x80
 800def4:	0209      	lsls	r1, r1, #8
 800def6:	430a      	orrs	r2, r1
 800def8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800defa:	e05f      	b.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2180      	movs	r1, #128	@ 0x80
 800df08:	01c9      	lsls	r1, r1, #7
 800df0a:	430a      	orrs	r2, r1
 800df0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800df0e:	e055      	b.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	2380      	movs	r3, #128	@ 0x80
 800df18:	049b      	lsls	r3, r3, #18
 800df1a:	401a      	ands	r2, r3
 800df1c:	2380      	movs	r3, #128	@ 0x80
 800df1e:	049b      	lsls	r3, r3, #18
 800df20:	429a      	cmp	r2, r3
 800df22:	d004      	beq.n	800df2e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	0018      	movs	r0, r3
 800df28:	f000 fafa 	bl	800e520 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800df2c:	e046      	b.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2140      	movs	r1, #64	@ 0x40
 800df32:	0018      	movs	r0, r3
 800df34:	f000 fde0 	bl	800eaf8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800df38:	e040      	b.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	2240      	movs	r2, #64	@ 0x40
 800df3e:	4013      	ands	r3, r2
 800df40:	d02c      	beq.n	800df9c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2240      	movs	r2, #64	@ 0x40
 800df46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800df48:	d028      	beq.n	800df9c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df4e:	b29b      	uxth	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d11d      	bne.n	800df90 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	2380      	movs	r3, #128	@ 0x80
 800df5c:	049b      	lsls	r3, r3, #18
 800df5e:	401a      	ands	r2, r3
 800df60:	2380      	movs	r3, #128	@ 0x80
 800df62:	049b      	lsls	r3, r3, #18
 800df64:	429a      	cmp	r2, r3
 800df66:	d028      	beq.n	800dfba <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df6c:	4a18      	ldr	r2, [pc, #96]	@ (800dfd0 <I2C_Master_ISR_DMA+0x1f4>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d109      	bne.n	800df86 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2180      	movs	r1, #128	@ 0x80
 800df7e:	01c9      	lsls	r1, r1, #7
 800df80:	430a      	orrs	r2, r1
 800df82:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800df84:	e019      	b.n	800dfba <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	0018      	movs	r0, r3
 800df8a:	f000 fac9 	bl	800e520 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800df8e:	e014      	b.n	800dfba <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2140      	movs	r1, #64	@ 0x40
 800df94:	0018      	movs	r0, r3
 800df96:	f000 fdaf 	bl	800eaf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800df9a:	e00e      	b.n	800dfba <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	d00b      	beq.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2220      	movs	r2, #32
 800dfa8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dfaa:	d007      	beq.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	0011      	movs	r1, r2
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	f000 fb5a 	bl	800e66c <I2C_ITMasterCplt>
 800dfb8:	e000      	b.n	800dfbc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800dfba:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2240      	movs	r2, #64	@ 0x40
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	b007      	add	sp, #28
 800dfcc:	bd90      	pop	{r4, r7, pc}
 800dfce:	46c0      	nop			@ (mov r8, r8)
 800dfd0:	ffff0000 	.word	0xffff0000

0800dfd4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800dfd4:	b590      	push	{r4, r7, lr}
 800dfd6:	b089      	sub	sp, #36	@ 0x24
 800dfd8:	af02      	add	r7, sp, #8
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800dfe0:	4b88      	ldr	r3, [pc, #544]	@ (800e204 <I2C_Mem_ISR_DMA+0x230>)
 800dfe2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2240      	movs	r2, #64	@ 0x40
 800dfe8:	5c9b      	ldrb	r3, [r3, r2]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d101      	bne.n	800dff2 <I2C_Mem_ISR_DMA+0x1e>
 800dfee:	2302      	movs	r3, #2
 800dff0:	e104      	b.n	800e1fc <I2C_Mem_ISR_DMA+0x228>
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2240      	movs	r2, #64	@ 0x40
 800dff6:	2101      	movs	r1, #1
 800dff8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	2210      	movs	r2, #16
 800dffe:	4013      	ands	r3, r2
 800e000:	d017      	beq.n	800e032 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2210      	movs	r2, #16
 800e006:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e008:	d013      	beq.n	800e032 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2210      	movs	r2, #16
 800e010:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e016:	2204      	movs	r2, #4
 800e018:	431a      	orrs	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2120      	movs	r1, #32
 800e022:	0018      	movs	r0, r3
 800e024:	f000 ffc8 	bl	800efb8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	0018      	movs	r0, r3
 800e02c:	f000 fe8f 	bl	800ed4e <I2C_Flush_TXDR>
 800e030:	e0df      	b.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2202      	movs	r2, #2
 800e036:	4013      	ands	r3, r2
 800e038:	d00d      	beq.n	800e056 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2202      	movs	r2, #2
 800e03e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e040:	d009      	beq.n	800e056 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e04a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2201      	movs	r2, #1
 800e050:	4252      	negs	r2, r2
 800e052:	651a      	str	r2, [r3, #80]	@ 0x50
 800e054:	e0cd      	b.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	2280      	movs	r2, #128	@ 0x80
 800e05a:	4013      	ands	r3, r2
 800e05c:	d05e      	beq.n	800e11c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2240      	movs	r2, #64	@ 0x40
 800e062:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e064:	d05a      	beq.n	800e11c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2110      	movs	r1, #16
 800e06a:	0018      	movs	r0, r3
 800e06c:	f000 ffa4 	bl	800efb8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e074:	b29b      	uxth	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d04a      	beq.n	800e110 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e07e:	b29b      	uxth	r3, r3
 800e080:	2bff      	cmp	r3, #255	@ 0xff
 800e082:	d910      	bls.n	800e0a6 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	22ff      	movs	r2, #255	@ 0xff
 800e088:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e08e:	b299      	uxth	r1, r3
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e094:	b2da      	uxtb	r2, r3
 800e096:	2380      	movs	r3, #128	@ 0x80
 800e098:	045b      	lsls	r3, r3, #17
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	2400      	movs	r4, #0
 800e09e:	9400      	str	r4, [sp, #0]
 800e0a0:	f000 ff50 	bl	800ef44 <I2C_TransferConfig>
 800e0a4:	e011      	b.n	800e0ca <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0b4:	b299      	uxth	r1, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	2380      	movs	r3, #128	@ 0x80
 800e0be:	049b      	lsls	r3, r3, #18
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	2400      	movs	r4, #0
 800e0c4:	9400      	str	r4, [sp, #0]
 800e0c6:	f000 ff3d 	bl	800ef44 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2241      	movs	r2, #65	@ 0x41
 800e0e0:	5c9b      	ldrb	r3, [r3, r2]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	2b22      	cmp	r3, #34	@ 0x22
 800e0e6:	d109      	bne.n	800e0fc <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2180      	movs	r1, #128	@ 0x80
 800e0f4:	0209      	lsls	r1, r1, #8
 800e0f6:	430a      	orrs	r2, r1
 800e0f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e0fa:	e07a      	b.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2180      	movs	r1, #128	@ 0x80
 800e108:	01c9      	lsls	r1, r1, #7
 800e10a:	430a      	orrs	r2, r1
 800e10c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e10e:	e070      	b.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2140      	movs	r1, #64	@ 0x40
 800e114:	0018      	movs	r0, r3
 800e116:	f000 fcef 	bl	800eaf8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e11a:	e06a      	b.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2240      	movs	r2, #64	@ 0x40
 800e120:	4013      	ands	r3, r2
 800e122:	d058      	beq.n	800e1d6 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2240      	movs	r2, #64	@ 0x40
 800e128:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e12a:	d054      	beq.n	800e1d6 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2241      	movs	r2, #65	@ 0x41
 800e130:	5c9b      	ldrb	r3, [r3, r2]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2b22      	cmp	r3, #34	@ 0x22
 800e136:	d101      	bne.n	800e13c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800e138:	4b33      	ldr	r3, [pc, #204]	@ (800e208 <I2C_Mem_ISR_DMA+0x234>)
 800e13a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e140:	b29b      	uxth	r3, r3
 800e142:	2bff      	cmp	r3, #255	@ 0xff
 800e144:	d911      	bls.n	800e16a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	22ff      	movs	r2, #255	@ 0xff
 800e14a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e150:	b299      	uxth	r1, r3
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e156:	b2da      	uxtb	r2, r3
 800e158:	2380      	movs	r3, #128	@ 0x80
 800e15a:	045c      	lsls	r4, r3, #17
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	0023      	movs	r3, r4
 800e164:	f000 feee 	bl	800ef44 <I2C_TransferConfig>
 800e168:	e012      	b.n	800e190 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e16e:	b29a      	uxth	r2, r3
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e178:	b299      	uxth	r1, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	2380      	movs	r3, #128	@ 0x80
 800e182:	049c      	lsls	r4, r3, #18
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	0023      	movs	r3, r4
 800e18c:	f000 feda 	bl	800ef44 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e194:	b29a      	uxth	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2241      	movs	r2, #65	@ 0x41
 800e1a6:	5c9b      	ldrb	r3, [r3, r2]
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	2b22      	cmp	r3, #34	@ 0x22
 800e1ac:	d109      	bne.n	800e1c2 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2180      	movs	r1, #128	@ 0x80
 800e1ba:	0209      	lsls	r1, r1, #8
 800e1bc:	430a      	orrs	r2, r1
 800e1be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e1c0:	e017      	b.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2180      	movs	r1, #128	@ 0x80
 800e1ce:	01c9      	lsls	r1, r1, #7
 800e1d0:	430a      	orrs	r2, r1
 800e1d2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e1d4:	e00d      	b.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2220      	movs	r2, #32
 800e1da:	4013      	ands	r3, r2
 800e1dc:	d009      	beq.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2220      	movs	r2, #32
 800e1e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e1e4:	d005      	beq.n	800e1f2 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	0011      	movs	r1, r2
 800e1ec:	0018      	movs	r0, r3
 800e1ee:	f000 fa3d 	bl	800e66c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2240      	movs	r2, #64	@ 0x40
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	0018      	movs	r0, r3
 800e1fe:	46bd      	mov	sp, r7
 800e200:	b007      	add	sp, #28
 800e202:	bd90      	pop	{r4, r7, pc}
 800e204:	80002000 	.word	0x80002000
 800e208:	80002400 	.word	0x80002400

0800e20c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800e21e:	2300      	movs	r3, #0
 800e220:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2240      	movs	r2, #64	@ 0x40
 800e226:	5c9b      	ldrb	r3, [r3, r2]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d101      	bne.n	800e230 <I2C_Slave_ISR_DMA+0x24>
 800e22c:	2302      	movs	r3, #2
 800e22e:	e0cd      	b.n	800e3cc <I2C_Slave_ISR_DMA+0x1c0>
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2240      	movs	r2, #64	@ 0x40
 800e234:	2101      	movs	r1, #1
 800e236:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	2220      	movs	r2, #32
 800e23c:	4013      	ands	r3, r2
 800e23e:	d009      	beq.n	800e254 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2220      	movs	r2, #32
 800e244:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e246:	d005      	beq.n	800e254 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	0011      	movs	r1, r2
 800e24e:	0018      	movs	r0, r3
 800e250:	f000 fada 	bl	800e808 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2210      	movs	r2, #16
 800e258:	4013      	ands	r3, r2
 800e25a:	d100      	bne.n	800e25e <I2C_Slave_ISR_DMA+0x52>
 800e25c:	e0a3      	b.n	800e3a6 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2210      	movs	r2, #16
 800e262:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e264:	d100      	bne.n	800e268 <I2C_Slave_ISR_DMA+0x5c>
 800e266:	e09e      	b.n	800e3a6 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	2380      	movs	r3, #128	@ 0x80
 800e26c:	01db      	lsls	r3, r3, #7
 800e26e:	4013      	ands	r3, r2
 800e270:	d105      	bne.n	800e27e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	2380      	movs	r3, #128	@ 0x80
 800e276:	021b      	lsls	r3, r3, #8
 800e278:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e27a:	d100      	bne.n	800e27e <I2C_Slave_ISR_DMA+0x72>
 800e27c:	e08c      	b.n	800e398 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00c      	beq.n	800e2a0 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	2380      	movs	r3, #128	@ 0x80
 800e28a:	021b      	lsls	r3, r3, #8
 800e28c:	4013      	ands	r3, r2
 800e28e:	d007      	beq.n	800e2a0 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800e29c:	2301      	movs	r3, #1
 800e29e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00c      	beq.n	800e2c2 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	2380      	movs	r3, #128	@ 0x80
 800e2ac:	01db      	lsls	r3, r3, #7
 800e2ae:	4013      	ands	r3, r2
 800e2b0:	d007      	beq.n	800e2c2 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d12d      	bne.n	800e324 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2241      	movs	r2, #65	@ 0x41
 800e2cc:	5c9b      	ldrb	r3, [r3, r2]
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	2b28      	cmp	r3, #40	@ 0x28
 800e2d2:	d10b      	bne.n	800e2ec <I2C_Slave_ISR_DMA+0xe0>
 800e2d4:	69ba      	ldr	r2, [r7, #24]
 800e2d6:	2380      	movs	r3, #128	@ 0x80
 800e2d8:	049b      	lsls	r3, r3, #18
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d106      	bne.n	800e2ec <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	0011      	movs	r1, r2
 800e2e4:	0018      	movs	r0, r3
 800e2e6:	f000 fbaf 	bl	800ea48 <I2C_ITListenCplt>
 800e2ea:	e054      	b.n	800e396 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2241      	movs	r2, #65	@ 0x41
 800e2f0:	5c9b      	ldrb	r3, [r3, r2]
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b29      	cmp	r3, #41	@ 0x29
 800e2f6:	d110      	bne.n	800e31a <I2C_Slave_ISR_DMA+0x10e>
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	4a36      	ldr	r2, [pc, #216]	@ (800e3d4 <I2C_Slave_ISR_DMA+0x1c8>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d00c      	beq.n	800e31a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2210      	movs	r2, #16
 800e306:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	0018      	movs	r0, r3
 800e30c:	f000 fd1f 	bl	800ed4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	0018      	movs	r0, r3
 800e314:	f000 f946 	bl	800e5a4 <I2C_ITSlaveSeqCplt>
 800e318:	e03d      	b.n	800e396 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2210      	movs	r2, #16
 800e320:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800e322:	e03e      	b.n	800e3a2 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2210      	movs	r2, #16
 800e32a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e330:	2204      	movs	r2, #4
 800e332:	431a      	orrs	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800e338:	2317      	movs	r3, #23
 800e33a:	18fb      	adds	r3, r7, r3
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	2141      	movs	r1, #65	@ 0x41
 800e340:	5c52      	ldrb	r2, [r2, r1]
 800e342:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d004      	beq.n	800e354 <I2C_Slave_ISR_DMA+0x148>
 800e34a:	69ba      	ldr	r2, [r7, #24]
 800e34c:	2380      	movs	r3, #128	@ 0x80
 800e34e:	045b      	lsls	r3, r3, #17
 800e350:	429a      	cmp	r2, r3
 800e352:	d126      	bne.n	800e3a2 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e354:	2217      	movs	r2, #23
 800e356:	18bb      	adds	r3, r7, r2
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	2b21      	cmp	r3, #33	@ 0x21
 800e35c:	d003      	beq.n	800e366 <I2C_Slave_ISR_DMA+0x15a>
 800e35e:	18bb      	adds	r3, r7, r2
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	2b29      	cmp	r3, #41	@ 0x29
 800e364:	d103      	bne.n	800e36e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2221      	movs	r2, #33	@ 0x21
 800e36a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e36c:	e00b      	b.n	800e386 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e36e:	2217      	movs	r2, #23
 800e370:	18bb      	adds	r3, r7, r2
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	2b22      	cmp	r3, #34	@ 0x22
 800e376:	d003      	beq.n	800e380 <I2C_Slave_ISR_DMA+0x174>
 800e378:	18bb      	adds	r3, r7, r2
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e37e:	d102      	bne.n	800e386 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2222      	movs	r2, #34	@ 0x22
 800e384:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	0011      	movs	r1, r2
 800e38e:	0018      	movs	r0, r3
 800e390:	f000 fbb2 	bl	800eaf8 <I2C_ITError>
      if (treatdmanack == 1U)
 800e394:	e005      	b.n	800e3a2 <I2C_Slave_ISR_DMA+0x196>
 800e396:	e004      	b.n	800e3a2 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2210      	movs	r2, #16
 800e39e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e3a0:	e00f      	b.n	800e3c2 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800e3a2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e3a4:	e00d      	b.n	800e3c2 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2208      	movs	r2, #8
 800e3aa:	4013      	ands	r3, r2
 800e3ac:	d009      	beq.n	800e3c2 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2208      	movs	r2, #8
 800e3b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e3b4:	d005      	beq.n	800e3c2 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	0011      	movs	r1, r2
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f000 f80b 	bl	800e3d8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2240      	movs	r2, #64	@ 0x40
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	0018      	movs	r0, r3
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	b008      	add	sp, #32
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	ffff0000 	.word	0xffff0000

0800e3d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e3d8:	b5b0      	push	{r4, r5, r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2241      	movs	r2, #65	@ 0x41
 800e3e6:	5c9b      	ldrb	r3, [r3, r2]
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	001a      	movs	r2, r3
 800e3ec:	2328      	movs	r3, #40	@ 0x28
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	2b28      	cmp	r3, #40	@ 0x28
 800e3f2:	d000      	beq.n	800e3f6 <I2C_ITAddrCplt+0x1e>
 800e3f4:	e088      	b.n	800e508 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	699b      	ldr	r3, [r3, #24]
 800e3fc:	0c1b      	lsrs	r3, r3, #16
 800e3fe:	b2da      	uxtb	r2, r3
 800e400:	250f      	movs	r5, #15
 800e402:	197b      	adds	r3, r7, r5
 800e404:	2101      	movs	r1, #1
 800e406:	400a      	ands	r2, r1
 800e408:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	699b      	ldr	r3, [r3, #24]
 800e410:	0c1b      	lsrs	r3, r3, #16
 800e412:	b29a      	uxth	r2, r3
 800e414:	200c      	movs	r0, #12
 800e416:	183b      	adds	r3, r7, r0
 800e418:	21fe      	movs	r1, #254	@ 0xfe
 800e41a:	400a      	ands	r2, r1
 800e41c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	b29a      	uxth	r2, r3
 800e426:	240a      	movs	r4, #10
 800e428:	193b      	adds	r3, r7, r4
 800e42a:	0592      	lsls	r2, r2, #22
 800e42c:	0d92      	lsrs	r2, r2, #22
 800e42e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	b29a      	uxth	r2, r3
 800e438:	2308      	movs	r3, #8
 800e43a:	18fb      	adds	r3, r7, r3
 800e43c:	21fe      	movs	r1, #254	@ 0xfe
 800e43e:	400a      	ands	r2, r1
 800e440:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	2b02      	cmp	r3, #2
 800e448:	d148      	bne.n	800e4dc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800e44a:	0021      	movs	r1, r4
 800e44c:	187b      	adds	r3, r7, r1
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	09db      	lsrs	r3, r3, #7
 800e452:	b29a      	uxth	r2, r3
 800e454:	183b      	adds	r3, r7, r0
 800e456:	881b      	ldrh	r3, [r3, #0]
 800e458:	4053      	eors	r3, r2
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	001a      	movs	r2, r3
 800e45e:	2306      	movs	r3, #6
 800e460:	4013      	ands	r3, r2
 800e462:	d120      	bne.n	800e4a6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800e464:	183b      	adds	r3, r7, r0
 800e466:	187a      	adds	r2, r7, r1
 800e468:	8812      	ldrh	r2, [r2, #0]
 800e46a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	d14c      	bne.n	800e518 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2208      	movs	r2, #8
 800e48a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2240      	movs	r2, #64	@ 0x40
 800e490:	2100      	movs	r1, #0
 800e492:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e494:	183b      	adds	r3, r7, r0
 800e496:	881a      	ldrh	r2, [r3, #0]
 800e498:	197b      	adds	r3, r7, r5
 800e49a:	7819      	ldrb	r1, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	0018      	movs	r0, r3
 800e4a0:	f7ff fa39 	bl	800d916 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e4a4:	e038      	b.n	800e518 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800e4a6:	240c      	movs	r4, #12
 800e4a8:	193b      	adds	r3, r7, r4
 800e4aa:	2208      	movs	r2, #8
 800e4ac:	18ba      	adds	r2, r7, r2
 800e4ae:	8812      	ldrh	r2, [r2, #0]
 800e4b0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e4b2:	2380      	movs	r3, #128	@ 0x80
 800e4b4:	021a      	lsls	r2, r3, #8
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	0011      	movs	r1, r2
 800e4ba:	0018      	movs	r0, r3
 800e4bc:	f000 fe0a 	bl	800f0d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2240      	movs	r2, #64	@ 0x40
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e4c8:	193b      	adds	r3, r7, r4
 800e4ca:	881a      	ldrh	r2, [r3, #0]
 800e4cc:	230f      	movs	r3, #15
 800e4ce:	18fb      	adds	r3, r7, r3
 800e4d0:	7819      	ldrb	r1, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	0018      	movs	r0, r3
 800e4d6:	f7ff fa1e 	bl	800d916 <HAL_I2C_AddrCallback>
}
 800e4da:	e01d      	b.n	800e518 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e4dc:	2380      	movs	r3, #128	@ 0x80
 800e4de:	021a      	lsls	r2, r3, #8
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	0011      	movs	r1, r2
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	f000 fdf5 	bl	800f0d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2240      	movs	r2, #64	@ 0x40
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e4f2:	230c      	movs	r3, #12
 800e4f4:	18fb      	adds	r3, r7, r3
 800e4f6:	881a      	ldrh	r2, [r3, #0]
 800e4f8:	230f      	movs	r3, #15
 800e4fa:	18fb      	adds	r3, r7, r3
 800e4fc:	7819      	ldrb	r1, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	0018      	movs	r0, r3
 800e502:	f7ff fa08 	bl	800d916 <HAL_I2C_AddrCallback>
}
 800e506:	e007      	b.n	800e518 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2208      	movs	r2, #8
 800e50e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2240      	movs	r2, #64	@ 0x40
 800e514:	2100      	movs	r1, #0
 800e516:	5499      	strb	r1, [r3, r2]
}
 800e518:	46c0      	nop			@ (mov r8, r8)
 800e51a:	46bd      	mov	sp, r7
 800e51c:	b004      	add	sp, #16
 800e51e:	bdb0      	pop	{r4, r5, r7, pc}

0800e520 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2242      	movs	r2, #66	@ 0x42
 800e52c:	2100      	movs	r1, #0
 800e52e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2241      	movs	r2, #65	@ 0x41
 800e534:	5c9b      	ldrb	r3, [r3, r2]
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b21      	cmp	r3, #33	@ 0x21
 800e53a:	d117      	bne.n	800e56c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2241      	movs	r2, #65	@ 0x41
 800e540:	2120      	movs	r1, #32
 800e542:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2211      	movs	r2, #17
 800e548:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2101      	movs	r1, #1
 800e554:	0018      	movs	r0, r3
 800e556:	f000 fdbd 	bl	800f0d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2240      	movs	r2, #64	@ 0x40
 800e55e:	2100      	movs	r1, #0
 800e560:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	0018      	movs	r0, r3
 800e566:	f7ff f9b6 	bl	800d8d6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e56a:	e016      	b.n	800e59a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2241      	movs	r2, #65	@ 0x41
 800e570:	2120      	movs	r1, #32
 800e572:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2212      	movs	r2, #18
 800e578:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2102      	movs	r1, #2
 800e584:	0018      	movs	r0, r3
 800e586:	f000 fda5 	bl	800f0d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2240      	movs	r2, #64	@ 0x40
 800e58e:	2100      	movs	r1, #0
 800e590:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	0018      	movs	r0, r3
 800e596:	f7ff f9a6 	bl	800d8e6 <HAL_I2C_MasterRxCpltCallback>
}
 800e59a:	46c0      	nop			@ (mov r8, r8)
 800e59c:	46bd      	mov	sp, r7
 800e59e:	b002      	add	sp, #8
 800e5a0:	bd80      	pop	{r7, pc}
	...

0800e5a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2242      	movs	r2, #66	@ 0x42
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	2380      	movs	r3, #128	@ 0x80
 800e5c0:	01db      	lsls	r3, r3, #7
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	d008      	beq.n	800e5d8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4924      	ldr	r1, [pc, #144]	@ (800e664 <I2C_ITSlaveSeqCplt+0xc0>)
 800e5d2:	400a      	ands	r2, r1
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	e00c      	b.n	800e5f2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	2380      	movs	r3, #128	@ 0x80
 800e5dc:	021b      	lsls	r3, r3, #8
 800e5de:	4013      	ands	r3, r2
 800e5e0:	d007      	beq.n	800e5f2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	491e      	ldr	r1, [pc, #120]	@ (800e668 <I2C_ITSlaveSeqCplt+0xc4>)
 800e5ee:	400a      	ands	r2, r1
 800e5f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2241      	movs	r2, #65	@ 0x41
 800e5f6:	5c9b      	ldrb	r3, [r3, r2]
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	2b29      	cmp	r3, #41	@ 0x29
 800e5fc:	d114      	bne.n	800e628 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2241      	movs	r2, #65	@ 0x41
 800e602:	2128      	movs	r1, #40	@ 0x28
 800e604:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2221      	movs	r2, #33	@ 0x21
 800e60a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2101      	movs	r1, #1
 800e610:	0018      	movs	r0, r3
 800e612:	f000 fd5f 	bl	800f0d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2240      	movs	r2, #64	@ 0x40
 800e61a:	2100      	movs	r1, #0
 800e61c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	0018      	movs	r0, r3
 800e622:	f7ff f968 	bl	800d8f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e626:	e019      	b.n	800e65c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2241      	movs	r2, #65	@ 0x41
 800e62c:	5c9b      	ldrb	r3, [r3, r2]
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	2b2a      	cmp	r3, #42	@ 0x2a
 800e632:	d113      	bne.n	800e65c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2241      	movs	r2, #65	@ 0x41
 800e638:	2128      	movs	r1, #40	@ 0x28
 800e63a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2222      	movs	r2, #34	@ 0x22
 800e640:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2102      	movs	r1, #2
 800e646:	0018      	movs	r0, r3
 800e648:	f000 fd44 	bl	800f0d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2240      	movs	r2, #64	@ 0x40
 800e650:	2100      	movs	r1, #0
 800e652:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	0018      	movs	r0, r3
 800e658:	f7ff f955 	bl	800d906 <HAL_I2C_SlaveRxCpltCallback>
}
 800e65c:	46c0      	nop			@ (mov r8, r8)
 800e65e:	46bd      	mov	sp, r7
 800e660:	b004      	add	sp, #16
 800e662:	bd80      	pop	{r7, pc}
 800e664:	ffffbfff 	.word	0xffffbfff
 800e668:	ffff7fff 	.word	0xffff7fff

0800e66c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2220      	movs	r2, #32
 800e680:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2241      	movs	r2, #65	@ 0x41
 800e686:	5c9b      	ldrb	r3, [r3, r2]
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b21      	cmp	r3, #33	@ 0x21
 800e68c:	d108      	bne.n	800e6a0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2101      	movs	r1, #1
 800e692:	0018      	movs	r0, r3
 800e694:	f000 fd1e 	bl	800f0d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2211      	movs	r2, #17
 800e69c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e69e:	e00d      	b.n	800e6bc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2241      	movs	r2, #65	@ 0x41
 800e6a4:	5c9b      	ldrb	r3, [r3, r2]
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	2b22      	cmp	r3, #34	@ 0x22
 800e6aa:	d107      	bne.n	800e6bc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2102      	movs	r1, #2
 800e6b0:	0018      	movs	r0, r3
 800e6b2:	f000 fd0f 	bl	800f0d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2212      	movs	r2, #18
 800e6ba:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	494e      	ldr	r1, [pc, #312]	@ (800e800 <I2C_ITMasterCplt+0x194>)
 800e6c8:	400a      	ands	r2, r1
 800e6ca:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4a4b      	ldr	r2, [pc, #300]	@ (800e804 <I2C_ITMasterCplt+0x198>)
 800e6d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2210      	movs	r2, #16
 800e6dc:	4013      	ands	r3, r2
 800e6de:	d009      	beq.n	800e6f4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2210      	movs	r2, #16
 800e6e6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6ec:	2204      	movs	r2, #4
 800e6ee:	431a      	orrs	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2241      	movs	r2, #65	@ 0x41
 800e6f8:	5c9b      	ldrb	r3, [r3, r2]
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b60      	cmp	r3, #96	@ 0x60
 800e6fe:	d109      	bne.n	800e714 <I2C_ITMasterCplt+0xa8>
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	2204      	movs	r2, #4
 800e704:	4013      	ands	r3, r2
 800e706:	d005      	beq.n	800e714 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800e712:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	0018      	movs	r0, r3
 800e718:	f000 fb19 	bl	800ed4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e720:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2241      	movs	r2, #65	@ 0x41
 800e726:	5c9b      	ldrb	r3, [r3, r2]
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b60      	cmp	r3, #96	@ 0x60
 800e72c:	d002      	beq.n	800e734 <I2C_ITMasterCplt+0xc8>
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d007      	beq.n	800e744 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	0011      	movs	r1, r2
 800e73c:	0018      	movs	r0, r3
 800e73e:	f000 f9db 	bl	800eaf8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e742:	e058      	b.n	800e7f6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2241      	movs	r2, #65	@ 0x41
 800e748:	5c9b      	ldrb	r3, [r3, r2]
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b21      	cmp	r3, #33	@ 0x21
 800e74e:	d126      	bne.n	800e79e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2241      	movs	r2, #65	@ 0x41
 800e754:	2120      	movs	r1, #32
 800e756:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2242      	movs	r2, #66	@ 0x42
 800e762:	5c9b      	ldrb	r3, [r3, r2]
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b40      	cmp	r3, #64	@ 0x40
 800e768:	d10c      	bne.n	800e784 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2242      	movs	r2, #66	@ 0x42
 800e76e:	2100      	movs	r1, #0
 800e770:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2240      	movs	r2, #64	@ 0x40
 800e776:	2100      	movs	r1, #0
 800e778:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	0018      	movs	r0, r3
 800e77e:	f7ff f8e2 	bl	800d946 <HAL_I2C_MemTxCpltCallback>
}
 800e782:	e038      	b.n	800e7f6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2242      	movs	r2, #66	@ 0x42
 800e788:	2100      	movs	r1, #0
 800e78a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2240      	movs	r2, #64	@ 0x40
 800e790:	2100      	movs	r1, #0
 800e792:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	0018      	movs	r0, r3
 800e798:	f7ff f89d 	bl	800d8d6 <HAL_I2C_MasterTxCpltCallback>
}
 800e79c:	e02b      	b.n	800e7f6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2241      	movs	r2, #65	@ 0x41
 800e7a2:	5c9b      	ldrb	r3, [r3, r2]
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	2b22      	cmp	r3, #34	@ 0x22
 800e7a8:	d125      	bne.n	800e7f6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2241      	movs	r2, #65	@ 0x41
 800e7ae:	2120      	movs	r1, #32
 800e7b0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2242      	movs	r2, #66	@ 0x42
 800e7bc:	5c9b      	ldrb	r3, [r3, r2]
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b40      	cmp	r3, #64	@ 0x40
 800e7c2:	d10c      	bne.n	800e7de <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2242      	movs	r2, #66	@ 0x42
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2240      	movs	r2, #64	@ 0x40
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	f7ff f8bd 	bl	800d956 <HAL_I2C_MemRxCpltCallback>
}
 800e7dc:	e00b      	b.n	800e7f6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2242      	movs	r2, #66	@ 0x42
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2240      	movs	r2, #64	@ 0x40
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	0018      	movs	r0, r3
 800e7f2:	f7ff f878 	bl	800d8e6 <HAL_I2C_MasterRxCpltCallback>
}
 800e7f6:	46c0      	nop			@ (mov r8, r8)
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	b006      	add	sp, #24
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	46c0      	nop			@ (mov r8, r8)
 800e800:	fe00e800 	.word	0xfe00e800
 800e804:	ffff0000 	.word	0xffff0000

0800e808 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e81e:	200f      	movs	r0, #15
 800e820:	183b      	adds	r3, r7, r0
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	2141      	movs	r1, #65	@ 0x41
 800e826:	5c52      	ldrb	r2, [r2, r1]
 800e828:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2220      	movs	r2, #32
 800e830:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e832:	183b      	adds	r3, r7, r0
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	2b21      	cmp	r3, #33	@ 0x21
 800e838:	d003      	beq.n	800e842 <I2C_ITSlaveCplt+0x3a>
 800e83a:	183b      	adds	r3, r7, r0
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	2b29      	cmp	r3, #41	@ 0x29
 800e840:	d109      	bne.n	800e856 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e842:	4a7b      	ldr	r2, [pc, #492]	@ (800ea30 <I2C_ITSlaveCplt+0x228>)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	0011      	movs	r1, r2
 800e848:	0018      	movs	r0, r3
 800e84a:	f000 fc43 	bl	800f0d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2221      	movs	r2, #33	@ 0x21
 800e852:	631a      	str	r2, [r3, #48]	@ 0x30
 800e854:	e011      	b.n	800e87a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e856:	220f      	movs	r2, #15
 800e858:	18bb      	adds	r3, r7, r2
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	2b22      	cmp	r3, #34	@ 0x22
 800e85e:	d003      	beq.n	800e868 <I2C_ITSlaveCplt+0x60>
 800e860:	18bb      	adds	r3, r7, r2
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	2b2a      	cmp	r3, #42	@ 0x2a
 800e866:	d108      	bne.n	800e87a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e868:	4a72      	ldr	r2, [pc, #456]	@ (800ea34 <I2C_ITSlaveCplt+0x22c>)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	0011      	movs	r1, r2
 800e86e:	0018      	movs	r0, r3
 800e870:	f000 fc30 	bl	800f0d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2222      	movs	r2, #34	@ 0x22
 800e878:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2180      	movs	r1, #128	@ 0x80
 800e886:	0209      	lsls	r1, r1, #8
 800e888:	430a      	orrs	r2, r1
 800e88a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	685a      	ldr	r2, [r3, #4]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4968      	ldr	r1, [pc, #416]	@ (800ea38 <I2C_ITSlaveCplt+0x230>)
 800e898:	400a      	ands	r2, r1
 800e89a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	0018      	movs	r0, r3
 800e8a0:	f000 fa55 	bl	800ed4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	2380      	movs	r3, #128	@ 0x80
 800e8a8:	01db      	lsls	r3, r3, #7
 800e8aa:	4013      	ands	r3, r2
 800e8ac:	d013      	beq.n	800e8d6 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4960      	ldr	r1, [pc, #384]	@ (800ea3c <I2C_ITSlaveCplt+0x234>)
 800e8ba:	400a      	ands	r2, r1
 800e8bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d01f      	beq.n	800e906 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e8d4:	e017      	b.n	800e906 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	2380      	movs	r3, #128	@ 0x80
 800e8da:	021b      	lsls	r3, r3, #8
 800e8dc:	4013      	ands	r3, r2
 800e8de:	d012      	beq.n	800e906 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4955      	ldr	r1, [pc, #340]	@ (800ea40 <I2C_ITSlaveCplt+0x238>)
 800e8ec:	400a      	ands	r2, r1
 800e8ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	b29a      	uxth	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	2204      	movs	r2, #4
 800e90a:	4013      	ands	r3, r2
 800e90c:	d020      	beq.n	800e950 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	2204      	movs	r2, #4
 800e912:	4393      	bics	r3, r2
 800e914:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e920:	b2d2      	uxtb	r2, r2
 800e922:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e928:	1c5a      	adds	r2, r3, #1
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00c      	beq.n	800e950 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e93a:	3b01      	subs	r3, #1
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e946:	b29b      	uxth	r3, r3
 800e948:	3b01      	subs	r3, #1
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e954:	b29b      	uxth	r3, r3
 800e956:	2b00      	cmp	r3, #0
 800e958:	d005      	beq.n	800e966 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e95e:	2204      	movs	r2, #4
 800e960:	431a      	orrs	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2242      	movs	r2, #66	@ 0x42
 800e96a:	2100      	movs	r1, #0
 800e96c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d013      	beq.n	800e9a4 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	0011      	movs	r1, r2
 800e984:	0018      	movs	r0, r3
 800e986:	f000 f8b7 	bl	800eaf8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2241      	movs	r2, #65	@ 0x41
 800e98e:	5c9b      	ldrb	r3, [r3, r2]
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b28      	cmp	r3, #40	@ 0x28
 800e994:	d147      	bne.n	800ea26 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	0011      	movs	r1, r2
 800e99c:	0018      	movs	r0, r3
 800e99e:	f000 f853 	bl	800ea48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e9a2:	e040      	b.n	800ea26 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a8:	4a26      	ldr	r2, [pc, #152]	@ (800ea44 <I2C_ITSlaveCplt+0x23c>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d016      	beq.n	800e9dc <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	0018      	movs	r0, r3
 800e9b2:	f7ff fdf7 	bl	800e5a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a22      	ldr	r2, [pc, #136]	@ (800ea44 <I2C_ITSlaveCplt+0x23c>)
 800e9ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2241      	movs	r2, #65	@ 0x41
 800e9c0:	2120      	movs	r1, #32
 800e9c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2240      	movs	r2, #64	@ 0x40
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	0018      	movs	r0, r3
 800e9d6:	f7fe ffae 	bl	800d936 <HAL_I2C_ListenCpltCallback>
}
 800e9da:	e024      	b.n	800ea26 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2241      	movs	r2, #65	@ 0x41
 800e9e0:	5c9b      	ldrb	r3, [r3, r2]
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	2b22      	cmp	r3, #34	@ 0x22
 800e9e6:	d10f      	bne.n	800ea08 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2241      	movs	r2, #65	@ 0x41
 800e9ec:	2120      	movs	r1, #32
 800e9ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2240      	movs	r2, #64	@ 0x40
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	0018      	movs	r0, r3
 800ea02:	f7fe ff80 	bl	800d906 <HAL_I2C_SlaveRxCpltCallback>
}
 800ea06:	e00e      	b.n	800ea26 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2241      	movs	r2, #65	@ 0x41
 800ea0c:	2120      	movs	r1, #32
 800ea0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2240      	movs	r2, #64	@ 0x40
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	0018      	movs	r0, r3
 800ea22:	f7fe ff68 	bl	800d8f6 <HAL_I2C_SlaveTxCpltCallback>
}
 800ea26:	46c0      	nop			@ (mov r8, r8)
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	b006      	add	sp, #24
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	46c0      	nop			@ (mov r8, r8)
 800ea30:	00008001 	.word	0x00008001
 800ea34:	00008002 	.word	0x00008002
 800ea38:	fe00e800 	.word	0xfe00e800
 800ea3c:	ffffbfff 	.word	0xffffbfff
 800ea40:	ffff7fff 	.word	0xffff7fff
 800ea44:	ffff0000 	.word	0xffff0000

0800ea48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	4a26      	ldr	r2, [pc, #152]	@ (800eaf0 <I2C_ITListenCplt+0xa8>)
 800ea56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2241      	movs	r2, #65	@ 0x41
 800ea62:	2120      	movs	r1, #32
 800ea64:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2242      	movs	r2, #66	@ 0x42
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2204      	movs	r2, #4
 800ea78:	4013      	ands	r3, r2
 800ea7a:	d022      	beq.n	800eac2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d012      	beq.n	800eac2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	3b01      	subs	r3, #1
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaba:	2204      	movs	r2, #4
 800eabc:	431a      	orrs	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800eac2:	4a0c      	ldr	r2, [pc, #48]	@ (800eaf4 <I2C_ITListenCplt+0xac>)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	0011      	movs	r1, r2
 800eac8:	0018      	movs	r0, r3
 800eaca:	f000 fb03 	bl	800f0d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2210      	movs	r2, #16
 800ead4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2240      	movs	r2, #64	@ 0x40
 800eada:	2100      	movs	r1, #0
 800eadc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	0018      	movs	r0, r3
 800eae2:	f7fe ff28 	bl	800d936 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800eae6:	46c0      	nop			@ (mov r8, r8)
 800eae8:	46bd      	mov	sp, r7
 800eaea:	b002      	add	sp, #8
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	46c0      	nop			@ (mov r8, r8)
 800eaf0:	ffff0000 	.word	0xffff0000
 800eaf4:	00008003 	.word	0x00008003

0800eaf8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800eb02:	200f      	movs	r0, #15
 800eb04:	183b      	adds	r3, r7, r0
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	2141      	movs	r1, #65	@ 0x41
 800eb0a:	5c52      	ldrb	r2, [r2, r1]
 800eb0c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2242      	movs	r2, #66	@ 0x42
 800eb12:	2100      	movs	r1, #0
 800eb14:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a72      	ldr	r2, [pc, #456]	@ (800ece4 <I2C_ITError+0x1ec>)
 800eb1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	431a      	orrs	r2, r3
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800eb2e:	183b      	adds	r3, r7, r0
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b28      	cmp	r3, #40	@ 0x28
 800eb34:	d007      	beq.n	800eb46 <I2C_ITError+0x4e>
 800eb36:	183b      	adds	r3, r7, r0
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	2b29      	cmp	r3, #41	@ 0x29
 800eb3c:	d003      	beq.n	800eb46 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800eb3e:	183b      	adds	r3, r7, r0
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb44:	d10c      	bne.n	800eb60 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2103      	movs	r1, #3
 800eb4a:	0018      	movs	r0, r3
 800eb4c:	f000 fac2 	bl	800f0d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2241      	movs	r2, #65	@ 0x41
 800eb54:	2128      	movs	r1, #40	@ 0x28
 800eb56:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a63      	ldr	r2, [pc, #396]	@ (800ece8 <I2C_ITError+0x1f0>)
 800eb5c:	635a      	str	r2, [r3, #52]	@ 0x34
 800eb5e:	e032      	b.n	800ebc6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800eb60:	4a62      	ldr	r2, [pc, #392]	@ (800ecec <I2C_ITError+0x1f4>)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	0011      	movs	r1, r2
 800eb66:	0018      	movs	r0, r3
 800eb68:	f000 fab4 	bl	800f0d4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	0018      	movs	r0, r3
 800eb70:	f000 f8ed 	bl	800ed4e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2241      	movs	r2, #65	@ 0x41
 800eb78:	5c9b      	ldrb	r3, [r3, r2]
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b60      	cmp	r3, #96	@ 0x60
 800eb7e:	d01f      	beq.n	800ebc0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2241      	movs	r2, #65	@ 0x41
 800eb84:	2120      	movs	r1, #32
 800eb86:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	699b      	ldr	r3, [r3, #24]
 800eb8e:	2220      	movs	r2, #32
 800eb90:	4013      	ands	r3, r2
 800eb92:	2b20      	cmp	r3, #32
 800eb94:	d114      	bne.n	800ebc0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	2210      	movs	r2, #16
 800eb9e:	4013      	ands	r3, r2
 800eba0:	2b10      	cmp	r3, #16
 800eba2:	d109      	bne.n	800ebb8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2210      	movs	r2, #16
 800ebaa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebb0:	2204      	movs	r2, #4
 800ebb2:	431a      	orrs	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2220      	movs	r2, #32
 800ebbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d03b      	beq.n	800ec4c <I2C_ITError+0x154>
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	2b11      	cmp	r3, #17
 800ebd8:	d002      	beq.n	800ebe0 <I2C_ITError+0xe8>
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	2b21      	cmp	r3, #33	@ 0x21
 800ebde:	d135      	bne.n	800ec4c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	2380      	movs	r3, #128	@ 0x80
 800ebe8:	01db      	lsls	r3, r3, #7
 800ebea:	401a      	ands	r2, r3
 800ebec:	2380      	movs	r3, #128	@ 0x80
 800ebee:	01db      	lsls	r3, r3, #7
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d107      	bne.n	800ec04 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	493c      	ldr	r1, [pc, #240]	@ (800ecf0 <I2C_ITError+0x1f8>)
 800ec00:	400a      	ands	r2, r1
 800ec02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec08:	0018      	movs	r0, r3
 800ec0a:	f7fd ff8e 	bl	800cb2a <HAL_DMA_GetState>
 800ec0e:	0003      	movs	r3, r0
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d016      	beq.n	800ec42 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec18:	4a36      	ldr	r2, [pc, #216]	@ (800ecf4 <I2C_ITError+0x1fc>)
 800ec1a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2240      	movs	r2, #64	@ 0x40
 800ec20:	2100      	movs	r1, #0
 800ec22:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec28:	0018      	movs	r0, r3
 800ec2a:	f7fd fe89 	bl	800c940 <HAL_DMA_Abort_IT>
 800ec2e:	1e03      	subs	r3, r0, #0
 800ec30:	d051      	beq.n	800ecd6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec3c:	0018      	movs	r0, r3
 800ec3e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ec40:	e049      	b.n	800ecd6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	0018      	movs	r0, r3
 800ec46:	f000 f859 	bl	800ecfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ec4a:	e044      	b.n	800ecd6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d03b      	beq.n	800eccc <I2C_ITError+0x1d4>
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	2b12      	cmp	r3, #18
 800ec58:	d002      	beq.n	800ec60 <I2C_ITError+0x168>
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	2b22      	cmp	r3, #34	@ 0x22
 800ec5e:	d135      	bne.n	800eccc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	2380      	movs	r3, #128	@ 0x80
 800ec68:	021b      	lsls	r3, r3, #8
 800ec6a:	401a      	ands	r2, r3
 800ec6c:	2380      	movs	r3, #128	@ 0x80
 800ec6e:	021b      	lsls	r3, r3, #8
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d107      	bne.n	800ec84 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	491e      	ldr	r1, [pc, #120]	@ (800ecf8 <I2C_ITError+0x200>)
 800ec80:	400a      	ands	r2, r1
 800ec82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec88:	0018      	movs	r0, r3
 800ec8a:	f7fd ff4e 	bl	800cb2a <HAL_DMA_GetState>
 800ec8e:	0003      	movs	r3, r0
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d016      	beq.n	800ecc2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec98:	4a16      	ldr	r2, [pc, #88]	@ (800ecf4 <I2C_ITError+0x1fc>)
 800ec9a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2240      	movs	r2, #64	@ 0x40
 800eca0:	2100      	movs	r1, #0
 800eca2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eca8:	0018      	movs	r0, r3
 800ecaa:	f7fd fe49 	bl	800c940 <HAL_DMA_Abort_IT>
 800ecae:	1e03      	subs	r3, r0, #0
 800ecb0:	d013      	beq.n	800ecda <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecbc:	0018      	movs	r0, r3
 800ecbe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ecc0:	e00b      	b.n	800ecda <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	f000 f819 	bl	800ecfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ecca:	e006      	b.n	800ecda <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	0018      	movs	r0, r3
 800ecd0:	f000 f814 	bl	800ecfc <I2C_TreatErrorCallback>
  }
}
 800ecd4:	e002      	b.n	800ecdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ecd6:	46c0      	nop			@ (mov r8, r8)
 800ecd8:	e000      	b.n	800ecdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ecda:	46c0      	nop			@ (mov r8, r8)
}
 800ecdc:	46c0      	nop			@ (mov r8, r8)
 800ecde:	46bd      	mov	sp, r7
 800ece0:	b004      	add	sp, #16
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	ffff0000 	.word	0xffff0000
 800ece8:	0800dbdd 	.word	0x0800dbdd
 800ecec:	00008003 	.word	0x00008003
 800ecf0:	ffffbfff 	.word	0xffffbfff
 800ecf4:	0800ef07 	.word	0x0800ef07
 800ecf8:	ffff7fff 	.word	0xffff7fff

0800ecfc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2241      	movs	r2, #65	@ 0x41
 800ed08:	5c9b      	ldrb	r3, [r3, r2]
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	2b60      	cmp	r3, #96	@ 0x60
 800ed0e:	d10f      	bne.n	800ed30 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2241      	movs	r2, #65	@ 0x41
 800ed14:	2120      	movs	r1, #32
 800ed16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2240      	movs	r2, #64	@ 0x40
 800ed22:	2100      	movs	r1, #0
 800ed24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	0018      	movs	r0, r3
 800ed2a:	f7fe fe24 	bl	800d976 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ed2e:	e00a      	b.n	800ed46 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2240      	movs	r2, #64	@ 0x40
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	0018      	movs	r0, r3
 800ed42:	f7fe fe10 	bl	800d966 <HAL_I2C_ErrorCallback>
}
 800ed46:	46c0      	nop			@ (mov r8, r8)
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	b002      	add	sp, #8
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	699b      	ldr	r3, [r3, #24]
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	4013      	ands	r3, r2
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d103      	bne.n	800ed6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	699b      	ldr	r3, [r3, #24]
 800ed72:	2201      	movs	r2, #1
 800ed74:	4013      	ands	r3, r2
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d007      	beq.n	800ed8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	699a      	ldr	r2, [r3, #24]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2101      	movs	r1, #1
 800ed86:	430a      	orrs	r2, r1
 800ed88:	619a      	str	r2, [r3, #24]
  }
}
 800ed8a:	46c0      	nop			@ (mov r8, r8)
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	b002      	add	sp, #8
 800ed90:	bd80      	pop	{r7, pc}
	...

0800ed94 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eda0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4920      	ldr	r1, [pc, #128]	@ (800ee30 <I2C_DMAMasterTransmitCplt+0x9c>)
 800edae:	400a      	ands	r2, r1
 800edb0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d105      	bne.n	800edc8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2120      	movs	r1, #32
 800edc0:	0018      	movs	r0, r3
 800edc2:	f000 f8f9 	bl	800efb8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800edc6:	e02e      	b.n	800ee26 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800edd0:	189a      	adds	r2, r3, r2
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2bff      	cmp	r3, #255	@ 0xff
 800edde:	d903      	bls.n	800ede8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	22ff      	movs	r2, #255	@ 0xff
 800ede4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ede6:	e004      	b.n	800edf2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edec:	b29a      	uxth	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfa:	0019      	movs	r1, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3328      	adds	r3, #40	@ 0x28
 800ee02:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ee08:	f7fd fcf4 	bl	800c7f4 <HAL_DMA_Start_IT>
 800ee0c:	1e03      	subs	r3, r0, #0
 800ee0e:	d005      	beq.n	800ee1c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2110      	movs	r1, #16
 800ee14:	0018      	movs	r0, r3
 800ee16:	f7ff fe6f 	bl	800eaf8 <I2C_ITError>
}
 800ee1a:	e004      	b.n	800ee26 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2140      	movs	r1, #64	@ 0x40
 800ee20:	0018      	movs	r0, r3
 800ee22:	f000 f8c9 	bl	800efb8 <I2C_Enable_IRQ>
}
 800ee26:	46c0      	nop			@ (mov r8, r8)
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	b004      	add	sp, #16
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	46c0      	nop			@ (mov r8, r8)
 800ee30:	ffffbfff 	.word	0xffffbfff

0800ee34 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee40:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4920      	ldr	r1, [pc, #128]	@ (800eed0 <I2C_DMAMasterReceiveCplt+0x9c>)
 800ee4e:	400a      	ands	r2, r1
 800ee50:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d105      	bne.n	800ee68 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2120      	movs	r1, #32
 800ee60:	0018      	movs	r0, r3
 800ee62:	f000 f8a9 	bl	800efb8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ee66:	e02e      	b.n	800eec6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ee70:	189a      	adds	r2, r3, r2
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	2bff      	cmp	r3, #255	@ 0xff
 800ee7e:	d903      	bls.n	800ee88 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	22ff      	movs	r2, #255	@ 0xff
 800ee84:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ee86:	e004      	b.n	800ee92 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	3324      	adds	r3, #36	@ 0x24
 800ee9c:	0019      	movs	r1, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800eea8:	f7fd fca4 	bl	800c7f4 <HAL_DMA_Start_IT>
 800eeac:	1e03      	subs	r3, r0, #0
 800eeae:	d005      	beq.n	800eebc <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2110      	movs	r1, #16
 800eeb4:	0018      	movs	r0, r3
 800eeb6:	f7ff fe1f 	bl	800eaf8 <I2C_ITError>
}
 800eeba:	e004      	b.n	800eec6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2140      	movs	r1, #64	@ 0x40
 800eec0:	0018      	movs	r0, r3
 800eec2:	f000 f879 	bl	800efb8 <I2C_Enable_IRQ>
}
 800eec6:	46c0      	nop			@ (mov r8, r8)
 800eec8:	46bd      	mov	sp, r7
 800eeca:	b004      	add	sp, #16
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	46c0      	nop			@ (mov r8, r8)
 800eed0:	ffff7fff 	.word	0xffff7fff

0800eed4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eee0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	685a      	ldr	r2, [r3, #4]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2180      	movs	r1, #128	@ 0x80
 800eeee:	0209      	lsls	r1, r1, #8
 800eef0:	430a      	orrs	r2, r1
 800eef2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2110      	movs	r1, #16
 800eef8:	0018      	movs	r0, r3
 800eefa:	f7ff fdfd 	bl	800eaf8 <I2C_ITError>
}
 800eefe:	46c0      	nop			@ (mov r8, r8)
 800ef00:	46bd      	mov	sp, r7
 800ef02:	b004      	add	sp, #16
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b084      	sub	sp, #16
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d003      	beq.n	800ef24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef20:	2200      	movs	r2, #0
 800ef22:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d003      	beq.n	800ef34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef30:	2200      	movs	r2, #0
 800ef32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	0018      	movs	r0, r3
 800ef38:	f7ff fee0 	bl	800ecfc <I2C_TreatErrorCallback>
}
 800ef3c:	46c0      	nop			@ (mov r8, r8)
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	b004      	add	sp, #16
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ef44:	b590      	push	{r4, r7, lr}
 800ef46:	b087      	sub	sp, #28
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	0008      	movs	r0, r1
 800ef4e:	0011      	movs	r1, r2
 800ef50:	607b      	str	r3, [r7, #4]
 800ef52:	240a      	movs	r4, #10
 800ef54:	193b      	adds	r3, r7, r4
 800ef56:	1c02      	adds	r2, r0, #0
 800ef58:	801a      	strh	r2, [r3, #0]
 800ef5a:	2009      	movs	r0, #9
 800ef5c:	183b      	adds	r3, r7, r0
 800ef5e:	1c0a      	adds	r2, r1, #0
 800ef60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ef62:	193b      	adds	r3, r7, r4
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	059b      	lsls	r3, r3, #22
 800ef68:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ef6a:	183b      	adds	r3, r7, r0
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	0419      	lsls	r1, r3, #16
 800ef70:	23ff      	movs	r3, #255	@ 0xff
 800ef72:	041b      	lsls	r3, r3, #16
 800ef74:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ef76:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ef7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	085b      	lsrs	r3, r3, #1
 800ef84:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef8e:	0d51      	lsrs	r1, r2, #21
 800ef90:	2280      	movs	r2, #128	@ 0x80
 800ef92:	00d2      	lsls	r2, r2, #3
 800ef94:	400a      	ands	r2, r1
 800ef96:	4907      	ldr	r1, [pc, #28]	@ (800efb4 <I2C_TransferConfig+0x70>)
 800ef98:	430a      	orrs	r2, r1
 800ef9a:	43d2      	mvns	r2, r2
 800ef9c:	401a      	ands	r2, r3
 800ef9e:	0011      	movs	r1, r2
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	430a      	orrs	r2, r1
 800efa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800efaa:	46c0      	nop			@ (mov r8, r8)
 800efac:	46bd      	mov	sp, r7
 800efae:	b007      	add	sp, #28
 800efb0:	bd90      	pop	{r4, r7, pc}
 800efb2:	46c0      	nop			@ (mov r8, r8)
 800efb4:	03ff63ff 	.word	0x03ff63ff

0800efb8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	000a      	movs	r2, r1
 800efc2:	1cbb      	adds	r3, r7, #2
 800efc4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800efc6:	2300      	movs	r3, #0
 800efc8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efce:	4b3e      	ldr	r3, [pc, #248]	@ (800f0c8 <I2C_Enable_IRQ+0x110>)
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d035      	beq.n	800f040 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800efd8:	4b3c      	ldr	r3, [pc, #240]	@ (800f0cc <I2C_Enable_IRQ+0x114>)
 800efda:	429a      	cmp	r2, r3
 800efdc:	d030      	beq.n	800f040 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800efe2:	4b3b      	ldr	r3, [pc, #236]	@ (800f0d0 <I2C_Enable_IRQ+0x118>)
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d02b      	beq.n	800f040 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800efe8:	1cbb      	adds	r3, r7, #2
 800efea:	2200      	movs	r2, #0
 800efec:	5e9b      	ldrsh	r3, [r3, r2]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	da03      	bge.n	800effa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	22b8      	movs	r2, #184	@ 0xb8
 800eff6:	4313      	orrs	r3, r2
 800eff8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800effa:	1cbb      	adds	r3, r7, #2
 800effc:	881b      	ldrh	r3, [r3, #0]
 800effe:	2201      	movs	r2, #1
 800f000:	4013      	ands	r3, r2
 800f002:	d003      	beq.n	800f00c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	22f2      	movs	r2, #242	@ 0xf2
 800f008:	4313      	orrs	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f00c:	1cbb      	adds	r3, r7, #2
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	2202      	movs	r2, #2
 800f012:	4013      	ands	r3, r2
 800f014:	d003      	beq.n	800f01e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	22f4      	movs	r2, #244	@ 0xf4
 800f01a:	4313      	orrs	r3, r2
 800f01c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f01e:	1cbb      	adds	r3, r7, #2
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	2b10      	cmp	r3, #16
 800f024:	d103      	bne.n	800f02e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2290      	movs	r2, #144	@ 0x90
 800f02a:	4313      	orrs	r3, r2
 800f02c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f02e:	1cbb      	adds	r3, r7, #2
 800f030:	881b      	ldrh	r3, [r3, #0]
 800f032:	2b20      	cmp	r3, #32
 800f034:	d13c      	bne.n	800f0b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2220      	movs	r2, #32
 800f03a:	4313      	orrs	r3, r2
 800f03c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f03e:	e037      	b.n	800f0b0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f040:	1cbb      	adds	r3, r7, #2
 800f042:	2200      	movs	r2, #0
 800f044:	5e9b      	ldrsh	r3, [r3, r2]
 800f046:	2b00      	cmp	r3, #0
 800f048:	da03      	bge.n	800f052 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	22b8      	movs	r2, #184	@ 0xb8
 800f04e:	4313      	orrs	r3, r2
 800f050:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f052:	1cbb      	adds	r3, r7, #2
 800f054:	881b      	ldrh	r3, [r3, #0]
 800f056:	2201      	movs	r2, #1
 800f058:	4013      	ands	r3, r2
 800f05a:	d003      	beq.n	800f064 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	22f2      	movs	r2, #242	@ 0xf2
 800f060:	4313      	orrs	r3, r2
 800f062:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f064:	1cbb      	adds	r3, r7, #2
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	2202      	movs	r2, #2
 800f06a:	4013      	ands	r3, r2
 800f06c:	d003      	beq.n	800f076 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	22f4      	movs	r2, #244	@ 0xf4
 800f072:	4313      	orrs	r3, r2
 800f074:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f076:	1cbb      	adds	r3, r7, #2
 800f078:	881b      	ldrh	r3, [r3, #0]
 800f07a:	2b10      	cmp	r3, #16
 800f07c:	d103      	bne.n	800f086 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2290      	movs	r2, #144	@ 0x90
 800f082:	4313      	orrs	r3, r2
 800f084:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f086:	1cbb      	adds	r3, r7, #2
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	2b20      	cmp	r3, #32
 800f08c:	d103      	bne.n	800f096 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2260      	movs	r2, #96	@ 0x60
 800f092:	4313      	orrs	r3, r2
 800f094:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f09a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d0 <I2C_Enable_IRQ+0x118>)
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d007      	beq.n	800f0b0 <I2C_Enable_IRQ+0xf8>
 800f0a0:	1cbb      	adds	r3, r7, #2
 800f0a2:	881b      	ldrh	r3, [r3, #0]
 800f0a4:	2b40      	cmp	r3, #64	@ 0x40
 800f0a6:	d103      	bne.n	800f0b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2240      	movs	r2, #64	@ 0x40
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6819      	ldr	r1, [r3, #0]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	430a      	orrs	r2, r1
 800f0be:	601a      	str	r2, [r3, #0]
}
 800f0c0:	46c0      	nop			@ (mov r8, r8)
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	b004      	add	sp, #16
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	0800dddd 	.word	0x0800dddd
 800f0cc:	0800e20d 	.word	0x0800e20d
 800f0d0:	0800dfd5 	.word	0x0800dfd5

0800f0d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	000a      	movs	r2, r1
 800f0de:	1cbb      	adds	r3, r7, #2
 800f0e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f0e6:	1cbb      	adds	r3, r7, #2
 800f0e8:	881b      	ldrh	r3, [r3, #0]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	4013      	ands	r3, r2
 800f0ee:	d010      	beq.n	800f112 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2242      	movs	r2, #66	@ 0x42
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2241      	movs	r2, #65	@ 0x41
 800f0fc:	5c9b      	ldrb	r3, [r3, r2]
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	001a      	movs	r2, r3
 800f102:	2328      	movs	r3, #40	@ 0x28
 800f104:	4013      	ands	r3, r2
 800f106:	2b28      	cmp	r3, #40	@ 0x28
 800f108:	d003      	beq.n	800f112 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	22b0      	movs	r2, #176	@ 0xb0
 800f10e:	4313      	orrs	r3, r2
 800f110:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f112:	1cbb      	adds	r3, r7, #2
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	2202      	movs	r2, #2
 800f118:	4013      	ands	r3, r2
 800f11a:	d010      	beq.n	800f13e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2244      	movs	r2, #68	@ 0x44
 800f120:	4313      	orrs	r3, r2
 800f122:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2241      	movs	r2, #65	@ 0x41
 800f128:	5c9b      	ldrb	r3, [r3, r2]
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	001a      	movs	r2, r3
 800f12e:	2328      	movs	r3, #40	@ 0x28
 800f130:	4013      	ands	r3, r2
 800f132:	2b28      	cmp	r3, #40	@ 0x28
 800f134:	d003      	beq.n	800f13e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	22b0      	movs	r2, #176	@ 0xb0
 800f13a:	4313      	orrs	r3, r2
 800f13c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f13e:	1cbb      	adds	r3, r7, #2
 800f140:	2200      	movs	r2, #0
 800f142:	5e9b      	ldrsh	r3, [r3, r2]
 800f144:	2b00      	cmp	r3, #0
 800f146:	da03      	bge.n	800f150 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	22b8      	movs	r2, #184	@ 0xb8
 800f14c:	4313      	orrs	r3, r2
 800f14e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f150:	1cbb      	adds	r3, r7, #2
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	2b10      	cmp	r3, #16
 800f156:	d103      	bne.n	800f160 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2290      	movs	r2, #144	@ 0x90
 800f15c:	4313      	orrs	r3, r2
 800f15e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f160:	1cbb      	adds	r3, r7, #2
 800f162:	881b      	ldrh	r3, [r3, #0]
 800f164:	2b20      	cmp	r3, #32
 800f166:	d103      	bne.n	800f170 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2220      	movs	r2, #32
 800f16c:	4313      	orrs	r3, r2
 800f16e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800f170:	1cbb      	adds	r3, r7, #2
 800f172:	881b      	ldrh	r3, [r3, #0]
 800f174:	2b40      	cmp	r3, #64	@ 0x40
 800f176:	d103      	bne.n	800f180 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2240      	movs	r2, #64	@ 0x40
 800f17c:	4313      	orrs	r3, r2
 800f17e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	43d9      	mvns	r1, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	400a      	ands	r2, r1
 800f190:	601a      	str	r2, [r3, #0]
}
 800f192:	46c0      	nop			@ (mov r8, r8)
 800f194:	46bd      	mov	sp, r7
 800f196:	b004      	add	sp, #16
 800f198:	bd80      	pop	{r7, pc}
	...

0800f19c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2241      	movs	r2, #65	@ 0x41
 800f1aa:	5c9b      	ldrb	r3, [r3, r2]
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	2b20      	cmp	r3, #32
 800f1b0:	d138      	bne.n	800f224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2240      	movs	r2, #64	@ 0x40
 800f1b6:	5c9b      	ldrb	r3, [r3, r2]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d101      	bne.n	800f1c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f1bc:	2302      	movs	r3, #2
 800f1be:	e032      	b.n	800f226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2240      	movs	r2, #64	@ 0x40
 800f1c4:	2101      	movs	r1, #1
 800f1c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2241      	movs	r2, #65	@ 0x41
 800f1cc:	2124      	movs	r1, #36	@ 0x24
 800f1ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2101      	movs	r1, #1
 800f1dc:	438a      	bics	r2, r1
 800f1de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4911      	ldr	r1, [pc, #68]	@ (800f230 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800f1ec:	400a      	ands	r2, r1
 800f1ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6819      	ldr	r1, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	430a      	orrs	r2, r1
 800f1fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2101      	movs	r1, #1
 800f20c:	430a      	orrs	r2, r1
 800f20e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2241      	movs	r2, #65	@ 0x41
 800f214:	2120      	movs	r1, #32
 800f216:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2240      	movs	r2, #64	@ 0x40
 800f21c:	2100      	movs	r1, #0
 800f21e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f220:	2300      	movs	r3, #0
 800f222:	e000      	b.n	800f226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f224:	2302      	movs	r3, #2
  }
}
 800f226:	0018      	movs	r0, r3
 800f228:	46bd      	mov	sp, r7
 800f22a:	b002      	add	sp, #8
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	46c0      	nop			@ (mov r8, r8)
 800f230:	ffffefff 	.word	0xffffefff

0800f234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2241      	movs	r2, #65	@ 0x41
 800f242:	5c9b      	ldrb	r3, [r3, r2]
 800f244:	b2db      	uxtb	r3, r3
 800f246:	2b20      	cmp	r3, #32
 800f248:	d139      	bne.n	800f2be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2240      	movs	r2, #64	@ 0x40
 800f24e:	5c9b      	ldrb	r3, [r3, r2]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d101      	bne.n	800f258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f254:	2302      	movs	r3, #2
 800f256:	e033      	b.n	800f2c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2240      	movs	r2, #64	@ 0x40
 800f25c:	2101      	movs	r1, #1
 800f25e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2241      	movs	r2, #65	@ 0x41
 800f264:	2124      	movs	r1, #36	@ 0x24
 800f266:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2101      	movs	r1, #1
 800f274:	438a      	bics	r2, r1
 800f276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	4a11      	ldr	r2, [pc, #68]	@ (800f2c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800f284:	4013      	ands	r3, r2
 800f286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	021b      	lsls	r3, r3, #8
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	4313      	orrs	r3, r2
 800f290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2101      	movs	r1, #1
 800f2a6:	430a      	orrs	r2, r1
 800f2a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2241      	movs	r2, #65	@ 0x41
 800f2ae:	2120      	movs	r1, #32
 800f2b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2240      	movs	r2, #64	@ 0x40
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e000      	b.n	800f2c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f2be:	2302      	movs	r3, #2
  }
}
 800f2c0:	0018      	movs	r0, r3
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	b004      	add	sp, #16
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	fffff0ff 	.word	0xfffff0ff

0800f2cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e0e1      	b.n	800f4a2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2235      	movs	r2, #53	@ 0x35
 800f2e2:	5c9b      	ldrb	r3, [r3, r2]
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d107      	bne.n	800f2fa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2234      	movs	r2, #52	@ 0x34
 800f2ee:	2100      	movs	r1, #0
 800f2f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	0018      	movs	r0, r3
 800f2f6:	f7f7 fdbd 	bl	8006e74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2235      	movs	r2, #53	@ 0x35
 800f2fe:	2102      	movs	r1, #2
 800f300:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	69da      	ldr	r2, [r3, #28]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4967      	ldr	r1, [pc, #412]	@ (800f4ac <HAL_I2S_Init+0x1e0>)
 800f30e:	400a      	ands	r2, r1
 800f310:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2202      	movs	r2, #2
 800f318:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	695b      	ldr	r3, [r3, #20]
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d073      	beq.n	800f40a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d102      	bne.n	800f330 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800f32a:	2310      	movs	r3, #16
 800f32c:	617b      	str	r3, [r7, #20]
 800f32e:	e001      	b.n	800f334 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800f330:	2320      	movs	r3, #32
 800f332:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	2b20      	cmp	r3, #32
 800f33a:	d802      	bhi.n	800f342 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	005b      	lsls	r3, r3, #1
 800f340:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800f342:	f002 fe51 	bl	8011fe8 <HAL_RCC_GetSysClockFreq>
 800f346:	0003      	movs	r3, r0
 800f348:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	691a      	ldr	r2, [r3, #16]
 800f34e:	2380      	movs	r3, #128	@ 0x80
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	429a      	cmp	r2, r3
 800f354:	d131      	bne.n	800f3ba <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d016      	beq.n	800f38c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	0019      	movs	r1, r3
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f7f0 ff1d 	bl	80001a4 <__udivsi3>
 800f36a:	0003      	movs	r3, r0
 800f36c:	001a      	movs	r2, r3
 800f36e:	0013      	movs	r3, r2
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	189b      	adds	r3, r3, r2
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	001a      	movs	r2, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	695b      	ldr	r3, [r3, #20]
 800f37c:	0019      	movs	r1, r3
 800f37e:	0010      	movs	r0, r2
 800f380:	f7f0 ff10 	bl	80001a4 <__udivsi3>
 800f384:	0003      	movs	r3, r0
 800f386:	3305      	adds	r3, #5
 800f388:	613b      	str	r3, [r7, #16]
 800f38a:	e02a      	b.n	800f3e2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	0019      	movs	r1, r3
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7f0 ff06 	bl	80001a4 <__udivsi3>
 800f398:	0003      	movs	r3, r0
 800f39a:	001a      	movs	r2, r3
 800f39c:	0013      	movs	r3, r2
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	189b      	adds	r3, r3, r2
 800f3a2:	005b      	lsls	r3, r3, #1
 800f3a4:	001a      	movs	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	695b      	ldr	r3, [r3, #20]
 800f3aa:	0019      	movs	r1, r3
 800f3ac:	0010      	movs	r0, r2
 800f3ae:	f7f0 fef9 	bl	80001a4 <__udivsi3>
 800f3b2:	0003      	movs	r3, r0
 800f3b4:	3305      	adds	r3, #5
 800f3b6:	613b      	str	r3, [r7, #16]
 800f3b8:	e013      	b.n	800f3e2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f3ba:	6979      	ldr	r1, [r7, #20]
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f7f0 fef1 	bl	80001a4 <__udivsi3>
 800f3c2:	0003      	movs	r3, r0
 800f3c4:	001a      	movs	r2, r3
 800f3c6:	0013      	movs	r3, r2
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	189b      	adds	r3, r3, r2
 800f3cc:	005b      	lsls	r3, r3, #1
 800f3ce:	001a      	movs	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	695b      	ldr	r3, [r3, #20]
 800f3d4:	0019      	movs	r1, r3
 800f3d6:	0010      	movs	r0, r2
 800f3d8:	f7f0 fee4 	bl	80001a4 <__udivsi3>
 800f3dc:	0003      	movs	r3, r0
 800f3de:	3305      	adds	r3, #5
 800f3e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	210a      	movs	r1, #10
 800f3e6:	0018      	movs	r0, r3
 800f3e8:	f7f0 fedc 	bl	80001a4 <__udivsi3>
 800f3ec:	0003      	movs	r3, r0
 800f3ee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	4013      	ands	r3, r2
 800f3f6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800f3f8:	693a      	ldr	r2, [r7, #16]
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	085b      	lsrs	r3, r3, #1
 800f400:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	021b      	lsls	r3, r3, #8
 800f406:	61bb      	str	r3, [r7, #24]
 800f408:	e003      	b.n	800f412 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800f40a:	2302      	movs	r3, #2
 800f40c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800f40e:	2300      	movs	r3, #0
 800f410:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d902      	bls.n	800f41e <HAL_I2S_Init+0x152>
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	2bff      	cmp	r3, #255	@ 0xff
 800f41c:	d907      	bls.n	800f42e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f422:	2210      	movs	r2, #16
 800f424:	431a      	orrs	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800f42a:	2301      	movs	r3, #1
 800f42c:	e039      	b.n	800f4a2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	691a      	ldr	r2, [r3, #16]
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	431a      	orrs	r2, r3
 800f436:	0011      	movs	r1, r2
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	69fa      	ldr	r2, [r7, #28]
 800f43e:	430a      	orrs	r2, r1
 800f440:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	69db      	ldr	r3, [r3, #28]
 800f448:	4a18      	ldr	r2, [pc, #96]	@ (800f4ac <HAL_I2S_Init+0x1e0>)
 800f44a:	401a      	ands	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6859      	ldr	r1, [r3, #4]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	4319      	orrs	r1, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	4319      	orrs	r1, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	699b      	ldr	r3, [r3, #24]
 800f460:	430b      	orrs	r3, r1
 800f462:	431a      	orrs	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2180      	movs	r1, #128	@ 0x80
 800f46a:	0109      	lsls	r1, r1, #4
 800f46c:	430a      	orrs	r2, r1
 800f46e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	2b30      	cmp	r3, #48	@ 0x30
 800f476:	d003      	beq.n	800f480 <HAL_I2S_Init+0x1b4>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	689b      	ldr	r3, [r3, #8]
 800f47c:	2bb0      	cmp	r3, #176	@ 0xb0
 800f47e:	d108      	bne.n	800f492 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	69da      	ldr	r2, [r3, #28]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2180      	movs	r1, #128	@ 0x80
 800f48c:	0149      	lsls	r1, r1, #5
 800f48e:	430a      	orrs	r2, r1
 800f490:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2235      	movs	r2, #53	@ 0x35
 800f49c:	2101      	movs	r1, #1
 800f49e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	0018      	movs	r0, r3
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	b008      	add	sp, #32
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	46c0      	nop			@ (mov r8, r8)
 800f4ac:	fffff040 	.word	0xfffff040

0800f4b0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	1dbb      	adds	r3, r7, #6
 800f4bc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d003      	beq.n	800f4cc <HAL_I2S_Receive_DMA+0x1c>
 800f4c4:	1dbb      	adds	r3, r7, #6
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d101      	bne.n	800f4d0 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e0a6      	b.n	800f61e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2234      	movs	r2, #52	@ 0x34
 800f4d4:	5c9b      	ldrb	r3, [r3, r2]
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d101      	bne.n	800f4e0 <HAL_I2S_Receive_DMA+0x30>
 800f4dc:	2302      	movs	r3, #2
 800f4de:	e09e      	b.n	800f61e <HAL_I2S_Receive_DMA+0x16e>
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2234      	movs	r2, #52	@ 0x34
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2235      	movs	r2, #53	@ 0x35
 800f4ec:	5c9b      	ldrb	r3, [r3, r2]
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d005      	beq.n	800f500 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2234      	movs	r2, #52	@ 0x34
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800f4fc:	2302      	movs	r3, #2
 800f4fe:	e08e      	b.n	800f61e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2235      	movs	r2, #53	@ 0x35
 800f504:	2104      	movs	r1, #4
 800f506:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2200      	movs	r2, #0
 800f50c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	68ba      	ldr	r2, [r7, #8]
 800f512:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	69db      	ldr	r3, [r3, #28]
 800f51a:	2207      	movs	r2, #7
 800f51c:	4013      	ands	r3, r2
 800f51e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	2b03      	cmp	r3, #3
 800f524:	d002      	beq.n	800f52c <HAL_I2S_Receive_DMA+0x7c>
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	2b05      	cmp	r3, #5
 800f52a:	d10c      	bne.n	800f546 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800f52c:	1dbb      	adds	r3, r7, #6
 800f52e:	881b      	ldrh	r3, [r3, #0]
 800f530:	18db      	adds	r3, r3, r3
 800f532:	b29a      	uxth	r2, r3
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800f538:	1dbb      	adds	r3, r7, #6
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	18db      	adds	r3, r3, r3
 800f53e:	b29a      	uxth	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f544:	e007      	b.n	800f556 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	1dba      	adds	r2, r7, #6
 800f54a:	8812      	ldrh	r2, [r2, #0]
 800f54c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	1dba      	adds	r2, r7, #6
 800f552:	8812      	ldrh	r2, [r2, #0]
 800f554:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f55a:	4a33      	ldr	r2, [pc, #204]	@ (800f628 <HAL_I2S_Receive_DMA+0x178>)
 800f55c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f562:	4a32      	ldr	r2, [pc, #200]	@ (800f62c <HAL_I2S_Receive_DMA+0x17c>)
 800f564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f56a:	4a31      	ldr	r2, [pc, #196]	@ (800f630 <HAL_I2S_Receive_DMA+0x180>)
 800f56c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	69da      	ldr	r2, [r3, #28]
 800f574:	23c0      	movs	r3, #192	@ 0xc0
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	401a      	ands	r2, r3
 800f57a:	23c0      	movs	r3, #192	@ 0xc0
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	429a      	cmp	r2, r3
 800f580:	d10a      	bne.n	800f598 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f582:	2300      	movs	r3, #0
 800f584:	613b      	str	r3, [r7, #16]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	613b      	str	r3, [r7, #16]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	613b      	str	r3, [r7, #16]
 800f596:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	330c      	adds	r3, #12
 800f5a2:	0019      	movs	r1, r3
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a8:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f5b0:	f7fd f920 	bl	800c7f4 <HAL_DMA_Start_IT>
 800f5b4:	1e03      	subs	r3, r0, #0
 800f5b6:	d00f      	beq.n	800f5d8 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5bc:	2208      	movs	r2, #8
 800f5be:	431a      	orrs	r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2235      	movs	r2, #53	@ 0x35
 800f5c8:	2101      	movs	r1, #1
 800f5ca:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2234      	movs	r2, #52	@ 0x34
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e022      	b.n	800f61e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	69da      	ldr	r2, [r3, #28]
 800f5de:	2380      	movs	r3, #128	@ 0x80
 800f5e0:	00db      	lsls	r3, r3, #3
 800f5e2:	4013      	ands	r3, r2
 800f5e4:	d108      	bne.n	800f5f8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	69da      	ldr	r2, [r3, #28]
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2180      	movs	r1, #128	@ 0x80
 800f5f2:	00c9      	lsls	r1, r1, #3
 800f5f4:	430a      	orrs	r2, r1
 800f5f6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	4013      	ands	r3, r2
 800f602:	d107      	bne.n	800f614 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685a      	ldr	r2, [r3, #4]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2101      	movs	r1, #1
 800f610:	430a      	orrs	r2, r1
 800f612:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2234      	movs	r2, #52	@ 0x34
 800f618:	2100      	movs	r1, #0
 800f61a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	0018      	movs	r0, r3
 800f620:	46bd      	mov	sp, r7
 800f622:	b006      	add	sp, #24
 800f624:	bd80      	pop	{r7, pc}
 800f626:	46c0      	nop			@ (mov r8, r8)
 800f628:	0800f811 	.word	0x0800f811
 800f62c:	0800f7cd 	.word	0x0800f7cd
 800f630:	0800f82f 	.word	0x0800f82f

0800f634 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f63c:	2317      	movs	r3, #23
 800f63e:	18fb      	adds	r3, r7, r3
 800f640:	2200      	movs	r2, #0
 800f642:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	685a      	ldr	r2, [r3, #4]
 800f648:	2380      	movs	r3, #128	@ 0x80
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d003      	beq.n	800f658 <HAL_I2S_DMAStop+0x24>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d158      	bne.n	800f70a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d010      	beq.n	800f682 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f664:	0018      	movs	r0, r3
 800f666:	f7fd f92b 	bl	800c8c0 <HAL_DMA_Abort>
 800f66a:	1e03      	subs	r3, r0, #0
 800f66c:	d009      	beq.n	800f682 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f672:	2208      	movs	r2, #8
 800f674:	431a      	orrs	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f67a:	2317      	movs	r3, #23
 800f67c:	18fb      	adds	r3, r7, r3
 800f67e:	2201      	movs	r2, #1
 800f680:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	2364      	movs	r3, #100	@ 0x64
 800f686:	2201      	movs	r2, #1
 800f688:	2102      	movs	r1, #2
 800f68a:	f000 f8f7 	bl	800f87c <I2S_WaitFlagStateUntilTimeout>
 800f68e:	1e03      	subs	r3, r0, #0
 800f690:	d00d      	beq.n	800f6ae <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f696:	2201      	movs	r2, #1
 800f698:	431a      	orrs	r2, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2235      	movs	r2, #53	@ 0x35
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f6a6:	2317      	movs	r3, #23
 800f6a8:	18fb      	adds	r3, r7, r3
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	2364      	movs	r3, #100	@ 0x64
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	2180      	movs	r1, #128	@ 0x80
 800f6b6:	f000 f8e1 	bl	800f87c <I2S_WaitFlagStateUntilTimeout>
 800f6ba:	1e03      	subs	r3, r0, #0
 800f6bc:	d00d      	beq.n	800f6da <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	431a      	orrs	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2235      	movs	r2, #53	@ 0x35
 800f6ce:	2101      	movs	r1, #1
 800f6d0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f6d2:	2317      	movs	r3, #23
 800f6d4:	18fb      	adds	r3, r7, r3
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	69da      	ldr	r2, [r3, #28]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4938      	ldr	r1, [pc, #224]	@ (800f7c8 <HAL_I2S_DMAStop+0x194>)
 800f6e6:	400a      	ands	r2, r1
 800f6e8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	613b      	str	r3, [r7, #16]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	613b      	str	r3, [r7, #16]
 800f6f6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	685a      	ldr	r2, [r3, #4]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2102      	movs	r1, #2
 800f704:	438a      	bics	r2, r1
 800f706:	605a      	str	r2, [r3, #4]
 800f708:	e053      	b.n	800f7b2 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	23c0      	movs	r3, #192	@ 0xc0
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	429a      	cmp	r2, r3
 800f714:	d005      	beq.n	800f722 <HAL_I2S_DMAStop+0xee>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	685a      	ldr	r2, [r3, #4]
 800f71a:	2380      	movs	r3, #128	@ 0x80
 800f71c:	005b      	lsls	r3, r3, #1
 800f71e:	429a      	cmp	r2, r3
 800f720:	d147      	bne.n	800f7b2 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f726:	2b00      	cmp	r3, #0
 800f728:	d010      	beq.n	800f74c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f72e:	0018      	movs	r0, r3
 800f730:	f7fd f8c6 	bl	800c8c0 <HAL_DMA_Abort>
 800f734:	1e03      	subs	r3, r0, #0
 800f736:	d009      	beq.n	800f74c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f73c:	2208      	movs	r2, #8
 800f73e:	431a      	orrs	r2, r3
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f744:	2317      	movs	r3, #23
 800f746:	18fb      	adds	r3, r7, r3
 800f748:	2201      	movs	r2, #1
 800f74a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	69da      	ldr	r2, [r3, #28]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	491c      	ldr	r1, [pc, #112]	@ (800f7c8 <HAL_I2S_DMAStop+0x194>)
 800f758:	400a      	ands	r2, r1
 800f75a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f75c:	2300      	movs	r3, #0
 800f75e:	60fb      	str	r3, [r7, #12]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	60fb      	str	r3, [r7, #12]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	60fb      	str	r3, [r7, #12]
 800f770:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2101      	movs	r1, #1
 800f77e:	438a      	bics	r2, r1
 800f780:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	2380      	movs	r3, #128	@ 0x80
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d10e      	bne.n	800f7ac <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f792:	2240      	movs	r2, #64	@ 0x40
 800f794:	431a      	orrs	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2235      	movs	r2, #53	@ 0x35
 800f79e:	2101      	movs	r1, #1
 800f7a0:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800f7a2:	2317      	movs	r3, #23
 800f7a4:	18fb      	adds	r3, r7, r3
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	701a      	strb	r2, [r3, #0]
 800f7aa:	e002      	b.n	800f7b2 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2235      	movs	r2, #53	@ 0x35
 800f7b6:	2101      	movs	r1, #1
 800f7b8:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800f7ba:	2317      	movs	r3, #23
 800f7bc:	18fb      	adds	r3, r7, r3
 800f7be:	781b      	ldrb	r3, [r3, #0]
}
 800f7c0:	0018      	movs	r0, r3
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	b006      	add	sp, #24
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	fffffbff 	.word	0xfffffbff

0800f7cc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7d8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	69db      	ldr	r3, [r3, #28]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d10e      	bne.n	800f800 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	685a      	ldr	r2, [r3, #4]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2101      	movs	r1, #1
 800f7ee:	438a      	bics	r2, r1
 800f7f0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2235      	movs	r2, #53	@ 0x35
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	0018      	movs	r0, r3
 800f804:	f7fa f9ba 	bl	8009b7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f808:	46c0      	nop			@ (mov r8, r8)
 800f80a:	46bd      	mov	sp, r7
 800f80c:	b004      	add	sp, #16
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f81c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	0018      	movs	r0, r3
 800f822:	f7fa f999 	bl	8009b58 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f826:	46c0      	nop			@ (mov r8, r8)
 800f828:	46bd      	mov	sp, r7
 800f82a:	b004      	add	sp, #16
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b084      	sub	sp, #16
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f83a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2103      	movs	r1, #3
 800f848:	438a      	bics	r2, r1
 800f84a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2200      	movs	r2, #0
 800f850:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2200      	movs	r2, #0
 800f856:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2235      	movs	r2, #53	@ 0x35
 800f85c:	2101      	movs	r1, #1
 800f85e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f864:	2208      	movs	r2, #8
 800f866:	431a      	orrs	r2, r3
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	0018      	movs	r0, r3
 800f870:	f7fa f9d2 	bl	8009c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f874:	46c0      	nop			@ (mov r8, r8)
 800f876:	46bd      	mov	sp, r7
 800f878:	b004      	add	sp, #16
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	603b      	str	r3, [r7, #0]
 800f888:	1dfb      	adds	r3, r7, #7
 800f88a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800f88c:	f7fc fa92 	bl	800bdb4 <HAL_GetTick>
 800f890:	0003      	movs	r3, r0
 800f892:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800f894:	e017      	b.n	800f8c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	3301      	adds	r3, #1
 800f89a:	d014      	beq.n	800f8c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800f89c:	f7fc fa8a 	bl	800bdb4 <HAL_GetTick>
 800f8a0:	0002      	movs	r2, r0
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	683a      	ldr	r2, [r7, #0]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d902      	bls.n	800f8b2 <I2S_WaitFlagStateUntilTimeout+0x36>
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d109      	bne.n	800f8c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2235      	movs	r2, #53	@ 0x35
 800f8b6:	2101      	movs	r1, #1
 800f8b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2234      	movs	r2, #52	@ 0x34
 800f8be:	2100      	movs	r1, #0
 800f8c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	e00f      	b.n	800f8e6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	689b      	ldr	r3, [r3, #8]
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	4013      	ands	r3, r2
 800f8d0:	68ba      	ldr	r2, [r7, #8]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	425a      	negs	r2, r3
 800f8d6:	4153      	adcs	r3, r2
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	001a      	movs	r2, r3
 800f8dc:	1dfb      	adds	r3, r7, #7
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d1d8      	bne.n	800f896 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	0018      	movs	r0, r3
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	b006      	add	sp, #24
 800f8ec:	bd80      	pop	{r7, pc}
	...

0800f8f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8f2:	b08b      	sub	sp, #44	@ 0x2c
 800f8f4:	af06      	add	r7, sp, #24
 800f8f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e0f0      	b.n	800fae4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a79      	ldr	r2, [pc, #484]	@ (800faec <HAL_PCD_Init+0x1fc>)
 800f906:	5c9b      	ldrb	r3, [r3, r2]
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d108      	bne.n	800f920 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	23aa      	movs	r3, #170	@ 0xaa
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	2100      	movs	r1, #0
 800f916:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	0018      	movs	r0, r3
 800f91c:	f009 fdd4 	bl	80194c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a72      	ldr	r2, [pc, #456]	@ (800faec <HAL_PCD_Init+0x1fc>)
 800f924:	2103      	movs	r1, #3
 800f926:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	0018      	movs	r0, r3
 800f92e:	f005 fd87 	bl	8015440 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f932:	230f      	movs	r3, #15
 800f934:	18fb      	adds	r3, r7, r3
 800f936:	2200      	movs	r2, #0
 800f938:	701a      	strb	r2, [r3, #0]
 800f93a:	e049      	b.n	800f9d0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f93c:	200f      	movs	r0, #15
 800f93e:	183b      	adds	r3, r7, r0
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	6879      	ldr	r1, [r7, #4]
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	0013      	movs	r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	189b      	adds	r3, r3, r2
 800f94c:	00db      	lsls	r3, r3, #3
 800f94e:	18cb      	adds	r3, r1, r3
 800f950:	3301      	adds	r3, #1
 800f952:	2201      	movs	r2, #1
 800f954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f956:	183b      	adds	r3, r7, r0
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	6879      	ldr	r1, [r7, #4]
 800f95c:	1c5a      	adds	r2, r3, #1
 800f95e:	0013      	movs	r3, r2
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	189b      	adds	r3, r3, r2
 800f964:	00db      	lsls	r3, r3, #3
 800f966:	183a      	adds	r2, r7, r0
 800f968:	7812      	ldrb	r2, [r2, #0]
 800f96a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f96c:	183b      	adds	r3, r7, r0
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	6879      	ldr	r1, [r7, #4]
 800f972:	1c5a      	adds	r2, r3, #1
 800f974:	0013      	movs	r3, r2
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	189b      	adds	r3, r3, r2
 800f97a:	00db      	lsls	r3, r3, #3
 800f97c:	18cb      	adds	r3, r1, r3
 800f97e:	3303      	adds	r3, #3
 800f980:	2200      	movs	r2, #0
 800f982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f984:	183b      	adds	r3, r7, r0
 800f986:	781a      	ldrb	r2, [r3, #0]
 800f988:	6879      	ldr	r1, [r7, #4]
 800f98a:	0013      	movs	r3, r2
 800f98c:	009b      	lsls	r3, r3, #2
 800f98e:	189b      	adds	r3, r3, r2
 800f990:	00db      	lsls	r3, r3, #3
 800f992:	18cb      	adds	r3, r1, r3
 800f994:	3338      	adds	r3, #56	@ 0x38
 800f996:	2200      	movs	r2, #0
 800f998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f99a:	183b      	adds	r3, r7, r0
 800f99c:	781a      	ldrb	r2, [r3, #0]
 800f99e:	6879      	ldr	r1, [r7, #4]
 800f9a0:	0013      	movs	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	189b      	adds	r3, r3, r2
 800f9a6:	00db      	lsls	r3, r3, #3
 800f9a8:	18cb      	adds	r3, r1, r3
 800f9aa:	333c      	adds	r3, #60	@ 0x3c
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f9b0:	183b      	adds	r3, r7, r0
 800f9b2:	781a      	ldrb	r2, [r3, #0]
 800f9b4:	6879      	ldr	r1, [r7, #4]
 800f9b6:	0013      	movs	r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	189b      	adds	r3, r3, r2
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	18cb      	adds	r3, r1, r3
 800f9c0:	3340      	adds	r3, #64	@ 0x40
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f9c6:	183b      	adds	r3, r7, r0
 800f9c8:	781a      	ldrb	r2, [r3, #0]
 800f9ca:	183b      	adds	r3, r7, r0
 800f9cc:	3201      	adds	r2, #1
 800f9ce:	701a      	strb	r2, [r3, #0]
 800f9d0:	210f      	movs	r1, #15
 800f9d2:	187b      	adds	r3, r7, r1
 800f9d4:	781a      	ldrb	r2, [r3, #0]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d3ae      	bcc.n	800f93c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f9de:	187b      	adds	r3, r7, r1
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
 800f9e4:	e056      	b.n	800fa94 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f9e6:	240f      	movs	r4, #15
 800f9e8:	193b      	adds	r3, r7, r4
 800f9ea:	781a      	ldrb	r2, [r3, #0]
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	236a      	movs	r3, #106	@ 0x6a
 800f9f0:	33ff      	adds	r3, #255	@ 0xff
 800f9f2:	0019      	movs	r1, r3
 800f9f4:	0013      	movs	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	189b      	adds	r3, r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	18c3      	adds	r3, r0, r3
 800f9fe:	185b      	adds	r3, r3, r1
 800fa00:	2200      	movs	r2, #0
 800fa02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800fa04:	193b      	adds	r3, r7, r4
 800fa06:	781a      	ldrb	r2, [r3, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	23b4      	movs	r3, #180	@ 0xb4
 800fa0c:	0059      	lsls	r1, r3, #1
 800fa0e:	0013      	movs	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	189b      	adds	r3, r3, r2
 800fa14:	00db      	lsls	r3, r3, #3
 800fa16:	18c3      	adds	r3, r0, r3
 800fa18:	185b      	adds	r3, r3, r1
 800fa1a:	193a      	adds	r2, r7, r4
 800fa1c:	7812      	ldrb	r2, [r2, #0]
 800fa1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800fa20:	193b      	adds	r3, r7, r4
 800fa22:	781a      	ldrb	r2, [r3, #0]
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	236c      	movs	r3, #108	@ 0x6c
 800fa28:	33ff      	adds	r3, #255	@ 0xff
 800fa2a:	0019      	movs	r1, r3
 800fa2c:	0013      	movs	r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	189b      	adds	r3, r3, r2
 800fa32:	00db      	lsls	r3, r3, #3
 800fa34:	18c3      	adds	r3, r0, r3
 800fa36:	185b      	adds	r3, r3, r1
 800fa38:	2200      	movs	r2, #0
 800fa3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800fa3c:	193b      	adds	r3, r7, r4
 800fa3e:	781a      	ldrb	r2, [r3, #0]
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	23bc      	movs	r3, #188	@ 0xbc
 800fa44:	0059      	lsls	r1, r3, #1
 800fa46:	0013      	movs	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	189b      	adds	r3, r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	18c3      	adds	r3, r0, r3
 800fa50:	185b      	adds	r3, r3, r1
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800fa56:	193b      	adds	r3, r7, r4
 800fa58:	781a      	ldrb	r2, [r3, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	23be      	movs	r3, #190	@ 0xbe
 800fa5e:	0059      	lsls	r1, r3, #1
 800fa60:	0013      	movs	r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	189b      	adds	r3, r3, r2
 800fa66:	00db      	lsls	r3, r3, #3
 800fa68:	18c3      	adds	r3, r0, r3
 800fa6a:	185b      	adds	r3, r3, r1
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800fa70:	193b      	adds	r3, r7, r4
 800fa72:	781a      	ldrb	r2, [r3, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	23c0      	movs	r3, #192	@ 0xc0
 800fa78:	0059      	lsls	r1, r3, #1
 800fa7a:	0013      	movs	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	189b      	adds	r3, r3, r2
 800fa80:	00db      	lsls	r3, r3, #3
 800fa82:	18c3      	adds	r3, r0, r3
 800fa84:	185b      	adds	r3, r3, r1
 800fa86:	2200      	movs	r2, #0
 800fa88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa8a:	193b      	adds	r3, r7, r4
 800fa8c:	781a      	ldrb	r2, [r3, #0]
 800fa8e:	193b      	adds	r3, r7, r4
 800fa90:	3201      	adds	r2, #1
 800fa92:	701a      	strb	r2, [r3, #0]
 800fa94:	230f      	movs	r3, #15
 800fa96:	18fb      	adds	r3, r7, r3
 800fa98:	781a      	ldrb	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d3a1      	bcc.n	800f9e6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6818      	ldr	r0, [r3, #0]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	466a      	mov	r2, sp
 800faaa:	0011      	movs	r1, r2
 800faac:	001a      	movs	r2, r3
 800faae:	3210      	adds	r2, #16
 800fab0:	ca70      	ldmia	r2!, {r4, r5, r6}
 800fab2:	c170      	stmia	r1!, {r4, r5, r6}
 800fab4:	ca30      	ldmia	r2!, {r4, r5}
 800fab6:	c130      	stmia	r1!, {r4, r5}
 800fab8:	6859      	ldr	r1, [r3, #4]
 800faba:	689a      	ldr	r2, [r3, #8]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	f005 fcd9 	bl	8015474 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2224      	movs	r2, #36	@ 0x24
 800fac6:	2100      	movs	r1, #0
 800fac8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4a07      	ldr	r2, [pc, #28]	@ (800faec <HAL_PCD_Init+0x1fc>)
 800face:	2101      	movs	r1, #1
 800fad0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	69db      	ldr	r3, [r3, #28]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d103      	bne.n	800fae2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	0018      	movs	r0, r3
 800fade:	f001 fd23 	bl	8011528 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800fae2:	2300      	movs	r3, #0
}
 800fae4:	0018      	movs	r0, r3
 800fae6:	46bd      	mov	sp, r7
 800fae8:	b005      	add	sp, #20
 800faea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faec:	000002a9 	.word	0x000002a9

0800faf0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	23aa      	movs	r3, #170	@ 0xaa
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	5cd3      	ldrb	r3, [r2, r3]
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d101      	bne.n	800fb08 <HAL_PCD_Start+0x18>
 800fb04:	2302      	movs	r3, #2
 800fb06:	e014      	b.n	800fb32 <HAL_PCD_Start+0x42>
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	23aa      	movs	r3, #170	@ 0xaa
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	2101      	movs	r1, #1
 800fb10:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	0018      	movs	r0, r3
 800fb18:	f005 fc7c 	bl	8015414 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	0018      	movs	r0, r3
 800fb22:	f007 fc7f 	bl	8017424 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	23aa      	movs	r3, #170	@ 0xaa
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	0018      	movs	r0, r3
 800fb34:	46bd      	mov	sp, r7
 800fb36:	b002      	add	sp, #8
 800fb38:	bd80      	pop	{r7, pc}
	...

0800fb3c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	0018      	movs	r0, r3
 800fb4a:	f007 fc81 	bl	8017450 <USB_ReadInterrupts>
 800fb4e:	0003      	movs	r3, r0
 800fb50:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	2380      	movs	r3, #128	@ 0x80
 800fb56:	021b      	lsls	r3, r3, #8
 800fb58:	4013      	ands	r3, r2
 800fb5a:	d004      	beq.n	800fb66 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	0018      	movs	r0, r3
 800fb60:	f000 fb62 	bl	8010228 <PCD_EP_ISR_Handler>

    return;
 800fb64:	e11d      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	2380      	movs	r3, #128	@ 0x80
 800fb6a:	00db      	lsls	r3, r3, #3
 800fb6c:	4013      	ands	r3, r2
 800fb6e:	d015      	beq.n	800fb9c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2244      	movs	r2, #68	@ 0x44
 800fb76:	5a9b      	ldrh	r3, [r3, r2]
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	498a      	ldr	r1, [pc, #552]	@ (800fda8 <HAL_PCD_IRQHandler+0x26c>)
 800fb80:	400a      	ands	r2, r1
 800fb82:	b291      	uxth	r1, r2
 800fb84:	2244      	movs	r2, #68	@ 0x44
 800fb86:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	0018      	movs	r0, r3
 800fb8c:	f009 fd1f 	bl	80195ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2100      	movs	r1, #0
 800fb94:	0018      	movs	r0, r3
 800fb96:	f000 f915 	bl	800fdc4 <HAL_PCD_SetAddress>

    return;
 800fb9a:	e102      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	2380      	movs	r3, #128	@ 0x80
 800fba0:	01db      	lsls	r3, r3, #7
 800fba2:	4013      	ands	r3, r2
 800fba4:	d00c      	beq.n	800fbc0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2244      	movs	r2, #68	@ 0x44
 800fbac:	5a9b      	ldrh	r3, [r3, r2]
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	497d      	ldr	r1, [pc, #500]	@ (800fdac <HAL_PCD_IRQHandler+0x270>)
 800fbb6:	400a      	ands	r2, r1
 800fbb8:	b291      	uxth	r1, r2
 800fbba:	2244      	movs	r2, #68	@ 0x44
 800fbbc:	5299      	strh	r1, [r3, r2]

    return;
 800fbbe:	e0f0      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	2380      	movs	r3, #128	@ 0x80
 800fbc4:	019b      	lsls	r3, r3, #6
 800fbc6:	4013      	ands	r3, r2
 800fbc8:	d00c      	beq.n	800fbe4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2244      	movs	r2, #68	@ 0x44
 800fbd0:	5a9b      	ldrh	r3, [r3, r2]
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4975      	ldr	r1, [pc, #468]	@ (800fdb0 <HAL_PCD_IRQHandler+0x274>)
 800fbda:	400a      	ands	r2, r1
 800fbdc:	b291      	uxth	r1, r2
 800fbde:	2244      	movs	r2, #68	@ 0x44
 800fbe0:	5299      	strh	r1, [r3, r2]

    return;
 800fbe2:	e0de      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	2380      	movs	r3, #128	@ 0x80
 800fbe8:	015b      	lsls	r3, r3, #5
 800fbea:	4013      	ands	r3, r2
 800fbec:	d038      	beq.n	800fc60 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2240      	movs	r2, #64	@ 0x40
 800fbf4:	5a9b      	ldrh	r3, [r3, r2]
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2104      	movs	r1, #4
 800fbfe:	438a      	bics	r2, r1
 800fc00:	b291      	uxth	r1, r2
 800fc02:	2240      	movs	r2, #64	@ 0x40
 800fc04:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2240      	movs	r2, #64	@ 0x40
 800fc0c:	5a9b      	ldrh	r3, [r3, r2]
 800fc0e:	b29a      	uxth	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2108      	movs	r1, #8
 800fc16:	438a      	bics	r2, r1
 800fc18:	b291      	uxth	r1, r2
 800fc1a:	2240      	movs	r2, #64	@ 0x40
 800fc1c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	23b8      	movs	r3, #184	@ 0xb8
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	5cd3      	ldrb	r3, [r2, r3]
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d109      	bne.n	800fc3e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	23b8      	movs	r3, #184	@ 0xb8
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	2100      	movs	r1, #0
 800fc32:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2100      	movs	r1, #0
 800fc38:	0018      	movs	r0, r3
 800fc3a:	f001 fc9f 	bl	801157c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	0018      	movs	r0, r3
 800fc42:	f009 fd05 	bl	8019650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2244      	movs	r2, #68	@ 0x44
 800fc4c:	5a9b      	ldrh	r3, [r3, r2]
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4957      	ldr	r1, [pc, #348]	@ (800fdb4 <HAL_PCD_IRQHandler+0x278>)
 800fc56:	400a      	ands	r2, r1
 800fc58:	b291      	uxth	r1, r2
 800fc5a:	2244      	movs	r2, #68	@ 0x44
 800fc5c:	5299      	strh	r1, [r3, r2]

    return;
 800fc5e:	e0a0      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	2380      	movs	r3, #128	@ 0x80
 800fc64:	011b      	lsls	r3, r3, #4
 800fc66:	4013      	ands	r3, r2
 800fc68:	d028      	beq.n	800fcbc <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2240      	movs	r2, #64	@ 0x40
 800fc70:	5a9b      	ldrh	r3, [r3, r2]
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2108      	movs	r1, #8
 800fc7a:	430a      	orrs	r2, r1
 800fc7c:	b291      	uxth	r1, r2
 800fc7e:	2240      	movs	r2, #64	@ 0x40
 800fc80:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2244      	movs	r2, #68	@ 0x44
 800fc88:	5a9b      	ldrh	r3, [r3, r2]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4949      	ldr	r1, [pc, #292]	@ (800fdb8 <HAL_PCD_IRQHandler+0x27c>)
 800fc92:	400a      	ands	r2, r1
 800fc94:	b291      	uxth	r1, r2
 800fc96:	2244      	movs	r2, #68	@ 0x44
 800fc98:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2240      	movs	r2, #64	@ 0x40
 800fca0:	5a9b      	ldrh	r3, [r3, r2]
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2104      	movs	r1, #4
 800fcaa:	430a      	orrs	r2, r1
 800fcac:	b291      	uxth	r1, r2
 800fcae:	2240      	movs	r2, #64	@ 0x40
 800fcb0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	0018      	movs	r0, r3
 800fcb6:	f009 fcaf 	bl	8019618 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fcba:	e072      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2280      	movs	r2, #128	@ 0x80
 800fcc0:	4013      	ands	r3, r2
 800fcc2:	d046      	beq.n	800fd52 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2244      	movs	r2, #68	@ 0x44
 800fcca:	5a9b      	ldrh	r3, [r3, r2]
 800fccc:	b29a      	uxth	r2, r3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2180      	movs	r1, #128	@ 0x80
 800fcd4:	438a      	bics	r2, r1
 800fcd6:	b291      	uxth	r1, r2
 800fcd8:	2244      	movs	r2, #68	@ 0x44
 800fcda:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	23b8      	movs	r3, #184	@ 0xb8
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	5cd3      	ldrb	r3, [r2, r3]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d12f      	bne.n	800fd48 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	2240      	movs	r2, #64	@ 0x40
 800fcee:	5a9b      	ldrh	r3, [r3, r2]
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2104      	movs	r1, #4
 800fcf8:	430a      	orrs	r2, r1
 800fcfa:	b291      	uxth	r1, r2
 800fcfc:	2240      	movs	r2, #64	@ 0x40
 800fcfe:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2240      	movs	r2, #64	@ 0x40
 800fd06:	5a9b      	ldrh	r3, [r3, r2]
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2108      	movs	r1, #8
 800fd10:	430a      	orrs	r2, r1
 800fd12:	b291      	uxth	r1, r2
 800fd14:	2240      	movs	r2, #64	@ 0x40
 800fd16:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	23b8      	movs	r3, #184	@ 0xb8
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	2101      	movs	r1, #1
 800fd20:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2254      	movs	r2, #84	@ 0x54
 800fd28:	5a9b      	ldrh	r3, [r3, r2]
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	089b      	lsrs	r3, r3, #2
 800fd2e:	223c      	movs	r2, #60	@ 0x3c
 800fd30:	4013      	ands	r3, r2
 800fd32:	0019      	movs	r1, r3
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	23b9      	movs	r3, #185	@ 0xb9
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2101      	movs	r1, #1
 800fd40:	0018      	movs	r0, r3
 800fd42:	f001 fc1b 	bl	801157c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800fd46:	e02c      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	0018      	movs	r0, r3
 800fd4c:	f009 fc64 	bl	8019618 <HAL_PCD_SuspendCallback>
    return;
 800fd50:	e027      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	2380      	movs	r3, #128	@ 0x80
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4013      	ands	r3, r2
 800fd5a:	d010      	beq.n	800fd7e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2244      	movs	r2, #68	@ 0x44
 800fd62:	5a9b      	ldrh	r3, [r3, r2]
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4914      	ldr	r1, [pc, #80]	@ (800fdbc <HAL_PCD_IRQHandler+0x280>)
 800fd6c:	400a      	ands	r2, r1
 800fd6e:	b291      	uxth	r1, r2
 800fd70:	2244      	movs	r2, #68	@ 0x44
 800fd72:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	0018      	movs	r0, r3
 800fd78:	f009 fc1a 	bl	80195b0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fd7c:	e011      	b.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	2380      	movs	r3, #128	@ 0x80
 800fd82:	005b      	lsls	r3, r3, #1
 800fd84:	4013      	ands	r3, r2
 800fd86:	d00c      	beq.n	800fda2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2244      	movs	r2, #68	@ 0x44
 800fd8e:	5a9b      	ldrh	r3, [r3, r2]
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	490a      	ldr	r1, [pc, #40]	@ (800fdc0 <HAL_PCD_IRQHandler+0x284>)
 800fd98:	400a      	ands	r2, r1
 800fd9a:	b291      	uxth	r1, r2
 800fd9c:	2244      	movs	r2, #68	@ 0x44
 800fd9e:	5299      	strh	r1, [r3, r2]

    return;
 800fda0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800fda2:	46bd      	mov	sp, r7
 800fda4:	b004      	add	sp, #16
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	fffffbff 	.word	0xfffffbff
 800fdac:	ffffbfff 	.word	0xffffbfff
 800fdb0:	ffffdfff 	.word	0xffffdfff
 800fdb4:	ffffefff 	.word	0xffffefff
 800fdb8:	fffff7ff 	.word	0xfffff7ff
 800fdbc:	fffffdff 	.word	0xfffffdff
 800fdc0:	fffffeff 	.word	0xfffffeff

0800fdc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	000a      	movs	r2, r1
 800fdce:	1cfb      	adds	r3, r7, #3
 800fdd0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	23aa      	movs	r3, #170	@ 0xaa
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	5cd3      	ldrb	r3, [r2, r3]
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d101      	bne.n	800fde2 <HAL_PCD_SetAddress+0x1e>
 800fdde:	2302      	movs	r3, #2
 800fde0:	e017      	b.n	800fe12 <HAL_PCD_SetAddress+0x4e>
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	23aa      	movs	r3, #170	@ 0xaa
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	2101      	movs	r1, #1
 800fdea:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	1cfa      	adds	r2, r7, #3
 800fdf0:	2124      	movs	r1, #36	@ 0x24
 800fdf2:	7812      	ldrb	r2, [r2, #0]
 800fdf4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	1cfb      	adds	r3, r7, #3
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	0019      	movs	r1, r3
 800fe00:	0010      	movs	r0, r2
 800fe02:	f007 fafb 	bl	80173fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	23aa      	movs	r3, #170	@ 0xaa
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	0018      	movs	r0, r3
 800fe14:	46bd      	mov	sp, r7
 800fe16:	b002      	add	sp, #8
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800fe1a:	b590      	push	{r4, r7, lr}
 800fe1c:	b085      	sub	sp, #20
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	000c      	movs	r4, r1
 800fe24:	0010      	movs	r0, r2
 800fe26:	0019      	movs	r1, r3
 800fe28:	1cfb      	adds	r3, r7, #3
 800fe2a:	1c22      	adds	r2, r4, #0
 800fe2c:	701a      	strb	r2, [r3, #0]
 800fe2e:	003b      	movs	r3, r7
 800fe30:	1c02      	adds	r2, r0, #0
 800fe32:	801a      	strh	r2, [r3, #0]
 800fe34:	1cbb      	adds	r3, r7, #2
 800fe36:	1c0a      	adds	r2, r1, #0
 800fe38:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800fe3a:	230b      	movs	r3, #11
 800fe3c:	18fb      	adds	r3, r7, r3
 800fe3e:	2200      	movs	r2, #0
 800fe40:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fe42:	1cfb      	adds	r3, r7, #3
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	b25b      	sxtb	r3, r3
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	da0f      	bge.n	800fe6c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fe4c:	1cfb      	adds	r3, r7, #3
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	2207      	movs	r2, #7
 800fe52:	4013      	ands	r3, r2
 800fe54:	1c5a      	adds	r2, r3, #1
 800fe56:	0013      	movs	r3, r2
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	189b      	adds	r3, r3, r2
 800fe5c:	00db      	lsls	r3, r3, #3
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	18d3      	adds	r3, r2, r3
 800fe62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2201      	movs	r2, #1
 800fe68:	705a      	strb	r2, [r3, #1]
 800fe6a:	e00f      	b.n	800fe8c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fe6c:	1cfb      	adds	r3, r7, #3
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	2207      	movs	r2, #7
 800fe72:	401a      	ands	r2, r3
 800fe74:	0013      	movs	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	189b      	adds	r3, r3, r2
 800fe7a:	00db      	lsls	r3, r3, #3
 800fe7c:	3369      	adds	r3, #105	@ 0x69
 800fe7e:	33ff      	adds	r3, #255	@ 0xff
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	18d3      	adds	r3, r2, r3
 800fe84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800fe8c:	1cfb      	adds	r3, r7, #3
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	2207      	movs	r2, #7
 800fe92:	4013      	ands	r3, r2
 800fe94:	b2da      	uxtb	r2, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800fe9a:	003b      	movs	r3, r7
 800fe9c:	881a      	ldrh	r2, [r3, #0]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	1cba      	adds	r2, r7, #2
 800fea6:	7812      	ldrb	r2, [r2, #0]
 800fea8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800feaa:	1cbb      	adds	r3, r7, #2
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b02      	cmp	r3, #2
 800feb0:	d102      	bne.n	800feb8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2200      	movs	r2, #0
 800feb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	23aa      	movs	r3, #170	@ 0xaa
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	5cd3      	ldrb	r3, [r2, r3]
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d101      	bne.n	800fec8 <HAL_PCD_EP_Open+0xae>
 800fec4:	2302      	movs	r3, #2
 800fec6:	e013      	b.n	800fef0 <HAL_PCD_EP_Open+0xd6>
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	23aa      	movs	r3, #170	@ 0xaa
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	2101      	movs	r1, #1
 800fed0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	0011      	movs	r1, r2
 800feda:	0018      	movs	r0, r3
 800fedc:	f005 faf2 	bl	80154c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	23aa      	movs	r3, #170	@ 0xaa
 800fee4:	009b      	lsls	r3, r3, #2
 800fee6:	2100      	movs	r1, #0
 800fee8:	54d1      	strb	r1, [r2, r3]

  return ret;
 800feea:	230b      	movs	r3, #11
 800feec:	18fb      	adds	r3, r7, r3
 800feee:	781b      	ldrb	r3, [r3, #0]
}
 800fef0:	0018      	movs	r0, r3
 800fef2:	46bd      	mov	sp, r7
 800fef4:	b005      	add	sp, #20
 800fef6:	bd90      	pop	{r4, r7, pc}

0800fef8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	000a      	movs	r2, r1
 800ff02:	1cfb      	adds	r3, r7, #3
 800ff04:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ff06:	1cfb      	adds	r3, r7, #3
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	b25b      	sxtb	r3, r3
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	da0f      	bge.n	800ff30 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ff10:	1cfb      	adds	r3, r7, #3
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2207      	movs	r2, #7
 800ff16:	4013      	ands	r3, r2
 800ff18:	1c5a      	adds	r2, r3, #1
 800ff1a:	0013      	movs	r3, r2
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	189b      	adds	r3, r3, r2
 800ff20:	00db      	lsls	r3, r3, #3
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	18d3      	adds	r3, r2, r3
 800ff26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	705a      	strb	r2, [r3, #1]
 800ff2e:	e00f      	b.n	800ff50 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ff30:	1cfb      	adds	r3, r7, #3
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	2207      	movs	r2, #7
 800ff36:	401a      	ands	r2, r3
 800ff38:	0013      	movs	r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	189b      	adds	r3, r3, r2
 800ff3e:	00db      	lsls	r3, r3, #3
 800ff40:	3369      	adds	r3, #105	@ 0x69
 800ff42:	33ff      	adds	r3, #255	@ 0xff
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	18d3      	adds	r3, r2, r3
 800ff48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ff50:	1cfb      	adds	r3, r7, #3
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2207      	movs	r2, #7
 800ff56:	4013      	ands	r3, r2
 800ff58:	b2da      	uxtb	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	23aa      	movs	r3, #170	@ 0xaa
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	5cd3      	ldrb	r3, [r2, r3]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d101      	bne.n	800ff6e <HAL_PCD_EP_Close+0x76>
 800ff6a:	2302      	movs	r3, #2
 800ff6c:	e011      	b.n	800ff92 <HAL_PCD_EP_Close+0x9a>
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	23aa      	movs	r3, #170	@ 0xaa
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	2101      	movs	r1, #1
 800ff76:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	0011      	movs	r1, r2
 800ff80:	0018      	movs	r0, r3
 800ff82:	f005 fe41 	bl	8015c08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	23aa      	movs	r3, #170	@ 0xaa
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800ff90:	2300      	movs	r3, #0
}
 800ff92:	0018      	movs	r0, r3
 800ff94:	46bd      	mov	sp, r7
 800ff96:	b004      	add	sp, #16
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b086      	sub	sp, #24
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	603b      	str	r3, [r7, #0]
 800ffa6:	200b      	movs	r0, #11
 800ffa8:	183b      	adds	r3, r7, r0
 800ffaa:	1c0a      	adds	r2, r1, #0
 800ffac:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ffae:	0001      	movs	r1, r0
 800ffb0:	187b      	adds	r3, r7, r1
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	2207      	movs	r2, #7
 800ffb6:	401a      	ands	r2, r3
 800ffb8:	0013      	movs	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	189b      	adds	r3, r3, r2
 800ffbe:	00db      	lsls	r3, r3, #3
 800ffc0:	3369      	adds	r3, #105	@ 0x69
 800ffc2:	33ff      	adds	r3, #255	@ 0xff
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	18d3      	adds	r3, r2, r3
 800ffc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ffe2:	187b      	adds	r3, r7, r1
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	2207      	movs	r2, #7
 800ffe8:	4013      	ands	r3, r2
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	697a      	ldr	r2, [r7, #20]
 800fff6:	0011      	movs	r1, r2
 800fff8:	0018      	movs	r0, r3
 800fffa:	f005 ffc5 	bl	8015f88 <USB_EPStartXfer>

  return HAL_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	0018      	movs	r0, r3
 8010002:	46bd      	mov	sp, r7
 8010004:	b006      	add	sp, #24
 8010006:	bd80      	pop	{r7, pc}

08010008 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	000a      	movs	r2, r1
 8010012:	1cfb      	adds	r3, r7, #3
 8010014:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8010016:	1cfb      	adds	r3, r7, #3
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	2207      	movs	r2, #7
 801001c:	401a      	ands	r2, r3
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	23c2      	movs	r3, #194	@ 0xc2
 8010022:	0059      	lsls	r1, r3, #1
 8010024:	0013      	movs	r3, r2
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	189b      	adds	r3, r3, r2
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	18c3      	adds	r3, r0, r3
 801002e:	185b      	adds	r3, r3, r1
 8010030:	681b      	ldr	r3, [r3, #0]
}
 8010032:	0018      	movs	r0, r3
 8010034:	46bd      	mov	sp, r7
 8010036:	b002      	add	sp, #8
 8010038:	bd80      	pop	{r7, pc}

0801003a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b086      	sub	sp, #24
 801003e:	af00      	add	r7, sp, #0
 8010040:	60f8      	str	r0, [r7, #12]
 8010042:	607a      	str	r2, [r7, #4]
 8010044:	603b      	str	r3, [r7, #0]
 8010046:	200b      	movs	r0, #11
 8010048:	183b      	adds	r3, r7, r0
 801004a:	1c0a      	adds	r2, r1, #0
 801004c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801004e:	183b      	adds	r3, r7, r0
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	2207      	movs	r2, #7
 8010054:	4013      	ands	r3, r2
 8010056:	1c5a      	adds	r2, r3, #1
 8010058:	0013      	movs	r3, r2
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	189b      	adds	r3, r3, r2
 801005e:	00db      	lsls	r3, r3, #3
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	18d3      	adds	r3, r2, r3
 8010064:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	2224      	movs	r2, #36	@ 0x24
 8010076:	2101      	movs	r1, #1
 8010078:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	683a      	ldr	r2, [r7, #0]
 801007e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2200      	movs	r2, #0
 8010084:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	2201      	movs	r2, #1
 801008a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801008c:	183b      	adds	r3, r7, r0
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	2207      	movs	r2, #7
 8010092:	4013      	ands	r3, r2
 8010094:	b2da      	uxtb	r2, r3
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	697a      	ldr	r2, [r7, #20]
 80100a0:	0011      	movs	r1, r2
 80100a2:	0018      	movs	r0, r3
 80100a4:	f005 ff70 	bl	8015f88 <USB_EPStartXfer>

  return HAL_OK;
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	0018      	movs	r0, r3
 80100ac:	46bd      	mov	sp, r7
 80100ae:	b006      	add	sp, #24
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b084      	sub	sp, #16
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
 80100ba:	000a      	movs	r2, r1
 80100bc:	1cfb      	adds	r3, r7, #3
 80100be:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80100c0:	1cfb      	adds	r3, r7, #3
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	2207      	movs	r2, #7
 80100c6:	401a      	ands	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d901      	bls.n	80100d4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e046      	b.n	8010162 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80100d4:	1cfb      	adds	r3, r7, #3
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	b25b      	sxtb	r3, r3
 80100da:	2b00      	cmp	r3, #0
 80100dc:	da0f      	bge.n	80100fe <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80100de:	1cfb      	adds	r3, r7, #3
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	2207      	movs	r2, #7
 80100e4:	4013      	ands	r3, r2
 80100e6:	1c5a      	adds	r2, r3, #1
 80100e8:	0013      	movs	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	189b      	adds	r3, r3, r2
 80100ee:	00db      	lsls	r3, r3, #3
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	18d3      	adds	r3, r2, r3
 80100f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2201      	movs	r2, #1
 80100fa:	705a      	strb	r2, [r3, #1]
 80100fc:	e00d      	b.n	801011a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80100fe:	1cfb      	adds	r3, r7, #3
 8010100:	781a      	ldrb	r2, [r3, #0]
 8010102:	0013      	movs	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	189b      	adds	r3, r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	3369      	adds	r3, #105	@ 0x69
 801010c:	33ff      	adds	r3, #255	@ 0xff
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	18d3      	adds	r3, r2, r3
 8010112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2200      	movs	r2, #0
 8010118:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2201      	movs	r2, #1
 801011e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010120:	1cfb      	adds	r3, r7, #3
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	2207      	movs	r2, #7
 8010126:	4013      	ands	r3, r2
 8010128:	b2da      	uxtb	r2, r3
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	23aa      	movs	r3, #170	@ 0xaa
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	5cd3      	ldrb	r3, [r2, r3]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d101      	bne.n	801013e <HAL_PCD_EP_SetStall+0x8c>
 801013a:	2302      	movs	r3, #2
 801013c:	e011      	b.n	8010162 <HAL_PCD_EP_SetStall+0xb0>
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	23aa      	movs	r3, #170	@ 0xaa
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	2101      	movs	r1, #1
 8010146:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	0011      	movs	r1, r2
 8010150:	0018      	movs	r0, r3
 8010152:	f007 f851 	bl	80171f8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	23aa      	movs	r3, #170	@ 0xaa
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	2100      	movs	r1, #0
 801015e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8010160:	2300      	movs	r3, #0
}
 8010162:	0018      	movs	r0, r3
 8010164:	46bd      	mov	sp, r7
 8010166:	b004      	add	sp, #16
 8010168:	bd80      	pop	{r7, pc}

0801016a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b084      	sub	sp, #16
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	000a      	movs	r2, r1
 8010174:	1cfb      	adds	r3, r7, #3
 8010176:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010178:	1cfb      	adds	r3, r7, #3
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	220f      	movs	r2, #15
 801017e:	401a      	ands	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	429a      	cmp	r2, r3
 8010186:	d901      	bls.n	801018c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	e048      	b.n	801021e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801018c:	1cfb      	adds	r3, r7, #3
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	b25b      	sxtb	r3, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	da0f      	bge.n	80101b6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010196:	1cfb      	adds	r3, r7, #3
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	2207      	movs	r2, #7
 801019c:	4013      	ands	r3, r2
 801019e:	1c5a      	adds	r2, r3, #1
 80101a0:	0013      	movs	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	189b      	adds	r3, r3, r2
 80101a6:	00db      	lsls	r3, r3, #3
 80101a8:	687a      	ldr	r2, [r7, #4]
 80101aa:	18d3      	adds	r3, r2, r3
 80101ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2201      	movs	r2, #1
 80101b2:	705a      	strb	r2, [r3, #1]
 80101b4:	e00f      	b.n	80101d6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80101b6:	1cfb      	adds	r3, r7, #3
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	2207      	movs	r2, #7
 80101bc:	401a      	ands	r2, r3
 80101be:	0013      	movs	r3, r2
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	189b      	adds	r3, r3, r2
 80101c4:	00db      	lsls	r3, r3, #3
 80101c6:	3369      	adds	r3, #105	@ 0x69
 80101c8:	33ff      	adds	r3, #255	@ 0xff
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	18d3      	adds	r3, r2, r3
 80101ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2200      	movs	r2, #0
 80101d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80101dc:	1cfb      	adds	r3, r7, #3
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	2207      	movs	r2, #7
 80101e2:	4013      	ands	r3, r2
 80101e4:	b2da      	uxtb	r2, r3
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	23aa      	movs	r3, #170	@ 0xaa
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	5cd3      	ldrb	r3, [r2, r3]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d101      	bne.n	80101fa <HAL_PCD_EP_ClrStall+0x90>
 80101f6:	2302      	movs	r3, #2
 80101f8:	e011      	b.n	801021e <HAL_PCD_EP_ClrStall+0xb4>
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	23aa      	movs	r3, #170	@ 0xaa
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	2101      	movs	r1, #1
 8010202:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	68fa      	ldr	r2, [r7, #12]
 801020a:	0011      	movs	r1, r2
 801020c:	0018      	movs	r0, r3
 801020e:	f007 f843 	bl	8017298 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	23aa      	movs	r3, #170	@ 0xaa
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	2100      	movs	r1, #0
 801021a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801021c:	2300      	movs	r3, #0
}
 801021e:	0018      	movs	r0, r3
 8010220:	46bd      	mov	sp, r7
 8010222:	b004      	add	sp, #16
 8010224:	bd80      	pop	{r7, pc}
	...

08010228 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8010228:	b5b0      	push	{r4, r5, r7, lr}
 801022a:	b096      	sub	sp, #88	@ 0x58
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010230:	f000 fbec 	bl	8010a0c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	204e      	movs	r0, #78	@ 0x4e
 801023a:	183b      	adds	r3, r7, r0
 801023c:	2144      	movs	r1, #68	@ 0x44
 801023e:	5a52      	ldrh	r2, [r2, r1]
 8010240:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8010242:	183b      	adds	r3, r7, r0
 8010244:	881b      	ldrh	r3, [r3, #0]
 8010246:	b2da      	uxtb	r2, r3
 8010248:	244d      	movs	r4, #77	@ 0x4d
 801024a:	193b      	adds	r3, r7, r4
 801024c:	210f      	movs	r1, #15
 801024e:	400a      	ands	r2, r1
 8010250:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8010252:	193b      	adds	r3, r7, r4
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d000      	beq.n	801025c <PCD_EP_ISR_Handler+0x34>
 801025a:	e18f      	b.n	801057c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801025c:	183b      	adds	r3, r7, r0
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	2210      	movs	r2, #16
 8010262:	4013      	ands	r3, r2
 8010264:	d155      	bne.n	8010312 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	b29a      	uxth	r2, r3
 801026e:	200e      	movs	r0, #14
 8010270:	183b      	adds	r3, r7, r0
 8010272:	49bb      	ldr	r1, [pc, #748]	@ (8010560 <PCD_EP_ISR_Handler+0x338>)
 8010274:	400a      	ands	r2, r1
 8010276:	801a      	strh	r2, [r3, #0]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	183a      	adds	r2, r7, r0
 801027e:	8812      	ldrh	r2, [r2, #0]
 8010280:	49b8      	ldr	r1, [pc, #736]	@ (8010564 <PCD_EP_ISR_Handler+0x33c>)
 8010282:	430a      	orrs	r2, r1
 8010284:	b292      	uxth	r2, r2
 8010286:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	3328      	adds	r3, #40	@ 0x28
 801028c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2250      	movs	r2, #80	@ 0x50
 8010294:	5a9b      	ldrh	r3, [r3, r2]
 8010296:	b29b      	uxth	r3, r3
 8010298:	001a      	movs	r2, r3
 801029a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	00db      	lsls	r3, r3, #3
 80102a0:	18d2      	adds	r2, r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	18d3      	adds	r3, r2, r3
 80102a8:	4aaf      	ldr	r2, [pc, #700]	@ (8010568 <PCD_EP_ISR_Handler+0x340>)
 80102aa:	4694      	mov	ip, r2
 80102ac:	4463      	add	r3, ip
 80102ae:	881b      	ldrh	r3, [r3, #0]
 80102b0:	059b      	lsls	r3, r3, #22
 80102b2:	0d9a      	lsrs	r2, r3, #22
 80102b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80102b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102ba:	695a      	ldr	r2, [r3, #20]
 80102bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102be:	69db      	ldr	r3, [r3, #28]
 80102c0:	18d2      	adds	r2, r2, r3
 80102c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2100      	movs	r1, #0
 80102ca:	0018      	movs	r0, r3
 80102cc:	f009 f952 	bl	8019574 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2224      	movs	r2, #36	@ 0x24
 80102d4:	5c9b      	ldrb	r3, [r3, r2]
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d101      	bne.n	80102e0 <PCD_EP_ISR_Handler+0xb8>
 80102dc:	f000 fb96 	bl	8010a0c <PCD_EP_ISR_Handler+0x7e4>
 80102e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102e2:	699b      	ldr	r3, [r3, #24]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d001      	beq.n	80102ec <PCD_EP_ISR_Handler+0xc4>
 80102e8:	f000 fb90 	bl	8010a0c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2224      	movs	r2, #36	@ 0x24
 80102f0:	5c9b      	ldrb	r3, [r3, r2]
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	2280      	movs	r2, #128	@ 0x80
 80102f6:	4252      	negs	r2, r2
 80102f8:	4313      	orrs	r3, r2
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	0011      	movs	r1, r2
 8010302:	224c      	movs	r2, #76	@ 0x4c
 8010304:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2224      	movs	r2, #36	@ 0x24
 801030a:	2100      	movs	r1, #0
 801030c:	5499      	strb	r1, [r3, r2]
 801030e:	f000 fb7d 	bl	8010a0c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	3369      	adds	r3, #105	@ 0x69
 8010316:	33ff      	adds	r3, #255	@ 0xff
 8010318:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	214a      	movs	r1, #74	@ 0x4a
 8010320:	187b      	adds	r3, r7, r1
 8010322:	8812      	ldrh	r2, [r2, #0]
 8010324:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8010326:	187b      	adds	r3, r7, r1
 8010328:	881a      	ldrh	r2, [r3, #0]
 801032a:	2380      	movs	r3, #128	@ 0x80
 801032c:	011b      	lsls	r3, r3, #4
 801032e:	4013      	ands	r3, r2
 8010330:	d037      	beq.n	80103a2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2250      	movs	r2, #80	@ 0x50
 8010338:	5a9b      	ldrh	r3, [r3, r2]
 801033a:	b29b      	uxth	r3, r3
 801033c:	001a      	movs	r2, r3
 801033e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	18d2      	adds	r2, r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	18d3      	adds	r3, r2, r3
 801034c:	4a87      	ldr	r2, [pc, #540]	@ (801056c <PCD_EP_ISR_Handler+0x344>)
 801034e:	4694      	mov	ip, r2
 8010350:	4463      	add	r3, ip
 8010352:	881b      	ldrh	r3, [r3, #0]
 8010354:	059b      	lsls	r3, r3, #22
 8010356:	0d9a      	lsrs	r2, r3, #22
 8010358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801035a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6818      	ldr	r0, [r3, #0]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	22ac      	movs	r2, #172	@ 0xac
 8010364:	0092      	lsls	r2, r2, #2
 8010366:	1899      	adds	r1, r3, r2
 8010368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801036a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801036c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801036e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010370:	b29b      	uxth	r3, r3
 8010372:	f007 f8c4 	bl	80174fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	881b      	ldrh	r3, [r3, #0]
 801037c:	b29a      	uxth	r2, r3
 801037e:	2010      	movs	r0, #16
 8010380:	183b      	adds	r3, r7, r0
 8010382:	497b      	ldr	r1, [pc, #492]	@ (8010570 <PCD_EP_ISR_Handler+0x348>)
 8010384:	400a      	ands	r2, r1
 8010386:	801a      	strh	r2, [r3, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	183a      	adds	r2, r7, r0
 801038e:	8812      	ldrh	r2, [r2, #0]
 8010390:	2180      	movs	r1, #128	@ 0x80
 8010392:	430a      	orrs	r2, r1
 8010394:	b292      	uxth	r2, r2
 8010396:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	0018      	movs	r0, r3
 801039c:	f009 f8b4 	bl	8019508 <HAL_PCD_SetupStageCallback>
 80103a0:	e334      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80103a2:	234a      	movs	r3, #74	@ 0x4a
 80103a4:	18fb      	adds	r3, r7, r3
 80103a6:	2200      	movs	r2, #0
 80103a8:	5e9b      	ldrsh	r3, [r3, r2]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	db00      	blt.n	80103b0 <PCD_EP_ISR_Handler+0x188>
 80103ae:	e32d      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	201e      	movs	r0, #30
 80103ba:	183b      	adds	r3, r7, r0
 80103bc:	496c      	ldr	r1, [pc, #432]	@ (8010570 <PCD_EP_ISR_Handler+0x348>)
 80103be:	400a      	ands	r2, r1
 80103c0:	801a      	strh	r2, [r3, #0]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	183a      	adds	r2, r7, r0
 80103c8:	8812      	ldrh	r2, [r2, #0]
 80103ca:	2180      	movs	r1, #128	@ 0x80
 80103cc:	430a      	orrs	r2, r1
 80103ce:	b292      	uxth	r2, r2
 80103d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2250      	movs	r2, #80	@ 0x50
 80103d8:	5a9b      	ldrh	r3, [r3, r2]
 80103da:	b29b      	uxth	r3, r3
 80103dc:	001a      	movs	r2, r3
 80103de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	00db      	lsls	r3, r3, #3
 80103e4:	18d2      	adds	r2, r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	18d3      	adds	r3, r2, r3
 80103ec:	4a5f      	ldr	r2, [pc, #380]	@ (801056c <PCD_EP_ISR_Handler+0x344>)
 80103ee:	4694      	mov	ip, r2
 80103f0:	4463      	add	r3, ip
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	059b      	lsls	r3, r3, #22
 80103f6:	0d9a      	lsrs	r2, r3, #22
 80103f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80103fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103fe:	69db      	ldr	r3, [r3, #28]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d01a      	beq.n	801043a <PCD_EP_ISR_Handler+0x212>
 8010404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010406:	695b      	ldr	r3, [r3, #20]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d016      	beq.n	801043a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6818      	ldr	r0, [r3, #0]
 8010410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010412:	6959      	ldr	r1, [r3, #20]
 8010414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010416:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8010418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801041a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801041c:	b29b      	uxth	r3, r3
 801041e:	f007 f86e 	bl	80174fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8010422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010424:	695a      	ldr	r2, [r3, #20]
 8010426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010428:	69db      	ldr	r3, [r3, #28]
 801042a:	18d2      	adds	r2, r2, r3
 801042c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801042e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2100      	movs	r1, #0
 8010434:	0018      	movs	r0, r3
 8010436:	f009 f87c 	bl	8019532 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	214a      	movs	r1, #74	@ 0x4a
 8010440:	187b      	adds	r3, r7, r1
 8010442:	8812      	ldrh	r2, [r2, #0]
 8010444:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8010446:	187b      	adds	r3, r7, r1
 8010448:	881a      	ldrh	r2, [r3, #0]
 801044a:	2380      	movs	r3, #128	@ 0x80
 801044c:	011b      	lsls	r3, r3, #4
 801044e:	4013      	ands	r3, r2
 8010450:	d000      	beq.n	8010454 <PCD_EP_ISR_Handler+0x22c>
 8010452:	e2db      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
 8010454:	187b      	adds	r3, r7, r1
 8010456:	881a      	ldrh	r2, [r3, #0]
 8010458:	23c0      	movs	r3, #192	@ 0xc0
 801045a:	019b      	lsls	r3, r3, #6
 801045c:	401a      	ands	r2, r3
 801045e:	23c0      	movs	r3, #192	@ 0xc0
 8010460:	019b      	lsls	r3, r3, #6
 8010462:	429a      	cmp	r2, r3
 8010464:	d100      	bne.n	8010468 <PCD_EP_ISR_Handler+0x240>
 8010466:	e2d1      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	61bb      	str	r3, [r7, #24]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2250      	movs	r2, #80	@ 0x50
 8010474:	5a9b      	ldrh	r3, [r3, r2]
 8010476:	b29b      	uxth	r3, r3
 8010478:	001a      	movs	r2, r3
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	189b      	adds	r3, r3, r2
 801047e:	61bb      	str	r3, [r7, #24]
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	4a3a      	ldr	r2, [pc, #232]	@ (801056c <PCD_EP_ISR_Handler+0x344>)
 8010484:	4694      	mov	ip, r2
 8010486:	4463      	add	r3, ip
 8010488:	617b      	str	r3, [r7, #20]
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	b29b      	uxth	r3, r3
 8010490:	059b      	lsls	r3, r3, #22
 8010492:	0d9b      	lsrs	r3, r3, #22
 8010494:	b29a      	uxth	r2, r3
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	801a      	strh	r2, [r3, #0]
 801049a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801049c:	691b      	ldr	r3, [r3, #16]
 801049e:	2b3e      	cmp	r3, #62	@ 0x3e
 80104a0:	d91a      	bls.n	80104d8 <PCD_EP_ISR_Handler+0x2b0>
 80104a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104a4:	691b      	ldr	r3, [r3, #16]
 80104a6:	095b      	lsrs	r3, r3, #5
 80104a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80104aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	221f      	movs	r2, #31
 80104b0:	4013      	ands	r3, r2
 80104b2:	d102      	bne.n	80104ba <PCD_EP_ISR_Handler+0x292>
 80104b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104b6:	3b01      	subs	r3, #1
 80104b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	b29a      	uxth	r2, r3
 80104c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	029b      	lsls	r3, r3, #10
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	4313      	orrs	r3, r2
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	4a25      	ldr	r2, [pc, #148]	@ (8010564 <PCD_EP_ISR_Handler+0x33c>)
 80104ce:	4313      	orrs	r3, r2
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	801a      	strh	r2, [r3, #0]
 80104d6:	e023      	b.n	8010520 <PCD_EP_ISR_Handler+0x2f8>
 80104d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104da:	691b      	ldr	r3, [r3, #16]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d108      	bne.n	80104f2 <PCD_EP_ISR_Handler+0x2ca>
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	881b      	ldrh	r3, [r3, #0]
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	4a1f      	ldr	r2, [pc, #124]	@ (8010564 <PCD_EP_ISR_Handler+0x33c>)
 80104e8:	4313      	orrs	r3, r2
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	801a      	strh	r2, [r3, #0]
 80104f0:	e016      	b.n	8010520 <PCD_EP_ISR_Handler+0x2f8>
 80104f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	085b      	lsrs	r3, r3, #1
 80104f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80104fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104fc:	691b      	ldr	r3, [r3, #16]
 80104fe:	2201      	movs	r2, #1
 8010500:	4013      	ands	r3, r2
 8010502:	d002      	beq.n	801050a <PCD_EP_ISR_Handler+0x2e2>
 8010504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010506:	3301      	adds	r3, #1
 8010508:	647b      	str	r3, [r7, #68]	@ 0x44
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	881b      	ldrh	r3, [r3, #0]
 801050e:	b29a      	uxth	r2, r3
 8010510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010512:	b29b      	uxth	r3, r3
 8010514:	029b      	lsls	r3, r3, #10
 8010516:	b29b      	uxth	r3, r3
 8010518:	4313      	orrs	r3, r2
 801051a:	b29a      	uxth	r2, r3
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	881b      	ldrh	r3, [r3, #0]
 8010526:	b29a      	uxth	r2, r3
 8010528:	2012      	movs	r0, #18
 801052a:	183b      	adds	r3, r7, r0
 801052c:	4911      	ldr	r1, [pc, #68]	@ (8010574 <PCD_EP_ISR_Handler+0x34c>)
 801052e:	400a      	ands	r2, r1
 8010530:	801a      	strh	r2, [r3, #0]
 8010532:	183b      	adds	r3, r7, r0
 8010534:	183a      	adds	r2, r7, r0
 8010536:	8812      	ldrh	r2, [r2, #0]
 8010538:	2180      	movs	r1, #128	@ 0x80
 801053a:	0149      	lsls	r1, r1, #5
 801053c:	404a      	eors	r2, r1
 801053e:	801a      	strh	r2, [r3, #0]
 8010540:	183b      	adds	r3, r7, r0
 8010542:	183a      	adds	r2, r7, r0
 8010544:	8812      	ldrh	r2, [r2, #0]
 8010546:	2180      	movs	r1, #128	@ 0x80
 8010548:	0189      	lsls	r1, r1, #6
 801054a:	404a      	eors	r2, r1
 801054c:	801a      	strh	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	183a      	adds	r2, r7, r0
 8010554:	8812      	ldrh	r2, [r2, #0]
 8010556:	4908      	ldr	r1, [pc, #32]	@ (8010578 <PCD_EP_ISR_Handler+0x350>)
 8010558:	430a      	orrs	r2, r1
 801055a:	b292      	uxth	r2, r2
 801055c:	801a      	strh	r2, [r3, #0]
 801055e:	e255      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
 8010560:	ffff8f0f 	.word	0xffff8f0f
 8010564:	ffff8000 	.word	0xffff8000
 8010568:	00000402 	.word	0x00000402
 801056c:	00000406 	.word	0x00000406
 8010570:	00000f8f 	.word	0x00000f8f
 8010574:	ffffbf8f 	.word	0xffffbf8f
 8010578:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	001a      	movs	r2, r3
 8010582:	204d      	movs	r0, #77	@ 0x4d
 8010584:	183b      	adds	r3, r7, r0
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	009b      	lsls	r3, r3, #2
 801058a:	18d2      	adds	r2, r2, r3
 801058c:	214a      	movs	r1, #74	@ 0x4a
 801058e:	187b      	adds	r3, r7, r1
 8010590:	8812      	ldrh	r2, [r2, #0]
 8010592:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8010594:	187b      	adds	r3, r7, r1
 8010596:	2200      	movs	r2, #0
 8010598:	5e9b      	ldrsh	r3, [r3, r2]
 801059a:	2b00      	cmp	r3, #0
 801059c:	db00      	blt.n	80105a0 <PCD_EP_ISR_Handler+0x378>
 801059e:	e0fa      	b.n	8010796 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	001a      	movs	r2, r3
 80105a6:	183b      	adds	r3, r7, r0
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	18d3      	adds	r3, r2, r3
 80105ae:	881b      	ldrh	r3, [r3, #0]
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	2448      	movs	r4, #72	@ 0x48
 80105b4:	193b      	adds	r3, r7, r4
 80105b6:	49d1      	ldr	r1, [pc, #836]	@ (80108fc <PCD_EP_ISR_Handler+0x6d4>)
 80105b8:	400a      	ands	r2, r1
 80105ba:	801a      	strh	r2, [r3, #0]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	001a      	movs	r2, r3
 80105c2:	183b      	adds	r3, r7, r0
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	18d3      	adds	r3, r2, r3
 80105ca:	193a      	adds	r2, r7, r4
 80105cc:	8812      	ldrh	r2, [r2, #0]
 80105ce:	2180      	movs	r1, #128	@ 0x80
 80105d0:	430a      	orrs	r2, r1
 80105d2:	b292      	uxth	r2, r2
 80105d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80105d6:	183b      	adds	r3, r7, r0
 80105d8:	781a      	ldrb	r2, [r3, #0]
 80105da:	0013      	movs	r3, r2
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	189b      	adds	r3, r3, r2
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	3369      	adds	r3, #105	@ 0x69
 80105e4:	33ff      	adds	r3, #255	@ 0xff
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	18d3      	adds	r3, r2, r3
 80105ea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80105ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105ee:	7b1b      	ldrb	r3, [r3, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d125      	bne.n	8010640 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2250      	movs	r2, #80	@ 0x50
 80105fa:	5a9b      	ldrh	r3, [r3, r2]
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	001a      	movs	r2, r3
 8010600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	00db      	lsls	r3, r3, #3
 8010606:	18d2      	adds	r2, r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	18d3      	adds	r3, r2, r3
 801060e:	4abc      	ldr	r2, [pc, #752]	@ (8010900 <PCD_EP_ISR_Handler+0x6d8>)
 8010610:	4694      	mov	ip, r2
 8010612:	4463      	add	r3, ip
 8010614:	881a      	ldrh	r2, [r3, #0]
 8010616:	2450      	movs	r4, #80	@ 0x50
 8010618:	193b      	adds	r3, r7, r4
 801061a:	0592      	lsls	r2, r2, #22
 801061c:	0d92      	lsrs	r2, r2, #22
 801061e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8010620:	193b      	adds	r3, r7, r4
 8010622:	881b      	ldrh	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d100      	bne.n	801062a <PCD_EP_ISR_Handler+0x402>
 8010628:	e08d      	b.n	8010746 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6818      	ldr	r0, [r3, #0]
 801062e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010630:	6959      	ldr	r1, [r3, #20]
 8010632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010634:	88da      	ldrh	r2, [r3, #6]
 8010636:	193b      	adds	r3, r7, r4
 8010638:	881b      	ldrh	r3, [r3, #0]
 801063a:	f006 ff60 	bl	80174fe <USB_ReadPMA>
 801063e:	e082      	b.n	8010746 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8010640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010642:	78db      	ldrb	r3, [r3, #3]
 8010644:	2b02      	cmp	r3, #2
 8010646:	d10c      	bne.n	8010662 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8010648:	2350      	movs	r3, #80	@ 0x50
 801064a:	18fc      	adds	r4, r7, r3
 801064c:	234a      	movs	r3, #74	@ 0x4a
 801064e:	18fb      	adds	r3, r7, r3
 8010650:	881a      	ldrh	r2, [r3, #0]
 8010652:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	0018      	movs	r0, r3
 8010658:	f000 f9ec 	bl	8010a34 <HAL_PCD_EP_DB_Receive>
 801065c:	0003      	movs	r3, r0
 801065e:	8023      	strh	r3, [r4, #0]
 8010660:	e071      	b.n	8010746 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	001a      	movs	r2, r3
 8010668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	18d3      	adds	r3, r2, r3
 8010670:	881b      	ldrh	r3, [r3, #0]
 8010672:	b29a      	uxth	r2, r3
 8010674:	2052      	movs	r0, #82	@ 0x52
 8010676:	183b      	adds	r3, r7, r0
 8010678:	49a2      	ldr	r1, [pc, #648]	@ (8010904 <PCD_EP_ISR_Handler+0x6dc>)
 801067a:	400a      	ands	r2, r1
 801067c:	801a      	strh	r2, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	001a      	movs	r2, r3
 8010684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	18d3      	adds	r3, r2, r3
 801068c:	183a      	adds	r2, r7, r0
 801068e:	8812      	ldrh	r2, [r2, #0]
 8010690:	499d      	ldr	r1, [pc, #628]	@ (8010908 <PCD_EP_ISR_Handler+0x6e0>)
 8010692:	430a      	orrs	r2, r1
 8010694:	b292      	uxth	r2, r2
 8010696:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	001a      	movs	r2, r3
 801069e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	009b      	lsls	r3, r3, #2
 80106a4:	18d3      	adds	r3, r2, r3
 80106a6:	881b      	ldrh	r3, [r3, #0]
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	001a      	movs	r2, r3
 80106ac:	2380      	movs	r3, #128	@ 0x80
 80106ae:	01db      	lsls	r3, r3, #7
 80106b0:	4013      	ands	r3, r2
 80106b2:	d024      	beq.n	80106fe <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2250      	movs	r2, #80	@ 0x50
 80106ba:	5a9b      	ldrh	r3, [r3, r2]
 80106bc:	b29b      	uxth	r3, r3
 80106be:	001a      	movs	r2, r3
 80106c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	00db      	lsls	r3, r3, #3
 80106c6:	18d2      	adds	r2, r2, r3
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	18d3      	adds	r3, r2, r3
 80106ce:	4a8f      	ldr	r2, [pc, #572]	@ (801090c <PCD_EP_ISR_Handler+0x6e4>)
 80106d0:	4694      	mov	ip, r2
 80106d2:	4463      	add	r3, ip
 80106d4:	881a      	ldrh	r2, [r3, #0]
 80106d6:	2450      	movs	r4, #80	@ 0x50
 80106d8:	193b      	adds	r3, r7, r4
 80106da:	0592      	lsls	r2, r2, #22
 80106dc:	0d92      	lsrs	r2, r2, #22
 80106de:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80106e0:	193b      	adds	r3, r7, r4
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d02e      	beq.n	8010746 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6818      	ldr	r0, [r3, #0]
 80106ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106ee:	6959      	ldr	r1, [r3, #20]
 80106f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106f2:	891a      	ldrh	r2, [r3, #8]
 80106f4:	193b      	adds	r3, r7, r4
 80106f6:	881b      	ldrh	r3, [r3, #0]
 80106f8:	f006 ff01 	bl	80174fe <USB_ReadPMA>
 80106fc:	e023      	b.n	8010746 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2250      	movs	r2, #80	@ 0x50
 8010704:	5a9b      	ldrh	r3, [r3, r2]
 8010706:	b29b      	uxth	r3, r3
 8010708:	001a      	movs	r2, r3
 801070a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	00db      	lsls	r3, r3, #3
 8010710:	18d2      	adds	r2, r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	18d3      	adds	r3, r2, r3
 8010718:	4a79      	ldr	r2, [pc, #484]	@ (8010900 <PCD_EP_ISR_Handler+0x6d8>)
 801071a:	4694      	mov	ip, r2
 801071c:	4463      	add	r3, ip
 801071e:	881a      	ldrh	r2, [r3, #0]
 8010720:	2450      	movs	r4, #80	@ 0x50
 8010722:	193b      	adds	r3, r7, r4
 8010724:	0592      	lsls	r2, r2, #22
 8010726:	0d92      	lsrs	r2, r2, #22
 8010728:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801072a:	193b      	adds	r3, r7, r4
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d009      	beq.n	8010746 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6818      	ldr	r0, [r3, #0]
 8010736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010738:	6959      	ldr	r1, [r3, #20]
 801073a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801073c:	895a      	ldrh	r2, [r3, #10]
 801073e:	193b      	adds	r3, r7, r4
 8010740:	881b      	ldrh	r3, [r3, #0]
 8010742:	f006 fedc 	bl	80174fe <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8010746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010748:	69da      	ldr	r2, [r3, #28]
 801074a:	2150      	movs	r1, #80	@ 0x50
 801074c:	187b      	adds	r3, r7, r1
 801074e:	881b      	ldrh	r3, [r3, #0]
 8010750:	18d2      	adds	r2, r2, r3
 8010752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010754:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8010756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010758:	695a      	ldr	r2, [r3, #20]
 801075a:	187b      	adds	r3, r7, r1
 801075c:	881b      	ldrh	r3, [r3, #0]
 801075e:	18d2      	adds	r2, r2, r3
 8010760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010762:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8010764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010766:	699b      	ldr	r3, [r3, #24]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d005      	beq.n	8010778 <PCD_EP_ISR_Handler+0x550>
 801076c:	187b      	adds	r3, r7, r1
 801076e:	881a      	ldrh	r2, [r3, #0]
 8010770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010772:	691b      	ldr	r3, [r3, #16]
 8010774:	429a      	cmp	r2, r3
 8010776:	d207      	bcs.n	8010788 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8010778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801077a:	781a      	ldrb	r2, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	0011      	movs	r1, r2
 8010780:	0018      	movs	r0, r3
 8010782:	f008 fed6 	bl	8019532 <HAL_PCD_DataOutStageCallback>
 8010786:	e006      	b.n	8010796 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801078e:	0011      	movs	r1, r2
 8010790:	0018      	movs	r0, r3
 8010792:	f005 fbf9 	bl	8015f88 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8010796:	244a      	movs	r4, #74	@ 0x4a
 8010798:	193b      	adds	r3, r7, r4
 801079a:	881b      	ldrh	r3, [r3, #0]
 801079c:	2280      	movs	r2, #128	@ 0x80
 801079e:	4013      	ands	r3, r2
 80107a0:	d100      	bne.n	80107a4 <PCD_EP_ISR_Handler+0x57c>
 80107a2:	e133      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80107a4:	204d      	movs	r0, #77	@ 0x4d
 80107a6:	183b      	adds	r3, r7, r0
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	0013      	movs	r3, r2
 80107ae:	009b      	lsls	r3, r3, #2
 80107b0:	189b      	adds	r3, r3, r2
 80107b2:	00db      	lsls	r3, r3, #3
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	18d3      	adds	r3, r2, r3
 80107b8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	001a      	movs	r2, r3
 80107c0:	183b      	adds	r3, r7, r0
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	18d3      	adds	r3, r2, r3
 80107c8:	881b      	ldrh	r3, [r3, #0]
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	2542      	movs	r5, #66	@ 0x42
 80107ce:	197b      	adds	r3, r7, r5
 80107d0:	494f      	ldr	r1, [pc, #316]	@ (8010910 <PCD_EP_ISR_Handler+0x6e8>)
 80107d2:	400a      	ands	r2, r1
 80107d4:	801a      	strh	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	001a      	movs	r2, r3
 80107dc:	183b      	adds	r3, r7, r0
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	18d3      	adds	r3, r2, r3
 80107e4:	197a      	adds	r2, r7, r5
 80107e6:	8812      	ldrh	r2, [r2, #0]
 80107e8:	494a      	ldr	r1, [pc, #296]	@ (8010914 <PCD_EP_ISR_Handler+0x6ec>)
 80107ea:	430a      	orrs	r2, r1
 80107ec:	b292      	uxth	r2, r2
 80107ee:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80107f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107f2:	78db      	ldrb	r3, [r3, #3]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d000      	beq.n	80107fa <PCD_EP_ISR_Handler+0x5d2>
 80107f8:	e0af      	b.n	801095a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80107fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107fc:	2200      	movs	r2, #0
 80107fe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8010800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010802:	7b1b      	ldrb	r3, [r3, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d100      	bne.n	801080a <PCD_EP_ISR_Handler+0x5e2>
 8010808:	e09f      	b.n	801094a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801080a:	193b      	adds	r3, r7, r4
 801080c:	881b      	ldrh	r3, [r3, #0]
 801080e:	2240      	movs	r2, #64	@ 0x40
 8010810:	4013      	ands	r3, r2
 8010812:	d046      	beq.n	80108a2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010816:	785b      	ldrb	r3, [r3, #1]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d125      	bne.n	8010868 <PCD_EP_ISR_Handler+0x640>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	627b      	str	r3, [r7, #36]	@ 0x24
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	2250      	movs	r2, #80	@ 0x50
 8010828:	5a9b      	ldrh	r3, [r3, r2]
 801082a:	b29b      	uxth	r3, r3
 801082c:	001a      	movs	r2, r3
 801082e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010830:	189b      	adds	r3, r3, r2
 8010832:	627b      	str	r3, [r7, #36]	@ 0x24
 8010834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	00da      	lsls	r2, r3, #3
 801083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083c:	18d3      	adds	r3, r2, r3
 801083e:	4a33      	ldr	r2, [pc, #204]	@ (801090c <PCD_EP_ISR_Handler+0x6e4>)
 8010840:	4694      	mov	ip, r2
 8010842:	4463      	add	r3, ip
 8010844:	623b      	str	r3, [r7, #32]
 8010846:	6a3b      	ldr	r3, [r7, #32]
 8010848:	881b      	ldrh	r3, [r3, #0]
 801084a:	b29b      	uxth	r3, r3
 801084c:	059b      	lsls	r3, r3, #22
 801084e:	0d9b      	lsrs	r3, r3, #22
 8010850:	b29a      	uxth	r2, r3
 8010852:	6a3b      	ldr	r3, [r7, #32]
 8010854:	801a      	strh	r2, [r3, #0]
 8010856:	6a3b      	ldr	r3, [r7, #32]
 8010858:	881b      	ldrh	r3, [r3, #0]
 801085a:	b29b      	uxth	r3, r3
 801085c:	4a2d      	ldr	r2, [pc, #180]	@ (8010914 <PCD_EP_ISR_Handler+0x6ec>)
 801085e:	4313      	orrs	r3, r2
 8010860:	b29a      	uxth	r2, r3
 8010862:	6a3b      	ldr	r3, [r7, #32]
 8010864:	801a      	strh	r2, [r3, #0]
 8010866:	e070      	b.n	801094a <PCD_EP_ISR_Handler+0x722>
 8010868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801086a:	785b      	ldrb	r3, [r3, #1]
 801086c:	2b01      	cmp	r3, #1
 801086e:	d16c      	bne.n	801094a <PCD_EP_ISR_Handler+0x722>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2250      	movs	r2, #80	@ 0x50
 801087c:	5a9b      	ldrh	r3, [r3, r2]
 801087e:	b29b      	uxth	r3, r3
 8010880:	001a      	movs	r2, r3
 8010882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010884:	189b      	adds	r3, r3, r2
 8010886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	00da      	lsls	r2, r3, #3
 801088e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010890:	18d3      	adds	r3, r2, r3
 8010892:	4a1e      	ldr	r2, [pc, #120]	@ (801090c <PCD_EP_ISR_Handler+0x6e4>)
 8010894:	4694      	mov	ip, r2
 8010896:	4463      	add	r3, ip
 8010898:	62bb      	str	r3, [r7, #40]	@ 0x28
 801089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801089c:	2200      	movs	r2, #0
 801089e:	801a      	strh	r2, [r3, #0]
 80108a0:	e053      	b.n	801094a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80108a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108aa:	785b      	ldrb	r3, [r3, #1]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d133      	bne.n	8010918 <PCD_EP_ISR_Handler+0x6f0>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2250      	movs	r2, #80	@ 0x50
 80108bc:	5a9b      	ldrh	r3, [r3, r2]
 80108be:	b29b      	uxth	r3, r3
 80108c0:	001a      	movs	r2, r3
 80108c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108c4:	189b      	adds	r3, r3, r2
 80108c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80108c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	00da      	lsls	r2, r3, #3
 80108ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108d0:	18d3      	adds	r3, r2, r3
 80108d2:	4a0b      	ldr	r2, [pc, #44]	@ (8010900 <PCD_EP_ISR_Handler+0x6d8>)
 80108d4:	4694      	mov	ip, r2
 80108d6:	4463      	add	r3, ip
 80108d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80108da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	059b      	lsls	r3, r3, #22
 80108e2:	0d9b      	lsrs	r3, r3, #22
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e8:	801a      	strh	r2, [r3, #0]
 80108ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ec:	881b      	ldrh	r3, [r3, #0]
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	4a08      	ldr	r2, [pc, #32]	@ (8010914 <PCD_EP_ISR_Handler+0x6ec>)
 80108f2:	4313      	orrs	r3, r2
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f8:	801a      	strh	r2, [r3, #0]
 80108fa:	e026      	b.n	801094a <PCD_EP_ISR_Handler+0x722>
 80108fc:	00000f8f 	.word	0x00000f8f
 8010900:	00000406 	.word	0x00000406
 8010904:	ffff8f8f 	.word	0xffff8f8f
 8010908:	ffff80c0 	.word	0xffff80c0
 801090c:	00000402 	.word	0x00000402
 8010910:	ffff8f0f 	.word	0xffff8f0f
 8010914:	ffff8000 	.word	0xffff8000
 8010918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801091a:	785b      	ldrb	r3, [r3, #1]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d114      	bne.n	801094a <PCD_EP_ISR_Handler+0x722>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2250      	movs	r2, #80	@ 0x50
 8010926:	5a9b      	ldrh	r3, [r3, r2]
 8010928:	b29b      	uxth	r3, r3
 801092a:	001a      	movs	r2, r3
 801092c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801092e:	189b      	adds	r3, r3, r2
 8010930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	00da      	lsls	r2, r3, #3
 8010938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801093a:	18d3      	adds	r3, r2, r3
 801093c:	4a3b      	ldr	r2, [pc, #236]	@ (8010a2c <PCD_EP_ISR_Handler+0x804>)
 801093e:	4694      	mov	ip, r2
 8010940:	4463      	add	r3, ip
 8010942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010946:	2200      	movs	r2, #0
 8010948:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801094a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801094c:	781a      	ldrb	r2, [r3, #0]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	0011      	movs	r1, r2
 8010952:	0018      	movs	r0, r3
 8010954:	f008 fe0e 	bl	8019574 <HAL_PCD_DataInStageCallback>
 8010958:	e058      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801095a:	234a      	movs	r3, #74	@ 0x4a
 801095c:	18fb      	adds	r3, r7, r3
 801095e:	881a      	ldrh	r2, [r3, #0]
 8010960:	2380      	movs	r3, #128	@ 0x80
 8010962:	005b      	lsls	r3, r3, #1
 8010964:	4013      	ands	r3, r2
 8010966:	d149      	bne.n	80109fc <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2250      	movs	r2, #80	@ 0x50
 801096e:	5a9b      	ldrh	r3, [r3, r2]
 8010970:	b29b      	uxth	r3, r3
 8010972:	001a      	movs	r2, r3
 8010974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	00db      	lsls	r3, r3, #3
 801097a:	18d2      	adds	r2, r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	18d3      	adds	r3, r2, r3
 8010982:	4a2b      	ldr	r2, [pc, #172]	@ (8010a30 <PCD_EP_ISR_Handler+0x808>)
 8010984:	4694      	mov	ip, r2
 8010986:	4463      	add	r3, ip
 8010988:	881a      	ldrh	r2, [r3, #0]
 801098a:	2140      	movs	r1, #64	@ 0x40
 801098c:	187b      	adds	r3, r7, r1
 801098e:	0592      	lsls	r2, r2, #22
 8010990:	0d92      	lsrs	r2, r2, #22
 8010992:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8010994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010996:	699a      	ldr	r2, [r3, #24]
 8010998:	187b      	adds	r3, r7, r1
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	429a      	cmp	r2, r3
 801099e:	d907      	bls.n	80109b0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80109a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109a2:	699a      	ldr	r2, [r3, #24]
 80109a4:	187b      	adds	r3, r7, r1
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	1ad2      	subs	r2, r2, r3
 80109aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109ac:	619a      	str	r2, [r3, #24]
 80109ae:	e002      	b.n	80109b6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80109b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109b2:	2200      	movs	r2, #0
 80109b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80109b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109b8:	699b      	ldr	r3, [r3, #24]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d107      	bne.n	80109ce <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80109be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109c0:	781a      	ldrb	r2, [r3, #0]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	0011      	movs	r1, r2
 80109c6:	0018      	movs	r0, r3
 80109c8:	f008 fdd4 	bl	8019574 <HAL_PCD_DataInStageCallback>
 80109cc:	e01e      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80109ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109d0:	695a      	ldr	r2, [r3, #20]
 80109d2:	2140      	movs	r1, #64	@ 0x40
 80109d4:	187b      	adds	r3, r7, r1
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	18d2      	adds	r2, r2, r3
 80109da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109dc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80109de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109e0:	69da      	ldr	r2, [r3, #28]
 80109e2:	187b      	adds	r3, r7, r1
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	18d2      	adds	r2, r2, r3
 80109e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109ea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80109f2:	0011      	movs	r1, r2
 80109f4:	0018      	movs	r0, r3
 80109f6:	f005 fac7 	bl	8015f88 <USB_EPStartXfer>
 80109fa:	e007      	b.n	8010a0c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80109fc:	234a      	movs	r3, #74	@ 0x4a
 80109fe:	18fb      	adds	r3, r7, r3
 8010a00:	881a      	ldrh	r2, [r3, #0]
 8010a02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	0018      	movs	r0, r3
 8010a08:	f000 f930 	bl	8010c6c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	2244      	movs	r2, #68	@ 0x44
 8010a12:	5a9b      	ldrh	r3, [r3, r2]
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	b21b      	sxth	r3, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	da01      	bge.n	8010a20 <PCD_EP_ISR_Handler+0x7f8>
 8010a1c:	f7ff fc0a 	bl	8010234 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	0018      	movs	r0, r3
 8010a24:	46bd      	mov	sp, r7
 8010a26:	b016      	add	sp, #88	@ 0x58
 8010a28:	bdb0      	pop	{r4, r5, r7, pc}
 8010a2a:	46c0      	nop			@ (mov r8, r8)
 8010a2c:	00000406 	.word	0x00000406
 8010a30:	00000402 	.word	0x00000402

08010a34 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010a34:	b590      	push	{r4, r7, lr}
 8010a36:	b089      	sub	sp, #36	@ 0x24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	1dbb      	adds	r3, r7, #6
 8010a40:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010a42:	1dbb      	adds	r3, r7, #6
 8010a44:	881a      	ldrh	r2, [r3, #0]
 8010a46:	2380      	movs	r3, #128	@ 0x80
 8010a48:	01db      	lsls	r3, r3, #7
 8010a4a:	4013      	ands	r3, r2
 8010a4c:	d100      	bne.n	8010a50 <HAL_PCD_EP_DB_Receive+0x1c>
 8010a4e:	e07d      	b.n	8010b4c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	2250      	movs	r2, #80	@ 0x50
 8010a56:	5a9b      	ldrh	r3, [r3, r2]
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	001a      	movs	r2, r3
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	00db      	lsls	r3, r3, #3
 8010a62:	18d2      	adds	r2, r2, r3
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	18d3      	adds	r3, r2, r3
 8010a6a:	4a7a      	ldr	r2, [pc, #488]	@ (8010c54 <HAL_PCD_EP_DB_Receive+0x220>)
 8010a6c:	4694      	mov	ip, r2
 8010a6e:	4463      	add	r3, ip
 8010a70:	881a      	ldrh	r2, [r3, #0]
 8010a72:	211a      	movs	r1, #26
 8010a74:	187b      	adds	r3, r7, r1
 8010a76:	0592      	lsls	r2, r2, #22
 8010a78:	0d92      	lsrs	r2, r2, #22
 8010a7a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	699a      	ldr	r2, [r3, #24]
 8010a80:	187b      	adds	r3, r7, r1
 8010a82:	881b      	ldrh	r3, [r3, #0]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d307      	bcc.n	8010a98 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	699a      	ldr	r2, [r3, #24]
 8010a8c:	187b      	adds	r3, r7, r1
 8010a8e:	881b      	ldrh	r3, [r3, #0]
 8010a90:	1ad2      	subs	r2, r2, r3
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	619a      	str	r2, [r3, #24]
 8010a96:	e002      	b.n	8010a9e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	699b      	ldr	r3, [r3, #24]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d121      	bne.n	8010aea <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	001a      	movs	r2, r3
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	18d3      	adds	r3, r2, r3
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	2018      	movs	r0, #24
 8010aba:	183b      	adds	r3, r7, r0
 8010abc:	4966      	ldr	r1, [pc, #408]	@ (8010c58 <HAL_PCD_EP_DB_Receive+0x224>)
 8010abe:	400a      	ands	r2, r1
 8010ac0:	801a      	strh	r2, [r3, #0]
 8010ac2:	183b      	adds	r3, r7, r0
 8010ac4:	183a      	adds	r2, r7, r0
 8010ac6:	8812      	ldrh	r2, [r2, #0]
 8010ac8:	2180      	movs	r1, #128	@ 0x80
 8010aca:	0189      	lsls	r1, r1, #6
 8010acc:	404a      	eors	r2, r1
 8010ace:	801a      	strh	r2, [r3, #0]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	001a      	movs	r2, r3
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	18d3      	adds	r3, r2, r3
 8010ade:	183a      	adds	r2, r7, r0
 8010ae0:	8812      	ldrh	r2, [r2, #0]
 8010ae2:	495e      	ldr	r1, [pc, #376]	@ (8010c5c <HAL_PCD_EP_DB_Receive+0x228>)
 8010ae4:	430a      	orrs	r2, r1
 8010ae6:	b292      	uxth	r2, r2
 8010ae8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010aea:	1dbb      	adds	r3, r7, #6
 8010aec:	881b      	ldrh	r3, [r3, #0]
 8010aee:	2240      	movs	r2, #64	@ 0x40
 8010af0:	4013      	ands	r3, r2
 8010af2:	d01a      	beq.n	8010b2a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	001a      	movs	r2, r3
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	18d3      	adds	r3, r2, r3
 8010b02:	881b      	ldrh	r3, [r3, #0]
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	2016      	movs	r0, #22
 8010b08:	183b      	adds	r3, r7, r0
 8010b0a:	4955      	ldr	r1, [pc, #340]	@ (8010c60 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010b0c:	400a      	ands	r2, r1
 8010b0e:	801a      	strh	r2, [r3, #0]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	001a      	movs	r2, r3
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	18d3      	adds	r3, r2, r3
 8010b1e:	183a      	adds	r2, r7, r0
 8010b20:	8812      	ldrh	r2, [r2, #0]
 8010b22:	4950      	ldr	r1, [pc, #320]	@ (8010c64 <HAL_PCD_EP_DB_Receive+0x230>)
 8010b24:	430a      	orrs	r2, r1
 8010b26:	b292      	uxth	r2, r2
 8010b28:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010b2a:	241a      	movs	r4, #26
 8010b2c:	193b      	adds	r3, r7, r4
 8010b2e:	881b      	ldrh	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d100      	bne.n	8010b36 <HAL_PCD_EP_DB_Receive+0x102>
 8010b34:	e086      	b.n	8010c44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	6818      	ldr	r0, [r3, #0]
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	6959      	ldr	r1, [r3, #20]
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	891a      	ldrh	r2, [r3, #8]
 8010b42:	193b      	adds	r3, r7, r4
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	f006 fcda 	bl	80174fe <USB_ReadPMA>
 8010b4a:	e07b      	b.n	8010c44 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2250      	movs	r2, #80	@ 0x50
 8010b52:	5a9b      	ldrh	r3, [r3, r2]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	001a      	movs	r2, r3
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	18d2      	adds	r2, r2, r3
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	18d3      	adds	r3, r2, r3
 8010b66:	4a40      	ldr	r2, [pc, #256]	@ (8010c68 <HAL_PCD_EP_DB_Receive+0x234>)
 8010b68:	4694      	mov	ip, r2
 8010b6a:	4463      	add	r3, ip
 8010b6c:	881a      	ldrh	r2, [r3, #0]
 8010b6e:	211a      	movs	r1, #26
 8010b70:	187b      	adds	r3, r7, r1
 8010b72:	0592      	lsls	r2, r2, #22
 8010b74:	0d92      	lsrs	r2, r2, #22
 8010b76:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	699a      	ldr	r2, [r3, #24]
 8010b7c:	187b      	adds	r3, r7, r1
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d307      	bcc.n	8010b94 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	699a      	ldr	r2, [r3, #24]
 8010b88:	187b      	adds	r3, r7, r1
 8010b8a:	881b      	ldrh	r3, [r3, #0]
 8010b8c:	1ad2      	subs	r2, r2, r3
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	619a      	str	r2, [r3, #24]
 8010b92:	e002      	b.n	8010b9a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2200      	movs	r2, #0
 8010b98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	699b      	ldr	r3, [r3, #24]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d121      	bne.n	8010be6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	001a      	movs	r2, r3
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	009b      	lsls	r3, r3, #2
 8010bae:	18d3      	adds	r3, r2, r3
 8010bb0:	881b      	ldrh	r3, [r3, #0]
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	201e      	movs	r0, #30
 8010bb6:	183b      	adds	r3, r7, r0
 8010bb8:	4927      	ldr	r1, [pc, #156]	@ (8010c58 <HAL_PCD_EP_DB_Receive+0x224>)
 8010bba:	400a      	ands	r2, r1
 8010bbc:	801a      	strh	r2, [r3, #0]
 8010bbe:	183b      	adds	r3, r7, r0
 8010bc0:	183a      	adds	r2, r7, r0
 8010bc2:	8812      	ldrh	r2, [r2, #0]
 8010bc4:	2180      	movs	r1, #128	@ 0x80
 8010bc6:	0189      	lsls	r1, r1, #6
 8010bc8:	404a      	eors	r2, r1
 8010bca:	801a      	strh	r2, [r3, #0]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	001a      	movs	r2, r3
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	18d3      	adds	r3, r2, r3
 8010bda:	183a      	adds	r2, r7, r0
 8010bdc:	8812      	ldrh	r2, [r2, #0]
 8010bde:	491f      	ldr	r1, [pc, #124]	@ (8010c5c <HAL_PCD_EP_DB_Receive+0x228>)
 8010be0:	430a      	orrs	r2, r1
 8010be2:	b292      	uxth	r2, r2
 8010be4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8010be6:	1dbb      	adds	r3, r7, #6
 8010be8:	881b      	ldrh	r3, [r3, #0]
 8010bea:	2240      	movs	r2, #64	@ 0x40
 8010bec:	4013      	ands	r3, r2
 8010bee:	d11a      	bne.n	8010c26 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	001a      	movs	r2, r3
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	18d3      	adds	r3, r2, r3
 8010bfe:	881b      	ldrh	r3, [r3, #0]
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	201c      	movs	r0, #28
 8010c04:	183b      	adds	r3, r7, r0
 8010c06:	4916      	ldr	r1, [pc, #88]	@ (8010c60 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010c08:	400a      	ands	r2, r1
 8010c0a:	801a      	strh	r2, [r3, #0]
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	001a      	movs	r2, r3
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	18d3      	adds	r3, r2, r3
 8010c1a:	183a      	adds	r2, r7, r0
 8010c1c:	8812      	ldrh	r2, [r2, #0]
 8010c1e:	4911      	ldr	r1, [pc, #68]	@ (8010c64 <HAL_PCD_EP_DB_Receive+0x230>)
 8010c20:	430a      	orrs	r2, r1
 8010c22:	b292      	uxth	r2, r2
 8010c24:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010c26:	241a      	movs	r4, #26
 8010c28:	193b      	adds	r3, r7, r4
 8010c2a:	881b      	ldrh	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d009      	beq.n	8010c44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	6818      	ldr	r0, [r3, #0]
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	6959      	ldr	r1, [r3, #20]
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	895a      	ldrh	r2, [r3, #10]
 8010c3c:	193b      	adds	r3, r7, r4
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	f006 fc5d 	bl	80174fe <USB_ReadPMA>
    }
  }

  return count;
 8010c44:	231a      	movs	r3, #26
 8010c46:	18fb      	adds	r3, r7, r3
 8010c48:	881b      	ldrh	r3, [r3, #0]
}
 8010c4a:	0018      	movs	r0, r3
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	b009      	add	sp, #36	@ 0x24
 8010c50:	bd90      	pop	{r4, r7, pc}
 8010c52:	46c0      	nop			@ (mov r8, r8)
 8010c54:	00000402 	.word	0x00000402
 8010c58:	ffffbf8f 	.word	0xffffbf8f
 8010c5c:	ffff8080 	.word	0xffff8080
 8010c60:	ffff8f8f 	.word	0xffff8f8f
 8010c64:	ffff80c0 	.word	0xffff80c0
 8010c68:	00000406 	.word	0x00000406

08010c6c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b0a4      	sub	sp, #144	@ 0x90
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	1dbb      	adds	r3, r7, #6
 8010c78:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010c7a:	1dbb      	adds	r3, r7, #6
 8010c7c:	881b      	ldrh	r3, [r3, #0]
 8010c7e:	2240      	movs	r2, #64	@ 0x40
 8010c80:	4013      	ands	r3, r2
 8010c82:	d100      	bne.n	8010c86 <HAL_PCD_EP_DB_Transmit+0x1a>
 8010c84:	e1e4      	b.n	8011050 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	2250      	movs	r2, #80	@ 0x50
 8010c8c:	5a9b      	ldrh	r3, [r3, r2]
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	001a      	movs	r2, r3
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	00db      	lsls	r3, r3, #3
 8010c98:	18d2      	adds	r2, r2, r3
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	18d3      	adds	r3, r2, r3
 8010ca0:	4ad0      	ldr	r2, [pc, #832]	@ (8010fe4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010ca2:	4694      	mov	ip, r2
 8010ca4:	4463      	add	r3, ip
 8010ca6:	881a      	ldrh	r2, [r3, #0]
 8010ca8:	2186      	movs	r1, #134	@ 0x86
 8010caa:	187b      	adds	r3, r7, r1
 8010cac:	0592      	lsls	r2, r2, #22
 8010cae:	0d92      	lsrs	r2, r2, #22
 8010cb0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	699a      	ldr	r2, [r3, #24]
 8010cb6:	187b      	adds	r3, r7, r1
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d907      	bls.n	8010cce <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	699a      	ldr	r2, [r3, #24]
 8010cc2:	187b      	adds	r3, r7, r1
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	1ad2      	subs	r2, r2, r3
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	619a      	str	r2, [r3, #24]
 8010ccc:	e002      	b.n	8010cd4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	699b      	ldr	r3, [r3, #24]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d000      	beq.n	8010cde <HAL_PCD_EP_DB_Transmit+0x72>
 8010cdc:	e0b5      	b.n	8010e4a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	785b      	ldrb	r3, [r3, #1]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d125      	bne.n	8010d32 <HAL_PCD_EP_DB_Transmit+0xc6>
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2250      	movs	r2, #80	@ 0x50
 8010cf2:	5a9b      	ldrh	r3, [r3, r2]
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	001a      	movs	r2, r3
 8010cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfa:	189b      	adds	r3, r3, r2
 8010cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	00da      	lsls	r2, r3, #3
 8010d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d06:	18d3      	adds	r3, r2, r3
 8010d08:	4ab6      	ldr	r2, [pc, #728]	@ (8010fe4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010d0a:	4694      	mov	ip, r2
 8010d0c:	4463      	add	r3, ip
 8010d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	059b      	lsls	r3, r3, #22
 8010d18:	0d9b      	lsrs	r3, r3, #22
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d1e:	801a      	strh	r2, [r3, #0]
 8010d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	4ab0      	ldr	r2, [pc, #704]	@ (8010fe8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d2e:	801a      	strh	r2, [r3, #0]
 8010d30:	e01b      	b.n	8010d6a <HAL_PCD_EP_DB_Transmit+0xfe>
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	785b      	ldrb	r3, [r3, #1]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d117      	bne.n	8010d6a <HAL_PCD_EP_DB_Transmit+0xfe>
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2250      	movs	r2, #80	@ 0x50
 8010d46:	5a9b      	ldrh	r3, [r3, r2]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	001a      	movs	r2, r3
 8010d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d4e:	189b      	adds	r3, r3, r2
 8010d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	00da      	lsls	r2, r3, #3
 8010d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d5a:	18d3      	adds	r3, r2, r3
 8010d5c:	4aa1      	ldr	r2, [pc, #644]	@ (8010fe4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010d5e:	4694      	mov	ip, r2
 8010d60:	4463      	add	r3, ip
 8010d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d66:	2200      	movs	r2, #0
 8010d68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	785b      	ldrb	r3, [r3, #1]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d125      	bne.n	8010dc4 <HAL_PCD_EP_DB_Transmit+0x158>
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	61fb      	str	r3, [r7, #28]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2250      	movs	r2, #80	@ 0x50
 8010d84:	5a9b      	ldrh	r3, [r3, r2]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	001a      	movs	r2, r3
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	189b      	adds	r3, r3, r2
 8010d8e:	61fb      	str	r3, [r7, #28]
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	00da      	lsls	r2, r3, #3
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	18d3      	adds	r3, r2, r3
 8010d9a:	4a94      	ldr	r2, [pc, #592]	@ (8010fec <HAL_PCD_EP_DB_Transmit+0x380>)
 8010d9c:	4694      	mov	ip, r2
 8010d9e:	4463      	add	r3, ip
 8010da0:	61bb      	str	r3, [r7, #24]
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	881b      	ldrh	r3, [r3, #0]
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	059b      	lsls	r3, r3, #22
 8010daa:	0d9b      	lsrs	r3, r3, #22
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	801a      	strh	r2, [r3, #0]
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	4a8b      	ldr	r2, [pc, #556]	@ (8010fe8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	b29a      	uxth	r2, r3
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	801a      	strh	r2, [r3, #0]
 8010dc2:	e018      	b.n	8010df6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	785b      	ldrb	r3, [r3, #1]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d114      	bne.n	8010df6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2250      	movs	r2, #80	@ 0x50
 8010dd2:	5a9b      	ldrh	r3, [r3, r2]
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	001a      	movs	r2, r3
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dda:	189b      	adds	r3, r3, r2
 8010ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	00da      	lsls	r2, r3, #3
 8010de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de6:	18d3      	adds	r3, r2, r3
 8010de8:	4a80      	ldr	r2, [pc, #512]	@ (8010fec <HAL_PCD_EP_DB_Transmit+0x380>)
 8010dea:	4694      	mov	ip, r2
 8010dec:	4463      	add	r3, ip
 8010dee:	623b      	str	r3, [r7, #32]
 8010df0:	6a3b      	ldr	r3, [r7, #32]
 8010df2:	2200      	movs	r2, #0
 8010df4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	781a      	ldrb	r2, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	0011      	movs	r1, r2
 8010dfe:	0018      	movs	r0, r3
 8010e00:	f008 fbb8 	bl	8019574 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010e04:	1dbb      	adds	r3, r7, #6
 8010e06:	881a      	ldrh	r2, [r3, #0]
 8010e08:	2380      	movs	r3, #128	@ 0x80
 8010e0a:	01db      	lsls	r3, r3, #7
 8010e0c:	4013      	ands	r3, r2
 8010e0e:	d100      	bne.n	8010e12 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8010e10:	e309      	b.n	8011426 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	001a      	movs	r2, r3
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	18d3      	adds	r3, r2, r3
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	2016      	movs	r0, #22
 8010e26:	183b      	adds	r3, r7, r0
 8010e28:	4971      	ldr	r1, [pc, #452]	@ (8010ff0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010e2a:	400a      	ands	r2, r1
 8010e2c:	801a      	strh	r2, [r3, #0]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	001a      	movs	r2, r3
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	18d3      	adds	r3, r2, r3
 8010e3c:	183a      	adds	r2, r7, r0
 8010e3e:	8812      	ldrh	r2, [r2, #0]
 8010e40:	496c      	ldr	r1, [pc, #432]	@ (8010ff4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010e42:	430a      	orrs	r2, r1
 8010e44:	b292      	uxth	r2, r2
 8010e46:	801a      	strh	r2, [r3, #0]
 8010e48:	e2ed      	b.n	8011426 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010e4a:	1dbb      	adds	r3, r7, #6
 8010e4c:	881a      	ldrh	r2, [r3, #0]
 8010e4e:	2380      	movs	r3, #128	@ 0x80
 8010e50:	01db      	lsls	r3, r3, #7
 8010e52:	4013      	ands	r3, r2
 8010e54:	d01a      	beq.n	8010e8c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	001a      	movs	r2, r3
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	18d3      	adds	r3, r2, r3
 8010e64:	881b      	ldrh	r3, [r3, #0]
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	208a      	movs	r0, #138	@ 0x8a
 8010e6a:	183b      	adds	r3, r7, r0
 8010e6c:	4960      	ldr	r1, [pc, #384]	@ (8010ff0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010e6e:	400a      	ands	r2, r1
 8010e70:	801a      	strh	r2, [r3, #0]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	001a      	movs	r2, r3
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	009b      	lsls	r3, r3, #2
 8010e7e:	18d3      	adds	r3, r2, r3
 8010e80:	183a      	adds	r2, r7, r0
 8010e82:	8812      	ldrh	r2, [r2, #0]
 8010e84:	495b      	ldr	r1, [pc, #364]	@ (8010ff4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010e86:	430a      	orrs	r2, r1
 8010e88:	b292      	uxth	r2, r2
 8010e8a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	2224      	movs	r2, #36	@ 0x24
 8010e90:	5c9b      	ldrb	r3, [r3, r2]
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d000      	beq.n	8010e98 <HAL_PCD_EP_DB_Transmit+0x22c>
 8010e96:	e2c6      	b.n	8011426 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	695a      	ldr	r2, [r3, #20]
 8010e9c:	2186      	movs	r1, #134	@ 0x86
 8010e9e:	187b      	adds	r3, r7, r1
 8010ea0:	881b      	ldrh	r3, [r3, #0]
 8010ea2:	18d2      	adds	r2, r2, r3
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	69da      	ldr	r2, [r3, #28]
 8010eac:	187b      	adds	r3, r7, r1
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	18d2      	adds	r2, r2, r3
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	6a1a      	ldr	r2, [r3, #32]
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d30c      	bcc.n	8010edc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	691b      	ldr	r3, [r3, #16]
 8010ec6:	218c      	movs	r1, #140	@ 0x8c
 8010ec8:	187a      	adds	r2, r7, r1
 8010eca:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	6a1a      	ldr	r2, [r3, #32]
 8010ed0:	187b      	adds	r3, r7, r1
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	1ad2      	subs	r2, r2, r3
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	621a      	str	r2, [r3, #32]
 8010eda:	e01a      	b.n	8010f12 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	6a1b      	ldr	r3, [r3, #32]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d10a      	bne.n	8010efa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8010ee4:	2386      	movs	r3, #134	@ 0x86
 8010ee6:	18fb      	adds	r3, r7, r3
 8010ee8:	881b      	ldrh	r3, [r3, #0]
 8010eea:	228c      	movs	r2, #140	@ 0x8c
 8010eec:	18ba      	adds	r2, r7, r2
 8010eee:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2224      	movs	r2, #36	@ 0x24
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	5499      	strb	r1, [r3, r2]
 8010ef8:	e00b      	b.n	8010f12 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2224      	movs	r2, #36	@ 0x24
 8010efe:	2100      	movs	r1, #0
 8010f00:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	6a1b      	ldr	r3, [r3, #32]
 8010f06:	228c      	movs	r2, #140	@ 0x8c
 8010f08:	18ba      	adds	r2, r7, r2
 8010f0a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	785b      	ldrb	r3, [r3, #1]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d000      	beq.n	8010f1c <HAL_PCD_EP_DB_Transmit+0x2b0>
 8010f1a:	e06d      	b.n	8010ff8 <HAL_PCD_EP_DB_Transmit+0x38c>
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2250      	movs	r2, #80	@ 0x50
 8010f28:	5a9b      	ldrh	r3, [r3, r2]
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	001a      	movs	r2, r3
 8010f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f30:	189b      	adds	r3, r3, r2
 8010f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	00da      	lsls	r2, r3, #3
 8010f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f3c:	18d3      	adds	r3, r2, r3
 8010f3e:	4a29      	ldr	r2, [pc, #164]	@ (8010fe4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010f40:	4694      	mov	ip, r2
 8010f42:	4463      	add	r3, ip
 8010f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	059b      	lsls	r3, r3, #22
 8010f4e:	0d9b      	lsrs	r3, r3, #22
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f54:	801a      	strh	r2, [r3, #0]
 8010f56:	228c      	movs	r2, #140	@ 0x8c
 8010f58:	18bb      	adds	r3, r7, r2
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8010f5e:	d91a      	bls.n	8010f96 <HAL_PCD_EP_DB_Transmit+0x32a>
 8010f60:	18bb      	adds	r3, r7, r2
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	095b      	lsrs	r3, r3, #5
 8010f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f68:	18bb      	adds	r3, r7, r2
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	221f      	movs	r2, #31
 8010f6e:	4013      	ands	r3, r2
 8010f70:	d102      	bne.n	8010f78 <HAL_PCD_EP_DB_Transmit+0x30c>
 8010f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f74:	3b01      	subs	r3, #1
 8010f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7a:	881b      	ldrh	r3, [r3, #0]
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	029b      	lsls	r3, r3, #10
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	4313      	orrs	r3, r2
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	4a17      	ldr	r2, [pc, #92]	@ (8010fe8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f92:	801a      	strh	r2, [r3, #0]
 8010f94:	e04f      	b.n	8011036 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010f96:	238c      	movs	r3, #140	@ 0x8c
 8010f98:	18fb      	adds	r3, r7, r3
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d108      	bne.n	8010fb2 <HAL_PCD_EP_DB_Transmit+0x346>
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	4a10      	ldr	r2, [pc, #64]	@ (8010fe8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	b29a      	uxth	r2, r3
 8010fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fae:	801a      	strh	r2, [r3, #0]
 8010fb0:	e041      	b.n	8011036 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010fb2:	228c      	movs	r2, #140	@ 0x8c
 8010fb4:	18bb      	adds	r3, r7, r2
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	085b      	lsrs	r3, r3, #1
 8010fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fbc:	18bb      	adds	r3, r7, r2
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	4013      	ands	r3, r2
 8010fc4:	d002      	beq.n	8010fcc <HAL_PCD_EP_DB_Transmit+0x360>
 8010fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010fc8:	3301      	adds	r3, #1
 8010fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	029b      	lsls	r3, r3, #10
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe0:	801a      	strh	r2, [r3, #0]
 8010fe2:	e028      	b.n	8011036 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8010fe4:	00000402 	.word	0x00000402
 8010fe8:	ffff8000 	.word	0xffff8000
 8010fec:	00000406 	.word	0x00000406
 8010ff0:	ffff8f8f 	.word	0xffff8f8f
 8010ff4:	ffffc080 	.word	0xffffc080
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	785b      	ldrb	r3, [r3, #1]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d11a      	bne.n	8011036 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	647b      	str	r3, [r7, #68]	@ 0x44
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2250      	movs	r2, #80	@ 0x50
 801100c:	5a9b      	ldrh	r3, [r3, r2]
 801100e:	b29b      	uxth	r3, r3
 8011010:	001a      	movs	r2, r3
 8011012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011014:	189b      	adds	r3, r3, r2
 8011016:	647b      	str	r3, [r7, #68]	@ 0x44
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	00da      	lsls	r2, r3, #3
 801101e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011020:	18d3      	adds	r3, r2, r3
 8011022:	4adb      	ldr	r2, [pc, #876]	@ (8011390 <HAL_PCD_EP_DB_Transmit+0x724>)
 8011024:	4694      	mov	ip, r2
 8011026:	4463      	add	r3, ip
 8011028:	643b      	str	r3, [r7, #64]	@ 0x40
 801102a:	238c      	movs	r3, #140	@ 0x8c
 801102c:	18fb      	adds	r3, r7, r3
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	b29a      	uxth	r2, r3
 8011032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011034:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6818      	ldr	r0, [r3, #0]
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	6959      	ldr	r1, [r3, #20]
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	891a      	ldrh	r2, [r3, #8]
 8011042:	238c      	movs	r3, #140	@ 0x8c
 8011044:	18fb      	adds	r3, r7, r3
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	b29b      	uxth	r3, r3
 801104a:	f006 fa0f 	bl	801746c <USB_WritePMA>
 801104e:	e1ea      	b.n	8011426 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	2250      	movs	r2, #80	@ 0x50
 8011056:	5a9b      	ldrh	r3, [r3, r2]
 8011058:	b29b      	uxth	r3, r3
 801105a:	001a      	movs	r2, r3
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	18d2      	adds	r2, r2, r3
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	18d3      	adds	r3, r2, r3
 801106a:	4aca      	ldr	r2, [pc, #808]	@ (8011394 <HAL_PCD_EP_DB_Transmit+0x728>)
 801106c:	4694      	mov	ip, r2
 801106e:	4463      	add	r3, ip
 8011070:	881a      	ldrh	r2, [r3, #0]
 8011072:	2186      	movs	r1, #134	@ 0x86
 8011074:	187b      	adds	r3, r7, r1
 8011076:	0592      	lsls	r2, r2, #22
 8011078:	0d92      	lsrs	r2, r2, #22
 801107a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	699a      	ldr	r2, [r3, #24]
 8011080:	187b      	adds	r3, r7, r1
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	429a      	cmp	r2, r3
 8011086:	d307      	bcc.n	8011098 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	699a      	ldr	r2, [r3, #24]
 801108c:	187b      	adds	r3, r7, r1
 801108e:	881b      	ldrh	r3, [r3, #0]
 8011090:	1ad2      	subs	r2, r2, r3
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	619a      	str	r2, [r3, #24]
 8011096:	e002      	b.n	801109e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	2200      	movs	r2, #0
 801109c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	699b      	ldr	r3, [r3, #24]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d000      	beq.n	80110a8 <HAL_PCD_EP_DB_Transmit+0x43c>
 80110a6:	e0bb      	b.n	8011220 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	785b      	ldrb	r3, [r3, #1]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d125      	bne.n	80110fc <HAL_PCD_EP_DB_Transmit+0x490>
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2250      	movs	r2, #80	@ 0x50
 80110bc:	5a9b      	ldrh	r3, [r3, r2]
 80110be:	b29b      	uxth	r3, r3
 80110c0:	001a      	movs	r2, r3
 80110c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80110c4:	189b      	adds	r3, r3, r2
 80110c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	00da      	lsls	r2, r3, #3
 80110ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80110d0:	18d3      	adds	r3, r2, r3
 80110d2:	4aaf      	ldr	r2, [pc, #700]	@ (8011390 <HAL_PCD_EP_DB_Transmit+0x724>)
 80110d4:	4694      	mov	ip, r2
 80110d6:	4463      	add	r3, ip
 80110d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80110da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110dc:	881b      	ldrh	r3, [r3, #0]
 80110de:	b29b      	uxth	r3, r3
 80110e0:	059b      	lsls	r3, r3, #22
 80110e2:	0d9b      	lsrs	r3, r3, #22
 80110e4:	b29a      	uxth	r2, r3
 80110e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110e8:	801a      	strh	r2, [r3, #0]
 80110ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110ec:	881b      	ldrh	r3, [r3, #0]
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	4aa9      	ldr	r2, [pc, #676]	@ (8011398 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80110f2:	4313      	orrs	r3, r2
 80110f4:	b29a      	uxth	r2, r3
 80110f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110f8:	801a      	strh	r2, [r3, #0]
 80110fa:	e01b      	b.n	8011134 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	785b      	ldrb	r3, [r3, #1]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d117      	bne.n	8011134 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	667b      	str	r3, [r7, #100]	@ 0x64
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2250      	movs	r2, #80	@ 0x50
 8011110:	5a9b      	ldrh	r3, [r3, r2]
 8011112:	b29b      	uxth	r3, r3
 8011114:	001a      	movs	r2, r3
 8011116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011118:	189b      	adds	r3, r3, r2
 801111a:	667b      	str	r3, [r7, #100]	@ 0x64
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	00da      	lsls	r2, r3, #3
 8011122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011124:	18d3      	adds	r3, r2, r3
 8011126:	4a9a      	ldr	r2, [pc, #616]	@ (8011390 <HAL_PCD_EP_DB_Transmit+0x724>)
 8011128:	4694      	mov	ip, r2
 801112a:	4463      	add	r3, ip
 801112c:	663b      	str	r3, [r7, #96]	@ 0x60
 801112e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011130:	2200      	movs	r2, #0
 8011132:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	677b      	str	r3, [r7, #116]	@ 0x74
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	785b      	ldrb	r3, [r3, #1]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d12b      	bne.n	801119a <HAL_PCD_EP_DB_Transmit+0x52e>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2250      	movs	r2, #80	@ 0x50
 801114e:	5a9b      	ldrh	r3, [r3, r2]
 8011150:	b29b      	uxth	r3, r3
 8011152:	001a      	movs	r2, r3
 8011154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011156:	189b      	adds	r3, r3, r2
 8011158:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	00da      	lsls	r2, r3, #3
 8011160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011162:	18d3      	adds	r3, r2, r3
 8011164:	4a8b      	ldr	r2, [pc, #556]	@ (8011394 <HAL_PCD_EP_DB_Transmit+0x728>)
 8011166:	4694      	mov	ip, r2
 8011168:	4463      	add	r3, ip
 801116a:	2180      	movs	r1, #128	@ 0x80
 801116c:	187a      	adds	r2, r7, r1
 801116e:	6013      	str	r3, [r2, #0]
 8011170:	187b      	adds	r3, r7, r1
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	881b      	ldrh	r3, [r3, #0]
 8011176:	b29b      	uxth	r3, r3
 8011178:	059b      	lsls	r3, r3, #22
 801117a:	0d9b      	lsrs	r3, r3, #22
 801117c:	b29a      	uxth	r2, r3
 801117e:	187b      	adds	r3, r7, r1
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	801a      	strh	r2, [r3, #0]
 8011184:	187b      	adds	r3, r7, r1
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	881b      	ldrh	r3, [r3, #0]
 801118a:	b29b      	uxth	r3, r3
 801118c:	4a82      	ldr	r2, [pc, #520]	@ (8011398 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801118e:	4313      	orrs	r3, r2
 8011190:	b29a      	uxth	r2, r3
 8011192:	187b      	adds	r3, r7, r1
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	801a      	strh	r2, [r3, #0]
 8011198:	e018      	b.n	80111cc <HAL_PCD_EP_DB_Transmit+0x560>
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	785b      	ldrb	r3, [r3, #1]
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d114      	bne.n	80111cc <HAL_PCD_EP_DB_Transmit+0x560>
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	2250      	movs	r2, #80	@ 0x50
 80111a8:	5a9b      	ldrh	r3, [r3, r2]
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	001a      	movs	r2, r3
 80111ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80111b0:	189b      	adds	r3, r3, r2
 80111b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	00da      	lsls	r2, r3, #3
 80111ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80111bc:	18d3      	adds	r3, r2, r3
 80111be:	4a75      	ldr	r2, [pc, #468]	@ (8011394 <HAL_PCD_EP_DB_Transmit+0x728>)
 80111c0:	4694      	mov	ip, r2
 80111c2:	4463      	add	r3, ip
 80111c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80111c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80111c8:	2200      	movs	r2, #0
 80111ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	781a      	ldrb	r2, [r3, #0]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	0011      	movs	r1, r2
 80111d4:	0018      	movs	r0, r3
 80111d6:	f008 f9cd 	bl	8019574 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80111da:	1dbb      	adds	r3, r7, #6
 80111dc:	881a      	ldrh	r2, [r3, #0]
 80111de:	2380      	movs	r3, #128	@ 0x80
 80111e0:	01db      	lsls	r3, r3, #7
 80111e2:	4013      	ands	r3, r2
 80111e4:	d000      	beq.n	80111e8 <HAL_PCD_EP_DB_Transmit+0x57c>
 80111e6:	e11e      	b.n	8011426 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	001a      	movs	r2, r3
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	009b      	lsls	r3, r3, #2
 80111f4:	18d3      	adds	r3, r2, r3
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	2088      	movs	r0, #136	@ 0x88
 80111fc:	183b      	adds	r3, r7, r0
 80111fe:	4967      	ldr	r1, [pc, #412]	@ (801139c <HAL_PCD_EP_DB_Transmit+0x730>)
 8011200:	400a      	ands	r2, r1
 8011202:	801a      	strh	r2, [r3, #0]
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	001a      	movs	r2, r3
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	18d3      	adds	r3, r2, r3
 8011212:	183a      	adds	r2, r7, r0
 8011214:	8812      	ldrh	r2, [r2, #0]
 8011216:	4962      	ldr	r1, [pc, #392]	@ (80113a0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8011218:	430a      	orrs	r2, r1
 801121a:	b292      	uxth	r2, r2
 801121c:	801a      	strh	r2, [r3, #0]
 801121e:	e102      	b.n	8011426 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8011220:	1dbb      	adds	r3, r7, #6
 8011222:	881a      	ldrh	r2, [r3, #0]
 8011224:	2380      	movs	r3, #128	@ 0x80
 8011226:	01db      	lsls	r3, r3, #7
 8011228:	4013      	ands	r3, r2
 801122a:	d11a      	bne.n	8011262 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	001a      	movs	r2, r3
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	18d3      	adds	r3, r2, r3
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	b29a      	uxth	r2, r3
 801123e:	204e      	movs	r0, #78	@ 0x4e
 8011240:	183b      	adds	r3, r7, r0
 8011242:	4956      	ldr	r1, [pc, #344]	@ (801139c <HAL_PCD_EP_DB_Transmit+0x730>)
 8011244:	400a      	ands	r2, r1
 8011246:	801a      	strh	r2, [r3, #0]
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	001a      	movs	r2, r3
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	009b      	lsls	r3, r3, #2
 8011254:	18d3      	adds	r3, r2, r3
 8011256:	183a      	adds	r2, r7, r0
 8011258:	8812      	ldrh	r2, [r2, #0]
 801125a:	4951      	ldr	r1, [pc, #324]	@ (80113a0 <HAL_PCD_EP_DB_Transmit+0x734>)
 801125c:	430a      	orrs	r2, r1
 801125e:	b292      	uxth	r2, r2
 8011260:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	2224      	movs	r2, #36	@ 0x24
 8011266:	5c9b      	ldrb	r3, [r3, r2]
 8011268:	2b01      	cmp	r3, #1
 801126a:	d000      	beq.n	801126e <HAL_PCD_EP_DB_Transmit+0x602>
 801126c:	e0db      	b.n	8011426 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	695a      	ldr	r2, [r3, #20]
 8011272:	2186      	movs	r1, #134	@ 0x86
 8011274:	187b      	adds	r3, r7, r1
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	18d2      	adds	r2, r2, r3
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	69da      	ldr	r2, [r3, #28]
 8011282:	187b      	adds	r3, r7, r1
 8011284:	881b      	ldrh	r3, [r3, #0]
 8011286:	18d2      	adds	r2, r2, r3
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	6a1a      	ldr	r2, [r3, #32]
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	691b      	ldr	r3, [r3, #16]
 8011294:	429a      	cmp	r2, r3
 8011296:	d30c      	bcc.n	80112b2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	691b      	ldr	r3, [r3, #16]
 801129c:	218c      	movs	r1, #140	@ 0x8c
 801129e:	187a      	adds	r2, r7, r1
 80112a0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	6a1a      	ldr	r2, [r3, #32]
 80112a6:	187b      	adds	r3, r7, r1
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	1ad2      	subs	r2, r2, r3
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	621a      	str	r2, [r3, #32]
 80112b0:	e01a      	b.n	80112e8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	6a1b      	ldr	r3, [r3, #32]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d10a      	bne.n	80112d0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80112ba:	2386      	movs	r3, #134	@ 0x86
 80112bc:	18fb      	adds	r3, r7, r3
 80112be:	881b      	ldrh	r3, [r3, #0]
 80112c0:	228c      	movs	r2, #140	@ 0x8c
 80112c2:	18ba      	adds	r2, r7, r2
 80112c4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	2224      	movs	r2, #36	@ 0x24
 80112ca:	2100      	movs	r1, #0
 80112cc:	5499      	strb	r1, [r3, r2]
 80112ce:	e00b      	b.n	80112e8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	6a1b      	ldr	r3, [r3, #32]
 80112d4:	228c      	movs	r2, #140	@ 0x8c
 80112d6:	18ba      	adds	r2, r7, r2
 80112d8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	2200      	movs	r2, #0
 80112de:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	2224      	movs	r2, #36	@ 0x24
 80112e4:	2100      	movs	r1, #0
 80112e6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	785b      	ldrb	r3, [r3, #1]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d000      	beq.n	80112f8 <HAL_PCD_EP_DB_Transmit+0x68c>
 80112f6:	e06e      	b.n	80113d6 <HAL_PCD_EP_DB_Transmit+0x76a>
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2250      	movs	r2, #80	@ 0x50
 8011304:	5a9b      	ldrh	r3, [r3, r2]
 8011306:	b29b      	uxth	r3, r3
 8011308:	001a      	movs	r2, r3
 801130a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801130c:	189b      	adds	r3, r3, r2
 801130e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	00da      	lsls	r2, r3, #3
 8011316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011318:	18d3      	adds	r3, r2, r3
 801131a:	4a1e      	ldr	r2, [pc, #120]	@ (8011394 <HAL_PCD_EP_DB_Transmit+0x728>)
 801131c:	4694      	mov	ip, r2
 801131e:	4463      	add	r3, ip
 8011320:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	b29b      	uxth	r3, r3
 8011328:	059b      	lsls	r3, r3, #22
 801132a:	0d9b      	lsrs	r3, r3, #22
 801132c:	b29a      	uxth	r2, r3
 801132e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011330:	801a      	strh	r2, [r3, #0]
 8011332:	228c      	movs	r2, #140	@ 0x8c
 8011334:	18bb      	adds	r3, r7, r2
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	2b3e      	cmp	r3, #62	@ 0x3e
 801133a:	d91a      	bls.n	8011372 <HAL_PCD_EP_DB_Transmit+0x706>
 801133c:	18bb      	adds	r3, r7, r2
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	095b      	lsrs	r3, r3, #5
 8011342:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011344:	18bb      	adds	r3, r7, r2
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	221f      	movs	r2, #31
 801134a:	4013      	ands	r3, r2
 801134c:	d102      	bne.n	8011354 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801134e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011350:	3b01      	subs	r3, #1
 8011352:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	b29a      	uxth	r2, r3
 801135a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801135c:	b29b      	uxth	r3, r3
 801135e:	029b      	lsls	r3, r3, #10
 8011360:	b29b      	uxth	r3, r3
 8011362:	4313      	orrs	r3, r2
 8011364:	b29b      	uxth	r3, r3
 8011366:	4a0c      	ldr	r2, [pc, #48]	@ (8011398 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011368:	4313      	orrs	r3, r2
 801136a:	b29a      	uxth	r2, r3
 801136c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801136e:	801a      	strh	r2, [r3, #0]
 8011370:	e04d      	b.n	801140e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011372:	238c      	movs	r3, #140	@ 0x8c
 8011374:	18fb      	adds	r3, r7, r3
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d113      	bne.n	80113a4 <HAL_PCD_EP_DB_Transmit+0x738>
 801137c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801137e:	881b      	ldrh	r3, [r3, #0]
 8011380:	b29b      	uxth	r3, r3
 8011382:	4a05      	ldr	r2, [pc, #20]	@ (8011398 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011384:	4313      	orrs	r3, r2
 8011386:	b29a      	uxth	r2, r3
 8011388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801138a:	801a      	strh	r2, [r3, #0]
 801138c:	e03f      	b.n	801140e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801138e:	46c0      	nop			@ (mov r8, r8)
 8011390:	00000402 	.word	0x00000402
 8011394:	00000406 	.word	0x00000406
 8011398:	ffff8000 	.word	0xffff8000
 801139c:	ffff8f8f 	.word	0xffff8f8f
 80113a0:	ffffc080 	.word	0xffffc080
 80113a4:	228c      	movs	r2, #140	@ 0x8c
 80113a6:	18bb      	adds	r3, r7, r2
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	085b      	lsrs	r3, r3, #1
 80113ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80113ae:	18bb      	adds	r3, r7, r2
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2201      	movs	r2, #1
 80113b4:	4013      	ands	r3, r2
 80113b6:	d002      	beq.n	80113be <HAL_PCD_EP_DB_Transmit+0x752>
 80113b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113ba:	3301      	adds	r3, #1
 80113bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80113be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	029b      	lsls	r3, r3, #10
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	4313      	orrs	r3, r2
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113d2:	801a      	strh	r2, [r3, #0]
 80113d4:	e01b      	b.n	801140e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	785b      	ldrb	r3, [r3, #1]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d117      	bne.n	801140e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2250      	movs	r2, #80	@ 0x50
 80113e4:	5a9b      	ldrh	r3, [r3, r2]
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	001a      	movs	r2, r3
 80113ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113ec:	189b      	adds	r3, r3, r2
 80113ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	00da      	lsls	r2, r3, #3
 80113f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113f8:	18d3      	adds	r3, r2, r3
 80113fa:	4a21      	ldr	r2, [pc, #132]	@ (8011480 <HAL_PCD_EP_DB_Transmit+0x814>)
 80113fc:	4694      	mov	ip, r2
 80113fe:	4463      	add	r3, ip
 8011400:	653b      	str	r3, [r7, #80]	@ 0x50
 8011402:	238c      	movs	r3, #140	@ 0x8c
 8011404:	18fb      	adds	r3, r7, r3
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	b29a      	uxth	r2, r3
 801140a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801140c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	6818      	ldr	r0, [r3, #0]
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	6959      	ldr	r1, [r3, #20]
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	895a      	ldrh	r2, [r3, #10]
 801141a:	238c      	movs	r3, #140	@ 0x8c
 801141c:	18fb      	adds	r3, r7, r3
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	b29b      	uxth	r3, r3
 8011422:	f006 f823 	bl	801746c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	001a      	movs	r2, r3
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	18d3      	adds	r3, r2, r3
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	b29a      	uxth	r2, r3
 8011438:	2014      	movs	r0, #20
 801143a:	183b      	adds	r3, r7, r0
 801143c:	4911      	ldr	r1, [pc, #68]	@ (8011484 <HAL_PCD_EP_DB_Transmit+0x818>)
 801143e:	400a      	ands	r2, r1
 8011440:	801a      	strh	r2, [r3, #0]
 8011442:	183b      	adds	r3, r7, r0
 8011444:	183a      	adds	r2, r7, r0
 8011446:	8812      	ldrh	r2, [r2, #0]
 8011448:	2110      	movs	r1, #16
 801144a:	404a      	eors	r2, r1
 801144c:	801a      	strh	r2, [r3, #0]
 801144e:	183b      	adds	r3, r7, r0
 8011450:	183a      	adds	r2, r7, r0
 8011452:	8812      	ldrh	r2, [r2, #0]
 8011454:	2120      	movs	r1, #32
 8011456:	404a      	eors	r2, r1
 8011458:	801a      	strh	r2, [r3, #0]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	001a      	movs	r2, r3
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	18d3      	adds	r3, r2, r3
 8011468:	183a      	adds	r2, r7, r0
 801146a:	8812      	ldrh	r2, [r2, #0]
 801146c:	4906      	ldr	r1, [pc, #24]	@ (8011488 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801146e:	430a      	orrs	r2, r1
 8011470:	b292      	uxth	r2, r2
 8011472:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8011474:	2300      	movs	r3, #0
}
 8011476:	0018      	movs	r0, r3
 8011478:	46bd      	mov	sp, r7
 801147a:	b024      	add	sp, #144	@ 0x90
 801147c:	bd80      	pop	{r7, pc}
 801147e:	46c0      	nop			@ (mov r8, r8)
 8011480:	00000406 	.word	0x00000406
 8011484:	ffff8fbf 	.word	0xffff8fbf
 8011488:	ffff8080 	.word	0xffff8080

0801148c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801148c:	b590      	push	{r4, r7, lr}
 801148e:	b087      	sub	sp, #28
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	0008      	movs	r0, r1
 8011496:	0011      	movs	r1, r2
 8011498:	607b      	str	r3, [r7, #4]
 801149a:	240a      	movs	r4, #10
 801149c:	193b      	adds	r3, r7, r4
 801149e:	1c02      	adds	r2, r0, #0
 80114a0:	801a      	strh	r2, [r3, #0]
 80114a2:	2308      	movs	r3, #8
 80114a4:	18fb      	adds	r3, r7, r3
 80114a6:	1c0a      	adds	r2, r1, #0
 80114a8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80114aa:	0021      	movs	r1, r4
 80114ac:	187b      	adds	r3, r7, r1
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	2280      	movs	r2, #128	@ 0x80
 80114b2:	4013      	ands	r3, r2
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00c      	beq.n	80114d4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80114ba:	187b      	adds	r3, r7, r1
 80114bc:	881b      	ldrh	r3, [r3, #0]
 80114be:	2207      	movs	r2, #7
 80114c0:	4013      	ands	r3, r2
 80114c2:	1c5a      	adds	r2, r3, #1
 80114c4:	0013      	movs	r3, r2
 80114c6:	009b      	lsls	r3, r3, #2
 80114c8:	189b      	adds	r3, r3, r2
 80114ca:	00db      	lsls	r3, r3, #3
 80114cc:	68fa      	ldr	r2, [r7, #12]
 80114ce:	18d3      	adds	r3, r2, r3
 80114d0:	617b      	str	r3, [r7, #20]
 80114d2:	e00b      	b.n	80114ec <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80114d4:	230a      	movs	r3, #10
 80114d6:	18fb      	adds	r3, r7, r3
 80114d8:	881a      	ldrh	r2, [r3, #0]
 80114da:	0013      	movs	r3, r2
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	189b      	adds	r3, r3, r2
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	3369      	adds	r3, #105	@ 0x69
 80114e4:	33ff      	adds	r3, #255	@ 0xff
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	18d3      	adds	r3, r2, r3
 80114ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80114ec:	2308      	movs	r3, #8
 80114ee:	18fb      	adds	r3, r7, r3
 80114f0:	881b      	ldrh	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d107      	bne.n	8011506 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	2200      	movs	r2, #0
 80114fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	b29a      	uxth	r2, r3
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	80da      	strh	r2, [r3, #6]
 8011504:	e00b      	b.n	801151e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	2201      	movs	r2, #1
 801150a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	b29a      	uxth	r2, r3
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	0c1b      	lsrs	r3, r3, #16
 8011518:	b29a      	uxth	r2, r3
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801151e:	2300      	movs	r3, #0
}
 8011520:	0018      	movs	r0, r3
 8011522:	46bd      	mov	sp, r7
 8011524:	b007      	add	sp, #28
 8011526:	bd90      	pop	{r4, r7, pc}

08011528 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	23ba      	movs	r3, #186	@ 0xba
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	2101      	movs	r1, #1
 801153e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	23b8      	movs	r3, #184	@ 0xb8
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	2100      	movs	r1, #0
 8011548:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2254      	movs	r2, #84	@ 0x54
 801154e:	5a9b      	ldrh	r3, [r3, r2]
 8011550:	b29b      	uxth	r3, r3
 8011552:	2201      	movs	r2, #1
 8011554:	4313      	orrs	r3, r2
 8011556:	b299      	uxth	r1, r3
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2254      	movs	r2, #84	@ 0x54
 801155c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2254      	movs	r2, #84	@ 0x54
 8011562:	5a9b      	ldrh	r3, [r3, r2]
 8011564:	b29b      	uxth	r3, r3
 8011566:	2202      	movs	r2, #2
 8011568:	4313      	orrs	r3, r2
 801156a:	b299      	uxth	r1, r3
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2254      	movs	r2, #84	@ 0x54
 8011570:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	0018      	movs	r0, r3
 8011576:	46bd      	mov	sp, r7
 8011578:	b004      	add	sp, #16
 801157a:	bd80      	pop	{r7, pc}

0801157c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	000a      	movs	r2, r1
 8011586:	1cfb      	adds	r3, r7, #3
 8011588:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801158a:	46c0      	nop			@ (mov r8, r8)
 801158c:	46bd      	mov	sp, r7
 801158e:	b002      	add	sp, #8
 8011590:	bd80      	pop	{r7, pc}
	...

08011594 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8011598:	4b04      	ldr	r3, [pc, #16]	@ (80115ac <HAL_PWR_EnableBkUpAccess+0x18>)
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	4b03      	ldr	r3, [pc, #12]	@ (80115ac <HAL_PWR_EnableBkUpAccess+0x18>)
 801159e:	2180      	movs	r1, #128	@ 0x80
 80115a0:	0049      	lsls	r1, r1, #1
 80115a2:	430a      	orrs	r2, r1
 80115a4:	601a      	str	r2, [r3, #0]
}
 80115a6:	46c0      	nop			@ (mov r8, r8)
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	40007000 	.word	0x40007000

080115b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80115b0:	b5b0      	push	{r4, r5, r7, lr}
 80115b2:	b08a      	sub	sp, #40	@ 0x28
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d102      	bne.n	80115c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	f000 fbbf 	bl	8011d42 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80115c4:	4bc9      	ldr	r3, [pc, #804]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	220c      	movs	r2, #12
 80115ca:	4013      	ands	r3, r2
 80115cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80115ce:	4bc7      	ldr	r3, [pc, #796]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80115d0:	68da      	ldr	r2, [r3, #12]
 80115d2:	2380      	movs	r3, #128	@ 0x80
 80115d4:	025b      	lsls	r3, r3, #9
 80115d6:	4013      	ands	r3, r2
 80115d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	2201      	movs	r2, #1
 80115e0:	4013      	ands	r3, r2
 80115e2:	d100      	bne.n	80115e6 <HAL_RCC_OscConfig+0x36>
 80115e4:	e07e      	b.n	80116e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	2b08      	cmp	r3, #8
 80115ea:	d007      	beq.n	80115fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	2b0c      	cmp	r3, #12
 80115f0:	d112      	bne.n	8011618 <HAL_RCC_OscConfig+0x68>
 80115f2:	69ba      	ldr	r2, [r7, #24]
 80115f4:	2380      	movs	r3, #128	@ 0x80
 80115f6:	025b      	lsls	r3, r3, #9
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d10d      	bne.n	8011618 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80115fc:	4bbb      	ldr	r3, [pc, #748]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	2380      	movs	r3, #128	@ 0x80
 8011602:	029b      	lsls	r3, r3, #10
 8011604:	4013      	ands	r3, r2
 8011606:	d100      	bne.n	801160a <HAL_RCC_OscConfig+0x5a>
 8011608:	e06b      	b.n	80116e2 <HAL_RCC_OscConfig+0x132>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d167      	bne.n	80116e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	f000 fb95 	bl	8011d42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	685a      	ldr	r2, [r3, #4]
 801161c:	2380      	movs	r3, #128	@ 0x80
 801161e:	025b      	lsls	r3, r3, #9
 8011620:	429a      	cmp	r2, r3
 8011622:	d107      	bne.n	8011634 <HAL_RCC_OscConfig+0x84>
 8011624:	4bb1      	ldr	r3, [pc, #708]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	4bb0      	ldr	r3, [pc, #704]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801162a:	2180      	movs	r1, #128	@ 0x80
 801162c:	0249      	lsls	r1, r1, #9
 801162e:	430a      	orrs	r2, r1
 8011630:	601a      	str	r2, [r3, #0]
 8011632:	e027      	b.n	8011684 <HAL_RCC_OscConfig+0xd4>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	685a      	ldr	r2, [r3, #4]
 8011638:	23a0      	movs	r3, #160	@ 0xa0
 801163a:	02db      	lsls	r3, r3, #11
 801163c:	429a      	cmp	r2, r3
 801163e:	d10e      	bne.n	801165e <HAL_RCC_OscConfig+0xae>
 8011640:	4baa      	ldr	r3, [pc, #680]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	4ba9      	ldr	r3, [pc, #676]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011646:	2180      	movs	r1, #128	@ 0x80
 8011648:	02c9      	lsls	r1, r1, #11
 801164a:	430a      	orrs	r2, r1
 801164c:	601a      	str	r2, [r3, #0]
 801164e:	4ba7      	ldr	r3, [pc, #668]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	4ba6      	ldr	r3, [pc, #664]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011654:	2180      	movs	r1, #128	@ 0x80
 8011656:	0249      	lsls	r1, r1, #9
 8011658:	430a      	orrs	r2, r1
 801165a:	601a      	str	r2, [r3, #0]
 801165c:	e012      	b.n	8011684 <HAL_RCC_OscConfig+0xd4>
 801165e:	4ba3      	ldr	r3, [pc, #652]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	4ba2      	ldr	r3, [pc, #648]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011664:	49a2      	ldr	r1, [pc, #648]	@ (80118f0 <HAL_RCC_OscConfig+0x340>)
 8011666:	400a      	ands	r2, r1
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	4ba0      	ldr	r3, [pc, #640]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	2380      	movs	r3, #128	@ 0x80
 8011670:	025b      	lsls	r3, r3, #9
 8011672:	4013      	ands	r3, r2
 8011674:	60fb      	str	r3, [r7, #12]
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	4b9c      	ldr	r3, [pc, #624]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	4b9b      	ldr	r3, [pc, #620]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801167e:	499d      	ldr	r1, [pc, #628]	@ (80118f4 <HAL_RCC_OscConfig+0x344>)
 8011680:	400a      	ands	r2, r1
 8011682:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d015      	beq.n	80116b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801168c:	f7fa fb92 	bl	800bdb4 <HAL_GetTick>
 8011690:	0003      	movs	r3, r0
 8011692:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011694:	e009      	b.n	80116aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011696:	f7fa fb8d 	bl	800bdb4 <HAL_GetTick>
 801169a:	0002      	movs	r2, r0
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	2b64      	cmp	r3, #100	@ 0x64
 80116a2:	d902      	bls.n	80116aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80116a4:	2303      	movs	r3, #3
 80116a6:	f000 fb4c 	bl	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80116aa:	4b90      	ldr	r3, [pc, #576]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	2380      	movs	r3, #128	@ 0x80
 80116b0:	029b      	lsls	r3, r3, #10
 80116b2:	4013      	ands	r3, r2
 80116b4:	d0ef      	beq.n	8011696 <HAL_RCC_OscConfig+0xe6>
 80116b6:	e015      	b.n	80116e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80116b8:	f7fa fb7c 	bl	800bdb4 <HAL_GetTick>
 80116bc:	0003      	movs	r3, r0
 80116be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80116c0:	e008      	b.n	80116d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80116c2:	f7fa fb77 	bl	800bdb4 <HAL_GetTick>
 80116c6:	0002      	movs	r2, r0
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	2b64      	cmp	r3, #100	@ 0x64
 80116ce:	d901      	bls.n	80116d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80116d0:	2303      	movs	r3, #3
 80116d2:	e336      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80116d4:	4b85      	ldr	r3, [pc, #532]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	2380      	movs	r3, #128	@ 0x80
 80116da:	029b      	lsls	r3, r3, #10
 80116dc:	4013      	ands	r3, r2
 80116de:	d1f0      	bne.n	80116c2 <HAL_RCC_OscConfig+0x112>
 80116e0:	e000      	b.n	80116e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80116e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2202      	movs	r2, #2
 80116ea:	4013      	ands	r3, r2
 80116ec:	d100      	bne.n	80116f0 <HAL_RCC_OscConfig+0x140>
 80116ee:	e099      	b.n	8011824 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80116f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f8:	2220      	movs	r2, #32
 80116fa:	4013      	ands	r3, r2
 80116fc:	d009      	beq.n	8011712 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80116fe:	4b7b      	ldr	r3, [pc, #492]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	4b7a      	ldr	r3, [pc, #488]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011704:	2120      	movs	r1, #32
 8011706:	430a      	orrs	r2, r1
 8011708:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170c:	2220      	movs	r2, #32
 801170e:	4393      	bics	r3, r2
 8011710:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	2b04      	cmp	r3, #4
 8011716:	d005      	beq.n	8011724 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	2b0c      	cmp	r3, #12
 801171c:	d13e      	bne.n	801179c <HAL_RCC_OscConfig+0x1ec>
 801171e:	69bb      	ldr	r3, [r7, #24]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d13b      	bne.n	801179c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8011724:	4b71      	ldr	r3, [pc, #452]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2204      	movs	r2, #4
 801172a:	4013      	ands	r3, r2
 801172c:	d004      	beq.n	8011738 <HAL_RCC_OscConfig+0x188>
 801172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011730:	2b00      	cmp	r3, #0
 8011732:	d101      	bne.n	8011738 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8011734:	2301      	movs	r3, #1
 8011736:	e304      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011738:	4b6c      	ldr	r3, [pc, #432]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	4a6e      	ldr	r2, [pc, #440]	@ (80118f8 <HAL_RCC_OscConfig+0x348>)
 801173e:	4013      	ands	r3, r2
 8011740:	0019      	movs	r1, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	691b      	ldr	r3, [r3, #16]
 8011746:	021a      	lsls	r2, r3, #8
 8011748:	4b68      	ldr	r3, [pc, #416]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801174a:	430a      	orrs	r2, r1
 801174c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801174e:	4b67      	ldr	r3, [pc, #412]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2209      	movs	r2, #9
 8011754:	4393      	bics	r3, r2
 8011756:	0019      	movs	r1, r3
 8011758:	4b64      	ldr	r3, [pc, #400]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801175a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801175c:	430a      	orrs	r2, r1
 801175e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011760:	f000 fc42 	bl	8011fe8 <HAL_RCC_GetSysClockFreq>
 8011764:	0001      	movs	r1, r0
 8011766:	4b61      	ldr	r3, [pc, #388]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	091b      	lsrs	r3, r3, #4
 801176c:	220f      	movs	r2, #15
 801176e:	4013      	ands	r3, r2
 8011770:	4a62      	ldr	r2, [pc, #392]	@ (80118fc <HAL_RCC_OscConfig+0x34c>)
 8011772:	5cd3      	ldrb	r3, [r2, r3]
 8011774:	000a      	movs	r2, r1
 8011776:	40da      	lsrs	r2, r3
 8011778:	4b61      	ldr	r3, [pc, #388]	@ (8011900 <HAL_RCC_OscConfig+0x350>)
 801177a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801177c:	4b61      	ldr	r3, [pc, #388]	@ (8011904 <HAL_RCC_OscConfig+0x354>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2513      	movs	r5, #19
 8011782:	197c      	adds	r4, r7, r5
 8011784:	0018      	movs	r0, r3
 8011786:	f7fa facf 	bl	800bd28 <HAL_InitTick>
 801178a:	0003      	movs	r3, r0
 801178c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801178e:	197b      	adds	r3, r7, r5
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d046      	beq.n	8011824 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8011796:	197b      	adds	r3, r7, r5
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	e2d2      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d027      	beq.n	80117f2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80117a2:	4b52      	ldr	r3, [pc, #328]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2209      	movs	r2, #9
 80117a8:	4393      	bics	r3, r2
 80117aa:	0019      	movs	r1, r3
 80117ac:	4b4f      	ldr	r3, [pc, #316]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80117ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117b0:	430a      	orrs	r2, r1
 80117b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117b4:	f7fa fafe 	bl	800bdb4 <HAL_GetTick>
 80117b8:	0003      	movs	r3, r0
 80117ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80117bc:	e008      	b.n	80117d0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80117be:	f7fa faf9 	bl	800bdb4 <HAL_GetTick>
 80117c2:	0002      	movs	r2, r0
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d901      	bls.n	80117d0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80117cc:	2303      	movs	r3, #3
 80117ce:	e2b8      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80117d0:	4b46      	ldr	r3, [pc, #280]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2204      	movs	r2, #4
 80117d6:	4013      	ands	r3, r2
 80117d8:	d0f1      	beq.n	80117be <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80117da:	4b44      	ldr	r3, [pc, #272]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	4a46      	ldr	r2, [pc, #280]	@ (80118f8 <HAL_RCC_OscConfig+0x348>)
 80117e0:	4013      	ands	r3, r2
 80117e2:	0019      	movs	r1, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	691b      	ldr	r3, [r3, #16]
 80117e8:	021a      	lsls	r2, r3, #8
 80117ea:	4b40      	ldr	r3, [pc, #256]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80117ec:	430a      	orrs	r2, r1
 80117ee:	605a      	str	r2, [r3, #4]
 80117f0:	e018      	b.n	8011824 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80117f2:	4b3e      	ldr	r3, [pc, #248]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	4b3d      	ldr	r3, [pc, #244]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80117f8:	2101      	movs	r1, #1
 80117fa:	438a      	bics	r2, r1
 80117fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117fe:	f7fa fad9 	bl	800bdb4 <HAL_GetTick>
 8011802:	0003      	movs	r3, r0
 8011804:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011806:	e008      	b.n	801181a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011808:	f7fa fad4 	bl	800bdb4 <HAL_GetTick>
 801180c:	0002      	movs	r2, r0
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	2b02      	cmp	r3, #2
 8011814:	d901      	bls.n	801181a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8011816:	2303      	movs	r3, #3
 8011818:	e293      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801181a:	4b34      	ldr	r3, [pc, #208]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2204      	movs	r2, #4
 8011820:	4013      	ands	r3, r2
 8011822:	d1f1      	bne.n	8011808 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2210      	movs	r2, #16
 801182a:	4013      	ands	r3, r2
 801182c:	d100      	bne.n	8011830 <HAL_RCC_OscConfig+0x280>
 801182e:	e0a2      	b.n	8011976 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d140      	bne.n	80118b8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011836:	4b2d      	ldr	r3, [pc, #180]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	2380      	movs	r3, #128	@ 0x80
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	4013      	ands	r3, r2
 8011840:	d005      	beq.n	801184e <HAL_RCC_OscConfig+0x29e>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	69db      	ldr	r3, [r3, #28]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d101      	bne.n	801184e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801184a:	2301      	movs	r3, #1
 801184c:	e279      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801184e:	4b27      	ldr	r3, [pc, #156]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	4a2d      	ldr	r2, [pc, #180]	@ (8011908 <HAL_RCC_OscConfig+0x358>)
 8011854:	4013      	ands	r3, r2
 8011856:	0019      	movs	r1, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801185c:	4b23      	ldr	r3, [pc, #140]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 801185e:	430a      	orrs	r2, r1
 8011860:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011862:	4b22      	ldr	r3, [pc, #136]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	021b      	lsls	r3, r3, #8
 8011868:	0a19      	lsrs	r1, r3, #8
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a1b      	ldr	r3, [r3, #32]
 801186e:	061a      	lsls	r2, r3, #24
 8011870:	4b1e      	ldr	r3, [pc, #120]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011872:	430a      	orrs	r2, r1
 8011874:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801187a:	0b5b      	lsrs	r3, r3, #13
 801187c:	3301      	adds	r3, #1
 801187e:	2280      	movs	r2, #128	@ 0x80
 8011880:	0212      	lsls	r2, r2, #8
 8011882:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8011884:	4b19      	ldr	r3, [pc, #100]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	091b      	lsrs	r3, r3, #4
 801188a:	210f      	movs	r1, #15
 801188c:	400b      	ands	r3, r1
 801188e:	491b      	ldr	r1, [pc, #108]	@ (80118fc <HAL_RCC_OscConfig+0x34c>)
 8011890:	5ccb      	ldrb	r3, [r1, r3]
 8011892:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011894:	4b1a      	ldr	r3, [pc, #104]	@ (8011900 <HAL_RCC_OscConfig+0x350>)
 8011896:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8011898:	4b1a      	ldr	r3, [pc, #104]	@ (8011904 <HAL_RCC_OscConfig+0x354>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2513      	movs	r5, #19
 801189e:	197c      	adds	r4, r7, r5
 80118a0:	0018      	movs	r0, r3
 80118a2:	f7fa fa41 	bl	800bd28 <HAL_InitTick>
 80118a6:	0003      	movs	r3, r0
 80118a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80118aa:	197b      	adds	r3, r7, r5
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d061      	beq.n	8011976 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80118b2:	197b      	adds	r3, r7, r5
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	e244      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	69db      	ldr	r3, [r3, #28]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d040      	beq.n	8011942 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80118c0:	4b0a      	ldr	r3, [pc, #40]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	4b09      	ldr	r3, [pc, #36]	@ (80118ec <HAL_RCC_OscConfig+0x33c>)
 80118c6:	2180      	movs	r1, #128	@ 0x80
 80118c8:	0049      	lsls	r1, r1, #1
 80118ca:	430a      	orrs	r2, r1
 80118cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80118ce:	f7fa fa71 	bl	800bdb4 <HAL_GetTick>
 80118d2:	0003      	movs	r3, r0
 80118d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80118d6:	e019      	b.n	801190c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80118d8:	f7fa fa6c 	bl	800bdb4 <HAL_GetTick>
 80118dc:	0002      	movs	r2, r0
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	1ad3      	subs	r3, r2, r3
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	d912      	bls.n	801190c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80118e6:	2303      	movs	r3, #3
 80118e8:	e22b      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
 80118ea:	46c0      	nop			@ (mov r8, r8)
 80118ec:	40021000 	.word	0x40021000
 80118f0:	fffeffff 	.word	0xfffeffff
 80118f4:	fffbffff 	.word	0xfffbffff
 80118f8:	ffffe0ff 	.word	0xffffe0ff
 80118fc:	08020880 	.word	0x08020880
 8011900:	200000c4 	.word	0x200000c4
 8011904:	200000d8 	.word	0x200000d8
 8011908:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801190c:	4bca      	ldr	r3, [pc, #808]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	2380      	movs	r3, #128	@ 0x80
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	4013      	ands	r3, r2
 8011916:	d0df      	beq.n	80118d8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011918:	4bc7      	ldr	r3, [pc, #796]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	4ac7      	ldr	r2, [pc, #796]	@ (8011c3c <HAL_RCC_OscConfig+0x68c>)
 801191e:	4013      	ands	r3, r2
 8011920:	0019      	movs	r1, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011926:	4bc4      	ldr	r3, [pc, #784]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011928:	430a      	orrs	r2, r1
 801192a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801192c:	4bc2      	ldr	r3, [pc, #776]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	021b      	lsls	r3, r3, #8
 8011932:	0a19      	lsrs	r1, r3, #8
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6a1b      	ldr	r3, [r3, #32]
 8011938:	061a      	lsls	r2, r3, #24
 801193a:	4bbf      	ldr	r3, [pc, #764]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 801193c:	430a      	orrs	r2, r1
 801193e:	605a      	str	r2, [r3, #4]
 8011940:	e019      	b.n	8011976 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8011942:	4bbd      	ldr	r3, [pc, #756]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	4bbc      	ldr	r3, [pc, #752]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011948:	49bd      	ldr	r1, [pc, #756]	@ (8011c40 <HAL_RCC_OscConfig+0x690>)
 801194a:	400a      	ands	r2, r1
 801194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801194e:	f7fa fa31 	bl	800bdb4 <HAL_GetTick>
 8011952:	0003      	movs	r3, r0
 8011954:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011956:	e008      	b.n	801196a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011958:	f7fa fa2c 	bl	800bdb4 <HAL_GetTick>
 801195c:	0002      	movs	r2, r0
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	2b02      	cmp	r3, #2
 8011964:	d901      	bls.n	801196a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8011966:	2303      	movs	r3, #3
 8011968:	e1eb      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801196a:	4bb3      	ldr	r3, [pc, #716]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	2380      	movs	r3, #128	@ 0x80
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4013      	ands	r3, r2
 8011974:	d1f0      	bne.n	8011958 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2208      	movs	r2, #8
 801197c:	4013      	ands	r3, r2
 801197e:	d036      	beq.n	80119ee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	695b      	ldr	r3, [r3, #20]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d019      	beq.n	80119bc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011988:	4bab      	ldr	r3, [pc, #684]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 801198a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801198c:	4baa      	ldr	r3, [pc, #680]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 801198e:	2101      	movs	r1, #1
 8011990:	430a      	orrs	r2, r1
 8011992:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011994:	f7fa fa0e 	bl	800bdb4 <HAL_GetTick>
 8011998:	0003      	movs	r3, r0
 801199a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801199c:	e008      	b.n	80119b0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801199e:	f7fa fa09 	bl	800bdb4 <HAL_GetTick>
 80119a2:	0002      	movs	r2, r0
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d901      	bls.n	80119b0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80119ac:	2303      	movs	r3, #3
 80119ae:	e1c8      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80119b0:	4ba1      	ldr	r3, [pc, #644]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 80119b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119b4:	2202      	movs	r2, #2
 80119b6:	4013      	ands	r3, r2
 80119b8:	d0f1      	beq.n	801199e <HAL_RCC_OscConfig+0x3ee>
 80119ba:	e018      	b.n	80119ee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80119bc:	4b9e      	ldr	r3, [pc, #632]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 80119be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80119c0:	4b9d      	ldr	r3, [pc, #628]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 80119c2:	2101      	movs	r1, #1
 80119c4:	438a      	bics	r2, r1
 80119c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80119c8:	f7fa f9f4 	bl	800bdb4 <HAL_GetTick>
 80119cc:	0003      	movs	r3, r0
 80119ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80119d0:	e008      	b.n	80119e4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80119d2:	f7fa f9ef 	bl	800bdb4 <HAL_GetTick>
 80119d6:	0002      	movs	r2, r0
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	2b02      	cmp	r3, #2
 80119de:	d901      	bls.n	80119e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80119e0:	2303      	movs	r3, #3
 80119e2:	e1ae      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80119e4:	4b94      	ldr	r3, [pc, #592]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 80119e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119e8:	2202      	movs	r2, #2
 80119ea:	4013      	ands	r3, r2
 80119ec:	d1f1      	bne.n	80119d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2204      	movs	r2, #4
 80119f4:	4013      	ands	r3, r2
 80119f6:	d100      	bne.n	80119fa <HAL_RCC_OscConfig+0x44a>
 80119f8:	e0ae      	b.n	8011b58 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80119fa:	2023      	movs	r0, #35	@ 0x23
 80119fc:	183b      	adds	r3, r7, r0
 80119fe:	2200      	movs	r2, #0
 8011a00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011a02:	4b8d      	ldr	r3, [pc, #564]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a06:	2380      	movs	r3, #128	@ 0x80
 8011a08:	055b      	lsls	r3, r3, #21
 8011a0a:	4013      	ands	r3, r2
 8011a0c:	d109      	bne.n	8011a22 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a12:	4b89      	ldr	r3, [pc, #548]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a14:	2180      	movs	r1, #128	@ 0x80
 8011a16:	0549      	lsls	r1, r1, #21
 8011a18:	430a      	orrs	r2, r1
 8011a1a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8011a1c:	183b      	adds	r3, r7, r0
 8011a1e:	2201      	movs	r2, #1
 8011a20:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011a22:	4b88      	ldr	r3, [pc, #544]	@ (8011c44 <HAL_RCC_OscConfig+0x694>)
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	2380      	movs	r3, #128	@ 0x80
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	4013      	ands	r3, r2
 8011a2c:	d11a      	bne.n	8011a64 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011a2e:	4b85      	ldr	r3, [pc, #532]	@ (8011c44 <HAL_RCC_OscConfig+0x694>)
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	4b84      	ldr	r3, [pc, #528]	@ (8011c44 <HAL_RCC_OscConfig+0x694>)
 8011a34:	2180      	movs	r1, #128	@ 0x80
 8011a36:	0049      	lsls	r1, r1, #1
 8011a38:	430a      	orrs	r2, r1
 8011a3a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011a3c:	f7fa f9ba 	bl	800bdb4 <HAL_GetTick>
 8011a40:	0003      	movs	r3, r0
 8011a42:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011a44:	e008      	b.n	8011a58 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a46:	f7fa f9b5 	bl	800bdb4 <HAL_GetTick>
 8011a4a:	0002      	movs	r2, r0
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	2b64      	cmp	r3, #100	@ 0x64
 8011a52:	d901      	bls.n	8011a58 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8011a54:	2303      	movs	r3, #3
 8011a56:	e174      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011a58:	4b7a      	ldr	r3, [pc, #488]	@ (8011c44 <HAL_RCC_OscConfig+0x694>)
 8011a5a:	681a      	ldr	r2, [r3, #0]
 8011a5c:	2380      	movs	r3, #128	@ 0x80
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	4013      	ands	r3, r2
 8011a62:	d0f0      	beq.n	8011a46 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	689a      	ldr	r2, [r3, #8]
 8011a68:	2380      	movs	r3, #128	@ 0x80
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d107      	bne.n	8011a80 <HAL_RCC_OscConfig+0x4d0>
 8011a70:	4b71      	ldr	r3, [pc, #452]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a74:	4b70      	ldr	r3, [pc, #448]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a76:	2180      	movs	r1, #128	@ 0x80
 8011a78:	0049      	lsls	r1, r1, #1
 8011a7a:	430a      	orrs	r2, r1
 8011a7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8011a7e:	e031      	b.n	8011ae4 <HAL_RCC_OscConfig+0x534>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	689b      	ldr	r3, [r3, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10c      	bne.n	8011aa2 <HAL_RCC_OscConfig+0x4f2>
 8011a88:	4b6b      	ldr	r3, [pc, #428]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a8e:	496c      	ldr	r1, [pc, #432]	@ (8011c40 <HAL_RCC_OscConfig+0x690>)
 8011a90:	400a      	ands	r2, r1
 8011a92:	651a      	str	r2, [r3, #80]	@ 0x50
 8011a94:	4b68      	ldr	r3, [pc, #416]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a98:	4b67      	ldr	r3, [pc, #412]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011a9a:	496b      	ldr	r1, [pc, #428]	@ (8011c48 <HAL_RCC_OscConfig+0x698>)
 8011a9c:	400a      	ands	r2, r1
 8011a9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011aa0:	e020      	b.n	8011ae4 <HAL_RCC_OscConfig+0x534>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	689a      	ldr	r2, [r3, #8]
 8011aa6:	23a0      	movs	r3, #160	@ 0xa0
 8011aa8:	00db      	lsls	r3, r3, #3
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d10e      	bne.n	8011acc <HAL_RCC_OscConfig+0x51c>
 8011aae:	4b62      	ldr	r3, [pc, #392]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011ab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ab2:	4b61      	ldr	r3, [pc, #388]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011ab4:	2180      	movs	r1, #128	@ 0x80
 8011ab6:	00c9      	lsls	r1, r1, #3
 8011ab8:	430a      	orrs	r2, r1
 8011aba:	651a      	str	r2, [r3, #80]	@ 0x50
 8011abc:	4b5e      	ldr	r3, [pc, #376]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011abe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011ac2:	2180      	movs	r1, #128	@ 0x80
 8011ac4:	0049      	lsls	r1, r1, #1
 8011ac6:	430a      	orrs	r2, r1
 8011ac8:	651a      	str	r2, [r3, #80]	@ 0x50
 8011aca:	e00b      	b.n	8011ae4 <HAL_RCC_OscConfig+0x534>
 8011acc:	4b5a      	ldr	r3, [pc, #360]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011ace:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ad0:	4b59      	ldr	r3, [pc, #356]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011ad2:	495b      	ldr	r1, [pc, #364]	@ (8011c40 <HAL_RCC_OscConfig+0x690>)
 8011ad4:	400a      	ands	r2, r1
 8011ad6:	651a      	str	r2, [r3, #80]	@ 0x50
 8011ad8:	4b57      	ldr	r3, [pc, #348]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011ada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011adc:	4b56      	ldr	r3, [pc, #344]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011ade:	495a      	ldr	r1, [pc, #360]	@ (8011c48 <HAL_RCC_OscConfig+0x698>)
 8011ae0:	400a      	ands	r2, r1
 8011ae2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	689b      	ldr	r3, [r3, #8]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d015      	beq.n	8011b18 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011aec:	f7fa f962 	bl	800bdb4 <HAL_GetTick>
 8011af0:	0003      	movs	r3, r0
 8011af2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011af4:	e009      	b.n	8011b0a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011af6:	f7fa f95d 	bl	800bdb4 <HAL_GetTick>
 8011afa:	0002      	movs	r2, r0
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	4a52      	ldr	r2, [pc, #328]	@ (8011c4c <HAL_RCC_OscConfig+0x69c>)
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d901      	bls.n	8011b0a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8011b06:	2303      	movs	r3, #3
 8011b08:	e11b      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b0e:	2380      	movs	r3, #128	@ 0x80
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	4013      	ands	r3, r2
 8011b14:	d0ef      	beq.n	8011af6 <HAL_RCC_OscConfig+0x546>
 8011b16:	e014      	b.n	8011b42 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b18:	f7fa f94c 	bl	800bdb4 <HAL_GetTick>
 8011b1c:	0003      	movs	r3, r0
 8011b1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011b20:	e009      	b.n	8011b36 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011b22:	f7fa f947 	bl	800bdb4 <HAL_GetTick>
 8011b26:	0002      	movs	r2, r0
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	4a47      	ldr	r2, [pc, #284]	@ (8011c4c <HAL_RCC_OscConfig+0x69c>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d901      	bls.n	8011b36 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8011b32:	2303      	movs	r3, #3
 8011b34:	e105      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011b36:	4b40      	ldr	r3, [pc, #256]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b3a:	2380      	movs	r3, #128	@ 0x80
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	4013      	ands	r3, r2
 8011b40:	d1ef      	bne.n	8011b22 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011b42:	2323      	movs	r3, #35	@ 0x23
 8011b44:	18fb      	adds	r3, r7, r3
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	2b01      	cmp	r3, #1
 8011b4a:	d105      	bne.n	8011b58 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b50:	4b39      	ldr	r3, [pc, #228]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b52:	493f      	ldr	r1, [pc, #252]	@ (8011c50 <HAL_RCC_OscConfig+0x6a0>)
 8011b54:	400a      	ands	r2, r1
 8011b56:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2220      	movs	r2, #32
 8011b5e:	4013      	ands	r3, r2
 8011b60:	d049      	beq.n	8011bf6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	699b      	ldr	r3, [r3, #24]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d026      	beq.n	8011bb8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011b6a:	4b33      	ldr	r3, [pc, #204]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b6c:	689a      	ldr	r2, [r3, #8]
 8011b6e:	4b32      	ldr	r3, [pc, #200]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b70:	2101      	movs	r1, #1
 8011b72:	430a      	orrs	r2, r1
 8011b74:	609a      	str	r2, [r3, #8]
 8011b76:	4b30      	ldr	r3, [pc, #192]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	430a      	orrs	r2, r1
 8011b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8011b82:	4b34      	ldr	r3, [pc, #208]	@ (8011c54 <HAL_RCC_OscConfig+0x6a4>)
 8011b84:	6a1a      	ldr	r2, [r3, #32]
 8011b86:	4b33      	ldr	r3, [pc, #204]	@ (8011c54 <HAL_RCC_OscConfig+0x6a4>)
 8011b88:	2180      	movs	r1, #128	@ 0x80
 8011b8a:	0189      	lsls	r1, r1, #6
 8011b8c:	430a      	orrs	r2, r1
 8011b8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b90:	f7fa f910 	bl	800bdb4 <HAL_GetTick>
 8011b94:	0003      	movs	r3, r0
 8011b96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011b98:	e008      	b.n	8011bac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011b9a:	f7fa f90b 	bl	800bdb4 <HAL_GetTick>
 8011b9e:	0002      	movs	r2, r0
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	2b02      	cmp	r3, #2
 8011ba6:	d901      	bls.n	8011bac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8011ba8:	2303      	movs	r3, #3
 8011baa:	e0ca      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011bac:	4b22      	ldr	r3, [pc, #136]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011bae:	689b      	ldr	r3, [r3, #8]
 8011bb0:	2202      	movs	r2, #2
 8011bb2:	4013      	ands	r3, r2
 8011bb4:	d0f1      	beq.n	8011b9a <HAL_RCC_OscConfig+0x5ea>
 8011bb6:	e01e      	b.n	8011bf6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8011bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011bba:	689a      	ldr	r2, [r3, #8]
 8011bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011bbe:	2101      	movs	r1, #1
 8011bc0:	438a      	bics	r2, r1
 8011bc2:	609a      	str	r2, [r3, #8]
 8011bc4:	4b23      	ldr	r3, [pc, #140]	@ (8011c54 <HAL_RCC_OscConfig+0x6a4>)
 8011bc6:	6a1a      	ldr	r2, [r3, #32]
 8011bc8:	4b22      	ldr	r3, [pc, #136]	@ (8011c54 <HAL_RCC_OscConfig+0x6a4>)
 8011bca:	4923      	ldr	r1, [pc, #140]	@ (8011c58 <HAL_RCC_OscConfig+0x6a8>)
 8011bcc:	400a      	ands	r2, r1
 8011bce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011bd0:	f7fa f8f0 	bl	800bdb4 <HAL_GetTick>
 8011bd4:	0003      	movs	r3, r0
 8011bd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011bd8:	e008      	b.n	8011bec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011bda:	f7fa f8eb 	bl	800bdb4 <HAL_GetTick>
 8011bde:	0002      	movs	r2, r0
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d901      	bls.n	8011bec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8011be8:	2303      	movs	r3, #3
 8011bea:	e0aa      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011bec:	4b12      	ldr	r3, [pc, #72]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	2202      	movs	r2, #2
 8011bf2:	4013      	ands	r3, r2
 8011bf4:	d1f1      	bne.n	8011bda <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d100      	bne.n	8011c00 <HAL_RCC_OscConfig+0x650>
 8011bfe:	e09f      	b.n	8011d40 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011c00:	69fb      	ldr	r3, [r7, #28]
 8011c02:	2b0c      	cmp	r3, #12
 8011c04:	d100      	bne.n	8011c08 <HAL_RCC_OscConfig+0x658>
 8011c06:	e078      	b.n	8011cfa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c0c:	2b02      	cmp	r3, #2
 8011c0e:	d159      	bne.n	8011cc4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011c10:	4b09      	ldr	r3, [pc, #36]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	4b08      	ldr	r3, [pc, #32]	@ (8011c38 <HAL_RCC_OscConfig+0x688>)
 8011c16:	4911      	ldr	r1, [pc, #68]	@ (8011c5c <HAL_RCC_OscConfig+0x6ac>)
 8011c18:	400a      	ands	r2, r1
 8011c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c1c:	f7fa f8ca 	bl	800bdb4 <HAL_GetTick>
 8011c20:	0003      	movs	r3, r0
 8011c22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011c24:	e01c      	b.n	8011c60 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c26:	f7fa f8c5 	bl	800bdb4 <HAL_GetTick>
 8011c2a:	0002      	movs	r2, r0
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	2b02      	cmp	r3, #2
 8011c32:	d915      	bls.n	8011c60 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8011c34:	2303      	movs	r3, #3
 8011c36:	e084      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
 8011c38:	40021000 	.word	0x40021000
 8011c3c:	ffff1fff 	.word	0xffff1fff
 8011c40:	fffffeff 	.word	0xfffffeff
 8011c44:	40007000 	.word	0x40007000
 8011c48:	fffffbff 	.word	0xfffffbff
 8011c4c:	00001388 	.word	0x00001388
 8011c50:	efffffff 	.word	0xefffffff
 8011c54:	40010000 	.word	0x40010000
 8011c58:	ffffdfff 	.word	0xffffdfff
 8011c5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011c60:	4b3a      	ldr	r3, [pc, #232]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	2380      	movs	r3, #128	@ 0x80
 8011c66:	049b      	lsls	r3, r3, #18
 8011c68:	4013      	ands	r3, r2
 8011c6a:	d1dc      	bne.n	8011c26 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011c6c:	4b37      	ldr	r3, [pc, #220]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	4a37      	ldr	r2, [pc, #220]	@ (8011d50 <HAL_RCC_OscConfig+0x7a0>)
 8011c72:	4013      	ands	r3, r2
 8011c74:	0019      	movs	r1, r3
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c7e:	431a      	orrs	r2, r3
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c84:	431a      	orrs	r2, r3
 8011c86:	4b31      	ldr	r3, [pc, #196]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011c88:	430a      	orrs	r2, r1
 8011c8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	4b2e      	ldr	r3, [pc, #184]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011c92:	2180      	movs	r1, #128	@ 0x80
 8011c94:	0449      	lsls	r1, r1, #17
 8011c96:	430a      	orrs	r2, r1
 8011c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c9a:	f7fa f88b 	bl	800bdb4 <HAL_GetTick>
 8011c9e:	0003      	movs	r3, r0
 8011ca0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011ca2:	e008      	b.n	8011cb6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ca4:	f7fa f886 	bl	800bdb4 <HAL_GetTick>
 8011ca8:	0002      	movs	r2, r0
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	2b02      	cmp	r3, #2
 8011cb0:	d901      	bls.n	8011cb6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8011cb2:	2303      	movs	r3, #3
 8011cb4:	e045      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011cb6:	4b25      	ldr	r3, [pc, #148]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	2380      	movs	r3, #128	@ 0x80
 8011cbc:	049b      	lsls	r3, r3, #18
 8011cbe:	4013      	ands	r3, r2
 8011cc0:	d0f0      	beq.n	8011ca4 <HAL_RCC_OscConfig+0x6f4>
 8011cc2:	e03d      	b.n	8011d40 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011cc4:	4b21      	ldr	r3, [pc, #132]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	4b20      	ldr	r3, [pc, #128]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011cca:	4922      	ldr	r1, [pc, #136]	@ (8011d54 <HAL_RCC_OscConfig+0x7a4>)
 8011ccc:	400a      	ands	r2, r1
 8011cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011cd0:	f7fa f870 	bl	800bdb4 <HAL_GetTick>
 8011cd4:	0003      	movs	r3, r0
 8011cd6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011cd8:	e008      	b.n	8011cec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011cda:	f7fa f86b 	bl	800bdb4 <HAL_GetTick>
 8011cde:	0002      	movs	r2, r0
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d901      	bls.n	8011cec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8011ce8:	2303      	movs	r3, #3
 8011cea:	e02a      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011cec:	4b17      	ldr	r3, [pc, #92]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	2380      	movs	r3, #128	@ 0x80
 8011cf2:	049b      	lsls	r3, r3, #18
 8011cf4:	4013      	ands	r3, r2
 8011cf6:	d1f0      	bne.n	8011cda <HAL_RCC_OscConfig+0x72a>
 8011cf8:	e022      	b.n	8011d40 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d101      	bne.n	8011d06 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
 8011d04:	e01d      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011d06:	4b11      	ldr	r3, [pc, #68]	@ (8011d4c <HAL_RCC_OscConfig+0x79c>)
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d0c:	69ba      	ldr	r2, [r7, #24]
 8011d0e:	2380      	movs	r3, #128	@ 0x80
 8011d10:	025b      	lsls	r3, r3, #9
 8011d12:	401a      	ands	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d10f      	bne.n	8011d3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011d1c:	69ba      	ldr	r2, [r7, #24]
 8011d1e:	23f0      	movs	r3, #240	@ 0xf0
 8011d20:	039b      	lsls	r3, r3, #14
 8011d22:	401a      	ands	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d107      	bne.n	8011d3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8011d2c:	69ba      	ldr	r2, [r7, #24]
 8011d2e:	23c0      	movs	r3, #192	@ 0xc0
 8011d30:	041b      	lsls	r3, r3, #16
 8011d32:	401a      	ands	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d001      	beq.n	8011d40 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	e000      	b.n	8011d42 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8011d40:	2300      	movs	r3, #0
}
 8011d42:	0018      	movs	r0, r3
 8011d44:	46bd      	mov	sp, r7
 8011d46:	b00a      	add	sp, #40	@ 0x28
 8011d48:	bdb0      	pop	{r4, r5, r7, pc}
 8011d4a:	46c0      	nop			@ (mov r8, r8)
 8011d4c:	40021000 	.word	0x40021000
 8011d50:	ff02ffff 	.word	0xff02ffff
 8011d54:	feffffff 	.word	0xfeffffff

08011d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011d58:	b5b0      	push	{r4, r5, r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d101      	bne.n	8011d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	e128      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011d6c:	4b96      	ldr	r3, [pc, #600]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2201      	movs	r2, #1
 8011d72:	4013      	ands	r3, r2
 8011d74:	683a      	ldr	r2, [r7, #0]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d91e      	bls.n	8011db8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d7a:	4b93      	ldr	r3, [pc, #588]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	4393      	bics	r3, r2
 8011d82:	0019      	movs	r1, r3
 8011d84:	4b90      	ldr	r3, [pc, #576]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011d86:	683a      	ldr	r2, [r7, #0]
 8011d88:	430a      	orrs	r2, r1
 8011d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011d8c:	f7fa f812 	bl	800bdb4 <HAL_GetTick>
 8011d90:	0003      	movs	r3, r0
 8011d92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011d94:	e009      	b.n	8011daa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d96:	f7fa f80d 	bl	800bdb4 <HAL_GetTick>
 8011d9a:	0002      	movs	r2, r0
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	1ad3      	subs	r3, r2, r3
 8011da0:	4a8a      	ldr	r2, [pc, #552]	@ (8011fcc <HAL_RCC_ClockConfig+0x274>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d901      	bls.n	8011daa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8011da6:	2303      	movs	r3, #3
 8011da8:	e109      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011daa:	4b87      	ldr	r3, [pc, #540]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2201      	movs	r2, #1
 8011db0:	4013      	ands	r3, r2
 8011db2:	683a      	ldr	r2, [r7, #0]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d1ee      	bne.n	8011d96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2202      	movs	r2, #2
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	d009      	beq.n	8011dd6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011dc2:	4b83      	ldr	r3, [pc, #524]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	22f0      	movs	r2, #240	@ 0xf0
 8011dc8:	4393      	bics	r3, r2
 8011dca:	0019      	movs	r1, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	689a      	ldr	r2, [r3, #8]
 8011dd0:	4b7f      	ldr	r3, [pc, #508]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011dd2:	430a      	orrs	r2, r1
 8011dd4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	2201      	movs	r2, #1
 8011ddc:	4013      	ands	r3, r2
 8011dde:	d100      	bne.n	8011de2 <HAL_RCC_ClockConfig+0x8a>
 8011de0:	e089      	b.n	8011ef6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	2b02      	cmp	r3, #2
 8011de8:	d107      	bne.n	8011dfa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011dea:	4b79      	ldr	r3, [pc, #484]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	2380      	movs	r3, #128	@ 0x80
 8011df0:	029b      	lsls	r3, r3, #10
 8011df2:	4013      	ands	r3, r2
 8011df4:	d120      	bne.n	8011e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011df6:	2301      	movs	r3, #1
 8011df8:	e0e1      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	2b03      	cmp	r3, #3
 8011e00:	d107      	bne.n	8011e12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011e02:	4b73      	ldr	r3, [pc, #460]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	2380      	movs	r3, #128	@ 0x80
 8011e08:	049b      	lsls	r3, r3, #18
 8011e0a:	4013      	ands	r3, r2
 8011e0c:	d114      	bne.n	8011e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011e0e:	2301      	movs	r3, #1
 8011e10:	e0d5      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	d106      	bne.n	8011e28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2204      	movs	r2, #4
 8011e20:	4013      	ands	r3, r2
 8011e22:	d109      	bne.n	8011e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011e24:	2301      	movs	r3, #1
 8011e26:	e0ca      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011e28:	4b69      	ldr	r3, [pc, #420]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	2380      	movs	r3, #128	@ 0x80
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	4013      	ands	r3, r2
 8011e32:	d101      	bne.n	8011e38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011e34:	2301      	movs	r3, #1
 8011e36:	e0c2      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011e38:	4b65      	ldr	r3, [pc, #404]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	2203      	movs	r2, #3
 8011e3e:	4393      	bics	r3, r2
 8011e40:	0019      	movs	r1, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	685a      	ldr	r2, [r3, #4]
 8011e46:	4b62      	ldr	r3, [pc, #392]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011e48:	430a      	orrs	r2, r1
 8011e4a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011e4c:	f7f9 ffb2 	bl	800bdb4 <HAL_GetTick>
 8011e50:	0003      	movs	r3, r0
 8011e52:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	2b02      	cmp	r3, #2
 8011e5a:	d111      	bne.n	8011e80 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011e5c:	e009      	b.n	8011e72 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e5e:	f7f9 ffa9 	bl	800bdb4 <HAL_GetTick>
 8011e62:	0002      	movs	r2, r0
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	4a58      	ldr	r2, [pc, #352]	@ (8011fcc <HAL_RCC_ClockConfig+0x274>)
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	d901      	bls.n	8011e72 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8011e6e:	2303      	movs	r3, #3
 8011e70:	e0a5      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011e72:	4b57      	ldr	r3, [pc, #348]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	220c      	movs	r2, #12
 8011e78:	4013      	ands	r3, r2
 8011e7a:	2b08      	cmp	r3, #8
 8011e7c:	d1ef      	bne.n	8011e5e <HAL_RCC_ClockConfig+0x106>
 8011e7e:	e03a      	b.n	8011ef6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	2b03      	cmp	r3, #3
 8011e86:	d111      	bne.n	8011eac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011e88:	e009      	b.n	8011e9e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e8a:	f7f9 ff93 	bl	800bdb4 <HAL_GetTick>
 8011e8e:	0002      	movs	r2, r0
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	4a4d      	ldr	r2, [pc, #308]	@ (8011fcc <HAL_RCC_ClockConfig+0x274>)
 8011e96:	4293      	cmp	r3, r2
 8011e98:	d901      	bls.n	8011e9e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8011e9a:	2303      	movs	r3, #3
 8011e9c:	e08f      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011ea0:	68db      	ldr	r3, [r3, #12]
 8011ea2:	220c      	movs	r2, #12
 8011ea4:	4013      	ands	r3, r2
 8011ea6:	2b0c      	cmp	r3, #12
 8011ea8:	d1ef      	bne.n	8011e8a <HAL_RCC_ClockConfig+0x132>
 8011eaa:	e024      	b.n	8011ef6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d11b      	bne.n	8011eec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011eb4:	e009      	b.n	8011eca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011eb6:	f7f9 ff7d 	bl	800bdb4 <HAL_GetTick>
 8011eba:	0002      	movs	r2, r0
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	4a42      	ldr	r2, [pc, #264]	@ (8011fcc <HAL_RCC_ClockConfig+0x274>)
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d901      	bls.n	8011eca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	e079      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011eca:	4b41      	ldr	r3, [pc, #260]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	220c      	movs	r2, #12
 8011ed0:	4013      	ands	r3, r2
 8011ed2:	2b04      	cmp	r3, #4
 8011ed4:	d1ef      	bne.n	8011eb6 <HAL_RCC_ClockConfig+0x15e>
 8011ed6:	e00e      	b.n	8011ef6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ed8:	f7f9 ff6c 	bl	800bdb4 <HAL_GetTick>
 8011edc:	0002      	movs	r2, r0
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	1ad3      	subs	r3, r2, r3
 8011ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8011fcc <HAL_RCC_ClockConfig+0x274>)
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d901      	bls.n	8011eec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8011ee8:	2303      	movs	r3, #3
 8011eea:	e068      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8011eec:	4b38      	ldr	r3, [pc, #224]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	220c      	movs	r2, #12
 8011ef2:	4013      	ands	r3, r2
 8011ef4:	d1f0      	bne.n	8011ed8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011ef6:	4b34      	ldr	r3, [pc, #208]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2201      	movs	r2, #1
 8011efc:	4013      	ands	r3, r2
 8011efe:	683a      	ldr	r2, [r7, #0]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d21e      	bcs.n	8011f42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f04:	4b30      	ldr	r3, [pc, #192]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	4393      	bics	r3, r2
 8011f0c:	0019      	movs	r1, r3
 8011f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011f10:	683a      	ldr	r2, [r7, #0]
 8011f12:	430a      	orrs	r2, r1
 8011f14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011f16:	f7f9 ff4d 	bl	800bdb4 <HAL_GetTick>
 8011f1a:	0003      	movs	r3, r0
 8011f1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f1e:	e009      	b.n	8011f34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f20:	f7f9 ff48 	bl	800bdb4 <HAL_GetTick>
 8011f24:	0002      	movs	r2, r0
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	4a28      	ldr	r2, [pc, #160]	@ (8011fcc <HAL_RCC_ClockConfig+0x274>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d901      	bls.n	8011f34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8011f30:	2303      	movs	r3, #3
 8011f32:	e044      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f34:	4b24      	ldr	r3, [pc, #144]	@ (8011fc8 <HAL_RCC_ClockConfig+0x270>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2201      	movs	r2, #1
 8011f3a:	4013      	ands	r3, r2
 8011f3c:	683a      	ldr	r2, [r7, #0]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d1ee      	bne.n	8011f20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2204      	movs	r2, #4
 8011f48:	4013      	ands	r3, r2
 8011f4a:	d009      	beq.n	8011f60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011f4c:	4b20      	ldr	r3, [pc, #128]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	4a20      	ldr	r2, [pc, #128]	@ (8011fd4 <HAL_RCC_ClockConfig+0x27c>)
 8011f52:	4013      	ands	r3, r2
 8011f54:	0019      	movs	r1, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	68da      	ldr	r2, [r3, #12]
 8011f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011f5c:	430a      	orrs	r2, r1
 8011f5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2208      	movs	r2, #8
 8011f66:	4013      	ands	r3, r2
 8011f68:	d00a      	beq.n	8011f80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8011f6a:	4b19      	ldr	r3, [pc, #100]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8011fd8 <HAL_RCC_ClockConfig+0x280>)
 8011f70:	4013      	ands	r3, r2
 8011f72:	0019      	movs	r1, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	00da      	lsls	r2, r3, #3
 8011f7a:	4b15      	ldr	r3, [pc, #84]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011f7c:	430a      	orrs	r2, r1
 8011f7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011f80:	f000 f832 	bl	8011fe8 <HAL_RCC_GetSysClockFreq>
 8011f84:	0001      	movs	r1, r0
 8011f86:	4b12      	ldr	r3, [pc, #72]	@ (8011fd0 <HAL_RCC_ClockConfig+0x278>)
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	091b      	lsrs	r3, r3, #4
 8011f8c:	220f      	movs	r2, #15
 8011f8e:	4013      	ands	r3, r2
 8011f90:	4a12      	ldr	r2, [pc, #72]	@ (8011fdc <HAL_RCC_ClockConfig+0x284>)
 8011f92:	5cd3      	ldrb	r3, [r2, r3]
 8011f94:	000a      	movs	r2, r1
 8011f96:	40da      	lsrs	r2, r3
 8011f98:	4b11      	ldr	r3, [pc, #68]	@ (8011fe0 <HAL_RCC_ClockConfig+0x288>)
 8011f9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011f9c:	4b11      	ldr	r3, [pc, #68]	@ (8011fe4 <HAL_RCC_ClockConfig+0x28c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	250b      	movs	r5, #11
 8011fa2:	197c      	adds	r4, r7, r5
 8011fa4:	0018      	movs	r0, r3
 8011fa6:	f7f9 febf 	bl	800bd28 <HAL_InitTick>
 8011faa:	0003      	movs	r3, r0
 8011fac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8011fae:	197b      	adds	r3, r7, r5
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d002      	beq.n	8011fbc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8011fb6:	197b      	adds	r3, r7, r5
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	e000      	b.n	8011fbe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8011fbc:	2300      	movs	r3, #0
}
 8011fbe:	0018      	movs	r0, r3
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	b004      	add	sp, #16
 8011fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8011fc6:	46c0      	nop			@ (mov r8, r8)
 8011fc8:	40022000 	.word	0x40022000
 8011fcc:	00001388 	.word	0x00001388
 8011fd0:	40021000 	.word	0x40021000
 8011fd4:	fffff8ff 	.word	0xfffff8ff
 8011fd8:	ffffc7ff 	.word	0xffffc7ff
 8011fdc:	08020880 	.word	0x08020880
 8011fe0:	200000c4 	.word	0x200000c4
 8011fe4:	200000d8 	.word	0x200000d8

08011fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011fe8:	b5b0      	push	{r4, r5, r7, lr}
 8011fea:	b08e      	sub	sp, #56	@ 0x38
 8011fec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8011fee:	4b4c      	ldr	r3, [pc, #304]	@ (8012120 <HAL_RCC_GetSysClockFreq+0x138>)
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ff6:	230c      	movs	r3, #12
 8011ff8:	4013      	ands	r3, r2
 8011ffa:	2b0c      	cmp	r3, #12
 8011ffc:	d014      	beq.n	8012028 <HAL_RCC_GetSysClockFreq+0x40>
 8011ffe:	d900      	bls.n	8012002 <HAL_RCC_GetSysClockFreq+0x1a>
 8012000:	e07b      	b.n	80120fa <HAL_RCC_GetSysClockFreq+0x112>
 8012002:	2b04      	cmp	r3, #4
 8012004:	d002      	beq.n	801200c <HAL_RCC_GetSysClockFreq+0x24>
 8012006:	2b08      	cmp	r3, #8
 8012008:	d00b      	beq.n	8012022 <HAL_RCC_GetSysClockFreq+0x3a>
 801200a:	e076      	b.n	80120fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801200c:	4b44      	ldr	r3, [pc, #272]	@ (8012120 <HAL_RCC_GetSysClockFreq+0x138>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2210      	movs	r2, #16
 8012012:	4013      	ands	r3, r2
 8012014:	d002      	beq.n	801201c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8012016:	4b43      	ldr	r3, [pc, #268]	@ (8012124 <HAL_RCC_GetSysClockFreq+0x13c>)
 8012018:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801201a:	e07c      	b.n	8012116 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801201c:	4b42      	ldr	r3, [pc, #264]	@ (8012128 <HAL_RCC_GetSysClockFreq+0x140>)
 801201e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012020:	e079      	b.n	8012116 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012022:	4b42      	ldr	r3, [pc, #264]	@ (801212c <HAL_RCC_GetSysClockFreq+0x144>)
 8012024:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012026:	e076      	b.n	8012116 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8012028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801202a:	0c9a      	lsrs	r2, r3, #18
 801202c:	230f      	movs	r3, #15
 801202e:	401a      	ands	r2, r3
 8012030:	4b3f      	ldr	r3, [pc, #252]	@ (8012130 <HAL_RCC_GetSysClockFreq+0x148>)
 8012032:	5c9b      	ldrb	r3, [r3, r2]
 8012034:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8012036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012038:	0d9a      	lsrs	r2, r3, #22
 801203a:	2303      	movs	r3, #3
 801203c:	4013      	ands	r3, r2
 801203e:	3301      	adds	r3, #1
 8012040:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012042:	4b37      	ldr	r3, [pc, #220]	@ (8012120 <HAL_RCC_GetSysClockFreq+0x138>)
 8012044:	68da      	ldr	r2, [r3, #12]
 8012046:	2380      	movs	r3, #128	@ 0x80
 8012048:	025b      	lsls	r3, r3, #9
 801204a:	4013      	ands	r3, r2
 801204c:	d01a      	beq.n	8012084 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012050:	61bb      	str	r3, [r7, #24]
 8012052:	2300      	movs	r3, #0
 8012054:	61fb      	str	r3, [r7, #28]
 8012056:	4a35      	ldr	r2, [pc, #212]	@ (801212c <HAL_RCC_GetSysClockFreq+0x144>)
 8012058:	2300      	movs	r3, #0
 801205a:	69b8      	ldr	r0, [r7, #24]
 801205c:	69f9      	ldr	r1, [r7, #28]
 801205e:	f7ee faaf 	bl	80005c0 <__aeabi_lmul>
 8012062:	0002      	movs	r2, r0
 8012064:	000b      	movs	r3, r1
 8012066:	0010      	movs	r0, r2
 8012068:	0019      	movs	r1, r3
 801206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801206c:	613b      	str	r3, [r7, #16]
 801206e:	2300      	movs	r3, #0
 8012070:	617b      	str	r3, [r7, #20]
 8012072:	693a      	ldr	r2, [r7, #16]
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	f7ee fa83 	bl	8000580 <__aeabi_uldivmod>
 801207a:	0002      	movs	r2, r0
 801207c:	000b      	movs	r3, r1
 801207e:	0013      	movs	r3, r2
 8012080:	637b      	str	r3, [r7, #52]	@ 0x34
 8012082:	e037      	b.n	80120f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8012084:	4b26      	ldr	r3, [pc, #152]	@ (8012120 <HAL_RCC_GetSysClockFreq+0x138>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2210      	movs	r2, #16
 801208a:	4013      	ands	r3, r2
 801208c:	d01a      	beq.n	80120c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012090:	60bb      	str	r3, [r7, #8]
 8012092:	2300      	movs	r3, #0
 8012094:	60fb      	str	r3, [r7, #12]
 8012096:	4a23      	ldr	r2, [pc, #140]	@ (8012124 <HAL_RCC_GetSysClockFreq+0x13c>)
 8012098:	2300      	movs	r3, #0
 801209a:	68b8      	ldr	r0, [r7, #8]
 801209c:	68f9      	ldr	r1, [r7, #12]
 801209e:	f7ee fa8f 	bl	80005c0 <__aeabi_lmul>
 80120a2:	0002      	movs	r2, r0
 80120a4:	000b      	movs	r3, r1
 80120a6:	0010      	movs	r0, r2
 80120a8:	0019      	movs	r1, r3
 80120aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ac:	603b      	str	r3, [r7, #0]
 80120ae:	2300      	movs	r3, #0
 80120b0:	607b      	str	r3, [r7, #4]
 80120b2:	683a      	ldr	r2, [r7, #0]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f7ee fa63 	bl	8000580 <__aeabi_uldivmod>
 80120ba:	0002      	movs	r2, r0
 80120bc:	000b      	movs	r3, r1
 80120be:	0013      	movs	r3, r2
 80120c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80120c2:	e017      	b.n	80120f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80120c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c6:	0018      	movs	r0, r3
 80120c8:	2300      	movs	r3, #0
 80120ca:	0019      	movs	r1, r3
 80120cc:	4a16      	ldr	r2, [pc, #88]	@ (8012128 <HAL_RCC_GetSysClockFreq+0x140>)
 80120ce:	2300      	movs	r3, #0
 80120d0:	f7ee fa76 	bl	80005c0 <__aeabi_lmul>
 80120d4:	0002      	movs	r2, r0
 80120d6:	000b      	movs	r3, r1
 80120d8:	0010      	movs	r0, r2
 80120da:	0019      	movs	r1, r3
 80120dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120de:	001c      	movs	r4, r3
 80120e0:	2300      	movs	r3, #0
 80120e2:	001d      	movs	r5, r3
 80120e4:	0022      	movs	r2, r4
 80120e6:	002b      	movs	r3, r5
 80120e8:	f7ee fa4a 	bl	8000580 <__aeabi_uldivmod>
 80120ec:	0002      	movs	r2, r0
 80120ee:	000b      	movs	r3, r1
 80120f0:	0013      	movs	r3, r2
 80120f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80120f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120f6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80120f8:	e00d      	b.n	8012116 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80120fa:	4b09      	ldr	r3, [pc, #36]	@ (8012120 <HAL_RCC_GetSysClockFreq+0x138>)
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	0b5b      	lsrs	r3, r3, #13
 8012100:	2207      	movs	r2, #7
 8012102:	4013      	ands	r3, r2
 8012104:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8012106:	6a3b      	ldr	r3, [r7, #32]
 8012108:	3301      	adds	r3, #1
 801210a:	2280      	movs	r2, #128	@ 0x80
 801210c:	0212      	lsls	r2, r2, #8
 801210e:	409a      	lsls	r2, r3
 8012110:	0013      	movs	r3, r2
 8012112:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012114:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8012116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8012118:	0018      	movs	r0, r3
 801211a:	46bd      	mov	sp, r7
 801211c:	b00e      	add	sp, #56	@ 0x38
 801211e:	bdb0      	pop	{r4, r5, r7, pc}
 8012120:	40021000 	.word	0x40021000
 8012124:	003d0900 	.word	0x003d0900
 8012128:	00f42400 	.word	0x00f42400
 801212c:	007a1200 	.word	0x007a1200
 8012130:	08020898 	.word	0x08020898

08012134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012138:	4b02      	ldr	r3, [pc, #8]	@ (8012144 <HAL_RCC_GetHCLKFreq+0x10>)
 801213a:	681b      	ldr	r3, [r3, #0]
}
 801213c:	0018      	movs	r0, r3
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	46c0      	nop			@ (mov r8, r8)
 8012144:	200000c4 	.word	0x200000c4

08012148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801214c:	f7ff fff2 	bl	8012134 <HAL_RCC_GetHCLKFreq>
 8012150:	0001      	movs	r1, r0
 8012152:	4b06      	ldr	r3, [pc, #24]	@ (801216c <HAL_RCC_GetPCLK1Freq+0x24>)
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	0a1b      	lsrs	r3, r3, #8
 8012158:	2207      	movs	r2, #7
 801215a:	4013      	ands	r3, r2
 801215c:	4a04      	ldr	r2, [pc, #16]	@ (8012170 <HAL_RCC_GetPCLK1Freq+0x28>)
 801215e:	5cd3      	ldrb	r3, [r2, r3]
 8012160:	40d9      	lsrs	r1, r3
 8012162:	000b      	movs	r3, r1
}
 8012164:	0018      	movs	r0, r3
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	46c0      	nop			@ (mov r8, r8)
 801216c:	40021000 	.word	0x40021000
 8012170:	08020890 	.word	0x08020890

08012174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8012178:	f7ff ffdc 	bl	8012134 <HAL_RCC_GetHCLKFreq>
 801217c:	0001      	movs	r1, r0
 801217e:	4b06      	ldr	r3, [pc, #24]	@ (8012198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	0adb      	lsrs	r3, r3, #11
 8012184:	2207      	movs	r2, #7
 8012186:	4013      	ands	r3, r2
 8012188:	4a04      	ldr	r2, [pc, #16]	@ (801219c <HAL_RCC_GetPCLK2Freq+0x28>)
 801218a:	5cd3      	ldrb	r3, [r2, r3]
 801218c:	40d9      	lsrs	r1, r3
 801218e:	000b      	movs	r3, r1
}
 8012190:	0018      	movs	r0, r3
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	46c0      	nop			@ (mov r8, r8)
 8012198:	40021000 	.word	0x40021000
 801219c:	08020890 	.word	0x08020890

080121a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b086      	sub	sp, #24
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80121a8:	2017      	movs	r0, #23
 80121aa:	183b      	adds	r3, r7, r0
 80121ac:	2200      	movs	r2, #0
 80121ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2220      	movs	r2, #32
 80121b6:	4013      	ands	r3, r2
 80121b8:	d100      	bne.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80121ba:	e0c7      	b.n	801234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80121bc:	4b9b      	ldr	r3, [pc, #620]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121c0:	2380      	movs	r3, #128	@ 0x80
 80121c2:	055b      	lsls	r3, r3, #21
 80121c4:	4013      	ands	r3, r2
 80121c6:	d109      	bne.n	80121dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80121c8:	4b98      	ldr	r3, [pc, #608]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121cc:	4b97      	ldr	r3, [pc, #604]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80121ce:	2180      	movs	r1, #128	@ 0x80
 80121d0:	0549      	lsls	r1, r1, #21
 80121d2:	430a      	orrs	r2, r1
 80121d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80121d6:	183b      	adds	r3, r7, r0
 80121d8:	2201      	movs	r2, #1
 80121da:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80121dc:	4b94      	ldr	r3, [pc, #592]	@ (8012430 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	2380      	movs	r3, #128	@ 0x80
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	4013      	ands	r3, r2
 80121e6:	d11a      	bne.n	801221e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80121e8:	4b91      	ldr	r3, [pc, #580]	@ (8012430 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	4b90      	ldr	r3, [pc, #576]	@ (8012430 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80121ee:	2180      	movs	r1, #128	@ 0x80
 80121f0:	0049      	lsls	r1, r1, #1
 80121f2:	430a      	orrs	r2, r1
 80121f4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80121f6:	f7f9 fddd 	bl	800bdb4 <HAL_GetTick>
 80121fa:	0003      	movs	r3, r0
 80121fc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80121fe:	e008      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012200:	f7f9 fdd8 	bl	800bdb4 <HAL_GetTick>
 8012204:	0002      	movs	r2, r0
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	1ad3      	subs	r3, r2, r3
 801220a:	2b64      	cmp	r3, #100	@ 0x64
 801220c:	d901      	bls.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801220e:	2303      	movs	r3, #3
 8012210:	e107      	b.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012212:	4b87      	ldr	r3, [pc, #540]	@ (8012430 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	2380      	movs	r3, #128	@ 0x80
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	4013      	ands	r3, r2
 801221c:	d0f0      	beq.n	8012200 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801221e:	4b83      	ldr	r3, [pc, #524]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	23c0      	movs	r3, #192	@ 0xc0
 8012224:	039b      	lsls	r3, r3, #14
 8012226:	4013      	ands	r3, r2
 8012228:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	23c0      	movs	r3, #192	@ 0xc0
 8012230:	039b      	lsls	r3, r3, #14
 8012232:	4013      	ands	r3, r2
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	429a      	cmp	r2, r3
 8012238:	d013      	beq.n	8012262 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	685a      	ldr	r2, [r3, #4]
 801223e:	23c0      	movs	r3, #192	@ 0xc0
 8012240:	029b      	lsls	r3, r3, #10
 8012242:	401a      	ands	r2, r3
 8012244:	23c0      	movs	r3, #192	@ 0xc0
 8012246:	029b      	lsls	r3, r3, #10
 8012248:	429a      	cmp	r2, r3
 801224a:	d10a      	bne.n	8012262 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801224c:	4b77      	ldr	r3, [pc, #476]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	2380      	movs	r3, #128	@ 0x80
 8012252:	029b      	lsls	r3, r3, #10
 8012254:	401a      	ands	r2, r3
 8012256:	2380      	movs	r3, #128	@ 0x80
 8012258:	029b      	lsls	r3, r3, #10
 801225a:	429a      	cmp	r2, r3
 801225c:	d101      	bne.n	8012262 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801225e:	2301      	movs	r3, #1
 8012260:	e0df      	b.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8012262:	4b72      	ldr	r3, [pc, #456]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012264:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012266:	23c0      	movs	r3, #192	@ 0xc0
 8012268:	029b      	lsls	r3, r3, #10
 801226a:	4013      	ands	r3, r2
 801226c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d03b      	beq.n	80122ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	685a      	ldr	r2, [r3, #4]
 8012278:	23c0      	movs	r3, #192	@ 0xc0
 801227a:	029b      	lsls	r3, r3, #10
 801227c:	4013      	ands	r3, r2
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	429a      	cmp	r2, r3
 8012282:	d033      	beq.n	80122ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2220      	movs	r2, #32
 801228a:	4013      	ands	r3, r2
 801228c:	d02e      	beq.n	80122ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801228e:	4b67      	ldr	r3, [pc, #412]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012292:	4a68      	ldr	r2, [pc, #416]	@ (8012434 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8012294:	4013      	ands	r3, r2
 8012296:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012298:	4b64      	ldr	r3, [pc, #400]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801229a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801229c:	4b63      	ldr	r3, [pc, #396]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801229e:	2180      	movs	r1, #128	@ 0x80
 80122a0:	0309      	lsls	r1, r1, #12
 80122a2:	430a      	orrs	r2, r1
 80122a4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80122a6:	4b61      	ldr	r3, [pc, #388]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80122aa:	4b60      	ldr	r3, [pc, #384]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122ac:	4962      	ldr	r1, [pc, #392]	@ (8012438 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80122ae:	400a      	ands	r2, r1
 80122b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80122b2:	4b5e      	ldr	r3, [pc, #376]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80122b8:	68fa      	ldr	r2, [r7, #12]
 80122ba:	2380      	movs	r3, #128	@ 0x80
 80122bc:	005b      	lsls	r3, r3, #1
 80122be:	4013      	ands	r3, r2
 80122c0:	d014      	beq.n	80122ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80122c2:	f7f9 fd77 	bl	800bdb4 <HAL_GetTick>
 80122c6:	0003      	movs	r3, r0
 80122c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80122ca:	e009      	b.n	80122e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80122cc:	f7f9 fd72 	bl	800bdb4 <HAL_GetTick>
 80122d0:	0002      	movs	r2, r0
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	4a59      	ldr	r2, [pc, #356]	@ (801243c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80122d8:	4293      	cmp	r3, r2
 80122da:	d901      	bls.n	80122e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80122dc:	2303      	movs	r3, #3
 80122de:	e0a0      	b.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80122e0:	4b52      	ldr	r3, [pc, #328]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80122e4:	2380      	movs	r3, #128	@ 0x80
 80122e6:	009b      	lsls	r3, r3, #2
 80122e8:	4013      	ands	r3, r2
 80122ea:	d0ef      	beq.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2220      	movs	r2, #32
 80122f2:	4013      	ands	r3, r2
 80122f4:	d01f      	beq.n	8012336 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	685a      	ldr	r2, [r3, #4]
 80122fa:	23c0      	movs	r3, #192	@ 0xc0
 80122fc:	029b      	lsls	r3, r3, #10
 80122fe:	401a      	ands	r2, r3
 8012300:	23c0      	movs	r3, #192	@ 0xc0
 8012302:	029b      	lsls	r3, r3, #10
 8012304:	429a      	cmp	r2, r3
 8012306:	d10c      	bne.n	8012322 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8012308:	4b48      	ldr	r3, [pc, #288]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	4a4c      	ldr	r2, [pc, #304]	@ (8012440 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801230e:	4013      	ands	r3, r2
 8012310:	0019      	movs	r1, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	685a      	ldr	r2, [r3, #4]
 8012316:	23c0      	movs	r3, #192	@ 0xc0
 8012318:	039b      	lsls	r3, r3, #14
 801231a:	401a      	ands	r2, r3
 801231c:	4b43      	ldr	r3, [pc, #268]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801231e:	430a      	orrs	r2, r1
 8012320:	601a      	str	r2, [r3, #0]
 8012322:	4b42      	ldr	r3, [pc, #264]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012324:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	685a      	ldr	r2, [r3, #4]
 801232a:	23c0      	movs	r3, #192	@ 0xc0
 801232c:	029b      	lsls	r3, r3, #10
 801232e:	401a      	ands	r2, r3
 8012330:	4b3e      	ldr	r3, [pc, #248]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012332:	430a      	orrs	r2, r1
 8012334:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8012336:	2317      	movs	r3, #23
 8012338:	18fb      	adds	r3, r7, r3
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d105      	bne.n	801234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012340:	4b3a      	ldr	r3, [pc, #232]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012344:	4b39      	ldr	r3, [pc, #228]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012346:	493f      	ldr	r1, [pc, #252]	@ (8012444 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8012348:	400a      	ands	r2, r1
 801234a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2201      	movs	r2, #1
 8012352:	4013      	ands	r3, r2
 8012354:	d009      	beq.n	801236a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012356:	4b35      	ldr	r3, [pc, #212]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801235a:	2203      	movs	r2, #3
 801235c:	4393      	bics	r3, r2
 801235e:	0019      	movs	r1, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	689a      	ldr	r2, [r3, #8]
 8012364:	4b31      	ldr	r3, [pc, #196]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012366:	430a      	orrs	r2, r1
 8012368:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2202      	movs	r2, #2
 8012370:	4013      	ands	r3, r2
 8012372:	d009      	beq.n	8012388 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012374:	4b2d      	ldr	r3, [pc, #180]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012378:	220c      	movs	r2, #12
 801237a:	4393      	bics	r3, r2
 801237c:	0019      	movs	r1, r3
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	68da      	ldr	r2, [r3, #12]
 8012382:	4b2a      	ldr	r3, [pc, #168]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012384:	430a      	orrs	r2, r1
 8012386:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	2204      	movs	r2, #4
 801238e:	4013      	ands	r3, r2
 8012390:	d009      	beq.n	80123a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012392:	4b26      	ldr	r3, [pc, #152]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012396:	4a2c      	ldr	r2, [pc, #176]	@ (8012448 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8012398:	4013      	ands	r3, r2
 801239a:	0019      	movs	r1, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	691a      	ldr	r2, [r3, #16]
 80123a0:	4b22      	ldr	r3, [pc, #136]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123a2:	430a      	orrs	r2, r1
 80123a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	2208      	movs	r2, #8
 80123ac:	4013      	ands	r3, r2
 80123ae:	d009      	beq.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80123b0:	4b1e      	ldr	r3, [pc, #120]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123b4:	4a25      	ldr	r2, [pc, #148]	@ (801244c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80123b6:	4013      	ands	r3, r2
 80123b8:	0019      	movs	r1, r3
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	695a      	ldr	r2, [r3, #20]
 80123be:	4b1b      	ldr	r3, [pc, #108]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123c0:	430a      	orrs	r2, r1
 80123c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	2380      	movs	r3, #128	@ 0x80
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	4013      	ands	r3, r2
 80123ce:	d009      	beq.n	80123e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80123d0:	4b16      	ldr	r3, [pc, #88]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123d4:	4a17      	ldr	r2, [pc, #92]	@ (8012434 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80123d6:	4013      	ands	r3, r2
 80123d8:	0019      	movs	r1, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	699a      	ldr	r2, [r3, #24]
 80123de:	4b13      	ldr	r3, [pc, #76]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123e0:	430a      	orrs	r2, r1
 80123e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	2240      	movs	r2, #64	@ 0x40
 80123ea:	4013      	ands	r3, r2
 80123ec:	d009      	beq.n	8012402 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80123ee:	4b0f      	ldr	r3, [pc, #60]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123f2:	4a17      	ldr	r2, [pc, #92]	@ (8012450 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80123f4:	4013      	ands	r3, r2
 80123f6:	0019      	movs	r1, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6a1a      	ldr	r2, [r3, #32]
 80123fc:	4b0b      	ldr	r3, [pc, #44]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123fe:	430a      	orrs	r2, r1
 8012400:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2280      	movs	r2, #128	@ 0x80
 8012408:	4013      	ands	r3, r2
 801240a:	d009      	beq.n	8012420 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801240c:	4b07      	ldr	r3, [pc, #28]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801240e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012410:	4a10      	ldr	r2, [pc, #64]	@ (8012454 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8012412:	4013      	ands	r3, r2
 8012414:	0019      	movs	r1, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	69da      	ldr	r2, [r3, #28]
 801241a:	4b04      	ldr	r3, [pc, #16]	@ (801242c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801241c:	430a      	orrs	r2, r1
 801241e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012420:	2300      	movs	r3, #0
}
 8012422:	0018      	movs	r0, r3
 8012424:	46bd      	mov	sp, r7
 8012426:	b006      	add	sp, #24
 8012428:	bd80      	pop	{r7, pc}
 801242a:	46c0      	nop			@ (mov r8, r8)
 801242c:	40021000 	.word	0x40021000
 8012430:	40007000 	.word	0x40007000
 8012434:	fffcffff 	.word	0xfffcffff
 8012438:	fff7ffff 	.word	0xfff7ffff
 801243c:	00001388 	.word	0x00001388
 8012440:	ffcfffff 	.word	0xffcfffff
 8012444:	efffffff 	.word	0xefffffff
 8012448:	fffff3ff 	.word	0xfffff3ff
 801244c:	ffffcfff 	.word	0xffffcfff
 8012450:	fbffffff 	.word	0xfbffffff
 8012454:	fff3ffff 	.word	0xfff3ffff

08012458 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012458:	b5b0      	push	{r4, r5, r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012460:	230f      	movs	r3, #15
 8012462:	18fb      	adds	r3, r7, r3
 8012464:	2201      	movs	r2, #1
 8012466:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d101      	bne.n	8012472 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801246e:	2301      	movs	r3, #1
 8012470:	e088      	b.n	8012584 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2221      	movs	r2, #33	@ 0x21
 8012476:	5c9b      	ldrb	r3, [r3, r2]
 8012478:	b2db      	uxtb	r3, r3
 801247a:	2b00      	cmp	r3, #0
 801247c:	d107      	bne.n	801248e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2220      	movs	r2, #32
 8012482:	2100      	movs	r1, #0
 8012484:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	0018      	movs	r0, r3
 801248a:	f7f5 fd9b 	bl	8007fc4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2221      	movs	r2, #33	@ 0x21
 8012492:	2102      	movs	r1, #2
 8012494:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	2210      	movs	r2, #16
 801249e:	4013      	ands	r3, r2
 80124a0:	2b10      	cmp	r3, #16
 80124a2:	d05f      	beq.n	8012564 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	22ca      	movs	r2, #202	@ 0xca
 80124aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2253      	movs	r2, #83	@ 0x53
 80124b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80124b4:	250f      	movs	r5, #15
 80124b6:	197c      	adds	r4, r7, r5
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	0018      	movs	r0, r3
 80124bc:	f000 fa7c 	bl	80129b8 <RTC_EnterInitMode>
 80124c0:	0003      	movs	r3, r0
 80124c2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80124c4:	0028      	movs	r0, r5
 80124c6:	183b      	adds	r3, r7, r0
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d12c      	bne.n	8012528 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	689a      	ldr	r2, [r3, #8]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	492c      	ldr	r1, [pc, #176]	@ (801258c <HAL_RTC_Init+0x134>)
 80124da:	400a      	ands	r2, r1
 80124dc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6899      	ldr	r1, [r3, #8]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685a      	ldr	r2, [r3, #4]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	691b      	ldr	r3, [r3, #16]
 80124ec:	431a      	orrs	r2, r3
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	431a      	orrs	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	430a      	orrs	r2, r1
 80124fa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	687a      	ldr	r2, [r7, #4]
 8012502:	68d2      	ldr	r2, [r2, #12]
 8012504:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	6919      	ldr	r1, [r3, #16]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	041a      	lsls	r2, r3, #16
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	430a      	orrs	r2, r1
 8012518:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801251a:	183c      	adds	r4, r7, r0
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	0018      	movs	r0, r3
 8012520:	f000 fa8e 	bl	8012a40 <RTC_ExitInitMode>
 8012524:	0003      	movs	r3, r0
 8012526:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8012528:	230f      	movs	r3, #15
 801252a:	18fb      	adds	r3, r7, r3
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d113      	bne.n	801255a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2103      	movs	r1, #3
 801253e:	438a      	bics	r2, r1
 8012540:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	69da      	ldr	r2, [r3, #28]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	695b      	ldr	r3, [r3, #20]
 8012550:	431a      	orrs	r2, r3
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	430a      	orrs	r2, r1
 8012558:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	22ff      	movs	r2, #255	@ 0xff
 8012560:	625a      	str	r2, [r3, #36]	@ 0x24
 8012562:	e003      	b.n	801256c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8012564:	230f      	movs	r3, #15
 8012566:	18fb      	adds	r3, r7, r3
 8012568:	2200      	movs	r2, #0
 801256a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801256c:	230f      	movs	r3, #15
 801256e:	18fb      	adds	r3, r7, r3
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d103      	bne.n	801257e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2221      	movs	r2, #33	@ 0x21
 801257a:	2101      	movs	r1, #1
 801257c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801257e:	230f      	movs	r3, #15
 8012580:	18fb      	adds	r3, r7, r3
 8012582:	781b      	ldrb	r3, [r3, #0]
}
 8012584:	0018      	movs	r0, r3
 8012586:	46bd      	mov	sp, r7
 8012588:	b004      	add	sp, #16
 801258a:	bdb0      	pop	{r4, r5, r7, pc}
 801258c:	ff8fffbf 	.word	0xff8fffbf

08012590 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012590:	b5b0      	push	{r4, r5, r7, lr}
 8012592:	b086      	sub	sp, #24
 8012594:	af00      	add	r7, sp, #0
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801259c:	2300      	movs	r3, #0
 801259e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2220      	movs	r2, #32
 80125a4:	5c9b      	ldrb	r3, [r3, r2]
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	d101      	bne.n	80125ae <HAL_RTC_SetTime+0x1e>
 80125aa:	2302      	movs	r3, #2
 80125ac:	e092      	b.n	80126d4 <HAL_RTC_SetTime+0x144>
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2220      	movs	r2, #32
 80125b2:	2101      	movs	r1, #1
 80125b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	2221      	movs	r2, #33	@ 0x21
 80125ba:	2102      	movs	r1, #2
 80125bc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d125      	bne.n	8012610 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	689b      	ldr	r3, [r3, #8]
 80125ca:	2240      	movs	r2, #64	@ 0x40
 80125cc:	4013      	ands	r3, r2
 80125ce:	d102      	bne.n	80125d6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	2200      	movs	r2, #0
 80125d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	0018      	movs	r0, r3
 80125dc:	f000 fa5a 	bl	8012a94 <RTC_ByteToBcd2>
 80125e0:	0003      	movs	r3, r0
 80125e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	785b      	ldrb	r3, [r3, #1]
 80125e8:	0018      	movs	r0, r3
 80125ea:	f000 fa53 	bl	8012a94 <RTC_ByteToBcd2>
 80125ee:	0003      	movs	r3, r0
 80125f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80125f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	789b      	ldrb	r3, [r3, #2]
 80125f8:	0018      	movs	r0, r3
 80125fa:	f000 fa4b 	bl	8012a94 <RTC_ByteToBcd2>
 80125fe:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012600:	0022      	movs	r2, r4
 8012602:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	78db      	ldrb	r3, [r3, #3]
 8012608:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801260a:	4313      	orrs	r3, r2
 801260c:	617b      	str	r3, [r7, #20]
 801260e:	e017      	b.n	8012640 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	689b      	ldr	r3, [r3, #8]
 8012616:	2240      	movs	r2, #64	@ 0x40
 8012618:	4013      	ands	r3, r2
 801261a:	d102      	bne.n	8012622 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	2200      	movs	r2, #0
 8012620:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	785b      	ldrb	r3, [r3, #1]
 801262c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801262e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8012630:	68ba      	ldr	r2, [r7, #8]
 8012632:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8012634:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	78db      	ldrb	r3, [r3, #3]
 801263a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801263c:	4313      	orrs	r3, r2
 801263e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	22ca      	movs	r2, #202	@ 0xca
 8012646:	625a      	str	r2, [r3, #36]	@ 0x24
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2253      	movs	r2, #83	@ 0x53
 801264e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012650:	2513      	movs	r5, #19
 8012652:	197c      	adds	r4, r7, r5
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	0018      	movs	r0, r3
 8012658:	f000 f9ae 	bl	80129b8 <RTC_EnterInitMode>
 801265c:	0003      	movs	r3, r0
 801265e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012660:	0028      	movs	r0, r5
 8012662:	183b      	adds	r3, r7, r0
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d120      	bne.n	80126ac <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	697a      	ldr	r2, [r7, #20]
 8012670:	491a      	ldr	r1, [pc, #104]	@ (80126dc <HAL_RTC_SetTime+0x14c>)
 8012672:	400a      	ands	r2, r1
 8012674:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	689a      	ldr	r2, [r3, #8]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4917      	ldr	r1, [pc, #92]	@ (80126e0 <HAL_RTC_SetTime+0x150>)
 8012682:	400a      	ands	r2, r1
 8012684:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6899      	ldr	r1, [r3, #8]
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	68da      	ldr	r2, [r3, #12]
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	691b      	ldr	r3, [r3, #16]
 8012694:	431a      	orrs	r2, r3
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	430a      	orrs	r2, r1
 801269c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801269e:	183c      	adds	r4, r7, r0
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	0018      	movs	r0, r3
 80126a4:	f000 f9cc 	bl	8012a40 <RTC_ExitInitMode>
 80126a8:	0003      	movs	r3, r0
 80126aa:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80126ac:	2313      	movs	r3, #19
 80126ae:	18fb      	adds	r3, r7, r3
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d103      	bne.n	80126be <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2221      	movs	r2, #33	@ 0x21
 80126ba:	2101      	movs	r1, #1
 80126bc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	22ff      	movs	r2, #255	@ 0xff
 80126c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2220      	movs	r2, #32
 80126ca:	2100      	movs	r1, #0
 80126cc:	5499      	strb	r1, [r3, r2]

  return status;
 80126ce:	2313      	movs	r3, #19
 80126d0:	18fb      	adds	r3, r7, r3
 80126d2:	781b      	ldrb	r3, [r3, #0]
}
 80126d4:	0018      	movs	r0, r3
 80126d6:	46bd      	mov	sp, r7
 80126d8:	b006      	add	sp, #24
 80126da:	bdb0      	pop	{r4, r5, r7, pc}
 80126dc:	007f7f7f 	.word	0x007f7f7f
 80126e0:	fffbffff 	.word	0xfffbffff

080126e4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b086      	sub	sp, #24
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80126f0:	2300      	movs	r3, #0
 80126f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	691b      	ldr	r3, [r3, #16]
 8012704:	045b      	lsls	r3, r3, #17
 8012706:	0c5a      	lsrs	r2, r3, #17
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a22      	ldr	r2, [pc, #136]	@ (801279c <HAL_RTC_GetTime+0xb8>)
 8012714:	4013      	ands	r3, r2
 8012716:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	0c1b      	lsrs	r3, r3, #16
 801271c:	b2db      	uxtb	r3, r3
 801271e:	223f      	movs	r2, #63	@ 0x3f
 8012720:	4013      	ands	r3, r2
 8012722:	b2da      	uxtb	r2, r3
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	0a1b      	lsrs	r3, r3, #8
 801272c:	b2db      	uxtb	r3, r3
 801272e:	227f      	movs	r2, #127	@ 0x7f
 8012730:	4013      	ands	r3, r2
 8012732:	b2da      	uxtb	r2, r3
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	b2db      	uxtb	r3, r3
 801273c:	227f      	movs	r2, #127	@ 0x7f
 801273e:	4013      	ands	r3, r2
 8012740:	b2da      	uxtb	r2, r3
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	0d9b      	lsrs	r3, r3, #22
 801274a:	b2db      	uxtb	r3, r3
 801274c:	2201      	movs	r2, #1
 801274e:	4013      	ands	r3, r2
 8012750:	b2da      	uxtb	r2, r3
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d11a      	bne.n	8012792 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	0018      	movs	r0, r3
 8012762:	f000 f9b8 	bl	8012ad6 <RTC_Bcd2ToByte>
 8012766:	0003      	movs	r3, r0
 8012768:	001a      	movs	r2, r3
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	785b      	ldrb	r3, [r3, #1]
 8012772:	0018      	movs	r0, r3
 8012774:	f000 f9af 	bl	8012ad6 <RTC_Bcd2ToByte>
 8012778:	0003      	movs	r3, r0
 801277a:	001a      	movs	r2, r3
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	789b      	ldrb	r3, [r3, #2]
 8012784:	0018      	movs	r0, r3
 8012786:	f000 f9a6 	bl	8012ad6 <RTC_Bcd2ToByte>
 801278a:	0003      	movs	r3, r0
 801278c:	001a      	movs	r2, r3
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012792:	2300      	movs	r3, #0
}
 8012794:	0018      	movs	r0, r3
 8012796:	46bd      	mov	sp, r7
 8012798:	b006      	add	sp, #24
 801279a:	bd80      	pop	{r7, pc}
 801279c:	007f7f7f 	.word	0x007f7f7f

080127a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80127a0:	b5b0      	push	{r4, r5, r7, lr}
 80127a2:	b086      	sub	sp, #24
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80127ac:	2300      	movs	r3, #0
 80127ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2220      	movs	r2, #32
 80127b4:	5c9b      	ldrb	r3, [r3, r2]
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	d101      	bne.n	80127be <HAL_RTC_SetDate+0x1e>
 80127ba:	2302      	movs	r3, #2
 80127bc:	e07e      	b.n	80128bc <HAL_RTC_SetDate+0x11c>
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2220      	movs	r2, #32
 80127c2:	2101      	movs	r1, #1
 80127c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2221      	movs	r2, #33	@ 0x21
 80127ca:	2102      	movs	r1, #2
 80127cc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d10e      	bne.n	80127f2 <HAL_RTC_SetDate+0x52>
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	785b      	ldrb	r3, [r3, #1]
 80127d8:	001a      	movs	r2, r3
 80127da:	2310      	movs	r3, #16
 80127dc:	4013      	ands	r3, r2
 80127de:	d008      	beq.n	80127f2 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	785b      	ldrb	r3, [r3, #1]
 80127e4:	2210      	movs	r2, #16
 80127e6:	4393      	bics	r3, r2
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	330a      	adds	r3, #10
 80127ec:	b2da      	uxtb	r2, r3
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d11c      	bne.n	8012832 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	78db      	ldrb	r3, [r3, #3]
 80127fc:	0018      	movs	r0, r3
 80127fe:	f000 f949 	bl	8012a94 <RTC_ByteToBcd2>
 8012802:	0003      	movs	r3, r0
 8012804:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	785b      	ldrb	r3, [r3, #1]
 801280a:	0018      	movs	r0, r3
 801280c:	f000 f942 	bl	8012a94 <RTC_ByteToBcd2>
 8012810:	0003      	movs	r3, r0
 8012812:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012814:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	789b      	ldrb	r3, [r3, #2]
 801281a:	0018      	movs	r0, r3
 801281c:	f000 f93a 	bl	8012a94 <RTC_ByteToBcd2>
 8012820:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012822:	0022      	movs	r2, r4
 8012824:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801282c:	4313      	orrs	r3, r2
 801282e:	617b      	str	r3, [r7, #20]
 8012830:	e00e      	b.n	8012850 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	78db      	ldrb	r3, [r3, #3]
 8012836:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	785b      	ldrb	r3, [r3, #1]
 801283c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801283e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8012840:	68ba      	ldr	r2, [r7, #8]
 8012842:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012844:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801284c:	4313      	orrs	r3, r2
 801284e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	22ca      	movs	r2, #202	@ 0xca
 8012856:	625a      	str	r2, [r3, #36]	@ 0x24
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2253      	movs	r2, #83	@ 0x53
 801285e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012860:	2513      	movs	r5, #19
 8012862:	197c      	adds	r4, r7, r5
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	0018      	movs	r0, r3
 8012868:	f000 f8a6 	bl	80129b8 <RTC_EnterInitMode>
 801286c:	0003      	movs	r3, r0
 801286e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012870:	0028      	movs	r0, r5
 8012872:	183b      	adds	r3, r7, r0
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d10c      	bne.n	8012894 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	697a      	ldr	r2, [r7, #20]
 8012880:	4910      	ldr	r1, [pc, #64]	@ (80128c4 <HAL_RTC_SetDate+0x124>)
 8012882:	400a      	ands	r2, r1
 8012884:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012886:	183c      	adds	r4, r7, r0
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	0018      	movs	r0, r3
 801288c:	f000 f8d8 	bl	8012a40 <RTC_ExitInitMode>
 8012890:	0003      	movs	r3, r0
 8012892:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8012894:	2313      	movs	r3, #19
 8012896:	18fb      	adds	r3, r7, r3
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d103      	bne.n	80128a6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	2221      	movs	r2, #33	@ 0x21
 80128a2:	2101      	movs	r1, #1
 80128a4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	22ff      	movs	r2, #255	@ 0xff
 80128ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2220      	movs	r2, #32
 80128b2:	2100      	movs	r1, #0
 80128b4:	5499      	strb	r1, [r3, r2]

  return status;
 80128b6:	2313      	movs	r3, #19
 80128b8:	18fb      	adds	r3, r7, r3
 80128ba:	781b      	ldrb	r3, [r3, #0]
}
 80128bc:	0018      	movs	r0, r3
 80128be:	46bd      	mov	sp, r7
 80128c0:	b006      	add	sp, #24
 80128c2:	bdb0      	pop	{r4, r5, r7, pc}
 80128c4:	00ffff3f 	.word	0x00ffff3f

080128c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b086      	sub	sp, #24
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	60b9      	str	r1, [r7, #8]
 80128d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80128d4:	2300      	movs	r3, #0
 80128d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	4a21      	ldr	r2, [pc, #132]	@ (8012964 <HAL_RTC_GetDate+0x9c>)
 80128e0:	4013      	ands	r3, r2
 80128e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	0c1b      	lsrs	r3, r3, #16
 80128e8:	b2da      	uxtb	r2, r3
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	0a1b      	lsrs	r3, r3, #8
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	221f      	movs	r2, #31
 80128f6:	4013      	ands	r3, r2
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	b2db      	uxtb	r3, r3
 8012902:	223f      	movs	r2, #63	@ 0x3f
 8012904:	4013      	ands	r3, r2
 8012906:	b2da      	uxtb	r2, r3
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	0b5b      	lsrs	r3, r3, #13
 8012910:	b2db      	uxtb	r3, r3
 8012912:	2207      	movs	r2, #7
 8012914:	4013      	ands	r3, r2
 8012916:	b2da      	uxtb	r2, r3
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d11a      	bne.n	8012958 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	78db      	ldrb	r3, [r3, #3]
 8012926:	0018      	movs	r0, r3
 8012928:	f000 f8d5 	bl	8012ad6 <RTC_Bcd2ToByte>
 801292c:	0003      	movs	r3, r0
 801292e:	001a      	movs	r2, r3
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	785b      	ldrb	r3, [r3, #1]
 8012938:	0018      	movs	r0, r3
 801293a:	f000 f8cc 	bl	8012ad6 <RTC_Bcd2ToByte>
 801293e:	0003      	movs	r3, r0
 8012940:	001a      	movs	r2, r3
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	789b      	ldrb	r3, [r3, #2]
 801294a:	0018      	movs	r0, r3
 801294c:	f000 f8c3 	bl	8012ad6 <RTC_Bcd2ToByte>
 8012950:	0003      	movs	r3, r0
 8012952:	001a      	movs	r2, r3
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	0018      	movs	r0, r3
 801295c:	46bd      	mov	sp, r7
 801295e:	b006      	add	sp, #24
 8012960:	bd80      	pop	{r7, pc}
 8012962:	46c0      	nop			@ (mov r8, r8)
 8012964:	00ffff3f 	.word	0x00ffff3f

08012968 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012970:	2300      	movs	r3, #0
 8012972:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	4a0e      	ldr	r2, [pc, #56]	@ (80129b4 <HAL_RTC_WaitForSynchro+0x4c>)
 801297a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801297c:	f7f9 fa1a 	bl	800bdb4 <HAL_GetTick>
 8012980:	0003      	movs	r3, r0
 8012982:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012984:	e00a      	b.n	801299c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012986:	f7f9 fa15 	bl	800bdb4 <HAL_GetTick>
 801298a:	0002      	movs	r2, r0
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	1ad2      	subs	r2, r2, r3
 8012990:	23fa      	movs	r3, #250	@ 0xfa
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	429a      	cmp	r2, r3
 8012996:	d901      	bls.n	801299c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012998:	2303      	movs	r3, #3
 801299a:	e006      	b.n	80129aa <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	2220      	movs	r2, #32
 80129a4:	4013      	ands	r3, r2
 80129a6:	d0ee      	beq.n	8012986 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	0018      	movs	r0, r3
 80129ac:	46bd      	mov	sp, r7
 80129ae:	b004      	add	sp, #16
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	46c0      	nop			@ (mov r8, r8)
 80129b4:	0001ff5f 	.word	0x0001ff5f

080129b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80129c0:	2300      	movs	r3, #0
 80129c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80129c4:	230f      	movs	r3, #15
 80129c6:	18fb      	adds	r3, r7, r3
 80129c8:	2200      	movs	r2, #0
 80129ca:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	68db      	ldr	r3, [r3, #12]
 80129d2:	2240      	movs	r2, #64	@ 0x40
 80129d4:	4013      	ands	r3, r2
 80129d6:	d12c      	bne.n	8012a32 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	68da      	ldr	r2, [r3, #12]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2180      	movs	r1, #128	@ 0x80
 80129e4:	430a      	orrs	r2, r1
 80129e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80129e8:	f7f9 f9e4 	bl	800bdb4 <HAL_GetTick>
 80129ec:	0003      	movs	r3, r0
 80129ee:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80129f0:	e014      	b.n	8012a1c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80129f2:	f7f9 f9df 	bl	800bdb4 <HAL_GetTick>
 80129f6:	0002      	movs	r2, r0
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	1ad2      	subs	r2, r2, r3
 80129fc:	200f      	movs	r0, #15
 80129fe:	183b      	adds	r3, r7, r0
 8012a00:	1839      	adds	r1, r7, r0
 8012a02:	7809      	ldrb	r1, [r1, #0]
 8012a04:	7019      	strb	r1, [r3, #0]
 8012a06:	23fa      	movs	r3, #250	@ 0xfa
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d906      	bls.n	8012a1c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2221      	movs	r2, #33	@ 0x21
 8012a12:	2104      	movs	r1, #4
 8012a14:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8012a16:	183b      	adds	r3, r7, r0
 8012a18:	2201      	movs	r2, #1
 8012a1a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	2240      	movs	r2, #64	@ 0x40
 8012a24:	4013      	ands	r3, r2
 8012a26:	d104      	bne.n	8012a32 <RTC_EnterInitMode+0x7a>
 8012a28:	230f      	movs	r3, #15
 8012a2a:	18fb      	adds	r3, r7, r3
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	2b01      	cmp	r3, #1
 8012a30:	d1df      	bne.n	80129f2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8012a32:	230f      	movs	r3, #15
 8012a34:	18fb      	adds	r3, r7, r3
 8012a36:	781b      	ldrb	r3, [r3, #0]
}
 8012a38:	0018      	movs	r0, r3
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	b004      	add	sp, #16
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012a40:	b590      	push	{r4, r7, lr}
 8012a42:	b085      	sub	sp, #20
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012a48:	240f      	movs	r4, #15
 8012a4a:	193b      	adds	r3, r7, r4
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	68da      	ldr	r2, [r3, #12]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2180      	movs	r1, #128	@ 0x80
 8012a5c:	438a      	bics	r2, r1
 8012a5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	689b      	ldr	r3, [r3, #8]
 8012a66:	2220      	movs	r2, #32
 8012a68:	4013      	ands	r3, r2
 8012a6a:	d10c      	bne.n	8012a86 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	0018      	movs	r0, r3
 8012a70:	f7ff ff7a 	bl	8012968 <HAL_RTC_WaitForSynchro>
 8012a74:	1e03      	subs	r3, r0, #0
 8012a76:	d006      	beq.n	8012a86 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2221      	movs	r2, #33	@ 0x21
 8012a7c:	2104      	movs	r1, #4
 8012a7e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8012a80:	193b      	adds	r3, r7, r4
 8012a82:	2201      	movs	r2, #1
 8012a84:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8012a86:	230f      	movs	r3, #15
 8012a88:	18fb      	adds	r3, r7, r3
 8012a8a:	781b      	ldrb	r3, [r3, #0]
}
 8012a8c:	0018      	movs	r0, r3
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	b005      	add	sp, #20
 8012a92:	bd90      	pop	{r4, r7, pc}

08012a94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	0002      	movs	r2, r0
 8012a9c:	1dfb      	adds	r3, r7, #7
 8012a9e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8012aa4:	e007      	b.n	8012ab6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8012aac:	1dfb      	adds	r3, r7, #7
 8012aae:	1dfa      	adds	r2, r7, #7
 8012ab0:	7812      	ldrb	r2, [r2, #0]
 8012ab2:	3a0a      	subs	r2, #10
 8012ab4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8012ab6:	1dfb      	adds	r3, r7, #7
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	2b09      	cmp	r3, #9
 8012abc:	d8f3      	bhi.n	8012aa6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	011b      	lsls	r3, r3, #4
 8012ac4:	b2da      	uxtb	r2, r3
 8012ac6:	1dfb      	adds	r3, r7, #7
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	4313      	orrs	r3, r2
 8012acc:	b2db      	uxtb	r3, r3
}
 8012ace:	0018      	movs	r0, r3
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	b004      	add	sp, #16
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b084      	sub	sp, #16
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	0002      	movs	r2, r0
 8012ade:	1dfb      	adds	r3, r7, #7
 8012ae0:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8012ae6:	1dfb      	adds	r3, r7, #7
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	091b      	lsrs	r3, r3, #4
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	001a      	movs	r2, r3
 8012af0:	0013      	movs	r3, r2
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	189b      	adds	r3, r3, r2
 8012af6:	005b      	lsls	r3, r3, #1
 8012af8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	b2da      	uxtb	r2, r3
 8012afe:	1dfb      	adds	r3, r7, #7
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	210f      	movs	r1, #15
 8012b04:	400b      	ands	r3, r1
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	18d3      	adds	r3, r2, r3
 8012b0a:	b2db      	uxtb	r3, r3
}
 8012b0c:	0018      	movs	r0, r3
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	b004      	add	sp, #16
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b086      	sub	sp, #24
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	60b9      	str	r1, [r7, #8]
 8012b1e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8012b20:	2300      	movs	r3, #0
 8012b22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2220      	movs	r2, #32
 8012b28:	5c9b      	ldrb	r3, [r3, r2]
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d101      	bne.n	8012b32 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8012b2e:	2302      	movs	r3, #2
 8012b30:	e096      	b.n	8012c60 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2220      	movs	r2, #32
 8012b36:	2101      	movs	r1, #1
 8012b38:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2221      	movs	r2, #33	@ 0x21
 8012b3e:	2102      	movs	r1, #2
 8012b40:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	22ca      	movs	r2, #202	@ 0xca
 8012b48:	625a      	str	r2, [r3, #36]	@ 0x24
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2253      	movs	r2, #83	@ 0x53
 8012b50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	689a      	ldr	r2, [r3, #8]
 8012b58:	2380      	movs	r3, #128	@ 0x80
 8012b5a:	00db      	lsls	r3, r3, #3
 8012b5c:	4013      	ands	r3, r2
 8012b5e:	d021      	beq.n	8012ba4 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8012b60:	f7f9 f928 	bl	800bdb4 <HAL_GetTick>
 8012b64:	0003      	movs	r3, r0
 8012b66:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012b68:	e016      	b.n	8012b98 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012b6a:	f7f9 f923 	bl	800bdb4 <HAL_GetTick>
 8012b6e:	0002      	movs	r2, r0
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	1ad2      	subs	r2, r2, r3
 8012b74:	23fa      	movs	r3, #250	@ 0xfa
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d90d      	bls.n	8012b98 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	22ff      	movs	r2, #255	@ 0xff
 8012b82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2221      	movs	r2, #33	@ 0x21
 8012b88:	2103      	movs	r1, #3
 8012b8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2220      	movs	r2, #32
 8012b90:	2100      	movs	r1, #0
 8012b92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012b94:	2303      	movs	r3, #3
 8012b96:	e063      	b.n	8012c60 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	2204      	movs	r2, #4
 8012ba0:	4013      	ands	r3, r2
 8012ba2:	d1e2      	bne.n	8012b6a <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	689a      	ldr	r2, [r3, #8]
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	492e      	ldr	r1, [pc, #184]	@ (8012c68 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8012bb0:	400a      	ands	r2, r1
 8012bb2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	22ff      	movs	r2, #255	@ 0xff
 8012bbc:	401a      	ands	r2, r3
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	492a      	ldr	r1, [pc, #168]	@ (8012c6c <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8012bc4:	430a      	orrs	r2, r1
 8012bc6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012bc8:	f7f9 f8f4 	bl	800bdb4 <HAL_GetTick>
 8012bcc:	0003      	movs	r3, r0
 8012bce:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012bd0:	e016      	b.n	8012c00 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012bd2:	f7f9 f8ef 	bl	800bdb4 <HAL_GetTick>
 8012bd6:	0002      	movs	r2, r0
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	1ad2      	subs	r2, r2, r3
 8012bdc:	23fa      	movs	r3, #250	@ 0xfa
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d90d      	bls.n	8012c00 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	22ff      	movs	r2, #255	@ 0xff
 8012bea:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2221      	movs	r2, #33	@ 0x21
 8012bf0:	2103      	movs	r1, #3
 8012bf2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2220      	movs	r2, #32
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8012bfc:	2303      	movs	r3, #3
 8012bfe:	e02f      	b.n	8012c60 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	2204      	movs	r2, #4
 8012c08:	4013      	ands	r3, r2
 8012c0a:	d0e2      	beq.n	8012bd2 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	689a      	ldr	r2, [r3, #8]
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2107      	movs	r1, #7
 8012c18:	438a      	bics	r2, r1
 8012c1a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	6899      	ldr	r1, [r3, #8]
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	430a      	orrs	r2, r1
 8012c2a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	68ba      	ldr	r2, [r7, #8]
 8012c32:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	689a      	ldr	r2, [r3, #8]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2180      	movs	r1, #128	@ 0x80
 8012c40:	00c9      	lsls	r1, r1, #3
 8012c42:	430a      	orrs	r2, r1
 8012c44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	22ff      	movs	r2, #255	@ 0xff
 8012c4c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2221      	movs	r2, #33	@ 0x21
 8012c52:	2101      	movs	r1, #1
 8012c54:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2220      	movs	r2, #32
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012c5e:	2300      	movs	r3, #0
}
 8012c60:	0018      	movs	r0, r3
 8012c62:	46bd      	mov	sp, r7
 8012c64:	b006      	add	sp, #24
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	fffffbff 	.word	0xfffffbff
 8012c6c:	fffffb7f 	.word	0xfffffb7f

08012c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d101      	bne.n	8012c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e032      	b.n	8012ce8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2239      	movs	r2, #57	@ 0x39
 8012c86:	5c9b      	ldrb	r3, [r3, r2]
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d107      	bne.n	8012c9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2238      	movs	r2, #56	@ 0x38
 8012c92:	2100      	movs	r1, #0
 8012c94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	0018      	movs	r0, r3
 8012c9a:	f7f8 fa41 	bl	800b120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2239      	movs	r2, #57	@ 0x39
 8012ca2:	2102      	movs	r1, #2
 8012ca4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	3304      	adds	r3, #4
 8012cae:	0019      	movs	r1, r3
 8012cb0:	0010      	movs	r0, r2
 8012cb2:	f000 fa1d 	bl	80130f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	223e      	movs	r2, #62	@ 0x3e
 8012cba:	2101      	movs	r1, #1
 8012cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	223a      	movs	r2, #58	@ 0x3a
 8012cc2:	2101      	movs	r1, #1
 8012cc4:	5499      	strb	r1, [r3, r2]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	223b      	movs	r2, #59	@ 0x3b
 8012cca:	2101      	movs	r1, #1
 8012ccc:	5499      	strb	r1, [r3, r2]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	223c      	movs	r2, #60	@ 0x3c
 8012cd2:	2101      	movs	r1, #1
 8012cd4:	5499      	strb	r1, [r3, r2]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	223d      	movs	r2, #61	@ 0x3d
 8012cda:	2101      	movs	r1, #1
 8012cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2239      	movs	r2, #57	@ 0x39
 8012ce2:	2101      	movs	r1, #1
 8012ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012ce6:	2300      	movs	r3, #0
}
 8012ce8:	0018      	movs	r0, r3
 8012cea:	46bd      	mov	sp, r7
 8012cec:	b002      	add	sp, #8
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2239      	movs	r2, #57	@ 0x39
 8012cfc:	5c9b      	ldrb	r3, [r3, r2]
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	d001      	beq.n	8012d08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012d04:	2301      	movs	r3, #1
 8012d06:	e033      	b.n	8012d70 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2239      	movs	r2, #57	@ 0x39
 8012d0c:	2102      	movs	r1, #2
 8012d0e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	2380      	movs	r3, #128	@ 0x80
 8012d16:	05db      	lsls	r3, r3, #23
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d00e      	beq.n	8012d3a <HAL_TIM_Base_Start+0x4a>
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	4a15      	ldr	r2, [pc, #84]	@ (8012d78 <HAL_TIM_Base_Start+0x88>)
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d009      	beq.n	8012d3a <HAL_TIM_Base_Start+0x4a>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	4a14      	ldr	r2, [pc, #80]	@ (8012d7c <HAL_TIM_Base_Start+0x8c>)
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d004      	beq.n	8012d3a <HAL_TIM_Base_Start+0x4a>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	4a12      	ldr	r2, [pc, #72]	@ (8012d80 <HAL_TIM_Base_Start+0x90>)
 8012d36:	4293      	cmp	r3, r2
 8012d38:	d111      	bne.n	8012d5e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	689b      	ldr	r3, [r3, #8]
 8012d40:	2207      	movs	r2, #7
 8012d42:	4013      	ands	r3, r2
 8012d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	2b06      	cmp	r3, #6
 8012d4a:	d010      	beq.n	8012d6e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	681a      	ldr	r2, [r3, #0]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2101      	movs	r1, #1
 8012d58:	430a      	orrs	r2, r1
 8012d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d5c:	e007      	b.n	8012d6e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2101      	movs	r1, #1
 8012d6a:	430a      	orrs	r2, r1
 8012d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012d6e:	2300      	movs	r3, #0
}
 8012d70:	0018      	movs	r0, r3
 8012d72:	46bd      	mov	sp, r7
 8012d74:	b004      	add	sp, #16
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	40000400 	.word	0x40000400
 8012d7c:	40010800 	.word	0x40010800
 8012d80:	40011400 	.word	0x40011400

08012d84 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	6a1b      	ldr	r3, [r3, #32]
 8012d92:	4a0a      	ldr	r2, [pc, #40]	@ (8012dbc <HAL_TIM_Base_Stop+0x38>)
 8012d94:	4013      	ands	r3, r2
 8012d96:	d107      	bne.n	8012da8 <HAL_TIM_Base_Stop+0x24>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2101      	movs	r1, #1
 8012da4:	438a      	bics	r2, r1
 8012da6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2239      	movs	r2, #57	@ 0x39
 8012dac:	2101      	movs	r1, #1
 8012dae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8012db0:	2300      	movs	r3, #0
}
 8012db2:	0018      	movs	r0, r3
 8012db4:	46bd      	mov	sp, r7
 8012db6:	b002      	add	sp, #8
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	46c0      	nop			@ (mov r8, r8)
 8012dbc:	00001111 	.word	0x00001111

08012dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d101      	bne.n	8012dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012dce:	2301      	movs	r3, #1
 8012dd0:	e032      	b.n	8012e38 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2239      	movs	r2, #57	@ 0x39
 8012dd6:	5c9b      	ldrb	r3, [r3, r2]
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d107      	bne.n	8012dee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2238      	movs	r2, #56	@ 0x38
 8012de2:	2100      	movs	r1, #0
 8012de4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	0018      	movs	r0, r3
 8012dea:	f7f8 f975 	bl	800b0d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2239      	movs	r2, #57	@ 0x39
 8012df2:	2102      	movs	r1, #2
 8012df4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	3304      	adds	r3, #4
 8012dfe:	0019      	movs	r1, r3
 8012e00:	0010      	movs	r0, r2
 8012e02:	f000 f975 	bl	80130f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	223e      	movs	r2, #62	@ 0x3e
 8012e0a:	2101      	movs	r1, #1
 8012e0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	223a      	movs	r2, #58	@ 0x3a
 8012e12:	2101      	movs	r1, #1
 8012e14:	5499      	strb	r1, [r3, r2]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	223b      	movs	r2, #59	@ 0x3b
 8012e1a:	2101      	movs	r1, #1
 8012e1c:	5499      	strb	r1, [r3, r2]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	223c      	movs	r2, #60	@ 0x3c
 8012e22:	2101      	movs	r1, #1
 8012e24:	5499      	strb	r1, [r3, r2]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	223d      	movs	r2, #61	@ 0x3d
 8012e2a:	2101      	movs	r1, #1
 8012e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2239      	movs	r2, #57	@ 0x39
 8012e32:	2101      	movs	r1, #1
 8012e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012e36:	2300      	movs	r3, #0
}
 8012e38:	0018      	movs	r0, r3
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	b002      	add	sp, #8
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d108      	bne.n	8012e62 <HAL_TIM_PWM_Start+0x22>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	223a      	movs	r2, #58	@ 0x3a
 8012e54:	5c9b      	ldrb	r3, [r3, r2]
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	1e5a      	subs	r2, r3, #1
 8012e5c:	4193      	sbcs	r3, r2
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	e01f      	b.n	8012ea2 <HAL_TIM_PWM_Start+0x62>
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	2b04      	cmp	r3, #4
 8012e66:	d108      	bne.n	8012e7a <HAL_TIM_PWM_Start+0x3a>
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	223b      	movs	r2, #59	@ 0x3b
 8012e6c:	5c9b      	ldrb	r3, [r3, r2]
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	3b01      	subs	r3, #1
 8012e72:	1e5a      	subs	r2, r3, #1
 8012e74:	4193      	sbcs	r3, r2
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	e013      	b.n	8012ea2 <HAL_TIM_PWM_Start+0x62>
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	2b08      	cmp	r3, #8
 8012e7e:	d108      	bne.n	8012e92 <HAL_TIM_PWM_Start+0x52>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	223c      	movs	r2, #60	@ 0x3c
 8012e84:	5c9b      	ldrb	r3, [r3, r2]
 8012e86:	b2db      	uxtb	r3, r3
 8012e88:	3b01      	subs	r3, #1
 8012e8a:	1e5a      	subs	r2, r3, #1
 8012e8c:	4193      	sbcs	r3, r2
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	e007      	b.n	8012ea2 <HAL_TIM_PWM_Start+0x62>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	223d      	movs	r2, #61	@ 0x3d
 8012e96:	5c9b      	ldrb	r3, [r3, r2]
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	3b01      	subs	r3, #1
 8012e9c:	1e5a      	subs	r2, r3, #1
 8012e9e:	4193      	sbcs	r3, r2
 8012ea0:	b2db      	uxtb	r3, r3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d001      	beq.n	8012eaa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e052      	b.n	8012f50 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d104      	bne.n	8012eba <HAL_TIM_PWM_Start+0x7a>
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	223a      	movs	r2, #58	@ 0x3a
 8012eb4:	2102      	movs	r1, #2
 8012eb6:	5499      	strb	r1, [r3, r2]
 8012eb8:	e013      	b.n	8012ee2 <HAL_TIM_PWM_Start+0xa2>
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	2b04      	cmp	r3, #4
 8012ebe:	d104      	bne.n	8012eca <HAL_TIM_PWM_Start+0x8a>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	223b      	movs	r2, #59	@ 0x3b
 8012ec4:	2102      	movs	r1, #2
 8012ec6:	5499      	strb	r1, [r3, r2]
 8012ec8:	e00b      	b.n	8012ee2 <HAL_TIM_PWM_Start+0xa2>
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	2b08      	cmp	r3, #8
 8012ece:	d104      	bne.n	8012eda <HAL_TIM_PWM_Start+0x9a>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	223c      	movs	r2, #60	@ 0x3c
 8012ed4:	2102      	movs	r1, #2
 8012ed6:	5499      	strb	r1, [r3, r2]
 8012ed8:	e003      	b.n	8012ee2 <HAL_TIM_PWM_Start+0xa2>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	223d      	movs	r2, #61	@ 0x3d
 8012ede:	2102      	movs	r1, #2
 8012ee0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	6839      	ldr	r1, [r7, #0]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	0018      	movs	r0, r3
 8012eec:	f000 fa62 	bl	80133b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	2380      	movs	r3, #128	@ 0x80
 8012ef6:	05db      	lsls	r3, r3, #23
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d00e      	beq.n	8012f1a <HAL_TIM_PWM_Start+0xda>
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	4a15      	ldr	r2, [pc, #84]	@ (8012f58 <HAL_TIM_PWM_Start+0x118>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d009      	beq.n	8012f1a <HAL_TIM_PWM_Start+0xda>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	4a14      	ldr	r2, [pc, #80]	@ (8012f5c <HAL_TIM_PWM_Start+0x11c>)
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d004      	beq.n	8012f1a <HAL_TIM_PWM_Start+0xda>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	4a12      	ldr	r2, [pc, #72]	@ (8012f60 <HAL_TIM_PWM_Start+0x120>)
 8012f16:	4293      	cmp	r3, r2
 8012f18:	d111      	bne.n	8012f3e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	2207      	movs	r2, #7
 8012f22:	4013      	ands	r3, r2
 8012f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2b06      	cmp	r3, #6
 8012f2a:	d010      	beq.n	8012f4e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	2101      	movs	r1, #1
 8012f38:	430a      	orrs	r2, r1
 8012f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f3c:	e007      	b.n	8012f4e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2101      	movs	r1, #1
 8012f4a:	430a      	orrs	r2, r1
 8012f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012f4e:	2300      	movs	r3, #0
}
 8012f50:	0018      	movs	r0, r3
 8012f52:	46bd      	mov	sp, r7
 8012f54:	b004      	add	sp, #16
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	40000400 	.word	0x40000400
 8012f5c:	40010800 	.word	0x40010800
 8012f60:	40011400 	.word	0x40011400

08012f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b086      	sub	sp, #24
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f70:	2317      	movs	r3, #23
 8012f72:	18fb      	adds	r3, r7, r3
 8012f74:	2200      	movs	r2, #0
 8012f76:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2238      	movs	r2, #56	@ 0x38
 8012f7c:	5c9b      	ldrb	r3, [r3, r2]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d101      	bne.n	8012f86 <HAL_TIM_PWM_ConfigChannel+0x22>
 8012f82:	2302      	movs	r3, #2
 8012f84:	e0ad      	b.n	80130e2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2238      	movs	r2, #56	@ 0x38
 8012f8a:	2101      	movs	r1, #1
 8012f8c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2b0c      	cmp	r3, #12
 8012f92:	d100      	bne.n	8012f96 <HAL_TIM_PWM_ConfigChannel+0x32>
 8012f94:	e076      	b.n	8013084 <HAL_TIM_PWM_ConfigChannel+0x120>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2b0c      	cmp	r3, #12
 8012f9a:	d900      	bls.n	8012f9e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8012f9c:	e095      	b.n	80130ca <HAL_TIM_PWM_ConfigChannel+0x166>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2b08      	cmp	r3, #8
 8012fa2:	d04e      	beq.n	8013042 <HAL_TIM_PWM_ConfigChannel+0xde>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2b08      	cmp	r3, #8
 8012fa8:	d900      	bls.n	8012fac <HAL_TIM_PWM_ConfigChannel+0x48>
 8012faa:	e08e      	b.n	80130ca <HAL_TIM_PWM_ConfigChannel+0x166>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d003      	beq.n	8012fba <HAL_TIM_PWM_ConfigChannel+0x56>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2b04      	cmp	r3, #4
 8012fb6:	d021      	beq.n	8012ffc <HAL_TIM_PWM_ConfigChannel+0x98>
 8012fb8:	e087      	b.n	80130ca <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	68ba      	ldr	r2, [r7, #8]
 8012fc0:	0011      	movs	r1, r2
 8012fc2:	0018      	movs	r0, r3
 8012fc4:	f000 f8f2 	bl	80131ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	699a      	ldr	r2, [r3, #24]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2108      	movs	r1, #8
 8012fd4:	430a      	orrs	r2, r1
 8012fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	699a      	ldr	r2, [r3, #24]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2104      	movs	r1, #4
 8012fe4:	438a      	bics	r2, r1
 8012fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	6999      	ldr	r1, [r3, #24]
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	68da      	ldr	r2, [r3, #12]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	430a      	orrs	r2, r1
 8012ff8:	619a      	str	r2, [r3, #24]
      break;
 8012ffa:	e06b      	b.n	80130d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	0011      	movs	r1, r2
 8013004:	0018      	movs	r0, r3
 8013006:	f000 f90d 	bl	8013224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	699a      	ldr	r2, [r3, #24]
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	2180      	movs	r1, #128	@ 0x80
 8013016:	0109      	lsls	r1, r1, #4
 8013018:	430a      	orrs	r2, r1
 801301a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	699a      	ldr	r2, [r3, #24]
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	4931      	ldr	r1, [pc, #196]	@ (80130ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8013028:	400a      	ands	r2, r1
 801302a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	6999      	ldr	r1, [r3, #24]
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	021a      	lsls	r2, r3, #8
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	430a      	orrs	r2, r1
 801303e:	619a      	str	r2, [r3, #24]
      break;
 8013040:	e048      	b.n	80130d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	68ba      	ldr	r2, [r7, #8]
 8013048:	0011      	movs	r1, r2
 801304a:	0018      	movs	r0, r3
 801304c:	f000 f92c 	bl	80132a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	69da      	ldr	r2, [r3, #28]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2108      	movs	r1, #8
 801305c:	430a      	orrs	r2, r1
 801305e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	69da      	ldr	r2, [r3, #28]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2104      	movs	r1, #4
 801306c:	438a      	bics	r2, r1
 801306e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	69d9      	ldr	r1, [r3, #28]
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	68da      	ldr	r2, [r3, #12]
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	430a      	orrs	r2, r1
 8013080:	61da      	str	r2, [r3, #28]
      break;
 8013082:	e027      	b.n	80130d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	68ba      	ldr	r2, [r7, #8]
 801308a:	0011      	movs	r1, r2
 801308c:	0018      	movs	r0, r3
 801308e:	f000 f94b 	bl	8013328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	69da      	ldr	r2, [r3, #28]
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2180      	movs	r1, #128	@ 0x80
 801309e:	0109      	lsls	r1, r1, #4
 80130a0:	430a      	orrs	r2, r1
 80130a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	69da      	ldr	r2, [r3, #28]
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	490f      	ldr	r1, [pc, #60]	@ (80130ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 80130b0:	400a      	ands	r2, r1
 80130b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	69d9      	ldr	r1, [r3, #28]
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	68db      	ldr	r3, [r3, #12]
 80130be:	021a      	lsls	r2, r3, #8
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	430a      	orrs	r2, r1
 80130c6:	61da      	str	r2, [r3, #28]
      break;
 80130c8:	e004      	b.n	80130d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80130ca:	2317      	movs	r3, #23
 80130cc:	18fb      	adds	r3, r7, r3
 80130ce:	2201      	movs	r2, #1
 80130d0:	701a      	strb	r2, [r3, #0]
      break;
 80130d2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2238      	movs	r2, #56	@ 0x38
 80130d8:	2100      	movs	r1, #0
 80130da:	5499      	strb	r1, [r3, r2]

  return status;
 80130dc:	2317      	movs	r3, #23
 80130de:	18fb      	adds	r3, r7, r3
 80130e0:	781b      	ldrb	r3, [r3, #0]
}
 80130e2:	0018      	movs	r0, r3
 80130e4:	46bd      	mov	sp, r7
 80130e6:	b006      	add	sp, #24
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	46c0      	nop			@ (mov r8, r8)
 80130ec:	fffffbff 	.word	0xfffffbff

080130f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013100:	687a      	ldr	r2, [r7, #4]
 8013102:	2380      	movs	r3, #128	@ 0x80
 8013104:	05db      	lsls	r3, r3, #23
 8013106:	429a      	cmp	r2, r3
 8013108:	d00b      	beq.n	8013122 <TIM_Base_SetConfig+0x32>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	4a23      	ldr	r2, [pc, #140]	@ (801319c <TIM_Base_SetConfig+0xac>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d007      	beq.n	8013122 <TIM_Base_SetConfig+0x32>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	4a22      	ldr	r2, [pc, #136]	@ (80131a0 <TIM_Base_SetConfig+0xb0>)
 8013116:	4293      	cmp	r3, r2
 8013118:	d003      	beq.n	8013122 <TIM_Base_SetConfig+0x32>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4a21      	ldr	r2, [pc, #132]	@ (80131a4 <TIM_Base_SetConfig+0xb4>)
 801311e:	4293      	cmp	r3, r2
 8013120:	d108      	bne.n	8013134 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2270      	movs	r2, #112	@ 0x70
 8013126:	4393      	bics	r3, r2
 8013128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	4313      	orrs	r3, r2
 8013132:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	2380      	movs	r3, #128	@ 0x80
 8013138:	05db      	lsls	r3, r3, #23
 801313a:	429a      	cmp	r2, r3
 801313c:	d00b      	beq.n	8013156 <TIM_Base_SetConfig+0x66>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	4a16      	ldr	r2, [pc, #88]	@ (801319c <TIM_Base_SetConfig+0xac>)
 8013142:	4293      	cmp	r3, r2
 8013144:	d007      	beq.n	8013156 <TIM_Base_SetConfig+0x66>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4a15      	ldr	r2, [pc, #84]	@ (80131a0 <TIM_Base_SetConfig+0xb0>)
 801314a:	4293      	cmp	r3, r2
 801314c:	d003      	beq.n	8013156 <TIM_Base_SetConfig+0x66>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	4a14      	ldr	r2, [pc, #80]	@ (80131a4 <TIM_Base_SetConfig+0xb4>)
 8013152:	4293      	cmp	r3, r2
 8013154:	d108      	bne.n	8013168 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	4a13      	ldr	r2, [pc, #76]	@ (80131a8 <TIM_Base_SetConfig+0xb8>)
 801315a:	4013      	ands	r3, r2
 801315c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	68fa      	ldr	r2, [r7, #12]
 8013164:	4313      	orrs	r3, r2
 8013166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2280      	movs	r2, #128	@ 0x80
 801316c:	4393      	bics	r3, r2
 801316e:	001a      	movs	r2, r3
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	691b      	ldr	r3, [r3, #16]
 8013174:	4313      	orrs	r3, r2
 8013176:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	68fa      	ldr	r2, [r7, #12]
 801317c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	689a      	ldr	r2, [r3, #8]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2201      	movs	r2, #1
 8013192:	615a      	str	r2, [r3, #20]
}
 8013194:	46c0      	nop			@ (mov r8, r8)
 8013196:	46bd      	mov	sp, r7
 8013198:	b004      	add	sp, #16
 801319a:	bd80      	pop	{r7, pc}
 801319c:	40000400 	.word	0x40000400
 80131a0:	40010800 	.word	0x40010800
 80131a4:	40011400 	.word	0x40011400
 80131a8:	fffffcff 	.word	0xfffffcff

080131ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b086      	sub	sp, #24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6a1b      	ldr	r3, [r3, #32]
 80131ba:	2201      	movs	r2, #1
 80131bc:	4393      	bics	r3, r2
 80131be:	001a      	movs	r2, r3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6a1b      	ldr	r3, [r3, #32]
 80131c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	699b      	ldr	r3, [r3, #24]
 80131d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2270      	movs	r2, #112	@ 0x70
 80131da:	4393      	bics	r3, r2
 80131dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	2203      	movs	r2, #3
 80131e2:	4393      	bics	r3, r2
 80131e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	68fa      	ldr	r2, [r7, #12]
 80131ec:	4313      	orrs	r3, r2
 80131ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	2202      	movs	r2, #2
 80131f4:	4393      	bics	r3, r2
 80131f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	697a      	ldr	r2, [r7, #20]
 80131fe:	4313      	orrs	r3, r2
 8013200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	693a      	ldr	r2, [r7, #16]
 8013206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	68fa      	ldr	r2, [r7, #12]
 801320c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	685a      	ldr	r2, [r3, #4]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	697a      	ldr	r2, [r7, #20]
 801321a:	621a      	str	r2, [r3, #32]
}
 801321c:	46c0      	nop			@ (mov r8, r8)
 801321e:	46bd      	mov	sp, r7
 8013220:	b006      	add	sp, #24
 8013222:	bd80      	pop	{r7, pc}

08013224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b086      	sub	sp, #24
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6a1b      	ldr	r3, [r3, #32]
 8013232:	2210      	movs	r2, #16
 8013234:	4393      	bics	r3, r2
 8013236:	001a      	movs	r2, r3
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6a1b      	ldr	r3, [r3, #32]
 8013240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	685b      	ldr	r3, [r3, #4]
 8013246:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	699b      	ldr	r3, [r3, #24]
 801324c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	4a13      	ldr	r2, [pc, #76]	@ (80132a0 <TIM_OC2_SetConfig+0x7c>)
 8013252:	4013      	ands	r3, r2
 8013254:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	4a12      	ldr	r2, [pc, #72]	@ (80132a4 <TIM_OC2_SetConfig+0x80>)
 801325a:	4013      	ands	r3, r2
 801325c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	021b      	lsls	r3, r3, #8
 8013264:	68fa      	ldr	r2, [r7, #12]
 8013266:	4313      	orrs	r3, r2
 8013268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	2220      	movs	r2, #32
 801326e:	4393      	bics	r3, r2
 8013270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	011b      	lsls	r3, r3, #4
 8013278:	697a      	ldr	r2, [r7, #20]
 801327a:	4313      	orrs	r3, r2
 801327c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	693a      	ldr	r2, [r7, #16]
 8013282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	68fa      	ldr	r2, [r7, #12]
 8013288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	685a      	ldr	r2, [r3, #4]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	697a      	ldr	r2, [r7, #20]
 8013296:	621a      	str	r2, [r3, #32]
}
 8013298:	46c0      	nop			@ (mov r8, r8)
 801329a:	46bd      	mov	sp, r7
 801329c:	b006      	add	sp, #24
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	ffff8fff 	.word	0xffff8fff
 80132a4:	fffffcff 	.word	0xfffffcff

080132a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6a1b      	ldr	r3, [r3, #32]
 80132b6:	4a1a      	ldr	r2, [pc, #104]	@ (8013320 <TIM_OC3_SetConfig+0x78>)
 80132b8:	401a      	ands	r2, r3
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6a1b      	ldr	r3, [r3, #32]
 80132c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	685b      	ldr	r3, [r3, #4]
 80132c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	69db      	ldr	r3, [r3, #28]
 80132ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2270      	movs	r2, #112	@ 0x70
 80132d4:	4393      	bics	r3, r2
 80132d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2203      	movs	r2, #3
 80132dc:	4393      	bics	r3, r2
 80132de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	68fa      	ldr	r2, [r7, #12]
 80132e6:	4313      	orrs	r3, r2
 80132e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	4a0d      	ldr	r2, [pc, #52]	@ (8013324 <TIM_OC3_SetConfig+0x7c>)
 80132ee:	4013      	ands	r3, r2
 80132f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	689b      	ldr	r3, [r3, #8]
 80132f6:	021b      	lsls	r3, r3, #8
 80132f8:	697a      	ldr	r2, [r7, #20]
 80132fa:	4313      	orrs	r3, r2
 80132fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	693a      	ldr	r2, [r7, #16]
 8013302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	68fa      	ldr	r2, [r7, #12]
 8013308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	685a      	ldr	r2, [r3, #4]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	697a      	ldr	r2, [r7, #20]
 8013316:	621a      	str	r2, [r3, #32]
}
 8013318:	46c0      	nop			@ (mov r8, r8)
 801331a:	46bd      	mov	sp, r7
 801331c:	b006      	add	sp, #24
 801331e:	bd80      	pop	{r7, pc}
 8013320:	fffffeff 	.word	0xfffffeff
 8013324:	fffffdff 	.word	0xfffffdff

08013328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	6a1b      	ldr	r3, [r3, #32]
 8013336:	4a1b      	ldr	r2, [pc, #108]	@ (80133a4 <TIM_OC4_SetConfig+0x7c>)
 8013338:	401a      	ands	r2, r3
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6a1b      	ldr	r3, [r3, #32]
 8013342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	69db      	ldr	r3, [r3, #28]
 801334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	4a15      	ldr	r2, [pc, #84]	@ (80133a8 <TIM_OC4_SetConfig+0x80>)
 8013354:	4013      	ands	r3, r2
 8013356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	4a14      	ldr	r2, [pc, #80]	@ (80133ac <TIM_OC4_SetConfig+0x84>)
 801335c:	4013      	ands	r3, r2
 801335e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	021b      	lsls	r3, r3, #8
 8013366:	68fa      	ldr	r2, [r7, #12]
 8013368:	4313      	orrs	r3, r2
 801336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	4a10      	ldr	r2, [pc, #64]	@ (80133b0 <TIM_OC4_SetConfig+0x88>)
 8013370:	4013      	ands	r3, r2
 8013372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	689b      	ldr	r3, [r3, #8]
 8013378:	031b      	lsls	r3, r3, #12
 801337a:	697a      	ldr	r2, [r7, #20]
 801337c:	4313      	orrs	r3, r2
 801337e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	693a      	ldr	r2, [r7, #16]
 8013384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	685a      	ldr	r2, [r3, #4]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	697a      	ldr	r2, [r7, #20]
 8013398:	621a      	str	r2, [r3, #32]
}
 801339a:	46c0      	nop			@ (mov r8, r8)
 801339c:	46bd      	mov	sp, r7
 801339e:	b006      	add	sp, #24
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	46c0      	nop			@ (mov r8, r8)
 80133a4:	ffffefff 	.word	0xffffefff
 80133a8:	ffff8fff 	.word	0xffff8fff
 80133ac:	fffffcff 	.word	0xfffffcff
 80133b0:	ffffdfff 	.word	0xffffdfff

080133b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b086      	sub	sp, #24
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	60f8      	str	r0, [r7, #12]
 80133bc:	60b9      	str	r1, [r7, #8]
 80133be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	221f      	movs	r2, #31
 80133c4:	4013      	ands	r3, r2
 80133c6:	2201      	movs	r2, #1
 80133c8:	409a      	lsls	r2, r3
 80133ca:	0013      	movs	r3, r2
 80133cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	6a1b      	ldr	r3, [r3, #32]
 80133d2:	697a      	ldr	r2, [r7, #20]
 80133d4:	43d2      	mvns	r2, r2
 80133d6:	401a      	ands	r2, r3
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	6a1a      	ldr	r2, [r3, #32]
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	211f      	movs	r1, #31
 80133e4:	400b      	ands	r3, r1
 80133e6:	6879      	ldr	r1, [r7, #4]
 80133e8:	4099      	lsls	r1, r3
 80133ea:	000b      	movs	r3, r1
 80133ec:	431a      	orrs	r2, r3
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	621a      	str	r2, [r3, #32]
}
 80133f2:	46c0      	nop			@ (mov r8, r8)
 80133f4:	46bd      	mov	sp, r7
 80133f6:	b006      	add	sp, #24
 80133f8:	bd80      	pop	{r7, pc}
	...

080133fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2238      	movs	r2, #56	@ 0x38
 801340a:	5c9b      	ldrb	r3, [r3, r2]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d101      	bne.n	8013414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013410:	2302      	movs	r3, #2
 8013412:	e047      	b.n	80134a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2238      	movs	r2, #56	@ 0x38
 8013418:	2101      	movs	r1, #1
 801341a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2239      	movs	r2, #57	@ 0x39
 8013420:	2102      	movs	r1, #2
 8013422:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2270      	movs	r2, #112	@ 0x70
 8013438:	4393      	bics	r3, r2
 801343a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	4313      	orrs	r3, r2
 8013444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	68fa      	ldr	r2, [r7, #12]
 801344c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	2380      	movs	r3, #128	@ 0x80
 8013454:	05db      	lsls	r3, r3, #23
 8013456:	429a      	cmp	r2, r3
 8013458:	d00e      	beq.n	8013478 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a13      	ldr	r2, [pc, #76]	@ (80134ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d009      	beq.n	8013478 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4a11      	ldr	r2, [pc, #68]	@ (80134b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801346a:	4293      	cmp	r3, r2
 801346c:	d004      	beq.n	8013478 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	4a10      	ldr	r2, [pc, #64]	@ (80134b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8013474:	4293      	cmp	r3, r2
 8013476:	d10c      	bne.n	8013492 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	2280      	movs	r2, #128	@ 0x80
 801347c:	4393      	bics	r3, r2
 801347e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	68ba      	ldr	r2, [r7, #8]
 8013486:	4313      	orrs	r3, r2
 8013488:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2239      	movs	r2, #57	@ 0x39
 8013496:	2101      	movs	r1, #1
 8013498:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2238      	movs	r2, #56	@ 0x38
 801349e:	2100      	movs	r1, #0
 80134a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80134a2:	2300      	movs	r3, #0
}
 80134a4:	0018      	movs	r0, r3
 80134a6:	46bd      	mov	sp, r7
 80134a8:	b004      	add	sp, #16
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	40000400 	.word	0x40000400
 80134b0:	40010800 	.word	0x40010800
 80134b4:	40011400 	.word	0x40011400

080134b8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2238      	movs	r2, #56	@ 0x38
 80134c6:	5c9b      	ldrb	r3, [r3, r2]
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d101      	bne.n	80134d0 <HAL_TIMEx_RemapConfig+0x18>
 80134cc:	2302      	movs	r3, #2
 80134ce:	e00c      	b.n	80134ea <HAL_TIMEx_RemapConfig+0x32>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2238      	movs	r2, #56	@ 0x38
 80134d4:	2101      	movs	r1, #1
 80134d6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	683a      	ldr	r2, [r7, #0]
 80134de:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2238      	movs	r2, #56	@ 0x38
 80134e4:	2100      	movs	r1, #0
 80134e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	0018      	movs	r0, r3
 80134ec:	46bd      	mov	sp, r7
 80134ee:	b002      	add	sp, #8
 80134f0:	bd80      	pop	{r7, pc}
	...

080134f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d101      	bne.n	8013506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013502:	2301      	movs	r3, #1
 8013504:	e053      	b.n	80135ae <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d116      	bne.n	801353c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2278      	movs	r2, #120	@ 0x78
 8013512:	2100      	movs	r1, #0
 8013514:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	0018      	movs	r0, r3
 801351a:	f000 fd65 	bl	8013fe8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	22b0      	movs	r2, #176	@ 0xb0
 8013522:	589b      	ldr	r3, [r3, r2]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d103      	bne.n	8013530 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	21b0      	movs	r1, #176	@ 0xb0
 801352c:	4a22      	ldr	r2, [pc, #136]	@ (80135b8 <HAL_UART_Init+0xc4>)
 801352e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	22b0      	movs	r2, #176	@ 0xb0
 8013534:	589b      	ldr	r3, [r3, r2]
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	0010      	movs	r0, r2
 801353a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2224      	movs	r2, #36	@ 0x24
 8013540:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2101      	movs	r1, #1
 801354e:	438a      	bics	r2, r1
 8013550:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	0018      	movs	r0, r3
 8013556:	f000 fd8b 	bl	8014070 <UART_SetConfig>
 801355a:	0003      	movs	r3, r0
 801355c:	2b01      	cmp	r3, #1
 801355e:	d101      	bne.n	8013564 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8013560:	2301      	movs	r3, #1
 8013562:	e024      	b.n	80135ae <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013568:	2b00      	cmp	r3, #0
 801356a:	d003      	beq.n	8013574 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	0018      	movs	r0, r3
 8013570:	f001 f81c 	bl	80145ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	685a      	ldr	r2, [r3, #4]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	490f      	ldr	r1, [pc, #60]	@ (80135bc <HAL_UART_Init+0xc8>)
 8013580:	400a      	ands	r2, r1
 8013582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	689a      	ldr	r2, [r3, #8]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	212a      	movs	r1, #42	@ 0x2a
 8013590:	438a      	bics	r2, r1
 8013592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2101      	movs	r1, #1
 80135a0:	430a      	orrs	r2, r1
 80135a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	0018      	movs	r0, r3
 80135a8:	f001 f8b4 	bl	8014714 <UART_CheckIdleState>
 80135ac:	0003      	movs	r3, r0
}
 80135ae:	0018      	movs	r0, r3
 80135b0:	46bd      	mov	sp, r7
 80135b2:	b002      	add	sp, #8
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	46c0      	nop			@ (mov r8, r8)
 80135b8:	0800b355 	.word	0x0800b355
 80135bc:	ffffb7ff 	.word	0xffffb7ff

080135c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b08a      	sub	sp, #40	@ 0x28
 80135c4:	af02      	add	r7, sp, #8
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	603b      	str	r3, [r7, #0]
 80135cc:	1dbb      	adds	r3, r7, #6
 80135ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135d4:	2b20      	cmp	r3, #32
 80135d6:	d000      	beq.n	80135da <HAL_UART_Transmit+0x1a>
 80135d8:	e08c      	b.n	80136f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d003      	beq.n	80135e8 <HAL_UART_Transmit+0x28>
 80135e0:	1dbb      	adds	r3, r7, #6
 80135e2:	881b      	ldrh	r3, [r3, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d101      	bne.n	80135ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80135e8:	2301      	movs	r3, #1
 80135ea:	e084      	b.n	80136f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	689a      	ldr	r2, [r3, #8]
 80135f0:	2380      	movs	r3, #128	@ 0x80
 80135f2:	015b      	lsls	r3, r3, #5
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d109      	bne.n	801360c <HAL_UART_Transmit+0x4c>
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	691b      	ldr	r3, [r3, #16]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d105      	bne.n	801360c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	2201      	movs	r2, #1
 8013604:	4013      	ands	r3, r2
 8013606:	d001      	beq.n	801360c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8013608:	2301      	movs	r3, #1
 801360a:	e074      	b.n	80136f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2284      	movs	r2, #132	@ 0x84
 8013610:	2100      	movs	r1, #0
 8013612:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2221      	movs	r2, #33	@ 0x21
 8013618:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801361a:	f7f8 fbcb 	bl	800bdb4 <HAL_GetTick>
 801361e:	0003      	movs	r3, r0
 8013620:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	1dba      	adds	r2, r7, #6
 8013626:	2150      	movs	r1, #80	@ 0x50
 8013628:	8812      	ldrh	r2, [r2, #0]
 801362a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	1dba      	adds	r2, r7, #6
 8013630:	2152      	movs	r1, #82	@ 0x52
 8013632:	8812      	ldrh	r2, [r2, #0]
 8013634:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	689a      	ldr	r2, [r3, #8]
 801363a:	2380      	movs	r3, #128	@ 0x80
 801363c:	015b      	lsls	r3, r3, #5
 801363e:	429a      	cmp	r2, r3
 8013640:	d108      	bne.n	8013654 <HAL_UART_Transmit+0x94>
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	691b      	ldr	r3, [r3, #16]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d104      	bne.n	8013654 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801364a:	2300      	movs	r3, #0
 801364c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	61bb      	str	r3, [r7, #24]
 8013652:	e003      	b.n	801365c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013658:	2300      	movs	r3, #0
 801365a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801365c:	e02f      	b.n	80136be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801365e:	697a      	ldr	r2, [r7, #20]
 8013660:	68f8      	ldr	r0, [r7, #12]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	0013      	movs	r3, r2
 8013668:	2200      	movs	r2, #0
 801366a:	2180      	movs	r1, #128	@ 0x80
 801366c:	f001 f8fa 	bl	8014864 <UART_WaitOnFlagUntilTimeout>
 8013670:	1e03      	subs	r3, r0, #0
 8013672:	d004      	beq.n	801367e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2220      	movs	r2, #32
 8013678:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801367a:	2303      	movs	r3, #3
 801367c:	e03b      	b.n	80136f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10b      	bne.n	801369c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	881b      	ldrh	r3, [r3, #0]
 8013688:	001a      	movs	r2, r3
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	05d2      	lsls	r2, r2, #23
 8013690:	0dd2      	lsrs	r2, r2, #23
 8013692:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	3302      	adds	r3, #2
 8013698:	61bb      	str	r3, [r7, #24]
 801369a:	e007      	b.n	80136ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	781a      	ldrb	r2, [r3, #0]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80136a6:	69fb      	ldr	r3, [r7, #28]
 80136a8:	3301      	adds	r3, #1
 80136aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2252      	movs	r2, #82	@ 0x52
 80136b0:	5a9b      	ldrh	r3, [r3, r2]
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	3b01      	subs	r3, #1
 80136b6:	b299      	uxth	r1, r3
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2252      	movs	r2, #82	@ 0x52
 80136bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2252      	movs	r2, #82	@ 0x52
 80136c2:	5a9b      	ldrh	r3, [r3, r2]
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1c9      	bne.n	801365e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80136ca:	697a      	ldr	r2, [r7, #20]
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	0013      	movs	r3, r2
 80136d4:	2200      	movs	r2, #0
 80136d6:	2140      	movs	r1, #64	@ 0x40
 80136d8:	f001 f8c4 	bl	8014864 <UART_WaitOnFlagUntilTimeout>
 80136dc:	1e03      	subs	r3, r0, #0
 80136de:	d004      	beq.n	80136ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2220      	movs	r2, #32
 80136e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80136e6:	2303      	movs	r3, #3
 80136e8:	e005      	b.n	80136f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	2220      	movs	r2, #32
 80136ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80136f0:	2300      	movs	r3, #0
 80136f2:	e000      	b.n	80136f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80136f4:	2302      	movs	r3, #2
  }
}
 80136f6:	0018      	movs	r0, r3
 80136f8:	46bd      	mov	sp, r7
 80136fa:	b008      	add	sp, #32
 80136fc:	bd80      	pop	{r7, pc}
	...

08013700 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b088      	sub	sp, #32
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	1dbb      	adds	r3, r7, #6
 801370c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2280      	movs	r2, #128	@ 0x80
 8013712:	589b      	ldr	r3, [r3, r2]
 8013714:	2b20      	cmp	r3, #32
 8013716:	d14a      	bne.n	80137ae <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d003      	beq.n	8013726 <HAL_UART_Receive_IT+0x26>
 801371e:	1dbb      	adds	r3, r7, #6
 8013720:	881b      	ldrh	r3, [r3, #0]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d101      	bne.n	801372a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013726:	2301      	movs	r3, #1
 8013728:	e042      	b.n	80137b0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	689a      	ldr	r2, [r3, #8]
 801372e:	2380      	movs	r3, #128	@ 0x80
 8013730:	015b      	lsls	r3, r3, #5
 8013732:	429a      	cmp	r2, r3
 8013734:	d109      	bne.n	801374a <HAL_UART_Receive_IT+0x4a>
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	691b      	ldr	r3, [r3, #16]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d105      	bne.n	801374a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	2201      	movs	r2, #1
 8013742:	4013      	ands	r3, r2
 8013744:	d001      	beq.n	801374a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8013746:	2301      	movs	r3, #1
 8013748:	e032      	b.n	80137b0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2200      	movs	r2, #0
 801374e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	4a18      	ldr	r2, [pc, #96]	@ (80137b8 <HAL_UART_Receive_IT+0xb8>)
 8013756:	4293      	cmp	r3, r2
 8013758:	d020      	beq.n	801379c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	685a      	ldr	r2, [r3, #4]
 8013760:	2380      	movs	r3, #128	@ 0x80
 8013762:	041b      	lsls	r3, r3, #16
 8013764:	4013      	ands	r3, r2
 8013766:	d019      	beq.n	801379c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013768:	f3ef 8310 	mrs	r3, PRIMASK
 801376c:	613b      	str	r3, [r7, #16]
  return(result);
 801376e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013770:	61fb      	str	r3, [r7, #28]
 8013772:	2301      	movs	r3, #1
 8013774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	f383 8810 	msr	PRIMASK, r3
}
 801377c:	46c0      	nop			@ (mov r8, r8)
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	681a      	ldr	r2, [r3, #0]
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2180      	movs	r1, #128	@ 0x80
 801378a:	04c9      	lsls	r1, r1, #19
 801378c:	430a      	orrs	r2, r1
 801378e:	601a      	str	r2, [r3, #0]
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	f383 8810 	msr	PRIMASK, r3
}
 801379a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801379c:	1dbb      	adds	r3, r7, #6
 801379e:	881a      	ldrh	r2, [r3, #0]
 80137a0:	68b9      	ldr	r1, [r7, #8]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	0018      	movs	r0, r3
 80137a6:	f001 f8c7 	bl	8014938 <UART_Start_Receive_IT>
 80137aa:	0003      	movs	r3, r0
 80137ac:	e000      	b.n	80137b0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80137ae:	2302      	movs	r3, #2
  }
}
 80137b0:	0018      	movs	r0, r3
 80137b2:	46bd      	mov	sp, r7
 80137b4:	b008      	add	sp, #32
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	40004800 	.word	0x40004800

080137bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b088      	sub	sp, #32
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	60f8      	str	r0, [r7, #12]
 80137c4:	60b9      	str	r1, [r7, #8]
 80137c6:	1dbb      	adds	r3, r7, #6
 80137c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80137ce:	2b20      	cmp	r3, #32
 80137d0:	d000      	beq.n	80137d4 <HAL_UART_Transmit_DMA+0x18>
 80137d2:	e077      	b.n	80138c4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d003      	beq.n	80137e2 <HAL_UART_Transmit_DMA+0x26>
 80137da:	1dbb      	adds	r3, r7, #6
 80137dc:	881b      	ldrh	r3, [r3, #0]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d101      	bne.n	80137e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80137e2:	2301      	movs	r3, #1
 80137e4:	e06f      	b.n	80138c6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	689a      	ldr	r2, [r3, #8]
 80137ea:	2380      	movs	r3, #128	@ 0x80
 80137ec:	015b      	lsls	r3, r3, #5
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d109      	bne.n	8013806 <HAL_UART_Transmit_DMA+0x4a>
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	691b      	ldr	r3, [r3, #16]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d105      	bne.n	8013806 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	2201      	movs	r2, #1
 80137fe:	4013      	ands	r3, r2
 8013800:	d001      	beq.n	8013806 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013802:	2301      	movs	r3, #1
 8013804:	e05f      	b.n	80138c6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	1dba      	adds	r2, r7, #6
 8013810:	2150      	movs	r1, #80	@ 0x50
 8013812:	8812      	ldrh	r2, [r2, #0]
 8013814:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	1dba      	adds	r2, r7, #6
 801381a:	2152      	movs	r1, #82	@ 0x52
 801381c:	8812      	ldrh	r2, [r2, #0]
 801381e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2284      	movs	r2, #132	@ 0x84
 8013824:	2100      	movs	r1, #0
 8013826:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2221      	movs	r2, #33	@ 0x21
 801382c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013832:	2b00      	cmp	r3, #0
 8013834:	d027      	beq.n	8013886 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801383a:	4a25      	ldr	r2, [pc, #148]	@ (80138d0 <HAL_UART_Transmit_DMA+0x114>)
 801383c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013842:	4a24      	ldr	r2, [pc, #144]	@ (80138d4 <HAL_UART_Transmit_DMA+0x118>)
 8013844:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801384a:	4a23      	ldr	r2, [pc, #140]	@ (80138d8 <HAL_UART_Transmit_DMA+0x11c>)
 801384c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013852:	2200      	movs	r2, #0
 8013854:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801385e:	0019      	movs	r1, r3
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	3328      	adds	r3, #40	@ 0x28
 8013866:	001a      	movs	r2, r3
 8013868:	1dbb      	adds	r3, r7, #6
 801386a:	881b      	ldrh	r3, [r3, #0]
 801386c:	f7f8 ffc2 	bl	800c7f4 <HAL_DMA_Start_IT>
 8013870:	1e03      	subs	r3, r0, #0
 8013872:	d008      	beq.n	8013886 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2284      	movs	r2, #132	@ 0x84
 8013878:	2110      	movs	r1, #16
 801387a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2220      	movs	r2, #32
 8013880:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8013882:	2301      	movs	r3, #1
 8013884:	e01f      	b.n	80138c6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2240      	movs	r2, #64	@ 0x40
 801388c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801388e:	f3ef 8310 	mrs	r3, PRIMASK
 8013892:	613b      	str	r3, [r7, #16]
  return(result);
 8013894:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013896:	61fb      	str	r3, [r7, #28]
 8013898:	2301      	movs	r3, #1
 801389a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	f383 8810 	msr	PRIMASK, r3
}
 80138a2:	46c0      	nop			@ (mov r8, r8)
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	689a      	ldr	r2, [r3, #8]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	2180      	movs	r1, #128	@ 0x80
 80138b0:	430a      	orrs	r2, r1
 80138b2:	609a      	str	r2, [r3, #8]
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	f383 8810 	msr	PRIMASK, r3
}
 80138be:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80138c0:	2300      	movs	r3, #0
 80138c2:	e000      	b.n	80138c6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80138c4:	2302      	movs	r3, #2
  }
}
 80138c6:	0018      	movs	r0, r3
 80138c8:	46bd      	mov	sp, r7
 80138ca:	b008      	add	sp, #32
 80138cc:	bd80      	pop	{r7, pc}
 80138ce:	46c0      	nop			@ (mov r8, r8)
 80138d0:	08014d1d 	.word	0x08014d1d
 80138d4:	08014db9 	.word	0x08014db9
 80138d8:	08014f59 	.word	0x08014f59

080138dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b088      	sub	sp, #32
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	1dbb      	adds	r3, r7, #6
 80138e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2280      	movs	r2, #128	@ 0x80
 80138ee:	589b      	ldr	r3, [r3, r2]
 80138f0:	2b20      	cmp	r3, #32
 80138f2:	d14a      	bne.n	801398a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d003      	beq.n	8013902 <HAL_UART_Receive_DMA+0x26>
 80138fa:	1dbb      	adds	r3, r7, #6
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d101      	bne.n	8013906 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8013902:	2301      	movs	r3, #1
 8013904:	e042      	b.n	801398c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	689a      	ldr	r2, [r3, #8]
 801390a:	2380      	movs	r3, #128	@ 0x80
 801390c:	015b      	lsls	r3, r3, #5
 801390e:	429a      	cmp	r2, r3
 8013910:	d109      	bne.n	8013926 <HAL_UART_Receive_DMA+0x4a>
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	691b      	ldr	r3, [r3, #16]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d105      	bne.n	8013926 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	2201      	movs	r2, #1
 801391e:	4013      	ands	r3, r2
 8013920:	d001      	beq.n	8013926 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013922:	2301      	movs	r3, #1
 8013924:	e032      	b.n	801398c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2200      	movs	r2, #0
 801392a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	4a18      	ldr	r2, [pc, #96]	@ (8013994 <HAL_UART_Receive_DMA+0xb8>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d020      	beq.n	8013978 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	685a      	ldr	r2, [r3, #4]
 801393c:	2380      	movs	r3, #128	@ 0x80
 801393e:	041b      	lsls	r3, r3, #16
 8013940:	4013      	ands	r3, r2
 8013942:	d019      	beq.n	8013978 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013944:	f3ef 8310 	mrs	r3, PRIMASK
 8013948:	613b      	str	r3, [r7, #16]
  return(result);
 801394a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801394c:	61fb      	str	r3, [r7, #28]
 801394e:	2301      	movs	r3, #1
 8013950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	f383 8810 	msr	PRIMASK, r3
}
 8013958:	46c0      	nop			@ (mov r8, r8)
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2180      	movs	r1, #128	@ 0x80
 8013966:	04c9      	lsls	r1, r1, #19
 8013968:	430a      	orrs	r2, r1
 801396a:	601a      	str	r2, [r3, #0]
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	f383 8810 	msr	PRIMASK, r3
}
 8013976:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013978:	1dbb      	adds	r3, r7, #6
 801397a:	881a      	ldrh	r2, [r3, #0]
 801397c:	68b9      	ldr	r1, [r7, #8]
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	0018      	movs	r0, r3
 8013982:	f001 f8a3 	bl	8014acc <UART_Start_Receive_DMA>
 8013986:	0003      	movs	r3, r0
 8013988:	e000      	b.n	801398c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801398a:	2302      	movs	r3, #2
  }
}
 801398c:	0018      	movs	r0, r3
 801398e:	46bd      	mov	sp, r7
 8013990:	b008      	add	sp, #32
 8013992:	bd80      	pop	{r7, pc}
 8013994:	40004800 	.word	0x40004800

08013998 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013998:	b590      	push	{r4, r7, lr}
 801399a:	b0ab      	sub	sp, #172	@ 0xac
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	69db      	ldr	r3, [r3, #28]
 80139a6:	22a4      	movs	r2, #164	@ 0xa4
 80139a8:	18b9      	adds	r1, r7, r2
 80139aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	20a0      	movs	r0, #160	@ 0xa0
 80139b4:	1839      	adds	r1, r7, r0
 80139b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	689b      	ldr	r3, [r3, #8]
 80139be:	219c      	movs	r1, #156	@ 0x9c
 80139c0:	1879      	adds	r1, r7, r1
 80139c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80139c4:	0011      	movs	r1, r2
 80139c6:	18bb      	adds	r3, r7, r2
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	4a9c      	ldr	r2, [pc, #624]	@ (8013c3c <HAL_UART_IRQHandler+0x2a4>)
 80139cc:	4013      	ands	r3, r2
 80139ce:	2298      	movs	r2, #152	@ 0x98
 80139d0:	18bc      	adds	r4, r7, r2
 80139d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80139d4:	18bb      	adds	r3, r7, r2
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d114      	bne.n	8013a06 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80139dc:	187b      	adds	r3, r7, r1
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	2220      	movs	r2, #32
 80139e2:	4013      	ands	r3, r2
 80139e4:	d00f      	beq.n	8013a06 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80139e6:	183b      	adds	r3, r7, r0
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	2220      	movs	r2, #32
 80139ec:	4013      	ands	r3, r2
 80139ee:	d00a      	beq.n	8013a06 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d100      	bne.n	80139fa <HAL_UART_IRQHandler+0x62>
 80139f8:	e2aa      	b.n	8013f50 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	0010      	movs	r0, r2
 8013a02:	4798      	blx	r3
      }
      return;
 8013a04:	e2a4      	b.n	8013f50 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013a06:	2398      	movs	r3, #152	@ 0x98
 8013a08:	18fb      	adds	r3, r7, r3
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d100      	bne.n	8013a12 <HAL_UART_IRQHandler+0x7a>
 8013a10:	e11a      	b.n	8013c48 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8013a12:	239c      	movs	r3, #156	@ 0x9c
 8013a14:	18fb      	adds	r3, r7, r3
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2201      	movs	r2, #1
 8013a1a:	4013      	ands	r3, r2
 8013a1c:	d106      	bne.n	8013a2c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013a1e:	23a0      	movs	r3, #160	@ 0xa0
 8013a20:	18fb      	adds	r3, r7, r3
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	4a86      	ldr	r2, [pc, #536]	@ (8013c40 <HAL_UART_IRQHandler+0x2a8>)
 8013a26:	4013      	ands	r3, r2
 8013a28:	d100      	bne.n	8013a2c <HAL_UART_IRQHandler+0x94>
 8013a2a:	e10d      	b.n	8013c48 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013a2c:	23a4      	movs	r3, #164	@ 0xa4
 8013a2e:	18fb      	adds	r3, r7, r3
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2201      	movs	r2, #1
 8013a34:	4013      	ands	r3, r2
 8013a36:	d012      	beq.n	8013a5e <HAL_UART_IRQHandler+0xc6>
 8013a38:	23a0      	movs	r3, #160	@ 0xa0
 8013a3a:	18fb      	adds	r3, r7, r3
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	2380      	movs	r3, #128	@ 0x80
 8013a40:	005b      	lsls	r3, r3, #1
 8013a42:	4013      	ands	r3, r2
 8013a44:	d00b      	beq.n	8013a5e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2284      	movs	r2, #132	@ 0x84
 8013a52:	589b      	ldr	r3, [r3, r2]
 8013a54:	2201      	movs	r2, #1
 8013a56:	431a      	orrs	r2, r3
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2184      	movs	r1, #132	@ 0x84
 8013a5c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013a5e:	23a4      	movs	r3, #164	@ 0xa4
 8013a60:	18fb      	adds	r3, r7, r3
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2202      	movs	r2, #2
 8013a66:	4013      	ands	r3, r2
 8013a68:	d011      	beq.n	8013a8e <HAL_UART_IRQHandler+0xf6>
 8013a6a:	239c      	movs	r3, #156	@ 0x9c
 8013a6c:	18fb      	adds	r3, r7, r3
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	2201      	movs	r2, #1
 8013a72:	4013      	ands	r3, r2
 8013a74:	d00b      	beq.n	8013a8e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2202      	movs	r2, #2
 8013a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2284      	movs	r2, #132	@ 0x84
 8013a82:	589b      	ldr	r3, [r3, r2]
 8013a84:	2204      	movs	r2, #4
 8013a86:	431a      	orrs	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	2184      	movs	r1, #132	@ 0x84
 8013a8c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013a8e:	23a4      	movs	r3, #164	@ 0xa4
 8013a90:	18fb      	adds	r3, r7, r3
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2204      	movs	r2, #4
 8013a96:	4013      	ands	r3, r2
 8013a98:	d011      	beq.n	8013abe <HAL_UART_IRQHandler+0x126>
 8013a9a:	239c      	movs	r3, #156	@ 0x9c
 8013a9c:	18fb      	adds	r3, r7, r3
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	4013      	ands	r3, r2
 8013aa4:	d00b      	beq.n	8013abe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2204      	movs	r2, #4
 8013aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2284      	movs	r2, #132	@ 0x84
 8013ab2:	589b      	ldr	r3, [r3, r2]
 8013ab4:	2202      	movs	r2, #2
 8013ab6:	431a      	orrs	r2, r3
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2184      	movs	r1, #132	@ 0x84
 8013abc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013abe:	23a4      	movs	r3, #164	@ 0xa4
 8013ac0:	18fb      	adds	r3, r7, r3
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2208      	movs	r2, #8
 8013ac6:	4013      	ands	r3, r2
 8013ac8:	d017      	beq.n	8013afa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013aca:	23a0      	movs	r3, #160	@ 0xa0
 8013acc:	18fb      	adds	r3, r7, r3
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2220      	movs	r2, #32
 8013ad2:	4013      	ands	r3, r2
 8013ad4:	d105      	bne.n	8013ae2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8013ad6:	239c      	movs	r3, #156	@ 0x9c
 8013ad8:	18fb      	adds	r3, r7, r3
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	2201      	movs	r2, #1
 8013ade:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013ae0:	d00b      	beq.n	8013afa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2208      	movs	r2, #8
 8013ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2284      	movs	r2, #132	@ 0x84
 8013aee:	589b      	ldr	r3, [r3, r2]
 8013af0:	2208      	movs	r2, #8
 8013af2:	431a      	orrs	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2184      	movs	r1, #132	@ 0x84
 8013af8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013afa:	23a4      	movs	r3, #164	@ 0xa4
 8013afc:	18fb      	adds	r3, r7, r3
 8013afe:	681a      	ldr	r2, [r3, #0]
 8013b00:	2380      	movs	r3, #128	@ 0x80
 8013b02:	011b      	lsls	r3, r3, #4
 8013b04:	4013      	ands	r3, r2
 8013b06:	d013      	beq.n	8013b30 <HAL_UART_IRQHandler+0x198>
 8013b08:	23a0      	movs	r3, #160	@ 0xa0
 8013b0a:	18fb      	adds	r3, r7, r3
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	2380      	movs	r3, #128	@ 0x80
 8013b10:	04db      	lsls	r3, r3, #19
 8013b12:	4013      	ands	r3, r2
 8013b14:	d00c      	beq.n	8013b30 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	2280      	movs	r2, #128	@ 0x80
 8013b1c:	0112      	lsls	r2, r2, #4
 8013b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2284      	movs	r2, #132	@ 0x84
 8013b24:	589b      	ldr	r3, [r3, r2]
 8013b26:	2220      	movs	r2, #32
 8013b28:	431a      	orrs	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2184      	movs	r1, #132	@ 0x84
 8013b2e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2284      	movs	r2, #132	@ 0x84
 8013b34:	589b      	ldr	r3, [r3, r2]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d100      	bne.n	8013b3c <HAL_UART_IRQHandler+0x1a4>
 8013b3a:	e20b      	b.n	8013f54 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8013b3c:	23a4      	movs	r3, #164	@ 0xa4
 8013b3e:	18fb      	adds	r3, r7, r3
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2220      	movs	r2, #32
 8013b44:	4013      	ands	r3, r2
 8013b46:	d00e      	beq.n	8013b66 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013b48:	23a0      	movs	r3, #160	@ 0xa0
 8013b4a:	18fb      	adds	r3, r7, r3
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2220      	movs	r2, #32
 8013b50:	4013      	ands	r3, r2
 8013b52:	d008      	beq.n	8013b66 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d004      	beq.n	8013b66 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	0010      	movs	r0, r2
 8013b64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2284      	movs	r2, #132	@ 0x84
 8013b6a:	589b      	ldr	r3, [r3, r2]
 8013b6c:	2194      	movs	r1, #148	@ 0x94
 8013b6e:	187a      	adds	r2, r7, r1
 8013b70:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	689b      	ldr	r3, [r3, #8]
 8013b78:	2240      	movs	r2, #64	@ 0x40
 8013b7a:	4013      	ands	r3, r2
 8013b7c:	2b40      	cmp	r3, #64	@ 0x40
 8013b7e:	d004      	beq.n	8013b8a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013b80:	187b      	adds	r3, r7, r1
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	2228      	movs	r2, #40	@ 0x28
 8013b86:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013b88:	d04b      	beq.n	8013c22 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	0018      	movs	r0, r3
 8013b8e:	f001 f861 	bl	8014c54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	689b      	ldr	r3, [r3, #8]
 8013b98:	2240      	movs	r2, #64	@ 0x40
 8013b9a:	4013      	ands	r3, r2
 8013b9c:	2b40      	cmp	r3, #64	@ 0x40
 8013b9e:	d139      	bne.n	8013c14 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8013ba4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8013ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013ba8:	2090      	movs	r0, #144	@ 0x90
 8013baa:	183a      	adds	r2, r7, r0
 8013bac:	6013      	str	r3, [r2, #0]
 8013bae:	2301      	movs	r3, #1
 8013bb0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013bb4:	f383 8810 	msr	PRIMASK, r3
}
 8013bb8:	46c0      	nop			@ (mov r8, r8)
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	689a      	ldr	r2, [r3, #8]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2140      	movs	r1, #64	@ 0x40
 8013bc6:	438a      	bics	r2, r1
 8013bc8:	609a      	str	r2, [r3, #8]
 8013bca:	183b      	adds	r3, r7, r0
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013bd2:	f383 8810 	msr	PRIMASK, r3
}
 8013bd6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d012      	beq.n	8013c06 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013be4:	4a17      	ldr	r2, [pc, #92]	@ (8013c44 <HAL_UART_IRQHandler+0x2ac>)
 8013be6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bec:	0018      	movs	r0, r3
 8013bee:	f7f8 fea7 	bl	800c940 <HAL_DMA_Abort_IT>
 8013bf2:	1e03      	subs	r3, r0, #0
 8013bf4:	d020      	beq.n	8013c38 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c00:	0018      	movs	r0, r3
 8013c02:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c04:	e018      	b.n	8013c38 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2298      	movs	r2, #152	@ 0x98
 8013c0a:	589b      	ldr	r3, [r3, r2]
 8013c0c:	687a      	ldr	r2, [r7, #4]
 8013c0e:	0010      	movs	r0, r2
 8013c10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c12:	e011      	b.n	8013c38 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2298      	movs	r2, #152	@ 0x98
 8013c18:	589b      	ldr	r3, [r3, r2]
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	0010      	movs	r0, r2
 8013c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c20:	e00a      	b.n	8013c38 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2298      	movs	r2, #152	@ 0x98
 8013c26:	589b      	ldr	r3, [r3, r2]
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	0010      	movs	r0, r2
 8013c2c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2284      	movs	r2, #132	@ 0x84
 8013c32:	2100      	movs	r1, #0
 8013c34:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8013c36:	e18d      	b.n	8013f54 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c38:	46c0      	nop			@ (mov r8, r8)
    return;
 8013c3a:	e18b      	b.n	8013f54 <HAL_UART_IRQHandler+0x5bc>
 8013c3c:	0000080f 	.word	0x0000080f
 8013c40:	04000120 	.word	0x04000120
 8013c44:	08014fe1 	.word	0x08014fe1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d000      	beq.n	8013c52 <HAL_UART_IRQHandler+0x2ba>
 8013c50:	e13d      	b.n	8013ece <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013c52:	23a4      	movs	r3, #164	@ 0xa4
 8013c54:	18fb      	adds	r3, r7, r3
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2210      	movs	r2, #16
 8013c5a:	4013      	ands	r3, r2
 8013c5c:	d100      	bne.n	8013c60 <HAL_UART_IRQHandler+0x2c8>
 8013c5e:	e136      	b.n	8013ece <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013c60:	23a0      	movs	r3, #160	@ 0xa0
 8013c62:	18fb      	adds	r3, r7, r3
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2210      	movs	r2, #16
 8013c68:	4013      	ands	r3, r2
 8013c6a:	d100      	bne.n	8013c6e <HAL_UART_IRQHandler+0x2d6>
 8013c6c:	e12f      	b.n	8013ece <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	2210      	movs	r2, #16
 8013c74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	2240      	movs	r2, #64	@ 0x40
 8013c7e:	4013      	ands	r3, r2
 8013c80:	2b40      	cmp	r3, #64	@ 0x40
 8013c82:	d000      	beq.n	8013c86 <HAL_UART_IRQHandler+0x2ee>
 8013c84:	e0a2      	b.n	8013dcc <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	685a      	ldr	r2, [r3, #4]
 8013c8e:	217e      	movs	r1, #126	@ 0x7e
 8013c90:	187b      	adds	r3, r7, r1
 8013c92:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8013c94:	187b      	adds	r3, r7, r1
 8013c96:	881b      	ldrh	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d100      	bne.n	8013c9e <HAL_UART_IRQHandler+0x306>
 8013c9c:	e15c      	b.n	8013f58 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2258      	movs	r2, #88	@ 0x58
 8013ca2:	5a9b      	ldrh	r3, [r3, r2]
 8013ca4:	187a      	adds	r2, r7, r1
 8013ca6:	8812      	ldrh	r2, [r2, #0]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d300      	bcc.n	8013cae <HAL_UART_IRQHandler+0x316>
 8013cac:	e154      	b.n	8013f58 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	187a      	adds	r2, r7, r1
 8013cb2:	215a      	movs	r1, #90	@ 0x5a
 8013cb4:	8812      	ldrh	r2, [r2, #0]
 8013cb6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2220      	movs	r2, #32
 8013cc2:	4013      	ands	r3, r2
 8013cc4:	d16f      	bne.n	8013da6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8013cca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8013ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013cce:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cd6:	f383 8810 	msr	PRIMASK, r3
}
 8013cda:	46c0      	nop			@ (mov r8, r8)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	49a0      	ldr	r1, [pc, #640]	@ (8013f68 <HAL_UART_IRQHandler+0x5d0>)
 8013ce8:	400a      	ands	r2, r1
 8013cea:	601a      	str	r2, [r3, #0]
 8013cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cf2:	f383 8810 	msr	PRIMASK, r3
}
 8013cf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8013cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8013cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d00:	677b      	str	r3, [r7, #116]	@ 0x74
 8013d02:	2301      	movs	r3, #1
 8013d04:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d08:	f383 8810 	msr	PRIMASK, r3
}
 8013d0c:	46c0      	nop			@ (mov r8, r8)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	689a      	ldr	r2, [r3, #8]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2101      	movs	r1, #1
 8013d1a:	438a      	bics	r2, r1
 8013d1c:	609a      	str	r2, [r3, #8]
 8013d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013d20:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d24:	f383 8810 	msr	PRIMASK, r3
}
 8013d28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8013d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d32:	673b      	str	r3, [r7, #112]	@ 0x70
 8013d34:	2301      	movs	r3, #1
 8013d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d3a:	f383 8810 	msr	PRIMASK, r3
}
 8013d3e:	46c0      	nop			@ (mov r8, r8)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	689a      	ldr	r2, [r3, #8]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	2140      	movs	r1, #64	@ 0x40
 8013d4c:	438a      	bics	r2, r1
 8013d4e:	609a      	str	r2, [r3, #8]
 8013d50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013d52:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d56:	f383 8810 	msr	PRIMASK, r3
}
 8013d5a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2280      	movs	r2, #128	@ 0x80
 8013d60:	2120      	movs	r1, #32
 8013d62:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2200      	movs	r2, #0
 8013d68:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d6e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8013d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d74:	2301      	movs	r3, #1
 8013d76:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d7a:	f383 8810 	msr	PRIMASK, r3
}
 8013d7e:	46c0      	nop			@ (mov r8, r8)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	2110      	movs	r1, #16
 8013d8c:	438a      	bics	r2, r1
 8013d8e:	601a      	str	r2, [r3, #0]
 8013d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d96:	f383 8810 	msr	PRIMASK, r3
}
 8013d9a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013da0:	0018      	movs	r0, r3
 8013da2:	f7f8 fd8d 	bl	800c8c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2202      	movs	r2, #2
 8013daa:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	22ac      	movs	r2, #172	@ 0xac
 8013db0:	589b      	ldr	r3, [r3, r2]
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	2158      	movs	r1, #88	@ 0x58
 8013db6:	5a51      	ldrh	r1, [r2, r1]
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	205a      	movs	r0, #90	@ 0x5a
 8013dbc:	5a12      	ldrh	r2, [r2, r0]
 8013dbe:	b292      	uxth	r2, r2
 8013dc0:	1a8a      	subs	r2, r1, r2
 8013dc2:	b291      	uxth	r1, r2
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	0010      	movs	r0, r2
 8013dc8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013dca:	e0c5      	b.n	8013f58 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2258      	movs	r2, #88	@ 0x58
 8013dd0:	5a99      	ldrh	r1, [r3, r2]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	225a      	movs	r2, #90	@ 0x5a
 8013dd6:	5a9b      	ldrh	r3, [r3, r2]
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	208e      	movs	r0, #142	@ 0x8e
 8013ddc:	183b      	adds	r3, r7, r0
 8013dde:	1a8a      	subs	r2, r1, r2
 8013de0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	225a      	movs	r2, #90	@ 0x5a
 8013de6:	5a9b      	ldrh	r3, [r3, r2]
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d100      	bne.n	8013df0 <HAL_UART_IRQHandler+0x458>
 8013dee:	e0b5      	b.n	8013f5c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8013df0:	183b      	adds	r3, r7, r0
 8013df2:	881b      	ldrh	r3, [r3, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d100      	bne.n	8013dfa <HAL_UART_IRQHandler+0x462>
 8013df8:	e0b0      	b.n	8013f5c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8013dfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013e02:	2488      	movs	r4, #136	@ 0x88
 8013e04:	193a      	adds	r2, r7, r4
 8013e06:	6013      	str	r3, [r2, #0]
 8013e08:	2301      	movs	r3, #1
 8013e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	f383 8810 	msr	PRIMASK, r3
}
 8013e12:	46c0      	nop			@ (mov r8, r8)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	681a      	ldr	r2, [r3, #0]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	4953      	ldr	r1, [pc, #332]	@ (8013f6c <HAL_UART_IRQHandler+0x5d4>)
 8013e20:	400a      	ands	r2, r1
 8013e22:	601a      	str	r2, [r3, #0]
 8013e24:	193b      	adds	r3, r7, r4
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	f383 8810 	msr	PRIMASK, r3
}
 8013e30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e32:	f3ef 8310 	mrs	r3, PRIMASK
 8013e36:	61bb      	str	r3, [r7, #24]
  return(result);
 8013e38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e3a:	2484      	movs	r4, #132	@ 0x84
 8013e3c:	193a      	adds	r2, r7, r4
 8013e3e:	6013      	str	r3, [r2, #0]
 8013e40:	2301      	movs	r3, #1
 8013e42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	f383 8810 	msr	PRIMASK, r3
}
 8013e4a:	46c0      	nop			@ (mov r8, r8)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	689a      	ldr	r2, [r3, #8]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2101      	movs	r1, #1
 8013e58:	438a      	bics	r2, r1
 8013e5a:	609a      	str	r2, [r3, #8]
 8013e5c:	193b      	adds	r3, r7, r4
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e62:	6a3b      	ldr	r3, [r7, #32]
 8013e64:	f383 8810 	msr	PRIMASK, r3
}
 8013e68:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2280      	movs	r2, #128	@ 0x80
 8013e6e:	2120      	movs	r1, #32
 8013e70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2200      	movs	r2, #0
 8013e76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e82:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e86:	2480      	movs	r4, #128	@ 0x80
 8013e88:	193a      	adds	r2, r7, r4
 8013e8a:	6013      	str	r3, [r2, #0]
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e92:	f383 8810 	msr	PRIMASK, r3
}
 8013e96:	46c0      	nop			@ (mov r8, r8)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2110      	movs	r1, #16
 8013ea4:	438a      	bics	r2, r1
 8013ea6:	601a      	str	r2, [r3, #0]
 8013ea8:	193b      	adds	r3, r7, r4
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eb0:	f383 8810 	msr	PRIMASK, r3
}
 8013eb4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2202      	movs	r2, #2
 8013eba:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	22ac      	movs	r2, #172	@ 0xac
 8013ec0:	589b      	ldr	r3, [r3, r2]
 8013ec2:	183a      	adds	r2, r7, r0
 8013ec4:	8811      	ldrh	r1, [r2, #0]
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	0010      	movs	r0, r2
 8013eca:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013ecc:	e046      	b.n	8013f5c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013ece:	23a4      	movs	r3, #164	@ 0xa4
 8013ed0:	18fb      	adds	r3, r7, r3
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	2380      	movs	r3, #128	@ 0x80
 8013ed6:	035b      	lsls	r3, r3, #13
 8013ed8:	4013      	ands	r3, r2
 8013eda:	d012      	beq.n	8013f02 <HAL_UART_IRQHandler+0x56a>
 8013edc:	239c      	movs	r3, #156	@ 0x9c
 8013ede:	18fb      	adds	r3, r7, r3
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	2380      	movs	r3, #128	@ 0x80
 8013ee4:	03db      	lsls	r3, r3, #15
 8013ee6:	4013      	ands	r3, r2
 8013ee8:	d00b      	beq.n	8013f02 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	2280      	movs	r2, #128	@ 0x80
 8013ef0:	0352      	lsls	r2, r2, #13
 8013ef2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	22a8      	movs	r2, #168	@ 0xa8
 8013ef8:	589b      	ldr	r3, [r3, r2]
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	0010      	movs	r0, r2
 8013efe:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013f00:	e02f      	b.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8013f02:	23a4      	movs	r3, #164	@ 0xa4
 8013f04:	18fb      	adds	r3, r7, r3
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	2280      	movs	r2, #128	@ 0x80
 8013f0a:	4013      	ands	r3, r2
 8013f0c:	d00f      	beq.n	8013f2e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8013f0e:	23a0      	movs	r3, #160	@ 0xa0
 8013f10:	18fb      	adds	r3, r7, r3
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	2280      	movs	r2, #128	@ 0x80
 8013f16:	4013      	ands	r3, r2
 8013f18:	d009      	beq.n	8013f2e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d01e      	beq.n	8013f60 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	0010      	movs	r0, r2
 8013f2a:	4798      	blx	r3
    }
    return;
 8013f2c:	e018      	b.n	8013f60 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013f2e:	23a4      	movs	r3, #164	@ 0xa4
 8013f30:	18fb      	adds	r3, r7, r3
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	2240      	movs	r2, #64	@ 0x40
 8013f36:	4013      	ands	r3, r2
 8013f38:	d013      	beq.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
 8013f3a:	23a0      	movs	r3, #160	@ 0xa0
 8013f3c:	18fb      	adds	r3, r7, r3
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	2240      	movs	r2, #64	@ 0x40
 8013f42:	4013      	ands	r3, r2
 8013f44:	d00d      	beq.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	0018      	movs	r0, r3
 8013f4a:	f001 f862 	bl	8015012 <UART_EndTransmit_IT>
    return;
 8013f4e:	e008      	b.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013f50:	46c0      	nop			@ (mov r8, r8)
 8013f52:	e006      	b.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
    return;
 8013f54:	46c0      	nop			@ (mov r8, r8)
 8013f56:	e004      	b.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013f58:	46c0      	nop			@ (mov r8, r8)
 8013f5a:	e002      	b.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013f5c:	46c0      	nop			@ (mov r8, r8)
 8013f5e:	e000      	b.n	8013f62 <HAL_UART_IRQHandler+0x5ca>
    return;
 8013f60:	46c0      	nop			@ (mov r8, r8)
  }

}
 8013f62:	46bd      	mov	sp, r7
 8013f64:	b02b      	add	sp, #172	@ 0xac
 8013f66:	bd90      	pop	{r4, r7, pc}
 8013f68:	fffffeff 	.word	0xfffffeff
 8013f6c:	fffffedf 	.word	0xfffffedf

08013f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013f78:	46c0      	nop			@ (mov r8, r8)
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	b002      	add	sp, #8
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8013f88:	46c0      	nop			@ (mov r8, r8)
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	b002      	add	sp, #8
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b082      	sub	sp, #8
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013f98:	46c0      	nop			@ (mov r8, r8)
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	b002      	add	sp, #8
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b082      	sub	sp, #8
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8013fa8:	46c0      	nop			@ (mov r8, r8)
 8013faa:	46bd      	mov	sp, r7
 8013fac:	b002      	add	sp, #8
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b082      	sub	sp, #8
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8013fb8:	46c0      	nop			@ (mov r8, r8)
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	b002      	add	sp, #8
 8013fbe:	bd80      	pop	{r7, pc}

08013fc0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b082      	sub	sp, #8
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8013fc8:	46c0      	nop			@ (mov r8, r8)
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	b002      	add	sp, #8
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	000a      	movs	r2, r1
 8013fda:	1cbb      	adds	r3, r7, #2
 8013fdc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013fde:	46c0      	nop			@ (mov r8, r8)
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	b002      	add	sp, #8
 8013fe4:	bd80      	pop	{r7, pc}
	...

08013fe8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2188      	movs	r1, #136	@ 0x88
 8013ff4:	4a14      	ldr	r2, [pc, #80]	@ (8014048 <UART_InitCallbacksToDefault+0x60>)
 8013ff6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	218c      	movs	r1, #140	@ 0x8c
 8013ffc:	4a13      	ldr	r2, [pc, #76]	@ (801404c <UART_InitCallbacksToDefault+0x64>)
 8013ffe:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2190      	movs	r1, #144	@ 0x90
 8014004:	4a12      	ldr	r2, [pc, #72]	@ (8014050 <UART_InitCallbacksToDefault+0x68>)
 8014006:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2194      	movs	r1, #148	@ 0x94
 801400c:	4a11      	ldr	r2, [pc, #68]	@ (8014054 <UART_InitCallbacksToDefault+0x6c>)
 801400e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2198      	movs	r1, #152	@ 0x98
 8014014:	4a10      	ldr	r2, [pc, #64]	@ (8014058 <UART_InitCallbacksToDefault+0x70>)
 8014016:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	219c      	movs	r1, #156	@ 0x9c
 801401c:	4a0f      	ldr	r2, [pc, #60]	@ (801405c <UART_InitCallbacksToDefault+0x74>)
 801401e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	21a0      	movs	r1, #160	@ 0xa0
 8014024:	4a0e      	ldr	r2, [pc, #56]	@ (8014060 <UART_InitCallbacksToDefault+0x78>)
 8014026:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	21a4      	movs	r1, #164	@ 0xa4
 801402c:	4a0d      	ldr	r2, [pc, #52]	@ (8014064 <UART_InitCallbacksToDefault+0x7c>)
 801402e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	21a8      	movs	r1, #168	@ 0xa8
 8014034:	4a0c      	ldr	r2, [pc, #48]	@ (8014068 <UART_InitCallbacksToDefault+0x80>)
 8014036:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	21ac      	movs	r1, #172	@ 0xac
 801403c:	4a0b      	ldr	r2, [pc, #44]	@ (801406c <UART_InitCallbacksToDefault+0x84>)
 801403e:	505a      	str	r2, [r3, r1]

}
 8014040:	46c0      	nop			@ (mov r8, r8)
 8014042:	46bd      	mov	sp, r7
 8014044:	b002      	add	sp, #8
 8014046:	bd80      	pop	{r7, pc}
 8014048:	08013f81 	.word	0x08013f81
 801404c:	08013f71 	.word	0x08013f71
 8014050:	08013f91 	.word	0x08013f91
 8014054:	08007369 	.word	0x08007369
 8014058:	08003a61 	.word	0x08003a61
 801405c:	08013fa1 	.word	0x08013fa1
 8014060:	08013fb1 	.word	0x08013fb1
 8014064:	08013fc1 	.word	0x08013fc1
 8014068:	08015405 	.word	0x08015405
 801406c:	08013fd1 	.word	0x08013fd1

08014070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014070:	b5b0      	push	{r4, r5, r7, lr}
 8014072:	b08e      	sub	sp, #56	@ 0x38
 8014074:	af00      	add	r7, sp, #0
 8014076:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014078:	231a      	movs	r3, #26
 801407a:	2218      	movs	r2, #24
 801407c:	189b      	adds	r3, r3, r2
 801407e:	19db      	adds	r3, r3, r7
 8014080:	2200      	movs	r2, #0
 8014082:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014084:	69fb      	ldr	r3, [r7, #28]
 8014086:	689a      	ldr	r2, [r3, #8]
 8014088:	69fb      	ldr	r3, [r7, #28]
 801408a:	691b      	ldr	r3, [r3, #16]
 801408c:	431a      	orrs	r2, r3
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	695b      	ldr	r3, [r3, #20]
 8014092:	431a      	orrs	r2, r3
 8014094:	69fb      	ldr	r3, [r7, #28]
 8014096:	69db      	ldr	r3, [r3, #28]
 8014098:	4313      	orrs	r3, r2
 801409a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4ac3      	ldr	r2, [pc, #780]	@ (80143b0 <UART_SetConfig+0x340>)
 80140a4:	4013      	ands	r3, r2
 80140a6:	0019      	movs	r1, r3
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140ae:	430a      	orrs	r2, r1
 80140b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80140b2:	69fb      	ldr	r3, [r7, #28]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	685b      	ldr	r3, [r3, #4]
 80140b8:	4abe      	ldr	r2, [pc, #760]	@ (80143b4 <UART_SetConfig+0x344>)
 80140ba:	4013      	ands	r3, r2
 80140bc:	0019      	movs	r1, r3
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	68da      	ldr	r2, [r3, #12]
 80140c2:	69fb      	ldr	r3, [r7, #28]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	430a      	orrs	r2, r1
 80140c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	699b      	ldr	r3, [r3, #24]
 80140ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80140d0:	69fb      	ldr	r3, [r7, #28]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4ab8      	ldr	r2, [pc, #736]	@ (80143b8 <UART_SetConfig+0x348>)
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d004      	beq.n	80140e4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	6a1b      	ldr	r3, [r3, #32]
 80140de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140e0:	4313      	orrs	r3, r2
 80140e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	689b      	ldr	r3, [r3, #8]
 80140ea:	4ab4      	ldr	r2, [pc, #720]	@ (80143bc <UART_SetConfig+0x34c>)
 80140ec:	4013      	ands	r3, r2
 80140ee:	0019      	movs	r1, r3
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140f6:	430a      	orrs	r2, r1
 80140f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4ab0      	ldr	r2, [pc, #704]	@ (80143c0 <UART_SetConfig+0x350>)
 8014100:	4293      	cmp	r3, r2
 8014102:	d131      	bne.n	8014168 <UART_SetConfig+0xf8>
 8014104:	4baf      	ldr	r3, [pc, #700]	@ (80143c4 <UART_SetConfig+0x354>)
 8014106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014108:	2203      	movs	r2, #3
 801410a:	4013      	ands	r3, r2
 801410c:	2b03      	cmp	r3, #3
 801410e:	d01d      	beq.n	801414c <UART_SetConfig+0xdc>
 8014110:	d823      	bhi.n	801415a <UART_SetConfig+0xea>
 8014112:	2b02      	cmp	r3, #2
 8014114:	d00c      	beq.n	8014130 <UART_SetConfig+0xc0>
 8014116:	d820      	bhi.n	801415a <UART_SetConfig+0xea>
 8014118:	2b00      	cmp	r3, #0
 801411a:	d002      	beq.n	8014122 <UART_SetConfig+0xb2>
 801411c:	2b01      	cmp	r3, #1
 801411e:	d00e      	beq.n	801413e <UART_SetConfig+0xce>
 8014120:	e01b      	b.n	801415a <UART_SetConfig+0xea>
 8014122:	231b      	movs	r3, #27
 8014124:	2218      	movs	r2, #24
 8014126:	189b      	adds	r3, r3, r2
 8014128:	19db      	adds	r3, r3, r7
 801412a:	2201      	movs	r2, #1
 801412c:	701a      	strb	r2, [r3, #0]
 801412e:	e0b4      	b.n	801429a <UART_SetConfig+0x22a>
 8014130:	231b      	movs	r3, #27
 8014132:	2218      	movs	r2, #24
 8014134:	189b      	adds	r3, r3, r2
 8014136:	19db      	adds	r3, r3, r7
 8014138:	2202      	movs	r2, #2
 801413a:	701a      	strb	r2, [r3, #0]
 801413c:	e0ad      	b.n	801429a <UART_SetConfig+0x22a>
 801413e:	231b      	movs	r3, #27
 8014140:	2218      	movs	r2, #24
 8014142:	189b      	adds	r3, r3, r2
 8014144:	19db      	adds	r3, r3, r7
 8014146:	2204      	movs	r2, #4
 8014148:	701a      	strb	r2, [r3, #0]
 801414a:	e0a6      	b.n	801429a <UART_SetConfig+0x22a>
 801414c:	231b      	movs	r3, #27
 801414e:	2218      	movs	r2, #24
 8014150:	189b      	adds	r3, r3, r2
 8014152:	19db      	adds	r3, r3, r7
 8014154:	2208      	movs	r2, #8
 8014156:	701a      	strb	r2, [r3, #0]
 8014158:	e09f      	b.n	801429a <UART_SetConfig+0x22a>
 801415a:	231b      	movs	r3, #27
 801415c:	2218      	movs	r2, #24
 801415e:	189b      	adds	r3, r3, r2
 8014160:	19db      	adds	r3, r3, r7
 8014162:	2210      	movs	r2, #16
 8014164:	701a      	strb	r2, [r3, #0]
 8014166:	e098      	b.n	801429a <UART_SetConfig+0x22a>
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	4a96      	ldr	r2, [pc, #600]	@ (80143c8 <UART_SetConfig+0x358>)
 801416e:	4293      	cmp	r3, r2
 8014170:	d131      	bne.n	80141d6 <UART_SetConfig+0x166>
 8014172:	4b94      	ldr	r3, [pc, #592]	@ (80143c4 <UART_SetConfig+0x354>)
 8014174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014176:	220c      	movs	r2, #12
 8014178:	4013      	ands	r3, r2
 801417a:	2b0c      	cmp	r3, #12
 801417c:	d01d      	beq.n	80141ba <UART_SetConfig+0x14a>
 801417e:	d823      	bhi.n	80141c8 <UART_SetConfig+0x158>
 8014180:	2b08      	cmp	r3, #8
 8014182:	d00c      	beq.n	801419e <UART_SetConfig+0x12e>
 8014184:	d820      	bhi.n	80141c8 <UART_SetConfig+0x158>
 8014186:	2b00      	cmp	r3, #0
 8014188:	d002      	beq.n	8014190 <UART_SetConfig+0x120>
 801418a:	2b04      	cmp	r3, #4
 801418c:	d00e      	beq.n	80141ac <UART_SetConfig+0x13c>
 801418e:	e01b      	b.n	80141c8 <UART_SetConfig+0x158>
 8014190:	231b      	movs	r3, #27
 8014192:	2218      	movs	r2, #24
 8014194:	189b      	adds	r3, r3, r2
 8014196:	19db      	adds	r3, r3, r7
 8014198:	2200      	movs	r2, #0
 801419a:	701a      	strb	r2, [r3, #0]
 801419c:	e07d      	b.n	801429a <UART_SetConfig+0x22a>
 801419e:	231b      	movs	r3, #27
 80141a0:	2218      	movs	r2, #24
 80141a2:	189b      	adds	r3, r3, r2
 80141a4:	19db      	adds	r3, r3, r7
 80141a6:	2202      	movs	r2, #2
 80141a8:	701a      	strb	r2, [r3, #0]
 80141aa:	e076      	b.n	801429a <UART_SetConfig+0x22a>
 80141ac:	231b      	movs	r3, #27
 80141ae:	2218      	movs	r2, #24
 80141b0:	189b      	adds	r3, r3, r2
 80141b2:	19db      	adds	r3, r3, r7
 80141b4:	2204      	movs	r2, #4
 80141b6:	701a      	strb	r2, [r3, #0]
 80141b8:	e06f      	b.n	801429a <UART_SetConfig+0x22a>
 80141ba:	231b      	movs	r3, #27
 80141bc:	2218      	movs	r2, #24
 80141be:	189b      	adds	r3, r3, r2
 80141c0:	19db      	adds	r3, r3, r7
 80141c2:	2208      	movs	r2, #8
 80141c4:	701a      	strb	r2, [r3, #0]
 80141c6:	e068      	b.n	801429a <UART_SetConfig+0x22a>
 80141c8:	231b      	movs	r3, #27
 80141ca:	2218      	movs	r2, #24
 80141cc:	189b      	adds	r3, r3, r2
 80141ce:	19db      	adds	r3, r3, r7
 80141d0:	2210      	movs	r2, #16
 80141d2:	701a      	strb	r2, [r3, #0]
 80141d4:	e061      	b.n	801429a <UART_SetConfig+0x22a>
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	4a7c      	ldr	r2, [pc, #496]	@ (80143cc <UART_SetConfig+0x35c>)
 80141dc:	4293      	cmp	r3, r2
 80141de:	d106      	bne.n	80141ee <UART_SetConfig+0x17e>
 80141e0:	231b      	movs	r3, #27
 80141e2:	2218      	movs	r2, #24
 80141e4:	189b      	adds	r3, r3, r2
 80141e6:	19db      	adds	r3, r3, r7
 80141e8:	2200      	movs	r2, #0
 80141ea:	701a      	strb	r2, [r3, #0]
 80141ec:	e055      	b.n	801429a <UART_SetConfig+0x22a>
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4a77      	ldr	r2, [pc, #476]	@ (80143d0 <UART_SetConfig+0x360>)
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d106      	bne.n	8014206 <UART_SetConfig+0x196>
 80141f8:	231b      	movs	r3, #27
 80141fa:	2218      	movs	r2, #24
 80141fc:	189b      	adds	r3, r3, r2
 80141fe:	19db      	adds	r3, r3, r7
 8014200:	2200      	movs	r2, #0
 8014202:	701a      	strb	r2, [r3, #0]
 8014204:	e049      	b.n	801429a <UART_SetConfig+0x22a>
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	4a6b      	ldr	r2, [pc, #428]	@ (80143b8 <UART_SetConfig+0x348>)
 801420c:	4293      	cmp	r3, r2
 801420e:	d13e      	bne.n	801428e <UART_SetConfig+0x21e>
 8014210:	4b6c      	ldr	r3, [pc, #432]	@ (80143c4 <UART_SetConfig+0x354>)
 8014212:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014214:	23c0      	movs	r3, #192	@ 0xc0
 8014216:	011b      	lsls	r3, r3, #4
 8014218:	4013      	ands	r3, r2
 801421a:	22c0      	movs	r2, #192	@ 0xc0
 801421c:	0112      	lsls	r2, r2, #4
 801421e:	4293      	cmp	r3, r2
 8014220:	d027      	beq.n	8014272 <UART_SetConfig+0x202>
 8014222:	22c0      	movs	r2, #192	@ 0xc0
 8014224:	0112      	lsls	r2, r2, #4
 8014226:	4293      	cmp	r3, r2
 8014228:	d82a      	bhi.n	8014280 <UART_SetConfig+0x210>
 801422a:	2280      	movs	r2, #128	@ 0x80
 801422c:	0112      	lsls	r2, r2, #4
 801422e:	4293      	cmp	r3, r2
 8014230:	d011      	beq.n	8014256 <UART_SetConfig+0x1e6>
 8014232:	2280      	movs	r2, #128	@ 0x80
 8014234:	0112      	lsls	r2, r2, #4
 8014236:	4293      	cmp	r3, r2
 8014238:	d822      	bhi.n	8014280 <UART_SetConfig+0x210>
 801423a:	2b00      	cmp	r3, #0
 801423c:	d004      	beq.n	8014248 <UART_SetConfig+0x1d8>
 801423e:	2280      	movs	r2, #128	@ 0x80
 8014240:	00d2      	lsls	r2, r2, #3
 8014242:	4293      	cmp	r3, r2
 8014244:	d00e      	beq.n	8014264 <UART_SetConfig+0x1f4>
 8014246:	e01b      	b.n	8014280 <UART_SetConfig+0x210>
 8014248:	231b      	movs	r3, #27
 801424a:	2218      	movs	r2, #24
 801424c:	189b      	adds	r3, r3, r2
 801424e:	19db      	adds	r3, r3, r7
 8014250:	2200      	movs	r2, #0
 8014252:	701a      	strb	r2, [r3, #0]
 8014254:	e021      	b.n	801429a <UART_SetConfig+0x22a>
 8014256:	231b      	movs	r3, #27
 8014258:	2218      	movs	r2, #24
 801425a:	189b      	adds	r3, r3, r2
 801425c:	19db      	adds	r3, r3, r7
 801425e:	2202      	movs	r2, #2
 8014260:	701a      	strb	r2, [r3, #0]
 8014262:	e01a      	b.n	801429a <UART_SetConfig+0x22a>
 8014264:	231b      	movs	r3, #27
 8014266:	2218      	movs	r2, #24
 8014268:	189b      	adds	r3, r3, r2
 801426a:	19db      	adds	r3, r3, r7
 801426c:	2204      	movs	r2, #4
 801426e:	701a      	strb	r2, [r3, #0]
 8014270:	e013      	b.n	801429a <UART_SetConfig+0x22a>
 8014272:	231b      	movs	r3, #27
 8014274:	2218      	movs	r2, #24
 8014276:	189b      	adds	r3, r3, r2
 8014278:	19db      	adds	r3, r3, r7
 801427a:	2208      	movs	r2, #8
 801427c:	701a      	strb	r2, [r3, #0]
 801427e:	e00c      	b.n	801429a <UART_SetConfig+0x22a>
 8014280:	231b      	movs	r3, #27
 8014282:	2218      	movs	r2, #24
 8014284:	189b      	adds	r3, r3, r2
 8014286:	19db      	adds	r3, r3, r7
 8014288:	2210      	movs	r2, #16
 801428a:	701a      	strb	r2, [r3, #0]
 801428c:	e005      	b.n	801429a <UART_SetConfig+0x22a>
 801428e:	231b      	movs	r3, #27
 8014290:	2218      	movs	r2, #24
 8014292:	189b      	adds	r3, r3, r2
 8014294:	19db      	adds	r3, r3, r7
 8014296:	2210      	movs	r2, #16
 8014298:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4a46      	ldr	r2, [pc, #280]	@ (80143b8 <UART_SetConfig+0x348>)
 80142a0:	4293      	cmp	r3, r2
 80142a2:	d000      	beq.n	80142a6 <UART_SetConfig+0x236>
 80142a4:	e09a      	b.n	80143dc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80142a6:	231b      	movs	r3, #27
 80142a8:	2218      	movs	r2, #24
 80142aa:	189b      	adds	r3, r3, r2
 80142ac:	19db      	adds	r3, r3, r7
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	2b08      	cmp	r3, #8
 80142b2:	d01d      	beq.n	80142f0 <UART_SetConfig+0x280>
 80142b4:	dc20      	bgt.n	80142f8 <UART_SetConfig+0x288>
 80142b6:	2b04      	cmp	r3, #4
 80142b8:	d015      	beq.n	80142e6 <UART_SetConfig+0x276>
 80142ba:	dc1d      	bgt.n	80142f8 <UART_SetConfig+0x288>
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d002      	beq.n	80142c6 <UART_SetConfig+0x256>
 80142c0:	2b02      	cmp	r3, #2
 80142c2:	d005      	beq.n	80142d0 <UART_SetConfig+0x260>
 80142c4:	e018      	b.n	80142f8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80142c6:	f7fd ff3f 	bl	8012148 <HAL_RCC_GetPCLK1Freq>
 80142ca:	0003      	movs	r3, r0
 80142cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80142ce:	e01c      	b.n	801430a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80142d0:	4b3c      	ldr	r3, [pc, #240]	@ (80143c4 <UART_SetConfig+0x354>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	2210      	movs	r2, #16
 80142d6:	4013      	ands	r3, r2
 80142d8:	d002      	beq.n	80142e0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80142da:	4b3e      	ldr	r3, [pc, #248]	@ (80143d4 <UART_SetConfig+0x364>)
 80142dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80142de:	e014      	b.n	801430a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80142e0:	4b3d      	ldr	r3, [pc, #244]	@ (80143d8 <UART_SetConfig+0x368>)
 80142e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80142e4:	e011      	b.n	801430a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80142e6:	f7fd fe7f 	bl	8011fe8 <HAL_RCC_GetSysClockFreq>
 80142ea:	0003      	movs	r3, r0
 80142ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80142ee:	e00c      	b.n	801430a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80142f0:	2380      	movs	r3, #128	@ 0x80
 80142f2:	021b      	lsls	r3, r3, #8
 80142f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80142f6:	e008      	b.n	801430a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80142f8:	2300      	movs	r3, #0
 80142fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80142fc:	231a      	movs	r3, #26
 80142fe:	2218      	movs	r2, #24
 8014300:	189b      	adds	r3, r3, r2
 8014302:	19db      	adds	r3, r3, r7
 8014304:	2201      	movs	r2, #1
 8014306:	701a      	strb	r2, [r3, #0]
        break;
 8014308:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801430a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801430c:	2b00      	cmp	r3, #0
 801430e:	d100      	bne.n	8014312 <UART_SetConfig+0x2a2>
 8014310:	e133      	b.n	801457a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	685a      	ldr	r2, [r3, #4]
 8014316:	0013      	movs	r3, r2
 8014318:	005b      	lsls	r3, r3, #1
 801431a:	189b      	adds	r3, r3, r2
 801431c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801431e:	429a      	cmp	r2, r3
 8014320:	d305      	bcc.n	801432e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801432a:	429a      	cmp	r2, r3
 801432c:	d906      	bls.n	801433c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801432e:	231a      	movs	r3, #26
 8014330:	2218      	movs	r2, #24
 8014332:	189b      	adds	r3, r3, r2
 8014334:	19db      	adds	r3, r3, r7
 8014336:	2201      	movs	r2, #1
 8014338:	701a      	strb	r2, [r3, #0]
 801433a:	e11e      	b.n	801457a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801433c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801433e:	613b      	str	r3, [r7, #16]
 8014340:	2300      	movs	r3, #0
 8014342:	617b      	str	r3, [r7, #20]
 8014344:	6939      	ldr	r1, [r7, #16]
 8014346:	697a      	ldr	r2, [r7, #20]
 8014348:	000b      	movs	r3, r1
 801434a:	0e1b      	lsrs	r3, r3, #24
 801434c:	0010      	movs	r0, r2
 801434e:	0205      	lsls	r5, r0, #8
 8014350:	431d      	orrs	r5, r3
 8014352:	000b      	movs	r3, r1
 8014354:	021c      	lsls	r4, r3, #8
 8014356:	69fb      	ldr	r3, [r7, #28]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	085b      	lsrs	r3, r3, #1
 801435c:	60bb      	str	r3, [r7, #8]
 801435e:	2300      	movs	r3, #0
 8014360:	60fb      	str	r3, [r7, #12]
 8014362:	68b8      	ldr	r0, [r7, #8]
 8014364:	68f9      	ldr	r1, [r7, #12]
 8014366:	1900      	adds	r0, r0, r4
 8014368:	4169      	adcs	r1, r5
 801436a:	69fb      	ldr	r3, [r7, #28]
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	603b      	str	r3, [r7, #0]
 8014370:	2300      	movs	r3, #0
 8014372:	607b      	str	r3, [r7, #4]
 8014374:	683a      	ldr	r2, [r7, #0]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f7ec f902 	bl	8000580 <__aeabi_uldivmod>
 801437c:	0002      	movs	r2, r0
 801437e:	000b      	movs	r3, r1
 8014380:	0013      	movs	r3, r2
 8014382:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014386:	23c0      	movs	r3, #192	@ 0xc0
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	429a      	cmp	r2, r3
 801438c:	d309      	bcc.n	80143a2 <UART_SetConfig+0x332>
 801438e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014390:	2380      	movs	r3, #128	@ 0x80
 8014392:	035b      	lsls	r3, r3, #13
 8014394:	429a      	cmp	r2, r3
 8014396:	d204      	bcs.n	80143a2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801439e:	60da      	str	r2, [r3, #12]
 80143a0:	e0eb      	b.n	801457a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80143a2:	231a      	movs	r3, #26
 80143a4:	2218      	movs	r2, #24
 80143a6:	189b      	adds	r3, r3, r2
 80143a8:	19db      	adds	r3, r3, r7
 80143aa:	2201      	movs	r2, #1
 80143ac:	701a      	strb	r2, [r3, #0]
 80143ae:	e0e4      	b.n	801457a <UART_SetConfig+0x50a>
 80143b0:	efff69f3 	.word	0xefff69f3
 80143b4:	ffffcfff 	.word	0xffffcfff
 80143b8:	40004800 	.word	0x40004800
 80143bc:	fffff4ff 	.word	0xfffff4ff
 80143c0:	40013800 	.word	0x40013800
 80143c4:	40021000 	.word	0x40021000
 80143c8:	40004400 	.word	0x40004400
 80143cc:	40004c00 	.word	0x40004c00
 80143d0:	40005000 	.word	0x40005000
 80143d4:	003d0900 	.word	0x003d0900
 80143d8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80143dc:	69fb      	ldr	r3, [r7, #28]
 80143de:	69da      	ldr	r2, [r3, #28]
 80143e0:	2380      	movs	r3, #128	@ 0x80
 80143e2:	021b      	lsls	r3, r3, #8
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d000      	beq.n	80143ea <UART_SetConfig+0x37a>
 80143e8:	e070      	b.n	80144cc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80143ea:	231b      	movs	r3, #27
 80143ec:	2218      	movs	r2, #24
 80143ee:	189b      	adds	r3, r3, r2
 80143f0:	19db      	adds	r3, r3, r7
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	2b08      	cmp	r3, #8
 80143f6:	d822      	bhi.n	801443e <UART_SetConfig+0x3ce>
 80143f8:	009a      	lsls	r2, r3, #2
 80143fa:	4b67      	ldr	r3, [pc, #412]	@ (8014598 <UART_SetConfig+0x528>)
 80143fc:	18d3      	adds	r3, r2, r3
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014402:	f7fd fea1 	bl	8012148 <HAL_RCC_GetPCLK1Freq>
 8014406:	0003      	movs	r3, r0
 8014408:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801440a:	e021      	b.n	8014450 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801440c:	f7fd feb2 	bl	8012174 <HAL_RCC_GetPCLK2Freq>
 8014410:	0003      	movs	r3, r0
 8014412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014414:	e01c      	b.n	8014450 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014416:	4b61      	ldr	r3, [pc, #388]	@ (801459c <UART_SetConfig+0x52c>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2210      	movs	r2, #16
 801441c:	4013      	ands	r3, r2
 801441e:	d002      	beq.n	8014426 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8014420:	4b5f      	ldr	r3, [pc, #380]	@ (80145a0 <UART_SetConfig+0x530>)
 8014422:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014424:	e014      	b.n	8014450 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8014426:	4b5f      	ldr	r3, [pc, #380]	@ (80145a4 <UART_SetConfig+0x534>)
 8014428:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801442a:	e011      	b.n	8014450 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801442c:	f7fd fddc 	bl	8011fe8 <HAL_RCC_GetSysClockFreq>
 8014430:	0003      	movs	r3, r0
 8014432:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014434:	e00c      	b.n	8014450 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014436:	2380      	movs	r3, #128	@ 0x80
 8014438:	021b      	lsls	r3, r3, #8
 801443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801443c:	e008      	b.n	8014450 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801443e:	2300      	movs	r3, #0
 8014440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8014442:	231a      	movs	r3, #26
 8014444:	2218      	movs	r2, #24
 8014446:	189b      	adds	r3, r3, r2
 8014448:	19db      	adds	r3, r3, r7
 801444a:	2201      	movs	r2, #1
 801444c:	701a      	strb	r2, [r3, #0]
        break;
 801444e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014452:	2b00      	cmp	r3, #0
 8014454:	d100      	bne.n	8014458 <UART_SetConfig+0x3e8>
 8014456:	e090      	b.n	801457a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801445a:	005a      	lsls	r2, r3, #1
 801445c:	69fb      	ldr	r3, [r7, #28]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	085b      	lsrs	r3, r3, #1
 8014462:	18d2      	adds	r2, r2, r3
 8014464:	69fb      	ldr	r3, [r7, #28]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	0019      	movs	r1, r3
 801446a:	0010      	movs	r0, r2
 801446c:	f7eb fe9a 	bl	80001a4 <__udivsi3>
 8014470:	0003      	movs	r3, r0
 8014472:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014476:	2b0f      	cmp	r3, #15
 8014478:	d921      	bls.n	80144be <UART_SetConfig+0x44e>
 801447a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801447c:	2380      	movs	r3, #128	@ 0x80
 801447e:	025b      	lsls	r3, r3, #9
 8014480:	429a      	cmp	r2, r3
 8014482:	d21c      	bcs.n	80144be <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014486:	b29a      	uxth	r2, r3
 8014488:	200e      	movs	r0, #14
 801448a:	2418      	movs	r4, #24
 801448c:	1903      	adds	r3, r0, r4
 801448e:	19db      	adds	r3, r3, r7
 8014490:	210f      	movs	r1, #15
 8014492:	438a      	bics	r2, r1
 8014494:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014498:	085b      	lsrs	r3, r3, #1
 801449a:	b29b      	uxth	r3, r3
 801449c:	2207      	movs	r2, #7
 801449e:	4013      	ands	r3, r2
 80144a0:	b299      	uxth	r1, r3
 80144a2:	1903      	adds	r3, r0, r4
 80144a4:	19db      	adds	r3, r3, r7
 80144a6:	1902      	adds	r2, r0, r4
 80144a8:	19d2      	adds	r2, r2, r7
 80144aa:	8812      	ldrh	r2, [r2, #0]
 80144ac:	430a      	orrs	r2, r1
 80144ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	1902      	adds	r2, r0, r4
 80144b6:	19d2      	adds	r2, r2, r7
 80144b8:	8812      	ldrh	r2, [r2, #0]
 80144ba:	60da      	str	r2, [r3, #12]
 80144bc:	e05d      	b.n	801457a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80144be:	231a      	movs	r3, #26
 80144c0:	2218      	movs	r2, #24
 80144c2:	189b      	adds	r3, r3, r2
 80144c4:	19db      	adds	r3, r3, r7
 80144c6:	2201      	movs	r2, #1
 80144c8:	701a      	strb	r2, [r3, #0]
 80144ca:	e056      	b.n	801457a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80144cc:	231b      	movs	r3, #27
 80144ce:	2218      	movs	r2, #24
 80144d0:	189b      	adds	r3, r3, r2
 80144d2:	19db      	adds	r3, r3, r7
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	2b08      	cmp	r3, #8
 80144d8:	d822      	bhi.n	8014520 <UART_SetConfig+0x4b0>
 80144da:	009a      	lsls	r2, r3, #2
 80144dc:	4b32      	ldr	r3, [pc, #200]	@ (80145a8 <UART_SetConfig+0x538>)
 80144de:	18d3      	adds	r3, r2, r3
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80144e4:	f7fd fe30 	bl	8012148 <HAL_RCC_GetPCLK1Freq>
 80144e8:	0003      	movs	r3, r0
 80144ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80144ec:	e021      	b.n	8014532 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80144ee:	f7fd fe41 	bl	8012174 <HAL_RCC_GetPCLK2Freq>
 80144f2:	0003      	movs	r3, r0
 80144f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80144f6:	e01c      	b.n	8014532 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80144f8:	4b28      	ldr	r3, [pc, #160]	@ (801459c <UART_SetConfig+0x52c>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	2210      	movs	r2, #16
 80144fe:	4013      	ands	r3, r2
 8014500:	d002      	beq.n	8014508 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8014502:	4b27      	ldr	r3, [pc, #156]	@ (80145a0 <UART_SetConfig+0x530>)
 8014504:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014506:	e014      	b.n	8014532 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8014508:	4b26      	ldr	r3, [pc, #152]	@ (80145a4 <UART_SetConfig+0x534>)
 801450a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801450c:	e011      	b.n	8014532 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801450e:	f7fd fd6b 	bl	8011fe8 <HAL_RCC_GetSysClockFreq>
 8014512:	0003      	movs	r3, r0
 8014514:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014516:	e00c      	b.n	8014532 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014518:	2380      	movs	r3, #128	@ 0x80
 801451a:	021b      	lsls	r3, r3, #8
 801451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801451e:	e008      	b.n	8014532 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8014520:	2300      	movs	r3, #0
 8014522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8014524:	231a      	movs	r3, #26
 8014526:	2218      	movs	r2, #24
 8014528:	189b      	adds	r3, r3, r2
 801452a:	19db      	adds	r3, r3, r7
 801452c:	2201      	movs	r2, #1
 801452e:	701a      	strb	r2, [r3, #0]
        break;
 8014530:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8014532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014534:	2b00      	cmp	r3, #0
 8014536:	d020      	beq.n	801457a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	085a      	lsrs	r2, r3, #1
 801453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014540:	18d2      	adds	r2, r2, r3
 8014542:	69fb      	ldr	r3, [r7, #28]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	0019      	movs	r1, r3
 8014548:	0010      	movs	r0, r2
 801454a:	f7eb fe2b 	bl	80001a4 <__udivsi3>
 801454e:	0003      	movs	r3, r0
 8014550:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014554:	2b0f      	cmp	r3, #15
 8014556:	d90a      	bls.n	801456e <UART_SetConfig+0x4fe>
 8014558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801455a:	2380      	movs	r3, #128	@ 0x80
 801455c:	025b      	lsls	r3, r3, #9
 801455e:	429a      	cmp	r2, r3
 8014560:	d205      	bcs.n	801456e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014564:	b29a      	uxth	r2, r3
 8014566:	69fb      	ldr	r3, [r7, #28]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	60da      	str	r2, [r3, #12]
 801456c:	e005      	b.n	801457a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801456e:	231a      	movs	r3, #26
 8014570:	2218      	movs	r2, #24
 8014572:	189b      	adds	r3, r3, r2
 8014574:	19db      	adds	r3, r3, r7
 8014576:	2201      	movs	r2, #1
 8014578:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	2200      	movs	r2, #0
 801457e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	2200      	movs	r2, #0
 8014584:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8014586:	231a      	movs	r3, #26
 8014588:	2218      	movs	r2, #24
 801458a:	189b      	adds	r3, r3, r2
 801458c:	19db      	adds	r3, r3, r7
 801458e:	781b      	ldrb	r3, [r3, #0]
}
 8014590:	0018      	movs	r0, r3
 8014592:	46bd      	mov	sp, r7
 8014594:	b00e      	add	sp, #56	@ 0x38
 8014596:	bdb0      	pop	{r4, r5, r7, pc}
 8014598:	080208b0 	.word	0x080208b0
 801459c:	40021000 	.word	0x40021000
 80145a0:	003d0900 	.word	0x003d0900
 80145a4:	00f42400 	.word	0x00f42400
 80145a8:	080208d4 	.word	0x080208d4

080145ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145b8:	2201      	movs	r2, #1
 80145ba:	4013      	ands	r3, r2
 80145bc:	d00b      	beq.n	80145d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	685b      	ldr	r3, [r3, #4]
 80145c4:	4a4a      	ldr	r2, [pc, #296]	@ (80146f0 <UART_AdvFeatureConfig+0x144>)
 80145c6:	4013      	ands	r3, r2
 80145c8:	0019      	movs	r1, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	430a      	orrs	r2, r1
 80145d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145da:	2202      	movs	r2, #2
 80145dc:	4013      	ands	r3, r2
 80145de:	d00b      	beq.n	80145f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	4a43      	ldr	r2, [pc, #268]	@ (80146f4 <UART_AdvFeatureConfig+0x148>)
 80145e8:	4013      	ands	r3, r2
 80145ea:	0019      	movs	r1, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	430a      	orrs	r2, r1
 80145f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145fc:	2204      	movs	r2, #4
 80145fe:	4013      	ands	r3, r2
 8014600:	d00b      	beq.n	801461a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	4a3b      	ldr	r2, [pc, #236]	@ (80146f8 <UART_AdvFeatureConfig+0x14c>)
 801460a:	4013      	ands	r3, r2
 801460c:	0019      	movs	r1, r3
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	430a      	orrs	r2, r1
 8014618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801461e:	2208      	movs	r2, #8
 8014620:	4013      	ands	r3, r2
 8014622:	d00b      	beq.n	801463c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	4a34      	ldr	r2, [pc, #208]	@ (80146fc <UART_AdvFeatureConfig+0x150>)
 801462c:	4013      	ands	r3, r2
 801462e:	0019      	movs	r1, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	430a      	orrs	r2, r1
 801463a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014640:	2210      	movs	r2, #16
 8014642:	4013      	ands	r3, r2
 8014644:	d00b      	beq.n	801465e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	689b      	ldr	r3, [r3, #8]
 801464c:	4a2c      	ldr	r2, [pc, #176]	@ (8014700 <UART_AdvFeatureConfig+0x154>)
 801464e:	4013      	ands	r3, r2
 8014650:	0019      	movs	r1, r3
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	430a      	orrs	r2, r1
 801465c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014662:	2220      	movs	r2, #32
 8014664:	4013      	ands	r3, r2
 8014666:	d00b      	beq.n	8014680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	689b      	ldr	r3, [r3, #8]
 801466e:	4a25      	ldr	r2, [pc, #148]	@ (8014704 <UART_AdvFeatureConfig+0x158>)
 8014670:	4013      	ands	r3, r2
 8014672:	0019      	movs	r1, r3
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	430a      	orrs	r2, r1
 801467e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014684:	2240      	movs	r2, #64	@ 0x40
 8014686:	4013      	ands	r3, r2
 8014688:	d01d      	beq.n	80146c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	685b      	ldr	r3, [r3, #4]
 8014690:	4a1d      	ldr	r2, [pc, #116]	@ (8014708 <UART_AdvFeatureConfig+0x15c>)
 8014692:	4013      	ands	r3, r2
 8014694:	0019      	movs	r1, r3
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	430a      	orrs	r2, r1
 80146a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80146a6:	2380      	movs	r3, #128	@ 0x80
 80146a8:	035b      	lsls	r3, r3, #13
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d10b      	bne.n	80146c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	4a15      	ldr	r2, [pc, #84]	@ (801470c <UART_AdvFeatureConfig+0x160>)
 80146b6:	4013      	ands	r3, r2
 80146b8:	0019      	movs	r1, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	430a      	orrs	r2, r1
 80146c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146ca:	2280      	movs	r2, #128	@ 0x80
 80146cc:	4013      	ands	r3, r2
 80146ce:	d00b      	beq.n	80146e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	4a0e      	ldr	r2, [pc, #56]	@ (8014710 <UART_AdvFeatureConfig+0x164>)
 80146d8:	4013      	ands	r3, r2
 80146da:	0019      	movs	r1, r3
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	430a      	orrs	r2, r1
 80146e6:	605a      	str	r2, [r3, #4]
  }
}
 80146e8:	46c0      	nop			@ (mov r8, r8)
 80146ea:	46bd      	mov	sp, r7
 80146ec:	b002      	add	sp, #8
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	fffdffff 	.word	0xfffdffff
 80146f4:	fffeffff 	.word	0xfffeffff
 80146f8:	fffbffff 	.word	0xfffbffff
 80146fc:	ffff7fff 	.word	0xffff7fff
 8014700:	ffffefff 	.word	0xffffefff
 8014704:	ffffdfff 	.word	0xffffdfff
 8014708:	ffefffff 	.word	0xffefffff
 801470c:	ff9fffff 	.word	0xff9fffff
 8014710:	fff7ffff 	.word	0xfff7ffff

08014714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b092      	sub	sp, #72	@ 0x48
 8014718:	af02      	add	r7, sp, #8
 801471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2284      	movs	r2, #132	@ 0x84
 8014720:	2100      	movs	r1, #0
 8014722:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014724:	f7f7 fb46 	bl	800bdb4 <HAL_GetTick>
 8014728:	0003      	movs	r3, r0
 801472a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2208      	movs	r2, #8
 8014734:	4013      	ands	r3, r2
 8014736:	2b08      	cmp	r3, #8
 8014738:	d12c      	bne.n	8014794 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801473a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801473c:	2280      	movs	r2, #128	@ 0x80
 801473e:	0391      	lsls	r1, r2, #14
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	4a46      	ldr	r2, [pc, #280]	@ (801485c <UART_CheckIdleState+0x148>)
 8014744:	9200      	str	r2, [sp, #0]
 8014746:	2200      	movs	r2, #0
 8014748:	f000 f88c 	bl	8014864 <UART_WaitOnFlagUntilTimeout>
 801474c:	1e03      	subs	r3, r0, #0
 801474e:	d021      	beq.n	8014794 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014750:	f3ef 8310 	mrs	r3, PRIMASK
 8014754:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8014756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8014758:	63bb      	str	r3, [r7, #56]	@ 0x38
 801475a:	2301      	movs	r3, #1
 801475c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014760:	f383 8810 	msr	PRIMASK, r3
}
 8014764:	46c0      	nop			@ (mov r8, r8)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	681a      	ldr	r2, [r3, #0]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2180      	movs	r1, #128	@ 0x80
 8014772:	438a      	bics	r2, r1
 8014774:	601a      	str	r2, [r3, #0]
 8014776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801477c:	f383 8810 	msr	PRIMASK, r3
}
 8014780:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2220      	movs	r2, #32
 8014786:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2278      	movs	r2, #120	@ 0x78
 801478c:	2100      	movs	r1, #0
 801478e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014790:	2303      	movs	r3, #3
 8014792:	e05f      	b.n	8014854 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2204      	movs	r2, #4
 801479c:	4013      	ands	r3, r2
 801479e:	2b04      	cmp	r3, #4
 80147a0:	d146      	bne.n	8014830 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80147a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147a4:	2280      	movs	r2, #128	@ 0x80
 80147a6:	03d1      	lsls	r1, r2, #15
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	4a2c      	ldr	r2, [pc, #176]	@ (801485c <UART_CheckIdleState+0x148>)
 80147ac:	9200      	str	r2, [sp, #0]
 80147ae:	2200      	movs	r2, #0
 80147b0:	f000 f858 	bl	8014864 <UART_WaitOnFlagUntilTimeout>
 80147b4:	1e03      	subs	r3, r0, #0
 80147b6:	d03b      	beq.n	8014830 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147b8:	f3ef 8310 	mrs	r3, PRIMASK
 80147bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80147be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80147c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80147c2:	2301      	movs	r3, #1
 80147c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	f383 8810 	msr	PRIMASK, r3
}
 80147cc:	46c0      	nop			@ (mov r8, r8)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	681a      	ldr	r2, [r3, #0]
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	4921      	ldr	r1, [pc, #132]	@ (8014860 <UART_CheckIdleState+0x14c>)
 80147da:	400a      	ands	r2, r1
 80147dc:	601a      	str	r2, [r3, #0]
 80147de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	f383 8810 	msr	PRIMASK, r3
}
 80147e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147ea:	f3ef 8310 	mrs	r3, PRIMASK
 80147ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80147f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80147f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80147f4:	2301      	movs	r3, #1
 80147f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	f383 8810 	msr	PRIMASK, r3
}
 80147fe:	46c0      	nop			@ (mov r8, r8)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	689a      	ldr	r2, [r3, #8]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	2101      	movs	r1, #1
 801480c:	438a      	bics	r2, r1
 801480e:	609a      	str	r2, [r3, #8]
 8014810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014812:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014814:	6a3b      	ldr	r3, [r7, #32]
 8014816:	f383 8810 	msr	PRIMASK, r3
}
 801481a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2280      	movs	r2, #128	@ 0x80
 8014820:	2120      	movs	r1, #32
 8014822:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2278      	movs	r2, #120	@ 0x78
 8014828:	2100      	movs	r1, #0
 801482a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801482c:	2303      	movs	r3, #3
 801482e:	e011      	b.n	8014854 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2220      	movs	r2, #32
 8014834:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2280      	movs	r2, #128	@ 0x80
 801483a:	2120      	movs	r1, #32
 801483c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2200      	movs	r2, #0
 8014848:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2278      	movs	r2, #120	@ 0x78
 801484e:	2100      	movs	r1, #0
 8014850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014852:	2300      	movs	r3, #0
}
 8014854:	0018      	movs	r0, r3
 8014856:	46bd      	mov	sp, r7
 8014858:	b010      	add	sp, #64	@ 0x40
 801485a:	bd80      	pop	{r7, pc}
 801485c:	01ffffff 	.word	0x01ffffff
 8014860:	fffffedf 	.word	0xfffffedf

08014864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b084      	sub	sp, #16
 8014868:	af00      	add	r7, sp, #0
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	603b      	str	r3, [r7, #0]
 8014870:	1dfb      	adds	r3, r7, #7
 8014872:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014874:	e04b      	b.n	801490e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014876:	69bb      	ldr	r3, [r7, #24]
 8014878:	3301      	adds	r3, #1
 801487a:	d048      	beq.n	801490e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801487c:	f7f7 fa9a 	bl	800bdb4 <HAL_GetTick>
 8014880:	0002      	movs	r2, r0
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	1ad3      	subs	r3, r2, r3
 8014886:	69ba      	ldr	r2, [r7, #24]
 8014888:	429a      	cmp	r2, r3
 801488a:	d302      	bcc.n	8014892 <UART_WaitOnFlagUntilTimeout+0x2e>
 801488c:	69bb      	ldr	r3, [r7, #24]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d101      	bne.n	8014896 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8014892:	2303      	movs	r3, #3
 8014894:	e04b      	b.n	801492e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2204      	movs	r2, #4
 801489e:	4013      	ands	r3, r2
 80148a0:	d035      	beq.n	801490e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	69db      	ldr	r3, [r3, #28]
 80148a8:	2208      	movs	r2, #8
 80148aa:	4013      	ands	r3, r2
 80148ac:	2b08      	cmp	r3, #8
 80148ae:	d111      	bne.n	80148d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2208      	movs	r2, #8
 80148b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	0018      	movs	r0, r3
 80148bc:	f000 f9ca 	bl	8014c54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2284      	movs	r2, #132	@ 0x84
 80148c4:	2108      	movs	r1, #8
 80148c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2278      	movs	r2, #120	@ 0x78
 80148cc:	2100      	movs	r1, #0
 80148ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80148d0:	2301      	movs	r3, #1
 80148d2:	e02c      	b.n	801492e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	69da      	ldr	r2, [r3, #28]
 80148da:	2380      	movs	r3, #128	@ 0x80
 80148dc:	011b      	lsls	r3, r3, #4
 80148de:	401a      	ands	r2, r3
 80148e0:	2380      	movs	r3, #128	@ 0x80
 80148e2:	011b      	lsls	r3, r3, #4
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d112      	bne.n	801490e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	2280      	movs	r2, #128	@ 0x80
 80148ee:	0112      	lsls	r2, r2, #4
 80148f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	0018      	movs	r0, r3
 80148f6:	f000 f9ad 	bl	8014c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2284      	movs	r2, #132	@ 0x84
 80148fe:	2120      	movs	r1, #32
 8014900:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2278      	movs	r2, #120	@ 0x78
 8014906:	2100      	movs	r1, #0
 8014908:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801490a:	2303      	movs	r3, #3
 801490c:	e00f      	b.n	801492e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	69db      	ldr	r3, [r3, #28]
 8014914:	68ba      	ldr	r2, [r7, #8]
 8014916:	4013      	ands	r3, r2
 8014918:	68ba      	ldr	r2, [r7, #8]
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	425a      	negs	r2, r3
 801491e:	4153      	adcs	r3, r2
 8014920:	b2db      	uxtb	r3, r3
 8014922:	001a      	movs	r2, r3
 8014924:	1dfb      	adds	r3, r7, #7
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	429a      	cmp	r2, r3
 801492a:	d0a4      	beq.n	8014876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801492c:	2300      	movs	r3, #0
}
 801492e:	0018      	movs	r0, r3
 8014930:	46bd      	mov	sp, r7
 8014932:	b004      	add	sp, #16
 8014934:	bd80      	pop	{r7, pc}
	...

08014938 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b090      	sub	sp, #64	@ 0x40
 801493c:	af00      	add	r7, sp, #0
 801493e:	60f8      	str	r0, [r7, #12]
 8014940:	60b9      	str	r1, [r7, #8]
 8014942:	1dbb      	adds	r3, r7, #6
 8014944:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	68ba      	ldr	r2, [r7, #8]
 801494a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	1dba      	adds	r2, r7, #6
 8014950:	2158      	movs	r1, #88	@ 0x58
 8014952:	8812      	ldrh	r2, [r2, #0]
 8014954:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	1dba      	adds	r2, r7, #6
 801495a:	215a      	movs	r1, #90	@ 0x5a
 801495c:	8812      	ldrh	r2, [r2, #0]
 801495e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2200      	movs	r2, #0
 8014964:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	689a      	ldr	r2, [r3, #8]
 801496a:	2380      	movs	r3, #128	@ 0x80
 801496c:	015b      	lsls	r3, r3, #5
 801496e:	429a      	cmp	r2, r3
 8014970:	d10d      	bne.n	801498e <UART_Start_Receive_IT+0x56>
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	691b      	ldr	r3, [r3, #16]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d104      	bne.n	8014984 <UART_Start_Receive_IT+0x4c>
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	225c      	movs	r2, #92	@ 0x5c
 801497e:	4950      	ldr	r1, [pc, #320]	@ (8014ac0 <UART_Start_Receive_IT+0x188>)
 8014980:	5299      	strh	r1, [r3, r2]
 8014982:	e02e      	b.n	80149e2 <UART_Start_Receive_IT+0xaa>
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	225c      	movs	r2, #92	@ 0x5c
 8014988:	21ff      	movs	r1, #255	@ 0xff
 801498a:	5299      	strh	r1, [r3, r2]
 801498c:	e029      	b.n	80149e2 <UART_Start_Receive_IT+0xaa>
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	689b      	ldr	r3, [r3, #8]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d10d      	bne.n	80149b2 <UART_Start_Receive_IT+0x7a>
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	691b      	ldr	r3, [r3, #16]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d104      	bne.n	80149a8 <UART_Start_Receive_IT+0x70>
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	225c      	movs	r2, #92	@ 0x5c
 80149a2:	21ff      	movs	r1, #255	@ 0xff
 80149a4:	5299      	strh	r1, [r3, r2]
 80149a6:	e01c      	b.n	80149e2 <UART_Start_Receive_IT+0xaa>
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	225c      	movs	r2, #92	@ 0x5c
 80149ac:	217f      	movs	r1, #127	@ 0x7f
 80149ae:	5299      	strh	r1, [r3, r2]
 80149b0:	e017      	b.n	80149e2 <UART_Start_Receive_IT+0xaa>
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	689a      	ldr	r2, [r3, #8]
 80149b6:	2380      	movs	r3, #128	@ 0x80
 80149b8:	055b      	lsls	r3, r3, #21
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d10d      	bne.n	80149da <UART_Start_Receive_IT+0xa2>
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	691b      	ldr	r3, [r3, #16]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d104      	bne.n	80149d0 <UART_Start_Receive_IT+0x98>
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	225c      	movs	r2, #92	@ 0x5c
 80149ca:	217f      	movs	r1, #127	@ 0x7f
 80149cc:	5299      	strh	r1, [r3, r2]
 80149ce:	e008      	b.n	80149e2 <UART_Start_Receive_IT+0xaa>
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	225c      	movs	r2, #92	@ 0x5c
 80149d4:	213f      	movs	r1, #63	@ 0x3f
 80149d6:	5299      	strh	r1, [r3, r2]
 80149d8:	e003      	b.n	80149e2 <UART_Start_Receive_IT+0xaa>
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	225c      	movs	r2, #92	@ 0x5c
 80149de:	2100      	movs	r1, #0
 80149e0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2284      	movs	r2, #132	@ 0x84
 80149e6:	2100      	movs	r1, #0
 80149e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2280      	movs	r2, #128	@ 0x80
 80149ee:	2122      	movs	r1, #34	@ 0x22
 80149f0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149f2:	f3ef 8310 	mrs	r3, PRIMASK
 80149f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80149f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80149fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149fc:	2301      	movs	r3, #1
 80149fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a02:	f383 8810 	msr	PRIMASK, r3
}
 8014a06:	46c0      	nop			@ (mov r8, r8)
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	689a      	ldr	r2, [r3, #8]
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2101      	movs	r1, #1
 8014a14:	430a      	orrs	r2, r1
 8014a16:	609a      	str	r2, [r3, #8]
 8014a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a1e:	f383 8810 	msr	PRIMASK, r3
}
 8014a22:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	689a      	ldr	r2, [r3, #8]
 8014a28:	2380      	movs	r3, #128	@ 0x80
 8014a2a:	015b      	lsls	r3, r3, #5
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d107      	bne.n	8014a40 <UART_Start_Receive_IT+0x108>
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	691b      	ldr	r3, [r3, #16]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d103      	bne.n	8014a40 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	4a22      	ldr	r2, [pc, #136]	@ (8014ac4 <UART_Start_Receive_IT+0x18c>)
 8014a3c:	669a      	str	r2, [r3, #104]	@ 0x68
 8014a3e:	e002      	b.n	8014a46 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	4a21      	ldr	r2, [pc, #132]	@ (8014ac8 <UART_Start_Receive_IT+0x190>)
 8014a44:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	691b      	ldr	r3, [r3, #16]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d019      	beq.n	8014a82 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8014a52:	61fb      	str	r3, [r7, #28]
  return(result);
 8014a54:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8014a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a58:	2301      	movs	r3, #1
 8014a5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a5c:	6a3b      	ldr	r3, [r7, #32]
 8014a5e:	f383 8810 	msr	PRIMASK, r3
}
 8014a62:	46c0      	nop			@ (mov r8, r8)
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	681a      	ldr	r2, [r3, #0]
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	2190      	movs	r1, #144	@ 0x90
 8014a70:	0049      	lsls	r1, r1, #1
 8014a72:	430a      	orrs	r2, r1
 8014a74:	601a      	str	r2, [r3, #0]
 8014a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a78:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a7c:	f383 8810 	msr	PRIMASK, r3
}
 8014a80:	e018      	b.n	8014ab4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a82:	f3ef 8310 	mrs	r3, PRIMASK
 8014a86:	613b      	str	r3, [r7, #16]
  return(result);
 8014a88:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8014a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	f383 8810 	msr	PRIMASK, r3
}
 8014a96:	46c0      	nop			@ (mov r8, r8)
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	2120      	movs	r1, #32
 8014aa4:	430a      	orrs	r2, r1
 8014aa6:	601a      	str	r2, [r3, #0]
 8014aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aaa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	f383 8810 	msr	PRIMASK, r3
}
 8014ab2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8014ab4:	2300      	movs	r3, #0
}
 8014ab6:	0018      	movs	r0, r3
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	b010      	add	sp, #64	@ 0x40
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	46c0      	nop			@ (mov r8, r8)
 8014ac0:	000001ff 	.word	0x000001ff
 8014ac4:	08015239 	.word	0x08015239
 8014ac8:	0801506d 	.word	0x0801506d

08014acc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b090      	sub	sp, #64	@ 0x40
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	1dbb      	adds	r3, r7, #6
 8014ad8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	68ba      	ldr	r2, [r7, #8]
 8014ade:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	1dba      	adds	r2, r7, #6
 8014ae4:	2158      	movs	r1, #88	@ 0x58
 8014ae6:	8812      	ldrh	r2, [r2, #0]
 8014ae8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2284      	movs	r2, #132	@ 0x84
 8014aee:	2100      	movs	r1, #0
 8014af0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2280      	movs	r2, #128	@ 0x80
 8014af6:	2122      	movs	r1, #34	@ 0x22
 8014af8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d028      	beq.n	8014b54 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b06:	4a3e      	ldr	r2, [pc, #248]	@ (8014c00 <UART_Start_Receive_DMA+0x134>)
 8014b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8014c04 <UART_Start_Receive_DMA+0x138>)
 8014b10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b16:	4a3c      	ldr	r2, [pc, #240]	@ (8014c08 <UART_Start_Receive_DMA+0x13c>)
 8014b18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b1e:	2200      	movs	r2, #0
 8014b20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	3324      	adds	r3, #36	@ 0x24
 8014b2c:	0019      	movs	r1, r3
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b32:	001a      	movs	r2, r3
 8014b34:	1dbb      	adds	r3, r7, #6
 8014b36:	881b      	ldrh	r3, [r3, #0]
 8014b38:	f7f7 fe5c 	bl	800c7f4 <HAL_DMA_Start_IT>
 8014b3c:	1e03      	subs	r3, r0, #0
 8014b3e:	d009      	beq.n	8014b54 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2284      	movs	r2, #132	@ 0x84
 8014b44:	2110      	movs	r1, #16
 8014b46:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2280      	movs	r2, #128	@ 0x80
 8014b4c:	2120      	movs	r1, #32
 8014b4e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8014b50:	2301      	movs	r3, #1
 8014b52:	e050      	b.n	8014bf6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	691b      	ldr	r3, [r3, #16]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d019      	beq.n	8014b90 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8014b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b66:	2301      	movs	r3, #1
 8014b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6c:	f383 8810 	msr	PRIMASK, r3
}
 8014b70:	46c0      	nop			@ (mov r8, r8)
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2180      	movs	r1, #128	@ 0x80
 8014b7e:	0049      	lsls	r1, r1, #1
 8014b80:	430a      	orrs	r2, r1
 8014b82:	601a      	str	r2, [r3, #0]
 8014b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b86:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b8a:	f383 8810 	msr	PRIMASK, r3
}
 8014b8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b90:	f3ef 8310 	mrs	r3, PRIMASK
 8014b94:	613b      	str	r3, [r7, #16]
  return(result);
 8014b96:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	f383 8810 	msr	PRIMASK, r3
}
 8014ba4:	46c0      	nop			@ (mov r8, r8)
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	689a      	ldr	r2, [r3, #8]
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	2101      	movs	r1, #1
 8014bb2:	430a      	orrs	r2, r1
 8014bb4:	609a      	str	r2, [r3, #8]
 8014bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bba:	69bb      	ldr	r3, [r7, #24]
 8014bbc:	f383 8810 	msr	PRIMASK, r3
}
 8014bc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8014bc6:	61fb      	str	r3, [r7, #28]
  return(result);
 8014bc8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bcc:	2301      	movs	r3, #1
 8014bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bd0:	6a3b      	ldr	r3, [r7, #32]
 8014bd2:	f383 8810 	msr	PRIMASK, r3
}
 8014bd6:	46c0      	nop			@ (mov r8, r8)
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	689a      	ldr	r2, [r3, #8]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	2140      	movs	r1, #64	@ 0x40
 8014be4:	430a      	orrs	r2, r1
 8014be6:	609a      	str	r2, [r3, #8]
 8014be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bee:	f383 8810 	msr	PRIMASK, r3
}
 8014bf2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8014bf4:	2300      	movs	r3, #0
}
 8014bf6:	0018      	movs	r0, r3
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	b010      	add	sp, #64	@ 0x40
 8014bfc:	bd80      	pop	{r7, pc}
 8014bfe:	46c0      	nop			@ (mov r8, r8)
 8014c00:	08014ddd 	.word	0x08014ddd
 8014c04:	08014f11 	.word	0x08014f11
 8014c08:	08014f59 	.word	0x08014f59

08014c0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b086      	sub	sp, #24
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c14:	f3ef 8310 	mrs	r3, PRIMASK
 8014c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c1a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014c1c:	617b      	str	r3, [r7, #20]
 8014c1e:	2301      	movs	r3, #1
 8014c20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f383 8810 	msr	PRIMASK, r3
}
 8014c28:	46c0      	nop			@ (mov r8, r8)
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	21c0      	movs	r1, #192	@ 0xc0
 8014c36:	438a      	bics	r2, r1
 8014c38:	601a      	str	r2, [r3, #0]
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	f383 8810 	msr	PRIMASK, r3
}
 8014c44:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2220      	movs	r2, #32
 8014c4a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8014c4c:	46c0      	nop			@ (mov r8, r8)
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	b006      	add	sp, #24
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b08e      	sub	sp, #56	@ 0x38
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8014c60:	617b      	str	r3, [r7, #20]
  return(result);
 8014c62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8014c66:	2301      	movs	r3, #1
 8014c68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	f383 8810 	msr	PRIMASK, r3
}
 8014c70:	46c0      	nop			@ (mov r8, r8)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	4926      	ldr	r1, [pc, #152]	@ (8014d18 <UART_EndRxTransfer+0xc4>)
 8014c7e:	400a      	ands	r2, r1
 8014c80:	601a      	str	r2, [r3, #0]
 8014c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c86:	69fb      	ldr	r3, [r7, #28]
 8014c88:	f383 8810 	msr	PRIMASK, r3
}
 8014c8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8014c92:	623b      	str	r3, [r7, #32]
  return(result);
 8014c94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8014c98:	2301      	movs	r3, #1
 8014c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c9e:	f383 8810 	msr	PRIMASK, r3
}
 8014ca2:	46c0      	nop			@ (mov r8, r8)
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	689a      	ldr	r2, [r3, #8]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	2101      	movs	r1, #1
 8014cb0:	438a      	bics	r2, r1
 8014cb2:	609a      	str	r2, [r3, #8]
 8014cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cba:	f383 8810 	msr	PRIMASK, r3
}
 8014cbe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d118      	bne.n	8014cfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8014ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8014cce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	f383 8810 	msr	PRIMASK, r3
}
 8014cdc:	46c0      	nop			@ (mov r8, r8)
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2110      	movs	r1, #16
 8014cea:	438a      	bics	r2, r1
 8014cec:	601a      	str	r2, [r3, #0]
 8014cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	f383 8810 	msr	PRIMASK, r3
}
 8014cf8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2280      	movs	r2, #128	@ 0x80
 8014cfe:	2120      	movs	r1, #32
 8014d00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2200      	movs	r2, #0
 8014d06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8014d0e:	46c0      	nop			@ (mov r8, r8)
 8014d10:	46bd      	mov	sp, r7
 8014d12:	b00e      	add	sp, #56	@ 0x38
 8014d14:	bd80      	pop	{r7, pc}
 8014d16:	46c0      	nop			@ (mov r8, r8)
 8014d18:	fffffedf 	.word	0xfffffedf

08014d1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b08c      	sub	sp, #48	@ 0x30
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d28:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	2220      	movs	r2, #32
 8014d32:	4013      	ands	r3, r2
 8014d34:	d135      	bne.n	8014da2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8014d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d38:	2252      	movs	r2, #82	@ 0x52
 8014d3a:	2100      	movs	r1, #0
 8014d3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8014d42:	60fb      	str	r3, [r7, #12]
  return(result);
 8014d44:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014d46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014d48:	2301      	movs	r3, #1
 8014d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	f383 8810 	msr	PRIMASK, r3
}
 8014d52:	46c0      	nop			@ (mov r8, r8)
 8014d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	689a      	ldr	r2, [r3, #8]
 8014d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	2180      	movs	r1, #128	@ 0x80
 8014d60:	438a      	bics	r2, r1
 8014d62:	609a      	str	r2, [r3, #8]
 8014d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	f383 8810 	msr	PRIMASK, r3
}
 8014d6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d70:	f3ef 8310 	mrs	r3, PRIMASK
 8014d74:	61bb      	str	r3, [r7, #24]
  return(result);
 8014d76:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d7e:	69fb      	ldr	r3, [r7, #28]
 8014d80:	f383 8810 	msr	PRIMASK, r3
}
 8014d84:	46c0      	nop			@ (mov r8, r8)
 8014d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	2140      	movs	r1, #64	@ 0x40
 8014d92:	430a      	orrs	r2, r1
 8014d94:	601a      	str	r2, [r3, #0]
 8014d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	f383 8810 	msr	PRIMASK, r3
}
 8014da0:	e006      	b.n	8014db0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8014da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014da4:	228c      	movs	r2, #140	@ 0x8c
 8014da6:	589b      	ldr	r3, [r3, r2]
 8014da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014daa:	0010      	movs	r0, r2
 8014dac:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014dae:	46c0      	nop			@ (mov r8, r8)
 8014db0:	46c0      	nop			@ (mov r8, r8)
 8014db2:	46bd      	mov	sp, r7
 8014db4:	b00c      	add	sp, #48	@ 0x30
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b084      	sub	sp, #16
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014dc4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2288      	movs	r2, #136	@ 0x88
 8014dca:	589b      	ldr	r3, [r3, r2]
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	0010      	movs	r0, r2
 8014dd0:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014dd2:	46c0      	nop			@ (mov r8, r8)
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	b004      	add	sp, #16
 8014dd8:	bd80      	pop	{r7, pc}
	...

08014ddc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b094      	sub	sp, #80	@ 0x50
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014de8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	2220      	movs	r2, #32
 8014df2:	4013      	ands	r3, r2
 8014df4:	d16f      	bne.n	8014ed6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8014df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014df8:	225a      	movs	r2, #90	@ 0x5a
 8014dfa:	2100      	movs	r1, #0
 8014dfc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8014e02:	61bb      	str	r3, [r7, #24]
  return(result);
 8014e04:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014e08:	2301      	movs	r3, #1
 8014e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	f383 8810 	msr	PRIMASK, r3
}
 8014e12:	46c0      	nop			@ (mov r8, r8)
 8014e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	493b      	ldr	r1, [pc, #236]	@ (8014f0c <UART_DMAReceiveCplt+0x130>)
 8014e20:	400a      	ands	r2, r1
 8014e22:	601a      	str	r2, [r3, #0]
 8014e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e28:	6a3b      	ldr	r3, [r7, #32]
 8014e2a:	f383 8810 	msr	PRIMASK, r3
}
 8014e2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e30:	f3ef 8310 	mrs	r3, PRIMASK
 8014e34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8014e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e40:	f383 8810 	msr	PRIMASK, r3
}
 8014e44:	46c0      	nop			@ (mov r8, r8)
 8014e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	689a      	ldr	r2, [r3, #8]
 8014e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	2101      	movs	r1, #1
 8014e52:	438a      	bics	r2, r1
 8014e54:	609a      	str	r2, [r3, #8]
 8014e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e5c:	f383 8810 	msr	PRIMASK, r3
}
 8014e60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e62:	f3ef 8310 	mrs	r3, PRIMASK
 8014e66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8014e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014e6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e72:	f383 8810 	msr	PRIMASK, r3
}
 8014e76:	46c0      	nop			@ (mov r8, r8)
 8014e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	689a      	ldr	r2, [r3, #8]
 8014e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	2140      	movs	r1, #64	@ 0x40
 8014e84:	438a      	bics	r2, r1
 8014e86:	609a      	str	r2, [r3, #8]
 8014e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e8e:	f383 8810 	msr	PRIMASK, r3
}
 8014e92:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e96:	2280      	movs	r2, #128	@ 0x80
 8014e98:	2120      	movs	r1, #32
 8014e9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ea0:	2b01      	cmp	r3, #1
 8014ea2:	d118      	bne.n	8014ed6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8014ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8014eaa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014eae:	2301      	movs	r3, #1
 8014eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	f383 8810 	msr	PRIMASK, r3
}
 8014eb8:	46c0      	nop			@ (mov r8, r8)
 8014eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	681a      	ldr	r2, [r3, #0]
 8014ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2110      	movs	r1, #16
 8014ec6:	438a      	bics	r2, r1
 8014ec8:	601a      	str	r2, [r3, #0]
 8014eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	f383 8810 	msr	PRIMASK, r3
}
 8014ed4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ed8:	2200      	movs	r2, #0
 8014eda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ee0:	2b01      	cmp	r3, #1
 8014ee2:	d109      	bne.n	8014ef8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8014ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ee6:	22ac      	movs	r2, #172	@ 0xac
 8014ee8:	589b      	ldr	r3, [r3, r2]
 8014eea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014eec:	2158      	movs	r1, #88	@ 0x58
 8014eee:	5a51      	ldrh	r1, [r2, r1]
 8014ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014ef2:	0010      	movs	r0, r2
 8014ef4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014ef6:	e005      	b.n	8014f04 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8014ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014efa:	2294      	movs	r2, #148	@ 0x94
 8014efc:	589b      	ldr	r3, [r3, r2]
 8014efe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014f00:	0010      	movs	r0, r2
 8014f02:	4798      	blx	r3
}
 8014f04:	46c0      	nop			@ (mov r8, r8)
 8014f06:	46bd      	mov	sp, r7
 8014f08:	b014      	add	sp, #80	@ 0x50
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	fffffeff 	.word	0xfffffeff

08014f10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	2201      	movs	r2, #1
 8014f22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d10b      	bne.n	8014f44 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	22ac      	movs	r2, #172	@ 0xac
 8014f30:	589b      	ldr	r3, [r3, r2]
 8014f32:	68fa      	ldr	r2, [r7, #12]
 8014f34:	2158      	movs	r1, #88	@ 0x58
 8014f36:	5a52      	ldrh	r2, [r2, r1]
 8014f38:	0852      	lsrs	r2, r2, #1
 8014f3a:	b291      	uxth	r1, r2
 8014f3c:	68fa      	ldr	r2, [r7, #12]
 8014f3e:	0010      	movs	r0, r2
 8014f40:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014f42:	e005      	b.n	8014f50 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2290      	movs	r2, #144	@ 0x90
 8014f48:	589b      	ldr	r3, [r3, r2]
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	0010      	movs	r0, r2
 8014f4e:	4798      	blx	r3
}
 8014f50:	46c0      	nop			@ (mov r8, r8)
 8014f52:	46bd      	mov	sp, r7
 8014f54:	b004      	add	sp, #16
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b086      	sub	sp, #24
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	2280      	movs	r2, #128	@ 0x80
 8014f70:	589b      	ldr	r3, [r3, r2]
 8014f72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	689b      	ldr	r3, [r3, #8]
 8014f7a:	2280      	movs	r2, #128	@ 0x80
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	2b80      	cmp	r3, #128	@ 0x80
 8014f80:	d10a      	bne.n	8014f98 <UART_DMAError+0x40>
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	2b21      	cmp	r3, #33	@ 0x21
 8014f86:	d107      	bne.n	8014f98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	2252      	movs	r2, #82	@ 0x52
 8014f8c:	2100      	movs	r1, #0
 8014f8e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	0018      	movs	r0, r3
 8014f94:	f7ff fe3a 	bl	8014c0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	689b      	ldr	r3, [r3, #8]
 8014f9e:	2240      	movs	r2, #64	@ 0x40
 8014fa0:	4013      	ands	r3, r2
 8014fa2:	2b40      	cmp	r3, #64	@ 0x40
 8014fa4:	d10a      	bne.n	8014fbc <UART_DMAError+0x64>
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2b22      	cmp	r3, #34	@ 0x22
 8014faa:	d107      	bne.n	8014fbc <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	225a      	movs	r2, #90	@ 0x5a
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	0018      	movs	r0, r3
 8014fb8:	f7ff fe4c 	bl	8014c54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	2284      	movs	r2, #132	@ 0x84
 8014fc0:	589b      	ldr	r3, [r3, r2]
 8014fc2:	2210      	movs	r2, #16
 8014fc4:	431a      	orrs	r2, r3
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	2184      	movs	r1, #132	@ 0x84
 8014fca:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8014fcc:	697b      	ldr	r3, [r7, #20]
 8014fce:	2298      	movs	r2, #152	@ 0x98
 8014fd0:	589b      	ldr	r3, [r3, r2]
 8014fd2:	697a      	ldr	r2, [r7, #20]
 8014fd4:	0010      	movs	r0, r2
 8014fd6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014fd8:	46c0      	nop			@ (mov r8, r8)
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	b006      	add	sp, #24
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014fec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	225a      	movs	r2, #90	@ 0x5a
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2252      	movs	r2, #82	@ 0x52
 8014ffa:	2100      	movs	r1, #0
 8014ffc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	2298      	movs	r2, #152	@ 0x98
 8015002:	589b      	ldr	r3, [r3, r2]
 8015004:	68fa      	ldr	r2, [r7, #12]
 8015006:	0010      	movs	r0, r2
 8015008:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801500a:	46c0      	nop			@ (mov r8, r8)
 801500c:	46bd      	mov	sp, r7
 801500e:	b004      	add	sp, #16
 8015010:	bd80      	pop	{r7, pc}

08015012 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015012:	b580      	push	{r7, lr}
 8015014:	b086      	sub	sp, #24
 8015016:	af00      	add	r7, sp, #0
 8015018:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801501a:	f3ef 8310 	mrs	r3, PRIMASK
 801501e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015020:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015022:	617b      	str	r3, [r7, #20]
 8015024:	2301      	movs	r3, #1
 8015026:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f383 8810 	msr	PRIMASK, r3
}
 801502e:	46c0      	nop			@ (mov r8, r8)
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2140      	movs	r1, #64	@ 0x40
 801503c:	438a      	bics	r2, r1
 801503e:	601a      	str	r2, [r3, #0]
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	f383 8810 	msr	PRIMASK, r3
}
 801504a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2220      	movs	r2, #32
 8015050:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2200      	movs	r2, #0
 8015056:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	228c      	movs	r2, #140	@ 0x8c
 801505c:	589b      	ldr	r3, [r3, r2]
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	0010      	movs	r0, r2
 8015062:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015064:	46c0      	nop			@ (mov r8, r8)
 8015066:	46bd      	mov	sp, r7
 8015068:	b006      	add	sp, #24
 801506a:	bd80      	pop	{r7, pc}

0801506c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b094      	sub	sp, #80	@ 0x50
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015074:	204e      	movs	r0, #78	@ 0x4e
 8015076:	183b      	adds	r3, r7, r0
 8015078:	687a      	ldr	r2, [r7, #4]
 801507a:	215c      	movs	r1, #92	@ 0x5c
 801507c:	5a52      	ldrh	r2, [r2, r1]
 801507e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	2280      	movs	r2, #128	@ 0x80
 8015084:	589b      	ldr	r3, [r3, r2]
 8015086:	2b22      	cmp	r3, #34	@ 0x22
 8015088:	d000      	beq.n	801508c <UART_RxISR_8BIT+0x20>
 801508a:	e0c2      	b.n	8015212 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015092:	214c      	movs	r1, #76	@ 0x4c
 8015094:	187b      	adds	r3, r7, r1
 8015096:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015098:	187b      	adds	r3, r7, r1
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	b2da      	uxtb	r2, r3
 801509e:	183b      	adds	r3, r7, r0
 80150a0:	881b      	ldrh	r3, [r3, #0]
 80150a2:	b2d9      	uxtb	r1, r3
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150a8:	400a      	ands	r2, r1
 80150aa:	b2d2      	uxtb	r2, r2
 80150ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150b2:	1c5a      	adds	r2, r3, #1
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	225a      	movs	r2, #90	@ 0x5a
 80150bc:	5a9b      	ldrh	r3, [r3, r2]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	3b01      	subs	r3, #1
 80150c2:	b299      	uxth	r1, r3
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	225a      	movs	r2, #90	@ 0x5a
 80150c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	225a      	movs	r2, #90	@ 0x5a
 80150ce:	5a9b      	ldrh	r3, [r3, r2]
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d000      	beq.n	80150d8 <UART_RxISR_8BIT+0x6c>
 80150d6:	e0a4      	b.n	8015222 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150d8:	f3ef 8310 	mrs	r3, PRIMASK
 80150dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80150de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80150e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80150e2:	2301      	movs	r3, #1
 80150e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150e8:	f383 8810 	msr	PRIMASK, r3
}
 80150ec:	46c0      	nop			@ (mov r8, r8)
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	681a      	ldr	r2, [r3, #0]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	494c      	ldr	r1, [pc, #304]	@ (801522c <UART_RxISR_8BIT+0x1c0>)
 80150fa:	400a      	ands	r2, r1
 80150fc:	601a      	str	r2, [r3, #0]
 80150fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015104:	f383 8810 	msr	PRIMASK, r3
}
 8015108:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801510a:	f3ef 8310 	mrs	r3, PRIMASK
 801510e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015112:	647b      	str	r3, [r7, #68]	@ 0x44
 8015114:	2301      	movs	r3, #1
 8015116:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801511a:	f383 8810 	msr	PRIMASK, r3
}
 801511e:	46c0      	nop			@ (mov r8, r8)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	689a      	ldr	r2, [r3, #8]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2101      	movs	r1, #1
 801512c:	438a      	bics	r2, r1
 801512e:	609a      	str	r2, [r3, #8]
 8015130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015132:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015136:	f383 8810 	msr	PRIMASK, r3
}
 801513a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2280      	movs	r2, #128	@ 0x80
 8015140:	2120      	movs	r1, #32
 8015142:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2200      	movs	r2, #0
 8015148:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2200      	movs	r2, #0
 801514e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	4a36      	ldr	r2, [pc, #216]	@ (8015230 <UART_RxISR_8BIT+0x1c4>)
 8015156:	4293      	cmp	r3, r2
 8015158:	d01f      	beq.n	801519a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	685a      	ldr	r2, [r3, #4]
 8015160:	2380      	movs	r3, #128	@ 0x80
 8015162:	041b      	lsls	r3, r3, #16
 8015164:	4013      	ands	r3, r2
 8015166:	d018      	beq.n	801519a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015168:	f3ef 8310 	mrs	r3, PRIMASK
 801516c:	61bb      	str	r3, [r7, #24]
  return(result);
 801516e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015170:	643b      	str	r3, [r7, #64]	@ 0x40
 8015172:	2301      	movs	r3, #1
 8015174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015176:	69fb      	ldr	r3, [r7, #28]
 8015178:	f383 8810 	msr	PRIMASK, r3
}
 801517c:	46c0      	nop			@ (mov r8, r8)
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	492a      	ldr	r1, [pc, #168]	@ (8015234 <UART_RxISR_8BIT+0x1c8>)
 801518a:	400a      	ands	r2, r1
 801518c:	601a      	str	r2, [r3, #0]
 801518e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015190:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015192:	6a3b      	ldr	r3, [r7, #32]
 8015194:	f383 8810 	msr	PRIMASK, r3
}
 8015198:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d130      	bne.n	8015204 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2200      	movs	r2, #0
 80151a6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80151a8:	f3ef 8310 	mrs	r3, PRIMASK
 80151ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80151ae:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80151b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80151b2:	2301      	movs	r3, #1
 80151b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	f383 8810 	msr	PRIMASK, r3
}
 80151bc:	46c0      	nop			@ (mov r8, r8)
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	2110      	movs	r1, #16
 80151ca:	438a      	bics	r2, r1
 80151cc:	601a      	str	r2, [r3, #0]
 80151ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80151d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80151d2:	697b      	ldr	r3, [r7, #20]
 80151d4:	f383 8810 	msr	PRIMASK, r3
}
 80151d8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	69db      	ldr	r3, [r3, #28]
 80151e0:	2210      	movs	r2, #16
 80151e2:	4013      	ands	r3, r2
 80151e4:	2b10      	cmp	r3, #16
 80151e6:	d103      	bne.n	80151f0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	2210      	movs	r2, #16
 80151ee:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	22ac      	movs	r2, #172	@ 0xac
 80151f4:	589b      	ldr	r3, [r3, r2]
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	2158      	movs	r1, #88	@ 0x58
 80151fa:	5a51      	ldrh	r1, [r2, r1]
 80151fc:	687a      	ldr	r2, [r7, #4]
 80151fe:	0010      	movs	r0, r2
 8015200:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015202:	e00e      	b.n	8015222 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2294      	movs	r2, #148	@ 0x94
 8015208:	589b      	ldr	r3, [r3, r2]
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	0010      	movs	r0, r2
 801520e:	4798      	blx	r3
}
 8015210:	e007      	b.n	8015222 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	699a      	ldr	r2, [r3, #24]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2108      	movs	r1, #8
 801521e:	430a      	orrs	r2, r1
 8015220:	619a      	str	r2, [r3, #24]
}
 8015222:	46c0      	nop			@ (mov r8, r8)
 8015224:	46bd      	mov	sp, r7
 8015226:	b014      	add	sp, #80	@ 0x50
 8015228:	bd80      	pop	{r7, pc}
 801522a:	46c0      	nop			@ (mov r8, r8)
 801522c:	fffffedf 	.word	0xfffffedf
 8015230:	40004800 	.word	0x40004800
 8015234:	fbffffff 	.word	0xfbffffff

08015238 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b094      	sub	sp, #80	@ 0x50
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015240:	204e      	movs	r0, #78	@ 0x4e
 8015242:	183b      	adds	r3, r7, r0
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	215c      	movs	r1, #92	@ 0x5c
 8015248:	5a52      	ldrh	r2, [r2, r1]
 801524a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2280      	movs	r2, #128	@ 0x80
 8015250:	589b      	ldr	r3, [r3, r2]
 8015252:	2b22      	cmp	r3, #34	@ 0x22
 8015254:	d000      	beq.n	8015258 <UART_RxISR_16BIT+0x20>
 8015256:	e0c2      	b.n	80153de <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801525e:	214c      	movs	r1, #76	@ 0x4c
 8015260:	187b      	adds	r3, r7, r1
 8015262:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015268:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801526a:	187b      	adds	r3, r7, r1
 801526c:	183a      	adds	r2, r7, r0
 801526e:	881b      	ldrh	r3, [r3, #0]
 8015270:	8812      	ldrh	r2, [r2, #0]
 8015272:	4013      	ands	r3, r2
 8015274:	b29a      	uxth	r2, r3
 8015276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015278:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801527e:	1c9a      	adds	r2, r3, #2
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	225a      	movs	r2, #90	@ 0x5a
 8015288:	5a9b      	ldrh	r3, [r3, r2]
 801528a:	b29b      	uxth	r3, r3
 801528c:	3b01      	subs	r3, #1
 801528e:	b299      	uxth	r1, r3
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	225a      	movs	r2, #90	@ 0x5a
 8015294:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	225a      	movs	r2, #90	@ 0x5a
 801529a:	5a9b      	ldrh	r3, [r3, r2]
 801529c:	b29b      	uxth	r3, r3
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d000      	beq.n	80152a4 <UART_RxISR_16BIT+0x6c>
 80152a2:	e0a4      	b.n	80153ee <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152a4:	f3ef 8310 	mrs	r3, PRIMASK
 80152a8:	623b      	str	r3, [r7, #32]
  return(result);
 80152aa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80152ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80152ae:	2301      	movs	r3, #1
 80152b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152b4:	f383 8810 	msr	PRIMASK, r3
}
 80152b8:	46c0      	nop			@ (mov r8, r8)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	494c      	ldr	r1, [pc, #304]	@ (80153f8 <UART_RxISR_16BIT+0x1c0>)
 80152c6:	400a      	ands	r2, r1
 80152c8:	601a      	str	r2, [r3, #0]
 80152ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152d0:	f383 8810 	msr	PRIMASK, r3
}
 80152d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152d6:	f3ef 8310 	mrs	r3, PRIMASK
 80152da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80152dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80152de:	643b      	str	r3, [r7, #64]	@ 0x40
 80152e0:	2301      	movs	r3, #1
 80152e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152e6:	f383 8810 	msr	PRIMASK, r3
}
 80152ea:	46c0      	nop			@ (mov r8, r8)
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	689a      	ldr	r2, [r3, #8]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2101      	movs	r1, #1
 80152f8:	438a      	bics	r2, r1
 80152fa:	609a      	str	r2, [r3, #8]
 80152fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80152fe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015302:	f383 8810 	msr	PRIMASK, r3
}
 8015306:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2280      	movs	r2, #128	@ 0x80
 801530c:	2120      	movs	r1, #32
 801530e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2200      	movs	r2, #0
 8015314:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2200      	movs	r2, #0
 801531a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a36      	ldr	r2, [pc, #216]	@ (80153fc <UART_RxISR_16BIT+0x1c4>)
 8015322:	4293      	cmp	r3, r2
 8015324:	d01f      	beq.n	8015366 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	2380      	movs	r3, #128	@ 0x80
 801532e:	041b      	lsls	r3, r3, #16
 8015330:	4013      	ands	r3, r2
 8015332:	d018      	beq.n	8015366 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015334:	f3ef 8310 	mrs	r3, PRIMASK
 8015338:	617b      	str	r3, [r7, #20]
  return(result);
 801533a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801533e:	2301      	movs	r3, #1
 8015340:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	f383 8810 	msr	PRIMASK, r3
}
 8015348:	46c0      	nop			@ (mov r8, r8)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	492a      	ldr	r1, [pc, #168]	@ (8015400 <UART_RxISR_16BIT+0x1c8>)
 8015356:	400a      	ands	r2, r1
 8015358:	601a      	str	r2, [r3, #0]
 801535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801535c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	f383 8810 	msr	PRIMASK, r3
}
 8015364:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801536a:	2b01      	cmp	r3, #1
 801536c:	d130      	bne.n	80153d0 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	2200      	movs	r2, #0
 8015372:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015374:	f3ef 8310 	mrs	r3, PRIMASK
 8015378:	60bb      	str	r3, [r7, #8]
  return(result);
 801537a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801537c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801537e:	2301      	movs	r3, #1
 8015380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	f383 8810 	msr	PRIMASK, r3
}
 8015388:	46c0      	nop			@ (mov r8, r8)
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	2110      	movs	r1, #16
 8015396:	438a      	bics	r2, r1
 8015398:	601a      	str	r2, [r3, #0]
 801539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801539c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801539e:	693b      	ldr	r3, [r7, #16]
 80153a0:	f383 8810 	msr	PRIMASK, r3
}
 80153a4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	69db      	ldr	r3, [r3, #28]
 80153ac:	2210      	movs	r2, #16
 80153ae:	4013      	ands	r3, r2
 80153b0:	2b10      	cmp	r3, #16
 80153b2:	d103      	bne.n	80153bc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	2210      	movs	r2, #16
 80153ba:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	22ac      	movs	r2, #172	@ 0xac
 80153c0:	589b      	ldr	r3, [r3, r2]
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	2158      	movs	r1, #88	@ 0x58
 80153c6:	5a51      	ldrh	r1, [r2, r1]
 80153c8:	687a      	ldr	r2, [r7, #4]
 80153ca:	0010      	movs	r0, r2
 80153cc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80153ce:	e00e      	b.n	80153ee <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2294      	movs	r2, #148	@ 0x94
 80153d4:	589b      	ldr	r3, [r3, r2]
 80153d6:	687a      	ldr	r2, [r7, #4]
 80153d8:	0010      	movs	r0, r2
 80153da:	4798      	blx	r3
}
 80153dc:	e007      	b.n	80153ee <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	699a      	ldr	r2, [r3, #24]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	2108      	movs	r1, #8
 80153ea:	430a      	orrs	r2, r1
 80153ec:	619a      	str	r2, [r3, #24]
}
 80153ee:	46c0      	nop			@ (mov r8, r8)
 80153f0:	46bd      	mov	sp, r7
 80153f2:	b014      	add	sp, #80	@ 0x50
 80153f4:	bd80      	pop	{r7, pc}
 80153f6:	46c0      	nop			@ (mov r8, r8)
 80153f8:	fffffedf 	.word	0xfffffedf
 80153fc:	40004800 	.word	0x40004800
 8015400:	fbffffff 	.word	0xfbffffff

08015404 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801540c:	46c0      	nop			@ (mov r8, r8)
 801540e:	46bd      	mov	sp, r7
 8015410:	b002      	add	sp, #8
 8015412:	bd80      	pop	{r7, pc}

08015414 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b084      	sub	sp, #16
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2244      	movs	r2, #68	@ 0x44
 8015420:	2100      	movs	r1, #0
 8015422:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8015424:	4b05      	ldr	r3, [pc, #20]	@ (801543c <USB_EnableGlobalInt+0x28>)
 8015426:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	b299      	uxth	r1, r3
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2240      	movs	r2, #64	@ 0x40
 8015430:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015432:	2300      	movs	r3, #0
}
 8015434:	0018      	movs	r0, r3
 8015436:	46bd      	mov	sp, r7
 8015438:	b004      	add	sp, #16
 801543a:	bd80      	pop	{r7, pc}
 801543c:	0000bf80 	.word	0x0000bf80

08015440 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8015448:	4b09      	ldr	r3, [pc, #36]	@ (8015470 <USB_DisableGlobalInt+0x30>)
 801544a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2240      	movs	r2, #64	@ 0x40
 8015450:	5a9b      	ldrh	r3, [r3, r2]
 8015452:	b29b      	uxth	r3, r3
 8015454:	68fa      	ldr	r2, [r7, #12]
 8015456:	b292      	uxth	r2, r2
 8015458:	43d2      	mvns	r2, r2
 801545a:	b292      	uxth	r2, r2
 801545c:	4013      	ands	r3, r2
 801545e:	b299      	uxth	r1, r3
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2240      	movs	r2, #64	@ 0x40
 8015464:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015466:	2300      	movs	r3, #0
}
 8015468:	0018      	movs	r0, r3
 801546a:	46bd      	mov	sp, r7
 801546c:	b004      	add	sp, #16
 801546e:	bd80      	pop	{r7, pc}
 8015470:	0000bf80 	.word	0x0000bf80

08015474 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8015474:	b084      	sub	sp, #16
 8015476:	b590      	push	{r4, r7, lr}
 8015478:	b083      	sub	sp, #12
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
 801547e:	2004      	movs	r0, #4
 8015480:	2410      	movs	r4, #16
 8015482:	1900      	adds	r0, r0, r4
 8015484:	2408      	movs	r4, #8
 8015486:	46a4      	mov	ip, r4
 8015488:	44bc      	add	ip, r7
 801548a:	4460      	add	r0, ip
 801548c:	6001      	str	r1, [r0, #0]
 801548e:	6042      	str	r2, [r0, #4]
 8015490:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2240      	movs	r2, #64	@ 0x40
 8015496:	2101      	movs	r1, #1
 8015498:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2240      	movs	r2, #64	@ 0x40
 801549e:	2100      	movs	r1, #0
 80154a0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2244      	movs	r2, #68	@ 0x44
 80154a6:	2100      	movs	r1, #0
 80154a8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2250      	movs	r2, #80	@ 0x50
 80154ae:	2100      	movs	r1, #0
 80154b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80154b2:	2300      	movs	r3, #0
}
 80154b4:	0018      	movs	r0, r3
 80154b6:	46bd      	mov	sp, r7
 80154b8:	b003      	add	sp, #12
 80154ba:	bc90      	pop	{r4, r7}
 80154bc:	bc08      	pop	{r3}
 80154be:	b004      	add	sp, #16
 80154c0:	4718      	bx	r3
	...

080154c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b09c      	sub	sp, #112	@ 0x70
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80154ce:	236f      	movs	r3, #111	@ 0x6f
 80154d0:	18fb      	adds	r3, r7, r3
 80154d2:	2200      	movs	r2, #0
 80154d4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80154d6:	687a      	ldr	r2, [r7, #4]
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	781b      	ldrb	r3, [r3, #0]
 80154dc:	009b      	lsls	r3, r3, #2
 80154de:	18d3      	adds	r3, r2, r3
 80154e0:	881b      	ldrh	r3, [r3, #0]
 80154e2:	b29a      	uxth	r2, r3
 80154e4:	236c      	movs	r3, #108	@ 0x6c
 80154e6:	18fb      	adds	r3, r7, r3
 80154e8:	49a3      	ldr	r1, [pc, #652]	@ (8015778 <USB_ActivateEndpoint+0x2b4>)
 80154ea:	400a      	ands	r2, r1
 80154ec:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	78db      	ldrb	r3, [r3, #3]
 80154f2:	2b03      	cmp	r3, #3
 80154f4:	d017      	beq.n	8015526 <USB_ActivateEndpoint+0x62>
 80154f6:	dc28      	bgt.n	801554a <USB_ActivateEndpoint+0x86>
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d00e      	beq.n	801551a <USB_ActivateEndpoint+0x56>
 80154fc:	dc25      	bgt.n	801554a <USB_ActivateEndpoint+0x86>
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d002      	beq.n	8015508 <USB_ActivateEndpoint+0x44>
 8015502:	2b01      	cmp	r3, #1
 8015504:	d018      	beq.n	8015538 <USB_ActivateEndpoint+0x74>
 8015506:	e020      	b.n	801554a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8015508:	226c      	movs	r2, #108	@ 0x6c
 801550a:	18bb      	adds	r3, r7, r2
 801550c:	18ba      	adds	r2, r7, r2
 801550e:	8812      	ldrh	r2, [r2, #0]
 8015510:	2180      	movs	r1, #128	@ 0x80
 8015512:	0089      	lsls	r1, r1, #2
 8015514:	430a      	orrs	r2, r1
 8015516:	801a      	strh	r2, [r3, #0]
      break;
 8015518:	e01c      	b.n	8015554 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801551a:	226c      	movs	r2, #108	@ 0x6c
 801551c:	18bb      	adds	r3, r7, r2
 801551e:	18ba      	adds	r2, r7, r2
 8015520:	8812      	ldrh	r2, [r2, #0]
 8015522:	801a      	strh	r2, [r3, #0]
      break;
 8015524:	e016      	b.n	8015554 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8015526:	226c      	movs	r2, #108	@ 0x6c
 8015528:	18bb      	adds	r3, r7, r2
 801552a:	18ba      	adds	r2, r7, r2
 801552c:	8812      	ldrh	r2, [r2, #0]
 801552e:	21c0      	movs	r1, #192	@ 0xc0
 8015530:	00c9      	lsls	r1, r1, #3
 8015532:	430a      	orrs	r2, r1
 8015534:	801a      	strh	r2, [r3, #0]
      break;
 8015536:	e00d      	b.n	8015554 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8015538:	226c      	movs	r2, #108	@ 0x6c
 801553a:	18bb      	adds	r3, r7, r2
 801553c:	18ba      	adds	r2, r7, r2
 801553e:	8812      	ldrh	r2, [r2, #0]
 8015540:	2180      	movs	r1, #128	@ 0x80
 8015542:	00c9      	lsls	r1, r1, #3
 8015544:	430a      	orrs	r2, r1
 8015546:	801a      	strh	r2, [r3, #0]
      break;
 8015548:	e004      	b.n	8015554 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801554a:	236f      	movs	r3, #111	@ 0x6f
 801554c:	18fb      	adds	r3, r7, r3
 801554e:	2201      	movs	r2, #1
 8015550:	701a      	strb	r2, [r3, #0]
      break;
 8015552:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8015554:	687a      	ldr	r2, [r7, #4]
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	18d3      	adds	r3, r2, r3
 801555e:	226c      	movs	r2, #108	@ 0x6c
 8015560:	18ba      	adds	r2, r7, r2
 8015562:	8812      	ldrh	r2, [r2, #0]
 8015564:	4985      	ldr	r1, [pc, #532]	@ (801577c <USB_ActivateEndpoint+0x2b8>)
 8015566:	430a      	orrs	r2, r1
 8015568:	b292      	uxth	r2, r2
 801556a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	781b      	ldrb	r3, [r3, #0]
 8015572:	009b      	lsls	r3, r3, #2
 8015574:	18d3      	adds	r3, r2, r3
 8015576:	881b      	ldrh	r3, [r3, #0]
 8015578:	b29b      	uxth	r3, r3
 801557a:	b21b      	sxth	r3, r3
 801557c:	4a80      	ldr	r2, [pc, #512]	@ (8015780 <USB_ActivateEndpoint+0x2bc>)
 801557e:	4013      	ands	r3, r2
 8015580:	b21a      	sxth	r2, r3
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	781b      	ldrb	r3, [r3, #0]
 8015586:	b21b      	sxth	r3, r3
 8015588:	4313      	orrs	r3, r2
 801558a:	b21a      	sxth	r2, r3
 801558c:	2166      	movs	r1, #102	@ 0x66
 801558e:	187b      	adds	r3, r7, r1
 8015590:	801a      	strh	r2, [r3, #0]
 8015592:	687a      	ldr	r2, [r7, #4]
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	18d3      	adds	r3, r2, r3
 801559c:	187a      	adds	r2, r7, r1
 801559e:	8812      	ldrh	r2, [r2, #0]
 80155a0:	4976      	ldr	r1, [pc, #472]	@ (801577c <USB_ActivateEndpoint+0x2b8>)
 80155a2:	430a      	orrs	r2, r1
 80155a4:	b292      	uxth	r2, r2
 80155a6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	7b1b      	ldrb	r3, [r3, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d000      	beq.n	80155b2 <USB_ActivateEndpoint+0xee>
 80155b0:	e178      	b.n	80158a4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	785b      	ldrb	r3, [r3, #1]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d100      	bne.n	80155bc <USB_ActivateEndpoint+0xf8>
 80155ba:	e07a      	b.n	80156b2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	61bb      	str	r3, [r7, #24]
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2250      	movs	r2, #80	@ 0x50
 80155c4:	5a9b      	ldrh	r3, [r3, r2]
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	001a      	movs	r2, r3
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	189b      	adds	r3, r3, r2
 80155ce:	61bb      	str	r3, [r7, #24]
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	00da      	lsls	r2, r3, #3
 80155d6:	69bb      	ldr	r3, [r7, #24]
 80155d8:	18d3      	adds	r3, r2, r3
 80155da:	2280      	movs	r2, #128	@ 0x80
 80155dc:	00d2      	lsls	r2, r2, #3
 80155de:	4694      	mov	ip, r2
 80155e0:	4463      	add	r3, ip
 80155e2:	617b      	str	r3, [r7, #20]
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	88db      	ldrh	r3, [r3, #6]
 80155e8:	085b      	lsrs	r3, r3, #1
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	18db      	adds	r3, r3, r3
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	009b      	lsls	r3, r3, #2
 80155fc:	18d2      	adds	r2, r2, r3
 80155fe:	2112      	movs	r1, #18
 8015600:	187b      	adds	r3, r7, r1
 8015602:	8812      	ldrh	r2, [r2, #0]
 8015604:	801a      	strh	r2, [r3, #0]
 8015606:	187b      	adds	r3, r7, r1
 8015608:	881b      	ldrh	r3, [r3, #0]
 801560a:	2240      	movs	r2, #64	@ 0x40
 801560c:	4013      	ands	r3, r2
 801560e:	d016      	beq.n	801563e <USB_ActivateEndpoint+0x17a>
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	781b      	ldrb	r3, [r3, #0]
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	18d3      	adds	r3, r2, r3
 801561a:	881b      	ldrh	r3, [r3, #0]
 801561c:	b29a      	uxth	r2, r3
 801561e:	2010      	movs	r0, #16
 8015620:	183b      	adds	r3, r7, r0
 8015622:	4957      	ldr	r1, [pc, #348]	@ (8015780 <USB_ActivateEndpoint+0x2bc>)
 8015624:	400a      	ands	r2, r1
 8015626:	801a      	strh	r2, [r3, #0]
 8015628:	687a      	ldr	r2, [r7, #4]
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	009b      	lsls	r3, r3, #2
 8015630:	18d3      	adds	r3, r2, r3
 8015632:	183a      	adds	r2, r7, r0
 8015634:	8812      	ldrh	r2, [r2, #0]
 8015636:	4953      	ldr	r1, [pc, #332]	@ (8015784 <USB_ActivateEndpoint+0x2c0>)
 8015638:	430a      	orrs	r2, r1
 801563a:	b292      	uxth	r2, r2
 801563c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	78db      	ldrb	r3, [r3, #3]
 8015642:	2b01      	cmp	r3, #1
 8015644:	d01d      	beq.n	8015682 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	009b      	lsls	r3, r3, #2
 801564e:	18d3      	adds	r3, r2, r3
 8015650:	881b      	ldrh	r3, [r3, #0]
 8015652:	b29a      	uxth	r2, r3
 8015654:	200c      	movs	r0, #12
 8015656:	183b      	adds	r3, r7, r0
 8015658:	494b      	ldr	r1, [pc, #300]	@ (8015788 <USB_ActivateEndpoint+0x2c4>)
 801565a:	400a      	ands	r2, r1
 801565c:	801a      	strh	r2, [r3, #0]
 801565e:	183b      	adds	r3, r7, r0
 8015660:	183a      	adds	r2, r7, r0
 8015662:	8812      	ldrh	r2, [r2, #0]
 8015664:	2120      	movs	r1, #32
 8015666:	404a      	eors	r2, r1
 8015668:	801a      	strh	r2, [r3, #0]
 801566a:	687a      	ldr	r2, [r7, #4]
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	009b      	lsls	r3, r3, #2
 8015672:	18d3      	adds	r3, r2, r3
 8015674:	183a      	adds	r2, r7, r0
 8015676:	8812      	ldrh	r2, [r2, #0]
 8015678:	4940      	ldr	r1, [pc, #256]	@ (801577c <USB_ActivateEndpoint+0x2b8>)
 801567a:	430a      	orrs	r2, r1
 801567c:	b292      	uxth	r2, r2
 801567e:	801a      	strh	r2, [r3, #0]
 8015680:	e2b4      	b.n	8015bec <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	009b      	lsls	r3, r3, #2
 801568a:	18d3      	adds	r3, r2, r3
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	b29a      	uxth	r2, r3
 8015690:	200e      	movs	r0, #14
 8015692:	183b      	adds	r3, r7, r0
 8015694:	493c      	ldr	r1, [pc, #240]	@ (8015788 <USB_ActivateEndpoint+0x2c4>)
 8015696:	400a      	ands	r2, r1
 8015698:	801a      	strh	r2, [r3, #0]
 801569a:	687a      	ldr	r2, [r7, #4]
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	009b      	lsls	r3, r3, #2
 80156a2:	18d3      	adds	r3, r2, r3
 80156a4:	183a      	adds	r2, r7, r0
 80156a6:	8812      	ldrh	r2, [r2, #0]
 80156a8:	4934      	ldr	r1, [pc, #208]	@ (801577c <USB_ActivateEndpoint+0x2b8>)
 80156aa:	430a      	orrs	r2, r1
 80156ac:	b292      	uxth	r2, r2
 80156ae:	801a      	strh	r2, [r3, #0]
 80156b0:	e29c      	b.n	8015bec <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2250      	movs	r2, #80	@ 0x50
 80156ba:	5a9b      	ldrh	r3, [r3, r2]
 80156bc:	b29b      	uxth	r3, r3
 80156be:	001a      	movs	r2, r3
 80156c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c2:	189b      	adds	r3, r3, r2
 80156c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	00da      	lsls	r2, r3, #3
 80156cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ce:	18d3      	adds	r3, r2, r3
 80156d0:	4a2e      	ldr	r2, [pc, #184]	@ (801578c <USB_ActivateEndpoint+0x2c8>)
 80156d2:	4694      	mov	ip, r2
 80156d4:	4463      	add	r3, ip
 80156d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	88db      	ldrh	r3, [r3, #6]
 80156dc:	085b      	lsrs	r3, r3, #1
 80156de:	b29b      	uxth	r3, r3
 80156e0:	18db      	adds	r3, r3, r3
 80156e2:	b29a      	uxth	r2, r3
 80156e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2250      	movs	r2, #80	@ 0x50
 80156f0:	5a9b      	ldrh	r3, [r3, r2]
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	001a      	movs	r2, r3
 80156f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156f8:	189b      	adds	r3, r3, r2
 80156fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	00da      	lsls	r2, r3, #3
 8015702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015704:	18d3      	adds	r3, r2, r3
 8015706:	4a22      	ldr	r2, [pc, #136]	@ (8015790 <USB_ActivateEndpoint+0x2cc>)
 8015708:	4694      	mov	ip, r2
 801570a:	4463      	add	r3, ip
 801570c:	627b      	str	r3, [r7, #36]	@ 0x24
 801570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015710:	881b      	ldrh	r3, [r3, #0]
 8015712:	b29b      	uxth	r3, r3
 8015714:	059b      	lsls	r3, r3, #22
 8015716:	0d9b      	lsrs	r3, r3, #22
 8015718:	b29a      	uxth	r2, r3
 801571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801571c:	801a      	strh	r2, [r3, #0]
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	691b      	ldr	r3, [r3, #16]
 8015722:	2b3e      	cmp	r3, #62	@ 0x3e
 8015724:	d91a      	bls.n	801575c <USB_ActivateEndpoint+0x298>
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	691b      	ldr	r3, [r3, #16]
 801572a:	095b      	lsrs	r3, r3, #5
 801572c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	691b      	ldr	r3, [r3, #16]
 8015732:	221f      	movs	r2, #31
 8015734:	4013      	ands	r3, r2
 8015736:	d102      	bne.n	801573e <USB_ActivateEndpoint+0x27a>
 8015738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801573a:	3b01      	subs	r3, #1
 801573c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015740:	881b      	ldrh	r3, [r3, #0]
 8015742:	b29a      	uxth	r2, r3
 8015744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015746:	b29b      	uxth	r3, r3
 8015748:	029b      	lsls	r3, r3, #10
 801574a:	b29b      	uxth	r3, r3
 801574c:	4313      	orrs	r3, r2
 801574e:	b29b      	uxth	r3, r3
 8015750:	4a10      	ldr	r2, [pc, #64]	@ (8015794 <USB_ActivateEndpoint+0x2d0>)
 8015752:	4313      	orrs	r3, r2
 8015754:	b29a      	uxth	r2, r3
 8015756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015758:	801a      	strh	r2, [r3, #0]
 801575a:	e034      	b.n	80157c6 <USB_ActivateEndpoint+0x302>
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	691b      	ldr	r3, [r3, #16]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d119      	bne.n	8015798 <USB_ActivateEndpoint+0x2d4>
 8015764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015766:	881b      	ldrh	r3, [r3, #0]
 8015768:	b29b      	uxth	r3, r3
 801576a:	4a0a      	ldr	r2, [pc, #40]	@ (8015794 <USB_ActivateEndpoint+0x2d0>)
 801576c:	4313      	orrs	r3, r2
 801576e:	b29a      	uxth	r2, r3
 8015770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015772:	801a      	strh	r2, [r3, #0]
 8015774:	e027      	b.n	80157c6 <USB_ActivateEndpoint+0x302>
 8015776:	46c0      	nop			@ (mov r8, r8)
 8015778:	ffff898f 	.word	0xffff898f
 801577c:	ffff8080 	.word	0xffff8080
 8015780:	ffff8f8f 	.word	0xffff8f8f
 8015784:	ffff80c0 	.word	0xffff80c0
 8015788:	ffff8fbf 	.word	0xffff8fbf
 801578c:	00000404 	.word	0x00000404
 8015790:	00000406 	.word	0x00000406
 8015794:	ffff8000 	.word	0xffff8000
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	691b      	ldr	r3, [r3, #16]
 801579c:	085b      	lsrs	r3, r3, #1
 801579e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	691b      	ldr	r3, [r3, #16]
 80157a4:	2201      	movs	r2, #1
 80157a6:	4013      	ands	r3, r2
 80157a8:	d002      	beq.n	80157b0 <USB_ActivateEndpoint+0x2ec>
 80157aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157ac:	3301      	adds	r3, #1
 80157ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80157b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157b2:	881b      	ldrh	r3, [r3, #0]
 80157b4:	b29a      	uxth	r2, r3
 80157b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	029b      	lsls	r3, r3, #10
 80157bc:	b29b      	uxth	r3, r3
 80157be:	4313      	orrs	r3, r2
 80157c0:	b29a      	uxth	r2, r3
 80157c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	009b      	lsls	r3, r3, #2
 80157ce:	18d2      	adds	r2, r2, r3
 80157d0:	2122      	movs	r1, #34	@ 0x22
 80157d2:	187b      	adds	r3, r7, r1
 80157d4:	8812      	ldrh	r2, [r2, #0]
 80157d6:	801a      	strh	r2, [r3, #0]
 80157d8:	187b      	adds	r3, r7, r1
 80157da:	881a      	ldrh	r2, [r3, #0]
 80157dc:	2380      	movs	r3, #128	@ 0x80
 80157de:	01db      	lsls	r3, r3, #7
 80157e0:	4013      	ands	r3, r2
 80157e2:	d016      	beq.n	8015812 <USB_ActivateEndpoint+0x34e>
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	009b      	lsls	r3, r3, #2
 80157ec:	18d3      	adds	r3, r2, r3
 80157ee:	881b      	ldrh	r3, [r3, #0]
 80157f0:	b29a      	uxth	r2, r3
 80157f2:	2020      	movs	r0, #32
 80157f4:	183b      	adds	r3, r7, r0
 80157f6:	49dd      	ldr	r1, [pc, #884]	@ (8015b6c <USB_ActivateEndpoint+0x6a8>)
 80157f8:	400a      	ands	r2, r1
 80157fa:	801a      	strh	r2, [r3, #0]
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	009b      	lsls	r3, r3, #2
 8015804:	18d3      	adds	r3, r2, r3
 8015806:	183a      	adds	r2, r7, r0
 8015808:	8812      	ldrh	r2, [r2, #0]
 801580a:	49d9      	ldr	r1, [pc, #868]	@ (8015b70 <USB_ActivateEndpoint+0x6ac>)
 801580c:	430a      	orrs	r2, r1
 801580e:	b292      	uxth	r2, r2
 8015810:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	781b      	ldrb	r3, [r3, #0]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d125      	bne.n	8015866 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801581a:	687a      	ldr	r2, [r7, #4]
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	18d3      	adds	r3, r2, r3
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	b29a      	uxth	r2, r3
 8015828:	201c      	movs	r0, #28
 801582a:	183b      	adds	r3, r7, r0
 801582c:	49d1      	ldr	r1, [pc, #836]	@ (8015b74 <USB_ActivateEndpoint+0x6b0>)
 801582e:	400a      	ands	r2, r1
 8015830:	801a      	strh	r2, [r3, #0]
 8015832:	183b      	adds	r3, r7, r0
 8015834:	183a      	adds	r2, r7, r0
 8015836:	8812      	ldrh	r2, [r2, #0]
 8015838:	2180      	movs	r1, #128	@ 0x80
 801583a:	0149      	lsls	r1, r1, #5
 801583c:	404a      	eors	r2, r1
 801583e:	801a      	strh	r2, [r3, #0]
 8015840:	183b      	adds	r3, r7, r0
 8015842:	183a      	adds	r2, r7, r0
 8015844:	8812      	ldrh	r2, [r2, #0]
 8015846:	2180      	movs	r1, #128	@ 0x80
 8015848:	0189      	lsls	r1, r1, #6
 801584a:	404a      	eors	r2, r1
 801584c:	801a      	strh	r2, [r3, #0]
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	18d3      	adds	r3, r2, r3
 8015858:	183a      	adds	r2, r7, r0
 801585a:	8812      	ldrh	r2, [r2, #0]
 801585c:	49c6      	ldr	r1, [pc, #792]	@ (8015b78 <USB_ActivateEndpoint+0x6b4>)
 801585e:	430a      	orrs	r2, r1
 8015860:	b292      	uxth	r2, r2
 8015862:	801a      	strh	r2, [r3, #0]
 8015864:	e1c2      	b.n	8015bec <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	009b      	lsls	r3, r3, #2
 801586e:	18d3      	adds	r3, r2, r3
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	b29a      	uxth	r2, r3
 8015874:	201e      	movs	r0, #30
 8015876:	183b      	adds	r3, r7, r0
 8015878:	49be      	ldr	r1, [pc, #760]	@ (8015b74 <USB_ActivateEndpoint+0x6b0>)
 801587a:	400a      	ands	r2, r1
 801587c:	801a      	strh	r2, [r3, #0]
 801587e:	183b      	adds	r3, r7, r0
 8015880:	183a      	adds	r2, r7, r0
 8015882:	8812      	ldrh	r2, [r2, #0]
 8015884:	2180      	movs	r1, #128	@ 0x80
 8015886:	0189      	lsls	r1, r1, #6
 8015888:	404a      	eors	r2, r1
 801588a:	801a      	strh	r2, [r3, #0]
 801588c:	687a      	ldr	r2, [r7, #4]
 801588e:	683b      	ldr	r3, [r7, #0]
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	009b      	lsls	r3, r3, #2
 8015894:	18d3      	adds	r3, r2, r3
 8015896:	183a      	adds	r2, r7, r0
 8015898:	8812      	ldrh	r2, [r2, #0]
 801589a:	49b7      	ldr	r1, [pc, #732]	@ (8015b78 <USB_ActivateEndpoint+0x6b4>)
 801589c:	430a      	orrs	r2, r1
 801589e:	b292      	uxth	r2, r2
 80158a0:	801a      	strh	r2, [r3, #0]
 80158a2:	e1a3      	b.n	8015bec <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	78db      	ldrb	r3, [r3, #3]
 80158a8:	2b02      	cmp	r3, #2
 80158aa:	d117      	bne.n	80158dc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	781b      	ldrb	r3, [r3, #0]
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	18d3      	adds	r3, r2, r3
 80158b6:	881b      	ldrh	r3, [r3, #0]
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	2062      	movs	r0, #98	@ 0x62
 80158bc:	183b      	adds	r3, r7, r0
 80158be:	49ab      	ldr	r1, [pc, #684]	@ (8015b6c <USB_ActivateEndpoint+0x6a8>)
 80158c0:	400a      	ands	r2, r1
 80158c2:	801a      	strh	r2, [r3, #0]
 80158c4:	687a      	ldr	r2, [r7, #4]
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	009b      	lsls	r3, r3, #2
 80158cc:	18d3      	adds	r3, r2, r3
 80158ce:	183a      	adds	r2, r7, r0
 80158d0:	8812      	ldrh	r2, [r2, #0]
 80158d2:	49aa      	ldr	r1, [pc, #680]	@ (8015b7c <USB_ActivateEndpoint+0x6b8>)
 80158d4:	430a      	orrs	r2, r1
 80158d6:	b292      	uxth	r2, r2
 80158d8:	801a      	strh	r2, [r3, #0]
 80158da:	e016      	b.n	801590a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	009b      	lsls	r3, r3, #2
 80158e4:	18d3      	adds	r3, r2, r3
 80158e6:	881b      	ldrh	r3, [r3, #0]
 80158e8:	b29a      	uxth	r2, r3
 80158ea:	2064      	movs	r0, #100	@ 0x64
 80158ec:	183b      	adds	r3, r7, r0
 80158ee:	49a4      	ldr	r1, [pc, #656]	@ (8015b80 <USB_ActivateEndpoint+0x6bc>)
 80158f0:	400a      	ands	r2, r1
 80158f2:	801a      	strh	r2, [r3, #0]
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	18d3      	adds	r3, r2, r3
 80158fe:	183a      	adds	r2, r7, r0
 8015900:	8812      	ldrh	r2, [r2, #0]
 8015902:	499d      	ldr	r1, [pc, #628]	@ (8015b78 <USB_ActivateEndpoint+0x6b4>)
 8015904:	430a      	orrs	r2, r1
 8015906:	b292      	uxth	r2, r2
 8015908:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2250      	movs	r2, #80	@ 0x50
 8015912:	5a9b      	ldrh	r3, [r3, r2]
 8015914:	b29b      	uxth	r3, r3
 8015916:	001a      	movs	r2, r3
 8015918:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801591a:	189b      	adds	r3, r3, r2
 801591c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	00da      	lsls	r2, r3, #3
 8015924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015926:	18d3      	adds	r3, r2, r3
 8015928:	2280      	movs	r2, #128	@ 0x80
 801592a:	00d2      	lsls	r2, r2, #3
 801592c:	4694      	mov	ip, r2
 801592e:	4463      	add	r3, ip
 8015930:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	891b      	ldrh	r3, [r3, #8]
 8015936:	085b      	lsrs	r3, r3, #1
 8015938:	b29b      	uxth	r3, r3
 801593a:	18db      	adds	r3, r3, r3
 801593c:	b29a      	uxth	r2, r3
 801593e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015940:	801a      	strh	r2, [r3, #0]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	657b      	str	r3, [r7, #84]	@ 0x54
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2250      	movs	r2, #80	@ 0x50
 801594a:	5a9b      	ldrh	r3, [r3, r2]
 801594c:	b29b      	uxth	r3, r3
 801594e:	001a      	movs	r2, r3
 8015950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015952:	189b      	adds	r3, r3, r2
 8015954:	657b      	str	r3, [r7, #84]	@ 0x54
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	00da      	lsls	r2, r3, #3
 801595c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801595e:	18d3      	adds	r3, r2, r3
 8015960:	4a88      	ldr	r2, [pc, #544]	@ (8015b84 <USB_ActivateEndpoint+0x6c0>)
 8015962:	4694      	mov	ip, r2
 8015964:	4463      	add	r3, ip
 8015966:	653b      	str	r3, [r7, #80]	@ 0x50
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	895b      	ldrh	r3, [r3, #10]
 801596c:	085b      	lsrs	r3, r3, #1
 801596e:	b29b      	uxth	r3, r3
 8015970:	18db      	adds	r3, r3, r3
 8015972:	b29a      	uxth	r2, r3
 8015974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015976:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	785b      	ldrb	r3, [r3, #1]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d000      	beq.n	8015982 <USB_ActivateEndpoint+0x4be>
 8015980:	e087      	b.n	8015a92 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015982:	687a      	ldr	r2, [r7, #4]
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	009b      	lsls	r3, r3, #2
 801598a:	18d2      	adds	r2, r2, r3
 801598c:	2140      	movs	r1, #64	@ 0x40
 801598e:	187b      	adds	r3, r7, r1
 8015990:	8812      	ldrh	r2, [r2, #0]
 8015992:	801a      	strh	r2, [r3, #0]
 8015994:	187b      	adds	r3, r7, r1
 8015996:	881a      	ldrh	r2, [r3, #0]
 8015998:	2380      	movs	r3, #128	@ 0x80
 801599a:	01db      	lsls	r3, r3, #7
 801599c:	4013      	ands	r3, r2
 801599e:	d016      	beq.n	80159ce <USB_ActivateEndpoint+0x50a>
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	009b      	lsls	r3, r3, #2
 80159a8:	18d3      	adds	r3, r2, r3
 80159aa:	881b      	ldrh	r3, [r3, #0]
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	203e      	movs	r0, #62	@ 0x3e
 80159b0:	183b      	adds	r3, r7, r0
 80159b2:	496e      	ldr	r1, [pc, #440]	@ (8015b6c <USB_ActivateEndpoint+0x6a8>)
 80159b4:	400a      	ands	r2, r1
 80159b6:	801a      	strh	r2, [r3, #0]
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	18d3      	adds	r3, r2, r3
 80159c2:	183a      	adds	r2, r7, r0
 80159c4:	8812      	ldrh	r2, [r2, #0]
 80159c6:	496a      	ldr	r1, [pc, #424]	@ (8015b70 <USB_ActivateEndpoint+0x6ac>)
 80159c8:	430a      	orrs	r2, r1
 80159ca:	b292      	uxth	r2, r2
 80159cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	009b      	lsls	r3, r3, #2
 80159d6:	18d2      	adds	r2, r2, r3
 80159d8:	213c      	movs	r1, #60	@ 0x3c
 80159da:	187b      	adds	r3, r7, r1
 80159dc:	8812      	ldrh	r2, [r2, #0]
 80159de:	801a      	strh	r2, [r3, #0]
 80159e0:	187b      	adds	r3, r7, r1
 80159e2:	881b      	ldrh	r3, [r3, #0]
 80159e4:	2240      	movs	r2, #64	@ 0x40
 80159e6:	4013      	ands	r3, r2
 80159e8:	d016      	beq.n	8015a18 <USB_ActivateEndpoint+0x554>
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	18d3      	adds	r3, r2, r3
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	b29a      	uxth	r2, r3
 80159f8:	203a      	movs	r0, #58	@ 0x3a
 80159fa:	183b      	adds	r3, r7, r0
 80159fc:	495b      	ldr	r1, [pc, #364]	@ (8015b6c <USB_ActivateEndpoint+0x6a8>)
 80159fe:	400a      	ands	r2, r1
 8015a00:	801a      	strh	r2, [r3, #0]
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	18d3      	adds	r3, r2, r3
 8015a0c:	183a      	adds	r2, r7, r0
 8015a0e:	8812      	ldrh	r2, [r2, #0]
 8015a10:	495d      	ldr	r1, [pc, #372]	@ (8015b88 <USB_ActivateEndpoint+0x6c4>)
 8015a12:	430a      	orrs	r2, r1
 8015a14:	b292      	uxth	r2, r2
 8015a16:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	18d3      	adds	r3, r2, r3
 8015a22:	881b      	ldrh	r3, [r3, #0]
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	2038      	movs	r0, #56	@ 0x38
 8015a28:	183b      	adds	r3, r7, r0
 8015a2a:	4952      	ldr	r1, [pc, #328]	@ (8015b74 <USB_ActivateEndpoint+0x6b0>)
 8015a2c:	400a      	ands	r2, r1
 8015a2e:	801a      	strh	r2, [r3, #0]
 8015a30:	183b      	adds	r3, r7, r0
 8015a32:	183a      	adds	r2, r7, r0
 8015a34:	8812      	ldrh	r2, [r2, #0]
 8015a36:	2180      	movs	r1, #128	@ 0x80
 8015a38:	0149      	lsls	r1, r1, #5
 8015a3a:	404a      	eors	r2, r1
 8015a3c:	801a      	strh	r2, [r3, #0]
 8015a3e:	183b      	adds	r3, r7, r0
 8015a40:	183a      	adds	r2, r7, r0
 8015a42:	8812      	ldrh	r2, [r2, #0]
 8015a44:	2180      	movs	r1, #128	@ 0x80
 8015a46:	0189      	lsls	r1, r1, #6
 8015a48:	404a      	eors	r2, r1
 8015a4a:	801a      	strh	r2, [r3, #0]
 8015a4c:	687a      	ldr	r2, [r7, #4]
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	18d3      	adds	r3, r2, r3
 8015a56:	183a      	adds	r2, r7, r0
 8015a58:	8812      	ldrh	r2, [r2, #0]
 8015a5a:	4947      	ldr	r1, [pc, #284]	@ (8015b78 <USB_ActivateEndpoint+0x6b4>)
 8015a5c:	430a      	orrs	r2, r1
 8015a5e:	b292      	uxth	r2, r2
 8015a60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	009b      	lsls	r3, r3, #2
 8015a6a:	18d3      	adds	r3, r2, r3
 8015a6c:	881b      	ldrh	r3, [r3, #0]
 8015a6e:	b29a      	uxth	r2, r3
 8015a70:	2036      	movs	r0, #54	@ 0x36
 8015a72:	183b      	adds	r3, r7, r0
 8015a74:	4945      	ldr	r1, [pc, #276]	@ (8015b8c <USB_ActivateEndpoint+0x6c8>)
 8015a76:	400a      	ands	r2, r1
 8015a78:	801a      	strh	r2, [r3, #0]
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	009b      	lsls	r3, r3, #2
 8015a82:	18d3      	adds	r3, r2, r3
 8015a84:	183a      	adds	r2, r7, r0
 8015a86:	8812      	ldrh	r2, [r2, #0]
 8015a88:	493b      	ldr	r1, [pc, #236]	@ (8015b78 <USB_ActivateEndpoint+0x6b4>)
 8015a8a:	430a      	orrs	r2, r1
 8015a8c:	b292      	uxth	r2, r2
 8015a8e:	801a      	strh	r2, [r3, #0]
 8015a90:	e0ac      	b.n	8015bec <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	009b      	lsls	r3, r3, #2
 8015a9a:	18d2      	adds	r2, r2, r3
 8015a9c:	214e      	movs	r1, #78	@ 0x4e
 8015a9e:	187b      	adds	r3, r7, r1
 8015aa0:	8812      	ldrh	r2, [r2, #0]
 8015aa2:	801a      	strh	r2, [r3, #0]
 8015aa4:	187b      	adds	r3, r7, r1
 8015aa6:	881a      	ldrh	r2, [r3, #0]
 8015aa8:	2380      	movs	r3, #128	@ 0x80
 8015aaa:	01db      	lsls	r3, r3, #7
 8015aac:	4013      	ands	r3, r2
 8015aae:	d016      	beq.n	8015ade <USB_ActivateEndpoint+0x61a>
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	009b      	lsls	r3, r3, #2
 8015ab8:	18d3      	adds	r3, r2, r3
 8015aba:	881b      	ldrh	r3, [r3, #0]
 8015abc:	b29a      	uxth	r2, r3
 8015abe:	204c      	movs	r0, #76	@ 0x4c
 8015ac0:	183b      	adds	r3, r7, r0
 8015ac2:	492a      	ldr	r1, [pc, #168]	@ (8015b6c <USB_ActivateEndpoint+0x6a8>)
 8015ac4:	400a      	ands	r2, r1
 8015ac6:	801a      	strh	r2, [r3, #0]
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	18d3      	adds	r3, r2, r3
 8015ad2:	183a      	adds	r2, r7, r0
 8015ad4:	8812      	ldrh	r2, [r2, #0]
 8015ad6:	4926      	ldr	r1, [pc, #152]	@ (8015b70 <USB_ActivateEndpoint+0x6ac>)
 8015ad8:	430a      	orrs	r2, r1
 8015ada:	b292      	uxth	r2, r2
 8015adc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	18d2      	adds	r2, r2, r3
 8015ae8:	214a      	movs	r1, #74	@ 0x4a
 8015aea:	187b      	adds	r3, r7, r1
 8015aec:	8812      	ldrh	r2, [r2, #0]
 8015aee:	801a      	strh	r2, [r3, #0]
 8015af0:	187b      	adds	r3, r7, r1
 8015af2:	881b      	ldrh	r3, [r3, #0]
 8015af4:	2240      	movs	r2, #64	@ 0x40
 8015af6:	4013      	ands	r3, r2
 8015af8:	d016      	beq.n	8015b28 <USB_ActivateEndpoint+0x664>
 8015afa:	687a      	ldr	r2, [r7, #4]
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	18d3      	adds	r3, r2, r3
 8015b04:	881b      	ldrh	r3, [r3, #0]
 8015b06:	b29a      	uxth	r2, r3
 8015b08:	2048      	movs	r0, #72	@ 0x48
 8015b0a:	183b      	adds	r3, r7, r0
 8015b0c:	4917      	ldr	r1, [pc, #92]	@ (8015b6c <USB_ActivateEndpoint+0x6a8>)
 8015b0e:	400a      	ands	r2, r1
 8015b10:	801a      	strh	r2, [r3, #0]
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	009b      	lsls	r3, r3, #2
 8015b1a:	18d3      	adds	r3, r2, r3
 8015b1c:	183a      	adds	r2, r7, r0
 8015b1e:	8812      	ldrh	r2, [r2, #0]
 8015b20:	4919      	ldr	r1, [pc, #100]	@ (8015b88 <USB_ActivateEndpoint+0x6c4>)
 8015b22:	430a      	orrs	r2, r1
 8015b24:	b292      	uxth	r2, r2
 8015b26:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	78db      	ldrb	r3, [r3, #3]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d02f      	beq.n	8015b90 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	18d3      	adds	r3, r2, r3
 8015b3a:	881b      	ldrh	r3, [r3, #0]
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	2044      	movs	r0, #68	@ 0x44
 8015b40:	183b      	adds	r3, r7, r0
 8015b42:	4912      	ldr	r1, [pc, #72]	@ (8015b8c <USB_ActivateEndpoint+0x6c8>)
 8015b44:	400a      	ands	r2, r1
 8015b46:	801a      	strh	r2, [r3, #0]
 8015b48:	183b      	adds	r3, r7, r0
 8015b4a:	183a      	adds	r2, r7, r0
 8015b4c:	8812      	ldrh	r2, [r2, #0]
 8015b4e:	2120      	movs	r1, #32
 8015b50:	404a      	eors	r2, r1
 8015b52:	801a      	strh	r2, [r3, #0]
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	18d3      	adds	r3, r2, r3
 8015b5e:	183a      	adds	r2, r7, r0
 8015b60:	8812      	ldrh	r2, [r2, #0]
 8015b62:	4905      	ldr	r1, [pc, #20]	@ (8015b78 <USB_ActivateEndpoint+0x6b4>)
 8015b64:	430a      	orrs	r2, r1
 8015b66:	b292      	uxth	r2, r2
 8015b68:	801a      	strh	r2, [r3, #0]
 8015b6a:	e028      	b.n	8015bbe <USB_ActivateEndpoint+0x6fa>
 8015b6c:	ffff8f8f 	.word	0xffff8f8f
 8015b70:	ffffc080 	.word	0xffffc080
 8015b74:	ffffbf8f 	.word	0xffffbf8f
 8015b78:	ffff8080 	.word	0xffff8080
 8015b7c:	ffff8180 	.word	0xffff8180
 8015b80:	ffff8e8f 	.word	0xffff8e8f
 8015b84:	00000404 	.word	0x00000404
 8015b88:	ffff80c0 	.word	0xffff80c0
 8015b8c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015b90:	687a      	ldr	r2, [r7, #4]
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	781b      	ldrb	r3, [r3, #0]
 8015b96:	009b      	lsls	r3, r3, #2
 8015b98:	18d3      	adds	r3, r2, r3
 8015b9a:	881b      	ldrh	r3, [r3, #0]
 8015b9c:	b29a      	uxth	r2, r3
 8015b9e:	2046      	movs	r0, #70	@ 0x46
 8015ba0:	183b      	adds	r3, r7, r0
 8015ba2:	4916      	ldr	r1, [pc, #88]	@ (8015bfc <USB_ActivateEndpoint+0x738>)
 8015ba4:	400a      	ands	r2, r1
 8015ba6:	801a      	strh	r2, [r3, #0]
 8015ba8:	687a      	ldr	r2, [r7, #4]
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	781b      	ldrb	r3, [r3, #0]
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	18d3      	adds	r3, r2, r3
 8015bb2:	183a      	adds	r2, r7, r0
 8015bb4:	8812      	ldrh	r2, [r2, #0]
 8015bb6:	4912      	ldr	r1, [pc, #72]	@ (8015c00 <USB_ActivateEndpoint+0x73c>)
 8015bb8:	430a      	orrs	r2, r1
 8015bba:	b292      	uxth	r2, r2
 8015bbc:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015bbe:	687a      	ldr	r2, [r7, #4]
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	18d3      	adds	r3, r2, r3
 8015bc8:	881b      	ldrh	r3, [r3, #0]
 8015bca:	b29a      	uxth	r2, r3
 8015bcc:	2042      	movs	r0, #66	@ 0x42
 8015bce:	183b      	adds	r3, r7, r0
 8015bd0:	490c      	ldr	r1, [pc, #48]	@ (8015c04 <USB_ActivateEndpoint+0x740>)
 8015bd2:	400a      	ands	r2, r1
 8015bd4:	801a      	strh	r2, [r3, #0]
 8015bd6:	687a      	ldr	r2, [r7, #4]
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	18d3      	adds	r3, r2, r3
 8015be0:	183a      	adds	r2, r7, r0
 8015be2:	8812      	ldrh	r2, [r2, #0]
 8015be4:	4906      	ldr	r1, [pc, #24]	@ (8015c00 <USB_ActivateEndpoint+0x73c>)
 8015be6:	430a      	orrs	r2, r1
 8015be8:	b292      	uxth	r2, r2
 8015bea:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8015bec:	236f      	movs	r3, #111	@ 0x6f
 8015bee:	18fb      	adds	r3, r7, r3
 8015bf0:	781b      	ldrb	r3, [r3, #0]
}
 8015bf2:	0018      	movs	r0, r3
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	b01c      	add	sp, #112	@ 0x70
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	46c0      	nop			@ (mov r8, r8)
 8015bfc:	ffff8fbf 	.word	0xffff8fbf
 8015c00:	ffff8080 	.word	0xffff8080
 8015c04:	ffffbf8f 	.word	0xffffbf8f

08015c08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b08c      	sub	sp, #48	@ 0x30
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	7b1b      	ldrb	r3, [r3, #12]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d000      	beq.n	8015c1c <USB_DeactivateEndpoint+0x14>
 8015c1a:	e07e      	b.n	8015d1a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	785b      	ldrb	r3, [r3, #1]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d03c      	beq.n	8015c9e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015c24:	687a      	ldr	r2, [r7, #4]
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	009b      	lsls	r3, r3, #2
 8015c2c:	18d2      	adds	r2, r2, r3
 8015c2e:	210c      	movs	r1, #12
 8015c30:	187b      	adds	r3, r7, r1
 8015c32:	8812      	ldrh	r2, [r2, #0]
 8015c34:	801a      	strh	r2, [r3, #0]
 8015c36:	187b      	adds	r3, r7, r1
 8015c38:	881b      	ldrh	r3, [r3, #0]
 8015c3a:	2240      	movs	r2, #64	@ 0x40
 8015c3c:	4013      	ands	r3, r2
 8015c3e:	d016      	beq.n	8015c6e <USB_DeactivateEndpoint+0x66>
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	781b      	ldrb	r3, [r3, #0]
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	18d3      	adds	r3, r2, r3
 8015c4a:	881b      	ldrh	r3, [r3, #0]
 8015c4c:	b29a      	uxth	r2, r3
 8015c4e:	200a      	movs	r0, #10
 8015c50:	183b      	adds	r3, r7, r0
 8015c52:	49c7      	ldr	r1, [pc, #796]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015c54:	400a      	ands	r2, r1
 8015c56:	801a      	strh	r2, [r3, #0]
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	18d3      	adds	r3, r2, r3
 8015c62:	183a      	adds	r2, r7, r0
 8015c64:	8812      	ldrh	r2, [r2, #0]
 8015c66:	49c3      	ldr	r1, [pc, #780]	@ (8015f74 <USB_DeactivateEndpoint+0x36c>)
 8015c68:	430a      	orrs	r2, r1
 8015c6a:	b292      	uxth	r2, r2
 8015c6c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	18d3      	adds	r3, r2, r3
 8015c78:	881b      	ldrh	r3, [r3, #0]
 8015c7a:	b29a      	uxth	r2, r3
 8015c7c:	2008      	movs	r0, #8
 8015c7e:	183b      	adds	r3, r7, r0
 8015c80:	49bd      	ldr	r1, [pc, #756]	@ (8015f78 <USB_DeactivateEndpoint+0x370>)
 8015c82:	400a      	ands	r2, r1
 8015c84:	801a      	strh	r2, [r3, #0]
 8015c86:	687a      	ldr	r2, [r7, #4]
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	18d3      	adds	r3, r2, r3
 8015c90:	183a      	adds	r2, r7, r0
 8015c92:	8812      	ldrh	r2, [r2, #0]
 8015c94:	49b9      	ldr	r1, [pc, #740]	@ (8015f7c <USB_DeactivateEndpoint+0x374>)
 8015c96:	430a      	orrs	r2, r1
 8015c98:	b292      	uxth	r2, r2
 8015c9a:	801a      	strh	r2, [r3, #0]
 8015c9c:	e163      	b.n	8015f66 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015c9e:	687a      	ldr	r2, [r7, #4]
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	18d2      	adds	r2, r2, r3
 8015ca8:	2112      	movs	r1, #18
 8015caa:	187b      	adds	r3, r7, r1
 8015cac:	8812      	ldrh	r2, [r2, #0]
 8015cae:	801a      	strh	r2, [r3, #0]
 8015cb0:	187b      	adds	r3, r7, r1
 8015cb2:	881a      	ldrh	r2, [r3, #0]
 8015cb4:	2380      	movs	r3, #128	@ 0x80
 8015cb6:	01db      	lsls	r3, r3, #7
 8015cb8:	4013      	ands	r3, r2
 8015cba:	d016      	beq.n	8015cea <USB_DeactivateEndpoint+0xe2>
 8015cbc:	687a      	ldr	r2, [r7, #4]
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	781b      	ldrb	r3, [r3, #0]
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	18d3      	adds	r3, r2, r3
 8015cc6:	881b      	ldrh	r3, [r3, #0]
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	2010      	movs	r0, #16
 8015ccc:	183b      	adds	r3, r7, r0
 8015cce:	49a8      	ldr	r1, [pc, #672]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015cd0:	400a      	ands	r2, r1
 8015cd2:	801a      	strh	r2, [r3, #0]
 8015cd4:	687a      	ldr	r2, [r7, #4]
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	18d3      	adds	r3, r2, r3
 8015cde:	183a      	adds	r2, r7, r0
 8015ce0:	8812      	ldrh	r2, [r2, #0]
 8015ce2:	49a7      	ldr	r1, [pc, #668]	@ (8015f80 <USB_DeactivateEndpoint+0x378>)
 8015ce4:	430a      	orrs	r2, r1
 8015ce6:	b292      	uxth	r2, r2
 8015ce8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	009b      	lsls	r3, r3, #2
 8015cf2:	18d3      	adds	r3, r2, r3
 8015cf4:	881b      	ldrh	r3, [r3, #0]
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	200e      	movs	r0, #14
 8015cfa:	183b      	adds	r3, r7, r0
 8015cfc:	49a1      	ldr	r1, [pc, #644]	@ (8015f84 <USB_DeactivateEndpoint+0x37c>)
 8015cfe:	400a      	ands	r2, r1
 8015d00:	801a      	strh	r2, [r3, #0]
 8015d02:	687a      	ldr	r2, [r7, #4]
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	781b      	ldrb	r3, [r3, #0]
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	18d3      	adds	r3, r2, r3
 8015d0c:	183a      	adds	r2, r7, r0
 8015d0e:	8812      	ldrh	r2, [r2, #0]
 8015d10:	499a      	ldr	r1, [pc, #616]	@ (8015f7c <USB_DeactivateEndpoint+0x374>)
 8015d12:	430a      	orrs	r2, r1
 8015d14:	b292      	uxth	r2, r2
 8015d16:	801a      	strh	r2, [r3, #0]
 8015d18:	e125      	b.n	8015f66 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	785b      	ldrb	r3, [r3, #1]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d000      	beq.n	8015d24 <USB_DeactivateEndpoint+0x11c>
 8015d22:	e090      	b.n	8015e46 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015d24:	687a      	ldr	r2, [r7, #4]
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	781b      	ldrb	r3, [r3, #0]
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	18d2      	adds	r2, r2, r3
 8015d2e:	2120      	movs	r1, #32
 8015d30:	187b      	adds	r3, r7, r1
 8015d32:	8812      	ldrh	r2, [r2, #0]
 8015d34:	801a      	strh	r2, [r3, #0]
 8015d36:	187b      	adds	r3, r7, r1
 8015d38:	881a      	ldrh	r2, [r3, #0]
 8015d3a:	2380      	movs	r3, #128	@ 0x80
 8015d3c:	01db      	lsls	r3, r3, #7
 8015d3e:	4013      	ands	r3, r2
 8015d40:	d016      	beq.n	8015d70 <USB_DeactivateEndpoint+0x168>
 8015d42:	687a      	ldr	r2, [r7, #4]
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	009b      	lsls	r3, r3, #2
 8015d4a:	18d3      	adds	r3, r2, r3
 8015d4c:	881b      	ldrh	r3, [r3, #0]
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	201e      	movs	r0, #30
 8015d52:	183b      	adds	r3, r7, r0
 8015d54:	4986      	ldr	r1, [pc, #536]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015d56:	400a      	ands	r2, r1
 8015d58:	801a      	strh	r2, [r3, #0]
 8015d5a:	687a      	ldr	r2, [r7, #4]
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	009b      	lsls	r3, r3, #2
 8015d62:	18d3      	adds	r3, r2, r3
 8015d64:	183a      	adds	r2, r7, r0
 8015d66:	8812      	ldrh	r2, [r2, #0]
 8015d68:	4985      	ldr	r1, [pc, #532]	@ (8015f80 <USB_DeactivateEndpoint+0x378>)
 8015d6a:	430a      	orrs	r2, r1
 8015d6c:	b292      	uxth	r2, r2
 8015d6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	009b      	lsls	r3, r3, #2
 8015d78:	18d2      	adds	r2, r2, r3
 8015d7a:	211c      	movs	r1, #28
 8015d7c:	187b      	adds	r3, r7, r1
 8015d7e:	8812      	ldrh	r2, [r2, #0]
 8015d80:	801a      	strh	r2, [r3, #0]
 8015d82:	187b      	adds	r3, r7, r1
 8015d84:	881b      	ldrh	r3, [r3, #0]
 8015d86:	2240      	movs	r2, #64	@ 0x40
 8015d88:	4013      	ands	r3, r2
 8015d8a:	d016      	beq.n	8015dba <USB_DeactivateEndpoint+0x1b2>
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	009b      	lsls	r3, r3, #2
 8015d94:	18d3      	adds	r3, r2, r3
 8015d96:	881b      	ldrh	r3, [r3, #0]
 8015d98:	b29a      	uxth	r2, r3
 8015d9a:	201a      	movs	r0, #26
 8015d9c:	183b      	adds	r3, r7, r0
 8015d9e:	4974      	ldr	r1, [pc, #464]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015da0:	400a      	ands	r2, r1
 8015da2:	801a      	strh	r2, [r3, #0]
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	009b      	lsls	r3, r3, #2
 8015dac:	18d3      	adds	r3, r2, r3
 8015dae:	183a      	adds	r2, r7, r0
 8015db0:	8812      	ldrh	r2, [r2, #0]
 8015db2:	4970      	ldr	r1, [pc, #448]	@ (8015f74 <USB_DeactivateEndpoint+0x36c>)
 8015db4:	430a      	orrs	r2, r1
 8015db6:	b292      	uxth	r2, r2
 8015db8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8015dba:	687a      	ldr	r2, [r7, #4]
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	009b      	lsls	r3, r3, #2
 8015dc2:	18d3      	adds	r3, r2, r3
 8015dc4:	881b      	ldrh	r3, [r3, #0]
 8015dc6:	b29a      	uxth	r2, r3
 8015dc8:	2018      	movs	r0, #24
 8015dca:	183b      	adds	r3, r7, r0
 8015dcc:	4968      	ldr	r1, [pc, #416]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015dce:	400a      	ands	r2, r1
 8015dd0:	801a      	strh	r2, [r3, #0]
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	009b      	lsls	r3, r3, #2
 8015dda:	18d3      	adds	r3, r2, r3
 8015ddc:	183a      	adds	r2, r7, r0
 8015dde:	8812      	ldrh	r2, [r2, #0]
 8015de0:	4964      	ldr	r1, [pc, #400]	@ (8015f74 <USB_DeactivateEndpoint+0x36c>)
 8015de2:	430a      	orrs	r2, r1
 8015de4:	b292      	uxth	r2, r2
 8015de6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	781b      	ldrb	r3, [r3, #0]
 8015dee:	009b      	lsls	r3, r3, #2
 8015df0:	18d3      	adds	r3, r2, r3
 8015df2:	881b      	ldrh	r3, [r3, #0]
 8015df4:	b29a      	uxth	r2, r3
 8015df6:	2016      	movs	r0, #22
 8015df8:	183b      	adds	r3, r7, r0
 8015dfa:	4962      	ldr	r1, [pc, #392]	@ (8015f84 <USB_DeactivateEndpoint+0x37c>)
 8015dfc:	400a      	ands	r2, r1
 8015dfe:	801a      	strh	r2, [r3, #0]
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	781b      	ldrb	r3, [r3, #0]
 8015e06:	009b      	lsls	r3, r3, #2
 8015e08:	18d3      	adds	r3, r2, r3
 8015e0a:	183a      	adds	r2, r7, r0
 8015e0c:	8812      	ldrh	r2, [r2, #0]
 8015e0e:	495b      	ldr	r1, [pc, #364]	@ (8015f7c <USB_DeactivateEndpoint+0x374>)
 8015e10:	430a      	orrs	r2, r1
 8015e12:	b292      	uxth	r2, r2
 8015e14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	18d3      	adds	r3, r2, r3
 8015e20:	881b      	ldrh	r3, [r3, #0]
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	2014      	movs	r0, #20
 8015e26:	183b      	adds	r3, r7, r0
 8015e28:	4953      	ldr	r1, [pc, #332]	@ (8015f78 <USB_DeactivateEndpoint+0x370>)
 8015e2a:	400a      	ands	r2, r1
 8015e2c:	801a      	strh	r2, [r3, #0]
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	009b      	lsls	r3, r3, #2
 8015e36:	18d3      	adds	r3, r2, r3
 8015e38:	183a      	adds	r2, r7, r0
 8015e3a:	8812      	ldrh	r2, [r2, #0]
 8015e3c:	494f      	ldr	r1, [pc, #316]	@ (8015f7c <USB_DeactivateEndpoint+0x374>)
 8015e3e:	430a      	orrs	r2, r1
 8015e40:	b292      	uxth	r2, r2
 8015e42:	801a      	strh	r2, [r3, #0]
 8015e44:	e08f      	b.n	8015f66 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015e46:	687a      	ldr	r2, [r7, #4]
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	781b      	ldrb	r3, [r3, #0]
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	18d2      	adds	r2, r2, r3
 8015e50:	212e      	movs	r1, #46	@ 0x2e
 8015e52:	187b      	adds	r3, r7, r1
 8015e54:	8812      	ldrh	r2, [r2, #0]
 8015e56:	801a      	strh	r2, [r3, #0]
 8015e58:	187b      	adds	r3, r7, r1
 8015e5a:	881a      	ldrh	r2, [r3, #0]
 8015e5c:	2380      	movs	r3, #128	@ 0x80
 8015e5e:	01db      	lsls	r3, r3, #7
 8015e60:	4013      	ands	r3, r2
 8015e62:	d016      	beq.n	8015e92 <USB_DeactivateEndpoint+0x28a>
 8015e64:	687a      	ldr	r2, [r7, #4]
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	781b      	ldrb	r3, [r3, #0]
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	18d3      	adds	r3, r2, r3
 8015e6e:	881b      	ldrh	r3, [r3, #0]
 8015e70:	b29a      	uxth	r2, r3
 8015e72:	202c      	movs	r0, #44	@ 0x2c
 8015e74:	183b      	adds	r3, r7, r0
 8015e76:	493e      	ldr	r1, [pc, #248]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015e78:	400a      	ands	r2, r1
 8015e7a:	801a      	strh	r2, [r3, #0]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	781b      	ldrb	r3, [r3, #0]
 8015e82:	009b      	lsls	r3, r3, #2
 8015e84:	18d3      	adds	r3, r2, r3
 8015e86:	183a      	adds	r2, r7, r0
 8015e88:	8812      	ldrh	r2, [r2, #0]
 8015e8a:	493d      	ldr	r1, [pc, #244]	@ (8015f80 <USB_DeactivateEndpoint+0x378>)
 8015e8c:	430a      	orrs	r2, r1
 8015e8e:	b292      	uxth	r2, r2
 8015e90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	781b      	ldrb	r3, [r3, #0]
 8015e98:	009b      	lsls	r3, r3, #2
 8015e9a:	18d2      	adds	r2, r2, r3
 8015e9c:	212a      	movs	r1, #42	@ 0x2a
 8015e9e:	187b      	adds	r3, r7, r1
 8015ea0:	8812      	ldrh	r2, [r2, #0]
 8015ea2:	801a      	strh	r2, [r3, #0]
 8015ea4:	187b      	adds	r3, r7, r1
 8015ea6:	881b      	ldrh	r3, [r3, #0]
 8015ea8:	2240      	movs	r2, #64	@ 0x40
 8015eaa:	4013      	ands	r3, r2
 8015eac:	d016      	beq.n	8015edc <USB_DeactivateEndpoint+0x2d4>
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	009b      	lsls	r3, r3, #2
 8015eb6:	18d3      	adds	r3, r2, r3
 8015eb8:	881b      	ldrh	r3, [r3, #0]
 8015eba:	b29a      	uxth	r2, r3
 8015ebc:	2028      	movs	r0, #40	@ 0x28
 8015ebe:	183b      	adds	r3, r7, r0
 8015ec0:	492b      	ldr	r1, [pc, #172]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015ec2:	400a      	ands	r2, r1
 8015ec4:	801a      	strh	r2, [r3, #0]
 8015ec6:	687a      	ldr	r2, [r7, #4]
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	009b      	lsls	r3, r3, #2
 8015ece:	18d3      	adds	r3, r2, r3
 8015ed0:	183a      	adds	r2, r7, r0
 8015ed2:	8812      	ldrh	r2, [r2, #0]
 8015ed4:	4927      	ldr	r1, [pc, #156]	@ (8015f74 <USB_DeactivateEndpoint+0x36c>)
 8015ed6:	430a      	orrs	r2, r1
 8015ed8:	b292      	uxth	r2, r2
 8015eda:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	009b      	lsls	r3, r3, #2
 8015ee4:	18d3      	adds	r3, r2, r3
 8015ee6:	881b      	ldrh	r3, [r3, #0]
 8015ee8:	b29a      	uxth	r2, r3
 8015eea:	2026      	movs	r0, #38	@ 0x26
 8015eec:	183b      	adds	r3, r7, r0
 8015eee:	4920      	ldr	r1, [pc, #128]	@ (8015f70 <USB_DeactivateEndpoint+0x368>)
 8015ef0:	400a      	ands	r2, r1
 8015ef2:	801a      	strh	r2, [r3, #0]
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	009b      	lsls	r3, r3, #2
 8015efc:	18d3      	adds	r3, r2, r3
 8015efe:	183a      	adds	r2, r7, r0
 8015f00:	8812      	ldrh	r2, [r2, #0]
 8015f02:	491f      	ldr	r1, [pc, #124]	@ (8015f80 <USB_DeactivateEndpoint+0x378>)
 8015f04:	430a      	orrs	r2, r1
 8015f06:	b292      	uxth	r2, r2
 8015f08:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	009b      	lsls	r3, r3, #2
 8015f12:	18d3      	adds	r3, r2, r3
 8015f14:	881b      	ldrh	r3, [r3, #0]
 8015f16:	b29a      	uxth	r2, r3
 8015f18:	2024      	movs	r0, #36	@ 0x24
 8015f1a:	183b      	adds	r3, r7, r0
 8015f1c:	4916      	ldr	r1, [pc, #88]	@ (8015f78 <USB_DeactivateEndpoint+0x370>)
 8015f1e:	400a      	ands	r2, r1
 8015f20:	801a      	strh	r2, [r3, #0]
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	009b      	lsls	r3, r3, #2
 8015f2a:	18d3      	adds	r3, r2, r3
 8015f2c:	183a      	adds	r2, r7, r0
 8015f2e:	8812      	ldrh	r2, [r2, #0]
 8015f30:	4912      	ldr	r1, [pc, #72]	@ (8015f7c <USB_DeactivateEndpoint+0x374>)
 8015f32:	430a      	orrs	r2, r1
 8015f34:	b292      	uxth	r2, r2
 8015f36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015f38:	687a      	ldr	r2, [r7, #4]
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	18d3      	adds	r3, r2, r3
 8015f42:	881b      	ldrh	r3, [r3, #0]
 8015f44:	b29a      	uxth	r2, r3
 8015f46:	2022      	movs	r0, #34	@ 0x22
 8015f48:	183b      	adds	r3, r7, r0
 8015f4a:	490e      	ldr	r1, [pc, #56]	@ (8015f84 <USB_DeactivateEndpoint+0x37c>)
 8015f4c:	400a      	ands	r2, r1
 8015f4e:	801a      	strh	r2, [r3, #0]
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	009b      	lsls	r3, r3, #2
 8015f58:	18d3      	adds	r3, r2, r3
 8015f5a:	183a      	adds	r2, r7, r0
 8015f5c:	8812      	ldrh	r2, [r2, #0]
 8015f5e:	4907      	ldr	r1, [pc, #28]	@ (8015f7c <USB_DeactivateEndpoint+0x374>)
 8015f60:	430a      	orrs	r2, r1
 8015f62:	b292      	uxth	r2, r2
 8015f64:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8015f66:	2300      	movs	r3, #0
}
 8015f68:	0018      	movs	r0, r3
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	b00c      	add	sp, #48	@ 0x30
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	ffff8f8f 	.word	0xffff8f8f
 8015f74:	ffff80c0 	.word	0xffff80c0
 8015f78:	ffff8fbf 	.word	0xffff8fbf
 8015f7c:	ffff8080 	.word	0xffff8080
 8015f80:	ffffc080 	.word	0xffffc080
 8015f84:	ffffbf8f 	.word	0xffffbf8f

08015f88 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015f88:	b590      	push	{r4, r7, lr}
 8015f8a:	b0c3      	sub	sp, #268	@ 0x10c
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
 8015f90:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	785b      	ldrb	r3, [r3, #1]
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	d001      	beq.n	8015f9e <USB_EPStartXfer+0x16>
 8015f9a:	f000 fd2d 	bl	80169f8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	699a      	ldr	r2, [r3, #24]
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	691b      	ldr	r3, [r3, #16]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d905      	bls.n	8015fb6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	691b      	ldr	r3, [r3, #16]
 8015fae:	1d7a      	adds	r2, r7, #5
 8015fb0:	32ff      	adds	r2, #255	@ 0xff
 8015fb2:	6013      	str	r3, [r2, #0]
 8015fb4:	e004      	b.n	8015fc0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	699b      	ldr	r3, [r3, #24]
 8015fba:	1d7a      	adds	r2, r7, #5
 8015fbc:	32ff      	adds	r2, #255	@ 0xff
 8015fbe:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	7b1b      	ldrb	r3, [r3, #12]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d125      	bne.n	8016014 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	6959      	ldr	r1, [r3, #20]
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	88da      	ldrh	r2, [r3, #6]
 8015fd0:	1d7b      	adds	r3, r7, #5
 8015fd2:	33ff      	adds	r3, #255	@ 0xff
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f001 fa47 	bl	801746c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	613b      	str	r3, [r7, #16]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2250      	movs	r2, #80	@ 0x50
 8015fe6:	5a9b      	ldrh	r3, [r3, r2]
 8015fe8:	b29b      	uxth	r3, r3
 8015fea:	001a      	movs	r2, r3
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	189b      	adds	r3, r3, r2
 8015ff0:	613b      	str	r3, [r7, #16]
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	00da      	lsls	r2, r3, #3
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	18d3      	adds	r3, r2, r3
 8015ffc:	4ad7      	ldr	r2, [pc, #860]	@ (801635c <USB_EPStartXfer+0x3d4>)
 8015ffe:	4694      	mov	ip, r2
 8016000:	4463      	add	r3, ip
 8016002:	60fb      	str	r3, [r7, #12]
 8016004:	1d7b      	adds	r3, r7, #5
 8016006:	33ff      	adds	r3, #255	@ 0xff
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	b29a      	uxth	r2, r3
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	801a      	strh	r2, [r3, #0]
 8016010:	f000 fccd 	bl	80169ae <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	78db      	ldrb	r3, [r3, #3]
 8016018:	2b02      	cmp	r3, #2
 801601a:	d000      	beq.n	801601e <USB_EPStartXfer+0x96>
 801601c:	e362      	b.n	80166e4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	6a1a      	ldr	r2, [r3, #32]
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	691b      	ldr	r3, [r3, #16]
 8016026:	429a      	cmp	r2, r3
 8016028:	d800      	bhi.n	801602c <USB_EPStartXfer+0xa4>
 801602a:	e309      	b.n	8016640 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	18d3      	adds	r3, r2, r3
 8016036:	881b      	ldrh	r3, [r3, #0]
 8016038:	b29a      	uxth	r2, r3
 801603a:	2056      	movs	r0, #86	@ 0x56
 801603c:	183b      	adds	r3, r7, r0
 801603e:	49c8      	ldr	r1, [pc, #800]	@ (8016360 <USB_EPStartXfer+0x3d8>)
 8016040:	400a      	ands	r2, r1
 8016042:	801a      	strh	r2, [r3, #0]
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	781b      	ldrb	r3, [r3, #0]
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	18d3      	adds	r3, r2, r3
 801604e:	183a      	adds	r2, r7, r0
 8016050:	8812      	ldrh	r2, [r2, #0]
 8016052:	49c4      	ldr	r1, [pc, #784]	@ (8016364 <USB_EPStartXfer+0x3dc>)
 8016054:	430a      	orrs	r2, r1
 8016056:	b292      	uxth	r2, r2
 8016058:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	6a1a      	ldr	r2, [r3, #32]
 801605e:	1d7b      	adds	r3, r7, #5
 8016060:	33ff      	adds	r3, #255	@ 0xff
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	1ad2      	subs	r2, r2, r3
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801606a:	687a      	ldr	r2, [r7, #4]
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	18d3      	adds	r3, r2, r3
 8016074:	881b      	ldrh	r3, [r3, #0]
 8016076:	b29b      	uxth	r3, r3
 8016078:	001a      	movs	r2, r3
 801607a:	2340      	movs	r3, #64	@ 0x40
 801607c:	4013      	ands	r3, r2
 801607e:	d100      	bne.n	8016082 <USB_EPStartXfer+0xfa>
 8016080:	e176      	b.n	8016370 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	633b      	str	r3, [r7, #48]	@ 0x30
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	785b      	ldrb	r3, [r3, #1]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d000      	beq.n	8016090 <USB_EPStartXfer+0x108>
 801608e:	e074      	b.n	801617a <USB_EPStartXfer+0x1f2>
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2250      	movs	r2, #80	@ 0x50
 8016098:	5a9b      	ldrh	r3, [r3, r2]
 801609a:	b29b      	uxth	r3, r3
 801609c:	001a      	movs	r2, r3
 801609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160a0:	189b      	adds	r3, r3, r2
 80160a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	00da      	lsls	r2, r3, #3
 80160aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160ac:	18d3      	adds	r3, r2, r3
 80160ae:	4aae      	ldr	r2, [pc, #696]	@ (8016368 <USB_EPStartXfer+0x3e0>)
 80160b0:	4694      	mov	ip, r2
 80160b2:	4463      	add	r3, ip
 80160b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80160b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b8:	881b      	ldrh	r3, [r3, #0]
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	059b      	lsls	r3, r3, #22
 80160be:	0d9b      	lsrs	r3, r3, #22
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160c4:	801a      	strh	r2, [r3, #0]
 80160c6:	1d7b      	adds	r3, r7, #5
 80160c8:	33ff      	adds	r3, #255	@ 0xff
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80160ce:	d924      	bls.n	801611a <USB_EPStartXfer+0x192>
 80160d0:	1d7b      	adds	r3, r7, #5
 80160d2:	33ff      	adds	r3, #255	@ 0xff
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	095b      	lsrs	r3, r3, #5
 80160d8:	1c7a      	adds	r2, r7, #1
 80160da:	32ff      	adds	r2, #255	@ 0xff
 80160dc:	6013      	str	r3, [r2, #0]
 80160de:	1d7b      	adds	r3, r7, #5
 80160e0:	33ff      	adds	r3, #255	@ 0xff
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	221f      	movs	r2, #31
 80160e6:	4013      	ands	r3, r2
 80160e8:	d106      	bne.n	80160f8 <USB_EPStartXfer+0x170>
 80160ea:	1c7b      	adds	r3, r7, #1
 80160ec:	33ff      	adds	r3, #255	@ 0xff
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	3b01      	subs	r3, #1
 80160f2:	1c7a      	adds	r2, r7, #1
 80160f4:	32ff      	adds	r2, #255	@ 0xff
 80160f6:	6013      	str	r3, [r2, #0]
 80160f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160fa:	881b      	ldrh	r3, [r3, #0]
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	1c7b      	adds	r3, r7, #1
 8016100:	33ff      	adds	r3, #255	@ 0xff
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	b29b      	uxth	r3, r3
 8016106:	029b      	lsls	r3, r3, #10
 8016108:	b29b      	uxth	r3, r3
 801610a:	4313      	orrs	r3, r2
 801610c:	b29b      	uxth	r3, r3
 801610e:	4a97      	ldr	r2, [pc, #604]	@ (801636c <USB_EPStartXfer+0x3e4>)
 8016110:	4313      	orrs	r3, r2
 8016112:	b29a      	uxth	r2, r3
 8016114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016116:	801a      	strh	r2, [r3, #0]
 8016118:	e04a      	b.n	80161b0 <USB_EPStartXfer+0x228>
 801611a:	1d7b      	adds	r3, r7, #5
 801611c:	33ff      	adds	r3, #255	@ 0xff
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d108      	bne.n	8016136 <USB_EPStartXfer+0x1ae>
 8016124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016126:	881b      	ldrh	r3, [r3, #0]
 8016128:	b29b      	uxth	r3, r3
 801612a:	4a90      	ldr	r2, [pc, #576]	@ (801636c <USB_EPStartXfer+0x3e4>)
 801612c:	4313      	orrs	r3, r2
 801612e:	b29a      	uxth	r2, r3
 8016130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016132:	801a      	strh	r2, [r3, #0]
 8016134:	e03c      	b.n	80161b0 <USB_EPStartXfer+0x228>
 8016136:	1d7b      	adds	r3, r7, #5
 8016138:	33ff      	adds	r3, #255	@ 0xff
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	085b      	lsrs	r3, r3, #1
 801613e:	1c7a      	adds	r2, r7, #1
 8016140:	32ff      	adds	r2, #255	@ 0xff
 8016142:	6013      	str	r3, [r2, #0]
 8016144:	1d7b      	adds	r3, r7, #5
 8016146:	33ff      	adds	r3, #255	@ 0xff
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	2201      	movs	r2, #1
 801614c:	4013      	ands	r3, r2
 801614e:	d006      	beq.n	801615e <USB_EPStartXfer+0x1d6>
 8016150:	1c7b      	adds	r3, r7, #1
 8016152:	33ff      	adds	r3, #255	@ 0xff
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	3301      	adds	r3, #1
 8016158:	1c7a      	adds	r2, r7, #1
 801615a:	32ff      	adds	r2, #255	@ 0xff
 801615c:	6013      	str	r3, [r2, #0]
 801615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	b29a      	uxth	r2, r3
 8016164:	1c7b      	adds	r3, r7, #1
 8016166:	33ff      	adds	r3, #255	@ 0xff
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	b29b      	uxth	r3, r3
 801616c:	029b      	lsls	r3, r3, #10
 801616e:	b29b      	uxth	r3, r3
 8016170:	4313      	orrs	r3, r2
 8016172:	b29a      	uxth	r2, r3
 8016174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016176:	801a      	strh	r2, [r3, #0]
 8016178:	e01a      	b.n	80161b0 <USB_EPStartXfer+0x228>
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	785b      	ldrb	r3, [r3, #1]
 801617e:	2b01      	cmp	r3, #1
 8016180:	d116      	bne.n	80161b0 <USB_EPStartXfer+0x228>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2250      	movs	r2, #80	@ 0x50
 8016186:	5a9b      	ldrh	r3, [r3, r2]
 8016188:	b29b      	uxth	r3, r3
 801618a:	001a      	movs	r2, r3
 801618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801618e:	189b      	adds	r3, r3, r2
 8016190:	633b      	str	r3, [r7, #48]	@ 0x30
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	00da      	lsls	r2, r3, #3
 8016198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801619a:	18d3      	adds	r3, r2, r3
 801619c:	4a72      	ldr	r2, [pc, #456]	@ (8016368 <USB_EPStartXfer+0x3e0>)
 801619e:	4694      	mov	ip, r2
 80161a0:	4463      	add	r3, ip
 80161a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80161a4:	1d7b      	adds	r3, r7, #5
 80161a6:	33ff      	adds	r3, #255	@ 0xff
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	b29a      	uxth	r2, r3
 80161ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80161b0:	2076      	movs	r0, #118	@ 0x76
 80161b2:	183b      	adds	r3, r7, r0
 80161b4:	683a      	ldr	r2, [r7, #0]
 80161b6:	8952      	ldrh	r2, [r2, #10]
 80161b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	6959      	ldr	r1, [r3, #20]
 80161be:	1d7b      	adds	r3, r7, #5
 80161c0:	33ff      	adds	r3, #255	@ 0xff
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	b29c      	uxth	r4, r3
 80161c6:	183b      	adds	r3, r7, r0
 80161c8:	881a      	ldrh	r2, [r3, #0]
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	0023      	movs	r3, r4
 80161ce:	f001 f94d 	bl	801746c <USB_WritePMA>
            ep->xfer_buff += len;
 80161d2:	683b      	ldr	r3, [r7, #0]
 80161d4:	695a      	ldr	r2, [r3, #20]
 80161d6:	1d7b      	adds	r3, r7, #5
 80161d8:	33ff      	adds	r3, #255	@ 0xff
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	18d2      	adds	r2, r2, r3
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	6a1a      	ldr	r2, [r3, #32]
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	691b      	ldr	r3, [r3, #16]
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d908      	bls.n	8016200 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	6a1a      	ldr	r2, [r3, #32]
 80161f2:	1d7b      	adds	r3, r7, #5
 80161f4:	33ff      	adds	r3, #255	@ 0xff
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	1ad2      	subs	r2, r2, r3
 80161fa:	683b      	ldr	r3, [r7, #0]
 80161fc:	621a      	str	r2, [r3, #32]
 80161fe:	e007      	b.n	8016210 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8016200:	683b      	ldr	r3, [r7, #0]
 8016202:	6a1b      	ldr	r3, [r3, #32]
 8016204:	1d7a      	adds	r2, r7, #5
 8016206:	32ff      	adds	r2, #255	@ 0xff
 8016208:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	2200      	movs	r2, #0
 801620e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	785b      	ldrb	r3, [r3, #1]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d000      	beq.n	801621a <USB_EPStartXfer+0x292>
 8016218:	e070      	b.n	80162fc <USB_EPStartXfer+0x374>
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	61bb      	str	r3, [r7, #24]
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2250      	movs	r2, #80	@ 0x50
 8016222:	5a9b      	ldrh	r3, [r3, r2]
 8016224:	b29b      	uxth	r3, r3
 8016226:	001a      	movs	r2, r3
 8016228:	69bb      	ldr	r3, [r7, #24]
 801622a:	189b      	adds	r3, r3, r2
 801622c:	61bb      	str	r3, [r7, #24]
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	00da      	lsls	r2, r3, #3
 8016234:	69bb      	ldr	r3, [r7, #24]
 8016236:	18d3      	adds	r3, r2, r3
 8016238:	4a48      	ldr	r2, [pc, #288]	@ (801635c <USB_EPStartXfer+0x3d4>)
 801623a:	4694      	mov	ip, r2
 801623c:	4463      	add	r3, ip
 801623e:	617b      	str	r3, [r7, #20]
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	881b      	ldrh	r3, [r3, #0]
 8016244:	b29b      	uxth	r3, r3
 8016246:	059b      	lsls	r3, r3, #22
 8016248:	0d9b      	lsrs	r3, r3, #22
 801624a:	b29a      	uxth	r2, r3
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	801a      	strh	r2, [r3, #0]
 8016250:	1d7b      	adds	r3, r7, #5
 8016252:	33ff      	adds	r3, #255	@ 0xff
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	2b3e      	cmp	r3, #62	@ 0x3e
 8016258:	d922      	bls.n	80162a0 <USB_EPStartXfer+0x318>
 801625a:	1d7b      	adds	r3, r7, #5
 801625c:	33ff      	adds	r3, #255	@ 0xff
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	095b      	lsrs	r3, r3, #5
 8016262:	21fc      	movs	r1, #252	@ 0xfc
 8016264:	187a      	adds	r2, r7, r1
 8016266:	6013      	str	r3, [r2, #0]
 8016268:	1d7b      	adds	r3, r7, #5
 801626a:	33ff      	adds	r3, #255	@ 0xff
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	221f      	movs	r2, #31
 8016270:	4013      	ands	r3, r2
 8016272:	d104      	bne.n	801627e <USB_EPStartXfer+0x2f6>
 8016274:	187b      	adds	r3, r7, r1
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	3b01      	subs	r3, #1
 801627a:	187a      	adds	r2, r7, r1
 801627c:	6013      	str	r3, [r2, #0]
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	881b      	ldrh	r3, [r3, #0]
 8016282:	b29a      	uxth	r2, r3
 8016284:	23fc      	movs	r3, #252	@ 0xfc
 8016286:	18fb      	adds	r3, r7, r3
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	b29b      	uxth	r3, r3
 801628c:	029b      	lsls	r3, r3, #10
 801628e:	b29b      	uxth	r3, r3
 8016290:	4313      	orrs	r3, r2
 8016292:	b29b      	uxth	r3, r3
 8016294:	4a35      	ldr	r2, [pc, #212]	@ (801636c <USB_EPStartXfer+0x3e4>)
 8016296:	4313      	orrs	r3, r2
 8016298:	b29a      	uxth	r2, r3
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	801a      	strh	r2, [r3, #0]
 801629e:	e04a      	b.n	8016336 <USB_EPStartXfer+0x3ae>
 80162a0:	1d7b      	adds	r3, r7, #5
 80162a2:	33ff      	adds	r3, #255	@ 0xff
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d108      	bne.n	80162bc <USB_EPStartXfer+0x334>
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	881b      	ldrh	r3, [r3, #0]
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	4a2e      	ldr	r2, [pc, #184]	@ (801636c <USB_EPStartXfer+0x3e4>)
 80162b2:	4313      	orrs	r3, r2
 80162b4:	b29a      	uxth	r2, r3
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	801a      	strh	r2, [r3, #0]
 80162ba:	e03c      	b.n	8016336 <USB_EPStartXfer+0x3ae>
 80162bc:	1d7b      	adds	r3, r7, #5
 80162be:	33ff      	adds	r3, #255	@ 0xff
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	085b      	lsrs	r3, r3, #1
 80162c4:	21fc      	movs	r1, #252	@ 0xfc
 80162c6:	187a      	adds	r2, r7, r1
 80162c8:	6013      	str	r3, [r2, #0]
 80162ca:	1d7b      	adds	r3, r7, #5
 80162cc:	33ff      	adds	r3, #255	@ 0xff
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	2201      	movs	r2, #1
 80162d2:	4013      	ands	r3, r2
 80162d4:	d004      	beq.n	80162e0 <USB_EPStartXfer+0x358>
 80162d6:	187b      	adds	r3, r7, r1
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	3301      	adds	r3, #1
 80162dc:	187a      	adds	r2, r7, r1
 80162de:	6013      	str	r3, [r2, #0]
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	881b      	ldrh	r3, [r3, #0]
 80162e4:	b29a      	uxth	r2, r3
 80162e6:	23fc      	movs	r3, #252	@ 0xfc
 80162e8:	18fb      	adds	r3, r7, r3
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	029b      	lsls	r3, r3, #10
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	4313      	orrs	r3, r2
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	801a      	strh	r2, [r3, #0]
 80162fa:	e01c      	b.n	8016336 <USB_EPStartXfer+0x3ae>
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	785b      	ldrb	r3, [r3, #1]
 8016300:	2b01      	cmp	r3, #1
 8016302:	d118      	bne.n	8016336 <USB_EPStartXfer+0x3ae>
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	623b      	str	r3, [r7, #32]
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2250      	movs	r2, #80	@ 0x50
 801630c:	5a9b      	ldrh	r3, [r3, r2]
 801630e:	b29b      	uxth	r3, r3
 8016310:	001a      	movs	r2, r3
 8016312:	6a3b      	ldr	r3, [r7, #32]
 8016314:	189b      	adds	r3, r3, r2
 8016316:	623b      	str	r3, [r7, #32]
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	00da      	lsls	r2, r3, #3
 801631e:	6a3b      	ldr	r3, [r7, #32]
 8016320:	18d3      	adds	r3, r2, r3
 8016322:	4a0e      	ldr	r2, [pc, #56]	@ (801635c <USB_EPStartXfer+0x3d4>)
 8016324:	4694      	mov	ip, r2
 8016326:	4463      	add	r3, ip
 8016328:	61fb      	str	r3, [r7, #28]
 801632a:	1d7b      	adds	r3, r7, #5
 801632c:	33ff      	adds	r3, #255	@ 0xff
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	b29a      	uxth	r2, r3
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8016336:	2076      	movs	r0, #118	@ 0x76
 8016338:	183b      	adds	r3, r7, r0
 801633a:	683a      	ldr	r2, [r7, #0]
 801633c:	8912      	ldrh	r2, [r2, #8]
 801633e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	6959      	ldr	r1, [r3, #20]
 8016344:	1d7b      	adds	r3, r7, #5
 8016346:	33ff      	adds	r3, #255	@ 0xff
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	b29c      	uxth	r4, r3
 801634c:	183b      	adds	r3, r7, r0
 801634e:	881a      	ldrh	r2, [r3, #0]
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	0023      	movs	r3, r4
 8016354:	f001 f88a 	bl	801746c <USB_WritePMA>
 8016358:	e329      	b.n	80169ae <USB_EPStartXfer+0xa26>
 801635a:	46c0      	nop			@ (mov r8, r8)
 801635c:	00000402 	.word	0x00000402
 8016360:	ffff8f8f 	.word	0xffff8f8f
 8016364:	ffff8180 	.word	0xffff8180
 8016368:	00000406 	.word	0x00000406
 801636c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016370:	683b      	ldr	r3, [r7, #0]
 8016372:	785b      	ldrb	r3, [r3, #1]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d000      	beq.n	801637a <USB_EPStartXfer+0x3f2>
 8016378:	e070      	b.n	801645c <USB_EPStartXfer+0x4d4>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2250      	movs	r2, #80	@ 0x50
 8016382:	5a9b      	ldrh	r3, [r3, r2]
 8016384:	b29b      	uxth	r3, r3
 8016386:	001a      	movs	r2, r3
 8016388:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801638a:	189b      	adds	r3, r3, r2
 801638c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	00da      	lsls	r2, r3, #3
 8016394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016396:	18d3      	adds	r3, r2, r3
 8016398:	4acd      	ldr	r2, [pc, #820]	@ (80166d0 <USB_EPStartXfer+0x748>)
 801639a:	4694      	mov	ip, r2
 801639c:	4463      	add	r3, ip
 801639e:	647b      	str	r3, [r7, #68]	@ 0x44
 80163a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163a2:	881b      	ldrh	r3, [r3, #0]
 80163a4:	b29b      	uxth	r3, r3
 80163a6:	059b      	lsls	r3, r3, #22
 80163a8:	0d9b      	lsrs	r3, r3, #22
 80163aa:	b29a      	uxth	r2, r3
 80163ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163ae:	801a      	strh	r2, [r3, #0]
 80163b0:	1d7b      	adds	r3, r7, #5
 80163b2:	33ff      	adds	r3, #255	@ 0xff
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80163b8:	d922      	bls.n	8016400 <USB_EPStartXfer+0x478>
 80163ba:	1d7b      	adds	r3, r7, #5
 80163bc:	33ff      	adds	r3, #255	@ 0xff
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	095b      	lsrs	r3, r3, #5
 80163c2:	21f8      	movs	r1, #248	@ 0xf8
 80163c4:	187a      	adds	r2, r7, r1
 80163c6:	6013      	str	r3, [r2, #0]
 80163c8:	1d7b      	adds	r3, r7, #5
 80163ca:	33ff      	adds	r3, #255	@ 0xff
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	221f      	movs	r2, #31
 80163d0:	4013      	ands	r3, r2
 80163d2:	d104      	bne.n	80163de <USB_EPStartXfer+0x456>
 80163d4:	187b      	adds	r3, r7, r1
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	3b01      	subs	r3, #1
 80163da:	187a      	adds	r2, r7, r1
 80163dc:	6013      	str	r3, [r2, #0]
 80163de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163e0:	881b      	ldrh	r3, [r3, #0]
 80163e2:	b29a      	uxth	r2, r3
 80163e4:	23f8      	movs	r3, #248	@ 0xf8
 80163e6:	18fb      	adds	r3, r7, r3
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	029b      	lsls	r3, r3, #10
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	4313      	orrs	r3, r2
 80163f2:	b29b      	uxth	r3, r3
 80163f4:	4ab7      	ldr	r2, [pc, #732]	@ (80166d4 <USB_EPStartXfer+0x74c>)
 80163f6:	4313      	orrs	r3, r2
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163fc:	801a      	strh	r2, [r3, #0]
 80163fe:	e04a      	b.n	8016496 <USB_EPStartXfer+0x50e>
 8016400:	1d7b      	adds	r3, r7, #5
 8016402:	33ff      	adds	r3, #255	@ 0xff
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d108      	bne.n	801641c <USB_EPStartXfer+0x494>
 801640a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801640c:	881b      	ldrh	r3, [r3, #0]
 801640e:	b29b      	uxth	r3, r3
 8016410:	4ab0      	ldr	r2, [pc, #704]	@ (80166d4 <USB_EPStartXfer+0x74c>)
 8016412:	4313      	orrs	r3, r2
 8016414:	b29a      	uxth	r2, r3
 8016416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016418:	801a      	strh	r2, [r3, #0]
 801641a:	e03c      	b.n	8016496 <USB_EPStartXfer+0x50e>
 801641c:	1d7b      	adds	r3, r7, #5
 801641e:	33ff      	adds	r3, #255	@ 0xff
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	085b      	lsrs	r3, r3, #1
 8016424:	21f8      	movs	r1, #248	@ 0xf8
 8016426:	187a      	adds	r2, r7, r1
 8016428:	6013      	str	r3, [r2, #0]
 801642a:	1d7b      	adds	r3, r7, #5
 801642c:	33ff      	adds	r3, #255	@ 0xff
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2201      	movs	r2, #1
 8016432:	4013      	ands	r3, r2
 8016434:	d004      	beq.n	8016440 <USB_EPStartXfer+0x4b8>
 8016436:	187b      	adds	r3, r7, r1
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	3301      	adds	r3, #1
 801643c:	187a      	adds	r2, r7, r1
 801643e:	6013      	str	r3, [r2, #0]
 8016440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016442:	881b      	ldrh	r3, [r3, #0]
 8016444:	b29a      	uxth	r2, r3
 8016446:	23f8      	movs	r3, #248	@ 0xf8
 8016448:	18fb      	adds	r3, r7, r3
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	b29b      	uxth	r3, r3
 801644e:	029b      	lsls	r3, r3, #10
 8016450:	b29b      	uxth	r3, r3
 8016452:	4313      	orrs	r3, r2
 8016454:	b29a      	uxth	r2, r3
 8016456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016458:	801a      	strh	r2, [r3, #0]
 801645a:	e01c      	b.n	8016496 <USB_EPStartXfer+0x50e>
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	785b      	ldrb	r3, [r3, #1]
 8016460:	2b01      	cmp	r3, #1
 8016462:	d118      	bne.n	8016496 <USB_EPStartXfer+0x50e>
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	653b      	str	r3, [r7, #80]	@ 0x50
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2250      	movs	r2, #80	@ 0x50
 801646c:	5a9b      	ldrh	r3, [r3, r2]
 801646e:	b29b      	uxth	r3, r3
 8016470:	001a      	movs	r2, r3
 8016472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016474:	189b      	adds	r3, r3, r2
 8016476:	653b      	str	r3, [r7, #80]	@ 0x50
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	00da      	lsls	r2, r3, #3
 801647e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016480:	18d3      	adds	r3, r2, r3
 8016482:	4a93      	ldr	r2, [pc, #588]	@ (80166d0 <USB_EPStartXfer+0x748>)
 8016484:	4694      	mov	ip, r2
 8016486:	4463      	add	r3, ip
 8016488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801648a:	1d7b      	adds	r3, r7, #5
 801648c:	33ff      	adds	r3, #255	@ 0xff
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	b29a      	uxth	r2, r3
 8016492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016494:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8016496:	2076      	movs	r0, #118	@ 0x76
 8016498:	183b      	adds	r3, r7, r0
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	8912      	ldrh	r2, [r2, #8]
 801649e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	6959      	ldr	r1, [r3, #20]
 80164a4:	1d7b      	adds	r3, r7, #5
 80164a6:	33ff      	adds	r3, #255	@ 0xff
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	b29c      	uxth	r4, r3
 80164ac:	183b      	adds	r3, r7, r0
 80164ae:	881a      	ldrh	r2, [r3, #0]
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	0023      	movs	r3, r4
 80164b4:	f000 ffda 	bl	801746c <USB_WritePMA>
            ep->xfer_buff += len;
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	695a      	ldr	r2, [r3, #20]
 80164bc:	1d7b      	adds	r3, r7, #5
 80164be:	33ff      	adds	r3, #255	@ 0xff
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	18d2      	adds	r2, r2, r3
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	6a1a      	ldr	r2, [r3, #32]
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	691b      	ldr	r3, [r3, #16]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d908      	bls.n	80164e6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	6a1a      	ldr	r2, [r3, #32]
 80164d8:	1d7b      	adds	r3, r7, #5
 80164da:	33ff      	adds	r3, #255	@ 0xff
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	1ad2      	subs	r2, r2, r3
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	621a      	str	r2, [r3, #32]
 80164e4:	e007      	b.n	80164f6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	6a1b      	ldr	r3, [r3, #32]
 80164ea:	1d7a      	adds	r2, r7, #5
 80164ec:	32ff      	adds	r2, #255	@ 0xff
 80164ee:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	2200      	movs	r2, #0
 80164f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	785b      	ldrb	r3, [r3, #1]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d000      	beq.n	8016504 <USB_EPStartXfer+0x57c>
 8016502:	e070      	b.n	80165e6 <USB_EPStartXfer+0x65e>
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2250      	movs	r2, #80	@ 0x50
 801650c:	5a9b      	ldrh	r3, [r3, r2]
 801650e:	b29b      	uxth	r3, r3
 8016510:	001a      	movs	r2, r3
 8016512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016514:	189b      	adds	r3, r3, r2
 8016516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	00da      	lsls	r2, r3, #3
 801651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016520:	18d3      	adds	r3, r2, r3
 8016522:	4a6d      	ldr	r2, [pc, #436]	@ (80166d8 <USB_EPStartXfer+0x750>)
 8016524:	4694      	mov	ip, r2
 8016526:	4463      	add	r3, ip
 8016528:	637b      	str	r3, [r7, #52]	@ 0x34
 801652a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801652c:	881b      	ldrh	r3, [r3, #0]
 801652e:	b29b      	uxth	r3, r3
 8016530:	059b      	lsls	r3, r3, #22
 8016532:	0d9b      	lsrs	r3, r3, #22
 8016534:	b29a      	uxth	r2, r3
 8016536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016538:	801a      	strh	r2, [r3, #0]
 801653a:	1d7b      	adds	r3, r7, #5
 801653c:	33ff      	adds	r3, #255	@ 0xff
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2b3e      	cmp	r3, #62	@ 0x3e
 8016542:	d922      	bls.n	801658a <USB_EPStartXfer+0x602>
 8016544:	1d7b      	adds	r3, r7, #5
 8016546:	33ff      	adds	r3, #255	@ 0xff
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	095b      	lsrs	r3, r3, #5
 801654c:	21f4      	movs	r1, #244	@ 0xf4
 801654e:	187a      	adds	r2, r7, r1
 8016550:	6013      	str	r3, [r2, #0]
 8016552:	1d7b      	adds	r3, r7, #5
 8016554:	33ff      	adds	r3, #255	@ 0xff
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	221f      	movs	r2, #31
 801655a:	4013      	ands	r3, r2
 801655c:	d104      	bne.n	8016568 <USB_EPStartXfer+0x5e0>
 801655e:	187b      	adds	r3, r7, r1
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	3b01      	subs	r3, #1
 8016564:	187a      	adds	r2, r7, r1
 8016566:	6013      	str	r3, [r2, #0]
 8016568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801656a:	881b      	ldrh	r3, [r3, #0]
 801656c:	b29a      	uxth	r2, r3
 801656e:	23f4      	movs	r3, #244	@ 0xf4
 8016570:	18fb      	adds	r3, r7, r3
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	b29b      	uxth	r3, r3
 8016576:	029b      	lsls	r3, r3, #10
 8016578:	b29b      	uxth	r3, r3
 801657a:	4313      	orrs	r3, r2
 801657c:	b29b      	uxth	r3, r3
 801657e:	4a55      	ldr	r2, [pc, #340]	@ (80166d4 <USB_EPStartXfer+0x74c>)
 8016580:	4313      	orrs	r3, r2
 8016582:	b29a      	uxth	r2, r3
 8016584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016586:	801a      	strh	r2, [r3, #0]
 8016588:	e048      	b.n	801661c <USB_EPStartXfer+0x694>
 801658a:	1d7b      	adds	r3, r7, #5
 801658c:	33ff      	adds	r3, #255	@ 0xff
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d108      	bne.n	80165a6 <USB_EPStartXfer+0x61e>
 8016594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016596:	881b      	ldrh	r3, [r3, #0]
 8016598:	b29b      	uxth	r3, r3
 801659a:	4a4e      	ldr	r2, [pc, #312]	@ (80166d4 <USB_EPStartXfer+0x74c>)
 801659c:	4313      	orrs	r3, r2
 801659e:	b29a      	uxth	r2, r3
 80165a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165a2:	801a      	strh	r2, [r3, #0]
 80165a4:	e03a      	b.n	801661c <USB_EPStartXfer+0x694>
 80165a6:	1d7b      	adds	r3, r7, #5
 80165a8:	33ff      	adds	r3, #255	@ 0xff
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	085b      	lsrs	r3, r3, #1
 80165ae:	21f4      	movs	r1, #244	@ 0xf4
 80165b0:	187a      	adds	r2, r7, r1
 80165b2:	6013      	str	r3, [r2, #0]
 80165b4:	1d7b      	adds	r3, r7, #5
 80165b6:	33ff      	adds	r3, #255	@ 0xff
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2201      	movs	r2, #1
 80165bc:	4013      	ands	r3, r2
 80165be:	d004      	beq.n	80165ca <USB_EPStartXfer+0x642>
 80165c0:	187b      	adds	r3, r7, r1
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	3301      	adds	r3, #1
 80165c6:	187a      	adds	r2, r7, r1
 80165c8:	6013      	str	r3, [r2, #0]
 80165ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165cc:	881b      	ldrh	r3, [r3, #0]
 80165ce:	b29a      	uxth	r2, r3
 80165d0:	23f4      	movs	r3, #244	@ 0xf4
 80165d2:	18fb      	adds	r3, r7, r3
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	029b      	lsls	r3, r3, #10
 80165da:	b29b      	uxth	r3, r3
 80165dc:	4313      	orrs	r3, r2
 80165de:	b29a      	uxth	r2, r3
 80165e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165e2:	801a      	strh	r2, [r3, #0]
 80165e4:	e01a      	b.n	801661c <USB_EPStartXfer+0x694>
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	785b      	ldrb	r3, [r3, #1]
 80165ea:	2b01      	cmp	r3, #1
 80165ec:	d116      	bne.n	801661c <USB_EPStartXfer+0x694>
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	2250      	movs	r2, #80	@ 0x50
 80165f2:	5a9b      	ldrh	r3, [r3, r2]
 80165f4:	b29b      	uxth	r3, r3
 80165f6:	001a      	movs	r2, r3
 80165f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80165fa:	189b      	adds	r3, r3, r2
 80165fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	00da      	lsls	r2, r3, #3
 8016604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016606:	18d3      	adds	r3, r2, r3
 8016608:	4a33      	ldr	r2, [pc, #204]	@ (80166d8 <USB_EPStartXfer+0x750>)
 801660a:	4694      	mov	ip, r2
 801660c:	4463      	add	r3, ip
 801660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016610:	1d7b      	adds	r3, r7, #5
 8016612:	33ff      	adds	r3, #255	@ 0xff
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	b29a      	uxth	r2, r3
 8016618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801661a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801661c:	2076      	movs	r0, #118	@ 0x76
 801661e:	183b      	adds	r3, r7, r0
 8016620:	683a      	ldr	r2, [r7, #0]
 8016622:	8952      	ldrh	r2, [r2, #10]
 8016624:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	6959      	ldr	r1, [r3, #20]
 801662a:	1d7b      	adds	r3, r7, #5
 801662c:	33ff      	adds	r3, #255	@ 0xff
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	b29c      	uxth	r4, r3
 8016632:	183b      	adds	r3, r7, r0
 8016634:	881a      	ldrh	r2, [r3, #0]
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	0023      	movs	r3, r4
 801663a:	f000 ff17 	bl	801746c <USB_WritePMA>
 801663e:	e1b6      	b.n	80169ae <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	6a1b      	ldr	r3, [r3, #32]
 8016644:	1d7a      	adds	r2, r7, #5
 8016646:	32ff      	adds	r2, #255	@ 0xff
 8016648:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801664a:	687a      	ldr	r2, [r7, #4]
 801664c:	683b      	ldr	r3, [r7, #0]
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	009b      	lsls	r3, r3, #2
 8016652:	18d3      	adds	r3, r2, r3
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	b29a      	uxth	r2, r3
 8016658:	2062      	movs	r0, #98	@ 0x62
 801665a:	183b      	adds	r3, r7, r0
 801665c:	491f      	ldr	r1, [pc, #124]	@ (80166dc <USB_EPStartXfer+0x754>)
 801665e:	400a      	ands	r2, r1
 8016660:	801a      	strh	r2, [r3, #0]
 8016662:	687a      	ldr	r2, [r7, #4]
 8016664:	683b      	ldr	r3, [r7, #0]
 8016666:	781b      	ldrb	r3, [r3, #0]
 8016668:	009b      	lsls	r3, r3, #2
 801666a:	18d3      	adds	r3, r2, r3
 801666c:	183a      	adds	r2, r7, r0
 801666e:	8812      	ldrh	r2, [r2, #0]
 8016670:	491b      	ldr	r1, [pc, #108]	@ (80166e0 <USB_EPStartXfer+0x758>)
 8016672:	430a      	orrs	r2, r1
 8016674:	b292      	uxth	r2, r2
 8016676:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2250      	movs	r2, #80	@ 0x50
 8016680:	5a9b      	ldrh	r3, [r3, r2]
 8016682:	b29b      	uxth	r3, r3
 8016684:	001a      	movs	r2, r3
 8016686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016688:	189b      	adds	r3, r3, r2
 801668a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	00da      	lsls	r2, r3, #3
 8016692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016694:	18d3      	adds	r3, r2, r3
 8016696:	4a0e      	ldr	r2, [pc, #56]	@ (80166d0 <USB_EPStartXfer+0x748>)
 8016698:	4694      	mov	ip, r2
 801669a:	4463      	add	r3, ip
 801669c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801669e:	1d7b      	adds	r3, r7, #5
 80166a0:	33ff      	adds	r3, #255	@ 0xff
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	b29a      	uxth	r2, r3
 80166a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80166a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80166aa:	2076      	movs	r0, #118	@ 0x76
 80166ac:	183b      	adds	r3, r7, r0
 80166ae:	683a      	ldr	r2, [r7, #0]
 80166b0:	8912      	ldrh	r2, [r2, #8]
 80166b2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	6959      	ldr	r1, [r3, #20]
 80166b8:	1d7b      	adds	r3, r7, #5
 80166ba:	33ff      	adds	r3, #255	@ 0xff
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	b29c      	uxth	r4, r3
 80166c0:	183b      	adds	r3, r7, r0
 80166c2:	881a      	ldrh	r2, [r3, #0]
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	0023      	movs	r3, r4
 80166c8:	f000 fed0 	bl	801746c <USB_WritePMA>
 80166cc:	e16f      	b.n	80169ae <USB_EPStartXfer+0xa26>
 80166ce:	46c0      	nop			@ (mov r8, r8)
 80166d0:	00000402 	.word	0x00000402
 80166d4:	ffff8000 	.word	0xffff8000
 80166d8:	00000406 	.word	0x00000406
 80166dc:	ffff8e8f 	.word	0xffff8e8f
 80166e0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	6a1a      	ldr	r2, [r3, #32]
 80166e8:	1d7b      	adds	r3, r7, #5
 80166ea:	33ff      	adds	r3, #255	@ 0xff
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	1ad2      	subs	r2, r2, r3
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80166f4:	687a      	ldr	r2, [r7, #4]
 80166f6:	683b      	ldr	r3, [r7, #0]
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	009b      	lsls	r3, r3, #2
 80166fc:	18d3      	adds	r3, r2, r3
 80166fe:	881b      	ldrh	r3, [r3, #0]
 8016700:	b29b      	uxth	r3, r3
 8016702:	001a      	movs	r2, r3
 8016704:	2340      	movs	r3, #64	@ 0x40
 8016706:	4013      	ands	r3, r2
 8016708:	d100      	bne.n	801670c <USB_EPStartXfer+0x784>
 801670a:	e0a4      	b.n	8016856 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	673b      	str	r3, [r7, #112]	@ 0x70
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	785b      	ldrb	r3, [r3, #1]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d000      	beq.n	801671a <USB_EPStartXfer+0x792>
 8016718:	e070      	b.n	80167fc <USB_EPStartXfer+0x874>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2250      	movs	r2, #80	@ 0x50
 8016722:	5a9b      	ldrh	r3, [r3, r2]
 8016724:	b29b      	uxth	r3, r3
 8016726:	001a      	movs	r2, r3
 8016728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801672a:	189b      	adds	r3, r3, r2
 801672c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	781b      	ldrb	r3, [r3, #0]
 8016732:	00da      	lsls	r2, r3, #3
 8016734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016736:	18d3      	adds	r3, r2, r3
 8016738:	4abc      	ldr	r2, [pc, #752]	@ (8016a2c <USB_EPStartXfer+0xaa4>)
 801673a:	4694      	mov	ip, r2
 801673c:	4463      	add	r3, ip
 801673e:	667b      	str	r3, [r7, #100]	@ 0x64
 8016740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016742:	881b      	ldrh	r3, [r3, #0]
 8016744:	b29b      	uxth	r3, r3
 8016746:	059b      	lsls	r3, r3, #22
 8016748:	0d9b      	lsrs	r3, r3, #22
 801674a:	b29a      	uxth	r2, r3
 801674c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801674e:	801a      	strh	r2, [r3, #0]
 8016750:	1d7b      	adds	r3, r7, #5
 8016752:	33ff      	adds	r3, #255	@ 0xff
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	2b3e      	cmp	r3, #62	@ 0x3e
 8016758:	d922      	bls.n	80167a0 <USB_EPStartXfer+0x818>
 801675a:	1d7b      	adds	r3, r7, #5
 801675c:	33ff      	adds	r3, #255	@ 0xff
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	095b      	lsrs	r3, r3, #5
 8016762:	21f0      	movs	r1, #240	@ 0xf0
 8016764:	187a      	adds	r2, r7, r1
 8016766:	6013      	str	r3, [r2, #0]
 8016768:	1d7b      	adds	r3, r7, #5
 801676a:	33ff      	adds	r3, #255	@ 0xff
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	221f      	movs	r2, #31
 8016770:	4013      	ands	r3, r2
 8016772:	d104      	bne.n	801677e <USB_EPStartXfer+0x7f6>
 8016774:	187b      	adds	r3, r7, r1
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	3b01      	subs	r3, #1
 801677a:	187a      	adds	r2, r7, r1
 801677c:	6013      	str	r3, [r2, #0]
 801677e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016780:	881b      	ldrh	r3, [r3, #0]
 8016782:	b29a      	uxth	r2, r3
 8016784:	23f0      	movs	r3, #240	@ 0xf0
 8016786:	18fb      	adds	r3, r7, r3
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	b29b      	uxth	r3, r3
 801678c:	029b      	lsls	r3, r3, #10
 801678e:	b29b      	uxth	r3, r3
 8016790:	4313      	orrs	r3, r2
 8016792:	b29b      	uxth	r3, r3
 8016794:	4aa6      	ldr	r2, [pc, #664]	@ (8016a30 <USB_EPStartXfer+0xaa8>)
 8016796:	4313      	orrs	r3, r2
 8016798:	b29a      	uxth	r2, r3
 801679a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801679c:	801a      	strh	r2, [r3, #0]
 801679e:	e048      	b.n	8016832 <USB_EPStartXfer+0x8aa>
 80167a0:	1d7b      	adds	r3, r7, #5
 80167a2:	33ff      	adds	r3, #255	@ 0xff
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d108      	bne.n	80167bc <USB_EPStartXfer+0x834>
 80167aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80167ac:	881b      	ldrh	r3, [r3, #0]
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	4a9f      	ldr	r2, [pc, #636]	@ (8016a30 <USB_EPStartXfer+0xaa8>)
 80167b2:	4313      	orrs	r3, r2
 80167b4:	b29a      	uxth	r2, r3
 80167b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80167b8:	801a      	strh	r2, [r3, #0]
 80167ba:	e03a      	b.n	8016832 <USB_EPStartXfer+0x8aa>
 80167bc:	1d7b      	adds	r3, r7, #5
 80167be:	33ff      	adds	r3, #255	@ 0xff
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	085b      	lsrs	r3, r3, #1
 80167c4:	21f0      	movs	r1, #240	@ 0xf0
 80167c6:	187a      	adds	r2, r7, r1
 80167c8:	6013      	str	r3, [r2, #0]
 80167ca:	1d7b      	adds	r3, r7, #5
 80167cc:	33ff      	adds	r3, #255	@ 0xff
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2201      	movs	r2, #1
 80167d2:	4013      	ands	r3, r2
 80167d4:	d004      	beq.n	80167e0 <USB_EPStartXfer+0x858>
 80167d6:	187b      	adds	r3, r7, r1
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	3301      	adds	r3, #1
 80167dc:	187a      	adds	r2, r7, r1
 80167de:	6013      	str	r3, [r2, #0]
 80167e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80167e2:	881b      	ldrh	r3, [r3, #0]
 80167e4:	b29a      	uxth	r2, r3
 80167e6:	23f0      	movs	r3, #240	@ 0xf0
 80167e8:	18fb      	adds	r3, r7, r3
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	029b      	lsls	r3, r3, #10
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	4313      	orrs	r3, r2
 80167f4:	b29a      	uxth	r2, r3
 80167f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80167f8:	801a      	strh	r2, [r3, #0]
 80167fa:	e01a      	b.n	8016832 <USB_EPStartXfer+0x8aa>
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	785b      	ldrb	r3, [r3, #1]
 8016800:	2b01      	cmp	r3, #1
 8016802:	d116      	bne.n	8016832 <USB_EPStartXfer+0x8aa>
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2250      	movs	r2, #80	@ 0x50
 8016808:	5a9b      	ldrh	r3, [r3, r2]
 801680a:	b29b      	uxth	r3, r3
 801680c:	001a      	movs	r2, r3
 801680e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016810:	189b      	adds	r3, r3, r2
 8016812:	673b      	str	r3, [r7, #112]	@ 0x70
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	00da      	lsls	r2, r3, #3
 801681a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801681c:	18d3      	adds	r3, r2, r3
 801681e:	4a83      	ldr	r2, [pc, #524]	@ (8016a2c <USB_EPStartXfer+0xaa4>)
 8016820:	4694      	mov	ip, r2
 8016822:	4463      	add	r3, ip
 8016824:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016826:	1d7b      	adds	r3, r7, #5
 8016828:	33ff      	adds	r3, #255	@ 0xff
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	b29a      	uxth	r2, r3
 801682e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016830:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8016832:	2076      	movs	r0, #118	@ 0x76
 8016834:	183b      	adds	r3, r7, r0
 8016836:	683a      	ldr	r2, [r7, #0]
 8016838:	8952      	ldrh	r2, [r2, #10]
 801683a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	6959      	ldr	r1, [r3, #20]
 8016840:	1d7b      	adds	r3, r7, #5
 8016842:	33ff      	adds	r3, #255	@ 0xff
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	b29c      	uxth	r4, r3
 8016848:	183b      	adds	r3, r7, r0
 801684a:	881a      	ldrh	r2, [r3, #0]
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	0023      	movs	r3, r4
 8016850:	f000 fe0c 	bl	801746c <USB_WritePMA>
 8016854:	e0ab      	b.n	80169ae <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	785b      	ldrb	r3, [r3, #1]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d000      	beq.n	8016860 <USB_EPStartXfer+0x8d8>
 801685e:	e070      	b.n	8016942 <USB_EPStartXfer+0x9ba>
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2250      	movs	r2, #80	@ 0x50
 8016868:	5a9b      	ldrh	r3, [r3, r2]
 801686a:	b29b      	uxth	r3, r3
 801686c:	001a      	movs	r2, r3
 801686e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016870:	189b      	adds	r3, r3, r2
 8016872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	00da      	lsls	r2, r3, #3
 801687a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801687c:	18d3      	adds	r3, r2, r3
 801687e:	4a6d      	ldr	r2, [pc, #436]	@ (8016a34 <USB_EPStartXfer+0xaac>)
 8016880:	4694      	mov	ip, r2
 8016882:	4463      	add	r3, ip
 8016884:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016888:	881b      	ldrh	r3, [r3, #0]
 801688a:	b29b      	uxth	r3, r3
 801688c:	059b      	lsls	r3, r3, #22
 801688e:	0d9b      	lsrs	r3, r3, #22
 8016890:	b29a      	uxth	r2, r3
 8016892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016894:	801a      	strh	r2, [r3, #0]
 8016896:	1d7b      	adds	r3, r7, #5
 8016898:	33ff      	adds	r3, #255	@ 0xff
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	2b3e      	cmp	r3, #62	@ 0x3e
 801689e:	d922      	bls.n	80168e6 <USB_EPStartXfer+0x95e>
 80168a0:	1d7b      	adds	r3, r7, #5
 80168a2:	33ff      	adds	r3, #255	@ 0xff
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	095b      	lsrs	r3, r3, #5
 80168a8:	21ec      	movs	r1, #236	@ 0xec
 80168aa:	187a      	adds	r2, r7, r1
 80168ac:	6013      	str	r3, [r2, #0]
 80168ae:	1d7b      	adds	r3, r7, #5
 80168b0:	33ff      	adds	r3, #255	@ 0xff
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	221f      	movs	r2, #31
 80168b6:	4013      	ands	r3, r2
 80168b8:	d104      	bne.n	80168c4 <USB_EPStartXfer+0x93c>
 80168ba:	187b      	adds	r3, r7, r1
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	3b01      	subs	r3, #1
 80168c0:	187a      	adds	r2, r7, r1
 80168c2:	6013      	str	r3, [r2, #0]
 80168c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80168c6:	881b      	ldrh	r3, [r3, #0]
 80168c8:	b29a      	uxth	r2, r3
 80168ca:	23ec      	movs	r3, #236	@ 0xec
 80168cc:	18fb      	adds	r3, r7, r3
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	029b      	lsls	r3, r3, #10
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	4313      	orrs	r3, r2
 80168d8:	b29b      	uxth	r3, r3
 80168da:	4a55      	ldr	r2, [pc, #340]	@ (8016a30 <USB_EPStartXfer+0xaa8>)
 80168dc:	4313      	orrs	r3, r2
 80168de:	b29a      	uxth	r2, r3
 80168e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80168e2:	801a      	strh	r2, [r3, #0]
 80168e4:	e052      	b.n	801698c <USB_EPStartXfer+0xa04>
 80168e6:	1d7b      	adds	r3, r7, #5
 80168e8:	33ff      	adds	r3, #255	@ 0xff
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d108      	bne.n	8016902 <USB_EPStartXfer+0x97a>
 80168f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80168f2:	881b      	ldrh	r3, [r3, #0]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	4a4e      	ldr	r2, [pc, #312]	@ (8016a30 <USB_EPStartXfer+0xaa8>)
 80168f8:	4313      	orrs	r3, r2
 80168fa:	b29a      	uxth	r2, r3
 80168fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80168fe:	801a      	strh	r2, [r3, #0]
 8016900:	e044      	b.n	801698c <USB_EPStartXfer+0xa04>
 8016902:	1d7b      	adds	r3, r7, #5
 8016904:	33ff      	adds	r3, #255	@ 0xff
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	085b      	lsrs	r3, r3, #1
 801690a:	21ec      	movs	r1, #236	@ 0xec
 801690c:	187a      	adds	r2, r7, r1
 801690e:	6013      	str	r3, [r2, #0]
 8016910:	1d7b      	adds	r3, r7, #5
 8016912:	33ff      	adds	r3, #255	@ 0xff
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	2201      	movs	r2, #1
 8016918:	4013      	ands	r3, r2
 801691a:	d004      	beq.n	8016926 <USB_EPStartXfer+0x99e>
 801691c:	187b      	adds	r3, r7, r1
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	3301      	adds	r3, #1
 8016922:	187a      	adds	r2, r7, r1
 8016924:	6013      	str	r3, [r2, #0]
 8016926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016928:	881b      	ldrh	r3, [r3, #0]
 801692a:	b29a      	uxth	r2, r3
 801692c:	23ec      	movs	r3, #236	@ 0xec
 801692e:	18fb      	adds	r3, r7, r3
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	b29b      	uxth	r3, r3
 8016934:	029b      	lsls	r3, r3, #10
 8016936:	b29b      	uxth	r3, r3
 8016938:	4313      	orrs	r3, r2
 801693a:	b29a      	uxth	r2, r3
 801693c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801693e:	801a      	strh	r2, [r3, #0]
 8016940:	e024      	b.n	801698c <USB_EPStartXfer+0xa04>
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	785b      	ldrb	r3, [r3, #1]
 8016946:	2b01      	cmp	r3, #1
 8016948:	d120      	bne.n	801698c <USB_EPStartXfer+0xa04>
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2184      	movs	r1, #132	@ 0x84
 801694e:	187a      	adds	r2, r7, r1
 8016950:	6013      	str	r3, [r2, #0]
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	2250      	movs	r2, #80	@ 0x50
 8016956:	5a9b      	ldrh	r3, [r3, r2]
 8016958:	b29b      	uxth	r3, r3
 801695a:	001a      	movs	r2, r3
 801695c:	187b      	adds	r3, r7, r1
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	189b      	adds	r3, r3, r2
 8016962:	187a      	adds	r2, r7, r1
 8016964:	6013      	str	r3, [r2, #0]
 8016966:	683b      	ldr	r3, [r7, #0]
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	00da      	lsls	r2, r3, #3
 801696c:	187b      	adds	r3, r7, r1
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	18d3      	adds	r3, r2, r3
 8016972:	4a30      	ldr	r2, [pc, #192]	@ (8016a34 <USB_EPStartXfer+0xaac>)
 8016974:	4694      	mov	ip, r2
 8016976:	4463      	add	r3, ip
 8016978:	2180      	movs	r1, #128	@ 0x80
 801697a:	187a      	adds	r2, r7, r1
 801697c:	6013      	str	r3, [r2, #0]
 801697e:	1d7b      	adds	r3, r7, #5
 8016980:	33ff      	adds	r3, #255	@ 0xff
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	b29a      	uxth	r2, r3
 8016986:	187b      	adds	r3, r7, r1
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801698c:	2076      	movs	r0, #118	@ 0x76
 801698e:	183b      	adds	r3, r7, r0
 8016990:	683a      	ldr	r2, [r7, #0]
 8016992:	8912      	ldrh	r2, [r2, #8]
 8016994:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	6959      	ldr	r1, [r3, #20]
 801699a:	1d7b      	adds	r3, r7, #5
 801699c:	33ff      	adds	r3, #255	@ 0xff
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	b29c      	uxth	r4, r3
 80169a2:	183b      	adds	r3, r7, r0
 80169a4:	881a      	ldrh	r2, [r3, #0]
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	0023      	movs	r3, r4
 80169aa:	f000 fd5f 	bl	801746c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	781b      	ldrb	r3, [r3, #0]
 80169b4:	009b      	lsls	r3, r3, #2
 80169b6:	18d3      	adds	r3, r2, r3
 80169b8:	881b      	ldrh	r3, [r3, #0]
 80169ba:	b29a      	uxth	r2, r3
 80169bc:	200a      	movs	r0, #10
 80169be:	183b      	adds	r3, r7, r0
 80169c0:	491d      	ldr	r1, [pc, #116]	@ (8016a38 <USB_EPStartXfer+0xab0>)
 80169c2:	400a      	ands	r2, r1
 80169c4:	801a      	strh	r2, [r3, #0]
 80169c6:	183b      	adds	r3, r7, r0
 80169c8:	183a      	adds	r2, r7, r0
 80169ca:	8812      	ldrh	r2, [r2, #0]
 80169cc:	2110      	movs	r1, #16
 80169ce:	404a      	eors	r2, r1
 80169d0:	801a      	strh	r2, [r3, #0]
 80169d2:	183b      	adds	r3, r7, r0
 80169d4:	183a      	adds	r2, r7, r0
 80169d6:	8812      	ldrh	r2, [r2, #0]
 80169d8:	2120      	movs	r1, #32
 80169da:	404a      	eors	r2, r1
 80169dc:	801a      	strh	r2, [r3, #0]
 80169de:	687a      	ldr	r2, [r7, #4]
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	009b      	lsls	r3, r3, #2
 80169e6:	18d3      	adds	r3, r2, r3
 80169e8:	183a      	adds	r2, r7, r0
 80169ea:	8812      	ldrh	r2, [r2, #0]
 80169ec:	4913      	ldr	r1, [pc, #76]	@ (8016a3c <USB_EPStartXfer+0xab4>)
 80169ee:	430a      	orrs	r2, r1
 80169f0:	b292      	uxth	r2, r2
 80169f2:	801a      	strh	r2, [r3, #0]
 80169f4:	f000 fbf4 	bl	80171e0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	7b1b      	ldrb	r3, [r3, #12]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d000      	beq.n	8016a02 <USB_EPStartXfer+0xa7a>
 8016a00:	e0a9      	b.n	8016b56 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	699a      	ldr	r2, [r3, #24]
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	691b      	ldr	r3, [r3, #16]
 8016a0a:	429a      	cmp	r2, r3
 8016a0c:	d918      	bls.n	8016a40 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	691b      	ldr	r3, [r3, #16]
 8016a12:	1d7a      	adds	r2, r7, #5
 8016a14:	32ff      	adds	r2, #255	@ 0xff
 8016a16:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	699a      	ldr	r2, [r3, #24]
 8016a1c:	1d7b      	adds	r3, r7, #5
 8016a1e:	33ff      	adds	r3, #255	@ 0xff
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	1ad2      	subs	r2, r2, r3
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	619a      	str	r2, [r3, #24]
 8016a28:	e012      	b.n	8016a50 <USB_EPStartXfer+0xac8>
 8016a2a:	46c0      	nop			@ (mov r8, r8)
 8016a2c:	00000406 	.word	0x00000406
 8016a30:	ffff8000 	.word	0xffff8000
 8016a34:	00000402 	.word	0x00000402
 8016a38:	ffff8fbf 	.word	0xffff8fbf
 8016a3c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	699b      	ldr	r3, [r3, #24]
 8016a44:	1d7a      	adds	r2, r7, #5
 8016a46:	32ff      	adds	r2, #255	@ 0xff
 8016a48:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2190      	movs	r1, #144	@ 0x90
 8016a54:	187a      	adds	r2, r7, r1
 8016a56:	6013      	str	r3, [r2, #0]
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2250      	movs	r2, #80	@ 0x50
 8016a5c:	5a9b      	ldrh	r3, [r3, r2]
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	001a      	movs	r2, r3
 8016a62:	187b      	adds	r3, r7, r1
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	189b      	adds	r3, r3, r2
 8016a68:	187a      	adds	r2, r7, r1
 8016a6a:	6013      	str	r3, [r2, #0]
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	781b      	ldrb	r3, [r3, #0]
 8016a70:	00da      	lsls	r2, r3, #3
 8016a72:	187b      	adds	r3, r7, r1
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	18d3      	adds	r3, r2, r3
 8016a78:	4acf      	ldr	r2, [pc, #828]	@ (8016db8 <USB_EPStartXfer+0xe30>)
 8016a7a:	4694      	mov	ip, r2
 8016a7c:	4463      	add	r3, ip
 8016a7e:	218c      	movs	r1, #140	@ 0x8c
 8016a80:	187a      	adds	r2, r7, r1
 8016a82:	6013      	str	r3, [r2, #0]
 8016a84:	187b      	adds	r3, r7, r1
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	881b      	ldrh	r3, [r3, #0]
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	059b      	lsls	r3, r3, #22
 8016a8e:	0d9b      	lsrs	r3, r3, #22
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	187b      	adds	r3, r7, r1
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	801a      	strh	r2, [r3, #0]
 8016a98:	1d7b      	adds	r3, r7, #5
 8016a9a:	33ff      	adds	r3, #255	@ 0xff
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016aa0:	d925      	bls.n	8016aee <USB_EPStartXfer+0xb66>
 8016aa2:	1d7b      	adds	r3, r7, #5
 8016aa4:	33ff      	adds	r3, #255	@ 0xff
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	095b      	lsrs	r3, r3, #5
 8016aaa:	21e8      	movs	r1, #232	@ 0xe8
 8016aac:	187a      	adds	r2, r7, r1
 8016aae:	6013      	str	r3, [r2, #0]
 8016ab0:	1d7b      	adds	r3, r7, #5
 8016ab2:	33ff      	adds	r3, #255	@ 0xff
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	221f      	movs	r2, #31
 8016ab8:	4013      	ands	r3, r2
 8016aba:	d104      	bne.n	8016ac6 <USB_EPStartXfer+0xb3e>
 8016abc:	187b      	adds	r3, r7, r1
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	3b01      	subs	r3, #1
 8016ac2:	187a      	adds	r2, r7, r1
 8016ac4:	6013      	str	r3, [r2, #0]
 8016ac6:	218c      	movs	r1, #140	@ 0x8c
 8016ac8:	187b      	adds	r3, r7, r1
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	881b      	ldrh	r3, [r3, #0]
 8016ace:	b29a      	uxth	r2, r3
 8016ad0:	23e8      	movs	r3, #232	@ 0xe8
 8016ad2:	18fb      	adds	r3, r7, r3
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	b29b      	uxth	r3, r3
 8016ad8:	029b      	lsls	r3, r3, #10
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	4313      	orrs	r3, r2
 8016ade:	b29b      	uxth	r3, r3
 8016ae0:	4ab6      	ldr	r2, [pc, #728]	@ (8016dbc <USB_EPStartXfer+0xe34>)
 8016ae2:	4313      	orrs	r3, r2
 8016ae4:	b29a      	uxth	r2, r3
 8016ae6:	187b      	adds	r3, r7, r1
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	801a      	strh	r2, [r3, #0]
 8016aec:	e353      	b.n	8017196 <USB_EPStartXfer+0x120e>
 8016aee:	1d7b      	adds	r3, r7, #5
 8016af0:	33ff      	adds	r3, #255	@ 0xff
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d10b      	bne.n	8016b10 <USB_EPStartXfer+0xb88>
 8016af8:	218c      	movs	r1, #140	@ 0x8c
 8016afa:	187b      	adds	r3, r7, r1
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	881b      	ldrh	r3, [r3, #0]
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	4aae      	ldr	r2, [pc, #696]	@ (8016dbc <USB_EPStartXfer+0xe34>)
 8016b04:	4313      	orrs	r3, r2
 8016b06:	b29a      	uxth	r2, r3
 8016b08:	187b      	adds	r3, r7, r1
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	801a      	strh	r2, [r3, #0]
 8016b0e:	e342      	b.n	8017196 <USB_EPStartXfer+0x120e>
 8016b10:	1d7b      	adds	r3, r7, #5
 8016b12:	33ff      	adds	r3, #255	@ 0xff
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	085b      	lsrs	r3, r3, #1
 8016b18:	21e8      	movs	r1, #232	@ 0xe8
 8016b1a:	187a      	adds	r2, r7, r1
 8016b1c:	6013      	str	r3, [r2, #0]
 8016b1e:	1d7b      	adds	r3, r7, #5
 8016b20:	33ff      	adds	r3, #255	@ 0xff
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	2201      	movs	r2, #1
 8016b26:	4013      	ands	r3, r2
 8016b28:	d004      	beq.n	8016b34 <USB_EPStartXfer+0xbac>
 8016b2a:	187b      	adds	r3, r7, r1
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	3301      	adds	r3, #1
 8016b30:	187a      	adds	r2, r7, r1
 8016b32:	6013      	str	r3, [r2, #0]
 8016b34:	218c      	movs	r1, #140	@ 0x8c
 8016b36:	187b      	adds	r3, r7, r1
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	881b      	ldrh	r3, [r3, #0]
 8016b3c:	b29a      	uxth	r2, r3
 8016b3e:	23e8      	movs	r3, #232	@ 0xe8
 8016b40:	18fb      	adds	r3, r7, r3
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	b29b      	uxth	r3, r3
 8016b46:	029b      	lsls	r3, r3, #10
 8016b48:	b29b      	uxth	r3, r3
 8016b4a:	4313      	orrs	r3, r2
 8016b4c:	b29a      	uxth	r2, r3
 8016b4e:	187b      	adds	r3, r7, r1
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	801a      	strh	r2, [r3, #0]
 8016b54:	e31f      	b.n	8017196 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	78db      	ldrb	r3, [r3, #3]
 8016b5a:	2b02      	cmp	r3, #2
 8016b5c:	d000      	beq.n	8016b60 <USB_EPStartXfer+0xbd8>
 8016b5e:	e191      	b.n	8016e84 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	785b      	ldrb	r3, [r3, #1]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d000      	beq.n	8016b6a <USB_EPStartXfer+0xbe2>
 8016b68:	e07c      	b.n	8016c64 <USB_EPStartXfer+0xcdc>
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	21ac      	movs	r1, #172	@ 0xac
 8016b6e:	187a      	adds	r2, r7, r1
 8016b70:	6013      	str	r3, [r2, #0]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2250      	movs	r2, #80	@ 0x50
 8016b76:	5a9b      	ldrh	r3, [r3, r2]
 8016b78:	b29b      	uxth	r3, r3
 8016b7a:	001a      	movs	r2, r3
 8016b7c:	187b      	adds	r3, r7, r1
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	189b      	adds	r3, r3, r2
 8016b82:	187a      	adds	r2, r7, r1
 8016b84:	6013      	str	r3, [r2, #0]
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	00da      	lsls	r2, r3, #3
 8016b8c:	187b      	adds	r3, r7, r1
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	18d3      	adds	r3, r2, r3
 8016b92:	4a8b      	ldr	r2, [pc, #556]	@ (8016dc0 <USB_EPStartXfer+0xe38>)
 8016b94:	4694      	mov	ip, r2
 8016b96:	4463      	add	r3, ip
 8016b98:	21a8      	movs	r1, #168	@ 0xa8
 8016b9a:	187a      	adds	r2, r7, r1
 8016b9c:	6013      	str	r3, [r2, #0]
 8016b9e:	187b      	adds	r3, r7, r1
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	881b      	ldrh	r3, [r3, #0]
 8016ba4:	b29b      	uxth	r3, r3
 8016ba6:	059b      	lsls	r3, r3, #22
 8016ba8:	0d9b      	lsrs	r3, r3, #22
 8016baa:	b29a      	uxth	r2, r3
 8016bac:	187b      	adds	r3, r7, r1
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	801a      	strh	r2, [r3, #0]
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	691b      	ldr	r3, [r3, #16]
 8016bb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8016bb8:	d923      	bls.n	8016c02 <USB_EPStartXfer+0xc7a>
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	691b      	ldr	r3, [r3, #16]
 8016bbe:	095b      	lsrs	r3, r3, #5
 8016bc0:	21e4      	movs	r1, #228	@ 0xe4
 8016bc2:	187a      	adds	r2, r7, r1
 8016bc4:	6013      	str	r3, [r2, #0]
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	691b      	ldr	r3, [r3, #16]
 8016bca:	221f      	movs	r2, #31
 8016bcc:	4013      	ands	r3, r2
 8016bce:	d104      	bne.n	8016bda <USB_EPStartXfer+0xc52>
 8016bd0:	187b      	adds	r3, r7, r1
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	3b01      	subs	r3, #1
 8016bd6:	187a      	adds	r2, r7, r1
 8016bd8:	6013      	str	r3, [r2, #0]
 8016bda:	21a8      	movs	r1, #168	@ 0xa8
 8016bdc:	187b      	adds	r3, r7, r1
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	881b      	ldrh	r3, [r3, #0]
 8016be2:	b29a      	uxth	r2, r3
 8016be4:	23e4      	movs	r3, #228	@ 0xe4
 8016be6:	18fb      	adds	r3, r7, r3
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	029b      	lsls	r3, r3, #10
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	4313      	orrs	r3, r2
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	4a71      	ldr	r2, [pc, #452]	@ (8016dbc <USB_EPStartXfer+0xe34>)
 8016bf6:	4313      	orrs	r3, r2
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	187b      	adds	r3, r7, r1
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	801a      	strh	r2, [r3, #0]
 8016c00:	e054      	b.n	8016cac <USB_EPStartXfer+0xd24>
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	691b      	ldr	r3, [r3, #16]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d10b      	bne.n	8016c22 <USB_EPStartXfer+0xc9a>
 8016c0a:	21a8      	movs	r1, #168	@ 0xa8
 8016c0c:	187b      	adds	r3, r7, r1
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	881b      	ldrh	r3, [r3, #0]
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	4a69      	ldr	r2, [pc, #420]	@ (8016dbc <USB_EPStartXfer+0xe34>)
 8016c16:	4313      	orrs	r3, r2
 8016c18:	b29a      	uxth	r2, r3
 8016c1a:	187b      	adds	r3, r7, r1
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	801a      	strh	r2, [r3, #0]
 8016c20:	e044      	b.n	8016cac <USB_EPStartXfer+0xd24>
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	691b      	ldr	r3, [r3, #16]
 8016c26:	085b      	lsrs	r3, r3, #1
 8016c28:	21e4      	movs	r1, #228	@ 0xe4
 8016c2a:	187a      	adds	r2, r7, r1
 8016c2c:	6013      	str	r3, [r2, #0]
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	691b      	ldr	r3, [r3, #16]
 8016c32:	2201      	movs	r2, #1
 8016c34:	4013      	ands	r3, r2
 8016c36:	d004      	beq.n	8016c42 <USB_EPStartXfer+0xcba>
 8016c38:	187b      	adds	r3, r7, r1
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	3301      	adds	r3, #1
 8016c3e:	187a      	adds	r2, r7, r1
 8016c40:	6013      	str	r3, [r2, #0]
 8016c42:	21a8      	movs	r1, #168	@ 0xa8
 8016c44:	187b      	adds	r3, r7, r1
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	881b      	ldrh	r3, [r3, #0]
 8016c4a:	b29a      	uxth	r2, r3
 8016c4c:	23e4      	movs	r3, #228	@ 0xe4
 8016c4e:	18fb      	adds	r3, r7, r3
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	029b      	lsls	r3, r3, #10
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	4313      	orrs	r3, r2
 8016c5a:	b29a      	uxth	r2, r3
 8016c5c:	187b      	adds	r3, r7, r1
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	801a      	strh	r2, [r3, #0]
 8016c62:	e023      	b.n	8016cac <USB_EPStartXfer+0xd24>
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	785b      	ldrb	r3, [r3, #1]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d11f      	bne.n	8016cac <USB_EPStartXfer+0xd24>
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	21b4      	movs	r1, #180	@ 0xb4
 8016c70:	187a      	adds	r2, r7, r1
 8016c72:	6013      	str	r3, [r2, #0]
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2250      	movs	r2, #80	@ 0x50
 8016c78:	5a9b      	ldrh	r3, [r3, r2]
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	001a      	movs	r2, r3
 8016c7e:	187b      	adds	r3, r7, r1
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	189b      	adds	r3, r3, r2
 8016c84:	187a      	adds	r2, r7, r1
 8016c86:	6013      	str	r3, [r2, #0]
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	00da      	lsls	r2, r3, #3
 8016c8e:	187b      	adds	r3, r7, r1
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	18d3      	adds	r3, r2, r3
 8016c94:	4a4a      	ldr	r2, [pc, #296]	@ (8016dc0 <USB_EPStartXfer+0xe38>)
 8016c96:	4694      	mov	ip, r2
 8016c98:	4463      	add	r3, ip
 8016c9a:	21b0      	movs	r1, #176	@ 0xb0
 8016c9c:	187a      	adds	r2, r7, r1
 8016c9e:	6013      	str	r3, [r2, #0]
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	691b      	ldr	r3, [r3, #16]
 8016ca4:	b29a      	uxth	r2, r3
 8016ca6:	187b      	adds	r3, r7, r1
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	801a      	strh	r2, [r3, #0]
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	22a4      	movs	r2, #164	@ 0xa4
 8016cb0:	18ba      	adds	r2, r7, r2
 8016cb2:	6013      	str	r3, [r2, #0]
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	785b      	ldrb	r3, [r3, #1]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d000      	beq.n	8016cbe <USB_EPStartXfer+0xd36>
 8016cbc:	e082      	b.n	8016dc4 <USB_EPStartXfer+0xe3c>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	219c      	movs	r1, #156	@ 0x9c
 8016cc2:	187a      	adds	r2, r7, r1
 8016cc4:	6013      	str	r3, [r2, #0]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2250      	movs	r2, #80	@ 0x50
 8016cca:	5a9b      	ldrh	r3, [r3, r2]
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	001a      	movs	r2, r3
 8016cd0:	187b      	adds	r3, r7, r1
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	189b      	adds	r3, r3, r2
 8016cd6:	187a      	adds	r2, r7, r1
 8016cd8:	6013      	str	r3, [r2, #0]
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	00da      	lsls	r2, r3, #3
 8016ce0:	187b      	adds	r3, r7, r1
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	18d3      	adds	r3, r2, r3
 8016ce6:	4a34      	ldr	r2, [pc, #208]	@ (8016db8 <USB_EPStartXfer+0xe30>)
 8016ce8:	4694      	mov	ip, r2
 8016cea:	4463      	add	r3, ip
 8016cec:	2198      	movs	r1, #152	@ 0x98
 8016cee:	187a      	adds	r2, r7, r1
 8016cf0:	6013      	str	r3, [r2, #0]
 8016cf2:	187b      	adds	r3, r7, r1
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	881b      	ldrh	r3, [r3, #0]
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	059b      	lsls	r3, r3, #22
 8016cfc:	0d9b      	lsrs	r3, r3, #22
 8016cfe:	b29a      	uxth	r2, r3
 8016d00:	187b      	adds	r3, r7, r1
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	801a      	strh	r2, [r3, #0]
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	691b      	ldr	r3, [r3, #16]
 8016d0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8016d0c:	d923      	bls.n	8016d56 <USB_EPStartXfer+0xdce>
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	691b      	ldr	r3, [r3, #16]
 8016d12:	095b      	lsrs	r3, r3, #5
 8016d14:	21e0      	movs	r1, #224	@ 0xe0
 8016d16:	187a      	adds	r2, r7, r1
 8016d18:	6013      	str	r3, [r2, #0]
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	691b      	ldr	r3, [r3, #16]
 8016d1e:	221f      	movs	r2, #31
 8016d20:	4013      	ands	r3, r2
 8016d22:	d104      	bne.n	8016d2e <USB_EPStartXfer+0xda6>
 8016d24:	187b      	adds	r3, r7, r1
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	187a      	adds	r2, r7, r1
 8016d2c:	6013      	str	r3, [r2, #0]
 8016d2e:	2198      	movs	r1, #152	@ 0x98
 8016d30:	187b      	adds	r3, r7, r1
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	b29a      	uxth	r2, r3
 8016d38:	23e0      	movs	r3, #224	@ 0xe0
 8016d3a:	18fb      	adds	r3, r7, r3
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	029b      	lsls	r3, r3, #10
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	4313      	orrs	r3, r2
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	4a1c      	ldr	r2, [pc, #112]	@ (8016dbc <USB_EPStartXfer+0xe34>)
 8016d4a:	4313      	orrs	r3, r2
 8016d4c:	b29a      	uxth	r2, r3
 8016d4e:	187b      	adds	r3, r7, r1
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	801a      	strh	r2, [r3, #0]
 8016d54:	e057      	b.n	8016e06 <USB_EPStartXfer+0xe7e>
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	691b      	ldr	r3, [r3, #16]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d10b      	bne.n	8016d76 <USB_EPStartXfer+0xdee>
 8016d5e:	2198      	movs	r1, #152	@ 0x98
 8016d60:	187b      	adds	r3, r7, r1
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	881b      	ldrh	r3, [r3, #0]
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	4a14      	ldr	r2, [pc, #80]	@ (8016dbc <USB_EPStartXfer+0xe34>)
 8016d6a:	4313      	orrs	r3, r2
 8016d6c:	b29a      	uxth	r2, r3
 8016d6e:	187b      	adds	r3, r7, r1
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	801a      	strh	r2, [r3, #0]
 8016d74:	e047      	b.n	8016e06 <USB_EPStartXfer+0xe7e>
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	691b      	ldr	r3, [r3, #16]
 8016d7a:	085b      	lsrs	r3, r3, #1
 8016d7c:	21e0      	movs	r1, #224	@ 0xe0
 8016d7e:	187a      	adds	r2, r7, r1
 8016d80:	6013      	str	r3, [r2, #0]
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	691b      	ldr	r3, [r3, #16]
 8016d86:	2201      	movs	r2, #1
 8016d88:	4013      	ands	r3, r2
 8016d8a:	d004      	beq.n	8016d96 <USB_EPStartXfer+0xe0e>
 8016d8c:	187b      	adds	r3, r7, r1
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	3301      	adds	r3, #1
 8016d92:	187a      	adds	r2, r7, r1
 8016d94:	6013      	str	r3, [r2, #0]
 8016d96:	2198      	movs	r1, #152	@ 0x98
 8016d98:	187b      	adds	r3, r7, r1
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	b29a      	uxth	r2, r3
 8016da0:	23e0      	movs	r3, #224	@ 0xe0
 8016da2:	18fb      	adds	r3, r7, r3
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	b29b      	uxth	r3, r3
 8016da8:	029b      	lsls	r3, r3, #10
 8016daa:	b29b      	uxth	r3, r3
 8016dac:	4313      	orrs	r3, r2
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	187b      	adds	r3, r7, r1
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	801a      	strh	r2, [r3, #0]
 8016db6:	e026      	b.n	8016e06 <USB_EPStartXfer+0xe7e>
 8016db8:	00000406 	.word	0x00000406
 8016dbc:	ffff8000 	.word	0xffff8000
 8016dc0:	00000402 	.word	0x00000402
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	785b      	ldrb	r3, [r3, #1]
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	d11c      	bne.n	8016e06 <USB_EPStartXfer+0xe7e>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2250      	movs	r2, #80	@ 0x50
 8016dd0:	5a9b      	ldrh	r3, [r3, r2]
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	001a      	movs	r2, r3
 8016dd6:	21a4      	movs	r1, #164	@ 0xa4
 8016dd8:	187b      	adds	r3, r7, r1
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	189b      	adds	r3, r3, r2
 8016dde:	187a      	adds	r2, r7, r1
 8016de0:	6013      	str	r3, [r2, #0]
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	781b      	ldrb	r3, [r3, #0]
 8016de6:	00da      	lsls	r2, r3, #3
 8016de8:	187b      	adds	r3, r7, r1
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	18d3      	adds	r3, r2, r3
 8016dee:	4ad2      	ldr	r2, [pc, #840]	@ (8017138 <USB_EPStartXfer+0x11b0>)
 8016df0:	4694      	mov	ip, r2
 8016df2:	4463      	add	r3, ip
 8016df4:	21a0      	movs	r1, #160	@ 0xa0
 8016df6:	187a      	adds	r2, r7, r1
 8016df8:	6013      	str	r3, [r2, #0]
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	691b      	ldr	r3, [r3, #16]
 8016dfe:	b29a      	uxth	r2, r3
 8016e00:	187b      	adds	r3, r7, r1
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	69db      	ldr	r3, [r3, #28]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d100      	bne.n	8016e10 <USB_EPStartXfer+0xe88>
 8016e0e:	e1c2      	b.n	8017196 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8016e10:	687a      	ldr	r2, [r7, #4]
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	009b      	lsls	r3, r3, #2
 8016e18:	18d2      	adds	r2, r2, r3
 8016e1a:	2196      	movs	r1, #150	@ 0x96
 8016e1c:	187b      	adds	r3, r7, r1
 8016e1e:	8812      	ldrh	r2, [r2, #0]
 8016e20:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016e22:	187b      	adds	r3, r7, r1
 8016e24:	881a      	ldrh	r2, [r3, #0]
 8016e26:	2380      	movs	r3, #128	@ 0x80
 8016e28:	01db      	lsls	r3, r3, #7
 8016e2a:	4013      	ands	r3, r2
 8016e2c:	d004      	beq.n	8016e38 <USB_EPStartXfer+0xeb0>
 8016e2e:	187b      	adds	r3, r7, r1
 8016e30:	881b      	ldrh	r3, [r3, #0]
 8016e32:	2240      	movs	r2, #64	@ 0x40
 8016e34:	4013      	ands	r3, r2
 8016e36:	d10d      	bne.n	8016e54 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016e38:	2196      	movs	r1, #150	@ 0x96
 8016e3a:	187b      	adds	r3, r7, r1
 8016e3c:	881a      	ldrh	r2, [r3, #0]
 8016e3e:	2380      	movs	r3, #128	@ 0x80
 8016e40:	01db      	lsls	r3, r3, #7
 8016e42:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016e44:	d000      	beq.n	8016e48 <USB_EPStartXfer+0xec0>
 8016e46:	e1a6      	b.n	8017196 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016e48:	187b      	adds	r3, r7, r1
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	2240      	movs	r2, #64	@ 0x40
 8016e4e:	4013      	ands	r3, r2
 8016e50:	d000      	beq.n	8016e54 <USB_EPStartXfer+0xecc>
 8016e52:	e1a0      	b.n	8017196 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8016e54:	687a      	ldr	r2, [r7, #4]
 8016e56:	683b      	ldr	r3, [r7, #0]
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	18d3      	adds	r3, r2, r3
 8016e5e:	881b      	ldrh	r3, [r3, #0]
 8016e60:	b29a      	uxth	r2, r3
 8016e62:	2094      	movs	r0, #148	@ 0x94
 8016e64:	183b      	adds	r3, r7, r0
 8016e66:	49b5      	ldr	r1, [pc, #724]	@ (801713c <USB_EPStartXfer+0x11b4>)
 8016e68:	400a      	ands	r2, r1
 8016e6a:	801a      	strh	r2, [r3, #0]
 8016e6c:	687a      	ldr	r2, [r7, #4]
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	781b      	ldrb	r3, [r3, #0]
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	18d3      	adds	r3, r2, r3
 8016e76:	183a      	adds	r2, r7, r0
 8016e78:	8812      	ldrh	r2, [r2, #0]
 8016e7a:	49b1      	ldr	r1, [pc, #708]	@ (8017140 <USB_EPStartXfer+0x11b8>)
 8016e7c:	430a      	orrs	r2, r1
 8016e7e:	b292      	uxth	r2, r2
 8016e80:	801a      	strh	r2, [r3, #0]
 8016e82:	e188      	b.n	8017196 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	78db      	ldrb	r3, [r3, #3]
 8016e88:	2b01      	cmp	r3, #1
 8016e8a:	d000      	beq.n	8016e8e <USB_EPStartXfer+0xf06>
 8016e8c:	e181      	b.n	8017192 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	699a      	ldr	r2, [r3, #24]
 8016e92:	683b      	ldr	r3, [r7, #0]
 8016e94:	691b      	ldr	r3, [r3, #16]
 8016e96:	429a      	cmp	r2, r3
 8016e98:	d90d      	bls.n	8016eb6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	691b      	ldr	r3, [r3, #16]
 8016e9e:	1d7a      	adds	r2, r7, #5
 8016ea0:	32ff      	adds	r2, #255	@ 0xff
 8016ea2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8016ea4:	683b      	ldr	r3, [r7, #0]
 8016ea6:	699a      	ldr	r2, [r3, #24]
 8016ea8:	1d7b      	adds	r3, r7, #5
 8016eaa:	33ff      	adds	r3, #255	@ 0xff
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	1ad2      	subs	r2, r2, r3
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	619a      	str	r2, [r3, #24]
 8016eb4:	e007      	b.n	8016ec6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	699b      	ldr	r3, [r3, #24]
 8016eba:	1d7a      	adds	r2, r7, #5
 8016ebc:	32ff      	adds	r2, #255	@ 0xff
 8016ebe:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	785b      	ldrb	r3, [r3, #1]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d000      	beq.n	8016ed0 <USB_EPStartXfer+0xf48>
 8016ece:	e082      	b.n	8016fd6 <USB_EPStartXfer+0x104e>
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	21cc      	movs	r1, #204	@ 0xcc
 8016ed4:	187a      	adds	r2, r7, r1
 8016ed6:	6013      	str	r3, [r2, #0]
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2250      	movs	r2, #80	@ 0x50
 8016edc:	5a9b      	ldrh	r3, [r3, r2]
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	001a      	movs	r2, r3
 8016ee2:	187b      	adds	r3, r7, r1
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	189b      	adds	r3, r3, r2
 8016ee8:	187a      	adds	r2, r7, r1
 8016eea:	6013      	str	r3, [r2, #0]
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	00da      	lsls	r2, r3, #3
 8016ef2:	187b      	adds	r3, r7, r1
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	18d3      	adds	r3, r2, r3
 8016ef8:	4a92      	ldr	r2, [pc, #584]	@ (8017144 <USB_EPStartXfer+0x11bc>)
 8016efa:	4694      	mov	ip, r2
 8016efc:	4463      	add	r3, ip
 8016efe:	21c8      	movs	r1, #200	@ 0xc8
 8016f00:	187a      	adds	r2, r7, r1
 8016f02:	6013      	str	r3, [r2, #0]
 8016f04:	187b      	adds	r3, r7, r1
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	881b      	ldrh	r3, [r3, #0]
 8016f0a:	b29b      	uxth	r3, r3
 8016f0c:	059b      	lsls	r3, r3, #22
 8016f0e:	0d9b      	lsrs	r3, r3, #22
 8016f10:	b29a      	uxth	r2, r3
 8016f12:	187b      	adds	r3, r7, r1
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	801a      	strh	r2, [r3, #0]
 8016f18:	1d7b      	adds	r3, r7, #5
 8016f1a:	33ff      	adds	r3, #255	@ 0xff
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016f20:	d925      	bls.n	8016f6e <USB_EPStartXfer+0xfe6>
 8016f22:	1d7b      	adds	r3, r7, #5
 8016f24:	33ff      	adds	r3, #255	@ 0xff
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	095b      	lsrs	r3, r3, #5
 8016f2a:	21dc      	movs	r1, #220	@ 0xdc
 8016f2c:	187a      	adds	r2, r7, r1
 8016f2e:	6013      	str	r3, [r2, #0]
 8016f30:	1d7b      	adds	r3, r7, #5
 8016f32:	33ff      	adds	r3, #255	@ 0xff
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	221f      	movs	r2, #31
 8016f38:	4013      	ands	r3, r2
 8016f3a:	d104      	bne.n	8016f46 <USB_EPStartXfer+0xfbe>
 8016f3c:	187b      	adds	r3, r7, r1
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	3b01      	subs	r3, #1
 8016f42:	187a      	adds	r2, r7, r1
 8016f44:	6013      	str	r3, [r2, #0]
 8016f46:	21c8      	movs	r1, #200	@ 0xc8
 8016f48:	187b      	adds	r3, r7, r1
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	881b      	ldrh	r3, [r3, #0]
 8016f4e:	b29a      	uxth	r2, r3
 8016f50:	23dc      	movs	r3, #220	@ 0xdc
 8016f52:	18fb      	adds	r3, r7, r3
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	b29b      	uxth	r3, r3
 8016f58:	029b      	lsls	r3, r3, #10
 8016f5a:	b29b      	uxth	r3, r3
 8016f5c:	4313      	orrs	r3, r2
 8016f5e:	b29b      	uxth	r3, r3
 8016f60:	4a79      	ldr	r2, [pc, #484]	@ (8017148 <USB_EPStartXfer+0x11c0>)
 8016f62:	4313      	orrs	r3, r2
 8016f64:	b29a      	uxth	r2, r3
 8016f66:	187b      	adds	r3, r7, r1
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	801a      	strh	r2, [r3, #0]
 8016f6c:	e058      	b.n	8017020 <USB_EPStartXfer+0x1098>
 8016f6e:	1d7b      	adds	r3, r7, #5
 8016f70:	33ff      	adds	r3, #255	@ 0xff
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d10b      	bne.n	8016f90 <USB_EPStartXfer+0x1008>
 8016f78:	21c8      	movs	r1, #200	@ 0xc8
 8016f7a:	187b      	adds	r3, r7, r1
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	881b      	ldrh	r3, [r3, #0]
 8016f80:	b29b      	uxth	r3, r3
 8016f82:	4a71      	ldr	r2, [pc, #452]	@ (8017148 <USB_EPStartXfer+0x11c0>)
 8016f84:	4313      	orrs	r3, r2
 8016f86:	b29a      	uxth	r2, r3
 8016f88:	187b      	adds	r3, r7, r1
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	801a      	strh	r2, [r3, #0]
 8016f8e:	e047      	b.n	8017020 <USB_EPStartXfer+0x1098>
 8016f90:	1d7b      	adds	r3, r7, #5
 8016f92:	33ff      	adds	r3, #255	@ 0xff
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	085b      	lsrs	r3, r3, #1
 8016f98:	21dc      	movs	r1, #220	@ 0xdc
 8016f9a:	187a      	adds	r2, r7, r1
 8016f9c:	6013      	str	r3, [r2, #0]
 8016f9e:	1d7b      	adds	r3, r7, #5
 8016fa0:	33ff      	adds	r3, #255	@ 0xff
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	2201      	movs	r2, #1
 8016fa6:	4013      	ands	r3, r2
 8016fa8:	d004      	beq.n	8016fb4 <USB_EPStartXfer+0x102c>
 8016faa:	187b      	adds	r3, r7, r1
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	3301      	adds	r3, #1
 8016fb0:	187a      	adds	r2, r7, r1
 8016fb2:	6013      	str	r3, [r2, #0]
 8016fb4:	21c8      	movs	r1, #200	@ 0xc8
 8016fb6:	187b      	adds	r3, r7, r1
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	881b      	ldrh	r3, [r3, #0]
 8016fbc:	b29a      	uxth	r2, r3
 8016fbe:	23dc      	movs	r3, #220	@ 0xdc
 8016fc0:	18fb      	adds	r3, r7, r3
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	b29b      	uxth	r3, r3
 8016fc6:	029b      	lsls	r3, r3, #10
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	4313      	orrs	r3, r2
 8016fcc:	b29a      	uxth	r2, r3
 8016fce:	187b      	adds	r3, r7, r1
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	801a      	strh	r2, [r3, #0]
 8016fd4:	e024      	b.n	8017020 <USB_EPStartXfer+0x1098>
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	785b      	ldrb	r3, [r3, #1]
 8016fda:	2b01      	cmp	r3, #1
 8016fdc:	d120      	bne.n	8017020 <USB_EPStartXfer+0x1098>
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	21d4      	movs	r1, #212	@ 0xd4
 8016fe2:	187a      	adds	r2, r7, r1
 8016fe4:	6013      	str	r3, [r2, #0]
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	2250      	movs	r2, #80	@ 0x50
 8016fea:	5a9b      	ldrh	r3, [r3, r2]
 8016fec:	b29b      	uxth	r3, r3
 8016fee:	001a      	movs	r2, r3
 8016ff0:	187b      	adds	r3, r7, r1
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	189b      	adds	r3, r3, r2
 8016ff6:	187a      	adds	r2, r7, r1
 8016ff8:	6013      	str	r3, [r2, #0]
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	781b      	ldrb	r3, [r3, #0]
 8016ffe:	00da      	lsls	r2, r3, #3
 8017000:	187b      	adds	r3, r7, r1
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	18d3      	adds	r3, r2, r3
 8017006:	4a4f      	ldr	r2, [pc, #316]	@ (8017144 <USB_EPStartXfer+0x11bc>)
 8017008:	4694      	mov	ip, r2
 801700a:	4463      	add	r3, ip
 801700c:	21d0      	movs	r1, #208	@ 0xd0
 801700e:	187a      	adds	r2, r7, r1
 8017010:	6013      	str	r3, [r2, #0]
 8017012:	1d7b      	adds	r3, r7, #5
 8017014:	33ff      	adds	r3, #255	@ 0xff
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	b29a      	uxth	r2, r3
 801701a:	187b      	adds	r3, r7, r1
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	801a      	strh	r2, [r3, #0]
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	22c4      	movs	r2, #196	@ 0xc4
 8017024:	18ba      	adds	r2, r7, r2
 8017026:	6013      	str	r3, [r2, #0]
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	785b      	ldrb	r3, [r3, #1]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d000      	beq.n	8017032 <USB_EPStartXfer+0x10aa>
 8017030:	e08c      	b.n	801714c <USB_EPStartXfer+0x11c4>
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	21bc      	movs	r1, #188	@ 0xbc
 8017036:	187a      	adds	r2, r7, r1
 8017038:	6013      	str	r3, [r2, #0]
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2250      	movs	r2, #80	@ 0x50
 801703e:	5a9b      	ldrh	r3, [r3, r2]
 8017040:	b29b      	uxth	r3, r3
 8017042:	001a      	movs	r2, r3
 8017044:	187b      	adds	r3, r7, r1
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	189b      	adds	r3, r3, r2
 801704a:	187a      	adds	r2, r7, r1
 801704c:	6013      	str	r3, [r2, #0]
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	00da      	lsls	r2, r3, #3
 8017054:	187b      	adds	r3, r7, r1
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	18d3      	adds	r3, r2, r3
 801705a:	4a37      	ldr	r2, [pc, #220]	@ (8017138 <USB_EPStartXfer+0x11b0>)
 801705c:	4694      	mov	ip, r2
 801705e:	4463      	add	r3, ip
 8017060:	21b8      	movs	r1, #184	@ 0xb8
 8017062:	187a      	adds	r2, r7, r1
 8017064:	6013      	str	r3, [r2, #0]
 8017066:	187b      	adds	r3, r7, r1
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	881b      	ldrh	r3, [r3, #0]
 801706c:	b29b      	uxth	r3, r3
 801706e:	059b      	lsls	r3, r3, #22
 8017070:	0d9b      	lsrs	r3, r3, #22
 8017072:	b29a      	uxth	r2, r3
 8017074:	187b      	adds	r3, r7, r1
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	801a      	strh	r2, [r3, #0]
 801707a:	1d7b      	adds	r3, r7, #5
 801707c:	33ff      	adds	r3, #255	@ 0xff
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2b3e      	cmp	r3, #62	@ 0x3e
 8017082:	d925      	bls.n	80170d0 <USB_EPStartXfer+0x1148>
 8017084:	1d7b      	adds	r3, r7, #5
 8017086:	33ff      	adds	r3, #255	@ 0xff
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	095b      	lsrs	r3, r3, #5
 801708c:	21d8      	movs	r1, #216	@ 0xd8
 801708e:	187a      	adds	r2, r7, r1
 8017090:	6013      	str	r3, [r2, #0]
 8017092:	1d7b      	adds	r3, r7, #5
 8017094:	33ff      	adds	r3, #255	@ 0xff
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	221f      	movs	r2, #31
 801709a:	4013      	ands	r3, r2
 801709c:	d104      	bne.n	80170a8 <USB_EPStartXfer+0x1120>
 801709e:	187b      	adds	r3, r7, r1
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	3b01      	subs	r3, #1
 80170a4:	187a      	adds	r2, r7, r1
 80170a6:	6013      	str	r3, [r2, #0]
 80170a8:	21b8      	movs	r1, #184	@ 0xb8
 80170aa:	187b      	adds	r3, r7, r1
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	881b      	ldrh	r3, [r3, #0]
 80170b0:	b29a      	uxth	r2, r3
 80170b2:	23d8      	movs	r3, #216	@ 0xd8
 80170b4:	18fb      	adds	r3, r7, r3
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	029b      	lsls	r3, r3, #10
 80170bc:	b29b      	uxth	r3, r3
 80170be:	4313      	orrs	r3, r2
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	4a21      	ldr	r2, [pc, #132]	@ (8017148 <USB_EPStartXfer+0x11c0>)
 80170c4:	4313      	orrs	r3, r2
 80170c6:	b29a      	uxth	r2, r3
 80170c8:	187b      	adds	r3, r7, r1
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	801a      	strh	r2, [r3, #0]
 80170ce:	e062      	b.n	8017196 <USB_EPStartXfer+0x120e>
 80170d0:	1d7b      	adds	r3, r7, #5
 80170d2:	33ff      	adds	r3, #255	@ 0xff
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d10b      	bne.n	80170f2 <USB_EPStartXfer+0x116a>
 80170da:	21b8      	movs	r1, #184	@ 0xb8
 80170dc:	187b      	adds	r3, r7, r1
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	881b      	ldrh	r3, [r3, #0]
 80170e2:	b29b      	uxth	r3, r3
 80170e4:	4a18      	ldr	r2, [pc, #96]	@ (8017148 <USB_EPStartXfer+0x11c0>)
 80170e6:	4313      	orrs	r3, r2
 80170e8:	b29a      	uxth	r2, r3
 80170ea:	187b      	adds	r3, r7, r1
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	801a      	strh	r2, [r3, #0]
 80170f0:	e051      	b.n	8017196 <USB_EPStartXfer+0x120e>
 80170f2:	1d7b      	adds	r3, r7, #5
 80170f4:	33ff      	adds	r3, #255	@ 0xff
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	085b      	lsrs	r3, r3, #1
 80170fa:	21d8      	movs	r1, #216	@ 0xd8
 80170fc:	187a      	adds	r2, r7, r1
 80170fe:	6013      	str	r3, [r2, #0]
 8017100:	1d7b      	adds	r3, r7, #5
 8017102:	33ff      	adds	r3, #255	@ 0xff
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2201      	movs	r2, #1
 8017108:	4013      	ands	r3, r2
 801710a:	d004      	beq.n	8017116 <USB_EPStartXfer+0x118e>
 801710c:	187b      	adds	r3, r7, r1
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	3301      	adds	r3, #1
 8017112:	187a      	adds	r2, r7, r1
 8017114:	6013      	str	r3, [r2, #0]
 8017116:	21b8      	movs	r1, #184	@ 0xb8
 8017118:	187b      	adds	r3, r7, r1
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	881b      	ldrh	r3, [r3, #0]
 801711e:	b29a      	uxth	r2, r3
 8017120:	23d8      	movs	r3, #216	@ 0xd8
 8017122:	18fb      	adds	r3, r7, r3
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	b29b      	uxth	r3, r3
 8017128:	029b      	lsls	r3, r3, #10
 801712a:	b29b      	uxth	r3, r3
 801712c:	4313      	orrs	r3, r2
 801712e:	b29a      	uxth	r2, r3
 8017130:	187b      	adds	r3, r7, r1
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	801a      	strh	r2, [r3, #0]
 8017136:	e02e      	b.n	8017196 <USB_EPStartXfer+0x120e>
 8017138:	00000406 	.word	0x00000406
 801713c:	ffff8f8f 	.word	0xffff8f8f
 8017140:	ffff80c0 	.word	0xffff80c0
 8017144:	00000402 	.word	0x00000402
 8017148:	ffff8000 	.word	0xffff8000
 801714c:	683b      	ldr	r3, [r7, #0]
 801714e:	785b      	ldrb	r3, [r3, #1]
 8017150:	2b01      	cmp	r3, #1
 8017152:	d120      	bne.n	8017196 <USB_EPStartXfer+0x120e>
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2250      	movs	r2, #80	@ 0x50
 8017158:	5a9b      	ldrh	r3, [r3, r2]
 801715a:	b29b      	uxth	r3, r3
 801715c:	001a      	movs	r2, r3
 801715e:	21c4      	movs	r1, #196	@ 0xc4
 8017160:	187b      	adds	r3, r7, r1
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	189b      	adds	r3, r3, r2
 8017166:	187a      	adds	r2, r7, r1
 8017168:	6013      	str	r3, [r2, #0]
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	00da      	lsls	r2, r3, #3
 8017170:	187b      	adds	r3, r7, r1
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	18d3      	adds	r3, r2, r3
 8017176:	4a1d      	ldr	r2, [pc, #116]	@ (80171ec <USB_EPStartXfer+0x1264>)
 8017178:	4694      	mov	ip, r2
 801717a:	4463      	add	r3, ip
 801717c:	21c0      	movs	r1, #192	@ 0xc0
 801717e:	187a      	adds	r2, r7, r1
 8017180:	6013      	str	r3, [r2, #0]
 8017182:	1d7b      	adds	r3, r7, #5
 8017184:	33ff      	adds	r3, #255	@ 0xff
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	b29a      	uxth	r2, r3
 801718a:	187b      	adds	r3, r7, r1
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	801a      	strh	r2, [r3, #0]
 8017190:	e001      	b.n	8017196 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8017192:	2301      	movs	r3, #1
 8017194:	e025      	b.n	80171e2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	009b      	lsls	r3, r3, #2
 801719e:	18d3      	adds	r3, r2, r3
 80171a0:	881b      	ldrh	r3, [r3, #0]
 80171a2:	b29a      	uxth	r2, r3
 80171a4:	208a      	movs	r0, #138	@ 0x8a
 80171a6:	183b      	adds	r3, r7, r0
 80171a8:	4911      	ldr	r1, [pc, #68]	@ (80171f0 <USB_EPStartXfer+0x1268>)
 80171aa:	400a      	ands	r2, r1
 80171ac:	801a      	strh	r2, [r3, #0]
 80171ae:	183b      	adds	r3, r7, r0
 80171b0:	183a      	adds	r2, r7, r0
 80171b2:	8812      	ldrh	r2, [r2, #0]
 80171b4:	2180      	movs	r1, #128	@ 0x80
 80171b6:	0149      	lsls	r1, r1, #5
 80171b8:	404a      	eors	r2, r1
 80171ba:	801a      	strh	r2, [r3, #0]
 80171bc:	183b      	adds	r3, r7, r0
 80171be:	183a      	adds	r2, r7, r0
 80171c0:	8812      	ldrh	r2, [r2, #0]
 80171c2:	2180      	movs	r1, #128	@ 0x80
 80171c4:	0189      	lsls	r1, r1, #6
 80171c6:	404a      	eors	r2, r1
 80171c8:	801a      	strh	r2, [r3, #0]
 80171ca:	687a      	ldr	r2, [r7, #4]
 80171cc:	683b      	ldr	r3, [r7, #0]
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	009b      	lsls	r3, r3, #2
 80171d2:	18d3      	adds	r3, r2, r3
 80171d4:	183a      	adds	r2, r7, r0
 80171d6:	8812      	ldrh	r2, [r2, #0]
 80171d8:	4906      	ldr	r1, [pc, #24]	@ (80171f4 <USB_EPStartXfer+0x126c>)
 80171da:	430a      	orrs	r2, r1
 80171dc:	b292      	uxth	r2, r2
 80171de:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80171e0:	2300      	movs	r3, #0
}
 80171e2:	0018      	movs	r0, r3
 80171e4:	46bd      	mov	sp, r7
 80171e6:	b043      	add	sp, #268	@ 0x10c
 80171e8:	bd90      	pop	{r4, r7, pc}
 80171ea:	46c0      	nop			@ (mov r8, r8)
 80171ec:	00000406 	.word	0x00000406
 80171f0:	ffffbf8f 	.word	0xffffbf8f
 80171f4:	ffff8080 	.word	0xffff8080

080171f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	785b      	ldrb	r3, [r3, #1]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d01d      	beq.n	8017246 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801720a:	687a      	ldr	r2, [r7, #4]
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	009b      	lsls	r3, r3, #2
 8017212:	18d3      	adds	r3, r2, r3
 8017214:	881b      	ldrh	r3, [r3, #0]
 8017216:	b29a      	uxth	r2, r3
 8017218:	200c      	movs	r0, #12
 801721a:	183b      	adds	r3, r7, r0
 801721c:	491b      	ldr	r1, [pc, #108]	@ (801728c <USB_EPSetStall+0x94>)
 801721e:	400a      	ands	r2, r1
 8017220:	801a      	strh	r2, [r3, #0]
 8017222:	183b      	adds	r3, r7, r0
 8017224:	183a      	adds	r2, r7, r0
 8017226:	8812      	ldrh	r2, [r2, #0]
 8017228:	2110      	movs	r1, #16
 801722a:	404a      	eors	r2, r1
 801722c:	801a      	strh	r2, [r3, #0]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	781b      	ldrb	r3, [r3, #0]
 8017234:	009b      	lsls	r3, r3, #2
 8017236:	18d3      	adds	r3, r2, r3
 8017238:	183a      	adds	r2, r7, r0
 801723a:	8812      	ldrh	r2, [r2, #0]
 801723c:	4914      	ldr	r1, [pc, #80]	@ (8017290 <USB_EPSetStall+0x98>)
 801723e:	430a      	orrs	r2, r1
 8017240:	b292      	uxth	r2, r2
 8017242:	801a      	strh	r2, [r3, #0]
 8017244:	e01d      	b.n	8017282 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8017246:	687a      	ldr	r2, [r7, #4]
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	009b      	lsls	r3, r3, #2
 801724e:	18d3      	adds	r3, r2, r3
 8017250:	881b      	ldrh	r3, [r3, #0]
 8017252:	b29a      	uxth	r2, r3
 8017254:	200e      	movs	r0, #14
 8017256:	183b      	adds	r3, r7, r0
 8017258:	490e      	ldr	r1, [pc, #56]	@ (8017294 <USB_EPSetStall+0x9c>)
 801725a:	400a      	ands	r2, r1
 801725c:	801a      	strh	r2, [r3, #0]
 801725e:	183b      	adds	r3, r7, r0
 8017260:	183a      	adds	r2, r7, r0
 8017262:	8812      	ldrh	r2, [r2, #0]
 8017264:	2180      	movs	r1, #128	@ 0x80
 8017266:	0149      	lsls	r1, r1, #5
 8017268:	404a      	eors	r2, r1
 801726a:	801a      	strh	r2, [r3, #0]
 801726c:	687a      	ldr	r2, [r7, #4]
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	781b      	ldrb	r3, [r3, #0]
 8017272:	009b      	lsls	r3, r3, #2
 8017274:	18d3      	adds	r3, r2, r3
 8017276:	183a      	adds	r2, r7, r0
 8017278:	8812      	ldrh	r2, [r2, #0]
 801727a:	4905      	ldr	r1, [pc, #20]	@ (8017290 <USB_EPSetStall+0x98>)
 801727c:	430a      	orrs	r2, r1
 801727e:	b292      	uxth	r2, r2
 8017280:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8017282:	2300      	movs	r3, #0
}
 8017284:	0018      	movs	r0, r3
 8017286:	46bd      	mov	sp, r7
 8017288:	b004      	add	sp, #16
 801728a:	bd80      	pop	{r7, pc}
 801728c:	ffff8fbf 	.word	0xffff8fbf
 8017290:	ffff8080 	.word	0xffff8080
 8017294:	ffffbf8f 	.word	0xffffbf8f

08017298 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b086      	sub	sp, #24
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	7b1b      	ldrb	r3, [r3, #12]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d000      	beq.n	80172ac <USB_EPClearStall+0x14>
 80172aa:	e095      	b.n	80173d8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	785b      	ldrb	r3, [r3, #1]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d046      	beq.n	8017342 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80172b4:	687a      	ldr	r2, [r7, #4]
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	009b      	lsls	r3, r3, #2
 80172bc:	18d2      	adds	r2, r2, r3
 80172be:	2110      	movs	r1, #16
 80172c0:	187b      	adds	r3, r7, r1
 80172c2:	8812      	ldrh	r2, [r2, #0]
 80172c4:	801a      	strh	r2, [r3, #0]
 80172c6:	187b      	adds	r3, r7, r1
 80172c8:	881b      	ldrh	r3, [r3, #0]
 80172ca:	2240      	movs	r2, #64	@ 0x40
 80172cc:	4013      	ands	r3, r2
 80172ce:	d016      	beq.n	80172fe <USB_EPClearStall+0x66>
 80172d0:	687a      	ldr	r2, [r7, #4]
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	781b      	ldrb	r3, [r3, #0]
 80172d6:	009b      	lsls	r3, r3, #2
 80172d8:	18d3      	adds	r3, r2, r3
 80172da:	881b      	ldrh	r3, [r3, #0]
 80172dc:	b29a      	uxth	r2, r3
 80172de:	200e      	movs	r0, #14
 80172e0:	183b      	adds	r3, r7, r0
 80172e2:	4940      	ldr	r1, [pc, #256]	@ (80173e4 <USB_EPClearStall+0x14c>)
 80172e4:	400a      	ands	r2, r1
 80172e6:	801a      	strh	r2, [r3, #0]
 80172e8:	687a      	ldr	r2, [r7, #4]
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	781b      	ldrb	r3, [r3, #0]
 80172ee:	009b      	lsls	r3, r3, #2
 80172f0:	18d3      	adds	r3, r2, r3
 80172f2:	183a      	adds	r2, r7, r0
 80172f4:	8812      	ldrh	r2, [r2, #0]
 80172f6:	493c      	ldr	r1, [pc, #240]	@ (80173e8 <USB_EPClearStall+0x150>)
 80172f8:	430a      	orrs	r2, r1
 80172fa:	b292      	uxth	r2, r2
 80172fc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	78db      	ldrb	r3, [r3, #3]
 8017302:	2b01      	cmp	r3, #1
 8017304:	d068      	beq.n	80173d8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8017306:	687a      	ldr	r2, [r7, #4]
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	18d3      	adds	r3, r2, r3
 8017310:	881b      	ldrh	r3, [r3, #0]
 8017312:	b29a      	uxth	r2, r3
 8017314:	200c      	movs	r0, #12
 8017316:	183b      	adds	r3, r7, r0
 8017318:	4934      	ldr	r1, [pc, #208]	@ (80173ec <USB_EPClearStall+0x154>)
 801731a:	400a      	ands	r2, r1
 801731c:	801a      	strh	r2, [r3, #0]
 801731e:	183b      	adds	r3, r7, r0
 8017320:	183a      	adds	r2, r7, r0
 8017322:	8812      	ldrh	r2, [r2, #0]
 8017324:	2120      	movs	r1, #32
 8017326:	404a      	eors	r2, r1
 8017328:	801a      	strh	r2, [r3, #0]
 801732a:	687a      	ldr	r2, [r7, #4]
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	18d3      	adds	r3, r2, r3
 8017334:	183a      	adds	r2, r7, r0
 8017336:	8812      	ldrh	r2, [r2, #0]
 8017338:	492d      	ldr	r1, [pc, #180]	@ (80173f0 <USB_EPClearStall+0x158>)
 801733a:	430a      	orrs	r2, r1
 801733c:	b292      	uxth	r2, r2
 801733e:	801a      	strh	r2, [r3, #0]
 8017340:	e04a      	b.n	80173d8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017342:	687a      	ldr	r2, [r7, #4]
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	009b      	lsls	r3, r3, #2
 801734a:	18d2      	adds	r2, r2, r3
 801734c:	2116      	movs	r1, #22
 801734e:	187b      	adds	r3, r7, r1
 8017350:	8812      	ldrh	r2, [r2, #0]
 8017352:	801a      	strh	r2, [r3, #0]
 8017354:	187b      	adds	r3, r7, r1
 8017356:	881a      	ldrh	r2, [r3, #0]
 8017358:	2380      	movs	r3, #128	@ 0x80
 801735a:	01db      	lsls	r3, r3, #7
 801735c:	4013      	ands	r3, r2
 801735e:	d016      	beq.n	801738e <USB_EPClearStall+0xf6>
 8017360:	687a      	ldr	r2, [r7, #4]
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	009b      	lsls	r3, r3, #2
 8017368:	18d3      	adds	r3, r2, r3
 801736a:	881b      	ldrh	r3, [r3, #0]
 801736c:	b29a      	uxth	r2, r3
 801736e:	2014      	movs	r0, #20
 8017370:	183b      	adds	r3, r7, r0
 8017372:	491c      	ldr	r1, [pc, #112]	@ (80173e4 <USB_EPClearStall+0x14c>)
 8017374:	400a      	ands	r2, r1
 8017376:	801a      	strh	r2, [r3, #0]
 8017378:	687a      	ldr	r2, [r7, #4]
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	009b      	lsls	r3, r3, #2
 8017380:	18d3      	adds	r3, r2, r3
 8017382:	183a      	adds	r2, r7, r0
 8017384:	8812      	ldrh	r2, [r2, #0]
 8017386:	491b      	ldr	r1, [pc, #108]	@ (80173f4 <USB_EPClearStall+0x15c>)
 8017388:	430a      	orrs	r2, r1
 801738a:	b292      	uxth	r2, r2
 801738c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801738e:	687a      	ldr	r2, [r7, #4]
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	781b      	ldrb	r3, [r3, #0]
 8017394:	009b      	lsls	r3, r3, #2
 8017396:	18d3      	adds	r3, r2, r3
 8017398:	881b      	ldrh	r3, [r3, #0]
 801739a:	b29a      	uxth	r2, r3
 801739c:	2012      	movs	r0, #18
 801739e:	183b      	adds	r3, r7, r0
 80173a0:	4915      	ldr	r1, [pc, #84]	@ (80173f8 <USB_EPClearStall+0x160>)
 80173a2:	400a      	ands	r2, r1
 80173a4:	801a      	strh	r2, [r3, #0]
 80173a6:	183b      	adds	r3, r7, r0
 80173a8:	183a      	adds	r2, r7, r0
 80173aa:	8812      	ldrh	r2, [r2, #0]
 80173ac:	2180      	movs	r1, #128	@ 0x80
 80173ae:	0149      	lsls	r1, r1, #5
 80173b0:	404a      	eors	r2, r1
 80173b2:	801a      	strh	r2, [r3, #0]
 80173b4:	183b      	adds	r3, r7, r0
 80173b6:	183a      	adds	r2, r7, r0
 80173b8:	8812      	ldrh	r2, [r2, #0]
 80173ba:	2180      	movs	r1, #128	@ 0x80
 80173bc:	0189      	lsls	r1, r1, #6
 80173be:	404a      	eors	r2, r1
 80173c0:	801a      	strh	r2, [r3, #0]
 80173c2:	687a      	ldr	r2, [r7, #4]
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	009b      	lsls	r3, r3, #2
 80173ca:	18d3      	adds	r3, r2, r3
 80173cc:	183a      	adds	r2, r7, r0
 80173ce:	8812      	ldrh	r2, [r2, #0]
 80173d0:	4907      	ldr	r1, [pc, #28]	@ (80173f0 <USB_EPClearStall+0x158>)
 80173d2:	430a      	orrs	r2, r1
 80173d4:	b292      	uxth	r2, r2
 80173d6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80173d8:	2300      	movs	r3, #0
}
 80173da:	0018      	movs	r0, r3
 80173dc:	46bd      	mov	sp, r7
 80173de:	b006      	add	sp, #24
 80173e0:	bd80      	pop	{r7, pc}
 80173e2:	46c0      	nop			@ (mov r8, r8)
 80173e4:	ffff8f8f 	.word	0xffff8f8f
 80173e8:	ffff80c0 	.word	0xffff80c0
 80173ec:	ffff8fbf 	.word	0xffff8fbf
 80173f0:	ffff8080 	.word	0xffff8080
 80173f4:	ffffc080 	.word	0xffffc080
 80173f8:	ffffbf8f 	.word	0xffffbf8f

080173fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	000a      	movs	r2, r1
 8017406:	1cfb      	adds	r3, r7, #3
 8017408:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801740a:	1cfb      	adds	r3, r7, #3
 801740c:	781b      	ldrb	r3, [r3, #0]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d103      	bne.n	801741a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	224c      	movs	r2, #76	@ 0x4c
 8017416:	2180      	movs	r1, #128	@ 0x80
 8017418:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801741a:	2300      	movs	r3, #0
}
 801741c:	0018      	movs	r0, r3
 801741e:	46bd      	mov	sp, r7
 8017420:	b002      	add	sp, #8
 8017422:	bd80      	pop	{r7, pc}

08017424 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b082      	sub	sp, #8
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2258      	movs	r2, #88	@ 0x58
 8017430:	5a9b      	ldrh	r3, [r3, r2]
 8017432:	b29b      	uxth	r3, r3
 8017434:	4a05      	ldr	r2, [pc, #20]	@ (801744c <USB_DevConnect+0x28>)
 8017436:	4313      	orrs	r3, r2
 8017438:	b299      	uxth	r1, r3
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	2258      	movs	r2, #88	@ 0x58
 801743e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017440:	2300      	movs	r3, #0
}
 8017442:	0018      	movs	r0, r3
 8017444:	46bd      	mov	sp, r7
 8017446:	b002      	add	sp, #8
 8017448:	bd80      	pop	{r7, pc}
 801744a:	46c0      	nop			@ (mov r8, r8)
 801744c:	ffff8000 	.word	0xffff8000

08017450 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b084      	sub	sp, #16
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	2244      	movs	r2, #68	@ 0x44
 801745c:	5a9b      	ldrh	r3, [r3, r2]
 801745e:	b29b      	uxth	r3, r3
 8017460:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8017462:	68fb      	ldr	r3, [r7, #12]
}
 8017464:	0018      	movs	r0, r3
 8017466:	46bd      	mov	sp, r7
 8017468:	b004      	add	sp, #16
 801746a:	bd80      	pop	{r7, pc}

0801746c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b08a      	sub	sp, #40	@ 0x28
 8017470:	af00      	add	r7, sp, #0
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	60b9      	str	r1, [r7, #8]
 8017476:	0019      	movs	r1, r3
 8017478:	1dbb      	adds	r3, r7, #6
 801747a:	801a      	strh	r2, [r3, #0]
 801747c:	1d3b      	adds	r3, r7, #4
 801747e:	1c0a      	adds	r2, r1, #0
 8017480:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8017482:	1d3b      	adds	r3, r7, #4
 8017484:	881b      	ldrh	r3, [r3, #0]
 8017486:	3301      	adds	r3, #1
 8017488:	085b      	lsrs	r3, r3, #1
 801748a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8017494:	1dbb      	adds	r3, r7, #6
 8017496:	881a      	ldrh	r2, [r3, #0]
 8017498:	697b      	ldr	r3, [r7, #20]
 801749a:	18d3      	adds	r3, r2, r3
 801749c:	2280      	movs	r2, #128	@ 0x80
 801749e:	00d2      	lsls	r2, r2, #3
 80174a0:	4694      	mov	ip, r2
 80174a2:	4463      	add	r3, ip
 80174a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80174a6:	69bb      	ldr	r3, [r7, #24]
 80174a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80174aa:	e020      	b.n	80174ee <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80174ac:	69fb      	ldr	r3, [r7, #28]
 80174ae:	781a      	ldrb	r2, [r3, #0]
 80174b0:	2112      	movs	r1, #18
 80174b2:	187b      	adds	r3, r7, r1
 80174b4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80174b6:	69fb      	ldr	r3, [r7, #28]
 80174b8:	3301      	adds	r3, #1
 80174ba:	781b      	ldrb	r3, [r3, #0]
 80174bc:	021b      	lsls	r3, r3, #8
 80174be:	b21a      	sxth	r2, r3
 80174c0:	187b      	adds	r3, r7, r1
 80174c2:	2000      	movs	r0, #0
 80174c4:	5e1b      	ldrsh	r3, [r3, r0]
 80174c6:	4313      	orrs	r3, r2
 80174c8:	b21a      	sxth	r2, r3
 80174ca:	187b      	adds	r3, r7, r1
 80174cc:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80174ce:	6a3b      	ldr	r3, [r7, #32]
 80174d0:	187a      	adds	r2, r7, r1
 80174d2:	8812      	ldrh	r2, [r2, #0]
 80174d4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80174d6:	6a3b      	ldr	r3, [r7, #32]
 80174d8:	3302      	adds	r3, #2
 80174da:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	3301      	adds	r3, #1
 80174e0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80174e2:	69fb      	ldr	r3, [r7, #28]
 80174e4:	3301      	adds	r3, #1
 80174e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80174e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ea:	3b01      	subs	r3, #1
 80174ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80174ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d1db      	bne.n	80174ac <USB_WritePMA+0x40>
  }
}
 80174f4:	46c0      	nop			@ (mov r8, r8)
 80174f6:	46c0      	nop			@ (mov r8, r8)
 80174f8:	46bd      	mov	sp, r7
 80174fa:	b00a      	add	sp, #40	@ 0x28
 80174fc:	bd80      	pop	{r7, pc}

080174fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80174fe:	b580      	push	{r7, lr}
 8017500:	b08a      	sub	sp, #40	@ 0x28
 8017502:	af00      	add	r7, sp, #0
 8017504:	60f8      	str	r0, [r7, #12]
 8017506:	60b9      	str	r1, [r7, #8]
 8017508:	0019      	movs	r1, r3
 801750a:	1dbb      	adds	r3, r7, #6
 801750c:	801a      	strh	r2, [r3, #0]
 801750e:	1d3b      	adds	r3, r7, #4
 8017510:	1c0a      	adds	r2, r1, #0
 8017512:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8017514:	1d3b      	adds	r3, r7, #4
 8017516:	881b      	ldrh	r3, [r3, #0]
 8017518:	085b      	lsrs	r3, r3, #1
 801751a:	b29b      	uxth	r3, r3
 801751c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8017526:	1dbb      	adds	r3, r7, #6
 8017528:	881a      	ldrh	r2, [r3, #0]
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	18d3      	adds	r3, r2, r3
 801752e:	2280      	movs	r2, #128	@ 0x80
 8017530:	00d2      	lsls	r2, r2, #3
 8017532:	4694      	mov	ip, r2
 8017534:	4463      	add	r3, ip
 8017536:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	627b      	str	r3, [r7, #36]	@ 0x24
 801753c:	e018      	b.n	8017570 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801753e:	6a3b      	ldr	r3, [r7, #32]
 8017540:	881b      	ldrh	r3, [r3, #0]
 8017542:	b29b      	uxth	r3, r3
 8017544:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8017546:	6a3b      	ldr	r3, [r7, #32]
 8017548:	3302      	adds	r3, #2
 801754a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801754c:	693b      	ldr	r3, [r7, #16]
 801754e:	b2da      	uxtb	r2, r3
 8017550:	69fb      	ldr	r3, [r7, #28]
 8017552:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8017554:	69fb      	ldr	r3, [r7, #28]
 8017556:	3301      	adds	r3, #1
 8017558:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801755a:	693b      	ldr	r3, [r7, #16]
 801755c:	0a1b      	lsrs	r3, r3, #8
 801755e:	b2da      	uxtb	r2, r3
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8017564:	69fb      	ldr	r3, [r7, #28]
 8017566:	3301      	adds	r3, #1
 8017568:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756c:	3b01      	subs	r3, #1
 801756e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017572:	2b00      	cmp	r3, #0
 8017574:	d1e3      	bne.n	801753e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8017576:	1d3b      	adds	r3, r7, #4
 8017578:	881b      	ldrh	r3, [r3, #0]
 801757a:	2201      	movs	r2, #1
 801757c:	4013      	ands	r3, r2
 801757e:	b29b      	uxth	r3, r3
 8017580:	2b00      	cmp	r3, #0
 8017582:	d007      	beq.n	8017594 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8017584:	6a3b      	ldr	r3, [r7, #32]
 8017586:	881b      	ldrh	r3, [r3, #0]
 8017588:	b29b      	uxth	r3, r3
 801758a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801758c:	693b      	ldr	r3, [r7, #16]
 801758e:	b2da      	uxtb	r2, r3
 8017590:	69fb      	ldr	r3, [r7, #28]
 8017592:	701a      	strb	r2, [r3, #0]
  }
}
 8017594:	46c0      	nop			@ (mov r8, r8)
 8017596:	46bd      	mov	sp, r7
 8017598:	b00a      	add	sp, #40	@ 0x28
 801759a:	bd80      	pop	{r7, pc}

0801759c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b084      	sub	sp, #16
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	000a      	movs	r2, r1
 80175a6:	1cfb      	adds	r3, r7, #3
 80175a8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80175aa:	230f      	movs	r3, #15
 80175ac:	18fb      	adds	r3, r7, r3
 80175ae:	2200      	movs	r2, #0
 80175b0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	7c1b      	ldrb	r3, [r3, #16]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d116      	bne.n	80175e8 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80175ba:	2380      	movs	r3, #128	@ 0x80
 80175bc:	009b      	lsls	r3, r3, #2
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	2202      	movs	r2, #2
 80175c2:	2181      	movs	r1, #129	@ 0x81
 80175c4:	f002 f8eb 	bl	801979e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	2201      	movs	r2, #1
 80175cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80175ce:	2380      	movs	r3, #128	@ 0x80
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	2202      	movs	r2, #2
 80175d6:	2101      	movs	r1, #1
 80175d8:	f002 f8e1 	bl	801979e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80175dc:	687a      	ldr	r2, [r7, #4]
 80175de:	23b6      	movs	r3, #182	@ 0xb6
 80175e0:	005b      	lsls	r3, r3, #1
 80175e2:	2101      	movs	r1, #1
 80175e4:	50d1      	str	r1, [r2, r3]
 80175e6:	e013      	b.n	8017610 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	2340      	movs	r3, #64	@ 0x40
 80175ec:	2202      	movs	r2, #2
 80175ee:	2181      	movs	r1, #129	@ 0x81
 80175f0:	f002 f8d5 	bl	801979e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	2201      	movs	r2, #1
 80175f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	2340      	movs	r3, #64	@ 0x40
 80175fe:	2202      	movs	r2, #2
 8017600:	2101      	movs	r1, #1
 8017602:	f002 f8cc 	bl	801979e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017606:	687a      	ldr	r2, [r7, #4]
 8017608:	23b6      	movs	r3, #182	@ 0xb6
 801760a:	005b      	lsls	r3, r3, #1
 801760c:	2101      	movs	r1, #1
 801760e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	2308      	movs	r3, #8
 8017614:	2203      	movs	r2, #3
 8017616:	2182      	movs	r1, #130	@ 0x82
 8017618:	f002 f8c1 	bl	801979e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2201      	movs	r2, #1
 8017620:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017622:	2387      	movs	r3, #135	@ 0x87
 8017624:	009b      	lsls	r3, r3, #2
 8017626:	0018      	movs	r0, r3
 8017628:	f002 fa52 	bl	8019ad0 <USBD_static_malloc>
 801762c:	0001      	movs	r1, r0
 801762e:	687a      	ldr	r2, [r7, #4]
 8017630:	23ae      	movs	r3, #174	@ 0xae
 8017632:	009b      	lsls	r3, r3, #2
 8017634:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	23ae      	movs	r3, #174	@ 0xae
 801763a:	009b      	lsls	r3, r3, #2
 801763c:	58d3      	ldr	r3, [r2, r3]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d104      	bne.n	801764c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8017642:	230f      	movs	r3, #15
 8017644:	18fb      	adds	r3, r7, r3
 8017646:	2201      	movs	r2, #1
 8017648:	701a      	strb	r2, [r3, #0]
 801764a:	e02c      	b.n	80176a6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801764c:	687a      	ldr	r2, [r7, #4]
 801764e:	23ae      	movs	r3, #174	@ 0xae
 8017650:	009b      	lsls	r3, r3, #2
 8017652:	58d3      	ldr	r3, [r2, r3]
 8017654:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8017656:	687a      	ldr	r2, [r7, #4]
 8017658:	23af      	movs	r3, #175	@ 0xaf
 801765a:	009b      	lsls	r3, r3, #2
 801765c:	58d3      	ldr	r3, [r2, r3]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8017662:	68ba      	ldr	r2, [r7, #8]
 8017664:	2385      	movs	r3, #133	@ 0x85
 8017666:	009b      	lsls	r3, r3, #2
 8017668:	2100      	movs	r1, #0
 801766a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801766c:	68ba      	ldr	r2, [r7, #8]
 801766e:	2386      	movs	r3, #134	@ 0x86
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	2100      	movs	r1, #0
 8017674:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	7c1b      	ldrb	r3, [r3, #16]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d10a      	bne.n	8017694 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801767e:	68ba      	ldr	r2, [r7, #8]
 8017680:	2381      	movs	r3, #129	@ 0x81
 8017682:	009b      	lsls	r3, r3, #2
 8017684:	58d2      	ldr	r2, [r2, r3]
 8017686:	2380      	movs	r3, #128	@ 0x80
 8017688:	009b      	lsls	r3, r3, #2
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	2101      	movs	r1, #1
 801768e:	f002 f9d1 	bl	8019a34 <USBD_LL_PrepareReceive>
 8017692:	e008      	b.n	80176a6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017694:	68ba      	ldr	r2, [r7, #8]
 8017696:	2381      	movs	r3, #129	@ 0x81
 8017698:	009b      	lsls	r3, r3, #2
 801769a:	58d2      	ldr	r2, [r2, r3]
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	2340      	movs	r3, #64	@ 0x40
 80176a0:	2101      	movs	r1, #1
 80176a2:	f002 f9c7 	bl	8019a34 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80176a6:	230f      	movs	r3, #15
 80176a8:	18fb      	adds	r3, r7, r3
 80176aa:	781b      	ldrb	r3, [r3, #0]
}
 80176ac:	0018      	movs	r0, r3
 80176ae:	46bd      	mov	sp, r7
 80176b0:	b004      	add	sp, #16
 80176b2:	bd80      	pop	{r7, pc}

080176b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b084      	sub	sp, #16
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	000a      	movs	r2, r1
 80176be:	1cfb      	adds	r3, r7, #3
 80176c0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80176c2:	230f      	movs	r3, #15
 80176c4:	18fb      	adds	r3, r7, r3
 80176c6:	2200      	movs	r2, #0
 80176c8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2181      	movs	r1, #129	@ 0x81
 80176ce:	0018      	movs	r0, r3
 80176d0:	f002 f89c 	bl	801980c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	2200      	movs	r2, #0
 80176d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	2101      	movs	r1, #1
 80176de:	0018      	movs	r0, r3
 80176e0:	f002 f894 	bl	801980c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80176e4:	687a      	ldr	r2, [r7, #4]
 80176e6:	23b6      	movs	r3, #182	@ 0xb6
 80176e8:	005b      	lsls	r3, r3, #1
 80176ea:	2100      	movs	r1, #0
 80176ec:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2182      	movs	r1, #130	@ 0x82
 80176f2:	0018      	movs	r0, r3
 80176f4:	f002 f88a 	bl	801980c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2200      	movs	r2, #0
 80176fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80176fe:	687a      	ldr	r2, [r7, #4]
 8017700:	23ae      	movs	r3, #174	@ 0xae
 8017702:	009b      	lsls	r3, r3, #2
 8017704:	58d3      	ldr	r3, [r2, r3]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d011      	beq.n	801772e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801770a:	687a      	ldr	r2, [r7, #4]
 801770c:	23af      	movs	r3, #175	@ 0xaf
 801770e:	009b      	lsls	r3, r3, #2
 8017710:	58d3      	ldr	r3, [r2, r3]
 8017712:	685b      	ldr	r3, [r3, #4]
 8017714:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8017716:	687a      	ldr	r2, [r7, #4]
 8017718:	23ae      	movs	r3, #174	@ 0xae
 801771a:	009b      	lsls	r3, r3, #2
 801771c:	58d3      	ldr	r3, [r2, r3]
 801771e:	0018      	movs	r0, r3
 8017720:	f002 f9e2 	bl	8019ae8 <USBD_static_free>
    pdev->pClassData = NULL;
 8017724:	687a      	ldr	r2, [r7, #4]
 8017726:	23ae      	movs	r3, #174	@ 0xae
 8017728:	009b      	lsls	r3, r3, #2
 801772a:	2100      	movs	r1, #0
 801772c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801772e:	230f      	movs	r3, #15
 8017730:	18fb      	adds	r3, r7, r3
 8017732:	781b      	ldrb	r3, [r3, #0]
}
 8017734:	0018      	movs	r0, r3
 8017736:	46bd      	mov	sp, r7
 8017738:	b004      	add	sp, #16
 801773a:	bd80      	pop	{r7, pc}

0801773c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b086      	sub	sp, #24
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	23ae      	movs	r3, #174	@ 0xae
 801774a:	009b      	lsls	r3, r3, #2
 801774c:	58d3      	ldr	r3, [r2, r3]
 801774e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8017750:	230f      	movs	r3, #15
 8017752:	18fb      	adds	r3, r7, r3
 8017754:	2200      	movs	r2, #0
 8017756:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8017758:	230c      	movs	r3, #12
 801775a:	18fb      	adds	r3, r7, r3
 801775c:	2200      	movs	r2, #0
 801775e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8017760:	2317      	movs	r3, #23
 8017762:	18fb      	adds	r3, r7, r3
 8017764:	2200      	movs	r2, #0
 8017766:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	781b      	ldrb	r3, [r3, #0]
 801776c:	001a      	movs	r2, r3
 801776e:	2360      	movs	r3, #96	@ 0x60
 8017770:	4013      	ands	r3, r2
 8017772:	d03d      	beq.n	80177f0 <USBD_CDC_Setup+0xb4>
 8017774:	2b20      	cmp	r3, #32
 8017776:	d000      	beq.n	801777a <USBD_CDC_Setup+0x3e>
 8017778:	e094      	b.n	80178a4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	88db      	ldrh	r3, [r3, #6]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d02b      	beq.n	80177da <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	b25b      	sxtb	r3, r3
 8017788:	2b00      	cmp	r3, #0
 801778a:	da12      	bge.n	80177b2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801778c:	687a      	ldr	r2, [r7, #4]
 801778e:	23af      	movs	r3, #175	@ 0xaf
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	58d3      	ldr	r3, [r2, r3]
 8017794:	689b      	ldr	r3, [r3, #8]
 8017796:	683a      	ldr	r2, [r7, #0]
 8017798:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801779a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801779c:	683a      	ldr	r2, [r7, #0]
 801779e:	88d2      	ldrh	r2, [r2, #6]
 80177a0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80177a2:	6939      	ldr	r1, [r7, #16]
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	88da      	ldrh	r2, [r3, #6]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	0018      	movs	r0, r3
 80177ac:	f001 fbaf 	bl	8018f0e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80177b0:	e083      	b.n	80178ba <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80177b2:	683b      	ldr	r3, [r7, #0]
 80177b4:	7859      	ldrb	r1, [r3, #1]
 80177b6:	693a      	ldr	r2, [r7, #16]
 80177b8:	2380      	movs	r3, #128	@ 0x80
 80177ba:	009b      	lsls	r3, r3, #2
 80177bc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	88db      	ldrh	r3, [r3, #6]
 80177c2:	b2d9      	uxtb	r1, r3
 80177c4:	693b      	ldr	r3, [r7, #16]
 80177c6:	4a40      	ldr	r2, [pc, #256]	@ (80178c8 <USBD_CDC_Setup+0x18c>)
 80177c8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80177ca:	6939      	ldr	r1, [r7, #16]
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	88da      	ldrh	r2, [r3, #6]
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	0018      	movs	r0, r3
 80177d4:	f001 fbce 	bl	8018f74 <USBD_CtlPrepareRx>
      break;
 80177d8:	e06f      	b.n	80178ba <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80177da:	687a      	ldr	r2, [r7, #4]
 80177dc:	23af      	movs	r3, #175	@ 0xaf
 80177de:	009b      	lsls	r3, r3, #2
 80177e0:	58d3      	ldr	r3, [r2, r3]
 80177e2:	689b      	ldr	r3, [r3, #8]
 80177e4:	683a      	ldr	r2, [r7, #0]
 80177e6:	7850      	ldrb	r0, [r2, #1]
 80177e8:	6839      	ldr	r1, [r7, #0]
 80177ea:	2200      	movs	r2, #0
 80177ec:	4798      	blx	r3
      break;
 80177ee:	e064      	b.n	80178ba <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	785b      	ldrb	r3, [r3, #1]
 80177f4:	2b0b      	cmp	r3, #11
 80177f6:	d037      	beq.n	8017868 <USBD_CDC_Setup+0x12c>
 80177f8:	dc47      	bgt.n	801788a <USBD_CDC_Setup+0x14e>
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d002      	beq.n	8017804 <USBD_CDC_Setup+0xc8>
 80177fe:	2b0a      	cmp	r3, #10
 8017800:	d019      	beq.n	8017836 <USBD_CDC_Setup+0xfa>
 8017802:	e042      	b.n	801788a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	23a7      	movs	r3, #167	@ 0xa7
 8017808:	009b      	lsls	r3, r3, #2
 801780a:	5cd3      	ldrb	r3, [r2, r3]
 801780c:	2b03      	cmp	r3, #3
 801780e:	d107      	bne.n	8017820 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8017810:	230c      	movs	r3, #12
 8017812:	18f9      	adds	r1, r7, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2202      	movs	r2, #2
 8017818:	0018      	movs	r0, r3
 801781a:	f001 fb78 	bl	8018f0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801781e:	e040      	b.n	80178a2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8017820:	683a      	ldr	r2, [r7, #0]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	0011      	movs	r1, r2
 8017826:	0018      	movs	r0, r3
 8017828:	f001 faf3 	bl	8018e12 <USBD_CtlError>
            ret = USBD_FAIL;
 801782c:	2317      	movs	r3, #23
 801782e:	18fb      	adds	r3, r7, r3
 8017830:	2202      	movs	r2, #2
 8017832:	701a      	strb	r2, [r3, #0]
          break;
 8017834:	e035      	b.n	80178a2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017836:	687a      	ldr	r2, [r7, #4]
 8017838:	23a7      	movs	r3, #167	@ 0xa7
 801783a:	009b      	lsls	r3, r3, #2
 801783c:	5cd3      	ldrb	r3, [r2, r3]
 801783e:	2b03      	cmp	r3, #3
 8017840:	d107      	bne.n	8017852 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8017842:	230f      	movs	r3, #15
 8017844:	18f9      	adds	r1, r7, r3
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	2201      	movs	r2, #1
 801784a:	0018      	movs	r0, r3
 801784c:	f001 fb5f 	bl	8018f0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017850:	e027      	b.n	80178a2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8017852:	683a      	ldr	r2, [r7, #0]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	0011      	movs	r1, r2
 8017858:	0018      	movs	r0, r3
 801785a:	f001 fada 	bl	8018e12 <USBD_CtlError>
            ret = USBD_FAIL;
 801785e:	2317      	movs	r3, #23
 8017860:	18fb      	adds	r3, r7, r3
 8017862:	2202      	movs	r2, #2
 8017864:	701a      	strb	r2, [r3, #0]
          break;
 8017866:	e01c      	b.n	80178a2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017868:	687a      	ldr	r2, [r7, #4]
 801786a:	23a7      	movs	r3, #167	@ 0xa7
 801786c:	009b      	lsls	r3, r3, #2
 801786e:	5cd3      	ldrb	r3, [r2, r3]
 8017870:	2b03      	cmp	r3, #3
 8017872:	d015      	beq.n	80178a0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8017874:	683a      	ldr	r2, [r7, #0]
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	0011      	movs	r1, r2
 801787a:	0018      	movs	r0, r3
 801787c:	f001 fac9 	bl	8018e12 <USBD_CtlError>
            ret = USBD_FAIL;
 8017880:	2317      	movs	r3, #23
 8017882:	18fb      	adds	r3, r7, r3
 8017884:	2202      	movs	r2, #2
 8017886:	701a      	strb	r2, [r3, #0]
          }
          break;
 8017888:	e00a      	b.n	80178a0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801788a:	683a      	ldr	r2, [r7, #0]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	0011      	movs	r1, r2
 8017890:	0018      	movs	r0, r3
 8017892:	f001 fabe 	bl	8018e12 <USBD_CtlError>
          ret = USBD_FAIL;
 8017896:	2317      	movs	r3, #23
 8017898:	18fb      	adds	r3, r7, r3
 801789a:	2202      	movs	r2, #2
 801789c:	701a      	strb	r2, [r3, #0]
          break;
 801789e:	e000      	b.n	80178a2 <USBD_CDC_Setup+0x166>
          break;
 80178a0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80178a2:	e00a      	b.n	80178ba <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80178a4:	683a      	ldr	r2, [r7, #0]
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	0011      	movs	r1, r2
 80178aa:	0018      	movs	r0, r3
 80178ac:	f001 fab1 	bl	8018e12 <USBD_CtlError>
      ret = USBD_FAIL;
 80178b0:	2317      	movs	r3, #23
 80178b2:	18fb      	adds	r3, r7, r3
 80178b4:	2202      	movs	r2, #2
 80178b6:	701a      	strb	r2, [r3, #0]
      break;
 80178b8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80178ba:	2317      	movs	r3, #23
 80178bc:	18fb      	adds	r3, r7, r3
 80178be:	781b      	ldrb	r3, [r3, #0]
}
 80178c0:	0018      	movs	r0, r3
 80178c2:	46bd      	mov	sp, r7
 80178c4:	b006      	add	sp, #24
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	00000201 	.word	0x00000201

080178cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b084      	sub	sp, #16
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	000a      	movs	r2, r1
 80178d6:	1cfb      	adds	r3, r7, #3
 80178d8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80178da:	687a      	ldr	r2, [r7, #4]
 80178dc:	23ae      	movs	r3, #174	@ 0xae
 80178de:	009b      	lsls	r3, r3, #2
 80178e0:	58d3      	ldr	r3, [r2, r3]
 80178e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80178e4:	687a      	ldr	r2, [r7, #4]
 80178e6:	23b0      	movs	r3, #176	@ 0xb0
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	58d3      	ldr	r3, [r2, r3]
 80178ec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80178ee:	687a      	ldr	r2, [r7, #4]
 80178f0:	23ae      	movs	r3, #174	@ 0xae
 80178f2:	009b      	lsls	r3, r3, #2
 80178f4:	58d3      	ldr	r3, [r2, r3]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d03e      	beq.n	8017978 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80178fa:	1cfb      	adds	r3, r7, #3
 80178fc:	781a      	ldrb	r2, [r3, #0]
 80178fe:	6879      	ldr	r1, [r7, #4]
 8017900:	0013      	movs	r3, r2
 8017902:	009b      	lsls	r3, r3, #2
 8017904:	189b      	adds	r3, r3, r2
 8017906:	009b      	lsls	r3, r3, #2
 8017908:	18cb      	adds	r3, r1, r3
 801790a:	331c      	adds	r3, #28
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d02b      	beq.n	801796a <USBD_CDC_DataIn+0x9e>
 8017912:	1cfb      	adds	r3, r7, #3
 8017914:	781a      	ldrb	r2, [r3, #0]
 8017916:	6879      	ldr	r1, [r7, #4]
 8017918:	0013      	movs	r3, r2
 801791a:	009b      	lsls	r3, r3, #2
 801791c:	189b      	adds	r3, r3, r2
 801791e:	009b      	lsls	r3, r3, #2
 8017920:	18cb      	adds	r3, r1, r3
 8017922:	331c      	adds	r3, #28
 8017924:	6818      	ldr	r0, [r3, #0]
 8017926:	1cfb      	adds	r3, r7, #3
 8017928:	781a      	ldrb	r2, [r3, #0]
 801792a:	68b9      	ldr	r1, [r7, #8]
 801792c:	0013      	movs	r3, r2
 801792e:	009b      	lsls	r3, r3, #2
 8017930:	189b      	adds	r3, r3, r2
 8017932:	00db      	lsls	r3, r3, #3
 8017934:	18cb      	adds	r3, r1, r3
 8017936:	3338      	adds	r3, #56	@ 0x38
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	0019      	movs	r1, r3
 801793c:	f7e8 fcb8 	bl	80002b0 <__aeabi_uidivmod>
 8017940:	1e0b      	subs	r3, r1, #0
 8017942:	d112      	bne.n	801796a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8017944:	1cfb      	adds	r3, r7, #3
 8017946:	781a      	ldrb	r2, [r3, #0]
 8017948:	6879      	ldr	r1, [r7, #4]
 801794a:	0013      	movs	r3, r2
 801794c:	009b      	lsls	r3, r3, #2
 801794e:	189b      	adds	r3, r3, r2
 8017950:	009b      	lsls	r3, r3, #2
 8017952:	18cb      	adds	r3, r1, r3
 8017954:	331c      	adds	r3, #28
 8017956:	2200      	movs	r2, #0
 8017958:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801795a:	1cfb      	adds	r3, r7, #3
 801795c:	7819      	ldrb	r1, [r3, #0]
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	2300      	movs	r3, #0
 8017962:	2200      	movs	r2, #0
 8017964:	f002 f82f 	bl	80199c6 <USBD_LL_Transmit>
 8017968:	e004      	b.n	8017974 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801796a:	68fa      	ldr	r2, [r7, #12]
 801796c:	2385      	movs	r3, #133	@ 0x85
 801796e:	009b      	lsls	r3, r3, #2
 8017970:	2100      	movs	r1, #0
 8017972:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8017974:	2300      	movs	r3, #0
 8017976:	e000      	b.n	801797a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8017978:	2302      	movs	r3, #2
  }
}
 801797a:	0018      	movs	r0, r3
 801797c:	46bd      	mov	sp, r7
 801797e:	b004      	add	sp, #16
 8017980:	bd80      	pop	{r7, pc}

08017982 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017982:	b580      	push	{r7, lr}
 8017984:	b084      	sub	sp, #16
 8017986:	af00      	add	r7, sp, #0
 8017988:	6078      	str	r0, [r7, #4]
 801798a:	000a      	movs	r2, r1
 801798c:	1cfb      	adds	r3, r7, #3
 801798e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017990:	687a      	ldr	r2, [r7, #4]
 8017992:	23ae      	movs	r3, #174	@ 0xae
 8017994:	009b      	lsls	r3, r3, #2
 8017996:	58d3      	ldr	r3, [r2, r3]
 8017998:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801799a:	1cfb      	adds	r3, r7, #3
 801799c:	781a      	ldrb	r2, [r3, #0]
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	0011      	movs	r1, r2
 80179a2:	0018      	movs	r0, r3
 80179a4:	f002 f87d 	bl	8019aa2 <USBD_LL_GetRxDataSize>
 80179a8:	0001      	movs	r1, r0
 80179aa:	68fa      	ldr	r2, [r7, #12]
 80179ac:	2383      	movs	r3, #131	@ 0x83
 80179ae:	009b      	lsls	r3, r3, #2
 80179b0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	23ae      	movs	r3, #174	@ 0xae
 80179b6:	009b      	lsls	r3, r3, #2
 80179b8:	58d3      	ldr	r3, [r2, r3]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d011      	beq.n	80179e2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80179be:	687a      	ldr	r2, [r7, #4]
 80179c0:	23af      	movs	r3, #175	@ 0xaf
 80179c2:	009b      	lsls	r3, r3, #2
 80179c4:	58d3      	ldr	r3, [r2, r3]
 80179c6:	68da      	ldr	r2, [r3, #12]
 80179c8:	68f9      	ldr	r1, [r7, #12]
 80179ca:	2381      	movs	r3, #129	@ 0x81
 80179cc:	009b      	lsls	r3, r3, #2
 80179ce:	58c8      	ldr	r0, [r1, r3]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	2183      	movs	r1, #131	@ 0x83
 80179d4:	0089      	lsls	r1, r1, #2
 80179d6:	468c      	mov	ip, r1
 80179d8:	4463      	add	r3, ip
 80179da:	0019      	movs	r1, r3
 80179dc:	4790      	blx	r2

    return USBD_OK;
 80179de:	2300      	movs	r3, #0
 80179e0:	e000      	b.n	80179e4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80179e2:	2302      	movs	r3, #2
  }
}
 80179e4:	0018      	movs	r0, r3
 80179e6:	46bd      	mov	sp, r7
 80179e8:	b004      	add	sp, #16
 80179ea:	bd80      	pop	{r7, pc}

080179ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80179ec:	b590      	push	{r4, r7, lr}
 80179ee:	b085      	sub	sp, #20
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80179f4:	687a      	ldr	r2, [r7, #4]
 80179f6:	23ae      	movs	r3, #174	@ 0xae
 80179f8:	009b      	lsls	r3, r3, #2
 80179fa:	58d3      	ldr	r3, [r2, r3]
 80179fc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	23af      	movs	r3, #175	@ 0xaf
 8017a02:	009b      	lsls	r3, r3, #2
 8017a04:	58d3      	ldr	r3, [r2, r3]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d018      	beq.n	8017a3c <USBD_CDC_EP0_RxReady+0x50>
 8017a0a:	68fa      	ldr	r2, [r7, #12]
 8017a0c:	2380      	movs	r3, #128	@ 0x80
 8017a0e:	009b      	lsls	r3, r3, #2
 8017a10:	5cd3      	ldrb	r3, [r2, r3]
 8017a12:	2bff      	cmp	r3, #255	@ 0xff
 8017a14:	d012      	beq.n	8017a3c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017a16:	687a      	ldr	r2, [r7, #4]
 8017a18:	23af      	movs	r3, #175	@ 0xaf
 8017a1a:	009b      	lsls	r3, r3, #2
 8017a1c:	58d3      	ldr	r3, [r2, r3]
 8017a1e:	689b      	ldr	r3, [r3, #8]
 8017a20:	68f9      	ldr	r1, [r7, #12]
 8017a22:	2280      	movs	r2, #128	@ 0x80
 8017a24:	0092      	lsls	r2, r2, #2
 8017a26:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8017a28:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8017a2a:	68fa      	ldr	r2, [r7, #12]
 8017a2c:	4c06      	ldr	r4, [pc, #24]	@ (8017a48 <USBD_CDC_EP0_RxReady+0x5c>)
 8017a2e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017a30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017a32:	68fa      	ldr	r2, [r7, #12]
 8017a34:	2380      	movs	r3, #128	@ 0x80
 8017a36:	009b      	lsls	r3, r3, #2
 8017a38:	21ff      	movs	r1, #255	@ 0xff
 8017a3a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8017a3c:	2300      	movs	r3, #0
}
 8017a3e:	0018      	movs	r0, r3
 8017a40:	46bd      	mov	sp, r7
 8017a42:	b005      	add	sp, #20
 8017a44:	bd90      	pop	{r4, r7, pc}
 8017a46:	46c0      	nop			@ (mov r8, r8)
 8017a48:	00000201 	.word	0x00000201

08017a4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2243      	movs	r2, #67	@ 0x43
 8017a58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8017a5a:	4b02      	ldr	r3, [pc, #8]	@ (8017a64 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8017a5c:	0018      	movs	r0, r3
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	b002      	add	sp, #8
 8017a62:	bd80      	pop	{r7, pc}
 8017a64:	20000168 	.word	0x20000168

08017a68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2243      	movs	r2, #67	@ 0x43
 8017a74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8017a76:	4b02      	ldr	r3, [pc, #8]	@ (8017a80 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8017a78:	0018      	movs	r0, r3
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	b002      	add	sp, #8
 8017a7e:	bd80      	pop	{r7, pc}
 8017a80:	20000124 	.word	0x20000124

08017a84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b082      	sub	sp, #8
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	2243      	movs	r2, #67	@ 0x43
 8017a90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8017a92:	4b02      	ldr	r3, [pc, #8]	@ (8017a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8017a94:	0018      	movs	r0, r3
 8017a96:	46bd      	mov	sp, r7
 8017a98:	b002      	add	sp, #8
 8017a9a:	bd80      	pop	{r7, pc}
 8017a9c:	200001ac 	.word	0x200001ac

08017aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	220a      	movs	r2, #10
 8017aac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8017aae:	4b02      	ldr	r3, [pc, #8]	@ (8017ab8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8017ab0:	0018      	movs	r0, r3
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	b002      	add	sp, #8
 8017ab6:	bd80      	pop	{r7, pc}
 8017ab8:	200000e0 	.word	0x200000e0

08017abc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b084      	sub	sp, #16
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8017ac6:	200f      	movs	r0, #15
 8017ac8:	183b      	adds	r3, r7, r0
 8017aca:	2202      	movs	r2, #2
 8017acc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d007      	beq.n	8017ae4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8017ad4:	687a      	ldr	r2, [r7, #4]
 8017ad6:	23af      	movs	r3, #175	@ 0xaf
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	6839      	ldr	r1, [r7, #0]
 8017adc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8017ade:	183b      	adds	r3, r7, r0
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8017ae4:	230f      	movs	r3, #15
 8017ae6:	18fb      	adds	r3, r7, r3
 8017ae8:	781b      	ldrb	r3, [r3, #0]
}
 8017aea:	0018      	movs	r0, r3
 8017aec:	46bd      	mov	sp, r7
 8017aee:	b004      	add	sp, #16
 8017af0:	bd80      	pop	{r7, pc}

08017af2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8017af2:	b580      	push	{r7, lr}
 8017af4:	b086      	sub	sp, #24
 8017af6:	af00      	add	r7, sp, #0
 8017af8:	60f8      	str	r0, [r7, #12]
 8017afa:	60b9      	str	r1, [r7, #8]
 8017afc:	1dbb      	adds	r3, r7, #6
 8017afe:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017b00:	68fa      	ldr	r2, [r7, #12]
 8017b02:	23ae      	movs	r3, #174	@ 0xae
 8017b04:	009b      	lsls	r3, r3, #2
 8017b06:	58d3      	ldr	r3, [r2, r3]
 8017b08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8017b0a:	697a      	ldr	r2, [r7, #20]
 8017b0c:	2382      	movs	r3, #130	@ 0x82
 8017b0e:	009b      	lsls	r3, r3, #2
 8017b10:	68b9      	ldr	r1, [r7, #8]
 8017b12:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8017b14:	1dbb      	adds	r3, r7, #6
 8017b16:	8819      	ldrh	r1, [r3, #0]
 8017b18:	697a      	ldr	r2, [r7, #20]
 8017b1a:	2384      	movs	r3, #132	@ 0x84
 8017b1c:	009b      	lsls	r3, r3, #2
 8017b1e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017b20:	2300      	movs	r3, #0
}
 8017b22:	0018      	movs	r0, r3
 8017b24:	46bd      	mov	sp, r7
 8017b26:	b006      	add	sp, #24
 8017b28:	bd80      	pop	{r7, pc}

08017b2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8017b2a:	b580      	push	{r7, lr}
 8017b2c:	b084      	sub	sp, #16
 8017b2e:	af00      	add	r7, sp, #0
 8017b30:	6078      	str	r0, [r7, #4]
 8017b32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	23ae      	movs	r3, #174	@ 0xae
 8017b38:	009b      	lsls	r3, r3, #2
 8017b3a:	58d3      	ldr	r3, [r2, r3]
 8017b3c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8017b3e:	68fa      	ldr	r2, [r7, #12]
 8017b40:	2381      	movs	r3, #129	@ 0x81
 8017b42:	009b      	lsls	r3, r3, #2
 8017b44:	6839      	ldr	r1, [r7, #0]
 8017b46:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017b48:	2300      	movs	r3, #0
}
 8017b4a:	0018      	movs	r0, r3
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	b004      	add	sp, #16
 8017b50:	bd80      	pop	{r7, pc}

08017b52 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8017b52:	b580      	push	{r7, lr}
 8017b54:	b084      	sub	sp, #16
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	23ae      	movs	r3, #174	@ 0xae
 8017b5e:	009b      	lsls	r3, r3, #2
 8017b60:	58d3      	ldr	r3, [r2, r3]
 8017b62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8017b64:	687a      	ldr	r2, [r7, #4]
 8017b66:	23ae      	movs	r3, #174	@ 0xae
 8017b68:	009b      	lsls	r3, r3, #2
 8017b6a:	58d3      	ldr	r3, [r2, r3]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d022      	beq.n	8017bb6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8017b70:	68fa      	ldr	r2, [r7, #12]
 8017b72:	2385      	movs	r3, #133	@ 0x85
 8017b74:	009b      	lsls	r3, r3, #2
 8017b76:	58d3      	ldr	r3, [r2, r3]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d11a      	bne.n	8017bb2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8017b7c:	68fa      	ldr	r2, [r7, #12]
 8017b7e:	2385      	movs	r3, #133	@ 0x85
 8017b80:	009b      	lsls	r3, r3, #2
 8017b82:	2101      	movs	r1, #1
 8017b84:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8017b86:	68fa      	ldr	r2, [r7, #12]
 8017b88:	2384      	movs	r3, #132	@ 0x84
 8017b8a:	009b      	lsls	r3, r3, #2
 8017b8c:	58d2      	ldr	r2, [r2, r3]
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017b92:	68fa      	ldr	r2, [r7, #12]
 8017b94:	2382      	movs	r3, #130	@ 0x82
 8017b96:	009b      	lsls	r3, r3, #2
 8017b98:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8017b9a:	68fa      	ldr	r2, [r7, #12]
 8017b9c:	2384      	movs	r3, #132	@ 0x84
 8017b9e:	009b      	lsls	r3, r3, #2
 8017ba0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017ba2:	b29b      	uxth	r3, r3
 8017ba4:	6878      	ldr	r0, [r7, #4]
 8017ba6:	000a      	movs	r2, r1
 8017ba8:	2181      	movs	r1, #129	@ 0x81
 8017baa:	f001 ff0c 	bl	80199c6 <USBD_LL_Transmit>

      return USBD_OK;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	e002      	b.n	8017bb8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	e000      	b.n	8017bb8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8017bb6:	2302      	movs	r3, #2
  }
}
 8017bb8:	0018      	movs	r0, r3
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	b004      	add	sp, #16
 8017bbe:	bd80      	pop	{r7, pc}

08017bc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017bc8:	687a      	ldr	r2, [r7, #4]
 8017bca:	23ae      	movs	r3, #174	@ 0xae
 8017bcc:	009b      	lsls	r3, r3, #2
 8017bce:	58d3      	ldr	r3, [r2, r3]
 8017bd0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8017bd2:	687a      	ldr	r2, [r7, #4]
 8017bd4:	23ae      	movs	r3, #174	@ 0xae
 8017bd6:	009b      	lsls	r3, r3, #2
 8017bd8:	58d3      	ldr	r3, [r2, r3]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d019      	beq.n	8017c12 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	7c1b      	ldrb	r3, [r3, #16]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d10a      	bne.n	8017bfc <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017be6:	68fa      	ldr	r2, [r7, #12]
 8017be8:	2381      	movs	r3, #129	@ 0x81
 8017bea:	009b      	lsls	r3, r3, #2
 8017bec:	58d2      	ldr	r2, [r2, r3]
 8017bee:	2380      	movs	r3, #128	@ 0x80
 8017bf0:	009b      	lsls	r3, r3, #2
 8017bf2:	6878      	ldr	r0, [r7, #4]
 8017bf4:	2101      	movs	r1, #1
 8017bf6:	f001 ff1d 	bl	8019a34 <USBD_LL_PrepareReceive>
 8017bfa:	e008      	b.n	8017c0e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017bfc:	68fa      	ldr	r2, [r7, #12]
 8017bfe:	2381      	movs	r3, #129	@ 0x81
 8017c00:	009b      	lsls	r3, r3, #2
 8017c02:	58d2      	ldr	r2, [r2, r3]
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	2340      	movs	r3, #64	@ 0x40
 8017c08:	2101      	movs	r1, #1
 8017c0a:	f001 ff13 	bl	8019a34 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	e000      	b.n	8017c14 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8017c12:	2302      	movs	r3, #2
  }
}
 8017c14:	0018      	movs	r0, r3
 8017c16:	46bd      	mov	sp, r7
 8017c18:	b004      	add	sp, #16
 8017c1a:	bd80      	pop	{r7, pc}

08017c1c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b084      	sub	sp, #16
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	60f8      	str	r0, [r7, #12]
 8017c24:	60b9      	str	r1, [r7, #8]
 8017c26:	1dfb      	adds	r3, r7, #7
 8017c28:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d101      	bne.n	8017c34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017c30:	2302      	movs	r3, #2
 8017c32:	e020      	b.n	8017c76 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8017c34:	68fa      	ldr	r2, [r7, #12]
 8017c36:	23ad      	movs	r3, #173	@ 0xad
 8017c38:	009b      	lsls	r3, r3, #2
 8017c3a:	58d3      	ldr	r3, [r2, r3]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d004      	beq.n	8017c4a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8017c40:	68fa      	ldr	r2, [r7, #12]
 8017c42:	23ad      	movs	r3, #173	@ 0xad
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	2100      	movs	r1, #0
 8017c48:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017c4a:	68bb      	ldr	r3, [r7, #8]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d004      	beq.n	8017c5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017c50:	68fa      	ldr	r2, [r7, #12]
 8017c52:	23ac      	movs	r3, #172	@ 0xac
 8017c54:	009b      	lsls	r3, r3, #2
 8017c56:	68b9      	ldr	r1, [r7, #8]
 8017c58:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017c5a:	68fa      	ldr	r2, [r7, #12]
 8017c5c:	23a7      	movs	r3, #167	@ 0xa7
 8017c5e:	009b      	lsls	r3, r3, #2
 8017c60:	2101      	movs	r1, #1
 8017c62:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	1dfa      	adds	r2, r7, #7
 8017c68:	7812      	ldrb	r2, [r2, #0]
 8017c6a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	0018      	movs	r0, r3
 8017c70:	f001 fd0c 	bl	801968c <USBD_LL_Init>

  return USBD_OK;
 8017c74:	2300      	movs	r3, #0
}
 8017c76:	0018      	movs	r0, r3
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	b004      	add	sp, #16
 8017c7c:	bd80      	pop	{r7, pc}

08017c7e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017c7e:	b580      	push	{r7, lr}
 8017c80:	b084      	sub	sp, #16
 8017c82:	af00      	add	r7, sp, #0
 8017c84:	6078      	str	r0, [r7, #4]
 8017c86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8017c88:	200f      	movs	r0, #15
 8017c8a:	183b      	adds	r3, r7, r0
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8017c90:	683b      	ldr	r3, [r7, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d008      	beq.n	8017ca8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8017c96:	687a      	ldr	r2, [r7, #4]
 8017c98:	23ad      	movs	r3, #173	@ 0xad
 8017c9a:	009b      	lsls	r3, r3, #2
 8017c9c:	6839      	ldr	r1, [r7, #0]
 8017c9e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8017ca0:	183b      	adds	r3, r7, r0
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	701a      	strb	r2, [r3, #0]
 8017ca6:	e003      	b.n	8017cb0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8017ca8:	230f      	movs	r3, #15
 8017caa:	18fb      	adds	r3, r7, r3
 8017cac:	2202      	movs	r2, #2
 8017cae:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8017cb0:	230f      	movs	r3, #15
 8017cb2:	18fb      	adds	r3, r7, r3
 8017cb4:	781b      	ldrb	r3, [r3, #0]
}
 8017cb6:	0018      	movs	r0, r3
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	b004      	add	sp, #16
 8017cbc:	bd80      	pop	{r7, pc}

08017cbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017cbe:	b580      	push	{r7, lr}
 8017cc0:	b082      	sub	sp, #8
 8017cc2:	af00      	add	r7, sp, #0
 8017cc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	0018      	movs	r0, r3
 8017cca:	f001 fd43 	bl	8019754 <USBD_LL_Start>

  return USBD_OK;
 8017cce:	2300      	movs	r3, #0
}
 8017cd0:	0018      	movs	r0, r3
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	b002      	add	sp, #8
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017ce0:	2300      	movs	r3, #0
}
 8017ce2:	0018      	movs	r0, r3
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	b002      	add	sp, #8
 8017ce8:	bd80      	pop	{r7, pc}

08017cea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017cea:	b590      	push	{r4, r7, lr}
 8017cec:	b085      	sub	sp, #20
 8017cee:	af00      	add	r7, sp, #0
 8017cf0:	6078      	str	r0, [r7, #4]
 8017cf2:	000a      	movs	r2, r1
 8017cf4:	1cfb      	adds	r3, r7, #3
 8017cf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017cf8:	240f      	movs	r4, #15
 8017cfa:	193b      	adds	r3, r7, r4
 8017cfc:	2202      	movs	r2, #2
 8017cfe:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8017d00:	687a      	ldr	r2, [r7, #4]
 8017d02:	23ad      	movs	r3, #173	@ 0xad
 8017d04:	009b      	lsls	r3, r3, #2
 8017d06:	58d3      	ldr	r3, [r2, r3]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d00e      	beq.n	8017d2a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8017d0c:	687a      	ldr	r2, [r7, #4]
 8017d0e:	23ad      	movs	r3, #173	@ 0xad
 8017d10:	009b      	lsls	r3, r3, #2
 8017d12:	58d3      	ldr	r3, [r2, r3]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	1cfa      	adds	r2, r7, #3
 8017d18:	7811      	ldrb	r1, [r2, #0]
 8017d1a:	687a      	ldr	r2, [r7, #4]
 8017d1c:	0010      	movs	r0, r2
 8017d1e:	4798      	blx	r3
 8017d20:	1e03      	subs	r3, r0, #0
 8017d22:	d102      	bne.n	8017d2a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8017d24:	193b      	adds	r3, r7, r4
 8017d26:	2200      	movs	r2, #0
 8017d28:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8017d2a:	230f      	movs	r3, #15
 8017d2c:	18fb      	adds	r3, r7, r3
 8017d2e:	781b      	ldrb	r3, [r3, #0]
}
 8017d30:	0018      	movs	r0, r3
 8017d32:	46bd      	mov	sp, r7
 8017d34:	b005      	add	sp, #20
 8017d36:	bd90      	pop	{r4, r7, pc}

08017d38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b082      	sub	sp, #8
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
 8017d40:	000a      	movs	r2, r1
 8017d42:	1cfb      	adds	r3, r7, #3
 8017d44:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8017d46:	687a      	ldr	r2, [r7, #4]
 8017d48:	23ad      	movs	r3, #173	@ 0xad
 8017d4a:	009b      	lsls	r3, r3, #2
 8017d4c:	58d3      	ldr	r3, [r2, r3]
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	1cfa      	adds	r2, r7, #3
 8017d52:	7811      	ldrb	r1, [r2, #0]
 8017d54:	687a      	ldr	r2, [r7, #4]
 8017d56:	0010      	movs	r0, r2
 8017d58:	4798      	blx	r3

  return USBD_OK;
 8017d5a:	2300      	movs	r3, #0
}
 8017d5c:	0018      	movs	r0, r3
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	b002      	add	sp, #8
 8017d62:	bd80      	pop	{r7, pc}

08017d64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
 8017d6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	22aa      	movs	r2, #170	@ 0xaa
 8017d72:	0092      	lsls	r2, r2, #2
 8017d74:	4694      	mov	ip, r2
 8017d76:	4463      	add	r3, ip
 8017d78:	683a      	ldr	r2, [r7, #0]
 8017d7a:	0011      	movs	r1, r2
 8017d7c:	0018      	movs	r0, r3
 8017d7e:	f001 f810 	bl	8018da2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	23a5      	movs	r3, #165	@ 0xa5
 8017d86:	009b      	lsls	r3, r3, #2
 8017d88:	2101      	movs	r1, #1
 8017d8a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	4a23      	ldr	r2, [pc, #140]	@ (8017e1c <USBD_LL_SetupStage+0xb8>)
 8017d90:	5a9b      	ldrh	r3, [r3, r2]
 8017d92:	0019      	movs	r1, r3
 8017d94:	687a      	ldr	r2, [r7, #4]
 8017d96:	23a6      	movs	r3, #166	@ 0xa6
 8017d98:	009b      	lsls	r3, r3, #2
 8017d9a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8017d9c:	687a      	ldr	r2, [r7, #4]
 8017d9e:	23aa      	movs	r3, #170	@ 0xaa
 8017da0:	009b      	lsls	r3, r3, #2
 8017da2:	5cd3      	ldrb	r3, [r2, r3]
 8017da4:	001a      	movs	r2, r3
 8017da6:	231f      	movs	r3, #31
 8017da8:	4013      	ands	r3, r2
 8017daa:	2b02      	cmp	r3, #2
 8017dac:	d019      	beq.n	8017de2 <USBD_LL_SetupStage+0x7e>
 8017dae:	d822      	bhi.n	8017df6 <USBD_LL_SetupStage+0x92>
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d002      	beq.n	8017dba <USBD_LL_SetupStage+0x56>
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	d00a      	beq.n	8017dce <USBD_LL_SetupStage+0x6a>
 8017db8:	e01d      	b.n	8017df6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	22aa      	movs	r2, #170	@ 0xaa
 8017dbe:	0092      	lsls	r2, r2, #2
 8017dc0:	189a      	adds	r2, r3, r2
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	0011      	movs	r1, r2
 8017dc6:	0018      	movs	r0, r3
 8017dc8:	f000 fa10 	bl	80181ec <USBD_StdDevReq>
      break;
 8017dcc:	e020      	b.n	8017e10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	22aa      	movs	r2, #170	@ 0xaa
 8017dd2:	0092      	lsls	r2, r2, #2
 8017dd4:	189a      	adds	r2, r3, r2
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	0011      	movs	r1, r2
 8017dda:	0018      	movs	r0, r3
 8017ddc:	f000 fa78 	bl	80182d0 <USBD_StdItfReq>
      break;
 8017de0:	e016      	b.n	8017e10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	22aa      	movs	r2, #170	@ 0xaa
 8017de6:	0092      	lsls	r2, r2, #2
 8017de8:	189a      	adds	r2, r3, r2
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	0011      	movs	r1, r2
 8017dee:	0018      	movs	r0, r3
 8017df0:	f000 fac5 	bl	801837e <USBD_StdEPReq>
      break;
 8017df4:	e00c      	b.n	8017e10 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017df6:	687a      	ldr	r2, [r7, #4]
 8017df8:	23aa      	movs	r3, #170	@ 0xaa
 8017dfa:	009b      	lsls	r3, r3, #2
 8017dfc:	5cd3      	ldrb	r3, [r2, r3]
 8017dfe:	227f      	movs	r2, #127	@ 0x7f
 8017e00:	4393      	bics	r3, r2
 8017e02:	b2da      	uxtb	r2, r3
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	0011      	movs	r1, r2
 8017e08:	0018      	movs	r0, r3
 8017e0a:	f001 fd2a 	bl	8019862 <USBD_LL_StallEP>
      break;
 8017e0e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8017e10:	2300      	movs	r3, #0
}
 8017e12:	0018      	movs	r0, r3
 8017e14:	46bd      	mov	sp, r7
 8017e16:	b002      	add	sp, #8
 8017e18:	bd80      	pop	{r7, pc}
 8017e1a:	46c0      	nop			@ (mov r8, r8)
 8017e1c:	000002ae 	.word	0x000002ae

08017e20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b086      	sub	sp, #24
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	60f8      	str	r0, [r7, #12]
 8017e28:	607a      	str	r2, [r7, #4]
 8017e2a:	200b      	movs	r0, #11
 8017e2c:	183b      	adds	r3, r7, r0
 8017e2e:	1c0a      	adds	r2, r1, #0
 8017e30:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017e32:	183b      	adds	r3, r7, r0
 8017e34:	781b      	ldrb	r3, [r3, #0]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d154      	bne.n	8017ee4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	3355      	adds	r3, #85	@ 0x55
 8017e3e:	33ff      	adds	r3, #255	@ 0xff
 8017e40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017e42:	68fa      	ldr	r2, [r7, #12]
 8017e44:	23a5      	movs	r3, #165	@ 0xa5
 8017e46:	009b      	lsls	r3, r3, #2
 8017e48:	58d3      	ldr	r3, [r2, r3]
 8017e4a:	2b03      	cmp	r3, #3
 8017e4c:	d139      	bne.n	8017ec2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	68da      	ldr	r2, [r3, #12]
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	691b      	ldr	r3, [r3, #16]
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d919      	bls.n	8017e8e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	68da      	ldr	r2, [r3, #12]
 8017e5e:	697b      	ldr	r3, [r7, #20]
 8017e60:	691b      	ldr	r3, [r3, #16]
 8017e62:	1ad2      	subs	r2, r2, r3
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	68da      	ldr	r2, [r3, #12]
 8017e6c:	697b      	ldr	r3, [r7, #20]
 8017e6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8017e70:	429a      	cmp	r2, r3
 8017e72:	d203      	bcs.n	8017e7c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8017e78:	b29b      	uxth	r3, r3
 8017e7a:	e002      	b.n	8017e82 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017e7c:	697b      	ldr	r3, [r7, #20]
 8017e7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8017e80:	b29b      	uxth	r3, r3
 8017e82:	6879      	ldr	r1, [r7, #4]
 8017e84:	68f8      	ldr	r0, [r7, #12]
 8017e86:	001a      	movs	r2, r3
 8017e88:	f001 f898 	bl	8018fbc <USBD_CtlContinueRx>
 8017e8c:	e045      	b.n	8017f1a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017e8e:	68fa      	ldr	r2, [r7, #12]
 8017e90:	23ad      	movs	r3, #173	@ 0xad
 8017e92:	009b      	lsls	r3, r3, #2
 8017e94:	58d3      	ldr	r3, [r2, r3]
 8017e96:	691b      	ldr	r3, [r3, #16]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d00d      	beq.n	8017eb8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017e9c:	68fa      	ldr	r2, [r7, #12]
 8017e9e:	23a7      	movs	r3, #167	@ 0xa7
 8017ea0:	009b      	lsls	r3, r3, #2
 8017ea2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017ea4:	2b03      	cmp	r3, #3
 8017ea6:	d107      	bne.n	8017eb8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8017ea8:	68fa      	ldr	r2, [r7, #12]
 8017eaa:	23ad      	movs	r3, #173	@ 0xad
 8017eac:	009b      	lsls	r3, r3, #2
 8017eae:	58d3      	ldr	r3, [r2, r3]
 8017eb0:	691b      	ldr	r3, [r3, #16]
 8017eb2:	68fa      	ldr	r2, [r7, #12]
 8017eb4:	0010      	movs	r0, r2
 8017eb6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	0018      	movs	r0, r3
 8017ebc:	f001 f891 	bl	8018fe2 <USBD_CtlSendStatus>
 8017ec0:	e02b      	b.n	8017f1a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8017ec2:	68fa      	ldr	r2, [r7, #12]
 8017ec4:	23a5      	movs	r3, #165	@ 0xa5
 8017ec6:	009b      	lsls	r3, r3, #2
 8017ec8:	58d3      	ldr	r3, [r2, r3]
 8017eca:	2b05      	cmp	r3, #5
 8017ecc:	d125      	bne.n	8017f1a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8017ece:	68fa      	ldr	r2, [r7, #12]
 8017ed0:	23a5      	movs	r3, #165	@ 0xa5
 8017ed2:	009b      	lsls	r3, r3, #2
 8017ed4:	2100      	movs	r1, #0
 8017ed6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	2100      	movs	r1, #0
 8017edc:	0018      	movs	r0, r3
 8017ede:	f001 fcc0 	bl	8019862 <USBD_LL_StallEP>
 8017ee2:	e01a      	b.n	8017f1a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8017ee4:	68fa      	ldr	r2, [r7, #12]
 8017ee6:	23ad      	movs	r3, #173	@ 0xad
 8017ee8:	009b      	lsls	r3, r3, #2
 8017eea:	58d3      	ldr	r3, [r2, r3]
 8017eec:	699b      	ldr	r3, [r3, #24]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d011      	beq.n	8017f16 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017ef2:	68fa      	ldr	r2, [r7, #12]
 8017ef4:	23a7      	movs	r3, #167	@ 0xa7
 8017ef6:	009b      	lsls	r3, r3, #2
 8017ef8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8017efa:	2b03      	cmp	r3, #3
 8017efc:	d10b      	bne.n	8017f16 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8017efe:	68fa      	ldr	r2, [r7, #12]
 8017f00:	23ad      	movs	r3, #173	@ 0xad
 8017f02:	009b      	lsls	r3, r3, #2
 8017f04:	58d3      	ldr	r3, [r2, r3]
 8017f06:	699b      	ldr	r3, [r3, #24]
 8017f08:	220b      	movs	r2, #11
 8017f0a:	18ba      	adds	r2, r7, r2
 8017f0c:	7811      	ldrb	r1, [r2, #0]
 8017f0e:	68fa      	ldr	r2, [r7, #12]
 8017f10:	0010      	movs	r0, r2
 8017f12:	4798      	blx	r3
 8017f14:	e001      	b.n	8017f1a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017f16:	2302      	movs	r3, #2
 8017f18:	e000      	b.n	8017f1c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8017f1a:	2300      	movs	r3, #0
}
 8017f1c:	0018      	movs	r0, r3
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	b006      	add	sp, #24
 8017f22:	bd80      	pop	{r7, pc}

08017f24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	60f8      	str	r0, [r7, #12]
 8017f2c:	607a      	str	r2, [r7, #4]
 8017f2e:	200b      	movs	r0, #11
 8017f30:	183b      	adds	r3, r7, r0
 8017f32:	1c0a      	adds	r2, r1, #0
 8017f34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017f36:	183b      	adds	r3, r7, r0
 8017f38:	781b      	ldrb	r3, [r3, #0]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d000      	beq.n	8017f40 <USBD_LL_DataInStage+0x1c>
 8017f3e:	e08e      	b.n	801805e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	3314      	adds	r3, #20
 8017f44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017f46:	68fa      	ldr	r2, [r7, #12]
 8017f48:	23a5      	movs	r3, #165	@ 0xa5
 8017f4a:	009b      	lsls	r3, r3, #2
 8017f4c:	58d3      	ldr	r3, [r2, r3]
 8017f4e:	2b02      	cmp	r3, #2
 8017f50:	d164      	bne.n	801801c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8017f52:	697b      	ldr	r3, [r7, #20]
 8017f54:	68da      	ldr	r2, [r3, #12]
 8017f56:	697b      	ldr	r3, [r7, #20]
 8017f58:	691b      	ldr	r3, [r3, #16]
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d915      	bls.n	8017f8a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	68da      	ldr	r2, [r3, #12]
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	691b      	ldr	r3, [r3, #16]
 8017f66:	1ad2      	subs	r2, r2, r3
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	68db      	ldr	r3, [r3, #12]
 8017f70:	b29a      	uxth	r2, r3
 8017f72:	6879      	ldr	r1, [r7, #4]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	0018      	movs	r0, r3
 8017f78:	f000 ffe9 	bl	8018f4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f7c:	68f8      	ldr	r0, [r7, #12]
 8017f7e:	2300      	movs	r3, #0
 8017f80:	2200      	movs	r2, #0
 8017f82:	2100      	movs	r1, #0
 8017f84:	f001 fd56 	bl	8019a34 <USBD_LL_PrepareReceive>
 8017f88:	e059      	b.n	801803e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8017f8a:	697b      	ldr	r3, [r7, #20]
 8017f8c:	689a      	ldr	r2, [r3, #8]
 8017f8e:	697b      	ldr	r3, [r7, #20]
 8017f90:	691b      	ldr	r3, [r3, #16]
 8017f92:	0019      	movs	r1, r3
 8017f94:	0010      	movs	r0, r2
 8017f96:	f7e8 f98b 	bl	80002b0 <__aeabi_uidivmod>
 8017f9a:	1e0b      	subs	r3, r1, #0
 8017f9c:	d11f      	bne.n	8017fde <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8017f9e:	697b      	ldr	r3, [r7, #20]
 8017fa0:	689a      	ldr	r2, [r3, #8]
 8017fa2:	697b      	ldr	r3, [r7, #20]
 8017fa4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d319      	bcc.n	8017fde <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	689a      	ldr	r2, [r3, #8]
 8017fae:	68f9      	ldr	r1, [r7, #12]
 8017fb0:	23a6      	movs	r3, #166	@ 0xa6
 8017fb2:	009b      	lsls	r3, r3, #2
 8017fb4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d211      	bcs.n	8017fde <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	2100      	movs	r1, #0
 8017fc0:	0018      	movs	r0, r3
 8017fc2:	f000 ffc4 	bl	8018f4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017fc6:	68fa      	ldr	r2, [r7, #12]
 8017fc8:	23a6      	movs	r3, #166	@ 0xa6
 8017fca:	009b      	lsls	r3, r3, #2
 8017fcc:	2100      	movs	r1, #0
 8017fce:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017fd0:	68f8      	ldr	r0, [r7, #12]
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	2100      	movs	r1, #0
 8017fd8:	f001 fd2c 	bl	8019a34 <USBD_LL_PrepareReceive>
 8017fdc:	e02f      	b.n	801803e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8017fde:	68fa      	ldr	r2, [r7, #12]
 8017fe0:	23ad      	movs	r3, #173	@ 0xad
 8017fe2:	009b      	lsls	r3, r3, #2
 8017fe4:	58d3      	ldr	r3, [r2, r3]
 8017fe6:	68db      	ldr	r3, [r3, #12]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d00d      	beq.n	8018008 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017fec:	68fa      	ldr	r2, [r7, #12]
 8017fee:	23a7      	movs	r3, #167	@ 0xa7
 8017ff0:	009b      	lsls	r3, r3, #2
 8017ff2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8017ff4:	2b03      	cmp	r3, #3
 8017ff6:	d107      	bne.n	8018008 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8017ff8:	68fa      	ldr	r2, [r7, #12]
 8017ffa:	23ad      	movs	r3, #173	@ 0xad
 8017ffc:	009b      	lsls	r3, r3, #2
 8017ffe:	58d3      	ldr	r3, [r2, r3]
 8018000:	68db      	ldr	r3, [r3, #12]
 8018002:	68fa      	ldr	r2, [r7, #12]
 8018004:	0010      	movs	r0, r2
 8018006:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	2180      	movs	r1, #128	@ 0x80
 801800c:	0018      	movs	r0, r3
 801800e:	f001 fc28 	bl	8019862 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	0018      	movs	r0, r3
 8018016:	f000 fff8 	bl	801900a <USBD_CtlReceiveStatus>
 801801a:	e010      	b.n	801803e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801801c:	68fa      	ldr	r2, [r7, #12]
 801801e:	23a5      	movs	r3, #165	@ 0xa5
 8018020:	009b      	lsls	r3, r3, #2
 8018022:	58d3      	ldr	r3, [r2, r3]
 8018024:	2b04      	cmp	r3, #4
 8018026:	d005      	beq.n	8018034 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8018028:	68fa      	ldr	r2, [r7, #12]
 801802a:	23a5      	movs	r3, #165	@ 0xa5
 801802c:	009b      	lsls	r3, r3, #2
 801802e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8018030:	2b00      	cmp	r3, #0
 8018032:	d104      	bne.n	801803e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	2180      	movs	r1, #128	@ 0x80
 8018038:	0018      	movs	r0, r3
 801803a:	f001 fc12 	bl	8019862 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801803e:	68fa      	ldr	r2, [r7, #12]
 8018040:	23a8      	movs	r3, #168	@ 0xa8
 8018042:	009b      	lsls	r3, r3, #2
 8018044:	5cd3      	ldrb	r3, [r2, r3]
 8018046:	2b01      	cmp	r3, #1
 8018048:	d124      	bne.n	8018094 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	0018      	movs	r0, r3
 801804e:	f7ff fe43 	bl	8017cd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018052:	68fa      	ldr	r2, [r7, #12]
 8018054:	23a8      	movs	r3, #168	@ 0xa8
 8018056:	009b      	lsls	r3, r3, #2
 8018058:	2100      	movs	r1, #0
 801805a:	54d1      	strb	r1, [r2, r3]
 801805c:	e01a      	b.n	8018094 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801805e:	68fa      	ldr	r2, [r7, #12]
 8018060:	23ad      	movs	r3, #173	@ 0xad
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	58d3      	ldr	r3, [r2, r3]
 8018066:	695b      	ldr	r3, [r3, #20]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d011      	beq.n	8018090 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801806c:	68fa      	ldr	r2, [r7, #12]
 801806e:	23a7      	movs	r3, #167	@ 0xa7
 8018070:	009b      	lsls	r3, r3, #2
 8018072:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8018074:	2b03      	cmp	r3, #3
 8018076:	d10b      	bne.n	8018090 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8018078:	68fa      	ldr	r2, [r7, #12]
 801807a:	23ad      	movs	r3, #173	@ 0xad
 801807c:	009b      	lsls	r3, r3, #2
 801807e:	58d3      	ldr	r3, [r2, r3]
 8018080:	695b      	ldr	r3, [r3, #20]
 8018082:	220b      	movs	r2, #11
 8018084:	18ba      	adds	r2, r7, r2
 8018086:	7811      	ldrb	r1, [r2, #0]
 8018088:	68fa      	ldr	r2, [r7, #12]
 801808a:	0010      	movs	r0, r2
 801808c:	4798      	blx	r3
 801808e:	e001      	b.n	8018094 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8018090:	2302      	movs	r3, #2
 8018092:	e000      	b.n	8018096 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8018094:	2300      	movs	r3, #0
}
 8018096:	0018      	movs	r0, r3
 8018098:	46bd      	mov	sp, r7
 801809a:	b006      	add	sp, #24
 801809c:	bd80      	pop	{r7, pc}

0801809e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801809e:	b580      	push	{r7, lr}
 80180a0:	b082      	sub	sp, #8
 80180a2:	af00      	add	r7, sp, #0
 80180a4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180a6:	6878      	ldr	r0, [r7, #4]
 80180a8:	2340      	movs	r3, #64	@ 0x40
 80180aa:	2200      	movs	r2, #0
 80180ac:	2100      	movs	r1, #0
 80180ae:	f001 fb76 	bl	801979e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80180b2:	687a      	ldr	r2, [r7, #4]
 80180b4:	23ac      	movs	r3, #172	@ 0xac
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	2101      	movs	r1, #1
 80180ba:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80180bc:	687a      	ldr	r2, [r7, #4]
 80180be:	23b2      	movs	r3, #178	@ 0xb2
 80180c0:	005b      	lsls	r3, r3, #1
 80180c2:	2140      	movs	r1, #64	@ 0x40
 80180c4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180c6:	6878      	ldr	r0, [r7, #4]
 80180c8:	2340      	movs	r3, #64	@ 0x40
 80180ca:	2200      	movs	r2, #0
 80180cc:	2180      	movs	r1, #128	@ 0x80
 80180ce:	f001 fb66 	bl	801979e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2201      	movs	r2, #1
 80180d6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2240      	movs	r2, #64	@ 0x40
 80180dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80180de:	687a      	ldr	r2, [r7, #4]
 80180e0:	23a7      	movs	r3, #167	@ 0xa7
 80180e2:	009b      	lsls	r3, r3, #2
 80180e4:	2101      	movs	r1, #1
 80180e6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80180e8:	687a      	ldr	r2, [r7, #4]
 80180ea:	23a5      	movs	r3, #165	@ 0xa5
 80180ec:	009b      	lsls	r3, r3, #2
 80180ee:	2100      	movs	r1, #0
 80180f0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	2200      	movs	r2, #0
 80180f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80180f8:	687a      	ldr	r2, [r7, #4]
 80180fa:	23a9      	movs	r3, #169	@ 0xa9
 80180fc:	009b      	lsls	r3, r3, #2
 80180fe:	2100      	movs	r1, #0
 8018100:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8018102:	687a      	ldr	r2, [r7, #4]
 8018104:	23ae      	movs	r3, #174	@ 0xae
 8018106:	009b      	lsls	r3, r3, #2
 8018108:	58d3      	ldr	r3, [r2, r3]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d00a      	beq.n	8018124 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801810e:	687a      	ldr	r2, [r7, #4]
 8018110:	23ad      	movs	r3, #173	@ 0xad
 8018112:	009b      	lsls	r3, r3, #2
 8018114:	58d3      	ldr	r3, [r2, r3]
 8018116:	685a      	ldr	r2, [r3, #4]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	b2d9      	uxtb	r1, r3
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	0018      	movs	r0, r3
 8018122:	4790      	blx	r2
  }

  return USBD_OK;
 8018124:	2300      	movs	r3, #0
}
 8018126:	0018      	movs	r0, r3
 8018128:	46bd      	mov	sp, r7
 801812a:	b002      	add	sp, #8
 801812c:	bd80      	pop	{r7, pc}

0801812e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801812e:	b580      	push	{r7, lr}
 8018130:	b082      	sub	sp, #8
 8018132:	af00      	add	r7, sp, #0
 8018134:	6078      	str	r0, [r7, #4]
 8018136:	000a      	movs	r2, r1
 8018138:	1cfb      	adds	r3, r7, #3
 801813a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	1cfa      	adds	r2, r7, #3
 8018140:	7812      	ldrb	r2, [r2, #0]
 8018142:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018144:	2300      	movs	r3, #0
}
 8018146:	0018      	movs	r0, r3
 8018148:	46bd      	mov	sp, r7
 801814a:	b002      	add	sp, #8
 801814c:	bd80      	pop	{r7, pc}
	...

08018150 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b082      	sub	sp, #8
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8018158:	687a      	ldr	r2, [r7, #4]
 801815a:	23a7      	movs	r3, #167	@ 0xa7
 801815c:	009b      	lsls	r3, r3, #2
 801815e:	5cd1      	ldrb	r1, [r2, r3]
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	4a06      	ldr	r2, [pc, #24]	@ (801817c <USBD_LL_Suspend+0x2c>)
 8018164:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8018166:	687a      	ldr	r2, [r7, #4]
 8018168:	23a7      	movs	r3, #167	@ 0xa7
 801816a:	009b      	lsls	r3, r3, #2
 801816c:	2104      	movs	r1, #4
 801816e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8018170:	2300      	movs	r3, #0
}
 8018172:	0018      	movs	r0, r3
 8018174:	46bd      	mov	sp, r7
 8018176:	b002      	add	sp, #8
 8018178:	bd80      	pop	{r7, pc}
 801817a:	46c0      	nop			@ (mov r8, r8)
 801817c:	0000029d 	.word	0x0000029d

08018180 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018188:	687a      	ldr	r2, [r7, #4]
 801818a:	23a7      	movs	r3, #167	@ 0xa7
 801818c:	009b      	lsls	r3, r3, #2
 801818e:	5cd3      	ldrb	r3, [r2, r3]
 8018190:	2b04      	cmp	r3, #4
 8018192:	d106      	bne.n	80181a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	4a05      	ldr	r2, [pc, #20]	@ (80181ac <USBD_LL_Resume+0x2c>)
 8018198:	5c99      	ldrb	r1, [r3, r2]
 801819a:	687a      	ldr	r2, [r7, #4]
 801819c:	23a7      	movs	r3, #167	@ 0xa7
 801819e:	009b      	lsls	r3, r3, #2
 80181a0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80181a2:	2300      	movs	r3, #0
}
 80181a4:	0018      	movs	r0, r3
 80181a6:	46bd      	mov	sp, r7
 80181a8:	b002      	add	sp, #8
 80181aa:	bd80      	pop	{r7, pc}
 80181ac:	0000029d 	.word	0x0000029d

080181b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b082      	sub	sp, #8
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181b8:	687a      	ldr	r2, [r7, #4]
 80181ba:	23a7      	movs	r3, #167	@ 0xa7
 80181bc:	009b      	lsls	r3, r3, #2
 80181be:	5cd3      	ldrb	r3, [r2, r3]
 80181c0:	2b03      	cmp	r3, #3
 80181c2:	d10e      	bne.n	80181e2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80181c4:	687a      	ldr	r2, [r7, #4]
 80181c6:	23ad      	movs	r3, #173	@ 0xad
 80181c8:	009b      	lsls	r3, r3, #2
 80181ca:	58d3      	ldr	r3, [r2, r3]
 80181cc:	69db      	ldr	r3, [r3, #28]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d007      	beq.n	80181e2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	23ad      	movs	r3, #173	@ 0xad
 80181d6:	009b      	lsls	r3, r3, #2
 80181d8:	58d3      	ldr	r3, [r2, r3]
 80181da:	69db      	ldr	r3, [r3, #28]
 80181dc:	687a      	ldr	r2, [r7, #4]
 80181de:	0010      	movs	r0, r2
 80181e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80181e2:	2300      	movs	r3, #0
}
 80181e4:	0018      	movs	r0, r3
 80181e6:	46bd      	mov	sp, r7
 80181e8:	b002      	add	sp, #8
 80181ea:	bd80      	pop	{r7, pc}

080181ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b084      	sub	sp, #16
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
 80181f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80181f6:	230f      	movs	r3, #15
 80181f8:	18fb      	adds	r3, r7, r3
 80181fa:	2200      	movs	r2, #0
 80181fc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	781b      	ldrb	r3, [r3, #0]
 8018202:	001a      	movs	r2, r3
 8018204:	2360      	movs	r3, #96	@ 0x60
 8018206:	4013      	ands	r3, r2
 8018208:	2b40      	cmp	r3, #64	@ 0x40
 801820a:	d004      	beq.n	8018216 <USBD_StdDevReq+0x2a>
 801820c:	d84f      	bhi.n	80182ae <USBD_StdDevReq+0xc2>
 801820e:	2b00      	cmp	r3, #0
 8018210:	d00b      	beq.n	801822a <USBD_StdDevReq+0x3e>
 8018212:	2b20      	cmp	r3, #32
 8018214:	d14b      	bne.n	80182ae <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8018216:	687a      	ldr	r2, [r7, #4]
 8018218:	23ad      	movs	r3, #173	@ 0xad
 801821a:	009b      	lsls	r3, r3, #2
 801821c:	58d3      	ldr	r3, [r2, r3]
 801821e:	689b      	ldr	r3, [r3, #8]
 8018220:	6839      	ldr	r1, [r7, #0]
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	0010      	movs	r0, r2
 8018226:	4798      	blx	r3
      break;
 8018228:	e048      	b.n	80182bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	785b      	ldrb	r3, [r3, #1]
 801822e:	2b09      	cmp	r3, #9
 8018230:	d835      	bhi.n	801829e <USBD_StdDevReq+0xb2>
 8018232:	009a      	lsls	r2, r3, #2
 8018234:	4b25      	ldr	r3, [pc, #148]	@ (80182cc <USBD_StdDevReq+0xe0>)
 8018236:	18d3      	adds	r3, r2, r3
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801823c:	683a      	ldr	r2, [r7, #0]
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	0011      	movs	r1, r2
 8018242:	0018      	movs	r0, r3
 8018244:	f000 fa52 	bl	80186ec <USBD_GetDescriptor>
          break;
 8018248:	e030      	b.n	80182ac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801824a:	683a      	ldr	r2, [r7, #0]
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	0011      	movs	r1, r2
 8018250:	0018      	movs	r0, r3
 8018252:	f000 fbfd 	bl	8018a50 <USBD_SetAddress>
          break;
 8018256:	e029      	b.n	80182ac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8018258:	683a      	ldr	r2, [r7, #0]
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	0011      	movs	r1, r2
 801825e:	0018      	movs	r0, r3
 8018260:	f000 fc4a 	bl	8018af8 <USBD_SetConfig>
          break;
 8018264:	e022      	b.n	80182ac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018266:	683a      	ldr	r2, [r7, #0]
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	0011      	movs	r1, r2
 801826c:	0018      	movs	r0, r3
 801826e:	f000 fce7 	bl	8018c40 <USBD_GetConfig>
          break;
 8018272:	e01b      	b.n	80182ac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018274:	683a      	ldr	r2, [r7, #0]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	0011      	movs	r1, r2
 801827a:	0018      	movs	r0, r3
 801827c:	f000 fd1b 	bl	8018cb6 <USBD_GetStatus>
          break;
 8018280:	e014      	b.n	80182ac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018282:	683a      	ldr	r2, [r7, #0]
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	0011      	movs	r1, r2
 8018288:	0018      	movs	r0, r3
 801828a:	f000 fd4e 	bl	8018d2a <USBD_SetFeature>
          break;
 801828e:	e00d      	b.n	80182ac <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018290:	683a      	ldr	r2, [r7, #0]
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	0011      	movs	r1, r2
 8018296:	0018      	movs	r0, r3
 8018298:	f000 fd5d 	bl	8018d56 <USBD_ClrFeature>
          break;
 801829c:	e006      	b.n	80182ac <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801829e:	683a      	ldr	r2, [r7, #0]
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	0011      	movs	r1, r2
 80182a4:	0018      	movs	r0, r3
 80182a6:	f000 fdb4 	bl	8018e12 <USBD_CtlError>
          break;
 80182aa:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80182ac:	e006      	b.n	80182bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80182ae:	683a      	ldr	r2, [r7, #0]
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	0011      	movs	r1, r2
 80182b4:	0018      	movs	r0, r3
 80182b6:	f000 fdac 	bl	8018e12 <USBD_CtlError>
      break;
 80182ba:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80182bc:	230f      	movs	r3, #15
 80182be:	18fb      	adds	r3, r7, r3
 80182c0:	781b      	ldrb	r3, [r3, #0]
}
 80182c2:	0018      	movs	r0, r3
 80182c4:	46bd      	mov	sp, r7
 80182c6:	b004      	add	sp, #16
 80182c8:	bd80      	pop	{r7, pc}
 80182ca:	46c0      	nop			@ (mov r8, r8)
 80182cc:	080208f8 	.word	0x080208f8

080182d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80182d0:	b5b0      	push	{r4, r5, r7, lr}
 80182d2:	b084      	sub	sp, #16
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
 80182d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80182da:	230f      	movs	r3, #15
 80182dc:	18fb      	adds	r3, r7, r3
 80182de:	2200      	movs	r2, #0
 80182e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80182e2:	683b      	ldr	r3, [r7, #0]
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	001a      	movs	r2, r3
 80182e8:	2360      	movs	r3, #96	@ 0x60
 80182ea:	4013      	ands	r3, r2
 80182ec:	2b40      	cmp	r3, #64	@ 0x40
 80182ee:	d004      	beq.n	80182fa <USBD_StdItfReq+0x2a>
 80182f0:	d839      	bhi.n	8018366 <USBD_StdItfReq+0x96>
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d001      	beq.n	80182fa <USBD_StdItfReq+0x2a>
 80182f6:	2b20      	cmp	r3, #32
 80182f8:	d135      	bne.n	8018366 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80182fa:	687a      	ldr	r2, [r7, #4]
 80182fc:	23a7      	movs	r3, #167	@ 0xa7
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	5cd3      	ldrb	r3, [r2, r3]
 8018302:	3b01      	subs	r3, #1
 8018304:	2b02      	cmp	r3, #2
 8018306:	d825      	bhi.n	8018354 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018308:	683b      	ldr	r3, [r7, #0]
 801830a:	889b      	ldrh	r3, [r3, #4]
 801830c:	b2db      	uxtb	r3, r3
 801830e:	2b01      	cmp	r3, #1
 8018310:	d819      	bhi.n	8018346 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018312:	687a      	ldr	r2, [r7, #4]
 8018314:	23ad      	movs	r3, #173	@ 0xad
 8018316:	009b      	lsls	r3, r3, #2
 8018318:	58d3      	ldr	r3, [r2, r3]
 801831a:	689b      	ldr	r3, [r3, #8]
 801831c:	250f      	movs	r5, #15
 801831e:	197c      	adds	r4, r7, r5
 8018320:	6839      	ldr	r1, [r7, #0]
 8018322:	687a      	ldr	r2, [r7, #4]
 8018324:	0010      	movs	r0, r2
 8018326:	4798      	blx	r3
 8018328:	0003      	movs	r3, r0
 801832a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	88db      	ldrh	r3, [r3, #6]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d116      	bne.n	8018362 <USBD_StdItfReq+0x92>
 8018334:	197b      	adds	r3, r7, r5
 8018336:	781b      	ldrb	r3, [r3, #0]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d112      	bne.n	8018362 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	0018      	movs	r0, r3
 8018340:	f000 fe4f 	bl	8018fe2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018344:	e00d      	b.n	8018362 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8018346:	683a      	ldr	r2, [r7, #0]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	0011      	movs	r1, r2
 801834c:	0018      	movs	r0, r3
 801834e:	f000 fd60 	bl	8018e12 <USBD_CtlError>
          break;
 8018352:	e006      	b.n	8018362 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8018354:	683a      	ldr	r2, [r7, #0]
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	0011      	movs	r1, r2
 801835a:	0018      	movs	r0, r3
 801835c:	f000 fd59 	bl	8018e12 <USBD_CtlError>
          break;
 8018360:	e000      	b.n	8018364 <USBD_StdItfReq+0x94>
          break;
 8018362:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8018364:	e006      	b.n	8018374 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8018366:	683a      	ldr	r2, [r7, #0]
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	0011      	movs	r1, r2
 801836c:	0018      	movs	r0, r3
 801836e:	f000 fd50 	bl	8018e12 <USBD_CtlError>
      break;
 8018372:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8018374:	2300      	movs	r3, #0
}
 8018376:	0018      	movs	r0, r3
 8018378:	46bd      	mov	sp, r7
 801837a:	b004      	add	sp, #16
 801837c:	bdb0      	pop	{r4, r5, r7, pc}

0801837e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801837e:	b5b0      	push	{r4, r5, r7, lr}
 8018380:	b084      	sub	sp, #16
 8018382:	af00      	add	r7, sp, #0
 8018384:	6078      	str	r0, [r7, #4]
 8018386:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018388:	230f      	movs	r3, #15
 801838a:	18fb      	adds	r3, r7, r3
 801838c:	2200      	movs	r2, #0
 801838e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8018390:	683b      	ldr	r3, [r7, #0]
 8018392:	889a      	ldrh	r2, [r3, #4]
 8018394:	230e      	movs	r3, #14
 8018396:	18fb      	adds	r3, r7, r3
 8018398:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801839a:	683b      	ldr	r3, [r7, #0]
 801839c:	781b      	ldrb	r3, [r3, #0]
 801839e:	001a      	movs	r2, r3
 80183a0:	2360      	movs	r3, #96	@ 0x60
 80183a2:	4013      	ands	r3, r2
 80183a4:	2b40      	cmp	r3, #64	@ 0x40
 80183a6:	d006      	beq.n	80183b6 <USBD_StdEPReq+0x38>
 80183a8:	d900      	bls.n	80183ac <USBD_StdEPReq+0x2e>
 80183aa:	e190      	b.n	80186ce <USBD_StdEPReq+0x350>
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d00c      	beq.n	80183ca <USBD_StdEPReq+0x4c>
 80183b0:	2b20      	cmp	r3, #32
 80183b2:	d000      	beq.n	80183b6 <USBD_StdEPReq+0x38>
 80183b4:	e18b      	b.n	80186ce <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80183b6:	687a      	ldr	r2, [r7, #4]
 80183b8:	23ad      	movs	r3, #173	@ 0xad
 80183ba:	009b      	lsls	r3, r3, #2
 80183bc:	58d3      	ldr	r3, [r2, r3]
 80183be:	689b      	ldr	r3, [r3, #8]
 80183c0:	6839      	ldr	r1, [r7, #0]
 80183c2:	687a      	ldr	r2, [r7, #4]
 80183c4:	0010      	movs	r0, r2
 80183c6:	4798      	blx	r3
      break;
 80183c8:	e188      	b.n	80186dc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80183ca:	683b      	ldr	r3, [r7, #0]
 80183cc:	781b      	ldrb	r3, [r3, #0]
 80183ce:	001a      	movs	r2, r3
 80183d0:	2360      	movs	r3, #96	@ 0x60
 80183d2:	4013      	ands	r3, r2
 80183d4:	2b20      	cmp	r3, #32
 80183d6:	d10f      	bne.n	80183f8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80183d8:	687a      	ldr	r2, [r7, #4]
 80183da:	23ad      	movs	r3, #173	@ 0xad
 80183dc:	009b      	lsls	r3, r3, #2
 80183de:	58d3      	ldr	r3, [r2, r3]
 80183e0:	689b      	ldr	r3, [r3, #8]
 80183e2:	250f      	movs	r5, #15
 80183e4:	197c      	adds	r4, r7, r5
 80183e6:	6839      	ldr	r1, [r7, #0]
 80183e8:	687a      	ldr	r2, [r7, #4]
 80183ea:	0010      	movs	r0, r2
 80183ec:	4798      	blx	r3
 80183ee:	0003      	movs	r3, r0
 80183f0:	7023      	strb	r3, [r4, #0]

        return ret;
 80183f2:	197b      	adds	r3, r7, r5
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	e174      	b.n	80186e2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80183f8:	683b      	ldr	r3, [r7, #0]
 80183fa:	785b      	ldrb	r3, [r3, #1]
 80183fc:	2b03      	cmp	r3, #3
 80183fe:	d007      	beq.n	8018410 <USBD_StdEPReq+0x92>
 8018400:	dd00      	ble.n	8018404 <USBD_StdEPReq+0x86>
 8018402:	e15c      	b.n	80186be <USBD_StdEPReq+0x340>
 8018404:	2b00      	cmp	r3, #0
 8018406:	d100      	bne.n	801840a <USBD_StdEPReq+0x8c>
 8018408:	e092      	b.n	8018530 <USBD_StdEPReq+0x1b2>
 801840a:	2b01      	cmp	r3, #1
 801840c:	d04b      	beq.n	80184a6 <USBD_StdEPReq+0x128>
 801840e:	e156      	b.n	80186be <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018410:	687a      	ldr	r2, [r7, #4]
 8018412:	23a7      	movs	r3, #167	@ 0xa7
 8018414:	009b      	lsls	r3, r3, #2
 8018416:	5cd3      	ldrb	r3, [r2, r3]
 8018418:	2b02      	cmp	r3, #2
 801841a:	d002      	beq.n	8018422 <USBD_StdEPReq+0xa4>
 801841c:	2b03      	cmp	r3, #3
 801841e:	d01d      	beq.n	801845c <USBD_StdEPReq+0xde>
 8018420:	e039      	b.n	8018496 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018422:	220e      	movs	r2, #14
 8018424:	18bb      	adds	r3, r7, r2
 8018426:	781b      	ldrb	r3, [r3, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d010      	beq.n	801844e <USBD_StdEPReq+0xd0>
 801842c:	18bb      	adds	r3, r7, r2
 801842e:	781b      	ldrb	r3, [r3, #0]
 8018430:	2b80      	cmp	r3, #128	@ 0x80
 8018432:	d00c      	beq.n	801844e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8018434:	18bb      	adds	r3, r7, r2
 8018436:	781a      	ldrb	r2, [r3, #0]
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	0011      	movs	r1, r2
 801843c:	0018      	movs	r0, r3
 801843e:	f001 fa10 	bl	8019862 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2180      	movs	r1, #128	@ 0x80
 8018446:	0018      	movs	r0, r3
 8018448:	f001 fa0b 	bl	8019862 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801844c:	e02a      	b.n	80184a4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801844e:	683a      	ldr	r2, [r7, #0]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	0011      	movs	r1, r2
 8018454:	0018      	movs	r0, r3
 8018456:	f000 fcdc 	bl	8018e12 <USBD_CtlError>
              break;
 801845a:	e023      	b.n	80184a4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	885b      	ldrh	r3, [r3, #2]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d113      	bne.n	801848c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8018464:	220e      	movs	r2, #14
 8018466:	18bb      	adds	r3, r7, r2
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d00e      	beq.n	801848c <USBD_StdEPReq+0x10e>
 801846e:	18bb      	adds	r3, r7, r2
 8018470:	781b      	ldrb	r3, [r3, #0]
 8018472:	2b80      	cmp	r3, #128	@ 0x80
 8018474:	d00a      	beq.n	801848c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	88db      	ldrh	r3, [r3, #6]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d106      	bne.n	801848c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801847e:	18bb      	adds	r3, r7, r2
 8018480:	781a      	ldrb	r2, [r3, #0]
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	0011      	movs	r1, r2
 8018486:	0018      	movs	r0, r3
 8018488:	f001 f9eb 	bl	8019862 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	0018      	movs	r0, r3
 8018490:	f000 fda7 	bl	8018fe2 <USBD_CtlSendStatus>

              break;
 8018494:	e006      	b.n	80184a4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8018496:	683a      	ldr	r2, [r7, #0]
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	0011      	movs	r1, r2
 801849c:	0018      	movs	r0, r3
 801849e:	f000 fcb8 	bl	8018e12 <USBD_CtlError>
              break;
 80184a2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80184a4:	e112      	b.n	80186cc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80184a6:	687a      	ldr	r2, [r7, #4]
 80184a8:	23a7      	movs	r3, #167	@ 0xa7
 80184aa:	009b      	lsls	r3, r3, #2
 80184ac:	5cd3      	ldrb	r3, [r2, r3]
 80184ae:	2b02      	cmp	r3, #2
 80184b0:	d002      	beq.n	80184b8 <USBD_StdEPReq+0x13a>
 80184b2:	2b03      	cmp	r3, #3
 80184b4:	d01d      	beq.n	80184f2 <USBD_StdEPReq+0x174>
 80184b6:	e032      	b.n	801851e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80184b8:	220e      	movs	r2, #14
 80184ba:	18bb      	adds	r3, r7, r2
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d010      	beq.n	80184e4 <USBD_StdEPReq+0x166>
 80184c2:	18bb      	adds	r3, r7, r2
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	2b80      	cmp	r3, #128	@ 0x80
 80184c8:	d00c      	beq.n	80184e4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80184ca:	18bb      	adds	r3, r7, r2
 80184cc:	781a      	ldrb	r2, [r3, #0]
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	0011      	movs	r1, r2
 80184d2:	0018      	movs	r0, r3
 80184d4:	f001 f9c5 	bl	8019862 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	2180      	movs	r1, #128	@ 0x80
 80184dc:	0018      	movs	r0, r3
 80184de:	f001 f9c0 	bl	8019862 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80184e2:	e024      	b.n	801852e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80184e4:	683a      	ldr	r2, [r7, #0]
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	0011      	movs	r1, r2
 80184ea:	0018      	movs	r0, r3
 80184ec:	f000 fc91 	bl	8018e12 <USBD_CtlError>
              break;
 80184f0:	e01d      	b.n	801852e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80184f2:	683b      	ldr	r3, [r7, #0]
 80184f4:	885b      	ldrh	r3, [r3, #2]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d118      	bne.n	801852c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80184fa:	210e      	movs	r1, #14
 80184fc:	187b      	adds	r3, r7, r1
 80184fe:	781b      	ldrb	r3, [r3, #0]
 8018500:	227f      	movs	r2, #127	@ 0x7f
 8018502:	4013      	ands	r3, r2
 8018504:	d006      	beq.n	8018514 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8018506:	187b      	adds	r3, r7, r1
 8018508:	781a      	ldrb	r2, [r3, #0]
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	0011      	movs	r1, r2
 801850e:	0018      	movs	r0, r3
 8018510:	f001 f9d2 	bl	80198b8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	0018      	movs	r0, r3
 8018518:	f000 fd63 	bl	8018fe2 <USBD_CtlSendStatus>
              }
              break;
 801851c:	e006      	b.n	801852c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801851e:	683a      	ldr	r2, [r7, #0]
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	0011      	movs	r1, r2
 8018524:	0018      	movs	r0, r3
 8018526:	f000 fc74 	bl	8018e12 <USBD_CtlError>
              break;
 801852a:	e000      	b.n	801852e <USBD_StdEPReq+0x1b0>
              break;
 801852c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801852e:	e0cd      	b.n	80186cc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	23a7      	movs	r3, #167	@ 0xa7
 8018534:	009b      	lsls	r3, r3, #2
 8018536:	5cd3      	ldrb	r3, [r2, r3]
 8018538:	2b02      	cmp	r3, #2
 801853a:	d002      	beq.n	8018542 <USBD_StdEPReq+0x1c4>
 801853c:	2b03      	cmp	r3, #3
 801853e:	d03c      	beq.n	80185ba <USBD_StdEPReq+0x23c>
 8018540:	e0b5      	b.n	80186ae <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018542:	220e      	movs	r2, #14
 8018544:	18bb      	adds	r3, r7, r2
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d00a      	beq.n	8018562 <USBD_StdEPReq+0x1e4>
 801854c:	18bb      	adds	r3, r7, r2
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	2b80      	cmp	r3, #128	@ 0x80
 8018552:	d006      	beq.n	8018562 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8018554:	683a      	ldr	r2, [r7, #0]
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	0011      	movs	r1, r2
 801855a:	0018      	movs	r0, r3
 801855c:	f000 fc59 	bl	8018e12 <USBD_CtlError>
                break;
 8018560:	e0ac      	b.n	80186bc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018562:	220e      	movs	r2, #14
 8018564:	18bb      	adds	r3, r7, r2
 8018566:	781b      	ldrb	r3, [r3, #0]
 8018568:	b25b      	sxtb	r3, r3
 801856a:	2b00      	cmp	r3, #0
 801856c:	da0c      	bge.n	8018588 <USBD_StdEPReq+0x20a>
 801856e:	18bb      	adds	r3, r7, r2
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	227f      	movs	r2, #127	@ 0x7f
 8018574:	401a      	ands	r2, r3
 8018576:	0013      	movs	r3, r2
 8018578:	009b      	lsls	r3, r3, #2
 801857a:	189b      	adds	r3, r3, r2
 801857c:	009b      	lsls	r3, r3, #2
 801857e:	3310      	adds	r3, #16
 8018580:	687a      	ldr	r2, [r7, #4]
 8018582:	18d3      	adds	r3, r2, r3
 8018584:	3304      	adds	r3, #4
 8018586:	e00d      	b.n	80185a4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018588:	230e      	movs	r3, #14
 801858a:	18fb      	adds	r3, r7, r3
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	227f      	movs	r2, #127	@ 0x7f
 8018590:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018592:	0013      	movs	r3, r2
 8018594:	009b      	lsls	r3, r3, #2
 8018596:	189b      	adds	r3, r3, r2
 8018598:	009b      	lsls	r3, r3, #2
 801859a:	3351      	adds	r3, #81	@ 0x51
 801859c:	33ff      	adds	r3, #255	@ 0xff
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	18d3      	adds	r3, r2, r3
 80185a2:	3304      	adds	r3, #4
 80185a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	2200      	movs	r2, #0
 80185aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80185ac:	68b9      	ldr	r1, [r7, #8]
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	2202      	movs	r2, #2
 80185b2:	0018      	movs	r0, r3
 80185b4:	f000 fcab 	bl	8018f0e <USBD_CtlSendData>
              break;
 80185b8:	e080      	b.n	80186bc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80185ba:	220e      	movs	r2, #14
 80185bc:	18bb      	adds	r3, r7, r2
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	b25b      	sxtb	r3, r3
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	da14      	bge.n	80185f0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80185c6:	18bb      	adds	r3, r7, r2
 80185c8:	781b      	ldrb	r3, [r3, #0]
 80185ca:	220f      	movs	r2, #15
 80185cc:	401a      	ands	r2, r3
 80185ce:	6879      	ldr	r1, [r7, #4]
 80185d0:	0013      	movs	r3, r2
 80185d2:	009b      	lsls	r3, r3, #2
 80185d4:	189b      	adds	r3, r3, r2
 80185d6:	009b      	lsls	r3, r3, #2
 80185d8:	18cb      	adds	r3, r1, r3
 80185da:	3318      	adds	r3, #24
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d11e      	bne.n	8018620 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80185e2:	683a      	ldr	r2, [r7, #0]
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	0011      	movs	r1, r2
 80185e8:	0018      	movs	r0, r3
 80185ea:	f000 fc12 	bl	8018e12 <USBD_CtlError>
                  break;
 80185ee:	e065      	b.n	80186bc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80185f0:	230e      	movs	r3, #14
 80185f2:	18fb      	adds	r3, r7, r3
 80185f4:	781b      	ldrb	r3, [r3, #0]
 80185f6:	220f      	movs	r2, #15
 80185f8:	401a      	ands	r2, r3
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	23ac      	movs	r3, #172	@ 0xac
 80185fe:	0059      	lsls	r1, r3, #1
 8018600:	0013      	movs	r3, r2
 8018602:	009b      	lsls	r3, r3, #2
 8018604:	189b      	adds	r3, r3, r2
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	18c3      	adds	r3, r0, r3
 801860a:	185b      	adds	r3, r3, r1
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d106      	bne.n	8018620 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8018612:	683a      	ldr	r2, [r7, #0]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	0011      	movs	r1, r2
 8018618:	0018      	movs	r0, r3
 801861a:	f000 fbfa 	bl	8018e12 <USBD_CtlError>
                  break;
 801861e:	e04d      	b.n	80186bc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018620:	220e      	movs	r2, #14
 8018622:	18bb      	adds	r3, r7, r2
 8018624:	781b      	ldrb	r3, [r3, #0]
 8018626:	b25b      	sxtb	r3, r3
 8018628:	2b00      	cmp	r3, #0
 801862a:	da0c      	bge.n	8018646 <USBD_StdEPReq+0x2c8>
 801862c:	18bb      	adds	r3, r7, r2
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	227f      	movs	r2, #127	@ 0x7f
 8018632:	401a      	ands	r2, r3
 8018634:	0013      	movs	r3, r2
 8018636:	009b      	lsls	r3, r3, #2
 8018638:	189b      	adds	r3, r3, r2
 801863a:	009b      	lsls	r3, r3, #2
 801863c:	3310      	adds	r3, #16
 801863e:	687a      	ldr	r2, [r7, #4]
 8018640:	18d3      	adds	r3, r2, r3
 8018642:	3304      	adds	r3, #4
 8018644:	e00d      	b.n	8018662 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018646:	230e      	movs	r3, #14
 8018648:	18fb      	adds	r3, r7, r3
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	227f      	movs	r2, #127	@ 0x7f
 801864e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018650:	0013      	movs	r3, r2
 8018652:	009b      	lsls	r3, r3, #2
 8018654:	189b      	adds	r3, r3, r2
 8018656:	009b      	lsls	r3, r3, #2
 8018658:	3351      	adds	r3, #81	@ 0x51
 801865a:	33ff      	adds	r3, #255	@ 0xff
 801865c:	687a      	ldr	r2, [r7, #4]
 801865e:	18d3      	adds	r3, r2, r3
 8018660:	3304      	adds	r3, #4
 8018662:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018664:	220e      	movs	r2, #14
 8018666:	18bb      	adds	r3, r7, r2
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d003      	beq.n	8018676 <USBD_StdEPReq+0x2f8>
 801866e:	18bb      	adds	r3, r7, r2
 8018670:	781b      	ldrb	r3, [r3, #0]
 8018672:	2b80      	cmp	r3, #128	@ 0x80
 8018674:	d103      	bne.n	801867e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8018676:	68bb      	ldr	r3, [r7, #8]
 8018678:	2200      	movs	r2, #0
 801867a:	601a      	str	r2, [r3, #0]
 801867c:	e010      	b.n	80186a0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801867e:	230e      	movs	r3, #14
 8018680:	18fb      	adds	r3, r7, r3
 8018682:	781a      	ldrb	r2, [r3, #0]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	0011      	movs	r1, r2
 8018688:	0018      	movs	r0, r3
 801868a:	f001 f940 	bl	801990e <USBD_LL_IsStallEP>
 801868e:	1e03      	subs	r3, r0, #0
 8018690:	d003      	beq.n	801869a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8018692:	68bb      	ldr	r3, [r7, #8]
 8018694:	2201      	movs	r2, #1
 8018696:	601a      	str	r2, [r3, #0]
 8018698:	e002      	b.n	80186a0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	2200      	movs	r2, #0
 801869e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80186a0:	68b9      	ldr	r1, [r7, #8]
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	2202      	movs	r2, #2
 80186a6:	0018      	movs	r0, r3
 80186a8:	f000 fc31 	bl	8018f0e <USBD_CtlSendData>
              break;
 80186ac:	e006      	b.n	80186bc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80186ae:	683a      	ldr	r2, [r7, #0]
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	0011      	movs	r1, r2
 80186b4:	0018      	movs	r0, r3
 80186b6:	f000 fbac 	bl	8018e12 <USBD_CtlError>
              break;
 80186ba:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80186bc:	e006      	b.n	80186cc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80186be:	683a      	ldr	r2, [r7, #0]
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	0011      	movs	r1, r2
 80186c4:	0018      	movs	r0, r3
 80186c6:	f000 fba4 	bl	8018e12 <USBD_CtlError>
          break;
 80186ca:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80186cc:	e006      	b.n	80186dc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80186ce:	683a      	ldr	r2, [r7, #0]
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	0011      	movs	r1, r2
 80186d4:	0018      	movs	r0, r3
 80186d6:	f000 fb9c 	bl	8018e12 <USBD_CtlError>
      break;
 80186da:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80186dc:	230f      	movs	r3, #15
 80186de:	18fb      	adds	r3, r7, r3
 80186e0:	781b      	ldrb	r3, [r3, #0]
}
 80186e2:	0018      	movs	r0, r3
 80186e4:	46bd      	mov	sp, r7
 80186e6:	b004      	add	sp, #16
 80186e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080186ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b084      	sub	sp, #16
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
 80186f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80186f6:	2308      	movs	r3, #8
 80186f8:	18fb      	adds	r3, r7, r3
 80186fa:	2200      	movs	r2, #0
 80186fc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80186fe:	2300      	movs	r3, #0
 8018700:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018702:	230b      	movs	r3, #11
 8018704:	18fb      	adds	r3, r7, r3
 8018706:	2200      	movs	r2, #0
 8018708:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801870a:	683b      	ldr	r3, [r7, #0]
 801870c:	885b      	ldrh	r3, [r3, #2]
 801870e:	0a1b      	lsrs	r3, r3, #8
 8018710:	b29b      	uxth	r3, r3
 8018712:	2b07      	cmp	r3, #7
 8018714:	d900      	bls.n	8018718 <USBD_GetDescriptor+0x2c>
 8018716:	e159      	b.n	80189cc <USBD_GetDescriptor+0x2e0>
 8018718:	009a      	lsls	r2, r3, #2
 801871a:	4bcb      	ldr	r3, [pc, #812]	@ (8018a48 <USBD_GetDescriptor+0x35c>)
 801871c:	18d3      	adds	r3, r2, r3
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	23ac      	movs	r3, #172	@ 0xac
 8018726:	009b      	lsls	r3, r3, #2
 8018728:	58d3      	ldr	r3, [r2, r3]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	687a      	ldr	r2, [r7, #4]
 801872e:	7c12      	ldrb	r2, [r2, #16]
 8018730:	2108      	movs	r1, #8
 8018732:	1879      	adds	r1, r7, r1
 8018734:	0010      	movs	r0, r2
 8018736:	4798      	blx	r3
 8018738:	0003      	movs	r3, r0
 801873a:	60fb      	str	r3, [r7, #12]
      break;
 801873c:	e153      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	7c1b      	ldrb	r3, [r3, #16]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d10f      	bne.n	8018766 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8018746:	687a      	ldr	r2, [r7, #4]
 8018748:	23ad      	movs	r3, #173	@ 0xad
 801874a:	009b      	lsls	r3, r3, #2
 801874c:	58d3      	ldr	r3, [r2, r3]
 801874e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018750:	2208      	movs	r2, #8
 8018752:	18ba      	adds	r2, r7, r2
 8018754:	0010      	movs	r0, r2
 8018756:	4798      	blx	r3
 8018758:	0003      	movs	r3, r0
 801875a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	3301      	adds	r3, #1
 8018760:	2202      	movs	r2, #2
 8018762:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018764:	e13f      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018766:	687a      	ldr	r2, [r7, #4]
 8018768:	23ad      	movs	r3, #173	@ 0xad
 801876a:	009b      	lsls	r3, r3, #2
 801876c:	58d3      	ldr	r3, [r2, r3]
 801876e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018770:	2208      	movs	r2, #8
 8018772:	18ba      	adds	r2, r7, r2
 8018774:	0010      	movs	r0, r2
 8018776:	4798      	blx	r3
 8018778:	0003      	movs	r3, r0
 801877a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	3301      	adds	r3, #1
 8018780:	2202      	movs	r2, #2
 8018782:	701a      	strb	r2, [r3, #0]
      break;
 8018784:	e12f      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	885b      	ldrh	r3, [r3, #2]
 801878a:	b2db      	uxtb	r3, r3
 801878c:	2b05      	cmp	r3, #5
 801878e:	d900      	bls.n	8018792 <USBD_GetDescriptor+0xa6>
 8018790:	e0d0      	b.n	8018934 <USBD_GetDescriptor+0x248>
 8018792:	009a      	lsls	r2, r3, #2
 8018794:	4bad      	ldr	r3, [pc, #692]	@ (8018a4c <USBD_GetDescriptor+0x360>)
 8018796:	18d3      	adds	r3, r2, r3
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801879c:	687a      	ldr	r2, [r7, #4]
 801879e:	23ac      	movs	r3, #172	@ 0xac
 80187a0:	009b      	lsls	r3, r3, #2
 80187a2:	58d3      	ldr	r3, [r2, r3]
 80187a4:	685b      	ldr	r3, [r3, #4]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d00d      	beq.n	80187c6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	23ac      	movs	r3, #172	@ 0xac
 80187ae:	009b      	lsls	r3, r3, #2
 80187b0:	58d3      	ldr	r3, [r2, r3]
 80187b2:	685b      	ldr	r3, [r3, #4]
 80187b4:	687a      	ldr	r2, [r7, #4]
 80187b6:	7c12      	ldrb	r2, [r2, #16]
 80187b8:	2108      	movs	r1, #8
 80187ba:	1879      	adds	r1, r7, r1
 80187bc:	0010      	movs	r0, r2
 80187be:	4798      	blx	r3
 80187c0:	0003      	movs	r3, r0
 80187c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80187c4:	e0c3      	b.n	801894e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80187c6:	683a      	ldr	r2, [r7, #0]
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	0011      	movs	r1, r2
 80187cc:	0018      	movs	r0, r3
 80187ce:	f000 fb20 	bl	8018e12 <USBD_CtlError>
            err++;
 80187d2:	210b      	movs	r1, #11
 80187d4:	187b      	adds	r3, r7, r1
 80187d6:	781a      	ldrb	r2, [r3, #0]
 80187d8:	187b      	adds	r3, r7, r1
 80187da:	3201      	adds	r2, #1
 80187dc:	701a      	strb	r2, [r3, #0]
          break;
 80187de:	e0b6      	b.n	801894e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80187e0:	687a      	ldr	r2, [r7, #4]
 80187e2:	23ac      	movs	r3, #172	@ 0xac
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	58d3      	ldr	r3, [r2, r3]
 80187e8:	689b      	ldr	r3, [r3, #8]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d00d      	beq.n	801880a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80187ee:	687a      	ldr	r2, [r7, #4]
 80187f0:	23ac      	movs	r3, #172	@ 0xac
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	58d3      	ldr	r3, [r2, r3]
 80187f6:	689b      	ldr	r3, [r3, #8]
 80187f8:	687a      	ldr	r2, [r7, #4]
 80187fa:	7c12      	ldrb	r2, [r2, #16]
 80187fc:	2108      	movs	r1, #8
 80187fe:	1879      	adds	r1, r7, r1
 8018800:	0010      	movs	r0, r2
 8018802:	4798      	blx	r3
 8018804:	0003      	movs	r3, r0
 8018806:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018808:	e0a1      	b.n	801894e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801880a:	683a      	ldr	r2, [r7, #0]
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	0011      	movs	r1, r2
 8018810:	0018      	movs	r0, r3
 8018812:	f000 fafe 	bl	8018e12 <USBD_CtlError>
            err++;
 8018816:	210b      	movs	r1, #11
 8018818:	187b      	adds	r3, r7, r1
 801881a:	781a      	ldrb	r2, [r3, #0]
 801881c:	187b      	adds	r3, r7, r1
 801881e:	3201      	adds	r2, #1
 8018820:	701a      	strb	r2, [r3, #0]
          break;
 8018822:	e094      	b.n	801894e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018824:	687a      	ldr	r2, [r7, #4]
 8018826:	23ac      	movs	r3, #172	@ 0xac
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	58d3      	ldr	r3, [r2, r3]
 801882c:	68db      	ldr	r3, [r3, #12]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d00d      	beq.n	801884e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018832:	687a      	ldr	r2, [r7, #4]
 8018834:	23ac      	movs	r3, #172	@ 0xac
 8018836:	009b      	lsls	r3, r3, #2
 8018838:	58d3      	ldr	r3, [r2, r3]
 801883a:	68db      	ldr	r3, [r3, #12]
 801883c:	687a      	ldr	r2, [r7, #4]
 801883e:	7c12      	ldrb	r2, [r2, #16]
 8018840:	2108      	movs	r1, #8
 8018842:	1879      	adds	r1, r7, r1
 8018844:	0010      	movs	r0, r2
 8018846:	4798      	blx	r3
 8018848:	0003      	movs	r3, r0
 801884a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801884c:	e07f      	b.n	801894e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801884e:	683a      	ldr	r2, [r7, #0]
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	0011      	movs	r1, r2
 8018854:	0018      	movs	r0, r3
 8018856:	f000 fadc 	bl	8018e12 <USBD_CtlError>
            err++;
 801885a:	210b      	movs	r1, #11
 801885c:	187b      	adds	r3, r7, r1
 801885e:	781a      	ldrb	r2, [r3, #0]
 8018860:	187b      	adds	r3, r7, r1
 8018862:	3201      	adds	r2, #1
 8018864:	701a      	strb	r2, [r3, #0]
          break;
 8018866:	e072      	b.n	801894e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018868:	687a      	ldr	r2, [r7, #4]
 801886a:	23ac      	movs	r3, #172	@ 0xac
 801886c:	009b      	lsls	r3, r3, #2
 801886e:	58d3      	ldr	r3, [r2, r3]
 8018870:	691b      	ldr	r3, [r3, #16]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d00d      	beq.n	8018892 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018876:	687a      	ldr	r2, [r7, #4]
 8018878:	23ac      	movs	r3, #172	@ 0xac
 801887a:	009b      	lsls	r3, r3, #2
 801887c:	58d3      	ldr	r3, [r2, r3]
 801887e:	691b      	ldr	r3, [r3, #16]
 8018880:	687a      	ldr	r2, [r7, #4]
 8018882:	7c12      	ldrb	r2, [r2, #16]
 8018884:	2108      	movs	r1, #8
 8018886:	1879      	adds	r1, r7, r1
 8018888:	0010      	movs	r0, r2
 801888a:	4798      	blx	r3
 801888c:	0003      	movs	r3, r0
 801888e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018890:	e05d      	b.n	801894e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018892:	683a      	ldr	r2, [r7, #0]
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	0011      	movs	r1, r2
 8018898:	0018      	movs	r0, r3
 801889a:	f000 faba 	bl	8018e12 <USBD_CtlError>
            err++;
 801889e:	210b      	movs	r1, #11
 80188a0:	187b      	adds	r3, r7, r1
 80188a2:	781a      	ldrb	r2, [r3, #0]
 80188a4:	187b      	adds	r3, r7, r1
 80188a6:	3201      	adds	r2, #1
 80188a8:	701a      	strb	r2, [r3, #0]
          break;
 80188aa:	e050      	b.n	801894e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80188ac:	687a      	ldr	r2, [r7, #4]
 80188ae:	23ac      	movs	r3, #172	@ 0xac
 80188b0:	009b      	lsls	r3, r3, #2
 80188b2:	58d3      	ldr	r3, [r2, r3]
 80188b4:	695b      	ldr	r3, [r3, #20]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d00d      	beq.n	80188d6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80188ba:	687a      	ldr	r2, [r7, #4]
 80188bc:	23ac      	movs	r3, #172	@ 0xac
 80188be:	009b      	lsls	r3, r3, #2
 80188c0:	58d3      	ldr	r3, [r2, r3]
 80188c2:	695b      	ldr	r3, [r3, #20]
 80188c4:	687a      	ldr	r2, [r7, #4]
 80188c6:	7c12      	ldrb	r2, [r2, #16]
 80188c8:	2108      	movs	r1, #8
 80188ca:	1879      	adds	r1, r7, r1
 80188cc:	0010      	movs	r0, r2
 80188ce:	4798      	blx	r3
 80188d0:	0003      	movs	r3, r0
 80188d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80188d4:	e03b      	b.n	801894e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80188d6:	683a      	ldr	r2, [r7, #0]
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	0011      	movs	r1, r2
 80188dc:	0018      	movs	r0, r3
 80188de:	f000 fa98 	bl	8018e12 <USBD_CtlError>
            err++;
 80188e2:	210b      	movs	r1, #11
 80188e4:	187b      	adds	r3, r7, r1
 80188e6:	781a      	ldrb	r2, [r3, #0]
 80188e8:	187b      	adds	r3, r7, r1
 80188ea:	3201      	adds	r2, #1
 80188ec:	701a      	strb	r2, [r3, #0]
          break;
 80188ee:	e02e      	b.n	801894e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80188f0:	687a      	ldr	r2, [r7, #4]
 80188f2:	23ac      	movs	r3, #172	@ 0xac
 80188f4:	009b      	lsls	r3, r3, #2
 80188f6:	58d3      	ldr	r3, [r2, r3]
 80188f8:	699b      	ldr	r3, [r3, #24]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d00d      	beq.n	801891a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80188fe:	687a      	ldr	r2, [r7, #4]
 8018900:	23ac      	movs	r3, #172	@ 0xac
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	58d3      	ldr	r3, [r2, r3]
 8018906:	699b      	ldr	r3, [r3, #24]
 8018908:	687a      	ldr	r2, [r7, #4]
 801890a:	7c12      	ldrb	r2, [r2, #16]
 801890c:	2108      	movs	r1, #8
 801890e:	1879      	adds	r1, r7, r1
 8018910:	0010      	movs	r0, r2
 8018912:	4798      	blx	r3
 8018914:	0003      	movs	r3, r0
 8018916:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018918:	e019      	b.n	801894e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801891a:	683a      	ldr	r2, [r7, #0]
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	0011      	movs	r1, r2
 8018920:	0018      	movs	r0, r3
 8018922:	f000 fa76 	bl	8018e12 <USBD_CtlError>
            err++;
 8018926:	210b      	movs	r1, #11
 8018928:	187b      	adds	r3, r7, r1
 801892a:	781a      	ldrb	r2, [r3, #0]
 801892c:	187b      	adds	r3, r7, r1
 801892e:	3201      	adds	r2, #1
 8018930:	701a      	strb	r2, [r3, #0]
          break;
 8018932:	e00c      	b.n	801894e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8018934:	683a      	ldr	r2, [r7, #0]
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	0011      	movs	r1, r2
 801893a:	0018      	movs	r0, r3
 801893c:	f000 fa69 	bl	8018e12 <USBD_CtlError>
          err++;
 8018940:	210b      	movs	r1, #11
 8018942:	187b      	adds	r3, r7, r1
 8018944:	781a      	ldrb	r2, [r3, #0]
 8018946:	187b      	adds	r3, r7, r1
 8018948:	3201      	adds	r2, #1
 801894a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801894c:	e04b      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>
 801894e:	e04a      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	7c1b      	ldrb	r3, [r3, #16]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d10b      	bne.n	8018970 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018958:	687a      	ldr	r2, [r7, #4]
 801895a:	23ad      	movs	r3, #173	@ 0xad
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	58d3      	ldr	r3, [r2, r3]
 8018960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018962:	2208      	movs	r2, #8
 8018964:	18ba      	adds	r2, r7, r2
 8018966:	0010      	movs	r0, r2
 8018968:	4798      	blx	r3
 801896a:	0003      	movs	r3, r0
 801896c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801896e:	e03a      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8018970:	683a      	ldr	r2, [r7, #0]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	0011      	movs	r1, r2
 8018976:	0018      	movs	r0, r3
 8018978:	f000 fa4b 	bl	8018e12 <USBD_CtlError>
        err++;
 801897c:	210b      	movs	r1, #11
 801897e:	187b      	adds	r3, r7, r1
 8018980:	781a      	ldrb	r2, [r3, #0]
 8018982:	187b      	adds	r3, r7, r1
 8018984:	3201      	adds	r2, #1
 8018986:	701a      	strb	r2, [r3, #0]
      break;
 8018988:	e02d      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	7c1b      	ldrb	r3, [r3, #16]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d10f      	bne.n	80189b2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018992:	687a      	ldr	r2, [r7, #4]
 8018994:	23ad      	movs	r3, #173	@ 0xad
 8018996:	009b      	lsls	r3, r3, #2
 8018998:	58d3      	ldr	r3, [r2, r3]
 801899a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801899c:	2208      	movs	r2, #8
 801899e:	18ba      	adds	r2, r7, r2
 80189a0:	0010      	movs	r0, r2
 80189a2:	4798      	blx	r3
 80189a4:	0003      	movs	r3, r0
 80189a6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	3301      	adds	r3, #1
 80189ac:	2207      	movs	r2, #7
 80189ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80189b0:	e019      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80189b2:	683a      	ldr	r2, [r7, #0]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	0011      	movs	r1, r2
 80189b8:	0018      	movs	r0, r3
 80189ba:	f000 fa2a 	bl	8018e12 <USBD_CtlError>
        err++;
 80189be:	210b      	movs	r1, #11
 80189c0:	187b      	adds	r3, r7, r1
 80189c2:	781a      	ldrb	r2, [r3, #0]
 80189c4:	187b      	adds	r3, r7, r1
 80189c6:	3201      	adds	r2, #1
 80189c8:	701a      	strb	r2, [r3, #0]
      break;
 80189ca:	e00c      	b.n	80189e6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80189cc:	683a      	ldr	r2, [r7, #0]
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	0011      	movs	r1, r2
 80189d2:	0018      	movs	r0, r3
 80189d4:	f000 fa1d 	bl	8018e12 <USBD_CtlError>
      err++;
 80189d8:	210b      	movs	r1, #11
 80189da:	187b      	adds	r3, r7, r1
 80189dc:	781a      	ldrb	r2, [r3, #0]
 80189de:	187b      	adds	r3, r7, r1
 80189e0:	3201      	adds	r2, #1
 80189e2:	701a      	strb	r2, [r3, #0]
      break;
 80189e4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80189e6:	230b      	movs	r3, #11
 80189e8:	18fb      	adds	r3, r7, r3
 80189ea:	781b      	ldrb	r3, [r3, #0]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d127      	bne.n	8018a40 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80189f0:	2108      	movs	r1, #8
 80189f2:	187b      	adds	r3, r7, r1
 80189f4:	881b      	ldrh	r3, [r3, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d019      	beq.n	8018a2e <USBD_GetDescriptor+0x342>
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	88db      	ldrh	r3, [r3, #6]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d015      	beq.n	8018a2e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8018a02:	683b      	ldr	r3, [r7, #0]
 8018a04:	88da      	ldrh	r2, [r3, #6]
 8018a06:	187b      	adds	r3, r7, r1
 8018a08:	881b      	ldrh	r3, [r3, #0]
 8018a0a:	1c18      	adds	r0, r3, #0
 8018a0c:	1c11      	adds	r1, r2, #0
 8018a0e:	b28a      	uxth	r2, r1
 8018a10:	b283      	uxth	r3, r0
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d900      	bls.n	8018a18 <USBD_GetDescriptor+0x32c>
 8018a16:	1c01      	adds	r1, r0, #0
 8018a18:	b28a      	uxth	r2, r1
 8018a1a:	2108      	movs	r1, #8
 8018a1c:	187b      	adds	r3, r7, r1
 8018a1e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018a20:	187b      	adds	r3, r7, r1
 8018a22:	881a      	ldrh	r2, [r3, #0]
 8018a24:	68f9      	ldr	r1, [r7, #12]
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	0018      	movs	r0, r3
 8018a2a:	f000 fa70 	bl	8018f0e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	88db      	ldrh	r3, [r3, #6]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d105      	bne.n	8018a42 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	0018      	movs	r0, r3
 8018a3a:	f000 fad2 	bl	8018fe2 <USBD_CtlSendStatus>
 8018a3e:	e000      	b.n	8018a42 <USBD_GetDescriptor+0x356>
    return;
 8018a40:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018a42:	46bd      	mov	sp, r7
 8018a44:	b004      	add	sp, #16
 8018a46:	bd80      	pop	{r7, pc}
 8018a48:	08020920 	.word	0x08020920
 8018a4c:	08020940 	.word	0x08020940

08018a50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018a50:	b590      	push	{r4, r7, lr}
 8018a52:	b085      	sub	sp, #20
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
 8018a58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	889b      	ldrh	r3, [r3, #4]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d13d      	bne.n	8018ade <USBD_SetAddress+0x8e>
 8018a62:	683b      	ldr	r3, [r7, #0]
 8018a64:	88db      	ldrh	r3, [r3, #6]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d139      	bne.n	8018ade <USBD_SetAddress+0x8e>
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	885b      	ldrh	r3, [r3, #2]
 8018a6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8018a70:	d835      	bhi.n	8018ade <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	885b      	ldrh	r3, [r3, #2]
 8018a76:	b2da      	uxtb	r2, r3
 8018a78:	230f      	movs	r3, #15
 8018a7a:	18fb      	adds	r3, r7, r3
 8018a7c:	217f      	movs	r1, #127	@ 0x7f
 8018a7e:	400a      	ands	r2, r1
 8018a80:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	23a7      	movs	r3, #167	@ 0xa7
 8018a86:	009b      	lsls	r3, r3, #2
 8018a88:	5cd3      	ldrb	r3, [r2, r3]
 8018a8a:	2b03      	cmp	r3, #3
 8018a8c:	d106      	bne.n	8018a9c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8018a8e:	683a      	ldr	r2, [r7, #0]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	0011      	movs	r1, r2
 8018a94:	0018      	movs	r0, r3
 8018a96:	f000 f9bc 	bl	8018e12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a9a:	e027      	b.n	8018aec <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	240f      	movs	r4, #15
 8018aa0:	193a      	adds	r2, r7, r4
 8018aa2:	4914      	ldr	r1, [pc, #80]	@ (8018af4 <USBD_SetAddress+0xa4>)
 8018aa4:	7812      	ldrb	r2, [r2, #0]
 8018aa6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018aa8:	193b      	adds	r3, r7, r4
 8018aaa:	781a      	ldrb	r2, [r3, #0]
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	0011      	movs	r1, r2
 8018ab0:	0018      	movs	r0, r3
 8018ab2:	f000 ff5d 	bl	8019970 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	0018      	movs	r0, r3
 8018aba:	f000 fa92 	bl	8018fe2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018abe:	193b      	adds	r3, r7, r4
 8018ac0:	781b      	ldrb	r3, [r3, #0]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d005      	beq.n	8018ad2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018ac6:	687a      	ldr	r2, [r7, #4]
 8018ac8:	23a7      	movs	r3, #167	@ 0xa7
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	2102      	movs	r1, #2
 8018ace:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ad0:	e00c      	b.n	8018aec <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018ad2:	687a      	ldr	r2, [r7, #4]
 8018ad4:	23a7      	movs	r3, #167	@ 0xa7
 8018ad6:	009b      	lsls	r3, r3, #2
 8018ad8:	2101      	movs	r1, #1
 8018ada:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018adc:	e006      	b.n	8018aec <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018ade:	683a      	ldr	r2, [r7, #0]
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	0011      	movs	r1, r2
 8018ae4:	0018      	movs	r0, r3
 8018ae6:	f000 f994 	bl	8018e12 <USBD_CtlError>
  }
}
 8018aea:	46c0      	nop			@ (mov r8, r8)
 8018aec:	46c0      	nop			@ (mov r8, r8)
 8018aee:	46bd      	mov	sp, r7
 8018af0:	b005      	add	sp, #20
 8018af2:	bd90      	pop	{r4, r7, pc}
 8018af4:	0000029e 	.word	0x0000029e

08018af8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b082      	sub	sp, #8
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
 8018b00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	885b      	ldrh	r3, [r3, #2]
 8018b06:	b2da      	uxtb	r2, r3
 8018b08:	4b4c      	ldr	r3, [pc, #304]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018b0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018b0e:	781b      	ldrb	r3, [r3, #0]
 8018b10:	2b01      	cmp	r3, #1
 8018b12:	d906      	bls.n	8018b22 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8018b14:	683a      	ldr	r2, [r7, #0]
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	0011      	movs	r1, r2
 8018b1a:	0018      	movs	r0, r3
 8018b1c:	f000 f979 	bl	8018e12 <USBD_CtlError>
 8018b20:	e088      	b.n	8018c34 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8018b22:	687a      	ldr	r2, [r7, #4]
 8018b24:	23a7      	movs	r3, #167	@ 0xa7
 8018b26:	009b      	lsls	r3, r3, #2
 8018b28:	5cd3      	ldrb	r3, [r2, r3]
 8018b2a:	2b02      	cmp	r3, #2
 8018b2c:	d002      	beq.n	8018b34 <USBD_SetConfig+0x3c>
 8018b2e:	2b03      	cmp	r3, #3
 8018b30:	d029      	beq.n	8018b86 <USBD_SetConfig+0x8e>
 8018b32:	e071      	b.n	8018c18 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8018b34:	4b41      	ldr	r3, [pc, #260]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d01f      	beq.n	8018b7c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8018b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	001a      	movs	r2, r3
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018b46:	687a      	ldr	r2, [r7, #4]
 8018b48:	23a7      	movs	r3, #167	@ 0xa7
 8018b4a:	009b      	lsls	r3, r3, #2
 8018b4c:	2103      	movs	r1, #3
 8018b4e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018b50:	4b3a      	ldr	r3, [pc, #232]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018b52:	781a      	ldrb	r2, [r3, #0]
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	0011      	movs	r1, r2
 8018b58:	0018      	movs	r0, r3
 8018b5a:	f7ff f8c6 	bl	8017cea <USBD_SetClassConfig>
 8018b5e:	0003      	movs	r3, r0
 8018b60:	2b02      	cmp	r3, #2
 8018b62:	d106      	bne.n	8018b72 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8018b64:	683a      	ldr	r2, [r7, #0]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	0011      	movs	r1, r2
 8018b6a:	0018      	movs	r0, r3
 8018b6c:	f000 f951 	bl	8018e12 <USBD_CtlError>
            return;
 8018b70:	e060      	b.n	8018c34 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	0018      	movs	r0, r3
 8018b76:	f000 fa34 	bl	8018fe2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018b7a:	e05b      	b.n	8018c34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	0018      	movs	r0, r3
 8018b80:	f000 fa2f 	bl	8018fe2 <USBD_CtlSendStatus>
        break;
 8018b84:	e056      	b.n	8018c34 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8018b86:	4b2d      	ldr	r3, [pc, #180]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018b88:	781b      	ldrb	r3, [r3, #0]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d115      	bne.n	8018bba <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018b8e:	687a      	ldr	r2, [r7, #4]
 8018b90:	23a7      	movs	r3, #167	@ 0xa7
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	2102      	movs	r1, #2
 8018b96:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8018b98:	4b28      	ldr	r3, [pc, #160]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018b9a:	781b      	ldrb	r3, [r3, #0]
 8018b9c:	001a      	movs	r2, r3
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8018ba2:	4b26      	ldr	r3, [pc, #152]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018ba4:	781a      	ldrb	r2, [r3, #0]
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	0011      	movs	r1, r2
 8018baa:	0018      	movs	r0, r3
 8018bac:	f7ff f8c4 	bl	8017d38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	0018      	movs	r0, r3
 8018bb4:	f000 fa15 	bl	8018fe2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018bb8:	e03c      	b.n	8018c34 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8018bba:	4b20      	ldr	r3, [pc, #128]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	001a      	movs	r2, r3
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	685b      	ldr	r3, [r3, #4]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d022      	beq.n	8018c0e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	685b      	ldr	r3, [r3, #4]
 8018bcc:	b2da      	uxtb	r2, r3
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	0011      	movs	r1, r2
 8018bd2:	0018      	movs	r0, r3
 8018bd4:	f7ff f8b0 	bl	8017d38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8018bd8:	4b18      	ldr	r3, [pc, #96]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018bda:	781b      	ldrb	r3, [r3, #0]
 8018bdc:	001a      	movs	r2, r3
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018be2:	4b16      	ldr	r3, [pc, #88]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018be4:	781a      	ldrb	r2, [r3, #0]
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	0011      	movs	r1, r2
 8018bea:	0018      	movs	r0, r3
 8018bec:	f7ff f87d 	bl	8017cea <USBD_SetClassConfig>
 8018bf0:	0003      	movs	r3, r0
 8018bf2:	2b02      	cmp	r3, #2
 8018bf4:	d106      	bne.n	8018c04 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8018bf6:	683a      	ldr	r2, [r7, #0]
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	0011      	movs	r1, r2
 8018bfc:	0018      	movs	r0, r3
 8018bfe:	f000 f908 	bl	8018e12 <USBD_CtlError>
            return;
 8018c02:	e017      	b.n	8018c34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	0018      	movs	r0, r3
 8018c08:	f000 f9eb 	bl	8018fe2 <USBD_CtlSendStatus>
        break;
 8018c0c:	e012      	b.n	8018c34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	0018      	movs	r0, r3
 8018c12:	f000 f9e6 	bl	8018fe2 <USBD_CtlSendStatus>
        break;
 8018c16:	e00d      	b.n	8018c34 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8018c18:	683a      	ldr	r2, [r7, #0]
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	0011      	movs	r1, r2
 8018c1e:	0018      	movs	r0, r3
 8018c20:	f000 f8f7 	bl	8018e12 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8018c24:	4b05      	ldr	r3, [pc, #20]	@ (8018c3c <USBD_SetConfig+0x144>)
 8018c26:	781a      	ldrb	r2, [r3, #0]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	0011      	movs	r1, r2
 8018c2c:	0018      	movs	r0, r3
 8018c2e:	f7ff f883 	bl	8017d38 <USBD_ClrClassConfig>
        break;
 8018c32:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018c34:	46bd      	mov	sp, r7
 8018c36:	b002      	add	sp, #8
 8018c38:	bd80      	pop	{r7, pc}
 8018c3a:	46c0      	nop			@ (mov r8, r8)
 8018c3c:	200024d8 	.word	0x200024d8

08018c40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b082      	sub	sp, #8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
 8018c48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018c4a:	683b      	ldr	r3, [r7, #0]
 8018c4c:	88db      	ldrh	r3, [r3, #6]
 8018c4e:	2b01      	cmp	r3, #1
 8018c50:	d006      	beq.n	8018c60 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8018c52:	683a      	ldr	r2, [r7, #0]
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	0011      	movs	r1, r2
 8018c58:	0018      	movs	r0, r3
 8018c5a:	f000 f8da 	bl	8018e12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018c5e:	e026      	b.n	8018cae <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8018c60:	687a      	ldr	r2, [r7, #4]
 8018c62:	23a7      	movs	r3, #167	@ 0xa7
 8018c64:	009b      	lsls	r3, r3, #2
 8018c66:	5cd3      	ldrb	r3, [r2, r3]
 8018c68:	2b02      	cmp	r3, #2
 8018c6a:	dc02      	bgt.n	8018c72 <USBD_GetConfig+0x32>
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	dc03      	bgt.n	8018c78 <USBD_GetConfig+0x38>
 8018c70:	e016      	b.n	8018ca0 <USBD_GetConfig+0x60>
 8018c72:	2b03      	cmp	r3, #3
 8018c74:	d00c      	beq.n	8018c90 <USBD_GetConfig+0x50>
 8018c76:	e013      	b.n	8018ca0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	3308      	adds	r3, #8
 8018c82:	0019      	movs	r1, r3
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2201      	movs	r2, #1
 8018c88:	0018      	movs	r0, r3
 8018c8a:	f000 f940 	bl	8018f0e <USBD_CtlSendData>
        break;
 8018c8e:	e00e      	b.n	8018cae <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	1d19      	adds	r1, r3, #4
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	2201      	movs	r2, #1
 8018c98:	0018      	movs	r0, r3
 8018c9a:	f000 f938 	bl	8018f0e <USBD_CtlSendData>
        break;
 8018c9e:	e006      	b.n	8018cae <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8018ca0:	683a      	ldr	r2, [r7, #0]
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	0011      	movs	r1, r2
 8018ca6:	0018      	movs	r0, r3
 8018ca8:	f000 f8b3 	bl	8018e12 <USBD_CtlError>
        break;
 8018cac:	46c0      	nop			@ (mov r8, r8)
}
 8018cae:	46c0      	nop			@ (mov r8, r8)
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	b002      	add	sp, #8
 8018cb4:	bd80      	pop	{r7, pc}

08018cb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018cb6:	b580      	push	{r7, lr}
 8018cb8:	b082      	sub	sp, #8
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	6078      	str	r0, [r7, #4]
 8018cbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018cc0:	687a      	ldr	r2, [r7, #4]
 8018cc2:	23a7      	movs	r3, #167	@ 0xa7
 8018cc4:	009b      	lsls	r3, r3, #2
 8018cc6:	5cd3      	ldrb	r3, [r2, r3]
 8018cc8:	3b01      	subs	r3, #1
 8018cca:	2b02      	cmp	r3, #2
 8018ccc:	d822      	bhi.n	8018d14 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018cce:	683b      	ldr	r3, [r7, #0]
 8018cd0:	88db      	ldrh	r3, [r3, #6]
 8018cd2:	2b02      	cmp	r3, #2
 8018cd4:	d006      	beq.n	8018ce4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8018cd6:	683a      	ldr	r2, [r7, #0]
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	0011      	movs	r1, r2
 8018cdc:	0018      	movs	r0, r3
 8018cde:	f000 f898 	bl	8018e12 <USBD_CtlError>
        break;
 8018ce2:	e01e      	b.n	8018d22 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2201      	movs	r2, #1
 8018ce8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8018cea:	687a      	ldr	r2, [r7, #4]
 8018cec:	23a9      	movs	r3, #169	@ 0xa9
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	58d3      	ldr	r3, [r2, r3]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d005      	beq.n	8018d02 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	68db      	ldr	r3, [r3, #12]
 8018cfa:	2202      	movs	r2, #2
 8018cfc:	431a      	orrs	r2, r3
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	330c      	adds	r3, #12
 8018d06:	0019      	movs	r1, r3
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	2202      	movs	r2, #2
 8018d0c:	0018      	movs	r0, r3
 8018d0e:	f000 f8fe 	bl	8018f0e <USBD_CtlSendData>
      break;
 8018d12:	e006      	b.n	8018d22 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8018d14:	683a      	ldr	r2, [r7, #0]
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	0011      	movs	r1, r2
 8018d1a:	0018      	movs	r0, r3
 8018d1c:	f000 f879 	bl	8018e12 <USBD_CtlError>
      break;
 8018d20:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018d22:	46c0      	nop			@ (mov r8, r8)
 8018d24:	46bd      	mov	sp, r7
 8018d26:	b002      	add	sp, #8
 8018d28:	bd80      	pop	{r7, pc}

08018d2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018d2a:	b580      	push	{r7, lr}
 8018d2c:	b082      	sub	sp, #8
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	6078      	str	r0, [r7, #4]
 8018d32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	885b      	ldrh	r3, [r3, #2]
 8018d38:	2b01      	cmp	r3, #1
 8018d3a:	d108      	bne.n	8018d4e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8018d3c:	687a      	ldr	r2, [r7, #4]
 8018d3e:	23a9      	movs	r3, #169	@ 0xa9
 8018d40:	009b      	lsls	r3, r3, #2
 8018d42:	2101      	movs	r1, #1
 8018d44:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	0018      	movs	r0, r3
 8018d4a:	f000 f94a 	bl	8018fe2 <USBD_CtlSendStatus>
  }
}
 8018d4e:	46c0      	nop			@ (mov r8, r8)
 8018d50:	46bd      	mov	sp, r7
 8018d52:	b002      	add	sp, #8
 8018d54:	bd80      	pop	{r7, pc}

08018d56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018d56:	b580      	push	{r7, lr}
 8018d58:	b082      	sub	sp, #8
 8018d5a:	af00      	add	r7, sp, #0
 8018d5c:	6078      	str	r0, [r7, #4]
 8018d5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	23a7      	movs	r3, #167	@ 0xa7
 8018d64:	009b      	lsls	r3, r3, #2
 8018d66:	5cd3      	ldrb	r3, [r2, r3]
 8018d68:	3b01      	subs	r3, #1
 8018d6a:	2b02      	cmp	r3, #2
 8018d6c:	d80d      	bhi.n	8018d8a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	885b      	ldrh	r3, [r3, #2]
 8018d72:	2b01      	cmp	r3, #1
 8018d74:	d110      	bne.n	8018d98 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	23a9      	movs	r3, #169	@ 0xa9
 8018d7a:	009b      	lsls	r3, r3, #2
 8018d7c:	2100      	movs	r1, #0
 8018d7e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	0018      	movs	r0, r3
 8018d84:	f000 f92d 	bl	8018fe2 <USBD_CtlSendStatus>
      }
      break;
 8018d88:	e006      	b.n	8018d98 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8018d8a:	683a      	ldr	r2, [r7, #0]
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	0011      	movs	r1, r2
 8018d90:	0018      	movs	r0, r3
 8018d92:	f000 f83e 	bl	8018e12 <USBD_CtlError>
      break;
 8018d96:	e000      	b.n	8018d9a <USBD_ClrFeature+0x44>
      break;
 8018d98:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018d9a:	46c0      	nop			@ (mov r8, r8)
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	b002      	add	sp, #8
 8018da0:	bd80      	pop	{r7, pc}

08018da2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018da2:	b580      	push	{r7, lr}
 8018da4:	b082      	sub	sp, #8
 8018da6:	af00      	add	r7, sp, #0
 8018da8:	6078      	str	r0, [r7, #4]
 8018daa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8018dac:	683b      	ldr	r3, [r7, #0]
 8018dae:	781a      	ldrb	r2, [r3, #0]
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8018db4:	683b      	ldr	r3, [r7, #0]
 8018db6:	785a      	ldrb	r2, [r3, #1]
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8018dbc:	683b      	ldr	r3, [r7, #0]
 8018dbe:	3302      	adds	r3, #2
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	001a      	movs	r2, r3
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	3303      	adds	r3, #3
 8018dc8:	781b      	ldrb	r3, [r3, #0]
 8018dca:	021b      	lsls	r3, r3, #8
 8018dcc:	b29b      	uxth	r3, r3
 8018dce:	18d3      	adds	r3, r2, r3
 8018dd0:	b29a      	uxth	r2, r3
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	3304      	adds	r3, #4
 8018dda:	781b      	ldrb	r3, [r3, #0]
 8018ddc:	001a      	movs	r2, r3
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	3305      	adds	r3, #5
 8018de2:	781b      	ldrb	r3, [r3, #0]
 8018de4:	021b      	lsls	r3, r3, #8
 8018de6:	b29b      	uxth	r3, r3
 8018de8:	18d3      	adds	r3, r2, r3
 8018dea:	b29a      	uxth	r2, r3
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	3306      	adds	r3, #6
 8018df4:	781b      	ldrb	r3, [r3, #0]
 8018df6:	001a      	movs	r2, r3
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	3307      	adds	r3, #7
 8018dfc:	781b      	ldrb	r3, [r3, #0]
 8018dfe:	021b      	lsls	r3, r3, #8
 8018e00:	b29b      	uxth	r3, r3
 8018e02:	18d3      	adds	r3, r2, r3
 8018e04:	b29a      	uxth	r2, r3
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	80da      	strh	r2, [r3, #6]

}
 8018e0a:	46c0      	nop			@ (mov r8, r8)
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	b002      	add	sp, #8
 8018e10:	bd80      	pop	{r7, pc}

08018e12 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8018e12:	b580      	push	{r7, lr}
 8018e14:	b082      	sub	sp, #8
 8018e16:	af00      	add	r7, sp, #0
 8018e18:	6078      	str	r0, [r7, #4]
 8018e1a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	2180      	movs	r1, #128	@ 0x80
 8018e20:	0018      	movs	r0, r3
 8018e22:	f000 fd1e 	bl	8019862 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2100      	movs	r1, #0
 8018e2a:	0018      	movs	r0, r3
 8018e2c:	f000 fd19 	bl	8019862 <USBD_LL_StallEP>
}
 8018e30:	46c0      	nop			@ (mov r8, r8)
 8018e32:	46bd      	mov	sp, r7
 8018e34:	b002      	add	sp, #8
 8018e36:	bd80      	pop	{r7, pc}

08018e38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018e38:	b590      	push	{r4, r7, lr}
 8018e3a:	b087      	sub	sp, #28
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	60f8      	str	r0, [r7, #12]
 8018e40:	60b9      	str	r1, [r7, #8]
 8018e42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018e44:	2417      	movs	r4, #23
 8018e46:	193b      	adds	r3, r7, r4
 8018e48:	2200      	movs	r2, #0
 8018e4a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d03c      	beq.n	8018ecc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	0018      	movs	r0, r3
 8018e56:	f000 f83d 	bl	8018ed4 <USBD_GetLen>
 8018e5a:	0003      	movs	r3, r0
 8018e5c:	3301      	adds	r3, #1
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	18db      	adds	r3, r3, r3
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8018e68:	193b      	adds	r3, r7, r4
 8018e6a:	781b      	ldrb	r3, [r3, #0]
 8018e6c:	193a      	adds	r2, r7, r4
 8018e6e:	1c59      	adds	r1, r3, #1
 8018e70:	7011      	strb	r1, [r2, #0]
 8018e72:	001a      	movs	r2, r3
 8018e74:	68bb      	ldr	r3, [r7, #8]
 8018e76:	189b      	adds	r3, r3, r2
 8018e78:	687a      	ldr	r2, [r7, #4]
 8018e7a:	7812      	ldrb	r2, [r2, #0]
 8018e7c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8018e7e:	193b      	adds	r3, r7, r4
 8018e80:	781b      	ldrb	r3, [r3, #0]
 8018e82:	193a      	adds	r2, r7, r4
 8018e84:	1c59      	adds	r1, r3, #1
 8018e86:	7011      	strb	r1, [r2, #0]
 8018e88:	001a      	movs	r2, r3
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	189b      	adds	r3, r3, r2
 8018e8e:	2203      	movs	r2, #3
 8018e90:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8018e92:	e017      	b.n	8018ec4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	1c5a      	adds	r2, r3, #1
 8018e98:	60fa      	str	r2, [r7, #12]
 8018e9a:	2417      	movs	r4, #23
 8018e9c:	193a      	adds	r2, r7, r4
 8018e9e:	7812      	ldrb	r2, [r2, #0]
 8018ea0:	1939      	adds	r1, r7, r4
 8018ea2:	1c50      	adds	r0, r2, #1
 8018ea4:	7008      	strb	r0, [r1, #0]
 8018ea6:	0011      	movs	r1, r2
 8018ea8:	68ba      	ldr	r2, [r7, #8]
 8018eaa:	1852      	adds	r2, r2, r1
 8018eac:	781b      	ldrb	r3, [r3, #0]
 8018eae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8018eb0:	193b      	adds	r3, r7, r4
 8018eb2:	781b      	ldrb	r3, [r3, #0]
 8018eb4:	193a      	adds	r2, r7, r4
 8018eb6:	1c59      	adds	r1, r3, #1
 8018eb8:	7011      	strb	r1, [r2, #0]
 8018eba:	001a      	movs	r2, r3
 8018ebc:	68bb      	ldr	r3, [r7, #8]
 8018ebe:	189b      	adds	r3, r3, r2
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	781b      	ldrb	r3, [r3, #0]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d1e3      	bne.n	8018e94 <USBD_GetString+0x5c>
    }
  }
}
 8018ecc:	46c0      	nop			@ (mov r8, r8)
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	b007      	add	sp, #28
 8018ed2:	bd90      	pop	{r4, r7, pc}

08018ed4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b084      	sub	sp, #16
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018edc:	230f      	movs	r3, #15
 8018ede:	18fb      	adds	r3, r7, r3
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8018ee4:	e008      	b.n	8018ef8 <USBD_GetLen+0x24>
  {
    len++;
 8018ee6:	210f      	movs	r1, #15
 8018ee8:	187b      	adds	r3, r7, r1
 8018eea:	781a      	ldrb	r2, [r3, #0]
 8018eec:	187b      	adds	r3, r7, r1
 8018eee:	3201      	adds	r2, #1
 8018ef0:	701a      	strb	r2, [r3, #0]
    buf++;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	3301      	adds	r3, #1
 8018ef6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d1f2      	bne.n	8018ee6 <USBD_GetLen+0x12>
  }

  return len;
 8018f00:	230f      	movs	r3, #15
 8018f02:	18fb      	adds	r3, r7, r3
 8018f04:	781b      	ldrb	r3, [r3, #0]
}
 8018f06:	0018      	movs	r0, r3
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	b004      	add	sp, #16
 8018f0c:	bd80      	pop	{r7, pc}

08018f0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8018f0e:	b580      	push	{r7, lr}
 8018f10:	b084      	sub	sp, #16
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	60f8      	str	r0, [r7, #12]
 8018f16:	60b9      	str	r1, [r7, #8]
 8018f18:	1dbb      	adds	r3, r7, #6
 8018f1a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018f1c:	68fa      	ldr	r2, [r7, #12]
 8018f1e:	23a5      	movs	r3, #165	@ 0xa5
 8018f20:	009b      	lsls	r3, r3, #2
 8018f22:	2102      	movs	r1, #2
 8018f24:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8018f26:	1dbb      	adds	r3, r7, #6
 8018f28:	881a      	ldrh	r2, [r3, #0]
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8018f2e:	1dbb      	adds	r3, r7, #6
 8018f30:	881a      	ldrh	r2, [r3, #0]
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018f36:	1dbb      	adds	r3, r7, #6
 8018f38:	881b      	ldrh	r3, [r3, #0]
 8018f3a:	68ba      	ldr	r2, [r7, #8]
 8018f3c:	68f8      	ldr	r0, [r7, #12]
 8018f3e:	2100      	movs	r1, #0
 8018f40:	f000 fd41 	bl	80199c6 <USBD_LL_Transmit>

  return USBD_OK;
 8018f44:	2300      	movs	r3, #0
}
 8018f46:	0018      	movs	r0, r3
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	b004      	add	sp, #16
 8018f4c:	bd80      	pop	{r7, pc}

08018f4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8018f4e:	b580      	push	{r7, lr}
 8018f50:	b084      	sub	sp, #16
 8018f52:	af00      	add	r7, sp, #0
 8018f54:	60f8      	str	r0, [r7, #12]
 8018f56:	60b9      	str	r1, [r7, #8]
 8018f58:	1dbb      	adds	r3, r7, #6
 8018f5a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018f5c:	1dbb      	adds	r3, r7, #6
 8018f5e:	881b      	ldrh	r3, [r3, #0]
 8018f60:	68ba      	ldr	r2, [r7, #8]
 8018f62:	68f8      	ldr	r0, [r7, #12]
 8018f64:	2100      	movs	r1, #0
 8018f66:	f000 fd2e 	bl	80199c6 <USBD_LL_Transmit>

  return USBD_OK;
 8018f6a:	2300      	movs	r3, #0
}
 8018f6c:	0018      	movs	r0, r3
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	b004      	add	sp, #16
 8018f72:	bd80      	pop	{r7, pc}

08018f74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b084      	sub	sp, #16
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	60f8      	str	r0, [r7, #12]
 8018f7c:	60b9      	str	r1, [r7, #8]
 8018f7e:	1dbb      	adds	r3, r7, #6
 8018f80:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018f82:	68fa      	ldr	r2, [r7, #12]
 8018f84:	23a5      	movs	r3, #165	@ 0xa5
 8018f86:	009b      	lsls	r3, r3, #2
 8018f88:	2103      	movs	r1, #3
 8018f8a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8018f8c:	1dbb      	adds	r3, r7, #6
 8018f8e:	8819      	ldrh	r1, [r3, #0]
 8018f90:	68fa      	ldr	r2, [r7, #12]
 8018f92:	23ae      	movs	r3, #174	@ 0xae
 8018f94:	005b      	lsls	r3, r3, #1
 8018f96:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8018f98:	1dbb      	adds	r3, r7, #6
 8018f9a:	8819      	ldrh	r1, [r3, #0]
 8018f9c:	68fa      	ldr	r2, [r7, #12]
 8018f9e:	23b0      	movs	r3, #176	@ 0xb0
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018fa4:	1dbb      	adds	r3, r7, #6
 8018fa6:	881b      	ldrh	r3, [r3, #0]
 8018fa8:	68ba      	ldr	r2, [r7, #8]
 8018faa:	68f8      	ldr	r0, [r7, #12]
 8018fac:	2100      	movs	r1, #0
 8018fae:	f000 fd41 	bl	8019a34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018fb2:	2300      	movs	r3, #0
}
 8018fb4:	0018      	movs	r0, r3
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	b004      	add	sp, #16
 8018fba:	bd80      	pop	{r7, pc}

08018fbc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b084      	sub	sp, #16
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	60f8      	str	r0, [r7, #12]
 8018fc4:	60b9      	str	r1, [r7, #8]
 8018fc6:	1dbb      	adds	r3, r7, #6
 8018fc8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018fca:	1dbb      	adds	r3, r7, #6
 8018fcc:	881b      	ldrh	r3, [r3, #0]
 8018fce:	68ba      	ldr	r2, [r7, #8]
 8018fd0:	68f8      	ldr	r0, [r7, #12]
 8018fd2:	2100      	movs	r1, #0
 8018fd4:	f000 fd2e 	bl	8019a34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018fd8:	2300      	movs	r3, #0
}
 8018fda:	0018      	movs	r0, r3
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	b004      	add	sp, #16
 8018fe0:	bd80      	pop	{r7, pc}

08018fe2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8018fe2:	b580      	push	{r7, lr}
 8018fe4:	b082      	sub	sp, #8
 8018fe6:	af00      	add	r7, sp, #0
 8018fe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	23a5      	movs	r3, #165	@ 0xa5
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	2104      	movs	r1, #4
 8018ff2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018ff4:	6878      	ldr	r0, [r7, #4]
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	2100      	movs	r1, #0
 8018ffc:	f000 fce3 	bl	80199c6 <USBD_LL_Transmit>

  return USBD_OK;
 8019000:	2300      	movs	r3, #0
}
 8019002:	0018      	movs	r0, r3
 8019004:	46bd      	mov	sp, r7
 8019006:	b002      	add	sp, #8
 8019008:	bd80      	pop	{r7, pc}

0801900a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801900a:	b580      	push	{r7, lr}
 801900c:	b082      	sub	sp, #8
 801900e:	af00      	add	r7, sp, #0
 8019010:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	23a5      	movs	r3, #165	@ 0xa5
 8019016:	009b      	lsls	r3, r3, #2
 8019018:	2105      	movs	r1, #5
 801901a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801901c:	6878      	ldr	r0, [r7, #4]
 801901e:	2300      	movs	r3, #0
 8019020:	2200      	movs	r2, #0
 8019022:	2100      	movs	r1, #0
 8019024:	f000 fd06 	bl	8019a34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019028:	2300      	movs	r3, #0
}
 801902a:	0018      	movs	r0, r3
 801902c:	46bd      	mov	sp, r7
 801902e:	b002      	add	sp, #8
 8019030:	bd80      	pop	{r7, pc}
	...

08019034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019038:	4914      	ldr	r1, [pc, #80]	@ (801908c <MX_USB_DEVICE_Init+0x58>)
 801903a:	4b15      	ldr	r3, [pc, #84]	@ (8019090 <MX_USB_DEVICE_Init+0x5c>)
 801903c:	2200      	movs	r2, #0
 801903e:	0018      	movs	r0, r3
 8019040:	f7fe fdec 	bl	8017c1c <USBD_Init>
 8019044:	1e03      	subs	r3, r0, #0
 8019046:	d001      	beq.n	801904c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019048:	f7ee f9da 	bl	8007400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801904c:	4a11      	ldr	r2, [pc, #68]	@ (8019094 <MX_USB_DEVICE_Init+0x60>)
 801904e:	4b10      	ldr	r3, [pc, #64]	@ (8019090 <MX_USB_DEVICE_Init+0x5c>)
 8019050:	0011      	movs	r1, r2
 8019052:	0018      	movs	r0, r3
 8019054:	f7fe fe13 	bl	8017c7e <USBD_RegisterClass>
 8019058:	1e03      	subs	r3, r0, #0
 801905a:	d001      	beq.n	8019060 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801905c:	f7ee f9d0 	bl	8007400 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019060:	4a0d      	ldr	r2, [pc, #52]	@ (8019098 <MX_USB_DEVICE_Init+0x64>)
 8019062:	4b0b      	ldr	r3, [pc, #44]	@ (8019090 <MX_USB_DEVICE_Init+0x5c>)
 8019064:	0011      	movs	r1, r2
 8019066:	0018      	movs	r0, r3
 8019068:	f7fe fd28 	bl	8017abc <USBD_CDC_RegisterInterface>
 801906c:	1e03      	subs	r3, r0, #0
 801906e:	d001      	beq.n	8019074 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8019070:	f7ee f9c6 	bl	8007400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019074:	4b06      	ldr	r3, [pc, #24]	@ (8019090 <MX_USB_DEVICE_Init+0x5c>)
 8019076:	0018      	movs	r0, r3
 8019078:	f7fe fe21 	bl	8017cbe <USBD_Start>
 801907c:	1e03      	subs	r3, r0, #0
 801907e:	d001      	beq.n	8019084 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8019080:	f7ee f9be 	bl	8007400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019084:	46c0      	nop			@ (mov r8, r8)
 8019086:	46bd      	mov	sp, r7
 8019088:	bd80      	pop	{r7, pc}
 801908a:	46c0      	nop			@ (mov r8, r8)
 801908c:	20000200 	.word	0x20000200
 8019090:	200024dc 	.word	0x200024dc
 8019094:	200000ec 	.word	0x200000ec
 8019098:	200001f0 	.word	0x200001f0

0801909c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80190a0:	4907      	ldr	r1, [pc, #28]	@ (80190c0 <CDC_Init_FS+0x24>)
 80190a2:	4b08      	ldr	r3, [pc, #32]	@ (80190c4 <CDC_Init_FS+0x28>)
 80190a4:	2200      	movs	r2, #0
 80190a6:	0018      	movs	r0, r3
 80190a8:	f7fe fd23 	bl	8017af2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80190ac:	4a06      	ldr	r2, [pc, #24]	@ (80190c8 <CDC_Init_FS+0x2c>)
 80190ae:	4b05      	ldr	r3, [pc, #20]	@ (80190c4 <CDC_Init_FS+0x28>)
 80190b0:	0011      	movs	r1, r2
 80190b2:	0018      	movs	r0, r3
 80190b4:	f7fe fd39 	bl	8017b2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80190b8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80190ba:	0018      	movs	r0, r3
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	20002c60 	.word	0x20002c60
 80190c4:	200024dc 	.word	0x200024dc
 80190c8:	20002860 	.word	0x20002860

080190cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80190d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80190d2:	0018      	movs	r0, r3
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}

080190d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b082      	sub	sp, #8
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6039      	str	r1, [r7, #0]
 80190e0:	0011      	movs	r1, r2
 80190e2:	1dfb      	adds	r3, r7, #7
 80190e4:	1c02      	adds	r2, r0, #0
 80190e6:	701a      	strb	r2, [r3, #0]
 80190e8:	1d3b      	adds	r3, r7, #4
 80190ea:	1c0a      	adds	r2, r1, #0
 80190ec:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80190ee:	1dfb      	adds	r3, r7, #7
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	2b23      	cmp	r3, #35	@ 0x23
 80190f4:	d804      	bhi.n	8019100 <CDC_Control_FS+0x28>
 80190f6:	009a      	lsls	r2, r3, #2
 80190f8:	4b04      	ldr	r3, [pc, #16]	@ (801910c <CDC_Control_FS+0x34>)
 80190fa:	18d3      	adds	r3, r2, r3
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019100:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8019102:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019104:	0018      	movs	r0, r3
 8019106:	46bd      	mov	sp, r7
 8019108:	b002      	add	sp, #8
 801910a:	bd80      	pop	{r7, pc}
 801910c:	08020958 	.word	0x08020958

08019110 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b082      	sub	sp, #8
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
 8019118:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801911a:	4b12      	ldr	r3, [pc, #72]	@ (8019164 <CDC_Receive_FS+0x54>)
 801911c:	781b      	ldrb	r3, [r3, #0]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d013      	beq.n	801914a <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	b29a      	uxth	r2, r3
 8019128:	2301      	movs	r3, #1
 801912a:	425b      	negs	r3, r3
 801912c:	6879      	ldr	r1, [r7, #4]
 801912e:	480e      	ldr	r0, [pc, #56]	@ (8019168 <CDC_Receive_FS+0x58>)
 8019130:	f7fa fa46 	bl	80135c0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019134:	687a      	ldr	r2, [r7, #4]
 8019136:	4b0d      	ldr	r3, [pc, #52]	@ (801916c <CDC_Receive_FS+0x5c>)
 8019138:	0011      	movs	r1, r2
 801913a:	0018      	movs	r0, r3
 801913c:	f7fe fcf5 	bl	8017b2a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019140:	4b0a      	ldr	r3, [pc, #40]	@ (801916c <CDC_Receive_FS+0x5c>)
 8019142:	0018      	movs	r0, r3
 8019144:	f7fe fd3c 	bl	8017bc0 <USBD_CDC_ReceivePacket>
 8019148:	e006      	b.n	8019158 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	681a      	ldr	r2, [r3, #0]
 801914e:	4b08      	ldr	r3, [pc, #32]	@ (8019170 <CDC_Receive_FS+0x60>)
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	18d2      	adds	r2, r2, r3
 8019154:	4b06      	ldr	r3, [pc, #24]	@ (8019170 <CDC_Receive_FS+0x60>)
 8019156:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8019158:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801915a:	0018      	movs	r0, r3
 801915c:	46bd      	mov	sp, r7
 801915e:	b002      	add	sp, #8
 8019160:	bd80      	pop	{r7, pc}
 8019162:	46c0      	nop			@ (mov r8, r8)
 8019164:	200027a0 	.word	0x200027a0
 8019168:	200027a4 	.word	0x200027a4
 801916c:	200024dc 	.word	0x200024dc
 8019170:	2000285c 	.word	0x2000285c

08019174 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019174:	b5b0      	push	{r4, r5, r7, lr}
 8019176:	b084      	sub	sp, #16
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
 801917c:	000a      	movs	r2, r1
 801917e:	1cbb      	adds	r3, r7, #2
 8019180:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8019182:	230f      	movs	r3, #15
 8019184:	18fb      	adds	r3, r7, r3
 8019186:	2200      	movs	r2, #0
 8019188:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801918a:	4a11      	ldr	r2, [pc, #68]	@ (80191d0 <CDC_Transmit_FS+0x5c>)
 801918c:	23ae      	movs	r3, #174	@ 0xae
 801918e:	009b      	lsls	r3, r3, #2
 8019190:	58d3      	ldr	r3, [r2, r3]
 8019192:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019194:	68ba      	ldr	r2, [r7, #8]
 8019196:	2385      	movs	r3, #133	@ 0x85
 8019198:	009b      	lsls	r3, r3, #2
 801919a:	58d3      	ldr	r3, [r2, r3]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d001      	beq.n	80191a4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80191a0:	2301      	movs	r3, #1
 80191a2:	e010      	b.n	80191c6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80191a4:	1cbb      	adds	r3, r7, #2
 80191a6:	881a      	ldrh	r2, [r3, #0]
 80191a8:	6879      	ldr	r1, [r7, #4]
 80191aa:	4b09      	ldr	r3, [pc, #36]	@ (80191d0 <CDC_Transmit_FS+0x5c>)
 80191ac:	0018      	movs	r0, r3
 80191ae:	f7fe fca0 	bl	8017af2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80191b2:	250f      	movs	r5, #15
 80191b4:	197c      	adds	r4, r7, r5
 80191b6:	4b06      	ldr	r3, [pc, #24]	@ (80191d0 <CDC_Transmit_FS+0x5c>)
 80191b8:	0018      	movs	r0, r3
 80191ba:	f7fe fcca 	bl	8017b52 <USBD_CDC_TransmitPacket>
 80191be:	0003      	movs	r3, r0
 80191c0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80191c2:	197b      	adds	r3, r7, r5
 80191c4:	781b      	ldrb	r3, [r3, #0]
}
 80191c6:	0018      	movs	r0, r3
 80191c8:	46bd      	mov	sp, r7
 80191ca:	b004      	add	sp, #16
 80191cc:	bdb0      	pop	{r4, r5, r7, pc}
 80191ce:	46c0      	nop			@ (mov r8, r8)
 80191d0:	200024dc 	.word	0x200024dc

080191d4 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80191d4:	b580      	push	{r7, lr}
 80191d6:	af00      	add	r7, sp, #0
  ESPProg = true;
 80191d8:	4b02      	ldr	r3, [pc, #8]	@ (80191e4 <EnableESPProg+0x10>)
 80191da:	2201      	movs	r2, #1
 80191dc:	701a      	strb	r2, [r3, #0]
}
 80191de:	46c0      	nop			@ (mov r8, r8)
 80191e0:	46bd      	mov	sp, r7
 80191e2:	bd80      	pop	{r7, pc}
 80191e4:	200027a0 	.word	0x200027a0

080191e8 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80191ec:	4b01      	ldr	r3, [pc, #4]	@ (80191f4 <GetUsbRxPointer+0xc>)
}
 80191ee:	0018      	movs	r0, r3
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	20002860 	.word	0x20002860

080191f8 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80191fc:	4b07      	ldr	r3, [pc, #28]	@ (801921c <ResetUsbRxDataSize+0x24>)
 80191fe:	2200      	movs	r2, #0
 8019200:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8019202:	4a07      	ldr	r2, [pc, #28]	@ (8019220 <ResetUsbRxDataSize+0x28>)
 8019204:	4b07      	ldr	r3, [pc, #28]	@ (8019224 <ResetUsbRxDataSize+0x2c>)
 8019206:	0011      	movs	r1, r2
 8019208:	0018      	movs	r0, r3
 801920a:	f7fe fc8e 	bl	8017b2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801920e:	4b05      	ldr	r3, [pc, #20]	@ (8019224 <ResetUsbRxDataSize+0x2c>)
 8019210:	0018      	movs	r0, r3
 8019212:	f7fe fcd5 	bl	8017bc0 <USBD_CDC_ReceivePacket>
}
 8019216:	46c0      	nop			@ (mov r8, r8)
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	2000285c 	.word	0x2000285c
 8019220:	20002860 	.word	0x20002860
 8019224:	200024dc 	.word	0x200024dc

08019228 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8019228:	b580      	push	{r7, lr}
 801922a:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801922c:	4b02      	ldr	r3, [pc, #8]	@ (8019238 <GetUsbRxDataSize+0x10>)
 801922e:	681b      	ldr	r3, [r3, #0]
}
 8019230:	0018      	movs	r0, r3
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}
 8019236:	46c0      	nop			@ (mov r8, r8)
 8019238:	2000285c 	.word	0x2000285c

0801923c <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8019244:	687a      	ldr	r2, [r7, #4]
 8019246:	4b07      	ldr	r3, [pc, #28]	@ (8019264 <GetUsbRxNextChunk+0x28>)
 8019248:	18d2      	adds	r2, r2, r3
 801924a:	4b07      	ldr	r3, [pc, #28]	@ (8019268 <GetUsbRxNextChunk+0x2c>)
 801924c:	0011      	movs	r1, r2
 801924e:	0018      	movs	r0, r3
 8019250:	f7fe fc6b 	bl	8017b2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019254:	4b04      	ldr	r3, [pc, #16]	@ (8019268 <GetUsbRxNextChunk+0x2c>)
 8019256:	0018      	movs	r0, r3
 8019258:	f7fe fcb2 	bl	8017bc0 <USBD_CDC_ReceivePacket>
}
 801925c:	46c0      	nop			@ (mov r8, r8)
 801925e:	46bd      	mov	sp, r7
 8019260:	b002      	add	sp, #8
 8019262:	bd80      	pop	{r7, pc}
 8019264:	20002860 	.word	0x20002860
 8019268:	200024dc 	.word	0x200024dc

0801926c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	0002      	movs	r2, r0
 8019274:	6039      	str	r1, [r7, #0]
 8019276:	1dfb      	adds	r3, r7, #7
 8019278:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	2212      	movs	r2, #18
 801927e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019280:	4b02      	ldr	r3, [pc, #8]	@ (801928c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019282:	0018      	movs	r0, r3
 8019284:	46bd      	mov	sp, r7
 8019286:	b002      	add	sp, #8
 8019288:	bd80      	pop	{r7, pc}
 801928a:	46c0      	nop			@ (mov r8, r8)
 801928c:	2000021c 	.word	0x2000021c

08019290 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b082      	sub	sp, #8
 8019294:	af00      	add	r7, sp, #0
 8019296:	0002      	movs	r2, r0
 8019298:	6039      	str	r1, [r7, #0]
 801929a:	1dfb      	adds	r3, r7, #7
 801929c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	2204      	movs	r2, #4
 80192a2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80192a4:	4b02      	ldr	r3, [pc, #8]	@ (80192b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80192a6:	0018      	movs	r0, r3
 80192a8:	46bd      	mov	sp, r7
 80192aa:	b002      	add	sp, #8
 80192ac:	bd80      	pop	{r7, pc}
 80192ae:	46c0      	nop			@ (mov r8, r8)
 80192b0:	20000230 	.word	0x20000230

080192b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	0002      	movs	r2, r0
 80192bc:	6039      	str	r1, [r7, #0]
 80192be:	1dfb      	adds	r3, r7, #7
 80192c0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80192c2:	1dfb      	adds	r3, r7, #7
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d106      	bne.n	80192d8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80192ca:	683a      	ldr	r2, [r7, #0]
 80192cc:	4908      	ldr	r1, [pc, #32]	@ (80192f0 <USBD_FS_ProductStrDescriptor+0x3c>)
 80192ce:	4b09      	ldr	r3, [pc, #36]	@ (80192f4 <USBD_FS_ProductStrDescriptor+0x40>)
 80192d0:	0018      	movs	r0, r3
 80192d2:	f7ff fdb1 	bl	8018e38 <USBD_GetString>
 80192d6:	e005      	b.n	80192e4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80192d8:	683a      	ldr	r2, [r7, #0]
 80192da:	4905      	ldr	r1, [pc, #20]	@ (80192f0 <USBD_FS_ProductStrDescriptor+0x3c>)
 80192dc:	4b05      	ldr	r3, [pc, #20]	@ (80192f4 <USBD_FS_ProductStrDescriptor+0x40>)
 80192de:	0018      	movs	r0, r3
 80192e0:	f7ff fdaa 	bl	8018e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80192e4:	4b02      	ldr	r3, [pc, #8]	@ (80192f0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80192e6:	0018      	movs	r0, r3
 80192e8:	46bd      	mov	sp, r7
 80192ea:	b002      	add	sp, #8
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	46c0      	nop			@ (mov r8, r8)
 80192f0:	20003060 	.word	0x20003060
 80192f4:	08020480 	.word	0x08020480

080192f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	0002      	movs	r2, r0
 8019300:	6039      	str	r1, [r7, #0]
 8019302:	1dfb      	adds	r3, r7, #7
 8019304:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019306:	683a      	ldr	r2, [r7, #0]
 8019308:	4904      	ldr	r1, [pc, #16]	@ (801931c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801930a:	4b05      	ldr	r3, [pc, #20]	@ (8019320 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801930c:	0018      	movs	r0, r3
 801930e:	f7ff fd93 	bl	8018e38 <USBD_GetString>
  return USBD_StrDesc;
 8019312:	4b02      	ldr	r3, [pc, #8]	@ (801931c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8019314:	0018      	movs	r0, r3
 8019316:	46bd      	mov	sp, r7
 8019318:	b002      	add	sp, #8
 801931a:	bd80      	pop	{r7, pc}
 801931c:	20003060 	.word	0x20003060
 8019320:	08020498 	.word	0x08020498

08019324 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b082      	sub	sp, #8
 8019328:	af00      	add	r7, sp, #0
 801932a:	0002      	movs	r2, r0
 801932c:	6039      	str	r1, [r7, #0]
 801932e:	1dfb      	adds	r3, r7, #7
 8019330:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	221a      	movs	r2, #26
 8019336:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019338:	f000 f84c 	bl	80193d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801933c:	4b02      	ldr	r3, [pc, #8]	@ (8019348 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801933e:	0018      	movs	r0, r3
 8019340:	46bd      	mov	sp, r7
 8019342:	b002      	add	sp, #8
 8019344:	bd80      	pop	{r7, pc}
 8019346:	46c0      	nop			@ (mov r8, r8)
 8019348:	20000234 	.word	0x20000234

0801934c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b082      	sub	sp, #8
 8019350:	af00      	add	r7, sp, #0
 8019352:	0002      	movs	r2, r0
 8019354:	6039      	str	r1, [r7, #0]
 8019356:	1dfb      	adds	r3, r7, #7
 8019358:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801935a:	1dfb      	adds	r3, r7, #7
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d106      	bne.n	8019370 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019362:	683a      	ldr	r2, [r7, #0]
 8019364:	4908      	ldr	r1, [pc, #32]	@ (8019388 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8019366:	4b09      	ldr	r3, [pc, #36]	@ (801938c <USBD_FS_ConfigStrDescriptor+0x40>)
 8019368:	0018      	movs	r0, r3
 801936a:	f7ff fd65 	bl	8018e38 <USBD_GetString>
 801936e:	e005      	b.n	801937c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019370:	683a      	ldr	r2, [r7, #0]
 8019372:	4905      	ldr	r1, [pc, #20]	@ (8019388 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8019374:	4b05      	ldr	r3, [pc, #20]	@ (801938c <USBD_FS_ConfigStrDescriptor+0x40>)
 8019376:	0018      	movs	r0, r3
 8019378:	f7ff fd5e 	bl	8018e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 801937c:	4b02      	ldr	r3, [pc, #8]	@ (8019388 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801937e:	0018      	movs	r0, r3
 8019380:	46bd      	mov	sp, r7
 8019382:	b002      	add	sp, #8
 8019384:	bd80      	pop	{r7, pc}
 8019386:	46c0      	nop			@ (mov r8, r8)
 8019388:	20003060 	.word	0x20003060
 801938c:	080204ac 	.word	0x080204ac

08019390 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b082      	sub	sp, #8
 8019394:	af00      	add	r7, sp, #0
 8019396:	0002      	movs	r2, r0
 8019398:	6039      	str	r1, [r7, #0]
 801939a:	1dfb      	adds	r3, r7, #7
 801939c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801939e:	1dfb      	adds	r3, r7, #7
 80193a0:	781b      	ldrb	r3, [r3, #0]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d106      	bne.n	80193b4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80193a6:	683a      	ldr	r2, [r7, #0]
 80193a8:	4908      	ldr	r1, [pc, #32]	@ (80193cc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80193aa:	4b09      	ldr	r3, [pc, #36]	@ (80193d0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80193ac:	0018      	movs	r0, r3
 80193ae:	f7ff fd43 	bl	8018e38 <USBD_GetString>
 80193b2:	e005      	b.n	80193c0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80193b4:	683a      	ldr	r2, [r7, #0]
 80193b6:	4905      	ldr	r1, [pc, #20]	@ (80193cc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80193b8:	4b05      	ldr	r3, [pc, #20]	@ (80193d0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80193ba:	0018      	movs	r0, r3
 80193bc:	f7ff fd3c 	bl	8018e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80193c0:	4b02      	ldr	r3, [pc, #8]	@ (80193cc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80193c2:	0018      	movs	r0, r3
 80193c4:	46bd      	mov	sp, r7
 80193c6:	b002      	add	sp, #8
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	46c0      	nop			@ (mov r8, r8)
 80193cc:	20003060 	.word	0x20003060
 80193d0:	080204b8 	.word	0x080204b8

080193d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b084      	sub	sp, #16
 80193d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80193da:	4b10      	ldr	r3, [pc, #64]	@ (801941c <Get_SerialNum+0x48>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80193e0:	4b0f      	ldr	r3, [pc, #60]	@ (8019420 <Get_SerialNum+0x4c>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80193e6:	4b0f      	ldr	r3, [pc, #60]	@ (8019424 <Get_SerialNum+0x50>)
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80193ec:	68fa      	ldr	r2, [r7, #12]
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	18d3      	adds	r3, r2, r3
 80193f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d00b      	beq.n	8019412 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80193fa:	490b      	ldr	r1, [pc, #44]	@ (8019428 <Get_SerialNum+0x54>)
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	2208      	movs	r2, #8
 8019400:	0018      	movs	r0, r3
 8019402:	f000 f815 	bl	8019430 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019406:	4909      	ldr	r1, [pc, #36]	@ (801942c <Get_SerialNum+0x58>)
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	2204      	movs	r2, #4
 801940c:	0018      	movs	r0, r3
 801940e:	f000 f80f 	bl	8019430 <IntToUnicode>
  }
}
 8019412:	46c0      	nop			@ (mov r8, r8)
 8019414:	46bd      	mov	sp, r7
 8019416:	b004      	add	sp, #16
 8019418:	bd80      	pop	{r7, pc}
 801941a:	46c0      	nop			@ (mov r8, r8)
 801941c:	1ff80050 	.word	0x1ff80050
 8019420:	1ff80054 	.word	0x1ff80054
 8019424:	1ff80058 	.word	0x1ff80058
 8019428:	20000236 	.word	0x20000236
 801942c:	20000246 	.word	0x20000246

08019430 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b086      	sub	sp, #24
 8019434:	af00      	add	r7, sp, #0
 8019436:	60f8      	str	r0, [r7, #12]
 8019438:	60b9      	str	r1, [r7, #8]
 801943a:	1dfb      	adds	r3, r7, #7
 801943c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801943e:	2117      	movs	r1, #23
 8019440:	187b      	adds	r3, r7, r1
 8019442:	2200      	movs	r2, #0
 8019444:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8019446:	187b      	adds	r3, r7, r1
 8019448:	2200      	movs	r2, #0
 801944a:	701a      	strb	r2, [r3, #0]
 801944c:	e02f      	b.n	80194ae <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	0f1b      	lsrs	r3, r3, #28
 8019452:	2b09      	cmp	r3, #9
 8019454:	d80d      	bhi.n	8019472 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	0f1b      	lsrs	r3, r3, #28
 801945a:	b2da      	uxtb	r2, r3
 801945c:	2317      	movs	r3, #23
 801945e:	18fb      	adds	r3, r7, r3
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	005b      	lsls	r3, r3, #1
 8019464:	0019      	movs	r1, r3
 8019466:	68bb      	ldr	r3, [r7, #8]
 8019468:	185b      	adds	r3, r3, r1
 801946a:	3230      	adds	r2, #48	@ 0x30
 801946c:	b2d2      	uxtb	r2, r2
 801946e:	701a      	strb	r2, [r3, #0]
 8019470:	e00c      	b.n	801948c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	0f1b      	lsrs	r3, r3, #28
 8019476:	b2da      	uxtb	r2, r3
 8019478:	2317      	movs	r3, #23
 801947a:	18fb      	adds	r3, r7, r3
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	005b      	lsls	r3, r3, #1
 8019480:	0019      	movs	r1, r3
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	185b      	adds	r3, r3, r1
 8019486:	3237      	adds	r2, #55	@ 0x37
 8019488:	b2d2      	uxtb	r2, r2
 801948a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	011b      	lsls	r3, r3, #4
 8019490:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019492:	2117      	movs	r1, #23
 8019494:	187b      	adds	r3, r7, r1
 8019496:	781b      	ldrb	r3, [r3, #0]
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	3301      	adds	r3, #1
 801949c:	68ba      	ldr	r2, [r7, #8]
 801949e:	18d3      	adds	r3, r2, r3
 80194a0:	2200      	movs	r2, #0
 80194a2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80194a4:	187b      	adds	r3, r7, r1
 80194a6:	781a      	ldrb	r2, [r3, #0]
 80194a8:	187b      	adds	r3, r7, r1
 80194aa:	3201      	adds	r2, #1
 80194ac:	701a      	strb	r2, [r3, #0]
 80194ae:	2317      	movs	r3, #23
 80194b0:	18fa      	adds	r2, r7, r3
 80194b2:	1dfb      	adds	r3, r7, #7
 80194b4:	7812      	ldrb	r2, [r2, #0]
 80194b6:	781b      	ldrb	r3, [r3, #0]
 80194b8:	429a      	cmp	r2, r3
 80194ba:	d3c8      	bcc.n	801944e <IntToUnicode+0x1e>
  }
}
 80194bc:	46c0      	nop			@ (mov r8, r8)
 80194be:	46c0      	nop			@ (mov r8, r8)
 80194c0:	46bd      	mov	sp, r7
 80194c2:	b006      	add	sp, #24
 80194c4:	bd80      	pop	{r7, pc}
	...

080194c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b082      	sub	sp, #8
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	4a0a      	ldr	r2, [pc, #40]	@ (8019500 <HAL_PCD_MspInit+0x38>)
 80194d6:	4293      	cmp	r3, r2
 80194d8:	d10e      	bne.n	80194f8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80194da:	4b0a      	ldr	r3, [pc, #40]	@ (8019504 <HAL_PCD_MspInit+0x3c>)
 80194dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80194de:	4b09      	ldr	r3, [pc, #36]	@ (8019504 <HAL_PCD_MspInit+0x3c>)
 80194e0:	2180      	movs	r1, #128	@ 0x80
 80194e2:	0409      	lsls	r1, r1, #16
 80194e4:	430a      	orrs	r2, r1
 80194e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80194e8:	2200      	movs	r2, #0
 80194ea:	2100      	movs	r1, #0
 80194ec:	201f      	movs	r0, #31
 80194ee:	f7f3 f8d7 	bl	800c6a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80194f2:	201f      	movs	r0, #31
 80194f4:	f7f3 f8e9 	bl	800c6ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80194f8:	46c0      	nop			@ (mov r8, r8)
 80194fa:	46bd      	mov	sp, r7
 80194fc:	b002      	add	sp, #8
 80194fe:	bd80      	pop	{r7, pc}
 8019500:	40005c00 	.word	0x40005c00
 8019504:	40021000 	.word	0x40021000

08019508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b082      	sub	sp, #8
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019510:	687a      	ldr	r2, [r7, #4]
 8019512:	23bc      	movs	r3, #188	@ 0xbc
 8019514:	009b      	lsls	r3, r3, #2
 8019516:	58d2      	ldr	r2, [r2, r3]
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	21ac      	movs	r1, #172	@ 0xac
 801951c:	0089      	lsls	r1, r1, #2
 801951e:	468c      	mov	ip, r1
 8019520:	4463      	add	r3, ip
 8019522:	0019      	movs	r1, r3
 8019524:	0010      	movs	r0, r2
 8019526:	f7fe fc1d 	bl	8017d64 <USBD_LL_SetupStage>
}
 801952a:	46c0      	nop			@ (mov r8, r8)
 801952c:	46bd      	mov	sp, r7
 801952e:	b002      	add	sp, #8
 8019530:	bd80      	pop	{r7, pc}

08019532 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019532:	b590      	push	{r4, r7, lr}
 8019534:	b083      	sub	sp, #12
 8019536:	af00      	add	r7, sp, #0
 8019538:	6078      	str	r0, [r7, #4]
 801953a:	000a      	movs	r2, r1
 801953c:	1cfb      	adds	r3, r7, #3
 801953e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019540:	687a      	ldr	r2, [r7, #4]
 8019542:	23bc      	movs	r3, #188	@ 0xbc
 8019544:	009b      	lsls	r3, r3, #2
 8019546:	58d4      	ldr	r4, [r2, r3]
 8019548:	1cfb      	adds	r3, r7, #3
 801954a:	781a      	ldrb	r2, [r3, #0]
 801954c:	6878      	ldr	r0, [r7, #4]
 801954e:	23be      	movs	r3, #190	@ 0xbe
 8019550:	0059      	lsls	r1, r3, #1
 8019552:	0013      	movs	r3, r2
 8019554:	009b      	lsls	r3, r3, #2
 8019556:	189b      	adds	r3, r3, r2
 8019558:	00db      	lsls	r3, r3, #3
 801955a:	18c3      	adds	r3, r0, r3
 801955c:	185b      	adds	r3, r3, r1
 801955e:	681a      	ldr	r2, [r3, #0]
 8019560:	1cfb      	adds	r3, r7, #3
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	0019      	movs	r1, r3
 8019566:	0020      	movs	r0, r4
 8019568:	f7fe fc5a 	bl	8017e20 <USBD_LL_DataOutStage>
}
 801956c:	46c0      	nop			@ (mov r8, r8)
 801956e:	46bd      	mov	sp, r7
 8019570:	b003      	add	sp, #12
 8019572:	bd90      	pop	{r4, r7, pc}

08019574 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b082      	sub	sp, #8
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]
 801957c:	000a      	movs	r2, r1
 801957e:	1cfb      	adds	r3, r7, #3
 8019580:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019582:	687a      	ldr	r2, [r7, #4]
 8019584:	23bc      	movs	r3, #188	@ 0xbc
 8019586:	009b      	lsls	r3, r3, #2
 8019588:	58d0      	ldr	r0, [r2, r3]
 801958a:	1cfb      	adds	r3, r7, #3
 801958c:	781a      	ldrb	r2, [r3, #0]
 801958e:	6879      	ldr	r1, [r7, #4]
 8019590:	0013      	movs	r3, r2
 8019592:	009b      	lsls	r3, r3, #2
 8019594:	189b      	adds	r3, r3, r2
 8019596:	00db      	lsls	r3, r3, #3
 8019598:	18cb      	adds	r3, r1, r3
 801959a:	333c      	adds	r3, #60	@ 0x3c
 801959c:	681a      	ldr	r2, [r3, #0]
 801959e:	1cfb      	adds	r3, r7, #3
 80195a0:	781b      	ldrb	r3, [r3, #0]
 80195a2:	0019      	movs	r1, r3
 80195a4:	f7fe fcbe 	bl	8017f24 <USBD_LL_DataInStage>
}
 80195a8:	46c0      	nop			@ (mov r8, r8)
 80195aa:	46bd      	mov	sp, r7
 80195ac:	b002      	add	sp, #8
 80195ae:	bd80      	pop	{r7, pc}

080195b0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b082      	sub	sp, #8
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80195b8:	687a      	ldr	r2, [r7, #4]
 80195ba:	23bc      	movs	r3, #188	@ 0xbc
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	58d3      	ldr	r3, [r2, r3]
 80195c0:	0018      	movs	r0, r3
 80195c2:	f7fe fdf5 	bl	80181b0 <USBD_LL_SOF>
}
 80195c6:	46c0      	nop			@ (mov r8, r8)
 80195c8:	46bd      	mov	sp, r7
 80195ca:	b002      	add	sp, #8
 80195cc:	bd80      	pop	{r7, pc}

080195ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195ce:	b580      	push	{r7, lr}
 80195d0:	b084      	sub	sp, #16
 80195d2:	af00      	add	r7, sp, #0
 80195d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80195d6:	230f      	movs	r3, #15
 80195d8:	18fb      	adds	r3, r7, r3
 80195da:	2201      	movs	r2, #1
 80195dc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	689b      	ldr	r3, [r3, #8]
 80195e2:	2b02      	cmp	r3, #2
 80195e4:	d001      	beq.n	80195ea <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80195e6:	f7ed ff0b 	bl	8007400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80195ea:	687a      	ldr	r2, [r7, #4]
 80195ec:	23bc      	movs	r3, #188	@ 0xbc
 80195ee:	009b      	lsls	r3, r3, #2
 80195f0:	58d2      	ldr	r2, [r2, r3]
 80195f2:	230f      	movs	r3, #15
 80195f4:	18fb      	adds	r3, r7, r3
 80195f6:	781b      	ldrb	r3, [r3, #0]
 80195f8:	0019      	movs	r1, r3
 80195fa:	0010      	movs	r0, r2
 80195fc:	f7fe fd97 	bl	801812e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019600:	687a      	ldr	r2, [r7, #4]
 8019602:	23bc      	movs	r3, #188	@ 0xbc
 8019604:	009b      	lsls	r3, r3, #2
 8019606:	58d3      	ldr	r3, [r2, r3]
 8019608:	0018      	movs	r0, r3
 801960a:	f7fe fd48 	bl	801809e <USBD_LL_Reset>
}
 801960e:	46c0      	nop			@ (mov r8, r8)
 8019610:	46bd      	mov	sp, r7
 8019612:	b004      	add	sp, #16
 8019614:	bd80      	pop	{r7, pc}
	...

08019618 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b082      	sub	sp, #8
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019620:	687a      	ldr	r2, [r7, #4]
 8019622:	23bc      	movs	r3, #188	@ 0xbc
 8019624:	009b      	lsls	r3, r3, #2
 8019626:	58d3      	ldr	r3, [r2, r3]
 8019628:	0018      	movs	r0, r3
 801962a:	f7fe fd91 	bl	8018150 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	699b      	ldr	r3, [r3, #24]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d005      	beq.n	8019642 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019636:	4b05      	ldr	r3, [pc, #20]	@ (801964c <HAL_PCD_SuspendCallback+0x34>)
 8019638:	691a      	ldr	r2, [r3, #16]
 801963a:	4b04      	ldr	r3, [pc, #16]	@ (801964c <HAL_PCD_SuspendCallback+0x34>)
 801963c:	2106      	movs	r1, #6
 801963e:	430a      	orrs	r2, r1
 8019640:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8019642:	46c0      	nop			@ (mov r8, r8)
 8019644:	46bd      	mov	sp, r7
 8019646:	b002      	add	sp, #8
 8019648:	bd80      	pop	{r7, pc}
 801964a:	46c0      	nop			@ (mov r8, r8)
 801964c:	e000ed00 	.word	0xe000ed00

08019650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b082      	sub	sp, #8
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	699b      	ldr	r3, [r3, #24]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d007      	beq.n	8019670 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019660:	4b09      	ldr	r3, [pc, #36]	@ (8019688 <HAL_PCD_ResumeCallback+0x38>)
 8019662:	691a      	ldr	r2, [r3, #16]
 8019664:	4b08      	ldr	r3, [pc, #32]	@ (8019688 <HAL_PCD_ResumeCallback+0x38>)
 8019666:	2106      	movs	r1, #6
 8019668:	438a      	bics	r2, r1
 801966a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801966c:	f000 fa44 	bl	8019af8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019670:	687a      	ldr	r2, [r7, #4]
 8019672:	23bc      	movs	r3, #188	@ 0xbc
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	58d3      	ldr	r3, [r2, r3]
 8019678:	0018      	movs	r0, r3
 801967a:	f7fe fd81 	bl	8018180 <USBD_LL_Resume>
}
 801967e:	46c0      	nop			@ (mov r8, r8)
 8019680:	46bd      	mov	sp, r7
 8019682:	b002      	add	sp, #8
 8019684:	bd80      	pop	{r7, pc}
 8019686:	46c0      	nop			@ (mov r8, r8)
 8019688:	e000ed00 	.word	0xe000ed00

0801968c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b082      	sub	sp, #8
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8019694:	4a2d      	ldr	r2, [pc, #180]	@ (801974c <USBD_LL_Init+0xc0>)
 8019696:	23bc      	movs	r3, #188	@ 0xbc
 8019698:	009b      	lsls	r3, r3, #2
 801969a:	6879      	ldr	r1, [r7, #4]
 801969c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801969e:	687a      	ldr	r2, [r7, #4]
 80196a0:	23b0      	movs	r3, #176	@ 0xb0
 80196a2:	009b      	lsls	r3, r3, #2
 80196a4:	4929      	ldr	r1, [pc, #164]	@ (801974c <USBD_LL_Init+0xc0>)
 80196a6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80196a8:	4b28      	ldr	r3, [pc, #160]	@ (801974c <USBD_LL_Init+0xc0>)
 80196aa:	4a29      	ldr	r2, [pc, #164]	@ (8019750 <USBD_LL_Init+0xc4>)
 80196ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80196ae:	4b27      	ldr	r3, [pc, #156]	@ (801974c <USBD_LL_Init+0xc0>)
 80196b0:	2208      	movs	r2, #8
 80196b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80196b4:	4b25      	ldr	r3, [pc, #148]	@ (801974c <USBD_LL_Init+0xc0>)
 80196b6:	2202      	movs	r2, #2
 80196b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80196ba:	4b24      	ldr	r3, [pc, #144]	@ (801974c <USBD_LL_Init+0xc0>)
 80196bc:	2202      	movs	r2, #2
 80196be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80196c0:	4b22      	ldr	r3, [pc, #136]	@ (801974c <USBD_LL_Init+0xc0>)
 80196c2:	2200      	movs	r2, #0
 80196c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80196c6:	4b21      	ldr	r3, [pc, #132]	@ (801974c <USBD_LL_Init+0xc0>)
 80196c8:	2200      	movs	r2, #0
 80196ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80196cc:	4b1f      	ldr	r3, [pc, #124]	@ (801974c <USBD_LL_Init+0xc0>)
 80196ce:	2200      	movs	r2, #0
 80196d0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80196d2:	4b1e      	ldr	r3, [pc, #120]	@ (801974c <USBD_LL_Init+0xc0>)
 80196d4:	0018      	movs	r0, r3
 80196d6:	f7f6 f90b 	bl	800f8f0 <HAL_PCD_Init>
 80196da:	1e03      	subs	r3, r0, #0
 80196dc:	d001      	beq.n	80196e2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80196de:	f7ed fe8f 	bl	8007400 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80196e2:	687a      	ldr	r2, [r7, #4]
 80196e4:	23b0      	movs	r3, #176	@ 0xb0
 80196e6:	009b      	lsls	r3, r3, #2
 80196e8:	58d0      	ldr	r0, [r2, r3]
 80196ea:	2318      	movs	r3, #24
 80196ec:	2200      	movs	r2, #0
 80196ee:	2100      	movs	r1, #0
 80196f0:	f7f7 fecc 	bl	801148c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80196f4:	687a      	ldr	r2, [r7, #4]
 80196f6:	23b0      	movs	r3, #176	@ 0xb0
 80196f8:	009b      	lsls	r3, r3, #2
 80196fa:	58d0      	ldr	r0, [r2, r3]
 80196fc:	2358      	movs	r3, #88	@ 0x58
 80196fe:	2200      	movs	r2, #0
 8019700:	2180      	movs	r1, #128	@ 0x80
 8019702:	f7f7 fec3 	bl	801148c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019706:	687a      	ldr	r2, [r7, #4]
 8019708:	23b0      	movs	r3, #176	@ 0xb0
 801970a:	009b      	lsls	r3, r3, #2
 801970c:	58d0      	ldr	r0, [r2, r3]
 801970e:	23c0      	movs	r3, #192	@ 0xc0
 8019710:	2200      	movs	r2, #0
 8019712:	2181      	movs	r1, #129	@ 0x81
 8019714:	f7f7 feba 	bl	801148c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019718:	687a      	ldr	r2, [r7, #4]
 801971a:	23b0      	movs	r3, #176	@ 0xb0
 801971c:	009b      	lsls	r3, r3, #2
 801971e:	58d0      	ldr	r0, [r2, r3]
 8019720:	2388      	movs	r3, #136	@ 0x88
 8019722:	005b      	lsls	r3, r3, #1
 8019724:	2200      	movs	r2, #0
 8019726:	2101      	movs	r1, #1
 8019728:	f7f7 feb0 	bl	801148c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801972c:	687a      	ldr	r2, [r7, #4]
 801972e:	23b0      	movs	r3, #176	@ 0xb0
 8019730:	009b      	lsls	r3, r3, #2
 8019732:	58d0      	ldr	r0, [r2, r3]
 8019734:	2380      	movs	r3, #128	@ 0x80
 8019736:	005b      	lsls	r3, r3, #1
 8019738:	2200      	movs	r2, #0
 801973a:	2182      	movs	r1, #130	@ 0x82
 801973c:	f7f7 fea6 	bl	801148c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019740:	2300      	movs	r3, #0
}
 8019742:	0018      	movs	r0, r3
 8019744:	46bd      	mov	sp, r7
 8019746:	b002      	add	sp, #8
 8019748:	bd80      	pop	{r7, pc}
 801974a:	46c0      	nop			@ (mov r8, r8)
 801974c:	20003260 	.word	0x20003260
 8019750:	40005c00 	.word	0x40005c00

08019754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019756:	b085      	sub	sp, #20
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801975c:	210f      	movs	r1, #15
 801975e:	187b      	adds	r3, r7, r1
 8019760:	2200      	movs	r2, #0
 8019762:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019764:	260e      	movs	r6, #14
 8019766:	19bb      	adds	r3, r7, r6
 8019768:	2200      	movs	r2, #0
 801976a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801976c:	687a      	ldr	r2, [r7, #4]
 801976e:	23b0      	movs	r3, #176	@ 0xb0
 8019770:	009b      	lsls	r3, r3, #2
 8019772:	58d3      	ldr	r3, [r2, r3]
 8019774:	000d      	movs	r5, r1
 8019776:	187c      	adds	r4, r7, r1
 8019778:	0018      	movs	r0, r3
 801977a:	f7f6 f9b9 	bl	800faf0 <HAL_PCD_Start>
 801977e:	0003      	movs	r3, r0
 8019780:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019782:	19bc      	adds	r4, r7, r6
 8019784:	197b      	adds	r3, r7, r5
 8019786:	781b      	ldrb	r3, [r3, #0]
 8019788:	0018      	movs	r0, r3
 801978a:	f000 f9bc 	bl	8019b06 <USBD_Get_USB_Status>
 801978e:	0003      	movs	r3, r0
 8019790:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019792:	19bb      	adds	r3, r7, r6
 8019794:	781b      	ldrb	r3, [r3, #0]
}
 8019796:	0018      	movs	r0, r3
 8019798:	46bd      	mov	sp, r7
 801979a:	b005      	add	sp, #20
 801979c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801979e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801979e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197a0:	b085      	sub	sp, #20
 80197a2:	af00      	add	r7, sp, #0
 80197a4:	6078      	str	r0, [r7, #4]
 80197a6:	000c      	movs	r4, r1
 80197a8:	0010      	movs	r0, r2
 80197aa:	0019      	movs	r1, r3
 80197ac:	1cfb      	adds	r3, r7, #3
 80197ae:	1c22      	adds	r2, r4, #0
 80197b0:	701a      	strb	r2, [r3, #0]
 80197b2:	1cbb      	adds	r3, r7, #2
 80197b4:	1c02      	adds	r2, r0, #0
 80197b6:	701a      	strb	r2, [r3, #0]
 80197b8:	003b      	movs	r3, r7
 80197ba:	1c0a      	adds	r2, r1, #0
 80197bc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197be:	260f      	movs	r6, #15
 80197c0:	19bb      	adds	r3, r7, r6
 80197c2:	2200      	movs	r2, #0
 80197c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197c6:	250e      	movs	r5, #14
 80197c8:	197b      	adds	r3, r7, r5
 80197ca:	2200      	movs	r2, #0
 80197cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80197ce:	687a      	ldr	r2, [r7, #4]
 80197d0:	23b0      	movs	r3, #176	@ 0xb0
 80197d2:	009b      	lsls	r3, r3, #2
 80197d4:	58d0      	ldr	r0, [r2, r3]
 80197d6:	19bc      	adds	r4, r7, r6
 80197d8:	1cbb      	adds	r3, r7, #2
 80197da:	781d      	ldrb	r5, [r3, #0]
 80197dc:	003b      	movs	r3, r7
 80197de:	881a      	ldrh	r2, [r3, #0]
 80197e0:	1cfb      	adds	r3, r7, #3
 80197e2:	7819      	ldrb	r1, [r3, #0]
 80197e4:	002b      	movs	r3, r5
 80197e6:	f7f6 fb18 	bl	800fe1a <HAL_PCD_EP_Open>
 80197ea:	0003      	movs	r3, r0
 80197ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80197ee:	250e      	movs	r5, #14
 80197f0:	197c      	adds	r4, r7, r5
 80197f2:	19bb      	adds	r3, r7, r6
 80197f4:	781b      	ldrb	r3, [r3, #0]
 80197f6:	0018      	movs	r0, r3
 80197f8:	f000 f985 	bl	8019b06 <USBD_Get_USB_Status>
 80197fc:	0003      	movs	r3, r0
 80197fe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019800:	197b      	adds	r3, r7, r5
 8019802:	781b      	ldrb	r3, [r3, #0]
}
 8019804:	0018      	movs	r0, r3
 8019806:	46bd      	mov	sp, r7
 8019808:	b005      	add	sp, #20
 801980a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801980c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801980c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801980e:	b085      	sub	sp, #20
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
 8019814:	000a      	movs	r2, r1
 8019816:	1cfb      	adds	r3, r7, #3
 8019818:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801981a:	210f      	movs	r1, #15
 801981c:	187b      	adds	r3, r7, r1
 801981e:	2200      	movs	r2, #0
 8019820:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019822:	260e      	movs	r6, #14
 8019824:	19bb      	adds	r3, r7, r6
 8019826:	2200      	movs	r2, #0
 8019828:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801982a:	687a      	ldr	r2, [r7, #4]
 801982c:	23b0      	movs	r3, #176	@ 0xb0
 801982e:	009b      	lsls	r3, r3, #2
 8019830:	58d2      	ldr	r2, [r2, r3]
 8019832:	000d      	movs	r5, r1
 8019834:	187c      	adds	r4, r7, r1
 8019836:	1cfb      	adds	r3, r7, #3
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	0019      	movs	r1, r3
 801983c:	0010      	movs	r0, r2
 801983e:	f7f6 fb5b 	bl	800fef8 <HAL_PCD_EP_Close>
 8019842:	0003      	movs	r3, r0
 8019844:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019846:	19bc      	adds	r4, r7, r6
 8019848:	197b      	adds	r3, r7, r5
 801984a:	781b      	ldrb	r3, [r3, #0]
 801984c:	0018      	movs	r0, r3
 801984e:	f000 f95a 	bl	8019b06 <USBD_Get_USB_Status>
 8019852:	0003      	movs	r3, r0
 8019854:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019856:	19bb      	adds	r3, r7, r6
 8019858:	781b      	ldrb	r3, [r3, #0]
}
 801985a:	0018      	movs	r0, r3
 801985c:	46bd      	mov	sp, r7
 801985e:	b005      	add	sp, #20
 8019860:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019862 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019864:	b085      	sub	sp, #20
 8019866:	af00      	add	r7, sp, #0
 8019868:	6078      	str	r0, [r7, #4]
 801986a:	000a      	movs	r2, r1
 801986c:	1cfb      	adds	r3, r7, #3
 801986e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019870:	210f      	movs	r1, #15
 8019872:	187b      	adds	r3, r7, r1
 8019874:	2200      	movs	r2, #0
 8019876:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019878:	260e      	movs	r6, #14
 801987a:	19bb      	adds	r3, r7, r6
 801987c:	2200      	movs	r2, #0
 801987e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019880:	687a      	ldr	r2, [r7, #4]
 8019882:	23b0      	movs	r3, #176	@ 0xb0
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	58d2      	ldr	r2, [r2, r3]
 8019888:	000d      	movs	r5, r1
 801988a:	187c      	adds	r4, r7, r1
 801988c:	1cfb      	adds	r3, r7, #3
 801988e:	781b      	ldrb	r3, [r3, #0]
 8019890:	0019      	movs	r1, r3
 8019892:	0010      	movs	r0, r2
 8019894:	f7f6 fc0d 	bl	80100b2 <HAL_PCD_EP_SetStall>
 8019898:	0003      	movs	r3, r0
 801989a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801989c:	19bc      	adds	r4, r7, r6
 801989e:	197b      	adds	r3, r7, r5
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	0018      	movs	r0, r3
 80198a4:	f000 f92f 	bl	8019b06 <USBD_Get_USB_Status>
 80198a8:	0003      	movs	r3, r0
 80198aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80198ac:	19bb      	adds	r3, r7, r6
 80198ae:	781b      	ldrb	r3, [r3, #0]
}
 80198b0:	0018      	movs	r0, r3
 80198b2:	46bd      	mov	sp, r7
 80198b4:	b005      	add	sp, #20
 80198b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080198b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80198b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198ba:	b085      	sub	sp, #20
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
 80198c0:	000a      	movs	r2, r1
 80198c2:	1cfb      	adds	r3, r7, #3
 80198c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198c6:	210f      	movs	r1, #15
 80198c8:	187b      	adds	r3, r7, r1
 80198ca:	2200      	movs	r2, #0
 80198cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198ce:	260e      	movs	r6, #14
 80198d0:	19bb      	adds	r3, r7, r6
 80198d2:	2200      	movs	r2, #0
 80198d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80198d6:	687a      	ldr	r2, [r7, #4]
 80198d8:	23b0      	movs	r3, #176	@ 0xb0
 80198da:	009b      	lsls	r3, r3, #2
 80198dc:	58d2      	ldr	r2, [r2, r3]
 80198de:	000d      	movs	r5, r1
 80198e0:	187c      	adds	r4, r7, r1
 80198e2:	1cfb      	adds	r3, r7, #3
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	0019      	movs	r1, r3
 80198e8:	0010      	movs	r0, r2
 80198ea:	f7f6 fc3e 	bl	801016a <HAL_PCD_EP_ClrStall>
 80198ee:	0003      	movs	r3, r0
 80198f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198f2:	19bc      	adds	r4, r7, r6
 80198f4:	197b      	adds	r3, r7, r5
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	0018      	movs	r0, r3
 80198fa:	f000 f904 	bl	8019b06 <USBD_Get_USB_Status>
 80198fe:	0003      	movs	r3, r0
 8019900:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019902:	19bb      	adds	r3, r7, r6
 8019904:	781b      	ldrb	r3, [r3, #0]
}
 8019906:	0018      	movs	r0, r3
 8019908:	46bd      	mov	sp, r7
 801990a:	b005      	add	sp, #20
 801990c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801990e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801990e:	b580      	push	{r7, lr}
 8019910:	b084      	sub	sp, #16
 8019912:	af00      	add	r7, sp, #0
 8019914:	6078      	str	r0, [r7, #4]
 8019916:	000a      	movs	r2, r1
 8019918:	1cfb      	adds	r3, r7, #3
 801991a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801991c:	687a      	ldr	r2, [r7, #4]
 801991e:	23b0      	movs	r3, #176	@ 0xb0
 8019920:	009b      	lsls	r3, r3, #2
 8019922:	58d3      	ldr	r3, [r2, r3]
 8019924:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019926:	1cfb      	adds	r3, r7, #3
 8019928:	781b      	ldrb	r3, [r3, #0]
 801992a:	b25b      	sxtb	r3, r3
 801992c:	2b00      	cmp	r3, #0
 801992e:	da0d      	bge.n	801994c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019930:	1cfb      	adds	r3, r7, #3
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	227f      	movs	r2, #127	@ 0x7f
 8019936:	4013      	ands	r3, r2
 8019938:	68f9      	ldr	r1, [r7, #12]
 801993a:	1c5a      	adds	r2, r3, #1
 801993c:	0013      	movs	r3, r2
 801993e:	009b      	lsls	r3, r3, #2
 8019940:	189b      	adds	r3, r3, r2
 8019942:	00db      	lsls	r3, r3, #3
 8019944:	18cb      	adds	r3, r1, r3
 8019946:	3302      	adds	r3, #2
 8019948:	781b      	ldrb	r3, [r3, #0]
 801994a:	e00d      	b.n	8019968 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801994c:	1cfb      	adds	r3, r7, #3
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	227f      	movs	r2, #127	@ 0x7f
 8019952:	401a      	ands	r2, r3
 8019954:	68f8      	ldr	r0, [r7, #12]
 8019956:	23b5      	movs	r3, #181	@ 0xb5
 8019958:	0059      	lsls	r1, r3, #1
 801995a:	0013      	movs	r3, r2
 801995c:	009b      	lsls	r3, r3, #2
 801995e:	189b      	adds	r3, r3, r2
 8019960:	00db      	lsls	r3, r3, #3
 8019962:	18c3      	adds	r3, r0, r3
 8019964:	185b      	adds	r3, r3, r1
 8019966:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019968:	0018      	movs	r0, r3
 801996a:	46bd      	mov	sp, r7
 801996c:	b004      	add	sp, #16
 801996e:	bd80      	pop	{r7, pc}

08019970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019972:	b085      	sub	sp, #20
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
 8019978:	000a      	movs	r2, r1
 801997a:	1cfb      	adds	r3, r7, #3
 801997c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801997e:	210f      	movs	r1, #15
 8019980:	187b      	adds	r3, r7, r1
 8019982:	2200      	movs	r2, #0
 8019984:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019986:	260e      	movs	r6, #14
 8019988:	19bb      	adds	r3, r7, r6
 801998a:	2200      	movs	r2, #0
 801998c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801998e:	687a      	ldr	r2, [r7, #4]
 8019990:	23b0      	movs	r3, #176	@ 0xb0
 8019992:	009b      	lsls	r3, r3, #2
 8019994:	58d2      	ldr	r2, [r2, r3]
 8019996:	000d      	movs	r5, r1
 8019998:	187c      	adds	r4, r7, r1
 801999a:	1cfb      	adds	r3, r7, #3
 801999c:	781b      	ldrb	r3, [r3, #0]
 801999e:	0019      	movs	r1, r3
 80199a0:	0010      	movs	r0, r2
 80199a2:	f7f6 fa0f 	bl	800fdc4 <HAL_PCD_SetAddress>
 80199a6:	0003      	movs	r3, r0
 80199a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199aa:	19bc      	adds	r4, r7, r6
 80199ac:	197b      	adds	r3, r7, r5
 80199ae:	781b      	ldrb	r3, [r3, #0]
 80199b0:	0018      	movs	r0, r3
 80199b2:	f000 f8a8 	bl	8019b06 <USBD_Get_USB_Status>
 80199b6:	0003      	movs	r3, r0
 80199b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80199ba:	19bb      	adds	r3, r7, r6
 80199bc:	781b      	ldrb	r3, [r3, #0]
}
 80199be:	0018      	movs	r0, r3
 80199c0:	46bd      	mov	sp, r7
 80199c2:	b005      	add	sp, #20
 80199c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080199c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80199c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199c8:	b087      	sub	sp, #28
 80199ca:	af00      	add	r7, sp, #0
 80199cc:	60f8      	str	r0, [r7, #12]
 80199ce:	0008      	movs	r0, r1
 80199d0:	607a      	str	r2, [r7, #4]
 80199d2:	0019      	movs	r1, r3
 80199d4:	230b      	movs	r3, #11
 80199d6:	18fb      	adds	r3, r7, r3
 80199d8:	1c02      	adds	r2, r0, #0
 80199da:	701a      	strb	r2, [r3, #0]
 80199dc:	2408      	movs	r4, #8
 80199de:	193b      	adds	r3, r7, r4
 80199e0:	1c0a      	adds	r2, r1, #0
 80199e2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199e4:	2117      	movs	r1, #23
 80199e6:	187b      	adds	r3, r7, r1
 80199e8:	2200      	movs	r2, #0
 80199ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199ec:	2516      	movs	r5, #22
 80199ee:	197b      	adds	r3, r7, r5
 80199f0:	2200      	movs	r2, #0
 80199f2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80199f4:	68fa      	ldr	r2, [r7, #12]
 80199f6:	23b0      	movs	r3, #176	@ 0xb0
 80199f8:	009b      	lsls	r3, r3, #2
 80199fa:	58d0      	ldr	r0, [r2, r3]
 80199fc:	193b      	adds	r3, r7, r4
 80199fe:	881d      	ldrh	r5, [r3, #0]
 8019a00:	000e      	movs	r6, r1
 8019a02:	187c      	adds	r4, r7, r1
 8019a04:	687a      	ldr	r2, [r7, #4]
 8019a06:	230b      	movs	r3, #11
 8019a08:	18fb      	adds	r3, r7, r3
 8019a0a:	7819      	ldrb	r1, [r3, #0]
 8019a0c:	002b      	movs	r3, r5
 8019a0e:	f7f6 fb14 	bl	801003a <HAL_PCD_EP_Transmit>
 8019a12:	0003      	movs	r3, r0
 8019a14:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a16:	2516      	movs	r5, #22
 8019a18:	197c      	adds	r4, r7, r5
 8019a1a:	19bb      	adds	r3, r7, r6
 8019a1c:	781b      	ldrb	r3, [r3, #0]
 8019a1e:	0018      	movs	r0, r3
 8019a20:	f000 f871 	bl	8019b06 <USBD_Get_USB_Status>
 8019a24:	0003      	movs	r3, r0
 8019a26:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019a28:	197b      	adds	r3, r7, r5
 8019a2a:	781b      	ldrb	r3, [r3, #0]
}
 8019a2c:	0018      	movs	r0, r3
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	b007      	add	sp, #28
 8019a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a36:	b087      	sub	sp, #28
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	60f8      	str	r0, [r7, #12]
 8019a3c:	0008      	movs	r0, r1
 8019a3e:	607a      	str	r2, [r7, #4]
 8019a40:	0019      	movs	r1, r3
 8019a42:	230b      	movs	r3, #11
 8019a44:	18fb      	adds	r3, r7, r3
 8019a46:	1c02      	adds	r2, r0, #0
 8019a48:	701a      	strb	r2, [r3, #0]
 8019a4a:	2408      	movs	r4, #8
 8019a4c:	193b      	adds	r3, r7, r4
 8019a4e:	1c0a      	adds	r2, r1, #0
 8019a50:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a52:	2117      	movs	r1, #23
 8019a54:	187b      	adds	r3, r7, r1
 8019a56:	2200      	movs	r2, #0
 8019a58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a5a:	2516      	movs	r5, #22
 8019a5c:	197b      	adds	r3, r7, r5
 8019a5e:	2200      	movs	r2, #0
 8019a60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019a62:	68fa      	ldr	r2, [r7, #12]
 8019a64:	23b0      	movs	r3, #176	@ 0xb0
 8019a66:	009b      	lsls	r3, r3, #2
 8019a68:	58d0      	ldr	r0, [r2, r3]
 8019a6a:	193b      	adds	r3, r7, r4
 8019a6c:	881d      	ldrh	r5, [r3, #0]
 8019a6e:	000e      	movs	r6, r1
 8019a70:	187c      	adds	r4, r7, r1
 8019a72:	687a      	ldr	r2, [r7, #4]
 8019a74:	230b      	movs	r3, #11
 8019a76:	18fb      	adds	r3, r7, r3
 8019a78:	7819      	ldrb	r1, [r3, #0]
 8019a7a:	002b      	movs	r3, r5
 8019a7c:	f7f6 fa8d 	bl	800ff9a <HAL_PCD_EP_Receive>
 8019a80:	0003      	movs	r3, r0
 8019a82:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a84:	2516      	movs	r5, #22
 8019a86:	197c      	adds	r4, r7, r5
 8019a88:	19bb      	adds	r3, r7, r6
 8019a8a:	781b      	ldrb	r3, [r3, #0]
 8019a8c:	0018      	movs	r0, r3
 8019a8e:	f000 f83a 	bl	8019b06 <USBD_Get_USB_Status>
 8019a92:	0003      	movs	r3, r0
 8019a94:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019a96:	197b      	adds	r3, r7, r5
 8019a98:	781b      	ldrb	r3, [r3, #0]
}
 8019a9a:	0018      	movs	r0, r3
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	b007      	add	sp, #28
 8019aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019aa2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019aa2:	b580      	push	{r7, lr}
 8019aa4:	b082      	sub	sp, #8
 8019aa6:	af00      	add	r7, sp, #0
 8019aa8:	6078      	str	r0, [r7, #4]
 8019aaa:	000a      	movs	r2, r1
 8019aac:	1cfb      	adds	r3, r7, #3
 8019aae:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019ab0:	687a      	ldr	r2, [r7, #4]
 8019ab2:	23b0      	movs	r3, #176	@ 0xb0
 8019ab4:	009b      	lsls	r3, r3, #2
 8019ab6:	58d2      	ldr	r2, [r2, r3]
 8019ab8:	1cfb      	adds	r3, r7, #3
 8019aba:	781b      	ldrb	r3, [r3, #0]
 8019abc:	0019      	movs	r1, r3
 8019abe:	0010      	movs	r0, r2
 8019ac0:	f7f6 faa2 	bl	8010008 <HAL_PCD_EP_GetRxCount>
 8019ac4:	0003      	movs	r3, r0
}
 8019ac6:	0018      	movs	r0, r3
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	b002      	add	sp, #8
 8019acc:	bd80      	pop	{r7, pc}
	...

08019ad0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b082      	sub	sp, #8
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019ad8:	4b02      	ldr	r3, [pc, #8]	@ (8019ae4 <USBD_static_malloc+0x14>)
}
 8019ada:	0018      	movs	r0, r3
 8019adc:	46bd      	mov	sp, r7
 8019ade:	b002      	add	sp, #8
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	46c0      	nop			@ (mov r8, r8)
 8019ae4:	20003554 	.word	0x20003554

08019ae8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b082      	sub	sp, #8
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]

}
 8019af0:	46c0      	nop			@ (mov r8, r8)
 8019af2:	46bd      	mov	sp, r7
 8019af4:	b002      	add	sp, #8
 8019af6:	bd80      	pop	{r7, pc}

08019af8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019afc:	f7ed fb96 	bl	800722c <SystemClock_Config>
}
 8019b00:	46c0      	nop			@ (mov r8, r8)
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}

08019b06 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019b06:	b580      	push	{r7, lr}
 8019b08:	b084      	sub	sp, #16
 8019b0a:	af00      	add	r7, sp, #0
 8019b0c:	0002      	movs	r2, r0
 8019b0e:	1dfb      	adds	r3, r7, #7
 8019b10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b12:	230f      	movs	r3, #15
 8019b14:	18fb      	adds	r3, r7, r3
 8019b16:	2200      	movs	r2, #0
 8019b18:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8019b1a:	1dfb      	adds	r3, r7, #7
 8019b1c:	781b      	ldrb	r3, [r3, #0]
 8019b1e:	2b03      	cmp	r3, #3
 8019b20:	d017      	beq.n	8019b52 <USBD_Get_USB_Status+0x4c>
 8019b22:	dc1b      	bgt.n	8019b5c <USBD_Get_USB_Status+0x56>
 8019b24:	2b02      	cmp	r3, #2
 8019b26:	d00f      	beq.n	8019b48 <USBD_Get_USB_Status+0x42>
 8019b28:	dc18      	bgt.n	8019b5c <USBD_Get_USB_Status+0x56>
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d002      	beq.n	8019b34 <USBD_Get_USB_Status+0x2e>
 8019b2e:	2b01      	cmp	r3, #1
 8019b30:	d005      	beq.n	8019b3e <USBD_Get_USB_Status+0x38>
 8019b32:	e013      	b.n	8019b5c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019b34:	230f      	movs	r3, #15
 8019b36:	18fb      	adds	r3, r7, r3
 8019b38:	2200      	movs	r2, #0
 8019b3a:	701a      	strb	r2, [r3, #0]
    break;
 8019b3c:	e013      	b.n	8019b66 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b3e:	230f      	movs	r3, #15
 8019b40:	18fb      	adds	r3, r7, r3
 8019b42:	2202      	movs	r2, #2
 8019b44:	701a      	strb	r2, [r3, #0]
    break;
 8019b46:	e00e      	b.n	8019b66 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b48:	230f      	movs	r3, #15
 8019b4a:	18fb      	adds	r3, r7, r3
 8019b4c:	2201      	movs	r2, #1
 8019b4e:	701a      	strb	r2, [r3, #0]
    break;
 8019b50:	e009      	b.n	8019b66 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b52:	230f      	movs	r3, #15
 8019b54:	18fb      	adds	r3, r7, r3
 8019b56:	2202      	movs	r2, #2
 8019b58:	701a      	strb	r2, [r3, #0]
    break;
 8019b5a:	e004      	b.n	8019b66 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8019b5c:	230f      	movs	r3, #15
 8019b5e:	18fb      	adds	r3, r7, r3
 8019b60:	2202      	movs	r2, #2
 8019b62:	701a      	strb	r2, [r3, #0]
    break;
 8019b64:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8019b66:	230f      	movs	r3, #15
 8019b68:	18fb      	adds	r3, r7, r3
 8019b6a:	781b      	ldrb	r3, [r3, #0]
}
 8019b6c:	0018      	movs	r0, r3
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	b004      	add	sp, #16
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <arm_cfft_radix4by2_q31>:
 8019b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b76:	465f      	mov	r7, fp
 8019b78:	4656      	mov	r6, sl
 8019b7a:	464d      	mov	r5, r9
 8019b7c:	4644      	mov	r4, r8
 8019b7e:	000b      	movs	r3, r1
 8019b80:	b4f0      	push	{r4, r5, r6, r7}
 8019b82:	085b      	lsrs	r3, r3, #1
 8019b84:	b08f      	sub	sp, #60	@ 0x3c
 8019b86:	910a      	str	r1, [sp, #40]	@ 0x28
 8019b88:	0007      	movs	r7, r0
 8019b8a:	9009      	str	r0, [sp, #36]	@ 0x24
 8019b8c:	0011      	movs	r1, r2
 8019b8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019b90:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d100      	bne.n	8019b98 <arm_cfft_radix4by2_q31+0x24>
 8019b96:	e0a0      	b.n	8019cda <arm_cfft_radix4by2_q31+0x166>
 8019b98:	0002      	movs	r2, r0
 8019b9a:	00db      	lsls	r3, r3, #3
 8019b9c:	3204      	adds	r2, #4
 8019b9e:	4691      	mov	r9, r2
 8019ba0:	4698      	mov	r8, r3
 8019ba2:	000a      	movs	r2, r1
 8019ba4:	464e      	mov	r6, r9
 8019ba6:	4442      	add	r2, r8
 8019ba8:	4699      	mov	r9, r3
 8019baa:	4688      	mov	r8, r1
 8019bac:	9208      	str	r2, [sp, #32]
 8019bae:	900d      	str	r0, [sp, #52]	@ 0x34
 8019bb0:	4643      	mov	r3, r8
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	469b      	mov	fp, r3
 8019bb6:	4643      	mov	r3, r8
 8019bb8:	685b      	ldr	r3, [r3, #4]
 8019bba:	469a      	mov	sl, r3
 8019bbc:	683b      	ldr	r3, [r7, #0]
 8019bbe:	109c      	asrs	r4, r3, #2
 8019bc0:	464b      	mov	r3, r9
 8019bc2:	58fb      	ldr	r3, [r7, r3]
 8019bc4:	109a      	asrs	r2, r3, #2
 8019bc6:	18a3      	adds	r3, r4, r2
 8019bc8:	603b      	str	r3, [r7, #0]
 8019bca:	6833      	ldr	r3, [r6, #0]
 8019bcc:	1aa4      	subs	r4, r4, r2
 8019bce:	109d      	asrs	r5, r3, #2
 8019bd0:	464b      	mov	r3, r9
 8019bd2:	58f3      	ldr	r3, [r6, r3]
 8019bd4:	17e2      	asrs	r2, r4, #31
 8019bd6:	109b      	asrs	r3, r3, #2
 8019bd8:	18e9      	adds	r1, r5, r3
 8019bda:	6031      	str	r1, [r6, #0]
 8019bdc:	0011      	movs	r1, r2
 8019bde:	465a      	mov	r2, fp
 8019be0:	17d2      	asrs	r2, r2, #31
 8019be2:	0010      	movs	r0, r2
 8019be4:	4652      	mov	r2, sl
 8019be6:	1aed      	subs	r5, r5, r3
 8019be8:	17eb      	asrs	r3, r5, #31
 8019bea:	17d2      	asrs	r2, r2, #31
 8019bec:	9307      	str	r3, [sp, #28]
 8019bee:	9204      	str	r2, [sp, #16]
 8019bf0:	0003      	movs	r3, r0
 8019bf2:	465a      	mov	r2, fp
 8019bf4:	9006      	str	r0, [sp, #24]
 8019bf6:	0020      	movs	r0, r4
 8019bf8:	9105      	str	r1, [sp, #20]
 8019bfa:	f7e6 fce1 	bl	80005c0 <__aeabi_lmul>
 8019bfe:	2280      	movs	r2, #128	@ 0x80
 8019c00:	2300      	movs	r3, #0
 8019c02:	0612      	lsls	r2, r2, #24
 8019c04:	1880      	adds	r0, r0, r2
 8019c06:	4159      	adcs	r1, r3
 8019c08:	2300      	movs	r3, #0
 8019c0a:	9101      	str	r1, [sp, #4]
 8019c0c:	9300      	str	r3, [sp, #0]
 8019c0e:	4652      	mov	r2, sl
 8019c10:	9b04      	ldr	r3, [sp, #16]
 8019c12:	0028      	movs	r0, r5
 8019c14:	17e9      	asrs	r1, r5, #31
 8019c16:	f7e6 fcd3 	bl	80005c0 <__aeabi_lmul>
 8019c1a:	9a00      	ldr	r2, [sp, #0]
 8019c1c:	9b01      	ldr	r3, [sp, #4]
 8019c1e:	1880      	adds	r0, r0, r2
 8019c20:	4159      	adcs	r1, r3
 8019c22:	2280      	movs	r2, #128	@ 0x80
 8019c24:	2300      	movs	r3, #0
 8019c26:	0612      	lsls	r2, r2, #24
 8019c28:	1880      	adds	r0, r0, r2
 8019c2a:	4159      	adcs	r1, r3
 8019c2c:	464a      	mov	r2, r9
 8019c2e:	004b      	lsls	r3, r1, #1
 8019c30:	50bb      	str	r3, [r7, r2]
 8019c32:	4658      	mov	r0, fp
 8019c34:	002a      	movs	r2, r5
 8019c36:	9b07      	ldr	r3, [sp, #28]
 8019c38:	9906      	ldr	r1, [sp, #24]
 8019c3a:	f7e6 fcc1 	bl	80005c0 <__aeabi_lmul>
 8019c3e:	2280      	movs	r2, #128	@ 0x80
 8019c40:	2300      	movs	r3, #0
 8019c42:	0612      	lsls	r2, r2, #24
 8019c44:	1880      	adds	r0, r0, r2
 8019c46:	4159      	adcs	r1, r3
 8019c48:	2000      	movs	r0, #0
 8019c4a:	9103      	str	r1, [sp, #12]
 8019c4c:	9002      	str	r0, [sp, #8]
 8019c4e:	4652      	mov	r2, sl
 8019c50:	9b04      	ldr	r3, [sp, #16]
 8019c52:	0020      	movs	r0, r4
 8019c54:	9905      	ldr	r1, [sp, #20]
 8019c56:	f7e6 fcb3 	bl	80005c0 <__aeabi_lmul>
 8019c5a:	9a02      	ldr	r2, [sp, #8]
 8019c5c:	9b03      	ldr	r3, [sp, #12]
 8019c5e:	1a12      	subs	r2, r2, r0
 8019c60:	418b      	sbcs	r3, r1
 8019c62:	2080      	movs	r0, #128	@ 0x80
 8019c64:	2100      	movs	r1, #0
 8019c66:	0600      	lsls	r0, r0, #24
 8019c68:	1812      	adds	r2, r2, r0
 8019c6a:	414b      	adcs	r3, r1
 8019c6c:	464a      	mov	r2, r9
 8019c6e:	005b      	lsls	r3, r3, #1
 8019c70:	50b3      	str	r3, [r6, r2]
 8019c72:	2308      	movs	r3, #8
 8019c74:	469c      	mov	ip, r3
 8019c76:	9b08      	ldr	r3, [sp, #32]
 8019c78:	44e0      	add	r8, ip
 8019c7a:	3708      	adds	r7, #8
 8019c7c:	3608      	adds	r6, #8
 8019c7e:	4598      	cmp	r8, r3
 8019c80:	d196      	bne.n	8019bb0 <arm_cfft_radix4by2_q31+0x3c>
 8019c82:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019c84:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019c86:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019c88:	2302      	movs	r3, #2
 8019c8a:	003a      	movs	r2, r7
 8019c8c:	0029      	movs	r1, r5
 8019c8e:	0020      	movs	r0, r4
 8019c90:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8019c92:	f000 f957 	bl	8019f44 <arm_radix4_butterfly_q31>
 8019c96:	46a4      	mov	ip, r4
 8019c98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c9a:	2302      	movs	r3, #2
 8019c9c:	0088      	lsls	r0, r1, #2
 8019c9e:	4460      	add	r0, ip
 8019ca0:	003a      	movs	r2, r7
 8019ca2:	0029      	movs	r1, r5
 8019ca4:	f000 f94e 	bl	8019f44 <arm_radix4_butterfly_q31>
 8019ca8:	46a4      	mov	ip, r4
 8019caa:	0128      	lsls	r0, r5, #4
 8019cac:	4460      	add	r0, ip
 8019cae:	6833      	ldr	r3, [r6, #0]
 8019cb0:	005b      	lsls	r3, r3, #1
 8019cb2:	6033      	str	r3, [r6, #0]
 8019cb4:	6873      	ldr	r3, [r6, #4]
 8019cb6:	005b      	lsls	r3, r3, #1
 8019cb8:	6073      	str	r3, [r6, #4]
 8019cba:	68b3      	ldr	r3, [r6, #8]
 8019cbc:	005b      	lsls	r3, r3, #1
 8019cbe:	60b3      	str	r3, [r6, #8]
 8019cc0:	68f3      	ldr	r3, [r6, #12]
 8019cc2:	005b      	lsls	r3, r3, #1
 8019cc4:	60f3      	str	r3, [r6, #12]
 8019cc6:	3610      	adds	r6, #16
 8019cc8:	42b0      	cmp	r0, r6
 8019cca:	d1f0      	bne.n	8019cae <arm_cfft_radix4by2_q31+0x13a>
 8019ccc:	b00f      	add	sp, #60	@ 0x3c
 8019cce:	bc3c      	pop	{r2, r3, r4, r5}
 8019cd0:	4690      	mov	r8, r2
 8019cd2:	4699      	mov	r9, r3
 8019cd4:	46a2      	mov	sl, r4
 8019cd6:	46ab      	mov	fp, r5
 8019cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cda:	2302      	movs	r3, #2
 8019cdc:	2100      	movs	r1, #0
 8019cde:	0015      	movs	r5, r2
 8019ce0:	f000 f930 	bl	8019f44 <arm_radix4_butterfly_q31>
 8019ce4:	46bc      	mov	ip, r7
 8019ce6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ce8:	002a      	movs	r2, r5
 8019cea:	0098      	lsls	r0, r3, #2
 8019cec:	4460      	add	r0, ip
 8019cee:	2302      	movs	r3, #2
 8019cf0:	2100      	movs	r1, #0
 8019cf2:	f000 f927 	bl	8019f44 <arm_radix4_butterfly_q31>
 8019cf6:	e7e9      	b.n	8019ccc <arm_cfft_radix4by2_q31+0x158>

08019cf8 <arm_cfft_radix4by2_inverse_q31>:
 8019cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cfa:	465f      	mov	r7, fp
 8019cfc:	4656      	mov	r6, sl
 8019cfe:	464d      	mov	r5, r9
 8019d00:	4644      	mov	r4, r8
 8019d02:	000b      	movs	r3, r1
 8019d04:	b4f0      	push	{r4, r5, r6, r7}
 8019d06:	085b      	lsrs	r3, r3, #1
 8019d08:	b08f      	sub	sp, #60	@ 0x3c
 8019d0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8019d0c:	0007      	movs	r7, r0
 8019d0e:	9009      	str	r0, [sp, #36]	@ 0x24
 8019d10:	0011      	movs	r1, r2
 8019d12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019d14:	930c      	str	r3, [sp, #48]	@ 0x30
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d100      	bne.n	8019d1c <arm_cfft_radix4by2_inverse_q31+0x24>
 8019d1a:	e0a0      	b.n	8019e5e <arm_cfft_radix4by2_inverse_q31+0x166>
 8019d1c:	0002      	movs	r2, r0
 8019d1e:	00db      	lsls	r3, r3, #3
 8019d20:	3204      	adds	r2, #4
 8019d22:	4691      	mov	r9, r2
 8019d24:	4698      	mov	r8, r3
 8019d26:	000a      	movs	r2, r1
 8019d28:	464e      	mov	r6, r9
 8019d2a:	4442      	add	r2, r8
 8019d2c:	4699      	mov	r9, r3
 8019d2e:	4688      	mov	r8, r1
 8019d30:	9208      	str	r2, [sp, #32]
 8019d32:	900d      	str	r0, [sp, #52]	@ 0x34
 8019d34:	4643      	mov	r3, r8
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	469b      	mov	fp, r3
 8019d3a:	4643      	mov	r3, r8
 8019d3c:	685b      	ldr	r3, [r3, #4]
 8019d3e:	469a      	mov	sl, r3
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	109c      	asrs	r4, r3, #2
 8019d44:	464b      	mov	r3, r9
 8019d46:	58fb      	ldr	r3, [r7, r3]
 8019d48:	109a      	asrs	r2, r3, #2
 8019d4a:	18a3      	adds	r3, r4, r2
 8019d4c:	603b      	str	r3, [r7, #0]
 8019d4e:	6833      	ldr	r3, [r6, #0]
 8019d50:	1aa4      	subs	r4, r4, r2
 8019d52:	109d      	asrs	r5, r3, #2
 8019d54:	464b      	mov	r3, r9
 8019d56:	58f3      	ldr	r3, [r6, r3]
 8019d58:	17e2      	asrs	r2, r4, #31
 8019d5a:	109b      	asrs	r3, r3, #2
 8019d5c:	18e9      	adds	r1, r5, r3
 8019d5e:	6031      	str	r1, [r6, #0]
 8019d60:	0011      	movs	r1, r2
 8019d62:	465a      	mov	r2, fp
 8019d64:	17d2      	asrs	r2, r2, #31
 8019d66:	0010      	movs	r0, r2
 8019d68:	4652      	mov	r2, sl
 8019d6a:	1aed      	subs	r5, r5, r3
 8019d6c:	17eb      	asrs	r3, r5, #31
 8019d6e:	17d2      	asrs	r2, r2, #31
 8019d70:	9307      	str	r3, [sp, #28]
 8019d72:	9204      	str	r2, [sp, #16]
 8019d74:	0003      	movs	r3, r0
 8019d76:	465a      	mov	r2, fp
 8019d78:	9006      	str	r0, [sp, #24]
 8019d7a:	0020      	movs	r0, r4
 8019d7c:	9105      	str	r1, [sp, #20]
 8019d7e:	f7e6 fc1f 	bl	80005c0 <__aeabi_lmul>
 8019d82:	2280      	movs	r2, #128	@ 0x80
 8019d84:	2300      	movs	r3, #0
 8019d86:	0612      	lsls	r2, r2, #24
 8019d88:	1880      	adds	r0, r0, r2
 8019d8a:	4159      	adcs	r1, r3
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	9101      	str	r1, [sp, #4]
 8019d90:	9300      	str	r3, [sp, #0]
 8019d92:	4652      	mov	r2, sl
 8019d94:	9b04      	ldr	r3, [sp, #16]
 8019d96:	0028      	movs	r0, r5
 8019d98:	17e9      	asrs	r1, r5, #31
 8019d9a:	f7e6 fc11 	bl	80005c0 <__aeabi_lmul>
 8019d9e:	9a00      	ldr	r2, [sp, #0]
 8019da0:	9b01      	ldr	r3, [sp, #4]
 8019da2:	1a12      	subs	r2, r2, r0
 8019da4:	418b      	sbcs	r3, r1
 8019da6:	2080      	movs	r0, #128	@ 0x80
 8019da8:	2100      	movs	r1, #0
 8019daa:	0600      	lsls	r0, r0, #24
 8019dac:	1812      	adds	r2, r2, r0
 8019dae:	414b      	adcs	r3, r1
 8019db0:	464a      	mov	r2, r9
 8019db2:	005b      	lsls	r3, r3, #1
 8019db4:	50bb      	str	r3, [r7, r2]
 8019db6:	4658      	mov	r0, fp
 8019db8:	002a      	movs	r2, r5
 8019dba:	9b07      	ldr	r3, [sp, #28]
 8019dbc:	9906      	ldr	r1, [sp, #24]
 8019dbe:	f7e6 fbff 	bl	80005c0 <__aeabi_lmul>
 8019dc2:	2280      	movs	r2, #128	@ 0x80
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	0612      	lsls	r2, r2, #24
 8019dc8:	1880      	adds	r0, r0, r2
 8019dca:	4159      	adcs	r1, r3
 8019dcc:	2000      	movs	r0, #0
 8019dce:	9103      	str	r1, [sp, #12]
 8019dd0:	9002      	str	r0, [sp, #8]
 8019dd2:	4652      	mov	r2, sl
 8019dd4:	9b04      	ldr	r3, [sp, #16]
 8019dd6:	0020      	movs	r0, r4
 8019dd8:	9905      	ldr	r1, [sp, #20]
 8019dda:	f7e6 fbf1 	bl	80005c0 <__aeabi_lmul>
 8019dde:	9b02      	ldr	r3, [sp, #8]
 8019de0:	9c03      	ldr	r4, [sp, #12]
 8019de2:	18c0      	adds	r0, r0, r3
 8019de4:	4161      	adcs	r1, r4
 8019de6:	2380      	movs	r3, #128	@ 0x80
 8019de8:	2400      	movs	r4, #0
 8019dea:	061b      	lsls	r3, r3, #24
 8019dec:	18c0      	adds	r0, r0, r3
 8019dee:	4161      	adcs	r1, r4
 8019df0:	464a      	mov	r2, r9
 8019df2:	004b      	lsls	r3, r1, #1
 8019df4:	50b3      	str	r3, [r6, r2]
 8019df6:	2308      	movs	r3, #8
 8019df8:	469c      	mov	ip, r3
 8019dfa:	9b08      	ldr	r3, [sp, #32]
 8019dfc:	44e0      	add	r8, ip
 8019dfe:	3708      	adds	r7, #8
 8019e00:	3608      	adds	r6, #8
 8019e02:	4598      	cmp	r8, r3
 8019e04:	d196      	bne.n	8019d34 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8019e06:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019e08:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019e0a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019e0c:	2302      	movs	r3, #2
 8019e0e:	003a      	movs	r2, r7
 8019e10:	0029      	movs	r1, r5
 8019e12:	0020      	movs	r0, r4
 8019e14:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8019e16:	f000 fb3b 	bl	801a490 <arm_radix4_butterfly_inverse_q31>
 8019e1a:	46a4      	mov	ip, r4
 8019e1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e1e:	2302      	movs	r3, #2
 8019e20:	0088      	lsls	r0, r1, #2
 8019e22:	4460      	add	r0, ip
 8019e24:	003a      	movs	r2, r7
 8019e26:	0029      	movs	r1, r5
 8019e28:	f000 fb32 	bl	801a490 <arm_radix4_butterfly_inverse_q31>
 8019e2c:	46a4      	mov	ip, r4
 8019e2e:	0128      	lsls	r0, r5, #4
 8019e30:	4460      	add	r0, ip
 8019e32:	6833      	ldr	r3, [r6, #0]
 8019e34:	005b      	lsls	r3, r3, #1
 8019e36:	6033      	str	r3, [r6, #0]
 8019e38:	6873      	ldr	r3, [r6, #4]
 8019e3a:	005b      	lsls	r3, r3, #1
 8019e3c:	6073      	str	r3, [r6, #4]
 8019e3e:	68b3      	ldr	r3, [r6, #8]
 8019e40:	005b      	lsls	r3, r3, #1
 8019e42:	60b3      	str	r3, [r6, #8]
 8019e44:	68f3      	ldr	r3, [r6, #12]
 8019e46:	005b      	lsls	r3, r3, #1
 8019e48:	60f3      	str	r3, [r6, #12]
 8019e4a:	3610      	adds	r6, #16
 8019e4c:	42b0      	cmp	r0, r6
 8019e4e:	d1f0      	bne.n	8019e32 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8019e50:	b00f      	add	sp, #60	@ 0x3c
 8019e52:	bc3c      	pop	{r2, r3, r4, r5}
 8019e54:	4690      	mov	r8, r2
 8019e56:	4699      	mov	r9, r3
 8019e58:	46a2      	mov	sl, r4
 8019e5a:	46ab      	mov	fp, r5
 8019e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e5e:	2302      	movs	r3, #2
 8019e60:	2100      	movs	r1, #0
 8019e62:	0015      	movs	r5, r2
 8019e64:	f000 fb14 	bl	801a490 <arm_radix4_butterfly_inverse_q31>
 8019e68:	46bc      	mov	ip, r7
 8019e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e6c:	002a      	movs	r2, r5
 8019e6e:	0098      	lsls	r0, r3, #2
 8019e70:	4460      	add	r0, ip
 8019e72:	2302      	movs	r3, #2
 8019e74:	2100      	movs	r1, #0
 8019e76:	f000 fb0b 	bl	801a490 <arm_radix4_butterfly_inverse_q31>
 8019e7a:	e7e9      	b.n	8019e50 <arm_cfft_radix4by2_inverse_q31+0x158>

08019e7c <arm_cfft_q31>:
 8019e7c:	b570      	push	{r4, r5, r6, lr}
 8019e7e:	001e      	movs	r6, r3
 8019e80:	2380      	movs	r3, #128	@ 0x80
 8019e82:	000d      	movs	r5, r1
 8019e84:	0004      	movs	r4, r0
 8019e86:	8801      	ldrh	r1, [r0, #0]
 8019e88:	005b      	lsls	r3, r3, #1
 8019e8a:	2a01      	cmp	r2, #1
 8019e8c:	d028      	beq.n	8019ee0 <arm_cfft_q31+0x64>
 8019e8e:	4299      	cmp	r1, r3
 8019e90:	d020      	beq.n	8019ed4 <arm_cfft_q31+0x58>
 8019e92:	d812      	bhi.n	8019eba <arm_cfft_q31+0x3e>
 8019e94:	2920      	cmp	r1, #32
 8019e96:	d004      	beq.n	8019ea2 <arm_cfft_q31+0x26>
 8019e98:	d949      	bls.n	8019f2e <arm_cfft_q31+0xb2>
 8019e9a:	2940      	cmp	r1, #64	@ 0x40
 8019e9c:	d01a      	beq.n	8019ed4 <arm_cfft_q31+0x58>
 8019e9e:	2980      	cmp	r1, #128	@ 0x80
 8019ea0:	d103      	bne.n	8019eaa <arm_cfft_q31+0x2e>
 8019ea2:	6862      	ldr	r2, [r4, #4]
 8019ea4:	0028      	movs	r0, r5
 8019ea6:	f7ff fe65 	bl	8019b74 <arm_cfft_radix4by2_q31>
 8019eaa:	2e00      	cmp	r6, #0
 8019eac:	d004      	beq.n	8019eb8 <arm_cfft_q31+0x3c>
 8019eae:	68a2      	ldr	r2, [r4, #8]
 8019eb0:	89a1      	ldrh	r1, [r4, #12]
 8019eb2:	0028      	movs	r0, r5
 8019eb4:	f7e6 f928 	bl	8000108 <arm_bitreversal_32>
 8019eb8:	bd70      	pop	{r4, r5, r6, pc}
 8019eba:	2380      	movs	r3, #128	@ 0x80
 8019ebc:	00db      	lsls	r3, r3, #3
 8019ebe:	4299      	cmp	r1, r3
 8019ec0:	d008      	beq.n	8019ed4 <arm_cfft_q31+0x58>
 8019ec2:	d92f      	bls.n	8019f24 <arm_cfft_q31+0xa8>
 8019ec4:	2380      	movs	r3, #128	@ 0x80
 8019ec6:	011b      	lsls	r3, r3, #4
 8019ec8:	4299      	cmp	r1, r3
 8019eca:	d0ea      	beq.n	8019ea2 <arm_cfft_q31+0x26>
 8019ecc:	2380      	movs	r3, #128	@ 0x80
 8019ece:	015b      	lsls	r3, r3, #5
 8019ed0:	4299      	cmp	r1, r3
 8019ed2:	d1ea      	bne.n	8019eaa <arm_cfft_q31+0x2e>
 8019ed4:	2301      	movs	r3, #1
 8019ed6:	6862      	ldr	r2, [r4, #4]
 8019ed8:	0028      	movs	r0, r5
 8019eda:	f000 f833 	bl	8019f44 <arm_radix4_butterfly_q31>
 8019ede:	e7e4      	b.n	8019eaa <arm_cfft_q31+0x2e>
 8019ee0:	4299      	cmp	r1, r3
 8019ee2:	d019      	beq.n	8019f18 <arm_cfft_q31+0x9c>
 8019ee4:	d80b      	bhi.n	8019efe <arm_cfft_q31+0x82>
 8019ee6:	2920      	cmp	r1, #32
 8019ee8:	d004      	beq.n	8019ef4 <arm_cfft_q31+0x78>
 8019eea:	d928      	bls.n	8019f3e <arm_cfft_q31+0xc2>
 8019eec:	2940      	cmp	r1, #64	@ 0x40
 8019eee:	d013      	beq.n	8019f18 <arm_cfft_q31+0x9c>
 8019ef0:	2980      	cmp	r1, #128	@ 0x80
 8019ef2:	d1da      	bne.n	8019eaa <arm_cfft_q31+0x2e>
 8019ef4:	6862      	ldr	r2, [r4, #4]
 8019ef6:	0028      	movs	r0, r5
 8019ef8:	f7ff fefe 	bl	8019cf8 <arm_cfft_radix4by2_inverse_q31>
 8019efc:	e7d5      	b.n	8019eaa <arm_cfft_q31+0x2e>
 8019efe:	2380      	movs	r3, #128	@ 0x80
 8019f00:	00db      	lsls	r3, r3, #3
 8019f02:	4299      	cmp	r1, r3
 8019f04:	d008      	beq.n	8019f18 <arm_cfft_q31+0x9c>
 8019f06:	d915      	bls.n	8019f34 <arm_cfft_q31+0xb8>
 8019f08:	2380      	movs	r3, #128	@ 0x80
 8019f0a:	011b      	lsls	r3, r3, #4
 8019f0c:	4299      	cmp	r1, r3
 8019f0e:	d0f1      	beq.n	8019ef4 <arm_cfft_q31+0x78>
 8019f10:	2380      	movs	r3, #128	@ 0x80
 8019f12:	015b      	lsls	r3, r3, #5
 8019f14:	4299      	cmp	r1, r3
 8019f16:	d1c8      	bne.n	8019eaa <arm_cfft_q31+0x2e>
 8019f18:	2301      	movs	r3, #1
 8019f1a:	6862      	ldr	r2, [r4, #4]
 8019f1c:	0028      	movs	r0, r5
 8019f1e:	f000 fab7 	bl	801a490 <arm_radix4_butterfly_inverse_q31>
 8019f22:	e7c2      	b.n	8019eaa <arm_cfft_q31+0x2e>
 8019f24:	2380      	movs	r3, #128	@ 0x80
 8019f26:	009b      	lsls	r3, r3, #2
 8019f28:	4299      	cmp	r1, r3
 8019f2a:	d0ba      	beq.n	8019ea2 <arm_cfft_q31+0x26>
 8019f2c:	e7bd      	b.n	8019eaa <arm_cfft_q31+0x2e>
 8019f2e:	2910      	cmp	r1, #16
 8019f30:	d1bb      	bne.n	8019eaa <arm_cfft_q31+0x2e>
 8019f32:	e7cf      	b.n	8019ed4 <arm_cfft_q31+0x58>
 8019f34:	2380      	movs	r3, #128	@ 0x80
 8019f36:	009b      	lsls	r3, r3, #2
 8019f38:	4299      	cmp	r1, r3
 8019f3a:	d0db      	beq.n	8019ef4 <arm_cfft_q31+0x78>
 8019f3c:	e7b5      	b.n	8019eaa <arm_cfft_q31+0x2e>
 8019f3e:	2910      	cmp	r1, #16
 8019f40:	d1b3      	bne.n	8019eaa <arm_cfft_q31+0x2e>
 8019f42:	e7e9      	b.n	8019f18 <arm_cfft_q31+0x9c>

08019f44 <arm_radix4_butterfly_q31>:
 8019f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f46:	464d      	mov	r5, r9
 8019f48:	4644      	mov	r4, r8
 8019f4a:	465f      	mov	r7, fp
 8019f4c:	4656      	mov	r6, sl
 8019f4e:	469c      	mov	ip, r3
 8019f50:	b4f0      	push	{r4, r5, r6, r7}
 8019f52:	b0a7      	sub	sp, #156	@ 0x9c
 8019f54:	9114      	str	r1, [sp, #80]	@ 0x50
 8019f56:	0889      	lsrs	r1, r1, #2
 8019f58:	9310      	str	r3, [sp, #64]	@ 0x40
 8019f5a:	00cb      	lsls	r3, r1, #3
 8019f5c:	0015      	movs	r5, r2
 8019f5e:	9223      	str	r2, [sp, #140]	@ 0x8c
 8019f60:	18c2      	adds	r2, r0, r3
 8019f62:	000c      	movs	r4, r1
 8019f64:	469a      	mov	sl, r3
 8019f66:	9124      	str	r1, [sp, #144]	@ 0x90
 8019f68:	18d1      	adds	r1, r2, r3
 8019f6a:	4663      	mov	r3, ip
 8019f6c:	468b      	mov	fp, r1
 8019f6e:	0119      	lsls	r1, r3, #4
 8019f70:	910d      	str	r1, [sp, #52]	@ 0x34
 8019f72:	00d9      	lsls	r1, r3, #3
 8019f74:	005b      	lsls	r3, r3, #1
 8019f76:	4463      	add	r3, ip
 8019f78:	910e      	str	r1, [sp, #56]	@ 0x38
 8019f7a:	00d9      	lsls	r1, r3, #3
 8019f7c:	465b      	mov	r3, fp
 8019f7e:	44da      	add	sl, fp
 8019f80:	4690      	mov	r8, r2
 8019f82:	4683      	mov	fp, r0
 8019f84:	4699      	mov	r9, r3
 8019f86:	9022      	str	r0, [sp, #136]	@ 0x88
 8019f88:	9025      	str	r0, [sp, #148]	@ 0x94
 8019f8a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019f8c:	9502      	str	r5, [sp, #8]
 8019f8e:	9500      	str	r5, [sp, #0]
 8019f90:	9501      	str	r5, [sp, #4]
 8019f92:	9407      	str	r4, [sp, #28]
 8019f94:	465b      	mov	r3, fp
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	4642      	mov	r2, r8
 8019f9a:	111c      	asrs	r4, r3, #4
 8019f9c:	464b      	mov	r3, r9
 8019f9e:	4658      	mov	r0, fp
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	6812      	ldr	r2, [r2, #0]
 8019fa4:	111b      	asrs	r3, r3, #4
 8019fa6:	18e7      	adds	r7, r4, r3
 8019fa8:	1ae3      	subs	r3, r4, r3
 8019faa:	1114      	asrs	r4, r2, #4
 8019fac:	4652      	mov	r2, sl
 8019fae:	6840      	ldr	r0, [r0, #4]
 8019fb0:	6812      	ldr	r2, [r2, #0]
 8019fb2:	1105      	asrs	r5, r0, #4
 8019fb4:	4648      	mov	r0, r9
 8019fb6:	9303      	str	r3, [sp, #12]
 8019fb8:	1113      	asrs	r3, r2, #4
 8019fba:	18e2      	adds	r2, r4, r3
 8019fbc:	465c      	mov	r4, fp
 8019fbe:	6840      	ldr	r0, [r0, #4]
 8019fc0:	1103      	asrs	r3, r0, #4
 8019fc2:	18ee      	adds	r6, r5, r3
 8019fc4:	1ae8      	subs	r0, r5, r3
 8019fc6:	18bb      	adds	r3, r7, r2
 8019fc8:	6023      	str	r3, [r4, #0]
 8019fca:	4644      	mov	r4, r8
 8019fcc:	6864      	ldr	r4, [r4, #4]
 8019fce:	9004      	str	r0, [sp, #16]
 8019fd0:	1125      	asrs	r5, r4, #4
 8019fd2:	4654      	mov	r4, sl
 8019fd4:	6864      	ldr	r4, [r4, #4]
 8019fd6:	1123      	asrs	r3, r4, #4
 8019fd8:	465c      	mov	r4, fp
 8019fda:	18eb      	adds	r3, r5, r3
 8019fdc:	18f1      	adds	r1, r6, r3
 8019fde:	6061      	str	r1, [r4, #4]
 8019fe0:	4655      	mov	r5, sl
 8019fe2:	4644      	mov	r4, r8
 8019fe4:	686d      	ldr	r5, [r5, #4]
 8019fe6:	6864      	ldr	r4, [r4, #4]
 8019fe8:	1129      	asrs	r1, r5, #4
 8019fea:	1124      	asrs	r4, r4, #4
 8019fec:	1a64      	subs	r4, r4, r1
 8019fee:	4641      	mov	r1, r8
 8019ff0:	6809      	ldr	r1, [r1, #0]
 8019ff2:	9405      	str	r4, [sp, #20]
 8019ff4:	1108      	asrs	r0, r1, #4
 8019ff6:	4651      	mov	r1, sl
 8019ff8:	6809      	ldr	r1, [r1, #0]
 8019ffa:	1abc      	subs	r4, r7, r2
 8019ffc:	1109      	asrs	r1, r1, #4
 8019ffe:	1a41      	subs	r1, r0, r1
 801a000:	17e2      	asrs	r2, r4, #31
 801a002:	9106      	str	r1, [sp, #24]
 801a004:	0011      	movs	r1, r2
 801a006:	9a01      	ldr	r2, [sp, #4]
 801a008:	9108      	str	r1, [sp, #32]
 801a00a:	6817      	ldr	r7, [r2, #0]
 801a00c:	17fd      	asrs	r5, r7, #31
 801a00e:	0028      	movs	r0, r5
 801a010:	1af5      	subs	r5, r6, r3
 801a012:	17ee      	asrs	r6, r5, #31
 801a014:	960a      	str	r6, [sp, #40]	@ 0x28
 801a016:	6856      	ldr	r6, [r2, #4]
 801a018:	9009      	str	r0, [sp, #36]	@ 0x24
 801a01a:	17f3      	asrs	r3, r6, #31
 801a01c:	003a      	movs	r2, r7
 801a01e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a020:	0003      	movs	r3, r0
 801a022:	0020      	movs	r0, r4
 801a024:	f7e6 facc 	bl	80005c0 <__aeabi_lmul>
 801a028:	0032      	movs	r2, r6
 801a02a:	17f3      	asrs	r3, r6, #31
 801a02c:	910c      	str	r1, [sp, #48]	@ 0x30
 801a02e:	0028      	movs	r0, r5
 801a030:	17e9      	asrs	r1, r5, #31
 801a032:	f7e6 fac5 	bl	80005c0 <__aeabi_lmul>
 801a036:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a038:	002a      	movs	r2, r5
 801a03a:	4684      	mov	ip, r0
 801a03c:	4640      	mov	r0, r8
 801a03e:	4461      	add	r1, ip
 801a040:	0049      	lsls	r1, r1, #1
 801a042:	6001      	str	r1, [r0, #0]
 801a044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a046:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a048:	0038      	movs	r0, r7
 801a04a:	f7e6 fab9 	bl	80005c0 <__aeabi_lmul>
 801a04e:	0032      	movs	r2, r6
 801a050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a052:	000d      	movs	r5, r1
 801a054:	0020      	movs	r0, r4
 801a056:	9908      	ldr	r1, [sp, #32]
 801a058:	f7e6 fab2 	bl	80005c0 <__aeabi_lmul>
 801a05c:	4646      	mov	r6, r8
 801a05e:	1a6d      	subs	r5, r5, r1
 801a060:	006d      	lsls	r5, r5, #1
 801a062:	6075      	str	r5, [r6, #4]
 801a064:	9903      	ldr	r1, [sp, #12]
 801a066:	9d05      	ldr	r5, [sp, #20]
 801a068:	000c      	movs	r4, r1
 801a06a:	46ac      	mov	ip, r5
 801a06c:	4464      	add	r4, ip
 801a06e:	17e6      	asrs	r6, r4, #31
 801a070:	0031      	movs	r1, r6
 801a072:	9b00      	ldr	r3, [sp, #0]
 801a074:	9804      	ldr	r0, [sp, #16]
 801a076:	681e      	ldr	r6, [r3, #0]
 801a078:	17f7      	asrs	r7, r6, #31
 801a07a:	9709      	str	r7, [sp, #36]	@ 0x24
 801a07c:	9f06      	ldr	r7, [sp, #24]
 801a07e:	0032      	movs	r2, r6
 801a080:	1bc7      	subs	r7, r0, r7
 801a082:	17fd      	asrs	r5, r7, #31
 801a084:	950a      	str	r5, [sp, #40]	@ 0x28
 801a086:	685d      	ldr	r5, [r3, #4]
 801a088:	17f3      	asrs	r3, r6, #31
 801a08a:	17e8      	asrs	r0, r5, #31
 801a08c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a08e:	0020      	movs	r0, r4
 801a090:	9108      	str	r1, [sp, #32]
 801a092:	f7e6 fa95 	bl	80005c0 <__aeabi_lmul>
 801a096:	002a      	movs	r2, r5
 801a098:	17eb      	asrs	r3, r5, #31
 801a09a:	910c      	str	r1, [sp, #48]	@ 0x30
 801a09c:	0038      	movs	r0, r7
 801a09e:	17f9      	asrs	r1, r7, #31
 801a0a0:	f7e6 fa8e 	bl	80005c0 <__aeabi_lmul>
 801a0a4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a0a6:	003a      	movs	r2, r7
 801a0a8:	4684      	mov	ip, r0
 801a0aa:	4648      	mov	r0, r9
 801a0ac:	4461      	add	r1, ip
 801a0ae:	0049      	lsls	r1, r1, #1
 801a0b0:	6001      	str	r1, [r0, #0]
 801a0b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0b4:	0030      	movs	r0, r6
 801a0b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a0b8:	f7e6 fa82 	bl	80005c0 <__aeabi_lmul>
 801a0bc:	002a      	movs	r2, r5
 801a0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0c0:	000e      	movs	r6, r1
 801a0c2:	0020      	movs	r0, r4
 801a0c4:	9908      	ldr	r1, [sp, #32]
 801a0c6:	f7e6 fa7b 	bl	80005c0 <__aeabi_lmul>
 801a0ca:	464c      	mov	r4, r9
 801a0cc:	9d05      	ldr	r5, [sp, #20]
 801a0ce:	1a76      	subs	r6, r6, r1
 801a0d0:	9903      	ldr	r1, [sp, #12]
 801a0d2:	0076      	lsls	r6, r6, #1
 801a0d4:	6066      	str	r6, [r4, #4]
 801a0d6:	1b4c      	subs	r4, r1, r5
 801a0d8:	9e06      	ldr	r6, [sp, #24]
 801a0da:	17e1      	asrs	r1, r4, #31
 801a0dc:	9103      	str	r1, [sp, #12]
 801a0de:	9902      	ldr	r1, [sp, #8]
 801a0e0:	46b4      	mov	ip, r6
 801a0e2:	680f      	ldr	r7, [r1, #0]
 801a0e4:	9804      	ldr	r0, [sp, #16]
 801a0e6:	17fd      	asrs	r5, r7, #31
 801a0e8:	002b      	movs	r3, r5
 801a0ea:	684e      	ldr	r6, [r1, #4]
 801a0ec:	4460      	add	r0, ip
 801a0ee:	0005      	movs	r5, r0
 801a0f0:	17c0      	asrs	r0, r0, #31
 801a0f2:	9005      	str	r0, [sp, #20]
 801a0f4:	17f0      	asrs	r0, r6, #31
 801a0f6:	9006      	str	r0, [sp, #24]
 801a0f8:	003a      	movs	r2, r7
 801a0fa:	0020      	movs	r0, r4
 801a0fc:	17e1      	asrs	r1, r4, #31
 801a0fe:	9304      	str	r3, [sp, #16]
 801a100:	f7e6 fa5e 	bl	80005c0 <__aeabi_lmul>
 801a104:	0032      	movs	r2, r6
 801a106:	9108      	str	r1, [sp, #32]
 801a108:	17f3      	asrs	r3, r6, #31
 801a10a:	0028      	movs	r0, r5
 801a10c:	17e9      	asrs	r1, r5, #31
 801a10e:	f7e6 fa57 	bl	80005c0 <__aeabi_lmul>
 801a112:	9808      	ldr	r0, [sp, #32]
 801a114:	002a      	movs	r2, r5
 801a116:	4684      	mov	ip, r0
 801a118:	4650      	mov	r0, sl
 801a11a:	4461      	add	r1, ip
 801a11c:	0049      	lsls	r1, r1, #1
 801a11e:	6001      	str	r1, [r0, #0]
 801a120:	9b05      	ldr	r3, [sp, #20]
 801a122:	9904      	ldr	r1, [sp, #16]
 801a124:	0038      	movs	r0, r7
 801a126:	f7e6 fa4b 	bl	80005c0 <__aeabi_lmul>
 801a12a:	0020      	movs	r0, r4
 801a12c:	2408      	movs	r4, #8
 801a12e:	000d      	movs	r5, r1
 801a130:	0032      	movs	r2, r6
 801a132:	9b06      	ldr	r3, [sp, #24]
 801a134:	9903      	ldr	r1, [sp, #12]
 801a136:	f7e6 fa43 	bl	80005c0 <__aeabi_lmul>
 801a13a:	46a4      	mov	ip, r4
 801a13c:	4650      	mov	r0, sl
 801a13e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a140:	44e3      	add	fp, ip
 801a142:	44e0      	add	r8, ip
 801a144:	44e1      	add	r9, ip
 801a146:	44e2      	add	sl, ip
 801a148:	46a4      	mov	ip, r4
 801a14a:	1a6d      	subs	r5, r5, r1
 801a14c:	006d      	lsls	r5, r5, #1
 801a14e:	9a01      	ldr	r2, [sp, #4]
 801a150:	6045      	str	r5, [r0, #4]
 801a152:	9807      	ldr	r0, [sp, #28]
 801a154:	4462      	add	r2, ip
 801a156:	3801      	subs	r0, #1
 801a158:	9201      	str	r2, [sp, #4]
 801a15a:	9007      	str	r0, [sp, #28]
 801a15c:	9b00      	ldr	r3, [sp, #0]
 801a15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a160:	9902      	ldr	r1, [sp, #8]
 801a162:	4694      	mov	ip, r2
 801a164:	4463      	add	r3, ip
 801a166:	9300      	str	r3, [sp, #0]
 801a168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a16a:	469c      	mov	ip, r3
 801a16c:	4461      	add	r1, ip
 801a16e:	9102      	str	r1, [sp, #8]
 801a170:	2800      	cmp	r0, #0
 801a172:	d000      	beq.n	801a176 <arm_radix4_butterfly_q31+0x232>
 801a174:	e70e      	b.n	8019f94 <arm_radix4_butterfly_q31+0x50>
 801a176:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a178:	009b      	lsls	r3, r3, #2
 801a17a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a17c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a17e:	9320      	str	r3, [sp, #128]	@ 0x80
 801a180:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a182:	2b04      	cmp	r3, #4
 801a184:	d800      	bhi.n	801a188 <arm_radix4_butterfly_q31+0x244>
 801a186:	e180      	b.n	801a48a <arm_radix4_butterfly_q31+0x546>
 801a188:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a18a:	0893      	lsrs	r3, r2, #2
 801a18c:	1e59      	subs	r1, r3, #1
 801a18e:	9321      	str	r3, [sp, #132]	@ 0x84
 801a190:	00db      	lsls	r3, r3, #3
 801a192:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a194:	00d3      	lsls	r3, r2, #3
 801a196:	9300      	str	r3, [sp, #0]
 801a198:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a19a:	911a      	str	r1, [sp, #104]	@ 0x68
 801a19c:	00da      	lsls	r2, r3, #3
 801a19e:	921e      	str	r2, [sp, #120]	@ 0x78
 801a1a0:	011a      	lsls	r2, r3, #4
 801a1a2:	921d      	str	r2, [sp, #116]	@ 0x74
 801a1a4:	001a      	movs	r2, r3
 801a1a6:	4694      	mov	ip, r2
 801a1a8:	005b      	lsls	r3, r3, #1
 801a1aa:	4463      	add	r3, ip
 801a1ac:	00db      	lsls	r3, r3, #3
 801a1ae:	931c      	str	r3, [sp, #112]	@ 0x70
 801a1b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a1b2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a1b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a1b6:	9318      	str	r3, [sp, #96]	@ 0x60
 801a1b8:	9319      	str	r3, [sp, #100]	@ 0x64
 801a1ba:	9316      	str	r3, [sp, #88]	@ 0x58
 801a1bc:	2300      	movs	r3, #0
 801a1be:	9315      	str	r3, [sp, #84]	@ 0x54
 801a1c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a1c2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a1c4:	681a      	ldr	r2, [r3, #0]
 801a1c6:	685b      	ldr	r3, [r3, #4]
 801a1c8:	9205      	str	r2, [sp, #20]
 801a1ca:	9306      	str	r3, [sp, #24]
 801a1cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a1ce:	468c      	mov	ip, r1
 801a1d0:	681a      	ldr	r2, [r3, #0]
 801a1d2:	685b      	ldr	r3, [r3, #4]
 801a1d4:	9207      	str	r2, [sp, #28]
 801a1d6:	9308      	str	r3, [sp, #32]
 801a1d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a1da:	681a      	ldr	r2, [r3, #0]
 801a1dc:	685b      	ldr	r3, [r3, #4]
 801a1de:	9209      	str	r2, [sp, #36]	@ 0x24
 801a1e0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a1e2:	930a      	str	r3, [sp, #40]	@ 0x28
 801a1e4:	0013      	movs	r3, r2
 801a1e6:	4463      	add	r3, ip
 801a1e8:	4698      	mov	r8, r3
 801a1ea:	0013      	movs	r3, r2
 801a1ec:	4442      	add	r2, r8
 801a1ee:	4691      	mov	r9, r2
 801a1f0:	001a      	movs	r2, r3
 801a1f2:	444a      	add	r2, r9
 801a1f4:	4692      	mov	sl, r2
 801a1f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a1f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a1fa:	4293      	cmp	r3, r2
 801a1fc:	d800      	bhi.n	801a200 <arm_radix4_butterfly_q31+0x2bc>
 801a1fe:	e0dd      	b.n	801a3bc <arm_radix4_butterfly_q31+0x478>
 801a200:	4694      	mov	ip, r2
 801a202:	468b      	mov	fp, r1
 801a204:	4644      	mov	r4, r8
 801a206:	4655      	mov	r5, sl
 801a208:	9b07      	ldr	r3, [sp, #28]
 801a20a:	17db      	asrs	r3, r3, #31
 801a20c:	930c      	str	r3, [sp, #48]	@ 0x30
 801a20e:	9b08      	ldr	r3, [sp, #32]
 801a210:	17db      	asrs	r3, r3, #31
 801a212:	930d      	str	r3, [sp, #52]	@ 0x34
 801a214:	9b05      	ldr	r3, [sp, #20]
 801a216:	17db      	asrs	r3, r3, #31
 801a218:	930e      	str	r3, [sp, #56]	@ 0x38
 801a21a:	9b06      	ldr	r3, [sp, #24]
 801a21c:	17db      	asrs	r3, r3, #31
 801a21e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a222:	17db      	asrs	r3, r3, #31
 801a224:	9310      	str	r3, [sp, #64]	@ 0x40
 801a226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a228:	17db      	asrs	r3, r3, #31
 801a22a:	9311      	str	r3, [sp, #68]	@ 0x44
 801a22c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a22e:	4463      	add	r3, ip
 801a230:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a232:	465b      	mov	r3, fp
 801a234:	4659      	mov	r1, fp
 801a236:	681a      	ldr	r2, [r3, #0]
 801a238:	464b      	mov	r3, r9
 801a23a:	684f      	ldr	r7, [r1, #4]
 801a23c:	4649      	mov	r1, r9
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	18d6      	adds	r6, r2, r3
 801a242:	1ad3      	subs	r3, r2, r3
 801a244:	9301      	str	r3, [sp, #4]
 801a246:	684b      	ldr	r3, [r1, #4]
 801a248:	18f8      	adds	r0, r7, r3
 801a24a:	1af9      	subs	r1, r7, r3
 801a24c:	6827      	ldr	r7, [r4, #0]
 801a24e:	9102      	str	r1, [sp, #8]
 801a250:	003a      	movs	r2, r7
 801a252:	682f      	ldr	r7, [r5, #0]
 801a254:	46bc      	mov	ip, r7
 801a256:	465f      	mov	r7, fp
 801a258:	4462      	add	r2, ip
 801a25a:	18b3      	adds	r3, r6, r2
 801a25c:	109b      	asrs	r3, r3, #2
 801a25e:	603b      	str	r3, [r7, #0]
 801a260:	6867      	ldr	r7, [r4, #4]
 801a262:	1ab6      	subs	r6, r6, r2
 801a264:	46b8      	mov	r8, r7
 801a266:	686f      	ldr	r7, [r5, #4]
 801a268:	17f2      	asrs	r2, r6, #31
 801a26a:	46bc      	mov	ip, r7
 801a26c:	44e0      	add	r8, ip
 801a26e:	4643      	mov	r3, r8
 801a270:	465f      	mov	r7, fp
 801a272:	18c1      	adds	r1, r0, r3
 801a274:	1089      	asrs	r1, r1, #2
 801a276:	6079      	str	r1, [r7, #4]
 801a278:	9900      	ldr	r1, [sp, #0]
 801a27a:	4690      	mov	r8, r2
 801a27c:	468c      	mov	ip, r1
 801a27e:	6867      	ldr	r7, [r4, #4]
 801a280:	6869      	ldr	r1, [r5, #4]
 801a282:	44e3      	add	fp, ip
 801a284:	1a7f      	subs	r7, r7, r1
 801a286:	9703      	str	r7, [sp, #12]
 801a288:	6829      	ldr	r1, [r5, #0]
 801a28a:	6827      	ldr	r7, [r4, #0]
 801a28c:	1a7f      	subs	r7, r7, r1
 801a28e:	9704      	str	r7, [sp, #16]
 801a290:	1ac7      	subs	r7, r0, r3
 801a292:	17fa      	asrs	r2, r7, #31
 801a294:	4692      	mov	sl, r2
 801a296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a298:	9a07      	ldr	r2, [sp, #28]
 801a29a:	0030      	movs	r0, r6
 801a29c:	4641      	mov	r1, r8
 801a29e:	f7e6 f98f 	bl	80005c0 <__aeabi_lmul>
 801a2a2:	9a08      	ldr	r2, [sp, #32]
 801a2a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a2a6:	9112      	str	r1, [sp, #72]	@ 0x48
 801a2a8:	0038      	movs	r0, r7
 801a2aa:	4651      	mov	r1, sl
 801a2ac:	f7e6 f988 	bl	80005c0 <__aeabi_lmul>
 801a2b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a2b2:	9a07      	ldr	r2, [sp, #28]
 801a2b4:	4684      	mov	ip, r0
 801a2b6:	4461      	add	r1, ip
 801a2b8:	1049      	asrs	r1, r1, #1
 801a2ba:	6021      	str	r1, [r4, #0]
 801a2bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2be:	0038      	movs	r0, r7
 801a2c0:	4651      	mov	r1, sl
 801a2c2:	f7e6 f97d 	bl	80005c0 <__aeabi_lmul>
 801a2c6:	9a08      	ldr	r2, [sp, #32]
 801a2c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a2ca:	000f      	movs	r7, r1
 801a2cc:	0030      	movs	r0, r6
 801a2ce:	4641      	mov	r1, r8
 801a2d0:	f7e6 f976 	bl	80005c0 <__aeabi_lmul>
 801a2d4:	9b00      	ldr	r3, [sp, #0]
 801a2d6:	9a01      	ldr	r2, [sp, #4]
 801a2d8:	469c      	mov	ip, r3
 801a2da:	9803      	ldr	r0, [sp, #12]
 801a2dc:	1a7f      	subs	r7, r7, r1
 801a2de:	107f      	asrs	r7, r7, #1
 801a2e0:	6067      	str	r7, [r4, #4]
 801a2e2:	0016      	movs	r6, r2
 801a2e4:	4464      	add	r4, ip
 801a2e6:	4684      	mov	ip, r0
 801a2e8:	4466      	add	r6, ip
 801a2ea:	17f2      	asrs	r2, r6, #31
 801a2ec:	4690      	mov	r8, r2
 801a2ee:	9902      	ldr	r1, [sp, #8]
 801a2f0:	9f04      	ldr	r7, [sp, #16]
 801a2f2:	0030      	movs	r0, r6
 801a2f4:	1bcf      	subs	r7, r1, r7
 801a2f6:	17fa      	asrs	r2, r7, #31
 801a2f8:	4692      	mov	sl, r2
 801a2fa:	4641      	mov	r1, r8
 801a2fc:	9a05      	ldr	r2, [sp, #20]
 801a2fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a300:	f7e6 f95e 	bl	80005c0 <__aeabi_lmul>
 801a304:	9a06      	ldr	r2, [sp, #24]
 801a306:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a308:	9112      	str	r1, [sp, #72]	@ 0x48
 801a30a:	0038      	movs	r0, r7
 801a30c:	4651      	mov	r1, sl
 801a30e:	f7e6 f957 	bl	80005c0 <__aeabi_lmul>
 801a312:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a314:	9a05      	ldr	r2, [sp, #20]
 801a316:	4684      	mov	ip, r0
 801a318:	4648      	mov	r0, r9
 801a31a:	4461      	add	r1, ip
 801a31c:	1049      	asrs	r1, r1, #1
 801a31e:	6001      	str	r1, [r0, #0]
 801a320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a322:	0038      	movs	r0, r7
 801a324:	4651      	mov	r1, sl
 801a326:	f7e6 f94b 	bl	80005c0 <__aeabi_lmul>
 801a32a:	9a06      	ldr	r2, [sp, #24]
 801a32c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a32e:	000f      	movs	r7, r1
 801a330:	0030      	movs	r0, r6
 801a332:	4641      	mov	r1, r8
 801a334:	f7e6 f944 	bl	80005c0 <__aeabi_lmul>
 801a338:	464e      	mov	r6, r9
 801a33a:	9a00      	ldr	r2, [sp, #0]
 801a33c:	9b01      	ldr	r3, [sp, #4]
 801a33e:	4694      	mov	ip, r2
 801a340:	9803      	ldr	r0, [sp, #12]
 801a342:	1a7f      	subs	r7, r7, r1
 801a344:	107f      	asrs	r7, r7, #1
 801a346:	6077      	str	r7, [r6, #4]
 801a348:	1a1e      	subs	r6, r3, r0
 801a34a:	9b04      	ldr	r3, [sp, #16]
 801a34c:	44e1      	add	r9, ip
 801a34e:	469c      	mov	ip, r3
 801a350:	17f0      	asrs	r0, r6, #31
 801a352:	4680      	mov	r8, r0
 801a354:	9902      	ldr	r1, [sp, #8]
 801a356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a358:	4461      	add	r1, ip
 801a35a:	17cb      	asrs	r3, r1, #31
 801a35c:	000f      	movs	r7, r1
 801a35e:	469a      	mov	sl, r3
 801a360:	0030      	movs	r0, r6
 801a362:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a364:	4641      	mov	r1, r8
 801a366:	f7e6 f92b 	bl	80005c0 <__aeabi_lmul>
 801a36a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a36c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a36e:	9101      	str	r1, [sp, #4]
 801a370:	0038      	movs	r0, r7
 801a372:	4651      	mov	r1, sl
 801a374:	f7e6 f924 	bl	80005c0 <__aeabi_lmul>
 801a378:	9801      	ldr	r0, [sp, #4]
 801a37a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a37c:	4684      	mov	ip, r0
 801a37e:	4461      	add	r1, ip
 801a380:	1049      	asrs	r1, r1, #1
 801a382:	6029      	str	r1, [r5, #0]
 801a384:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a386:	0038      	movs	r0, r7
 801a388:	4651      	mov	r1, sl
 801a38a:	f7e6 f919 	bl	80005c0 <__aeabi_lmul>
 801a38e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a390:	000f      	movs	r7, r1
 801a392:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a394:	0030      	movs	r0, r6
 801a396:	4641      	mov	r1, r8
 801a398:	f7e6 f912 	bl	80005c0 <__aeabi_lmul>
 801a39c:	1a7f      	subs	r7, r7, r1
 801a39e:	107f      	asrs	r7, r7, #1
 801a3a0:	606f      	str	r7, [r5, #4]
 801a3a2:	9a00      	ldr	r2, [sp, #0]
 801a3a4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a3a6:	4694      	mov	ip, r2
 801a3a8:	4465      	add	r5, ip
 801a3aa:	468c      	mov	ip, r1
 801a3ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a3ae:	0013      	movs	r3, r2
 801a3b0:	4462      	add	r2, ip
 801a3b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a3b4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	d900      	bls.n	801a3bc <arm_radix4_butterfly_q31+0x478>
 801a3ba:	e73a      	b.n	801a232 <arm_radix4_butterfly_q31+0x2ee>
 801a3bc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a3be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a3c0:	468c      	mov	ip, r1
 801a3c2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801a3c4:	4462      	add	r2, ip
 801a3c6:	468c      	mov	ip, r1
 801a3c8:	9216      	str	r2, [sp, #88]	@ 0x58
 801a3ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801a3cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a3ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a3d0:	4462      	add	r2, ip
 801a3d2:	468c      	mov	ip, r1
 801a3d4:	9219      	str	r2, [sp, #100]	@ 0x64
 801a3d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a3d8:	3301      	adds	r3, #1
 801a3da:	4462      	add	r2, ip
 801a3dc:	9218      	str	r2, [sp, #96]	@ 0x60
 801a3de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a3e0:	9315      	str	r3, [sp, #84]	@ 0x54
 801a3e2:	3208      	adds	r2, #8
 801a3e4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a3e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a3e8:	4293      	cmp	r3, r2
 801a3ea:	d800      	bhi.n	801a3ee <arm_radix4_butterfly_q31+0x4aa>
 801a3ec:	e6e8      	b.n	801a1c0 <arm_radix4_butterfly_q31+0x27c>
 801a3ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a3f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a3f2:	009b      	lsls	r3, r3, #2
 801a3f4:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a3f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a3f8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a3fa:	089b      	lsrs	r3, r3, #2
 801a3fc:	9320      	str	r3, [sp, #128]	@ 0x80
 801a3fe:	2b04      	cmp	r3, #4
 801a400:	d900      	bls.n	801a404 <arm_radix4_butterfly_q31+0x4c0>
 801a402:	e6c1      	b.n	801a188 <arm_radix4_butterfly_q31+0x244>
 801a404:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a406:	469a      	mov	sl, r3
 801a408:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a40a:	691c      	ldr	r4, [r3, #16]
 801a40c:	685a      	ldr	r2, [r3, #4]
 801a40e:	46a1      	mov	r9, r4
 801a410:	4690      	mov	r8, r2
 801a412:	6819      	ldr	r1, [r3, #0]
 801a414:	689a      	ldr	r2, [r3, #8]
 801a416:	699f      	ldr	r7, [r3, #24]
 801a418:	188d      	adds	r5, r1, r2
 801a41a:	444d      	add	r5, r9
 801a41c:	19ed      	adds	r5, r5, r7
 801a41e:	69de      	ldr	r6, [r3, #28]
 801a420:	601d      	str	r5, [r3, #0]
 801a422:	4645      	mov	r5, r8
 801a424:	46b4      	mov	ip, r6
 801a426:	68d8      	ldr	r0, [r3, #12]
 801a428:	695c      	ldr	r4, [r3, #20]
 801a42a:	182d      	adds	r5, r5, r0
 801a42c:	192d      	adds	r5, r5, r4
 801a42e:	4465      	add	r5, ip
 801a430:	605d      	str	r5, [r3, #4]
 801a432:	1a8d      	subs	r5, r1, r2
 801a434:	444d      	add	r5, r9
 801a436:	1bed      	subs	r5, r5, r7
 801a438:	609d      	str	r5, [r3, #8]
 801a43a:	4645      	mov	r5, r8
 801a43c:	1a2d      	subs	r5, r5, r0
 801a43e:	192d      	adds	r5, r5, r4
 801a440:	1bad      	subs	r5, r5, r6
 801a442:	464e      	mov	r6, r9
 801a444:	60dd      	str	r5, [r3, #12]
 801a446:	180d      	adds	r5, r1, r0
 801a448:	1bad      	subs	r5, r5, r6
 801a44a:	4666      	mov	r6, ip
 801a44c:	1bad      	subs	r5, r5, r6
 801a44e:	611d      	str	r5, [r3, #16]
 801a450:	4645      	mov	r5, r8
 801a452:	1aad      	subs	r5, r5, r2
 801a454:	4442      	add	r2, r8
 801a456:	1b12      	subs	r2, r2, r4
 801a458:	1bd2      	subs	r2, r2, r7
 801a45a:	1a08      	subs	r0, r1, r0
 801a45c:	61da      	str	r2, [r3, #28]
 801a45e:	4649      	mov	r1, r9
 801a460:	2201      	movs	r2, #1
 801a462:	1a41      	subs	r1, r0, r1
 801a464:	4252      	negs	r2, r2
 801a466:	4461      	add	r1, ip
 801a468:	4694      	mov	ip, r2
 801a46a:	44e2      	add	sl, ip
 801a46c:	4652      	mov	r2, sl
 801a46e:	1b2d      	subs	r5, r5, r4
 801a470:	19ed      	adds	r5, r5, r7
 801a472:	615d      	str	r5, [r3, #20]
 801a474:	6199      	str	r1, [r3, #24]
 801a476:	3320      	adds	r3, #32
 801a478:	2a00      	cmp	r2, #0
 801a47a:	d1c6      	bne.n	801a40a <arm_radix4_butterfly_q31+0x4c6>
 801a47c:	b027      	add	sp, #156	@ 0x9c
 801a47e:	bc3c      	pop	{r2, r3, r4, r5}
 801a480:	4690      	mov	r8, r2
 801a482:	4699      	mov	r9, r3
 801a484:	46a2      	mov	sl, r4
 801a486:	46ab      	mov	fp, r5
 801a488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a48a:	469a      	mov	sl, r3
 801a48c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a48e:	e7bc      	b.n	801a40a <arm_radix4_butterfly_q31+0x4c6>

0801a490 <arm_radix4_butterfly_inverse_q31>:
 801a490:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a492:	464d      	mov	r5, r9
 801a494:	4644      	mov	r4, r8
 801a496:	465f      	mov	r7, fp
 801a498:	4656      	mov	r6, sl
 801a49a:	b4f0      	push	{r4, r5, r6, r7}
 801a49c:	b0a7      	sub	sp, #156	@ 0x9c
 801a49e:	469c      	mov	ip, r3
 801a4a0:	9114      	str	r1, [sp, #80]	@ 0x50
 801a4a2:	0889      	lsrs	r1, r1, #2
 801a4a4:	9310      	str	r3, [sp, #64]	@ 0x40
 801a4a6:	00cb      	lsls	r3, r1, #3
 801a4a8:	0015      	movs	r5, r2
 801a4aa:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a4ac:	18c2      	adds	r2, r0, r3
 801a4ae:	000c      	movs	r4, r1
 801a4b0:	9124      	str	r1, [sp, #144]	@ 0x90
 801a4b2:	18d1      	adds	r1, r2, r3
 801a4b4:	468b      	mov	fp, r1
 801a4b6:	469a      	mov	sl, r3
 801a4b8:	4663      	mov	r3, ip
 801a4ba:	44da      	add	sl, fp
 801a4bc:	46d0      	mov	r8, sl
 801a4be:	4681      	mov	r9, r0
 801a4c0:	4692      	mov	sl, r2
 801a4c2:	0119      	lsls	r1, r3, #4
 801a4c4:	910d      	str	r1, [sp, #52]	@ 0x34
 801a4c6:	00d9      	lsls	r1, r3, #3
 801a4c8:	005b      	lsls	r3, r3, #1
 801a4ca:	4463      	add	r3, ip
 801a4cc:	910e      	str	r1, [sp, #56]	@ 0x38
 801a4ce:	00d9      	lsls	r1, r3, #3
 801a4d0:	9022      	str	r0, [sp, #136]	@ 0x88
 801a4d2:	9025      	str	r0, [sp, #148]	@ 0x94
 801a4d4:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a4d6:	9502      	str	r5, [sp, #8]
 801a4d8:	9500      	str	r5, [sp, #0]
 801a4da:	9501      	str	r5, [sp, #4]
 801a4dc:	9409      	str	r4, [sp, #36]	@ 0x24
 801a4de:	464b      	mov	r3, r9
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	4652      	mov	r2, sl
 801a4e4:	111c      	asrs	r4, r3, #4
 801a4e6:	465b      	mov	r3, fp
 801a4e8:	4648      	mov	r0, r9
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	6812      	ldr	r2, [r2, #0]
 801a4ee:	6840      	ldr	r0, [r0, #4]
 801a4f0:	111b      	asrs	r3, r3, #4
 801a4f2:	18e7      	adds	r7, r4, r3
 801a4f4:	1ae3      	subs	r3, r4, r3
 801a4f6:	1114      	asrs	r4, r2, #4
 801a4f8:	4642      	mov	r2, r8
 801a4fa:	1105      	asrs	r5, r0, #4
 801a4fc:	4658      	mov	r0, fp
 801a4fe:	6812      	ldr	r2, [r2, #0]
 801a500:	6840      	ldr	r0, [r0, #4]
 801a502:	9303      	str	r3, [sp, #12]
 801a504:	1113      	asrs	r3, r2, #4
 801a506:	18e2      	adds	r2, r4, r3
 801a508:	1103      	asrs	r3, r0, #4
 801a50a:	18ee      	adds	r6, r5, r3
 801a50c:	1ae8      	subs	r0, r5, r3
 801a50e:	464d      	mov	r5, r9
 801a510:	18bb      	adds	r3, r7, r2
 801a512:	602b      	str	r3, [r5, #0]
 801a514:	4641      	mov	r1, r8
 801a516:	4655      	mov	r5, sl
 801a518:	6849      	ldr	r1, [r1, #4]
 801a51a:	686d      	ldr	r5, [r5, #4]
 801a51c:	110b      	asrs	r3, r1, #4
 801a51e:	112d      	asrs	r5, r5, #4
 801a520:	18eb      	adds	r3, r5, r3
 801a522:	464d      	mov	r5, r9
 801a524:	18f1      	adds	r1, r6, r3
 801a526:	6069      	str	r1, [r5, #4]
 801a528:	4655      	mov	r5, sl
 801a52a:	686d      	ldr	r5, [r5, #4]
 801a52c:	9004      	str	r0, [sp, #16]
 801a52e:	112c      	asrs	r4, r5, #4
 801a530:	4645      	mov	r5, r8
 801a532:	686d      	ldr	r5, [r5, #4]
 801a534:	1129      	asrs	r1, r5, #4
 801a536:	1a65      	subs	r5, r4, r1
 801a538:	4651      	mov	r1, sl
 801a53a:	6809      	ldr	r1, [r1, #0]
 801a53c:	1abc      	subs	r4, r7, r2
 801a53e:	1108      	asrs	r0, r1, #4
 801a540:	4641      	mov	r1, r8
 801a542:	17e2      	asrs	r2, r4, #31
 801a544:	6809      	ldr	r1, [r1, #0]
 801a546:	9207      	str	r2, [sp, #28]
 801a548:	9a01      	ldr	r2, [sp, #4]
 801a54a:	1109      	asrs	r1, r1, #4
 801a54c:	6817      	ldr	r7, [r2, #0]
 801a54e:	1a41      	subs	r1, r0, r1
 801a550:	9106      	str	r1, [sp, #24]
 801a552:	0039      	movs	r1, r7
 801a554:	17ff      	asrs	r7, r7, #31
 801a556:	0038      	movs	r0, r7
 801a558:	9505      	str	r5, [sp, #20]
 801a55a:	1af5      	subs	r5, r6, r3
 801a55c:	17ef      	asrs	r7, r5, #31
 801a55e:	970b      	str	r7, [sp, #44]	@ 0x2c
 801a560:	6857      	ldr	r7, [r2, #4]
 801a562:	0003      	movs	r3, r0
 801a564:	17fe      	asrs	r6, r7, #31
 801a566:	000a      	movs	r2, r1
 801a568:	9108      	str	r1, [sp, #32]
 801a56a:	900a      	str	r0, [sp, #40]	@ 0x28
 801a56c:	17e1      	asrs	r1, r4, #31
 801a56e:	0020      	movs	r0, r4
 801a570:	960c      	str	r6, [sp, #48]	@ 0x30
 801a572:	f7e6 f825 	bl	80005c0 <__aeabi_lmul>
 801a576:	003a      	movs	r2, r7
 801a578:	17fb      	asrs	r3, r7, #31
 801a57a:	000e      	movs	r6, r1
 801a57c:	0028      	movs	r0, r5
 801a57e:	17e9      	asrs	r1, r5, #31
 801a580:	f7e6 f81e 	bl	80005c0 <__aeabi_lmul>
 801a584:	4653      	mov	r3, sl
 801a586:	1a76      	subs	r6, r6, r1
 801a588:	0076      	lsls	r6, r6, #1
 801a58a:	601e      	str	r6, [r3, #0]
 801a58c:	002a      	movs	r2, r5
 801a58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a590:	9808      	ldr	r0, [sp, #32]
 801a592:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a594:	f7e6 f814 	bl	80005c0 <__aeabi_lmul>
 801a598:	003a      	movs	r2, r7
 801a59a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a59c:	000d      	movs	r5, r1
 801a59e:	0020      	movs	r0, r4
 801a5a0:	9907      	ldr	r1, [sp, #28]
 801a5a2:	f7e6 f80d 	bl	80005c0 <__aeabi_lmul>
 801a5a6:	4657      	mov	r7, sl
 801a5a8:	186d      	adds	r5, r5, r1
 801a5aa:	006d      	lsls	r5, r5, #1
 801a5ac:	607d      	str	r5, [r7, #4]
 801a5ae:	9b03      	ldr	r3, [sp, #12]
 801a5b0:	9e06      	ldr	r6, [sp, #24]
 801a5b2:	9d05      	ldr	r5, [sp, #20]
 801a5b4:	46b4      	mov	ip, r6
 801a5b6:	1b5d      	subs	r5, r3, r5
 801a5b8:	9b00      	ldr	r3, [sp, #0]
 801a5ba:	17ef      	asrs	r7, r5, #31
 801a5bc:	0039      	movs	r1, r7
 801a5be:	681f      	ldr	r7, [r3, #0]
 801a5c0:	17fc      	asrs	r4, r7, #31
 801a5c2:	0020      	movs	r0, r4
 801a5c4:	9c04      	ldr	r4, [sp, #16]
 801a5c6:	4464      	add	r4, ip
 801a5c8:	17e6      	asrs	r6, r4, #31
 801a5ca:	9407      	str	r4, [sp, #28]
 801a5cc:	9608      	str	r6, [sp, #32]
 801a5ce:	685e      	ldr	r6, [r3, #4]
 801a5d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a5d2:	17f2      	asrs	r2, r6, #31
 801a5d4:	0003      	movs	r3, r0
 801a5d6:	920c      	str	r2, [sp, #48]	@ 0x30
 801a5d8:	0028      	movs	r0, r5
 801a5da:	003a      	movs	r2, r7
 801a5dc:	910a      	str	r1, [sp, #40]	@ 0x28
 801a5de:	f7e5 ffef 	bl	80005c0 <__aeabi_lmul>
 801a5e2:	0032      	movs	r2, r6
 801a5e4:	17f3      	asrs	r3, r6, #31
 801a5e6:	9807      	ldr	r0, [sp, #28]
 801a5e8:	000c      	movs	r4, r1
 801a5ea:	9908      	ldr	r1, [sp, #32]
 801a5ec:	f7e5 ffe8 	bl	80005c0 <__aeabi_lmul>
 801a5f0:	4658      	mov	r0, fp
 801a5f2:	1a64      	subs	r4, r4, r1
 801a5f4:	0064      	lsls	r4, r4, #1
 801a5f6:	9a07      	ldr	r2, [sp, #28]
 801a5f8:	6004      	str	r4, [r0, #0]
 801a5fa:	9b08      	ldr	r3, [sp, #32]
 801a5fc:	0038      	movs	r0, r7
 801a5fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a600:	f7e5 ffde 	bl	80005c0 <__aeabi_lmul>
 801a604:	0032      	movs	r2, r6
 801a606:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a608:	000c      	movs	r4, r1
 801a60a:	0028      	movs	r0, r5
 801a60c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a60e:	f7e5 ffd7 	bl	80005c0 <__aeabi_lmul>
 801a612:	9d05      	ldr	r5, [sp, #20]
 801a614:	465f      	mov	r7, fp
 801a616:	46ac      	mov	ip, r5
 801a618:	1864      	adds	r4, r4, r1
 801a61a:	9903      	ldr	r1, [sp, #12]
 801a61c:	0064      	lsls	r4, r4, #1
 801a61e:	4461      	add	r1, ip
 801a620:	607c      	str	r4, [r7, #4]
 801a622:	000c      	movs	r4, r1
 801a624:	17c9      	asrs	r1, r1, #31
 801a626:	9105      	str	r1, [sp, #20]
 801a628:	9902      	ldr	r1, [sp, #8]
 801a62a:	9804      	ldr	r0, [sp, #16]
 801a62c:	680d      	ldr	r5, [r1, #0]
 801a62e:	9e06      	ldr	r6, [sp, #24]
 801a630:	002b      	movs	r3, r5
 801a632:	17ed      	asrs	r5, r5, #31
 801a634:	684f      	ldr	r7, [r1, #4]
 801a636:	9503      	str	r5, [sp, #12]
 801a638:	1b85      	subs	r5, r0, r6
 801a63a:	17e8      	asrs	r0, r5, #31
 801a63c:	001a      	movs	r2, r3
 801a63e:	9006      	str	r0, [sp, #24]
 801a640:	17fe      	asrs	r6, r7, #31
 801a642:	9304      	str	r3, [sp, #16]
 801a644:	0020      	movs	r0, r4
 801a646:	9b03      	ldr	r3, [sp, #12]
 801a648:	17e1      	asrs	r1, r4, #31
 801a64a:	9607      	str	r6, [sp, #28]
 801a64c:	f7e5 ffb8 	bl	80005c0 <__aeabi_lmul>
 801a650:	003a      	movs	r2, r7
 801a652:	000e      	movs	r6, r1
 801a654:	17fb      	asrs	r3, r7, #31
 801a656:	0028      	movs	r0, r5
 801a658:	17e9      	asrs	r1, r5, #31
 801a65a:	f7e5 ffb1 	bl	80005c0 <__aeabi_lmul>
 801a65e:	4640      	mov	r0, r8
 801a660:	1a76      	subs	r6, r6, r1
 801a662:	0076      	lsls	r6, r6, #1
 801a664:	002a      	movs	r2, r5
 801a666:	9b06      	ldr	r3, [sp, #24]
 801a668:	6006      	str	r6, [r0, #0]
 801a66a:	9903      	ldr	r1, [sp, #12]
 801a66c:	9804      	ldr	r0, [sp, #16]
 801a66e:	f7e5 ffa7 	bl	80005c0 <__aeabi_lmul>
 801a672:	0020      	movs	r0, r4
 801a674:	2408      	movs	r4, #8
 801a676:	9b07      	ldr	r3, [sp, #28]
 801a678:	000d      	movs	r5, r1
 801a67a:	003a      	movs	r2, r7
 801a67c:	9905      	ldr	r1, [sp, #20]
 801a67e:	f7e5 ff9f 	bl	80005c0 <__aeabi_lmul>
 801a682:	4640      	mov	r0, r8
 801a684:	46a4      	mov	ip, r4
 801a686:	186d      	adds	r5, r5, r1
 801a688:	006d      	lsls	r5, r5, #1
 801a68a:	6045      	str	r5, [r0, #4]
 801a68c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a68e:	44e1      	add	r9, ip
 801a690:	3801      	subs	r0, #1
 801a692:	9009      	str	r0, [sp, #36]	@ 0x24
 801a694:	9a01      	ldr	r2, [sp, #4]
 801a696:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a698:	44e2      	add	sl, ip
 801a69a:	44e3      	add	fp, ip
 801a69c:	44e0      	add	r8, ip
 801a69e:	46a4      	mov	ip, r4
 801a6a0:	4462      	add	r2, ip
 801a6a2:	9201      	str	r2, [sp, #4]
 801a6a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a6a6:	9b00      	ldr	r3, [sp, #0]
 801a6a8:	4694      	mov	ip, r2
 801a6aa:	4463      	add	r3, ip
 801a6ac:	9300      	str	r3, [sp, #0]
 801a6ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a6b0:	9902      	ldr	r1, [sp, #8]
 801a6b2:	469c      	mov	ip, r3
 801a6b4:	4461      	add	r1, ip
 801a6b6:	9102      	str	r1, [sp, #8]
 801a6b8:	2800      	cmp	r0, #0
 801a6ba:	d000      	beq.n	801a6be <arm_radix4_butterfly_inverse_q31+0x22e>
 801a6bc:	e70f      	b.n	801a4de <arm_radix4_butterfly_inverse_q31+0x4e>
 801a6be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a6c0:	009b      	lsls	r3, r3, #2
 801a6c2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a6c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a6c6:	9320      	str	r3, [sp, #128]	@ 0x80
 801a6c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a6ca:	2b04      	cmp	r3, #4
 801a6cc:	d800      	bhi.n	801a6d0 <arm_radix4_butterfly_inverse_q31+0x240>
 801a6ce:	e17c      	b.n	801a9ca <arm_radix4_butterfly_inverse_q31+0x53a>
 801a6d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a6d2:	0893      	lsrs	r3, r2, #2
 801a6d4:	1e59      	subs	r1, r3, #1
 801a6d6:	9321      	str	r3, [sp, #132]	@ 0x84
 801a6d8:	00db      	lsls	r3, r3, #3
 801a6da:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a6dc:	00d3      	lsls	r3, r2, #3
 801a6de:	9300      	str	r3, [sp, #0]
 801a6e0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a6e2:	911a      	str	r1, [sp, #104]	@ 0x68
 801a6e4:	00da      	lsls	r2, r3, #3
 801a6e6:	921e      	str	r2, [sp, #120]	@ 0x78
 801a6e8:	011a      	lsls	r2, r3, #4
 801a6ea:	921d      	str	r2, [sp, #116]	@ 0x74
 801a6ec:	001a      	movs	r2, r3
 801a6ee:	4694      	mov	ip, r2
 801a6f0:	005b      	lsls	r3, r3, #1
 801a6f2:	4463      	add	r3, ip
 801a6f4:	00db      	lsls	r3, r3, #3
 801a6f6:	931c      	str	r3, [sp, #112]	@ 0x70
 801a6f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a6fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a6fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a6fe:	9318      	str	r3, [sp, #96]	@ 0x60
 801a700:	9319      	str	r3, [sp, #100]	@ 0x64
 801a702:	9316      	str	r3, [sp, #88]	@ 0x58
 801a704:	2300      	movs	r3, #0
 801a706:	9315      	str	r3, [sp, #84]	@ 0x54
 801a708:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a70a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a70c:	681a      	ldr	r2, [r3, #0]
 801a70e:	685b      	ldr	r3, [r3, #4]
 801a710:	9205      	str	r2, [sp, #20]
 801a712:	9306      	str	r3, [sp, #24]
 801a714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a716:	468c      	mov	ip, r1
 801a718:	681a      	ldr	r2, [r3, #0]
 801a71a:	685b      	ldr	r3, [r3, #4]
 801a71c:	9207      	str	r2, [sp, #28]
 801a71e:	9308      	str	r3, [sp, #32]
 801a720:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a722:	681a      	ldr	r2, [r3, #0]
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	9209      	str	r2, [sp, #36]	@ 0x24
 801a728:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a72a:	930a      	str	r3, [sp, #40]	@ 0x28
 801a72c:	0013      	movs	r3, r2
 801a72e:	4463      	add	r3, ip
 801a730:	4698      	mov	r8, r3
 801a732:	0013      	movs	r3, r2
 801a734:	4442      	add	r2, r8
 801a736:	4691      	mov	r9, r2
 801a738:	001a      	movs	r2, r3
 801a73a:	444a      	add	r2, r9
 801a73c:	4692      	mov	sl, r2
 801a73e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a740:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a742:	4293      	cmp	r3, r2
 801a744:	d800      	bhi.n	801a748 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801a746:	e0d9      	b.n	801a8fc <arm_radix4_butterfly_inverse_q31+0x46c>
 801a748:	4694      	mov	ip, r2
 801a74a:	4644      	mov	r4, r8
 801a74c:	4655      	mov	r5, sl
 801a74e:	4688      	mov	r8, r1
 801a750:	9b07      	ldr	r3, [sp, #28]
 801a752:	17db      	asrs	r3, r3, #31
 801a754:	930c      	str	r3, [sp, #48]	@ 0x30
 801a756:	9b08      	ldr	r3, [sp, #32]
 801a758:	17db      	asrs	r3, r3, #31
 801a75a:	930d      	str	r3, [sp, #52]	@ 0x34
 801a75c:	9b05      	ldr	r3, [sp, #20]
 801a75e:	17db      	asrs	r3, r3, #31
 801a760:	930e      	str	r3, [sp, #56]	@ 0x38
 801a762:	9b06      	ldr	r3, [sp, #24]
 801a764:	17db      	asrs	r3, r3, #31
 801a766:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a76a:	17db      	asrs	r3, r3, #31
 801a76c:	9310      	str	r3, [sp, #64]	@ 0x40
 801a76e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a770:	17db      	asrs	r3, r3, #31
 801a772:	9311      	str	r3, [sp, #68]	@ 0x44
 801a774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a776:	4463      	add	r3, ip
 801a778:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a77a:	4643      	mov	r3, r8
 801a77c:	4641      	mov	r1, r8
 801a77e:	681a      	ldr	r2, [r3, #0]
 801a780:	464b      	mov	r3, r9
 801a782:	684f      	ldr	r7, [r1, #4]
 801a784:	4649      	mov	r1, r9
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	18d6      	adds	r6, r2, r3
 801a78a:	1ad3      	subs	r3, r2, r3
 801a78c:	9301      	str	r3, [sp, #4]
 801a78e:	684b      	ldr	r3, [r1, #4]
 801a790:	1af9      	subs	r1, r7, r3
 801a792:	9102      	str	r1, [sp, #8]
 801a794:	6829      	ldr	r1, [r5, #0]
 801a796:	18f8      	adds	r0, r7, r3
 801a798:	468c      	mov	ip, r1
 801a79a:	6827      	ldr	r7, [r4, #0]
 801a79c:	4467      	add	r7, ip
 801a79e:	003a      	movs	r2, r7
 801a7a0:	19f3      	adds	r3, r6, r7
 801a7a2:	4647      	mov	r7, r8
 801a7a4:	109b      	asrs	r3, r3, #2
 801a7a6:	603b      	str	r3, [r7, #0]
 801a7a8:	6869      	ldr	r1, [r5, #4]
 801a7aa:	6867      	ldr	r7, [r4, #4]
 801a7ac:	468c      	mov	ip, r1
 801a7ae:	4467      	add	r7, ip
 801a7b0:	003b      	movs	r3, r7
 801a7b2:	19c1      	adds	r1, r0, r7
 801a7b4:	4647      	mov	r7, r8
 801a7b6:	1ab6      	subs	r6, r6, r2
 801a7b8:	1089      	asrs	r1, r1, #2
 801a7ba:	6079      	str	r1, [r7, #4]
 801a7bc:	17f2      	asrs	r2, r6, #31
 801a7be:	9900      	ldr	r1, [sp, #0]
 801a7c0:	4692      	mov	sl, r2
 801a7c2:	468c      	mov	ip, r1
 801a7c4:	6867      	ldr	r7, [r4, #4]
 801a7c6:	6869      	ldr	r1, [r5, #4]
 801a7c8:	44e0      	add	r8, ip
 801a7ca:	1a7f      	subs	r7, r7, r1
 801a7cc:	9703      	str	r7, [sp, #12]
 801a7ce:	6821      	ldr	r1, [r4, #0]
 801a7d0:	682f      	ldr	r7, [r5, #0]
 801a7d2:	1bc9      	subs	r1, r1, r7
 801a7d4:	1ac7      	subs	r7, r0, r3
 801a7d6:	17fa      	asrs	r2, r7, #31
 801a7d8:	4693      	mov	fp, r2
 801a7da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7dc:	9a07      	ldr	r2, [sp, #28]
 801a7de:	9104      	str	r1, [sp, #16]
 801a7e0:	0030      	movs	r0, r6
 801a7e2:	4651      	mov	r1, sl
 801a7e4:	f7e5 feec 	bl	80005c0 <__aeabi_lmul>
 801a7e8:	9a08      	ldr	r2, [sp, #32]
 801a7ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a7ec:	9112      	str	r1, [sp, #72]	@ 0x48
 801a7ee:	0038      	movs	r0, r7
 801a7f0:	4659      	mov	r1, fp
 801a7f2:	f7e5 fee5 	bl	80005c0 <__aeabi_lmul>
 801a7f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a7f8:	9a07      	ldr	r2, [sp, #28]
 801a7fa:	1a41      	subs	r1, r0, r1
 801a7fc:	1049      	asrs	r1, r1, #1
 801a7fe:	6021      	str	r1, [r4, #0]
 801a800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a802:	0038      	movs	r0, r7
 801a804:	4659      	mov	r1, fp
 801a806:	f7e5 fedb 	bl	80005c0 <__aeabi_lmul>
 801a80a:	9a08      	ldr	r2, [sp, #32]
 801a80c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a80e:	000f      	movs	r7, r1
 801a810:	0030      	movs	r0, r6
 801a812:	4651      	mov	r1, sl
 801a814:	f7e5 fed4 	bl	80005c0 <__aeabi_lmul>
 801a818:	9b00      	ldr	r3, [sp, #0]
 801a81a:	187f      	adds	r7, r7, r1
 801a81c:	469c      	mov	ip, r3
 801a81e:	107f      	asrs	r7, r7, #1
 801a820:	6067      	str	r7, [r4, #4]
 801a822:	9a01      	ldr	r2, [sp, #4]
 801a824:	9f03      	ldr	r7, [sp, #12]
 801a826:	9802      	ldr	r0, [sp, #8]
 801a828:	1bd7      	subs	r7, r2, r7
 801a82a:	17fe      	asrs	r6, r7, #31
 801a82c:	0031      	movs	r1, r6
 801a82e:	9e04      	ldr	r6, [sp, #16]
 801a830:	4682      	mov	sl, r0
 801a832:	4464      	add	r4, ip
 801a834:	46b4      	mov	ip, r6
 801a836:	44e2      	add	sl, ip
 801a838:	4652      	mov	r2, sl
 801a83a:	17d2      	asrs	r2, r2, #31
 801a83c:	4693      	mov	fp, r2
 801a83e:	0038      	movs	r0, r7
 801a840:	9a05      	ldr	r2, [sp, #20]
 801a842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a844:	9112      	str	r1, [sp, #72]	@ 0x48
 801a846:	f7e5 febb 	bl	80005c0 <__aeabi_lmul>
 801a84a:	9a06      	ldr	r2, [sp, #24]
 801a84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a84e:	000e      	movs	r6, r1
 801a850:	4650      	mov	r0, sl
 801a852:	4659      	mov	r1, fp
 801a854:	f7e5 feb4 	bl	80005c0 <__aeabi_lmul>
 801a858:	4648      	mov	r0, r9
 801a85a:	1a76      	subs	r6, r6, r1
 801a85c:	1076      	asrs	r6, r6, #1
 801a85e:	6006      	str	r6, [r0, #0]
 801a860:	9a05      	ldr	r2, [sp, #20]
 801a862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a864:	4650      	mov	r0, sl
 801a866:	4659      	mov	r1, fp
 801a868:	f7e5 feaa 	bl	80005c0 <__aeabi_lmul>
 801a86c:	9a06      	ldr	r2, [sp, #24]
 801a86e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a870:	000e      	movs	r6, r1
 801a872:	0038      	movs	r0, r7
 801a874:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a876:	f7e5 fea3 	bl	80005c0 <__aeabi_lmul>
 801a87a:	9a00      	ldr	r2, [sp, #0]
 801a87c:	9f03      	ldr	r7, [sp, #12]
 801a87e:	4694      	mov	ip, r2
 801a880:	1876      	adds	r6, r6, r1
 801a882:	4649      	mov	r1, r9
 801a884:	44e1      	add	r9, ip
 801a886:	46bc      	mov	ip, r7
 801a888:	9b01      	ldr	r3, [sp, #4]
 801a88a:	1076      	asrs	r6, r6, #1
 801a88c:	4463      	add	r3, ip
 801a88e:	17df      	asrs	r7, r3, #31
 801a890:	604e      	str	r6, [r1, #4]
 801a892:	46ba      	mov	sl, r7
 801a894:	001e      	movs	r6, r3
 801a896:	9802      	ldr	r0, [sp, #8]
 801a898:	9b04      	ldr	r3, [sp, #16]
 801a89a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a89c:	1ac7      	subs	r7, r0, r3
 801a89e:	17fb      	asrs	r3, r7, #31
 801a8a0:	469b      	mov	fp, r3
 801a8a2:	0030      	movs	r0, r6
 801a8a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a8a6:	4651      	mov	r1, sl
 801a8a8:	f7e5 fe8a 	bl	80005c0 <__aeabi_lmul>
 801a8ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a8ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a8b0:	9101      	str	r1, [sp, #4]
 801a8b2:	0038      	movs	r0, r7
 801a8b4:	4659      	mov	r1, fp
 801a8b6:	f7e5 fe83 	bl	80005c0 <__aeabi_lmul>
 801a8ba:	9801      	ldr	r0, [sp, #4]
 801a8bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a8be:	1a41      	subs	r1, r0, r1
 801a8c0:	1049      	asrs	r1, r1, #1
 801a8c2:	6029      	str	r1, [r5, #0]
 801a8c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a8c6:	0038      	movs	r0, r7
 801a8c8:	4659      	mov	r1, fp
 801a8ca:	f7e5 fe79 	bl	80005c0 <__aeabi_lmul>
 801a8ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a8d0:	000f      	movs	r7, r1
 801a8d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a8d4:	0030      	movs	r0, r6
 801a8d6:	4651      	mov	r1, sl
 801a8d8:	f7e5 fe72 	bl	80005c0 <__aeabi_lmul>
 801a8dc:	187f      	adds	r7, r7, r1
 801a8de:	107f      	asrs	r7, r7, #1
 801a8e0:	606f      	str	r7, [r5, #4]
 801a8e2:	9a00      	ldr	r2, [sp, #0]
 801a8e4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a8e6:	4694      	mov	ip, r2
 801a8e8:	4465      	add	r5, ip
 801a8ea:	468c      	mov	ip, r1
 801a8ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a8ee:	0013      	movs	r3, r2
 801a8f0:	4462      	add	r2, ip
 801a8f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a8f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a8f6:	429a      	cmp	r2, r3
 801a8f8:	d900      	bls.n	801a8fc <arm_radix4_butterfly_inverse_q31+0x46c>
 801a8fa:	e73e      	b.n	801a77a <arm_radix4_butterfly_inverse_q31+0x2ea>
 801a8fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a8fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a900:	468c      	mov	ip, r1
 801a902:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801a904:	4462      	add	r2, ip
 801a906:	468c      	mov	ip, r1
 801a908:	9216      	str	r2, [sp, #88]	@ 0x58
 801a90a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801a90c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a90e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a910:	4462      	add	r2, ip
 801a912:	468c      	mov	ip, r1
 801a914:	9219      	str	r2, [sp, #100]	@ 0x64
 801a916:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a918:	3301      	adds	r3, #1
 801a91a:	4462      	add	r2, ip
 801a91c:	9218      	str	r2, [sp, #96]	@ 0x60
 801a91e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a920:	9315      	str	r3, [sp, #84]	@ 0x54
 801a922:	3208      	adds	r2, #8
 801a924:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a926:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a928:	4293      	cmp	r3, r2
 801a92a:	d800      	bhi.n	801a92e <arm_radix4_butterfly_inverse_q31+0x49e>
 801a92c:	e6ec      	b.n	801a708 <arm_radix4_butterfly_inverse_q31+0x278>
 801a92e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a930:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a936:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a938:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a93a:	089b      	lsrs	r3, r3, #2
 801a93c:	9320      	str	r3, [sp, #128]	@ 0x80
 801a93e:	2b04      	cmp	r3, #4
 801a940:	d900      	bls.n	801a944 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801a942:	e6c5      	b.n	801a6d0 <arm_radix4_butterfly_inverse_q31+0x240>
 801a944:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a946:	469a      	mov	sl, r3
 801a948:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a94a:	681a      	ldr	r2, [r3, #0]
 801a94c:	6918      	ldr	r0, [r3, #16]
 801a94e:	4691      	mov	r9, r2
 801a950:	464c      	mov	r4, r9
 801a952:	4680      	mov	r8, r0
 801a954:	69de      	ldr	r6, [r3, #28]
 801a956:	689d      	ldr	r5, [r3, #8]
 801a958:	46b4      	mov	ip, r6
 801a95a:	6998      	ldr	r0, [r3, #24]
 801a95c:	1964      	adds	r4, r4, r5
 801a95e:	6859      	ldr	r1, [r3, #4]
 801a960:	68da      	ldr	r2, [r3, #12]
 801a962:	4444      	add	r4, r8
 801a964:	695f      	ldr	r7, [r3, #20]
 801a966:	1824      	adds	r4, r4, r0
 801a968:	601c      	str	r4, [r3, #0]
 801a96a:	188c      	adds	r4, r1, r2
 801a96c:	19e4      	adds	r4, r4, r7
 801a96e:	4464      	add	r4, ip
 801a970:	605c      	str	r4, [r3, #4]
 801a972:	464c      	mov	r4, r9
 801a974:	1b64      	subs	r4, r4, r5
 801a976:	4444      	add	r4, r8
 801a978:	1a24      	subs	r4, r4, r0
 801a97a:	609c      	str	r4, [r3, #8]
 801a97c:	1a8c      	subs	r4, r1, r2
 801a97e:	19e4      	adds	r4, r4, r7
 801a980:	1ba4      	subs	r4, r4, r6
 801a982:	60dc      	str	r4, [r3, #12]
 801a984:	464c      	mov	r4, r9
 801a986:	4646      	mov	r6, r8
 801a988:	1aa4      	subs	r4, r4, r2
 801a98a:	1ba4      	subs	r4, r4, r6
 801a98c:	4464      	add	r4, ip
 801a98e:	611c      	str	r4, [r3, #16]
 801a990:	194c      	adds	r4, r1, r5
 801a992:	1be4      	subs	r4, r4, r7
 801a994:	1a24      	subs	r4, r4, r0
 801a996:	615c      	str	r4, [r3, #20]
 801a998:	4644      	mov	r4, r8
 801a99a:	4666      	mov	r6, ip
 801a99c:	444a      	add	r2, r9
 801a99e:	1b12      	subs	r2, r2, r4
 801a9a0:	1b92      	subs	r2, r2, r6
 801a9a2:	619a      	str	r2, [r3, #24]
 801a9a4:	1b4a      	subs	r2, r1, r5
 801a9a6:	1bd1      	subs	r1, r2, r7
 801a9a8:	2201      	movs	r2, #1
 801a9aa:	4252      	negs	r2, r2
 801a9ac:	4694      	mov	ip, r2
 801a9ae:	44e2      	add	sl, ip
 801a9b0:	4652      	mov	r2, sl
 801a9b2:	1809      	adds	r1, r1, r0
 801a9b4:	61d9      	str	r1, [r3, #28]
 801a9b6:	3320      	adds	r3, #32
 801a9b8:	2a00      	cmp	r2, #0
 801a9ba:	d1c6      	bne.n	801a94a <arm_radix4_butterfly_inverse_q31+0x4ba>
 801a9bc:	b027      	add	sp, #156	@ 0x9c
 801a9be:	bc3c      	pop	{r2, r3, r4, r5}
 801a9c0:	4690      	mov	r8, r2
 801a9c2:	4699      	mov	r9, r3
 801a9c4:	46a2      	mov	sl, r4
 801a9c6:	46ab      	mov	fp, r5
 801a9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9ca:	469a      	mov	sl, r3
 801a9cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a9ce:	e7bc      	b.n	801a94a <arm_radix4_butterfly_inverse_q31+0x4ba>

0801a9d0 <arm_cmplx_mag_squared_q31>:
 801a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9d2:	464f      	mov	r7, r9
 801a9d4:	4646      	mov	r6, r8
 801a9d6:	0004      	movs	r4, r0
 801a9d8:	b4c0      	push	{r6, r7}
 801a9da:	0016      	movs	r6, r2
 801a9dc:	000f      	movs	r7, r1
 801a9de:	2a00      	cmp	r2, #0
 801a9e0:	d018      	beq.n	801aa14 <arm_cmplx_mag_squared_q31+0x44>
 801a9e2:	6823      	ldr	r3, [r4, #0]
 801a9e4:	6822      	ldr	r2, [r4, #0]
 801a9e6:	17d9      	asrs	r1, r3, #31
 801a9e8:	6863      	ldr	r3, [r4, #4]
 801a9ea:	0010      	movs	r0, r2
 801a9ec:	4698      	mov	r8, r3
 801a9ee:	17db      	asrs	r3, r3, #31
 801a9f0:	4699      	mov	r9, r3
 801a9f2:	000b      	movs	r3, r1
 801a9f4:	f7e5 fde4 	bl	80005c0 <__aeabi_lmul>
 801a9f8:	4642      	mov	r2, r8
 801a9fa:	104d      	asrs	r5, r1, #1
 801a9fc:	464b      	mov	r3, r9
 801a9fe:	4640      	mov	r0, r8
 801aa00:	4649      	mov	r1, r9
 801aa02:	f7e5 fddd 	bl	80005c0 <__aeabi_lmul>
 801aa06:	1049      	asrs	r1, r1, #1
 801aa08:	1869      	adds	r1, r5, r1
 801aa0a:	3e01      	subs	r6, #1
 801aa0c:	c702      	stmia	r7!, {r1}
 801aa0e:	3408      	adds	r4, #8
 801aa10:	2e00      	cmp	r6, #0
 801aa12:	d1e6      	bne.n	801a9e2 <arm_cmplx_mag_squared_q31+0x12>
 801aa14:	bc0c      	pop	{r2, r3}
 801aa16:	4690      	mov	r8, r2
 801aa18:	4699      	mov	r9, r3
 801aa1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa1c <arm_mult_q31>:
 801aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa1e:	4646      	mov	r6, r8
 801aa20:	464f      	mov	r7, r9
 801aa22:	4690      	mov	r8, r2
 801aa24:	b4c0      	push	{r6, r7}
 801aa26:	001d      	movs	r5, r3
 801aa28:	0006      	movs	r6, r0
 801aa2a:	000f      	movs	r7, r1
 801aa2c:	2400      	movs	r4, #0
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d020      	beq.n	801aa74 <arm_mult_q31+0x58>
 801aa32:	4b12      	ldr	r3, [pc, #72]	@ (801aa7c <arm_mult_q31+0x60>)
 801aa34:	4699      	mov	r9, r3
 801aa36:	e007      	b.n	801aa48 <arm_mult_q31+0x2c>
 801aa38:	464b      	mov	r3, r9
 801aa3a:	4059      	eors	r1, r3
 801aa3c:	4643      	mov	r3, r8
 801aa3e:	3d01      	subs	r5, #1
 801aa40:	5119      	str	r1, [r3, r4]
 801aa42:	3404      	adds	r4, #4
 801aa44:	2d00      	cmp	r5, #0
 801aa46:	d015      	beq.n	801aa74 <arm_mult_q31+0x58>
 801aa48:	5933      	ldr	r3, [r6, r4]
 801aa4a:	593a      	ldr	r2, [r7, r4]
 801aa4c:	17d9      	asrs	r1, r3, #31
 801aa4e:	593b      	ldr	r3, [r7, r4]
 801aa50:	5930      	ldr	r0, [r6, r4]
 801aa52:	17db      	asrs	r3, r3, #31
 801aa54:	f7e5 fdb4 	bl	80005c0 <__aeabi_lmul>
 801aa58:	004b      	lsls	r3, r1, #1
 801aa5a:	0fc0      	lsrs	r0, r0, #31
 801aa5c:	4318      	orrs	r0, r3
 801aa5e:	17c9      	asrs	r1, r1, #31
 801aa60:	17c3      	asrs	r3, r0, #31
 801aa62:	428b      	cmp	r3, r1
 801aa64:	d1e8      	bne.n	801aa38 <arm_mult_q31+0x1c>
 801aa66:	0001      	movs	r1, r0
 801aa68:	4643      	mov	r3, r8
 801aa6a:	3d01      	subs	r5, #1
 801aa6c:	5119      	str	r1, [r3, r4]
 801aa6e:	3404      	adds	r4, #4
 801aa70:	2d00      	cmp	r5, #0
 801aa72:	d1e9      	bne.n	801aa48 <arm_mult_q31+0x2c>
 801aa74:	bc0c      	pop	{r2, r3}
 801aa76:	4690      	mov	r8, r2
 801aa78:	4699      	mov	r9, r3
 801aa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa7c:	7fffffff 	.word	0x7fffffff

0801aa80 <arm_add_q31>:
 801aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa82:	465f      	mov	r7, fp
 801aa84:	4656      	mov	r6, sl
 801aa86:	464d      	mov	r5, r9
 801aa88:	4644      	mov	r4, r8
 801aa8a:	b4f0      	push	{r4, r5, r6, r7}
 801aa8c:	4693      	mov	fp, r2
 801aa8e:	b083      	sub	sp, #12
 801aa90:	4681      	mov	r9, r0
 801aa92:	468a      	mov	sl, r1
 801aa94:	4698      	mov	r8, r3
 801aa96:	2200      	movs	r2, #0
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d020      	beq.n	801aade <arm_add_q31+0x5e>
 801aa9c:	4649      	mov	r1, r9
 801aa9e:	4653      	mov	r3, sl
 801aaa0:	588e      	ldr	r6, [r1, r2]
 801aaa2:	589b      	ldr	r3, [r3, r2]
 801aaa4:	17f7      	asrs	r7, r6, #31
 801aaa6:	001c      	movs	r4, r3
 801aaa8:	0030      	movs	r0, r6
 801aaaa:	0039      	movs	r1, r7
 801aaac:	17dd      	asrs	r5, r3, #31
 801aaae:	46b4      	mov	ip, r6
 801aab0:	1900      	adds	r0, r0, r4
 801aab2:	4169      	adcs	r1, r5
 801aab4:	4463      	add	r3, ip
 801aab6:	9000      	str	r0, [sp, #0]
 801aab8:	9101      	str	r1, [sp, #4]
 801aaba:	17d9      	asrs	r1, r3, #31
 801aabc:	468c      	mov	ip, r1
 801aabe:	9901      	ldr	r1, [sp, #4]
 801aac0:	458c      	cmp	ip, r1
 801aac2:	d002      	beq.n	801aaca <arm_add_q31+0x4a>
 801aac4:	17cb      	asrs	r3, r1, #31
 801aac6:	4909      	ldr	r1, [pc, #36]	@ (801aaec <arm_add_q31+0x6c>)
 801aac8:	404b      	eors	r3, r1
 801aaca:	4659      	mov	r1, fp
 801aacc:	508b      	str	r3, [r1, r2]
 801aace:	2301      	movs	r3, #1
 801aad0:	425b      	negs	r3, r3
 801aad2:	469c      	mov	ip, r3
 801aad4:	44e0      	add	r8, ip
 801aad6:	4643      	mov	r3, r8
 801aad8:	3204      	adds	r2, #4
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d1de      	bne.n	801aa9c <arm_add_q31+0x1c>
 801aade:	b003      	add	sp, #12
 801aae0:	bc3c      	pop	{r2, r3, r4, r5}
 801aae2:	4690      	mov	r8, r2
 801aae4:	4699      	mov	r9, r3
 801aae6:	46a2      	mov	sl, r4
 801aae8:	46ab      	mov	fp, r5
 801aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaec:	7fffffff 	.word	0x7fffffff

0801aaf0 <atof>:
 801aaf0:	b510      	push	{r4, lr}
 801aaf2:	2100      	movs	r1, #0
 801aaf4:	f000 fe12 	bl	801b71c <strtod>
 801aaf8:	bd10      	pop	{r4, pc}

0801aafa <atoi>:
 801aafa:	b510      	push	{r4, lr}
 801aafc:	220a      	movs	r2, #10
 801aafe:	2100      	movs	r1, #0
 801ab00:	f000 fea4 	bl	801b84c <strtol>
 801ab04:	bd10      	pop	{r4, pc}
	...

0801ab08 <sulp>:
 801ab08:	b570      	push	{r4, r5, r6, lr}
 801ab0a:	0016      	movs	r6, r2
 801ab0c:	000d      	movs	r5, r1
 801ab0e:	f003 fbf3 	bl	801e2f8 <__ulp>
 801ab12:	2e00      	cmp	r6, #0
 801ab14:	d00d      	beq.n	801ab32 <sulp+0x2a>
 801ab16:	236b      	movs	r3, #107	@ 0x6b
 801ab18:	006a      	lsls	r2, r5, #1
 801ab1a:	0d52      	lsrs	r2, r2, #21
 801ab1c:	1a9b      	subs	r3, r3, r2
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	dd07      	ble.n	801ab32 <sulp+0x2a>
 801ab22:	2400      	movs	r4, #0
 801ab24:	4a03      	ldr	r2, [pc, #12]	@ (801ab34 <sulp+0x2c>)
 801ab26:	051b      	lsls	r3, r3, #20
 801ab28:	189d      	adds	r5, r3, r2
 801ab2a:	002b      	movs	r3, r5
 801ab2c:	0022      	movs	r2, r4
 801ab2e:	f7e7 fd85 	bl	800263c <__aeabi_dmul>
 801ab32:	bd70      	pop	{r4, r5, r6, pc}
 801ab34:	3ff00000 	.word	0x3ff00000

0801ab38 <_strtod_l>:
 801ab38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab3a:	b0a3      	sub	sp, #140	@ 0x8c
 801ab3c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801ab3e:	2200      	movs	r2, #0
 801ab40:	2600      	movs	r6, #0
 801ab42:	2700      	movs	r7, #0
 801ab44:	9005      	str	r0, [sp, #20]
 801ab46:	9109      	str	r1, [sp, #36]	@ 0x24
 801ab48:	921e      	str	r2, [sp, #120]	@ 0x78
 801ab4a:	911d      	str	r1, [sp, #116]	@ 0x74
 801ab4c:	780a      	ldrb	r2, [r1, #0]
 801ab4e:	2a2b      	cmp	r2, #43	@ 0x2b
 801ab50:	d053      	beq.n	801abfa <_strtod_l+0xc2>
 801ab52:	d83f      	bhi.n	801abd4 <_strtod_l+0x9c>
 801ab54:	2a0d      	cmp	r2, #13
 801ab56:	d839      	bhi.n	801abcc <_strtod_l+0x94>
 801ab58:	2a08      	cmp	r2, #8
 801ab5a:	d839      	bhi.n	801abd0 <_strtod_l+0x98>
 801ab5c:	2a00      	cmp	r2, #0
 801ab5e:	d042      	beq.n	801abe6 <_strtod_l+0xae>
 801ab60:	2200      	movs	r2, #0
 801ab62:	9212      	str	r2, [sp, #72]	@ 0x48
 801ab64:	2100      	movs	r1, #0
 801ab66:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ab68:	910c      	str	r1, [sp, #48]	@ 0x30
 801ab6a:	782a      	ldrb	r2, [r5, #0]
 801ab6c:	2a30      	cmp	r2, #48	@ 0x30
 801ab6e:	d000      	beq.n	801ab72 <_strtod_l+0x3a>
 801ab70:	e083      	b.n	801ac7a <_strtod_l+0x142>
 801ab72:	786a      	ldrb	r2, [r5, #1]
 801ab74:	3120      	adds	r1, #32
 801ab76:	438a      	bics	r2, r1
 801ab78:	2a58      	cmp	r2, #88	@ 0x58
 801ab7a:	d000      	beq.n	801ab7e <_strtod_l+0x46>
 801ab7c:	e073      	b.n	801ac66 <_strtod_l+0x12e>
 801ab7e:	9302      	str	r3, [sp, #8]
 801ab80:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ab82:	4a95      	ldr	r2, [pc, #596]	@ (801add8 <_strtod_l+0x2a0>)
 801ab84:	9301      	str	r3, [sp, #4]
 801ab86:	ab1e      	add	r3, sp, #120	@ 0x78
 801ab88:	9300      	str	r3, [sp, #0]
 801ab8a:	9805      	ldr	r0, [sp, #20]
 801ab8c:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ab8e:	a91d      	add	r1, sp, #116	@ 0x74
 801ab90:	f002 fc62 	bl	801d458 <__gethex>
 801ab94:	230f      	movs	r3, #15
 801ab96:	0002      	movs	r2, r0
 801ab98:	401a      	ands	r2, r3
 801ab9a:	0004      	movs	r4, r0
 801ab9c:	9206      	str	r2, [sp, #24]
 801ab9e:	4218      	tst	r0, r3
 801aba0:	d005      	beq.n	801abae <_strtod_l+0x76>
 801aba2:	2a06      	cmp	r2, #6
 801aba4:	d12b      	bne.n	801abfe <_strtod_l+0xc6>
 801aba6:	2300      	movs	r3, #0
 801aba8:	3501      	adds	r5, #1
 801abaa:	951d      	str	r5, [sp, #116]	@ 0x74
 801abac:	9312      	str	r3, [sp, #72]	@ 0x48
 801abae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d002      	beq.n	801abba <_strtod_l+0x82>
 801abb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801abb6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801abb8:	6013      	str	r3, [r2, #0]
 801abba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d019      	beq.n	801abf4 <_strtod_l+0xbc>
 801abc0:	2380      	movs	r3, #128	@ 0x80
 801abc2:	0030      	movs	r0, r6
 801abc4:	061b      	lsls	r3, r3, #24
 801abc6:	18f9      	adds	r1, r7, r3
 801abc8:	b023      	add	sp, #140	@ 0x8c
 801abca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abcc:	2a20      	cmp	r2, #32
 801abce:	d1c7      	bne.n	801ab60 <_strtod_l+0x28>
 801abd0:	3101      	adds	r1, #1
 801abd2:	e7ba      	b.n	801ab4a <_strtod_l+0x12>
 801abd4:	2a2d      	cmp	r2, #45	@ 0x2d
 801abd6:	d1c3      	bne.n	801ab60 <_strtod_l+0x28>
 801abd8:	3a2c      	subs	r2, #44	@ 0x2c
 801abda:	9212      	str	r2, [sp, #72]	@ 0x48
 801abdc:	1c4a      	adds	r2, r1, #1
 801abde:	921d      	str	r2, [sp, #116]	@ 0x74
 801abe0:	784a      	ldrb	r2, [r1, #1]
 801abe2:	2a00      	cmp	r2, #0
 801abe4:	d1be      	bne.n	801ab64 <_strtod_l+0x2c>
 801abe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abe8:	931d      	str	r3, [sp, #116]	@ 0x74
 801abea:	2300      	movs	r3, #0
 801abec:	9312      	str	r3, [sp, #72]	@ 0x48
 801abee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d1df      	bne.n	801abb4 <_strtod_l+0x7c>
 801abf4:	0030      	movs	r0, r6
 801abf6:	0039      	movs	r1, r7
 801abf8:	e7e6      	b.n	801abc8 <_strtod_l+0x90>
 801abfa:	2200      	movs	r2, #0
 801abfc:	e7ed      	b.n	801abda <_strtod_l+0xa2>
 801abfe:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ac00:	2a00      	cmp	r2, #0
 801ac02:	d007      	beq.n	801ac14 <_strtod_l+0xdc>
 801ac04:	2135      	movs	r1, #53	@ 0x35
 801ac06:	a820      	add	r0, sp, #128	@ 0x80
 801ac08:	f003 fc6c 	bl	801e4e4 <__copybits>
 801ac0c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ac0e:	9805      	ldr	r0, [sp, #20]
 801ac10:	f003 f826 	bl	801dc60 <_Bfree>
 801ac14:	9806      	ldr	r0, [sp, #24]
 801ac16:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ac18:	3801      	subs	r0, #1
 801ac1a:	2804      	cmp	r0, #4
 801ac1c:	d806      	bhi.n	801ac2c <_strtod_l+0xf4>
 801ac1e:	f7e5 faad 	bl	800017c <__gnu_thumb1_case_uqi>
 801ac22:	0312      	.short	0x0312
 801ac24:	1e1c      	.short	0x1e1c
 801ac26:	12          	.byte	0x12
 801ac27:	00          	.byte	0x00
 801ac28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ac2a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ac2c:	05e4      	lsls	r4, r4, #23
 801ac2e:	d502      	bpl.n	801ac36 <_strtod_l+0xfe>
 801ac30:	2380      	movs	r3, #128	@ 0x80
 801ac32:	061b      	lsls	r3, r3, #24
 801ac34:	431f      	orrs	r7, r3
 801ac36:	4b69      	ldr	r3, [pc, #420]	@ (801addc <_strtod_l+0x2a4>)
 801ac38:	423b      	tst	r3, r7
 801ac3a:	d1b8      	bne.n	801abae <_strtod_l+0x76>
 801ac3c:	f001 fc90 	bl	801c560 <__errno>
 801ac40:	2322      	movs	r3, #34	@ 0x22
 801ac42:	6003      	str	r3, [r0, #0]
 801ac44:	e7b3      	b.n	801abae <_strtod_l+0x76>
 801ac46:	4966      	ldr	r1, [pc, #408]	@ (801ade0 <_strtod_l+0x2a8>)
 801ac48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ac4a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ac4c:	400a      	ands	r2, r1
 801ac4e:	4965      	ldr	r1, [pc, #404]	@ (801ade4 <_strtod_l+0x2ac>)
 801ac50:	185b      	adds	r3, r3, r1
 801ac52:	051b      	lsls	r3, r3, #20
 801ac54:	431a      	orrs	r2, r3
 801ac56:	0017      	movs	r7, r2
 801ac58:	e7e8      	b.n	801ac2c <_strtod_l+0xf4>
 801ac5a:	4f60      	ldr	r7, [pc, #384]	@ (801addc <_strtod_l+0x2a4>)
 801ac5c:	e7e6      	b.n	801ac2c <_strtod_l+0xf4>
 801ac5e:	2601      	movs	r6, #1
 801ac60:	4f61      	ldr	r7, [pc, #388]	@ (801ade8 <_strtod_l+0x2b0>)
 801ac62:	4276      	negs	r6, r6
 801ac64:	e7e2      	b.n	801ac2c <_strtod_l+0xf4>
 801ac66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ac68:	1c5a      	adds	r2, r3, #1
 801ac6a:	921d      	str	r2, [sp, #116]	@ 0x74
 801ac6c:	785b      	ldrb	r3, [r3, #1]
 801ac6e:	2b30      	cmp	r3, #48	@ 0x30
 801ac70:	d0f9      	beq.n	801ac66 <_strtod_l+0x12e>
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d09b      	beq.n	801abae <_strtod_l+0x76>
 801ac76:	2301      	movs	r3, #1
 801ac78:	930c      	str	r3, [sp, #48]	@ 0x30
 801ac7a:	2500      	movs	r5, #0
 801ac7c:	220a      	movs	r2, #10
 801ac7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ac80:	950d      	str	r5, [sp, #52]	@ 0x34
 801ac82:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ac84:	9508      	str	r5, [sp, #32]
 801ac86:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ac88:	7804      	ldrb	r4, [r0, #0]
 801ac8a:	0023      	movs	r3, r4
 801ac8c:	3b30      	subs	r3, #48	@ 0x30
 801ac8e:	b2d9      	uxtb	r1, r3
 801ac90:	2909      	cmp	r1, #9
 801ac92:	d927      	bls.n	801ace4 <_strtod_l+0x1ac>
 801ac94:	2201      	movs	r2, #1
 801ac96:	4955      	ldr	r1, [pc, #340]	@ (801adec <_strtod_l+0x2b4>)
 801ac98:	f001 fbd4 	bl	801c444 <strncmp>
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	d031      	beq.n	801ad04 <_strtod_l+0x1cc>
 801aca0:	2000      	movs	r0, #0
 801aca2:	0023      	movs	r3, r4
 801aca4:	4684      	mov	ip, r0
 801aca6:	9a08      	ldr	r2, [sp, #32]
 801aca8:	900e      	str	r0, [sp, #56]	@ 0x38
 801acaa:	9206      	str	r2, [sp, #24]
 801acac:	2220      	movs	r2, #32
 801acae:	0019      	movs	r1, r3
 801acb0:	4391      	bics	r1, r2
 801acb2:	000a      	movs	r2, r1
 801acb4:	2100      	movs	r1, #0
 801acb6:	9107      	str	r1, [sp, #28]
 801acb8:	2a45      	cmp	r2, #69	@ 0x45
 801acba:	d000      	beq.n	801acbe <_strtod_l+0x186>
 801acbc:	e0c0      	b.n	801ae40 <_strtod_l+0x308>
 801acbe:	9b06      	ldr	r3, [sp, #24]
 801acc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801acc2:	4303      	orrs	r3, r0
 801acc4:	4313      	orrs	r3, r2
 801acc6:	428b      	cmp	r3, r1
 801acc8:	d08d      	beq.n	801abe6 <_strtod_l+0xae>
 801acca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801accc:	9309      	str	r3, [sp, #36]	@ 0x24
 801acce:	3301      	adds	r3, #1
 801acd0:	931d      	str	r3, [sp, #116]	@ 0x74
 801acd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acd4:	785b      	ldrb	r3, [r3, #1]
 801acd6:	2b2b      	cmp	r3, #43	@ 0x2b
 801acd8:	d070      	beq.n	801adbc <_strtod_l+0x284>
 801acda:	000c      	movs	r4, r1
 801acdc:	2b2d      	cmp	r3, #45	@ 0x2d
 801acde:	d173      	bne.n	801adc8 <_strtod_l+0x290>
 801ace0:	2401      	movs	r4, #1
 801ace2:	e06c      	b.n	801adbe <_strtod_l+0x286>
 801ace4:	9908      	ldr	r1, [sp, #32]
 801ace6:	2908      	cmp	r1, #8
 801ace8:	dc09      	bgt.n	801acfe <_strtod_l+0x1c6>
 801acea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801acec:	4351      	muls	r1, r2
 801acee:	185b      	adds	r3, r3, r1
 801acf0:	930d      	str	r3, [sp, #52]	@ 0x34
 801acf2:	9b08      	ldr	r3, [sp, #32]
 801acf4:	3001      	adds	r0, #1
 801acf6:	3301      	adds	r3, #1
 801acf8:	9308      	str	r3, [sp, #32]
 801acfa:	901d      	str	r0, [sp, #116]	@ 0x74
 801acfc:	e7c3      	b.n	801ac86 <_strtod_l+0x14e>
 801acfe:	4355      	muls	r5, r2
 801ad00:	195d      	adds	r5, r3, r5
 801ad02:	e7f6      	b.n	801acf2 <_strtod_l+0x1ba>
 801ad04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad06:	1c5a      	adds	r2, r3, #1
 801ad08:	921d      	str	r2, [sp, #116]	@ 0x74
 801ad0a:	9a08      	ldr	r2, [sp, #32]
 801ad0c:	785b      	ldrb	r3, [r3, #1]
 801ad0e:	2a00      	cmp	r2, #0
 801ad10:	d03a      	beq.n	801ad88 <_strtod_l+0x250>
 801ad12:	900e      	str	r0, [sp, #56]	@ 0x38
 801ad14:	9206      	str	r2, [sp, #24]
 801ad16:	001a      	movs	r2, r3
 801ad18:	3a30      	subs	r2, #48	@ 0x30
 801ad1a:	2a09      	cmp	r2, #9
 801ad1c:	d912      	bls.n	801ad44 <_strtod_l+0x20c>
 801ad1e:	2201      	movs	r2, #1
 801ad20:	4694      	mov	ip, r2
 801ad22:	e7c3      	b.n	801acac <_strtod_l+0x174>
 801ad24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad26:	3001      	adds	r0, #1
 801ad28:	1c5a      	adds	r2, r3, #1
 801ad2a:	921d      	str	r2, [sp, #116]	@ 0x74
 801ad2c:	785b      	ldrb	r3, [r3, #1]
 801ad2e:	2b30      	cmp	r3, #48	@ 0x30
 801ad30:	d0f8      	beq.n	801ad24 <_strtod_l+0x1ec>
 801ad32:	001a      	movs	r2, r3
 801ad34:	3a31      	subs	r2, #49	@ 0x31
 801ad36:	2a08      	cmp	r2, #8
 801ad38:	d83b      	bhi.n	801adb2 <_strtod_l+0x27a>
 801ad3a:	900e      	str	r0, [sp, #56]	@ 0x38
 801ad3c:	2000      	movs	r0, #0
 801ad3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ad40:	9006      	str	r0, [sp, #24]
 801ad42:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ad44:	001a      	movs	r2, r3
 801ad46:	1c41      	adds	r1, r0, #1
 801ad48:	3a30      	subs	r2, #48	@ 0x30
 801ad4a:	2b30      	cmp	r3, #48	@ 0x30
 801ad4c:	d016      	beq.n	801ad7c <_strtod_l+0x244>
 801ad4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad50:	185b      	adds	r3, r3, r1
 801ad52:	930e      	str	r3, [sp, #56]	@ 0x38
 801ad54:	9b06      	ldr	r3, [sp, #24]
 801ad56:	210a      	movs	r1, #10
 801ad58:	469c      	mov	ip, r3
 801ad5a:	4484      	add	ip, r0
 801ad5c:	459c      	cmp	ip, r3
 801ad5e:	d115      	bne.n	801ad8c <_strtod_l+0x254>
 801ad60:	9906      	ldr	r1, [sp, #24]
 801ad62:	9b06      	ldr	r3, [sp, #24]
 801ad64:	3101      	adds	r1, #1
 801ad66:	1809      	adds	r1, r1, r0
 801ad68:	181b      	adds	r3, r3, r0
 801ad6a:	9106      	str	r1, [sp, #24]
 801ad6c:	2b08      	cmp	r3, #8
 801ad6e:	dc19      	bgt.n	801ada4 <_strtod_l+0x26c>
 801ad70:	230a      	movs	r3, #10
 801ad72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ad74:	434b      	muls	r3, r1
 801ad76:	2100      	movs	r1, #0
 801ad78:	18d3      	adds	r3, r2, r3
 801ad7a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ad7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad7e:	0008      	movs	r0, r1
 801ad80:	1c5a      	adds	r2, r3, #1
 801ad82:	921d      	str	r2, [sp, #116]	@ 0x74
 801ad84:	785b      	ldrb	r3, [r3, #1]
 801ad86:	e7c6      	b.n	801ad16 <_strtod_l+0x1de>
 801ad88:	9808      	ldr	r0, [sp, #32]
 801ad8a:	e7d0      	b.n	801ad2e <_strtod_l+0x1f6>
 801ad8c:	1c5c      	adds	r4, r3, #1
 801ad8e:	2b08      	cmp	r3, #8
 801ad90:	dc04      	bgt.n	801ad9c <_strtod_l+0x264>
 801ad92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad94:	434b      	muls	r3, r1
 801ad96:	930d      	str	r3, [sp, #52]	@ 0x34
 801ad98:	0023      	movs	r3, r4
 801ad9a:	e7df      	b.n	801ad5c <_strtod_l+0x224>
 801ad9c:	2c10      	cmp	r4, #16
 801ad9e:	dcfb      	bgt.n	801ad98 <_strtod_l+0x260>
 801ada0:	434d      	muls	r5, r1
 801ada2:	e7f9      	b.n	801ad98 <_strtod_l+0x260>
 801ada4:	2100      	movs	r1, #0
 801ada6:	2b0f      	cmp	r3, #15
 801ada8:	dce8      	bgt.n	801ad7c <_strtod_l+0x244>
 801adaa:	230a      	movs	r3, #10
 801adac:	435d      	muls	r5, r3
 801adae:	1955      	adds	r5, r2, r5
 801adb0:	e7e4      	b.n	801ad7c <_strtod_l+0x244>
 801adb2:	2200      	movs	r2, #0
 801adb4:	920e      	str	r2, [sp, #56]	@ 0x38
 801adb6:	9206      	str	r2, [sp, #24]
 801adb8:	3201      	adds	r2, #1
 801adba:	e7b1      	b.n	801ad20 <_strtod_l+0x1e8>
 801adbc:	2400      	movs	r4, #0
 801adbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adc0:	3302      	adds	r3, #2
 801adc2:	931d      	str	r3, [sp, #116]	@ 0x74
 801adc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adc6:	789b      	ldrb	r3, [r3, #2]
 801adc8:	001a      	movs	r2, r3
 801adca:	3a30      	subs	r2, #48	@ 0x30
 801adcc:	2a09      	cmp	r2, #9
 801adce:	d913      	bls.n	801adf8 <_strtod_l+0x2c0>
 801add0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801add2:	921d      	str	r2, [sp, #116]	@ 0x74
 801add4:	2200      	movs	r2, #0
 801add6:	e032      	b.n	801ae3e <_strtod_l+0x306>
 801add8:	08020df0 	.word	0x08020df0
 801addc:	7ff00000 	.word	0x7ff00000
 801ade0:	ffefffff 	.word	0xffefffff
 801ade4:	00000433 	.word	0x00000433
 801ade8:	7fffffff 	.word	0x7fffffff
 801adec:	08020dd8 	.word	0x08020dd8
 801adf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801adf2:	1c5a      	adds	r2, r3, #1
 801adf4:	921d      	str	r2, [sp, #116]	@ 0x74
 801adf6:	785b      	ldrb	r3, [r3, #1]
 801adf8:	2b30      	cmp	r3, #48	@ 0x30
 801adfa:	d0f9      	beq.n	801adf0 <_strtod_l+0x2b8>
 801adfc:	2200      	movs	r2, #0
 801adfe:	9207      	str	r2, [sp, #28]
 801ae00:	001a      	movs	r2, r3
 801ae02:	3a31      	subs	r2, #49	@ 0x31
 801ae04:	2a08      	cmp	r2, #8
 801ae06:	d81b      	bhi.n	801ae40 <_strtod_l+0x308>
 801ae08:	3b30      	subs	r3, #48	@ 0x30
 801ae0a:	9310      	str	r3, [sp, #64]	@ 0x40
 801ae0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae0e:	9307      	str	r3, [sp, #28]
 801ae10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae12:	1c59      	adds	r1, r3, #1
 801ae14:	911d      	str	r1, [sp, #116]	@ 0x74
 801ae16:	785b      	ldrb	r3, [r3, #1]
 801ae18:	001a      	movs	r2, r3
 801ae1a:	3a30      	subs	r2, #48	@ 0x30
 801ae1c:	2a09      	cmp	r2, #9
 801ae1e:	d93a      	bls.n	801ae96 <_strtod_l+0x35e>
 801ae20:	9a07      	ldr	r2, [sp, #28]
 801ae22:	1a8a      	subs	r2, r1, r2
 801ae24:	49b4      	ldr	r1, [pc, #720]	@ (801b0f8 <_strtod_l+0x5c0>)
 801ae26:	9107      	str	r1, [sp, #28]
 801ae28:	2a08      	cmp	r2, #8
 801ae2a:	dc04      	bgt.n	801ae36 <_strtod_l+0x2fe>
 801ae2c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ae2e:	9207      	str	r2, [sp, #28]
 801ae30:	428a      	cmp	r2, r1
 801ae32:	dd00      	ble.n	801ae36 <_strtod_l+0x2fe>
 801ae34:	9107      	str	r1, [sp, #28]
 801ae36:	2c00      	cmp	r4, #0
 801ae38:	d002      	beq.n	801ae40 <_strtod_l+0x308>
 801ae3a:	9a07      	ldr	r2, [sp, #28]
 801ae3c:	4252      	negs	r2, r2
 801ae3e:	9207      	str	r2, [sp, #28]
 801ae40:	9a06      	ldr	r2, [sp, #24]
 801ae42:	2a00      	cmp	r2, #0
 801ae44:	d14d      	bne.n	801aee2 <_strtod_l+0x3aa>
 801ae46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ae48:	4310      	orrs	r0, r2
 801ae4a:	d000      	beq.n	801ae4e <_strtod_l+0x316>
 801ae4c:	e6af      	b.n	801abae <_strtod_l+0x76>
 801ae4e:	4662      	mov	r2, ip
 801ae50:	2a00      	cmp	r2, #0
 801ae52:	d000      	beq.n	801ae56 <_strtod_l+0x31e>
 801ae54:	e6c7      	b.n	801abe6 <_strtod_l+0xae>
 801ae56:	2b69      	cmp	r3, #105	@ 0x69
 801ae58:	d027      	beq.n	801aeaa <_strtod_l+0x372>
 801ae5a:	dc23      	bgt.n	801aea4 <_strtod_l+0x36c>
 801ae5c:	2b49      	cmp	r3, #73	@ 0x49
 801ae5e:	d024      	beq.n	801aeaa <_strtod_l+0x372>
 801ae60:	2b4e      	cmp	r3, #78	@ 0x4e
 801ae62:	d000      	beq.n	801ae66 <_strtod_l+0x32e>
 801ae64:	e6bf      	b.n	801abe6 <_strtod_l+0xae>
 801ae66:	49a5      	ldr	r1, [pc, #660]	@ (801b0fc <_strtod_l+0x5c4>)
 801ae68:	a81d      	add	r0, sp, #116	@ 0x74
 801ae6a:	f002 fd2b 	bl	801d8c4 <__match>
 801ae6e:	2800      	cmp	r0, #0
 801ae70:	d100      	bne.n	801ae74 <_strtod_l+0x33c>
 801ae72:	e6b8      	b.n	801abe6 <_strtod_l+0xae>
 801ae74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	2b28      	cmp	r3, #40	@ 0x28
 801ae7a:	d12c      	bne.n	801aed6 <_strtod_l+0x39e>
 801ae7c:	49a0      	ldr	r1, [pc, #640]	@ (801b100 <_strtod_l+0x5c8>)
 801ae7e:	aa20      	add	r2, sp, #128	@ 0x80
 801ae80:	a81d      	add	r0, sp, #116	@ 0x74
 801ae82:	f002 fd33 	bl	801d8ec <__hexnan>
 801ae86:	2805      	cmp	r0, #5
 801ae88:	d125      	bne.n	801aed6 <_strtod_l+0x39e>
 801ae8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ae8c:	4a9d      	ldr	r2, [pc, #628]	@ (801b104 <_strtod_l+0x5cc>)
 801ae8e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ae90:	431a      	orrs	r2, r3
 801ae92:	0017      	movs	r7, r2
 801ae94:	e68b      	b.n	801abae <_strtod_l+0x76>
 801ae96:	220a      	movs	r2, #10
 801ae98:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ae9a:	434a      	muls	r2, r1
 801ae9c:	18d2      	adds	r2, r2, r3
 801ae9e:	3a30      	subs	r2, #48	@ 0x30
 801aea0:	9210      	str	r2, [sp, #64]	@ 0x40
 801aea2:	e7b5      	b.n	801ae10 <_strtod_l+0x2d8>
 801aea4:	2b6e      	cmp	r3, #110	@ 0x6e
 801aea6:	d0de      	beq.n	801ae66 <_strtod_l+0x32e>
 801aea8:	e69d      	b.n	801abe6 <_strtod_l+0xae>
 801aeaa:	4997      	ldr	r1, [pc, #604]	@ (801b108 <_strtod_l+0x5d0>)
 801aeac:	a81d      	add	r0, sp, #116	@ 0x74
 801aeae:	f002 fd09 	bl	801d8c4 <__match>
 801aeb2:	2800      	cmp	r0, #0
 801aeb4:	d100      	bne.n	801aeb8 <_strtod_l+0x380>
 801aeb6:	e696      	b.n	801abe6 <_strtod_l+0xae>
 801aeb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aeba:	4994      	ldr	r1, [pc, #592]	@ (801b10c <_strtod_l+0x5d4>)
 801aebc:	3b01      	subs	r3, #1
 801aebe:	a81d      	add	r0, sp, #116	@ 0x74
 801aec0:	931d      	str	r3, [sp, #116]	@ 0x74
 801aec2:	f002 fcff 	bl	801d8c4 <__match>
 801aec6:	2800      	cmp	r0, #0
 801aec8:	d102      	bne.n	801aed0 <_strtod_l+0x398>
 801aeca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aecc:	3301      	adds	r3, #1
 801aece:	931d      	str	r3, [sp, #116]	@ 0x74
 801aed0:	2600      	movs	r6, #0
 801aed2:	4f8c      	ldr	r7, [pc, #560]	@ (801b104 <_strtod_l+0x5cc>)
 801aed4:	e66b      	b.n	801abae <_strtod_l+0x76>
 801aed6:	488e      	ldr	r0, [pc, #568]	@ (801b110 <_strtod_l+0x5d8>)
 801aed8:	f001 fb84 	bl	801c5e4 <nan>
 801aedc:	0006      	movs	r6, r0
 801aede:	000f      	movs	r7, r1
 801aee0:	e665      	b.n	801abae <_strtod_l+0x76>
 801aee2:	9b07      	ldr	r3, [sp, #28]
 801aee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aee6:	1a9b      	subs	r3, r3, r2
 801aee8:	930c      	str	r3, [sp, #48]	@ 0x30
 801aeea:	9b08      	ldr	r3, [sp, #32]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d101      	bne.n	801aef4 <_strtod_l+0x3bc>
 801aef0:	9b06      	ldr	r3, [sp, #24]
 801aef2:	9308      	str	r3, [sp, #32]
 801aef4:	9c06      	ldr	r4, [sp, #24]
 801aef6:	2c10      	cmp	r4, #16
 801aef8:	dd00      	ble.n	801aefc <_strtod_l+0x3c4>
 801aefa:	2410      	movs	r4, #16
 801aefc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801aefe:	f7e8 fa8d 	bl	800341c <__aeabi_ui2d>
 801af02:	9b06      	ldr	r3, [sp, #24]
 801af04:	0006      	movs	r6, r0
 801af06:	000f      	movs	r7, r1
 801af08:	2b09      	cmp	r3, #9
 801af0a:	dc13      	bgt.n	801af34 <_strtod_l+0x3fc>
 801af0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d100      	bne.n	801af14 <_strtod_l+0x3dc>
 801af12:	e64c      	b.n	801abae <_strtod_l+0x76>
 801af14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af16:	2b00      	cmp	r3, #0
 801af18:	dc00      	bgt.n	801af1c <_strtod_l+0x3e4>
 801af1a:	e07e      	b.n	801b01a <_strtod_l+0x4e2>
 801af1c:	2b16      	cmp	r3, #22
 801af1e:	dc63      	bgt.n	801afe8 <_strtod_l+0x4b0>
 801af20:	497c      	ldr	r1, [pc, #496]	@ (801b114 <_strtod_l+0x5dc>)
 801af22:	00db      	lsls	r3, r3, #3
 801af24:	18c9      	adds	r1, r1, r3
 801af26:	0032      	movs	r2, r6
 801af28:	6808      	ldr	r0, [r1, #0]
 801af2a:	6849      	ldr	r1, [r1, #4]
 801af2c:	003b      	movs	r3, r7
 801af2e:	f7e7 fb85 	bl	800263c <__aeabi_dmul>
 801af32:	e7d3      	b.n	801aedc <_strtod_l+0x3a4>
 801af34:	0022      	movs	r2, r4
 801af36:	4b77      	ldr	r3, [pc, #476]	@ (801b114 <_strtod_l+0x5dc>)
 801af38:	3a09      	subs	r2, #9
 801af3a:	00d2      	lsls	r2, r2, #3
 801af3c:	189b      	adds	r3, r3, r2
 801af3e:	681a      	ldr	r2, [r3, #0]
 801af40:	685b      	ldr	r3, [r3, #4]
 801af42:	f7e7 fb7b 	bl	800263c <__aeabi_dmul>
 801af46:	0006      	movs	r6, r0
 801af48:	0028      	movs	r0, r5
 801af4a:	000f      	movs	r7, r1
 801af4c:	f7e8 fa66 	bl	800341c <__aeabi_ui2d>
 801af50:	000b      	movs	r3, r1
 801af52:	0002      	movs	r2, r0
 801af54:	0039      	movs	r1, r7
 801af56:	0030      	movs	r0, r6
 801af58:	f7e6 fbc8 	bl	80016ec <__aeabi_dadd>
 801af5c:	9b06      	ldr	r3, [sp, #24]
 801af5e:	0006      	movs	r6, r0
 801af60:	000f      	movs	r7, r1
 801af62:	2b0f      	cmp	r3, #15
 801af64:	ddd2      	ble.n	801af0c <_strtod_l+0x3d4>
 801af66:	9b06      	ldr	r3, [sp, #24]
 801af68:	1b1c      	subs	r4, r3, r4
 801af6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af6c:	18e4      	adds	r4, r4, r3
 801af6e:	2c00      	cmp	r4, #0
 801af70:	dc00      	bgt.n	801af74 <_strtod_l+0x43c>
 801af72:	e09b      	b.n	801b0ac <_strtod_l+0x574>
 801af74:	220f      	movs	r2, #15
 801af76:	0023      	movs	r3, r4
 801af78:	4013      	ands	r3, r2
 801af7a:	4214      	tst	r4, r2
 801af7c:	d00a      	beq.n	801af94 <_strtod_l+0x45c>
 801af7e:	4965      	ldr	r1, [pc, #404]	@ (801b114 <_strtod_l+0x5dc>)
 801af80:	00db      	lsls	r3, r3, #3
 801af82:	18c9      	adds	r1, r1, r3
 801af84:	0032      	movs	r2, r6
 801af86:	6808      	ldr	r0, [r1, #0]
 801af88:	6849      	ldr	r1, [r1, #4]
 801af8a:	003b      	movs	r3, r7
 801af8c:	f7e7 fb56 	bl	800263c <__aeabi_dmul>
 801af90:	0006      	movs	r6, r0
 801af92:	000f      	movs	r7, r1
 801af94:	230f      	movs	r3, #15
 801af96:	439c      	bics	r4, r3
 801af98:	d073      	beq.n	801b082 <_strtod_l+0x54a>
 801af9a:	3326      	adds	r3, #38	@ 0x26
 801af9c:	33ff      	adds	r3, #255	@ 0xff
 801af9e:	429c      	cmp	r4, r3
 801afa0:	dd4b      	ble.n	801b03a <_strtod_l+0x502>
 801afa2:	2300      	movs	r3, #0
 801afa4:	9306      	str	r3, [sp, #24]
 801afa6:	9307      	str	r3, [sp, #28]
 801afa8:	930d      	str	r3, [sp, #52]	@ 0x34
 801afaa:	9308      	str	r3, [sp, #32]
 801afac:	2322      	movs	r3, #34	@ 0x22
 801afae:	2600      	movs	r6, #0
 801afb0:	9a05      	ldr	r2, [sp, #20]
 801afb2:	4f54      	ldr	r7, [pc, #336]	@ (801b104 <_strtod_l+0x5cc>)
 801afb4:	6013      	str	r3, [r2, #0]
 801afb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801afb8:	42b3      	cmp	r3, r6
 801afba:	d100      	bne.n	801afbe <_strtod_l+0x486>
 801afbc:	e5f7      	b.n	801abae <_strtod_l+0x76>
 801afbe:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801afc0:	9805      	ldr	r0, [sp, #20]
 801afc2:	f002 fe4d 	bl	801dc60 <_Bfree>
 801afc6:	9908      	ldr	r1, [sp, #32]
 801afc8:	9805      	ldr	r0, [sp, #20]
 801afca:	f002 fe49 	bl	801dc60 <_Bfree>
 801afce:	9907      	ldr	r1, [sp, #28]
 801afd0:	9805      	ldr	r0, [sp, #20]
 801afd2:	f002 fe45 	bl	801dc60 <_Bfree>
 801afd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801afd8:	9805      	ldr	r0, [sp, #20]
 801afda:	f002 fe41 	bl	801dc60 <_Bfree>
 801afde:	9906      	ldr	r1, [sp, #24]
 801afe0:	9805      	ldr	r0, [sp, #20]
 801afe2:	f002 fe3d 	bl	801dc60 <_Bfree>
 801afe6:	e5e2      	b.n	801abae <_strtod_l+0x76>
 801afe8:	2325      	movs	r3, #37	@ 0x25
 801afea:	9a06      	ldr	r2, [sp, #24]
 801afec:	1a9b      	subs	r3, r3, r2
 801afee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aff0:	4293      	cmp	r3, r2
 801aff2:	dbb8      	blt.n	801af66 <_strtod_l+0x42e>
 801aff4:	240f      	movs	r4, #15
 801aff6:	9b06      	ldr	r3, [sp, #24]
 801aff8:	4d46      	ldr	r5, [pc, #280]	@ (801b114 <_strtod_l+0x5dc>)
 801affa:	1ae4      	subs	r4, r4, r3
 801affc:	00e1      	lsls	r1, r4, #3
 801affe:	1869      	adds	r1, r5, r1
 801b000:	0032      	movs	r2, r6
 801b002:	6808      	ldr	r0, [r1, #0]
 801b004:	6849      	ldr	r1, [r1, #4]
 801b006:	003b      	movs	r3, r7
 801b008:	f7e7 fb18 	bl	800263c <__aeabi_dmul>
 801b00c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b00e:	1b1c      	subs	r4, r3, r4
 801b010:	00e4      	lsls	r4, r4, #3
 801b012:	192d      	adds	r5, r5, r4
 801b014:	682a      	ldr	r2, [r5, #0]
 801b016:	686b      	ldr	r3, [r5, #4]
 801b018:	e789      	b.n	801af2e <_strtod_l+0x3f6>
 801b01a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b01c:	3316      	adds	r3, #22
 801b01e:	dba2      	blt.n	801af66 <_strtod_l+0x42e>
 801b020:	9907      	ldr	r1, [sp, #28]
 801b022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b024:	4b3b      	ldr	r3, [pc, #236]	@ (801b114 <_strtod_l+0x5dc>)
 801b026:	1a52      	subs	r2, r2, r1
 801b028:	00d2      	lsls	r2, r2, #3
 801b02a:	189b      	adds	r3, r3, r2
 801b02c:	0030      	movs	r0, r6
 801b02e:	681a      	ldr	r2, [r3, #0]
 801b030:	685b      	ldr	r3, [r3, #4]
 801b032:	0039      	movs	r1, r7
 801b034:	f7e6 febe 	bl	8001db4 <__aeabi_ddiv>
 801b038:	e750      	b.n	801aedc <_strtod_l+0x3a4>
 801b03a:	2300      	movs	r3, #0
 801b03c:	0030      	movs	r0, r6
 801b03e:	0039      	movs	r1, r7
 801b040:	4d35      	ldr	r5, [pc, #212]	@ (801b118 <_strtod_l+0x5e0>)
 801b042:	1124      	asrs	r4, r4, #4
 801b044:	9309      	str	r3, [sp, #36]	@ 0x24
 801b046:	2c01      	cmp	r4, #1
 801b048:	dc1e      	bgt.n	801b088 <_strtod_l+0x550>
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d001      	beq.n	801b052 <_strtod_l+0x51a>
 801b04e:	0006      	movs	r6, r0
 801b050:	000f      	movs	r7, r1
 801b052:	4b32      	ldr	r3, [pc, #200]	@ (801b11c <_strtod_l+0x5e4>)
 801b054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b056:	18ff      	adds	r7, r7, r3
 801b058:	4b2f      	ldr	r3, [pc, #188]	@ (801b118 <_strtod_l+0x5e0>)
 801b05a:	00d5      	lsls	r5, r2, #3
 801b05c:	195d      	adds	r5, r3, r5
 801b05e:	0032      	movs	r2, r6
 801b060:	6828      	ldr	r0, [r5, #0]
 801b062:	6869      	ldr	r1, [r5, #4]
 801b064:	003b      	movs	r3, r7
 801b066:	f7e7 fae9 	bl	800263c <__aeabi_dmul>
 801b06a:	4b26      	ldr	r3, [pc, #152]	@ (801b104 <_strtod_l+0x5cc>)
 801b06c:	4a2c      	ldr	r2, [pc, #176]	@ (801b120 <_strtod_l+0x5e8>)
 801b06e:	0006      	movs	r6, r0
 801b070:	400b      	ands	r3, r1
 801b072:	4293      	cmp	r3, r2
 801b074:	d895      	bhi.n	801afa2 <_strtod_l+0x46a>
 801b076:	4a2b      	ldr	r2, [pc, #172]	@ (801b124 <_strtod_l+0x5ec>)
 801b078:	4293      	cmp	r3, r2
 801b07a:	d913      	bls.n	801b0a4 <_strtod_l+0x56c>
 801b07c:	2601      	movs	r6, #1
 801b07e:	4f2a      	ldr	r7, [pc, #168]	@ (801b128 <_strtod_l+0x5f0>)
 801b080:	4276      	negs	r6, r6
 801b082:	2300      	movs	r3, #0
 801b084:	9309      	str	r3, [sp, #36]	@ 0x24
 801b086:	e086      	b.n	801b196 <_strtod_l+0x65e>
 801b088:	2201      	movs	r2, #1
 801b08a:	4214      	tst	r4, r2
 801b08c:	d004      	beq.n	801b098 <_strtod_l+0x560>
 801b08e:	682a      	ldr	r2, [r5, #0]
 801b090:	686b      	ldr	r3, [r5, #4]
 801b092:	f7e7 fad3 	bl	800263c <__aeabi_dmul>
 801b096:	2301      	movs	r3, #1
 801b098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b09a:	1064      	asrs	r4, r4, #1
 801b09c:	3201      	adds	r2, #1
 801b09e:	9209      	str	r2, [sp, #36]	@ 0x24
 801b0a0:	3508      	adds	r5, #8
 801b0a2:	e7d0      	b.n	801b046 <_strtod_l+0x50e>
 801b0a4:	23d4      	movs	r3, #212	@ 0xd4
 801b0a6:	049b      	lsls	r3, r3, #18
 801b0a8:	18cf      	adds	r7, r1, r3
 801b0aa:	e7ea      	b.n	801b082 <_strtod_l+0x54a>
 801b0ac:	2c00      	cmp	r4, #0
 801b0ae:	d0e8      	beq.n	801b082 <_strtod_l+0x54a>
 801b0b0:	4264      	negs	r4, r4
 801b0b2:	230f      	movs	r3, #15
 801b0b4:	0022      	movs	r2, r4
 801b0b6:	401a      	ands	r2, r3
 801b0b8:	421c      	tst	r4, r3
 801b0ba:	d00a      	beq.n	801b0d2 <_strtod_l+0x59a>
 801b0bc:	4b15      	ldr	r3, [pc, #84]	@ (801b114 <_strtod_l+0x5dc>)
 801b0be:	00d2      	lsls	r2, r2, #3
 801b0c0:	189b      	adds	r3, r3, r2
 801b0c2:	0030      	movs	r0, r6
 801b0c4:	681a      	ldr	r2, [r3, #0]
 801b0c6:	685b      	ldr	r3, [r3, #4]
 801b0c8:	0039      	movs	r1, r7
 801b0ca:	f7e6 fe73 	bl	8001db4 <__aeabi_ddiv>
 801b0ce:	0006      	movs	r6, r0
 801b0d0:	000f      	movs	r7, r1
 801b0d2:	1124      	asrs	r4, r4, #4
 801b0d4:	d0d5      	beq.n	801b082 <_strtod_l+0x54a>
 801b0d6:	2c1f      	cmp	r4, #31
 801b0d8:	dd28      	ble.n	801b12c <_strtod_l+0x5f4>
 801b0da:	2300      	movs	r3, #0
 801b0dc:	9306      	str	r3, [sp, #24]
 801b0de:	9307      	str	r3, [sp, #28]
 801b0e0:	930d      	str	r3, [sp, #52]	@ 0x34
 801b0e2:	9308      	str	r3, [sp, #32]
 801b0e4:	2322      	movs	r3, #34	@ 0x22
 801b0e6:	9a05      	ldr	r2, [sp, #20]
 801b0e8:	2600      	movs	r6, #0
 801b0ea:	6013      	str	r3, [r2, #0]
 801b0ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b0ee:	2700      	movs	r7, #0
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d000      	beq.n	801b0f6 <_strtod_l+0x5be>
 801b0f4:	e763      	b.n	801afbe <_strtod_l+0x486>
 801b0f6:	e55a      	b.n	801abae <_strtod_l+0x76>
 801b0f8:	00004e1f 	.word	0x00004e1f
 801b0fc:	08020f3e 	.word	0x08020f3e
 801b100:	08020ddc 	.word	0x08020ddc
 801b104:	7ff00000 	.word	0x7ff00000
 801b108:	08020f36 	.word	0x08020f36
 801b10c:	08020f70 	.word	0x08020f70
 801b110:	080211fc 	.word	0x080211fc
 801b114:	080210e8 	.word	0x080210e8
 801b118:	080210c0 	.word	0x080210c0
 801b11c:	fcb00000 	.word	0xfcb00000
 801b120:	7ca00000 	.word	0x7ca00000
 801b124:	7c900000 	.word	0x7c900000
 801b128:	7fefffff 	.word	0x7fefffff
 801b12c:	2310      	movs	r3, #16
 801b12e:	0022      	movs	r2, r4
 801b130:	401a      	ands	r2, r3
 801b132:	9209      	str	r2, [sp, #36]	@ 0x24
 801b134:	421c      	tst	r4, r3
 801b136:	d001      	beq.n	801b13c <_strtod_l+0x604>
 801b138:	335a      	adds	r3, #90	@ 0x5a
 801b13a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b13c:	0030      	movs	r0, r6
 801b13e:	0039      	movs	r1, r7
 801b140:	2300      	movs	r3, #0
 801b142:	4dbf      	ldr	r5, [pc, #764]	@ (801b440 <_strtod_l+0x908>)
 801b144:	2201      	movs	r2, #1
 801b146:	4214      	tst	r4, r2
 801b148:	d004      	beq.n	801b154 <_strtod_l+0x61c>
 801b14a:	682a      	ldr	r2, [r5, #0]
 801b14c:	686b      	ldr	r3, [r5, #4]
 801b14e:	f7e7 fa75 	bl	800263c <__aeabi_dmul>
 801b152:	2301      	movs	r3, #1
 801b154:	1064      	asrs	r4, r4, #1
 801b156:	3508      	adds	r5, #8
 801b158:	2c00      	cmp	r4, #0
 801b15a:	d1f3      	bne.n	801b144 <_strtod_l+0x60c>
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d001      	beq.n	801b164 <_strtod_l+0x62c>
 801b160:	0006      	movs	r6, r0
 801b162:	000f      	movs	r7, r1
 801b164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b166:	2b00      	cmp	r3, #0
 801b168:	d00d      	beq.n	801b186 <_strtod_l+0x64e>
 801b16a:	236b      	movs	r3, #107	@ 0x6b
 801b16c:	007a      	lsls	r2, r7, #1
 801b16e:	0d52      	lsrs	r2, r2, #21
 801b170:	0039      	movs	r1, r7
 801b172:	1a9b      	subs	r3, r3, r2
 801b174:	2b00      	cmp	r3, #0
 801b176:	dd06      	ble.n	801b186 <_strtod_l+0x64e>
 801b178:	2b1f      	cmp	r3, #31
 801b17a:	dd5a      	ble.n	801b232 <_strtod_l+0x6fa>
 801b17c:	2600      	movs	r6, #0
 801b17e:	2b34      	cmp	r3, #52	@ 0x34
 801b180:	dd50      	ble.n	801b224 <_strtod_l+0x6ec>
 801b182:	27dc      	movs	r7, #220	@ 0xdc
 801b184:	04bf      	lsls	r7, r7, #18
 801b186:	2200      	movs	r2, #0
 801b188:	2300      	movs	r3, #0
 801b18a:	0030      	movs	r0, r6
 801b18c:	0039      	movs	r1, r7
 801b18e:	f7e5 f98f 	bl	80004b0 <__aeabi_dcmpeq>
 801b192:	2800      	cmp	r0, #0
 801b194:	d1a1      	bne.n	801b0da <_strtod_l+0x5a2>
 801b196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b198:	9a08      	ldr	r2, [sp, #32]
 801b19a:	9300      	str	r3, [sp, #0]
 801b19c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b19e:	9b06      	ldr	r3, [sp, #24]
 801b1a0:	9805      	ldr	r0, [sp, #20]
 801b1a2:	f002 fdc5 	bl	801dd30 <__s2b>
 801b1a6:	900d      	str	r0, [sp, #52]	@ 0x34
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	d100      	bne.n	801b1ae <_strtod_l+0x676>
 801b1ac:	e6f9      	b.n	801afa2 <_strtod_l+0x46a>
 801b1ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b1b0:	9907      	ldr	r1, [sp, #28]
 801b1b2:	17da      	asrs	r2, r3, #31
 801b1b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b1b6:	1a5b      	subs	r3, r3, r1
 801b1b8:	401a      	ands	r2, r3
 801b1ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b1bc:	9217      	str	r2, [sp, #92]	@ 0x5c
 801b1be:	43db      	mvns	r3, r3
 801b1c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b1c2:	17db      	asrs	r3, r3, #31
 801b1c4:	401a      	ands	r2, r3
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	921a      	str	r2, [sp, #104]	@ 0x68
 801b1ca:	9306      	str	r3, [sp, #24]
 801b1cc:	9307      	str	r3, [sp, #28]
 801b1ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b1d0:	9805      	ldr	r0, [sp, #20]
 801b1d2:	6859      	ldr	r1, [r3, #4]
 801b1d4:	f002 fd00 	bl	801dbd8 <_Balloc>
 801b1d8:	9008      	str	r0, [sp, #32]
 801b1da:	2800      	cmp	r0, #0
 801b1dc:	d100      	bne.n	801b1e0 <_strtod_l+0x6a8>
 801b1de:	e6e5      	b.n	801afac <_strtod_l+0x474>
 801b1e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b1e2:	300c      	adds	r0, #12
 801b1e4:	0019      	movs	r1, r3
 801b1e6:	691a      	ldr	r2, [r3, #16]
 801b1e8:	310c      	adds	r1, #12
 801b1ea:	3202      	adds	r2, #2
 801b1ec:	0092      	lsls	r2, r2, #2
 801b1ee:	f001 f9ef 	bl	801c5d0 <memcpy>
 801b1f2:	ab20      	add	r3, sp, #128	@ 0x80
 801b1f4:	9301      	str	r3, [sp, #4]
 801b1f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b1f8:	9300      	str	r3, [sp, #0]
 801b1fa:	0032      	movs	r2, r6
 801b1fc:	003b      	movs	r3, r7
 801b1fe:	9805      	ldr	r0, [sp, #20]
 801b200:	9610      	str	r6, [sp, #64]	@ 0x40
 801b202:	9711      	str	r7, [sp, #68]	@ 0x44
 801b204:	f003 f8e4 	bl	801e3d0 <__d2b>
 801b208:	901e      	str	r0, [sp, #120]	@ 0x78
 801b20a:	2800      	cmp	r0, #0
 801b20c:	d100      	bne.n	801b210 <_strtod_l+0x6d8>
 801b20e:	e6cd      	b.n	801afac <_strtod_l+0x474>
 801b210:	2101      	movs	r1, #1
 801b212:	9805      	ldr	r0, [sp, #20]
 801b214:	f002 fe28 	bl	801de68 <__i2b>
 801b218:	9007      	str	r0, [sp, #28]
 801b21a:	2800      	cmp	r0, #0
 801b21c:	d10e      	bne.n	801b23c <_strtod_l+0x704>
 801b21e:	2300      	movs	r3, #0
 801b220:	9307      	str	r3, [sp, #28]
 801b222:	e6c3      	b.n	801afac <_strtod_l+0x474>
 801b224:	234b      	movs	r3, #75	@ 0x4b
 801b226:	1a9a      	subs	r2, r3, r2
 801b228:	3b4c      	subs	r3, #76	@ 0x4c
 801b22a:	4093      	lsls	r3, r2
 801b22c:	4019      	ands	r1, r3
 801b22e:	000f      	movs	r7, r1
 801b230:	e7a9      	b.n	801b186 <_strtod_l+0x64e>
 801b232:	2201      	movs	r2, #1
 801b234:	4252      	negs	r2, r2
 801b236:	409a      	lsls	r2, r3
 801b238:	4016      	ands	r6, r2
 801b23a:	e7a4      	b.n	801b186 <_strtod_l+0x64e>
 801b23c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801b23e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b240:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801b242:	1ad4      	subs	r4, r2, r3
 801b244:	2b00      	cmp	r3, #0
 801b246:	db01      	blt.n	801b24c <_strtod_l+0x714>
 801b248:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801b24a:	195d      	adds	r5, r3, r5
 801b24c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b24e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b250:	1a5b      	subs	r3, r3, r1
 801b252:	2136      	movs	r1, #54	@ 0x36
 801b254:	189b      	adds	r3, r3, r2
 801b256:	1a8a      	subs	r2, r1, r2
 801b258:	497a      	ldr	r1, [pc, #488]	@ (801b444 <_strtod_l+0x90c>)
 801b25a:	2001      	movs	r0, #1
 801b25c:	468c      	mov	ip, r1
 801b25e:	2100      	movs	r1, #0
 801b260:	3b01      	subs	r3, #1
 801b262:	9116      	str	r1, [sp, #88]	@ 0x58
 801b264:	9014      	str	r0, [sp, #80]	@ 0x50
 801b266:	4563      	cmp	r3, ip
 801b268:	da06      	bge.n	801b278 <_strtod_l+0x740>
 801b26a:	4661      	mov	r1, ip
 801b26c:	1ac9      	subs	r1, r1, r3
 801b26e:	1a52      	subs	r2, r2, r1
 801b270:	291f      	cmp	r1, #31
 801b272:	dc3f      	bgt.n	801b2f4 <_strtod_l+0x7bc>
 801b274:	4088      	lsls	r0, r1
 801b276:	9014      	str	r0, [sp, #80]	@ 0x50
 801b278:	18ab      	adds	r3, r5, r2
 801b27a:	930e      	str	r3, [sp, #56]	@ 0x38
 801b27c:	18a4      	adds	r4, r4, r2
 801b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b282:	191c      	adds	r4, r3, r4
 801b284:	002b      	movs	r3, r5
 801b286:	4295      	cmp	r5, r2
 801b288:	dd00      	ble.n	801b28c <_strtod_l+0x754>
 801b28a:	0013      	movs	r3, r2
 801b28c:	42a3      	cmp	r3, r4
 801b28e:	dd00      	ble.n	801b292 <_strtod_l+0x75a>
 801b290:	0023      	movs	r3, r4
 801b292:	2b00      	cmp	r3, #0
 801b294:	dd04      	ble.n	801b2a0 <_strtod_l+0x768>
 801b296:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b298:	1ae4      	subs	r4, r4, r3
 801b29a:	1ad2      	subs	r2, r2, r3
 801b29c:	920e      	str	r2, [sp, #56]	@ 0x38
 801b29e:	1aed      	subs	r5, r5, r3
 801b2a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	dd16      	ble.n	801b2d4 <_strtod_l+0x79c>
 801b2a6:	001a      	movs	r2, r3
 801b2a8:	9907      	ldr	r1, [sp, #28]
 801b2aa:	9805      	ldr	r0, [sp, #20]
 801b2ac:	f002 fea6 	bl	801dffc <__pow5mult>
 801b2b0:	9007      	str	r0, [sp, #28]
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	d0b3      	beq.n	801b21e <_strtod_l+0x6e6>
 801b2b6:	0001      	movs	r1, r0
 801b2b8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b2ba:	9805      	ldr	r0, [sp, #20]
 801b2bc:	f002 fdec 	bl	801de98 <__multiply>
 801b2c0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b2c2:	2800      	cmp	r0, #0
 801b2c4:	d100      	bne.n	801b2c8 <_strtod_l+0x790>
 801b2c6:	e671      	b.n	801afac <_strtod_l+0x474>
 801b2c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b2ca:	9805      	ldr	r0, [sp, #20]
 801b2cc:	f002 fcc8 	bl	801dc60 <_Bfree>
 801b2d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b2d2:	931e      	str	r3, [sp, #120]	@ 0x78
 801b2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	dc12      	bgt.n	801b300 <_strtod_l+0x7c8>
 801b2da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	dd18      	ble.n	801b312 <_strtod_l+0x7da>
 801b2e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b2e2:	9908      	ldr	r1, [sp, #32]
 801b2e4:	9805      	ldr	r0, [sp, #20]
 801b2e6:	f002 fe89 	bl	801dffc <__pow5mult>
 801b2ea:	9008      	str	r0, [sp, #32]
 801b2ec:	2800      	cmp	r0, #0
 801b2ee:	d110      	bne.n	801b312 <_strtod_l+0x7da>
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	e65a      	b.n	801afaa <_strtod_l+0x472>
 801b2f4:	4954      	ldr	r1, [pc, #336]	@ (801b448 <_strtod_l+0x910>)
 801b2f6:	1acb      	subs	r3, r1, r3
 801b2f8:	0001      	movs	r1, r0
 801b2fa:	4099      	lsls	r1, r3
 801b2fc:	9116      	str	r1, [sp, #88]	@ 0x58
 801b2fe:	e7ba      	b.n	801b276 <_strtod_l+0x73e>
 801b300:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b302:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b304:	9805      	ldr	r0, [sp, #20]
 801b306:	f002 fed5 	bl	801e0b4 <__lshift>
 801b30a:	901e      	str	r0, [sp, #120]	@ 0x78
 801b30c:	2800      	cmp	r0, #0
 801b30e:	d1e4      	bne.n	801b2da <_strtod_l+0x7a2>
 801b310:	e64c      	b.n	801afac <_strtod_l+0x474>
 801b312:	2c00      	cmp	r4, #0
 801b314:	dd07      	ble.n	801b326 <_strtod_l+0x7ee>
 801b316:	0022      	movs	r2, r4
 801b318:	9908      	ldr	r1, [sp, #32]
 801b31a:	9805      	ldr	r0, [sp, #20]
 801b31c:	f002 feca 	bl	801e0b4 <__lshift>
 801b320:	9008      	str	r0, [sp, #32]
 801b322:	2800      	cmp	r0, #0
 801b324:	d0e4      	beq.n	801b2f0 <_strtod_l+0x7b8>
 801b326:	2d00      	cmp	r5, #0
 801b328:	dd08      	ble.n	801b33c <_strtod_l+0x804>
 801b32a:	002a      	movs	r2, r5
 801b32c:	9907      	ldr	r1, [sp, #28]
 801b32e:	9805      	ldr	r0, [sp, #20]
 801b330:	f002 fec0 	bl	801e0b4 <__lshift>
 801b334:	9007      	str	r0, [sp, #28]
 801b336:	2800      	cmp	r0, #0
 801b338:	d100      	bne.n	801b33c <_strtod_l+0x804>
 801b33a:	e637      	b.n	801afac <_strtod_l+0x474>
 801b33c:	9a08      	ldr	r2, [sp, #32]
 801b33e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b340:	9805      	ldr	r0, [sp, #20]
 801b342:	f002 ff3f 	bl	801e1c4 <__mdiff>
 801b346:	9006      	str	r0, [sp, #24]
 801b348:	2800      	cmp	r0, #0
 801b34a:	d100      	bne.n	801b34e <_strtod_l+0x816>
 801b34c:	e62e      	b.n	801afac <_strtod_l+0x474>
 801b34e:	68c3      	ldr	r3, [r0, #12]
 801b350:	9907      	ldr	r1, [sp, #28]
 801b352:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b354:	2300      	movs	r3, #0
 801b356:	60c3      	str	r3, [r0, #12]
 801b358:	f002 ff18 	bl	801e18c <__mcmp>
 801b35c:	2800      	cmp	r0, #0
 801b35e:	da3b      	bge.n	801b3d8 <_strtod_l+0x8a0>
 801b360:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b362:	4333      	orrs	r3, r6
 801b364:	d167      	bne.n	801b436 <_strtod_l+0x8fe>
 801b366:	033b      	lsls	r3, r7, #12
 801b368:	d165      	bne.n	801b436 <_strtod_l+0x8fe>
 801b36a:	22d6      	movs	r2, #214	@ 0xd6
 801b36c:	4b37      	ldr	r3, [pc, #220]	@ (801b44c <_strtod_l+0x914>)
 801b36e:	04d2      	lsls	r2, r2, #19
 801b370:	403b      	ands	r3, r7
 801b372:	4293      	cmp	r3, r2
 801b374:	d95f      	bls.n	801b436 <_strtod_l+0x8fe>
 801b376:	9b06      	ldr	r3, [sp, #24]
 801b378:	695b      	ldr	r3, [r3, #20]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d103      	bne.n	801b386 <_strtod_l+0x84e>
 801b37e:	9b06      	ldr	r3, [sp, #24]
 801b380:	691b      	ldr	r3, [r3, #16]
 801b382:	2b01      	cmp	r3, #1
 801b384:	dd57      	ble.n	801b436 <_strtod_l+0x8fe>
 801b386:	9906      	ldr	r1, [sp, #24]
 801b388:	2201      	movs	r2, #1
 801b38a:	9805      	ldr	r0, [sp, #20]
 801b38c:	f002 fe92 	bl	801e0b4 <__lshift>
 801b390:	9907      	ldr	r1, [sp, #28]
 801b392:	9006      	str	r0, [sp, #24]
 801b394:	f002 fefa 	bl	801e18c <__mcmp>
 801b398:	2800      	cmp	r0, #0
 801b39a:	dd4c      	ble.n	801b436 <_strtod_l+0x8fe>
 801b39c:	4b2b      	ldr	r3, [pc, #172]	@ (801b44c <_strtod_l+0x914>)
 801b39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b3a0:	403b      	ands	r3, r7
 801b3a2:	2a00      	cmp	r2, #0
 801b3a4:	d074      	beq.n	801b490 <_strtod_l+0x958>
 801b3a6:	22d6      	movs	r2, #214	@ 0xd6
 801b3a8:	04d2      	lsls	r2, r2, #19
 801b3aa:	4293      	cmp	r3, r2
 801b3ac:	d870      	bhi.n	801b490 <_strtod_l+0x958>
 801b3ae:	22dc      	movs	r2, #220	@ 0xdc
 801b3b0:	0492      	lsls	r2, r2, #18
 801b3b2:	4293      	cmp	r3, r2
 801b3b4:	d800      	bhi.n	801b3b8 <_strtod_l+0x880>
 801b3b6:	e695      	b.n	801b0e4 <_strtod_l+0x5ac>
 801b3b8:	0030      	movs	r0, r6
 801b3ba:	0039      	movs	r1, r7
 801b3bc:	4b24      	ldr	r3, [pc, #144]	@ (801b450 <_strtod_l+0x918>)
 801b3be:	2200      	movs	r2, #0
 801b3c0:	f7e7 f93c 	bl	800263c <__aeabi_dmul>
 801b3c4:	4b21      	ldr	r3, [pc, #132]	@ (801b44c <_strtod_l+0x914>)
 801b3c6:	0006      	movs	r6, r0
 801b3c8:	000f      	movs	r7, r1
 801b3ca:	420b      	tst	r3, r1
 801b3cc:	d000      	beq.n	801b3d0 <_strtod_l+0x898>
 801b3ce:	e5f6      	b.n	801afbe <_strtod_l+0x486>
 801b3d0:	2322      	movs	r3, #34	@ 0x22
 801b3d2:	9a05      	ldr	r2, [sp, #20]
 801b3d4:	6013      	str	r3, [r2, #0]
 801b3d6:	e5f2      	b.n	801afbe <_strtod_l+0x486>
 801b3d8:	970e      	str	r7, [sp, #56]	@ 0x38
 801b3da:	2800      	cmp	r0, #0
 801b3dc:	d175      	bne.n	801b4ca <_strtod_l+0x992>
 801b3de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b3e0:	033b      	lsls	r3, r7, #12
 801b3e2:	0b1b      	lsrs	r3, r3, #12
 801b3e4:	2a00      	cmp	r2, #0
 801b3e6:	d039      	beq.n	801b45c <_strtod_l+0x924>
 801b3e8:	4a1a      	ldr	r2, [pc, #104]	@ (801b454 <_strtod_l+0x91c>)
 801b3ea:	4293      	cmp	r3, r2
 801b3ec:	d138      	bne.n	801b460 <_strtod_l+0x928>
 801b3ee:	2101      	movs	r1, #1
 801b3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3f2:	4249      	negs	r1, r1
 801b3f4:	0032      	movs	r2, r6
 801b3f6:	0008      	movs	r0, r1
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d00b      	beq.n	801b414 <_strtod_l+0x8dc>
 801b3fc:	24d4      	movs	r4, #212	@ 0xd4
 801b3fe:	4b13      	ldr	r3, [pc, #76]	@ (801b44c <_strtod_l+0x914>)
 801b400:	0008      	movs	r0, r1
 801b402:	403b      	ands	r3, r7
 801b404:	04e4      	lsls	r4, r4, #19
 801b406:	42a3      	cmp	r3, r4
 801b408:	d804      	bhi.n	801b414 <_strtod_l+0x8dc>
 801b40a:	306c      	adds	r0, #108	@ 0x6c
 801b40c:	0d1b      	lsrs	r3, r3, #20
 801b40e:	1ac3      	subs	r3, r0, r3
 801b410:	4099      	lsls	r1, r3
 801b412:	0008      	movs	r0, r1
 801b414:	4282      	cmp	r2, r0
 801b416:	d123      	bne.n	801b460 <_strtod_l+0x928>
 801b418:	4b0f      	ldr	r3, [pc, #60]	@ (801b458 <_strtod_l+0x920>)
 801b41a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b41c:	4299      	cmp	r1, r3
 801b41e:	d102      	bne.n	801b426 <_strtod_l+0x8ee>
 801b420:	3201      	adds	r2, #1
 801b422:	d100      	bne.n	801b426 <_strtod_l+0x8ee>
 801b424:	e5c2      	b.n	801afac <_strtod_l+0x474>
 801b426:	4b09      	ldr	r3, [pc, #36]	@ (801b44c <_strtod_l+0x914>)
 801b428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b42a:	2600      	movs	r6, #0
 801b42c:	401a      	ands	r2, r3
 801b42e:	0013      	movs	r3, r2
 801b430:	2280      	movs	r2, #128	@ 0x80
 801b432:	0352      	lsls	r2, r2, #13
 801b434:	189f      	adds	r7, r3, r2
 801b436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d1bd      	bne.n	801b3b8 <_strtod_l+0x880>
 801b43c:	e5bf      	b.n	801afbe <_strtod_l+0x486>
 801b43e:	46c0      	nop			@ (mov r8, r8)
 801b440:	08020e08 	.word	0x08020e08
 801b444:	fffffc02 	.word	0xfffffc02
 801b448:	fffffbe2 	.word	0xfffffbe2
 801b44c:	7ff00000 	.word	0x7ff00000
 801b450:	39500000 	.word	0x39500000
 801b454:	000fffff 	.word	0x000fffff
 801b458:	7fefffff 	.word	0x7fefffff
 801b45c:	4333      	orrs	r3, r6
 801b45e:	d09d      	beq.n	801b39c <_strtod_l+0x864>
 801b460:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b462:	2b00      	cmp	r3, #0
 801b464:	d01c      	beq.n	801b4a0 <_strtod_l+0x968>
 801b466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b468:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b46a:	4213      	tst	r3, r2
 801b46c:	d0e3      	beq.n	801b436 <_strtod_l+0x8fe>
 801b46e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b470:	0030      	movs	r0, r6
 801b472:	0039      	movs	r1, r7
 801b474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b476:	2b00      	cmp	r3, #0
 801b478:	d016      	beq.n	801b4a8 <_strtod_l+0x970>
 801b47a:	f7ff fb45 	bl	801ab08 <sulp>
 801b47e:	0002      	movs	r2, r0
 801b480:	000b      	movs	r3, r1
 801b482:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b484:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b486:	f7e6 f931 	bl	80016ec <__aeabi_dadd>
 801b48a:	0006      	movs	r6, r0
 801b48c:	000f      	movs	r7, r1
 801b48e:	e7d2      	b.n	801b436 <_strtod_l+0x8fe>
 801b490:	2601      	movs	r6, #1
 801b492:	4a92      	ldr	r2, [pc, #584]	@ (801b6dc <_strtod_l+0xba4>)
 801b494:	4276      	negs	r6, r6
 801b496:	189b      	adds	r3, r3, r2
 801b498:	4a91      	ldr	r2, [pc, #580]	@ (801b6e0 <_strtod_l+0xba8>)
 801b49a:	431a      	orrs	r2, r3
 801b49c:	0017      	movs	r7, r2
 801b49e:	e7ca      	b.n	801b436 <_strtod_l+0x8fe>
 801b4a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b4a2:	4233      	tst	r3, r6
 801b4a4:	d0c7      	beq.n	801b436 <_strtod_l+0x8fe>
 801b4a6:	e7e2      	b.n	801b46e <_strtod_l+0x936>
 801b4a8:	f7ff fb2e 	bl	801ab08 <sulp>
 801b4ac:	0002      	movs	r2, r0
 801b4ae:	000b      	movs	r3, r1
 801b4b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b4b2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b4b4:	f7e7 fb8a 	bl	8002bcc <__aeabi_dsub>
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	0006      	movs	r6, r0
 801b4be:	000f      	movs	r7, r1
 801b4c0:	f7e4 fff6 	bl	80004b0 <__aeabi_dcmpeq>
 801b4c4:	2800      	cmp	r0, #0
 801b4c6:	d0b6      	beq.n	801b436 <_strtod_l+0x8fe>
 801b4c8:	e60c      	b.n	801b0e4 <_strtod_l+0x5ac>
 801b4ca:	9907      	ldr	r1, [sp, #28]
 801b4cc:	9806      	ldr	r0, [sp, #24]
 801b4ce:	f002 ffdf 	bl	801e490 <__ratio>
 801b4d2:	2380      	movs	r3, #128	@ 0x80
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	05db      	lsls	r3, r3, #23
 801b4d8:	0004      	movs	r4, r0
 801b4da:	000d      	movs	r5, r1
 801b4dc:	f7e4 fff8 	bl	80004d0 <__aeabi_dcmple>
 801b4e0:	2800      	cmp	r0, #0
 801b4e2:	d06c      	beq.n	801b5be <_strtod_l+0xa86>
 801b4e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d177      	bne.n	801b5da <_strtod_l+0xaa2>
 801b4ea:	2e00      	cmp	r6, #0
 801b4ec:	d157      	bne.n	801b59e <_strtod_l+0xa66>
 801b4ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b4f0:	031b      	lsls	r3, r3, #12
 801b4f2:	d15a      	bne.n	801b5aa <_strtod_l+0xa72>
 801b4f4:	2200      	movs	r2, #0
 801b4f6:	0020      	movs	r0, r4
 801b4f8:	0029      	movs	r1, r5
 801b4fa:	4b7a      	ldr	r3, [pc, #488]	@ (801b6e4 <_strtod_l+0xbac>)
 801b4fc:	f7e4 ffde 	bl	80004bc <__aeabi_dcmplt>
 801b500:	2800      	cmp	r0, #0
 801b502:	d159      	bne.n	801b5b8 <_strtod_l+0xa80>
 801b504:	0020      	movs	r0, r4
 801b506:	0029      	movs	r1, r5
 801b508:	2200      	movs	r2, #0
 801b50a:	4b77      	ldr	r3, [pc, #476]	@ (801b6e8 <_strtod_l+0xbb0>)
 801b50c:	f7e7 f896 	bl	800263c <__aeabi_dmul>
 801b510:	0004      	movs	r4, r0
 801b512:	000d      	movs	r5, r1
 801b514:	2380      	movs	r3, #128	@ 0x80
 801b516:	061b      	lsls	r3, r3, #24
 801b518:	18eb      	adds	r3, r5, r3
 801b51a:	940a      	str	r4, [sp, #40]	@ 0x28
 801b51c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b51e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b522:	9214      	str	r2, [sp, #80]	@ 0x50
 801b524:	9315      	str	r3, [sp, #84]	@ 0x54
 801b526:	4a71      	ldr	r2, [pc, #452]	@ (801b6ec <_strtod_l+0xbb4>)
 801b528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b52a:	4013      	ands	r3, r2
 801b52c:	9316      	str	r3, [sp, #88]	@ 0x58
 801b52e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b530:	4b6f      	ldr	r3, [pc, #444]	@ (801b6f0 <_strtod_l+0xbb8>)
 801b532:	429a      	cmp	r2, r3
 801b534:	d000      	beq.n	801b538 <_strtod_l+0xa00>
 801b536:	e087      	b.n	801b648 <_strtod_l+0xb10>
 801b538:	4a6e      	ldr	r2, [pc, #440]	@ (801b6f4 <_strtod_l+0xbbc>)
 801b53a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b53c:	4694      	mov	ip, r2
 801b53e:	4463      	add	r3, ip
 801b540:	001f      	movs	r7, r3
 801b542:	0030      	movs	r0, r6
 801b544:	0019      	movs	r1, r3
 801b546:	f002 fed7 	bl	801e2f8 <__ulp>
 801b54a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b54c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b54e:	f7e7 f875 	bl	800263c <__aeabi_dmul>
 801b552:	0032      	movs	r2, r6
 801b554:	003b      	movs	r3, r7
 801b556:	f7e6 f8c9 	bl	80016ec <__aeabi_dadd>
 801b55a:	4a64      	ldr	r2, [pc, #400]	@ (801b6ec <_strtod_l+0xbb4>)
 801b55c:	4b66      	ldr	r3, [pc, #408]	@ (801b6f8 <_strtod_l+0xbc0>)
 801b55e:	0006      	movs	r6, r0
 801b560:	400a      	ands	r2, r1
 801b562:	429a      	cmp	r2, r3
 801b564:	d940      	bls.n	801b5e8 <_strtod_l+0xab0>
 801b566:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b568:	4a64      	ldr	r2, [pc, #400]	@ (801b6fc <_strtod_l+0xbc4>)
 801b56a:	4293      	cmp	r3, r2
 801b56c:	d103      	bne.n	801b576 <_strtod_l+0xa3e>
 801b56e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b570:	3301      	adds	r3, #1
 801b572:	d100      	bne.n	801b576 <_strtod_l+0xa3e>
 801b574:	e51a      	b.n	801afac <_strtod_l+0x474>
 801b576:	2601      	movs	r6, #1
 801b578:	4f60      	ldr	r7, [pc, #384]	@ (801b6fc <_strtod_l+0xbc4>)
 801b57a:	4276      	negs	r6, r6
 801b57c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b57e:	9805      	ldr	r0, [sp, #20]
 801b580:	f002 fb6e 	bl	801dc60 <_Bfree>
 801b584:	9908      	ldr	r1, [sp, #32]
 801b586:	9805      	ldr	r0, [sp, #20]
 801b588:	f002 fb6a 	bl	801dc60 <_Bfree>
 801b58c:	9907      	ldr	r1, [sp, #28]
 801b58e:	9805      	ldr	r0, [sp, #20]
 801b590:	f002 fb66 	bl	801dc60 <_Bfree>
 801b594:	9906      	ldr	r1, [sp, #24]
 801b596:	9805      	ldr	r0, [sp, #20]
 801b598:	f002 fb62 	bl	801dc60 <_Bfree>
 801b59c:	e617      	b.n	801b1ce <_strtod_l+0x696>
 801b59e:	2e01      	cmp	r6, #1
 801b5a0:	d103      	bne.n	801b5aa <_strtod_l+0xa72>
 801b5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d100      	bne.n	801b5aa <_strtod_l+0xa72>
 801b5a8:	e59c      	b.n	801b0e4 <_strtod_l+0x5ac>
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	4c54      	ldr	r4, [pc, #336]	@ (801b700 <_strtod_l+0xbc8>)
 801b5ae:	4d4d      	ldr	r5, [pc, #308]	@ (801b6e4 <_strtod_l+0xbac>)
 801b5b0:	930a      	str	r3, [sp, #40]	@ 0x28
 801b5b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b5b4:	2400      	movs	r4, #0
 801b5b6:	e7b2      	b.n	801b51e <_strtod_l+0x9e6>
 801b5b8:	2400      	movs	r4, #0
 801b5ba:	4d4b      	ldr	r5, [pc, #300]	@ (801b6e8 <_strtod_l+0xbb0>)
 801b5bc:	e7aa      	b.n	801b514 <_strtod_l+0x9dc>
 801b5be:	0020      	movs	r0, r4
 801b5c0:	0029      	movs	r1, r5
 801b5c2:	4b49      	ldr	r3, [pc, #292]	@ (801b6e8 <_strtod_l+0xbb0>)
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	f7e7 f839 	bl	800263c <__aeabi_dmul>
 801b5ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b5cc:	0004      	movs	r4, r0
 801b5ce:	000d      	movs	r5, r1
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d09f      	beq.n	801b514 <_strtod_l+0x9dc>
 801b5d4:	940a      	str	r4, [sp, #40]	@ 0x28
 801b5d6:	950b      	str	r5, [sp, #44]	@ 0x2c
 801b5d8:	e7a1      	b.n	801b51e <_strtod_l+0x9e6>
 801b5da:	2300      	movs	r3, #0
 801b5dc:	4c41      	ldr	r4, [pc, #260]	@ (801b6e4 <_strtod_l+0xbac>)
 801b5de:	0025      	movs	r5, r4
 801b5e0:	930a      	str	r3, [sp, #40]	@ 0x28
 801b5e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b5e4:	001c      	movs	r4, r3
 801b5e6:	e79a      	b.n	801b51e <_strtod_l+0x9e6>
 801b5e8:	23d4      	movs	r3, #212	@ 0xd4
 801b5ea:	049b      	lsls	r3, r3, #18
 801b5ec:	18cf      	adds	r7, r1, r3
 801b5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b5f0:	9710      	str	r7, [sp, #64]	@ 0x40
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d1c2      	bne.n	801b57c <_strtod_l+0xa44>
 801b5f6:	4b3d      	ldr	r3, [pc, #244]	@ (801b6ec <_strtod_l+0xbb4>)
 801b5f8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b5fa:	403b      	ands	r3, r7
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d1bd      	bne.n	801b57c <_strtod_l+0xa44>
 801b600:	0020      	movs	r0, r4
 801b602:	0029      	movs	r1, r5
 801b604:	f7e5 f840 	bl	8000688 <__aeabi_d2lz>
 801b608:	f7e5 f878 	bl	80006fc <__aeabi_l2d>
 801b60c:	0002      	movs	r2, r0
 801b60e:	000b      	movs	r3, r1
 801b610:	0020      	movs	r0, r4
 801b612:	0029      	movs	r1, r5
 801b614:	f7e7 fada 	bl	8002bcc <__aeabi_dsub>
 801b618:	033c      	lsls	r4, r7, #12
 801b61a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b61c:	0b24      	lsrs	r4, r4, #12
 801b61e:	4334      	orrs	r4, r6
 801b620:	900e      	str	r0, [sp, #56]	@ 0x38
 801b622:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b624:	4a37      	ldr	r2, [pc, #220]	@ (801b704 <_strtod_l+0xbcc>)
 801b626:	431c      	orrs	r4, r3
 801b628:	d052      	beq.n	801b6d0 <_strtod_l+0xb98>
 801b62a:	4b37      	ldr	r3, [pc, #220]	@ (801b708 <_strtod_l+0xbd0>)
 801b62c:	f7e4 ff46 	bl	80004bc <__aeabi_dcmplt>
 801b630:	2800      	cmp	r0, #0
 801b632:	d000      	beq.n	801b636 <_strtod_l+0xafe>
 801b634:	e4c3      	b.n	801afbe <_strtod_l+0x486>
 801b636:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b638:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b63a:	4a34      	ldr	r2, [pc, #208]	@ (801b70c <_strtod_l+0xbd4>)
 801b63c:	4b2a      	ldr	r3, [pc, #168]	@ (801b6e8 <_strtod_l+0xbb0>)
 801b63e:	f7e4 ff51 	bl	80004e4 <__aeabi_dcmpgt>
 801b642:	2800      	cmp	r0, #0
 801b644:	d09a      	beq.n	801b57c <_strtod_l+0xa44>
 801b646:	e4ba      	b.n	801afbe <_strtod_l+0x486>
 801b648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d02a      	beq.n	801b6a4 <_strtod_l+0xb6c>
 801b64e:	23d4      	movs	r3, #212	@ 0xd4
 801b650:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b652:	04db      	lsls	r3, r3, #19
 801b654:	429a      	cmp	r2, r3
 801b656:	d825      	bhi.n	801b6a4 <_strtod_l+0xb6c>
 801b658:	0020      	movs	r0, r4
 801b65a:	0029      	movs	r1, r5
 801b65c:	4a2c      	ldr	r2, [pc, #176]	@ (801b710 <_strtod_l+0xbd8>)
 801b65e:	4b2d      	ldr	r3, [pc, #180]	@ (801b714 <_strtod_l+0xbdc>)
 801b660:	f7e4 ff36 	bl	80004d0 <__aeabi_dcmple>
 801b664:	2800      	cmp	r0, #0
 801b666:	d016      	beq.n	801b696 <_strtod_l+0xb5e>
 801b668:	0020      	movs	r0, r4
 801b66a:	0029      	movs	r1, r5
 801b66c:	f7e4 ffee 	bl	800064c <__aeabi_d2uiz>
 801b670:	2800      	cmp	r0, #0
 801b672:	d100      	bne.n	801b676 <_strtod_l+0xb3e>
 801b674:	3001      	adds	r0, #1
 801b676:	f7e7 fed1 	bl	800341c <__aeabi_ui2d>
 801b67a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b67c:	0004      	movs	r4, r0
 801b67e:	000d      	movs	r5, r1
 801b680:	2b00      	cmp	r3, #0
 801b682:	d122      	bne.n	801b6ca <_strtod_l+0xb92>
 801b684:	2380      	movs	r3, #128	@ 0x80
 801b686:	061b      	lsls	r3, r3, #24
 801b688:	18cb      	adds	r3, r1, r3
 801b68a:	9018      	str	r0, [sp, #96]	@ 0x60
 801b68c:	9319      	str	r3, [sp, #100]	@ 0x64
 801b68e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b692:	9214      	str	r2, [sp, #80]	@ 0x50
 801b694:	9315      	str	r3, [sp, #84]	@ 0x54
 801b696:	22d6      	movs	r2, #214	@ 0xd6
 801b698:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b69a:	04d2      	lsls	r2, r2, #19
 801b69c:	189b      	adds	r3, r3, r2
 801b69e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b6a0:	1a9b      	subs	r3, r3, r2
 801b6a2:	9315      	str	r3, [sp, #84]	@ 0x54
 801b6a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b6a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b6a8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b6aa:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801b6ac:	f002 fe24 	bl	801e2f8 <__ulp>
 801b6b0:	0002      	movs	r2, r0
 801b6b2:	000b      	movs	r3, r1
 801b6b4:	0030      	movs	r0, r6
 801b6b6:	0039      	movs	r1, r7
 801b6b8:	f7e6 ffc0 	bl	800263c <__aeabi_dmul>
 801b6bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b6be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b6c0:	f7e6 f814 	bl	80016ec <__aeabi_dadd>
 801b6c4:	0006      	movs	r6, r0
 801b6c6:	000f      	movs	r7, r1
 801b6c8:	e791      	b.n	801b5ee <_strtod_l+0xab6>
 801b6ca:	9418      	str	r4, [sp, #96]	@ 0x60
 801b6cc:	9519      	str	r5, [sp, #100]	@ 0x64
 801b6ce:	e7de      	b.n	801b68e <_strtod_l+0xb56>
 801b6d0:	4b11      	ldr	r3, [pc, #68]	@ (801b718 <_strtod_l+0xbe0>)
 801b6d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b6d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b6d6:	f7e4 fef1 	bl	80004bc <__aeabi_dcmplt>
 801b6da:	e7b2      	b.n	801b642 <_strtod_l+0xb0a>
 801b6dc:	fff00000 	.word	0xfff00000
 801b6e0:	000fffff 	.word	0x000fffff
 801b6e4:	3ff00000 	.word	0x3ff00000
 801b6e8:	3fe00000 	.word	0x3fe00000
 801b6ec:	7ff00000 	.word	0x7ff00000
 801b6f0:	7fe00000 	.word	0x7fe00000
 801b6f4:	fcb00000 	.word	0xfcb00000
 801b6f8:	7c9fffff 	.word	0x7c9fffff
 801b6fc:	7fefffff 	.word	0x7fefffff
 801b700:	bff00000 	.word	0xbff00000
 801b704:	94a03595 	.word	0x94a03595
 801b708:	3fdfffff 	.word	0x3fdfffff
 801b70c:	35afe535 	.word	0x35afe535
 801b710:	ffc00000 	.word	0xffc00000
 801b714:	41dfffff 	.word	0x41dfffff
 801b718:	3fcfffff 	.word	0x3fcfffff

0801b71c <strtod>:
 801b71c:	b510      	push	{r4, lr}
 801b71e:	4c04      	ldr	r4, [pc, #16]	@ (801b730 <strtod+0x14>)
 801b720:	000a      	movs	r2, r1
 801b722:	0001      	movs	r1, r0
 801b724:	4b03      	ldr	r3, [pc, #12]	@ (801b734 <strtod+0x18>)
 801b726:	6820      	ldr	r0, [r4, #0]
 801b728:	f7ff fa06 	bl	801ab38 <_strtod_l>
 801b72c:	bd10      	pop	{r4, pc}
 801b72e:	46c0      	nop			@ (mov r8, r8)
 801b730:	200003c8 	.word	0x200003c8
 801b734:	2000025c 	.word	0x2000025c

0801b738 <_strtol_l.constprop.0>:
 801b738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b73a:	b085      	sub	sp, #20
 801b73c:	0017      	movs	r7, r2
 801b73e:	001e      	movs	r6, r3
 801b740:	9003      	str	r0, [sp, #12]
 801b742:	9101      	str	r1, [sp, #4]
 801b744:	2b24      	cmp	r3, #36	@ 0x24
 801b746:	d844      	bhi.n	801b7d2 <_strtol_l.constprop.0+0x9a>
 801b748:	000c      	movs	r4, r1
 801b74a:	2b01      	cmp	r3, #1
 801b74c:	d041      	beq.n	801b7d2 <_strtol_l.constprop.0+0x9a>
 801b74e:	4b3d      	ldr	r3, [pc, #244]	@ (801b844 <_strtol_l.constprop.0+0x10c>)
 801b750:	2208      	movs	r2, #8
 801b752:	469c      	mov	ip, r3
 801b754:	0023      	movs	r3, r4
 801b756:	4661      	mov	r1, ip
 801b758:	781d      	ldrb	r5, [r3, #0]
 801b75a:	3401      	adds	r4, #1
 801b75c:	5d48      	ldrb	r0, [r1, r5]
 801b75e:	0001      	movs	r1, r0
 801b760:	4011      	ands	r1, r2
 801b762:	4210      	tst	r0, r2
 801b764:	d1f6      	bne.n	801b754 <_strtol_l.constprop.0+0x1c>
 801b766:	2d2d      	cmp	r5, #45	@ 0x2d
 801b768:	d13a      	bne.n	801b7e0 <_strtol_l.constprop.0+0xa8>
 801b76a:	7825      	ldrb	r5, [r4, #0]
 801b76c:	1c9c      	adds	r4, r3, #2
 801b76e:	2301      	movs	r3, #1
 801b770:	9300      	str	r3, [sp, #0]
 801b772:	2210      	movs	r2, #16
 801b774:	0033      	movs	r3, r6
 801b776:	4393      	bics	r3, r2
 801b778:	d109      	bne.n	801b78e <_strtol_l.constprop.0+0x56>
 801b77a:	2d30      	cmp	r5, #48	@ 0x30
 801b77c:	d136      	bne.n	801b7ec <_strtol_l.constprop.0+0xb4>
 801b77e:	2120      	movs	r1, #32
 801b780:	7823      	ldrb	r3, [r4, #0]
 801b782:	438b      	bics	r3, r1
 801b784:	2b58      	cmp	r3, #88	@ 0x58
 801b786:	d131      	bne.n	801b7ec <_strtol_l.constprop.0+0xb4>
 801b788:	0016      	movs	r6, r2
 801b78a:	7865      	ldrb	r5, [r4, #1]
 801b78c:	3402      	adds	r4, #2
 801b78e:	4a2e      	ldr	r2, [pc, #184]	@ (801b848 <_strtol_l.constprop.0+0x110>)
 801b790:	9b00      	ldr	r3, [sp, #0]
 801b792:	4694      	mov	ip, r2
 801b794:	4463      	add	r3, ip
 801b796:	0031      	movs	r1, r6
 801b798:	0018      	movs	r0, r3
 801b79a:	9302      	str	r3, [sp, #8]
 801b79c:	f7e4 fd88 	bl	80002b0 <__aeabi_uidivmod>
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	4684      	mov	ip, r0
 801b7a4:	0010      	movs	r0, r2
 801b7a6:	002b      	movs	r3, r5
 801b7a8:	3b30      	subs	r3, #48	@ 0x30
 801b7aa:	2b09      	cmp	r3, #9
 801b7ac:	d825      	bhi.n	801b7fa <_strtol_l.constprop.0+0xc2>
 801b7ae:	001d      	movs	r5, r3
 801b7b0:	42ae      	cmp	r6, r5
 801b7b2:	dd31      	ble.n	801b818 <_strtol_l.constprop.0+0xe0>
 801b7b4:	1c53      	adds	r3, r2, #1
 801b7b6:	d009      	beq.n	801b7cc <_strtol_l.constprop.0+0x94>
 801b7b8:	2201      	movs	r2, #1
 801b7ba:	4252      	negs	r2, r2
 801b7bc:	4584      	cmp	ip, r0
 801b7be:	d305      	bcc.n	801b7cc <_strtol_l.constprop.0+0x94>
 801b7c0:	d101      	bne.n	801b7c6 <_strtol_l.constprop.0+0x8e>
 801b7c2:	42a9      	cmp	r1, r5
 801b7c4:	db25      	blt.n	801b812 <_strtol_l.constprop.0+0xda>
 801b7c6:	2201      	movs	r2, #1
 801b7c8:	4370      	muls	r0, r6
 801b7ca:	1828      	adds	r0, r5, r0
 801b7cc:	7825      	ldrb	r5, [r4, #0]
 801b7ce:	3401      	adds	r4, #1
 801b7d0:	e7e9      	b.n	801b7a6 <_strtol_l.constprop.0+0x6e>
 801b7d2:	f000 fec5 	bl	801c560 <__errno>
 801b7d6:	2316      	movs	r3, #22
 801b7d8:	6003      	str	r3, [r0, #0]
 801b7da:	2000      	movs	r0, #0
 801b7dc:	b005      	add	sp, #20
 801b7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7e0:	9100      	str	r1, [sp, #0]
 801b7e2:	2d2b      	cmp	r5, #43	@ 0x2b
 801b7e4:	d1c5      	bne.n	801b772 <_strtol_l.constprop.0+0x3a>
 801b7e6:	7825      	ldrb	r5, [r4, #0]
 801b7e8:	1c9c      	adds	r4, r3, #2
 801b7ea:	e7c2      	b.n	801b772 <_strtol_l.constprop.0+0x3a>
 801b7ec:	2e00      	cmp	r6, #0
 801b7ee:	d1ce      	bne.n	801b78e <_strtol_l.constprop.0+0x56>
 801b7f0:	3608      	adds	r6, #8
 801b7f2:	2d30      	cmp	r5, #48	@ 0x30
 801b7f4:	d0cb      	beq.n	801b78e <_strtol_l.constprop.0+0x56>
 801b7f6:	3602      	adds	r6, #2
 801b7f8:	e7c9      	b.n	801b78e <_strtol_l.constprop.0+0x56>
 801b7fa:	002b      	movs	r3, r5
 801b7fc:	3b41      	subs	r3, #65	@ 0x41
 801b7fe:	2b19      	cmp	r3, #25
 801b800:	d801      	bhi.n	801b806 <_strtol_l.constprop.0+0xce>
 801b802:	3d37      	subs	r5, #55	@ 0x37
 801b804:	e7d4      	b.n	801b7b0 <_strtol_l.constprop.0+0x78>
 801b806:	002b      	movs	r3, r5
 801b808:	3b61      	subs	r3, #97	@ 0x61
 801b80a:	2b19      	cmp	r3, #25
 801b80c:	d804      	bhi.n	801b818 <_strtol_l.constprop.0+0xe0>
 801b80e:	3d57      	subs	r5, #87	@ 0x57
 801b810:	e7ce      	b.n	801b7b0 <_strtol_l.constprop.0+0x78>
 801b812:	2201      	movs	r2, #1
 801b814:	4252      	negs	r2, r2
 801b816:	e7d9      	b.n	801b7cc <_strtol_l.constprop.0+0x94>
 801b818:	1c53      	adds	r3, r2, #1
 801b81a:	d108      	bne.n	801b82e <_strtol_l.constprop.0+0xf6>
 801b81c:	2322      	movs	r3, #34	@ 0x22
 801b81e:	9a03      	ldr	r2, [sp, #12]
 801b820:	9802      	ldr	r0, [sp, #8]
 801b822:	6013      	str	r3, [r2, #0]
 801b824:	2f00      	cmp	r7, #0
 801b826:	d0d9      	beq.n	801b7dc <_strtol_l.constprop.0+0xa4>
 801b828:	1e63      	subs	r3, r4, #1
 801b82a:	9301      	str	r3, [sp, #4]
 801b82c:	e007      	b.n	801b83e <_strtol_l.constprop.0+0x106>
 801b82e:	9b00      	ldr	r3, [sp, #0]
 801b830:	2b00      	cmp	r3, #0
 801b832:	d000      	beq.n	801b836 <_strtol_l.constprop.0+0xfe>
 801b834:	4240      	negs	r0, r0
 801b836:	2f00      	cmp	r7, #0
 801b838:	d0d0      	beq.n	801b7dc <_strtol_l.constprop.0+0xa4>
 801b83a:	2a00      	cmp	r2, #0
 801b83c:	d1f4      	bne.n	801b828 <_strtol_l.constprop.0+0xf0>
 801b83e:	9b01      	ldr	r3, [sp, #4]
 801b840:	603b      	str	r3, [r7, #0]
 801b842:	e7cb      	b.n	801b7dc <_strtol_l.constprop.0+0xa4>
 801b844:	08020e31 	.word	0x08020e31
 801b848:	7fffffff 	.word	0x7fffffff

0801b84c <strtol>:
 801b84c:	b510      	push	{r4, lr}
 801b84e:	4c04      	ldr	r4, [pc, #16]	@ (801b860 <strtol+0x14>)
 801b850:	0013      	movs	r3, r2
 801b852:	000a      	movs	r2, r1
 801b854:	0001      	movs	r1, r0
 801b856:	6820      	ldr	r0, [r4, #0]
 801b858:	f7ff ff6e 	bl	801b738 <_strtol_l.constprop.0>
 801b85c:	bd10      	pop	{r4, pc}
 801b85e:	46c0      	nop			@ (mov r8, r8)
 801b860:	200003c8 	.word	0x200003c8

0801b864 <__cvt>:
 801b864:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b866:	001f      	movs	r7, r3
 801b868:	2300      	movs	r3, #0
 801b86a:	0016      	movs	r6, r2
 801b86c:	b08b      	sub	sp, #44	@ 0x2c
 801b86e:	429f      	cmp	r7, r3
 801b870:	da04      	bge.n	801b87c <__cvt+0x18>
 801b872:	2180      	movs	r1, #128	@ 0x80
 801b874:	0609      	lsls	r1, r1, #24
 801b876:	187b      	adds	r3, r7, r1
 801b878:	001f      	movs	r7, r3
 801b87a:	232d      	movs	r3, #45	@ 0x2d
 801b87c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b87e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b880:	7013      	strb	r3, [r2, #0]
 801b882:	2320      	movs	r3, #32
 801b884:	2203      	movs	r2, #3
 801b886:	439d      	bics	r5, r3
 801b888:	2d46      	cmp	r5, #70	@ 0x46
 801b88a:	d007      	beq.n	801b89c <__cvt+0x38>
 801b88c:	002b      	movs	r3, r5
 801b88e:	3b45      	subs	r3, #69	@ 0x45
 801b890:	4259      	negs	r1, r3
 801b892:	414b      	adcs	r3, r1
 801b894:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b896:	3a01      	subs	r2, #1
 801b898:	18cb      	adds	r3, r1, r3
 801b89a:	9310      	str	r3, [sp, #64]	@ 0x40
 801b89c:	ab09      	add	r3, sp, #36	@ 0x24
 801b89e:	9304      	str	r3, [sp, #16]
 801b8a0:	ab08      	add	r3, sp, #32
 801b8a2:	9303      	str	r3, [sp, #12]
 801b8a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b8a6:	9200      	str	r2, [sp, #0]
 801b8a8:	9302      	str	r3, [sp, #8]
 801b8aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8ac:	0032      	movs	r2, r6
 801b8ae:	9301      	str	r3, [sp, #4]
 801b8b0:	003b      	movs	r3, r7
 801b8b2:	f000 ff2b 	bl	801c70c <_dtoa_r>
 801b8b6:	0004      	movs	r4, r0
 801b8b8:	2d47      	cmp	r5, #71	@ 0x47
 801b8ba:	d11b      	bne.n	801b8f4 <__cvt+0x90>
 801b8bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b8be:	07db      	lsls	r3, r3, #31
 801b8c0:	d511      	bpl.n	801b8e6 <__cvt+0x82>
 801b8c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8c4:	18c3      	adds	r3, r0, r3
 801b8c6:	9307      	str	r3, [sp, #28]
 801b8c8:	2200      	movs	r2, #0
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	0030      	movs	r0, r6
 801b8ce:	0039      	movs	r1, r7
 801b8d0:	f7e4 fdee 	bl	80004b0 <__aeabi_dcmpeq>
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	d001      	beq.n	801b8dc <__cvt+0x78>
 801b8d8:	9b07      	ldr	r3, [sp, #28]
 801b8da:	9309      	str	r3, [sp, #36]	@ 0x24
 801b8dc:	2230      	movs	r2, #48	@ 0x30
 801b8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8e0:	9907      	ldr	r1, [sp, #28]
 801b8e2:	428b      	cmp	r3, r1
 801b8e4:	d320      	bcc.n	801b928 <__cvt+0xc4>
 801b8e6:	0020      	movs	r0, r4
 801b8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b8ec:	1b1b      	subs	r3, r3, r4
 801b8ee:	6013      	str	r3, [r2, #0]
 801b8f0:	b00b      	add	sp, #44	@ 0x2c
 801b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8f6:	18c3      	adds	r3, r0, r3
 801b8f8:	9307      	str	r3, [sp, #28]
 801b8fa:	2d46      	cmp	r5, #70	@ 0x46
 801b8fc:	d1e4      	bne.n	801b8c8 <__cvt+0x64>
 801b8fe:	7803      	ldrb	r3, [r0, #0]
 801b900:	2b30      	cmp	r3, #48	@ 0x30
 801b902:	d10c      	bne.n	801b91e <__cvt+0xba>
 801b904:	2200      	movs	r2, #0
 801b906:	2300      	movs	r3, #0
 801b908:	0030      	movs	r0, r6
 801b90a:	0039      	movs	r1, r7
 801b90c:	f7e4 fdd0 	bl	80004b0 <__aeabi_dcmpeq>
 801b910:	2800      	cmp	r0, #0
 801b912:	d104      	bne.n	801b91e <__cvt+0xba>
 801b914:	2301      	movs	r3, #1
 801b916:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b918:	1a9b      	subs	r3, r3, r2
 801b91a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b91c:	6013      	str	r3, [r2, #0]
 801b91e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b920:	9a07      	ldr	r2, [sp, #28]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	18d3      	adds	r3, r2, r3
 801b926:	e7ce      	b.n	801b8c6 <__cvt+0x62>
 801b928:	1c59      	adds	r1, r3, #1
 801b92a:	9109      	str	r1, [sp, #36]	@ 0x24
 801b92c:	701a      	strb	r2, [r3, #0]
 801b92e:	e7d6      	b.n	801b8de <__cvt+0x7a>

0801b930 <__exponent>:
 801b930:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b932:	232b      	movs	r3, #43	@ 0x2b
 801b934:	0005      	movs	r5, r0
 801b936:	000c      	movs	r4, r1
 801b938:	b085      	sub	sp, #20
 801b93a:	7002      	strb	r2, [r0, #0]
 801b93c:	2900      	cmp	r1, #0
 801b93e:	da01      	bge.n	801b944 <__exponent+0x14>
 801b940:	424c      	negs	r4, r1
 801b942:	3302      	adds	r3, #2
 801b944:	706b      	strb	r3, [r5, #1]
 801b946:	2c09      	cmp	r4, #9
 801b948:	dd2c      	ble.n	801b9a4 <__exponent+0x74>
 801b94a:	ab02      	add	r3, sp, #8
 801b94c:	1dde      	adds	r6, r3, #7
 801b94e:	0020      	movs	r0, r4
 801b950:	210a      	movs	r1, #10
 801b952:	f7e4 fd97 	bl	8000484 <__aeabi_idivmod>
 801b956:	0037      	movs	r7, r6
 801b958:	3130      	adds	r1, #48	@ 0x30
 801b95a:	3e01      	subs	r6, #1
 801b95c:	0020      	movs	r0, r4
 801b95e:	7031      	strb	r1, [r6, #0]
 801b960:	210a      	movs	r1, #10
 801b962:	9401      	str	r4, [sp, #4]
 801b964:	f7e4 fca8 	bl	80002b8 <__divsi3>
 801b968:	9b01      	ldr	r3, [sp, #4]
 801b96a:	0004      	movs	r4, r0
 801b96c:	2b63      	cmp	r3, #99	@ 0x63
 801b96e:	dcee      	bgt.n	801b94e <__exponent+0x1e>
 801b970:	1eba      	subs	r2, r7, #2
 801b972:	1ca8      	adds	r0, r5, #2
 801b974:	0001      	movs	r1, r0
 801b976:	0013      	movs	r3, r2
 801b978:	3430      	adds	r4, #48	@ 0x30
 801b97a:	7014      	strb	r4, [r2, #0]
 801b97c:	ac02      	add	r4, sp, #8
 801b97e:	3407      	adds	r4, #7
 801b980:	429c      	cmp	r4, r3
 801b982:	d80a      	bhi.n	801b99a <__exponent+0x6a>
 801b984:	2300      	movs	r3, #0
 801b986:	42a2      	cmp	r2, r4
 801b988:	d803      	bhi.n	801b992 <__exponent+0x62>
 801b98a:	3309      	adds	r3, #9
 801b98c:	aa02      	add	r2, sp, #8
 801b98e:	189b      	adds	r3, r3, r2
 801b990:	1bdb      	subs	r3, r3, r7
 801b992:	18c0      	adds	r0, r0, r3
 801b994:	1b40      	subs	r0, r0, r5
 801b996:	b005      	add	sp, #20
 801b998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b99a:	781c      	ldrb	r4, [r3, #0]
 801b99c:	3301      	adds	r3, #1
 801b99e:	700c      	strb	r4, [r1, #0]
 801b9a0:	3101      	adds	r1, #1
 801b9a2:	e7eb      	b.n	801b97c <__exponent+0x4c>
 801b9a4:	2330      	movs	r3, #48	@ 0x30
 801b9a6:	18e4      	adds	r4, r4, r3
 801b9a8:	70ab      	strb	r3, [r5, #2]
 801b9aa:	1d28      	adds	r0, r5, #4
 801b9ac:	70ec      	strb	r4, [r5, #3]
 801b9ae:	e7f1      	b.n	801b994 <__exponent+0x64>

0801b9b0 <_printf_float>:
 801b9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9b2:	b097      	sub	sp, #92	@ 0x5c
 801b9b4:	000d      	movs	r5, r1
 801b9b6:	920a      	str	r2, [sp, #40]	@ 0x28
 801b9b8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b9ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b9bc:	9009      	str	r0, [sp, #36]	@ 0x24
 801b9be:	f000 fd7d 	bl	801c4bc <_localeconv_r>
 801b9c2:	6803      	ldr	r3, [r0, #0]
 801b9c4:	0018      	movs	r0, r3
 801b9c6:	930d      	str	r3, [sp, #52]	@ 0x34
 801b9c8:	f7e4 fbd0 	bl	800016c <strlen>
 801b9cc:	2300      	movs	r3, #0
 801b9ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 801b9d0:	9314      	str	r3, [sp, #80]	@ 0x50
 801b9d2:	7e2b      	ldrb	r3, [r5, #24]
 801b9d4:	2207      	movs	r2, #7
 801b9d6:	930c      	str	r3, [sp, #48]	@ 0x30
 801b9d8:	682b      	ldr	r3, [r5, #0]
 801b9da:	930e      	str	r3, [sp, #56]	@ 0x38
 801b9dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b9de:	6823      	ldr	r3, [r4, #0]
 801b9e0:	05c9      	lsls	r1, r1, #23
 801b9e2:	d545      	bpl.n	801ba70 <_printf_float+0xc0>
 801b9e4:	189b      	adds	r3, r3, r2
 801b9e6:	4393      	bics	r3, r2
 801b9e8:	001a      	movs	r2, r3
 801b9ea:	3208      	adds	r2, #8
 801b9ec:	6022      	str	r2, [r4, #0]
 801b9ee:	2201      	movs	r2, #1
 801b9f0:	681e      	ldr	r6, [r3, #0]
 801b9f2:	685f      	ldr	r7, [r3, #4]
 801b9f4:	007b      	lsls	r3, r7, #1
 801b9f6:	085b      	lsrs	r3, r3, #1
 801b9f8:	9311      	str	r3, [sp, #68]	@ 0x44
 801b9fa:	9610      	str	r6, [sp, #64]	@ 0x40
 801b9fc:	64ae      	str	r6, [r5, #72]	@ 0x48
 801b9fe:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801ba00:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ba02:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ba04:	4ba7      	ldr	r3, [pc, #668]	@ (801bca4 <_printf_float+0x2f4>)
 801ba06:	4252      	negs	r2, r2
 801ba08:	f7e7 fc7c 	bl	8003304 <__aeabi_dcmpun>
 801ba0c:	2800      	cmp	r0, #0
 801ba0e:	d131      	bne.n	801ba74 <_printf_float+0xc4>
 801ba10:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ba12:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ba14:	2201      	movs	r2, #1
 801ba16:	4ba3      	ldr	r3, [pc, #652]	@ (801bca4 <_printf_float+0x2f4>)
 801ba18:	4252      	negs	r2, r2
 801ba1a:	f7e4 fd59 	bl	80004d0 <__aeabi_dcmple>
 801ba1e:	2800      	cmp	r0, #0
 801ba20:	d128      	bne.n	801ba74 <_printf_float+0xc4>
 801ba22:	2200      	movs	r2, #0
 801ba24:	2300      	movs	r3, #0
 801ba26:	0030      	movs	r0, r6
 801ba28:	0039      	movs	r1, r7
 801ba2a:	f7e4 fd47 	bl	80004bc <__aeabi_dcmplt>
 801ba2e:	2800      	cmp	r0, #0
 801ba30:	d003      	beq.n	801ba3a <_printf_float+0x8a>
 801ba32:	002b      	movs	r3, r5
 801ba34:	222d      	movs	r2, #45	@ 0x2d
 801ba36:	3343      	adds	r3, #67	@ 0x43
 801ba38:	701a      	strb	r2, [r3, #0]
 801ba3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba3c:	4f9a      	ldr	r7, [pc, #616]	@ (801bca8 <_printf_float+0x2f8>)
 801ba3e:	2b47      	cmp	r3, #71	@ 0x47
 801ba40:	d900      	bls.n	801ba44 <_printf_float+0x94>
 801ba42:	4f9a      	ldr	r7, [pc, #616]	@ (801bcac <_printf_float+0x2fc>)
 801ba44:	2303      	movs	r3, #3
 801ba46:	2400      	movs	r4, #0
 801ba48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ba4a:	612b      	str	r3, [r5, #16]
 801ba4c:	3301      	adds	r3, #1
 801ba4e:	439a      	bics	r2, r3
 801ba50:	602a      	str	r2, [r5, #0]
 801ba52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba54:	0029      	movs	r1, r5
 801ba56:	9300      	str	r3, [sp, #0]
 801ba58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ba5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba5c:	aa15      	add	r2, sp, #84	@ 0x54
 801ba5e:	f000 f9e5 	bl	801be2c <_printf_common>
 801ba62:	3001      	adds	r0, #1
 801ba64:	d000      	beq.n	801ba68 <_printf_float+0xb8>
 801ba66:	e09f      	b.n	801bba8 <_printf_float+0x1f8>
 801ba68:	2001      	movs	r0, #1
 801ba6a:	4240      	negs	r0, r0
 801ba6c:	b017      	add	sp, #92	@ 0x5c
 801ba6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba70:	3307      	adds	r3, #7
 801ba72:	e7b8      	b.n	801b9e6 <_printf_float+0x36>
 801ba74:	0032      	movs	r2, r6
 801ba76:	003b      	movs	r3, r7
 801ba78:	0030      	movs	r0, r6
 801ba7a:	0039      	movs	r1, r7
 801ba7c:	f7e7 fc42 	bl	8003304 <__aeabi_dcmpun>
 801ba80:	2800      	cmp	r0, #0
 801ba82:	d00b      	beq.n	801ba9c <_printf_float+0xec>
 801ba84:	2f00      	cmp	r7, #0
 801ba86:	da03      	bge.n	801ba90 <_printf_float+0xe0>
 801ba88:	002b      	movs	r3, r5
 801ba8a:	222d      	movs	r2, #45	@ 0x2d
 801ba8c:	3343      	adds	r3, #67	@ 0x43
 801ba8e:	701a      	strb	r2, [r3, #0]
 801ba90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba92:	4f87      	ldr	r7, [pc, #540]	@ (801bcb0 <_printf_float+0x300>)
 801ba94:	2b47      	cmp	r3, #71	@ 0x47
 801ba96:	d9d5      	bls.n	801ba44 <_printf_float+0x94>
 801ba98:	4f86      	ldr	r7, [pc, #536]	@ (801bcb4 <_printf_float+0x304>)
 801ba9a:	e7d3      	b.n	801ba44 <_printf_float+0x94>
 801ba9c:	2220      	movs	r2, #32
 801ba9e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801baa0:	686b      	ldr	r3, [r5, #4]
 801baa2:	4394      	bics	r4, r2
 801baa4:	1c5a      	adds	r2, r3, #1
 801baa6:	d146      	bne.n	801bb36 <_printf_float+0x186>
 801baa8:	3307      	adds	r3, #7
 801baaa:	606b      	str	r3, [r5, #4]
 801baac:	2380      	movs	r3, #128	@ 0x80
 801baae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bab0:	00db      	lsls	r3, r3, #3
 801bab2:	4313      	orrs	r3, r2
 801bab4:	2200      	movs	r2, #0
 801bab6:	602b      	str	r3, [r5, #0]
 801bab8:	9206      	str	r2, [sp, #24]
 801baba:	aa14      	add	r2, sp, #80	@ 0x50
 801babc:	9205      	str	r2, [sp, #20]
 801babe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bac0:	a90a      	add	r1, sp, #40	@ 0x28
 801bac2:	9204      	str	r2, [sp, #16]
 801bac4:	aa13      	add	r2, sp, #76	@ 0x4c
 801bac6:	9203      	str	r2, [sp, #12]
 801bac8:	2223      	movs	r2, #35	@ 0x23
 801baca:	1852      	adds	r2, r2, r1
 801bacc:	9202      	str	r2, [sp, #8]
 801bace:	9301      	str	r3, [sp, #4]
 801bad0:	686b      	ldr	r3, [r5, #4]
 801bad2:	0032      	movs	r2, r6
 801bad4:	9300      	str	r3, [sp, #0]
 801bad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bad8:	003b      	movs	r3, r7
 801bada:	f7ff fec3 	bl	801b864 <__cvt>
 801bade:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bae0:	0007      	movs	r7, r0
 801bae2:	2c47      	cmp	r4, #71	@ 0x47
 801bae4:	d12d      	bne.n	801bb42 <_printf_float+0x192>
 801bae6:	1cd3      	adds	r3, r2, #3
 801bae8:	db02      	blt.n	801baf0 <_printf_float+0x140>
 801baea:	686b      	ldr	r3, [r5, #4]
 801baec:	429a      	cmp	r2, r3
 801baee:	dd48      	ble.n	801bb82 <_printf_float+0x1d2>
 801baf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801baf2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801baf4:	3b02      	subs	r3, #2
 801baf6:	b2db      	uxtb	r3, r3
 801baf8:	930c      	str	r3, [sp, #48]	@ 0x30
 801bafa:	0028      	movs	r0, r5
 801bafc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bafe:	3901      	subs	r1, #1
 801bb00:	3050      	adds	r0, #80	@ 0x50
 801bb02:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bb04:	f7ff ff14 	bl	801b930 <__exponent>
 801bb08:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bb0a:	0004      	movs	r4, r0
 801bb0c:	1813      	adds	r3, r2, r0
 801bb0e:	612b      	str	r3, [r5, #16]
 801bb10:	2a01      	cmp	r2, #1
 801bb12:	dc02      	bgt.n	801bb1a <_printf_float+0x16a>
 801bb14:	682a      	ldr	r2, [r5, #0]
 801bb16:	07d2      	lsls	r2, r2, #31
 801bb18:	d501      	bpl.n	801bb1e <_printf_float+0x16e>
 801bb1a:	3301      	adds	r3, #1
 801bb1c:	612b      	str	r3, [r5, #16]
 801bb1e:	2323      	movs	r3, #35	@ 0x23
 801bb20:	aa0a      	add	r2, sp, #40	@ 0x28
 801bb22:	189b      	adds	r3, r3, r2
 801bb24:	781b      	ldrb	r3, [r3, #0]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d100      	bne.n	801bb2c <_printf_float+0x17c>
 801bb2a:	e792      	b.n	801ba52 <_printf_float+0xa2>
 801bb2c:	002b      	movs	r3, r5
 801bb2e:	222d      	movs	r2, #45	@ 0x2d
 801bb30:	3343      	adds	r3, #67	@ 0x43
 801bb32:	701a      	strb	r2, [r3, #0]
 801bb34:	e78d      	b.n	801ba52 <_printf_float+0xa2>
 801bb36:	2c47      	cmp	r4, #71	@ 0x47
 801bb38:	d1b8      	bne.n	801baac <_printf_float+0xfc>
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d1b6      	bne.n	801baac <_printf_float+0xfc>
 801bb3e:	3301      	adds	r3, #1
 801bb40:	e7b3      	b.n	801baaa <_printf_float+0xfa>
 801bb42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb44:	0011      	movs	r1, r2
 801bb46:	2b65      	cmp	r3, #101	@ 0x65
 801bb48:	d9d7      	bls.n	801bafa <_printf_float+0x14a>
 801bb4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb4c:	2b66      	cmp	r3, #102	@ 0x66
 801bb4e:	d11a      	bne.n	801bb86 <_printf_float+0x1d6>
 801bb50:	686b      	ldr	r3, [r5, #4]
 801bb52:	2a00      	cmp	r2, #0
 801bb54:	dd09      	ble.n	801bb6a <_printf_float+0x1ba>
 801bb56:	612a      	str	r2, [r5, #16]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d102      	bne.n	801bb62 <_printf_float+0x1b2>
 801bb5c:	6829      	ldr	r1, [r5, #0]
 801bb5e:	07c9      	lsls	r1, r1, #31
 801bb60:	d50b      	bpl.n	801bb7a <_printf_float+0x1ca>
 801bb62:	3301      	adds	r3, #1
 801bb64:	189b      	adds	r3, r3, r2
 801bb66:	612b      	str	r3, [r5, #16]
 801bb68:	e007      	b.n	801bb7a <_printf_float+0x1ca>
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d103      	bne.n	801bb76 <_printf_float+0x1c6>
 801bb6e:	2201      	movs	r2, #1
 801bb70:	6829      	ldr	r1, [r5, #0]
 801bb72:	4211      	tst	r1, r2
 801bb74:	d000      	beq.n	801bb78 <_printf_float+0x1c8>
 801bb76:	1c9a      	adds	r2, r3, #2
 801bb78:	612a      	str	r2, [r5, #16]
 801bb7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bb7c:	2400      	movs	r4, #0
 801bb7e:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bb80:	e7cd      	b.n	801bb1e <_printf_float+0x16e>
 801bb82:	2367      	movs	r3, #103	@ 0x67
 801bb84:	930c      	str	r3, [sp, #48]	@ 0x30
 801bb86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bb88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bb8a:	4299      	cmp	r1, r3
 801bb8c:	db06      	blt.n	801bb9c <_printf_float+0x1ec>
 801bb8e:	682b      	ldr	r3, [r5, #0]
 801bb90:	6129      	str	r1, [r5, #16]
 801bb92:	07db      	lsls	r3, r3, #31
 801bb94:	d5f1      	bpl.n	801bb7a <_printf_float+0x1ca>
 801bb96:	3101      	adds	r1, #1
 801bb98:	6129      	str	r1, [r5, #16]
 801bb9a:	e7ee      	b.n	801bb7a <_printf_float+0x1ca>
 801bb9c:	2201      	movs	r2, #1
 801bb9e:	2900      	cmp	r1, #0
 801bba0:	dce0      	bgt.n	801bb64 <_printf_float+0x1b4>
 801bba2:	1892      	adds	r2, r2, r2
 801bba4:	1a52      	subs	r2, r2, r1
 801bba6:	e7dd      	b.n	801bb64 <_printf_float+0x1b4>
 801bba8:	682a      	ldr	r2, [r5, #0]
 801bbaa:	0553      	lsls	r3, r2, #21
 801bbac:	d408      	bmi.n	801bbc0 <_printf_float+0x210>
 801bbae:	692b      	ldr	r3, [r5, #16]
 801bbb0:	003a      	movs	r2, r7
 801bbb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bbb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bbb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bbb8:	47a0      	blx	r4
 801bbba:	3001      	adds	r0, #1
 801bbbc:	d129      	bne.n	801bc12 <_printf_float+0x262>
 801bbbe:	e753      	b.n	801ba68 <_printf_float+0xb8>
 801bbc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbc2:	2b65      	cmp	r3, #101	@ 0x65
 801bbc4:	d800      	bhi.n	801bbc8 <_printf_float+0x218>
 801bbc6:	e0da      	b.n	801bd7e <_printf_float+0x3ce>
 801bbc8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801bbca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801bbcc:	2200      	movs	r2, #0
 801bbce:	2300      	movs	r3, #0
 801bbd0:	f7e4 fc6e 	bl	80004b0 <__aeabi_dcmpeq>
 801bbd4:	2800      	cmp	r0, #0
 801bbd6:	d033      	beq.n	801bc40 <_printf_float+0x290>
 801bbd8:	2301      	movs	r3, #1
 801bbda:	4a37      	ldr	r2, [pc, #220]	@ (801bcb8 <_printf_float+0x308>)
 801bbdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bbde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bbe0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bbe2:	47a0      	blx	r4
 801bbe4:	3001      	adds	r0, #1
 801bbe6:	d100      	bne.n	801bbea <_printf_float+0x23a>
 801bbe8:	e73e      	b.n	801ba68 <_printf_float+0xb8>
 801bbea:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bbec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bbee:	42b3      	cmp	r3, r6
 801bbf0:	db02      	blt.n	801bbf8 <_printf_float+0x248>
 801bbf2:	682b      	ldr	r3, [r5, #0]
 801bbf4:	07db      	lsls	r3, r3, #31
 801bbf6:	d50c      	bpl.n	801bc12 <_printf_float+0x262>
 801bbf8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bbfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bbfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bbfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bc00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc02:	47a0      	blx	r4
 801bc04:	2400      	movs	r4, #0
 801bc06:	3001      	adds	r0, #1
 801bc08:	d100      	bne.n	801bc0c <_printf_float+0x25c>
 801bc0a:	e72d      	b.n	801ba68 <_printf_float+0xb8>
 801bc0c:	1e73      	subs	r3, r6, #1
 801bc0e:	42a3      	cmp	r3, r4
 801bc10:	dc0a      	bgt.n	801bc28 <_printf_float+0x278>
 801bc12:	682b      	ldr	r3, [r5, #0]
 801bc14:	079b      	lsls	r3, r3, #30
 801bc16:	d500      	bpl.n	801bc1a <_printf_float+0x26a>
 801bc18:	e105      	b.n	801be26 <_printf_float+0x476>
 801bc1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bc1c:	68e8      	ldr	r0, [r5, #12]
 801bc1e:	4298      	cmp	r0, r3
 801bc20:	db00      	blt.n	801bc24 <_printf_float+0x274>
 801bc22:	e723      	b.n	801ba6c <_printf_float+0xbc>
 801bc24:	0018      	movs	r0, r3
 801bc26:	e721      	b.n	801ba6c <_printf_float+0xbc>
 801bc28:	002a      	movs	r2, r5
 801bc2a:	2301      	movs	r3, #1
 801bc2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bc2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc30:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bc32:	321a      	adds	r2, #26
 801bc34:	47b8      	blx	r7
 801bc36:	3001      	adds	r0, #1
 801bc38:	d100      	bne.n	801bc3c <_printf_float+0x28c>
 801bc3a:	e715      	b.n	801ba68 <_printf_float+0xb8>
 801bc3c:	3401      	adds	r4, #1
 801bc3e:	e7e5      	b.n	801bc0c <_printf_float+0x25c>
 801bc40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	dc3a      	bgt.n	801bcbc <_printf_float+0x30c>
 801bc46:	2301      	movs	r3, #1
 801bc48:	4a1b      	ldr	r2, [pc, #108]	@ (801bcb8 <_printf_float+0x308>)
 801bc4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bc4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc50:	47a0      	blx	r4
 801bc52:	3001      	adds	r0, #1
 801bc54:	d100      	bne.n	801bc58 <_printf_float+0x2a8>
 801bc56:	e707      	b.n	801ba68 <_printf_float+0xb8>
 801bc58:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bc5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc5c:	4333      	orrs	r3, r6
 801bc5e:	d102      	bne.n	801bc66 <_printf_float+0x2b6>
 801bc60:	682b      	ldr	r3, [r5, #0]
 801bc62:	07db      	lsls	r3, r3, #31
 801bc64:	d5d5      	bpl.n	801bc12 <_printf_float+0x262>
 801bc66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bc6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bc6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc70:	47a0      	blx	r4
 801bc72:	2300      	movs	r3, #0
 801bc74:	3001      	adds	r0, #1
 801bc76:	d100      	bne.n	801bc7a <_printf_float+0x2ca>
 801bc78:	e6f6      	b.n	801ba68 <_printf_float+0xb8>
 801bc7a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bc80:	425b      	negs	r3, r3
 801bc82:	4293      	cmp	r3, r2
 801bc84:	dc01      	bgt.n	801bc8a <_printf_float+0x2da>
 801bc86:	0033      	movs	r3, r6
 801bc88:	e792      	b.n	801bbb0 <_printf_float+0x200>
 801bc8a:	002a      	movs	r2, r5
 801bc8c:	2301      	movs	r3, #1
 801bc8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bc90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc94:	321a      	adds	r2, #26
 801bc96:	47a0      	blx	r4
 801bc98:	3001      	adds	r0, #1
 801bc9a:	d100      	bne.n	801bc9e <_printf_float+0x2ee>
 801bc9c:	e6e4      	b.n	801ba68 <_printf_float+0xb8>
 801bc9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bca0:	3301      	adds	r3, #1
 801bca2:	e7ea      	b.n	801bc7a <_printf_float+0x2ca>
 801bca4:	7fefffff 	.word	0x7fefffff
 801bca8:	08020f31 	.word	0x08020f31
 801bcac:	08020f35 	.word	0x08020f35
 801bcb0:	08020f39 	.word	0x08020f39
 801bcb4:	08020f3d 	.word	0x08020f3d
 801bcb8:	08020f41 	.word	0x08020f41
 801bcbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bcbe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801bcc0:	930c      	str	r3, [sp, #48]	@ 0x30
 801bcc2:	429e      	cmp	r6, r3
 801bcc4:	dd00      	ble.n	801bcc8 <_printf_float+0x318>
 801bcc6:	001e      	movs	r6, r3
 801bcc8:	2e00      	cmp	r6, #0
 801bcca:	dc31      	bgt.n	801bd30 <_printf_float+0x380>
 801bccc:	43f3      	mvns	r3, r6
 801bcce:	2400      	movs	r4, #0
 801bcd0:	17db      	asrs	r3, r3, #31
 801bcd2:	4033      	ands	r3, r6
 801bcd4:	930e      	str	r3, [sp, #56]	@ 0x38
 801bcd6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801bcd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bcda:	1af3      	subs	r3, r6, r3
 801bcdc:	42a3      	cmp	r3, r4
 801bcde:	dc30      	bgt.n	801bd42 <_printf_float+0x392>
 801bce0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bce2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bce4:	429a      	cmp	r2, r3
 801bce6:	dc38      	bgt.n	801bd5a <_printf_float+0x3aa>
 801bce8:	682b      	ldr	r3, [r5, #0]
 801bcea:	07db      	lsls	r3, r3, #31
 801bcec:	d435      	bmi.n	801bd5a <_printf_float+0x3aa>
 801bcee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bcf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bcf2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bcf4:	1b9b      	subs	r3, r3, r6
 801bcf6:	1b14      	subs	r4, r2, r4
 801bcf8:	429c      	cmp	r4, r3
 801bcfa:	dd00      	ble.n	801bcfe <_printf_float+0x34e>
 801bcfc:	001c      	movs	r4, r3
 801bcfe:	2c00      	cmp	r4, #0
 801bd00:	dc34      	bgt.n	801bd6c <_printf_float+0x3bc>
 801bd02:	43e3      	mvns	r3, r4
 801bd04:	2600      	movs	r6, #0
 801bd06:	17db      	asrs	r3, r3, #31
 801bd08:	401c      	ands	r4, r3
 801bd0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bd0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bd0e:	1ad3      	subs	r3, r2, r3
 801bd10:	1b1b      	subs	r3, r3, r4
 801bd12:	42b3      	cmp	r3, r6
 801bd14:	dc00      	bgt.n	801bd18 <_printf_float+0x368>
 801bd16:	e77c      	b.n	801bc12 <_printf_float+0x262>
 801bd18:	002a      	movs	r2, r5
 801bd1a:	2301      	movs	r3, #1
 801bd1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bd22:	321a      	adds	r2, #26
 801bd24:	47b8      	blx	r7
 801bd26:	3001      	adds	r0, #1
 801bd28:	d100      	bne.n	801bd2c <_printf_float+0x37c>
 801bd2a:	e69d      	b.n	801ba68 <_printf_float+0xb8>
 801bd2c:	3601      	adds	r6, #1
 801bd2e:	e7ec      	b.n	801bd0a <_printf_float+0x35a>
 801bd30:	0033      	movs	r3, r6
 801bd32:	003a      	movs	r2, r7
 801bd34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bd3a:	47a0      	blx	r4
 801bd3c:	3001      	adds	r0, #1
 801bd3e:	d1c5      	bne.n	801bccc <_printf_float+0x31c>
 801bd40:	e692      	b.n	801ba68 <_printf_float+0xb8>
 801bd42:	002a      	movs	r2, r5
 801bd44:	2301      	movs	r3, #1
 801bd46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd4a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bd4c:	321a      	adds	r2, #26
 801bd4e:	47b0      	blx	r6
 801bd50:	3001      	adds	r0, #1
 801bd52:	d100      	bne.n	801bd56 <_printf_float+0x3a6>
 801bd54:	e688      	b.n	801ba68 <_printf_float+0xb8>
 801bd56:	3401      	adds	r4, #1
 801bd58:	e7bd      	b.n	801bcd6 <_printf_float+0x326>
 801bd5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bd5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bd64:	47a0      	blx	r4
 801bd66:	3001      	adds	r0, #1
 801bd68:	d1c1      	bne.n	801bcee <_printf_float+0x33e>
 801bd6a:	e67d      	b.n	801ba68 <_printf_float+0xb8>
 801bd6c:	19ba      	adds	r2, r7, r6
 801bd6e:	0023      	movs	r3, r4
 801bd70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bd76:	47b0      	blx	r6
 801bd78:	3001      	adds	r0, #1
 801bd7a:	d1c2      	bne.n	801bd02 <_printf_float+0x352>
 801bd7c:	e674      	b.n	801ba68 <_printf_float+0xb8>
 801bd7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bd80:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd82:	2b01      	cmp	r3, #1
 801bd84:	dc02      	bgt.n	801bd8c <_printf_float+0x3dc>
 801bd86:	2301      	movs	r3, #1
 801bd88:	421a      	tst	r2, r3
 801bd8a:	d039      	beq.n	801be00 <_printf_float+0x450>
 801bd8c:	2301      	movs	r3, #1
 801bd8e:	003a      	movs	r2, r7
 801bd90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bd96:	47b0      	blx	r6
 801bd98:	3001      	adds	r0, #1
 801bd9a:	d100      	bne.n	801bd9e <_printf_float+0x3ee>
 801bd9c:	e664      	b.n	801ba68 <_printf_float+0xb8>
 801bd9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bda0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bda2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bda4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bda6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bda8:	47b0      	blx	r6
 801bdaa:	3001      	adds	r0, #1
 801bdac:	d100      	bne.n	801bdb0 <_printf_float+0x400>
 801bdae:	e65b      	b.n	801ba68 <_printf_float+0xb8>
 801bdb0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801bdb2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801bdb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	3b01      	subs	r3, #1
 801bdba:	930c      	str	r3, [sp, #48]	@ 0x30
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	f7e4 fb77 	bl	80004b0 <__aeabi_dcmpeq>
 801bdc2:	2800      	cmp	r0, #0
 801bdc4:	d11a      	bne.n	801bdfc <_printf_float+0x44c>
 801bdc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdc8:	1c7a      	adds	r2, r7, #1
 801bdca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bdcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bdd0:	47b0      	blx	r6
 801bdd2:	3001      	adds	r0, #1
 801bdd4:	d10e      	bne.n	801bdf4 <_printf_float+0x444>
 801bdd6:	e647      	b.n	801ba68 <_printf_float+0xb8>
 801bdd8:	002a      	movs	r2, r5
 801bdda:	2301      	movs	r3, #1
 801bddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bdde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bde0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bde2:	321a      	adds	r2, #26
 801bde4:	47b8      	blx	r7
 801bde6:	3001      	adds	r0, #1
 801bde8:	d100      	bne.n	801bdec <_printf_float+0x43c>
 801bdea:	e63d      	b.n	801ba68 <_printf_float+0xb8>
 801bdec:	3601      	adds	r6, #1
 801bdee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdf0:	429e      	cmp	r6, r3
 801bdf2:	dbf1      	blt.n	801bdd8 <_printf_float+0x428>
 801bdf4:	002a      	movs	r2, r5
 801bdf6:	0023      	movs	r3, r4
 801bdf8:	3250      	adds	r2, #80	@ 0x50
 801bdfa:	e6da      	b.n	801bbb2 <_printf_float+0x202>
 801bdfc:	2600      	movs	r6, #0
 801bdfe:	e7f6      	b.n	801bdee <_printf_float+0x43e>
 801be00:	003a      	movs	r2, r7
 801be02:	e7e2      	b.n	801bdca <_printf_float+0x41a>
 801be04:	002a      	movs	r2, r5
 801be06:	2301      	movs	r3, #1
 801be08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801be0e:	3219      	adds	r2, #25
 801be10:	47b0      	blx	r6
 801be12:	3001      	adds	r0, #1
 801be14:	d100      	bne.n	801be18 <_printf_float+0x468>
 801be16:	e627      	b.n	801ba68 <_printf_float+0xb8>
 801be18:	3401      	adds	r4, #1
 801be1a:	68eb      	ldr	r3, [r5, #12]
 801be1c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801be1e:	1a9b      	subs	r3, r3, r2
 801be20:	42a3      	cmp	r3, r4
 801be22:	dcef      	bgt.n	801be04 <_printf_float+0x454>
 801be24:	e6f9      	b.n	801bc1a <_printf_float+0x26a>
 801be26:	2400      	movs	r4, #0
 801be28:	e7f7      	b.n	801be1a <_printf_float+0x46a>
 801be2a:	46c0      	nop			@ (mov r8, r8)

0801be2c <_printf_common>:
 801be2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801be2e:	0016      	movs	r6, r2
 801be30:	9301      	str	r3, [sp, #4]
 801be32:	688a      	ldr	r2, [r1, #8]
 801be34:	690b      	ldr	r3, [r1, #16]
 801be36:	000c      	movs	r4, r1
 801be38:	9000      	str	r0, [sp, #0]
 801be3a:	4293      	cmp	r3, r2
 801be3c:	da00      	bge.n	801be40 <_printf_common+0x14>
 801be3e:	0013      	movs	r3, r2
 801be40:	0022      	movs	r2, r4
 801be42:	6033      	str	r3, [r6, #0]
 801be44:	3243      	adds	r2, #67	@ 0x43
 801be46:	7812      	ldrb	r2, [r2, #0]
 801be48:	2a00      	cmp	r2, #0
 801be4a:	d001      	beq.n	801be50 <_printf_common+0x24>
 801be4c:	3301      	adds	r3, #1
 801be4e:	6033      	str	r3, [r6, #0]
 801be50:	6823      	ldr	r3, [r4, #0]
 801be52:	069b      	lsls	r3, r3, #26
 801be54:	d502      	bpl.n	801be5c <_printf_common+0x30>
 801be56:	6833      	ldr	r3, [r6, #0]
 801be58:	3302      	adds	r3, #2
 801be5a:	6033      	str	r3, [r6, #0]
 801be5c:	6822      	ldr	r2, [r4, #0]
 801be5e:	2306      	movs	r3, #6
 801be60:	0015      	movs	r5, r2
 801be62:	401d      	ands	r5, r3
 801be64:	421a      	tst	r2, r3
 801be66:	d027      	beq.n	801beb8 <_printf_common+0x8c>
 801be68:	0023      	movs	r3, r4
 801be6a:	3343      	adds	r3, #67	@ 0x43
 801be6c:	781b      	ldrb	r3, [r3, #0]
 801be6e:	1e5a      	subs	r2, r3, #1
 801be70:	4193      	sbcs	r3, r2
 801be72:	6822      	ldr	r2, [r4, #0]
 801be74:	0692      	lsls	r2, r2, #26
 801be76:	d430      	bmi.n	801beda <_printf_common+0xae>
 801be78:	0022      	movs	r2, r4
 801be7a:	9901      	ldr	r1, [sp, #4]
 801be7c:	9800      	ldr	r0, [sp, #0]
 801be7e:	9d08      	ldr	r5, [sp, #32]
 801be80:	3243      	adds	r2, #67	@ 0x43
 801be82:	47a8      	blx	r5
 801be84:	3001      	adds	r0, #1
 801be86:	d025      	beq.n	801bed4 <_printf_common+0xa8>
 801be88:	2206      	movs	r2, #6
 801be8a:	6823      	ldr	r3, [r4, #0]
 801be8c:	2500      	movs	r5, #0
 801be8e:	4013      	ands	r3, r2
 801be90:	2b04      	cmp	r3, #4
 801be92:	d105      	bne.n	801bea0 <_printf_common+0x74>
 801be94:	6833      	ldr	r3, [r6, #0]
 801be96:	68e5      	ldr	r5, [r4, #12]
 801be98:	1aed      	subs	r5, r5, r3
 801be9a:	43eb      	mvns	r3, r5
 801be9c:	17db      	asrs	r3, r3, #31
 801be9e:	401d      	ands	r5, r3
 801bea0:	68a3      	ldr	r3, [r4, #8]
 801bea2:	6922      	ldr	r2, [r4, #16]
 801bea4:	4293      	cmp	r3, r2
 801bea6:	dd01      	ble.n	801beac <_printf_common+0x80>
 801bea8:	1a9b      	subs	r3, r3, r2
 801beaa:	18ed      	adds	r5, r5, r3
 801beac:	2600      	movs	r6, #0
 801beae:	42b5      	cmp	r5, r6
 801beb0:	d120      	bne.n	801bef4 <_printf_common+0xc8>
 801beb2:	2000      	movs	r0, #0
 801beb4:	e010      	b.n	801bed8 <_printf_common+0xac>
 801beb6:	3501      	adds	r5, #1
 801beb8:	68e3      	ldr	r3, [r4, #12]
 801beba:	6832      	ldr	r2, [r6, #0]
 801bebc:	1a9b      	subs	r3, r3, r2
 801bebe:	42ab      	cmp	r3, r5
 801bec0:	ddd2      	ble.n	801be68 <_printf_common+0x3c>
 801bec2:	0022      	movs	r2, r4
 801bec4:	2301      	movs	r3, #1
 801bec6:	9901      	ldr	r1, [sp, #4]
 801bec8:	9800      	ldr	r0, [sp, #0]
 801beca:	9f08      	ldr	r7, [sp, #32]
 801becc:	3219      	adds	r2, #25
 801bece:	47b8      	blx	r7
 801bed0:	3001      	adds	r0, #1
 801bed2:	d1f0      	bne.n	801beb6 <_printf_common+0x8a>
 801bed4:	2001      	movs	r0, #1
 801bed6:	4240      	negs	r0, r0
 801bed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801beda:	2030      	movs	r0, #48	@ 0x30
 801bedc:	18e1      	adds	r1, r4, r3
 801bede:	3143      	adds	r1, #67	@ 0x43
 801bee0:	7008      	strb	r0, [r1, #0]
 801bee2:	0021      	movs	r1, r4
 801bee4:	1c5a      	adds	r2, r3, #1
 801bee6:	3145      	adds	r1, #69	@ 0x45
 801bee8:	7809      	ldrb	r1, [r1, #0]
 801beea:	18a2      	adds	r2, r4, r2
 801beec:	3243      	adds	r2, #67	@ 0x43
 801beee:	3302      	adds	r3, #2
 801bef0:	7011      	strb	r1, [r2, #0]
 801bef2:	e7c1      	b.n	801be78 <_printf_common+0x4c>
 801bef4:	0022      	movs	r2, r4
 801bef6:	2301      	movs	r3, #1
 801bef8:	9901      	ldr	r1, [sp, #4]
 801befa:	9800      	ldr	r0, [sp, #0]
 801befc:	9f08      	ldr	r7, [sp, #32]
 801befe:	321a      	adds	r2, #26
 801bf00:	47b8      	blx	r7
 801bf02:	3001      	adds	r0, #1
 801bf04:	d0e6      	beq.n	801bed4 <_printf_common+0xa8>
 801bf06:	3601      	adds	r6, #1
 801bf08:	e7d1      	b.n	801beae <_printf_common+0x82>
	...

0801bf0c <_printf_i>:
 801bf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf0e:	b08b      	sub	sp, #44	@ 0x2c
 801bf10:	9206      	str	r2, [sp, #24]
 801bf12:	000a      	movs	r2, r1
 801bf14:	3243      	adds	r2, #67	@ 0x43
 801bf16:	9307      	str	r3, [sp, #28]
 801bf18:	9005      	str	r0, [sp, #20]
 801bf1a:	9203      	str	r2, [sp, #12]
 801bf1c:	7e0a      	ldrb	r2, [r1, #24]
 801bf1e:	000c      	movs	r4, r1
 801bf20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bf22:	2a78      	cmp	r2, #120	@ 0x78
 801bf24:	d809      	bhi.n	801bf3a <_printf_i+0x2e>
 801bf26:	2a62      	cmp	r2, #98	@ 0x62
 801bf28:	d80b      	bhi.n	801bf42 <_printf_i+0x36>
 801bf2a:	2a00      	cmp	r2, #0
 801bf2c:	d100      	bne.n	801bf30 <_printf_i+0x24>
 801bf2e:	e0bc      	b.n	801c0aa <_printf_i+0x19e>
 801bf30:	497b      	ldr	r1, [pc, #492]	@ (801c120 <_printf_i+0x214>)
 801bf32:	9104      	str	r1, [sp, #16]
 801bf34:	2a58      	cmp	r2, #88	@ 0x58
 801bf36:	d100      	bne.n	801bf3a <_printf_i+0x2e>
 801bf38:	e090      	b.n	801c05c <_printf_i+0x150>
 801bf3a:	0025      	movs	r5, r4
 801bf3c:	3542      	adds	r5, #66	@ 0x42
 801bf3e:	702a      	strb	r2, [r5, #0]
 801bf40:	e022      	b.n	801bf88 <_printf_i+0x7c>
 801bf42:	0010      	movs	r0, r2
 801bf44:	3863      	subs	r0, #99	@ 0x63
 801bf46:	2815      	cmp	r0, #21
 801bf48:	d8f7      	bhi.n	801bf3a <_printf_i+0x2e>
 801bf4a:	f7e4 f921 	bl	8000190 <__gnu_thumb1_case_shi>
 801bf4e:	0016      	.short	0x0016
 801bf50:	fff6001f 	.word	0xfff6001f
 801bf54:	fff6fff6 	.word	0xfff6fff6
 801bf58:	001ffff6 	.word	0x001ffff6
 801bf5c:	fff6fff6 	.word	0xfff6fff6
 801bf60:	fff6fff6 	.word	0xfff6fff6
 801bf64:	003600a1 	.word	0x003600a1
 801bf68:	fff60080 	.word	0xfff60080
 801bf6c:	00b2fff6 	.word	0x00b2fff6
 801bf70:	0036fff6 	.word	0x0036fff6
 801bf74:	fff6fff6 	.word	0xfff6fff6
 801bf78:	0084      	.short	0x0084
 801bf7a:	0025      	movs	r5, r4
 801bf7c:	681a      	ldr	r2, [r3, #0]
 801bf7e:	3542      	adds	r5, #66	@ 0x42
 801bf80:	1d11      	adds	r1, r2, #4
 801bf82:	6019      	str	r1, [r3, #0]
 801bf84:	6813      	ldr	r3, [r2, #0]
 801bf86:	702b      	strb	r3, [r5, #0]
 801bf88:	2301      	movs	r3, #1
 801bf8a:	e0a0      	b.n	801c0ce <_printf_i+0x1c2>
 801bf8c:	6818      	ldr	r0, [r3, #0]
 801bf8e:	6809      	ldr	r1, [r1, #0]
 801bf90:	1d02      	adds	r2, r0, #4
 801bf92:	060d      	lsls	r5, r1, #24
 801bf94:	d50b      	bpl.n	801bfae <_printf_i+0xa2>
 801bf96:	6806      	ldr	r6, [r0, #0]
 801bf98:	601a      	str	r2, [r3, #0]
 801bf9a:	2e00      	cmp	r6, #0
 801bf9c:	da03      	bge.n	801bfa6 <_printf_i+0x9a>
 801bf9e:	232d      	movs	r3, #45	@ 0x2d
 801bfa0:	9a03      	ldr	r2, [sp, #12]
 801bfa2:	4276      	negs	r6, r6
 801bfa4:	7013      	strb	r3, [r2, #0]
 801bfa6:	4b5e      	ldr	r3, [pc, #376]	@ (801c120 <_printf_i+0x214>)
 801bfa8:	270a      	movs	r7, #10
 801bfaa:	9304      	str	r3, [sp, #16]
 801bfac:	e018      	b.n	801bfe0 <_printf_i+0xd4>
 801bfae:	6806      	ldr	r6, [r0, #0]
 801bfb0:	601a      	str	r2, [r3, #0]
 801bfb2:	0649      	lsls	r1, r1, #25
 801bfb4:	d5f1      	bpl.n	801bf9a <_printf_i+0x8e>
 801bfb6:	b236      	sxth	r6, r6
 801bfb8:	e7ef      	b.n	801bf9a <_printf_i+0x8e>
 801bfba:	6808      	ldr	r0, [r1, #0]
 801bfbc:	6819      	ldr	r1, [r3, #0]
 801bfbe:	c940      	ldmia	r1!, {r6}
 801bfc0:	0605      	lsls	r5, r0, #24
 801bfc2:	d402      	bmi.n	801bfca <_printf_i+0xbe>
 801bfc4:	0640      	lsls	r0, r0, #25
 801bfc6:	d500      	bpl.n	801bfca <_printf_i+0xbe>
 801bfc8:	b2b6      	uxth	r6, r6
 801bfca:	6019      	str	r1, [r3, #0]
 801bfcc:	4b54      	ldr	r3, [pc, #336]	@ (801c120 <_printf_i+0x214>)
 801bfce:	270a      	movs	r7, #10
 801bfd0:	9304      	str	r3, [sp, #16]
 801bfd2:	2a6f      	cmp	r2, #111	@ 0x6f
 801bfd4:	d100      	bne.n	801bfd8 <_printf_i+0xcc>
 801bfd6:	3f02      	subs	r7, #2
 801bfd8:	0023      	movs	r3, r4
 801bfda:	2200      	movs	r2, #0
 801bfdc:	3343      	adds	r3, #67	@ 0x43
 801bfde:	701a      	strb	r2, [r3, #0]
 801bfe0:	6863      	ldr	r3, [r4, #4]
 801bfe2:	60a3      	str	r3, [r4, #8]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	db03      	blt.n	801bff0 <_printf_i+0xe4>
 801bfe8:	2104      	movs	r1, #4
 801bfea:	6822      	ldr	r2, [r4, #0]
 801bfec:	438a      	bics	r2, r1
 801bfee:	6022      	str	r2, [r4, #0]
 801bff0:	2e00      	cmp	r6, #0
 801bff2:	d102      	bne.n	801bffa <_printf_i+0xee>
 801bff4:	9d03      	ldr	r5, [sp, #12]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d00c      	beq.n	801c014 <_printf_i+0x108>
 801bffa:	9d03      	ldr	r5, [sp, #12]
 801bffc:	0030      	movs	r0, r6
 801bffe:	0039      	movs	r1, r7
 801c000:	f7e4 f956 	bl	80002b0 <__aeabi_uidivmod>
 801c004:	9b04      	ldr	r3, [sp, #16]
 801c006:	3d01      	subs	r5, #1
 801c008:	5c5b      	ldrb	r3, [r3, r1]
 801c00a:	702b      	strb	r3, [r5, #0]
 801c00c:	0033      	movs	r3, r6
 801c00e:	0006      	movs	r6, r0
 801c010:	429f      	cmp	r7, r3
 801c012:	d9f3      	bls.n	801bffc <_printf_i+0xf0>
 801c014:	2f08      	cmp	r7, #8
 801c016:	d109      	bne.n	801c02c <_printf_i+0x120>
 801c018:	6823      	ldr	r3, [r4, #0]
 801c01a:	07db      	lsls	r3, r3, #31
 801c01c:	d506      	bpl.n	801c02c <_printf_i+0x120>
 801c01e:	6862      	ldr	r2, [r4, #4]
 801c020:	6923      	ldr	r3, [r4, #16]
 801c022:	429a      	cmp	r2, r3
 801c024:	dc02      	bgt.n	801c02c <_printf_i+0x120>
 801c026:	2330      	movs	r3, #48	@ 0x30
 801c028:	3d01      	subs	r5, #1
 801c02a:	702b      	strb	r3, [r5, #0]
 801c02c:	9b03      	ldr	r3, [sp, #12]
 801c02e:	1b5b      	subs	r3, r3, r5
 801c030:	6123      	str	r3, [r4, #16]
 801c032:	9b07      	ldr	r3, [sp, #28]
 801c034:	0021      	movs	r1, r4
 801c036:	9300      	str	r3, [sp, #0]
 801c038:	9805      	ldr	r0, [sp, #20]
 801c03a:	9b06      	ldr	r3, [sp, #24]
 801c03c:	aa09      	add	r2, sp, #36	@ 0x24
 801c03e:	f7ff fef5 	bl	801be2c <_printf_common>
 801c042:	3001      	adds	r0, #1
 801c044:	d148      	bne.n	801c0d8 <_printf_i+0x1cc>
 801c046:	2001      	movs	r0, #1
 801c048:	4240      	negs	r0, r0
 801c04a:	b00b      	add	sp, #44	@ 0x2c
 801c04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c04e:	2220      	movs	r2, #32
 801c050:	6809      	ldr	r1, [r1, #0]
 801c052:	430a      	orrs	r2, r1
 801c054:	6022      	str	r2, [r4, #0]
 801c056:	2278      	movs	r2, #120	@ 0x78
 801c058:	4932      	ldr	r1, [pc, #200]	@ (801c124 <_printf_i+0x218>)
 801c05a:	9104      	str	r1, [sp, #16]
 801c05c:	0021      	movs	r1, r4
 801c05e:	3145      	adds	r1, #69	@ 0x45
 801c060:	700a      	strb	r2, [r1, #0]
 801c062:	6819      	ldr	r1, [r3, #0]
 801c064:	6822      	ldr	r2, [r4, #0]
 801c066:	c940      	ldmia	r1!, {r6}
 801c068:	0610      	lsls	r0, r2, #24
 801c06a:	d402      	bmi.n	801c072 <_printf_i+0x166>
 801c06c:	0650      	lsls	r0, r2, #25
 801c06e:	d500      	bpl.n	801c072 <_printf_i+0x166>
 801c070:	b2b6      	uxth	r6, r6
 801c072:	6019      	str	r1, [r3, #0]
 801c074:	07d3      	lsls	r3, r2, #31
 801c076:	d502      	bpl.n	801c07e <_printf_i+0x172>
 801c078:	2320      	movs	r3, #32
 801c07a:	4313      	orrs	r3, r2
 801c07c:	6023      	str	r3, [r4, #0]
 801c07e:	2e00      	cmp	r6, #0
 801c080:	d001      	beq.n	801c086 <_printf_i+0x17a>
 801c082:	2710      	movs	r7, #16
 801c084:	e7a8      	b.n	801bfd8 <_printf_i+0xcc>
 801c086:	2220      	movs	r2, #32
 801c088:	6823      	ldr	r3, [r4, #0]
 801c08a:	4393      	bics	r3, r2
 801c08c:	6023      	str	r3, [r4, #0]
 801c08e:	e7f8      	b.n	801c082 <_printf_i+0x176>
 801c090:	681a      	ldr	r2, [r3, #0]
 801c092:	680d      	ldr	r5, [r1, #0]
 801c094:	1d10      	adds	r0, r2, #4
 801c096:	6949      	ldr	r1, [r1, #20]
 801c098:	6018      	str	r0, [r3, #0]
 801c09a:	6813      	ldr	r3, [r2, #0]
 801c09c:	062e      	lsls	r6, r5, #24
 801c09e:	d501      	bpl.n	801c0a4 <_printf_i+0x198>
 801c0a0:	6019      	str	r1, [r3, #0]
 801c0a2:	e002      	b.n	801c0aa <_printf_i+0x19e>
 801c0a4:	066d      	lsls	r5, r5, #25
 801c0a6:	d5fb      	bpl.n	801c0a0 <_printf_i+0x194>
 801c0a8:	8019      	strh	r1, [r3, #0]
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	9d03      	ldr	r5, [sp, #12]
 801c0ae:	6123      	str	r3, [r4, #16]
 801c0b0:	e7bf      	b.n	801c032 <_printf_i+0x126>
 801c0b2:	681a      	ldr	r2, [r3, #0]
 801c0b4:	1d11      	adds	r1, r2, #4
 801c0b6:	6019      	str	r1, [r3, #0]
 801c0b8:	6815      	ldr	r5, [r2, #0]
 801c0ba:	2100      	movs	r1, #0
 801c0bc:	0028      	movs	r0, r5
 801c0be:	6862      	ldr	r2, [r4, #4]
 801c0c0:	f000 fa7b 	bl	801c5ba <memchr>
 801c0c4:	2800      	cmp	r0, #0
 801c0c6:	d001      	beq.n	801c0cc <_printf_i+0x1c0>
 801c0c8:	1b40      	subs	r0, r0, r5
 801c0ca:	6060      	str	r0, [r4, #4]
 801c0cc:	6863      	ldr	r3, [r4, #4]
 801c0ce:	6123      	str	r3, [r4, #16]
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	9a03      	ldr	r2, [sp, #12]
 801c0d4:	7013      	strb	r3, [r2, #0]
 801c0d6:	e7ac      	b.n	801c032 <_printf_i+0x126>
 801c0d8:	002a      	movs	r2, r5
 801c0da:	6923      	ldr	r3, [r4, #16]
 801c0dc:	9906      	ldr	r1, [sp, #24]
 801c0de:	9805      	ldr	r0, [sp, #20]
 801c0e0:	9d07      	ldr	r5, [sp, #28]
 801c0e2:	47a8      	blx	r5
 801c0e4:	3001      	adds	r0, #1
 801c0e6:	d0ae      	beq.n	801c046 <_printf_i+0x13a>
 801c0e8:	6823      	ldr	r3, [r4, #0]
 801c0ea:	079b      	lsls	r3, r3, #30
 801c0ec:	d415      	bmi.n	801c11a <_printf_i+0x20e>
 801c0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0f0:	68e0      	ldr	r0, [r4, #12]
 801c0f2:	4298      	cmp	r0, r3
 801c0f4:	daa9      	bge.n	801c04a <_printf_i+0x13e>
 801c0f6:	0018      	movs	r0, r3
 801c0f8:	e7a7      	b.n	801c04a <_printf_i+0x13e>
 801c0fa:	0022      	movs	r2, r4
 801c0fc:	2301      	movs	r3, #1
 801c0fe:	9906      	ldr	r1, [sp, #24]
 801c100:	9805      	ldr	r0, [sp, #20]
 801c102:	9e07      	ldr	r6, [sp, #28]
 801c104:	3219      	adds	r2, #25
 801c106:	47b0      	blx	r6
 801c108:	3001      	adds	r0, #1
 801c10a:	d09c      	beq.n	801c046 <_printf_i+0x13a>
 801c10c:	3501      	adds	r5, #1
 801c10e:	68e3      	ldr	r3, [r4, #12]
 801c110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c112:	1a9b      	subs	r3, r3, r2
 801c114:	42ab      	cmp	r3, r5
 801c116:	dcf0      	bgt.n	801c0fa <_printf_i+0x1ee>
 801c118:	e7e9      	b.n	801c0ee <_printf_i+0x1e2>
 801c11a:	2500      	movs	r5, #0
 801c11c:	e7f7      	b.n	801c10e <_printf_i+0x202>
 801c11e:	46c0      	nop			@ (mov r8, r8)
 801c120:	08020f43 	.word	0x08020f43
 801c124:	08020f54 	.word	0x08020f54

0801c128 <std>:
 801c128:	2300      	movs	r3, #0
 801c12a:	b510      	push	{r4, lr}
 801c12c:	0004      	movs	r4, r0
 801c12e:	6003      	str	r3, [r0, #0]
 801c130:	6043      	str	r3, [r0, #4]
 801c132:	6083      	str	r3, [r0, #8]
 801c134:	8181      	strh	r1, [r0, #12]
 801c136:	6643      	str	r3, [r0, #100]	@ 0x64
 801c138:	81c2      	strh	r2, [r0, #14]
 801c13a:	6103      	str	r3, [r0, #16]
 801c13c:	6143      	str	r3, [r0, #20]
 801c13e:	6183      	str	r3, [r0, #24]
 801c140:	0019      	movs	r1, r3
 801c142:	2208      	movs	r2, #8
 801c144:	305c      	adds	r0, #92	@ 0x5c
 801c146:	f000 f967 	bl	801c418 <memset>
 801c14a:	4b0b      	ldr	r3, [pc, #44]	@ (801c178 <std+0x50>)
 801c14c:	6224      	str	r4, [r4, #32]
 801c14e:	6263      	str	r3, [r4, #36]	@ 0x24
 801c150:	4b0a      	ldr	r3, [pc, #40]	@ (801c17c <std+0x54>)
 801c152:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c154:	4b0a      	ldr	r3, [pc, #40]	@ (801c180 <std+0x58>)
 801c156:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c158:	4b0a      	ldr	r3, [pc, #40]	@ (801c184 <std+0x5c>)
 801c15a:	6323      	str	r3, [r4, #48]	@ 0x30
 801c15c:	4b0a      	ldr	r3, [pc, #40]	@ (801c188 <std+0x60>)
 801c15e:	429c      	cmp	r4, r3
 801c160:	d005      	beq.n	801c16e <std+0x46>
 801c162:	4b0a      	ldr	r3, [pc, #40]	@ (801c18c <std+0x64>)
 801c164:	429c      	cmp	r4, r3
 801c166:	d002      	beq.n	801c16e <std+0x46>
 801c168:	4b09      	ldr	r3, [pc, #36]	@ (801c190 <std+0x68>)
 801c16a:	429c      	cmp	r4, r3
 801c16c:	d103      	bne.n	801c176 <std+0x4e>
 801c16e:	0020      	movs	r0, r4
 801c170:	3058      	adds	r0, #88	@ 0x58
 801c172:	f000 fa1f 	bl	801c5b4 <__retarget_lock_init_recursive>
 801c176:	bd10      	pop	{r4, pc}
 801c178:	0801c311 	.word	0x0801c311
 801c17c:	0801c339 	.word	0x0801c339
 801c180:	0801c371 	.word	0x0801c371
 801c184:	0801c39d 	.word	0x0801c39d
 801c188:	20003774 	.word	0x20003774
 801c18c:	200037dc 	.word	0x200037dc
 801c190:	20003844 	.word	0x20003844

0801c194 <stdio_exit_handler>:
 801c194:	b510      	push	{r4, lr}
 801c196:	4a03      	ldr	r2, [pc, #12]	@ (801c1a4 <stdio_exit_handler+0x10>)
 801c198:	4903      	ldr	r1, [pc, #12]	@ (801c1a8 <stdio_exit_handler+0x14>)
 801c19a:	4804      	ldr	r0, [pc, #16]	@ (801c1ac <stdio_exit_handler+0x18>)
 801c19c:	f000 f86c 	bl	801c278 <_fwalk_sglue>
 801c1a0:	bd10      	pop	{r4, pc}
 801c1a2:	46c0      	nop			@ (mov r8, r8)
 801c1a4:	20000250 	.word	0x20000250
 801c1a8:	0801ebd9 	.word	0x0801ebd9
 801c1ac:	200003cc 	.word	0x200003cc

0801c1b0 <cleanup_stdio>:
 801c1b0:	6841      	ldr	r1, [r0, #4]
 801c1b2:	4b0b      	ldr	r3, [pc, #44]	@ (801c1e0 <cleanup_stdio+0x30>)
 801c1b4:	b510      	push	{r4, lr}
 801c1b6:	0004      	movs	r4, r0
 801c1b8:	4299      	cmp	r1, r3
 801c1ba:	d001      	beq.n	801c1c0 <cleanup_stdio+0x10>
 801c1bc:	f002 fd0c 	bl	801ebd8 <_fflush_r>
 801c1c0:	68a1      	ldr	r1, [r4, #8]
 801c1c2:	4b08      	ldr	r3, [pc, #32]	@ (801c1e4 <cleanup_stdio+0x34>)
 801c1c4:	4299      	cmp	r1, r3
 801c1c6:	d002      	beq.n	801c1ce <cleanup_stdio+0x1e>
 801c1c8:	0020      	movs	r0, r4
 801c1ca:	f002 fd05 	bl	801ebd8 <_fflush_r>
 801c1ce:	68e1      	ldr	r1, [r4, #12]
 801c1d0:	4b05      	ldr	r3, [pc, #20]	@ (801c1e8 <cleanup_stdio+0x38>)
 801c1d2:	4299      	cmp	r1, r3
 801c1d4:	d002      	beq.n	801c1dc <cleanup_stdio+0x2c>
 801c1d6:	0020      	movs	r0, r4
 801c1d8:	f002 fcfe 	bl	801ebd8 <_fflush_r>
 801c1dc:	bd10      	pop	{r4, pc}
 801c1de:	46c0      	nop			@ (mov r8, r8)
 801c1e0:	20003774 	.word	0x20003774
 801c1e4:	200037dc 	.word	0x200037dc
 801c1e8:	20003844 	.word	0x20003844

0801c1ec <global_stdio_init.part.0>:
 801c1ec:	b510      	push	{r4, lr}
 801c1ee:	4b09      	ldr	r3, [pc, #36]	@ (801c214 <global_stdio_init.part.0+0x28>)
 801c1f0:	4a09      	ldr	r2, [pc, #36]	@ (801c218 <global_stdio_init.part.0+0x2c>)
 801c1f2:	2104      	movs	r1, #4
 801c1f4:	601a      	str	r2, [r3, #0]
 801c1f6:	4809      	ldr	r0, [pc, #36]	@ (801c21c <global_stdio_init.part.0+0x30>)
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	f7ff ff95 	bl	801c128 <std>
 801c1fe:	2201      	movs	r2, #1
 801c200:	2109      	movs	r1, #9
 801c202:	4807      	ldr	r0, [pc, #28]	@ (801c220 <global_stdio_init.part.0+0x34>)
 801c204:	f7ff ff90 	bl	801c128 <std>
 801c208:	2202      	movs	r2, #2
 801c20a:	2112      	movs	r1, #18
 801c20c:	4805      	ldr	r0, [pc, #20]	@ (801c224 <global_stdio_init.part.0+0x38>)
 801c20e:	f7ff ff8b 	bl	801c128 <std>
 801c212:	bd10      	pop	{r4, pc}
 801c214:	200038ac 	.word	0x200038ac
 801c218:	0801c195 	.word	0x0801c195
 801c21c:	20003774 	.word	0x20003774
 801c220:	200037dc 	.word	0x200037dc
 801c224:	20003844 	.word	0x20003844

0801c228 <__sfp_lock_acquire>:
 801c228:	b510      	push	{r4, lr}
 801c22a:	4802      	ldr	r0, [pc, #8]	@ (801c234 <__sfp_lock_acquire+0xc>)
 801c22c:	f000 f9c3 	bl	801c5b6 <__retarget_lock_acquire_recursive>
 801c230:	bd10      	pop	{r4, pc}
 801c232:	46c0      	nop			@ (mov r8, r8)
 801c234:	200038b5 	.word	0x200038b5

0801c238 <__sfp_lock_release>:
 801c238:	b510      	push	{r4, lr}
 801c23a:	4802      	ldr	r0, [pc, #8]	@ (801c244 <__sfp_lock_release+0xc>)
 801c23c:	f000 f9bc 	bl	801c5b8 <__retarget_lock_release_recursive>
 801c240:	bd10      	pop	{r4, pc}
 801c242:	46c0      	nop			@ (mov r8, r8)
 801c244:	200038b5 	.word	0x200038b5

0801c248 <__sinit>:
 801c248:	b510      	push	{r4, lr}
 801c24a:	0004      	movs	r4, r0
 801c24c:	f7ff ffec 	bl	801c228 <__sfp_lock_acquire>
 801c250:	6a23      	ldr	r3, [r4, #32]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d002      	beq.n	801c25c <__sinit+0x14>
 801c256:	f7ff ffef 	bl	801c238 <__sfp_lock_release>
 801c25a:	bd10      	pop	{r4, pc}
 801c25c:	4b04      	ldr	r3, [pc, #16]	@ (801c270 <__sinit+0x28>)
 801c25e:	6223      	str	r3, [r4, #32]
 801c260:	4b04      	ldr	r3, [pc, #16]	@ (801c274 <__sinit+0x2c>)
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	2b00      	cmp	r3, #0
 801c266:	d1f6      	bne.n	801c256 <__sinit+0xe>
 801c268:	f7ff ffc0 	bl	801c1ec <global_stdio_init.part.0>
 801c26c:	e7f3      	b.n	801c256 <__sinit+0xe>
 801c26e:	46c0      	nop			@ (mov r8, r8)
 801c270:	0801c1b1 	.word	0x0801c1b1
 801c274:	200038ac 	.word	0x200038ac

0801c278 <_fwalk_sglue>:
 801c278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c27a:	0014      	movs	r4, r2
 801c27c:	2600      	movs	r6, #0
 801c27e:	9000      	str	r0, [sp, #0]
 801c280:	9101      	str	r1, [sp, #4]
 801c282:	68a5      	ldr	r5, [r4, #8]
 801c284:	6867      	ldr	r7, [r4, #4]
 801c286:	3f01      	subs	r7, #1
 801c288:	d504      	bpl.n	801c294 <_fwalk_sglue+0x1c>
 801c28a:	6824      	ldr	r4, [r4, #0]
 801c28c:	2c00      	cmp	r4, #0
 801c28e:	d1f8      	bne.n	801c282 <_fwalk_sglue+0xa>
 801c290:	0030      	movs	r0, r6
 801c292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c294:	89ab      	ldrh	r3, [r5, #12]
 801c296:	2b01      	cmp	r3, #1
 801c298:	d908      	bls.n	801c2ac <_fwalk_sglue+0x34>
 801c29a:	220e      	movs	r2, #14
 801c29c:	5eab      	ldrsh	r3, [r5, r2]
 801c29e:	3301      	adds	r3, #1
 801c2a0:	d004      	beq.n	801c2ac <_fwalk_sglue+0x34>
 801c2a2:	0029      	movs	r1, r5
 801c2a4:	9800      	ldr	r0, [sp, #0]
 801c2a6:	9b01      	ldr	r3, [sp, #4]
 801c2a8:	4798      	blx	r3
 801c2aa:	4306      	orrs	r6, r0
 801c2ac:	3568      	adds	r5, #104	@ 0x68
 801c2ae:	e7ea      	b.n	801c286 <_fwalk_sglue+0xe>

0801c2b0 <iprintf>:
 801c2b0:	b40f      	push	{r0, r1, r2, r3}
 801c2b2:	b507      	push	{r0, r1, r2, lr}
 801c2b4:	4905      	ldr	r1, [pc, #20]	@ (801c2cc <iprintf+0x1c>)
 801c2b6:	ab04      	add	r3, sp, #16
 801c2b8:	6808      	ldr	r0, [r1, #0]
 801c2ba:	cb04      	ldmia	r3!, {r2}
 801c2bc:	6881      	ldr	r1, [r0, #8]
 801c2be:	9301      	str	r3, [sp, #4]
 801c2c0:	f002 fae8 	bl	801e894 <_vfiprintf_r>
 801c2c4:	b003      	add	sp, #12
 801c2c6:	bc08      	pop	{r3}
 801c2c8:	b004      	add	sp, #16
 801c2ca:	4718      	bx	r3
 801c2cc:	200003c8 	.word	0x200003c8

0801c2d0 <siprintf>:
 801c2d0:	b40e      	push	{r1, r2, r3}
 801c2d2:	b500      	push	{lr}
 801c2d4:	490b      	ldr	r1, [pc, #44]	@ (801c304 <siprintf+0x34>)
 801c2d6:	b09c      	sub	sp, #112	@ 0x70
 801c2d8:	ab1d      	add	r3, sp, #116	@ 0x74
 801c2da:	9002      	str	r0, [sp, #8]
 801c2dc:	9006      	str	r0, [sp, #24]
 801c2de:	9107      	str	r1, [sp, #28]
 801c2e0:	9104      	str	r1, [sp, #16]
 801c2e2:	4809      	ldr	r0, [pc, #36]	@ (801c308 <siprintf+0x38>)
 801c2e4:	4909      	ldr	r1, [pc, #36]	@ (801c30c <siprintf+0x3c>)
 801c2e6:	cb04      	ldmia	r3!, {r2}
 801c2e8:	9105      	str	r1, [sp, #20]
 801c2ea:	6800      	ldr	r0, [r0, #0]
 801c2ec:	a902      	add	r1, sp, #8
 801c2ee:	9301      	str	r3, [sp, #4]
 801c2f0:	f002 f9aa 	bl	801e648 <_svfiprintf_r>
 801c2f4:	2200      	movs	r2, #0
 801c2f6:	9b02      	ldr	r3, [sp, #8]
 801c2f8:	701a      	strb	r2, [r3, #0]
 801c2fa:	b01c      	add	sp, #112	@ 0x70
 801c2fc:	bc08      	pop	{r3}
 801c2fe:	b003      	add	sp, #12
 801c300:	4718      	bx	r3
 801c302:	46c0      	nop			@ (mov r8, r8)
 801c304:	7fffffff 	.word	0x7fffffff
 801c308:	200003c8 	.word	0x200003c8
 801c30c:	ffff0208 	.word	0xffff0208

0801c310 <__sread>:
 801c310:	b570      	push	{r4, r5, r6, lr}
 801c312:	000c      	movs	r4, r1
 801c314:	250e      	movs	r5, #14
 801c316:	5f49      	ldrsh	r1, [r1, r5]
 801c318:	f000 f8fa 	bl	801c510 <_read_r>
 801c31c:	2800      	cmp	r0, #0
 801c31e:	db03      	blt.n	801c328 <__sread+0x18>
 801c320:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801c322:	181b      	adds	r3, r3, r0
 801c324:	6563      	str	r3, [r4, #84]	@ 0x54
 801c326:	bd70      	pop	{r4, r5, r6, pc}
 801c328:	89a3      	ldrh	r3, [r4, #12]
 801c32a:	4a02      	ldr	r2, [pc, #8]	@ (801c334 <__sread+0x24>)
 801c32c:	4013      	ands	r3, r2
 801c32e:	81a3      	strh	r3, [r4, #12]
 801c330:	e7f9      	b.n	801c326 <__sread+0x16>
 801c332:	46c0      	nop			@ (mov r8, r8)
 801c334:	ffffefff 	.word	0xffffefff

0801c338 <__swrite>:
 801c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c33a:	001f      	movs	r7, r3
 801c33c:	898b      	ldrh	r3, [r1, #12]
 801c33e:	0005      	movs	r5, r0
 801c340:	000c      	movs	r4, r1
 801c342:	0016      	movs	r6, r2
 801c344:	05db      	lsls	r3, r3, #23
 801c346:	d505      	bpl.n	801c354 <__swrite+0x1c>
 801c348:	230e      	movs	r3, #14
 801c34a:	5ec9      	ldrsh	r1, [r1, r3]
 801c34c:	2200      	movs	r2, #0
 801c34e:	2302      	movs	r3, #2
 801c350:	f000 f8ca 	bl	801c4e8 <_lseek_r>
 801c354:	89a3      	ldrh	r3, [r4, #12]
 801c356:	4a05      	ldr	r2, [pc, #20]	@ (801c36c <__swrite+0x34>)
 801c358:	0028      	movs	r0, r5
 801c35a:	4013      	ands	r3, r2
 801c35c:	81a3      	strh	r3, [r4, #12]
 801c35e:	0032      	movs	r2, r6
 801c360:	230e      	movs	r3, #14
 801c362:	5ee1      	ldrsh	r1, [r4, r3]
 801c364:	003b      	movs	r3, r7
 801c366:	f000 f8e7 	bl	801c538 <_write_r>
 801c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c36c:	ffffefff 	.word	0xffffefff

0801c370 <__sseek>:
 801c370:	b570      	push	{r4, r5, r6, lr}
 801c372:	000c      	movs	r4, r1
 801c374:	250e      	movs	r5, #14
 801c376:	5f49      	ldrsh	r1, [r1, r5]
 801c378:	f000 f8b6 	bl	801c4e8 <_lseek_r>
 801c37c:	89a3      	ldrh	r3, [r4, #12]
 801c37e:	1c42      	adds	r2, r0, #1
 801c380:	d103      	bne.n	801c38a <__sseek+0x1a>
 801c382:	4a05      	ldr	r2, [pc, #20]	@ (801c398 <__sseek+0x28>)
 801c384:	4013      	ands	r3, r2
 801c386:	81a3      	strh	r3, [r4, #12]
 801c388:	bd70      	pop	{r4, r5, r6, pc}
 801c38a:	2280      	movs	r2, #128	@ 0x80
 801c38c:	0152      	lsls	r2, r2, #5
 801c38e:	4313      	orrs	r3, r2
 801c390:	81a3      	strh	r3, [r4, #12]
 801c392:	6560      	str	r0, [r4, #84]	@ 0x54
 801c394:	e7f8      	b.n	801c388 <__sseek+0x18>
 801c396:	46c0      	nop			@ (mov r8, r8)
 801c398:	ffffefff 	.word	0xffffefff

0801c39c <__sclose>:
 801c39c:	b510      	push	{r4, lr}
 801c39e:	230e      	movs	r3, #14
 801c3a0:	5ec9      	ldrsh	r1, [r1, r3]
 801c3a2:	f000 f88f 	bl	801c4c4 <_close_r>
 801c3a6:	bd10      	pop	{r4, pc}

0801c3a8 <_vsniprintf_r>:
 801c3a8:	b530      	push	{r4, r5, lr}
 801c3aa:	0014      	movs	r4, r2
 801c3ac:	0005      	movs	r5, r0
 801c3ae:	001a      	movs	r2, r3
 801c3b0:	b09b      	sub	sp, #108	@ 0x6c
 801c3b2:	2c00      	cmp	r4, #0
 801c3b4:	da05      	bge.n	801c3c2 <_vsniprintf_r+0x1a>
 801c3b6:	238b      	movs	r3, #139	@ 0x8b
 801c3b8:	6003      	str	r3, [r0, #0]
 801c3ba:	2001      	movs	r0, #1
 801c3bc:	4240      	negs	r0, r0
 801c3be:	b01b      	add	sp, #108	@ 0x6c
 801c3c0:	bd30      	pop	{r4, r5, pc}
 801c3c2:	2382      	movs	r3, #130	@ 0x82
 801c3c4:	4668      	mov	r0, sp
 801c3c6:	009b      	lsls	r3, r3, #2
 801c3c8:	8183      	strh	r3, [r0, #12]
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	9100      	str	r1, [sp, #0]
 801c3ce:	9104      	str	r1, [sp, #16]
 801c3d0:	429c      	cmp	r4, r3
 801c3d2:	d000      	beq.n	801c3d6 <_vsniprintf_r+0x2e>
 801c3d4:	1e63      	subs	r3, r4, #1
 801c3d6:	9302      	str	r3, [sp, #8]
 801c3d8:	9305      	str	r3, [sp, #20]
 801c3da:	2301      	movs	r3, #1
 801c3dc:	4669      	mov	r1, sp
 801c3de:	425b      	negs	r3, r3
 801c3e0:	81cb      	strh	r3, [r1, #14]
 801c3e2:	0028      	movs	r0, r5
 801c3e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c3e6:	f002 f92f 	bl	801e648 <_svfiprintf_r>
 801c3ea:	1c43      	adds	r3, r0, #1
 801c3ec:	da01      	bge.n	801c3f2 <_vsniprintf_r+0x4a>
 801c3ee:	238b      	movs	r3, #139	@ 0x8b
 801c3f0:	602b      	str	r3, [r5, #0]
 801c3f2:	2c00      	cmp	r4, #0
 801c3f4:	d0e3      	beq.n	801c3be <_vsniprintf_r+0x16>
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	9b00      	ldr	r3, [sp, #0]
 801c3fa:	701a      	strb	r2, [r3, #0]
 801c3fc:	e7df      	b.n	801c3be <_vsniprintf_r+0x16>
	...

0801c400 <vsniprintf>:
 801c400:	b513      	push	{r0, r1, r4, lr}
 801c402:	4c04      	ldr	r4, [pc, #16]	@ (801c414 <vsniprintf+0x14>)
 801c404:	9300      	str	r3, [sp, #0]
 801c406:	0013      	movs	r3, r2
 801c408:	000a      	movs	r2, r1
 801c40a:	0001      	movs	r1, r0
 801c40c:	6820      	ldr	r0, [r4, #0]
 801c40e:	f7ff ffcb 	bl	801c3a8 <_vsniprintf_r>
 801c412:	bd16      	pop	{r1, r2, r4, pc}
 801c414:	200003c8 	.word	0x200003c8

0801c418 <memset>:
 801c418:	0003      	movs	r3, r0
 801c41a:	1882      	adds	r2, r0, r2
 801c41c:	4293      	cmp	r3, r2
 801c41e:	d100      	bne.n	801c422 <memset+0xa>
 801c420:	4770      	bx	lr
 801c422:	7019      	strb	r1, [r3, #0]
 801c424:	3301      	adds	r3, #1
 801c426:	e7f9      	b.n	801c41c <memset+0x4>

0801c428 <strchr>:
 801c428:	b2c9      	uxtb	r1, r1
 801c42a:	7803      	ldrb	r3, [r0, #0]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d004      	beq.n	801c43a <strchr+0x12>
 801c430:	428b      	cmp	r3, r1
 801c432:	d100      	bne.n	801c436 <strchr+0xe>
 801c434:	4770      	bx	lr
 801c436:	3001      	adds	r0, #1
 801c438:	e7f7      	b.n	801c42a <strchr+0x2>
 801c43a:	424b      	negs	r3, r1
 801c43c:	4159      	adcs	r1, r3
 801c43e:	4249      	negs	r1, r1
 801c440:	4008      	ands	r0, r1
 801c442:	e7f7      	b.n	801c434 <strchr+0xc>

0801c444 <strncmp>:
 801c444:	b530      	push	{r4, r5, lr}
 801c446:	0005      	movs	r5, r0
 801c448:	1e10      	subs	r0, r2, #0
 801c44a:	d00b      	beq.n	801c464 <strncmp+0x20>
 801c44c:	2400      	movs	r4, #0
 801c44e:	3a01      	subs	r2, #1
 801c450:	5d2b      	ldrb	r3, [r5, r4]
 801c452:	5d08      	ldrb	r0, [r1, r4]
 801c454:	4283      	cmp	r3, r0
 801c456:	d104      	bne.n	801c462 <strncmp+0x1e>
 801c458:	42a2      	cmp	r2, r4
 801c45a:	d002      	beq.n	801c462 <strncmp+0x1e>
 801c45c:	3401      	adds	r4, #1
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d1f6      	bne.n	801c450 <strncmp+0xc>
 801c462:	1a18      	subs	r0, r3, r0
 801c464:	bd30      	pop	{r4, r5, pc}

0801c466 <strncpy>:
 801c466:	0003      	movs	r3, r0
 801c468:	b530      	push	{r4, r5, lr}
 801c46a:	001d      	movs	r5, r3
 801c46c:	2a00      	cmp	r2, #0
 801c46e:	d006      	beq.n	801c47e <strncpy+0x18>
 801c470:	780c      	ldrb	r4, [r1, #0]
 801c472:	3a01      	subs	r2, #1
 801c474:	3301      	adds	r3, #1
 801c476:	702c      	strb	r4, [r5, #0]
 801c478:	3101      	adds	r1, #1
 801c47a:	2c00      	cmp	r4, #0
 801c47c:	d1f5      	bne.n	801c46a <strncpy+0x4>
 801c47e:	2100      	movs	r1, #0
 801c480:	189a      	adds	r2, r3, r2
 801c482:	4293      	cmp	r3, r2
 801c484:	d100      	bne.n	801c488 <strncpy+0x22>
 801c486:	bd30      	pop	{r4, r5, pc}
 801c488:	7019      	strb	r1, [r3, #0]
 801c48a:	3301      	adds	r3, #1
 801c48c:	e7f9      	b.n	801c482 <strncpy+0x1c>

0801c48e <strstr>:
 801c48e:	780a      	ldrb	r2, [r1, #0]
 801c490:	b530      	push	{r4, r5, lr}
 801c492:	2a00      	cmp	r2, #0
 801c494:	d10c      	bne.n	801c4b0 <strstr+0x22>
 801c496:	bd30      	pop	{r4, r5, pc}
 801c498:	429a      	cmp	r2, r3
 801c49a:	d108      	bne.n	801c4ae <strstr+0x20>
 801c49c:	2301      	movs	r3, #1
 801c49e:	5ccc      	ldrb	r4, [r1, r3]
 801c4a0:	2c00      	cmp	r4, #0
 801c4a2:	d0f8      	beq.n	801c496 <strstr+0x8>
 801c4a4:	5cc5      	ldrb	r5, [r0, r3]
 801c4a6:	42a5      	cmp	r5, r4
 801c4a8:	d101      	bne.n	801c4ae <strstr+0x20>
 801c4aa:	3301      	adds	r3, #1
 801c4ac:	e7f7      	b.n	801c49e <strstr+0x10>
 801c4ae:	3001      	adds	r0, #1
 801c4b0:	7803      	ldrb	r3, [r0, #0]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d1f0      	bne.n	801c498 <strstr+0xa>
 801c4b6:	0018      	movs	r0, r3
 801c4b8:	e7ed      	b.n	801c496 <strstr+0x8>
	...

0801c4bc <_localeconv_r>:
 801c4bc:	4800      	ldr	r0, [pc, #0]	@ (801c4c0 <_localeconv_r+0x4>)
 801c4be:	4770      	bx	lr
 801c4c0:	2000034c 	.word	0x2000034c

0801c4c4 <_close_r>:
 801c4c4:	2300      	movs	r3, #0
 801c4c6:	b570      	push	{r4, r5, r6, lr}
 801c4c8:	4d06      	ldr	r5, [pc, #24]	@ (801c4e4 <_close_r+0x20>)
 801c4ca:	0004      	movs	r4, r0
 801c4cc:	0008      	movs	r0, r1
 801c4ce:	602b      	str	r3, [r5, #0]
 801c4d0:	f7ee fc6c 	bl	800adac <_close>
 801c4d4:	1c43      	adds	r3, r0, #1
 801c4d6:	d103      	bne.n	801c4e0 <_close_r+0x1c>
 801c4d8:	682b      	ldr	r3, [r5, #0]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d000      	beq.n	801c4e0 <_close_r+0x1c>
 801c4de:	6023      	str	r3, [r4, #0]
 801c4e0:	bd70      	pop	{r4, r5, r6, pc}
 801c4e2:	46c0      	nop			@ (mov r8, r8)
 801c4e4:	200038b0 	.word	0x200038b0

0801c4e8 <_lseek_r>:
 801c4e8:	b570      	push	{r4, r5, r6, lr}
 801c4ea:	0004      	movs	r4, r0
 801c4ec:	0008      	movs	r0, r1
 801c4ee:	0011      	movs	r1, r2
 801c4f0:	001a      	movs	r2, r3
 801c4f2:	2300      	movs	r3, #0
 801c4f4:	4d05      	ldr	r5, [pc, #20]	@ (801c50c <_lseek_r+0x24>)
 801c4f6:	602b      	str	r3, [r5, #0]
 801c4f8:	f7ee fc79 	bl	800adee <_lseek>
 801c4fc:	1c43      	adds	r3, r0, #1
 801c4fe:	d103      	bne.n	801c508 <_lseek_r+0x20>
 801c500:	682b      	ldr	r3, [r5, #0]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d000      	beq.n	801c508 <_lseek_r+0x20>
 801c506:	6023      	str	r3, [r4, #0]
 801c508:	bd70      	pop	{r4, r5, r6, pc}
 801c50a:	46c0      	nop			@ (mov r8, r8)
 801c50c:	200038b0 	.word	0x200038b0

0801c510 <_read_r>:
 801c510:	b570      	push	{r4, r5, r6, lr}
 801c512:	0004      	movs	r4, r0
 801c514:	0008      	movs	r0, r1
 801c516:	0011      	movs	r1, r2
 801c518:	001a      	movs	r2, r3
 801c51a:	2300      	movs	r3, #0
 801c51c:	4d05      	ldr	r5, [pc, #20]	@ (801c534 <_read_r+0x24>)
 801c51e:	602b      	str	r3, [r5, #0]
 801c520:	f7ee fc27 	bl	800ad72 <_read>
 801c524:	1c43      	adds	r3, r0, #1
 801c526:	d103      	bne.n	801c530 <_read_r+0x20>
 801c528:	682b      	ldr	r3, [r5, #0]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d000      	beq.n	801c530 <_read_r+0x20>
 801c52e:	6023      	str	r3, [r4, #0]
 801c530:	bd70      	pop	{r4, r5, r6, pc}
 801c532:	46c0      	nop			@ (mov r8, r8)
 801c534:	200038b0 	.word	0x200038b0

0801c538 <_write_r>:
 801c538:	b570      	push	{r4, r5, r6, lr}
 801c53a:	0004      	movs	r4, r0
 801c53c:	0008      	movs	r0, r1
 801c53e:	0011      	movs	r1, r2
 801c540:	001a      	movs	r2, r3
 801c542:	2300      	movs	r3, #0
 801c544:	4d05      	ldr	r5, [pc, #20]	@ (801c55c <_write_r+0x24>)
 801c546:	602b      	str	r3, [r5, #0]
 801c548:	f7ef f8e0 	bl	800b70c <_write>
 801c54c:	1c43      	adds	r3, r0, #1
 801c54e:	d103      	bne.n	801c558 <_write_r+0x20>
 801c550:	682b      	ldr	r3, [r5, #0]
 801c552:	2b00      	cmp	r3, #0
 801c554:	d000      	beq.n	801c558 <_write_r+0x20>
 801c556:	6023      	str	r3, [r4, #0]
 801c558:	bd70      	pop	{r4, r5, r6, pc}
 801c55a:	46c0      	nop			@ (mov r8, r8)
 801c55c:	200038b0 	.word	0x200038b0

0801c560 <__errno>:
 801c560:	4b01      	ldr	r3, [pc, #4]	@ (801c568 <__errno+0x8>)
 801c562:	6818      	ldr	r0, [r3, #0]
 801c564:	4770      	bx	lr
 801c566:	46c0      	nop			@ (mov r8, r8)
 801c568:	200003c8 	.word	0x200003c8

0801c56c <__libc_init_array>:
 801c56c:	b570      	push	{r4, r5, r6, lr}
 801c56e:	2600      	movs	r6, #0
 801c570:	4c0c      	ldr	r4, [pc, #48]	@ (801c5a4 <__libc_init_array+0x38>)
 801c572:	4d0d      	ldr	r5, [pc, #52]	@ (801c5a8 <__libc_init_array+0x3c>)
 801c574:	1b64      	subs	r4, r4, r5
 801c576:	10a4      	asrs	r4, r4, #2
 801c578:	42a6      	cmp	r6, r4
 801c57a:	d109      	bne.n	801c590 <__libc_init_array+0x24>
 801c57c:	2600      	movs	r6, #0
 801c57e:	f002 ff8b 	bl	801f498 <_init>
 801c582:	4c0a      	ldr	r4, [pc, #40]	@ (801c5ac <__libc_init_array+0x40>)
 801c584:	4d0a      	ldr	r5, [pc, #40]	@ (801c5b0 <__libc_init_array+0x44>)
 801c586:	1b64      	subs	r4, r4, r5
 801c588:	10a4      	asrs	r4, r4, #2
 801c58a:	42a6      	cmp	r6, r4
 801c58c:	d105      	bne.n	801c59a <__libc_init_array+0x2e>
 801c58e:	bd70      	pop	{r4, r5, r6, pc}
 801c590:	00b3      	lsls	r3, r6, #2
 801c592:	58eb      	ldr	r3, [r5, r3]
 801c594:	4798      	blx	r3
 801c596:	3601      	adds	r6, #1
 801c598:	e7ee      	b.n	801c578 <__libc_init_array+0xc>
 801c59a:	00b3      	lsls	r3, r6, #2
 801c59c:	58eb      	ldr	r3, [r5, r3]
 801c59e:	4798      	blx	r3
 801c5a0:	3601      	adds	r6, #1
 801c5a2:	e7f2      	b.n	801c58a <__libc_init_array+0x1e>
 801c5a4:	08021220 	.word	0x08021220
 801c5a8:	08021220 	.word	0x08021220
 801c5ac:	08021224 	.word	0x08021224
 801c5b0:	08021220 	.word	0x08021220

0801c5b4 <__retarget_lock_init_recursive>:
 801c5b4:	4770      	bx	lr

0801c5b6 <__retarget_lock_acquire_recursive>:
 801c5b6:	4770      	bx	lr

0801c5b8 <__retarget_lock_release_recursive>:
 801c5b8:	4770      	bx	lr

0801c5ba <memchr>:
 801c5ba:	b2c9      	uxtb	r1, r1
 801c5bc:	1882      	adds	r2, r0, r2
 801c5be:	4290      	cmp	r0, r2
 801c5c0:	d101      	bne.n	801c5c6 <memchr+0xc>
 801c5c2:	2000      	movs	r0, #0
 801c5c4:	4770      	bx	lr
 801c5c6:	7803      	ldrb	r3, [r0, #0]
 801c5c8:	428b      	cmp	r3, r1
 801c5ca:	d0fb      	beq.n	801c5c4 <memchr+0xa>
 801c5cc:	3001      	adds	r0, #1
 801c5ce:	e7f6      	b.n	801c5be <memchr+0x4>

0801c5d0 <memcpy>:
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	b510      	push	{r4, lr}
 801c5d4:	429a      	cmp	r2, r3
 801c5d6:	d100      	bne.n	801c5da <memcpy+0xa>
 801c5d8:	bd10      	pop	{r4, pc}
 801c5da:	5ccc      	ldrb	r4, [r1, r3]
 801c5dc:	54c4      	strb	r4, [r0, r3]
 801c5de:	3301      	adds	r3, #1
 801c5e0:	e7f8      	b.n	801c5d4 <memcpy+0x4>
	...

0801c5e4 <nan>:
 801c5e4:	2000      	movs	r0, #0
 801c5e6:	4901      	ldr	r1, [pc, #4]	@ (801c5ec <nan+0x8>)
 801c5e8:	4770      	bx	lr
 801c5ea:	46c0      	nop			@ (mov r8, r8)
 801c5ec:	7ff80000 	.word	0x7ff80000

0801c5f0 <quorem>:
 801c5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5f2:	6902      	ldr	r2, [r0, #16]
 801c5f4:	690f      	ldr	r7, [r1, #16]
 801c5f6:	b087      	sub	sp, #28
 801c5f8:	0006      	movs	r6, r0
 801c5fa:	000b      	movs	r3, r1
 801c5fc:	2000      	movs	r0, #0
 801c5fe:	9102      	str	r1, [sp, #8]
 801c600:	42ba      	cmp	r2, r7
 801c602:	db6d      	blt.n	801c6e0 <quorem+0xf0>
 801c604:	3f01      	subs	r7, #1
 801c606:	00bc      	lsls	r4, r7, #2
 801c608:	3314      	adds	r3, #20
 801c60a:	9305      	str	r3, [sp, #20]
 801c60c:	191b      	adds	r3, r3, r4
 801c60e:	9303      	str	r3, [sp, #12]
 801c610:	0033      	movs	r3, r6
 801c612:	3314      	adds	r3, #20
 801c614:	191c      	adds	r4, r3, r4
 801c616:	9301      	str	r3, [sp, #4]
 801c618:	6823      	ldr	r3, [r4, #0]
 801c61a:	9304      	str	r3, [sp, #16]
 801c61c:	9b03      	ldr	r3, [sp, #12]
 801c61e:	9804      	ldr	r0, [sp, #16]
 801c620:	681d      	ldr	r5, [r3, #0]
 801c622:	3501      	adds	r5, #1
 801c624:	0029      	movs	r1, r5
 801c626:	f7e3 fdbd 	bl	80001a4 <__udivsi3>
 801c62a:	9b04      	ldr	r3, [sp, #16]
 801c62c:	9000      	str	r0, [sp, #0]
 801c62e:	42ab      	cmp	r3, r5
 801c630:	d32b      	bcc.n	801c68a <quorem+0x9a>
 801c632:	9b05      	ldr	r3, [sp, #20]
 801c634:	9d01      	ldr	r5, [sp, #4]
 801c636:	469c      	mov	ip, r3
 801c638:	2300      	movs	r3, #0
 801c63a:	9305      	str	r3, [sp, #20]
 801c63c:	9304      	str	r3, [sp, #16]
 801c63e:	4662      	mov	r2, ip
 801c640:	ca08      	ldmia	r2!, {r3}
 801c642:	6828      	ldr	r0, [r5, #0]
 801c644:	4694      	mov	ip, r2
 801c646:	9a00      	ldr	r2, [sp, #0]
 801c648:	b299      	uxth	r1, r3
 801c64a:	4351      	muls	r1, r2
 801c64c:	9a05      	ldr	r2, [sp, #20]
 801c64e:	0c1b      	lsrs	r3, r3, #16
 801c650:	1889      	adds	r1, r1, r2
 801c652:	9a00      	ldr	r2, [sp, #0]
 801c654:	4353      	muls	r3, r2
 801c656:	0c0a      	lsrs	r2, r1, #16
 801c658:	189b      	adds	r3, r3, r2
 801c65a:	0c1a      	lsrs	r2, r3, #16
 801c65c:	b289      	uxth	r1, r1
 801c65e:	9205      	str	r2, [sp, #20]
 801c660:	b282      	uxth	r2, r0
 801c662:	1a52      	subs	r2, r2, r1
 801c664:	9904      	ldr	r1, [sp, #16]
 801c666:	0c00      	lsrs	r0, r0, #16
 801c668:	1852      	adds	r2, r2, r1
 801c66a:	b29b      	uxth	r3, r3
 801c66c:	1411      	asrs	r1, r2, #16
 801c66e:	1ac3      	subs	r3, r0, r3
 801c670:	185b      	adds	r3, r3, r1
 801c672:	1419      	asrs	r1, r3, #16
 801c674:	b292      	uxth	r2, r2
 801c676:	041b      	lsls	r3, r3, #16
 801c678:	431a      	orrs	r2, r3
 801c67a:	9b03      	ldr	r3, [sp, #12]
 801c67c:	9104      	str	r1, [sp, #16]
 801c67e:	c504      	stmia	r5!, {r2}
 801c680:	4563      	cmp	r3, ip
 801c682:	d2dc      	bcs.n	801c63e <quorem+0x4e>
 801c684:	6823      	ldr	r3, [r4, #0]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d030      	beq.n	801c6ec <quorem+0xfc>
 801c68a:	0030      	movs	r0, r6
 801c68c:	9902      	ldr	r1, [sp, #8]
 801c68e:	f001 fd7d 	bl	801e18c <__mcmp>
 801c692:	2800      	cmp	r0, #0
 801c694:	db23      	blt.n	801c6de <quorem+0xee>
 801c696:	0034      	movs	r4, r6
 801c698:	2500      	movs	r5, #0
 801c69a:	9902      	ldr	r1, [sp, #8]
 801c69c:	3414      	adds	r4, #20
 801c69e:	3114      	adds	r1, #20
 801c6a0:	6823      	ldr	r3, [r4, #0]
 801c6a2:	c901      	ldmia	r1!, {r0}
 801c6a4:	9302      	str	r3, [sp, #8]
 801c6a6:	466b      	mov	r3, sp
 801c6a8:	891b      	ldrh	r3, [r3, #8]
 801c6aa:	b282      	uxth	r2, r0
 801c6ac:	1a9a      	subs	r2, r3, r2
 801c6ae:	9b02      	ldr	r3, [sp, #8]
 801c6b0:	1952      	adds	r2, r2, r5
 801c6b2:	0c00      	lsrs	r0, r0, #16
 801c6b4:	0c1b      	lsrs	r3, r3, #16
 801c6b6:	1a1b      	subs	r3, r3, r0
 801c6b8:	1410      	asrs	r0, r2, #16
 801c6ba:	181b      	adds	r3, r3, r0
 801c6bc:	141d      	asrs	r5, r3, #16
 801c6be:	b292      	uxth	r2, r2
 801c6c0:	041b      	lsls	r3, r3, #16
 801c6c2:	431a      	orrs	r2, r3
 801c6c4:	9b03      	ldr	r3, [sp, #12]
 801c6c6:	c404      	stmia	r4!, {r2}
 801c6c8:	428b      	cmp	r3, r1
 801c6ca:	d2e9      	bcs.n	801c6a0 <quorem+0xb0>
 801c6cc:	9a01      	ldr	r2, [sp, #4]
 801c6ce:	00bb      	lsls	r3, r7, #2
 801c6d0:	18d3      	adds	r3, r2, r3
 801c6d2:	681a      	ldr	r2, [r3, #0]
 801c6d4:	2a00      	cmp	r2, #0
 801c6d6:	d013      	beq.n	801c700 <quorem+0x110>
 801c6d8:	9b00      	ldr	r3, [sp, #0]
 801c6da:	3301      	adds	r3, #1
 801c6dc:	9300      	str	r3, [sp, #0]
 801c6de:	9800      	ldr	r0, [sp, #0]
 801c6e0:	b007      	add	sp, #28
 801c6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6e4:	6823      	ldr	r3, [r4, #0]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d104      	bne.n	801c6f4 <quorem+0x104>
 801c6ea:	3f01      	subs	r7, #1
 801c6ec:	9b01      	ldr	r3, [sp, #4]
 801c6ee:	3c04      	subs	r4, #4
 801c6f0:	42a3      	cmp	r3, r4
 801c6f2:	d3f7      	bcc.n	801c6e4 <quorem+0xf4>
 801c6f4:	6137      	str	r7, [r6, #16]
 801c6f6:	e7c8      	b.n	801c68a <quorem+0x9a>
 801c6f8:	681a      	ldr	r2, [r3, #0]
 801c6fa:	2a00      	cmp	r2, #0
 801c6fc:	d104      	bne.n	801c708 <quorem+0x118>
 801c6fe:	3f01      	subs	r7, #1
 801c700:	9a01      	ldr	r2, [sp, #4]
 801c702:	3b04      	subs	r3, #4
 801c704:	429a      	cmp	r2, r3
 801c706:	d3f7      	bcc.n	801c6f8 <quorem+0x108>
 801c708:	6137      	str	r7, [r6, #16]
 801c70a:	e7e5      	b.n	801c6d8 <quorem+0xe8>

0801c70c <_dtoa_r>:
 801c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c70e:	0014      	movs	r4, r2
 801c710:	001d      	movs	r5, r3
 801c712:	69c6      	ldr	r6, [r0, #28]
 801c714:	b09d      	sub	sp, #116	@ 0x74
 801c716:	940a      	str	r4, [sp, #40]	@ 0x28
 801c718:	950b      	str	r5, [sp, #44]	@ 0x2c
 801c71a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801c71c:	9003      	str	r0, [sp, #12]
 801c71e:	2e00      	cmp	r6, #0
 801c720:	d10f      	bne.n	801c742 <_dtoa_r+0x36>
 801c722:	2010      	movs	r0, #16
 801c724:	f001 f98a 	bl	801da3c <malloc>
 801c728:	9b03      	ldr	r3, [sp, #12]
 801c72a:	1e02      	subs	r2, r0, #0
 801c72c:	61d8      	str	r0, [r3, #28]
 801c72e:	d104      	bne.n	801c73a <_dtoa_r+0x2e>
 801c730:	21ef      	movs	r1, #239	@ 0xef
 801c732:	4bc7      	ldr	r3, [pc, #796]	@ (801ca50 <_dtoa_r+0x344>)
 801c734:	48c7      	ldr	r0, [pc, #796]	@ (801ca54 <_dtoa_r+0x348>)
 801c736:	f002 fb41 	bl	801edbc <__assert_func>
 801c73a:	6046      	str	r6, [r0, #4]
 801c73c:	6086      	str	r6, [r0, #8]
 801c73e:	6006      	str	r6, [r0, #0]
 801c740:	60c6      	str	r6, [r0, #12]
 801c742:	9b03      	ldr	r3, [sp, #12]
 801c744:	69db      	ldr	r3, [r3, #28]
 801c746:	6819      	ldr	r1, [r3, #0]
 801c748:	2900      	cmp	r1, #0
 801c74a:	d00b      	beq.n	801c764 <_dtoa_r+0x58>
 801c74c:	685a      	ldr	r2, [r3, #4]
 801c74e:	2301      	movs	r3, #1
 801c750:	4093      	lsls	r3, r2
 801c752:	604a      	str	r2, [r1, #4]
 801c754:	608b      	str	r3, [r1, #8]
 801c756:	9803      	ldr	r0, [sp, #12]
 801c758:	f001 fa82 	bl	801dc60 <_Bfree>
 801c75c:	2200      	movs	r2, #0
 801c75e:	9b03      	ldr	r3, [sp, #12]
 801c760:	69db      	ldr	r3, [r3, #28]
 801c762:	601a      	str	r2, [r3, #0]
 801c764:	2d00      	cmp	r5, #0
 801c766:	da1e      	bge.n	801c7a6 <_dtoa_r+0x9a>
 801c768:	2301      	movs	r3, #1
 801c76a:	603b      	str	r3, [r7, #0]
 801c76c:	006b      	lsls	r3, r5, #1
 801c76e:	085b      	lsrs	r3, r3, #1
 801c770:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c772:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c774:	4bb8      	ldr	r3, [pc, #736]	@ (801ca58 <_dtoa_r+0x34c>)
 801c776:	4ab8      	ldr	r2, [pc, #736]	@ (801ca58 <_dtoa_r+0x34c>)
 801c778:	403b      	ands	r3, r7
 801c77a:	4293      	cmp	r3, r2
 801c77c:	d116      	bne.n	801c7ac <_dtoa_r+0xa0>
 801c77e:	4bb7      	ldr	r3, [pc, #732]	@ (801ca5c <_dtoa_r+0x350>)
 801c780:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c782:	6013      	str	r3, [r2, #0]
 801c784:	033b      	lsls	r3, r7, #12
 801c786:	0b1b      	lsrs	r3, r3, #12
 801c788:	4323      	orrs	r3, r4
 801c78a:	d101      	bne.n	801c790 <_dtoa_r+0x84>
 801c78c:	f000 fd83 	bl	801d296 <_dtoa_r+0xb8a>
 801c790:	4bb3      	ldr	r3, [pc, #716]	@ (801ca60 <_dtoa_r+0x354>)
 801c792:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c794:	9308      	str	r3, [sp, #32]
 801c796:	2a00      	cmp	r2, #0
 801c798:	d002      	beq.n	801c7a0 <_dtoa_r+0x94>
 801c79a:	4bb2      	ldr	r3, [pc, #712]	@ (801ca64 <_dtoa_r+0x358>)
 801c79c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c79e:	6013      	str	r3, [r2, #0]
 801c7a0:	9808      	ldr	r0, [sp, #32]
 801c7a2:	b01d      	add	sp, #116	@ 0x74
 801c7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	603b      	str	r3, [r7, #0]
 801c7aa:	e7e2      	b.n	801c772 <_dtoa_r+0x66>
 801c7ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c7b0:	9212      	str	r2, [sp, #72]	@ 0x48
 801c7b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c7b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c7b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c7b8:	2200      	movs	r2, #0
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	f7e3 fe78 	bl	80004b0 <__aeabi_dcmpeq>
 801c7c0:	1e06      	subs	r6, r0, #0
 801c7c2:	d00b      	beq.n	801c7dc <_dtoa_r+0xd0>
 801c7c4:	2301      	movs	r3, #1
 801c7c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c7c8:	6013      	str	r3, [r2, #0]
 801c7ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d002      	beq.n	801c7d6 <_dtoa_r+0xca>
 801c7d0:	4ba5      	ldr	r3, [pc, #660]	@ (801ca68 <_dtoa_r+0x35c>)
 801c7d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c7d4:	6013      	str	r3, [r2, #0]
 801c7d6:	4ba5      	ldr	r3, [pc, #660]	@ (801ca6c <_dtoa_r+0x360>)
 801c7d8:	9308      	str	r3, [sp, #32]
 801c7da:	e7e1      	b.n	801c7a0 <_dtoa_r+0x94>
 801c7dc:	ab1a      	add	r3, sp, #104	@ 0x68
 801c7de:	9301      	str	r3, [sp, #4]
 801c7e0:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c7e2:	9300      	str	r3, [sp, #0]
 801c7e4:	9803      	ldr	r0, [sp, #12]
 801c7e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c7e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c7ea:	f001 fdf1 	bl	801e3d0 <__d2b>
 801c7ee:	007a      	lsls	r2, r7, #1
 801c7f0:	9005      	str	r0, [sp, #20]
 801c7f2:	0d52      	lsrs	r2, r2, #21
 801c7f4:	d100      	bne.n	801c7f8 <_dtoa_r+0xec>
 801c7f6:	e07b      	b.n	801c8f0 <_dtoa_r+0x1e4>
 801c7f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c7fa:	9618      	str	r6, [sp, #96]	@ 0x60
 801c7fc:	0319      	lsls	r1, r3, #12
 801c7fe:	4b9c      	ldr	r3, [pc, #624]	@ (801ca70 <_dtoa_r+0x364>)
 801c800:	0b09      	lsrs	r1, r1, #12
 801c802:	430b      	orrs	r3, r1
 801c804:	499b      	ldr	r1, [pc, #620]	@ (801ca74 <_dtoa_r+0x368>)
 801c806:	1857      	adds	r7, r2, r1
 801c808:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c80a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c80c:	0019      	movs	r1, r3
 801c80e:	2200      	movs	r2, #0
 801c810:	4b99      	ldr	r3, [pc, #612]	@ (801ca78 <_dtoa_r+0x36c>)
 801c812:	f7e6 f9db 	bl	8002bcc <__aeabi_dsub>
 801c816:	4a99      	ldr	r2, [pc, #612]	@ (801ca7c <_dtoa_r+0x370>)
 801c818:	4b99      	ldr	r3, [pc, #612]	@ (801ca80 <_dtoa_r+0x374>)
 801c81a:	f7e5 ff0f 	bl	800263c <__aeabi_dmul>
 801c81e:	4a99      	ldr	r2, [pc, #612]	@ (801ca84 <_dtoa_r+0x378>)
 801c820:	4b99      	ldr	r3, [pc, #612]	@ (801ca88 <_dtoa_r+0x37c>)
 801c822:	f7e4 ff63 	bl	80016ec <__aeabi_dadd>
 801c826:	0004      	movs	r4, r0
 801c828:	0038      	movs	r0, r7
 801c82a:	000d      	movs	r5, r1
 801c82c:	f7e6 fdc8 	bl	80033c0 <__aeabi_i2d>
 801c830:	4a96      	ldr	r2, [pc, #600]	@ (801ca8c <_dtoa_r+0x380>)
 801c832:	4b97      	ldr	r3, [pc, #604]	@ (801ca90 <_dtoa_r+0x384>)
 801c834:	f7e5 ff02 	bl	800263c <__aeabi_dmul>
 801c838:	0002      	movs	r2, r0
 801c83a:	000b      	movs	r3, r1
 801c83c:	0020      	movs	r0, r4
 801c83e:	0029      	movs	r1, r5
 801c840:	f7e4 ff54 	bl	80016ec <__aeabi_dadd>
 801c844:	0004      	movs	r4, r0
 801c846:	000d      	movs	r5, r1
 801c848:	f7e6 fd7e 	bl	8003348 <__aeabi_d2iz>
 801c84c:	2200      	movs	r2, #0
 801c84e:	9004      	str	r0, [sp, #16]
 801c850:	2300      	movs	r3, #0
 801c852:	0020      	movs	r0, r4
 801c854:	0029      	movs	r1, r5
 801c856:	f7e3 fe31 	bl	80004bc <__aeabi_dcmplt>
 801c85a:	2800      	cmp	r0, #0
 801c85c:	d00b      	beq.n	801c876 <_dtoa_r+0x16a>
 801c85e:	9804      	ldr	r0, [sp, #16]
 801c860:	f7e6 fdae 	bl	80033c0 <__aeabi_i2d>
 801c864:	002b      	movs	r3, r5
 801c866:	0022      	movs	r2, r4
 801c868:	f7e3 fe22 	bl	80004b0 <__aeabi_dcmpeq>
 801c86c:	4243      	negs	r3, r0
 801c86e:	4158      	adcs	r0, r3
 801c870:	9b04      	ldr	r3, [sp, #16]
 801c872:	1a1b      	subs	r3, r3, r0
 801c874:	9304      	str	r3, [sp, #16]
 801c876:	2301      	movs	r3, #1
 801c878:	9315      	str	r3, [sp, #84]	@ 0x54
 801c87a:	9b04      	ldr	r3, [sp, #16]
 801c87c:	2b16      	cmp	r3, #22
 801c87e:	d810      	bhi.n	801c8a2 <_dtoa_r+0x196>
 801c880:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c882:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c884:	9a04      	ldr	r2, [sp, #16]
 801c886:	4b83      	ldr	r3, [pc, #524]	@ (801ca94 <_dtoa_r+0x388>)
 801c888:	00d2      	lsls	r2, r2, #3
 801c88a:	189b      	adds	r3, r3, r2
 801c88c:	681a      	ldr	r2, [r3, #0]
 801c88e:	685b      	ldr	r3, [r3, #4]
 801c890:	f7e3 fe14 	bl	80004bc <__aeabi_dcmplt>
 801c894:	2800      	cmp	r0, #0
 801c896:	d047      	beq.n	801c928 <_dtoa_r+0x21c>
 801c898:	9b04      	ldr	r3, [sp, #16]
 801c89a:	3b01      	subs	r3, #1
 801c89c:	9304      	str	r3, [sp, #16]
 801c89e:	2300      	movs	r3, #0
 801c8a0:	9315      	str	r3, [sp, #84]	@ 0x54
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c8a6:	9206      	str	r2, [sp, #24]
 801c8a8:	1bdb      	subs	r3, r3, r7
 801c8aa:	1e5a      	subs	r2, r3, #1
 801c8ac:	d53e      	bpl.n	801c92c <_dtoa_r+0x220>
 801c8ae:	2201      	movs	r2, #1
 801c8b0:	1ad3      	subs	r3, r2, r3
 801c8b2:	9306      	str	r3, [sp, #24]
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c8b8:	9b04      	ldr	r3, [sp, #16]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	db38      	blt.n	801c930 <_dtoa_r+0x224>
 801c8be:	9a04      	ldr	r2, [sp, #16]
 801c8c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8c2:	4694      	mov	ip, r2
 801c8c4:	4463      	add	r3, ip
 801c8c6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c8c8:	2300      	movs	r3, #0
 801c8ca:	9214      	str	r2, [sp, #80]	@ 0x50
 801c8cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c8ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c8d0:	2401      	movs	r4, #1
 801c8d2:	2b09      	cmp	r3, #9
 801c8d4:	d867      	bhi.n	801c9a6 <_dtoa_r+0x29a>
 801c8d6:	2b05      	cmp	r3, #5
 801c8d8:	dd02      	ble.n	801c8e0 <_dtoa_r+0x1d4>
 801c8da:	2400      	movs	r4, #0
 801c8dc:	3b04      	subs	r3, #4
 801c8de:	9322      	str	r3, [sp, #136]	@ 0x88
 801c8e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c8e2:	1e98      	subs	r0, r3, #2
 801c8e4:	2803      	cmp	r0, #3
 801c8e6:	d867      	bhi.n	801c9b8 <_dtoa_r+0x2ac>
 801c8e8:	f7e3 fc48 	bl	800017c <__gnu_thumb1_case_uqi>
 801c8ec:	5b383a2b 	.word	0x5b383a2b
 801c8f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c8f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801c8f4:	18f6      	adds	r6, r6, r3
 801c8f6:	4b68      	ldr	r3, [pc, #416]	@ (801ca98 <_dtoa_r+0x38c>)
 801c8f8:	18f2      	adds	r2, r6, r3
 801c8fa:	2a20      	cmp	r2, #32
 801c8fc:	dd0f      	ble.n	801c91e <_dtoa_r+0x212>
 801c8fe:	2340      	movs	r3, #64	@ 0x40
 801c900:	1a9b      	subs	r3, r3, r2
 801c902:	409f      	lsls	r7, r3
 801c904:	4b65      	ldr	r3, [pc, #404]	@ (801ca9c <_dtoa_r+0x390>)
 801c906:	0038      	movs	r0, r7
 801c908:	18f3      	adds	r3, r6, r3
 801c90a:	40dc      	lsrs	r4, r3
 801c90c:	4320      	orrs	r0, r4
 801c90e:	f7e6 fd85 	bl	800341c <__aeabi_ui2d>
 801c912:	2201      	movs	r2, #1
 801c914:	4b62      	ldr	r3, [pc, #392]	@ (801caa0 <_dtoa_r+0x394>)
 801c916:	1e77      	subs	r7, r6, #1
 801c918:	18cb      	adds	r3, r1, r3
 801c91a:	9218      	str	r2, [sp, #96]	@ 0x60
 801c91c:	e776      	b.n	801c80c <_dtoa_r+0x100>
 801c91e:	2320      	movs	r3, #32
 801c920:	0020      	movs	r0, r4
 801c922:	1a9b      	subs	r3, r3, r2
 801c924:	4098      	lsls	r0, r3
 801c926:	e7f2      	b.n	801c90e <_dtoa_r+0x202>
 801c928:	9015      	str	r0, [sp, #84]	@ 0x54
 801c92a:	e7ba      	b.n	801c8a2 <_dtoa_r+0x196>
 801c92c:	920d      	str	r2, [sp, #52]	@ 0x34
 801c92e:	e7c3      	b.n	801c8b8 <_dtoa_r+0x1ac>
 801c930:	9b06      	ldr	r3, [sp, #24]
 801c932:	9a04      	ldr	r2, [sp, #16]
 801c934:	1a9b      	subs	r3, r3, r2
 801c936:	9306      	str	r3, [sp, #24]
 801c938:	4253      	negs	r3, r2
 801c93a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c93c:	2300      	movs	r3, #0
 801c93e:	9314      	str	r3, [sp, #80]	@ 0x50
 801c940:	e7c5      	b.n	801c8ce <_dtoa_r+0x1c2>
 801c942:	2300      	movs	r3, #0
 801c944:	9310      	str	r3, [sp, #64]	@ 0x40
 801c946:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c948:	930e      	str	r3, [sp, #56]	@ 0x38
 801c94a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	dc13      	bgt.n	801c978 <_dtoa_r+0x26c>
 801c950:	2301      	movs	r3, #1
 801c952:	001a      	movs	r2, r3
 801c954:	930e      	str	r3, [sp, #56]	@ 0x38
 801c956:	9309      	str	r3, [sp, #36]	@ 0x24
 801c958:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c95a:	e00d      	b.n	801c978 <_dtoa_r+0x26c>
 801c95c:	2301      	movs	r3, #1
 801c95e:	e7f1      	b.n	801c944 <_dtoa_r+0x238>
 801c960:	2300      	movs	r3, #0
 801c962:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c964:	9310      	str	r3, [sp, #64]	@ 0x40
 801c966:	4694      	mov	ip, r2
 801c968:	9b04      	ldr	r3, [sp, #16]
 801c96a:	4463      	add	r3, ip
 801c96c:	930e      	str	r3, [sp, #56]	@ 0x38
 801c96e:	3301      	adds	r3, #1
 801c970:	9309      	str	r3, [sp, #36]	@ 0x24
 801c972:	2b00      	cmp	r3, #0
 801c974:	dc00      	bgt.n	801c978 <_dtoa_r+0x26c>
 801c976:	2301      	movs	r3, #1
 801c978:	9a03      	ldr	r2, [sp, #12]
 801c97a:	2100      	movs	r1, #0
 801c97c:	69d0      	ldr	r0, [r2, #28]
 801c97e:	2204      	movs	r2, #4
 801c980:	0015      	movs	r5, r2
 801c982:	3514      	adds	r5, #20
 801c984:	429d      	cmp	r5, r3
 801c986:	d91b      	bls.n	801c9c0 <_dtoa_r+0x2b4>
 801c988:	6041      	str	r1, [r0, #4]
 801c98a:	9803      	ldr	r0, [sp, #12]
 801c98c:	f001 f924 	bl	801dbd8 <_Balloc>
 801c990:	9008      	str	r0, [sp, #32]
 801c992:	2800      	cmp	r0, #0
 801c994:	d117      	bne.n	801c9c6 <_dtoa_r+0x2ba>
 801c996:	21b0      	movs	r1, #176	@ 0xb0
 801c998:	4b42      	ldr	r3, [pc, #264]	@ (801caa4 <_dtoa_r+0x398>)
 801c99a:	482e      	ldr	r0, [pc, #184]	@ (801ca54 <_dtoa_r+0x348>)
 801c99c:	9a08      	ldr	r2, [sp, #32]
 801c99e:	31ff      	adds	r1, #255	@ 0xff
 801c9a0:	e6c9      	b.n	801c736 <_dtoa_r+0x2a>
 801c9a2:	2301      	movs	r3, #1
 801c9a4:	e7dd      	b.n	801c962 <_dtoa_r+0x256>
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	9410      	str	r4, [sp, #64]	@ 0x40
 801c9aa:	9322      	str	r3, [sp, #136]	@ 0x88
 801c9ac:	3b01      	subs	r3, #1
 801c9ae:	930e      	str	r3, [sp, #56]	@ 0x38
 801c9b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9b2:	2200      	movs	r2, #0
 801c9b4:	3313      	adds	r3, #19
 801c9b6:	e7cf      	b.n	801c958 <_dtoa_r+0x24c>
 801c9b8:	2301      	movs	r3, #1
 801c9ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801c9bc:	3b02      	subs	r3, #2
 801c9be:	e7f6      	b.n	801c9ae <_dtoa_r+0x2a2>
 801c9c0:	3101      	adds	r1, #1
 801c9c2:	0052      	lsls	r2, r2, #1
 801c9c4:	e7dc      	b.n	801c980 <_dtoa_r+0x274>
 801c9c6:	9b03      	ldr	r3, [sp, #12]
 801c9c8:	9a08      	ldr	r2, [sp, #32]
 801c9ca:	69db      	ldr	r3, [r3, #28]
 801c9cc:	601a      	str	r2, [r3, #0]
 801c9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9d0:	2b0e      	cmp	r3, #14
 801c9d2:	d900      	bls.n	801c9d6 <_dtoa_r+0x2ca>
 801c9d4:	e0d9      	b.n	801cb8a <_dtoa_r+0x47e>
 801c9d6:	2c00      	cmp	r4, #0
 801c9d8:	d100      	bne.n	801c9dc <_dtoa_r+0x2d0>
 801c9da:	e0d6      	b.n	801cb8a <_dtoa_r+0x47e>
 801c9dc:	9b04      	ldr	r3, [sp, #16]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	dd64      	ble.n	801caac <_dtoa_r+0x3a0>
 801c9e2:	210f      	movs	r1, #15
 801c9e4:	9a04      	ldr	r2, [sp, #16]
 801c9e6:	4b2b      	ldr	r3, [pc, #172]	@ (801ca94 <_dtoa_r+0x388>)
 801c9e8:	400a      	ands	r2, r1
 801c9ea:	00d2      	lsls	r2, r2, #3
 801c9ec:	189b      	adds	r3, r3, r2
 801c9ee:	681e      	ldr	r6, [r3, #0]
 801c9f0:	685f      	ldr	r7, [r3, #4]
 801c9f2:	9b04      	ldr	r3, [sp, #16]
 801c9f4:	2402      	movs	r4, #2
 801c9f6:	111d      	asrs	r5, r3, #4
 801c9f8:	05db      	lsls	r3, r3, #23
 801c9fa:	d50a      	bpl.n	801ca12 <_dtoa_r+0x306>
 801c9fc:	4b2a      	ldr	r3, [pc, #168]	@ (801caa8 <_dtoa_r+0x39c>)
 801c9fe:	400d      	ands	r5, r1
 801ca00:	6a1a      	ldr	r2, [r3, #32]
 801ca02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ca06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ca08:	f7e5 f9d4 	bl	8001db4 <__aeabi_ddiv>
 801ca0c:	900a      	str	r0, [sp, #40]	@ 0x28
 801ca0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ca10:	3401      	adds	r4, #1
 801ca12:	4b25      	ldr	r3, [pc, #148]	@ (801caa8 <_dtoa_r+0x39c>)
 801ca14:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca16:	2d00      	cmp	r5, #0
 801ca18:	d108      	bne.n	801ca2c <_dtoa_r+0x320>
 801ca1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ca1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ca1e:	0032      	movs	r2, r6
 801ca20:	003b      	movs	r3, r7
 801ca22:	f7e5 f9c7 	bl	8001db4 <__aeabi_ddiv>
 801ca26:	900a      	str	r0, [sp, #40]	@ 0x28
 801ca28:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ca2a:	e05a      	b.n	801cae2 <_dtoa_r+0x3d6>
 801ca2c:	2301      	movs	r3, #1
 801ca2e:	421d      	tst	r5, r3
 801ca30:	d009      	beq.n	801ca46 <_dtoa_r+0x33a>
 801ca32:	18e4      	adds	r4, r4, r3
 801ca34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca36:	0030      	movs	r0, r6
 801ca38:	681a      	ldr	r2, [r3, #0]
 801ca3a:	685b      	ldr	r3, [r3, #4]
 801ca3c:	0039      	movs	r1, r7
 801ca3e:	f7e5 fdfd 	bl	800263c <__aeabi_dmul>
 801ca42:	0006      	movs	r6, r0
 801ca44:	000f      	movs	r7, r1
 801ca46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca48:	106d      	asrs	r5, r5, #1
 801ca4a:	3308      	adds	r3, #8
 801ca4c:	e7e2      	b.n	801ca14 <_dtoa_r+0x308>
 801ca4e:	46c0      	nop			@ (mov r8, r8)
 801ca50:	08020f7a 	.word	0x08020f7a
 801ca54:	08020f91 	.word	0x08020f91
 801ca58:	7ff00000 	.word	0x7ff00000
 801ca5c:	0000270f 	.word	0x0000270f
 801ca60:	08020f76 	.word	0x08020f76
 801ca64:	08020f79 	.word	0x08020f79
 801ca68:	08020f42 	.word	0x08020f42
 801ca6c:	08020f41 	.word	0x08020f41
 801ca70:	3ff00000 	.word	0x3ff00000
 801ca74:	fffffc01 	.word	0xfffffc01
 801ca78:	3ff80000 	.word	0x3ff80000
 801ca7c:	636f4361 	.word	0x636f4361
 801ca80:	3fd287a7 	.word	0x3fd287a7
 801ca84:	8b60c8b3 	.word	0x8b60c8b3
 801ca88:	3fc68a28 	.word	0x3fc68a28
 801ca8c:	509f79fb 	.word	0x509f79fb
 801ca90:	3fd34413 	.word	0x3fd34413
 801ca94:	080210e8 	.word	0x080210e8
 801ca98:	00000432 	.word	0x00000432
 801ca9c:	00000412 	.word	0x00000412
 801caa0:	fe100000 	.word	0xfe100000
 801caa4:	08020fe9 	.word	0x08020fe9
 801caa8:	080210c0 	.word	0x080210c0
 801caac:	9b04      	ldr	r3, [sp, #16]
 801caae:	2402      	movs	r4, #2
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d016      	beq.n	801cae2 <_dtoa_r+0x3d6>
 801cab4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cab6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cab8:	220f      	movs	r2, #15
 801caba:	425d      	negs	r5, r3
 801cabc:	402a      	ands	r2, r5
 801cabe:	4bd7      	ldr	r3, [pc, #860]	@ (801ce1c <_dtoa_r+0x710>)
 801cac0:	00d2      	lsls	r2, r2, #3
 801cac2:	189b      	adds	r3, r3, r2
 801cac4:	681a      	ldr	r2, [r3, #0]
 801cac6:	685b      	ldr	r3, [r3, #4]
 801cac8:	f7e5 fdb8 	bl	800263c <__aeabi_dmul>
 801cacc:	2701      	movs	r7, #1
 801cace:	2300      	movs	r3, #0
 801cad0:	900a      	str	r0, [sp, #40]	@ 0x28
 801cad2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cad4:	4ed2      	ldr	r6, [pc, #840]	@ (801ce20 <_dtoa_r+0x714>)
 801cad6:	112d      	asrs	r5, r5, #4
 801cad8:	2d00      	cmp	r5, #0
 801cada:	d000      	beq.n	801cade <_dtoa_r+0x3d2>
 801cadc:	e0ba      	b.n	801cc54 <_dtoa_r+0x548>
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d1a1      	bne.n	801ca26 <_dtoa_r+0x31a>
 801cae2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cae4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cae6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d100      	bne.n	801caee <_dtoa_r+0x3e2>
 801caec:	e0bd      	b.n	801cc6a <_dtoa_r+0x55e>
 801caee:	2200      	movs	r2, #0
 801caf0:	0030      	movs	r0, r6
 801caf2:	0039      	movs	r1, r7
 801caf4:	4bcb      	ldr	r3, [pc, #812]	@ (801ce24 <_dtoa_r+0x718>)
 801caf6:	f7e3 fce1 	bl	80004bc <__aeabi_dcmplt>
 801cafa:	2800      	cmp	r0, #0
 801cafc:	d100      	bne.n	801cb00 <_dtoa_r+0x3f4>
 801cafe:	e0b4      	b.n	801cc6a <_dtoa_r+0x55e>
 801cb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d100      	bne.n	801cb08 <_dtoa_r+0x3fc>
 801cb06:	e0b0      	b.n	801cc6a <_dtoa_r+0x55e>
 801cb08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	dd39      	ble.n	801cb82 <_dtoa_r+0x476>
 801cb0e:	9b04      	ldr	r3, [sp, #16]
 801cb10:	2200      	movs	r2, #0
 801cb12:	3b01      	subs	r3, #1
 801cb14:	930c      	str	r3, [sp, #48]	@ 0x30
 801cb16:	0030      	movs	r0, r6
 801cb18:	4bc3      	ldr	r3, [pc, #780]	@ (801ce28 <_dtoa_r+0x71c>)
 801cb1a:	0039      	movs	r1, r7
 801cb1c:	f7e5 fd8e 	bl	800263c <__aeabi_dmul>
 801cb20:	900a      	str	r0, [sp, #40]	@ 0x28
 801cb22:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cb24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb26:	3401      	adds	r4, #1
 801cb28:	0020      	movs	r0, r4
 801cb2a:	9311      	str	r3, [sp, #68]	@ 0x44
 801cb2c:	f7e6 fc48 	bl	80033c0 <__aeabi_i2d>
 801cb30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cb32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cb34:	f7e5 fd82 	bl	800263c <__aeabi_dmul>
 801cb38:	4bbc      	ldr	r3, [pc, #752]	@ (801ce2c <_dtoa_r+0x720>)
 801cb3a:	2200      	movs	r2, #0
 801cb3c:	f7e4 fdd6 	bl	80016ec <__aeabi_dadd>
 801cb40:	4bbb      	ldr	r3, [pc, #748]	@ (801ce30 <_dtoa_r+0x724>)
 801cb42:	0006      	movs	r6, r0
 801cb44:	18cf      	adds	r7, r1, r3
 801cb46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d000      	beq.n	801cb4e <_dtoa_r+0x442>
 801cb4c:	e091      	b.n	801cc72 <_dtoa_r+0x566>
 801cb4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cb50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cb52:	2200      	movs	r2, #0
 801cb54:	4bb7      	ldr	r3, [pc, #732]	@ (801ce34 <_dtoa_r+0x728>)
 801cb56:	f7e6 f839 	bl	8002bcc <__aeabi_dsub>
 801cb5a:	0032      	movs	r2, r6
 801cb5c:	003b      	movs	r3, r7
 801cb5e:	0004      	movs	r4, r0
 801cb60:	000d      	movs	r5, r1
 801cb62:	f7e3 fcbf 	bl	80004e4 <__aeabi_dcmpgt>
 801cb66:	2800      	cmp	r0, #0
 801cb68:	d000      	beq.n	801cb6c <_dtoa_r+0x460>
 801cb6a:	e29d      	b.n	801d0a8 <_dtoa_r+0x99c>
 801cb6c:	2180      	movs	r1, #128	@ 0x80
 801cb6e:	0609      	lsls	r1, r1, #24
 801cb70:	187b      	adds	r3, r7, r1
 801cb72:	0032      	movs	r2, r6
 801cb74:	0020      	movs	r0, r4
 801cb76:	0029      	movs	r1, r5
 801cb78:	f7e3 fca0 	bl	80004bc <__aeabi_dcmplt>
 801cb7c:	2800      	cmp	r0, #0
 801cb7e:	d000      	beq.n	801cb82 <_dtoa_r+0x476>
 801cb80:	e130      	b.n	801cde4 <_dtoa_r+0x6d8>
 801cb82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cb84:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cb86:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb88:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cb8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	da00      	bge.n	801cb92 <_dtoa_r+0x486>
 801cb90:	e177      	b.n	801ce82 <_dtoa_r+0x776>
 801cb92:	9a04      	ldr	r2, [sp, #16]
 801cb94:	2a0e      	cmp	r2, #14
 801cb96:	dd00      	ble.n	801cb9a <_dtoa_r+0x48e>
 801cb98:	e173      	b.n	801ce82 <_dtoa_r+0x776>
 801cb9a:	4ba0      	ldr	r3, [pc, #640]	@ (801ce1c <_dtoa_r+0x710>)
 801cb9c:	00d2      	lsls	r2, r2, #3
 801cb9e:	189b      	adds	r3, r3, r2
 801cba0:	685c      	ldr	r4, [r3, #4]
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	9306      	str	r3, [sp, #24]
 801cba6:	9407      	str	r4, [sp, #28]
 801cba8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	da03      	bge.n	801cbb6 <_dtoa_r+0x4aa>
 801cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	dc00      	bgt.n	801cbb6 <_dtoa_r+0x4aa>
 801cbb4:	e106      	b.n	801cdc4 <_dtoa_r+0x6b8>
 801cbb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cbb8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbbc:	9d08      	ldr	r5, [sp, #32]
 801cbbe:	3b01      	subs	r3, #1
 801cbc0:	195b      	adds	r3, r3, r5
 801cbc2:	930a      	str	r3, [sp, #40]	@ 0x28
 801cbc4:	9a06      	ldr	r2, [sp, #24]
 801cbc6:	9b07      	ldr	r3, [sp, #28]
 801cbc8:	0030      	movs	r0, r6
 801cbca:	0039      	movs	r1, r7
 801cbcc:	f7e5 f8f2 	bl	8001db4 <__aeabi_ddiv>
 801cbd0:	f7e6 fbba 	bl	8003348 <__aeabi_d2iz>
 801cbd4:	9009      	str	r0, [sp, #36]	@ 0x24
 801cbd6:	f7e6 fbf3 	bl	80033c0 <__aeabi_i2d>
 801cbda:	9a06      	ldr	r2, [sp, #24]
 801cbdc:	9b07      	ldr	r3, [sp, #28]
 801cbde:	f7e5 fd2d 	bl	800263c <__aeabi_dmul>
 801cbe2:	0002      	movs	r2, r0
 801cbe4:	000b      	movs	r3, r1
 801cbe6:	0030      	movs	r0, r6
 801cbe8:	0039      	movs	r1, r7
 801cbea:	f7e5 ffef 	bl	8002bcc <__aeabi_dsub>
 801cbee:	002b      	movs	r3, r5
 801cbf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cbf2:	3501      	adds	r5, #1
 801cbf4:	3230      	adds	r2, #48	@ 0x30
 801cbf6:	701a      	strb	r2, [r3, #0]
 801cbf8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cbfa:	002c      	movs	r4, r5
 801cbfc:	429a      	cmp	r2, r3
 801cbfe:	d000      	beq.n	801cc02 <_dtoa_r+0x4f6>
 801cc00:	e131      	b.n	801ce66 <_dtoa_r+0x75a>
 801cc02:	0002      	movs	r2, r0
 801cc04:	000b      	movs	r3, r1
 801cc06:	f7e4 fd71 	bl	80016ec <__aeabi_dadd>
 801cc0a:	9a06      	ldr	r2, [sp, #24]
 801cc0c:	9b07      	ldr	r3, [sp, #28]
 801cc0e:	0006      	movs	r6, r0
 801cc10:	000f      	movs	r7, r1
 801cc12:	f7e3 fc67 	bl	80004e4 <__aeabi_dcmpgt>
 801cc16:	2800      	cmp	r0, #0
 801cc18:	d000      	beq.n	801cc1c <_dtoa_r+0x510>
 801cc1a:	e10f      	b.n	801ce3c <_dtoa_r+0x730>
 801cc1c:	9a06      	ldr	r2, [sp, #24]
 801cc1e:	9b07      	ldr	r3, [sp, #28]
 801cc20:	0030      	movs	r0, r6
 801cc22:	0039      	movs	r1, r7
 801cc24:	f7e3 fc44 	bl	80004b0 <__aeabi_dcmpeq>
 801cc28:	2800      	cmp	r0, #0
 801cc2a:	d003      	beq.n	801cc34 <_dtoa_r+0x528>
 801cc2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc2e:	07dd      	lsls	r5, r3, #31
 801cc30:	d500      	bpl.n	801cc34 <_dtoa_r+0x528>
 801cc32:	e103      	b.n	801ce3c <_dtoa_r+0x730>
 801cc34:	9905      	ldr	r1, [sp, #20]
 801cc36:	9803      	ldr	r0, [sp, #12]
 801cc38:	f001 f812 	bl	801dc60 <_Bfree>
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	7023      	strb	r3, [r4, #0]
 801cc40:	9b04      	ldr	r3, [sp, #16]
 801cc42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cc44:	3301      	adds	r3, #1
 801cc46:	6013      	str	r3, [r2, #0]
 801cc48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d100      	bne.n	801cc50 <_dtoa_r+0x544>
 801cc4e:	e5a7      	b.n	801c7a0 <_dtoa_r+0x94>
 801cc50:	601c      	str	r4, [r3, #0]
 801cc52:	e5a5      	b.n	801c7a0 <_dtoa_r+0x94>
 801cc54:	423d      	tst	r5, r7
 801cc56:	d005      	beq.n	801cc64 <_dtoa_r+0x558>
 801cc58:	6832      	ldr	r2, [r6, #0]
 801cc5a:	6873      	ldr	r3, [r6, #4]
 801cc5c:	f7e5 fcee 	bl	800263c <__aeabi_dmul>
 801cc60:	003b      	movs	r3, r7
 801cc62:	3401      	adds	r4, #1
 801cc64:	106d      	asrs	r5, r5, #1
 801cc66:	3608      	adds	r6, #8
 801cc68:	e736      	b.n	801cad8 <_dtoa_r+0x3cc>
 801cc6a:	9b04      	ldr	r3, [sp, #16]
 801cc6c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc70:	e75a      	b.n	801cb28 <_dtoa_r+0x41c>
 801cc72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cc74:	4b69      	ldr	r3, [pc, #420]	@ (801ce1c <_dtoa_r+0x710>)
 801cc76:	3a01      	subs	r2, #1
 801cc78:	00d2      	lsls	r2, r2, #3
 801cc7a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cc7c:	189b      	adds	r3, r3, r2
 801cc7e:	681a      	ldr	r2, [r3, #0]
 801cc80:	685b      	ldr	r3, [r3, #4]
 801cc82:	2900      	cmp	r1, #0
 801cc84:	d04c      	beq.n	801cd20 <_dtoa_r+0x614>
 801cc86:	2000      	movs	r0, #0
 801cc88:	496b      	ldr	r1, [pc, #428]	@ (801ce38 <_dtoa_r+0x72c>)
 801cc8a:	f7e5 f893 	bl	8001db4 <__aeabi_ddiv>
 801cc8e:	0032      	movs	r2, r6
 801cc90:	003b      	movs	r3, r7
 801cc92:	f7e5 ff9b 	bl	8002bcc <__aeabi_dsub>
 801cc96:	9a08      	ldr	r2, [sp, #32]
 801cc98:	0006      	movs	r6, r0
 801cc9a:	4694      	mov	ip, r2
 801cc9c:	000f      	movs	r7, r1
 801cc9e:	9b08      	ldr	r3, [sp, #32]
 801cca0:	9316      	str	r3, [sp, #88]	@ 0x58
 801cca2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cca4:	4463      	add	r3, ip
 801cca6:	9311      	str	r3, [sp, #68]	@ 0x44
 801cca8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ccaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ccac:	f7e6 fb4c 	bl	8003348 <__aeabi_d2iz>
 801ccb0:	0005      	movs	r5, r0
 801ccb2:	f7e6 fb85 	bl	80033c0 <__aeabi_i2d>
 801ccb6:	0002      	movs	r2, r0
 801ccb8:	000b      	movs	r3, r1
 801ccba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ccbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ccbe:	f7e5 ff85 	bl	8002bcc <__aeabi_dsub>
 801ccc2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ccc4:	3530      	adds	r5, #48	@ 0x30
 801ccc6:	1c5c      	adds	r4, r3, #1
 801ccc8:	701d      	strb	r5, [r3, #0]
 801ccca:	0032      	movs	r2, r6
 801cccc:	003b      	movs	r3, r7
 801ccce:	900a      	str	r0, [sp, #40]	@ 0x28
 801ccd0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ccd2:	f7e3 fbf3 	bl	80004bc <__aeabi_dcmplt>
 801ccd6:	2800      	cmp	r0, #0
 801ccd8:	d16a      	bne.n	801cdb0 <_dtoa_r+0x6a4>
 801ccda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ccdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ccde:	2000      	movs	r0, #0
 801cce0:	4950      	ldr	r1, [pc, #320]	@ (801ce24 <_dtoa_r+0x718>)
 801cce2:	f7e5 ff73 	bl	8002bcc <__aeabi_dsub>
 801cce6:	0032      	movs	r2, r6
 801cce8:	003b      	movs	r3, r7
 801ccea:	f7e3 fbe7 	bl	80004bc <__aeabi_dcmplt>
 801ccee:	2800      	cmp	r0, #0
 801ccf0:	d000      	beq.n	801ccf4 <_dtoa_r+0x5e8>
 801ccf2:	e0a5      	b.n	801ce40 <_dtoa_r+0x734>
 801ccf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ccf6:	42a3      	cmp	r3, r4
 801ccf8:	d100      	bne.n	801ccfc <_dtoa_r+0x5f0>
 801ccfa:	e742      	b.n	801cb82 <_dtoa_r+0x476>
 801ccfc:	2200      	movs	r2, #0
 801ccfe:	0030      	movs	r0, r6
 801cd00:	0039      	movs	r1, r7
 801cd02:	4b49      	ldr	r3, [pc, #292]	@ (801ce28 <_dtoa_r+0x71c>)
 801cd04:	f7e5 fc9a 	bl	800263c <__aeabi_dmul>
 801cd08:	2200      	movs	r2, #0
 801cd0a:	0006      	movs	r6, r0
 801cd0c:	000f      	movs	r7, r1
 801cd0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cd10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cd12:	4b45      	ldr	r3, [pc, #276]	@ (801ce28 <_dtoa_r+0x71c>)
 801cd14:	f7e5 fc92 	bl	800263c <__aeabi_dmul>
 801cd18:	9416      	str	r4, [sp, #88]	@ 0x58
 801cd1a:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cd1e:	e7c3      	b.n	801cca8 <_dtoa_r+0x59c>
 801cd20:	0030      	movs	r0, r6
 801cd22:	0039      	movs	r1, r7
 801cd24:	f7e5 fc8a 	bl	800263c <__aeabi_dmul>
 801cd28:	9d08      	ldr	r5, [sp, #32]
 801cd2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cd2c:	002b      	movs	r3, r5
 801cd2e:	4694      	mov	ip, r2
 801cd30:	9016      	str	r0, [sp, #88]	@ 0x58
 801cd32:	9117      	str	r1, [sp, #92]	@ 0x5c
 801cd34:	4463      	add	r3, ip
 801cd36:	9319      	str	r3, [sp, #100]	@ 0x64
 801cd38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cd3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cd3c:	f7e6 fb04 	bl	8003348 <__aeabi_d2iz>
 801cd40:	0004      	movs	r4, r0
 801cd42:	f7e6 fb3d 	bl	80033c0 <__aeabi_i2d>
 801cd46:	000b      	movs	r3, r1
 801cd48:	0002      	movs	r2, r0
 801cd4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cd4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cd4e:	f7e5 ff3d 	bl	8002bcc <__aeabi_dsub>
 801cd52:	3430      	adds	r4, #48	@ 0x30
 801cd54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cd56:	702c      	strb	r4, [r5, #0]
 801cd58:	3501      	adds	r5, #1
 801cd5a:	0006      	movs	r6, r0
 801cd5c:	000f      	movs	r7, r1
 801cd5e:	42ab      	cmp	r3, r5
 801cd60:	d129      	bne.n	801cdb6 <_dtoa_r+0x6aa>
 801cd62:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801cd64:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cd66:	9b08      	ldr	r3, [sp, #32]
 801cd68:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cd6a:	469c      	mov	ip, r3
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	4b32      	ldr	r3, [pc, #200]	@ (801ce38 <_dtoa_r+0x72c>)
 801cd70:	4464      	add	r4, ip
 801cd72:	f7e4 fcbb 	bl	80016ec <__aeabi_dadd>
 801cd76:	0002      	movs	r2, r0
 801cd78:	000b      	movs	r3, r1
 801cd7a:	0030      	movs	r0, r6
 801cd7c:	0039      	movs	r1, r7
 801cd7e:	f7e3 fbb1 	bl	80004e4 <__aeabi_dcmpgt>
 801cd82:	2800      	cmp	r0, #0
 801cd84:	d15c      	bne.n	801ce40 <_dtoa_r+0x734>
 801cd86:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cd88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cd8a:	2000      	movs	r0, #0
 801cd8c:	492a      	ldr	r1, [pc, #168]	@ (801ce38 <_dtoa_r+0x72c>)
 801cd8e:	f7e5 ff1d 	bl	8002bcc <__aeabi_dsub>
 801cd92:	0002      	movs	r2, r0
 801cd94:	000b      	movs	r3, r1
 801cd96:	0030      	movs	r0, r6
 801cd98:	0039      	movs	r1, r7
 801cd9a:	f7e3 fb8f 	bl	80004bc <__aeabi_dcmplt>
 801cd9e:	2800      	cmp	r0, #0
 801cda0:	d100      	bne.n	801cda4 <_dtoa_r+0x698>
 801cda2:	e6ee      	b.n	801cb82 <_dtoa_r+0x476>
 801cda4:	0023      	movs	r3, r4
 801cda6:	3c01      	subs	r4, #1
 801cda8:	7822      	ldrb	r2, [r4, #0]
 801cdaa:	2a30      	cmp	r2, #48	@ 0x30
 801cdac:	d0fa      	beq.n	801cda4 <_dtoa_r+0x698>
 801cdae:	001c      	movs	r4, r3
 801cdb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cdb2:	9304      	str	r3, [sp, #16]
 801cdb4:	e73e      	b.n	801cc34 <_dtoa_r+0x528>
 801cdb6:	2200      	movs	r2, #0
 801cdb8:	4b1b      	ldr	r3, [pc, #108]	@ (801ce28 <_dtoa_r+0x71c>)
 801cdba:	f7e5 fc3f 	bl	800263c <__aeabi_dmul>
 801cdbe:	900a      	str	r0, [sp, #40]	@ 0x28
 801cdc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cdc2:	e7b9      	b.n	801cd38 <_dtoa_r+0x62c>
 801cdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d10c      	bne.n	801cde4 <_dtoa_r+0x6d8>
 801cdca:	9806      	ldr	r0, [sp, #24]
 801cdcc:	9907      	ldr	r1, [sp, #28]
 801cdce:	2200      	movs	r2, #0
 801cdd0:	4b18      	ldr	r3, [pc, #96]	@ (801ce34 <_dtoa_r+0x728>)
 801cdd2:	f7e5 fc33 	bl	800263c <__aeabi_dmul>
 801cdd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cdd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cdda:	f7e3 fb8d 	bl	80004f8 <__aeabi_dcmpge>
 801cdde:	2800      	cmp	r0, #0
 801cde0:	d100      	bne.n	801cde4 <_dtoa_r+0x6d8>
 801cde2:	e164      	b.n	801d0ae <_dtoa_r+0x9a2>
 801cde4:	2600      	movs	r6, #0
 801cde6:	0037      	movs	r7, r6
 801cde8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cdea:	9c08      	ldr	r4, [sp, #32]
 801cdec:	43db      	mvns	r3, r3
 801cdee:	930c      	str	r3, [sp, #48]	@ 0x30
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	9304      	str	r3, [sp, #16]
 801cdf4:	0031      	movs	r1, r6
 801cdf6:	9803      	ldr	r0, [sp, #12]
 801cdf8:	f000 ff32 	bl	801dc60 <_Bfree>
 801cdfc:	2f00      	cmp	r7, #0
 801cdfe:	d0d7      	beq.n	801cdb0 <_dtoa_r+0x6a4>
 801ce00:	9b04      	ldr	r3, [sp, #16]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d005      	beq.n	801ce12 <_dtoa_r+0x706>
 801ce06:	42bb      	cmp	r3, r7
 801ce08:	d003      	beq.n	801ce12 <_dtoa_r+0x706>
 801ce0a:	0019      	movs	r1, r3
 801ce0c:	9803      	ldr	r0, [sp, #12]
 801ce0e:	f000 ff27 	bl	801dc60 <_Bfree>
 801ce12:	0039      	movs	r1, r7
 801ce14:	9803      	ldr	r0, [sp, #12]
 801ce16:	f000 ff23 	bl	801dc60 <_Bfree>
 801ce1a:	e7c9      	b.n	801cdb0 <_dtoa_r+0x6a4>
 801ce1c:	080210e8 	.word	0x080210e8
 801ce20:	080210c0 	.word	0x080210c0
 801ce24:	3ff00000 	.word	0x3ff00000
 801ce28:	40240000 	.word	0x40240000
 801ce2c:	401c0000 	.word	0x401c0000
 801ce30:	fcc00000 	.word	0xfcc00000
 801ce34:	40140000 	.word	0x40140000
 801ce38:	3fe00000 	.word	0x3fe00000
 801ce3c:	9b04      	ldr	r3, [sp, #16]
 801ce3e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce40:	0023      	movs	r3, r4
 801ce42:	001c      	movs	r4, r3
 801ce44:	3b01      	subs	r3, #1
 801ce46:	781a      	ldrb	r2, [r3, #0]
 801ce48:	2a39      	cmp	r2, #57	@ 0x39
 801ce4a:	d108      	bne.n	801ce5e <_dtoa_r+0x752>
 801ce4c:	9a08      	ldr	r2, [sp, #32]
 801ce4e:	429a      	cmp	r2, r3
 801ce50:	d1f7      	bne.n	801ce42 <_dtoa_r+0x736>
 801ce52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ce54:	9908      	ldr	r1, [sp, #32]
 801ce56:	3201      	adds	r2, #1
 801ce58:	920c      	str	r2, [sp, #48]	@ 0x30
 801ce5a:	2230      	movs	r2, #48	@ 0x30
 801ce5c:	700a      	strb	r2, [r1, #0]
 801ce5e:	781a      	ldrb	r2, [r3, #0]
 801ce60:	3201      	adds	r2, #1
 801ce62:	701a      	strb	r2, [r3, #0]
 801ce64:	e7a4      	b.n	801cdb0 <_dtoa_r+0x6a4>
 801ce66:	2200      	movs	r2, #0
 801ce68:	4bc6      	ldr	r3, [pc, #792]	@ (801d184 <_dtoa_r+0xa78>)
 801ce6a:	f7e5 fbe7 	bl	800263c <__aeabi_dmul>
 801ce6e:	2200      	movs	r2, #0
 801ce70:	2300      	movs	r3, #0
 801ce72:	0006      	movs	r6, r0
 801ce74:	000f      	movs	r7, r1
 801ce76:	f7e3 fb1b 	bl	80004b0 <__aeabi_dcmpeq>
 801ce7a:	2800      	cmp	r0, #0
 801ce7c:	d100      	bne.n	801ce80 <_dtoa_r+0x774>
 801ce7e:	e6a1      	b.n	801cbc4 <_dtoa_r+0x4b8>
 801ce80:	e6d8      	b.n	801cc34 <_dtoa_r+0x528>
 801ce82:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ce84:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801ce86:	9c06      	ldr	r4, [sp, #24]
 801ce88:	2f00      	cmp	r7, #0
 801ce8a:	d014      	beq.n	801ceb6 <_dtoa_r+0x7aa>
 801ce8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ce8e:	2a01      	cmp	r2, #1
 801ce90:	dd00      	ble.n	801ce94 <_dtoa_r+0x788>
 801ce92:	e0c8      	b.n	801d026 <_dtoa_r+0x91a>
 801ce94:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ce96:	2a00      	cmp	r2, #0
 801ce98:	d100      	bne.n	801ce9c <_dtoa_r+0x790>
 801ce9a:	e0be      	b.n	801d01a <_dtoa_r+0x90e>
 801ce9c:	4aba      	ldr	r2, [pc, #744]	@ (801d188 <_dtoa_r+0xa7c>)
 801ce9e:	189b      	adds	r3, r3, r2
 801cea0:	9a06      	ldr	r2, [sp, #24]
 801cea2:	2101      	movs	r1, #1
 801cea4:	18d2      	adds	r2, r2, r3
 801cea6:	9206      	str	r2, [sp, #24]
 801cea8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ceaa:	9803      	ldr	r0, [sp, #12]
 801ceac:	18d3      	adds	r3, r2, r3
 801ceae:	930d      	str	r3, [sp, #52]	@ 0x34
 801ceb0:	f000 ffda 	bl	801de68 <__i2b>
 801ceb4:	0007      	movs	r7, r0
 801ceb6:	2c00      	cmp	r4, #0
 801ceb8:	d00e      	beq.n	801ced8 <_dtoa_r+0x7cc>
 801ceba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	dd0b      	ble.n	801ced8 <_dtoa_r+0x7cc>
 801cec0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cec2:	0023      	movs	r3, r4
 801cec4:	4294      	cmp	r4, r2
 801cec6:	dd00      	ble.n	801ceca <_dtoa_r+0x7be>
 801cec8:	0013      	movs	r3, r2
 801ceca:	9a06      	ldr	r2, [sp, #24]
 801cecc:	1ae4      	subs	r4, r4, r3
 801cece:	1ad2      	subs	r2, r2, r3
 801ced0:	9206      	str	r2, [sp, #24]
 801ced2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ced4:	1ad3      	subs	r3, r2, r3
 801ced6:	930d      	str	r3, [sp, #52]	@ 0x34
 801ced8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d01f      	beq.n	801cf1e <_dtoa_r+0x812>
 801cede:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d100      	bne.n	801cee6 <_dtoa_r+0x7da>
 801cee4:	e0b5      	b.n	801d052 <_dtoa_r+0x946>
 801cee6:	2d00      	cmp	r5, #0
 801cee8:	d010      	beq.n	801cf0c <_dtoa_r+0x800>
 801ceea:	0039      	movs	r1, r7
 801ceec:	002a      	movs	r2, r5
 801ceee:	9803      	ldr	r0, [sp, #12]
 801cef0:	f001 f884 	bl	801dffc <__pow5mult>
 801cef4:	9a05      	ldr	r2, [sp, #20]
 801cef6:	0001      	movs	r1, r0
 801cef8:	0007      	movs	r7, r0
 801cefa:	9803      	ldr	r0, [sp, #12]
 801cefc:	f000 ffcc 	bl	801de98 <__multiply>
 801cf00:	0006      	movs	r6, r0
 801cf02:	9905      	ldr	r1, [sp, #20]
 801cf04:	9803      	ldr	r0, [sp, #12]
 801cf06:	f000 feab 	bl	801dc60 <_Bfree>
 801cf0a:	9605      	str	r6, [sp, #20]
 801cf0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf0e:	1b5a      	subs	r2, r3, r5
 801cf10:	42ab      	cmp	r3, r5
 801cf12:	d004      	beq.n	801cf1e <_dtoa_r+0x812>
 801cf14:	9905      	ldr	r1, [sp, #20]
 801cf16:	9803      	ldr	r0, [sp, #12]
 801cf18:	f001 f870 	bl	801dffc <__pow5mult>
 801cf1c:	9005      	str	r0, [sp, #20]
 801cf1e:	2101      	movs	r1, #1
 801cf20:	9803      	ldr	r0, [sp, #12]
 801cf22:	f000 ffa1 	bl	801de68 <__i2b>
 801cf26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cf28:	0006      	movs	r6, r0
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d100      	bne.n	801cf30 <_dtoa_r+0x824>
 801cf2e:	e1bc      	b.n	801d2aa <_dtoa_r+0xb9e>
 801cf30:	001a      	movs	r2, r3
 801cf32:	0001      	movs	r1, r0
 801cf34:	9803      	ldr	r0, [sp, #12]
 801cf36:	f001 f861 	bl	801dffc <__pow5mult>
 801cf3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cf3c:	0006      	movs	r6, r0
 801cf3e:	2500      	movs	r5, #0
 801cf40:	2b01      	cmp	r3, #1
 801cf42:	dc16      	bgt.n	801cf72 <_dtoa_r+0x866>
 801cf44:	2500      	movs	r5, #0
 801cf46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf48:	42ab      	cmp	r3, r5
 801cf4a:	d10e      	bne.n	801cf6a <_dtoa_r+0x85e>
 801cf4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf4e:	031b      	lsls	r3, r3, #12
 801cf50:	42ab      	cmp	r3, r5
 801cf52:	d10a      	bne.n	801cf6a <_dtoa_r+0x85e>
 801cf54:	4b8d      	ldr	r3, [pc, #564]	@ (801d18c <_dtoa_r+0xa80>)
 801cf56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cf58:	4213      	tst	r3, r2
 801cf5a:	d006      	beq.n	801cf6a <_dtoa_r+0x85e>
 801cf5c:	9b06      	ldr	r3, [sp, #24]
 801cf5e:	3501      	adds	r5, #1
 801cf60:	3301      	adds	r3, #1
 801cf62:	9306      	str	r3, [sp, #24]
 801cf64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf66:	3301      	adds	r3, #1
 801cf68:	930d      	str	r3, [sp, #52]	@ 0x34
 801cf6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cf6c:	2001      	movs	r0, #1
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d008      	beq.n	801cf84 <_dtoa_r+0x878>
 801cf72:	6933      	ldr	r3, [r6, #16]
 801cf74:	3303      	adds	r3, #3
 801cf76:	009b      	lsls	r3, r3, #2
 801cf78:	18f3      	adds	r3, r6, r3
 801cf7a:	6858      	ldr	r0, [r3, #4]
 801cf7c:	f000 ff24 	bl	801ddc8 <__hi0bits>
 801cf80:	2320      	movs	r3, #32
 801cf82:	1a18      	subs	r0, r3, r0
 801cf84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf86:	1818      	adds	r0, r3, r0
 801cf88:	0002      	movs	r2, r0
 801cf8a:	231f      	movs	r3, #31
 801cf8c:	401a      	ands	r2, r3
 801cf8e:	4218      	tst	r0, r3
 801cf90:	d065      	beq.n	801d05e <_dtoa_r+0x952>
 801cf92:	3301      	adds	r3, #1
 801cf94:	1a9b      	subs	r3, r3, r2
 801cf96:	2b04      	cmp	r3, #4
 801cf98:	dd5d      	ble.n	801d056 <_dtoa_r+0x94a>
 801cf9a:	231c      	movs	r3, #28
 801cf9c:	1a9b      	subs	r3, r3, r2
 801cf9e:	9a06      	ldr	r2, [sp, #24]
 801cfa0:	18e4      	adds	r4, r4, r3
 801cfa2:	18d2      	adds	r2, r2, r3
 801cfa4:	9206      	str	r2, [sp, #24]
 801cfa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cfa8:	18d3      	adds	r3, r2, r3
 801cfaa:	930d      	str	r3, [sp, #52]	@ 0x34
 801cfac:	9b06      	ldr	r3, [sp, #24]
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	dd05      	ble.n	801cfbe <_dtoa_r+0x8b2>
 801cfb2:	001a      	movs	r2, r3
 801cfb4:	9905      	ldr	r1, [sp, #20]
 801cfb6:	9803      	ldr	r0, [sp, #12]
 801cfb8:	f001 f87c 	bl	801e0b4 <__lshift>
 801cfbc:	9005      	str	r0, [sp, #20]
 801cfbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	dd05      	ble.n	801cfd0 <_dtoa_r+0x8c4>
 801cfc4:	0031      	movs	r1, r6
 801cfc6:	001a      	movs	r2, r3
 801cfc8:	9803      	ldr	r0, [sp, #12]
 801cfca:	f001 f873 	bl	801e0b4 <__lshift>
 801cfce:	0006      	movs	r6, r0
 801cfd0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d045      	beq.n	801d062 <_dtoa_r+0x956>
 801cfd6:	0031      	movs	r1, r6
 801cfd8:	9805      	ldr	r0, [sp, #20]
 801cfda:	f001 f8d7 	bl	801e18c <__mcmp>
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	da3f      	bge.n	801d062 <_dtoa_r+0x956>
 801cfe2:	9b04      	ldr	r3, [sp, #16]
 801cfe4:	220a      	movs	r2, #10
 801cfe6:	3b01      	subs	r3, #1
 801cfe8:	930c      	str	r3, [sp, #48]	@ 0x30
 801cfea:	9905      	ldr	r1, [sp, #20]
 801cfec:	2300      	movs	r3, #0
 801cfee:	9803      	ldr	r0, [sp, #12]
 801cff0:	f000 fe5a 	bl	801dca8 <__multadd>
 801cff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cff6:	9005      	str	r0, [sp, #20]
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d100      	bne.n	801cffe <_dtoa_r+0x8f2>
 801cffc:	e15c      	b.n	801d2b8 <_dtoa_r+0xbac>
 801cffe:	2300      	movs	r3, #0
 801d000:	0039      	movs	r1, r7
 801d002:	220a      	movs	r2, #10
 801d004:	9803      	ldr	r0, [sp, #12]
 801d006:	f000 fe4f 	bl	801dca8 <__multadd>
 801d00a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d00c:	0007      	movs	r7, r0
 801d00e:	2b00      	cmp	r3, #0
 801d010:	dc55      	bgt.n	801d0be <_dtoa_r+0x9b2>
 801d012:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d014:	2b02      	cmp	r3, #2
 801d016:	dc2d      	bgt.n	801d074 <_dtoa_r+0x968>
 801d018:	e051      	b.n	801d0be <_dtoa_r+0x9b2>
 801d01a:	2336      	movs	r3, #54	@ 0x36
 801d01c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d01e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801d020:	9c06      	ldr	r4, [sp, #24]
 801d022:	1a9b      	subs	r3, r3, r2
 801d024:	e73c      	b.n	801cea0 <_dtoa_r+0x794>
 801d026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d028:	1e5d      	subs	r5, r3, #1
 801d02a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d02c:	42ab      	cmp	r3, r5
 801d02e:	db08      	blt.n	801d042 <_dtoa_r+0x936>
 801d030:	1b5d      	subs	r5, r3, r5
 801d032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d034:	9c06      	ldr	r4, [sp, #24]
 801d036:	2b00      	cmp	r3, #0
 801d038:	db00      	blt.n	801d03c <_dtoa_r+0x930>
 801d03a:	e731      	b.n	801cea0 <_dtoa_r+0x794>
 801d03c:	1ae4      	subs	r4, r4, r3
 801d03e:	2300      	movs	r3, #0
 801d040:	e72e      	b.n	801cea0 <_dtoa_r+0x794>
 801d042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d044:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d046:	1aeb      	subs	r3, r5, r3
 801d048:	18d3      	adds	r3, r2, r3
 801d04a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801d04c:	9314      	str	r3, [sp, #80]	@ 0x50
 801d04e:	2500      	movs	r5, #0
 801d050:	e7ef      	b.n	801d032 <_dtoa_r+0x926>
 801d052:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d054:	e75e      	b.n	801cf14 <_dtoa_r+0x808>
 801d056:	2b04      	cmp	r3, #4
 801d058:	d0a8      	beq.n	801cfac <_dtoa_r+0x8a0>
 801d05a:	331c      	adds	r3, #28
 801d05c:	e79f      	b.n	801cf9e <_dtoa_r+0x892>
 801d05e:	0013      	movs	r3, r2
 801d060:	e7fb      	b.n	801d05a <_dtoa_r+0x94e>
 801d062:	9b04      	ldr	r3, [sp, #16]
 801d064:	930c      	str	r3, [sp, #48]	@ 0x30
 801d066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d068:	930e      	str	r3, [sp, #56]	@ 0x38
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	dc23      	bgt.n	801d0b6 <_dtoa_r+0x9aa>
 801d06e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d070:	2b02      	cmp	r3, #2
 801d072:	dd20      	ble.n	801d0b6 <_dtoa_r+0x9aa>
 801d074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d076:	2b00      	cmp	r3, #0
 801d078:	d000      	beq.n	801d07c <_dtoa_r+0x970>
 801d07a:	e6b5      	b.n	801cde8 <_dtoa_r+0x6dc>
 801d07c:	0031      	movs	r1, r6
 801d07e:	2205      	movs	r2, #5
 801d080:	9803      	ldr	r0, [sp, #12]
 801d082:	f000 fe11 	bl	801dca8 <__multadd>
 801d086:	0006      	movs	r6, r0
 801d088:	0001      	movs	r1, r0
 801d08a:	9805      	ldr	r0, [sp, #20]
 801d08c:	f001 f87e 	bl	801e18c <__mcmp>
 801d090:	2800      	cmp	r0, #0
 801d092:	dc00      	bgt.n	801d096 <_dtoa_r+0x98a>
 801d094:	e6a8      	b.n	801cde8 <_dtoa_r+0x6dc>
 801d096:	9b08      	ldr	r3, [sp, #32]
 801d098:	9a08      	ldr	r2, [sp, #32]
 801d09a:	1c5c      	adds	r4, r3, #1
 801d09c:	2331      	movs	r3, #49	@ 0x31
 801d09e:	7013      	strb	r3, [r2, #0]
 801d0a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0a2:	3301      	adds	r3, #1
 801d0a4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d0a6:	e6a3      	b.n	801cdf0 <_dtoa_r+0x6e4>
 801d0a8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d0aa:	0037      	movs	r7, r6
 801d0ac:	e7f3      	b.n	801d096 <_dtoa_r+0x98a>
 801d0ae:	9b04      	ldr	r3, [sp, #16]
 801d0b0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801d0b2:	930c      	str	r3, [sp, #48]	@ 0x30
 801d0b4:	e7f9      	b.n	801d0aa <_dtoa_r+0x99e>
 801d0b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d100      	bne.n	801d0be <_dtoa_r+0x9b2>
 801d0bc:	e100      	b.n	801d2c0 <_dtoa_r+0xbb4>
 801d0be:	2c00      	cmp	r4, #0
 801d0c0:	dd05      	ble.n	801d0ce <_dtoa_r+0x9c2>
 801d0c2:	0039      	movs	r1, r7
 801d0c4:	0022      	movs	r2, r4
 801d0c6:	9803      	ldr	r0, [sp, #12]
 801d0c8:	f000 fff4 	bl	801e0b4 <__lshift>
 801d0cc:	0007      	movs	r7, r0
 801d0ce:	0038      	movs	r0, r7
 801d0d0:	2d00      	cmp	r5, #0
 801d0d2:	d018      	beq.n	801d106 <_dtoa_r+0x9fa>
 801d0d4:	6879      	ldr	r1, [r7, #4]
 801d0d6:	9803      	ldr	r0, [sp, #12]
 801d0d8:	f000 fd7e 	bl	801dbd8 <_Balloc>
 801d0dc:	1e04      	subs	r4, r0, #0
 801d0de:	d105      	bne.n	801d0ec <_dtoa_r+0x9e0>
 801d0e0:	0022      	movs	r2, r4
 801d0e2:	4b2b      	ldr	r3, [pc, #172]	@ (801d190 <_dtoa_r+0xa84>)
 801d0e4:	482b      	ldr	r0, [pc, #172]	@ (801d194 <_dtoa_r+0xa88>)
 801d0e6:	492c      	ldr	r1, [pc, #176]	@ (801d198 <_dtoa_r+0xa8c>)
 801d0e8:	f7ff fb25 	bl	801c736 <_dtoa_r+0x2a>
 801d0ec:	0039      	movs	r1, r7
 801d0ee:	693a      	ldr	r2, [r7, #16]
 801d0f0:	310c      	adds	r1, #12
 801d0f2:	3202      	adds	r2, #2
 801d0f4:	0092      	lsls	r2, r2, #2
 801d0f6:	300c      	adds	r0, #12
 801d0f8:	f7ff fa6a 	bl	801c5d0 <memcpy>
 801d0fc:	2201      	movs	r2, #1
 801d0fe:	0021      	movs	r1, r4
 801d100:	9803      	ldr	r0, [sp, #12]
 801d102:	f000 ffd7 	bl	801e0b4 <__lshift>
 801d106:	9b08      	ldr	r3, [sp, #32]
 801d108:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d10a:	9306      	str	r3, [sp, #24]
 801d10c:	3b01      	subs	r3, #1
 801d10e:	189b      	adds	r3, r3, r2
 801d110:	2201      	movs	r2, #1
 801d112:	9704      	str	r7, [sp, #16]
 801d114:	0007      	movs	r7, r0
 801d116:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d11a:	4013      	ands	r3, r2
 801d11c:	930e      	str	r3, [sp, #56]	@ 0x38
 801d11e:	0031      	movs	r1, r6
 801d120:	9805      	ldr	r0, [sp, #20]
 801d122:	f7ff fa65 	bl	801c5f0 <quorem>
 801d126:	9904      	ldr	r1, [sp, #16]
 801d128:	0005      	movs	r5, r0
 801d12a:	900a      	str	r0, [sp, #40]	@ 0x28
 801d12c:	9805      	ldr	r0, [sp, #20]
 801d12e:	f001 f82d 	bl	801e18c <__mcmp>
 801d132:	003a      	movs	r2, r7
 801d134:	900d      	str	r0, [sp, #52]	@ 0x34
 801d136:	0031      	movs	r1, r6
 801d138:	9803      	ldr	r0, [sp, #12]
 801d13a:	f001 f843 	bl	801e1c4 <__mdiff>
 801d13e:	2201      	movs	r2, #1
 801d140:	68c3      	ldr	r3, [r0, #12]
 801d142:	0004      	movs	r4, r0
 801d144:	3530      	adds	r5, #48	@ 0x30
 801d146:	9209      	str	r2, [sp, #36]	@ 0x24
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d104      	bne.n	801d156 <_dtoa_r+0xa4a>
 801d14c:	0001      	movs	r1, r0
 801d14e:	9805      	ldr	r0, [sp, #20]
 801d150:	f001 f81c 	bl	801e18c <__mcmp>
 801d154:	9009      	str	r0, [sp, #36]	@ 0x24
 801d156:	0021      	movs	r1, r4
 801d158:	9803      	ldr	r0, [sp, #12]
 801d15a:	f000 fd81 	bl	801dc60 <_Bfree>
 801d15e:	9b06      	ldr	r3, [sp, #24]
 801d160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d162:	1c5c      	adds	r4, r3, #1
 801d164:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d166:	4313      	orrs	r3, r2
 801d168:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d16a:	4313      	orrs	r3, r2
 801d16c:	d116      	bne.n	801d19c <_dtoa_r+0xa90>
 801d16e:	2d39      	cmp	r5, #57	@ 0x39
 801d170:	d02f      	beq.n	801d1d2 <_dtoa_r+0xac6>
 801d172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d174:	2b00      	cmp	r3, #0
 801d176:	dd01      	ble.n	801d17c <_dtoa_r+0xa70>
 801d178:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801d17a:	3531      	adds	r5, #49	@ 0x31
 801d17c:	9b06      	ldr	r3, [sp, #24]
 801d17e:	701d      	strb	r5, [r3, #0]
 801d180:	e638      	b.n	801cdf4 <_dtoa_r+0x6e8>
 801d182:	46c0      	nop			@ (mov r8, r8)
 801d184:	40240000 	.word	0x40240000
 801d188:	00000433 	.word	0x00000433
 801d18c:	7ff00000 	.word	0x7ff00000
 801d190:	08020fe9 	.word	0x08020fe9
 801d194:	08020f91 	.word	0x08020f91
 801d198:	000002ef 	.word	0x000002ef
 801d19c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	db04      	blt.n	801d1ac <_dtoa_r+0xaa0>
 801d1a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d1a4:	4313      	orrs	r3, r2
 801d1a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d1a8:	4313      	orrs	r3, r2
 801d1aa:	d11e      	bne.n	801d1ea <_dtoa_r+0xade>
 801d1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	dde4      	ble.n	801d17c <_dtoa_r+0xa70>
 801d1b2:	9905      	ldr	r1, [sp, #20]
 801d1b4:	2201      	movs	r2, #1
 801d1b6:	9803      	ldr	r0, [sp, #12]
 801d1b8:	f000 ff7c 	bl	801e0b4 <__lshift>
 801d1bc:	0031      	movs	r1, r6
 801d1be:	9005      	str	r0, [sp, #20]
 801d1c0:	f000 ffe4 	bl	801e18c <__mcmp>
 801d1c4:	2800      	cmp	r0, #0
 801d1c6:	dc02      	bgt.n	801d1ce <_dtoa_r+0xac2>
 801d1c8:	d1d8      	bne.n	801d17c <_dtoa_r+0xa70>
 801d1ca:	07eb      	lsls	r3, r5, #31
 801d1cc:	d5d6      	bpl.n	801d17c <_dtoa_r+0xa70>
 801d1ce:	2d39      	cmp	r5, #57	@ 0x39
 801d1d0:	d1d2      	bne.n	801d178 <_dtoa_r+0xa6c>
 801d1d2:	2339      	movs	r3, #57	@ 0x39
 801d1d4:	9a06      	ldr	r2, [sp, #24]
 801d1d6:	7013      	strb	r3, [r2, #0]
 801d1d8:	0023      	movs	r3, r4
 801d1da:	001c      	movs	r4, r3
 801d1dc:	3b01      	subs	r3, #1
 801d1de:	781a      	ldrb	r2, [r3, #0]
 801d1e0:	2a39      	cmp	r2, #57	@ 0x39
 801d1e2:	d04f      	beq.n	801d284 <_dtoa_r+0xb78>
 801d1e4:	3201      	adds	r2, #1
 801d1e6:	701a      	strb	r2, [r3, #0]
 801d1e8:	e604      	b.n	801cdf4 <_dtoa_r+0x6e8>
 801d1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	dd03      	ble.n	801d1f8 <_dtoa_r+0xaec>
 801d1f0:	2d39      	cmp	r5, #57	@ 0x39
 801d1f2:	d0ee      	beq.n	801d1d2 <_dtoa_r+0xac6>
 801d1f4:	3501      	adds	r5, #1
 801d1f6:	e7c1      	b.n	801d17c <_dtoa_r+0xa70>
 801d1f8:	9b06      	ldr	r3, [sp, #24]
 801d1fa:	9a06      	ldr	r2, [sp, #24]
 801d1fc:	701d      	strb	r5, [r3, #0]
 801d1fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d200:	4293      	cmp	r3, r2
 801d202:	d02a      	beq.n	801d25a <_dtoa_r+0xb4e>
 801d204:	2300      	movs	r3, #0
 801d206:	220a      	movs	r2, #10
 801d208:	9905      	ldr	r1, [sp, #20]
 801d20a:	9803      	ldr	r0, [sp, #12]
 801d20c:	f000 fd4c 	bl	801dca8 <__multadd>
 801d210:	9b04      	ldr	r3, [sp, #16]
 801d212:	9005      	str	r0, [sp, #20]
 801d214:	42bb      	cmp	r3, r7
 801d216:	d109      	bne.n	801d22c <_dtoa_r+0xb20>
 801d218:	2300      	movs	r3, #0
 801d21a:	220a      	movs	r2, #10
 801d21c:	9904      	ldr	r1, [sp, #16]
 801d21e:	9803      	ldr	r0, [sp, #12]
 801d220:	f000 fd42 	bl	801dca8 <__multadd>
 801d224:	9004      	str	r0, [sp, #16]
 801d226:	0007      	movs	r7, r0
 801d228:	9406      	str	r4, [sp, #24]
 801d22a:	e778      	b.n	801d11e <_dtoa_r+0xa12>
 801d22c:	9904      	ldr	r1, [sp, #16]
 801d22e:	2300      	movs	r3, #0
 801d230:	220a      	movs	r2, #10
 801d232:	9803      	ldr	r0, [sp, #12]
 801d234:	f000 fd38 	bl	801dca8 <__multadd>
 801d238:	2300      	movs	r3, #0
 801d23a:	9004      	str	r0, [sp, #16]
 801d23c:	220a      	movs	r2, #10
 801d23e:	0039      	movs	r1, r7
 801d240:	9803      	ldr	r0, [sp, #12]
 801d242:	f000 fd31 	bl	801dca8 <__multadd>
 801d246:	e7ee      	b.n	801d226 <_dtoa_r+0xb1a>
 801d248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d24a:	2401      	movs	r4, #1
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	dd00      	ble.n	801d252 <_dtoa_r+0xb46>
 801d250:	001c      	movs	r4, r3
 801d252:	9b08      	ldr	r3, [sp, #32]
 801d254:	191c      	adds	r4, r3, r4
 801d256:	2300      	movs	r3, #0
 801d258:	9304      	str	r3, [sp, #16]
 801d25a:	9905      	ldr	r1, [sp, #20]
 801d25c:	2201      	movs	r2, #1
 801d25e:	9803      	ldr	r0, [sp, #12]
 801d260:	f000 ff28 	bl	801e0b4 <__lshift>
 801d264:	0031      	movs	r1, r6
 801d266:	9005      	str	r0, [sp, #20]
 801d268:	f000 ff90 	bl	801e18c <__mcmp>
 801d26c:	2800      	cmp	r0, #0
 801d26e:	dcb3      	bgt.n	801d1d8 <_dtoa_r+0xacc>
 801d270:	d101      	bne.n	801d276 <_dtoa_r+0xb6a>
 801d272:	07ed      	lsls	r5, r5, #31
 801d274:	d4b0      	bmi.n	801d1d8 <_dtoa_r+0xacc>
 801d276:	0023      	movs	r3, r4
 801d278:	001c      	movs	r4, r3
 801d27a:	3b01      	subs	r3, #1
 801d27c:	781a      	ldrb	r2, [r3, #0]
 801d27e:	2a30      	cmp	r2, #48	@ 0x30
 801d280:	d0fa      	beq.n	801d278 <_dtoa_r+0xb6c>
 801d282:	e5b7      	b.n	801cdf4 <_dtoa_r+0x6e8>
 801d284:	9a08      	ldr	r2, [sp, #32]
 801d286:	429a      	cmp	r2, r3
 801d288:	d1a7      	bne.n	801d1da <_dtoa_r+0xace>
 801d28a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d28c:	3301      	adds	r3, #1
 801d28e:	930c      	str	r3, [sp, #48]	@ 0x30
 801d290:	2331      	movs	r3, #49	@ 0x31
 801d292:	7013      	strb	r3, [r2, #0]
 801d294:	e5ae      	b.n	801cdf4 <_dtoa_r+0x6e8>
 801d296:	4b15      	ldr	r3, [pc, #84]	@ (801d2ec <_dtoa_r+0xbe0>)
 801d298:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801d29a:	9308      	str	r3, [sp, #32]
 801d29c:	4b14      	ldr	r3, [pc, #80]	@ (801d2f0 <_dtoa_r+0xbe4>)
 801d29e:	2a00      	cmp	r2, #0
 801d2a0:	d001      	beq.n	801d2a6 <_dtoa_r+0xb9a>
 801d2a2:	f7ff fa7b 	bl	801c79c <_dtoa_r+0x90>
 801d2a6:	f7ff fa7b 	bl	801c7a0 <_dtoa_r+0x94>
 801d2aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d2ac:	2b01      	cmp	r3, #1
 801d2ae:	dc00      	bgt.n	801d2b2 <_dtoa_r+0xba6>
 801d2b0:	e648      	b.n	801cf44 <_dtoa_r+0x838>
 801d2b2:	2001      	movs	r0, #1
 801d2b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d2b6:	e665      	b.n	801cf84 <_dtoa_r+0x878>
 801d2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	dc00      	bgt.n	801d2c0 <_dtoa_r+0xbb4>
 801d2be:	e6d6      	b.n	801d06e <_dtoa_r+0x962>
 801d2c0:	2400      	movs	r4, #0
 801d2c2:	0031      	movs	r1, r6
 801d2c4:	9805      	ldr	r0, [sp, #20]
 801d2c6:	f7ff f993 	bl	801c5f0 <quorem>
 801d2ca:	9b08      	ldr	r3, [sp, #32]
 801d2cc:	3030      	adds	r0, #48	@ 0x30
 801d2ce:	5518      	strb	r0, [r3, r4]
 801d2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2d2:	3401      	adds	r4, #1
 801d2d4:	0005      	movs	r5, r0
 801d2d6:	429c      	cmp	r4, r3
 801d2d8:	dab6      	bge.n	801d248 <_dtoa_r+0xb3c>
 801d2da:	2300      	movs	r3, #0
 801d2dc:	220a      	movs	r2, #10
 801d2de:	9905      	ldr	r1, [sp, #20]
 801d2e0:	9803      	ldr	r0, [sp, #12]
 801d2e2:	f000 fce1 	bl	801dca8 <__multadd>
 801d2e6:	9005      	str	r0, [sp, #20]
 801d2e8:	e7eb      	b.n	801d2c2 <_dtoa_r+0xbb6>
 801d2ea:	46c0      	nop			@ (mov r8, r8)
 801d2ec:	08020f6d 	.word	0x08020f6d
 801d2f0:	08020f75 	.word	0x08020f75

0801d2f4 <_free_r>:
 801d2f4:	b570      	push	{r4, r5, r6, lr}
 801d2f6:	0005      	movs	r5, r0
 801d2f8:	1e0c      	subs	r4, r1, #0
 801d2fa:	d010      	beq.n	801d31e <_free_r+0x2a>
 801d2fc:	3c04      	subs	r4, #4
 801d2fe:	6823      	ldr	r3, [r4, #0]
 801d300:	2b00      	cmp	r3, #0
 801d302:	da00      	bge.n	801d306 <_free_r+0x12>
 801d304:	18e4      	adds	r4, r4, r3
 801d306:	0028      	movs	r0, r5
 801d308:	f000 fc56 	bl	801dbb8 <__malloc_lock>
 801d30c:	4a1d      	ldr	r2, [pc, #116]	@ (801d384 <_free_r+0x90>)
 801d30e:	6813      	ldr	r3, [r2, #0]
 801d310:	2b00      	cmp	r3, #0
 801d312:	d105      	bne.n	801d320 <_free_r+0x2c>
 801d314:	6063      	str	r3, [r4, #4]
 801d316:	6014      	str	r4, [r2, #0]
 801d318:	0028      	movs	r0, r5
 801d31a:	f000 fc55 	bl	801dbc8 <__malloc_unlock>
 801d31e:	bd70      	pop	{r4, r5, r6, pc}
 801d320:	42a3      	cmp	r3, r4
 801d322:	d908      	bls.n	801d336 <_free_r+0x42>
 801d324:	6820      	ldr	r0, [r4, #0]
 801d326:	1821      	adds	r1, r4, r0
 801d328:	428b      	cmp	r3, r1
 801d32a:	d1f3      	bne.n	801d314 <_free_r+0x20>
 801d32c:	6819      	ldr	r1, [r3, #0]
 801d32e:	685b      	ldr	r3, [r3, #4]
 801d330:	1809      	adds	r1, r1, r0
 801d332:	6021      	str	r1, [r4, #0]
 801d334:	e7ee      	b.n	801d314 <_free_r+0x20>
 801d336:	001a      	movs	r2, r3
 801d338:	685b      	ldr	r3, [r3, #4]
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d001      	beq.n	801d342 <_free_r+0x4e>
 801d33e:	42a3      	cmp	r3, r4
 801d340:	d9f9      	bls.n	801d336 <_free_r+0x42>
 801d342:	6811      	ldr	r1, [r2, #0]
 801d344:	1850      	adds	r0, r2, r1
 801d346:	42a0      	cmp	r0, r4
 801d348:	d10b      	bne.n	801d362 <_free_r+0x6e>
 801d34a:	6820      	ldr	r0, [r4, #0]
 801d34c:	1809      	adds	r1, r1, r0
 801d34e:	1850      	adds	r0, r2, r1
 801d350:	6011      	str	r1, [r2, #0]
 801d352:	4283      	cmp	r3, r0
 801d354:	d1e0      	bne.n	801d318 <_free_r+0x24>
 801d356:	6818      	ldr	r0, [r3, #0]
 801d358:	685b      	ldr	r3, [r3, #4]
 801d35a:	1841      	adds	r1, r0, r1
 801d35c:	6011      	str	r1, [r2, #0]
 801d35e:	6053      	str	r3, [r2, #4]
 801d360:	e7da      	b.n	801d318 <_free_r+0x24>
 801d362:	42a0      	cmp	r0, r4
 801d364:	d902      	bls.n	801d36c <_free_r+0x78>
 801d366:	230c      	movs	r3, #12
 801d368:	602b      	str	r3, [r5, #0]
 801d36a:	e7d5      	b.n	801d318 <_free_r+0x24>
 801d36c:	6820      	ldr	r0, [r4, #0]
 801d36e:	1821      	adds	r1, r4, r0
 801d370:	428b      	cmp	r3, r1
 801d372:	d103      	bne.n	801d37c <_free_r+0x88>
 801d374:	6819      	ldr	r1, [r3, #0]
 801d376:	685b      	ldr	r3, [r3, #4]
 801d378:	1809      	adds	r1, r1, r0
 801d37a:	6021      	str	r1, [r4, #0]
 801d37c:	6063      	str	r3, [r4, #4]
 801d37e:	6054      	str	r4, [r2, #4]
 801d380:	e7ca      	b.n	801d318 <_free_r+0x24>
 801d382:	46c0      	nop			@ (mov r8, r8)
 801d384:	200038bc 	.word	0x200038bc

0801d388 <rshift>:
 801d388:	0002      	movs	r2, r0
 801d38a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d38c:	6904      	ldr	r4, [r0, #16]
 801d38e:	b085      	sub	sp, #20
 801d390:	3214      	adds	r2, #20
 801d392:	114b      	asrs	r3, r1, #5
 801d394:	0016      	movs	r6, r2
 801d396:	9302      	str	r3, [sp, #8]
 801d398:	429c      	cmp	r4, r3
 801d39a:	dd31      	ble.n	801d400 <rshift+0x78>
 801d39c:	261f      	movs	r6, #31
 801d39e:	000f      	movs	r7, r1
 801d3a0:	009b      	lsls	r3, r3, #2
 801d3a2:	00a5      	lsls	r5, r4, #2
 801d3a4:	18d3      	adds	r3, r2, r3
 801d3a6:	4037      	ands	r7, r6
 801d3a8:	1955      	adds	r5, r2, r5
 801d3aa:	9300      	str	r3, [sp, #0]
 801d3ac:	9701      	str	r7, [sp, #4]
 801d3ae:	4231      	tst	r1, r6
 801d3b0:	d10d      	bne.n	801d3ce <rshift+0x46>
 801d3b2:	0016      	movs	r6, r2
 801d3b4:	0019      	movs	r1, r3
 801d3b6:	428d      	cmp	r5, r1
 801d3b8:	d836      	bhi.n	801d428 <rshift+0xa0>
 801d3ba:	9b00      	ldr	r3, [sp, #0]
 801d3bc:	2600      	movs	r6, #0
 801d3be:	3b03      	subs	r3, #3
 801d3c0:	429d      	cmp	r5, r3
 801d3c2:	d302      	bcc.n	801d3ca <rshift+0x42>
 801d3c4:	9b02      	ldr	r3, [sp, #8]
 801d3c6:	1ae4      	subs	r4, r4, r3
 801d3c8:	00a6      	lsls	r6, r4, #2
 801d3ca:	1996      	adds	r6, r2, r6
 801d3cc:	e018      	b.n	801d400 <rshift+0x78>
 801d3ce:	2120      	movs	r1, #32
 801d3d0:	9e01      	ldr	r6, [sp, #4]
 801d3d2:	9f01      	ldr	r7, [sp, #4]
 801d3d4:	1b89      	subs	r1, r1, r6
 801d3d6:	9e00      	ldr	r6, [sp, #0]
 801d3d8:	9103      	str	r1, [sp, #12]
 801d3da:	ce02      	ldmia	r6!, {r1}
 801d3dc:	4694      	mov	ip, r2
 801d3de:	40f9      	lsrs	r1, r7
 801d3e0:	42b5      	cmp	r5, r6
 801d3e2:	d816      	bhi.n	801d412 <rshift+0x8a>
 801d3e4:	9b00      	ldr	r3, [sp, #0]
 801d3e6:	2600      	movs	r6, #0
 801d3e8:	3301      	adds	r3, #1
 801d3ea:	429d      	cmp	r5, r3
 801d3ec:	d303      	bcc.n	801d3f6 <rshift+0x6e>
 801d3ee:	9b02      	ldr	r3, [sp, #8]
 801d3f0:	1ae4      	subs	r4, r4, r3
 801d3f2:	00a6      	lsls	r6, r4, #2
 801d3f4:	3e04      	subs	r6, #4
 801d3f6:	1996      	adds	r6, r2, r6
 801d3f8:	6031      	str	r1, [r6, #0]
 801d3fa:	2900      	cmp	r1, #0
 801d3fc:	d000      	beq.n	801d400 <rshift+0x78>
 801d3fe:	3604      	adds	r6, #4
 801d400:	1ab1      	subs	r1, r6, r2
 801d402:	1089      	asrs	r1, r1, #2
 801d404:	6101      	str	r1, [r0, #16]
 801d406:	4296      	cmp	r6, r2
 801d408:	d101      	bne.n	801d40e <rshift+0x86>
 801d40a:	2300      	movs	r3, #0
 801d40c:	6143      	str	r3, [r0, #20]
 801d40e:	b005      	add	sp, #20
 801d410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d412:	6837      	ldr	r7, [r6, #0]
 801d414:	9b03      	ldr	r3, [sp, #12]
 801d416:	409f      	lsls	r7, r3
 801d418:	430f      	orrs	r7, r1
 801d41a:	4661      	mov	r1, ip
 801d41c:	c180      	stmia	r1!, {r7}
 801d41e:	468c      	mov	ip, r1
 801d420:	9b01      	ldr	r3, [sp, #4]
 801d422:	ce02      	ldmia	r6!, {r1}
 801d424:	40d9      	lsrs	r1, r3
 801d426:	e7db      	b.n	801d3e0 <rshift+0x58>
 801d428:	c980      	ldmia	r1!, {r7}
 801d42a:	c680      	stmia	r6!, {r7}
 801d42c:	e7c3      	b.n	801d3b6 <rshift+0x2e>

0801d42e <__hexdig_fun>:
 801d42e:	0002      	movs	r2, r0
 801d430:	3a30      	subs	r2, #48	@ 0x30
 801d432:	0003      	movs	r3, r0
 801d434:	2a09      	cmp	r2, #9
 801d436:	d802      	bhi.n	801d43e <__hexdig_fun+0x10>
 801d438:	3b20      	subs	r3, #32
 801d43a:	b2d8      	uxtb	r0, r3
 801d43c:	4770      	bx	lr
 801d43e:	0002      	movs	r2, r0
 801d440:	3a61      	subs	r2, #97	@ 0x61
 801d442:	2a05      	cmp	r2, #5
 801d444:	d801      	bhi.n	801d44a <__hexdig_fun+0x1c>
 801d446:	3b47      	subs	r3, #71	@ 0x47
 801d448:	e7f7      	b.n	801d43a <__hexdig_fun+0xc>
 801d44a:	001a      	movs	r2, r3
 801d44c:	3a41      	subs	r2, #65	@ 0x41
 801d44e:	2000      	movs	r0, #0
 801d450:	2a05      	cmp	r2, #5
 801d452:	d8f3      	bhi.n	801d43c <__hexdig_fun+0xe>
 801d454:	3b27      	subs	r3, #39	@ 0x27
 801d456:	e7f0      	b.n	801d43a <__hexdig_fun+0xc>

0801d458 <__gethex>:
 801d458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d45a:	b089      	sub	sp, #36	@ 0x24
 801d45c:	9307      	str	r3, [sp, #28]
 801d45e:	680b      	ldr	r3, [r1, #0]
 801d460:	9201      	str	r2, [sp, #4]
 801d462:	9003      	str	r0, [sp, #12]
 801d464:	9106      	str	r1, [sp, #24]
 801d466:	1c9a      	adds	r2, r3, #2
 801d468:	0011      	movs	r1, r2
 801d46a:	3201      	adds	r2, #1
 801d46c:	1e50      	subs	r0, r2, #1
 801d46e:	7800      	ldrb	r0, [r0, #0]
 801d470:	2830      	cmp	r0, #48	@ 0x30
 801d472:	d0f9      	beq.n	801d468 <__gethex+0x10>
 801d474:	1acb      	subs	r3, r1, r3
 801d476:	3b02      	subs	r3, #2
 801d478:	9305      	str	r3, [sp, #20]
 801d47a:	9100      	str	r1, [sp, #0]
 801d47c:	f7ff ffd7 	bl	801d42e <__hexdig_fun>
 801d480:	2300      	movs	r3, #0
 801d482:	001d      	movs	r5, r3
 801d484:	9302      	str	r3, [sp, #8]
 801d486:	4298      	cmp	r0, r3
 801d488:	d11e      	bne.n	801d4c8 <__gethex+0x70>
 801d48a:	2201      	movs	r2, #1
 801d48c:	49a6      	ldr	r1, [pc, #664]	@ (801d728 <__gethex+0x2d0>)
 801d48e:	9800      	ldr	r0, [sp, #0]
 801d490:	f7fe ffd8 	bl	801c444 <strncmp>
 801d494:	0007      	movs	r7, r0
 801d496:	42a8      	cmp	r0, r5
 801d498:	d000      	beq.n	801d49c <__gethex+0x44>
 801d49a:	e06a      	b.n	801d572 <__gethex+0x11a>
 801d49c:	9b00      	ldr	r3, [sp, #0]
 801d49e:	7858      	ldrb	r0, [r3, #1]
 801d4a0:	1c5c      	adds	r4, r3, #1
 801d4a2:	f7ff ffc4 	bl	801d42e <__hexdig_fun>
 801d4a6:	2301      	movs	r3, #1
 801d4a8:	9302      	str	r3, [sp, #8]
 801d4aa:	42a8      	cmp	r0, r5
 801d4ac:	d02f      	beq.n	801d50e <__gethex+0xb6>
 801d4ae:	9400      	str	r4, [sp, #0]
 801d4b0:	9b00      	ldr	r3, [sp, #0]
 801d4b2:	7818      	ldrb	r0, [r3, #0]
 801d4b4:	2830      	cmp	r0, #48	@ 0x30
 801d4b6:	d009      	beq.n	801d4cc <__gethex+0x74>
 801d4b8:	f7ff ffb9 	bl	801d42e <__hexdig_fun>
 801d4bc:	4242      	negs	r2, r0
 801d4be:	4142      	adcs	r2, r0
 801d4c0:	2301      	movs	r3, #1
 801d4c2:	0025      	movs	r5, r4
 801d4c4:	9202      	str	r2, [sp, #8]
 801d4c6:	9305      	str	r3, [sp, #20]
 801d4c8:	9c00      	ldr	r4, [sp, #0]
 801d4ca:	e004      	b.n	801d4d6 <__gethex+0x7e>
 801d4cc:	9b00      	ldr	r3, [sp, #0]
 801d4ce:	3301      	adds	r3, #1
 801d4d0:	9300      	str	r3, [sp, #0]
 801d4d2:	e7ed      	b.n	801d4b0 <__gethex+0x58>
 801d4d4:	3401      	adds	r4, #1
 801d4d6:	7820      	ldrb	r0, [r4, #0]
 801d4d8:	f7ff ffa9 	bl	801d42e <__hexdig_fun>
 801d4dc:	1e07      	subs	r7, r0, #0
 801d4de:	d1f9      	bne.n	801d4d4 <__gethex+0x7c>
 801d4e0:	2201      	movs	r2, #1
 801d4e2:	0020      	movs	r0, r4
 801d4e4:	4990      	ldr	r1, [pc, #576]	@ (801d728 <__gethex+0x2d0>)
 801d4e6:	f7fe ffad 	bl	801c444 <strncmp>
 801d4ea:	2800      	cmp	r0, #0
 801d4ec:	d10d      	bne.n	801d50a <__gethex+0xb2>
 801d4ee:	2d00      	cmp	r5, #0
 801d4f0:	d106      	bne.n	801d500 <__gethex+0xa8>
 801d4f2:	3401      	adds	r4, #1
 801d4f4:	0025      	movs	r5, r4
 801d4f6:	7820      	ldrb	r0, [r4, #0]
 801d4f8:	f7ff ff99 	bl	801d42e <__hexdig_fun>
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	d102      	bne.n	801d506 <__gethex+0xae>
 801d500:	1b2d      	subs	r5, r5, r4
 801d502:	00af      	lsls	r7, r5, #2
 801d504:	e003      	b.n	801d50e <__gethex+0xb6>
 801d506:	3401      	adds	r4, #1
 801d508:	e7f5      	b.n	801d4f6 <__gethex+0x9e>
 801d50a:	2d00      	cmp	r5, #0
 801d50c:	d1f8      	bne.n	801d500 <__gethex+0xa8>
 801d50e:	2220      	movs	r2, #32
 801d510:	7823      	ldrb	r3, [r4, #0]
 801d512:	0026      	movs	r6, r4
 801d514:	4393      	bics	r3, r2
 801d516:	2b50      	cmp	r3, #80	@ 0x50
 801d518:	d11d      	bne.n	801d556 <__gethex+0xfe>
 801d51a:	7863      	ldrb	r3, [r4, #1]
 801d51c:	2b2b      	cmp	r3, #43	@ 0x2b
 801d51e:	d02d      	beq.n	801d57c <__gethex+0x124>
 801d520:	2b2d      	cmp	r3, #45	@ 0x2d
 801d522:	d02f      	beq.n	801d584 <__gethex+0x12c>
 801d524:	2300      	movs	r3, #0
 801d526:	1c66      	adds	r6, r4, #1
 801d528:	9304      	str	r3, [sp, #16]
 801d52a:	7830      	ldrb	r0, [r6, #0]
 801d52c:	f7ff ff7f 	bl	801d42e <__hexdig_fun>
 801d530:	1e43      	subs	r3, r0, #1
 801d532:	b2db      	uxtb	r3, r3
 801d534:	0005      	movs	r5, r0
 801d536:	2b18      	cmp	r3, #24
 801d538:	d82a      	bhi.n	801d590 <__gethex+0x138>
 801d53a:	7870      	ldrb	r0, [r6, #1]
 801d53c:	f7ff ff77 	bl	801d42e <__hexdig_fun>
 801d540:	1e43      	subs	r3, r0, #1
 801d542:	b2db      	uxtb	r3, r3
 801d544:	3601      	adds	r6, #1
 801d546:	3d10      	subs	r5, #16
 801d548:	2b18      	cmp	r3, #24
 801d54a:	d91d      	bls.n	801d588 <__gethex+0x130>
 801d54c:	9b04      	ldr	r3, [sp, #16]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d000      	beq.n	801d554 <__gethex+0xfc>
 801d552:	426d      	negs	r5, r5
 801d554:	197f      	adds	r7, r7, r5
 801d556:	9b06      	ldr	r3, [sp, #24]
 801d558:	601e      	str	r6, [r3, #0]
 801d55a:	9b02      	ldr	r3, [sp, #8]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d019      	beq.n	801d594 <__gethex+0x13c>
 801d560:	9b05      	ldr	r3, [sp, #20]
 801d562:	2606      	movs	r6, #6
 801d564:	425a      	negs	r2, r3
 801d566:	4153      	adcs	r3, r2
 801d568:	425b      	negs	r3, r3
 801d56a:	401e      	ands	r6, r3
 801d56c:	0030      	movs	r0, r6
 801d56e:	b009      	add	sp, #36	@ 0x24
 801d570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d572:	2301      	movs	r3, #1
 801d574:	2700      	movs	r7, #0
 801d576:	9c00      	ldr	r4, [sp, #0]
 801d578:	9302      	str	r3, [sp, #8]
 801d57a:	e7c8      	b.n	801d50e <__gethex+0xb6>
 801d57c:	2300      	movs	r3, #0
 801d57e:	9304      	str	r3, [sp, #16]
 801d580:	1ca6      	adds	r6, r4, #2
 801d582:	e7d2      	b.n	801d52a <__gethex+0xd2>
 801d584:	2301      	movs	r3, #1
 801d586:	e7fa      	b.n	801d57e <__gethex+0x126>
 801d588:	230a      	movs	r3, #10
 801d58a:	435d      	muls	r5, r3
 801d58c:	182d      	adds	r5, r5, r0
 801d58e:	e7d4      	b.n	801d53a <__gethex+0xe2>
 801d590:	0026      	movs	r6, r4
 801d592:	e7e0      	b.n	801d556 <__gethex+0xfe>
 801d594:	9b00      	ldr	r3, [sp, #0]
 801d596:	9902      	ldr	r1, [sp, #8]
 801d598:	1ae3      	subs	r3, r4, r3
 801d59a:	3b01      	subs	r3, #1
 801d59c:	2b07      	cmp	r3, #7
 801d59e:	dc0a      	bgt.n	801d5b6 <__gethex+0x15e>
 801d5a0:	9803      	ldr	r0, [sp, #12]
 801d5a2:	f000 fb19 	bl	801dbd8 <_Balloc>
 801d5a6:	1e05      	subs	r5, r0, #0
 801d5a8:	d108      	bne.n	801d5bc <__gethex+0x164>
 801d5aa:	002a      	movs	r2, r5
 801d5ac:	21e4      	movs	r1, #228	@ 0xe4
 801d5ae:	4b5f      	ldr	r3, [pc, #380]	@ (801d72c <__gethex+0x2d4>)
 801d5b0:	485f      	ldr	r0, [pc, #380]	@ (801d730 <__gethex+0x2d8>)
 801d5b2:	f001 fc03 	bl	801edbc <__assert_func>
 801d5b6:	3101      	adds	r1, #1
 801d5b8:	105b      	asrs	r3, r3, #1
 801d5ba:	e7ef      	b.n	801d59c <__gethex+0x144>
 801d5bc:	0003      	movs	r3, r0
 801d5be:	3314      	adds	r3, #20
 801d5c0:	9302      	str	r3, [sp, #8]
 801d5c2:	9305      	str	r3, [sp, #20]
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	001e      	movs	r6, r3
 801d5c8:	9304      	str	r3, [sp, #16]
 801d5ca:	9b00      	ldr	r3, [sp, #0]
 801d5cc:	42a3      	cmp	r3, r4
 801d5ce:	d338      	bcc.n	801d642 <__gethex+0x1ea>
 801d5d0:	9c05      	ldr	r4, [sp, #20]
 801d5d2:	9b02      	ldr	r3, [sp, #8]
 801d5d4:	c440      	stmia	r4!, {r6}
 801d5d6:	1ae4      	subs	r4, r4, r3
 801d5d8:	10a4      	asrs	r4, r4, #2
 801d5da:	0030      	movs	r0, r6
 801d5dc:	612c      	str	r4, [r5, #16]
 801d5de:	f000 fbf3 	bl	801ddc8 <__hi0bits>
 801d5e2:	9b01      	ldr	r3, [sp, #4]
 801d5e4:	0164      	lsls	r4, r4, #5
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	1a26      	subs	r6, r4, r0
 801d5ea:	9300      	str	r3, [sp, #0]
 801d5ec:	429e      	cmp	r6, r3
 801d5ee:	dd52      	ble.n	801d696 <__gethex+0x23e>
 801d5f0:	1af6      	subs	r6, r6, r3
 801d5f2:	0031      	movs	r1, r6
 801d5f4:	0028      	movs	r0, r5
 801d5f6:	f000 ff96 	bl	801e526 <__any_on>
 801d5fa:	1e04      	subs	r4, r0, #0
 801d5fc:	d00f      	beq.n	801d61e <__gethex+0x1c6>
 801d5fe:	2401      	movs	r4, #1
 801d600:	231f      	movs	r3, #31
 801d602:	0020      	movs	r0, r4
 801d604:	1e72      	subs	r2, r6, #1
 801d606:	4013      	ands	r3, r2
 801d608:	4098      	lsls	r0, r3
 801d60a:	0003      	movs	r3, r0
 801d60c:	1151      	asrs	r1, r2, #5
 801d60e:	9802      	ldr	r0, [sp, #8]
 801d610:	0089      	lsls	r1, r1, #2
 801d612:	5809      	ldr	r1, [r1, r0]
 801d614:	4219      	tst	r1, r3
 801d616:	d002      	beq.n	801d61e <__gethex+0x1c6>
 801d618:	42a2      	cmp	r2, r4
 801d61a:	dc34      	bgt.n	801d686 <__gethex+0x22e>
 801d61c:	2402      	movs	r4, #2
 801d61e:	0031      	movs	r1, r6
 801d620:	0028      	movs	r0, r5
 801d622:	f7ff feb1 	bl	801d388 <rshift>
 801d626:	19bf      	adds	r7, r7, r6
 801d628:	9b01      	ldr	r3, [sp, #4]
 801d62a:	689b      	ldr	r3, [r3, #8]
 801d62c:	42bb      	cmp	r3, r7
 801d62e:	da42      	bge.n	801d6b6 <__gethex+0x25e>
 801d630:	0029      	movs	r1, r5
 801d632:	9803      	ldr	r0, [sp, #12]
 801d634:	f000 fb14 	bl	801dc60 <_Bfree>
 801d638:	2300      	movs	r3, #0
 801d63a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d63c:	26a3      	movs	r6, #163	@ 0xa3
 801d63e:	6013      	str	r3, [r2, #0]
 801d640:	e794      	b.n	801d56c <__gethex+0x114>
 801d642:	3c01      	subs	r4, #1
 801d644:	7823      	ldrb	r3, [r4, #0]
 801d646:	2b2e      	cmp	r3, #46	@ 0x2e
 801d648:	d012      	beq.n	801d670 <__gethex+0x218>
 801d64a:	9b04      	ldr	r3, [sp, #16]
 801d64c:	2b20      	cmp	r3, #32
 801d64e:	d104      	bne.n	801d65a <__gethex+0x202>
 801d650:	9b05      	ldr	r3, [sp, #20]
 801d652:	c340      	stmia	r3!, {r6}
 801d654:	2600      	movs	r6, #0
 801d656:	9305      	str	r3, [sp, #20]
 801d658:	9604      	str	r6, [sp, #16]
 801d65a:	7820      	ldrb	r0, [r4, #0]
 801d65c:	f7ff fee7 	bl	801d42e <__hexdig_fun>
 801d660:	230f      	movs	r3, #15
 801d662:	4018      	ands	r0, r3
 801d664:	9b04      	ldr	r3, [sp, #16]
 801d666:	4098      	lsls	r0, r3
 801d668:	3304      	adds	r3, #4
 801d66a:	4306      	orrs	r6, r0
 801d66c:	9304      	str	r3, [sp, #16]
 801d66e:	e7ac      	b.n	801d5ca <__gethex+0x172>
 801d670:	9b00      	ldr	r3, [sp, #0]
 801d672:	42a3      	cmp	r3, r4
 801d674:	d8e9      	bhi.n	801d64a <__gethex+0x1f2>
 801d676:	2201      	movs	r2, #1
 801d678:	0020      	movs	r0, r4
 801d67a:	492b      	ldr	r1, [pc, #172]	@ (801d728 <__gethex+0x2d0>)
 801d67c:	f7fe fee2 	bl	801c444 <strncmp>
 801d680:	2800      	cmp	r0, #0
 801d682:	d1e2      	bne.n	801d64a <__gethex+0x1f2>
 801d684:	e7a1      	b.n	801d5ca <__gethex+0x172>
 801d686:	0028      	movs	r0, r5
 801d688:	1eb1      	subs	r1, r6, #2
 801d68a:	f000 ff4c 	bl	801e526 <__any_on>
 801d68e:	2800      	cmp	r0, #0
 801d690:	d0c4      	beq.n	801d61c <__gethex+0x1c4>
 801d692:	2403      	movs	r4, #3
 801d694:	e7c3      	b.n	801d61e <__gethex+0x1c6>
 801d696:	9b00      	ldr	r3, [sp, #0]
 801d698:	2400      	movs	r4, #0
 801d69a:	429e      	cmp	r6, r3
 801d69c:	dac4      	bge.n	801d628 <__gethex+0x1d0>
 801d69e:	1b9e      	subs	r6, r3, r6
 801d6a0:	0029      	movs	r1, r5
 801d6a2:	0032      	movs	r2, r6
 801d6a4:	9803      	ldr	r0, [sp, #12]
 801d6a6:	f000 fd05 	bl	801e0b4 <__lshift>
 801d6aa:	0003      	movs	r3, r0
 801d6ac:	3314      	adds	r3, #20
 801d6ae:	0005      	movs	r5, r0
 801d6b0:	1bbf      	subs	r7, r7, r6
 801d6b2:	9302      	str	r3, [sp, #8]
 801d6b4:	e7b8      	b.n	801d628 <__gethex+0x1d0>
 801d6b6:	9b01      	ldr	r3, [sp, #4]
 801d6b8:	685e      	ldr	r6, [r3, #4]
 801d6ba:	42be      	cmp	r6, r7
 801d6bc:	dd6f      	ble.n	801d79e <__gethex+0x346>
 801d6be:	9b00      	ldr	r3, [sp, #0]
 801d6c0:	1bf6      	subs	r6, r6, r7
 801d6c2:	42b3      	cmp	r3, r6
 801d6c4:	dc36      	bgt.n	801d734 <__gethex+0x2dc>
 801d6c6:	9b01      	ldr	r3, [sp, #4]
 801d6c8:	68db      	ldr	r3, [r3, #12]
 801d6ca:	2b02      	cmp	r3, #2
 801d6cc:	d024      	beq.n	801d718 <__gethex+0x2c0>
 801d6ce:	2b03      	cmp	r3, #3
 801d6d0:	d026      	beq.n	801d720 <__gethex+0x2c8>
 801d6d2:	2b01      	cmp	r3, #1
 801d6d4:	d117      	bne.n	801d706 <__gethex+0x2ae>
 801d6d6:	9b00      	ldr	r3, [sp, #0]
 801d6d8:	42b3      	cmp	r3, r6
 801d6da:	d114      	bne.n	801d706 <__gethex+0x2ae>
 801d6dc:	2b01      	cmp	r3, #1
 801d6de:	d10b      	bne.n	801d6f8 <__gethex+0x2a0>
 801d6e0:	9b01      	ldr	r3, [sp, #4]
 801d6e2:	9a07      	ldr	r2, [sp, #28]
 801d6e4:	685b      	ldr	r3, [r3, #4]
 801d6e6:	2662      	movs	r6, #98	@ 0x62
 801d6e8:	6013      	str	r3, [r2, #0]
 801d6ea:	2301      	movs	r3, #1
 801d6ec:	9a02      	ldr	r2, [sp, #8]
 801d6ee:	612b      	str	r3, [r5, #16]
 801d6f0:	6013      	str	r3, [r2, #0]
 801d6f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6f4:	601d      	str	r5, [r3, #0]
 801d6f6:	e739      	b.n	801d56c <__gethex+0x114>
 801d6f8:	9900      	ldr	r1, [sp, #0]
 801d6fa:	0028      	movs	r0, r5
 801d6fc:	3901      	subs	r1, #1
 801d6fe:	f000 ff12 	bl	801e526 <__any_on>
 801d702:	2800      	cmp	r0, #0
 801d704:	d1ec      	bne.n	801d6e0 <__gethex+0x288>
 801d706:	0029      	movs	r1, r5
 801d708:	9803      	ldr	r0, [sp, #12]
 801d70a:	f000 faa9 	bl	801dc60 <_Bfree>
 801d70e:	2300      	movs	r3, #0
 801d710:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d712:	2650      	movs	r6, #80	@ 0x50
 801d714:	6013      	str	r3, [r2, #0]
 801d716:	e729      	b.n	801d56c <__gethex+0x114>
 801d718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d1f3      	bne.n	801d706 <__gethex+0x2ae>
 801d71e:	e7df      	b.n	801d6e0 <__gethex+0x288>
 801d720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d722:	2b00      	cmp	r3, #0
 801d724:	d1dc      	bne.n	801d6e0 <__gethex+0x288>
 801d726:	e7ee      	b.n	801d706 <__gethex+0x2ae>
 801d728:	08020dd8 	.word	0x08020dd8
 801d72c:	08020fe9 	.word	0x08020fe9
 801d730:	08020ffa 	.word	0x08020ffa
 801d734:	1e77      	subs	r7, r6, #1
 801d736:	2c00      	cmp	r4, #0
 801d738:	d12f      	bne.n	801d79a <__gethex+0x342>
 801d73a:	2f00      	cmp	r7, #0
 801d73c:	d004      	beq.n	801d748 <__gethex+0x2f0>
 801d73e:	0039      	movs	r1, r7
 801d740:	0028      	movs	r0, r5
 801d742:	f000 fef0 	bl	801e526 <__any_on>
 801d746:	0004      	movs	r4, r0
 801d748:	231f      	movs	r3, #31
 801d74a:	117a      	asrs	r2, r7, #5
 801d74c:	401f      	ands	r7, r3
 801d74e:	3b1e      	subs	r3, #30
 801d750:	40bb      	lsls	r3, r7
 801d752:	9902      	ldr	r1, [sp, #8]
 801d754:	0092      	lsls	r2, r2, #2
 801d756:	5852      	ldr	r2, [r2, r1]
 801d758:	421a      	tst	r2, r3
 801d75a:	d001      	beq.n	801d760 <__gethex+0x308>
 801d75c:	2302      	movs	r3, #2
 801d75e:	431c      	orrs	r4, r3
 801d760:	9b00      	ldr	r3, [sp, #0]
 801d762:	0031      	movs	r1, r6
 801d764:	1b9b      	subs	r3, r3, r6
 801d766:	2602      	movs	r6, #2
 801d768:	0028      	movs	r0, r5
 801d76a:	9300      	str	r3, [sp, #0]
 801d76c:	f7ff fe0c 	bl	801d388 <rshift>
 801d770:	9b01      	ldr	r3, [sp, #4]
 801d772:	685f      	ldr	r7, [r3, #4]
 801d774:	2c00      	cmp	r4, #0
 801d776:	d03f      	beq.n	801d7f8 <__gethex+0x3a0>
 801d778:	9b01      	ldr	r3, [sp, #4]
 801d77a:	68db      	ldr	r3, [r3, #12]
 801d77c:	2b02      	cmp	r3, #2
 801d77e:	d010      	beq.n	801d7a2 <__gethex+0x34a>
 801d780:	2b03      	cmp	r3, #3
 801d782:	d012      	beq.n	801d7aa <__gethex+0x352>
 801d784:	2b01      	cmp	r3, #1
 801d786:	d106      	bne.n	801d796 <__gethex+0x33e>
 801d788:	07a2      	lsls	r2, r4, #30
 801d78a:	d504      	bpl.n	801d796 <__gethex+0x33e>
 801d78c:	9a02      	ldr	r2, [sp, #8]
 801d78e:	6812      	ldr	r2, [r2, #0]
 801d790:	4314      	orrs	r4, r2
 801d792:	421c      	tst	r4, r3
 801d794:	d10c      	bne.n	801d7b0 <__gethex+0x358>
 801d796:	2310      	movs	r3, #16
 801d798:	e02d      	b.n	801d7f6 <__gethex+0x39e>
 801d79a:	2401      	movs	r4, #1
 801d79c:	e7d4      	b.n	801d748 <__gethex+0x2f0>
 801d79e:	2601      	movs	r6, #1
 801d7a0:	e7e8      	b.n	801d774 <__gethex+0x31c>
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d7a6:	1a9b      	subs	r3, r3, r2
 801d7a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d7aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d0f2      	beq.n	801d796 <__gethex+0x33e>
 801d7b0:	692b      	ldr	r3, [r5, #16]
 801d7b2:	2000      	movs	r0, #0
 801d7b4:	9302      	str	r3, [sp, #8]
 801d7b6:	009b      	lsls	r3, r3, #2
 801d7b8:	9304      	str	r3, [sp, #16]
 801d7ba:	002b      	movs	r3, r5
 801d7bc:	9a04      	ldr	r2, [sp, #16]
 801d7be:	3314      	adds	r3, #20
 801d7c0:	1899      	adds	r1, r3, r2
 801d7c2:	681a      	ldr	r2, [r3, #0]
 801d7c4:	1c54      	adds	r4, r2, #1
 801d7c6:	d01c      	beq.n	801d802 <__gethex+0x3aa>
 801d7c8:	3201      	adds	r2, #1
 801d7ca:	601a      	str	r2, [r3, #0]
 801d7cc:	002b      	movs	r3, r5
 801d7ce:	3314      	adds	r3, #20
 801d7d0:	2e02      	cmp	r6, #2
 801d7d2:	d13f      	bne.n	801d854 <__gethex+0x3fc>
 801d7d4:	9a01      	ldr	r2, [sp, #4]
 801d7d6:	9900      	ldr	r1, [sp, #0]
 801d7d8:	6812      	ldr	r2, [r2, #0]
 801d7da:	3a01      	subs	r2, #1
 801d7dc:	428a      	cmp	r2, r1
 801d7de:	d109      	bne.n	801d7f4 <__gethex+0x39c>
 801d7e0:	000a      	movs	r2, r1
 801d7e2:	201f      	movs	r0, #31
 801d7e4:	4010      	ands	r0, r2
 801d7e6:	2201      	movs	r2, #1
 801d7e8:	4082      	lsls	r2, r0
 801d7ea:	1149      	asrs	r1, r1, #5
 801d7ec:	0089      	lsls	r1, r1, #2
 801d7ee:	58cb      	ldr	r3, [r1, r3]
 801d7f0:	4213      	tst	r3, r2
 801d7f2:	d13d      	bne.n	801d870 <__gethex+0x418>
 801d7f4:	2320      	movs	r3, #32
 801d7f6:	431e      	orrs	r6, r3
 801d7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7fa:	601d      	str	r5, [r3, #0]
 801d7fc:	9b07      	ldr	r3, [sp, #28]
 801d7fe:	601f      	str	r7, [r3, #0]
 801d800:	e6b4      	b.n	801d56c <__gethex+0x114>
 801d802:	c301      	stmia	r3!, {r0}
 801d804:	4299      	cmp	r1, r3
 801d806:	d8dc      	bhi.n	801d7c2 <__gethex+0x36a>
 801d808:	68ab      	ldr	r3, [r5, #8]
 801d80a:	9a02      	ldr	r2, [sp, #8]
 801d80c:	429a      	cmp	r2, r3
 801d80e:	db18      	blt.n	801d842 <__gethex+0x3ea>
 801d810:	6869      	ldr	r1, [r5, #4]
 801d812:	9803      	ldr	r0, [sp, #12]
 801d814:	3101      	adds	r1, #1
 801d816:	f000 f9df 	bl	801dbd8 <_Balloc>
 801d81a:	1e04      	subs	r4, r0, #0
 801d81c:	d104      	bne.n	801d828 <__gethex+0x3d0>
 801d81e:	0022      	movs	r2, r4
 801d820:	2184      	movs	r1, #132	@ 0x84
 801d822:	4b1d      	ldr	r3, [pc, #116]	@ (801d898 <__gethex+0x440>)
 801d824:	481d      	ldr	r0, [pc, #116]	@ (801d89c <__gethex+0x444>)
 801d826:	e6c4      	b.n	801d5b2 <__gethex+0x15a>
 801d828:	0029      	movs	r1, r5
 801d82a:	692a      	ldr	r2, [r5, #16]
 801d82c:	310c      	adds	r1, #12
 801d82e:	3202      	adds	r2, #2
 801d830:	0092      	lsls	r2, r2, #2
 801d832:	300c      	adds	r0, #12
 801d834:	f7fe fecc 	bl	801c5d0 <memcpy>
 801d838:	0029      	movs	r1, r5
 801d83a:	9803      	ldr	r0, [sp, #12]
 801d83c:	f000 fa10 	bl	801dc60 <_Bfree>
 801d840:	0025      	movs	r5, r4
 801d842:	692b      	ldr	r3, [r5, #16]
 801d844:	1c5a      	adds	r2, r3, #1
 801d846:	612a      	str	r2, [r5, #16]
 801d848:	2201      	movs	r2, #1
 801d84a:	3304      	adds	r3, #4
 801d84c:	009b      	lsls	r3, r3, #2
 801d84e:	18eb      	adds	r3, r5, r3
 801d850:	605a      	str	r2, [r3, #4]
 801d852:	e7bb      	b.n	801d7cc <__gethex+0x374>
 801d854:	692a      	ldr	r2, [r5, #16]
 801d856:	9902      	ldr	r1, [sp, #8]
 801d858:	428a      	cmp	r2, r1
 801d85a:	dd0b      	ble.n	801d874 <__gethex+0x41c>
 801d85c:	2101      	movs	r1, #1
 801d85e:	0028      	movs	r0, r5
 801d860:	f7ff fd92 	bl	801d388 <rshift>
 801d864:	9b01      	ldr	r3, [sp, #4]
 801d866:	3701      	adds	r7, #1
 801d868:	689b      	ldr	r3, [r3, #8]
 801d86a:	42bb      	cmp	r3, r7
 801d86c:	da00      	bge.n	801d870 <__gethex+0x418>
 801d86e:	e6df      	b.n	801d630 <__gethex+0x1d8>
 801d870:	2601      	movs	r6, #1
 801d872:	e7bf      	b.n	801d7f4 <__gethex+0x39c>
 801d874:	221f      	movs	r2, #31
 801d876:	9c00      	ldr	r4, [sp, #0]
 801d878:	9900      	ldr	r1, [sp, #0]
 801d87a:	4014      	ands	r4, r2
 801d87c:	4211      	tst	r1, r2
 801d87e:	d0f7      	beq.n	801d870 <__gethex+0x418>
 801d880:	9a04      	ldr	r2, [sp, #16]
 801d882:	189b      	adds	r3, r3, r2
 801d884:	3b04      	subs	r3, #4
 801d886:	6818      	ldr	r0, [r3, #0]
 801d888:	f000 fa9e 	bl	801ddc8 <__hi0bits>
 801d88c:	2320      	movs	r3, #32
 801d88e:	1b1b      	subs	r3, r3, r4
 801d890:	4298      	cmp	r0, r3
 801d892:	dbe3      	blt.n	801d85c <__gethex+0x404>
 801d894:	e7ec      	b.n	801d870 <__gethex+0x418>
 801d896:	46c0      	nop			@ (mov r8, r8)
 801d898:	08020fe9 	.word	0x08020fe9
 801d89c:	08020ffa 	.word	0x08020ffa

0801d8a0 <L_shift>:
 801d8a0:	2308      	movs	r3, #8
 801d8a2:	b570      	push	{r4, r5, r6, lr}
 801d8a4:	2520      	movs	r5, #32
 801d8a6:	1a9a      	subs	r2, r3, r2
 801d8a8:	0092      	lsls	r2, r2, #2
 801d8aa:	1aad      	subs	r5, r5, r2
 801d8ac:	6843      	ldr	r3, [r0, #4]
 801d8ae:	6804      	ldr	r4, [r0, #0]
 801d8b0:	001e      	movs	r6, r3
 801d8b2:	40ae      	lsls	r6, r5
 801d8b4:	40d3      	lsrs	r3, r2
 801d8b6:	4334      	orrs	r4, r6
 801d8b8:	6004      	str	r4, [r0, #0]
 801d8ba:	6043      	str	r3, [r0, #4]
 801d8bc:	3004      	adds	r0, #4
 801d8be:	4288      	cmp	r0, r1
 801d8c0:	d3f4      	bcc.n	801d8ac <L_shift+0xc>
 801d8c2:	bd70      	pop	{r4, r5, r6, pc}

0801d8c4 <__match>:
 801d8c4:	b530      	push	{r4, r5, lr}
 801d8c6:	6803      	ldr	r3, [r0, #0]
 801d8c8:	780c      	ldrb	r4, [r1, #0]
 801d8ca:	3301      	adds	r3, #1
 801d8cc:	2c00      	cmp	r4, #0
 801d8ce:	d102      	bne.n	801d8d6 <__match+0x12>
 801d8d0:	6003      	str	r3, [r0, #0]
 801d8d2:	2001      	movs	r0, #1
 801d8d4:	bd30      	pop	{r4, r5, pc}
 801d8d6:	781a      	ldrb	r2, [r3, #0]
 801d8d8:	0015      	movs	r5, r2
 801d8da:	3d41      	subs	r5, #65	@ 0x41
 801d8dc:	2d19      	cmp	r5, #25
 801d8de:	d800      	bhi.n	801d8e2 <__match+0x1e>
 801d8e0:	3220      	adds	r2, #32
 801d8e2:	3101      	adds	r1, #1
 801d8e4:	42a2      	cmp	r2, r4
 801d8e6:	d0ef      	beq.n	801d8c8 <__match+0x4>
 801d8e8:	2000      	movs	r0, #0
 801d8ea:	e7f3      	b.n	801d8d4 <__match+0x10>

0801d8ec <__hexnan>:
 801d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8ee:	680b      	ldr	r3, [r1, #0]
 801d8f0:	b08b      	sub	sp, #44	@ 0x2c
 801d8f2:	9201      	str	r2, [sp, #4]
 801d8f4:	9901      	ldr	r1, [sp, #4]
 801d8f6:	115a      	asrs	r2, r3, #5
 801d8f8:	0092      	lsls	r2, r2, #2
 801d8fa:	188a      	adds	r2, r1, r2
 801d8fc:	9202      	str	r2, [sp, #8]
 801d8fe:	0019      	movs	r1, r3
 801d900:	221f      	movs	r2, #31
 801d902:	4011      	ands	r1, r2
 801d904:	9008      	str	r0, [sp, #32]
 801d906:	9106      	str	r1, [sp, #24]
 801d908:	4213      	tst	r3, r2
 801d90a:	d002      	beq.n	801d912 <__hexnan+0x26>
 801d90c:	9b02      	ldr	r3, [sp, #8]
 801d90e:	3304      	adds	r3, #4
 801d910:	9302      	str	r3, [sp, #8]
 801d912:	9b02      	ldr	r3, [sp, #8]
 801d914:	2500      	movs	r5, #0
 801d916:	1f1f      	subs	r7, r3, #4
 801d918:	003e      	movs	r6, r7
 801d91a:	003c      	movs	r4, r7
 801d91c:	9b08      	ldr	r3, [sp, #32]
 801d91e:	603d      	str	r5, [r7, #0]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	9507      	str	r5, [sp, #28]
 801d924:	9305      	str	r3, [sp, #20]
 801d926:	9503      	str	r5, [sp, #12]
 801d928:	9b05      	ldr	r3, [sp, #20]
 801d92a:	3301      	adds	r3, #1
 801d92c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d92e:	9b05      	ldr	r3, [sp, #20]
 801d930:	785b      	ldrb	r3, [r3, #1]
 801d932:	9304      	str	r3, [sp, #16]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d028      	beq.n	801d98a <__hexnan+0x9e>
 801d938:	9804      	ldr	r0, [sp, #16]
 801d93a:	f7ff fd78 	bl	801d42e <__hexdig_fun>
 801d93e:	2800      	cmp	r0, #0
 801d940:	d155      	bne.n	801d9ee <__hexnan+0x102>
 801d942:	9b04      	ldr	r3, [sp, #16]
 801d944:	2b20      	cmp	r3, #32
 801d946:	d819      	bhi.n	801d97c <__hexnan+0x90>
 801d948:	9b03      	ldr	r3, [sp, #12]
 801d94a:	9a07      	ldr	r2, [sp, #28]
 801d94c:	4293      	cmp	r3, r2
 801d94e:	dd12      	ble.n	801d976 <__hexnan+0x8a>
 801d950:	42b4      	cmp	r4, r6
 801d952:	d206      	bcs.n	801d962 <__hexnan+0x76>
 801d954:	2d07      	cmp	r5, #7
 801d956:	dc04      	bgt.n	801d962 <__hexnan+0x76>
 801d958:	002a      	movs	r2, r5
 801d95a:	0031      	movs	r1, r6
 801d95c:	0020      	movs	r0, r4
 801d95e:	f7ff ff9f 	bl	801d8a0 <L_shift>
 801d962:	9b01      	ldr	r3, [sp, #4]
 801d964:	2508      	movs	r5, #8
 801d966:	429c      	cmp	r4, r3
 801d968:	d905      	bls.n	801d976 <__hexnan+0x8a>
 801d96a:	1f26      	subs	r6, r4, #4
 801d96c:	2500      	movs	r5, #0
 801d96e:	0034      	movs	r4, r6
 801d970:	9b03      	ldr	r3, [sp, #12]
 801d972:	6035      	str	r5, [r6, #0]
 801d974:	9307      	str	r3, [sp, #28]
 801d976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d978:	9305      	str	r3, [sp, #20]
 801d97a:	e7d5      	b.n	801d928 <__hexnan+0x3c>
 801d97c:	9b04      	ldr	r3, [sp, #16]
 801d97e:	2b29      	cmp	r3, #41	@ 0x29
 801d980:	d15a      	bne.n	801da38 <__hexnan+0x14c>
 801d982:	9b05      	ldr	r3, [sp, #20]
 801d984:	9a08      	ldr	r2, [sp, #32]
 801d986:	3302      	adds	r3, #2
 801d988:	6013      	str	r3, [r2, #0]
 801d98a:	9b03      	ldr	r3, [sp, #12]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d053      	beq.n	801da38 <__hexnan+0x14c>
 801d990:	42b4      	cmp	r4, r6
 801d992:	d206      	bcs.n	801d9a2 <__hexnan+0xb6>
 801d994:	2d07      	cmp	r5, #7
 801d996:	dc04      	bgt.n	801d9a2 <__hexnan+0xb6>
 801d998:	002a      	movs	r2, r5
 801d99a:	0031      	movs	r1, r6
 801d99c:	0020      	movs	r0, r4
 801d99e:	f7ff ff7f 	bl	801d8a0 <L_shift>
 801d9a2:	9b01      	ldr	r3, [sp, #4]
 801d9a4:	429c      	cmp	r4, r3
 801d9a6:	d936      	bls.n	801da16 <__hexnan+0x12a>
 801d9a8:	001a      	movs	r2, r3
 801d9aa:	0023      	movs	r3, r4
 801d9ac:	cb02      	ldmia	r3!, {r1}
 801d9ae:	c202      	stmia	r2!, {r1}
 801d9b0:	429f      	cmp	r7, r3
 801d9b2:	d2fb      	bcs.n	801d9ac <__hexnan+0xc0>
 801d9b4:	9b02      	ldr	r3, [sp, #8]
 801d9b6:	1c61      	adds	r1, r4, #1
 801d9b8:	1eda      	subs	r2, r3, #3
 801d9ba:	2304      	movs	r3, #4
 801d9bc:	4291      	cmp	r1, r2
 801d9be:	d805      	bhi.n	801d9cc <__hexnan+0xe0>
 801d9c0:	9b02      	ldr	r3, [sp, #8]
 801d9c2:	3b04      	subs	r3, #4
 801d9c4:	1b1b      	subs	r3, r3, r4
 801d9c6:	089b      	lsrs	r3, r3, #2
 801d9c8:	3301      	adds	r3, #1
 801d9ca:	009b      	lsls	r3, r3, #2
 801d9cc:	9a01      	ldr	r2, [sp, #4]
 801d9ce:	18d3      	adds	r3, r2, r3
 801d9d0:	2200      	movs	r2, #0
 801d9d2:	c304      	stmia	r3!, {r2}
 801d9d4:	429f      	cmp	r7, r3
 801d9d6:	d2fc      	bcs.n	801d9d2 <__hexnan+0xe6>
 801d9d8:	683b      	ldr	r3, [r7, #0]
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	d104      	bne.n	801d9e8 <__hexnan+0xfc>
 801d9de:	9b01      	ldr	r3, [sp, #4]
 801d9e0:	429f      	cmp	r7, r3
 801d9e2:	d127      	bne.n	801da34 <__hexnan+0x148>
 801d9e4:	2301      	movs	r3, #1
 801d9e6:	603b      	str	r3, [r7, #0]
 801d9e8:	2005      	movs	r0, #5
 801d9ea:	b00b      	add	sp, #44	@ 0x2c
 801d9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9ee:	9b03      	ldr	r3, [sp, #12]
 801d9f0:	3501      	adds	r5, #1
 801d9f2:	3301      	adds	r3, #1
 801d9f4:	9303      	str	r3, [sp, #12]
 801d9f6:	2d08      	cmp	r5, #8
 801d9f8:	dd06      	ble.n	801da08 <__hexnan+0x11c>
 801d9fa:	9b01      	ldr	r3, [sp, #4]
 801d9fc:	429c      	cmp	r4, r3
 801d9fe:	d9ba      	bls.n	801d976 <__hexnan+0x8a>
 801da00:	2300      	movs	r3, #0
 801da02:	2501      	movs	r5, #1
 801da04:	3c04      	subs	r4, #4
 801da06:	6023      	str	r3, [r4, #0]
 801da08:	220f      	movs	r2, #15
 801da0a:	6823      	ldr	r3, [r4, #0]
 801da0c:	4010      	ands	r0, r2
 801da0e:	011b      	lsls	r3, r3, #4
 801da10:	4303      	orrs	r3, r0
 801da12:	6023      	str	r3, [r4, #0]
 801da14:	e7af      	b.n	801d976 <__hexnan+0x8a>
 801da16:	9b06      	ldr	r3, [sp, #24]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d0dd      	beq.n	801d9d8 <__hexnan+0xec>
 801da1c:	2320      	movs	r3, #32
 801da1e:	9a06      	ldr	r2, [sp, #24]
 801da20:	9902      	ldr	r1, [sp, #8]
 801da22:	1a9b      	subs	r3, r3, r2
 801da24:	2201      	movs	r2, #1
 801da26:	4252      	negs	r2, r2
 801da28:	40da      	lsrs	r2, r3
 801da2a:	3904      	subs	r1, #4
 801da2c:	680b      	ldr	r3, [r1, #0]
 801da2e:	4013      	ands	r3, r2
 801da30:	600b      	str	r3, [r1, #0]
 801da32:	e7d1      	b.n	801d9d8 <__hexnan+0xec>
 801da34:	3f04      	subs	r7, #4
 801da36:	e7cf      	b.n	801d9d8 <__hexnan+0xec>
 801da38:	2004      	movs	r0, #4
 801da3a:	e7d6      	b.n	801d9ea <__hexnan+0xfe>

0801da3c <malloc>:
 801da3c:	b510      	push	{r4, lr}
 801da3e:	4b03      	ldr	r3, [pc, #12]	@ (801da4c <malloc+0x10>)
 801da40:	0001      	movs	r1, r0
 801da42:	6818      	ldr	r0, [r3, #0]
 801da44:	f000 f826 	bl	801da94 <_malloc_r>
 801da48:	bd10      	pop	{r4, pc}
 801da4a:	46c0      	nop			@ (mov r8, r8)
 801da4c:	200003c8 	.word	0x200003c8

0801da50 <sbrk_aligned>:
 801da50:	b570      	push	{r4, r5, r6, lr}
 801da52:	4e0f      	ldr	r6, [pc, #60]	@ (801da90 <sbrk_aligned+0x40>)
 801da54:	000d      	movs	r5, r1
 801da56:	6831      	ldr	r1, [r6, #0]
 801da58:	0004      	movs	r4, r0
 801da5a:	2900      	cmp	r1, #0
 801da5c:	d102      	bne.n	801da64 <sbrk_aligned+0x14>
 801da5e:	f001 f99b 	bl	801ed98 <_sbrk_r>
 801da62:	6030      	str	r0, [r6, #0]
 801da64:	0029      	movs	r1, r5
 801da66:	0020      	movs	r0, r4
 801da68:	f001 f996 	bl	801ed98 <_sbrk_r>
 801da6c:	1c43      	adds	r3, r0, #1
 801da6e:	d103      	bne.n	801da78 <sbrk_aligned+0x28>
 801da70:	2501      	movs	r5, #1
 801da72:	426d      	negs	r5, r5
 801da74:	0028      	movs	r0, r5
 801da76:	bd70      	pop	{r4, r5, r6, pc}
 801da78:	2303      	movs	r3, #3
 801da7a:	1cc5      	adds	r5, r0, #3
 801da7c:	439d      	bics	r5, r3
 801da7e:	42a8      	cmp	r0, r5
 801da80:	d0f8      	beq.n	801da74 <sbrk_aligned+0x24>
 801da82:	1a29      	subs	r1, r5, r0
 801da84:	0020      	movs	r0, r4
 801da86:	f001 f987 	bl	801ed98 <_sbrk_r>
 801da8a:	3001      	adds	r0, #1
 801da8c:	d1f2      	bne.n	801da74 <sbrk_aligned+0x24>
 801da8e:	e7ef      	b.n	801da70 <sbrk_aligned+0x20>
 801da90:	200038b8 	.word	0x200038b8

0801da94 <_malloc_r>:
 801da94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801da96:	2203      	movs	r2, #3
 801da98:	1ccb      	adds	r3, r1, #3
 801da9a:	4393      	bics	r3, r2
 801da9c:	3308      	adds	r3, #8
 801da9e:	0005      	movs	r5, r0
 801daa0:	001f      	movs	r7, r3
 801daa2:	2b0c      	cmp	r3, #12
 801daa4:	d234      	bcs.n	801db10 <_malloc_r+0x7c>
 801daa6:	270c      	movs	r7, #12
 801daa8:	42b9      	cmp	r1, r7
 801daaa:	d833      	bhi.n	801db14 <_malloc_r+0x80>
 801daac:	0028      	movs	r0, r5
 801daae:	f000 f883 	bl	801dbb8 <__malloc_lock>
 801dab2:	4e37      	ldr	r6, [pc, #220]	@ (801db90 <_malloc_r+0xfc>)
 801dab4:	6833      	ldr	r3, [r6, #0]
 801dab6:	001c      	movs	r4, r3
 801dab8:	2c00      	cmp	r4, #0
 801daba:	d12f      	bne.n	801db1c <_malloc_r+0x88>
 801dabc:	0039      	movs	r1, r7
 801dabe:	0028      	movs	r0, r5
 801dac0:	f7ff ffc6 	bl	801da50 <sbrk_aligned>
 801dac4:	0004      	movs	r4, r0
 801dac6:	1c43      	adds	r3, r0, #1
 801dac8:	d15f      	bne.n	801db8a <_malloc_r+0xf6>
 801daca:	6834      	ldr	r4, [r6, #0]
 801dacc:	9400      	str	r4, [sp, #0]
 801dace:	9b00      	ldr	r3, [sp, #0]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d14a      	bne.n	801db6a <_malloc_r+0xd6>
 801dad4:	2c00      	cmp	r4, #0
 801dad6:	d052      	beq.n	801db7e <_malloc_r+0xea>
 801dad8:	6823      	ldr	r3, [r4, #0]
 801dada:	0028      	movs	r0, r5
 801dadc:	18e3      	adds	r3, r4, r3
 801dade:	9900      	ldr	r1, [sp, #0]
 801dae0:	9301      	str	r3, [sp, #4]
 801dae2:	f001 f959 	bl	801ed98 <_sbrk_r>
 801dae6:	9b01      	ldr	r3, [sp, #4]
 801dae8:	4283      	cmp	r3, r0
 801daea:	d148      	bne.n	801db7e <_malloc_r+0xea>
 801daec:	6823      	ldr	r3, [r4, #0]
 801daee:	0028      	movs	r0, r5
 801daf0:	1aff      	subs	r7, r7, r3
 801daf2:	0039      	movs	r1, r7
 801daf4:	f7ff ffac 	bl	801da50 <sbrk_aligned>
 801daf8:	3001      	adds	r0, #1
 801dafa:	d040      	beq.n	801db7e <_malloc_r+0xea>
 801dafc:	6823      	ldr	r3, [r4, #0]
 801dafe:	19db      	adds	r3, r3, r7
 801db00:	6023      	str	r3, [r4, #0]
 801db02:	6833      	ldr	r3, [r6, #0]
 801db04:	685a      	ldr	r2, [r3, #4]
 801db06:	2a00      	cmp	r2, #0
 801db08:	d133      	bne.n	801db72 <_malloc_r+0xde>
 801db0a:	9b00      	ldr	r3, [sp, #0]
 801db0c:	6033      	str	r3, [r6, #0]
 801db0e:	e019      	b.n	801db44 <_malloc_r+0xb0>
 801db10:	2b00      	cmp	r3, #0
 801db12:	dac9      	bge.n	801daa8 <_malloc_r+0x14>
 801db14:	230c      	movs	r3, #12
 801db16:	602b      	str	r3, [r5, #0]
 801db18:	2000      	movs	r0, #0
 801db1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801db1c:	6821      	ldr	r1, [r4, #0]
 801db1e:	1bc9      	subs	r1, r1, r7
 801db20:	d420      	bmi.n	801db64 <_malloc_r+0xd0>
 801db22:	290b      	cmp	r1, #11
 801db24:	d90a      	bls.n	801db3c <_malloc_r+0xa8>
 801db26:	19e2      	adds	r2, r4, r7
 801db28:	6027      	str	r7, [r4, #0]
 801db2a:	42a3      	cmp	r3, r4
 801db2c:	d104      	bne.n	801db38 <_malloc_r+0xa4>
 801db2e:	6032      	str	r2, [r6, #0]
 801db30:	6863      	ldr	r3, [r4, #4]
 801db32:	6011      	str	r1, [r2, #0]
 801db34:	6053      	str	r3, [r2, #4]
 801db36:	e005      	b.n	801db44 <_malloc_r+0xb0>
 801db38:	605a      	str	r2, [r3, #4]
 801db3a:	e7f9      	b.n	801db30 <_malloc_r+0x9c>
 801db3c:	6862      	ldr	r2, [r4, #4]
 801db3e:	42a3      	cmp	r3, r4
 801db40:	d10e      	bne.n	801db60 <_malloc_r+0xcc>
 801db42:	6032      	str	r2, [r6, #0]
 801db44:	0028      	movs	r0, r5
 801db46:	f000 f83f 	bl	801dbc8 <__malloc_unlock>
 801db4a:	0020      	movs	r0, r4
 801db4c:	2207      	movs	r2, #7
 801db4e:	300b      	adds	r0, #11
 801db50:	1d23      	adds	r3, r4, #4
 801db52:	4390      	bics	r0, r2
 801db54:	1ac2      	subs	r2, r0, r3
 801db56:	4298      	cmp	r0, r3
 801db58:	d0df      	beq.n	801db1a <_malloc_r+0x86>
 801db5a:	1a1b      	subs	r3, r3, r0
 801db5c:	50a3      	str	r3, [r4, r2]
 801db5e:	e7dc      	b.n	801db1a <_malloc_r+0x86>
 801db60:	605a      	str	r2, [r3, #4]
 801db62:	e7ef      	b.n	801db44 <_malloc_r+0xb0>
 801db64:	0023      	movs	r3, r4
 801db66:	6864      	ldr	r4, [r4, #4]
 801db68:	e7a6      	b.n	801dab8 <_malloc_r+0x24>
 801db6a:	9c00      	ldr	r4, [sp, #0]
 801db6c:	6863      	ldr	r3, [r4, #4]
 801db6e:	9300      	str	r3, [sp, #0]
 801db70:	e7ad      	b.n	801dace <_malloc_r+0x3a>
 801db72:	001a      	movs	r2, r3
 801db74:	685b      	ldr	r3, [r3, #4]
 801db76:	42a3      	cmp	r3, r4
 801db78:	d1fb      	bne.n	801db72 <_malloc_r+0xde>
 801db7a:	2300      	movs	r3, #0
 801db7c:	e7da      	b.n	801db34 <_malloc_r+0xa0>
 801db7e:	230c      	movs	r3, #12
 801db80:	0028      	movs	r0, r5
 801db82:	602b      	str	r3, [r5, #0]
 801db84:	f000 f820 	bl	801dbc8 <__malloc_unlock>
 801db88:	e7c6      	b.n	801db18 <_malloc_r+0x84>
 801db8a:	6007      	str	r7, [r0, #0]
 801db8c:	e7da      	b.n	801db44 <_malloc_r+0xb0>
 801db8e:	46c0      	nop			@ (mov r8, r8)
 801db90:	200038bc 	.word	0x200038bc

0801db94 <__ascii_mbtowc>:
 801db94:	b082      	sub	sp, #8
 801db96:	2900      	cmp	r1, #0
 801db98:	d100      	bne.n	801db9c <__ascii_mbtowc+0x8>
 801db9a:	a901      	add	r1, sp, #4
 801db9c:	1e10      	subs	r0, r2, #0
 801db9e:	d006      	beq.n	801dbae <__ascii_mbtowc+0x1a>
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d006      	beq.n	801dbb2 <__ascii_mbtowc+0x1e>
 801dba4:	7813      	ldrb	r3, [r2, #0]
 801dba6:	600b      	str	r3, [r1, #0]
 801dba8:	7810      	ldrb	r0, [r2, #0]
 801dbaa:	1e43      	subs	r3, r0, #1
 801dbac:	4198      	sbcs	r0, r3
 801dbae:	b002      	add	sp, #8
 801dbb0:	4770      	bx	lr
 801dbb2:	2002      	movs	r0, #2
 801dbb4:	4240      	negs	r0, r0
 801dbb6:	e7fa      	b.n	801dbae <__ascii_mbtowc+0x1a>

0801dbb8 <__malloc_lock>:
 801dbb8:	b510      	push	{r4, lr}
 801dbba:	4802      	ldr	r0, [pc, #8]	@ (801dbc4 <__malloc_lock+0xc>)
 801dbbc:	f7fe fcfb 	bl	801c5b6 <__retarget_lock_acquire_recursive>
 801dbc0:	bd10      	pop	{r4, pc}
 801dbc2:	46c0      	nop			@ (mov r8, r8)
 801dbc4:	200038b4 	.word	0x200038b4

0801dbc8 <__malloc_unlock>:
 801dbc8:	b510      	push	{r4, lr}
 801dbca:	4802      	ldr	r0, [pc, #8]	@ (801dbd4 <__malloc_unlock+0xc>)
 801dbcc:	f7fe fcf4 	bl	801c5b8 <__retarget_lock_release_recursive>
 801dbd0:	bd10      	pop	{r4, pc}
 801dbd2:	46c0      	nop			@ (mov r8, r8)
 801dbd4:	200038b4 	.word	0x200038b4

0801dbd8 <_Balloc>:
 801dbd8:	b570      	push	{r4, r5, r6, lr}
 801dbda:	69c5      	ldr	r5, [r0, #28]
 801dbdc:	0006      	movs	r6, r0
 801dbde:	000c      	movs	r4, r1
 801dbe0:	2d00      	cmp	r5, #0
 801dbe2:	d10e      	bne.n	801dc02 <_Balloc+0x2a>
 801dbe4:	2010      	movs	r0, #16
 801dbe6:	f7ff ff29 	bl	801da3c <malloc>
 801dbea:	1e02      	subs	r2, r0, #0
 801dbec:	61f0      	str	r0, [r6, #28]
 801dbee:	d104      	bne.n	801dbfa <_Balloc+0x22>
 801dbf0:	216b      	movs	r1, #107	@ 0x6b
 801dbf2:	4b19      	ldr	r3, [pc, #100]	@ (801dc58 <_Balloc+0x80>)
 801dbf4:	4819      	ldr	r0, [pc, #100]	@ (801dc5c <_Balloc+0x84>)
 801dbf6:	f001 f8e1 	bl	801edbc <__assert_func>
 801dbfa:	6045      	str	r5, [r0, #4]
 801dbfc:	6085      	str	r5, [r0, #8]
 801dbfe:	6005      	str	r5, [r0, #0]
 801dc00:	60c5      	str	r5, [r0, #12]
 801dc02:	69f5      	ldr	r5, [r6, #28]
 801dc04:	68eb      	ldr	r3, [r5, #12]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d013      	beq.n	801dc32 <_Balloc+0x5a>
 801dc0a:	69f3      	ldr	r3, [r6, #28]
 801dc0c:	00a2      	lsls	r2, r4, #2
 801dc0e:	68db      	ldr	r3, [r3, #12]
 801dc10:	189b      	adds	r3, r3, r2
 801dc12:	6818      	ldr	r0, [r3, #0]
 801dc14:	2800      	cmp	r0, #0
 801dc16:	d118      	bne.n	801dc4a <_Balloc+0x72>
 801dc18:	2101      	movs	r1, #1
 801dc1a:	000d      	movs	r5, r1
 801dc1c:	40a5      	lsls	r5, r4
 801dc1e:	1d6a      	adds	r2, r5, #5
 801dc20:	0030      	movs	r0, r6
 801dc22:	0092      	lsls	r2, r2, #2
 801dc24:	f001 f8e8 	bl	801edf8 <_calloc_r>
 801dc28:	2800      	cmp	r0, #0
 801dc2a:	d00c      	beq.n	801dc46 <_Balloc+0x6e>
 801dc2c:	6044      	str	r4, [r0, #4]
 801dc2e:	6085      	str	r5, [r0, #8]
 801dc30:	e00d      	b.n	801dc4e <_Balloc+0x76>
 801dc32:	2221      	movs	r2, #33	@ 0x21
 801dc34:	2104      	movs	r1, #4
 801dc36:	0030      	movs	r0, r6
 801dc38:	f001 f8de 	bl	801edf8 <_calloc_r>
 801dc3c:	69f3      	ldr	r3, [r6, #28]
 801dc3e:	60e8      	str	r0, [r5, #12]
 801dc40:	68db      	ldr	r3, [r3, #12]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d1e1      	bne.n	801dc0a <_Balloc+0x32>
 801dc46:	2000      	movs	r0, #0
 801dc48:	bd70      	pop	{r4, r5, r6, pc}
 801dc4a:	6802      	ldr	r2, [r0, #0]
 801dc4c:	601a      	str	r2, [r3, #0]
 801dc4e:	2300      	movs	r3, #0
 801dc50:	6103      	str	r3, [r0, #16]
 801dc52:	60c3      	str	r3, [r0, #12]
 801dc54:	e7f8      	b.n	801dc48 <_Balloc+0x70>
 801dc56:	46c0      	nop			@ (mov r8, r8)
 801dc58:	08020f7a 	.word	0x08020f7a
 801dc5c:	0802105a 	.word	0x0802105a

0801dc60 <_Bfree>:
 801dc60:	b570      	push	{r4, r5, r6, lr}
 801dc62:	69c6      	ldr	r6, [r0, #28]
 801dc64:	0005      	movs	r5, r0
 801dc66:	000c      	movs	r4, r1
 801dc68:	2e00      	cmp	r6, #0
 801dc6a:	d10e      	bne.n	801dc8a <_Bfree+0x2a>
 801dc6c:	2010      	movs	r0, #16
 801dc6e:	f7ff fee5 	bl	801da3c <malloc>
 801dc72:	1e02      	subs	r2, r0, #0
 801dc74:	61e8      	str	r0, [r5, #28]
 801dc76:	d104      	bne.n	801dc82 <_Bfree+0x22>
 801dc78:	218f      	movs	r1, #143	@ 0x8f
 801dc7a:	4b09      	ldr	r3, [pc, #36]	@ (801dca0 <_Bfree+0x40>)
 801dc7c:	4809      	ldr	r0, [pc, #36]	@ (801dca4 <_Bfree+0x44>)
 801dc7e:	f001 f89d 	bl	801edbc <__assert_func>
 801dc82:	6046      	str	r6, [r0, #4]
 801dc84:	6086      	str	r6, [r0, #8]
 801dc86:	6006      	str	r6, [r0, #0]
 801dc88:	60c6      	str	r6, [r0, #12]
 801dc8a:	2c00      	cmp	r4, #0
 801dc8c:	d007      	beq.n	801dc9e <_Bfree+0x3e>
 801dc8e:	69eb      	ldr	r3, [r5, #28]
 801dc90:	6862      	ldr	r2, [r4, #4]
 801dc92:	68db      	ldr	r3, [r3, #12]
 801dc94:	0092      	lsls	r2, r2, #2
 801dc96:	189b      	adds	r3, r3, r2
 801dc98:	681a      	ldr	r2, [r3, #0]
 801dc9a:	6022      	str	r2, [r4, #0]
 801dc9c:	601c      	str	r4, [r3, #0]
 801dc9e:	bd70      	pop	{r4, r5, r6, pc}
 801dca0:	08020f7a 	.word	0x08020f7a
 801dca4:	0802105a 	.word	0x0802105a

0801dca8 <__multadd>:
 801dca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dcaa:	000f      	movs	r7, r1
 801dcac:	9001      	str	r0, [sp, #4]
 801dcae:	000c      	movs	r4, r1
 801dcb0:	001e      	movs	r6, r3
 801dcb2:	2000      	movs	r0, #0
 801dcb4:	690d      	ldr	r5, [r1, #16]
 801dcb6:	3714      	adds	r7, #20
 801dcb8:	683b      	ldr	r3, [r7, #0]
 801dcba:	3001      	adds	r0, #1
 801dcbc:	b299      	uxth	r1, r3
 801dcbe:	4351      	muls	r1, r2
 801dcc0:	0c1b      	lsrs	r3, r3, #16
 801dcc2:	4353      	muls	r3, r2
 801dcc4:	1989      	adds	r1, r1, r6
 801dcc6:	0c0e      	lsrs	r6, r1, #16
 801dcc8:	199b      	adds	r3, r3, r6
 801dcca:	0c1e      	lsrs	r6, r3, #16
 801dccc:	b289      	uxth	r1, r1
 801dcce:	041b      	lsls	r3, r3, #16
 801dcd0:	185b      	adds	r3, r3, r1
 801dcd2:	c708      	stmia	r7!, {r3}
 801dcd4:	4285      	cmp	r5, r0
 801dcd6:	dcef      	bgt.n	801dcb8 <__multadd+0x10>
 801dcd8:	2e00      	cmp	r6, #0
 801dcda:	d022      	beq.n	801dd22 <__multadd+0x7a>
 801dcdc:	68a3      	ldr	r3, [r4, #8]
 801dcde:	42ab      	cmp	r3, r5
 801dce0:	dc19      	bgt.n	801dd16 <__multadd+0x6e>
 801dce2:	6861      	ldr	r1, [r4, #4]
 801dce4:	9801      	ldr	r0, [sp, #4]
 801dce6:	3101      	adds	r1, #1
 801dce8:	f7ff ff76 	bl	801dbd8 <_Balloc>
 801dcec:	1e07      	subs	r7, r0, #0
 801dcee:	d105      	bne.n	801dcfc <__multadd+0x54>
 801dcf0:	003a      	movs	r2, r7
 801dcf2:	21ba      	movs	r1, #186	@ 0xba
 801dcf4:	4b0c      	ldr	r3, [pc, #48]	@ (801dd28 <__multadd+0x80>)
 801dcf6:	480d      	ldr	r0, [pc, #52]	@ (801dd2c <__multadd+0x84>)
 801dcf8:	f001 f860 	bl	801edbc <__assert_func>
 801dcfc:	0021      	movs	r1, r4
 801dcfe:	6922      	ldr	r2, [r4, #16]
 801dd00:	310c      	adds	r1, #12
 801dd02:	3202      	adds	r2, #2
 801dd04:	0092      	lsls	r2, r2, #2
 801dd06:	300c      	adds	r0, #12
 801dd08:	f7fe fc62 	bl	801c5d0 <memcpy>
 801dd0c:	0021      	movs	r1, r4
 801dd0e:	9801      	ldr	r0, [sp, #4]
 801dd10:	f7ff ffa6 	bl	801dc60 <_Bfree>
 801dd14:	003c      	movs	r4, r7
 801dd16:	1d2b      	adds	r3, r5, #4
 801dd18:	009b      	lsls	r3, r3, #2
 801dd1a:	18e3      	adds	r3, r4, r3
 801dd1c:	3501      	adds	r5, #1
 801dd1e:	605e      	str	r6, [r3, #4]
 801dd20:	6125      	str	r5, [r4, #16]
 801dd22:	0020      	movs	r0, r4
 801dd24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dd26:	46c0      	nop			@ (mov r8, r8)
 801dd28:	08020fe9 	.word	0x08020fe9
 801dd2c:	0802105a 	.word	0x0802105a

0801dd30 <__s2b>:
 801dd30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dd32:	0007      	movs	r7, r0
 801dd34:	0018      	movs	r0, r3
 801dd36:	000c      	movs	r4, r1
 801dd38:	3008      	adds	r0, #8
 801dd3a:	2109      	movs	r1, #9
 801dd3c:	9301      	str	r3, [sp, #4]
 801dd3e:	0015      	movs	r5, r2
 801dd40:	f7e2 faba 	bl	80002b8 <__divsi3>
 801dd44:	2301      	movs	r3, #1
 801dd46:	2100      	movs	r1, #0
 801dd48:	4283      	cmp	r3, r0
 801dd4a:	db0a      	blt.n	801dd62 <__s2b+0x32>
 801dd4c:	0038      	movs	r0, r7
 801dd4e:	f7ff ff43 	bl	801dbd8 <_Balloc>
 801dd52:	1e01      	subs	r1, r0, #0
 801dd54:	d108      	bne.n	801dd68 <__s2b+0x38>
 801dd56:	000a      	movs	r2, r1
 801dd58:	4b19      	ldr	r3, [pc, #100]	@ (801ddc0 <__s2b+0x90>)
 801dd5a:	481a      	ldr	r0, [pc, #104]	@ (801ddc4 <__s2b+0x94>)
 801dd5c:	31d3      	adds	r1, #211	@ 0xd3
 801dd5e:	f001 f82d 	bl	801edbc <__assert_func>
 801dd62:	005b      	lsls	r3, r3, #1
 801dd64:	3101      	adds	r1, #1
 801dd66:	e7ef      	b.n	801dd48 <__s2b+0x18>
 801dd68:	9b08      	ldr	r3, [sp, #32]
 801dd6a:	6143      	str	r3, [r0, #20]
 801dd6c:	2301      	movs	r3, #1
 801dd6e:	6103      	str	r3, [r0, #16]
 801dd70:	2d09      	cmp	r5, #9
 801dd72:	dd18      	ble.n	801dda6 <__s2b+0x76>
 801dd74:	0023      	movs	r3, r4
 801dd76:	3309      	adds	r3, #9
 801dd78:	001e      	movs	r6, r3
 801dd7a:	9300      	str	r3, [sp, #0]
 801dd7c:	1964      	adds	r4, r4, r5
 801dd7e:	7833      	ldrb	r3, [r6, #0]
 801dd80:	220a      	movs	r2, #10
 801dd82:	0038      	movs	r0, r7
 801dd84:	3b30      	subs	r3, #48	@ 0x30
 801dd86:	f7ff ff8f 	bl	801dca8 <__multadd>
 801dd8a:	3601      	adds	r6, #1
 801dd8c:	0001      	movs	r1, r0
 801dd8e:	42a6      	cmp	r6, r4
 801dd90:	d1f5      	bne.n	801dd7e <__s2b+0x4e>
 801dd92:	002c      	movs	r4, r5
 801dd94:	9b00      	ldr	r3, [sp, #0]
 801dd96:	3c08      	subs	r4, #8
 801dd98:	191c      	adds	r4, r3, r4
 801dd9a:	002e      	movs	r6, r5
 801dd9c:	9b01      	ldr	r3, [sp, #4]
 801dd9e:	429e      	cmp	r6, r3
 801dda0:	db04      	blt.n	801ddac <__s2b+0x7c>
 801dda2:	0008      	movs	r0, r1
 801dda4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dda6:	2509      	movs	r5, #9
 801dda8:	340a      	adds	r4, #10
 801ddaa:	e7f6      	b.n	801dd9a <__s2b+0x6a>
 801ddac:	1b63      	subs	r3, r4, r5
 801ddae:	5d9b      	ldrb	r3, [r3, r6]
 801ddb0:	220a      	movs	r2, #10
 801ddb2:	0038      	movs	r0, r7
 801ddb4:	3b30      	subs	r3, #48	@ 0x30
 801ddb6:	f7ff ff77 	bl	801dca8 <__multadd>
 801ddba:	3601      	adds	r6, #1
 801ddbc:	0001      	movs	r1, r0
 801ddbe:	e7ed      	b.n	801dd9c <__s2b+0x6c>
 801ddc0:	08020fe9 	.word	0x08020fe9
 801ddc4:	0802105a 	.word	0x0802105a

0801ddc8 <__hi0bits>:
 801ddc8:	2280      	movs	r2, #128	@ 0x80
 801ddca:	0003      	movs	r3, r0
 801ddcc:	0252      	lsls	r2, r2, #9
 801ddce:	2000      	movs	r0, #0
 801ddd0:	4293      	cmp	r3, r2
 801ddd2:	d201      	bcs.n	801ddd8 <__hi0bits+0x10>
 801ddd4:	041b      	lsls	r3, r3, #16
 801ddd6:	3010      	adds	r0, #16
 801ddd8:	2280      	movs	r2, #128	@ 0x80
 801ddda:	0452      	lsls	r2, r2, #17
 801dddc:	4293      	cmp	r3, r2
 801ddde:	d201      	bcs.n	801dde4 <__hi0bits+0x1c>
 801dde0:	3008      	adds	r0, #8
 801dde2:	021b      	lsls	r3, r3, #8
 801dde4:	2280      	movs	r2, #128	@ 0x80
 801dde6:	0552      	lsls	r2, r2, #21
 801dde8:	4293      	cmp	r3, r2
 801ddea:	d201      	bcs.n	801ddf0 <__hi0bits+0x28>
 801ddec:	3004      	adds	r0, #4
 801ddee:	011b      	lsls	r3, r3, #4
 801ddf0:	2280      	movs	r2, #128	@ 0x80
 801ddf2:	05d2      	lsls	r2, r2, #23
 801ddf4:	4293      	cmp	r3, r2
 801ddf6:	d201      	bcs.n	801ddfc <__hi0bits+0x34>
 801ddf8:	3002      	adds	r0, #2
 801ddfa:	009b      	lsls	r3, r3, #2
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	db03      	blt.n	801de08 <__hi0bits+0x40>
 801de00:	3001      	adds	r0, #1
 801de02:	4213      	tst	r3, r2
 801de04:	d100      	bne.n	801de08 <__hi0bits+0x40>
 801de06:	2020      	movs	r0, #32
 801de08:	4770      	bx	lr

0801de0a <__lo0bits>:
 801de0a:	6803      	ldr	r3, [r0, #0]
 801de0c:	0001      	movs	r1, r0
 801de0e:	2207      	movs	r2, #7
 801de10:	0018      	movs	r0, r3
 801de12:	4010      	ands	r0, r2
 801de14:	4213      	tst	r3, r2
 801de16:	d00d      	beq.n	801de34 <__lo0bits+0x2a>
 801de18:	3a06      	subs	r2, #6
 801de1a:	2000      	movs	r0, #0
 801de1c:	4213      	tst	r3, r2
 801de1e:	d105      	bne.n	801de2c <__lo0bits+0x22>
 801de20:	3002      	adds	r0, #2
 801de22:	4203      	tst	r3, r0
 801de24:	d003      	beq.n	801de2e <__lo0bits+0x24>
 801de26:	40d3      	lsrs	r3, r2
 801de28:	0010      	movs	r0, r2
 801de2a:	600b      	str	r3, [r1, #0]
 801de2c:	4770      	bx	lr
 801de2e:	089b      	lsrs	r3, r3, #2
 801de30:	600b      	str	r3, [r1, #0]
 801de32:	e7fb      	b.n	801de2c <__lo0bits+0x22>
 801de34:	b29a      	uxth	r2, r3
 801de36:	2a00      	cmp	r2, #0
 801de38:	d101      	bne.n	801de3e <__lo0bits+0x34>
 801de3a:	2010      	movs	r0, #16
 801de3c:	0c1b      	lsrs	r3, r3, #16
 801de3e:	b2da      	uxtb	r2, r3
 801de40:	2a00      	cmp	r2, #0
 801de42:	d101      	bne.n	801de48 <__lo0bits+0x3e>
 801de44:	3008      	adds	r0, #8
 801de46:	0a1b      	lsrs	r3, r3, #8
 801de48:	071a      	lsls	r2, r3, #28
 801de4a:	d101      	bne.n	801de50 <__lo0bits+0x46>
 801de4c:	3004      	adds	r0, #4
 801de4e:	091b      	lsrs	r3, r3, #4
 801de50:	079a      	lsls	r2, r3, #30
 801de52:	d101      	bne.n	801de58 <__lo0bits+0x4e>
 801de54:	3002      	adds	r0, #2
 801de56:	089b      	lsrs	r3, r3, #2
 801de58:	07da      	lsls	r2, r3, #31
 801de5a:	d4e9      	bmi.n	801de30 <__lo0bits+0x26>
 801de5c:	3001      	adds	r0, #1
 801de5e:	085b      	lsrs	r3, r3, #1
 801de60:	d1e6      	bne.n	801de30 <__lo0bits+0x26>
 801de62:	2020      	movs	r0, #32
 801de64:	e7e2      	b.n	801de2c <__lo0bits+0x22>
	...

0801de68 <__i2b>:
 801de68:	b510      	push	{r4, lr}
 801de6a:	000c      	movs	r4, r1
 801de6c:	2101      	movs	r1, #1
 801de6e:	f7ff feb3 	bl	801dbd8 <_Balloc>
 801de72:	2800      	cmp	r0, #0
 801de74:	d107      	bne.n	801de86 <__i2b+0x1e>
 801de76:	2146      	movs	r1, #70	@ 0x46
 801de78:	4c05      	ldr	r4, [pc, #20]	@ (801de90 <__i2b+0x28>)
 801de7a:	0002      	movs	r2, r0
 801de7c:	4b05      	ldr	r3, [pc, #20]	@ (801de94 <__i2b+0x2c>)
 801de7e:	0020      	movs	r0, r4
 801de80:	31ff      	adds	r1, #255	@ 0xff
 801de82:	f000 ff9b 	bl	801edbc <__assert_func>
 801de86:	2301      	movs	r3, #1
 801de88:	6144      	str	r4, [r0, #20]
 801de8a:	6103      	str	r3, [r0, #16]
 801de8c:	bd10      	pop	{r4, pc}
 801de8e:	46c0      	nop			@ (mov r8, r8)
 801de90:	0802105a 	.word	0x0802105a
 801de94:	08020fe9 	.word	0x08020fe9

0801de98 <__multiply>:
 801de98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de9a:	0014      	movs	r4, r2
 801de9c:	690a      	ldr	r2, [r1, #16]
 801de9e:	6923      	ldr	r3, [r4, #16]
 801dea0:	000d      	movs	r5, r1
 801dea2:	b08b      	sub	sp, #44	@ 0x2c
 801dea4:	429a      	cmp	r2, r3
 801dea6:	db02      	blt.n	801deae <__multiply+0x16>
 801dea8:	0023      	movs	r3, r4
 801deaa:	000c      	movs	r4, r1
 801deac:	001d      	movs	r5, r3
 801deae:	6927      	ldr	r7, [r4, #16]
 801deb0:	692e      	ldr	r6, [r5, #16]
 801deb2:	6861      	ldr	r1, [r4, #4]
 801deb4:	19bb      	adds	r3, r7, r6
 801deb6:	9303      	str	r3, [sp, #12]
 801deb8:	68a3      	ldr	r3, [r4, #8]
 801deba:	19ba      	adds	r2, r7, r6
 801debc:	4293      	cmp	r3, r2
 801debe:	da00      	bge.n	801dec2 <__multiply+0x2a>
 801dec0:	3101      	adds	r1, #1
 801dec2:	f7ff fe89 	bl	801dbd8 <_Balloc>
 801dec6:	9002      	str	r0, [sp, #8]
 801dec8:	2800      	cmp	r0, #0
 801deca:	d106      	bne.n	801deda <__multiply+0x42>
 801decc:	21b1      	movs	r1, #177	@ 0xb1
 801dece:	4b49      	ldr	r3, [pc, #292]	@ (801dff4 <__multiply+0x15c>)
 801ded0:	4849      	ldr	r0, [pc, #292]	@ (801dff8 <__multiply+0x160>)
 801ded2:	9a02      	ldr	r2, [sp, #8]
 801ded4:	0049      	lsls	r1, r1, #1
 801ded6:	f000 ff71 	bl	801edbc <__assert_func>
 801deda:	9b02      	ldr	r3, [sp, #8]
 801dedc:	2200      	movs	r2, #0
 801dede:	3314      	adds	r3, #20
 801dee0:	469c      	mov	ip, r3
 801dee2:	19bb      	adds	r3, r7, r6
 801dee4:	009b      	lsls	r3, r3, #2
 801dee6:	4463      	add	r3, ip
 801dee8:	9304      	str	r3, [sp, #16]
 801deea:	4663      	mov	r3, ip
 801deec:	9904      	ldr	r1, [sp, #16]
 801deee:	428b      	cmp	r3, r1
 801def0:	d32a      	bcc.n	801df48 <__multiply+0xb0>
 801def2:	0023      	movs	r3, r4
 801def4:	00bf      	lsls	r7, r7, #2
 801def6:	3314      	adds	r3, #20
 801def8:	3514      	adds	r5, #20
 801defa:	9308      	str	r3, [sp, #32]
 801defc:	00b6      	lsls	r6, r6, #2
 801defe:	19db      	adds	r3, r3, r7
 801df00:	9305      	str	r3, [sp, #20]
 801df02:	19ab      	adds	r3, r5, r6
 801df04:	9309      	str	r3, [sp, #36]	@ 0x24
 801df06:	2304      	movs	r3, #4
 801df08:	9306      	str	r3, [sp, #24]
 801df0a:	0023      	movs	r3, r4
 801df0c:	9a05      	ldr	r2, [sp, #20]
 801df0e:	3315      	adds	r3, #21
 801df10:	9501      	str	r5, [sp, #4]
 801df12:	429a      	cmp	r2, r3
 801df14:	d305      	bcc.n	801df22 <__multiply+0x8a>
 801df16:	1b13      	subs	r3, r2, r4
 801df18:	3b15      	subs	r3, #21
 801df1a:	089b      	lsrs	r3, r3, #2
 801df1c:	3301      	adds	r3, #1
 801df1e:	009b      	lsls	r3, r3, #2
 801df20:	9306      	str	r3, [sp, #24]
 801df22:	9b01      	ldr	r3, [sp, #4]
 801df24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df26:	4293      	cmp	r3, r2
 801df28:	d310      	bcc.n	801df4c <__multiply+0xb4>
 801df2a:	9b03      	ldr	r3, [sp, #12]
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	dd05      	ble.n	801df3c <__multiply+0xa4>
 801df30:	9b04      	ldr	r3, [sp, #16]
 801df32:	3b04      	subs	r3, #4
 801df34:	9304      	str	r3, [sp, #16]
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d056      	beq.n	801dfea <__multiply+0x152>
 801df3c:	9b02      	ldr	r3, [sp, #8]
 801df3e:	9a03      	ldr	r2, [sp, #12]
 801df40:	0018      	movs	r0, r3
 801df42:	611a      	str	r2, [r3, #16]
 801df44:	b00b      	add	sp, #44	@ 0x2c
 801df46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df48:	c304      	stmia	r3!, {r2}
 801df4a:	e7cf      	b.n	801deec <__multiply+0x54>
 801df4c:	9b01      	ldr	r3, [sp, #4]
 801df4e:	6818      	ldr	r0, [r3, #0]
 801df50:	b280      	uxth	r0, r0
 801df52:	2800      	cmp	r0, #0
 801df54:	d01e      	beq.n	801df94 <__multiply+0xfc>
 801df56:	4667      	mov	r7, ip
 801df58:	2500      	movs	r5, #0
 801df5a:	9e08      	ldr	r6, [sp, #32]
 801df5c:	ce02      	ldmia	r6!, {r1}
 801df5e:	683b      	ldr	r3, [r7, #0]
 801df60:	9307      	str	r3, [sp, #28]
 801df62:	b28b      	uxth	r3, r1
 801df64:	4343      	muls	r3, r0
 801df66:	001a      	movs	r2, r3
 801df68:	466b      	mov	r3, sp
 801df6a:	0c09      	lsrs	r1, r1, #16
 801df6c:	8b9b      	ldrh	r3, [r3, #28]
 801df6e:	4341      	muls	r1, r0
 801df70:	18d3      	adds	r3, r2, r3
 801df72:	9a07      	ldr	r2, [sp, #28]
 801df74:	195b      	adds	r3, r3, r5
 801df76:	0c12      	lsrs	r2, r2, #16
 801df78:	1889      	adds	r1, r1, r2
 801df7a:	0c1a      	lsrs	r2, r3, #16
 801df7c:	188a      	adds	r2, r1, r2
 801df7e:	b29b      	uxth	r3, r3
 801df80:	0c15      	lsrs	r5, r2, #16
 801df82:	0412      	lsls	r2, r2, #16
 801df84:	431a      	orrs	r2, r3
 801df86:	9b05      	ldr	r3, [sp, #20]
 801df88:	c704      	stmia	r7!, {r2}
 801df8a:	42b3      	cmp	r3, r6
 801df8c:	d8e6      	bhi.n	801df5c <__multiply+0xc4>
 801df8e:	4663      	mov	r3, ip
 801df90:	9a06      	ldr	r2, [sp, #24]
 801df92:	509d      	str	r5, [r3, r2]
 801df94:	9b01      	ldr	r3, [sp, #4]
 801df96:	6818      	ldr	r0, [r3, #0]
 801df98:	0c00      	lsrs	r0, r0, #16
 801df9a:	d020      	beq.n	801dfde <__multiply+0x146>
 801df9c:	4663      	mov	r3, ip
 801df9e:	0025      	movs	r5, r4
 801dfa0:	4661      	mov	r1, ip
 801dfa2:	2700      	movs	r7, #0
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	3514      	adds	r5, #20
 801dfa8:	682a      	ldr	r2, [r5, #0]
 801dfaa:	680e      	ldr	r6, [r1, #0]
 801dfac:	b292      	uxth	r2, r2
 801dfae:	4342      	muls	r2, r0
 801dfb0:	0c36      	lsrs	r6, r6, #16
 801dfb2:	1992      	adds	r2, r2, r6
 801dfb4:	19d2      	adds	r2, r2, r7
 801dfb6:	0416      	lsls	r6, r2, #16
 801dfb8:	b29b      	uxth	r3, r3
 801dfba:	431e      	orrs	r6, r3
 801dfbc:	600e      	str	r6, [r1, #0]
 801dfbe:	cd40      	ldmia	r5!, {r6}
 801dfc0:	684b      	ldr	r3, [r1, #4]
 801dfc2:	0c36      	lsrs	r6, r6, #16
 801dfc4:	4346      	muls	r6, r0
 801dfc6:	b29b      	uxth	r3, r3
 801dfc8:	0c12      	lsrs	r2, r2, #16
 801dfca:	18f3      	adds	r3, r6, r3
 801dfcc:	189b      	adds	r3, r3, r2
 801dfce:	9a05      	ldr	r2, [sp, #20]
 801dfd0:	0c1f      	lsrs	r7, r3, #16
 801dfd2:	3104      	adds	r1, #4
 801dfd4:	42aa      	cmp	r2, r5
 801dfd6:	d8e7      	bhi.n	801dfa8 <__multiply+0x110>
 801dfd8:	4662      	mov	r2, ip
 801dfda:	9906      	ldr	r1, [sp, #24]
 801dfdc:	5053      	str	r3, [r2, r1]
 801dfde:	9b01      	ldr	r3, [sp, #4]
 801dfe0:	3304      	adds	r3, #4
 801dfe2:	9301      	str	r3, [sp, #4]
 801dfe4:	2304      	movs	r3, #4
 801dfe6:	449c      	add	ip, r3
 801dfe8:	e79b      	b.n	801df22 <__multiply+0x8a>
 801dfea:	9b03      	ldr	r3, [sp, #12]
 801dfec:	3b01      	subs	r3, #1
 801dfee:	9303      	str	r3, [sp, #12]
 801dff0:	e79b      	b.n	801df2a <__multiply+0x92>
 801dff2:	46c0      	nop			@ (mov r8, r8)
 801dff4:	08020fe9 	.word	0x08020fe9
 801dff8:	0802105a 	.word	0x0802105a

0801dffc <__pow5mult>:
 801dffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dffe:	2303      	movs	r3, #3
 801e000:	0015      	movs	r5, r2
 801e002:	0007      	movs	r7, r0
 801e004:	000e      	movs	r6, r1
 801e006:	401a      	ands	r2, r3
 801e008:	421d      	tst	r5, r3
 801e00a:	d008      	beq.n	801e01e <__pow5mult+0x22>
 801e00c:	4925      	ldr	r1, [pc, #148]	@ (801e0a4 <__pow5mult+0xa8>)
 801e00e:	3a01      	subs	r2, #1
 801e010:	0092      	lsls	r2, r2, #2
 801e012:	5852      	ldr	r2, [r2, r1]
 801e014:	2300      	movs	r3, #0
 801e016:	0031      	movs	r1, r6
 801e018:	f7ff fe46 	bl	801dca8 <__multadd>
 801e01c:	0006      	movs	r6, r0
 801e01e:	10ad      	asrs	r5, r5, #2
 801e020:	d03d      	beq.n	801e09e <__pow5mult+0xa2>
 801e022:	69fc      	ldr	r4, [r7, #28]
 801e024:	2c00      	cmp	r4, #0
 801e026:	d10f      	bne.n	801e048 <__pow5mult+0x4c>
 801e028:	2010      	movs	r0, #16
 801e02a:	f7ff fd07 	bl	801da3c <malloc>
 801e02e:	1e02      	subs	r2, r0, #0
 801e030:	61f8      	str	r0, [r7, #28]
 801e032:	d105      	bne.n	801e040 <__pow5mult+0x44>
 801e034:	21b4      	movs	r1, #180	@ 0xb4
 801e036:	4b1c      	ldr	r3, [pc, #112]	@ (801e0a8 <__pow5mult+0xac>)
 801e038:	481c      	ldr	r0, [pc, #112]	@ (801e0ac <__pow5mult+0xb0>)
 801e03a:	31ff      	adds	r1, #255	@ 0xff
 801e03c:	f000 febe 	bl	801edbc <__assert_func>
 801e040:	6044      	str	r4, [r0, #4]
 801e042:	6084      	str	r4, [r0, #8]
 801e044:	6004      	str	r4, [r0, #0]
 801e046:	60c4      	str	r4, [r0, #12]
 801e048:	69fb      	ldr	r3, [r7, #28]
 801e04a:	689c      	ldr	r4, [r3, #8]
 801e04c:	9301      	str	r3, [sp, #4]
 801e04e:	2c00      	cmp	r4, #0
 801e050:	d108      	bne.n	801e064 <__pow5mult+0x68>
 801e052:	0038      	movs	r0, r7
 801e054:	4916      	ldr	r1, [pc, #88]	@ (801e0b0 <__pow5mult+0xb4>)
 801e056:	f7ff ff07 	bl	801de68 <__i2b>
 801e05a:	9b01      	ldr	r3, [sp, #4]
 801e05c:	0004      	movs	r4, r0
 801e05e:	6098      	str	r0, [r3, #8]
 801e060:	2300      	movs	r3, #0
 801e062:	6003      	str	r3, [r0, #0]
 801e064:	2301      	movs	r3, #1
 801e066:	421d      	tst	r5, r3
 801e068:	d00a      	beq.n	801e080 <__pow5mult+0x84>
 801e06a:	0031      	movs	r1, r6
 801e06c:	0022      	movs	r2, r4
 801e06e:	0038      	movs	r0, r7
 801e070:	f7ff ff12 	bl	801de98 <__multiply>
 801e074:	0031      	movs	r1, r6
 801e076:	9001      	str	r0, [sp, #4]
 801e078:	0038      	movs	r0, r7
 801e07a:	f7ff fdf1 	bl	801dc60 <_Bfree>
 801e07e:	9e01      	ldr	r6, [sp, #4]
 801e080:	106d      	asrs	r5, r5, #1
 801e082:	d00c      	beq.n	801e09e <__pow5mult+0xa2>
 801e084:	6820      	ldr	r0, [r4, #0]
 801e086:	2800      	cmp	r0, #0
 801e088:	d107      	bne.n	801e09a <__pow5mult+0x9e>
 801e08a:	0022      	movs	r2, r4
 801e08c:	0021      	movs	r1, r4
 801e08e:	0038      	movs	r0, r7
 801e090:	f7ff ff02 	bl	801de98 <__multiply>
 801e094:	2300      	movs	r3, #0
 801e096:	6020      	str	r0, [r4, #0]
 801e098:	6003      	str	r3, [r0, #0]
 801e09a:	0004      	movs	r4, r0
 801e09c:	e7e2      	b.n	801e064 <__pow5mult+0x68>
 801e09e:	0030      	movs	r0, r6
 801e0a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e0a2:	46c0      	nop			@ (mov r8, r8)
 801e0a4:	080210b4 	.word	0x080210b4
 801e0a8:	08020f7a 	.word	0x08020f7a
 801e0ac:	0802105a 	.word	0x0802105a
 801e0b0:	00000271 	.word	0x00000271

0801e0b4 <__lshift>:
 801e0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0b6:	000c      	movs	r4, r1
 801e0b8:	0016      	movs	r6, r2
 801e0ba:	6923      	ldr	r3, [r4, #16]
 801e0bc:	1157      	asrs	r7, r2, #5
 801e0be:	b085      	sub	sp, #20
 801e0c0:	18fb      	adds	r3, r7, r3
 801e0c2:	9301      	str	r3, [sp, #4]
 801e0c4:	3301      	adds	r3, #1
 801e0c6:	9300      	str	r3, [sp, #0]
 801e0c8:	6849      	ldr	r1, [r1, #4]
 801e0ca:	68a3      	ldr	r3, [r4, #8]
 801e0cc:	9002      	str	r0, [sp, #8]
 801e0ce:	9a00      	ldr	r2, [sp, #0]
 801e0d0:	4293      	cmp	r3, r2
 801e0d2:	db10      	blt.n	801e0f6 <__lshift+0x42>
 801e0d4:	9802      	ldr	r0, [sp, #8]
 801e0d6:	f7ff fd7f 	bl	801dbd8 <_Balloc>
 801e0da:	2300      	movs	r3, #0
 801e0dc:	0001      	movs	r1, r0
 801e0de:	0005      	movs	r5, r0
 801e0e0:	001a      	movs	r2, r3
 801e0e2:	3114      	adds	r1, #20
 801e0e4:	4298      	cmp	r0, r3
 801e0e6:	d10c      	bne.n	801e102 <__lshift+0x4e>
 801e0e8:	21ef      	movs	r1, #239	@ 0xef
 801e0ea:	002a      	movs	r2, r5
 801e0ec:	4b25      	ldr	r3, [pc, #148]	@ (801e184 <__lshift+0xd0>)
 801e0ee:	4826      	ldr	r0, [pc, #152]	@ (801e188 <__lshift+0xd4>)
 801e0f0:	0049      	lsls	r1, r1, #1
 801e0f2:	f000 fe63 	bl	801edbc <__assert_func>
 801e0f6:	3101      	adds	r1, #1
 801e0f8:	005b      	lsls	r3, r3, #1
 801e0fa:	e7e8      	b.n	801e0ce <__lshift+0x1a>
 801e0fc:	0098      	lsls	r0, r3, #2
 801e0fe:	500a      	str	r2, [r1, r0]
 801e100:	3301      	adds	r3, #1
 801e102:	42bb      	cmp	r3, r7
 801e104:	dbfa      	blt.n	801e0fc <__lshift+0x48>
 801e106:	43fb      	mvns	r3, r7
 801e108:	17db      	asrs	r3, r3, #31
 801e10a:	401f      	ands	r7, r3
 801e10c:	00bf      	lsls	r7, r7, #2
 801e10e:	0023      	movs	r3, r4
 801e110:	201f      	movs	r0, #31
 801e112:	19c9      	adds	r1, r1, r7
 801e114:	0037      	movs	r7, r6
 801e116:	6922      	ldr	r2, [r4, #16]
 801e118:	3314      	adds	r3, #20
 801e11a:	0092      	lsls	r2, r2, #2
 801e11c:	189a      	adds	r2, r3, r2
 801e11e:	4007      	ands	r7, r0
 801e120:	4206      	tst	r6, r0
 801e122:	d029      	beq.n	801e178 <__lshift+0xc4>
 801e124:	3001      	adds	r0, #1
 801e126:	1bc0      	subs	r0, r0, r7
 801e128:	9003      	str	r0, [sp, #12]
 801e12a:	468c      	mov	ip, r1
 801e12c:	2000      	movs	r0, #0
 801e12e:	681e      	ldr	r6, [r3, #0]
 801e130:	40be      	lsls	r6, r7
 801e132:	4306      	orrs	r6, r0
 801e134:	4660      	mov	r0, ip
 801e136:	c040      	stmia	r0!, {r6}
 801e138:	4684      	mov	ip, r0
 801e13a:	9e03      	ldr	r6, [sp, #12]
 801e13c:	cb01      	ldmia	r3!, {r0}
 801e13e:	40f0      	lsrs	r0, r6
 801e140:	429a      	cmp	r2, r3
 801e142:	d8f4      	bhi.n	801e12e <__lshift+0x7a>
 801e144:	0026      	movs	r6, r4
 801e146:	3615      	adds	r6, #21
 801e148:	2304      	movs	r3, #4
 801e14a:	42b2      	cmp	r2, r6
 801e14c:	d304      	bcc.n	801e158 <__lshift+0xa4>
 801e14e:	1b13      	subs	r3, r2, r4
 801e150:	3b15      	subs	r3, #21
 801e152:	089b      	lsrs	r3, r3, #2
 801e154:	3301      	adds	r3, #1
 801e156:	009b      	lsls	r3, r3, #2
 801e158:	50c8      	str	r0, [r1, r3]
 801e15a:	2800      	cmp	r0, #0
 801e15c:	d002      	beq.n	801e164 <__lshift+0xb0>
 801e15e:	9b01      	ldr	r3, [sp, #4]
 801e160:	3302      	adds	r3, #2
 801e162:	9300      	str	r3, [sp, #0]
 801e164:	9b00      	ldr	r3, [sp, #0]
 801e166:	9802      	ldr	r0, [sp, #8]
 801e168:	3b01      	subs	r3, #1
 801e16a:	0021      	movs	r1, r4
 801e16c:	612b      	str	r3, [r5, #16]
 801e16e:	f7ff fd77 	bl	801dc60 <_Bfree>
 801e172:	0028      	movs	r0, r5
 801e174:	b005      	add	sp, #20
 801e176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e178:	cb01      	ldmia	r3!, {r0}
 801e17a:	c101      	stmia	r1!, {r0}
 801e17c:	429a      	cmp	r2, r3
 801e17e:	d8fb      	bhi.n	801e178 <__lshift+0xc4>
 801e180:	e7f0      	b.n	801e164 <__lshift+0xb0>
 801e182:	46c0      	nop			@ (mov r8, r8)
 801e184:	08020fe9 	.word	0x08020fe9
 801e188:	0802105a 	.word	0x0802105a

0801e18c <__mcmp>:
 801e18c:	b530      	push	{r4, r5, lr}
 801e18e:	690b      	ldr	r3, [r1, #16]
 801e190:	6904      	ldr	r4, [r0, #16]
 801e192:	0002      	movs	r2, r0
 801e194:	1ae0      	subs	r0, r4, r3
 801e196:	429c      	cmp	r4, r3
 801e198:	d10f      	bne.n	801e1ba <__mcmp+0x2e>
 801e19a:	3214      	adds	r2, #20
 801e19c:	009b      	lsls	r3, r3, #2
 801e19e:	3114      	adds	r1, #20
 801e1a0:	0014      	movs	r4, r2
 801e1a2:	18c9      	adds	r1, r1, r3
 801e1a4:	18d2      	adds	r2, r2, r3
 801e1a6:	3a04      	subs	r2, #4
 801e1a8:	3904      	subs	r1, #4
 801e1aa:	6815      	ldr	r5, [r2, #0]
 801e1ac:	680b      	ldr	r3, [r1, #0]
 801e1ae:	429d      	cmp	r5, r3
 801e1b0:	d004      	beq.n	801e1bc <__mcmp+0x30>
 801e1b2:	2001      	movs	r0, #1
 801e1b4:	429d      	cmp	r5, r3
 801e1b6:	d200      	bcs.n	801e1ba <__mcmp+0x2e>
 801e1b8:	3802      	subs	r0, #2
 801e1ba:	bd30      	pop	{r4, r5, pc}
 801e1bc:	4294      	cmp	r4, r2
 801e1be:	d3f2      	bcc.n	801e1a6 <__mcmp+0x1a>
 801e1c0:	e7fb      	b.n	801e1ba <__mcmp+0x2e>
	...

0801e1c4 <__mdiff>:
 801e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1c6:	000c      	movs	r4, r1
 801e1c8:	b087      	sub	sp, #28
 801e1ca:	9000      	str	r0, [sp, #0]
 801e1cc:	0011      	movs	r1, r2
 801e1ce:	0020      	movs	r0, r4
 801e1d0:	0017      	movs	r7, r2
 801e1d2:	f7ff ffdb 	bl	801e18c <__mcmp>
 801e1d6:	1e05      	subs	r5, r0, #0
 801e1d8:	d110      	bne.n	801e1fc <__mdiff+0x38>
 801e1da:	0001      	movs	r1, r0
 801e1dc:	9800      	ldr	r0, [sp, #0]
 801e1de:	f7ff fcfb 	bl	801dbd8 <_Balloc>
 801e1e2:	1e02      	subs	r2, r0, #0
 801e1e4:	d104      	bne.n	801e1f0 <__mdiff+0x2c>
 801e1e6:	4b40      	ldr	r3, [pc, #256]	@ (801e2e8 <__mdiff+0x124>)
 801e1e8:	4840      	ldr	r0, [pc, #256]	@ (801e2ec <__mdiff+0x128>)
 801e1ea:	4941      	ldr	r1, [pc, #260]	@ (801e2f0 <__mdiff+0x12c>)
 801e1ec:	f000 fde6 	bl	801edbc <__assert_func>
 801e1f0:	2301      	movs	r3, #1
 801e1f2:	6145      	str	r5, [r0, #20]
 801e1f4:	6103      	str	r3, [r0, #16]
 801e1f6:	0010      	movs	r0, r2
 801e1f8:	b007      	add	sp, #28
 801e1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1fc:	2600      	movs	r6, #0
 801e1fe:	42b0      	cmp	r0, r6
 801e200:	da03      	bge.n	801e20a <__mdiff+0x46>
 801e202:	0023      	movs	r3, r4
 801e204:	003c      	movs	r4, r7
 801e206:	001f      	movs	r7, r3
 801e208:	3601      	adds	r6, #1
 801e20a:	6861      	ldr	r1, [r4, #4]
 801e20c:	9800      	ldr	r0, [sp, #0]
 801e20e:	f7ff fce3 	bl	801dbd8 <_Balloc>
 801e212:	1e02      	subs	r2, r0, #0
 801e214:	d103      	bne.n	801e21e <__mdiff+0x5a>
 801e216:	4b34      	ldr	r3, [pc, #208]	@ (801e2e8 <__mdiff+0x124>)
 801e218:	4834      	ldr	r0, [pc, #208]	@ (801e2ec <__mdiff+0x128>)
 801e21a:	4936      	ldr	r1, [pc, #216]	@ (801e2f4 <__mdiff+0x130>)
 801e21c:	e7e6      	b.n	801e1ec <__mdiff+0x28>
 801e21e:	6923      	ldr	r3, [r4, #16]
 801e220:	3414      	adds	r4, #20
 801e222:	9300      	str	r3, [sp, #0]
 801e224:	009b      	lsls	r3, r3, #2
 801e226:	18e3      	adds	r3, r4, r3
 801e228:	0021      	movs	r1, r4
 801e22a:	9401      	str	r4, [sp, #4]
 801e22c:	003c      	movs	r4, r7
 801e22e:	9302      	str	r3, [sp, #8]
 801e230:	693b      	ldr	r3, [r7, #16]
 801e232:	3414      	adds	r4, #20
 801e234:	009b      	lsls	r3, r3, #2
 801e236:	18e3      	adds	r3, r4, r3
 801e238:	9303      	str	r3, [sp, #12]
 801e23a:	0003      	movs	r3, r0
 801e23c:	60c6      	str	r6, [r0, #12]
 801e23e:	468c      	mov	ip, r1
 801e240:	2000      	movs	r0, #0
 801e242:	3314      	adds	r3, #20
 801e244:	9304      	str	r3, [sp, #16]
 801e246:	9305      	str	r3, [sp, #20]
 801e248:	4663      	mov	r3, ip
 801e24a:	cb20      	ldmia	r3!, {r5}
 801e24c:	b2a9      	uxth	r1, r5
 801e24e:	000e      	movs	r6, r1
 801e250:	469c      	mov	ip, r3
 801e252:	cc08      	ldmia	r4!, {r3}
 801e254:	0c2d      	lsrs	r5, r5, #16
 801e256:	b299      	uxth	r1, r3
 801e258:	1a71      	subs	r1, r6, r1
 801e25a:	1809      	adds	r1, r1, r0
 801e25c:	0c1b      	lsrs	r3, r3, #16
 801e25e:	1408      	asrs	r0, r1, #16
 801e260:	1aeb      	subs	r3, r5, r3
 801e262:	181b      	adds	r3, r3, r0
 801e264:	1418      	asrs	r0, r3, #16
 801e266:	b289      	uxth	r1, r1
 801e268:	041b      	lsls	r3, r3, #16
 801e26a:	4319      	orrs	r1, r3
 801e26c:	9b05      	ldr	r3, [sp, #20]
 801e26e:	c302      	stmia	r3!, {r1}
 801e270:	9305      	str	r3, [sp, #20]
 801e272:	9b03      	ldr	r3, [sp, #12]
 801e274:	42a3      	cmp	r3, r4
 801e276:	d8e7      	bhi.n	801e248 <__mdiff+0x84>
 801e278:	0039      	movs	r1, r7
 801e27a:	9c03      	ldr	r4, [sp, #12]
 801e27c:	3115      	adds	r1, #21
 801e27e:	2304      	movs	r3, #4
 801e280:	428c      	cmp	r4, r1
 801e282:	d304      	bcc.n	801e28e <__mdiff+0xca>
 801e284:	1be3      	subs	r3, r4, r7
 801e286:	3b15      	subs	r3, #21
 801e288:	089b      	lsrs	r3, r3, #2
 801e28a:	3301      	adds	r3, #1
 801e28c:	009b      	lsls	r3, r3, #2
 801e28e:	9901      	ldr	r1, [sp, #4]
 801e290:	18cd      	adds	r5, r1, r3
 801e292:	9904      	ldr	r1, [sp, #16]
 801e294:	002e      	movs	r6, r5
 801e296:	18cb      	adds	r3, r1, r3
 801e298:	001f      	movs	r7, r3
 801e29a:	9902      	ldr	r1, [sp, #8]
 801e29c:	428e      	cmp	r6, r1
 801e29e:	d311      	bcc.n	801e2c4 <__mdiff+0x100>
 801e2a0:	9c02      	ldr	r4, [sp, #8]
 801e2a2:	1ee9      	subs	r1, r5, #3
 801e2a4:	2000      	movs	r0, #0
 801e2a6:	428c      	cmp	r4, r1
 801e2a8:	d304      	bcc.n	801e2b4 <__mdiff+0xf0>
 801e2aa:	0021      	movs	r1, r4
 801e2ac:	3103      	adds	r1, #3
 801e2ae:	1b49      	subs	r1, r1, r5
 801e2b0:	0889      	lsrs	r1, r1, #2
 801e2b2:	0088      	lsls	r0, r1, #2
 801e2b4:	181b      	adds	r3, r3, r0
 801e2b6:	3b04      	subs	r3, #4
 801e2b8:	6819      	ldr	r1, [r3, #0]
 801e2ba:	2900      	cmp	r1, #0
 801e2bc:	d010      	beq.n	801e2e0 <__mdiff+0x11c>
 801e2be:	9b00      	ldr	r3, [sp, #0]
 801e2c0:	6113      	str	r3, [r2, #16]
 801e2c2:	e798      	b.n	801e1f6 <__mdiff+0x32>
 801e2c4:	4684      	mov	ip, r0
 801e2c6:	ce02      	ldmia	r6!, {r1}
 801e2c8:	b288      	uxth	r0, r1
 801e2ca:	4460      	add	r0, ip
 801e2cc:	1400      	asrs	r0, r0, #16
 801e2ce:	0c0c      	lsrs	r4, r1, #16
 801e2d0:	1904      	adds	r4, r0, r4
 801e2d2:	4461      	add	r1, ip
 801e2d4:	1420      	asrs	r0, r4, #16
 801e2d6:	b289      	uxth	r1, r1
 801e2d8:	0424      	lsls	r4, r4, #16
 801e2da:	4321      	orrs	r1, r4
 801e2dc:	c702      	stmia	r7!, {r1}
 801e2de:	e7dc      	b.n	801e29a <__mdiff+0xd6>
 801e2e0:	9900      	ldr	r1, [sp, #0]
 801e2e2:	3901      	subs	r1, #1
 801e2e4:	9100      	str	r1, [sp, #0]
 801e2e6:	e7e6      	b.n	801e2b6 <__mdiff+0xf2>
 801e2e8:	08020fe9 	.word	0x08020fe9
 801e2ec:	0802105a 	.word	0x0802105a
 801e2f0:	00000237 	.word	0x00000237
 801e2f4:	00000245 	.word	0x00000245

0801e2f8 <__ulp>:
 801e2f8:	b510      	push	{r4, lr}
 801e2fa:	2400      	movs	r4, #0
 801e2fc:	4b0c      	ldr	r3, [pc, #48]	@ (801e330 <__ulp+0x38>)
 801e2fe:	4a0d      	ldr	r2, [pc, #52]	@ (801e334 <__ulp+0x3c>)
 801e300:	400b      	ands	r3, r1
 801e302:	189b      	adds	r3, r3, r2
 801e304:	42a3      	cmp	r3, r4
 801e306:	dc06      	bgt.n	801e316 <__ulp+0x1e>
 801e308:	425b      	negs	r3, r3
 801e30a:	151a      	asrs	r2, r3, #20
 801e30c:	2a13      	cmp	r2, #19
 801e30e:	dc05      	bgt.n	801e31c <__ulp+0x24>
 801e310:	2380      	movs	r3, #128	@ 0x80
 801e312:	031b      	lsls	r3, r3, #12
 801e314:	4113      	asrs	r3, r2
 801e316:	0019      	movs	r1, r3
 801e318:	0020      	movs	r0, r4
 801e31a:	bd10      	pop	{r4, pc}
 801e31c:	3a14      	subs	r2, #20
 801e31e:	2401      	movs	r4, #1
 801e320:	2a1e      	cmp	r2, #30
 801e322:	dc02      	bgt.n	801e32a <__ulp+0x32>
 801e324:	2480      	movs	r4, #128	@ 0x80
 801e326:	0624      	lsls	r4, r4, #24
 801e328:	40d4      	lsrs	r4, r2
 801e32a:	2300      	movs	r3, #0
 801e32c:	e7f3      	b.n	801e316 <__ulp+0x1e>
 801e32e:	46c0      	nop			@ (mov r8, r8)
 801e330:	7ff00000 	.word	0x7ff00000
 801e334:	fcc00000 	.word	0xfcc00000

0801e338 <__b2d>:
 801e338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e33a:	0006      	movs	r6, r0
 801e33c:	6903      	ldr	r3, [r0, #16]
 801e33e:	3614      	adds	r6, #20
 801e340:	009b      	lsls	r3, r3, #2
 801e342:	18f3      	adds	r3, r6, r3
 801e344:	1f1d      	subs	r5, r3, #4
 801e346:	682c      	ldr	r4, [r5, #0]
 801e348:	000f      	movs	r7, r1
 801e34a:	0020      	movs	r0, r4
 801e34c:	9301      	str	r3, [sp, #4]
 801e34e:	f7ff fd3b 	bl	801ddc8 <__hi0bits>
 801e352:	2220      	movs	r2, #32
 801e354:	1a12      	subs	r2, r2, r0
 801e356:	603a      	str	r2, [r7, #0]
 801e358:	0003      	movs	r3, r0
 801e35a:	4a1c      	ldr	r2, [pc, #112]	@ (801e3cc <__b2d+0x94>)
 801e35c:	280a      	cmp	r0, #10
 801e35e:	dc15      	bgt.n	801e38c <__b2d+0x54>
 801e360:	210b      	movs	r1, #11
 801e362:	0027      	movs	r7, r4
 801e364:	1a09      	subs	r1, r1, r0
 801e366:	40cf      	lsrs	r7, r1
 801e368:	433a      	orrs	r2, r7
 801e36a:	468c      	mov	ip, r1
 801e36c:	0011      	movs	r1, r2
 801e36e:	2200      	movs	r2, #0
 801e370:	42ae      	cmp	r6, r5
 801e372:	d202      	bcs.n	801e37a <__b2d+0x42>
 801e374:	9a01      	ldr	r2, [sp, #4]
 801e376:	3a08      	subs	r2, #8
 801e378:	6812      	ldr	r2, [r2, #0]
 801e37a:	3315      	adds	r3, #21
 801e37c:	409c      	lsls	r4, r3
 801e37e:	4663      	mov	r3, ip
 801e380:	0027      	movs	r7, r4
 801e382:	40da      	lsrs	r2, r3
 801e384:	4317      	orrs	r7, r2
 801e386:	0038      	movs	r0, r7
 801e388:	b003      	add	sp, #12
 801e38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e38c:	2700      	movs	r7, #0
 801e38e:	42ae      	cmp	r6, r5
 801e390:	d202      	bcs.n	801e398 <__b2d+0x60>
 801e392:	9d01      	ldr	r5, [sp, #4]
 801e394:	3d08      	subs	r5, #8
 801e396:	682f      	ldr	r7, [r5, #0]
 801e398:	210b      	movs	r1, #11
 801e39a:	4249      	negs	r1, r1
 801e39c:	468c      	mov	ip, r1
 801e39e:	449c      	add	ip, r3
 801e3a0:	2b0b      	cmp	r3, #11
 801e3a2:	d010      	beq.n	801e3c6 <__b2d+0x8e>
 801e3a4:	4661      	mov	r1, ip
 801e3a6:	2320      	movs	r3, #32
 801e3a8:	408c      	lsls	r4, r1
 801e3aa:	1a5b      	subs	r3, r3, r1
 801e3ac:	0039      	movs	r1, r7
 801e3ae:	40d9      	lsrs	r1, r3
 801e3b0:	430c      	orrs	r4, r1
 801e3b2:	4322      	orrs	r2, r4
 801e3b4:	0011      	movs	r1, r2
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	42b5      	cmp	r5, r6
 801e3ba:	d901      	bls.n	801e3c0 <__b2d+0x88>
 801e3bc:	3d04      	subs	r5, #4
 801e3be:	682a      	ldr	r2, [r5, #0]
 801e3c0:	4664      	mov	r4, ip
 801e3c2:	40a7      	lsls	r7, r4
 801e3c4:	e7dd      	b.n	801e382 <__b2d+0x4a>
 801e3c6:	4322      	orrs	r2, r4
 801e3c8:	0011      	movs	r1, r2
 801e3ca:	e7dc      	b.n	801e386 <__b2d+0x4e>
 801e3cc:	3ff00000 	.word	0x3ff00000

0801e3d0 <__d2b>:
 801e3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e3d2:	2101      	movs	r1, #1
 801e3d4:	0016      	movs	r6, r2
 801e3d6:	001f      	movs	r7, r3
 801e3d8:	f7ff fbfe 	bl	801dbd8 <_Balloc>
 801e3dc:	1e04      	subs	r4, r0, #0
 801e3de:	d105      	bne.n	801e3ec <__d2b+0x1c>
 801e3e0:	0022      	movs	r2, r4
 801e3e2:	4b25      	ldr	r3, [pc, #148]	@ (801e478 <__d2b+0xa8>)
 801e3e4:	4825      	ldr	r0, [pc, #148]	@ (801e47c <__d2b+0xac>)
 801e3e6:	4926      	ldr	r1, [pc, #152]	@ (801e480 <__d2b+0xb0>)
 801e3e8:	f000 fce8 	bl	801edbc <__assert_func>
 801e3ec:	033b      	lsls	r3, r7, #12
 801e3ee:	007d      	lsls	r5, r7, #1
 801e3f0:	0b1b      	lsrs	r3, r3, #12
 801e3f2:	0d6d      	lsrs	r5, r5, #21
 801e3f4:	d002      	beq.n	801e3fc <__d2b+0x2c>
 801e3f6:	2280      	movs	r2, #128	@ 0x80
 801e3f8:	0352      	lsls	r2, r2, #13
 801e3fa:	4313      	orrs	r3, r2
 801e3fc:	9301      	str	r3, [sp, #4]
 801e3fe:	2e00      	cmp	r6, #0
 801e400:	d025      	beq.n	801e44e <__d2b+0x7e>
 801e402:	4668      	mov	r0, sp
 801e404:	9600      	str	r6, [sp, #0]
 801e406:	f7ff fd00 	bl	801de0a <__lo0bits>
 801e40a:	9b01      	ldr	r3, [sp, #4]
 801e40c:	9900      	ldr	r1, [sp, #0]
 801e40e:	2800      	cmp	r0, #0
 801e410:	d01b      	beq.n	801e44a <__d2b+0x7a>
 801e412:	2220      	movs	r2, #32
 801e414:	001e      	movs	r6, r3
 801e416:	1a12      	subs	r2, r2, r0
 801e418:	4096      	lsls	r6, r2
 801e41a:	0032      	movs	r2, r6
 801e41c:	40c3      	lsrs	r3, r0
 801e41e:	430a      	orrs	r2, r1
 801e420:	6162      	str	r2, [r4, #20]
 801e422:	9301      	str	r3, [sp, #4]
 801e424:	9e01      	ldr	r6, [sp, #4]
 801e426:	61a6      	str	r6, [r4, #24]
 801e428:	1e73      	subs	r3, r6, #1
 801e42a:	419e      	sbcs	r6, r3
 801e42c:	3601      	adds	r6, #1
 801e42e:	6126      	str	r6, [r4, #16]
 801e430:	2d00      	cmp	r5, #0
 801e432:	d014      	beq.n	801e45e <__d2b+0x8e>
 801e434:	2635      	movs	r6, #53	@ 0x35
 801e436:	4b13      	ldr	r3, [pc, #76]	@ (801e484 <__d2b+0xb4>)
 801e438:	18ed      	adds	r5, r5, r3
 801e43a:	9b08      	ldr	r3, [sp, #32]
 801e43c:	182d      	adds	r5, r5, r0
 801e43e:	601d      	str	r5, [r3, #0]
 801e440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e442:	1a36      	subs	r6, r6, r0
 801e444:	601e      	str	r6, [r3, #0]
 801e446:	0020      	movs	r0, r4
 801e448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e44a:	6161      	str	r1, [r4, #20]
 801e44c:	e7ea      	b.n	801e424 <__d2b+0x54>
 801e44e:	a801      	add	r0, sp, #4
 801e450:	f7ff fcdb 	bl	801de0a <__lo0bits>
 801e454:	9b01      	ldr	r3, [sp, #4]
 801e456:	2601      	movs	r6, #1
 801e458:	6163      	str	r3, [r4, #20]
 801e45a:	3020      	adds	r0, #32
 801e45c:	e7e7      	b.n	801e42e <__d2b+0x5e>
 801e45e:	4b0a      	ldr	r3, [pc, #40]	@ (801e488 <__d2b+0xb8>)
 801e460:	18c0      	adds	r0, r0, r3
 801e462:	9b08      	ldr	r3, [sp, #32]
 801e464:	6018      	str	r0, [r3, #0]
 801e466:	4b09      	ldr	r3, [pc, #36]	@ (801e48c <__d2b+0xbc>)
 801e468:	18f3      	adds	r3, r6, r3
 801e46a:	009b      	lsls	r3, r3, #2
 801e46c:	18e3      	adds	r3, r4, r3
 801e46e:	6958      	ldr	r0, [r3, #20]
 801e470:	f7ff fcaa 	bl	801ddc8 <__hi0bits>
 801e474:	0176      	lsls	r6, r6, #5
 801e476:	e7e3      	b.n	801e440 <__d2b+0x70>
 801e478:	08020fe9 	.word	0x08020fe9
 801e47c:	0802105a 	.word	0x0802105a
 801e480:	0000030f 	.word	0x0000030f
 801e484:	fffffbcd 	.word	0xfffffbcd
 801e488:	fffffbce 	.word	0xfffffbce
 801e48c:	3fffffff 	.word	0x3fffffff

0801e490 <__ratio>:
 801e490:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e492:	b087      	sub	sp, #28
 801e494:	000f      	movs	r7, r1
 801e496:	a904      	add	r1, sp, #16
 801e498:	0006      	movs	r6, r0
 801e49a:	f7ff ff4d 	bl	801e338 <__b2d>
 801e49e:	9000      	str	r0, [sp, #0]
 801e4a0:	9101      	str	r1, [sp, #4]
 801e4a2:	9b00      	ldr	r3, [sp, #0]
 801e4a4:	9c01      	ldr	r4, [sp, #4]
 801e4a6:	0038      	movs	r0, r7
 801e4a8:	a905      	add	r1, sp, #20
 801e4aa:	9302      	str	r3, [sp, #8]
 801e4ac:	9403      	str	r4, [sp, #12]
 801e4ae:	f7ff ff43 	bl	801e338 <__b2d>
 801e4b2:	000d      	movs	r5, r1
 801e4b4:	0002      	movs	r2, r0
 801e4b6:	000b      	movs	r3, r1
 801e4b8:	6930      	ldr	r0, [r6, #16]
 801e4ba:	6939      	ldr	r1, [r7, #16]
 801e4bc:	9e04      	ldr	r6, [sp, #16]
 801e4be:	1a40      	subs	r0, r0, r1
 801e4c0:	9905      	ldr	r1, [sp, #20]
 801e4c2:	0140      	lsls	r0, r0, #5
 801e4c4:	1a71      	subs	r1, r6, r1
 801e4c6:	1841      	adds	r1, r0, r1
 801e4c8:	0508      	lsls	r0, r1, #20
 801e4ca:	2900      	cmp	r1, #0
 801e4cc:	dd08      	ble.n	801e4e0 <__ratio+0x50>
 801e4ce:	9901      	ldr	r1, [sp, #4]
 801e4d0:	1841      	adds	r1, r0, r1
 801e4d2:	9103      	str	r1, [sp, #12]
 801e4d4:	9802      	ldr	r0, [sp, #8]
 801e4d6:	9903      	ldr	r1, [sp, #12]
 801e4d8:	f7e3 fc6c 	bl	8001db4 <__aeabi_ddiv>
 801e4dc:	b007      	add	sp, #28
 801e4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4e0:	1a2b      	subs	r3, r5, r0
 801e4e2:	e7f7      	b.n	801e4d4 <__ratio+0x44>

0801e4e4 <__copybits>:
 801e4e4:	b570      	push	{r4, r5, r6, lr}
 801e4e6:	0014      	movs	r4, r2
 801e4e8:	0005      	movs	r5, r0
 801e4ea:	3901      	subs	r1, #1
 801e4ec:	6913      	ldr	r3, [r2, #16]
 801e4ee:	1149      	asrs	r1, r1, #5
 801e4f0:	3101      	adds	r1, #1
 801e4f2:	0089      	lsls	r1, r1, #2
 801e4f4:	3414      	adds	r4, #20
 801e4f6:	009b      	lsls	r3, r3, #2
 801e4f8:	1841      	adds	r1, r0, r1
 801e4fa:	18e3      	adds	r3, r4, r3
 801e4fc:	42a3      	cmp	r3, r4
 801e4fe:	d80d      	bhi.n	801e51c <__copybits+0x38>
 801e500:	0014      	movs	r4, r2
 801e502:	3411      	adds	r4, #17
 801e504:	2500      	movs	r5, #0
 801e506:	429c      	cmp	r4, r3
 801e508:	d803      	bhi.n	801e512 <__copybits+0x2e>
 801e50a:	1a9b      	subs	r3, r3, r2
 801e50c:	3b11      	subs	r3, #17
 801e50e:	089b      	lsrs	r3, r3, #2
 801e510:	009d      	lsls	r5, r3, #2
 801e512:	2300      	movs	r3, #0
 801e514:	1940      	adds	r0, r0, r5
 801e516:	4281      	cmp	r1, r0
 801e518:	d803      	bhi.n	801e522 <__copybits+0x3e>
 801e51a:	bd70      	pop	{r4, r5, r6, pc}
 801e51c:	cc40      	ldmia	r4!, {r6}
 801e51e:	c540      	stmia	r5!, {r6}
 801e520:	e7ec      	b.n	801e4fc <__copybits+0x18>
 801e522:	c008      	stmia	r0!, {r3}
 801e524:	e7f7      	b.n	801e516 <__copybits+0x32>

0801e526 <__any_on>:
 801e526:	0002      	movs	r2, r0
 801e528:	6900      	ldr	r0, [r0, #16]
 801e52a:	b510      	push	{r4, lr}
 801e52c:	3214      	adds	r2, #20
 801e52e:	114b      	asrs	r3, r1, #5
 801e530:	4298      	cmp	r0, r3
 801e532:	db13      	blt.n	801e55c <__any_on+0x36>
 801e534:	dd0c      	ble.n	801e550 <__any_on+0x2a>
 801e536:	241f      	movs	r4, #31
 801e538:	0008      	movs	r0, r1
 801e53a:	4020      	ands	r0, r4
 801e53c:	4221      	tst	r1, r4
 801e53e:	d007      	beq.n	801e550 <__any_on+0x2a>
 801e540:	0099      	lsls	r1, r3, #2
 801e542:	588c      	ldr	r4, [r1, r2]
 801e544:	0021      	movs	r1, r4
 801e546:	40c1      	lsrs	r1, r0
 801e548:	4081      	lsls	r1, r0
 801e54a:	2001      	movs	r0, #1
 801e54c:	428c      	cmp	r4, r1
 801e54e:	d104      	bne.n	801e55a <__any_on+0x34>
 801e550:	009b      	lsls	r3, r3, #2
 801e552:	18d3      	adds	r3, r2, r3
 801e554:	4293      	cmp	r3, r2
 801e556:	d803      	bhi.n	801e560 <__any_on+0x3a>
 801e558:	2000      	movs	r0, #0
 801e55a:	bd10      	pop	{r4, pc}
 801e55c:	0003      	movs	r3, r0
 801e55e:	e7f7      	b.n	801e550 <__any_on+0x2a>
 801e560:	3b04      	subs	r3, #4
 801e562:	6819      	ldr	r1, [r3, #0]
 801e564:	2900      	cmp	r1, #0
 801e566:	d0f5      	beq.n	801e554 <__any_on+0x2e>
 801e568:	2001      	movs	r0, #1
 801e56a:	e7f6      	b.n	801e55a <__any_on+0x34>

0801e56c <__ascii_wctomb>:
 801e56c:	0003      	movs	r3, r0
 801e56e:	1e08      	subs	r0, r1, #0
 801e570:	d005      	beq.n	801e57e <__ascii_wctomb+0x12>
 801e572:	2aff      	cmp	r2, #255	@ 0xff
 801e574:	d904      	bls.n	801e580 <__ascii_wctomb+0x14>
 801e576:	228a      	movs	r2, #138	@ 0x8a
 801e578:	2001      	movs	r0, #1
 801e57a:	601a      	str	r2, [r3, #0]
 801e57c:	4240      	negs	r0, r0
 801e57e:	4770      	bx	lr
 801e580:	2001      	movs	r0, #1
 801e582:	700a      	strb	r2, [r1, #0]
 801e584:	e7fb      	b.n	801e57e <__ascii_wctomb+0x12>
	...

0801e588 <__ssputs_r>:
 801e588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e58a:	688e      	ldr	r6, [r1, #8]
 801e58c:	b085      	sub	sp, #20
 801e58e:	001f      	movs	r7, r3
 801e590:	000c      	movs	r4, r1
 801e592:	680b      	ldr	r3, [r1, #0]
 801e594:	9002      	str	r0, [sp, #8]
 801e596:	9203      	str	r2, [sp, #12]
 801e598:	42be      	cmp	r6, r7
 801e59a:	d830      	bhi.n	801e5fe <__ssputs_r+0x76>
 801e59c:	210c      	movs	r1, #12
 801e59e:	5e62      	ldrsh	r2, [r4, r1]
 801e5a0:	2190      	movs	r1, #144	@ 0x90
 801e5a2:	00c9      	lsls	r1, r1, #3
 801e5a4:	420a      	tst	r2, r1
 801e5a6:	d028      	beq.n	801e5fa <__ssputs_r+0x72>
 801e5a8:	2003      	movs	r0, #3
 801e5aa:	6921      	ldr	r1, [r4, #16]
 801e5ac:	1a5b      	subs	r3, r3, r1
 801e5ae:	9301      	str	r3, [sp, #4]
 801e5b0:	6963      	ldr	r3, [r4, #20]
 801e5b2:	4343      	muls	r3, r0
 801e5b4:	9801      	ldr	r0, [sp, #4]
 801e5b6:	0fdd      	lsrs	r5, r3, #31
 801e5b8:	18ed      	adds	r5, r5, r3
 801e5ba:	1c7b      	adds	r3, r7, #1
 801e5bc:	181b      	adds	r3, r3, r0
 801e5be:	106d      	asrs	r5, r5, #1
 801e5c0:	42ab      	cmp	r3, r5
 801e5c2:	d900      	bls.n	801e5c6 <__ssputs_r+0x3e>
 801e5c4:	001d      	movs	r5, r3
 801e5c6:	0552      	lsls	r2, r2, #21
 801e5c8:	d528      	bpl.n	801e61c <__ssputs_r+0x94>
 801e5ca:	0029      	movs	r1, r5
 801e5cc:	9802      	ldr	r0, [sp, #8]
 801e5ce:	f7ff fa61 	bl	801da94 <_malloc_r>
 801e5d2:	1e06      	subs	r6, r0, #0
 801e5d4:	d02c      	beq.n	801e630 <__ssputs_r+0xa8>
 801e5d6:	9a01      	ldr	r2, [sp, #4]
 801e5d8:	6921      	ldr	r1, [r4, #16]
 801e5da:	f7fd fff9 	bl	801c5d0 <memcpy>
 801e5de:	89a2      	ldrh	r2, [r4, #12]
 801e5e0:	4b18      	ldr	r3, [pc, #96]	@ (801e644 <__ssputs_r+0xbc>)
 801e5e2:	401a      	ands	r2, r3
 801e5e4:	2380      	movs	r3, #128	@ 0x80
 801e5e6:	4313      	orrs	r3, r2
 801e5e8:	81a3      	strh	r3, [r4, #12]
 801e5ea:	9b01      	ldr	r3, [sp, #4]
 801e5ec:	6126      	str	r6, [r4, #16]
 801e5ee:	18f6      	adds	r6, r6, r3
 801e5f0:	6026      	str	r6, [r4, #0]
 801e5f2:	003e      	movs	r6, r7
 801e5f4:	6165      	str	r5, [r4, #20]
 801e5f6:	1aed      	subs	r5, r5, r3
 801e5f8:	60a5      	str	r5, [r4, #8]
 801e5fa:	42be      	cmp	r6, r7
 801e5fc:	d900      	bls.n	801e600 <__ssputs_r+0x78>
 801e5fe:	003e      	movs	r6, r7
 801e600:	0032      	movs	r2, r6
 801e602:	9903      	ldr	r1, [sp, #12]
 801e604:	6820      	ldr	r0, [r4, #0]
 801e606:	f000 fbb3 	bl	801ed70 <memmove>
 801e60a:	2000      	movs	r0, #0
 801e60c:	68a3      	ldr	r3, [r4, #8]
 801e60e:	1b9b      	subs	r3, r3, r6
 801e610:	60a3      	str	r3, [r4, #8]
 801e612:	6823      	ldr	r3, [r4, #0]
 801e614:	199b      	adds	r3, r3, r6
 801e616:	6023      	str	r3, [r4, #0]
 801e618:	b005      	add	sp, #20
 801e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e61c:	002a      	movs	r2, r5
 801e61e:	9802      	ldr	r0, [sp, #8]
 801e620:	f000 fc17 	bl	801ee52 <_realloc_r>
 801e624:	1e06      	subs	r6, r0, #0
 801e626:	d1e0      	bne.n	801e5ea <__ssputs_r+0x62>
 801e628:	6921      	ldr	r1, [r4, #16]
 801e62a:	9802      	ldr	r0, [sp, #8]
 801e62c:	f7fe fe62 	bl	801d2f4 <_free_r>
 801e630:	230c      	movs	r3, #12
 801e632:	2001      	movs	r0, #1
 801e634:	9a02      	ldr	r2, [sp, #8]
 801e636:	4240      	negs	r0, r0
 801e638:	6013      	str	r3, [r2, #0]
 801e63a:	89a2      	ldrh	r2, [r4, #12]
 801e63c:	3334      	adds	r3, #52	@ 0x34
 801e63e:	4313      	orrs	r3, r2
 801e640:	81a3      	strh	r3, [r4, #12]
 801e642:	e7e9      	b.n	801e618 <__ssputs_r+0x90>
 801e644:	fffffb7f 	.word	0xfffffb7f

0801e648 <_svfiprintf_r>:
 801e648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e64a:	b0a1      	sub	sp, #132	@ 0x84
 801e64c:	9003      	str	r0, [sp, #12]
 801e64e:	001d      	movs	r5, r3
 801e650:	898b      	ldrh	r3, [r1, #12]
 801e652:	000f      	movs	r7, r1
 801e654:	0016      	movs	r6, r2
 801e656:	061b      	lsls	r3, r3, #24
 801e658:	d511      	bpl.n	801e67e <_svfiprintf_r+0x36>
 801e65a:	690b      	ldr	r3, [r1, #16]
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	d10e      	bne.n	801e67e <_svfiprintf_r+0x36>
 801e660:	2140      	movs	r1, #64	@ 0x40
 801e662:	f7ff fa17 	bl	801da94 <_malloc_r>
 801e666:	6038      	str	r0, [r7, #0]
 801e668:	6138      	str	r0, [r7, #16]
 801e66a:	2800      	cmp	r0, #0
 801e66c:	d105      	bne.n	801e67a <_svfiprintf_r+0x32>
 801e66e:	230c      	movs	r3, #12
 801e670:	9a03      	ldr	r2, [sp, #12]
 801e672:	6013      	str	r3, [r2, #0]
 801e674:	2001      	movs	r0, #1
 801e676:	4240      	negs	r0, r0
 801e678:	e0cf      	b.n	801e81a <_svfiprintf_r+0x1d2>
 801e67a:	2340      	movs	r3, #64	@ 0x40
 801e67c:	617b      	str	r3, [r7, #20]
 801e67e:	2300      	movs	r3, #0
 801e680:	ac08      	add	r4, sp, #32
 801e682:	6163      	str	r3, [r4, #20]
 801e684:	3320      	adds	r3, #32
 801e686:	7663      	strb	r3, [r4, #25]
 801e688:	3310      	adds	r3, #16
 801e68a:	76a3      	strb	r3, [r4, #26]
 801e68c:	9507      	str	r5, [sp, #28]
 801e68e:	0035      	movs	r5, r6
 801e690:	782b      	ldrb	r3, [r5, #0]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d001      	beq.n	801e69a <_svfiprintf_r+0x52>
 801e696:	2b25      	cmp	r3, #37	@ 0x25
 801e698:	d148      	bne.n	801e72c <_svfiprintf_r+0xe4>
 801e69a:	1bab      	subs	r3, r5, r6
 801e69c:	9305      	str	r3, [sp, #20]
 801e69e:	42b5      	cmp	r5, r6
 801e6a0:	d00b      	beq.n	801e6ba <_svfiprintf_r+0x72>
 801e6a2:	0032      	movs	r2, r6
 801e6a4:	0039      	movs	r1, r7
 801e6a6:	9803      	ldr	r0, [sp, #12]
 801e6a8:	f7ff ff6e 	bl	801e588 <__ssputs_r>
 801e6ac:	3001      	adds	r0, #1
 801e6ae:	d100      	bne.n	801e6b2 <_svfiprintf_r+0x6a>
 801e6b0:	e0ae      	b.n	801e810 <_svfiprintf_r+0x1c8>
 801e6b2:	6963      	ldr	r3, [r4, #20]
 801e6b4:	9a05      	ldr	r2, [sp, #20]
 801e6b6:	189b      	adds	r3, r3, r2
 801e6b8:	6163      	str	r3, [r4, #20]
 801e6ba:	782b      	ldrb	r3, [r5, #0]
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d100      	bne.n	801e6c2 <_svfiprintf_r+0x7a>
 801e6c0:	e0a6      	b.n	801e810 <_svfiprintf_r+0x1c8>
 801e6c2:	2201      	movs	r2, #1
 801e6c4:	2300      	movs	r3, #0
 801e6c6:	4252      	negs	r2, r2
 801e6c8:	6062      	str	r2, [r4, #4]
 801e6ca:	a904      	add	r1, sp, #16
 801e6cc:	3254      	adds	r2, #84	@ 0x54
 801e6ce:	1852      	adds	r2, r2, r1
 801e6d0:	1c6e      	adds	r6, r5, #1
 801e6d2:	6023      	str	r3, [r4, #0]
 801e6d4:	60e3      	str	r3, [r4, #12]
 801e6d6:	60a3      	str	r3, [r4, #8]
 801e6d8:	7013      	strb	r3, [r2, #0]
 801e6da:	65a3      	str	r3, [r4, #88]	@ 0x58
 801e6dc:	4b54      	ldr	r3, [pc, #336]	@ (801e830 <_svfiprintf_r+0x1e8>)
 801e6de:	2205      	movs	r2, #5
 801e6e0:	0018      	movs	r0, r3
 801e6e2:	7831      	ldrb	r1, [r6, #0]
 801e6e4:	9305      	str	r3, [sp, #20]
 801e6e6:	f7fd ff68 	bl	801c5ba <memchr>
 801e6ea:	1c75      	adds	r5, r6, #1
 801e6ec:	2800      	cmp	r0, #0
 801e6ee:	d11f      	bne.n	801e730 <_svfiprintf_r+0xe8>
 801e6f0:	6822      	ldr	r2, [r4, #0]
 801e6f2:	06d3      	lsls	r3, r2, #27
 801e6f4:	d504      	bpl.n	801e700 <_svfiprintf_r+0xb8>
 801e6f6:	2353      	movs	r3, #83	@ 0x53
 801e6f8:	a904      	add	r1, sp, #16
 801e6fa:	185b      	adds	r3, r3, r1
 801e6fc:	2120      	movs	r1, #32
 801e6fe:	7019      	strb	r1, [r3, #0]
 801e700:	0713      	lsls	r3, r2, #28
 801e702:	d504      	bpl.n	801e70e <_svfiprintf_r+0xc6>
 801e704:	2353      	movs	r3, #83	@ 0x53
 801e706:	a904      	add	r1, sp, #16
 801e708:	185b      	adds	r3, r3, r1
 801e70a:	212b      	movs	r1, #43	@ 0x2b
 801e70c:	7019      	strb	r1, [r3, #0]
 801e70e:	7833      	ldrb	r3, [r6, #0]
 801e710:	2b2a      	cmp	r3, #42	@ 0x2a
 801e712:	d016      	beq.n	801e742 <_svfiprintf_r+0xfa>
 801e714:	0035      	movs	r5, r6
 801e716:	2100      	movs	r1, #0
 801e718:	200a      	movs	r0, #10
 801e71a:	68e3      	ldr	r3, [r4, #12]
 801e71c:	782a      	ldrb	r2, [r5, #0]
 801e71e:	1c6e      	adds	r6, r5, #1
 801e720:	3a30      	subs	r2, #48	@ 0x30
 801e722:	2a09      	cmp	r2, #9
 801e724:	d950      	bls.n	801e7c8 <_svfiprintf_r+0x180>
 801e726:	2900      	cmp	r1, #0
 801e728:	d111      	bne.n	801e74e <_svfiprintf_r+0x106>
 801e72a:	e017      	b.n	801e75c <_svfiprintf_r+0x114>
 801e72c:	3501      	adds	r5, #1
 801e72e:	e7af      	b.n	801e690 <_svfiprintf_r+0x48>
 801e730:	9b05      	ldr	r3, [sp, #20]
 801e732:	6822      	ldr	r2, [r4, #0]
 801e734:	1ac0      	subs	r0, r0, r3
 801e736:	2301      	movs	r3, #1
 801e738:	4083      	lsls	r3, r0
 801e73a:	4313      	orrs	r3, r2
 801e73c:	002e      	movs	r6, r5
 801e73e:	6023      	str	r3, [r4, #0]
 801e740:	e7cc      	b.n	801e6dc <_svfiprintf_r+0x94>
 801e742:	9b07      	ldr	r3, [sp, #28]
 801e744:	1d19      	adds	r1, r3, #4
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	9107      	str	r1, [sp, #28]
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	db01      	blt.n	801e752 <_svfiprintf_r+0x10a>
 801e74e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e750:	e004      	b.n	801e75c <_svfiprintf_r+0x114>
 801e752:	425b      	negs	r3, r3
 801e754:	60e3      	str	r3, [r4, #12]
 801e756:	2302      	movs	r3, #2
 801e758:	4313      	orrs	r3, r2
 801e75a:	6023      	str	r3, [r4, #0]
 801e75c:	782b      	ldrb	r3, [r5, #0]
 801e75e:	2b2e      	cmp	r3, #46	@ 0x2e
 801e760:	d10c      	bne.n	801e77c <_svfiprintf_r+0x134>
 801e762:	786b      	ldrb	r3, [r5, #1]
 801e764:	2b2a      	cmp	r3, #42	@ 0x2a
 801e766:	d134      	bne.n	801e7d2 <_svfiprintf_r+0x18a>
 801e768:	9b07      	ldr	r3, [sp, #28]
 801e76a:	3502      	adds	r5, #2
 801e76c:	1d1a      	adds	r2, r3, #4
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	9207      	str	r2, [sp, #28]
 801e772:	2b00      	cmp	r3, #0
 801e774:	da01      	bge.n	801e77a <_svfiprintf_r+0x132>
 801e776:	2301      	movs	r3, #1
 801e778:	425b      	negs	r3, r3
 801e77a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e77c:	4e2d      	ldr	r6, [pc, #180]	@ (801e834 <_svfiprintf_r+0x1ec>)
 801e77e:	2203      	movs	r2, #3
 801e780:	0030      	movs	r0, r6
 801e782:	7829      	ldrb	r1, [r5, #0]
 801e784:	f7fd ff19 	bl	801c5ba <memchr>
 801e788:	2800      	cmp	r0, #0
 801e78a:	d006      	beq.n	801e79a <_svfiprintf_r+0x152>
 801e78c:	2340      	movs	r3, #64	@ 0x40
 801e78e:	1b80      	subs	r0, r0, r6
 801e790:	4083      	lsls	r3, r0
 801e792:	6822      	ldr	r2, [r4, #0]
 801e794:	3501      	adds	r5, #1
 801e796:	4313      	orrs	r3, r2
 801e798:	6023      	str	r3, [r4, #0]
 801e79a:	7829      	ldrb	r1, [r5, #0]
 801e79c:	2206      	movs	r2, #6
 801e79e:	4826      	ldr	r0, [pc, #152]	@ (801e838 <_svfiprintf_r+0x1f0>)
 801e7a0:	1c6e      	adds	r6, r5, #1
 801e7a2:	7621      	strb	r1, [r4, #24]
 801e7a4:	f7fd ff09 	bl	801c5ba <memchr>
 801e7a8:	2800      	cmp	r0, #0
 801e7aa:	d038      	beq.n	801e81e <_svfiprintf_r+0x1d6>
 801e7ac:	4b23      	ldr	r3, [pc, #140]	@ (801e83c <_svfiprintf_r+0x1f4>)
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d122      	bne.n	801e7f8 <_svfiprintf_r+0x1b0>
 801e7b2:	2207      	movs	r2, #7
 801e7b4:	9b07      	ldr	r3, [sp, #28]
 801e7b6:	3307      	adds	r3, #7
 801e7b8:	4393      	bics	r3, r2
 801e7ba:	3308      	adds	r3, #8
 801e7bc:	9307      	str	r3, [sp, #28]
 801e7be:	6963      	ldr	r3, [r4, #20]
 801e7c0:	9a04      	ldr	r2, [sp, #16]
 801e7c2:	189b      	adds	r3, r3, r2
 801e7c4:	6163      	str	r3, [r4, #20]
 801e7c6:	e762      	b.n	801e68e <_svfiprintf_r+0x46>
 801e7c8:	4343      	muls	r3, r0
 801e7ca:	0035      	movs	r5, r6
 801e7cc:	2101      	movs	r1, #1
 801e7ce:	189b      	adds	r3, r3, r2
 801e7d0:	e7a4      	b.n	801e71c <_svfiprintf_r+0xd4>
 801e7d2:	2300      	movs	r3, #0
 801e7d4:	200a      	movs	r0, #10
 801e7d6:	0019      	movs	r1, r3
 801e7d8:	3501      	adds	r5, #1
 801e7da:	6063      	str	r3, [r4, #4]
 801e7dc:	782a      	ldrb	r2, [r5, #0]
 801e7de:	1c6e      	adds	r6, r5, #1
 801e7e0:	3a30      	subs	r2, #48	@ 0x30
 801e7e2:	2a09      	cmp	r2, #9
 801e7e4:	d903      	bls.n	801e7ee <_svfiprintf_r+0x1a6>
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d0c8      	beq.n	801e77c <_svfiprintf_r+0x134>
 801e7ea:	9109      	str	r1, [sp, #36]	@ 0x24
 801e7ec:	e7c6      	b.n	801e77c <_svfiprintf_r+0x134>
 801e7ee:	4341      	muls	r1, r0
 801e7f0:	0035      	movs	r5, r6
 801e7f2:	2301      	movs	r3, #1
 801e7f4:	1889      	adds	r1, r1, r2
 801e7f6:	e7f1      	b.n	801e7dc <_svfiprintf_r+0x194>
 801e7f8:	aa07      	add	r2, sp, #28
 801e7fa:	9200      	str	r2, [sp, #0]
 801e7fc:	0021      	movs	r1, r4
 801e7fe:	003a      	movs	r2, r7
 801e800:	4b0f      	ldr	r3, [pc, #60]	@ (801e840 <_svfiprintf_r+0x1f8>)
 801e802:	9803      	ldr	r0, [sp, #12]
 801e804:	f7fd f8d4 	bl	801b9b0 <_printf_float>
 801e808:	9004      	str	r0, [sp, #16]
 801e80a:	9b04      	ldr	r3, [sp, #16]
 801e80c:	3301      	adds	r3, #1
 801e80e:	d1d6      	bne.n	801e7be <_svfiprintf_r+0x176>
 801e810:	89bb      	ldrh	r3, [r7, #12]
 801e812:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e814:	065b      	lsls	r3, r3, #25
 801e816:	d500      	bpl.n	801e81a <_svfiprintf_r+0x1d2>
 801e818:	e72c      	b.n	801e674 <_svfiprintf_r+0x2c>
 801e81a:	b021      	add	sp, #132	@ 0x84
 801e81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e81e:	aa07      	add	r2, sp, #28
 801e820:	9200      	str	r2, [sp, #0]
 801e822:	0021      	movs	r1, r4
 801e824:	003a      	movs	r2, r7
 801e826:	4b06      	ldr	r3, [pc, #24]	@ (801e840 <_svfiprintf_r+0x1f8>)
 801e828:	9803      	ldr	r0, [sp, #12]
 801e82a:	f7fd fb6f 	bl	801bf0c <_printf_i>
 801e82e:	e7eb      	b.n	801e808 <_svfiprintf_r+0x1c0>
 801e830:	080211b0 	.word	0x080211b0
 801e834:	080211b6 	.word	0x080211b6
 801e838:	080211ba 	.word	0x080211ba
 801e83c:	0801b9b1 	.word	0x0801b9b1
 801e840:	0801e589 	.word	0x0801e589

0801e844 <__sfputc_r>:
 801e844:	6893      	ldr	r3, [r2, #8]
 801e846:	b510      	push	{r4, lr}
 801e848:	3b01      	subs	r3, #1
 801e84a:	6093      	str	r3, [r2, #8]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	da04      	bge.n	801e85a <__sfputc_r+0x16>
 801e850:	6994      	ldr	r4, [r2, #24]
 801e852:	42a3      	cmp	r3, r4
 801e854:	db07      	blt.n	801e866 <__sfputc_r+0x22>
 801e856:	290a      	cmp	r1, #10
 801e858:	d005      	beq.n	801e866 <__sfputc_r+0x22>
 801e85a:	6813      	ldr	r3, [r2, #0]
 801e85c:	1c58      	adds	r0, r3, #1
 801e85e:	6010      	str	r0, [r2, #0]
 801e860:	7019      	strb	r1, [r3, #0]
 801e862:	0008      	movs	r0, r1
 801e864:	bd10      	pop	{r4, pc}
 801e866:	f000 f9e2 	bl	801ec2e <__swbuf_r>
 801e86a:	0001      	movs	r1, r0
 801e86c:	e7f9      	b.n	801e862 <__sfputc_r+0x1e>

0801e86e <__sfputs_r>:
 801e86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e870:	0006      	movs	r6, r0
 801e872:	000f      	movs	r7, r1
 801e874:	0014      	movs	r4, r2
 801e876:	18d5      	adds	r5, r2, r3
 801e878:	42ac      	cmp	r4, r5
 801e87a:	d101      	bne.n	801e880 <__sfputs_r+0x12>
 801e87c:	2000      	movs	r0, #0
 801e87e:	e007      	b.n	801e890 <__sfputs_r+0x22>
 801e880:	7821      	ldrb	r1, [r4, #0]
 801e882:	003a      	movs	r2, r7
 801e884:	0030      	movs	r0, r6
 801e886:	f7ff ffdd 	bl	801e844 <__sfputc_r>
 801e88a:	3401      	adds	r4, #1
 801e88c:	1c43      	adds	r3, r0, #1
 801e88e:	d1f3      	bne.n	801e878 <__sfputs_r+0xa>
 801e890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e894 <_vfiprintf_r>:
 801e894:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e896:	b0a1      	sub	sp, #132	@ 0x84
 801e898:	000f      	movs	r7, r1
 801e89a:	0015      	movs	r5, r2
 801e89c:	001e      	movs	r6, r3
 801e89e:	9003      	str	r0, [sp, #12]
 801e8a0:	2800      	cmp	r0, #0
 801e8a2:	d004      	beq.n	801e8ae <_vfiprintf_r+0x1a>
 801e8a4:	6a03      	ldr	r3, [r0, #32]
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d101      	bne.n	801e8ae <_vfiprintf_r+0x1a>
 801e8aa:	f7fd fccd 	bl	801c248 <__sinit>
 801e8ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e8b0:	07db      	lsls	r3, r3, #31
 801e8b2:	d405      	bmi.n	801e8c0 <_vfiprintf_r+0x2c>
 801e8b4:	89bb      	ldrh	r3, [r7, #12]
 801e8b6:	059b      	lsls	r3, r3, #22
 801e8b8:	d402      	bmi.n	801e8c0 <_vfiprintf_r+0x2c>
 801e8ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e8bc:	f7fd fe7b 	bl	801c5b6 <__retarget_lock_acquire_recursive>
 801e8c0:	89bb      	ldrh	r3, [r7, #12]
 801e8c2:	071b      	lsls	r3, r3, #28
 801e8c4:	d502      	bpl.n	801e8cc <_vfiprintf_r+0x38>
 801e8c6:	693b      	ldr	r3, [r7, #16]
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d113      	bne.n	801e8f4 <_vfiprintf_r+0x60>
 801e8cc:	0039      	movs	r1, r7
 801e8ce:	9803      	ldr	r0, [sp, #12]
 801e8d0:	f000 f9f0 	bl	801ecb4 <__swsetup_r>
 801e8d4:	2800      	cmp	r0, #0
 801e8d6:	d00d      	beq.n	801e8f4 <_vfiprintf_r+0x60>
 801e8d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e8da:	07db      	lsls	r3, r3, #31
 801e8dc:	d503      	bpl.n	801e8e6 <_vfiprintf_r+0x52>
 801e8de:	2001      	movs	r0, #1
 801e8e0:	4240      	negs	r0, r0
 801e8e2:	b021      	add	sp, #132	@ 0x84
 801e8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8e6:	89bb      	ldrh	r3, [r7, #12]
 801e8e8:	059b      	lsls	r3, r3, #22
 801e8ea:	d4f8      	bmi.n	801e8de <_vfiprintf_r+0x4a>
 801e8ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e8ee:	f7fd fe63 	bl	801c5b8 <__retarget_lock_release_recursive>
 801e8f2:	e7f4      	b.n	801e8de <_vfiprintf_r+0x4a>
 801e8f4:	2300      	movs	r3, #0
 801e8f6:	ac08      	add	r4, sp, #32
 801e8f8:	6163      	str	r3, [r4, #20]
 801e8fa:	3320      	adds	r3, #32
 801e8fc:	7663      	strb	r3, [r4, #25]
 801e8fe:	3310      	adds	r3, #16
 801e900:	76a3      	strb	r3, [r4, #26]
 801e902:	9607      	str	r6, [sp, #28]
 801e904:	002e      	movs	r6, r5
 801e906:	7833      	ldrb	r3, [r6, #0]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d001      	beq.n	801e910 <_vfiprintf_r+0x7c>
 801e90c:	2b25      	cmp	r3, #37	@ 0x25
 801e90e:	d148      	bne.n	801e9a2 <_vfiprintf_r+0x10e>
 801e910:	1b73      	subs	r3, r6, r5
 801e912:	9305      	str	r3, [sp, #20]
 801e914:	42ae      	cmp	r6, r5
 801e916:	d00b      	beq.n	801e930 <_vfiprintf_r+0x9c>
 801e918:	002a      	movs	r2, r5
 801e91a:	0039      	movs	r1, r7
 801e91c:	9803      	ldr	r0, [sp, #12]
 801e91e:	f7ff ffa6 	bl	801e86e <__sfputs_r>
 801e922:	3001      	adds	r0, #1
 801e924:	d100      	bne.n	801e928 <_vfiprintf_r+0x94>
 801e926:	e0ae      	b.n	801ea86 <_vfiprintf_r+0x1f2>
 801e928:	6963      	ldr	r3, [r4, #20]
 801e92a:	9a05      	ldr	r2, [sp, #20]
 801e92c:	189b      	adds	r3, r3, r2
 801e92e:	6163      	str	r3, [r4, #20]
 801e930:	7833      	ldrb	r3, [r6, #0]
 801e932:	2b00      	cmp	r3, #0
 801e934:	d100      	bne.n	801e938 <_vfiprintf_r+0xa4>
 801e936:	e0a6      	b.n	801ea86 <_vfiprintf_r+0x1f2>
 801e938:	2201      	movs	r2, #1
 801e93a:	2300      	movs	r3, #0
 801e93c:	4252      	negs	r2, r2
 801e93e:	6062      	str	r2, [r4, #4]
 801e940:	a904      	add	r1, sp, #16
 801e942:	3254      	adds	r2, #84	@ 0x54
 801e944:	1852      	adds	r2, r2, r1
 801e946:	1c75      	adds	r5, r6, #1
 801e948:	6023      	str	r3, [r4, #0]
 801e94a:	60e3      	str	r3, [r4, #12]
 801e94c:	60a3      	str	r3, [r4, #8]
 801e94e:	7013      	strb	r3, [r2, #0]
 801e950:	65a3      	str	r3, [r4, #88]	@ 0x58
 801e952:	4b59      	ldr	r3, [pc, #356]	@ (801eab8 <_vfiprintf_r+0x224>)
 801e954:	2205      	movs	r2, #5
 801e956:	0018      	movs	r0, r3
 801e958:	7829      	ldrb	r1, [r5, #0]
 801e95a:	9305      	str	r3, [sp, #20]
 801e95c:	f7fd fe2d 	bl	801c5ba <memchr>
 801e960:	1c6e      	adds	r6, r5, #1
 801e962:	2800      	cmp	r0, #0
 801e964:	d11f      	bne.n	801e9a6 <_vfiprintf_r+0x112>
 801e966:	6822      	ldr	r2, [r4, #0]
 801e968:	06d3      	lsls	r3, r2, #27
 801e96a:	d504      	bpl.n	801e976 <_vfiprintf_r+0xe2>
 801e96c:	2353      	movs	r3, #83	@ 0x53
 801e96e:	a904      	add	r1, sp, #16
 801e970:	185b      	adds	r3, r3, r1
 801e972:	2120      	movs	r1, #32
 801e974:	7019      	strb	r1, [r3, #0]
 801e976:	0713      	lsls	r3, r2, #28
 801e978:	d504      	bpl.n	801e984 <_vfiprintf_r+0xf0>
 801e97a:	2353      	movs	r3, #83	@ 0x53
 801e97c:	a904      	add	r1, sp, #16
 801e97e:	185b      	adds	r3, r3, r1
 801e980:	212b      	movs	r1, #43	@ 0x2b
 801e982:	7019      	strb	r1, [r3, #0]
 801e984:	782b      	ldrb	r3, [r5, #0]
 801e986:	2b2a      	cmp	r3, #42	@ 0x2a
 801e988:	d016      	beq.n	801e9b8 <_vfiprintf_r+0x124>
 801e98a:	002e      	movs	r6, r5
 801e98c:	2100      	movs	r1, #0
 801e98e:	200a      	movs	r0, #10
 801e990:	68e3      	ldr	r3, [r4, #12]
 801e992:	7832      	ldrb	r2, [r6, #0]
 801e994:	1c75      	adds	r5, r6, #1
 801e996:	3a30      	subs	r2, #48	@ 0x30
 801e998:	2a09      	cmp	r2, #9
 801e99a:	d950      	bls.n	801ea3e <_vfiprintf_r+0x1aa>
 801e99c:	2900      	cmp	r1, #0
 801e99e:	d111      	bne.n	801e9c4 <_vfiprintf_r+0x130>
 801e9a0:	e017      	b.n	801e9d2 <_vfiprintf_r+0x13e>
 801e9a2:	3601      	adds	r6, #1
 801e9a4:	e7af      	b.n	801e906 <_vfiprintf_r+0x72>
 801e9a6:	9b05      	ldr	r3, [sp, #20]
 801e9a8:	6822      	ldr	r2, [r4, #0]
 801e9aa:	1ac0      	subs	r0, r0, r3
 801e9ac:	2301      	movs	r3, #1
 801e9ae:	4083      	lsls	r3, r0
 801e9b0:	4313      	orrs	r3, r2
 801e9b2:	0035      	movs	r5, r6
 801e9b4:	6023      	str	r3, [r4, #0]
 801e9b6:	e7cc      	b.n	801e952 <_vfiprintf_r+0xbe>
 801e9b8:	9b07      	ldr	r3, [sp, #28]
 801e9ba:	1d19      	adds	r1, r3, #4
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	9107      	str	r1, [sp, #28]
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	db01      	blt.n	801e9c8 <_vfiprintf_r+0x134>
 801e9c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e9c6:	e004      	b.n	801e9d2 <_vfiprintf_r+0x13e>
 801e9c8:	425b      	negs	r3, r3
 801e9ca:	60e3      	str	r3, [r4, #12]
 801e9cc:	2302      	movs	r3, #2
 801e9ce:	4313      	orrs	r3, r2
 801e9d0:	6023      	str	r3, [r4, #0]
 801e9d2:	7833      	ldrb	r3, [r6, #0]
 801e9d4:	2b2e      	cmp	r3, #46	@ 0x2e
 801e9d6:	d10c      	bne.n	801e9f2 <_vfiprintf_r+0x15e>
 801e9d8:	7873      	ldrb	r3, [r6, #1]
 801e9da:	2b2a      	cmp	r3, #42	@ 0x2a
 801e9dc:	d134      	bne.n	801ea48 <_vfiprintf_r+0x1b4>
 801e9de:	9b07      	ldr	r3, [sp, #28]
 801e9e0:	3602      	adds	r6, #2
 801e9e2:	1d1a      	adds	r2, r3, #4
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	9207      	str	r2, [sp, #28]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	da01      	bge.n	801e9f0 <_vfiprintf_r+0x15c>
 801e9ec:	2301      	movs	r3, #1
 801e9ee:	425b      	negs	r3, r3
 801e9f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e9f2:	4d32      	ldr	r5, [pc, #200]	@ (801eabc <_vfiprintf_r+0x228>)
 801e9f4:	2203      	movs	r2, #3
 801e9f6:	0028      	movs	r0, r5
 801e9f8:	7831      	ldrb	r1, [r6, #0]
 801e9fa:	f7fd fdde 	bl	801c5ba <memchr>
 801e9fe:	2800      	cmp	r0, #0
 801ea00:	d006      	beq.n	801ea10 <_vfiprintf_r+0x17c>
 801ea02:	2340      	movs	r3, #64	@ 0x40
 801ea04:	1b40      	subs	r0, r0, r5
 801ea06:	4083      	lsls	r3, r0
 801ea08:	6822      	ldr	r2, [r4, #0]
 801ea0a:	3601      	adds	r6, #1
 801ea0c:	4313      	orrs	r3, r2
 801ea0e:	6023      	str	r3, [r4, #0]
 801ea10:	7831      	ldrb	r1, [r6, #0]
 801ea12:	2206      	movs	r2, #6
 801ea14:	482a      	ldr	r0, [pc, #168]	@ (801eac0 <_vfiprintf_r+0x22c>)
 801ea16:	1c75      	adds	r5, r6, #1
 801ea18:	7621      	strb	r1, [r4, #24]
 801ea1a:	f7fd fdce 	bl	801c5ba <memchr>
 801ea1e:	2800      	cmp	r0, #0
 801ea20:	d040      	beq.n	801eaa4 <_vfiprintf_r+0x210>
 801ea22:	4b28      	ldr	r3, [pc, #160]	@ (801eac4 <_vfiprintf_r+0x230>)
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d122      	bne.n	801ea6e <_vfiprintf_r+0x1da>
 801ea28:	2207      	movs	r2, #7
 801ea2a:	9b07      	ldr	r3, [sp, #28]
 801ea2c:	3307      	adds	r3, #7
 801ea2e:	4393      	bics	r3, r2
 801ea30:	3308      	adds	r3, #8
 801ea32:	9307      	str	r3, [sp, #28]
 801ea34:	6963      	ldr	r3, [r4, #20]
 801ea36:	9a04      	ldr	r2, [sp, #16]
 801ea38:	189b      	adds	r3, r3, r2
 801ea3a:	6163      	str	r3, [r4, #20]
 801ea3c:	e762      	b.n	801e904 <_vfiprintf_r+0x70>
 801ea3e:	4343      	muls	r3, r0
 801ea40:	002e      	movs	r6, r5
 801ea42:	2101      	movs	r1, #1
 801ea44:	189b      	adds	r3, r3, r2
 801ea46:	e7a4      	b.n	801e992 <_vfiprintf_r+0xfe>
 801ea48:	2300      	movs	r3, #0
 801ea4a:	200a      	movs	r0, #10
 801ea4c:	0019      	movs	r1, r3
 801ea4e:	3601      	adds	r6, #1
 801ea50:	6063      	str	r3, [r4, #4]
 801ea52:	7832      	ldrb	r2, [r6, #0]
 801ea54:	1c75      	adds	r5, r6, #1
 801ea56:	3a30      	subs	r2, #48	@ 0x30
 801ea58:	2a09      	cmp	r2, #9
 801ea5a:	d903      	bls.n	801ea64 <_vfiprintf_r+0x1d0>
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d0c8      	beq.n	801e9f2 <_vfiprintf_r+0x15e>
 801ea60:	9109      	str	r1, [sp, #36]	@ 0x24
 801ea62:	e7c6      	b.n	801e9f2 <_vfiprintf_r+0x15e>
 801ea64:	4341      	muls	r1, r0
 801ea66:	002e      	movs	r6, r5
 801ea68:	2301      	movs	r3, #1
 801ea6a:	1889      	adds	r1, r1, r2
 801ea6c:	e7f1      	b.n	801ea52 <_vfiprintf_r+0x1be>
 801ea6e:	aa07      	add	r2, sp, #28
 801ea70:	9200      	str	r2, [sp, #0]
 801ea72:	0021      	movs	r1, r4
 801ea74:	003a      	movs	r2, r7
 801ea76:	4b14      	ldr	r3, [pc, #80]	@ (801eac8 <_vfiprintf_r+0x234>)
 801ea78:	9803      	ldr	r0, [sp, #12]
 801ea7a:	f7fc ff99 	bl	801b9b0 <_printf_float>
 801ea7e:	9004      	str	r0, [sp, #16]
 801ea80:	9b04      	ldr	r3, [sp, #16]
 801ea82:	3301      	adds	r3, #1
 801ea84:	d1d6      	bne.n	801ea34 <_vfiprintf_r+0x1a0>
 801ea86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ea88:	07db      	lsls	r3, r3, #31
 801ea8a:	d405      	bmi.n	801ea98 <_vfiprintf_r+0x204>
 801ea8c:	89bb      	ldrh	r3, [r7, #12]
 801ea8e:	059b      	lsls	r3, r3, #22
 801ea90:	d402      	bmi.n	801ea98 <_vfiprintf_r+0x204>
 801ea92:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ea94:	f7fd fd90 	bl	801c5b8 <__retarget_lock_release_recursive>
 801ea98:	89bb      	ldrh	r3, [r7, #12]
 801ea9a:	065b      	lsls	r3, r3, #25
 801ea9c:	d500      	bpl.n	801eaa0 <_vfiprintf_r+0x20c>
 801ea9e:	e71e      	b.n	801e8de <_vfiprintf_r+0x4a>
 801eaa0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801eaa2:	e71e      	b.n	801e8e2 <_vfiprintf_r+0x4e>
 801eaa4:	aa07      	add	r2, sp, #28
 801eaa6:	9200      	str	r2, [sp, #0]
 801eaa8:	0021      	movs	r1, r4
 801eaaa:	003a      	movs	r2, r7
 801eaac:	4b06      	ldr	r3, [pc, #24]	@ (801eac8 <_vfiprintf_r+0x234>)
 801eaae:	9803      	ldr	r0, [sp, #12]
 801eab0:	f7fd fa2c 	bl	801bf0c <_printf_i>
 801eab4:	e7e3      	b.n	801ea7e <_vfiprintf_r+0x1ea>
 801eab6:	46c0      	nop			@ (mov r8, r8)
 801eab8:	080211b0 	.word	0x080211b0
 801eabc:	080211b6 	.word	0x080211b6
 801eac0:	080211ba 	.word	0x080211ba
 801eac4:	0801b9b1 	.word	0x0801b9b1
 801eac8:	0801e86f 	.word	0x0801e86f

0801eacc <__sflush_r>:
 801eacc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eace:	220c      	movs	r2, #12
 801ead0:	5e8b      	ldrsh	r3, [r1, r2]
 801ead2:	0005      	movs	r5, r0
 801ead4:	000c      	movs	r4, r1
 801ead6:	071a      	lsls	r2, r3, #28
 801ead8:	d456      	bmi.n	801eb88 <__sflush_r+0xbc>
 801eada:	684a      	ldr	r2, [r1, #4]
 801eadc:	2a00      	cmp	r2, #0
 801eade:	dc02      	bgt.n	801eae6 <__sflush_r+0x1a>
 801eae0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801eae2:	2a00      	cmp	r2, #0
 801eae4:	dd4e      	ble.n	801eb84 <__sflush_r+0xb8>
 801eae6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801eae8:	2f00      	cmp	r7, #0
 801eaea:	d04b      	beq.n	801eb84 <__sflush_r+0xb8>
 801eaec:	2200      	movs	r2, #0
 801eaee:	2080      	movs	r0, #128	@ 0x80
 801eaf0:	682e      	ldr	r6, [r5, #0]
 801eaf2:	602a      	str	r2, [r5, #0]
 801eaf4:	001a      	movs	r2, r3
 801eaf6:	0140      	lsls	r0, r0, #5
 801eaf8:	6a21      	ldr	r1, [r4, #32]
 801eafa:	4002      	ands	r2, r0
 801eafc:	4203      	tst	r3, r0
 801eafe:	d033      	beq.n	801eb68 <__sflush_r+0x9c>
 801eb00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801eb02:	89a3      	ldrh	r3, [r4, #12]
 801eb04:	075b      	lsls	r3, r3, #29
 801eb06:	d506      	bpl.n	801eb16 <__sflush_r+0x4a>
 801eb08:	6863      	ldr	r3, [r4, #4]
 801eb0a:	1ad2      	subs	r2, r2, r3
 801eb0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d001      	beq.n	801eb16 <__sflush_r+0x4a>
 801eb12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801eb14:	1ad2      	subs	r2, r2, r3
 801eb16:	2300      	movs	r3, #0
 801eb18:	0028      	movs	r0, r5
 801eb1a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801eb1c:	6a21      	ldr	r1, [r4, #32]
 801eb1e:	47b8      	blx	r7
 801eb20:	89a2      	ldrh	r2, [r4, #12]
 801eb22:	1c43      	adds	r3, r0, #1
 801eb24:	d106      	bne.n	801eb34 <__sflush_r+0x68>
 801eb26:	6829      	ldr	r1, [r5, #0]
 801eb28:	291d      	cmp	r1, #29
 801eb2a:	d846      	bhi.n	801ebba <__sflush_r+0xee>
 801eb2c:	4b29      	ldr	r3, [pc, #164]	@ (801ebd4 <__sflush_r+0x108>)
 801eb2e:	410b      	asrs	r3, r1
 801eb30:	07db      	lsls	r3, r3, #31
 801eb32:	d442      	bmi.n	801ebba <__sflush_r+0xee>
 801eb34:	2300      	movs	r3, #0
 801eb36:	6063      	str	r3, [r4, #4]
 801eb38:	6923      	ldr	r3, [r4, #16]
 801eb3a:	6023      	str	r3, [r4, #0]
 801eb3c:	04d2      	lsls	r2, r2, #19
 801eb3e:	d505      	bpl.n	801eb4c <__sflush_r+0x80>
 801eb40:	1c43      	adds	r3, r0, #1
 801eb42:	d102      	bne.n	801eb4a <__sflush_r+0x7e>
 801eb44:	682b      	ldr	r3, [r5, #0]
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	d100      	bne.n	801eb4c <__sflush_r+0x80>
 801eb4a:	6560      	str	r0, [r4, #84]	@ 0x54
 801eb4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801eb4e:	602e      	str	r6, [r5, #0]
 801eb50:	2900      	cmp	r1, #0
 801eb52:	d017      	beq.n	801eb84 <__sflush_r+0xb8>
 801eb54:	0023      	movs	r3, r4
 801eb56:	3344      	adds	r3, #68	@ 0x44
 801eb58:	4299      	cmp	r1, r3
 801eb5a:	d002      	beq.n	801eb62 <__sflush_r+0x96>
 801eb5c:	0028      	movs	r0, r5
 801eb5e:	f7fe fbc9 	bl	801d2f4 <_free_r>
 801eb62:	2300      	movs	r3, #0
 801eb64:	6363      	str	r3, [r4, #52]	@ 0x34
 801eb66:	e00d      	b.n	801eb84 <__sflush_r+0xb8>
 801eb68:	2301      	movs	r3, #1
 801eb6a:	0028      	movs	r0, r5
 801eb6c:	47b8      	blx	r7
 801eb6e:	0002      	movs	r2, r0
 801eb70:	1c43      	adds	r3, r0, #1
 801eb72:	d1c6      	bne.n	801eb02 <__sflush_r+0x36>
 801eb74:	682b      	ldr	r3, [r5, #0]
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d0c3      	beq.n	801eb02 <__sflush_r+0x36>
 801eb7a:	2b1d      	cmp	r3, #29
 801eb7c:	d001      	beq.n	801eb82 <__sflush_r+0xb6>
 801eb7e:	2b16      	cmp	r3, #22
 801eb80:	d11a      	bne.n	801ebb8 <__sflush_r+0xec>
 801eb82:	602e      	str	r6, [r5, #0]
 801eb84:	2000      	movs	r0, #0
 801eb86:	e01e      	b.n	801ebc6 <__sflush_r+0xfa>
 801eb88:	690e      	ldr	r6, [r1, #16]
 801eb8a:	2e00      	cmp	r6, #0
 801eb8c:	d0fa      	beq.n	801eb84 <__sflush_r+0xb8>
 801eb8e:	680f      	ldr	r7, [r1, #0]
 801eb90:	600e      	str	r6, [r1, #0]
 801eb92:	1bba      	subs	r2, r7, r6
 801eb94:	9201      	str	r2, [sp, #4]
 801eb96:	2200      	movs	r2, #0
 801eb98:	079b      	lsls	r3, r3, #30
 801eb9a:	d100      	bne.n	801eb9e <__sflush_r+0xd2>
 801eb9c:	694a      	ldr	r2, [r1, #20]
 801eb9e:	60a2      	str	r2, [r4, #8]
 801eba0:	9b01      	ldr	r3, [sp, #4]
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	ddee      	ble.n	801eb84 <__sflush_r+0xb8>
 801eba6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801eba8:	0032      	movs	r2, r6
 801ebaa:	001f      	movs	r7, r3
 801ebac:	0028      	movs	r0, r5
 801ebae:	9b01      	ldr	r3, [sp, #4]
 801ebb0:	6a21      	ldr	r1, [r4, #32]
 801ebb2:	47b8      	blx	r7
 801ebb4:	2800      	cmp	r0, #0
 801ebb6:	dc07      	bgt.n	801ebc8 <__sflush_r+0xfc>
 801ebb8:	89a2      	ldrh	r2, [r4, #12]
 801ebba:	2340      	movs	r3, #64	@ 0x40
 801ebbc:	2001      	movs	r0, #1
 801ebbe:	4313      	orrs	r3, r2
 801ebc0:	b21b      	sxth	r3, r3
 801ebc2:	81a3      	strh	r3, [r4, #12]
 801ebc4:	4240      	negs	r0, r0
 801ebc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ebc8:	9b01      	ldr	r3, [sp, #4]
 801ebca:	1836      	adds	r6, r6, r0
 801ebcc:	1a1b      	subs	r3, r3, r0
 801ebce:	9301      	str	r3, [sp, #4]
 801ebd0:	e7e6      	b.n	801eba0 <__sflush_r+0xd4>
 801ebd2:	46c0      	nop			@ (mov r8, r8)
 801ebd4:	dfbffffe 	.word	0xdfbffffe

0801ebd8 <_fflush_r>:
 801ebd8:	690b      	ldr	r3, [r1, #16]
 801ebda:	b570      	push	{r4, r5, r6, lr}
 801ebdc:	0005      	movs	r5, r0
 801ebde:	000c      	movs	r4, r1
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d102      	bne.n	801ebea <_fflush_r+0x12>
 801ebe4:	2500      	movs	r5, #0
 801ebe6:	0028      	movs	r0, r5
 801ebe8:	bd70      	pop	{r4, r5, r6, pc}
 801ebea:	2800      	cmp	r0, #0
 801ebec:	d004      	beq.n	801ebf8 <_fflush_r+0x20>
 801ebee:	6a03      	ldr	r3, [r0, #32]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d101      	bne.n	801ebf8 <_fflush_r+0x20>
 801ebf4:	f7fd fb28 	bl	801c248 <__sinit>
 801ebf8:	220c      	movs	r2, #12
 801ebfa:	5ea3      	ldrsh	r3, [r4, r2]
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d0f1      	beq.n	801ebe4 <_fflush_r+0xc>
 801ec00:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ec02:	07d2      	lsls	r2, r2, #31
 801ec04:	d404      	bmi.n	801ec10 <_fflush_r+0x38>
 801ec06:	059b      	lsls	r3, r3, #22
 801ec08:	d402      	bmi.n	801ec10 <_fflush_r+0x38>
 801ec0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ec0c:	f7fd fcd3 	bl	801c5b6 <__retarget_lock_acquire_recursive>
 801ec10:	0028      	movs	r0, r5
 801ec12:	0021      	movs	r1, r4
 801ec14:	f7ff ff5a 	bl	801eacc <__sflush_r>
 801ec18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ec1a:	0005      	movs	r5, r0
 801ec1c:	07db      	lsls	r3, r3, #31
 801ec1e:	d4e2      	bmi.n	801ebe6 <_fflush_r+0xe>
 801ec20:	89a3      	ldrh	r3, [r4, #12]
 801ec22:	059b      	lsls	r3, r3, #22
 801ec24:	d4df      	bmi.n	801ebe6 <_fflush_r+0xe>
 801ec26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ec28:	f7fd fcc6 	bl	801c5b8 <__retarget_lock_release_recursive>
 801ec2c:	e7db      	b.n	801ebe6 <_fflush_r+0xe>

0801ec2e <__swbuf_r>:
 801ec2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec30:	0006      	movs	r6, r0
 801ec32:	000d      	movs	r5, r1
 801ec34:	0014      	movs	r4, r2
 801ec36:	2800      	cmp	r0, #0
 801ec38:	d004      	beq.n	801ec44 <__swbuf_r+0x16>
 801ec3a:	6a03      	ldr	r3, [r0, #32]
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	d101      	bne.n	801ec44 <__swbuf_r+0x16>
 801ec40:	f7fd fb02 	bl	801c248 <__sinit>
 801ec44:	69a3      	ldr	r3, [r4, #24]
 801ec46:	60a3      	str	r3, [r4, #8]
 801ec48:	89a3      	ldrh	r3, [r4, #12]
 801ec4a:	071b      	lsls	r3, r3, #28
 801ec4c:	d502      	bpl.n	801ec54 <__swbuf_r+0x26>
 801ec4e:	6923      	ldr	r3, [r4, #16]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d109      	bne.n	801ec68 <__swbuf_r+0x3a>
 801ec54:	0021      	movs	r1, r4
 801ec56:	0030      	movs	r0, r6
 801ec58:	f000 f82c 	bl	801ecb4 <__swsetup_r>
 801ec5c:	2800      	cmp	r0, #0
 801ec5e:	d003      	beq.n	801ec68 <__swbuf_r+0x3a>
 801ec60:	2501      	movs	r5, #1
 801ec62:	426d      	negs	r5, r5
 801ec64:	0028      	movs	r0, r5
 801ec66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec68:	6923      	ldr	r3, [r4, #16]
 801ec6a:	6820      	ldr	r0, [r4, #0]
 801ec6c:	b2ef      	uxtb	r7, r5
 801ec6e:	1ac0      	subs	r0, r0, r3
 801ec70:	6963      	ldr	r3, [r4, #20]
 801ec72:	b2ed      	uxtb	r5, r5
 801ec74:	4283      	cmp	r3, r0
 801ec76:	dc05      	bgt.n	801ec84 <__swbuf_r+0x56>
 801ec78:	0021      	movs	r1, r4
 801ec7a:	0030      	movs	r0, r6
 801ec7c:	f7ff ffac 	bl	801ebd8 <_fflush_r>
 801ec80:	2800      	cmp	r0, #0
 801ec82:	d1ed      	bne.n	801ec60 <__swbuf_r+0x32>
 801ec84:	68a3      	ldr	r3, [r4, #8]
 801ec86:	3001      	adds	r0, #1
 801ec88:	3b01      	subs	r3, #1
 801ec8a:	60a3      	str	r3, [r4, #8]
 801ec8c:	6823      	ldr	r3, [r4, #0]
 801ec8e:	1c5a      	adds	r2, r3, #1
 801ec90:	6022      	str	r2, [r4, #0]
 801ec92:	701f      	strb	r7, [r3, #0]
 801ec94:	6963      	ldr	r3, [r4, #20]
 801ec96:	4283      	cmp	r3, r0
 801ec98:	d004      	beq.n	801eca4 <__swbuf_r+0x76>
 801ec9a:	89a3      	ldrh	r3, [r4, #12]
 801ec9c:	07db      	lsls	r3, r3, #31
 801ec9e:	d5e1      	bpl.n	801ec64 <__swbuf_r+0x36>
 801eca0:	2d0a      	cmp	r5, #10
 801eca2:	d1df      	bne.n	801ec64 <__swbuf_r+0x36>
 801eca4:	0021      	movs	r1, r4
 801eca6:	0030      	movs	r0, r6
 801eca8:	f7ff ff96 	bl	801ebd8 <_fflush_r>
 801ecac:	2800      	cmp	r0, #0
 801ecae:	d0d9      	beq.n	801ec64 <__swbuf_r+0x36>
 801ecb0:	e7d6      	b.n	801ec60 <__swbuf_r+0x32>
	...

0801ecb4 <__swsetup_r>:
 801ecb4:	4b2d      	ldr	r3, [pc, #180]	@ (801ed6c <__swsetup_r+0xb8>)
 801ecb6:	b570      	push	{r4, r5, r6, lr}
 801ecb8:	0005      	movs	r5, r0
 801ecba:	6818      	ldr	r0, [r3, #0]
 801ecbc:	000c      	movs	r4, r1
 801ecbe:	2800      	cmp	r0, #0
 801ecc0:	d004      	beq.n	801eccc <__swsetup_r+0x18>
 801ecc2:	6a03      	ldr	r3, [r0, #32]
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d101      	bne.n	801eccc <__swsetup_r+0x18>
 801ecc8:	f7fd fabe 	bl	801c248 <__sinit>
 801eccc:	230c      	movs	r3, #12
 801ecce:	5ee2      	ldrsh	r2, [r4, r3]
 801ecd0:	0713      	lsls	r3, r2, #28
 801ecd2:	d423      	bmi.n	801ed1c <__swsetup_r+0x68>
 801ecd4:	06d3      	lsls	r3, r2, #27
 801ecd6:	d407      	bmi.n	801ece8 <__swsetup_r+0x34>
 801ecd8:	2309      	movs	r3, #9
 801ecda:	602b      	str	r3, [r5, #0]
 801ecdc:	2340      	movs	r3, #64	@ 0x40
 801ecde:	2001      	movs	r0, #1
 801ece0:	4313      	orrs	r3, r2
 801ece2:	81a3      	strh	r3, [r4, #12]
 801ece4:	4240      	negs	r0, r0
 801ece6:	e03a      	b.n	801ed5e <__swsetup_r+0xaa>
 801ece8:	0752      	lsls	r2, r2, #29
 801ecea:	d513      	bpl.n	801ed14 <__swsetup_r+0x60>
 801ecec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ecee:	2900      	cmp	r1, #0
 801ecf0:	d008      	beq.n	801ed04 <__swsetup_r+0x50>
 801ecf2:	0023      	movs	r3, r4
 801ecf4:	3344      	adds	r3, #68	@ 0x44
 801ecf6:	4299      	cmp	r1, r3
 801ecf8:	d002      	beq.n	801ed00 <__swsetup_r+0x4c>
 801ecfa:	0028      	movs	r0, r5
 801ecfc:	f7fe fafa 	bl	801d2f4 <_free_r>
 801ed00:	2300      	movs	r3, #0
 801ed02:	6363      	str	r3, [r4, #52]	@ 0x34
 801ed04:	2224      	movs	r2, #36	@ 0x24
 801ed06:	89a3      	ldrh	r3, [r4, #12]
 801ed08:	4393      	bics	r3, r2
 801ed0a:	81a3      	strh	r3, [r4, #12]
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	6063      	str	r3, [r4, #4]
 801ed10:	6923      	ldr	r3, [r4, #16]
 801ed12:	6023      	str	r3, [r4, #0]
 801ed14:	2308      	movs	r3, #8
 801ed16:	89a2      	ldrh	r2, [r4, #12]
 801ed18:	4313      	orrs	r3, r2
 801ed1a:	81a3      	strh	r3, [r4, #12]
 801ed1c:	6923      	ldr	r3, [r4, #16]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d10b      	bne.n	801ed3a <__swsetup_r+0x86>
 801ed22:	21a0      	movs	r1, #160	@ 0xa0
 801ed24:	2280      	movs	r2, #128	@ 0x80
 801ed26:	89a3      	ldrh	r3, [r4, #12]
 801ed28:	0089      	lsls	r1, r1, #2
 801ed2a:	0092      	lsls	r2, r2, #2
 801ed2c:	400b      	ands	r3, r1
 801ed2e:	4293      	cmp	r3, r2
 801ed30:	d003      	beq.n	801ed3a <__swsetup_r+0x86>
 801ed32:	0021      	movs	r1, r4
 801ed34:	0028      	movs	r0, r5
 801ed36:	f000 f8f5 	bl	801ef24 <__smakebuf_r>
 801ed3a:	230c      	movs	r3, #12
 801ed3c:	5ee2      	ldrsh	r2, [r4, r3]
 801ed3e:	2101      	movs	r1, #1
 801ed40:	0013      	movs	r3, r2
 801ed42:	400b      	ands	r3, r1
 801ed44:	420a      	tst	r2, r1
 801ed46:	d00b      	beq.n	801ed60 <__swsetup_r+0xac>
 801ed48:	2300      	movs	r3, #0
 801ed4a:	60a3      	str	r3, [r4, #8]
 801ed4c:	6963      	ldr	r3, [r4, #20]
 801ed4e:	425b      	negs	r3, r3
 801ed50:	61a3      	str	r3, [r4, #24]
 801ed52:	2000      	movs	r0, #0
 801ed54:	6923      	ldr	r3, [r4, #16]
 801ed56:	4283      	cmp	r3, r0
 801ed58:	d101      	bne.n	801ed5e <__swsetup_r+0xaa>
 801ed5a:	0613      	lsls	r3, r2, #24
 801ed5c:	d4be      	bmi.n	801ecdc <__swsetup_r+0x28>
 801ed5e:	bd70      	pop	{r4, r5, r6, pc}
 801ed60:	0791      	lsls	r1, r2, #30
 801ed62:	d400      	bmi.n	801ed66 <__swsetup_r+0xb2>
 801ed64:	6963      	ldr	r3, [r4, #20]
 801ed66:	60a3      	str	r3, [r4, #8]
 801ed68:	e7f3      	b.n	801ed52 <__swsetup_r+0x9e>
 801ed6a:	46c0      	nop			@ (mov r8, r8)
 801ed6c:	200003c8 	.word	0x200003c8

0801ed70 <memmove>:
 801ed70:	b510      	push	{r4, lr}
 801ed72:	4288      	cmp	r0, r1
 801ed74:	d806      	bhi.n	801ed84 <memmove+0x14>
 801ed76:	2300      	movs	r3, #0
 801ed78:	429a      	cmp	r2, r3
 801ed7a:	d008      	beq.n	801ed8e <memmove+0x1e>
 801ed7c:	5ccc      	ldrb	r4, [r1, r3]
 801ed7e:	54c4      	strb	r4, [r0, r3]
 801ed80:	3301      	adds	r3, #1
 801ed82:	e7f9      	b.n	801ed78 <memmove+0x8>
 801ed84:	188b      	adds	r3, r1, r2
 801ed86:	4298      	cmp	r0, r3
 801ed88:	d2f5      	bcs.n	801ed76 <memmove+0x6>
 801ed8a:	3a01      	subs	r2, #1
 801ed8c:	d200      	bcs.n	801ed90 <memmove+0x20>
 801ed8e:	bd10      	pop	{r4, pc}
 801ed90:	5c8b      	ldrb	r3, [r1, r2]
 801ed92:	5483      	strb	r3, [r0, r2]
 801ed94:	e7f9      	b.n	801ed8a <memmove+0x1a>
	...

0801ed98 <_sbrk_r>:
 801ed98:	2300      	movs	r3, #0
 801ed9a:	b570      	push	{r4, r5, r6, lr}
 801ed9c:	4d06      	ldr	r5, [pc, #24]	@ (801edb8 <_sbrk_r+0x20>)
 801ed9e:	0004      	movs	r4, r0
 801eda0:	0008      	movs	r0, r1
 801eda2:	602b      	str	r3, [r5, #0]
 801eda4:	f7ec f82e 	bl	800ae04 <_sbrk>
 801eda8:	1c43      	adds	r3, r0, #1
 801edaa:	d103      	bne.n	801edb4 <_sbrk_r+0x1c>
 801edac:	682b      	ldr	r3, [r5, #0]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d000      	beq.n	801edb4 <_sbrk_r+0x1c>
 801edb2:	6023      	str	r3, [r4, #0]
 801edb4:	bd70      	pop	{r4, r5, r6, pc}
 801edb6:	46c0      	nop			@ (mov r8, r8)
 801edb8:	200038b0 	.word	0x200038b0

0801edbc <__assert_func>:
 801edbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801edbe:	0014      	movs	r4, r2
 801edc0:	001a      	movs	r2, r3
 801edc2:	4b09      	ldr	r3, [pc, #36]	@ (801ede8 <__assert_func+0x2c>)
 801edc4:	0005      	movs	r5, r0
 801edc6:	681b      	ldr	r3, [r3, #0]
 801edc8:	000e      	movs	r6, r1
 801edca:	68d8      	ldr	r0, [r3, #12]
 801edcc:	4b07      	ldr	r3, [pc, #28]	@ (801edec <__assert_func+0x30>)
 801edce:	2c00      	cmp	r4, #0
 801edd0:	d101      	bne.n	801edd6 <__assert_func+0x1a>
 801edd2:	4b07      	ldr	r3, [pc, #28]	@ (801edf0 <__assert_func+0x34>)
 801edd4:	001c      	movs	r4, r3
 801edd6:	4907      	ldr	r1, [pc, #28]	@ (801edf4 <__assert_func+0x38>)
 801edd8:	9301      	str	r3, [sp, #4]
 801edda:	9402      	str	r4, [sp, #8]
 801eddc:	002b      	movs	r3, r5
 801edde:	9600      	str	r6, [sp, #0]
 801ede0:	f000 f866 	bl	801eeb0 <fiprintf>
 801ede4:	f000 f904 	bl	801eff0 <abort>
 801ede8:	200003c8 	.word	0x200003c8
 801edec:	080211c1 	.word	0x080211c1
 801edf0:	080211fc 	.word	0x080211fc
 801edf4:	080211ce 	.word	0x080211ce

0801edf8 <_calloc_r>:
 801edf8:	b570      	push	{r4, r5, r6, lr}
 801edfa:	0c0b      	lsrs	r3, r1, #16
 801edfc:	0c15      	lsrs	r5, r2, #16
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d11e      	bne.n	801ee40 <_calloc_r+0x48>
 801ee02:	2d00      	cmp	r5, #0
 801ee04:	d10c      	bne.n	801ee20 <_calloc_r+0x28>
 801ee06:	b289      	uxth	r1, r1
 801ee08:	b294      	uxth	r4, r2
 801ee0a:	434c      	muls	r4, r1
 801ee0c:	0021      	movs	r1, r4
 801ee0e:	f7fe fe41 	bl	801da94 <_malloc_r>
 801ee12:	1e05      	subs	r5, r0, #0
 801ee14:	d01a      	beq.n	801ee4c <_calloc_r+0x54>
 801ee16:	0022      	movs	r2, r4
 801ee18:	2100      	movs	r1, #0
 801ee1a:	f7fd fafd 	bl	801c418 <memset>
 801ee1e:	e016      	b.n	801ee4e <_calloc_r+0x56>
 801ee20:	1c2b      	adds	r3, r5, #0
 801ee22:	1c0c      	adds	r4, r1, #0
 801ee24:	b289      	uxth	r1, r1
 801ee26:	b292      	uxth	r2, r2
 801ee28:	434a      	muls	r2, r1
 801ee2a:	b29b      	uxth	r3, r3
 801ee2c:	b2a1      	uxth	r1, r4
 801ee2e:	4359      	muls	r1, r3
 801ee30:	0c14      	lsrs	r4, r2, #16
 801ee32:	190c      	adds	r4, r1, r4
 801ee34:	0c23      	lsrs	r3, r4, #16
 801ee36:	d107      	bne.n	801ee48 <_calloc_r+0x50>
 801ee38:	0424      	lsls	r4, r4, #16
 801ee3a:	b292      	uxth	r2, r2
 801ee3c:	4314      	orrs	r4, r2
 801ee3e:	e7e5      	b.n	801ee0c <_calloc_r+0x14>
 801ee40:	2d00      	cmp	r5, #0
 801ee42:	d101      	bne.n	801ee48 <_calloc_r+0x50>
 801ee44:	1c14      	adds	r4, r2, #0
 801ee46:	e7ed      	b.n	801ee24 <_calloc_r+0x2c>
 801ee48:	230c      	movs	r3, #12
 801ee4a:	6003      	str	r3, [r0, #0]
 801ee4c:	2500      	movs	r5, #0
 801ee4e:	0028      	movs	r0, r5
 801ee50:	bd70      	pop	{r4, r5, r6, pc}

0801ee52 <_realloc_r>:
 801ee52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ee54:	0006      	movs	r6, r0
 801ee56:	000c      	movs	r4, r1
 801ee58:	0015      	movs	r5, r2
 801ee5a:	2900      	cmp	r1, #0
 801ee5c:	d105      	bne.n	801ee6a <_realloc_r+0x18>
 801ee5e:	0011      	movs	r1, r2
 801ee60:	f7fe fe18 	bl	801da94 <_malloc_r>
 801ee64:	0004      	movs	r4, r0
 801ee66:	0020      	movs	r0, r4
 801ee68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ee6a:	2a00      	cmp	r2, #0
 801ee6c:	d103      	bne.n	801ee76 <_realloc_r+0x24>
 801ee6e:	f7fe fa41 	bl	801d2f4 <_free_r>
 801ee72:	2400      	movs	r4, #0
 801ee74:	e7f7      	b.n	801ee66 <_realloc_r+0x14>
 801ee76:	f000 f8c2 	bl	801effe <_malloc_usable_size_r>
 801ee7a:	0007      	movs	r7, r0
 801ee7c:	4285      	cmp	r5, r0
 801ee7e:	d802      	bhi.n	801ee86 <_realloc_r+0x34>
 801ee80:	0843      	lsrs	r3, r0, #1
 801ee82:	42ab      	cmp	r3, r5
 801ee84:	d3ef      	bcc.n	801ee66 <_realloc_r+0x14>
 801ee86:	0029      	movs	r1, r5
 801ee88:	0030      	movs	r0, r6
 801ee8a:	f7fe fe03 	bl	801da94 <_malloc_r>
 801ee8e:	9001      	str	r0, [sp, #4]
 801ee90:	2800      	cmp	r0, #0
 801ee92:	d0ee      	beq.n	801ee72 <_realloc_r+0x20>
 801ee94:	002a      	movs	r2, r5
 801ee96:	42bd      	cmp	r5, r7
 801ee98:	d900      	bls.n	801ee9c <_realloc_r+0x4a>
 801ee9a:	003a      	movs	r2, r7
 801ee9c:	0021      	movs	r1, r4
 801ee9e:	9801      	ldr	r0, [sp, #4]
 801eea0:	f7fd fb96 	bl	801c5d0 <memcpy>
 801eea4:	0021      	movs	r1, r4
 801eea6:	0030      	movs	r0, r6
 801eea8:	f7fe fa24 	bl	801d2f4 <_free_r>
 801eeac:	9c01      	ldr	r4, [sp, #4]
 801eeae:	e7da      	b.n	801ee66 <_realloc_r+0x14>

0801eeb0 <fiprintf>:
 801eeb0:	b40e      	push	{r1, r2, r3}
 801eeb2:	b517      	push	{r0, r1, r2, r4, lr}
 801eeb4:	4c05      	ldr	r4, [pc, #20]	@ (801eecc <fiprintf+0x1c>)
 801eeb6:	ab05      	add	r3, sp, #20
 801eeb8:	cb04      	ldmia	r3!, {r2}
 801eeba:	0001      	movs	r1, r0
 801eebc:	6820      	ldr	r0, [r4, #0]
 801eebe:	9301      	str	r3, [sp, #4]
 801eec0:	f7ff fce8 	bl	801e894 <_vfiprintf_r>
 801eec4:	bc1e      	pop	{r1, r2, r3, r4}
 801eec6:	bc08      	pop	{r3}
 801eec8:	b003      	add	sp, #12
 801eeca:	4718      	bx	r3
 801eecc:	200003c8 	.word	0x200003c8

0801eed0 <__swhatbuf_r>:
 801eed0:	b570      	push	{r4, r5, r6, lr}
 801eed2:	000e      	movs	r6, r1
 801eed4:	001d      	movs	r5, r3
 801eed6:	230e      	movs	r3, #14
 801eed8:	5ec9      	ldrsh	r1, [r1, r3]
 801eeda:	0014      	movs	r4, r2
 801eedc:	b096      	sub	sp, #88	@ 0x58
 801eede:	2900      	cmp	r1, #0
 801eee0:	da0c      	bge.n	801eefc <__swhatbuf_r+0x2c>
 801eee2:	89b2      	ldrh	r2, [r6, #12]
 801eee4:	2380      	movs	r3, #128	@ 0x80
 801eee6:	0011      	movs	r1, r2
 801eee8:	4019      	ands	r1, r3
 801eeea:	421a      	tst	r2, r3
 801eeec:	d114      	bne.n	801ef18 <__swhatbuf_r+0x48>
 801eeee:	2380      	movs	r3, #128	@ 0x80
 801eef0:	00db      	lsls	r3, r3, #3
 801eef2:	2000      	movs	r0, #0
 801eef4:	6029      	str	r1, [r5, #0]
 801eef6:	6023      	str	r3, [r4, #0]
 801eef8:	b016      	add	sp, #88	@ 0x58
 801eefa:	bd70      	pop	{r4, r5, r6, pc}
 801eefc:	466a      	mov	r2, sp
 801eefe:	f000 f853 	bl	801efa8 <_fstat_r>
 801ef02:	2800      	cmp	r0, #0
 801ef04:	dbed      	blt.n	801eee2 <__swhatbuf_r+0x12>
 801ef06:	23f0      	movs	r3, #240	@ 0xf0
 801ef08:	9901      	ldr	r1, [sp, #4]
 801ef0a:	021b      	lsls	r3, r3, #8
 801ef0c:	4019      	ands	r1, r3
 801ef0e:	4b04      	ldr	r3, [pc, #16]	@ (801ef20 <__swhatbuf_r+0x50>)
 801ef10:	18c9      	adds	r1, r1, r3
 801ef12:	424b      	negs	r3, r1
 801ef14:	4159      	adcs	r1, r3
 801ef16:	e7ea      	b.n	801eeee <__swhatbuf_r+0x1e>
 801ef18:	2100      	movs	r1, #0
 801ef1a:	2340      	movs	r3, #64	@ 0x40
 801ef1c:	e7e9      	b.n	801eef2 <__swhatbuf_r+0x22>
 801ef1e:	46c0      	nop			@ (mov r8, r8)
 801ef20:	ffffe000 	.word	0xffffe000

0801ef24 <__smakebuf_r>:
 801ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef26:	2602      	movs	r6, #2
 801ef28:	898b      	ldrh	r3, [r1, #12]
 801ef2a:	0005      	movs	r5, r0
 801ef2c:	000c      	movs	r4, r1
 801ef2e:	b085      	sub	sp, #20
 801ef30:	4233      	tst	r3, r6
 801ef32:	d007      	beq.n	801ef44 <__smakebuf_r+0x20>
 801ef34:	0023      	movs	r3, r4
 801ef36:	3347      	adds	r3, #71	@ 0x47
 801ef38:	6023      	str	r3, [r4, #0]
 801ef3a:	6123      	str	r3, [r4, #16]
 801ef3c:	2301      	movs	r3, #1
 801ef3e:	6163      	str	r3, [r4, #20]
 801ef40:	b005      	add	sp, #20
 801ef42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef44:	ab03      	add	r3, sp, #12
 801ef46:	aa02      	add	r2, sp, #8
 801ef48:	f7ff ffc2 	bl	801eed0 <__swhatbuf_r>
 801ef4c:	9f02      	ldr	r7, [sp, #8]
 801ef4e:	9001      	str	r0, [sp, #4]
 801ef50:	0039      	movs	r1, r7
 801ef52:	0028      	movs	r0, r5
 801ef54:	f7fe fd9e 	bl	801da94 <_malloc_r>
 801ef58:	2800      	cmp	r0, #0
 801ef5a:	d108      	bne.n	801ef6e <__smakebuf_r+0x4a>
 801ef5c:	220c      	movs	r2, #12
 801ef5e:	5ea3      	ldrsh	r3, [r4, r2]
 801ef60:	059a      	lsls	r2, r3, #22
 801ef62:	d4ed      	bmi.n	801ef40 <__smakebuf_r+0x1c>
 801ef64:	2203      	movs	r2, #3
 801ef66:	4393      	bics	r3, r2
 801ef68:	431e      	orrs	r6, r3
 801ef6a:	81a6      	strh	r6, [r4, #12]
 801ef6c:	e7e2      	b.n	801ef34 <__smakebuf_r+0x10>
 801ef6e:	2380      	movs	r3, #128	@ 0x80
 801ef70:	89a2      	ldrh	r2, [r4, #12]
 801ef72:	6020      	str	r0, [r4, #0]
 801ef74:	4313      	orrs	r3, r2
 801ef76:	81a3      	strh	r3, [r4, #12]
 801ef78:	9b03      	ldr	r3, [sp, #12]
 801ef7a:	6120      	str	r0, [r4, #16]
 801ef7c:	6167      	str	r7, [r4, #20]
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d00c      	beq.n	801ef9c <__smakebuf_r+0x78>
 801ef82:	0028      	movs	r0, r5
 801ef84:	230e      	movs	r3, #14
 801ef86:	5ee1      	ldrsh	r1, [r4, r3]
 801ef88:	f000 f820 	bl	801efcc <_isatty_r>
 801ef8c:	2800      	cmp	r0, #0
 801ef8e:	d005      	beq.n	801ef9c <__smakebuf_r+0x78>
 801ef90:	2303      	movs	r3, #3
 801ef92:	89a2      	ldrh	r2, [r4, #12]
 801ef94:	439a      	bics	r2, r3
 801ef96:	3b02      	subs	r3, #2
 801ef98:	4313      	orrs	r3, r2
 801ef9a:	81a3      	strh	r3, [r4, #12]
 801ef9c:	89a3      	ldrh	r3, [r4, #12]
 801ef9e:	9a01      	ldr	r2, [sp, #4]
 801efa0:	4313      	orrs	r3, r2
 801efa2:	81a3      	strh	r3, [r4, #12]
 801efa4:	e7cc      	b.n	801ef40 <__smakebuf_r+0x1c>
	...

0801efa8 <_fstat_r>:
 801efa8:	2300      	movs	r3, #0
 801efaa:	b570      	push	{r4, r5, r6, lr}
 801efac:	4d06      	ldr	r5, [pc, #24]	@ (801efc8 <_fstat_r+0x20>)
 801efae:	0004      	movs	r4, r0
 801efb0:	0008      	movs	r0, r1
 801efb2:	0011      	movs	r1, r2
 801efb4:	602b      	str	r3, [r5, #0]
 801efb6:	f7eb ff03 	bl	800adc0 <_fstat>
 801efba:	1c43      	adds	r3, r0, #1
 801efbc:	d103      	bne.n	801efc6 <_fstat_r+0x1e>
 801efbe:	682b      	ldr	r3, [r5, #0]
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d000      	beq.n	801efc6 <_fstat_r+0x1e>
 801efc4:	6023      	str	r3, [r4, #0]
 801efc6:	bd70      	pop	{r4, r5, r6, pc}
 801efc8:	200038b0 	.word	0x200038b0

0801efcc <_isatty_r>:
 801efcc:	2300      	movs	r3, #0
 801efce:	b570      	push	{r4, r5, r6, lr}
 801efd0:	4d06      	ldr	r5, [pc, #24]	@ (801efec <_isatty_r+0x20>)
 801efd2:	0004      	movs	r4, r0
 801efd4:	0008      	movs	r0, r1
 801efd6:	602b      	str	r3, [r5, #0]
 801efd8:	f7eb ff00 	bl	800addc <_isatty>
 801efdc:	1c43      	adds	r3, r0, #1
 801efde:	d103      	bne.n	801efe8 <_isatty_r+0x1c>
 801efe0:	682b      	ldr	r3, [r5, #0]
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d000      	beq.n	801efe8 <_isatty_r+0x1c>
 801efe6:	6023      	str	r3, [r4, #0]
 801efe8:	bd70      	pop	{r4, r5, r6, pc}
 801efea:	46c0      	nop			@ (mov r8, r8)
 801efec:	200038b0 	.word	0x200038b0

0801eff0 <abort>:
 801eff0:	2006      	movs	r0, #6
 801eff2:	b510      	push	{r4, lr}
 801eff4:	f000 f834 	bl	801f060 <raise>
 801eff8:	2001      	movs	r0, #1
 801effa:	f7eb fead 	bl	800ad58 <_exit>

0801effe <_malloc_usable_size_r>:
 801effe:	1f0b      	subs	r3, r1, #4
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	1f18      	subs	r0, r3, #4
 801f004:	2b00      	cmp	r3, #0
 801f006:	da01      	bge.n	801f00c <_malloc_usable_size_r+0xe>
 801f008:	580b      	ldr	r3, [r1, r0]
 801f00a:	18c0      	adds	r0, r0, r3
 801f00c:	4770      	bx	lr

0801f00e <_raise_r>:
 801f00e:	b570      	push	{r4, r5, r6, lr}
 801f010:	0004      	movs	r4, r0
 801f012:	000d      	movs	r5, r1
 801f014:	291f      	cmp	r1, #31
 801f016:	d904      	bls.n	801f022 <_raise_r+0x14>
 801f018:	2316      	movs	r3, #22
 801f01a:	6003      	str	r3, [r0, #0]
 801f01c:	2001      	movs	r0, #1
 801f01e:	4240      	negs	r0, r0
 801f020:	bd70      	pop	{r4, r5, r6, pc}
 801f022:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801f024:	2b00      	cmp	r3, #0
 801f026:	d004      	beq.n	801f032 <_raise_r+0x24>
 801f028:	008a      	lsls	r2, r1, #2
 801f02a:	189b      	adds	r3, r3, r2
 801f02c:	681a      	ldr	r2, [r3, #0]
 801f02e:	2a00      	cmp	r2, #0
 801f030:	d108      	bne.n	801f044 <_raise_r+0x36>
 801f032:	0020      	movs	r0, r4
 801f034:	f000 f830 	bl	801f098 <_getpid_r>
 801f038:	002a      	movs	r2, r5
 801f03a:	0001      	movs	r1, r0
 801f03c:	0020      	movs	r0, r4
 801f03e:	f000 f819 	bl	801f074 <_kill_r>
 801f042:	e7ed      	b.n	801f020 <_raise_r+0x12>
 801f044:	2a01      	cmp	r2, #1
 801f046:	d009      	beq.n	801f05c <_raise_r+0x4e>
 801f048:	1c51      	adds	r1, r2, #1
 801f04a:	d103      	bne.n	801f054 <_raise_r+0x46>
 801f04c:	2316      	movs	r3, #22
 801f04e:	6003      	str	r3, [r0, #0]
 801f050:	2001      	movs	r0, #1
 801f052:	e7e5      	b.n	801f020 <_raise_r+0x12>
 801f054:	2100      	movs	r1, #0
 801f056:	0028      	movs	r0, r5
 801f058:	6019      	str	r1, [r3, #0]
 801f05a:	4790      	blx	r2
 801f05c:	2000      	movs	r0, #0
 801f05e:	e7df      	b.n	801f020 <_raise_r+0x12>

0801f060 <raise>:
 801f060:	b510      	push	{r4, lr}
 801f062:	4b03      	ldr	r3, [pc, #12]	@ (801f070 <raise+0x10>)
 801f064:	0001      	movs	r1, r0
 801f066:	6818      	ldr	r0, [r3, #0]
 801f068:	f7ff ffd1 	bl	801f00e <_raise_r>
 801f06c:	bd10      	pop	{r4, pc}
 801f06e:	46c0      	nop			@ (mov r8, r8)
 801f070:	200003c8 	.word	0x200003c8

0801f074 <_kill_r>:
 801f074:	2300      	movs	r3, #0
 801f076:	b570      	push	{r4, r5, r6, lr}
 801f078:	4d06      	ldr	r5, [pc, #24]	@ (801f094 <_kill_r+0x20>)
 801f07a:	0004      	movs	r4, r0
 801f07c:	0008      	movs	r0, r1
 801f07e:	0011      	movs	r1, r2
 801f080:	602b      	str	r3, [r5, #0]
 801f082:	f7eb fe59 	bl	800ad38 <_kill>
 801f086:	1c43      	adds	r3, r0, #1
 801f088:	d103      	bne.n	801f092 <_kill_r+0x1e>
 801f08a:	682b      	ldr	r3, [r5, #0]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d000      	beq.n	801f092 <_kill_r+0x1e>
 801f090:	6023      	str	r3, [r4, #0]
 801f092:	bd70      	pop	{r4, r5, r6, pc}
 801f094:	200038b0 	.word	0x200038b0

0801f098 <_getpid_r>:
 801f098:	b510      	push	{r4, lr}
 801f09a:	f7eb fe47 	bl	800ad2c <_getpid>
 801f09e:	bd10      	pop	{r4, pc}

0801f0a0 <expf>:
 801f0a0:	b570      	push	{r4, r5, r6, lr}
 801f0a2:	1c04      	adds	r4, r0, #0
 801f0a4:	f000 f8e6 	bl	801f274 <__ieee754_expf>
 801f0a8:	1c05      	adds	r5, r0, #0
 801f0aa:	1c20      	adds	r0, r4, #0
 801f0ac:	f000 f83c 	bl	801f128 <finitef>
 801f0b0:	2800      	cmp	r0, #0
 801f0b2:	d00b      	beq.n	801f0cc <expf+0x2c>
 801f0b4:	490c      	ldr	r1, [pc, #48]	@ (801f0e8 <expf+0x48>)
 801f0b6:	1c20      	adds	r0, r4, #0
 801f0b8:	f7e1 fa4e 	bl	8000558 <__aeabi_fcmpgt>
 801f0bc:	2800      	cmp	r0, #0
 801f0be:	d007      	beq.n	801f0d0 <expf+0x30>
 801f0c0:	f7fd fa4e 	bl	801c560 <__errno>
 801f0c4:	25ff      	movs	r5, #255	@ 0xff
 801f0c6:	2322      	movs	r3, #34	@ 0x22
 801f0c8:	05ed      	lsls	r5, r5, #23
 801f0ca:	6003      	str	r3, [r0, #0]
 801f0cc:	1c28      	adds	r0, r5, #0
 801f0ce:	bd70      	pop	{r4, r5, r6, pc}
 801f0d0:	4906      	ldr	r1, [pc, #24]	@ (801f0ec <expf+0x4c>)
 801f0d2:	1c20      	adds	r0, r4, #0
 801f0d4:	f7e1 fa2c 	bl	8000530 <__aeabi_fcmplt>
 801f0d8:	2800      	cmp	r0, #0
 801f0da:	d0f7      	beq.n	801f0cc <expf+0x2c>
 801f0dc:	f7fd fa40 	bl	801c560 <__errno>
 801f0e0:	2322      	movs	r3, #34	@ 0x22
 801f0e2:	2500      	movs	r5, #0
 801f0e4:	6003      	str	r3, [r0, #0]
 801f0e6:	e7f1      	b.n	801f0cc <expf+0x2c>
 801f0e8:	42b17217 	.word	0x42b17217
 801f0ec:	c2cff1b5 	.word	0xc2cff1b5

0801f0f0 <sqrtf>:
 801f0f0:	b570      	push	{r4, r5, r6, lr}
 801f0f2:	1c05      	adds	r5, r0, #0
 801f0f4:	f000 f822 	bl	801f13c <__ieee754_sqrtf>
 801f0f8:	1c29      	adds	r1, r5, #0
 801f0fa:	1c04      	adds	r4, r0, #0
 801f0fc:	1c28      	adds	r0, r5, #0
 801f0fe:	f7e2 fa31 	bl	8001564 <__aeabi_fcmpun>
 801f102:	2800      	cmp	r0, #0
 801f104:	d10e      	bne.n	801f124 <sqrtf+0x34>
 801f106:	2100      	movs	r1, #0
 801f108:	1c28      	adds	r0, r5, #0
 801f10a:	f7e1 fa11 	bl	8000530 <__aeabi_fcmplt>
 801f10e:	2800      	cmp	r0, #0
 801f110:	d008      	beq.n	801f124 <sqrtf+0x34>
 801f112:	f7fd fa25 	bl	801c560 <__errno>
 801f116:	2321      	movs	r3, #33	@ 0x21
 801f118:	2100      	movs	r1, #0
 801f11a:	6003      	str	r3, [r0, #0]
 801f11c:	1c08      	adds	r0, r1, #0
 801f11e:	f7e1 fd59 	bl	8000bd4 <__aeabi_fdiv>
 801f122:	1c04      	adds	r4, r0, #0
 801f124:	1c20      	adds	r0, r4, #0
 801f126:	bd70      	pop	{r4, r5, r6, pc}

0801f128 <finitef>:
 801f128:	22ff      	movs	r2, #255	@ 0xff
 801f12a:	0043      	lsls	r3, r0, #1
 801f12c:	085b      	lsrs	r3, r3, #1
 801f12e:	2001      	movs	r0, #1
 801f130:	05d2      	lsls	r2, r2, #23
 801f132:	4293      	cmp	r3, r2
 801f134:	db00      	blt.n	801f138 <finitef+0x10>
 801f136:	2000      	movs	r0, #0
 801f138:	4770      	bx	lr
	...

0801f13c <__ieee754_sqrtf>:
 801f13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f13e:	0003      	movs	r3, r0
 801f140:	0042      	lsls	r2, r0, #1
 801f142:	1c04      	adds	r4, r0, #0
 801f144:	20ff      	movs	r0, #255	@ 0xff
 801f146:	0852      	lsrs	r2, r2, #1
 801f148:	05c0      	lsls	r0, r0, #23
 801f14a:	4282      	cmp	r2, r0
 801f14c:	d30a      	bcc.n	801f164 <__ieee754_sqrtf+0x28>
 801f14e:	1c21      	adds	r1, r4, #0
 801f150:	1c20      	adds	r0, r4, #0
 801f152:	f7e1 ff25 	bl	8000fa0 <__aeabi_fmul>
 801f156:	1c01      	adds	r1, r0, #0
 801f158:	1c20      	adds	r0, r4, #0
 801f15a:	f7e1 fbb1 	bl	80008c0 <__aeabi_fadd>
 801f15e:	1c04      	adds	r4, r0, #0
 801f160:	1c20      	adds	r0, r4, #0
 801f162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f164:	2a00      	cmp	r2, #0
 801f166:	d0fb      	beq.n	801f160 <__ieee754_sqrtf+0x24>
 801f168:	2c00      	cmp	r4, #0
 801f16a:	da07      	bge.n	801f17c <__ieee754_sqrtf+0x40>
 801f16c:	1c21      	adds	r1, r4, #0
 801f16e:	1c20      	adds	r0, r4, #0
 801f170:	f7e2 f854 	bl	800121c <__aeabi_fsub>
 801f174:	1c01      	adds	r1, r0, #0
 801f176:	f7e1 fd2d 	bl	8000bd4 <__aeabi_fdiv>
 801f17a:	e7f0      	b.n	801f15e <__ieee754_sqrtf+0x22>
 801f17c:	0022      	movs	r2, r4
 801f17e:	15e1      	asrs	r1, r4, #23
 801f180:	4002      	ands	r2, r0
 801f182:	4204      	tst	r4, r0
 801f184:	d046      	beq.n	801f214 <__ieee754_sqrtf+0xd8>
 801f186:	2280      	movs	r2, #128	@ 0x80
 801f188:	000f      	movs	r7, r1
 801f18a:	025b      	lsls	r3, r3, #9
 801f18c:	0a5b      	lsrs	r3, r3, #9
 801f18e:	0412      	lsls	r2, r2, #16
 801f190:	3f7f      	subs	r7, #127	@ 0x7f
 801f192:	4313      	orrs	r3, r2
 801f194:	07c9      	lsls	r1, r1, #31
 801f196:	d400      	bmi.n	801f19a <__ieee754_sqrtf+0x5e>
 801f198:	005b      	lsls	r3, r3, #1
 801f19a:	2400      	movs	r4, #0
 801f19c:	2180      	movs	r1, #128	@ 0x80
 801f19e:	2019      	movs	r0, #25
 801f1a0:	0026      	movs	r6, r4
 801f1a2:	107f      	asrs	r7, r7, #1
 801f1a4:	005b      	lsls	r3, r3, #1
 801f1a6:	0449      	lsls	r1, r1, #17
 801f1a8:	1875      	adds	r5, r6, r1
 801f1aa:	001a      	movs	r2, r3
 801f1ac:	429d      	cmp	r5, r3
 801f1ae:	dc02      	bgt.n	801f1b6 <__ieee754_sqrtf+0x7a>
 801f1b0:	186e      	adds	r6, r5, r1
 801f1b2:	1b5a      	subs	r2, r3, r5
 801f1b4:	1864      	adds	r4, r4, r1
 801f1b6:	3801      	subs	r0, #1
 801f1b8:	0053      	lsls	r3, r2, #1
 801f1ba:	0849      	lsrs	r1, r1, #1
 801f1bc:	2800      	cmp	r0, #0
 801f1be:	d1f3      	bne.n	801f1a8 <__ieee754_sqrtf+0x6c>
 801f1c0:	2a00      	cmp	r2, #0
 801f1c2:	d019      	beq.n	801f1f8 <__ieee754_sqrtf+0xbc>
 801f1c4:	4d17      	ldr	r5, [pc, #92]	@ (801f224 <__ieee754_sqrtf+0xe8>)
 801f1c6:	4e18      	ldr	r6, [pc, #96]	@ (801f228 <__ieee754_sqrtf+0xec>)
 801f1c8:	6828      	ldr	r0, [r5, #0]
 801f1ca:	6831      	ldr	r1, [r6, #0]
 801f1cc:	682b      	ldr	r3, [r5, #0]
 801f1ce:	9301      	str	r3, [sp, #4]
 801f1d0:	f7e2 f824 	bl	800121c <__aeabi_fsub>
 801f1d4:	1c01      	adds	r1, r0, #0
 801f1d6:	9801      	ldr	r0, [sp, #4]
 801f1d8:	f7e1 f9b4 	bl	8000544 <__aeabi_fcmple>
 801f1dc:	2800      	cmp	r0, #0
 801f1de:	d00b      	beq.n	801f1f8 <__ieee754_sqrtf+0xbc>
 801f1e0:	6828      	ldr	r0, [r5, #0]
 801f1e2:	6831      	ldr	r1, [r6, #0]
 801f1e4:	f7e1 fb6c 	bl	80008c0 <__aeabi_fadd>
 801f1e8:	682d      	ldr	r5, [r5, #0]
 801f1ea:	1c01      	adds	r1, r0, #0
 801f1ec:	1c28      	adds	r0, r5, #0
 801f1ee:	f7e1 f99f 	bl	8000530 <__aeabi_fcmplt>
 801f1f2:	2800      	cmp	r0, #0
 801f1f4:	d011      	beq.n	801f21a <__ieee754_sqrtf+0xde>
 801f1f6:	3402      	adds	r4, #2
 801f1f8:	23fc      	movs	r3, #252	@ 0xfc
 801f1fa:	1064      	asrs	r4, r4, #1
 801f1fc:	059b      	lsls	r3, r3, #22
 801f1fe:	18e3      	adds	r3, r4, r3
 801f200:	05fc      	lsls	r4, r7, #23
 801f202:	18e4      	adds	r4, r4, r3
 801f204:	e7ac      	b.n	801f160 <__ieee754_sqrtf+0x24>
 801f206:	005b      	lsls	r3, r3, #1
 801f208:	3201      	adds	r2, #1
 801f20a:	4203      	tst	r3, r0
 801f20c:	d0fb      	beq.n	801f206 <__ieee754_sqrtf+0xca>
 801f20e:	3a01      	subs	r2, #1
 801f210:	1a89      	subs	r1, r1, r2
 801f212:	e7b8      	b.n	801f186 <__ieee754_sqrtf+0x4a>
 801f214:	2080      	movs	r0, #128	@ 0x80
 801f216:	0400      	lsls	r0, r0, #16
 801f218:	e7f7      	b.n	801f20a <__ieee754_sqrtf+0xce>
 801f21a:	2301      	movs	r3, #1
 801f21c:	3401      	adds	r4, #1
 801f21e:	439c      	bics	r4, r3
 801f220:	e7ea      	b.n	801f1f8 <__ieee754_sqrtf+0xbc>
 801f222:	46c0      	nop			@ (mov r8, r8)
 801f224:	2000041c 	.word	0x2000041c
 801f228:	20000418 	.word	0x20000418

0801f22c <roundf>:
 801f22c:	0dc3      	lsrs	r3, r0, #23
 801f22e:	b2db      	uxtb	r3, r3
 801f230:	3b7f      	subs	r3, #127	@ 0x7f
 801f232:	0002      	movs	r2, r0
 801f234:	b510      	push	{r4, lr}
 801f236:	2b16      	cmp	r3, #22
 801f238:	dc13      	bgt.n	801f262 <roundf+0x36>
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	da07      	bge.n	801f24e <roundf+0x22>
 801f23e:	0fc2      	lsrs	r2, r0, #31
 801f240:	07d0      	lsls	r0, r2, #31
 801f242:	3301      	adds	r3, #1
 801f244:	d102      	bne.n	801f24c <roundf+0x20>
 801f246:	23fe      	movs	r3, #254	@ 0xfe
 801f248:	059b      	lsls	r3, r3, #22
 801f24a:	4318      	orrs	r0, r3
 801f24c:	bd10      	pop	{r4, pc}
 801f24e:	4908      	ldr	r1, [pc, #32]	@ (801f270 <roundf+0x44>)
 801f250:	4119      	asrs	r1, r3
 801f252:	4208      	tst	r0, r1
 801f254:	d0fa      	beq.n	801f24c <roundf+0x20>
 801f256:	2080      	movs	r0, #128	@ 0x80
 801f258:	03c0      	lsls	r0, r0, #15
 801f25a:	4118      	asrs	r0, r3
 801f25c:	1880      	adds	r0, r0, r2
 801f25e:	4388      	bics	r0, r1
 801f260:	e7f4      	b.n	801f24c <roundf+0x20>
 801f262:	2b80      	cmp	r3, #128	@ 0x80
 801f264:	d1f2      	bne.n	801f24c <roundf+0x20>
 801f266:	1c01      	adds	r1, r0, #0
 801f268:	f7e1 fb2a 	bl	80008c0 <__aeabi_fadd>
 801f26c:	e7ee      	b.n	801f24c <roundf+0x20>
 801f26e:	46c0      	nop			@ (mov r8, r8)
 801f270:	007fffff 	.word	0x007fffff

0801f274 <__ieee754_expf>:
 801f274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f276:	21ff      	movs	r1, #255	@ 0xff
 801f278:	0043      	lsls	r3, r0, #1
 801f27a:	1c04      	adds	r4, r0, #0
 801f27c:	085b      	lsrs	r3, r3, #1
 801f27e:	05c9      	lsls	r1, r1, #23
 801f280:	428b      	cmp	r3, r1
 801f282:	d904      	bls.n	801f28e <__ieee754_expf+0x1a>
 801f284:	1c01      	adds	r1, r0, #0
 801f286:	1c20      	adds	r0, r4, #0
 801f288:	f7e1 fb1a 	bl	80008c0 <__aeabi_fadd>
 801f28c:	e00d      	b.n	801f2aa <__ieee754_expf+0x36>
 801f28e:	0fc6      	lsrs	r6, r0, #31
 801f290:	428b      	cmp	r3, r1
 801f292:	d104      	bne.n	801f29e <__ieee754_expf+0x2a>
 801f294:	2e00      	cmp	r6, #0
 801f296:	d000      	beq.n	801f29a <__ieee754_expf+0x26>
 801f298:	e0ba      	b.n	801f410 <__ieee754_expf+0x19c>
 801f29a:	1c20      	adds	r0, r4, #0
 801f29c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f29e:	495d      	ldr	r1, [pc, #372]	@ (801f414 <__ieee754_expf+0x1a0>)
 801f2a0:	4288      	cmp	r0, r1
 801f2a2:	dd04      	ble.n	801f2ae <__ieee754_expf+0x3a>
 801f2a4:	2000      	movs	r0, #0
 801f2a6:	f000 f8f1 	bl	801f48c <__math_oflowf>
 801f2aa:	1c04      	adds	r4, r0, #0
 801f2ac:	e7f5      	b.n	801f29a <__ieee754_expf+0x26>
 801f2ae:	2800      	cmp	r0, #0
 801f2b0:	da06      	bge.n	801f2c0 <__ieee754_expf+0x4c>
 801f2b2:	4a59      	ldr	r2, [pc, #356]	@ (801f418 <__ieee754_expf+0x1a4>)
 801f2b4:	4293      	cmp	r3, r2
 801f2b6:	d903      	bls.n	801f2c0 <__ieee754_expf+0x4c>
 801f2b8:	2000      	movs	r0, #0
 801f2ba:	f000 f8e1 	bl	801f480 <__math_uflowf>
 801f2be:	e7f4      	b.n	801f2aa <__ieee754_expf+0x36>
 801f2c0:	4a56      	ldr	r2, [pc, #344]	@ (801f41c <__ieee754_expf+0x1a8>)
 801f2c2:	4293      	cmp	r3, r2
 801f2c4:	d96e      	bls.n	801f3a4 <__ieee754_expf+0x130>
 801f2c6:	4a56      	ldr	r2, [pc, #344]	@ (801f420 <__ieee754_expf+0x1ac>)
 801f2c8:	00b5      	lsls	r5, r6, #2
 801f2ca:	4293      	cmp	r3, r2
 801f2cc:	d84e      	bhi.n	801f36c <__ieee754_expf+0xf8>
 801f2ce:	4b55      	ldr	r3, [pc, #340]	@ (801f424 <__ieee754_expf+0x1b0>)
 801f2d0:	1c20      	adds	r0, r4, #0
 801f2d2:	5959      	ldr	r1, [r3, r5]
 801f2d4:	f7e1 ffa2 	bl	800121c <__aeabi_fsub>
 801f2d8:	4b53      	ldr	r3, [pc, #332]	@ (801f428 <__ieee754_expf+0x1b4>)
 801f2da:	1c07      	adds	r7, r0, #0
 801f2dc:	595b      	ldr	r3, [r3, r5]
 801f2de:	2501      	movs	r5, #1
 801f2e0:	1bad      	subs	r5, r5, r6
 801f2e2:	9300      	str	r3, [sp, #0]
 801f2e4:	1bad      	subs	r5, r5, r6
 801f2e6:	9900      	ldr	r1, [sp, #0]
 801f2e8:	1c38      	adds	r0, r7, #0
 801f2ea:	f7e1 ff97 	bl	800121c <__aeabi_fsub>
 801f2ee:	1c04      	adds	r4, r0, #0
 801f2f0:	1c21      	adds	r1, r4, #0
 801f2f2:	1c20      	adds	r0, r4, #0
 801f2f4:	f7e1 fe54 	bl	8000fa0 <__aeabi_fmul>
 801f2f8:	494c      	ldr	r1, [pc, #304]	@ (801f42c <__ieee754_expf+0x1b8>)
 801f2fa:	1c06      	adds	r6, r0, #0
 801f2fc:	f7e1 fe50 	bl	8000fa0 <__aeabi_fmul>
 801f300:	494b      	ldr	r1, [pc, #300]	@ (801f430 <__ieee754_expf+0x1bc>)
 801f302:	f7e1 ff8b 	bl	800121c <__aeabi_fsub>
 801f306:	1c31      	adds	r1, r6, #0
 801f308:	f7e1 fe4a 	bl	8000fa0 <__aeabi_fmul>
 801f30c:	4949      	ldr	r1, [pc, #292]	@ (801f434 <__ieee754_expf+0x1c0>)
 801f30e:	f7e1 fad7 	bl	80008c0 <__aeabi_fadd>
 801f312:	1c31      	adds	r1, r6, #0
 801f314:	f7e1 fe44 	bl	8000fa0 <__aeabi_fmul>
 801f318:	4947      	ldr	r1, [pc, #284]	@ (801f438 <__ieee754_expf+0x1c4>)
 801f31a:	f7e1 ff7f 	bl	800121c <__aeabi_fsub>
 801f31e:	1c31      	adds	r1, r6, #0
 801f320:	f7e1 fe3e 	bl	8000fa0 <__aeabi_fmul>
 801f324:	4945      	ldr	r1, [pc, #276]	@ (801f43c <__ieee754_expf+0x1c8>)
 801f326:	f7e1 facb 	bl	80008c0 <__aeabi_fadd>
 801f32a:	1c31      	adds	r1, r6, #0
 801f32c:	f7e1 fe38 	bl	8000fa0 <__aeabi_fmul>
 801f330:	1c01      	adds	r1, r0, #0
 801f332:	1c20      	adds	r0, r4, #0
 801f334:	f7e1 ff72 	bl	800121c <__aeabi_fsub>
 801f338:	1c01      	adds	r1, r0, #0
 801f33a:	1c06      	adds	r6, r0, #0
 801f33c:	1c20      	adds	r0, r4, #0
 801f33e:	f7e1 fe2f 	bl	8000fa0 <__aeabi_fmul>
 801f342:	9001      	str	r0, [sp, #4]
 801f344:	2d00      	cmp	r5, #0
 801f346:	d140      	bne.n	801f3ca <__ieee754_expf+0x156>
 801f348:	2180      	movs	r1, #128	@ 0x80
 801f34a:	1c30      	adds	r0, r6, #0
 801f34c:	05c9      	lsls	r1, r1, #23
 801f34e:	f7e1 ff65 	bl	800121c <__aeabi_fsub>
 801f352:	1c01      	adds	r1, r0, #0
 801f354:	9801      	ldr	r0, [sp, #4]
 801f356:	f7e1 fc3d 	bl	8000bd4 <__aeabi_fdiv>
 801f35a:	1c21      	adds	r1, r4, #0
 801f35c:	f7e1 ff5e 	bl	800121c <__aeabi_fsub>
 801f360:	1c01      	adds	r1, r0, #0
 801f362:	20fe      	movs	r0, #254	@ 0xfe
 801f364:	0580      	lsls	r0, r0, #22
 801f366:	f7e1 ff59 	bl	800121c <__aeabi_fsub>
 801f36a:	e79e      	b.n	801f2aa <__ieee754_expf+0x36>
 801f36c:	4934      	ldr	r1, [pc, #208]	@ (801f440 <__ieee754_expf+0x1cc>)
 801f36e:	1c20      	adds	r0, r4, #0
 801f370:	f7e1 fe16 	bl	8000fa0 <__aeabi_fmul>
 801f374:	4b33      	ldr	r3, [pc, #204]	@ (801f444 <__ieee754_expf+0x1d0>)
 801f376:	5959      	ldr	r1, [r3, r5]
 801f378:	f7e1 faa2 	bl	80008c0 <__aeabi_fadd>
 801f37c:	f7e2 f908 	bl	8001590 <__aeabi_f2iz>
 801f380:	0005      	movs	r5, r0
 801f382:	f7e2 f925 	bl	80015d0 <__aeabi_i2f>
 801f386:	4930      	ldr	r1, [pc, #192]	@ (801f448 <__ieee754_expf+0x1d4>)
 801f388:	1c06      	adds	r6, r0, #0
 801f38a:	f7e1 fe09 	bl	8000fa0 <__aeabi_fmul>
 801f38e:	1c01      	adds	r1, r0, #0
 801f390:	1c20      	adds	r0, r4, #0
 801f392:	f7e1 ff43 	bl	800121c <__aeabi_fsub>
 801f396:	492d      	ldr	r1, [pc, #180]	@ (801f44c <__ieee754_expf+0x1d8>)
 801f398:	1c07      	adds	r7, r0, #0
 801f39a:	1c30      	adds	r0, r6, #0
 801f39c:	f7e1 fe00 	bl	8000fa0 <__aeabi_fmul>
 801f3a0:	9000      	str	r0, [sp, #0]
 801f3a2:	e7a0      	b.n	801f2e6 <__ieee754_expf+0x72>
 801f3a4:	22d0      	movs	r2, #208	@ 0xd0
 801f3a6:	0592      	lsls	r2, r2, #22
 801f3a8:	4293      	cmp	r3, r2
 801f3aa:	d20c      	bcs.n	801f3c6 <__ieee754_expf+0x152>
 801f3ac:	4928      	ldr	r1, [pc, #160]	@ (801f450 <__ieee754_expf+0x1dc>)
 801f3ae:	1c20      	adds	r0, r4, #0
 801f3b0:	f7e1 fa86 	bl	80008c0 <__aeabi_fadd>
 801f3b4:	21fe      	movs	r1, #254	@ 0xfe
 801f3b6:	0589      	lsls	r1, r1, #22
 801f3b8:	f7e1 f8ce 	bl	8000558 <__aeabi_fcmpgt>
 801f3bc:	1e05      	subs	r5, r0, #0
 801f3be:	d097      	beq.n	801f2f0 <__ieee754_expf+0x7c>
 801f3c0:	21fe      	movs	r1, #254	@ 0xfe
 801f3c2:	0589      	lsls	r1, r1, #22
 801f3c4:	e75f      	b.n	801f286 <__ieee754_expf+0x12>
 801f3c6:	2500      	movs	r5, #0
 801f3c8:	e792      	b.n	801f2f0 <__ieee754_expf+0x7c>
 801f3ca:	2080      	movs	r0, #128	@ 0x80
 801f3cc:	1c31      	adds	r1, r6, #0
 801f3ce:	05c0      	lsls	r0, r0, #23
 801f3d0:	f7e1 ff24 	bl	800121c <__aeabi_fsub>
 801f3d4:	1c01      	adds	r1, r0, #0
 801f3d6:	9801      	ldr	r0, [sp, #4]
 801f3d8:	f7e1 fbfc 	bl	8000bd4 <__aeabi_fdiv>
 801f3dc:	1c01      	adds	r1, r0, #0
 801f3de:	9800      	ldr	r0, [sp, #0]
 801f3e0:	f7e1 ff1c 	bl	800121c <__aeabi_fsub>
 801f3e4:	1c39      	adds	r1, r7, #0
 801f3e6:	f7e1 ff19 	bl	800121c <__aeabi_fsub>
 801f3ea:	1c01      	adds	r1, r0, #0
 801f3ec:	20fe      	movs	r0, #254	@ 0xfe
 801f3ee:	0580      	lsls	r0, r0, #22
 801f3f0:	f7e1 ff14 	bl	800121c <__aeabi_fsub>
 801f3f4:	002b      	movs	r3, r5
 801f3f6:	337d      	adds	r3, #125	@ 0x7d
 801f3f8:	db02      	blt.n	801f400 <__ieee754_expf+0x18c>
 801f3fa:	05ec      	lsls	r4, r5, #23
 801f3fc:	1824      	adds	r4, r4, r0
 801f3fe:	e74c      	b.n	801f29a <__ieee754_expf+0x26>
 801f400:	21d8      	movs	r1, #216	@ 0xd8
 801f402:	3564      	adds	r5, #100	@ 0x64
 801f404:	05ed      	lsls	r5, r5, #23
 801f406:	1828      	adds	r0, r5, r0
 801f408:	0509      	lsls	r1, r1, #20
 801f40a:	f7e1 fdc9 	bl	8000fa0 <__aeabi_fmul>
 801f40e:	e74c      	b.n	801f2aa <__ieee754_expf+0x36>
 801f410:	2400      	movs	r4, #0
 801f412:	e742      	b.n	801f29a <__ieee754_expf+0x26>
 801f414:	42b17217 	.word	0x42b17217
 801f418:	42cff1b5 	.word	0x42cff1b5
 801f41c:	3eb17218 	.word	0x3eb17218
 801f420:	3f851591 	.word	0x3f851591
 801f424:	08021208 	.word	0x08021208
 801f428:	08021200 	.word	0x08021200
 801f42c:	3331bb4c 	.word	0x3331bb4c
 801f430:	35ddea0e 	.word	0x35ddea0e
 801f434:	388ab355 	.word	0x388ab355
 801f438:	3b360b61 	.word	0x3b360b61
 801f43c:	3e2aaaab 	.word	0x3e2aaaab
 801f440:	3fb8aa3b 	.word	0x3fb8aa3b
 801f444:	08021210 	.word	0x08021210
 801f448:	3f317180 	.word	0x3f317180
 801f44c:	3717f7d1 	.word	0x3717f7d1
 801f450:	7149f2ca 	.word	0x7149f2ca

0801f454 <with_errnof>:
 801f454:	b570      	push	{r4, r5, r6, lr}
 801f456:	000d      	movs	r5, r1
 801f458:	1c04      	adds	r4, r0, #0
 801f45a:	f7fd f881 	bl	801c560 <__errno>
 801f45e:	6005      	str	r5, [r0, #0]
 801f460:	1c20      	adds	r0, r4, #0
 801f462:	bd70      	pop	{r4, r5, r6, pc}

0801f464 <xflowf>:
 801f464:	b510      	push	{r4, lr}
 801f466:	1c0b      	adds	r3, r1, #0
 801f468:	2800      	cmp	r0, #0
 801f46a:	d002      	beq.n	801f472 <xflowf+0xe>
 801f46c:	2380      	movs	r3, #128	@ 0x80
 801f46e:	061b      	lsls	r3, r3, #24
 801f470:	18cb      	adds	r3, r1, r3
 801f472:	1c18      	adds	r0, r3, #0
 801f474:	f7e1 fd94 	bl	8000fa0 <__aeabi_fmul>
 801f478:	2122      	movs	r1, #34	@ 0x22
 801f47a:	f7ff ffeb 	bl	801f454 <with_errnof>
 801f47e:	bd10      	pop	{r4, pc}

0801f480 <__math_uflowf>:
 801f480:	2180      	movs	r1, #128	@ 0x80
 801f482:	b510      	push	{r4, lr}
 801f484:	0549      	lsls	r1, r1, #21
 801f486:	f7ff ffed 	bl	801f464 <xflowf>
 801f48a:	bd10      	pop	{r4, pc}

0801f48c <__math_oflowf>:
 801f48c:	21e0      	movs	r1, #224	@ 0xe0
 801f48e:	b510      	push	{r4, lr}
 801f490:	05c9      	lsls	r1, r1, #23
 801f492:	f7ff ffe7 	bl	801f464 <xflowf>
 801f496:	bd10      	pop	{r4, pc}

0801f498 <_init>:
 801f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f49a:	46c0      	nop			@ (mov r8, r8)
 801f49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f49e:	bc08      	pop	{r3}
 801f4a0:	469e      	mov	lr, r3
 801f4a2:	4770      	bx	lr

0801f4a4 <_fini>:
 801f4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4a6:	46c0      	nop			@ (mov r8, r8)
 801f4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4aa:	bc08      	pop	{r3}
 801f4ac:	469e      	mov	lr, r3
 801f4ae:	4770      	bx	lr
